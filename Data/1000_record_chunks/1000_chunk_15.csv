record_number,buggy_code,fixed_code,code_similarity
14001,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  AppLog.i(AppLog.T.NOTIFS,""String_Node_Str"");
  setContentView(R.layout.notifications_detail_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState == null) {
    String noteId=getIntent().getStringExtra(NotificationsListFragment.NOTE_ID_EXTRA);
    if (noteId == null) {
      showErrorToastAndFinish();
      return;
    }
    final Note note=NotificationsTable.getNoteById(noteId);
    if (note == null) {
      showErrorToastAndFinish();
      return;
    }
    Map<String,String> properties=new HashMap<>();
    properties.put(""String_Node_Str"",note.getType());
    AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS,properties);
    Fragment detailFragment=getDetailFragmentForNote(note);
    getFragmentManager().beginTransaction().add(R.id.notifications_detail_container,detailFragment).commitAllowingStateLoss();
    if (getSupportActionBar() != null) {
      String title=note.getTitle();
      if (TextUtils.isEmpty(title)) {
switch (note.getType()) {
case NOTE_FOLLOW_TYPE:
          title=getString(R.string.follows);
        break;
case NOTE_COMMENT_LIKE_TYPE:
      title=getString(R.string.comment_likes);
    break;
case NOTE_LIKE_TYPE:
  title=getString(R.string.like);
break;
case NOTE_COMMENT_TYPE:
title=getString(R.string.comment);
break;
}
}
getSupportActionBar().setTitle(title);
}
if (note.isUnread()) {
NotificationsActions.markNoteAsRead(note);
EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
}
if (getSupportActionBar() != null) {
getSupportActionBar().setTitle(note.getTitle());
}
NotificationsActions.markNoteAsRead(note);
GCMMessageService.removeNotificationWithNoteIdFromSystemBar(this,noteId);
}
 else if (savedInstanceState.containsKey(ARG_TITLE) && getSupportActionBar() != null) {
getSupportActionBar().setTitle(StringUtils.notNullStr(savedInstanceState.getString(ARG_TITLE)));
}
if (!getIntent().getBooleanExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,false)) {
getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
}
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  AppLog.i(AppLog.T.NOTIFS,""String_Node_Str"");
  setContentView(R.layout.notifications_detail_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState == null) {
    String noteId=getIntent().getStringExtra(NotificationsListFragment.NOTE_ID_EXTRA);
    if (noteId == null) {
      showErrorToastAndFinish();
      return;
    }
    final Note note=NotificationsTable.getNoteById(noteId);
    if (note == null) {
      showErrorToastAndFinish();
      return;
    }
    Map<String,String> properties=new HashMap<>();
    properties.put(""String_Node_Str"",note.getType());
    AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS,properties);
    Fragment detailFragment=getDetailFragmentForNote(note);
    getFragmentManager().beginTransaction().add(R.id.notifications_detail_container,detailFragment).commitAllowingStateLoss();
    if (getSupportActionBar() != null) {
      String title=note.getTitle();
      if (TextUtils.isEmpty(title)) {
switch (note.getType()) {
case NOTE_FOLLOW_TYPE:
          title=getString(R.string.follows);
        break;
case NOTE_COMMENT_LIKE_TYPE:
      title=getString(R.string.comment_likes);
    break;
case NOTE_LIKE_TYPE:
  title=getString(R.string.like);
break;
case NOTE_COMMENT_TYPE:
title=getString(R.string.comment);
break;
}
}
getSupportActionBar().setTitle(title);
}
if (getSupportActionBar() != null) {
getSupportActionBar().setTitle(note.getTitle());
}
NotificationsActions.markNoteAsRead(note);
GCMMessageService.removeNotificationWithNoteIdFromSystemBar(this,noteId);
EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
}
 else if (savedInstanceState.containsKey(ARG_TITLE) && getSupportActionBar() != null) {
getSupportActionBar().setTitle(StringUtils.notNullStr(savedInstanceState.getString(ARG_TITLE)));
}
if (!getIntent().getBooleanExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,false)) {
getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
}
}",0.9510332434860737
14002,"public static void markNoteAsRead(final Note note){
  if (note == null) {
    return;
  }
  if (note.isUnread()) {
    WordPress.getRestClientUtilsV1_1().markNoteAsRead(note.getId(),note.getUnreadCount(),new RestRequest.Listener(){
      @Override public void onResponse(      JSONObject response){
        note.setUnreadCount(""String_Node_Str"");
        NotificationsTable.putNote(note);
      }
    }
,new RestRequest.ErrorListener(){
      @Override public void onErrorResponse(      VolleyError error){
        AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
      }
    }
);
    EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
  }
}","public static void markNoteAsRead(final Note note){
  if (note == null) {
    return;
  }
  if (note.isUnread()) {
    WordPress.getRestClientUtilsV1_1().decrementUnreadCount(note.getId(),""String_Node_Str"",new RestRequest.Listener(){
      @Override public void onResponse(      JSONObject response){
        note.setRead();
        NotificationsTable.putNote(note);
        EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
      }
    }
,new RestRequest.ErrorListener(){
      @Override public void onErrorResponse(      VolleyError error){
        AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
      }
    }
);
  }
}",0.7331288343558282
14003,"@Override public void onResponse(JSONObject response){
  note.setUnreadCount(""String_Node_Str"");
  NotificationsTable.putNote(note);
}","@Override public void onResponse(JSONObject response){
  note.setRead();
  NotificationsTable.putNote(note);
  EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
}",0.6791277258566978
14004,"@Override public void onSaveInstanceState(Bundle outState){
  outState.putBoolean(ReaderConstants.ARG_IS_FEED,mIsFeed);
  outState.putLong(ReaderConstants.ARG_BLOG_ID,mBlogId);
  outState.putLong(ReaderConstants.ARG_POST_ID,mPostId);
  outState.putString(ReaderConstants.ARG_BLOG_ID,mBlogSlug);
  outState.putString(ReaderConstants.ARG_POST_ID,mPostSlug);
  outState.putBoolean(ReaderConstants.ARG_IS_RELATED_POST,mIsRelatedPost);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_UPDATED,mHasAlreadyUpdatedPost);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_REQUESTED,mHasAlreadyRequestedPost);
  outState.putSerializable(ReaderConstants.ARG_POST_LIST_TYPE,getPostListType());
  mPostHistory.saveInstance(outState);
  if (!TextUtils.isEmpty(mErrorMessage)) {
    outState.putString(ReaderConstants.KEY_ERROR_MESSAGE,mErrorMessage);
  }
  super.onSaveInstanceState(outState);
}","@Override public void onSaveInstanceState(Bundle outState){
  outState.putBoolean(ReaderConstants.ARG_IS_FEED,mIsFeed);
  outState.putLong(ReaderConstants.ARG_BLOG_ID,mBlogId);
  outState.putLong(ReaderConstants.ARG_POST_ID,mPostId);
  outState.putString(ReaderConstants.ARG_BLOG_SLUG,mBlogSlug);
  outState.putString(ReaderConstants.ARG_POST_SLUG,mPostSlug);
  outState.putBoolean(ReaderConstants.ARG_IS_RELATED_POST,mIsRelatedPost);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_UPDATED,mHasAlreadyUpdatedPost);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_REQUESTED,mHasAlreadyRequestedPost);
  outState.putSerializable(ReaderConstants.ARG_POST_LIST_TYPE,getPostListType());
  mPostHistory.saveInstance(outState);
  if (!TextUtils.isEmpty(mErrorMessage)) {
    outState.putString(ReaderConstants.KEY_ERROR_MESSAGE,mErrorMessage);
  }
  super.onSaveInstanceState(outState);
}",0.993212669683258
14005,"private void addActionsForCommentNotification(NotificationCompat.Builder builder,String noteId){
  boolean areActionsSet=false;
  Note note=NotificationsTable.getNoteById(noteId);
  if (note != null) {
    if (note.canReply()) {
      addCommentReplyActionForCommentNotification(builder,noteId);
    }
    if (note.getCommentStatus().equals(CommentStatus.UNAPPROVED)) {
      if (note.canModerate()) {
        addCommentApproveActionForCommentNotification(builder,noteId);
      }
    }
 else {
      if (note.canLike()) {
        addCommentLikeActionForCommentNotification(builder,noteId);
      }
      if (note != null) {
        if (note.canReply()) {
          addCommentReplyActionForCommentNotification(builder,noteId);
        }
        if (note.getCommentStatus().equals(CommentStatus.UNAPPROVED)) {
          if (note.canModerate()) {
            addCommentApproveActionForCommentNotification(builder,noteId);
          }
        }
 else {
          Blog blog=WordPress.wpDB.instantiateBlogByRemoteId(note.getSiteId());
          boolean isJetPackSite=blog != null ? blog.isJetpackPowered() : false;
          if (note.canLike() && !isJetPackSite) {
            addCommentLikeActionForCommentNotification(builder,noteId);
          }
        }
      }
      areActionsSet=true;
    }
  }
  if (!areActionsSet) {
    addCommentReplyActionForCommentNotification(builder,noteId);
  }
}","private void addActionsForCommentNotification(NotificationCompat.Builder builder,String noteId){
  boolean areActionsSet=false;
  Note note=NotificationsTable.getNoteById(noteId);
  if (note != null) {
    if (note.canReply()) {
      addCommentReplyActionForCommentNotification(builder,noteId);
    }
    if (note.getCommentStatus().equals(CommentStatus.UNAPPROVED)) {
      if (note.canModerate()) {
        addCommentApproveActionForCommentNotification(builder,noteId);
      }
    }
 else {
      if (note.canLike()) {
        Blog blog=WordPress.wpDB.instantiateBlogByRemoteId(note.getSiteId());
        boolean isJetPackSite=(blog != null) && blog.isJetpackPowered();
        if (note.canLike() && !isJetPackSite) {
          addCommentLikeActionForCommentNotification(builder,noteId);
        }
      }
    }
    areActionsSet=true;
  }
  if (!areActionsSet) {
    addCommentReplyActionForCommentNotification(builder,noteId);
  }
}",0.8008583690987124
14006,"private void showPost(){
  if (!TextUtils.isEmpty(mBlogId) && !TextUtils.isEmpty(mPostId)) {
    try {
      final long blogId=Long.parseLong(mBlogId);
      final long postId=Long.parseLong(mPostId);
      if (mIsFeed) {
        AnalyticsUtils.trackWithFeedPostDetails(AnalyticsTracker.Stat.READER_FEED_POST_INTERCEPTED,blogId,postId);
      }
 else {
        AnalyticsUtils.trackWithBlogPostDetails(AnalyticsTracker.Stat.READER_FEED_POST_INTERCEPTED,blogId,postId);
      }
      ReaderActivityLauncher.showReaderPostDetail(this,mIsFeed,blogId,postId,false);
    }
 catch (    NumberFormatException e) {
      AppLog.e(T.READER,e);
    }
  }
 else {
    ToastUtils.showToast(this,R.string.error_generic);
  }
  finish();
}","private void showPost(){
  if (!TextUtils.isEmpty(mBlogId) && !TextUtils.isEmpty(mPostId)) {
    try {
      final long blogId=Long.parseLong(mBlogId);
      final long postId=Long.parseLong(mPostId);
      if (mIsFeed) {
        AnalyticsUtils.trackWithFeedPostDetails(AnalyticsTracker.Stat.READER_FEED_POST_INTERCEPTED,blogId,postId);
      }
 else {
        AnalyticsUtils.trackWithBlogPostDetails(AnalyticsTracker.Stat.READER_BLOG_POST_INTERCEPTED,blogId,postId);
      }
      ReaderActivityLauncher.showReaderPostDetail(this,mIsFeed,blogId,postId,false);
    }
 catch (    NumberFormatException e) {
      AppLog.e(T.READER,e);
    }
  }
 else {
    ToastUtils.showToast(this,R.string.error_generic);
  }
  finish();
}",0.994475138121547
14007,"public void showRelatedPosts(ReaderRelatedPostList relatedPosts,RelatedPostsType relatedPostsType,String siteName){
  if (relatedPosts.size() == 0) {
    return;
  }
  ViewGroup container=(ViewGroup)findViewById(R.id.container_related_posts);
  container.removeAllViews();
  int avatarSize=DisplayUtils.dpToPx(getContext(),getResources().getDimensionPixelSize(R.dimen.avatar_sz_extra_small));
  boolean isGlobal=relatedPostsType == ReaderPostActions.RelatedPostsType.GLOBAL;
  LayoutInflater inflater=LayoutInflater.from(getContext());
  for (int index=0; index < relatedPosts.size(); index++) {
    final ReaderRelatedPost relatedPost=relatedPosts.get(index);
    View postView=inflater.inflate(R.layout.reader_related_post,container,false);
    TextView txtTitle=(TextView)postView.findViewById(R.id.text_related_post_title);
    TextView txtExcerpt=(TextView)postView.findViewById(R.id.text_related_post_excerpt);
    View siteHeader=postView.findViewById(R.id.layout_related_post_site_header);
    txtTitle.setText(relatedPost.getTitle());
    if (relatedPost.hasExcerpt()) {
      txtExcerpt.setText(relatedPost.getExcerpt());
      txtExcerpt.setVisibility(View.VISIBLE);
    }
 else {
      txtExcerpt.setVisibility(View.GONE);
    }
    if (isGlobal) {
      WPNetworkImageView imgAvatar=(WPNetworkImageView)siteHeader.findViewById(R.id.image_avatar);
      TextView txtSiteName=(TextView)siteHeader.findViewById(R.id.text_site_name);
      TextView txtAuthorName=(TextView)siteHeader.findViewById(R.id.text_author_name);
      txtSiteName.setText(relatedPost.getSiteName());
      txtAuthorName.setText(relatedPost.getAuthorName());
      if (relatedPost.hasAuthorAvatarUrl()) {
        String avatarUrl=PhotonUtils.getPhotonImageUrl(relatedPost.getAuthorAvatarUrl(),avatarSize,avatarSize);
        imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
      }
 else {
        imgAvatar.showDefaultGravatarImage();
      }
      siteHeader.setVisibility(View.VISIBLE);
    }
 else {
      siteHeader.setVisibility(View.GONE);
    }
    postView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mClickListener != null) {
          mClickListener.onRelatedPostClick(view,relatedPost.getSiteId(),relatedPost.getPostId());
        }
      }
    }
);
    container.addView(postView);
  }
  TextView label=(TextView)findViewById(R.id.text_related_posts_label);
  if (isGlobal) {
    label.setText(getContext().getString(R.string.reader_label_global_related_posts));
  }
 else {
    label.setText(String.format(getContext().getString(R.string.reader_label_local_related_posts),siteName));
  }
}","public void showRelatedPosts(ReaderRelatedPostList relatedPosts,RelatedPostsType relatedPostsType,String siteName){
  if (relatedPosts.size() == 0) {
    return;
  }
  ViewGroup container=(ViewGroup)findViewById(R.id.container_related_posts);
  container.removeAllViews();
  int avatarSize=DisplayUtils.dpToPx(getContext(),getResources().getDimensionPixelSize(R.dimen.avatar_sz_extra_small));
  boolean isGlobal=relatedPostsType == ReaderPostActions.RelatedPostsType.GLOBAL;
  LayoutInflater inflater=LayoutInflater.from(getContext());
  for (int index=0; index < relatedPosts.size(); index++) {
    final ReaderRelatedPost relatedPost=relatedPosts.get(index);
    View postView=inflater.inflate(R.layout.reader_related_post,container,false);
    TextView txtTitle=(TextView)postView.findViewById(R.id.text_related_post_title);
    TextView txtExcerpt=(TextView)postView.findViewById(R.id.text_related_post_excerpt);
    View siteHeader=postView.findViewById(R.id.layout_related_post_site_header);
    txtTitle.setText(relatedPost.getTitle());
    if (relatedPost.hasExcerpt()) {
      txtExcerpt.setText(relatedPost.getExcerpt());
      txtExcerpt.setVisibility(View.VISIBLE);
    }
 else {
      txtExcerpt.setVisibility(View.GONE);
    }
    if (isGlobal) {
      WPNetworkImageView imgAvatar=(WPNetworkImageView)siteHeader.findViewById(R.id.image_avatar);
      TextView txtSiteName=(TextView)siteHeader.findViewById(R.id.text_site_name);
      TextView txtAuthorName=(TextView)siteHeader.findViewById(R.id.text_author_name);
      txtSiteName.setText(relatedPost.getSiteName());
      txtAuthorName.setText(relatedPost.getAuthorName());
      if (relatedPost.hasAuthorAvatarUrl()) {
        String avatarUrl=GravatarUtils.fixGravatarUrl(relatedPost.getAuthorAvatarUrl(),avatarSize);
        imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
      }
 else {
        imgAvatar.showDefaultGravatarImage();
      }
      siteHeader.setVisibility(View.VISIBLE);
    }
 else {
      siteHeader.setVisibility(View.GONE);
    }
    postView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mClickListener != null) {
          mClickListener.onRelatedPostClick(view,relatedPost.getSiteId(),relatedPost.getPostId());
        }
      }
    }
);
    container.addView(postView);
  }
  TextView label=(TextView)findViewById(R.id.text_related_posts_label);
  if (isGlobal) {
    label.setText(getContext().getString(R.string.reader_label_global_related_posts));
  }
 else {
    label.setText(String.format(getContext().getString(R.string.reader_label_local_related_posts),siteName));
  }
}",0.9906367041198502
14008,"private ActionBar getActionBar(){
  if (!isAdded()) {
    return null;
  }
  if (getActivity() instanceof AppCompatActivity) {
    return ((AppCompatActivity)getActivity()).getSupportActionBar();
  }
 else {
    return null;
  }
}","private ActionBar getActionBar(){
  if (getActivity() instanceof AppCompatActivity) {
    return ((AppCompatActivity)getActivity()).getSupportActionBar();
  }
 else {
    return null;
  }
}",0.9021479713603818
14009,"private void toggleFollowStatus(){
  if (!NetworkUtils.checkConnection(getContext())) {
    return;
  }
  final boolean isAskingToFollow=!mPost.isFollowedByCurrentUser;
  ReaderActions.ActionListener listener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (getContext() == null) {
        return;
      }
      mFollowButton.setEnabled(true);
      if (!succeeded) {
        int errResId=isAskingToFollow ? R.string.reader_toast_err_follow_blog : R.string.reader_toast_err_unfollow_blog;
        ToastUtils.showToast(getContext(),errResId);
        mFollowButton.setIsFollowed(!isAskingToFollow);
      }
    }
  }
;
  mFollowButton.setEnabled(false);
  boolean result;
  if (mPost.feedId != 0) {
    result=ReaderBlogActions.followFeedById(mPost.feedId,isAskingToFollow,listener);
  }
 else {
    result=ReaderBlogActions.followBlogById(mPost.blogId,isAskingToFollow,listener);
  }
  if (result) {
    mFollowButton.setIsFollowedAnimated(isAskingToFollow);
  }
}","private void toggleFollowStatus(){
  if (!NetworkUtils.checkConnection(getContext())) {
    return;
  }
  final boolean isAskingToFollow=!mPost.isFollowedByCurrentUser;
  ReaderActions.ActionListener listener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (getContext() == null)       return;
      mFollowButton.setEnabled(true);
      if (succeeded) {
        mPost.isFollowedByCurrentUser=isAskingToFollow;
        showFollowerCount();
      }
 else {
        int errResId=isAskingToFollow ? R.string.reader_toast_err_follow_blog : R.string.reader_toast_err_unfollow_blog;
        ToastUtils.showToast(getContext(),errResId);
        mFollowButton.setIsFollowed(!isAskingToFollow);
      }
    }
  }
;
  mFollowButton.setEnabled(false);
  boolean result;
  if (mPost.feedId != 0) {
    result=ReaderBlogActions.followFeedById(mPost.feedId,isAskingToFollow,listener);
  }
 else {
    result=ReaderBlogActions.followBlogById(mPost.blogId,isAskingToFollow,listener);
  }
  if (result) {
    mFollowButton.setIsFollowedAnimated(isAskingToFollow);
  }
}",0.8990654205607477
14010,"@Override public void onActionResult(boolean succeeded){
  if (getContext() == null) {
    return;
  }
  mFollowButton.setEnabled(true);
  if (!succeeded) {
    int errResId=isAskingToFollow ? R.string.reader_toast_err_follow_blog : R.string.reader_toast_err_unfollow_blog;
    ToastUtils.showToast(getContext(),errResId);
    mFollowButton.setIsFollowed(!isAskingToFollow);
  }
}","@Override public void onActionResult(boolean succeeded){
  if (getContext() == null)   return;
  mFollowButton.setEnabled(true);
  if (succeeded) {
    mPost.isFollowedByCurrentUser=isAskingToFollow;
    showFollowerCount();
  }
 else {
    int errResId=isAskingToFollow ? R.string.reader_toast_err_follow_blog : R.string.reader_toast_err_unfollow_blog;
    ToastUtils.showToast(getContext(),errResId);
    mFollowButton.setIsFollowed(!isAskingToFollow);
  }
}",0.3380952380952381
14011,"private static void assignTagsFromJson(ReaderPost post,JSONObject jsonTags){
  if (jsonTags == null) {
    return;
  }
  Iterator<String> it=jsonTags.keys();
  if (!it.hasNext()) {
    return;
  }
  String mostPopularTag=null;
  String nextMostPopularTag=null;
  int popularCount=0;
  while (it.hasNext()) {
    JSONObject jsonThisTag=jsonTags.optJSONObject(it.next());
    int postCount=jsonThisTag.optInt(""String_Node_Str"");
    if (postCount > popularCount) {
      nextMostPopularTag=mostPopularTag;
      mostPopularTag=JSONUtils.getStringDecoded(jsonThisTag,""String_Node_Str"");
      popularCount=postCount;
    }
  }
  if (!post.hasPrimaryTag()) {
    post.setPrimaryTag(mostPopularTag);
  }
  post.setSecondaryTag(nextMostPopularTag);
}","private static void assignTagsFromJson(ReaderPost post,JSONObject jsonTags){
  if (jsonTags == null) {
    return;
  }
  Iterator<String> it=jsonTags.keys();
  if (!it.hasNext()) {
    return;
  }
  String mostPopularTag=null;
  String nextMostPopularTag=null;
  int popularCount=0;
  while (it.hasNext()) {
    JSONObject jsonThisTag=jsonTags.optJSONObject(it.next());
    String thisTagName=JSONUtils.getStringDecoded(jsonThisTag,""String_Node_Str"");
    int postCount=jsonThisTag.optInt(""String_Node_Str"");
    if (postCount > popularCount) {
      nextMostPopularTag=mostPopularTag;
      mostPopularTag=thisTagName;
      popularCount=postCount;
    }
 else     if (nextMostPopularTag == null) {
      nextMostPopularTag=thisTagName;
    }
  }
  if (!post.hasPrimaryTag()) {
    post.setPrimaryTag(mostPopularTag);
  }
  post.setSecondaryTag(nextMostPopularTag);
}",0.7258064516129032
14012,"private void addTag(final String tagName){
  LayoutInflater inflater=LayoutInflater.from(getContext());
  View view=inflater.inflate(R.layout.reader_tag_strip_label,mContainer,false);
  TextView txtTag=(TextView)view.findViewById(R.id.text_tag);
  txtTag.setText(mNumTags > 0 ? ""String_Node_Str"" + tagName : tagName);
  txtTag.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      ReaderTag tag=ReaderUtils.createTagFromTagName(tagName,ReaderTagType.FOLLOWED);
      ReaderActivityLauncher.showReaderTagPreview(v.getContext(),tag);
    }
  }
);
  mContainer.addView(view);
  mNumTags++;
}","private void addTag(final String tagName){
  LayoutInflater inflater=LayoutInflater.from(getContext());
  View view=inflater.inflate(R.layout.reader_tag_strip_label,mContainer,false);
  TextView txtTag=(TextView)view.findViewById(R.id.text_tag);
  txtTag.setText(mNumTags > 0 ? ""String_Node_Str"" + tagName : tagName);
  txtTag.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      ReaderTag tag=ReaderUtils.createTagFromTagName(tagName,ReaderTagType.FOLLOWED);
      ReaderActivityLauncher.showReaderTagPreview(v.getContext(),tag);
    }
  }
);
  mContainer.addView(view);
  mNumTags++;
  AppLog.w(AppLog.T.READER,""String_Node_Str"" + tagName);
}",0.9566539923954372
14013,void onValidationEnd();,"@Override public void onValidationEnd(){
  if (!checkAndSend()) {
    enableSendButton(true);
  }
}",0.3770491803278688
14014,"@Override public void onValidationEnd(){
  if (!checkAndSend()) {
    enableSendButton(true);
  }
}",void onValidationEnd();,0.3770491803278688
14015,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  PeopleViewHolder peopleViewHolder=(PeopleViewHolder)holder;
  final Person person=getPerson(position);
  if (person != null) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),mAvatarSz);
    peopleViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    peopleViewHolder.txtDisplayName.setText(StringUtils.unescapeHTML(person.getDisplayName()));
    if (person.getRole() != null) {
      peopleViewHolder.txtRole.setText(StringUtils.capitalize(person.getRole().toDisplayString()));
    }
    if (!person.getUsername().isEmpty()) {
      peopleViewHolder.txtUsername.setVisibility(View.VISIBLE);
      peopleViewHolder.txtUsername.setText(String.format(""String_Node_Str"",person.getUsername()));
    }
 else {
      peopleViewHolder.txtUsername.setVisibility(View.GONE);
    }
    if (person.getPersonType() == Person.PersonType.USER || person.getPersonType() == Person.PersonType.VIEWER) {
      peopleViewHolder.txtSubscribed.setVisibility(View.GONE);
    }
 else {
      peopleViewHolder.txtSubscribed.setVisibility(View.VISIBLE);
      String dateSubscribed=SimpleDateFormat.getDateInstance().format(person.getDateSubscribed());
      String dateText=getString(R.string.follower_subscribed_since,dateSubscribed);
      peopleViewHolder.txtSubscribed.setText(dateText);
    }
  }
  if (position == getItemCount() - 1) {
    updatePeople(true);
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  PeopleViewHolder peopleViewHolder=(PeopleViewHolder)holder;
  final Person person=getPerson(position);
  if (person != null) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),mAvatarSz);
    peopleViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    peopleViewHolder.txtDisplayName.setText(StringUtils.unescapeHTML(person.getDisplayName()));
    if (person.getRole() != null) {
      peopleViewHolder.txtRole.setVisibility(View.VISIBLE);
      peopleViewHolder.txtRole.setText(StringUtils.capitalize(person.getRole().toDisplayString()));
    }
 else {
      peopleViewHolder.txtRole.setVisibility(View.GONE);
    }
    if (!person.getUsername().isEmpty()) {
      peopleViewHolder.txtUsername.setVisibility(View.VISIBLE);
      peopleViewHolder.txtUsername.setText(String.format(""String_Node_Str"",person.getUsername()));
    }
 else {
      peopleViewHolder.txtUsername.setVisibility(View.GONE);
    }
    if (person.getPersonType() == Person.PersonType.USER || person.getPersonType() == Person.PersonType.VIEWER) {
      peopleViewHolder.txtSubscribed.setVisibility(View.GONE);
    }
 else {
      peopleViewHolder.txtSubscribed.setVisibility(View.VISIBLE);
      String dateSubscribed=SimpleDateFormat.getDateInstance().format(person.getDateSubscribed());
      String dateText=getString(R.string.follower_subscribed_since,dateSubscribed);
      peopleViewHolder.txtSubscribed.setText(dateText);
    }
  }
  if (position == getItemCount() - 1) {
    updatePeople(true);
  }
}",0.9578642650369894
14016,"private void submitReply(){
  if (!hasComment() || !isAdded() || mIsSubmittingReply)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  final String replyText=EditTextUtils.getText(mEditReply);
  if (TextUtils.isEmpty(replyText))   return;
  mEditReply.setEnabled(false);
  EditTextUtils.hideSoftInput(mEditReply);
  mSubmitReplyBtn.setVisibility(View.GONE);
  final ProgressBar progress=(ProgressBar)getView().findViewById(R.id.progress_submit_comment);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    CommentActionResult result){
      mIsSubmittingReply=false;
      if (result.isSuccess() && mOnCommentChangeListener != null)       mOnCommentChangeListener.onCommentChanged(ChangeType.REPLIED);
      if (isAdded()) {
        mEditReply.setEnabled(true);
        mSubmitReplyBtn.setVisibility(View.VISIBLE);
        progress.setVisibility(View.GONE);
        updateStatusViews();
        if (result.isSuccess()) {
          ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
          mEditReply.setText(null);
          mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
          if (mComment != null && mComment.getStatusEnum() != CommentStatus.APPROVED) {
            moderateComment(CommentStatus.APPROVED);
          }
        }
 else {
          String errorMessage=TextUtils.isEmpty(result.getMessage()) ? getString(R.string.reply_failed) : result.getMessage();
          ToastUtils.showToast(getActivity(),errorMessage,ToastUtils.Duration.LONG);
          EditTextUtils.showSoftInput(mEditReply);
        }
      }
    }
  }
;
  mIsSubmittingReply=true;
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_REPLIED_TO);
  if (mNote != null) {
    if (mShouldRequestCommentFromNote) {
      CommentActions.submitReplyToCommentRestApi(mNote.getSiteId(),mComment.commentID,replyText,actionListener);
    }
 else {
      CommentActions.submitReplyToCommentNote(mNote,replyText,actionListener);
    }
  }
 else {
    CommentActions.submitReplyToComment(mLocalBlogId,mComment,replyText,actionListener);
  }
}","private void submitReply(){
  if (!hasComment() || !isAdded() || mIsSubmittingReply)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  final String replyText=EditTextUtils.getText(mEditReply);
  if (TextUtils.isEmpty(replyText))   return;
  mEditReply.setEnabled(false);
  EditTextUtils.hideSoftInput(mEditReply);
  mSubmitReplyBtn.setVisibility(View.GONE);
  final ProgressBar progress=(ProgressBar)getView().findViewById(R.id.progress_submit_comment);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    CommentActionResult result){
      mIsSubmittingReply=false;
      if (result.isSuccess() && mOnCommentChangeListener != null)       mOnCommentChangeListener.onCommentChanged(ChangeType.REPLIED);
      if (isAdded()) {
        mEditReply.setEnabled(true);
        mSubmitReplyBtn.setVisibility(View.VISIBLE);
        progress.setVisibility(View.GONE);
        updateStatusViews();
        if (result.isSuccess()) {
          ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
          mEditReply.setText(null);
          mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
          if (mComment != null && mComment.getStatusEnum() != CommentStatus.APPROVED) {
            moderateComment(CommentStatus.APPROVED);
          }
        }
 else {
          String errorMessage=TextUtils.isEmpty(result.getMessage()) ? getString(R.string.reply_failed) : result.getMessage();
          String strUnEscapeHTML=StringEscapeUtils.unescapeHtml(errorMessage);
          ToastUtils.showToast(getActivity(),strUnEscapeHTML,ToastUtils.Duration.LONG);
          EditTextUtils.showSoftInput(mEditReply);
        }
      }
    }
  }
;
  mIsSubmittingReply=true;
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_REPLIED_TO);
  if (mNote != null) {
    if (mShouldRequestCommentFromNote) {
      CommentActions.submitReplyToCommentRestApi(mNote.getSiteId(),mComment.commentID,replyText,actionListener);
    }
 else {
      CommentActions.submitReplyToCommentNote(mNote,replyText,actionListener);
    }
  }
 else {
    CommentActions.submitReplyToComment(mLocalBlogId,mComment,replyText,actionListener);
  }
}",0.9747899159663864
14017,"@Override public void onActionResult(CommentActionResult result){
  mIsSubmittingReply=false;
  if (result.isSuccess() && mOnCommentChangeListener != null)   mOnCommentChangeListener.onCommentChanged(ChangeType.REPLIED);
  if (isAdded()) {
    mEditReply.setEnabled(true);
    mSubmitReplyBtn.setVisibility(View.VISIBLE);
    progress.setVisibility(View.GONE);
    updateStatusViews();
    if (result.isSuccess()) {
      ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
      mEditReply.setText(null);
      mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
      if (mComment != null && mComment.getStatusEnum() != CommentStatus.APPROVED) {
        moderateComment(CommentStatus.APPROVED);
      }
    }
 else {
      String errorMessage=TextUtils.isEmpty(result.getMessage()) ? getString(R.string.reply_failed) : result.getMessage();
      ToastUtils.showToast(getActivity(),errorMessage,ToastUtils.Duration.LONG);
      EditTextUtils.showSoftInput(mEditReply);
    }
  }
}","@Override public void onActionResult(CommentActionResult result){
  mIsSubmittingReply=false;
  if (result.isSuccess() && mOnCommentChangeListener != null)   mOnCommentChangeListener.onCommentChanged(ChangeType.REPLIED);
  if (isAdded()) {
    mEditReply.setEnabled(true);
    mSubmitReplyBtn.setVisibility(View.VISIBLE);
    progress.setVisibility(View.GONE);
    updateStatusViews();
    if (result.isSuccess()) {
      ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
      mEditReply.setText(null);
      mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
      if (mComment != null && mComment.getStatusEnum() != CommentStatus.APPROVED) {
        moderateComment(CommentStatus.APPROVED);
      }
    }
 else {
      String errorMessage=TextUtils.isEmpty(result.getMessage()) ? getString(R.string.reply_failed) : result.getMessage();
      String strUnEscapeHTML=StringEscapeUtils.unescapeHtml(errorMessage);
      ToastUtils.showToast(getActivity(),strUnEscapeHTML,ToastUtils.Duration.LONG);
      EditTextUtils.showSoftInput(mEditReply);
    }
  }
}",0.948015122873346
14018,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  PeopleViewHolder peopleViewHolder=(PeopleViewHolder)holder;
  final Person person=getPerson(position);
  if (person != null) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),mAvatarSz);
    peopleViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    peopleViewHolder.txtDisplayName.setText(StringUtils.unescapeHTML(person.getDisplayName()));
    if (person.getRole() != null) {
      peopleViewHolder.txtRole.setText(StringUtils.capitalize(person.getRole().toDisplayString()));
    }
    if (!person.getUsername().isEmpty()) {
      peopleViewHolder.txtUsername.setVisibility(View.VISIBLE);
      peopleViewHolder.txtUsername.setText(String.format(""String_Node_Str"",person.getUsername()));
    }
 else {
      peopleViewHolder.txtUsername.setVisibility(View.GONE);
    }
    if (person.getPersonType() == Person.PersonType.USER || person.getPersonType() == Person.PersonType.VIEWER) {
      peopleViewHolder.txtSubscribed.setVisibility(View.GONE);
    }
 else {
      peopleViewHolder.txtSubscribed.setVisibility(View.VISIBLE);
      String dateSubscribed=SimpleDateFormat.getDateInstance().format(person.getDateSubscribed());
      String dateText=getString(R.string.follower_subscribed_since,dateSubscribed);
      peopleViewHolder.txtSubscribed.setText(dateText);
    }
  }
  if (position == getItemCount() - 1) {
    updatePeople(true);
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  PeopleViewHolder peopleViewHolder=(PeopleViewHolder)holder;
  final Person person=getPerson(position);
  if (person != null) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),mAvatarSz);
    peopleViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    peopleViewHolder.txtDisplayName.setText(StringUtils.unescapeHTML(person.getDisplayName()));
    if (person.getRole() != null) {
      peopleViewHolder.txtRole.setText(StringUtils.capitalize(person.getRole().toDisplayString()));
    }
 else {
      peopleViewHolder.txtRole.setText(""String_Node_Str"");
    }
    if (!person.getUsername().isEmpty()) {
      peopleViewHolder.txtUsername.setVisibility(View.VISIBLE);
      peopleViewHolder.txtUsername.setText(String.format(""String_Node_Str"",person.getUsername()));
    }
 else {
      peopleViewHolder.txtUsername.setVisibility(View.GONE);
    }
    if (person.getPersonType() == Person.PersonType.USER || person.getPersonType() == Person.PersonType.VIEWER) {
      peopleViewHolder.txtSubscribed.setVisibility(View.GONE);
    }
 else {
      peopleViewHolder.txtSubscribed.setVisibility(View.VISIBLE);
      String dateSubscribed=SimpleDateFormat.getDateInstance().format(person.getDateSubscribed());
      String dateText=getString(R.string.follower_subscribed_since,dateSubscribed);
      peopleViewHolder.txtSubscribed.setText(dateText);
    }
  }
  if (position == getItemCount() - 1) {
    updatePeople(true);
  }
}",0.9760734185512948
14019,"public void onCredentialRetrieved(Credential credential){
  AppLog.d(T.NUX,""String_Node_Str"" + credential.getId());
  if (canAutofillUsernameAndPassword()) {
    track(Stat.LOGIN_AUTOFILL_CREDENTIALS_FILLED,null);
    mUsernameEditText.setText(credential.getId());
    mPasswordEditText.setText(credential.getPassword());
  }
}","public void onCredentialRetrieved(Credential credential){
  AppLog.d(T.NUX,""String_Node_Str"" + credential.getId());
  if (isAdded() && canAutofillUsernameAndPassword()) {
    track(Stat.LOGIN_AUTOFILL_CREDENTIALS_FILLED,null);
    mUsernameEditText.setText(credential.getId());
    mPasswordEditText.setText(credential.getPassword());
  }
}",0.9805097451274364
14020,"public boolean canAutofillUsernameAndPassword(){
  return EditTextUtils.getText(mUsernameEditText).isEmpty() && EditTextUtils.getText(mPasswordEditText).isEmpty();
}","public boolean canAutofillUsernameAndPassword(){
  return EditTextUtils.getText(mUsernameEditText).isEmpty() && EditTextUtils.getText(mPasswordEditText).isEmpty() && mUsernameEditText != null && mPasswordEditText != null;
}",0.8505154639175257
14021,"public void setPubDate(String dateStr){
  this.pubDate=StringUtils.notNullStr(pubDate);
}","public void setPubDate(String published){
  this.pubDate=StringUtils.notNullStr(published);
}",0.8791208791208791
14022,"public static ReaderPost fromJson(JSONObject json){
  if (json == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  post.feedId=json.optLong(""String_Node_Str"");
  post.feedItemId=json.optLong(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    post.pseudoId=JSONUtils.getString(json,""String_Node_Str"");
  }
 else {
    post.pseudoId=JSONUtils.getString(json,""String_Node_Str"");
  }
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtils.getString(json,""String_Node_Str"")).trim();
  post.text=JSONUtils.getString(json,""String_Node_Str"");
  post.title=JSONUtils.getStringDecoded(json,""String_Node_Str"");
  post.format=JSONUtils.getString(json,""String_Node_Str"");
  post.url=JSONUtils.getString(json,""String_Node_Str"");
  post.shortUrl=JSONUtils.getString(json,""String_Node_Str"");
  post.setBlogUrl(JSONUtils.getString(json,""String_Node_Str""));
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtils.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtils.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtils.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtils.getBool(json,""String_Node_Str"");
  post.isJetpack=JSONUtils.getBool(json,""String_Node_Str"");
  JSONObject jsonDiscussion=json.optJSONObject(""String_Node_Str"");
  if (jsonDiscussion != null) {
    post.isCommentsOpen=JSONUtils.getBool(jsonDiscussion,""String_Node_Str"");
    post.numReplies=jsonDiscussion.optInt(""String_Node_Str"");
  }
 else {
    post.isCommentsOpen=JSONUtils.getBool(json,""String_Node_Str"");
    post.numReplies=json.optInt(""String_Node_Str"");
  }
  assignAuthorFromJson(post,json.optJSONObject(""String_Node_Str""));
  post.featuredImage=JSONUtils.getString(json,""String_Node_Str"");
  post.blogName=JSONUtils.getStringDecoded(json,""String_Node_Str"");
  post.pubDate=JSONUtils.getString(json,""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    post.date=JSONUtils.getString(json,""String_Node_Str"");
  }
 else   if (json.has(""String_Node_Str"")) {
    post.date=JSONUtils.getString(json,""String_Node_Str"");
  }
 else {
    post.date=post.pubDate;
  }
  post.sortIndex=DateTimeUtils.iso8601ToTimestamp(post.date);
  if (!post.hasTitle() && post.hasExcerpt()) {
    post.title=extractTitle(post.excerpt,50);
  }
  if (post.hasTitle() && post.title.contains(""String_Node_Str"") && post.title.contains(""String_Node_Str"")) {
    post.title=HtmlUtils.stripHtml(post.title);
  }
  assignTagsFromJson(post,json.optJSONObject(""String_Node_Str""));
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null && jsonAttachments.length() > 0) {
    post.attachmentsJson=jsonAttachments.toString();
  }
  JSONObject jsonSite=JSONUtils.getJSONChild(json,""String_Node_Str"");
  if (jsonSite != null) {
    post.blogId=jsonSite.optInt(""String_Node_Str"");
    post.blogName=JSONUtils.getString(jsonSite,""String_Node_Str"");
    post.setBlogUrl(JSONUtils.getString(jsonSite,""String_Node_Str""));
    post.isPrivate=JSONUtils.getBool(jsonSite,""String_Node_Str"");
    post.isJetpack=JSONUtils.getBool(jsonSite,""String_Node_Str"");
  }
  JSONObject jsonDiscover=json.optJSONObject(""String_Node_Str"");
  if (jsonDiscover != null) {
    post.setDiscoverJson(jsonDiscover.toString());
  }
  assignXpostIdsFromJson(post,json.optJSONArray(""String_Node_Str""));
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null && jsonMedia.length() > 0) {
      String mediaUrl=JSONUtils.getString(jsonMedia,""String_Node_Str"");
      if (!TextUtils.isEmpty(mediaUrl)) {
        String type=JSONUtils.getString(jsonMedia,""String_Node_Str"");
        boolean isVideo=(type != null && type.equals(""String_Node_Str""));
        if (isVideo) {
          post.featuredVideo=mediaUrl;
        }
 else {
          post.featuredImage=mediaUrl;
        }
      }
    }
  }
  if (!post.hasFeaturedImage() && post.hasAttachments()) {
    post.featuredImage=new ImageSizeMap(post.attachmentsJson).getLargestImageUrl(ReaderConstants.MIN_FEATURED_IMAGE_WIDTH);
  }
  if (!post.hasFeaturedImage() && post.hasText() && post.text.contains(""String_Node_Str"")) {
    post.featuredImage=new ReaderImageScanner(post.text,post.isPrivate).getLargestImage(ReaderConstants.MIN_FEATURED_IMAGE_WIDTH);
  }
  return post;
}","public static ReaderPost fromJson(JSONObject json){
  if (json == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  post.feedId=json.optLong(""String_Node_Str"");
  post.feedItemId=json.optLong(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    post.pseudoId=JSONUtils.getString(json,""String_Node_Str"");
  }
 else {
    post.pseudoId=JSONUtils.getString(json,""String_Node_Str"");
  }
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtils.getString(json,""String_Node_Str"")).trim();
  post.text=JSONUtils.getString(json,""String_Node_Str"");
  post.title=JSONUtils.getStringDecoded(json,""String_Node_Str"");
  post.format=JSONUtils.getString(json,""String_Node_Str"");
  post.url=JSONUtils.getString(json,""String_Node_Str"");
  post.shortUrl=JSONUtils.getString(json,""String_Node_Str"");
  post.setBlogUrl(JSONUtils.getString(json,""String_Node_Str""));
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtils.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtils.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtils.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtils.getBool(json,""String_Node_Str"");
  post.isJetpack=JSONUtils.getBool(json,""String_Node_Str"");
  JSONObject jsonDiscussion=json.optJSONObject(""String_Node_Str"");
  if (jsonDiscussion != null) {
    post.isCommentsOpen=JSONUtils.getBool(jsonDiscussion,""String_Node_Str"");
    post.numReplies=jsonDiscussion.optInt(""String_Node_Str"");
  }
 else {
    post.isCommentsOpen=JSONUtils.getBool(json,""String_Node_Str"");
    post.numReplies=json.optInt(""String_Node_Str"");
  }
  assignAuthorFromJson(post,json.optJSONObject(""String_Node_Str""));
  post.featuredImage=JSONUtils.getString(json,""String_Node_Str"");
  post.blogName=JSONUtils.getStringDecoded(json,""String_Node_Str"");
  post.pubDate=JSONUtils.getString(json,""String_Node_Str"");
  AppLog.w(AppLog.T.READER,post.pubDate);
  if (json.has(""String_Node_Str"")) {
    post.date=JSONUtils.getString(json,""String_Node_Str"");
  }
 else   if (json.has(""String_Node_Str"")) {
    post.date=JSONUtils.getString(json,""String_Node_Str"");
  }
 else {
    post.date=post.pubDate;
  }
  post.sortIndex=DateTimeUtils.iso8601ToTimestamp(post.date);
  if (!post.hasTitle() && post.hasExcerpt()) {
    post.title=extractTitle(post.excerpt,50);
  }
  if (post.hasTitle() && post.title.contains(""String_Node_Str"") && post.title.contains(""String_Node_Str"")) {
    post.title=HtmlUtils.stripHtml(post.title);
  }
  assignTagsFromJson(post,json.optJSONObject(""String_Node_Str""));
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null && jsonAttachments.length() > 0) {
    post.attachmentsJson=jsonAttachments.toString();
  }
  JSONObject jsonSite=JSONUtils.getJSONChild(json,""String_Node_Str"");
  if (jsonSite != null) {
    post.blogId=jsonSite.optInt(""String_Node_Str"");
    post.blogName=JSONUtils.getString(jsonSite,""String_Node_Str"");
    post.setBlogUrl(JSONUtils.getString(jsonSite,""String_Node_Str""));
    post.isPrivate=JSONUtils.getBool(jsonSite,""String_Node_Str"");
    post.isJetpack=JSONUtils.getBool(jsonSite,""String_Node_Str"");
  }
  JSONObject jsonDiscover=json.optJSONObject(""String_Node_Str"");
  if (jsonDiscover != null) {
    post.setDiscoverJson(jsonDiscover.toString());
  }
  assignXpostIdsFromJson(post,json.optJSONArray(""String_Node_Str""));
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null && jsonMedia.length() > 0) {
      String mediaUrl=JSONUtils.getString(jsonMedia,""String_Node_Str"");
      if (!TextUtils.isEmpty(mediaUrl)) {
        String type=JSONUtils.getString(jsonMedia,""String_Node_Str"");
        boolean isVideo=(type != null && type.equals(""String_Node_Str""));
        if (isVideo) {
          post.featuredVideo=mediaUrl;
        }
 else {
          post.featuredImage=mediaUrl;
        }
      }
    }
  }
  if (!post.hasFeaturedImage() && post.hasAttachments()) {
    post.featuredImage=new ImageSizeMap(post.attachmentsJson).getLargestImageUrl(ReaderConstants.MIN_FEATURED_IMAGE_WIDTH);
  }
  if (!post.hasFeaturedImage() && post.hasText() && post.text.contains(""String_Node_Str"")) {
    post.featuredImage=new ReaderImageScanner(post.text,post.isPrivate).getLargestImage(ReaderConstants.MIN_FEATURED_IMAGE_WIDTH);
  }
  return post;
}",0.9953114534494308
14023,"public static void clearApplicationState(Context context){
  WordPress.currentBlog=null;
  if (WordPress.getContext() != null) {
    try {
      WordPress app=(WordPress)context.getApplicationContext();
      app.wordPressComSignOut();
    }
 catch (    Exception e) {
    }
  }
  TestUtils.clearDefaultSharedPreferences(context);
  TestUtils.dropDB(context);
}","public static void clearApplicationState(Context context){
  if (WordPress.getContext() != null) {
    try {
      WordPress app=(WordPress)context.getApplicationContext();
      app.wordPressComSignOut();
    }
 catch (    Exception e) {
    }
  }
  TestUtils.clearDefaultSharedPreferences(context);
  TestUtils.dropDB(context);
}",0.9566473988439308
14024,"public void testFollowersWPCOM() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      FollowersModel model=new FollowersModel(""String_Node_Str"",response);
      assertEquals(model.getTotalEmail(),2930);
      assertEquals(model.getTotalWPCom(),7925800);
      assertEquals(model.getTotal(),7925800);
      assertEquals(model.getPage(),1);
      assertEquals(model.getPages(),1132258);
      assertNotNull(model.getFollowers());
      assertEquals(model.getFollowers().size(),7);
      FollowerModel first=model.getFollowers().get(0);
      assertEquals(first.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertEquals(first.getLabel(),""String_Node_Str"");
      assertEquals(first.getURL(),""String_Node_Str"");
      assertEquals(first.getDateSubscribed(),""String_Node_Str"");
      assertNotNull(first.getFollowData());
      FollowDataModel followDatamodel=first.getFollowData();
      assertFalse(followDatamodel.isFollowing());
      assertEquals(followDatamodel.getType(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testFollowersWPCOM() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      FollowersModel model=new FollowersModel(1234567890,response);
      assertEquals(model.getTotalEmail(),2930);
      assertEquals(model.getTotalWPCom(),7925800);
      assertEquals(model.getTotal(),7925800);
      assertEquals(model.getPage(),1);
      assertEquals(model.getPages(),1132258);
      assertNotNull(model.getFollowers());
      assertEquals(model.getFollowers().size(),7);
      FollowerModel first=model.getFollowers().get(0);
      assertEquals(first.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertEquals(first.getLabel(),""String_Node_Str"");
      assertEquals(first.getURL(),""String_Node_Str"");
      assertEquals(first.getDateSubscribed(),""String_Node_Str"");
      assertNotNull(first.getFollowData());
      FollowDataModel followDatamodel=first.getFollowData();
      assertFalse(followDatamodel.isFollowing());
      assertEquals(followDatamodel.getType(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9891522699879468
14025,"public void testTopPostEmptyURL() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      TopPostsAndPagesModel model=new TopPostsAndPagesModel(""String_Node_Str"",response);
      assertNotNull(model.getTopPostsAndPages());
      assertEquals(model.getTopPostsAndPages().size(),10);
      PostModel postModel=model.getTopPostsAndPages().get(0);
      assertEquals(postModel.getItemID(),""String_Node_Str"");
      assertEquals(postModel.getTotals(),7);
      assertEquals(postModel.getTitle(),""String_Node_Str"");
      assertEquals(postModel.getUrl(),""String_Node_Str"");
      assertEquals(postModel.getDate(),StatsUtils.toMs(""String_Node_Str""));
      assertEquals(postModel.getPostType(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testTopPostEmptyURL() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      TopPostsAndPagesModel model=new TopPostsAndPagesModel(1234567890,response);
      assertNotNull(model.getTopPostsAndPages());
      assertEquals(model.getTopPostsAndPages().size(),10);
      PostModel postModel=model.getTopPostsAndPages().get(0);
      assertEquals(postModel.getItemID(),""String_Node_Str"");
      assertEquals(postModel.getTotals(),7);
      assertEquals(postModel.getTitle(),""String_Node_Str"");
      assertEquals(postModel.getUrl(),""String_Node_Str"");
      assertEquals(postModel.getDate(),StatsUtils.toMs(""String_Node_Str""));
      assertEquals(postModel.getPostType(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9856763925729444
14026,"public void testClicks() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      ClicksModel model=new ClicksModel(""String_Node_Str"",response);
      assertEquals(model.getTotalClicks(),2);
      assertEquals(model.getOtherClicks(),0);
      assertNotNull(model.getClickGroups());
      assertEquals(model.getClickGroups().size(),2);
      ClickGroupModel first=model.getClickGroups().get(0);
      assertEquals(first.getIcon(),""String_Node_Str"");
      assertEquals(first.getUrl(),""String_Node_Str"");
      assertEquals(first.getName(),""String_Node_Str"");
      assertEquals(first.getViews(),1);
      assertNull(first.getClicks());
      ClickGroupModel second=model.getClickGroups().get(1);
      assertEquals(second.getIcon(),""String_Node_Str"");
      assertEquals(second.getUrl(),""String_Node_Str"");
      assertEquals(second.getName(),""String_Node_Str"");
      assertEquals(second.getViews(),1);
      assertNull(second.getClicks());
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testClicks() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      ClicksModel model=new ClicksModel(123456,response);
      assertEquals(model.getTotalClicks(),2);
      assertEquals(model.getOtherClicks(),0);
      assertNotNull(model.getClickGroups());
      assertEquals(model.getClickGroups().size(),2);
      ClickGroupModel first=model.getClickGroups().get(0);
      assertEquals(first.getIcon(),""String_Node_Str"");
      assertEquals(first.getUrl(),""String_Node_Str"");
      assertEquals(first.getName(),""String_Node_Str"");
      assertEquals(first.getViews(),1);
      assertNull(first.getClicks());
      ClickGroupModel second=model.getClickGroups().get(1);
      assertEquals(second.getIcon(),""String_Node_Str"");
      assertEquals(second.getUrl(),""String_Node_Str"");
      assertEquals(second.getName(),""String_Node_Str"");
      assertEquals(second.getViews(),1);
      assertNull(second.getClicks());
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9902002556455048
14027,"public void testTopPost() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      TopPostsAndPagesModel model=new TopPostsAndPagesModel(""String_Node_Str"",response);
      assertNotNull(model.getTopPostsAndPages());
      assertEquals(model.getTopPostsAndPages().size(),10);
      PostModel postModel=model.getTopPostsAndPages().get(0);
      assertEquals(postModel.getItemID(),""String_Node_Str"");
      assertEquals(postModel.getTotals(),2420);
      assertEquals(postModel.getTitle(),""String_Node_Str"");
      assertEquals(postModel.getUrl(),""String_Node_Str"");
      assertEquals(postModel.getDate(),StatsUtils.toMs(""String_Node_Str""));
      assertEquals(postModel.getPostType(),""String_Node_Str"");
      postModel=model.getTopPostsAndPages().get(9);
      assertEquals(postModel.getItemID(),""String_Node_Str"");
      assertEquals(postModel.getTotals(),56);
      assertEquals(postModel.getTitle(),""String_Node_Str"");
      assertEquals(postModel.getUrl(),""String_Node_Str"");
      assertEquals(postModel.getDate(),StatsUtils.toMs(""String_Node_Str""));
      assertEquals(postModel.getPostType(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testTopPost() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      TopPostsAndPagesModel model=new TopPostsAndPagesModel(123456,response);
      assertNotNull(model.getTopPostsAndPages());
      assertEquals(model.getTopPostsAndPages().size(),10);
      PostModel postModel=model.getTopPostsAndPages().get(0);
      assertEquals(postModel.getItemID(),""String_Node_Str"");
      assertEquals(postModel.getTotals(),2420);
      assertEquals(postModel.getTitle(),""String_Node_Str"");
      assertEquals(postModel.getUrl(),""String_Node_Str"");
      assertEquals(postModel.getDate(),StatsUtils.toMs(""String_Node_Str""));
      assertEquals(postModel.getPostType(),""String_Node_Str"");
      postModel=model.getTopPostsAndPages().get(9);
      assertEquals(postModel.getItemID(),""String_Node_Str"");
      assertEquals(postModel.getTotals(),56);
      assertEquals(postModel.getTitle(),""String_Node_Str"");
      assertEquals(postModel.getUrl(),""String_Node_Str"");
      assertEquals(postModel.getDate(),StatsUtils.toMs(""String_Node_Str""));
      assertEquals(postModel.getPostType(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9914909359970404
14028,"public void testVisits() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      VisitsModel model=new VisitsModel(""String_Node_Str"",response);
      assertNotNull(model.getVisits());
      assertNotNull(model.getUnit());
      assertNotNull(model.getDate());
      assertEquals(model.getVisits().size(),30);
      assertEquals(model.getUnit(),""String_Node_Str"");
      VisitModel visitModel=model.getVisits().get(0);
      assertEquals(visitModel.getViews(),7808);
      assertEquals(visitModel.getVisitors(),4331);
      assertEquals(visitModel.getLikes(),0);
      assertEquals(visitModel.getComments(),0);
      assertEquals(visitModel.getPeriod(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testVisits() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      VisitsModel model=new VisitsModel(123456,response);
      assertNotNull(model.getVisits());
      assertNotNull(model.getUnit());
      assertNotNull(model.getDate());
      assertEquals(model.getVisits().size(),30);
      assertEquals(model.getUnit(),""String_Node_Str"");
      VisitModel visitModel=model.getVisits().get(0);
      assertEquals(visitModel.getViews(),7808);
      assertEquals(visitModel.getVisitors(),4331);
      assertEquals(visitModel.getLikes(),0);
      assertEquals(visitModel.getComments(),0);
      assertEquals(visitModel.getPeriod(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9872998343456654
14029,"public void testCountryViewsDay() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      GeoviewsModel model=new GeoviewsModel(""String_Node_Str"",response);
      assertEquals(model.getOtherViews(),17);
      assertEquals(model.getTotalViews(),55);
      assertNotNull(model.getCountries());
      assertEquals(model.getCountries().size(),10);
      GeoviewModel first=model.getCountries().get(0);
      assertEquals(first.getCountryFullName(),""String_Node_Str"");
      assertEquals(first.getFlagIconURL(),""String_Node_Str"");
      assertEquals(first.getFlatFlagIconURL(),""String_Node_Str"");
      assertEquals(first.getViews(),8);
      GeoviewModel second=model.getCountries().get(1);
      assertEquals(second.getCountryFullName(),""String_Node_Str"");
      assertEquals(second.getFlagIconURL(),""String_Node_Str"");
      assertEquals(second.getFlatFlagIconURL(),""String_Node_Str"");
      assertEquals(second.getViews(),6);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testCountryViewsDay() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      GeoviewsModel model=new GeoviewsModel(123456,response);
      assertEquals(model.getOtherViews(),17);
      assertEquals(model.getTotalViews(),55);
      assertNotNull(model.getCountries());
      assertEquals(model.getCountries().size(),10);
      GeoviewModel first=model.getCountries().get(0);
      assertEquals(first.getCountryFullName(),""String_Node_Str"");
      assertEquals(first.getFlagIconURL(),""String_Node_Str"");
      assertEquals(first.getFlatFlagIconURL(),""String_Node_Str"");
      assertEquals(first.getViews(),8);
      GeoviewModel second=model.getCountries().get(1);
      assertEquals(second.getCountryFullName(),""String_Node_Str"");
      assertEquals(second.getFlagIconURL(),""String_Node_Str"");
      assertEquals(second.getFlatFlagIconURL(),""String_Node_Str"");
      assertEquals(second.getViews(),6);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9900733707380232
14030,"public void testReferrers() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      ReferrersModel model=new ReferrersModel(""String_Node_Str"",response);
      assertEquals(model.getTotalViews(),2161);
      assertEquals(model.getOtherViews(),938);
      assertNotNull(model.getGroups());
      assertEquals(model.getGroups().size(),10);
      ReferrerGroupModel gModel=model.getGroups().get(0);
      assertEquals(gModel.getName(),""String_Node_Str"");
      assertEquals(gModel.getGroupId(),""String_Node_Str"");
      assertEquals(gModel.getIcon(),""String_Node_Str"");
      assertEquals(gModel.getTotal(),480);
      assertNotNull(gModel.getResults());
      assertEquals(gModel.getResults().size(),7);
      ReferrerResultModel refResultModel=gModel.getResults().get(0);
      assertEquals(refResultModel.getName(),""String_Node_Str"");
      assertEquals(refResultModel.getIcon(),""String_Node_Str"");
      assertEquals(refResultModel.getViews(),461);
      assertNotNull(refResultModel.getChildren());
      assertNull(refResultModel.getUrl());
      SingleItemModel child=refResultModel.getChildren().get(0);
      assertEquals(child.getUrl(),""String_Node_Str"");
      assertEquals(child.getTitle(),""String_Node_Str"");
      assertEquals(child.getIcon(),""String_Node_Str"");
      assertEquals(child.getTotals(),176);
      child=refResultModel.getChildren().get(10);
      assertEquals(child.getUrl(),""String_Node_Str"");
      assertEquals(child.getTitle(),""String_Node_Str"");
      assertEquals(child.getIcon(),""String_Node_Str"");
      assertEquals(child.getTotals(),6);
      gModel=model.getGroups().get(6);
      assertEquals(gModel.getName(),""String_Node_Str"");
      assertEquals(gModel.getGroupId(),""String_Node_Str"");
      assertEquals(gModel.getIcon(),""String_Node_Str"");
      assertEquals(gModel.getTotal(),56);
      assertNotNull(gModel.getResults());
      assertEquals(gModel.getResults().size(),11);
      refResultModel=gModel.getResults().get(0);
      assertEquals(refResultModel.getName(),""String_Node_Str"");
      assertEquals(refResultModel.getUrl(),""String_Node_Str"");
      assertEquals(refResultModel.getIcon(),""String_Node_Str"");
      assertEquals(refResultModel.getViews(),34);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testReferrers() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      ReferrersModel model=new ReferrersModel(123456,response);
      assertEquals(model.getTotalViews(),2161);
      assertEquals(model.getOtherViews(),938);
      assertNotNull(model.getGroups());
      assertEquals(model.getGroups().size(),10);
      ReferrerGroupModel gModel=model.getGroups().get(0);
      assertEquals(gModel.getName(),""String_Node_Str"");
      assertEquals(gModel.getGroupId(),""String_Node_Str"");
      assertEquals(gModel.getIcon(),""String_Node_Str"");
      assertEquals(gModel.getTotal(),480);
      assertNotNull(gModel.getResults());
      assertEquals(gModel.getResults().size(),7);
      ReferrerResultModel refResultModel=gModel.getResults().get(0);
      assertEquals(refResultModel.getName(),""String_Node_Str"");
      assertEquals(refResultModel.getIcon(),""String_Node_Str"");
      assertEquals(refResultModel.getViews(),461);
      assertNotNull(refResultModel.getChildren());
      assertNull(refResultModel.getUrl());
      SingleItemModel child=refResultModel.getChildren().get(0);
      assertEquals(child.getUrl(),""String_Node_Str"");
      assertEquals(child.getTitle(),""String_Node_Str"");
      assertEquals(child.getIcon(),""String_Node_Str"");
      assertEquals(child.getTotals(),176);
      child=refResultModel.getChildren().get(10);
      assertEquals(child.getUrl(),""String_Node_Str"");
      assertEquals(child.getTitle(),""String_Node_Str"");
      assertEquals(child.getIcon(),""String_Node_Str"");
      assertEquals(child.getTotals(),6);
      gModel=model.getGroups().get(6);
      assertEquals(gModel.getName(),""String_Node_Str"");
      assertEquals(gModel.getGroupId(),""String_Node_Str"");
      assertEquals(gModel.getIcon(),""String_Node_Str"");
      assertEquals(gModel.getTotal(),56);
      assertNotNull(gModel.getResults());
      assertEquals(gModel.getResults().size(),11);
      refResultModel=gModel.getResults().get(0);
      assertEquals(refResultModel.getName(),""String_Node_Str"");
      assertEquals(refResultModel.getUrl(),""String_Node_Str"");
      assertEquals(refResultModel.getIcon(),""String_Node_Str"");
      assertEquals(refResultModel.getViews(),34);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9952878508502356
14031,"public void testTagsCategories() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      TagsContainerModel model=new TagsContainerModel(""String_Node_Str"",response);
      assertEquals(model.getDate(),""String_Node_Str"");
      assertNotNull(model.getTags());
      assertEquals(model.getTags().size(),10);
      TagsModel tag=model.getTags().get(0);
      assertEquals(tag.getViews(),461);
      assertNotNull(tag.getTags());
      assertEquals(tag.getTags().size(),1);
      assertNotNull(tag.getTags());
      assertEquals(tag.getTags().get(0).getName(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getType(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getLink(),""String_Node_Str"");
      tag=model.getTags().get(9);
      assertEquals(tag.getViews(),41);
      assertEquals(tag.getTags().get(0).getName(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getType(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getLink(),""String_Node_Str"");
      assertEquals(tag.getTags().get(1).getName(),""String_Node_Str"");
      assertEquals(tag.getTags().get(1).getType(),""String_Node_Str"");
      assertEquals(tag.getTags().get(1).getLink(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testTagsCategories() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      TagsContainerModel model=new TagsContainerModel(123456,response);
      assertEquals(model.getDate(),""String_Node_Str"");
      assertNotNull(model.getTags());
      assertEquals(model.getTags().size(),10);
      TagsModel tag=model.getTags().get(0);
      assertEquals(tag.getViews(),461);
      assertNotNull(tag.getTags());
      assertEquals(tag.getTags().size(),1);
      assertNotNull(tag.getTags());
      assertEquals(tag.getTags().get(0).getName(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getType(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getLink(),""String_Node_Str"");
      tag=model.getTags().get(9);
      assertEquals(tag.getViews(),41);
      assertEquals(tag.getTags().get(0).getName(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getType(),""String_Node_Str"");
      assertEquals(tag.getTags().get(0).getLink(),""String_Node_Str"");
      assertEquals(tag.getTags().get(1).getName(),""String_Node_Str"");
      assertEquals(tag.getTags().get(1).getType(),""String_Node_Str"");
      assertEquals(tag.getTags().get(1).getLink(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9920277296360486
14032,"public void testFollowersEmail() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      FollowersModel model=new FollowersModel(""String_Node_Str"",response);
      assertEquals(model.getTotalEmail(),2931);
      assertEquals(model.getTotalWPCom(),7926165);
      assertEquals(model.getTotal(),2931);
      assertEquals(model.getPage(),1);
      assertEquals(model.getPages(),419);
      assertNotNull(model.getFollowers());
      assertEquals(model.getFollowers().size(),7);
      FollowerModel first=model.getFollowers().get(0);
      assertEquals(first.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertEquals(first.getLabel(),""String_Node_Str"");
      assertNull(first.getURL());
      assertNull(first.getFollowData());
      assertEquals(first.getDateSubscribed(),""String_Node_Str"");
      FollowerModel last=model.getFollowers().get(6);
      assertEquals(last.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertEquals(last.getLabel(),""String_Node_Str"");
      assertNull(last.getURL());
      assertNull(last.getFollowData());
      assertEquals(last.getDateSubscribed(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testFollowersEmail() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      FollowersModel model=new FollowersModel(123456,response);
      assertEquals(model.getTotalEmail(),2931);
      assertEquals(model.getTotalWPCom(),7926165);
      assertEquals(model.getTotal(),2931);
      assertEquals(model.getPage(),1);
      assertEquals(model.getPages(),419);
      assertNotNull(model.getFollowers());
      assertEquals(model.getFollowers().size(),7);
      FollowerModel first=model.getFollowers().get(0);
      assertEquals(first.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertEquals(first.getLabel(),""String_Node_Str"");
      assertNull(first.getURL());
      assertNull(first.getFollowData());
      assertEquals(first.getDateSubscribed(),""String_Node_Str"");
      FollowerModel last=model.getFollowers().get(6);
      assertEquals(last.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertEquals(last.getLabel(),""String_Node_Str"");
      assertNull(last.getURL());
      assertNull(last.getFollowData());
      assertEquals(last.getDateSubscribed(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9915347810084651
14033,"public void testInsightsPopular() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      InsightsPopularModel model=new InsightsPopularModel(""String_Node_Str"",response);
      assertEquals(model.getHighestHour(),9);
      assertEquals(model.getHighestDayOfWeek(),5);
      assertEquals(model.getHighestDayPercent(),30.532081377152);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testInsightsPopular() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      InsightsPopularModel model=new InsightsPopularModel(123456,response);
      assertEquals(model.getHighestHour(),9);
      assertEquals(model.getHighestDayOfWeek(),5);
      assertEquals(model.getHighestDayPercent(),30.532081377152);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9797356828193832
14034,"public void testClicksForMonth() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      ClicksModel model=new ClicksModel(""String_Node_Str"",response);
      assertEquals(model.getTotalClicks(),9);
      assertEquals(model.getOtherClicks(),0);
      assertNotNull(model.getClickGroups());
      assertEquals(model.getClickGroups().size(),6);
      ClickGroupModel first=model.getClickGroups().get(0);
      assertEquals(first.getIcon(),""String_Node_Str"");
      assertEquals(first.getUrl(),""String_Node_Str"");
      assertEquals(first.getName(),""String_Node_Str"");
      assertEquals(first.getViews(),3);
      assertNull(first.getClicks());
      ClickGroupModel second=model.getClickGroups().get(1);
      assertEquals(second.getIcon(),""String_Node_Str"");
      assertNull(second.getUrl());
      assertEquals(second.getName(),""String_Node_Str"");
      assertEquals(second.getViews(),2);
      assertNotNull(second.getClicks());
      assertEquals(second.getClicks().size(),2);
      SingleItemModel firstChild=second.getClicks().get(0);
      assertNotNull(firstChild);
      assertEquals(firstChild.getUrl(),""String_Node_Str"");
      assertEquals(firstChild.getTitle(),""String_Node_Str"");
      assertEquals(firstChild.getTotals(),1);
      assertEquals(firstChild.getIcon(),""String_Node_Str"");
      SingleItemModel secondChild=second.getClicks().get(1);
      assertNotNull(secondChild);
      assertEquals(secondChild.getUrl(),""String_Node_Str"");
      assertEquals(secondChild.getTitle(),""String_Node_Str"");
      assertEquals(secondChild.getTotals(),1);
      assertEquals(secondChild.getIcon(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testClicksForMonth() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      ClicksModel model=new ClicksModel(1234567890,response);
      assertEquals(model.getTotalClicks(),9);
      assertEquals(model.getOtherClicks(),0);
      assertNotNull(model.getClickGroups());
      assertEquals(model.getClickGroups().size(),6);
      ClickGroupModel first=model.getClickGroups().get(0);
      assertEquals(first.getIcon(),""String_Node_Str"");
      assertEquals(first.getUrl(),""String_Node_Str"");
      assertEquals(first.getName(),""String_Node_Str"");
      assertEquals(first.getViews(),3);
      assertNull(first.getClicks());
      ClickGroupModel second=model.getClickGroups().get(1);
      assertEquals(second.getIcon(),""String_Node_Str"");
      assertNull(second.getUrl());
      assertEquals(second.getName(),""String_Node_Str"");
      assertEquals(second.getViews(),2);
      assertNotNull(second.getClicks());
      assertEquals(second.getClicks().size(),2);
      SingleItemModel firstChild=second.getClicks().get(0);
      assertNotNull(firstChild);
      assertEquals(firstChild.getUrl(),""String_Node_Str"");
      assertEquals(firstChild.getTitle(),""String_Node_Str"");
      assertEquals(firstChild.getTotals(),1);
      assertEquals(firstChild.getIcon(),""String_Node_Str"");
      SingleItemModel secondChild=second.getClicks().get(1);
      assertNotNull(secondChild);
      assertEquals(secondChild.getUrl(),""String_Node_Str"");
      assertEquals(secondChild.getTitle(),""String_Node_Str"");
      assertEquals(secondChild.getTotals(),1);
      assertEquals(secondChild.getIcon(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9927399838666308
14035,"public void testCommentsDay() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      CommentsModel model=new CommentsModel(""String_Node_Str"",response);
      assertEquals(model.getTotalComments(),177);
      assertEquals(model.getMonthlyComments(),2);
      assertEquals(model.getMostActiveTime(),""String_Node_Str"");
      assertEquals(model.getMostActiveDay(),""String_Node_Str"");
      assertNotNull(model.getAuthors());
      assertTrue(model.getAuthors().size() == 7);
      AuthorModel author=model.getAuthors().get(0);
      assertEquals(author.getName(),""String_Node_Str"");
      assertEquals(author.getViews(),20);
      assertEquals(author.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertNull(author.getFollowData());
      assertNull(author.getPosts());
      assertNotNull(model.getPosts());
      assertTrue(model.getPosts().size() == 11);
      SingleItemModel mostCommentedPost=model.getPosts().get(0);
      assertEquals(mostCommentedPost.getItemID(),""String_Node_Str"");
      assertEquals(mostCommentedPost.getTotals(),29);
      assertEquals(mostCommentedPost.getTitle(),""String_Node_Str"");
      assertEquals(mostCommentedPost.getUrl(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testCommentsDay() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      CommentsModel model=new CommentsModel(123456,response);
      assertEquals(model.getTotalComments(),177);
      assertEquals(model.getMonthlyComments(),2);
      assertEquals(model.getMostActiveTime(),""String_Node_Str"");
      assertEquals(model.getMostActiveDay(),""String_Node_Str"");
      assertNotNull(model.getAuthors());
      assertTrue(model.getAuthors().size() == 7);
      AuthorModel author=model.getAuthors().get(0);
      assertEquals(author.getName(),""String_Node_Str"");
      assertEquals(author.getViews(),20);
      assertEquals(author.getAvatar(),""String_Node_Str"" + ""String_Node_Str"");
      assertNull(author.getFollowData());
      assertNull(author.getPosts());
      assertNotNull(model.getPosts());
      assertTrue(model.getPosts().size() == 11);
      SingleItemModel mostCommentedPost=model.getPosts().get(0);
      assertEquals(mostCommentedPost.getItemID(),""String_Node_Str"");
      assertEquals(mostCommentedPost.getTotals(),29);
      assertEquals(mostCommentedPost.getTitle(),""String_Node_Str"");
      assertEquals(mostCommentedPost.getUrl(),""String_Node_Str"");
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.991921320688444
14036,"public void testInsightsAllTime() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      InsightsAllTimeModel model=new InsightsAllTimeModel(""String_Node_Str"",response);
      assertEquals(model.getPosts(),128);
      assertEquals(model.getViews(),56687);
      assertEquals(model.getVisitors(),42893);
      assertEquals(model.getViewsBestDayTotal(),3485);
      assertNotNull(model.getViewsBestDay());
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testInsightsAllTime() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      InsightsAllTimeModel model=new InsightsAllTimeModel(12345,response);
      assertEquals(model.getPosts(),128);
      assertEquals(model.getViews(),56687);
      assertEquals(model.getVisitors(),42893);
      assertEquals(model.getViewsBestDayTotal(),3485);
      assertNotNull(model.getViewsBestDay());
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.9827586206896552
14037,"@Override void parseResponse(JSONObject response) throws JSONException {
  VisitsModel model=new VisitsModel(""String_Node_Str"",response);
  assertNotNull(model.getVisits());
  assertNotNull(model.getUnit());
  assertNotNull(model.getDate());
  assertEquals(model.getVisits().size(),30);
  assertEquals(model.getUnit(),""String_Node_Str"");
  VisitModel visitModel=model.getVisits().get(0);
  assertEquals(visitModel.getViews(),7808);
  assertEquals(visitModel.getVisitors(),4331);
  assertEquals(visitModel.getLikes(),0);
  assertEquals(visitModel.getComments(),0);
  assertEquals(visitModel.getPeriod(),""String_Node_Str"");
}","@Override void parseResponse(JSONObject response) throws JSONException {
  VisitsModel model=new VisitsModel(123456,response);
  assertNotNull(model.getVisits());
  assertNotNull(model.getUnit());
  assertNotNull(model.getDate());
  assertEquals(model.getVisits().size(),30);
  assertEquals(model.getUnit(),""String_Node_Str"");
  VisitModel visitModel=model.getVisits().get(0);
  assertEquals(visitModel.getViews(),7808);
  assertEquals(visitModel.getVisitors(),4331);
  assertEquals(visitModel.getLikes(),0);
  assertEquals(visitModel.getComments(),0);
  assertEquals(visitModel.getPeriod(),""String_Node_Str"");
}",0.9813765182186236
14038,"public void testInsightsToday() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      InsightsTodayModel model=new InsightsTodayModel(""String_Node_Str"",response);
      assertEquals(model.getDate(),""String_Node_Str"");
      assertEquals(model.getBlogID(),""String_Node_Str"");
      assertEquals(model.getViews(),56);
      assertEquals(model.getVisitors(),44);
      assertEquals(model.getLikes(),1);
      assertEquals(model.getReblogs(),2);
      assertEquals(model.getComments(),3);
      assertEquals(model.getFollowers(),56);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testInsightsToday() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      InsightsTodayModel model=new InsightsTodayModel(123456,response);
      assertEquals(model.getDate(),""String_Node_Str"");
      assertEquals(model.getBlogID(),123456);
      assertEquals(model.getViews(),56);
      assertEquals(model.getVisitors(),44);
      assertEquals(model.getLikes(),1);
      assertEquals(model.getReblogs(),2);
      assertEquals(model.getComments(),3);
      assertEquals(model.getFollowers(),56);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.406578947368421
14039,"public void testVideoPlaysNoData() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      VideoPlaysModel model=new VideoPlaysModel(""String_Node_Str"",response);
      assertEquals(model.getOtherPlays(),0);
      assertEquals(model.getTotalPlays(),0);
      assertNotNull(model.getPlays());
      assertEquals(model.getPlays().size(),0);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testVideoPlaysNoData() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      VideoPlaysModel model=new VideoPlaysModel(123456,response);
      assertEquals(model.getOtherPlays(),0);
      assertEquals(model.getTotalPlays(),0);
      assertNotNull(model.getPlays());
      assertEquals(model.getPlays().size(),0);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.5004374453193351
14040,"public void testVideoPlays() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      VideoPlaysModel model=new VideoPlaysModel(""String_Node_Str"",response);
      assertEquals(model.getOtherPlays(),0);
      assertEquals(model.getTotalPlays(),2);
      assertNotNull(model.getPlays());
      assertEquals(model.getPlays().size(),1);
      SingleItemModel videoItemModel=model.getPlays().get(0);
      assertEquals(videoItemModel.getTitle(),""String_Node_Str"");
      assertEquals(videoItemModel.getUrl(),""String_Node_Str"");
      assertEquals(videoItemModel.getItemID(),""String_Node_Str"");
      assertEquals(videoItemModel.getTotals(),2);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}","public void testVideoPlays() throws Exception {
  StatsRestRequestAbstractListener listener=new StatsRestRequestAbstractListener(){
    @Override void parseResponse(    JSONObject response) throws JSONException {
      VideoPlaysModel model=new VideoPlaysModel(1234567890,response);
      assertEquals(model.getOtherPlays(),0);
      assertEquals(model.getTotalPlays(),2);
      assertNotNull(model.getPlays());
      assertEquals(model.getPlays().size(),1);
      SingleItemModel videoItemModel=model.getPlays().get(0);
      assertEquals(videoItemModel.getTitle(),""String_Node_Str"");
      assertEquals(videoItemModel.getUrl(),""String_Node_Str"");
      assertEquals(videoItemModel.getItemID(),""String_Node_Str"");
      assertEquals(videoItemModel.getTotals(),2);
    }
  }
;
  mRestClient.makeRequest(Request.Method.POST,""String_Node_Str"",null,listener,errListener);
}",0.5128792215226102
14041,"private void setupSuggestionServiceAndAdapter(){
  if (!isAdded() || mSiteStore.hasDotComOrJetpackSiteWithSiteId(mRemoteBlogId))   return;
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(getActivity(),mRemoteBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions(mSiteStore.getSiteBySiteId(mRemoteBlogId),getActivity(),mSuggestionServiceConnectionManager);
  if (mSuggestionAdapter != null) {
    mEditReply.setAdapter(mSuggestionAdapter);
  }
}","private void setupSuggestionServiceAndAdapter(){
  if (!isAdded() || mSiteStore.hasWPComOrJetpackSiteWithSiteId(mRemoteBlogId))   return;
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(getActivity(),mRemoteBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions(mSiteStore.getSiteBySiteId(mRemoteBlogId),getActivity(),mSuggestionServiceConnectionManager);
  if (mSuggestionAdapter != null) {
    mEditReply.setAdapter(mSuggestionAdapter);
  }
}",0.9948078920041536
14042,"private void saveHiddenSites(){
  List<SiteModel> sites=mSiteStore.getDotComSites();
  for (  SiteModel site : sites) {
    site.setIsVisible(true);
    mDispatcher.dispatch(SiteActionBuilder.newUpdateSiteAction(site));
  }
  boolean skippedCurrentSite=false;
  String currentSiteName=null;
  SiteList hiddenSites=getAdapter().getHiddenSites();
  for (  SiteRecord site : hiddenSites) {
    if (site.localId == mCurrentLocalId) {
      skippedCurrentSite=true;
      currentSiteName=site.getBlogNameOrHomeURL();
    }
 else {
      SiteModel siteModel=mSiteStore.getSiteByLocalId(site.localId);
      siteModel.setIsVisible(false);
      mDispatcher.dispatch(SiteActionBuilder.newUpdateSiteAction(siteModel));
      StatsTable.deleteStatsForBlog(this,site.localId);
    }
  }
  if (skippedCurrentSite) {
    String cantHideCurrentSite=getString(R.string.site_picker_cant_hide_current_site);
    ToastUtils.showToast(this,String.format(cantHideCurrentSite,currentSiteName),ToastUtils.Duration.LONG);
  }
}","private void saveHiddenSites(){
  List<SiteModel> sites=mSiteStore.getWPComSites();
  for (  SiteModel site : sites) {
    site.setIsVisible(true);
    mDispatcher.dispatch(SiteActionBuilder.newUpdateSiteAction(site));
  }
  boolean skippedCurrentSite=false;
  String currentSiteName=null;
  SiteList hiddenSites=getAdapter().getHiddenSites();
  for (  SiteRecord site : hiddenSites) {
    if (site.localId == mCurrentLocalId) {
      skippedCurrentSite=true;
      currentSiteName=site.getBlogNameOrHomeURL();
    }
 else {
      SiteModel siteModel=mSiteStore.getSiteByLocalId(site.localId);
      siteModel.setIsVisible(false);
      mDispatcher.dispatch(SiteActionBuilder.newUpdateSiteAction(siteModel));
      StatsTable.deleteStatsForBlog(this,site.localId);
    }
  }
  if (skippedCurrentSite) {
    String cantHideCurrentSite=getString(R.string.site_picker_cant_hide_current_site);
    ToastUtils.showToast(this,String.format(cantHideCurrentSite,currentSiteName),ToastUtils.Duration.LONG);
  }
}",0.9975087194818136
14043,"private void updateMenuItemVisibility(){
  if (mMenuAdd == null || mMenuEdit == null || mMenuSearch == null)   return;
  if (getAdapter().getIsInSearchMode()) {
    mMenuEdit.setVisible(false);
    mMenuAdd.setVisible(false);
  }
 else {
    mMenuEdit.setVisible(mSiteStore.getDotComSitesCount() > 1);
    mMenuAdd.setVisible(true);
  }
  mMenuSearch.setVisible(mSiteStore.getSitesCount() > 1);
}","private void updateMenuItemVisibility(){
  if (mMenuAdd == null || mMenuEdit == null || mMenuSearch == null)   return;
  if (getAdapter().getIsInSearchMode()) {
    mMenuEdit.setVisible(false);
    mMenuAdd.setVisible(false);
  }
 else {
    mMenuEdit.setVisible(mSiteStore.getWPComSitesCount() > 1);
    mMenuAdd.setVisible(true);
  }
  mMenuSearch.setVisible(mSiteStore.getSitesCount() > 1);
}",0.9936788874841972
14044,"private List<SiteModel> getBlogsForCurrentView(){
  if (mShowHiddenSites) {
    if (mShowSelfHostedSites) {
      return mSiteStore.getSites();
    }
 else {
      return mSiteStore.getDotComSites();
    }
  }
 else {
    if (mShowSelfHostedSites) {
      List<SiteModel> out=mSiteStore.getVisibleDotComSites();
      out.addAll(mSiteStore.getDotOrgSites());
      return out;
    }
 else {
      return mSiteStore.getVisibleDotComSites();
    }
  }
}","private List<SiteModel> getBlogsForCurrentView(){
  if (mShowHiddenSites) {
    if (mShowSelfHostedSites) {
      return mSiteStore.getSites();
    }
 else {
      return mSiteStore.getWPComSites();
    }
  }
 else {
    if (mShowSelfHostedSites) {
      List<SiteModel> out=mSiteStore.getVisibleWPComSites();
      out.addAll(mSiteStore.getSelfHostedSites());
      return out;
    }
 else {
      return mSiteStore.getVisibleWPComSites();
    }
  }
}",0.9656699889258028
14045,"public void updateWebAddress(String newWebAddress){
  PostAccountSettingsPayload payload=new PostAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",newWebAddress);
  mDispatcher.dispatch(AccountActionBuilder.newPostSettingsAction(payload));
}","public void updateWebAddress(String newWebAddress){
  PushAccountSettingsPayload payload=new PushAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",newWebAddress);
  mDispatcher.dispatch(AccountActionBuilder.newPushSettingsAction(payload));
}",0.9689655172413794
14046,"@Override protected Void doInBackground(Void... params){
  List<SiteModel> sites=mSiteStore.getDotComSites();
  mPrimarySitePreference.setEntries(getSiteNamesFromSites(sites));
  mPrimarySitePreference.setEntryValues(getSiteIdsFromSites(sites));
  mPrimarySitePreference.setDetails(getHomeURLOrHostNamesFromSites(sites));
  return null;
}","@Override protected Void doInBackground(Void... params){
  List<SiteModel> sites=mSiteStore.getWPComSites();
  mPrimarySitePreference.setEntries(getSiteNamesFromSites(sites));
  mPrimarySitePreference.setEntryValues(getSiteIdsFromSites(sites));
  mPrimarySitePreference.setDetails(getHomeURLOrHostNamesFromSites(sites));
  return null;
}",0.9925925925925926
14047,"private void cancelPendingEmailChange(){
  PostAccountSettingsPayload payload=new PostAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",""String_Node_Str"");
  mDispatcher.dispatch(AccountActionBuilder.newPostSettingsAction(payload));
  if (mEmailSnackbar != null && mEmailSnackbar.isShown()) {
    mEmailSnackbar.dismiss();
  }
}","private void cancelPendingEmailChange(){
  PushAccountSettingsPayload payload=new PushAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",""String_Node_Str"");
  mDispatcher.dispatch(AccountActionBuilder.newPushSettingsAction(payload));
  if (mEmailSnackbar != null && mEmailSnackbar.isShown()) {
    mEmailSnackbar.dismiss();
  }
}",0.9761273209549072
14048,"private void updatePrimaryBlog(String blogId){
  PostAccountSettingsPayload payload=new PostAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",blogId);
  mDispatcher.dispatch(AccountActionBuilder.newPostSettingsAction(payload));
}","private void updatePrimaryBlog(String blogId){
  PushAccountSettingsPayload payload=new PushAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",blogId);
  mDispatcher.dispatch(AccountActionBuilder.newPushSettingsAction(payload));
}",0.9676258992805756
14049,"private void updateEmail(String newEmail){
  PostAccountSettingsPayload payload=new PostAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",newEmail);
  mDispatcher.dispatch(AccountActionBuilder.newPostSettingsAction(payload));
}","private void updateEmail(String newEmail){
  PushAccountSettingsPayload payload=new PushAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(""String_Node_Str"",newEmail);
  mDispatcher.dispatch(AccountActionBuilder.newPushSettingsAction(payload));
}",0.967391304347826
14050,"private void updateMyProfileForLabel(TextView textView){
  PostAccountSettingsPayload payload=new PostAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(restParamForTextView(textView),textView.getText().toString());
  mDispatcher.dispatch(AccountActionBuilder.newPostSettingsAction(payload));
}","private void updateMyProfileForLabel(TextView textView){
  PushAccountSettingsPayload payload=new PushAccountSettingsPayload();
  payload.params=new HashMap<>();
  payload.params.put(restParamForTextView(textView),textView.getText().toString());
  mDispatcher.dispatch(AccountActionBuilder.newPushSettingsAction(payload));
}",0.9722222222222222
14051,"private void configureBlogsSettings(){
  if (!isAdded())   return;
  List<SiteModel> sites;
  String trimmedQuery=""String_Node_Str"";
  if (mSearchView != null && !TextUtils.isEmpty(mSearchView.getQuery())) {
    trimmedQuery=mSearchView.getQuery().toString().trim();
    sites=mSiteStore.getDotComSiteByNameOrUrlMatching(trimmedQuery);
  }
 else {
    sites=mSiteStore.getDotComSites();
  }
  mSiteCount=sites.size();
  Context context=getActivity();
  PreferenceCategory blogsCategory=(PreferenceCategory)findPreference(getString(R.string.pref_notification_blogs));
  blogsCategory.removeAll();
  for (  SiteModel site : sites) {
    if (context == null)     return;
    PreferenceScreen prefScreen=getPreferenceManager().createPreferenceScreen(context);
    prefScreen.setTitle(SiteUtils.getSiteNameOrHomeURL(site));
    prefScreen.setSummary(SiteUtils.getHomeURLOrHostName(site));
    addPreferencesForPreferenceScreen(prefScreen,Channel.BLOGS,site.getSiteId());
    blogsCategory.addPreference(prefScreen);
  }
  if (mSiteCount == 0 && !TextUtils.isEmpty(trimmedQuery)) {
    Preference searchResultsPref=new Preference(context);
    searchResultsPref.setSummary(String.format(getString(R.string.notifications_no_search_results),trimmedQuery));
    blogsCategory.addPreference(searchResultsPref);
  }
  updateSearchMenuVisibility();
}","private void configureBlogsSettings(){
  if (!isAdded())   return;
  List<SiteModel> sites;
  String trimmedQuery=""String_Node_Str"";
  if (mSearchView != null && !TextUtils.isEmpty(mSearchView.getQuery())) {
    trimmedQuery=mSearchView.getQuery().toString().trim();
    sites=mSiteStore.getWPComSiteByNameOrUrlMatching(trimmedQuery);
  }
 else {
    sites=mSiteStore.getWPComSites();
  }
  mSiteCount=sites.size();
  Context context=getActivity();
  PreferenceCategory blogsCategory=(PreferenceCategory)findPreference(getString(R.string.pref_notification_blogs));
  blogsCategory.removeAll();
  for (  SiteModel site : sites) {
    if (context == null)     return;
    PreferenceScreen prefScreen=getPreferenceManager().createPreferenceScreen(context);
    prefScreen.setTitle(SiteUtils.getSiteNameOrHomeURL(site));
    prefScreen.setSummary(SiteUtils.getHomeURLOrHostName(site));
    addPreferencesForPreferenceScreen(prefScreen,Channel.BLOGS,site.getSiteId());
    blogsCategory.addPreference(prefScreen);
  }
  if (mSiteCount == 0 && !TextUtils.isEmpty(trimmedQuery)) {
    Preference searchResultsPref=new Preference(context);
    searchResultsPref.setSummary(String.format(getString(R.string.notifications_no_search_results),trimmedQuery));
    blogsCategory.addPreference(searchResultsPref);
  }
  updateSearchMenuVisibility();
}",0.9962602842183994
14052,"@Override public void run(){
  List<SiteModel> sites=mSiteStore.getDotComSites();
  for (  SiteModel site : sites) {
    if (site.getUrl() != null && site.getSiteId() != 0) {
      String normURL=normalizeAndRemoveScheme(site.getUrl());
      long blogID=site.getSiteId();
      userBlogs.put(normURL,blogID);
    }
  }
}","@Override public void run(){
  List<SiteModel> sites=mSiteStore.getWPComSites();
  for (  SiteModel site : sites) {
    if (site.getUrl() != null && site.getSiteId() != 0) {
      String normURL=normalizeAndRemoveScheme(site.getUrl());
      long blogID=site.getSiteId();
      userBlogs.put(normURL,blogID);
    }
  }
}",0.9921996879875196
14053,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThreadPoolExecutor blogsListCreatorExecutor=(ThreadPoolExecutor)Executors.newFixedThreadPool(1);
  blogsListCreatorExecutor.submit(new Thread(){
    @Override public void run(){
      List<SiteModel> sites=mSiteStore.getDotComSites();
      for (      SiteModel site : sites) {
        if (site.getUrl() != null && site.getSiteId() != 0) {
          String normURL=normalizeAndRemoveScheme(site.getUrl());
          long blogID=site.getSiteId();
          userBlogs.put(normURL,blogID);
        }
      }
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThreadPoolExecutor blogsListCreatorExecutor=(ThreadPoolExecutor)Executors.newFixedThreadPool(1);
  blogsListCreatorExecutor.submit(new Thread(){
    @Override public void run(){
      List<SiteModel> sites=mSiteStore.getWPComSites();
      for (      SiteModel site : sites) {
        if (site.getUrl() != null && site.getSiteId() != 0) {
          String normURL=normalizeAndRemoveScheme(site.getUrl());
          long blogID=site.getSiteId();
          userBlogs.put(normURL,blogID);
        }
      }
    }
  }
);
}",0.9959514170040484
14054,"private List<SiteModel> getBlogsForCurrentView(){
  if (mShowHiddenSites) {
    if (mShowSelfHostedSites) {
      return mSiteStore.getSites();
    }
 else {
      return mSiteStore.getDotComSites();
    }
  }
 else {
    if (mShowSelfHostedSites) {
      List<SiteModel> out=mSiteStore.getVisibleDotComSites();
      out.addAll(mSiteStore.getDotOrgSites());
      return out;
    }
 else {
      return mSiteStore.getVisibleDotComSites();
    }
  }
}","private List<SiteModel> getBlogsForCurrentView(){
  if (mShowHiddenSites) {
    if (mShowSelfHostedSites) {
      return mSiteStore.getSites();
    }
 else {
      return mSiteStore.getWPComSites();
    }
  }
 else {
    if (mShowSelfHostedSites) {
      List<SiteModel> out=mSiteStore.getVisibleWPComSites();
      out.addAll(mSiteStore.getSelfHostedSites());
      return out;
    }
 else {
      return mSiteStore.getVisibleWPComSites();
    }
  }
}",0.9656699889258028
14055,"/** 
 * This method doesn't do much, but insure we're doing the same check in all parts of the app.
 * @return true if the user is signed in a WordPress.com account or if he has a .org site.
 */
public static boolean isSignedInWPComOrHasWPOrgSite(AccountStore accountStore,SiteStore siteStore){
  return accountStore.hasAccessToken() || siteStore.hasDotOrgSite();
}","/** 
 * This method doesn't do much, but insure we're doing the same check in all parts of the app.
 * @return true if the user is signed in a WordPress.com account or if he has a .org site.
 */
public static boolean isSignedInWPComOrHasWPOrgSite(AccountStore accountStore,SiteStore siteStore){
  return accountStore.hasAccessToken() || siteStore.hasSelfHostedSite();
}",0.9782016348773842
14056,"public SiteModel getSelectedSite(){
  if (getActivity() instanceof WPMainActivity) {
    WPMainActivity mainActivity=(WPMainActivity)getActivity();
    mainActivity.getSelectedSite();
  }
  return null;
}","public SiteModel getSelectedSite(){
  if (getActivity() instanceof WPMainActivity) {
    WPMainActivity mainActivity=(WPMainActivity)getActivity();
    return mainActivity.getSelectedSite();
  }
  return null;
}",0.983132530120482
14057,"/** 
 * In order to avoid syncing issues, this method will be called when People page is created. We only keep the first page of users, so we don't show an empty screen. When fresh data is received, it'll replace the existing page.
 * @param localTableBlogId - the local blog id people will be deleted from
 */
public static void deletePeopleExceptForFirstPage(int localTableBlogId){
  int fetchLimit=PeopleUtils.FETCH_LIMIT;
  String[] tables={TEAM_TABLE,FOLLOWERS_TABLE,EMAIL_FOLLOWERS_TABLE,VIEWERS_TABLE};
  getWritableDb().beginTransaction();
  try {
    for (    String table : tables) {
      int size=getPeopleCountForLocalBlogId(table,localTableBlogId);
      if (size > fetchLimit) {
        String where=""String_Node_Str"" + localTableBlogId;
        String[] columns={""String_Node_Str""};
        String limit=Integer.toString(size - fetchLimit);
        String orderBy=null;
        if (shouldOrderAlphabetically(table)) {
          orderBy=""String_Node_Str"";
        }
        String inQuery=SQLiteQueryBuilder.buildQueryString(false,table,columns,where,null,null,orderBy,limit);
        String[] args=new String[]{Integer.toString(localTableBlogId)};
        getWritableDb().delete(table,""String_Node_Str"" + inQuery + ""String_Node_Str"",args);
      }
    }
    getWritableDb().setTransactionSuccessful();
  }
  finally {
    getWritableDb().endTransaction();
  }
}","/** 
 * In order to avoid syncing issues, this method will be called when People page is created. We only keep the first page of users, so we don't show an empty screen. When fresh data is received, it'll replace the existing page.
 * @param localTableBlogId - the local blog id people will be deleted from
 */
public static void deletePeopleExceptForFirstPage(int localTableBlogId){
  int fetchLimit=PeopleUtils.FETCH_LIMIT;
  String[] tables={TEAM_TABLE,FOLLOWERS_TABLE,EMAIL_FOLLOWERS_TABLE,VIEWERS_TABLE};
  getWritableDb().beginTransaction();
  try {
    for (    String table : tables) {
      int size=getPeopleCountForLocalBlogId(table,localTableBlogId);
      if (size > fetchLimit) {
        String where=""String_Node_Str"" + localTableBlogId;
        String[] columns={""String_Node_Str""};
        String limit=Integer.toString(size - fetchLimit);
        String orderBy;
        if (shouldOrderAlphabetically(table)) {
          orderBy=""String_Node_Str"";
        }
 else {
          orderBy=""String_Node_Str"";
        }
        String inQuery=SQLiteQueryBuilder.buildQueryString(false,table,columns,where,null,null,orderBy,limit);
        String[] args=new String[]{Integer.toString(localTableBlogId)};
        getWritableDb().delete(table,""String_Node_Str"" + inQuery + ""String_Node_Str"",args);
      }
    }
    getWritableDb().setTransactionSuccessful();
  }
  finally {
    getWritableDb().endTransaction();
  }
}",0.978601997146933
14058,"private static List<Person> getPeople(String table,int localTableBlogId){
  String[] args={Integer.toString(localTableBlogId)};
  String orderBy=""String_Node_Str"";
  if (shouldOrderAlphabetically(table)) {
    orderBy=""String_Node_Str"";
  }
  Cursor c=getReadableDb().rawQuery(""String_Node_Str"" + table + ""String_Node_Str""+ orderBy,args);
  List<Person> people=new ArrayList<>();
  try {
    while (c.moveToNext()) {
      Person person=getPersonFromCursor(c,table,localTableBlogId);
      people.add(person);
    }
  }
  finally {
    SqlUtils.closeCursor(c);
  }
  return people;
}","private static List<Person> getPeople(String table,int localTableBlogId){
  String[] args={Integer.toString(localTableBlogId)};
  String orderBy;
  if (shouldOrderAlphabetically(table)) {
    orderBy=""String_Node_Str"";
  }
 else {
    orderBy=""String_Node_Str"";
  }
  Cursor c=getReadableDb().rawQuery(""String_Node_Str"" + table + ""String_Node_Str""+ orderBy,args);
  List<Person> people=new ArrayList<>();
  try {
    while (c.moveToNext()) {
      Person person=getPersonFromCursor(c,table,localTableBlogId);
      people.add(person);
    }
  }
  finally {
    SqlUtils.closeCursor(c);
  }
  return people;
}",0.9168765743073048
14059,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.my_site_fragment,container,false);
  int fabHeight=getResources().getDimensionPixelSize(android.support.design.R.dimen.design_fab_size_normal);
  int fabMargin=getResources().getDimensionPixelSize(R.dimen.fab_margin);
  mFabTargetYTranslation=(fabHeight + fabMargin) * 2;
  mBlavatarSz=getResources().getDimensionPixelSize(R.dimen.blavatar_sz_small);
  mBlavatarImageView=(WPNetworkImageView)rootView.findViewById(R.id.my_site_blavatar);
  mBlogTitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_title_label);
  mBlogSubtitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_subtitle_label);
  mLookAndFeelHeader=(LinearLayout)rootView.findViewById(R.id.my_site_look_and_feel_header);
  mThemesContainer=(RelativeLayout)rootView.findViewById(R.id.row_themes);
  mPeopleView=(RelativeLayout)rootView.findViewById(R.id.row_people);
  mPlanContainer=(RelativeLayout)rootView.findViewById(R.id.row_plan);
  mConfigurationHeader=rootView.findViewById(R.id.row_configuration);
  mSettingsView=rootView.findViewById(R.id.row_settings);
  mAdminView=(LinearLayout)rootView.findViewById(R.id.admin_section);
  mScrollView=(ScrollView)rootView.findViewById(R.id.scroll_view);
  mNoSiteView=(LinearLayout)rootView.findViewById(R.id.no_site_view);
  mNoSiteDrakeImageView=(ImageView)rootView.findViewById(R.id.my_site_no_site_view_drake);
  mFabView=rootView.findViewById(R.id.fab_button);
  mCurrentPlanNameTextView=(WPTextView)rootView.findViewById(R.id.my_site_current_plan_text_view);
  mFabView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addNewBlogPostOrPageForResult(getActivity(),WordPress.getBlog(mBlogLocalId),false);
    }
  }
);
  rootView.findViewById(R.id.switch_site).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSitePicker();
    }
  }
);
  rootView.findViewById(R.id.row_view_site).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentSite(getActivity(),WordPress.getBlog(mBlogLocalId));
    }
  }
);
  rootView.findViewById(R.id.row_stats).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogStats(getActivity(),mBlogLocalId);
    }
  }
);
  if (isPlansEnabled()) {
    mPlanContainer.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ActivityLauncher.viewBlogPlans(getActivity(),mBlogLocalId);
      }
    }
);
  }
  rootView.findViewById(R.id.row_blog_posts).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPosts(getActivity());
    }
  }
);
  rootView.findViewById(R.id.row_media).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogMedia(getActivity());
    }
  }
);
  rootView.findViewById(R.id.row_pages).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPages(getActivity());
    }
  }
);
  rootView.findViewById(R.id.row_comments).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogComments(getActivity());
    }
  }
);
  mThemesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogThemes(getActivity());
    }
  }
);
  mPeopleView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPeople(getActivity());
    }
  }
);
  mSettingsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogSettingsForResult(getActivity(),WordPress.getBlog(mBlogLocalId));
    }
  }
);
  rootView.findViewById(R.id.row_admin).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogAdmin(getActivity(),WordPress.getBlog(mBlogLocalId));
    }
  }
);
  rootView.findViewById(R.id.my_site_add_site_btn).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      SitePickerActivity.addSite(getActivity());
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.my_site_fragment,container,false);
  int fabHeight=getResources().getDimensionPixelSize(android.support.design.R.dimen.design_fab_size_normal);
  int fabMargin=getResources().getDimensionPixelSize(R.dimen.fab_margin);
  mFabTargetYTranslation=(fabHeight + fabMargin) * 2;
  mBlavatarSz=getResources().getDimensionPixelSize(R.dimen.blavatar_sz_small);
  mBlavatarImageView=(WPNetworkImageView)rootView.findViewById(R.id.my_site_blavatar);
  mBlogTitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_title_label);
  mBlogSubtitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_subtitle_label);
  mLookAndFeelHeader=(LinearLayout)rootView.findViewById(R.id.my_site_look_and_feel_header);
  mThemesContainer=(RelativeLayout)rootView.findViewById(R.id.row_themes);
  mPeopleView=(RelativeLayout)rootView.findViewById(R.id.row_people);
  mPlanContainer=(RelativeLayout)rootView.findViewById(R.id.row_plan);
  mConfigurationHeader=rootView.findViewById(R.id.row_configuration);
  mSettingsView=rootView.findViewById(R.id.row_settings);
  mAdminView=(RelativeLayout)rootView.findViewById(R.id.row_admin);
  mScrollView=(ScrollView)rootView.findViewById(R.id.scroll_view);
  mNoSiteView=(LinearLayout)rootView.findViewById(R.id.no_site_view);
  mNoSiteDrakeImageView=(ImageView)rootView.findViewById(R.id.my_site_no_site_view_drake);
  mFabView=rootView.findViewById(R.id.fab_button);
  mCurrentPlanNameTextView=(WPTextView)rootView.findViewById(R.id.my_site_current_plan_text_view);
  mFabView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addNewBlogPostOrPageForResult(getActivity(),WordPress.getBlog(mBlogLocalId),false);
    }
  }
);
  rootView.findViewById(R.id.switch_site).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSitePicker();
    }
  }
);
  rootView.findViewById(R.id.row_view_site).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentSite(getActivity(),WordPress.getBlog(mBlogLocalId));
    }
  }
);
  rootView.findViewById(R.id.row_stats).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogStats(getActivity(),mBlogLocalId);
    }
  }
);
  if (isPlansEnabled()) {
    mPlanContainer.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ActivityLauncher.viewBlogPlans(getActivity(),mBlogLocalId);
      }
    }
);
  }
  rootView.findViewById(R.id.row_blog_posts).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPosts(getActivity());
    }
  }
);
  rootView.findViewById(R.id.row_media).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogMedia(getActivity());
    }
  }
);
  rootView.findViewById(R.id.row_pages).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPages(getActivity());
    }
  }
);
  rootView.findViewById(R.id.row_comments).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogComments(getActivity());
    }
  }
);
  mThemesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogThemes(getActivity());
    }
  }
);
  mPeopleView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPeople(getActivity());
    }
  }
);
  mSettingsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogSettingsForResult(getActivity(),WordPress.getBlog(mBlogLocalId));
    }
  }
);
  rootView.findViewById(R.id.row_admin).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogAdmin(getActivity(),WordPress.getBlog(mBlogLocalId));
    }
  }
);
  rootView.findViewById(R.id.my_site_add_site_btn).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      SitePickerActivity.addSite(getActivity());
    }
  }
);
  return rootView;
}",0.9963290865903692
14060,"private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  startProgress(getString(R.string.validating_site_data));
  final String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  final String siteName=EditTextUtils.getText(mSiteTitleTextField).trim();
  final String language=CreateUserAndBlog.getDeviceLanguage(getActivity());
  CreateUserAndBlog createUserAndBlog=new CreateUserAndBlog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",siteUrl,siteName,language,getRestClientUtils(),getActivity(),new ErrorListener(),new CreateUserAndBlog.Callback(){
    @Override public void onStepFinished(    CreateUserAndBlog.Step step){
      if (getActivity() != null) {
        updateProgress(getString(R.string.create_new_blog_wpcom));
      }
    }
    @Override public void onSuccess(    JSONObject createSiteResponse){
      if (getActivity() == null) {
        return;
      }
      endProgress();
      try {
        JSONObject details=createSiteResponse.getJSONObject(""String_Node_Str"");
        String blogName=details.getString(""String_Node_Str"");
        String xmlRpcUrl=details.getString(""String_Node_Str"");
        String homeUrl=details.getString(""String_Node_Str"");
        String blogId=details.getString(""String_Node_Str"");
        String username=AccountHelper.getDefaultAccount().getUserName();
        BlogUtils.addOrUpdateBlog(blogName,xmlRpcUrl,homeUrl,blogId,username,null,null,null,true,true,PlansConstants.DEFAULT_PLAN_ID_FOR_NEW_BLOG,null,null);
        ToastUtils.showToast(getActivity(),R.string.new_blog_wpcom_created);
      }
 catch (      JSONException e) {
        AppLog.e(T.NUX,""String_Node_Str"",e);
      }
      getActivity().setResult(Activity.RESULT_OK);
      getActivity().finish();
    }
    @Override public void onError(    int messageId){
      if (getActivity() == null) {
        return;
      }
      endProgress();
      showError(getString(messageId));
    }
  }
);
  AppLog.i(T.NUX,""String_Node_Str"" + siteName + ""String_Node_Str""+ siteUrl);
  createUserAndBlog.startCreateBlogProcess();
}","private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  startProgress(getString(R.string.validating_site_data));
  final String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  final String siteName=EditTextUtils.getText(mSiteTitleTextField).trim();
  final String language=CreateUserAndBlog.getDeviceLanguage(getActivity());
  CreateUserAndBlog createUserAndBlog=new CreateUserAndBlog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",siteUrl,siteName,language,getRestClientUtils(),new ErrorListener(),new CreateUserAndBlog.Callback(){
    @Override public void onStepFinished(    CreateUserAndBlog.Step step){
      if (getActivity() != null) {
        updateProgress(getString(R.string.create_new_blog_wpcom));
      }
    }
    @Override public void onSuccess(    JSONObject createSiteResponse){
      if (getActivity() == null) {
        return;
      }
      endProgress();
      try {
        JSONObject details=createSiteResponse.getJSONObject(""String_Node_Str"");
        String blogName=details.getString(""String_Node_Str"");
        String xmlRpcUrl=details.getString(""String_Node_Str"");
        String homeUrl=details.getString(""String_Node_Str"");
        String blogId=details.getString(""String_Node_Str"");
        String username=AccountHelper.getDefaultAccount().getUserName();
        BlogUtils.addOrUpdateBlog(blogName,xmlRpcUrl,homeUrl,blogId,username,null,null,null,true,true,PlansConstants.DEFAULT_PLAN_ID_FOR_NEW_BLOG,null,null);
        AnalyticsTracker.track(AnalyticsTracker.Stat.CREATED_SITE);
        ToastUtils.showToast(getActivity(),R.string.new_blog_wpcom_created);
      }
 catch (      JSONException e) {
        AppLog.e(T.NUX,""String_Node_Str"",e);
      }
      getActivity().setResult(Activity.RESULT_OK);
      getActivity().finish();
    }
    @Override public void onError(    int messageId){
      if (getActivity() == null) {
        return;
      }
      endProgress();
      showError(getString(messageId));
    }
  }
);
  AppLog.i(T.NUX,""String_Node_Str"" + siteName + ""String_Node_Str""+ siteUrl);
  createUserAndBlog.startCreateBlogProcess();
}",0.9825457641549596
14061,"@Override public void onSuccess(JSONObject createSiteResponse){
  if (getActivity() == null) {
    return;
  }
  endProgress();
  try {
    JSONObject details=createSiteResponse.getJSONObject(""String_Node_Str"");
    String blogName=details.getString(""String_Node_Str"");
    String xmlRpcUrl=details.getString(""String_Node_Str"");
    String homeUrl=details.getString(""String_Node_Str"");
    String blogId=details.getString(""String_Node_Str"");
    String username=AccountHelper.getDefaultAccount().getUserName();
    BlogUtils.addOrUpdateBlog(blogName,xmlRpcUrl,homeUrl,blogId,username,null,null,null,true,true,PlansConstants.DEFAULT_PLAN_ID_FOR_NEW_BLOG,null,null);
    ToastUtils.showToast(getActivity(),R.string.new_blog_wpcom_created);
  }
 catch (  JSONException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
  }
  getActivity().setResult(Activity.RESULT_OK);
  getActivity().finish();
}","@Override public void onSuccess(JSONObject createSiteResponse){
  if (getActivity() == null) {
    return;
  }
  endProgress();
  try {
    JSONObject details=createSiteResponse.getJSONObject(""String_Node_Str"");
    String blogName=details.getString(""String_Node_Str"");
    String xmlRpcUrl=details.getString(""String_Node_Str"");
    String homeUrl=details.getString(""String_Node_Str"");
    String blogId=details.getString(""String_Node_Str"");
    String username=AccountHelper.getDefaultAccount().getUserName();
    BlogUtils.addOrUpdateBlog(blogName,xmlRpcUrl,homeUrl,blogId,username,null,null,null,true,true,PlansConstants.DEFAULT_PLAN_ID_FOR_NEW_BLOG,null,null);
    AnalyticsTracker.track(AnalyticsTracker.Stat.CREATED_SITE);
    ToastUtils.showToast(getActivity(),R.string.new_blog_wpcom_created);
  }
 catch (  JSONException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
  }
  getActivity().setResult(Activity.RESULT_OK);
  getActivity().finish();
}",0.96529284164859
14062,"private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  startProgress(getString(R.string.validating_user_data));
  final String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  final String email=EditTextUtils.getText(mEmailTextField).trim();
  mUsername=EditTextUtils.getText(mUsernameTextField).trim();
  mPassword=EditTextUtils.getText(mPasswordTextField).trim();
  final String siteName=siteUrlToSiteName(siteUrl);
  final String language=CreateUserAndBlog.getDeviceLanguage(getActivity());
  CreateUserAndBlog createUserAndBlog=new CreateUserAndBlog(email,mUsername,mPassword,siteUrl,siteName,language,getRestClientUtils(),getActivity(),new ErrorListener(),new CreateUserAndBlog.Callback(){
    @Override public void onStepFinished(    CreateUserAndBlog.Step step){
      if (!isAdded()) {
        return;
      }
switch (step) {
case VALIDATE_USER:
        updateProgress(getString(R.string.validating_site_data));
      break;
case VALIDATE_SITE:
    updateProgress(getString(R.string.creating_your_account));
  break;
case CREATE_USER:
updateProgress(getString(R.string.creating_your_site));
break;
case CREATE_SITE:
case AUTHENTICATE_USER:
default :
break;
}
}
@Override public void onSuccess(JSONObject createSiteResponse){
AnalyticsUtils.refreshMetadata(mUsername,email);
AnalyticsTracker.track(AnalyticsTracker.Stat.CREATED_ACCOUNT);
SmartLockHelper smartLockHelper=getSmartLockHelper();
if (smartLockHelper != null) {
smartLockHelper.saveCredentialsInSmartLock(mUsername,mPassword,mUsername,null);
}
if (isAdded()) {
signInAndFetchBlogListWPCom();
}
}
@Override public void onError(int messageId){
endProgress();
if (isAdded()) {
showError(getString(messageId));
}
}
}
);
AppLog.i(T.NUX,""String_Node_Str"" + mUsername + ""String_Node_Str""+ email+ ""String_Node_Str""+ siteName+ ""String_Node_Str""+ siteUrl);
createUserAndBlog.startCreateUserAndBlogProcess();
}","private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  startProgress(getString(R.string.validating_user_data));
  final String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  final String email=EditTextUtils.getText(mEmailTextField).trim();
  mUsername=EditTextUtils.getText(mUsernameTextField).trim();
  mPassword=EditTextUtils.getText(mPasswordTextField).trim();
  final String siteName=siteUrlToSiteName(siteUrl);
  final String language=CreateUserAndBlog.getDeviceLanguage(getActivity());
  CreateUserAndBlog createUserAndBlog=new CreateUserAndBlog(email,mUsername,mPassword,siteUrl,siteName,language,getRestClientUtils(),new ErrorListener(),new CreateUserAndBlog.Callback(){
    @Override public void onStepFinished(    CreateUserAndBlog.Step step){
      if (!isAdded()) {
        return;
      }
switch (step) {
case VALIDATE_USER:
        updateProgress(getString(R.string.validating_site_data));
      break;
case VALIDATE_SITE:
    updateProgress(getString(R.string.creating_your_account));
  break;
case CREATE_USER:
updateProgress(getString(R.string.creating_your_site));
break;
case CREATE_SITE:
case AUTHENTICATE_USER:
default :
break;
}
}
@Override public void onSuccess(JSONObject createSiteResponse){
AnalyticsUtils.refreshMetadata(mUsername,email);
AnalyticsTracker.track(AnalyticsTracker.Stat.CREATED_ACCOUNT);
SmartLockHelper smartLockHelper=getSmartLockHelper();
if (smartLockHelper != null) {
smartLockHelper.saveCredentialsInSmartLock(mUsername,mPassword,mUsername,null);
}
if (isAdded()) {
signInAndFetchBlogListWPCom();
}
}
@Override public void onError(int messageId){
endProgress();
if (isAdded()) {
showError(getString(messageId));
}
}
}
);
AppLog.i(T.NUX,""String_Node_Str"" + mUsername + ""String_Node_Str""+ email+ ""String_Node_Str""+ siteName+ ""String_Node_Str""+ siteUrl);
createUserAndBlog.startCreateUserAndBlogProcess();
}",0.9967411545623835
14063,"public CreateUserAndBlog(String email,String username,String password,String siteUrl,String siteName,String language,RestClientUtils restClient,Context context,ErrorListener errorListener,Callback callback){
  mEmail=email;
  mUsername=username;
  mPassword=password;
  mSiteUrl=siteUrl;
  mSiteName=siteName;
  mLanguage=language;
  mCallback=callback;
  mContext=context;
  mErrorListener=errorListener;
  mRestClient=restClient;
  mResponseHandler=new ResponseHandler();
}","public CreateUserAndBlog(String email,String username,String password,String siteUrl,String siteName,String language,RestClientUtils restClient,ErrorListener errorListener,Callback callback){
  mEmail=email;
  mUsername=username;
  mPassword=password;
  mSiteUrl=siteUrl;
  mSiteName=siteName;
  mLanguage=language;
  mCallback=callback;
  mErrorListener=errorListener;
  mRestClient=restClient;
  mResponseHandler=new ResponseHandler();
}",0.9606126914660832
14064,"private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions;
switch (stat) {
case APPLICATION_OPENED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
incrementSessionCount();
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case APPLICATION_INSTALLED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case APPLICATION_UPGRADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_COMMENTED_ON:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_BLOCKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_FOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_PREVIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_UNFOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_DISCOVER_VIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_FOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_PREVIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_UNFOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_FOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_PREVIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_UNFOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_SEARCH_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_SEARCH_PERFORMED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_SEARCH_RESULT_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SAVED_DRAFT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_DISCARDED_CHANGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_EDITED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ENABLED_NEW_VERSION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case EDITOR_TOGGLED_ON:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setPeoplePropertyToValue(""String_Node_Str"",true);
break;
case EDITOR_TOGGLED_OFF:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setPeoplePropertyToValue(""String_Node_Str"",false);
break;
case EDITOR_UPLOAD_MEDIA_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPLOAD_MEDIA_RETRIED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BLOCKQUOTE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_HTML:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ORDERED_LIST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNLINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNORDERED_LIST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_UNAPPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_BLOG_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_ACCOUNT_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_APP_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MY_PROFILE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PEOPLE_MANAGEMENT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PERSON:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case SIGNED_IN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case ACCOUNT_LOGOUT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_INSIGHTS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_DAYS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SINGLE_POST_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_TAPPED_BAR_CHART:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SCROLLED_TO_BOTTOM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_SELECTED_CONNECT_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_WIDGET_ADDED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_WIDGET_REMOVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_WIDGET_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_RECEIVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_EXITED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_SUCCEEDED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_INSERTED_INVALID_URL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_AUTOFILL_CREDENTIALS_FILLED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_AUTOFILL_CREDENTIALS_UPDATED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PERSON_REMOVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PERSON_UPDATED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_EXPIRED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_IGNORED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case NOTIFICATION_SETTINGS_LIST_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case NOTIFICATION_SETTINGS_STREAMS_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case NOTIFICATION_SETTINGS_DETAILS_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case ME_GRAVATAR_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_TOOLTIP_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_PERMISSIONS_INTERRUPTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_PERMISSIONS_DENIED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_PERMISSIONS_ACCEPTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_SHOT_NEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_GALLERY_PICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_CROPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_UPLOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_UPLOAD_UNSUCCESSFUL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_UPLOAD_EXCEPTION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case MY_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_ACCESSED_SEARCH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_PREVIEWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_DEMO_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_CUSTOMIZE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_SUPPORT_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_DETAILS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ACCOUNT_SETTINGS_LANGUAGE_CHANGED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_ACCESSED_MORE_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_ADDED_LIST_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETED_LIST_ITEMS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_HINT_TOAST_SHOWN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_LEARN_MORE_CLICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_LEARN_MORE_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_SAVED_REMOTELY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_START_OVER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_START_OVER_CONTACT_SUPPORT_CLICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_OK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_ERROR:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOWN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOW_CLICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_OK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_ERROR:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ABTEST_START:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}","private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions;
switch (stat) {
case APPLICATION_OPENED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
incrementSessionCount();
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case APPLICATION_INSTALLED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case APPLICATION_UPGRADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_COMMENTED_ON:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ARTICLE_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_BLOCKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_FOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_PREVIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_UNFOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_DISCOVER_VIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_FOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_PREVIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIST_UNFOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_FOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_PREVIEWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_UNFOLLOWED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_SEARCH_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_SEARCH_PERFORMED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_SEARCH_RESULT_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SAVED_DRAFT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_DISCARDED_CHANGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_EDITED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ENABLED_NEW_VERSION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case EDITOR_TOGGLED_ON:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setPeoplePropertyToValue(""String_Node_Str"",true);
break;
case EDITOR_TOGGLED_OFF:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setPeoplePropertyToValue(""String_Node_Str"",false);
break;
case EDITOR_UPLOAD_MEDIA_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPLOAD_MEDIA_RETRIED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BLOCKQUOTE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_HTML:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ORDERED_LIST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNLINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNORDERED_LIST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_UNAPPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_BLOG_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_ACCOUNT_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_APP_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MY_PROFILE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PEOPLE_MANAGEMENT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PERSON:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case CREATED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case SIGNED_IN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case ACCOUNT_LOGOUT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_INSIGHTS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_DAYS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SINGLE_POST_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_TAPPED_BAR_CHART:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SCROLLED_TO_BOTTOM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_SELECTED_CONNECT_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_WIDGET_ADDED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_WIDGET_REMOVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_WIDGET_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_RECEIVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_EXITED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_MAGIC_LINK_SUCCEEDED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_INSERTED_INVALID_URL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_AUTOFILL_CREDENTIALS_FILLED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_AUTOFILL_CREDENTIALS_UPDATED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PERSON_REMOVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PERSON_UPDATED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_EXPIRED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_AUTHENTICATION_IGNORED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case NOTIFICATION_SETTINGS_LIST_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case NOTIFICATION_SETTINGS_STREAMS_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case NOTIFICATION_SETTINGS_DETAILS_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case ME_GRAVATAR_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_TOOLTIP_TAPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_PERMISSIONS_INTERRUPTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_PERMISSIONS_DENIED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_PERMISSIONS_ACCEPTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_SHOT_NEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_GALLERY_PICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_CROPPED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_UPLOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_UPLOAD_UNSUCCESSFUL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_GRAVATAR_UPLOAD_EXCEPTION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case MY_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_ACCESSED_SEARCH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_PREVIEWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_DEMO_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_CUSTOMIZE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_SUPPORT_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_DETAILS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ACCOUNT_SETTINGS_LANGUAGE_CHANGED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_ACCESSED_MORE_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_ADDED_LIST_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETED_LIST_ITEMS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_HINT_TOAST_SHOWN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_LEARN_MORE_CLICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_LEARN_MORE_LOADED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_SAVED_REMOTELY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case SITE_SETTINGS_START_OVER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_START_OVER_CONTACT_SUPPORT_CLICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_OK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_ERROR:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOWN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOW_CLICKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_REQUESTED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_OK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_ERROR:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ABTEST_START:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}",0.9980875239059512
14065,"@Override public void track(AnalyticsTracker.Stat stat,Map<String,?> properties){
  if (mNosaraClient == null) {
    return;
  }
  Map<String,Object> predefinedEventProperties=new HashMap<String,Object>();
  String eventName;
switch (stat) {
case APPLICATION_OPENED:
    eventName=""String_Node_Str"";
  break;
case APPLICATION_CLOSED:
eventName=""String_Node_Str"";
break;
case APPLICATION_INSTALLED:
eventName=""String_Node_Str"";
break;
case APPLICATION_UPGRADED:
eventName=""String_Node_Str"";
break;
case READER_ACCESSED:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_COMMENTED_ON:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_LIKED:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_OPENED:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_UNLIKED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_BLOCKED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_FOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_PREVIEWED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_UNFOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_DISCOVER_VIEWED:
eventName=""String_Node_Str"";
break;
case READER_INFINITE_SCROLL:
eventName=""String_Node_Str"";
break;
case READER_LIST_FOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_LIST_LOADED:
eventName=""String_Node_Str"";
break;
case READER_LIST_PREVIEWED:
eventName=""String_Node_Str"";
break;
case READER_LIST_UNFOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_TAG_FOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_TAG_LOADED:
eventName=""String_Node_Str"";
break;
case READER_TAG_PREVIEWED:
eventName=""String_Node_Str"";
break;
case READER_SEARCH_LOADED:
eventName=""String_Node_Str"";
break;
case READER_SEARCH_PERFORMED:
eventName=""String_Node_Str"";
break;
case READER_SEARCH_RESULT_TAPPED:
eventName=""String_Node_Str"";
break;
case READER_TAG_UNFOLLOWED:
eventName=""String_Node_Str"";
break;
case EDITOR_CREATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SAVED_DRAFT:
eventName=""String_Node_Str"";
break;
case EDITOR_DISCARDED_CHANGES:
eventName=""String_Node_Str"";
break;
case EDITOR_EDITED_IMAGE:
eventName=""String_Node_Str"";
break;
case EDITOR_ENABLED_NEW_VERSION:
eventName=""String_Node_Str"";
break;
case EDITOR_TOGGLED_OFF:
eventName=""String_Node_Str"";
break;
case EDITOR_TOGGLED_ON:
eventName=""String_Node_Str"";
break;
case EDITOR_UPLOAD_MEDIA_FAILED:
eventName=""String_Node_Str"";
break;
case EDITOR_UPLOAD_MEDIA_RETRIED:
eventName=""String_Node_Str"";
break;
case EDITOR_CLOSED:
eventName=""String_Node_Str"";
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_UPDATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SCHEDULED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_TAPPED_BLOCKQUOTE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_HTML:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ORDERED_LIST:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNLINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNORDERED_LIST:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
eventName=""String_Node_Str"";
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNAPPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_REPLIED_TO:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_TRASHED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_LIKED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNLIKED:
eventName=""String_Node_Str"";
break;
case OPENED_POSTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_PAGES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_COMMENTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_BLOG_SETTINGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_ACCOUNT_SETTINGS:
eventName=""String_Node_Str"";
break;
case OPENED_APP_SETTINGS:
eventName=""String_Node_Str"";
break;
case OPENED_MY_PROFILE:
eventName=""String_Node_Str"";
break;
case OPENED_PEOPLE_MANAGEMENT:
eventName=""String_Node_Str"";
break;
case OPENED_PERSON:
eventName=""String_Node_Str"";
break;
case CREATED_ACCOUNT:
eventName=""String_Node_Str"";
break;
case SHARED_ITEM:
eventName=""String_Node_Str"";
break;
case ADDED_SELF_HOSTED_SITE:
eventName=""String_Node_Str"";
break;
case SIGNED_IN:
eventName=""String_Node_Str"";
break;
case SIGNED_INTO_JETPACK:
eventName=""String_Node_Str"";
break;
case ACCOUNT_LOGOUT:
eventName=""String_Node_Str"";
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
eventName=""String_Node_Str"";
break;
case STATS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_INSIGHTS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_PERIOD_DAYS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_SINGLE_POST_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_TAPPED_BAR_CHART:
eventName=""String_Node_Str"";
break;
case STATS_SCROLLED_TO_BOTTOM:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_INSTALL_JETPACK:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_CONNECT_JETPACK:
eventName=""String_Node_Str"";
break;
case STATS_WIDGET_ADDED:
eventName=""String_Node_Str"";
break;
case STATS_WIDGET_REMOVED:
eventName=""String_Node_Str"";
break;
case STATS_WIDGET_TAPPED:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_RECEIVED:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_TAPPED:
eventName=""String_Node_Str"";
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
eventName=""String_Node_Str"";
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_EXITED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_OPENED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_REQUESTED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_SUCCEEDED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
eventName=""String_Node_Str"";
break;
case LOGIN_INSERTED_INVALID_URL:
eventName=""String_Node_Str"";
break;
case LOGIN_AUTOFILL_CREDENTIALS_FILLED:
eventName=""String_Node_Str"";
break;
case LOGIN_AUTOFILL_CREDENTIALS_UPDATED:
eventName=""String_Node_Str"";
break;
case PERSON_REMOVED:
eventName=""String_Node_Str"";
break;
case PERSON_UPDATED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_EXPIRED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_FAILED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_IGNORED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_SETTINGS_LIST_OPENED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_SETTINGS_STREAMS_OPENED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_SETTINGS_DETAILS_OPENED:
eventName=""String_Node_Str"";
break;
case ME_ACCESSED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_TAPPED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_TOOLTIP_TAPPED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_PERMISSIONS_INTERRUPTED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_PERMISSIONS_DENIED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_PERMISSIONS_ACCEPTED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_SHOT_NEW:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_GALLERY_PICKED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_CROPPED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_UPLOADED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_UPLOAD_UNSUCCESSFUL:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_UPLOAD_EXCEPTION:
eventName=""String_Node_Str"";
break;
case MY_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_THEMES_BROWSER:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_SEARCH:
eventName=""String_Node_Str"";
break;
case THEMES_CHANGED_THEME:
eventName=""String_Node_Str"";
break;
case THEMES_PREVIEWED_SITE:
eventName=""String_Node_Str"";
break;
case THEMES_DEMO_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_CUSTOMIZE_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_SUPPORT_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_DETAILS_ACCESSED:
eventName=""String_Node_Str"";
break;
case ACCOUNT_SETTINGS_LANGUAGE_CHANGED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_ACCESSED_MORE_SETTINGS:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_ADDED_LIST_ITEM:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETED_LIST_ITEMS:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_HINT_TOAST_SHOWN:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_LEARN_MORE_CLICKED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_LEARN_MORE_LOADED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_SAVED_REMOTELY:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_START_OVER_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_START_OVER_CONTACT_SUPPORT_CLICKED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_REQUESTED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_OK:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_ERROR:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_REQUESTED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOWN:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOW_CLICKED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_REQUESTED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_OK:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_ERROR:
eventName=""String_Node_Str"";
break;
case ABTEST_START:
eventName=""String_Node_Str"";
break;
default :
eventName=null;
break;
}
if (eventName == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + stat.name() + ""String_Node_Str"");
return;
}
final String user;
final TracksClient.NosaraUserType userType;
if (getWordPressComUserName() != null) {
user=getWordPressComUserName();
userType=TracksClient.NosaraUserType.WPCOM;
}
 else {
if (getAnonID() == null) {
user=generateNewAnonID();
}
 else {
user=getAnonID();
}
userType=TracksClient.NosaraUserType.ANON;
}
final JSONObject propertiesToJSON;
if (properties != null && properties.size() > 0) {
propertiesToJSON=new JSONObject(properties);
for (String key : predefinedEventProperties.keySet()) {
try {
if (propertiesToJSON.has(key)) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str"");
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + propertiesToJSON.get(key).toString() + ""String_Node_Str""+ predefinedEventProperties.get(key).toString());
}
 else {
propertiesToJSON.put(key,predefinedEventProperties.get(key));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
}
}
}
 else {
propertiesToJSON=new JSONObject(predefinedEventProperties);
}
if (propertiesToJSON.length() > 0) {
mNosaraClient.track(EVENTS_PREFIX + eventName,propertiesToJSON,user,userType);
}
 else {
mNosaraClient.track(EVENTS_PREFIX + eventName,user,userType);
}
}","@Override public void track(AnalyticsTracker.Stat stat,Map<String,?> properties){
  if (mNosaraClient == null) {
    return;
  }
  Map<String,Object> predefinedEventProperties=new HashMap<String,Object>();
  String eventName;
switch (stat) {
case APPLICATION_OPENED:
    eventName=""String_Node_Str"";
  break;
case APPLICATION_CLOSED:
eventName=""String_Node_Str"";
break;
case APPLICATION_INSTALLED:
eventName=""String_Node_Str"";
break;
case APPLICATION_UPGRADED:
eventName=""String_Node_Str"";
break;
case READER_ACCESSED:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_COMMENTED_ON:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_LIKED:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_OPENED:
eventName=""String_Node_Str"";
break;
case READER_ARTICLE_UNLIKED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_BLOCKED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_FOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_PREVIEWED:
eventName=""String_Node_Str"";
break;
case READER_BLOG_UNFOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_DISCOVER_VIEWED:
eventName=""String_Node_Str"";
break;
case READER_INFINITE_SCROLL:
eventName=""String_Node_Str"";
break;
case READER_LIST_FOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_LIST_LOADED:
eventName=""String_Node_Str"";
break;
case READER_LIST_PREVIEWED:
eventName=""String_Node_Str"";
break;
case READER_LIST_UNFOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_TAG_FOLLOWED:
eventName=""String_Node_Str"";
break;
case READER_TAG_LOADED:
eventName=""String_Node_Str"";
break;
case READER_TAG_PREVIEWED:
eventName=""String_Node_Str"";
break;
case READER_SEARCH_LOADED:
eventName=""String_Node_Str"";
break;
case READER_SEARCH_PERFORMED:
eventName=""String_Node_Str"";
break;
case READER_SEARCH_RESULT_TAPPED:
eventName=""String_Node_Str"";
break;
case READER_TAG_UNFOLLOWED:
eventName=""String_Node_Str"";
break;
case EDITOR_CREATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SAVED_DRAFT:
eventName=""String_Node_Str"";
break;
case EDITOR_DISCARDED_CHANGES:
eventName=""String_Node_Str"";
break;
case EDITOR_EDITED_IMAGE:
eventName=""String_Node_Str"";
break;
case EDITOR_ENABLED_NEW_VERSION:
eventName=""String_Node_Str"";
break;
case EDITOR_TOGGLED_OFF:
eventName=""String_Node_Str"";
break;
case EDITOR_TOGGLED_ON:
eventName=""String_Node_Str"";
break;
case EDITOR_UPLOAD_MEDIA_FAILED:
eventName=""String_Node_Str"";
break;
case EDITOR_UPLOAD_MEDIA_RETRIED:
eventName=""String_Node_Str"";
break;
case EDITOR_CLOSED:
eventName=""String_Node_Str"";
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_VIDEO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_UPDATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SCHEDULED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_TAPPED_BLOCKQUOTE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_HTML:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ORDERED_LIST:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNLINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNORDERED_LIST:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
eventName=""String_Node_Str"";
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNAPPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_REPLIED_TO:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_TRASHED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_LIKED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNLIKED:
eventName=""String_Node_Str"";
break;
case OPENED_POSTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_PAGES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_COMMENTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_BLOG_SETTINGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_ACCOUNT_SETTINGS:
eventName=""String_Node_Str"";
break;
case OPENED_APP_SETTINGS:
eventName=""String_Node_Str"";
break;
case OPENED_MY_PROFILE:
eventName=""String_Node_Str"";
break;
case OPENED_PEOPLE_MANAGEMENT:
eventName=""String_Node_Str"";
break;
case OPENED_PERSON:
eventName=""String_Node_Str"";
break;
case CREATED_ACCOUNT:
eventName=""String_Node_Str"";
break;
case CREATED_SITE:
eventName=""String_Node_Str"";
break;
case SHARED_ITEM:
eventName=""String_Node_Str"";
break;
case ADDED_SELF_HOSTED_SITE:
eventName=""String_Node_Str"";
break;
case SIGNED_IN:
eventName=""String_Node_Str"";
break;
case SIGNED_INTO_JETPACK:
eventName=""String_Node_Str"";
break;
case ACCOUNT_LOGOUT:
eventName=""String_Node_Str"";
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
eventName=""String_Node_Str"";
break;
case STATS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_INSIGHTS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_PERIOD_DAYS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_SINGLE_POST_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_TAPPED_BAR_CHART:
eventName=""String_Node_Str"";
break;
case STATS_SCROLLED_TO_BOTTOM:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_INSTALL_JETPACK:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_CONNECT_JETPACK:
eventName=""String_Node_Str"";
break;
case STATS_WIDGET_ADDED:
eventName=""String_Node_Str"";
break;
case STATS_WIDGET_REMOVED:
eventName=""String_Node_Str"";
break;
case STATS_WIDGET_TAPPED:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_RECEIVED:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_TAPPED:
eventName=""String_Node_Str"";
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
eventName=""String_Node_Str"";
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_EXITED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_OPENED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_REQUESTED:
eventName=""String_Node_Str"";
break;
case LOGIN_MAGIC_LINK_SUCCEEDED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
eventName=""String_Node_Str"";
break;
case LOGIN_INSERTED_INVALID_URL:
eventName=""String_Node_Str"";
break;
case LOGIN_AUTOFILL_CREDENTIALS_FILLED:
eventName=""String_Node_Str"";
break;
case LOGIN_AUTOFILL_CREDENTIALS_UPDATED:
eventName=""String_Node_Str"";
break;
case PERSON_REMOVED:
eventName=""String_Node_Str"";
break;
case PERSON_UPDATED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_EXPIRED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_FAILED:
eventName=""String_Node_Str"";
break;
case PUSH_AUTHENTICATION_IGNORED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_SETTINGS_LIST_OPENED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_SETTINGS_STREAMS_OPENED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_SETTINGS_DETAILS_OPENED:
eventName=""String_Node_Str"";
break;
case ME_ACCESSED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_TAPPED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_TOOLTIP_TAPPED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_PERMISSIONS_INTERRUPTED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_PERMISSIONS_DENIED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_PERMISSIONS_ACCEPTED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_SHOT_NEW:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_GALLERY_PICKED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_CROPPED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_UPLOADED:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_UPLOAD_UNSUCCESSFUL:
eventName=""String_Node_Str"";
break;
case ME_GRAVATAR_UPLOAD_EXCEPTION:
eventName=""String_Node_Str"";
break;
case MY_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_THEMES_BROWSER:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_SEARCH:
eventName=""String_Node_Str"";
break;
case THEMES_CHANGED_THEME:
eventName=""String_Node_Str"";
break;
case THEMES_PREVIEWED_SITE:
eventName=""String_Node_Str"";
break;
case THEMES_DEMO_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_CUSTOMIZE_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_SUPPORT_ACCESSED:
eventName=""String_Node_Str"";
break;
case THEMES_DETAILS_ACCESSED:
eventName=""String_Node_Str"";
break;
case ACCOUNT_SETTINGS_LANGUAGE_CHANGED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_ACCESSED_MORE_SETTINGS:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_ADDED_LIST_ITEM:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETED_LIST_ITEMS:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_HINT_TOAST_SHOWN:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_LEARN_MORE_CLICKED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_LEARN_MORE_LOADED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_SAVED_REMOTELY:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_START_OVER_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_START_OVER_CONTACT_SUPPORT_CLICKED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_REQUESTED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_OK:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_EXPORT_SITE_RESPONSE_ERROR:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_REQUESTED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOWN:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOW_CLICKED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_REQUESTED:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_OK:
eventName=""String_Node_Str"";
break;
case SITE_SETTINGS_DELETE_SITE_RESPONSE_ERROR:
eventName=""String_Node_Str"";
break;
case ABTEST_START:
eventName=""String_Node_Str"";
break;
default :
eventName=null;
break;
}
if (eventName == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + stat.name() + ""String_Node_Str"");
return;
}
final String user;
final TracksClient.NosaraUserType userType;
if (getWordPressComUserName() != null) {
user=getWordPressComUserName();
userType=TracksClient.NosaraUserType.WPCOM;
}
 else {
if (getAnonID() == null) {
user=generateNewAnonID();
}
 else {
user=getAnonID();
}
userType=TracksClient.NosaraUserType.ANON;
}
final JSONObject propertiesToJSON;
if (properties != null && properties.size() > 0) {
propertiesToJSON=new JSONObject(properties);
for (String key : predefinedEventProperties.keySet()) {
try {
if (propertiesToJSON.has(key)) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str"");
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + propertiesToJSON.get(key).toString() + ""String_Node_Str""+ predefinedEventProperties.get(key).toString());
}
 else {
propertiesToJSON.put(key,predefinedEventProperties.get(key));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
}
}
}
 else {
propertiesToJSON=new JSONObject(predefinedEventProperties);
}
if (propertiesToJSON.length() > 0) {
mNosaraClient.track(EVENTS_PREFIX + eventName,propertiesToJSON,user,userType);
}
 else {
mNosaraClient.track(EVENTS_PREFIX + eventName,user,userType);
}
}",0.9981140486232556
14066,"@SuppressLint(""String_Node_Str"") @Override protected void configureWebView(){
  mWebView.getSettings().setJavaScriptEnabled(true);
  mWebView.getSettings().setDomStorageEnabled(true);
  WebViewClient webViewClient;
  Bundle extras=getIntent().getExtras();
  ArrayList<String> allowedURL=null;
  if (extras.getBoolean(DISABLE_LINKS_ON_PAGE,false)) {
    String addressToLoad=extras.getString(URL_TO_LOAD);
    String authURL=extras.getString(AUTHENTICATION_URL);
    allowedURL=new ArrayList<>();
    if (!TextUtils.isEmpty(addressToLoad)) {
      allowedURL.add(addressToLoad);
    }
    if (!TextUtils.isEmpty(authURL)) {
      allowedURL.add(authURL);
    }
  }
  if (getIntent().hasExtra(LOCAL_BLOG_ID)) {
    Blog blog=WordPress.getBlog(getIntent().getIntExtra(LOCAL_BLOG_ID,-1));
    if (blog == null) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
      finish();
    }
    webViewClient=new WPWebViewClient(blog,allowedURL,mAccountStore.getAccessToken());
  }
 else {
    webViewClient=new URLFilteredWebViewClient(allowedURL);
  }
  mWebView.setWebViewClient(webViewClient);
  mWebView.setWebChromeClient(new WPWebChromeClient(this,(ProgressBar)findViewById(R.id.progress_bar)));
}","@SuppressLint(""String_Node_Str"") @Override protected void configureWebView(){
  mWebView.getSettings().setJavaScriptEnabled(true);
  mWebView.getSettings().setDomStorageEnabled(true);
  WebViewClient webViewClient;
  Bundle extras=getIntent().getExtras();
  ArrayList<String> allowedURL=null;
  if (extras.getBoolean(DISABLE_LINKS_ON_PAGE,false)) {
    String addressToLoad=extras.getString(URL_TO_LOAD);
    String authURL=extras.getString(AUTHENTICATION_URL);
    allowedURL=new ArrayList<>();
    if (!TextUtils.isEmpty(addressToLoad)) {
      allowedURL.add(addressToLoad);
    }
    if (!TextUtils.isEmpty(authURL)) {
      allowedURL.add(authURL);
    }
  }
  if (getIntent().hasExtra(LOCAL_BLOG_ID)) {
    SiteModel site=mSiteStore.getSiteByLocalId(getIntent().getIntExtra(LOCAL_BLOG_ID,-1));
    if (site == null) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
      finish();
    }
    webViewClient=new WPWebViewClient(site,allowedURL,mAccountStore.getAccessToken());
  }
 else {
    webViewClient=new URLFilteredWebViewClient(allowedURL);
  }
  mWebView.setWebViewClient(webViewClient);
  mWebView.setWebChromeClient(new WPWebChromeClient(this,(ProgressBar)findViewById(R.id.progress_bar)));
}",0.9654598418643362
14067,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  ((WordPress)getApplication()).component().inject(this);
  super.onCreate(savedInstanceState);
}",0.7564102564102564
14068,"/** 
 * Get the URL of the WordPress login page.
 * @return URL of the login page.
 */
public static String getSiteLoginUrl(SiteModel site){
  String loginURL=null;
  if (loginURL == null) {
    if (site.getUrl().lastIndexOf(""String_Node_Str"") != -1) {
      return site.getUrl().substring(0,site.getUrl().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
    }
 else {
      return site.getUrl().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return loginURL;
}","/** 
 * Get the URL of the WordPress login page.
 * @return URL of the login page.
 */
public static String getSiteLoginUrl(SiteModel site){
  String loginURL=null;
  if (loginURL == null) {
    if (site.getUrl() != null) {
      return site.getUrl() + ""String_Node_Str"";
    }
 else {
      return site.getXmlRpcUrl().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return loginURL;
}",0.8771526980482205
14069,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.post_preview_fragment,container,false);
  mWebView=(WebView)view.findViewById(R.id.webView);
  WPWebViewClient client=new WPWebViewClient(WordPress.wpDB.instantiateBlogByLocalId(mLocalBlogId),mAccountStore.getAccessToken());
  mWebView.setWebViewClient(client);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.post_preview_fragment,container,false);
  mWebView=(WebView)view.findViewById(R.id.webView);
  WPWebViewClient client=new WPWebViewClient(mSiteStore.getSiteByLocalId(mLocalBlogId),mAccountStore.getAccessToken());
  mWebView.setWebViewClient(client);
  return view;
}",0.9448441247002398
14070,"private static void openWPCOMURL(Activity activity,String url,Theme currentTheme,SiteModel site,Boolean isCurrentTheme){
  if (activity == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(activity,activity.getResources().getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    return;
  }
  String authURL=ThemeWebActivity.getSiteLoginUrl(site);
  Intent intent=new Intent(activity,ThemeWebActivity.class);
  intent.putExtra(ThemeWebActivity.AUTHENTICATION_USER,site.getUsername());
  intent.putExtra(ThemeWebActivity.AUTHENTICATION_PASSWD,site.getPassword());
  intent.putExtra(ThemeWebActivity.URL_TO_LOAD,url);
  intent.putExtra(ThemeWebActivity.AUTHENTICATION_URL,authURL);
  intent.putExtra(ThemeWebActivity.LOCAL_BLOG_ID,site.getId());
  intent.putExtra(IS_PREMIUM_THEME,currentTheme.isPremium());
  intent.putExtra(IS_CURRENT_THEME,isCurrentTheme);
  intent.putExtra(THEME_NAME,currentTheme.getName());
  intent.putExtra(ThemeBrowserActivity.THEME_ID,currentTheme.getId());
  activity.startActivityForResult(intent,ThemeBrowserActivity.ACTIVATE_THEME);
}","private static void openWPCOMURL(Activity activity,String url,Theme currentTheme,SiteModel site,Boolean isCurrentTheme){
  if (activity == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(activity,activity.getResources().getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    return;
  }
  String authURL=ThemeWebActivity.getSiteLoginUrl(site);
  Intent intent=new Intent(activity,ThemeWebActivity.class);
  intent.putExtra(WPWebViewActivity.URL_TO_LOAD,url);
  intent.putExtra(WPWebViewActivity.AUTHENTICATION_URL,authURL);
  intent.putExtra(WPWebViewActivity.LOCAL_BLOG_ID,site.getId());
  intent.putExtra(WPWebViewActivity.USE_GLOBAL_WPCOM_USER,true);
  intent.putExtra(IS_PREMIUM_THEME,currentTheme.isPremium());
  intent.putExtra(IS_CURRENT_THEME,isCurrentTheme);
  intent.putExtra(THEME_NAME,currentTheme.getName());
  intent.putExtra(ThemeBrowserActivity.THEME_ID,currentTheme.getId());
  activity.startActivityForResult(intent,ThemeBrowserActivity.ACTIVATE_THEME);
}",0.8360655737704918
14071,"public WPWebViewClient(Blog blog,List<String> urls,String token){
  super(urls);
  mBlog=blog;
  mToken=token;
}","public WPWebViewClient(SiteModel site,List<String> urls,String token){
  super(urls);
  mSite=site;
  mToken=token;
}",0.8471615720524017
14072,"@Override public WebResourceResponse shouldInterceptRequest(WebView view,String stringUrl){
  URL imageUrl=null;
  if (mBlog != null && mBlog.isPrivate() && UrlUtils.isImageUrl(stringUrl)) {
    try {
      imageUrl=new URL(UrlUtils.makeHttps(stringUrl));
    }
 catch (    MalformedURLException e) {
      AppLog.e(AppLog.T.READER,e);
    }
  }
  if (imageUrl != null && WPUrlUtils.safeToAddWordPressComAuthToken(imageUrl) && !TextUtils.isEmpty(mToken)) {
    try {
      HttpURLConnection urlConnection=(HttpURLConnection)imageUrl.openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + mToken);
      urlConnection.setReadTimeout(WPRestClient.REST_TIMEOUT_MS);
      urlConnection.setConnectTimeout(WPRestClient.REST_TIMEOUT_MS);
      WebResourceResponse response=new WebResourceResponse(urlConnection.getContentType(),urlConnection.getContentEncoding(),urlConnection.getInputStream());
      return response;
    }
 catch (    ClassCastException e) {
      AppLog.e(AppLog.T.POSTS,""String_Node_Str"" + stringUrl);
    }
catch (    MalformedURLException e) {
      AppLog.e(AppLog.T.POSTS,""String_Node_Str"" + stringUrl);
    }
catch (    IOException e) {
      AppLog.e(AppLog.T.POSTS,""String_Node_Str"" + e.getMessage());
    }
  }
  return super.shouldInterceptRequest(view,stringUrl);
}","@Override public WebResourceResponse shouldInterceptRequest(WebView view,String stringUrl){
  URL imageUrl=null;
  if (mSite != null && UrlUtils.isImageUrl(stringUrl)) {
    try {
      imageUrl=new URL(UrlUtils.makeHttps(stringUrl));
    }
 catch (    MalformedURLException e) {
      AppLog.e(AppLog.T.READER,e);
    }
  }
  if (imageUrl != null && WPUrlUtils.safeToAddWordPressComAuthToken(imageUrl) && !TextUtils.isEmpty(mToken)) {
    try {
      HttpURLConnection urlConnection=(HttpURLConnection)imageUrl.openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + mToken);
      urlConnection.setReadTimeout(WPRestClient.REST_TIMEOUT_MS);
      urlConnection.setConnectTimeout(WPRestClient.REST_TIMEOUT_MS);
      WebResourceResponse response=new WebResourceResponse(urlConnection.getContentType(),urlConnection.getContentEncoding(),urlConnection.getInputStream());
      return response;
    }
 catch (    ClassCastException e) {
      AppLog.e(AppLog.T.POSTS,""String_Node_Str"" + stringUrl);
    }
catch (    MalformedURLException e) {
      AppLog.e(AppLog.T.POSTS,""String_Node_Str"" + stringUrl);
    }
catch (    IOException e) {
      AppLog.e(AppLog.T.POSTS,""String_Node_Str"" + e.getMessage());
    }
  }
  return super.shouldInterceptRequest(view,stringUrl);
}",0.989010989010989
14073,"private void removeSelectedPerson(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  Person person=getCurrentPerson();
  if (person == null) {
    return;
  }
  String blogId=WordPress.getCurrentRemoteBlogId();
  if (blogId == null) {
    return;
  }
  final Person.PersonType personType=person.getPersonType();
  final String displayName=person.getDisplayName();
  PeopleUtils.RemoveUserCallback callback=new PeopleUtils.RemoveUserCallback(){
    @Override public void onSuccess(    long personID,    int localTableBlogId){
      if (personType == Person.PersonType.USER) {
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
      }
      Person person=PeopleTable.getUser(personID,localTableBlogId);
      if (person != null) {
        PeopleTable.deleteUser(personID,localTableBlogId);
      }
      String message=getString(R.string.person_removed,displayName);
      ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
      navigateBackToPeopleListFragment();
      refreshPeopleListFragment();
    }
    @Override public void onError(){
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_remove_user,ToastUtils.Duration.LONG);
    }
  }
;
  if (personType == Person.PersonType.FOLLOWER || personType == Person.PersonType.EMAIL_FOLLOWER) {
    PeopleUtils.removeFollower(blogId,person.getPersonID(),person.getLocalTableBlogId(),personType,callback);
  }
 else {
    PeopleUtils.removeUser(blogId,person.getPersonID(),person.getLocalTableBlogId(),callback);
  }
}","private void removeSelectedPerson(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  Person person=getCurrentPerson();
  if (person == null) {
    return;
  }
  String blogId=WordPress.getCurrentRemoteBlogId();
  if (blogId == null) {
    return;
  }
  final Person.PersonType personType=person.getPersonType();
  final String displayName=person.getDisplayName();
  PeopleUtils.RemovePersonCallback callback=new PeopleUtils.RemovePersonCallback(){
    @Override public void onSuccess(    long personID,    int localTableBlogId){
      if (personType == Person.PersonType.USER) {
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
      }
      PeopleTable.deletePerson(personID,localTableBlogId,personType);
      String message=getString(R.string.person_removed,displayName);
      ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
      navigateBackToPeopleListFragment();
      refreshPeopleListFragment();
    }
    @Override public void onError(){
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_remove_user,ToastUtils.Duration.LONG);
    }
  }
;
  if (personType == Person.PersonType.FOLLOWER || personType == Person.PersonType.EMAIL_FOLLOWER) {
    PeopleUtils.removeFollower(blogId,person.getPersonID(),person.getLocalTableBlogId(),personType,callback);
  }
 else {
    PeopleUtils.removeUser(blogId,person.getPersonID(),person.getLocalTableBlogId(),callback);
  }
}",0.9226753670473083
14074,"@Override public void onSuccess(long personID,int localTableBlogId){
  if (personType == Person.PersonType.USER) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
  }
  Person person=PeopleTable.getUser(personID,localTableBlogId);
  if (person != null) {
    PeopleTable.deleteUser(personID,localTableBlogId);
  }
  String message=getString(R.string.person_removed,displayName);
  ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
  navigateBackToPeopleListFragment();
  refreshPeopleListFragment();
}","@Override public void onSuccess(long personID,int localTableBlogId){
  if (personType == Person.PersonType.USER) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
  }
  PeopleTable.deletePerson(personID,localTableBlogId,personType);
  String message=getString(R.string.person_removed,displayName);
  ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
  navigateBackToPeopleListFragment();
  refreshPeopleListFragment();
}",0.8774555659494855
14075,"public static void removeFollower(String blogId,final long personID,final int localTableBlogId,Person.PersonType personType,final RemoveUserCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        boolean success=jsonObject.optBoolean(""String_Node_Str"");
        if (success) {
          callback.onSuccess(personID,localTableBlogId);
        }
 else {
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  String path;
  if (personType == Person.PersonType.EMAIL_FOLLOWER) {
    path=String.format(""String_Node_Str"",blogId,personID);
  }
 else {
    path=String.format(""String_Node_Str"",blogId,personID);
  }
  WordPress.getRestClientUtilsV1_1().post(path,listener,errorListener);
}","public static void removeFollower(String blogId,final long personID,final int localTableBlogId,Person.PersonType personType,final RemovePersonCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        boolean success=jsonObject.optBoolean(""String_Node_Str"");
        if (success) {
          callback.onSuccess(personID,localTableBlogId);
        }
 else {
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  String path;
  if (personType == Person.PersonType.EMAIL_FOLLOWER) {
    path=String.format(""String_Node_Str"",blogId,personID);
  }
 else {
    path=String.format(""String_Node_Str"",blogId,personID);
  }
  WordPress.getRestClientUtilsV1_1().post(path,listener,errorListener);
}",0.9955317247542448
14076,"public static void removeUser(String blogId,final long personID,final int localTableBlogId,final RemoveUserCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        boolean success=jsonObject.optBoolean(""String_Node_Str"");
        if (success) {
          callback.onSuccess(personID,localTableBlogId);
        }
 else {
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  String path=String.format(""String_Node_Str"",blogId,personID);
  WordPress.getRestClientUtilsV1_1().post(path,listener,errorListener);
}","public static void removeUser(String blogId,final long personID,final int localTableBlogId,final RemovePersonCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        boolean success=jsonObject.optBoolean(""String_Node_Str"");
        if (success) {
          callback.onSuccess(personID,localTableBlogId);
        }
 else {
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  String path=String.format(""String_Node_Str"",blogId,personID);
  WordPress.getRestClientUtilsV1_1().post(path,listener,errorListener);
}",0.9947089947089948
14077,"private String formatPostContentForWebView(final String content,boolean isWideDisplay){
  final boolean hasTiledGallery=Pattern.compile(""String_Node_Str"").matcher(content).find();
  final boolean renderAsTiledGallery=hasTiledGallery && isWideDisplay;
  final String galleryOnlyClass=""String_Node_Str"" + new Random().nextInt(1000);
  @SuppressWarnings(""String_Node_Str"") StringBuilder sbHtml=new StringBuilder(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"" + (renderAsTiledGallery ? ""String_Node_Str"" + galleryOnlyClass + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"" + (renderAsTiledGallery ? ""String_Node_Str"" + galleryOnlyClass + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.linkColorStr).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"");
  if (renderAsTiledGallery) {
    sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginExtraSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyMediumDarkStr).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pxToDp(mResourceVars.videoWidthPx)).append(""String_Node_Str"").append(""String_Node_Str"").append(pxToDp(mResourceVars.videoHeightPx)).append(""String_Node_Str"").append(""String_Node_Str"");
  final List<String> classAmendRegexes=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String contentCustomised=content;
  for (  String classToAmend : classAmendRegexes) {
    contentCustomised=contentCustomised.replaceAll(classToAmend,""String_Node_Str"" + galleryOnlyClass + ""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(contentCustomised).append(""String_Node_Str"");
  return sbHtml.toString();
}","private String formatPostContentForWebView(final String content,boolean renderAsTiledGallery){
  final String galleryOnlyClass=""String_Node_Str"" + new Random().nextInt(1000);
  @SuppressWarnings(""String_Node_Str"") StringBuilder sbHtml=new StringBuilder(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"" + (renderAsTiledGallery ? ""String_Node_Str"" + galleryOnlyClass + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"" + (renderAsTiledGallery ? ""String_Node_Str"" + galleryOnlyClass + ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.linkColorStr).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"");
  if (renderAsTiledGallery) {
    sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginExtraSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyMediumDarkStr).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(pxToDp(mResourceVars.videoWidthPx)).append(""String_Node_Str"").append(""String_Node_Str"").append(pxToDp(mResourceVars.videoHeightPx)).append(""String_Node_Str"").append(""String_Node_Str"");
  final List<String> classAmendRegexes=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String contentCustomised=content;
  for (  String classToAmend : classAmendRegexes) {
    contentCustomised=contentCustomised.replaceAll(classToAmend,""String_Node_Str"" + galleryOnlyClass + ""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(contentCustomised).append(""String_Node_Str"");
  return sbHtml.toString();
}",0.9804356595401372
14078,"void beginRender(){
  final Handler handler=new Handler();
  mRenderBuilder=new StringBuilder(getPostContent());
  new Thread(){
    @Override public void run(){
      if (!mResourceVars.isWideDisplay) {
        resizeImages();
      }
      resizeIframes();
      final String htmlContent=formatPostContentForWebView(mRenderBuilder.toString(),mResourceVars.isWideDisplay);
      mRenderBuilder=null;
      handler.post(new Runnable(){
        @Override public void run(){
          renderHtmlContent(htmlContent);
        }
      }
);
    }
  }
.start();
}","void beginRender(){
  final Handler handler=new Handler();
  mRenderBuilder=new StringBuilder(getPostContent());
  new Thread(){
    @Override public void run(){
      final boolean renderAsTiledGallery=shouldRenderAsTiledGallery();
      if (!renderAsTiledGallery) {
        resizeImages();
      }
      resizeIframes();
      final String htmlContent=formatPostContentForWebView(mRenderBuilder.toString(),renderAsTiledGallery);
      mRenderBuilder=null;
      handler.post(new Runnable(){
        @Override public void run(){
          renderHtmlContent(htmlContent);
        }
      }
);
    }
  }
.start();
}",0.860802732707088
14079,"public static void save(String table,Person person,SQLiteDatabase database){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",person.getPersonID());
  values.put(""String_Node_Str"",person.getLocalTableBlogId());
  values.put(""String_Node_Str"",person.getUsername());
  values.put(""String_Node_Str"",person.getDisplayName());
  values.put(""String_Node_Str"",person.getAvatarUrl());
  values.put(""String_Node_Str"",person.getRole());
  values.put(""String_Node_Str"",person.getSubscribed());
  database.insertWithOnConflict(table,null,values,SQLiteDatabase.CONFLICT_REPLACE);
}","private static void save(String table,Person person,SQLiteDatabase database){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",person.getPersonID());
  values.put(""String_Node_Str"",person.getLocalTableBlogId());
  values.put(""String_Node_Str"",person.getUsername());
  values.put(""String_Node_Str"",person.getDisplayName());
  values.put(""String_Node_Str"",person.getAvatarUrl());
  values.put(""String_Node_Str"",person.getRole());
  values.put(""String_Node_Str"",person.getSubscribed());
  database.insertWithOnConflict(table,null,values,SQLiteDatabase.CONFLICT_REPLACE);
}",0.990748528174937
14080,"private static void savePeople(String table,List<Person> peopleList,int localTableBlogId,boolean isFreshList){
  getWritableDb().beginTransaction();
  try {
    if (isFreshList) {
      PeopleTable.deletePeople(table,localTableBlogId);
    }
    for (    Person person : peopleList) {
      PeopleTable.save(table,person);
    }
    getWritableDb().setTransactionSuccessful();
  }
  finally {
    getWritableDb().endTransaction();
  }
}","private static void savePeople(String table,List<Person> peopleList,int localTableBlogId,boolean isFreshList){
  getWritableDb().beginTransaction();
  try {
    if (isFreshList) {
      PeopleTable.deletePeople(table,localTableBlogId);
    }
    for (    Person person : peopleList) {
      PeopleTable.save(table,person,getWritableDb());
    }
    getWritableDb().setTransactionSuccessful();
  }
  finally {
    getWritableDb().endTransaction();
  }
}",0.981981981981982
14081,"public void onEventMainThread(RoleChangeDialogFragment.RoleChangeEvent event){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  final Person person=PeopleTable.getPerson(event.personID,event.localTableBlogId,false,false);
  if (person == null || event.newRole == null || event.newRole.equalsIgnoreCase(person.getRole())) {
    return;
  }
  final PersonDetailFragment personDetailFragment=getDetailFragment();
  if (personDetailFragment != null) {
    personDetailFragment.changeRole(event.newRole);
  }
  PeopleUtils.updateRole(person.getBlogId(),person.getPersonID(),event.newRole,event.localTableBlogId,new PeopleUtils.UpdateUserCallback(){
    @Override public void onSuccess(    Person person){
      AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_UPDATED);
      PeopleTable.save(person);
      refreshOnScreenFragmentDetails();
    }
    @Override public void onError(){
      if (personDetailFragment != null) {
        personDetailFragment.refreshPersonDetails();
      }
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_update_role,ToastUtils.Duration.LONG);
    }
  }
);
}","public void onEventMainThread(RoleChangeDialogFragment.RoleChangeEvent event){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  final Person person=PeopleTable.getUser(event.personID,event.localTableBlogId);
  if (person == null || event.newRole == null || event.newRole.equalsIgnoreCase(person.getRole())) {
    return;
  }
  final PersonDetailFragment personDetailFragment=getDetailFragment();
  if (personDetailFragment != null) {
    personDetailFragment.changeRole(event.newRole);
  }
  PeopleUtils.updateRole(person.getBlogId(),person.getPersonID(),event.newRole,event.localTableBlogId,new PeopleUtils.UpdateUserCallback(){
    @Override public void onSuccess(    Person person){
      AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_UPDATED);
      PeopleTable.saveUser(person);
      refreshOnScreenFragmentDetails();
    }
    @Override public void onError(){
      if (personDetailFragment != null) {
        personDetailFragment.refreshPersonDetails();
      }
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_update_role,ToastUtils.Duration.LONG);
    }
  }
);
}",0.98859649122807
14082,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.people_management_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    if (NetworkUtils.isNetworkAvailable(this)) {
      PeopleTable.deletePeopleForLocalBlogIdExceptForFirstPage(blog.getLocalTableBlogId());
    }
    if (actionBar != null) {
      actionBar.setTitle(R.string.people);
    }
    PeopleListFragment peopleListFragment=PeopleListFragment.newInstance(blog.getLocalTableBlogId());
    peopleListFragment.setOnPersonSelectedListener(this);
    peopleListFragment.setOnFetchPeopleListener(this);
    mUsersEndOfListReached=false;
    mUsersFetchRequestInProgress=false;
    mCanRefreshUsers=true;
    mFollowersEndOfListReached=false;
    mFollowersFetchRequestInProgress=false;
    mCanRefreshFollowers=true;
    mFollowersLastFetchedPage=0;
    mEmailFollowersEndOfListReached=false;
    mEmailFollowersFetchRequestInProgress=false;
    mCanRefreshEmailFollowers=true;
    mEmailFollowersLastFetchedPage=0;
    fragmentManager.beginTransaction().add(R.id.fragment_container,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT).commit();
  }
 else {
    mUsersEndOfListReached=savedInstanceState.getBoolean(KEY_USERS_END_OF_LIST_REACHED);
    mUsersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_USERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshUsers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_USERS);
    mFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_FOLLOWERS_END_OF_LIST_REACHED);
    mFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_FOLLOWERS);
    mFollowersLastFetchedPage=savedInstanceState.getInt(KEY_FOLLOWERS_LAST_FETCHED_PAGE);
    mEmailFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_END_OF_LIST_REACHED);
    mEmailFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshEmailFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_EMAIL_FOLLOWERS);
    mEmailFollowersLastFetchedPage=savedInstanceState.getInt(KEY_EMAIL_FOLLOWERS_LAST_FETCHED_PAGE);
    CharSequence title=savedInstanceState.getCharSequence(KEY_TITLE);
    if (actionBar != null && title != null) {
      actionBar.setTitle(title);
    }
    PeopleListFragment peopleListFragment=getListFragment();
    if (peopleListFragment != null) {
      peopleListFragment.setOnPersonSelectedListener(this);
      peopleListFragment.setOnFetchPeopleListener(this);
    }
    PersonDetailFragment personDetailFragment=getDetailFragment();
    if (personDetailFragment != null && personDetailFragment.isAdded()) {
      removeToolbarElevation();
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.people_management_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    if (NetworkUtils.isNetworkAvailable(this)) {
      PeopleTable.deletePeopleExceptForFirstPage(blog.getLocalTableBlogId());
    }
    if (actionBar != null) {
      actionBar.setTitle(R.string.people);
    }
    PeopleListFragment peopleListFragment=PeopleListFragment.newInstance(blog.getLocalTableBlogId());
    peopleListFragment.setOnPersonSelectedListener(this);
    peopleListFragment.setOnFetchPeopleListener(this);
    mUsersEndOfListReached=false;
    mUsersFetchRequestInProgress=false;
    mCanRefreshUsers=true;
    mFollowersEndOfListReached=false;
    mFollowersFetchRequestInProgress=false;
    mCanRefreshFollowers=true;
    mFollowersLastFetchedPage=0;
    mEmailFollowersEndOfListReached=false;
    mEmailFollowersFetchRequestInProgress=false;
    mCanRefreshEmailFollowers=true;
    mEmailFollowersLastFetchedPage=0;
    fragmentManager.beginTransaction().add(R.id.fragment_container,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT).commit();
  }
 else {
    mUsersEndOfListReached=savedInstanceState.getBoolean(KEY_USERS_END_OF_LIST_REACHED);
    mUsersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_USERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshUsers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_USERS);
    mFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_FOLLOWERS_END_OF_LIST_REACHED);
    mFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_FOLLOWERS);
    mFollowersLastFetchedPage=savedInstanceState.getInt(KEY_FOLLOWERS_LAST_FETCHED_PAGE);
    mEmailFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_END_OF_LIST_REACHED);
    mEmailFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshEmailFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_EMAIL_FOLLOWERS);
    mEmailFollowersLastFetchedPage=savedInstanceState.getInt(KEY_EMAIL_FOLLOWERS_LAST_FETCHED_PAGE);
    CharSequence title=savedInstanceState.getCharSequence(KEY_TITLE);
    if (actionBar != null && title != null) {
      actionBar.setTitle(title);
    }
    PeopleListFragment peopleListFragment=getListFragment();
    if (peopleListFragment != null) {
      peopleListFragment.setOnPersonSelectedListener(this);
      peopleListFragment.setOnFetchPeopleListener(this);
    }
    PersonDetailFragment personDetailFragment=getDetailFragment();
    if (personDetailFragment != null && personDetailFragment.isAdded()) {
      removeToolbarElevation();
    }
  }
}",0.9978474784747848
14083,"private void removeSelectedPerson(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  Person person=getCurrentPerson();
  if (person == null) {
    return;
  }
  final boolean isFollower=person.isFollower();
  final boolean isEmailFollower=person.isEmailFollower();
  final boolean isViewer=person.isViewer();
  final String displayName=person.getDisplayName();
  PeopleUtils.RemoveUserCallback callback=new PeopleUtils.RemoveUserCallback(){
    @Override public void onSuccess(    long personID,    int localTableBlogId){
      if (!isFollower && !isEmailFollower && !isViewer) {
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
      }
      Person person=PeopleTable.getPerson(personID,localTableBlogId,isFollower,isViewer);
      if (person != null) {
        PeopleTable.deletePerson(personID,localTableBlogId,isFollower,isViewer);
      }
      String message=getString(R.string.person_removed,displayName);
      ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
      navigateBackToPeopleListFragment();
      refreshPeopleListFragment();
    }
    @Override public void onError(){
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_remove_user,ToastUtils.Duration.LONG);
    }
  }
;
  if (isFollower || isEmailFollower) {
    PeopleUtils.removeFollower(person.getBlogId(),person.getPersonID(),person.getLocalTableBlogId(),isEmailFollower,callback);
  }
 else {
    PeopleUtils.removeUser(person.getBlogId(),person.getPersonID(),person.getLocalTableBlogId(),callback);
  }
}","private void removeSelectedPerson(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  Person person=getCurrentPerson();
  if (person == null) {
    return;
  }
  final boolean isFollower=person.isFollower();
  final boolean isEmailFollower=person.isEmailFollower();
  final String displayName=person.getDisplayName();
  PeopleUtils.RemoveUserCallback callback=new PeopleUtils.RemoveUserCallback(){
    @Override public void onSuccess(    long personID,    int localTableBlogId){
      if (!isFollower && !isEmailFollower) {
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
      }
      Person person=PeopleTable.getUser(personID,localTableBlogId);
      if (person != null) {
        PeopleTable.deleteUser(personID,localTableBlogId);
      }
      String message=getString(R.string.person_removed,displayName);
      ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
      navigateBackToPeopleListFragment();
      refreshPeopleListFragment();
    }
    @Override public void onError(){
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_remove_user,ToastUtils.Duration.LONG);
    }
  }
;
  if (isFollower || isEmailFollower) {
    PeopleUtils.removeFollower(person.getBlogId(),person.getPersonID(),person.getLocalTableBlogId(),isEmailFollower,callback);
  }
 else {
    PeopleUtils.removeUser(person.getBlogId(),person.getPersonID(),person.getLocalTableBlogId(),callback);
  }
}",0.9620991253644317
14084,"@Override public void onPersonSelected(Person person){
  PersonDetailFragment personDetailFragment=getDetailFragment();
  long personID=person.getPersonID();
  int localTableBlogID=person.getLocalTableBlogId();
  boolean isFollower=person.isFollower();
  boolean isViewer=person.isViewer();
  if (personDetailFragment == null) {
    personDetailFragment=PersonDetailFragment.newInstance(personID,localTableBlogID,isFollower,isViewer);
  }
 else {
    personDetailFragment.setPersonDetails(personID,localTableBlogID);
  }
  if (!personDetailFragment.isAdded()) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.OPENED_PERSON);
    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
    fragmentTransaction.replace(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT);
    fragmentTransaction.addToBackStack(null);
    ActionBar actionBar=getSupportActionBar();
    if (actionBar != null) {
      actionBar.setTitle(""String_Node_Str"");
    }
    removeToolbarElevation();
    fragmentTransaction.commit();
  }
}","@Override public void onPersonSelected(Person person){
  PersonDetailFragment personDetailFragment=getDetailFragment();
  long personID=person.getPersonID();
  int localTableBlogID=person.getLocalTableBlogId();
  if (personDetailFragment == null) {
    personDetailFragment=PersonDetailFragment.newInstance(personID,localTableBlogID);
  }
 else {
    personDetailFragment.setPersonDetails(personID,localTableBlogID);
  }
  if (!personDetailFragment.isAdded()) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.OPENED_PERSON);
    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
    fragmentTransaction.replace(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT);
    fragmentTransaction.addToBackStack(null);
    ActionBar actionBar=getSupportActionBar();
    if (actionBar != null) {
      actionBar.setTitle(""String_Node_Str"");
    }
    removeToolbarElevation();
    fragmentTransaction.commit();
  }
}",0.9514563106796116
14085,"@Override public void onSuccess(long personID,int localTableBlogId){
  if (!isFollower && !isEmailFollower && !isViewer) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
  }
  Person person=PeopleTable.getPerson(personID,localTableBlogId,isFollower,isViewer);
  if (person != null) {
    PeopleTable.deletePerson(personID,localTableBlogId,isFollower,isViewer);
  }
  String message=getString(R.string.person_removed,displayName);
  ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
  navigateBackToPeopleListFragment();
  refreshPeopleListFragment();
}","@Override public void onSuccess(long personID,int localTableBlogId){
  if (!isFollower && !isEmailFollower) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
  }
  Person person=PeopleTable.getUser(personID,localTableBlogId);
  if (person != null) {
    PeopleTable.deleteUser(personID,localTableBlogId);
  }
  String message=getString(R.string.person_removed,displayName);
  ToastUtils.showToast(PeopleManagementActivity.this,message,ToastUtils.Duration.LONG);
  navigateBackToPeopleListFragment();
  refreshPeopleListFragment();
}",0.9390142021720967
14086,"public static PersonDetailFragment newInstance(long personID,int localTableBlogID,boolean isFollower,boolean isViewer){
  PersonDetailFragment personDetailFragment=new PersonDetailFragment();
  Bundle bundle=new Bundle();
  bundle.putLong(ARG_PERSON_ID,personID);
  bundle.putInt(ARG_LOCAL_TABLE_BLOG_ID,localTableBlogID);
  bundle.putBoolean(ARG_IS_FOLLOWER,isFollower);
  bundle.putBoolean(ARG_IS_VIEWER,isViewer);
  personDetailFragment.setArguments(bundle);
  return personDetailFragment;
}","public static PersonDetailFragment newInstance(long personID,int localTableBlogID){
  PersonDetailFragment personDetailFragment=new PersonDetailFragment();
  Bundle bundle=new Bundle();
  bundle.putLong(ARG_PERSON_ID,personID);
  bundle.putInt(ARG_LOCAL_TABLE_BLOG_ID,localTableBlogID);
  personDetailFragment.setArguments(bundle);
  return personDetailFragment;
}",0.8018648018648019
14087,"public Person loadPerson(){
  return PeopleTable.getPerson(mPersonID,mLocalTableBlogID,mIsFollower,mIsViewer);
}","public Person loadPerson(){
  return PeopleTable.getUser(mPersonID,mLocalTableBlogID);
}",0.86
14088,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.person_detail_fragment,container,false);
  mPersonID=getArguments().getLong(ARG_PERSON_ID);
  mLocalTableBlogID=getArguments().getInt(ARG_LOCAL_TABLE_BLOG_ID);
  mIsFollower=getArguments().getBoolean(ARG_IS_FOLLOWER);
  mIsViewer=getArguments().getBoolean(ARG_IS_VIEWER);
  mAvatarImageView=(WPNetworkImageView)rootView.findViewById(R.id.person_avatar);
  mDisplayNameTextView=(TextView)rootView.findViewById(R.id.person_display_name);
  mUsernameTextView=(TextView)rootView.findViewById(R.id.person_username);
  mRoleContainer=(LinearLayout)rootView.findViewById(R.id.person_role_container);
  mRoleTextView=(TextView)rootView.findViewById(R.id.person_role);
  mSubscribedTextView=(TextView)rootView.findViewById(R.id.follower_subscribed_date);
  Account account=AccountHelper.getDefaultAccount();
  boolean isCurrentUser=account.getUserId() == mPersonID;
  Blog blog=WordPress.getBlog(mLocalTableBlogID);
  if (!isCurrentUser && blog != null && blog.hasCapability(Capability.REMOVE_USERS)) {
    setHasOptionsMenu(true);
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.person_detail_fragment,container,false);
  mPersonID=getArguments().getLong(ARG_PERSON_ID);
  mLocalTableBlogID=getArguments().getInt(ARG_LOCAL_TABLE_BLOG_ID);
  mAvatarImageView=(WPNetworkImageView)rootView.findViewById(R.id.person_avatar);
  mDisplayNameTextView=(TextView)rootView.findViewById(R.id.person_display_name);
  mUsernameTextView=(TextView)rootView.findViewById(R.id.person_username);
  mRoleContainer=(LinearLayout)rootView.findViewById(R.id.person_role_container);
  mRoleTextView=(TextView)rootView.findViewById(R.id.person_role);
  mSubscribedTextView=(TextView)rootView.findViewById(R.id.follower_subscribed_date);
  Account account=AccountHelper.getDefaultAccount();
  boolean isCurrentUser=account.getUserId() == mPersonID;
  Blog blog=WordPress.getBlog(mLocalTableBlogID);
  if (!isCurrentUser && blog != null && blog.hasCapability(Capability.REMOVE_USERS)) {
    setHasOptionsMenu(true);
  }
  return rootView;
}",0.9518072289156626
14089,"public ReaderWebView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  init(context,null);
}","public ReaderWebView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  init(context,attrs);
}",0.9647058823529412
14090,"@Override public String onShowEmptyViewMessage(EmptyViewMessageType emptyViewMsgType){
  if (emptyViewMsgType == EmptyViewMessageType.NO_CONTENT) {
    if (mPeopleListFilter == null) {
      return ""String_Node_Str"";
    }
 else {
switch (mPeopleListFilter) {
case FOLLOWERS:
        return getString(R.string.people_empty_list_filtered_followers);
case EMAIL_FOLLOWERS:
      return getString(R.string.people_empty_list_filtered_email_followers);
case VIEWERS:
    return getString(R.string.people_empty_list_filtered_viewers);
default :
  return ""String_Node_Str"";
}
}
}
 else {
int stringId=0;
switch (emptyViewMsgType) {
case LOADING:
stringId=R.string.people_fetching;
break;
case NETWORK_ERROR:
stringId=R.string.no_network_message;
break;
case GENERIC_ERROR:
switch (mPeopleListFilter) {
case TEAM:
stringId=R.string.error_fetch_users_list;
break;
case FOLLOWERS:
stringId=R.string.error_fetch_followers_list;
break;
case EMAIL_FOLLOWERS:
stringId=R.string.error_fetch_viewers_list;
break;
}
break;
}
return getString(stringId);
}
}","@Override public String onShowEmptyViewMessage(EmptyViewMessageType emptyViewMsgType){
  if (emptyViewMsgType == EmptyViewMessageType.NO_CONTENT) {
    if (mPeopleListFilter == null) {
      return ""String_Node_Str"";
    }
 else {
switch (mPeopleListFilter) {
case FOLLOWERS:
        return getString(R.string.people_empty_list_filtered_followers);
case EMAIL_FOLLOWERS:
      return getString(R.string.people_empty_list_filtered_email_followers);
case VIEWERS:
    return getString(R.string.people_empty_list_filtered_viewers);
default :
  return ""String_Node_Str"";
}
}
}
 else {
int stringId=0;
switch (emptyViewMsgType) {
case LOADING:
stringId=R.string.people_fetching;
break;
case NETWORK_ERROR:
stringId=R.string.no_network_message;
break;
case GENERIC_ERROR:
switch (mPeopleListFilter) {
case TEAM:
stringId=R.string.error_fetch_users_list;
break;
case FOLLOWERS:
stringId=R.string.error_fetch_followers_list;
break;
case EMAIL_FOLLOWERS:
stringId=R.string.error_fetch_email_followers_list;
break;
case VIEWERS:
stringId=R.string.error_fetch_viewers_list;
break;
}
break;
}
return getString(stringId);
}
}",0.9660622966062296
14091,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.people_list_fragment,container,false);
  mLocalTableBlogID=getArguments().getInt(ARG_LOCAL_TABLE_BLOG_ID);
  final Blog blog=WordPress.getBlog(mLocalTableBlogID);
  final boolean isPrivate=blog != null && blog.isPrivate();
  mFilteredRecyclerView=(FilteredRecyclerView)rootView.findViewById(R.id.filtered_recycler_view);
  mFilteredRecyclerView.addItemDecoration(new PeopleItemDecoration(getActivity(),R.drawable.people_list_divider));
  mFilteredRecyclerView.setLogT(AppLog.T.PEOPLE);
  mFilteredRecyclerView.setSwipeToRefreshEnabled(false);
  mFilteredRecyclerView.setFilterListener(new FilteredRecyclerView.FilterListener(){
    @Override public List<FilterCriteria> onLoadFilterCriteriaOptions(    boolean refresh){
      ArrayList<FilterCriteria> list=new ArrayList<>();
      Collections.addAll(list,PeopleListFilter.values());
      if (!isPrivate) {
        list.remove(PeopleListFilter.VIEWERS);
      }
      return list;
    }
    @Override public void onLoadFilterCriteriaOptionsAsync(    FilteredRecyclerView.FilterCriteriaAsyncLoaderListener listener,    boolean refresh){
    }
    @Override public FilterCriteria onRecallSelection(){
      mPeopleListFilter=AppPrefs.getPeopleListFilter();
      if (mPeopleListFilter == PeopleListFilter.VIEWERS && !isPrivate) {
        mPeopleListFilter=PeopleListFilter.TEAM;
        AppPrefs.setPeopleListFilter(mPeopleListFilter);
      }
      return mPeopleListFilter;
    }
    @Override public void onLoadData(){
      updatePeople(false);
    }
    @Override public void onFilterSelected(    int position,    FilterCriteria criteria){
      mPeopleListFilter=(PeopleListFilter)criteria;
      AppPrefs.setPeopleListFilter(mPeopleListFilter);
    }
    @Override public String onShowEmptyViewMessage(    EmptyViewMessageType emptyViewMsgType){
      if (emptyViewMsgType == EmptyViewMessageType.NO_CONTENT) {
        if (mPeopleListFilter == null) {
          return ""String_Node_Str"";
        }
 else {
switch (mPeopleListFilter) {
case FOLLOWERS:
            return getString(R.string.people_empty_list_filtered_followers);
case EMAIL_FOLLOWERS:
          return getString(R.string.people_empty_list_filtered_email_followers);
case VIEWERS:
        return getString(R.string.people_empty_list_filtered_viewers);
default :
      return ""String_Node_Str"";
  }
}
}
 else {
int stringId=0;
switch (emptyViewMsgType) {
case LOADING:
  stringId=R.string.people_fetching;
break;
case NETWORK_ERROR:
stringId=R.string.no_network_message;
break;
case GENERIC_ERROR:
switch (mPeopleListFilter) {
case TEAM:
stringId=R.string.error_fetch_users_list;
break;
case FOLLOWERS:
stringId=R.string.error_fetch_followers_list;
break;
case EMAIL_FOLLOWERS:
stringId=R.string.error_fetch_viewers_list;
break;
}
break;
}
return getString(stringId);
}
}
@Override public void onShowCustomEmptyView(EmptyViewMessageType emptyViewMsgType){
}
}
);
return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.people_list_fragment,container,false);
  mLocalTableBlogID=getArguments().getInt(ARG_LOCAL_TABLE_BLOG_ID);
  final Blog blog=WordPress.getBlog(mLocalTableBlogID);
  final boolean isPrivate=blog != null && blog.isPrivate();
  mFilteredRecyclerView=(FilteredRecyclerView)rootView.findViewById(R.id.filtered_recycler_view);
  mFilteredRecyclerView.addItemDecoration(new PeopleItemDecoration(getActivity(),R.drawable.people_list_divider));
  mFilteredRecyclerView.setLogT(AppLog.T.PEOPLE);
  mFilteredRecyclerView.setSwipeToRefreshEnabled(false);
  mFilteredRecyclerView.setFilterListener(new FilteredRecyclerView.FilterListener(){
    @Override public List<FilterCriteria> onLoadFilterCriteriaOptions(    boolean refresh){
      ArrayList<FilterCriteria> list=new ArrayList<>();
      Collections.addAll(list,PeopleListFilter.values());
      if (!isPrivate) {
        list.remove(PeopleListFilter.VIEWERS);
      }
      return list;
    }
    @Override public void onLoadFilterCriteriaOptionsAsync(    FilteredRecyclerView.FilterCriteriaAsyncLoaderListener listener,    boolean refresh){
    }
    @Override public FilterCriteria onRecallSelection(){
      mPeopleListFilter=AppPrefs.getPeopleListFilter();
      if (mPeopleListFilter == PeopleListFilter.VIEWERS && !isPrivate) {
        mPeopleListFilter=PeopleListFilter.TEAM;
        AppPrefs.setPeopleListFilter(mPeopleListFilter);
      }
      return mPeopleListFilter;
    }
    @Override public void onLoadData(){
      updatePeople(false);
    }
    @Override public void onFilterSelected(    int position,    FilterCriteria criteria){
      mPeopleListFilter=(PeopleListFilter)criteria;
      AppPrefs.setPeopleListFilter(mPeopleListFilter);
    }
    @Override public String onShowEmptyViewMessage(    EmptyViewMessageType emptyViewMsgType){
      if (emptyViewMsgType == EmptyViewMessageType.NO_CONTENT) {
        if (mPeopleListFilter == null) {
          return ""String_Node_Str"";
        }
 else {
switch (mPeopleListFilter) {
case FOLLOWERS:
            return getString(R.string.people_empty_list_filtered_followers);
case EMAIL_FOLLOWERS:
          return getString(R.string.people_empty_list_filtered_email_followers);
case VIEWERS:
        return getString(R.string.people_empty_list_filtered_viewers);
default :
      return ""String_Node_Str"";
  }
}
}
 else {
int stringId=0;
switch (emptyViewMsgType) {
case LOADING:
  stringId=R.string.people_fetching;
break;
case NETWORK_ERROR:
stringId=R.string.no_network_message;
break;
case GENERIC_ERROR:
switch (mPeopleListFilter) {
case TEAM:
stringId=R.string.error_fetch_users_list;
break;
case FOLLOWERS:
stringId=R.string.error_fetch_followers_list;
break;
case EMAIL_FOLLOWERS:
stringId=R.string.error_fetch_email_followers_list;
break;
case VIEWERS:
stringId=R.string.error_fetch_viewers_list;
break;
}
break;
}
return getString(stringId);
}
}
@Override public void onShowCustomEmptyView(EmptyViewMessageType emptyViewMsgType){
}
}
);
return rootView;
}",0.9883553995852608
14092,"public ReaderThumbnailStrip(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){
  super(context,attrs,defStyleAttr,defStyleRes);
  initView(context);
}","@TargetApi(Build.VERSION_CODES.LOLLIPOP) public ReaderThumbnailStrip(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){
  super(context,attrs,defStyleAttr,defStyleRes);
  initView(context);
}",0.8918205804749341
14093,"public void initView(Context context){
  mView=inflate(context,R.layout.reader_thumbnail_strip,this);
  mContainer=(LinearLayout)mView.findViewById(R.id.thumbnail_strip_container);
  mThumbnailSize=context.getResources().getDimensionPixelSize(R.dimen.reader_thumbnail_strip_image_size);
  mCountStr=context.getResources().getString(R.string.reader_label_image_count);
}","private void initView(Context context){
  mView=inflate(context,R.layout.reader_thumbnail_strip,this);
  mContainer=(LinearLayout)mView.findViewById(R.id.thumbnail_strip_container);
  mThumbnailSize=context.getResources().getDimensionPixelSize(R.dimen.reader_thumbnail_strip_image_size);
  mCountStr=context.getResources().getString(R.string.reader_label_image_count);
}",0.9851150202976996
14094,"public void loadThumbnails(@NonNull final ReaderPost post){
  mContainer.removeAllViews();
  ReaderImageScanner scanner=new ReaderImageScanner(post.getText(),post.isPrivate);
  final ReaderImageList imageList=new ReaderImageScanner(post.getText(),post.isPrivate).getImageList(ReaderPhotoViewerActivity.MIN_IMAGE_WIDTH);
  if (imageList.size() < MIN_IMAGE_COUNT) {
    fadeOut();
    return;
  }
  int numAdded=0;
  LayoutInflater inflater=LayoutInflater.from(getContext());
  for (  final String imageUrl : imageList) {
    View view=inflater.inflate(R.layout.reader_thumbnail_strip_image,mContainer,false);
    WPNetworkImageView imageView=(WPNetworkImageView)view.findViewById(R.id.thumbnail_strip_image);
    mContainer.addView(view);
    String photonUrl=PhotonUtils.getPhotonImageUrl(imageUrl,mThumbnailSize,mThumbnailSize);
    imageView.setImageUrl(photonUrl,WPNetworkImageView.ImageType.PHOTO);
    numAdded++;
    if (numAdded >= MAX_IMAGE_COUNT) {
      break;
    }
  }
  View labelView=inflater.inflate(R.layout.reader_thumbnail_strip_labels,mContainer,false);
  TextView txtCount=(TextView)labelView.findViewById(R.id.text_gallery_count);
  txtCount.setText(String.format(mCountStr,imageList.size()));
  mContainer.addView(labelView);
  mView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      ReaderActivityLauncher.showReaderPhotoViewer(view.getContext(),imageList.get(0),post.getText(),view,post.isPrivate,0,0);
    }
  }
);
  fadeIn();
}","public void loadThumbnails(@NonNull final ReaderPost post){
  mContainer.removeAllViews();
  final ReaderImageList imageList=new ReaderImageScanner(post.getText(),post.isPrivate).getImageList(ReaderPhotoViewerActivity.MIN_IMAGE_WIDTH);
  if (imageList.size() < MIN_IMAGE_COUNT) {
    fadeOut();
    return;
  }
  int numAdded=0;
  LayoutInflater inflater=LayoutInflater.from(getContext());
  for (  final String imageUrl : imageList) {
    View view=inflater.inflate(R.layout.reader_thumbnail_strip_image,mContainer,false);
    WPNetworkImageView imageView=(WPNetworkImageView)view.findViewById(R.id.thumbnail_strip_image);
    mContainer.addView(view);
    String photonUrl=PhotonUtils.getPhotonImageUrl(imageUrl,mThumbnailSize,mThumbnailSize);
    imageView.setImageUrl(photonUrl,WPNetworkImageView.ImageType.PHOTO);
    numAdded++;
    if (numAdded >= MAX_IMAGE_COUNT) {
      break;
    }
  }
  View labelView=inflater.inflate(R.layout.reader_thumbnail_strip_labels,mContainer,false);
  TextView txtCount=(TextView)labelView.findViewById(R.id.text_gallery_count);
  txtCount.setText(String.format(mCountStr,imageList.size()));
  mContainer.addView(labelView);
  mView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      ReaderActivityLauncher.showReaderPhotoViewer(view.getContext(),imageList.get(0),post.getText(),view,post.isPrivate,0,0);
    }
  }
);
  fadeIn();
}",0.9712131596984236
14095,"@Override protected CommentList doInBackground(Void... args){
  if (!isAdded()) {
    return null;
  }
  final Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    mErrorType=ErrorType.INVALID_CURRENT_BLOG;
    return null;
  }
  Map<String,Object> hPost=new HashMap<>();
  if (mIsLoadingMore) {
    int numExisting=getAdapter().getItemCount();
    hPost.put(""String_Node_Str"",numExisting);
    hPost.put(""String_Node_Str"",COMMENTS_PER_PAGE);
  }
 else {
    hPost.put(""String_Node_Str"",COMMENTS_PER_PAGE);
  }
  if (mStatusFilter != null) {
    if (!mStatusFilter.equals(CommentStatus.UNKNOWN)) {
      hPost.put(""String_Node_Str"",CommentStatus.toString(mStatusFilter));
    }
  }
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),hPost};
  try {
    return ApiHelper.refreshComments(blog,params,new ApiHelper.DatabasePersistCallback(){
      @Override public void onDataReadyToSave(      List list){
        int localBlogId=blog.getLocalTableBlogId();
        CommentTable.deleteCommentsForBlogWithFilter(localBlogId,mStatusFilter);
        CommentTable.saveComments(localBlogId,(CommentList)list);
      }
    }
);
  }
 catch (  XMLRPCFault xmlrpcFault) {
    mErrorType=ErrorType.UNKNOWN_ERROR;
    if (xmlrpcFault.getFaultCode() == 401) {
      mErrorType=ErrorType.UNAUTHORIZED;
    }
  }
catch (  Exception e) {
    mErrorType=ErrorType.UNKNOWN_ERROR;
  }
  return null;
}","@Override protected CommentList doInBackground(Void... args){
  if (!isAdded()) {
    return null;
  }
  final Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    mErrorType=ErrorType.INVALID_CURRENT_BLOG;
    return null;
  }
  Map<String,Object> hPost=new HashMap<>();
  if (mIsLoadingMore) {
    int numExisting=getAdapter().getItemCount();
    hPost.put(""String_Node_Str"",numExisting);
    hPost.put(""String_Node_Str"",COMMENTS_PER_PAGE);
  }
 else {
    hPost.put(""String_Node_Str"",COMMENTS_PER_PAGE);
  }
  if (mStatusFilter != null) {
    if (!mStatusFilter.equals(CommentStatus.UNKNOWN)) {
      hPost.put(""String_Node_Str"",CommentStatus.toString(mStatusFilter));
    }
  }
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),hPost};
  try {
    return ApiHelper.refreshComments(blog,params,new ApiHelper.DatabasePersistCallback(){
      @Override public void onDataReadyToSave(      List list){
        int localBlogId=blog.getLocalTableBlogId();
        if (!mIsLoadingMore) {
          CommentTable.deleteCommentsForBlogWithFilter(localBlogId,mStatusFilter);
        }
        CommentTable.saveComments(localBlogId,(CommentList)list);
      }
    }
);
  }
 catch (  XMLRPCFault xmlrpcFault) {
    mErrorType=ErrorType.UNKNOWN_ERROR;
    if (xmlrpcFault.getFaultCode() == 401) {
      mErrorType=ErrorType.UNAUTHORIZED;
    }
  }
catch (  Exception e) {
    mErrorType=ErrorType.UNKNOWN_ERROR;
  }
  return null;
}",0.98508498092265
14096,"@Override public void onDataReadyToSave(List list){
  int localBlogId=blog.getLocalTableBlogId();
  CommentTable.deleteCommentsForBlogWithFilter(localBlogId,mStatusFilter);
  CommentTable.saveComments(localBlogId,(CommentList)list);
}","@Override public void onDataReadyToSave(List list){
  int localBlogId=blog.getLocalTableBlogId();
  if (!mIsLoadingMore) {
    CommentTable.deleteCommentsForBlogWithFilter(localBlogId,mStatusFilter);
  }
  CommentTable.saveComments(localBlogId,(CommentList)list);
}",0.937875751503006
14097,"public void hidePost(PostsListPost post){
  mHiddenPosts.add(post);
  int position=mPosts.indexOfPost(post);
  if (position > -1) {
    mPosts.remove(position);
    if (mPosts.size() > 0) {
      notifyItemRemoved(position);
    }
 else {
      notifyDataSetChanged();
    }
  }
}","public void hidePost(PostsListPost post){
  mHiddenPosts.add(post);
  int position=mPosts.indexOfPost(post);
  if (position > -1) {
    mPosts.remove(position);
    if (mPosts.size() > 0) {
      notifyItemRemoved(position);
      if (mIsPage) {
        notifyItemChanged(position);
      }
    }
 else {
      notifyDataSetChanged();
    }
  }
}",0.8945686900958466
14098,"public PageViewHolder(View view){
  super(view);
  txtTitle=(TextView)view.findViewById(R.id.text_title);
  txtStatus=(TextView)view.findViewById(R.id.text_status);
  btnMore=view.findViewById(R.id.btn_more);
  dividerTop=view.findViewById(R.id.divider_top);
  dateHeader=(ViewGroup)view.findViewById(R.id.header_date);
  txtDate=(TextView)dateHeader.findViewById(R.id.text_date);
}","public PageViewHolder(View view){
  super(view);
  txtTitle=(TextView)view.findViewById(R.id.text_title);
  txtStatus=(TextView)view.findViewById(R.id.text_status);
  btnMore=view.findViewById(R.id.btn_more);
  dividerTop=view.findViewById(R.id.divider_top);
  dateHeader=(ViewGroup)view.findViewById(R.id.header_date);
  txtDate=(TextView)dateHeader.findViewById(R.id.text_date);
  disabledOverlay=view.findViewById(R.id.disabled_overlay);
}",0.9271844660194176
14099,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (getItemViewType(position) == VIEW_TYPE_ENDLIST_INDICATOR) {
    return;
  }
  final PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (holder instanceof PostViewHolder) {
    PostViewHolder postHolder=(PostViewHolder)holder;
    if (post.hasTitle()) {
      postHolder.txtTitle.setText(post.getTitle());
    }
 else {
      postHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    if (post.hasExcerpt()) {
      postHolder.txtExcerpt.setVisibility(View.VISIBLE);
      postHolder.txtExcerpt.setText(PostUtils.collapseShortcodes(post.getExcerpt()));
    }
 else {
      postHolder.txtExcerpt.setVisibility(View.GONE);
    }
    if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
      postHolder.imgFeatured.setVisibility(View.VISIBLE);
      postHolder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
    }
 else {
      postHolder.imgFeatured.setVisibility(View.GONE);
    }
    if (post.isLocalDraft()) {
      postHolder.txtDate.setVisibility(View.GONE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
    }
 else {
      postHolder.txtDate.setText(post.getFormattedDate());
      postHolder.txtDate.setVisibility(View.VISIBLE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
    }
    if (post.isUploading()) {
      postHolder.disabledOverlay.setVisibility(View.VISIBLE);
    }
 else {
      postHolder.disabledOverlay.setVisibility(View.GONE);
    }
    updateStatusText(postHolder.txtStatus,post);
    configurePostButtons(postHolder,post);
  }
 else   if (holder instanceof PageViewHolder) {
    PageViewHolder pageHolder=(PageViewHolder)holder;
    if (post.hasTitle()) {
      pageHolder.txtTitle.setText(post.getTitle());
    }
 else {
      pageHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    String dateStr=getPageDateHeaderText(context,post);
    pageHolder.txtDate.setText(dateStr);
    updateStatusText(pageHolder.txtStatus,post);
    boolean showDate;
    if (position > 0) {
      String prevDateStr=getPageDateHeaderText(context,mPosts.get(position - 1));
      showDate=!prevDateStr.equals(dateStr);
    }
 else {
      showDate=true;
    }
    pageHolder.dateHeader.setVisibility(showDate ? View.VISIBLE : View.GONE);
    pageHolder.btnMore.setVisibility(post.isUploading() ? View.GONE : View.VISIBLE);
    pageHolder.btnMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPagePopupMenu(v,post);
      }
    }
);
    pageHolder.dividerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
  }
  if (mOnLoadMoreListener != null && position >= mPosts.size() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mOnPostSelectedListener != null) {
        mOnPostSelectedListener.onPostSelected(post);
      }
    }
  }
);
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (getItemViewType(position) == VIEW_TYPE_ENDLIST_INDICATOR) {
    return;
  }
  final PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (holder instanceof PostViewHolder) {
    PostViewHolder postHolder=(PostViewHolder)holder;
    if (post.hasTitle()) {
      postHolder.txtTitle.setText(post.getTitle());
    }
 else {
      postHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    if (post.hasExcerpt()) {
      postHolder.txtExcerpt.setVisibility(View.VISIBLE);
      postHolder.txtExcerpt.setText(PostUtils.collapseShortcodes(post.getExcerpt()));
    }
 else {
      postHolder.txtExcerpt.setVisibility(View.GONE);
    }
    if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
      postHolder.imgFeatured.setVisibility(View.VISIBLE);
      postHolder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
    }
 else {
      postHolder.imgFeatured.setVisibility(View.GONE);
    }
    if (post.isLocalDraft()) {
      postHolder.txtDate.setVisibility(View.GONE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
    }
 else {
      postHolder.txtDate.setText(post.getFormattedDate());
      postHolder.txtDate.setVisibility(View.VISIBLE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
    }
    if (post.isUploading()) {
      postHolder.disabledOverlay.setVisibility(View.VISIBLE);
    }
 else {
      postHolder.disabledOverlay.setVisibility(View.GONE);
    }
    updateStatusText(postHolder.txtStatus,post);
    configurePostButtons(postHolder,post);
  }
 else   if (holder instanceof PageViewHolder) {
    PageViewHolder pageHolder=(PageViewHolder)holder;
    if (post.hasTitle()) {
      pageHolder.txtTitle.setText(post.getTitle());
    }
 else {
      pageHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    String dateStr=getPageDateHeaderText(context,post);
    pageHolder.txtDate.setText(dateStr);
    updateStatusText(pageHolder.txtStatus,post);
    boolean showDate;
    if (position > 0) {
      String prevDateStr=getPageDateHeaderText(context,mPosts.get(position - 1));
      showDate=!prevDateStr.equals(dateStr);
    }
 else {
      showDate=true;
    }
    pageHolder.dateHeader.setVisibility(showDate ? View.VISIBLE : View.GONE);
    pageHolder.btnMore.setVisibility(post.isUploading() ? View.GONE : View.VISIBLE);
    pageHolder.btnMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPagePopupMenu(v,post);
      }
    }
);
    pageHolder.dividerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
    if (post.isUploading()) {
      pageHolder.disabledOverlay.setVisibility(View.VISIBLE);
    }
 else {
      pageHolder.disabledOverlay.setVisibility(View.GONE);
    }
  }
  if (mOnLoadMoreListener != null && position >= mPosts.size() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mOnPostSelectedListener != null) {
        mOnPostSelectedListener.onPostSelected(post);
      }
    }
  }
);
}",0.9745270370922092
14100,"public static void followFeedByUrl(final String feedUrl,final ActionListener actionListener){
  if (TextUtils.isEmpty(feedUrl)) {
    if (actionListener != null) {
      actionListener.onActionResult(false);
    }
    return;
  }
  ReaderBlog blogInfo=ReaderBlogTable.getFeedInfo(ReaderBlogTable.getFeedIdFromUrl(feedUrl));
  if (blogInfo != null) {
    internalFollowFeed(blogInfo.feedId,blogInfo.getFeedUrl(),true,actionListener);
    return;
  }
  updateFeedInfo(0,feedUrl,new UpdateBlogInfoListener(){
    @Override public void onResult(    ReaderBlog blogInfo){
      if (blogInfo != null) {
        internalFollowFeed(blogInfo.feedId,blogInfo.getFeedUrl(),true,actionListener);
      }
 else       if (actionListener != null) {
        actionListener.onActionResult(false);
      }
    }
  }
);
}","public static void followFeedByUrl(final String feedUrl,final ActionListener actionListener){
  if (TextUtils.isEmpty(feedUrl)) {
    ReaderActions.callActionListener(actionListener,false);
    return;
  }
  ReaderBlog blogInfo=ReaderBlogTable.getFeedInfo(ReaderBlogTable.getFeedIdFromUrl(feedUrl));
  if (blogInfo != null) {
    internalFollowFeed(blogInfo.feedId,blogInfo.getFeedUrl(),true,actionListener);
    return;
  }
  updateFeedInfo(0,feedUrl,new UpdateBlogInfoListener(){
    @Override public void onResult(    ReaderBlog blogInfo){
      long feedIdToFollow=blogInfo != null ? blogInfo.feedId : 0;
      String feedUrlToFollow=(blogInfo != null && blogInfo.hasFeedUrl()) ? blogInfo.getFeedUrl() : feedUrl;
      internalFollowFeed(feedIdToFollow,feedUrlToFollow,true,actionListener);
    }
  }
);
}",0.7274984481688392
14101,"@Override public void onResult(ReaderBlog blogInfo){
  if (blogInfo != null) {
    internalFollowFeed(blogInfo.feedId,blogInfo.getFeedUrl(),true,actionListener);
  }
 else   if (actionListener != null) {
    actionListener.onActionResult(false);
  }
}","@Override public void onResult(ReaderBlog blogInfo){
  long feedIdToFollow=blogInfo != null ? blogInfo.feedId : 0;
  String feedUrlToFollow=(blogInfo != null && blogInfo.hasFeedUrl()) ? blogInfo.getFeedUrl() : feedUrl;
  internalFollowFeed(feedIdToFollow,feedUrlToFollow,true,actionListener);
}",0.4073394495412844
14102,"public static void deleteEmailFollowersForLocalBlogId(int localTableBlogId){
  String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(1)};
  getWritableDb().delete(PEOPLE_TABLE,""String_Node_Str"",args);
}","public static void deleteEmailFollowersForLocalBlogId(int localTableBlogId){
  String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(0),Integer.toString(1)};
  getWritableDb().delete(PEOPLE_TABLE,""String_Node_Str"",args);
}",0.9578059071729956
14103,"public static void deleteFollowersForLocalBlogId(int localTableBlogId){
  String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(1)};
  getWritableDb().delete(PEOPLE_TABLE,""String_Node_Str"",args);
}","public static void deleteFollowersForLocalBlogId(int localTableBlogId){
  String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(1),Integer.toString(0)};
  getWritableDb().delete(PEOPLE_TABLE,""String_Node_Str"",args);
}",0.956896551724138
14104,"public static List<Person> getEmailFollowers(int localTableBlogId){
  String[] args={Integer.toString(localTableBlogId),Integer.toString(1)};
  String where=""String_Node_Str"";
  return PeopleTable.getPeople(localTableBlogId,where,args);
}","public static List<Person> getEmailFollowers(int localTableBlogId){
  String[] args={Integer.toString(localTableBlogId),Integer.toString(0),Integer.toString(1)};
  String where=""String_Node_Str"";
  return PeopleTable.getPeople(localTableBlogId,where,args);
}",0.9596774193548387
14105,"private static void deletePeopleForLocalBlogIdExceptForFirstPage(int localTableBlogId,boolean isFollower){
  int size=getPeopleCountForLocalBlogId(localTableBlogId,isFollower);
  int fetchLimit=PeopleUtils.FETCH_USERS_LIMIT;
  if (size > fetchLimit) {
    int deleteCount=size - fetchLimit;
    String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(isFollower ? 1 : 0),Integer.toString(deleteCount)};
    getWritableDb().delete(PEOPLE_TABLE,""String_Node_Str"" + ""String_Node_Str"" + PEOPLE_TABLE + ""String_Node_Str""+ ""String_Node_Str"",args);
  }
}","public static void deletePeopleForLocalBlogIdExceptForFirstPage(int localTableBlogId){
  int size=getPeopleCountForLocalBlogId(localTableBlogId);
  int fetchLimit=PeopleUtils.FETCH_LIMIT;
  if (size > fetchLimit) {
    int deleteCount=size - fetchLimit;
    String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(deleteCount)};
    getWritableDb().delete(PEOPLE_TABLE,""String_Node_Str"" + PEOPLE_TABLE + ""String_Node_Str""+ ""String_Node_Str"",args);
  }
}",0.7476099426386233
14106,"public static int getUsersCountForLocalBlogId(int localTableBlogId){
  return PeopleTable.getPeopleCountForLocalBlogId(localTableBlogId,false);
}","public static int getUsersCountForLocalBlogId(int localTableBlogId){
  String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(0)};
  String sql=""String_Node_Str"" + PEOPLE_TABLE + ""String_Node_Str"";
  return SqlUtils.intForQuery(getReadableDb(),sql,args);
}",0.4
14107,"private static int getPeopleCountForLocalBlogId(int localTableBlogId,boolean isFollower){
  String[] args=new String[]{Integer.toString(localTableBlogId),Integer.toString(isFollower ? 1 : 0)};
  String sql=""String_Node_Str"" + PEOPLE_TABLE + ""String_Node_Str"";
  return SqlUtils.intForQuery(getReadableDb(),sql,args);
}","private static int getPeopleCountForLocalBlogId(int localTableBlogId){
  String[] args=new String[]{Integer.toString(localTableBlogId)};
  String sql=""String_Node_Str"" + PEOPLE_TABLE + ""String_Node_Str"";
  return SqlUtils.intForQuery(getReadableDb(),sql,args);
}",0.903448275862069
14108,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.people_management_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    if (NetworkUtils.isNetworkAvailable(this)) {
      PeopleTable.deleteUsersForLocalBlogIdExceptForFirstPage(blog.getLocalTableBlogId());
    }
    if (actionBar != null) {
      actionBar.setTitle(R.string.people);
    }
    PeopleListFragment peopleListFragment=PeopleListFragment.newInstance(blog.getLocalTableBlogId());
    peopleListFragment.setOnPersonSelectedListener(this);
    peopleListFragment.setOnFetchPeopleListener(this);
    mUsersEndOfListReached=false;
    mUsersFetchRequestInProgress=false;
    mCanRefreshUsers=true;
    mFollowersEndOfListReached=false;
    mFollowersFetchRequestInProgress=false;
    mCanRefreshFollowers=true;
    mFollowersLastFetchedPage=0;
    mEmailFollowersEndOfListReached=false;
    mEmailFollowersFetchRequestInProgress=false;
    mCanRefreshEmailFollowers=true;
    mEmailFollowersLastFetchedPage=0;
    fragmentManager.beginTransaction().add(R.id.fragment_container,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT).commit();
  }
 else {
    mUsersEndOfListReached=savedInstanceState.getBoolean(KEY_USERS_END_OF_LIST_REACHED);
    mUsersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_USERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshUsers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_USERS);
    mFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_FOLLOWERS_END_OF_LIST_REACHED);
    mFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_FOLLOWERS);
    mFollowersLastFetchedPage=savedInstanceState.getInt(KEY_FOLLOWERS_LAST_FETCHED_PAGE);
    mEmailFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_END_OF_LIST_REACHED);
    mEmailFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshEmailFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_EMAIL_FOLLOWERS);
    mEmailFollowersLastFetchedPage=savedInstanceState.getInt(KEY_EMAIL_FOLLOWERS_LAST_FETCHED_PAGE);
    CharSequence title=savedInstanceState.getCharSequence(KEY_TITLE);
    if (actionBar != null && title != null) {
      actionBar.setTitle(title);
    }
    PeopleListFragment peopleListFragment=getListFragment();
    if (peopleListFragment != null) {
      peopleListFragment.setOnPersonSelectedListener(this);
      peopleListFragment.setOnFetchPeopleListener(this);
    }
    PersonDetailFragment personDetailFragment=getDetailFragment();
    if (personDetailFragment != null && personDetailFragment.isAdded()) {
      removeToolbarElevation();
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.people_management_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    if (NetworkUtils.isNetworkAvailable(this)) {
      PeopleTable.deletePeopleForLocalBlogIdExceptForFirstPage(blog.getLocalTableBlogId());
    }
    if (actionBar != null) {
      actionBar.setTitle(R.string.people);
    }
    PeopleListFragment peopleListFragment=PeopleListFragment.newInstance(blog.getLocalTableBlogId());
    peopleListFragment.setOnPersonSelectedListener(this);
    peopleListFragment.setOnFetchPeopleListener(this);
    mUsersEndOfListReached=false;
    mUsersFetchRequestInProgress=false;
    mCanRefreshUsers=true;
    mFollowersEndOfListReached=false;
    mFollowersFetchRequestInProgress=false;
    mCanRefreshFollowers=true;
    mFollowersLastFetchedPage=0;
    mEmailFollowersEndOfListReached=false;
    mEmailFollowersFetchRequestInProgress=false;
    mCanRefreshEmailFollowers=true;
    mEmailFollowersLastFetchedPage=0;
    fragmentManager.beginTransaction().add(R.id.fragment_container,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT).commit();
  }
 else {
    mUsersEndOfListReached=savedInstanceState.getBoolean(KEY_USERS_END_OF_LIST_REACHED);
    mUsersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_USERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshUsers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_USERS);
    mFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_FOLLOWERS_END_OF_LIST_REACHED);
    mFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_FOLLOWERS);
    mFollowersLastFetchedPage=savedInstanceState.getInt(KEY_FOLLOWERS_LAST_FETCHED_PAGE);
    mEmailFollowersEndOfListReached=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_END_OF_LIST_REACHED);
    mEmailFollowersFetchRequestInProgress=savedInstanceState.getBoolean(KEY_EMAIL_FOLLOWERS_FETCH_REQUEST_IN_PROGRESS);
    mCanRefreshEmailFollowers=savedInstanceState.getBoolean(KEY_CAN_REFRESH_EMAIL_FOLLOWERS);
    mEmailFollowersLastFetchedPage=savedInstanceState.getInt(KEY_EMAIL_FOLLOWERS_LAST_FETCHED_PAGE);
    CharSequence title=savedInstanceState.getCharSequence(KEY_TITLE);
    if (actionBar != null && title != null) {
      actionBar.setTitle(title);
    }
    PeopleListFragment peopleListFragment=getListFragment();
    if (peopleListFragment != null) {
      peopleListFragment.setOnPersonSelectedListener(this);
      peopleListFragment.setOnFetchPeopleListener(this);
    }
    PersonDetailFragment personDetailFragment=getDetailFragment();
    if (personDetailFragment != null && personDetailFragment.isAdded()) {
      removeToolbarElevation();
    }
  }
}",0.9983121067976064
14109,"public static void fetchUsers(final String blogId,final int localTableBlogId,final int offset,final FetchUsersCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        try {
          JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
          List<Person> people=peopleListFromJSON(jsonArray,blogId,localTableBlogId,false,false);
          int numberOfUsers=jsonObject.optInt(""String_Node_Str"");
          boolean isEndOfList=(people.size() + offset) >= numberOfUsers;
          callback.onSuccess(people,isEndOfList);
        }
 catch (        JSONException e) {
          AppLog.e(T.API,""String_Node_Str"" + e);
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  Map<String,String> params=new HashMap<>();
  params.put(""String_Node_Str"",Integer.toString(PeopleUtils.FETCH_USERS_LIMIT));
  params.put(""String_Node_Str"",Integer.toString(offset));
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  String path=String.format(""String_Node_Str"",blogId);
  WordPress.getRestClientUtilsV1_1().get(path,params,null,listener,errorListener);
}","public static void fetchUsers(final String blogId,final int localTableBlogId,final int offset,final FetchUsersCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        try {
          JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
          List<Person> people=peopleListFromJSON(jsonArray,blogId,localTableBlogId,false,false);
          int numberOfUsers=jsonObject.optInt(""String_Node_Str"");
          boolean isEndOfList=(people.size() + offset) >= numberOfUsers;
          callback.onSuccess(people,isEndOfList);
        }
 catch (        JSONException e) {
          AppLog.e(T.API,""String_Node_Str"" + e);
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  Map<String,String> params=new HashMap<>();
  params.put(""String_Node_Str"",Integer.toString(PeopleUtils.FETCH_LIMIT));
  params.put(""String_Node_Str"",Integer.toString(offset));
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  String path=String.format(""String_Node_Str"",blogId);
  WordPress.getRestClientUtilsV1_1().get(path,params,null,listener,errorListener);
}",0.998046875
14110,"private static void fetchFollowers(final String blogId,final int localTableBlogId,final int page,final FetchFollowersCallback callback,final boolean isEmailFollower){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        try {
          JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
          List<Person> people=peopleListFromJSON(jsonArray,blogId,localTableBlogId,!isEmailFollower,isEmailFollower);
          int pageFetched=jsonObject.optInt(""String_Node_Str"");
          int numberOfPages=jsonObject.optInt(""String_Node_Str"");
          boolean isEndOfList=page >= numberOfPages;
          callback.onSuccess(people,pageFetched,isEndOfList);
        }
 catch (        JSONException e) {
          AppLog.e(T.API,""String_Node_Str"" + e);
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  Map<String,String> params=new HashMap<>();
  params.put(""String_Node_Str"",Integer.toString(isEmailFollower ? FETCH_EMAIL_FOLLOWERS_LIMIT : FETCH_FOLLOWERS_LIMIT));
  params.put(""String_Node_Str"",Integer.toString(page));
  params.put(""String_Node_Str"",isEmailFollower ? ""String_Node_Str"" : ""String_Node_Str"");
  String path=String.format(""String_Node_Str"",blogId);
  WordPress.getRestClientUtilsV1_1().get(path,params,null,listener,errorListener);
}","private static void fetchFollowers(final String blogId,final int localTableBlogId,final int page,final FetchFollowersCallback callback,final boolean isEmailFollower){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        try {
          JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
          List<Person> people=peopleListFromJSON(jsonArray,blogId,localTableBlogId,!isEmailFollower,isEmailFollower);
          int pageFetched=jsonObject.optInt(""String_Node_Str"");
          int numberOfPages=jsonObject.optInt(""String_Node_Str"");
          boolean isEndOfList=page >= numberOfPages;
          callback.onSuccess(people,pageFetched,isEndOfList);
        }
 catch (        JSONException e) {
          AppLog.e(T.API,""String_Node_Str"" + e);
          callback.onError();
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError();
      }
    }
  }
;
  Map<String,String> params=new HashMap<>();
  params.put(""String_Node_Str"",Integer.toString(FETCH_LIMIT));
  params.put(""String_Node_Str"",Integer.toString(page));
  params.put(""String_Node_Str"",isEmailFollower ? ""String_Node_Str"" : ""String_Node_Str"");
  String path=String.format(""String_Node_Str"",blogId);
  WordPress.getRestClientUtilsV1_1().get(path,params,null,listener,errorListener);
}",0.9824135839902972
14111,"@Override public boolean onFetchFirstPage(PeopleListFilter filter){
  Blog blog=WordPress.getCurrentBlog();
  if (filter == PeopleListFilter.TEAM && mCanRefreshUsers) {
    fetchUsersList(blog.getDotComBlogId(),blog.getLocalTableBlogId(),0);
    return true;
  }
 else   if (filter == PeopleListFilter.FOLLOWERS && mCanRefreshFollowers) {
    fetchFollowersList(blog.getDotComBlogId(),blog.getLocalTableBlogId(),1);
    return true;
  }
  return false;
}","@Override public boolean onFetchFirstPage(PeopleListFilter filter){
  Blog blog=WordPress.getCurrentBlog();
  if (filter == PeopleListFilter.TEAM && mCanRefreshUsers) {
    return fetchUsersList(blog.getDotComBlogId(),blog.getLocalTableBlogId(),0);
  }
 else   if (filter == PeopleListFilter.FOLLOWERS && mCanRefreshFollowers) {
    return fetchFollowersList(blog.getDotComBlogId(),blog.getLocalTableBlogId(),1);
  }
  return false;
}",0.9324324324324323
14112,"private void fetchFollowersList(String dotComBlogId,final int localTableBlogId,final int page){
  if (mFollowersEndOfListReached || mFollowersFetchRequestInProgress || !NetworkUtils.checkConnection(this)) {
    return;
  }
  mFollowersFetchRequestInProgress=true;
  PeopleUtils.fetchFollowers(dotComBlogId,localTableBlogId,page,new PeopleUtils.FetchFollowersCallback(){
    @Override public void onSuccess(    List<Person> peopleList,    boolean isEndOfList){
      boolean isFreshList=(page == 1);
      mFollowersEndOfListReached=isEndOfList;
      PeopleTable.saveFollowers(peopleList,localTableBlogId,isFreshList);
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=page == 1;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.FOLLOWERS,isFirstPage);
      }
      refreshOnScreenFragmentDetails();
      mFollowersFetchRequestInProgress=false;
    }
    @Override public void onError(){
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=page == 1;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.FOLLOWERS,isFirstPage);
      }
      mFollowersFetchRequestInProgress=false;
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_fetch_people_list,ToastUtils.Duration.LONG);
    }
  }
);
}","private boolean fetchFollowersList(String dotComBlogId,final int localTableBlogId,final int page){
  if (mFollowersEndOfListReached || mFollowersFetchRequestInProgress || !NetworkUtils.checkConnection(this)) {
    return false;
  }
  mFollowersFetchRequestInProgress=true;
  PeopleUtils.fetchFollowers(dotComBlogId,localTableBlogId,page,new PeopleUtils.FetchFollowersCallback(){
    @Override public void onSuccess(    List<Person> peopleList,    boolean isEndOfList){
      boolean isFreshList=(page == 1);
      mFollowersEndOfListReached=isEndOfList;
      PeopleTable.saveFollowers(peopleList,localTableBlogId,isFreshList);
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=page == 1;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.FOLLOWERS,isFirstPage);
      }
      refreshOnScreenFragmentDetails();
      mFollowersFetchRequestInProgress=false;
    }
    @Override public void onError(){
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=page == 1;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.FOLLOWERS,isFirstPage);
      }
      mFollowersFetchRequestInProgress=false;
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_fetch_people_list,ToastUtils.Duration.LONG);
    }
  }
);
  return true;
}",0.9887403237156932
14113,"private void fetchUsersList(String dotComBlogId,final int localTableBlogId,final int offset){
  if (mUsersEndOfListReached || mUsersFetchRequestInProgress || !NetworkUtils.checkConnection(this)) {
    return;
  }
  mUsersFetchRequestInProgress=true;
  PeopleUtils.fetchUsers(dotComBlogId,localTableBlogId,offset,new PeopleUtils.FetchUsersCallback(){
    @Override public void onSuccess(    List<Person> peopleList,    boolean isEndOfList){
      boolean isFreshList=(offset == 0);
      mUsersEndOfListReached=isEndOfList;
      PeopleTable.saveUsers(peopleList,localTableBlogId,isFreshList);
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=offset == 0;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.TEAM,isFirstPage);
      }
      refreshOnScreenFragmentDetails();
      mUsersFetchRequestInProgress=false;
    }
    @Override public void onError(){
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=offset == 0;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.TEAM,isFirstPage);
      }
      mUsersFetchRequestInProgress=false;
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_fetch_people_list,ToastUtils.Duration.LONG);
    }
  }
);
}","private boolean fetchUsersList(String dotComBlogId,final int localTableBlogId,final int offset){
  if (mUsersEndOfListReached || mUsersFetchRequestInProgress || !NetworkUtils.checkConnection(this)) {
    return false;
  }
  mUsersFetchRequestInProgress=true;
  PeopleUtils.fetchUsers(dotComBlogId,localTableBlogId,offset,new PeopleUtils.FetchUsersCallback(){
    @Override public void onSuccess(    List<Person> peopleList,    boolean isEndOfList){
      boolean isFreshList=(offset == 0);
      mUsersEndOfListReached=isEndOfList;
      PeopleTable.saveUsers(peopleList,localTableBlogId,isFreshList);
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=offset == 0;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.TEAM,isFirstPage);
      }
      refreshOnScreenFragmentDetails();
      mUsersFetchRequestInProgress=false;
    }
    @Override public void onError(){
      PeopleListFragment peopleListFragment=getListFragment();
      if (peopleListFragment != null) {
        boolean isFirstPage=offset == 0;
        peopleListFragment.fetchingRequestFinished(PeopleListFilter.TEAM,isFirstPage);
      }
      mUsersFetchRequestInProgress=false;
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_fetch_people_list,ToastUtils.Duration.LONG);
    }
  }
);
  return true;
}",0.9884141926140478
14114,"public static void addToolbarToDialog(final Fragment context,final Dialog dialog,String title){
  if (!context.isAdded() || dialog == null) {
    return;
  }
  Toolbar toolbar;
  if (dialog.findViewById(android.R.id.list) == null) {
    return;
  }
  LinearLayout root=(LinearLayout)dialog.findViewById(android.R.id.list).getParent();
  toolbar=(Toolbar)LayoutInflater.from(context.getActivity()).inflate(org.wordpress.android.R.layout.toolbar,root,false);
  root.addView(toolbar,0);
  dialog.getWindow().setWindowAnimations(R.style.DialogAnimations);
  TextView titleView=(TextView)toolbar.findViewById(R.id.toolbar_title);
  titleView.setVisibility(View.VISIBLE);
  titleView.setText(title);
  toolbar.setTitle(""String_Node_Str"");
  toolbar.setContentInsetsAbsolute(0,0);
  toolbar.setNavigationIcon(org.wordpress.android.R.drawable.ic_arrow_back_white_24dp);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dialog.dismiss();
    }
  }
);
}","public static void addToolbarToDialog(final Fragment context,final Dialog dialog,String title){
  if (!context.isAdded() || dialog == null) {
    return;
  }
  Toolbar toolbar;
  if (dialog.findViewById(android.R.id.list) == null) {
    return;
  }
  ViewGroup root=(ViewGroup)dialog.findViewById(android.R.id.list).getParent();
  toolbar=(Toolbar)LayoutInflater.from(context.getActivity()).inflate(org.wordpress.android.R.layout.toolbar,root,false);
  root.addView(toolbar,0);
  dialog.getWindow().setWindowAnimations(R.style.DialogAnimations);
  TextView titleView=(TextView)toolbar.findViewById(R.id.toolbar_title);
  titleView.setVisibility(View.VISIBLE);
  titleView.setText(title);
  toolbar.setTitle(""String_Node_Str"");
  toolbar.setNavigationIcon(org.wordpress.android.R.drawable.ic_arrow_back_white_24dp);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dialog.dismiss();
    }
  }
);
}",0.9621403331650682
14115,"@Override public void onFeaturedImageChanged(int mediaId){
}","@Override public void onFeaturedImageChanged(long mediaId){
}",0.9586776859504132
14116,"@Override public void onFeaturedImageChanged(int mediaId){
}","@Override public void onFeaturedImageChanged(long mediaId){
}",0.9586776859504132
14117,"@Override public void onRefreshStarted(){
  reloadPostAndComments();
}","@Override public void onRefreshStarted(){
  updatePostAndComments();
}",0.9285714285714286
14118,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comment_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        onBackPressed();
      }
    }
);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
    mHasUpdatedComments=savedInstanceState.getBoolean(KEY_HAS_UPDATED_COMMENTS);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    mCommentId=getIntent().getLongExtra(ReaderConstants.ARG_COMMENT_ID,0);
    if (NetworkUtils.isNetworkAvailable(this)) {
      ReaderCommentTable.purgeCommentsForPost(mBlogId,mPostId);
    }
  }
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(CustomSwipeRefreshLayout)findViewById(R.id.swipe_to_refresh),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      reloadPostAndComments();
    }
  }
);
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  int spacingHorizontal=0;
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView.addItemDecoration(new RecyclerItemDecoration(spacingHorizontal,spacingVertical));
  mCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mEditComment=(SuggestionAutoCompleteText)mCommentBox.findViewById(R.id.edit_comment);
  mEditComment.getAutoSaveTextHelper().setUniqueId(String.format(Locale.getDefault(),""String_Node_Str"",AccountHelper.getCurrentUsernameForBlog(null),mPostId,mBlogId));
  mSubmitReplyBtn=mCommentBox.findViewById(R.id.btn_submit_reply);
  if (!loadPost()) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
    return;
  }
  mRecyclerView.setAdapter(getCommentAdapter());
  if (savedInstanceState != null) {
    setReplyToCommentId(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(this,(int)mBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions((int)mBlogId,this,mSuggestionServiceConnectionManager,mPost.isWP());
  if (mSuggestionAdapter != null) {
    mEditComment.setAdapter(mSuggestionAdapter);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comment_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        onBackPressed();
      }
    }
);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
    mHasUpdatedComments=savedInstanceState.getBoolean(KEY_HAS_UPDATED_COMMENTS);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    mCommentId=getIntent().getLongExtra(ReaderConstants.ARG_COMMENT_ID,0);
    if (NetworkUtils.isNetworkAvailable(this)) {
      ReaderCommentTable.purgeCommentsForPost(mBlogId,mPostId);
    }
  }
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(CustomSwipeRefreshLayout)findViewById(R.id.swipe_to_refresh),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      updatePostAndComments();
    }
  }
);
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  int spacingHorizontal=0;
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView.addItemDecoration(new RecyclerItemDecoration(spacingHorizontal,spacingVertical));
  mCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mEditComment=(SuggestionAutoCompleteText)mCommentBox.findViewById(R.id.edit_comment);
  mEditComment.getAutoSaveTextHelper().setUniqueId(String.format(Locale.getDefault(),""String_Node_Str"",AccountHelper.getCurrentUsernameForBlog(null),mPostId,mBlogId));
  mSubmitReplyBtn=mCommentBox.findViewById(R.id.btn_submit_reply);
  if (!loadPost()) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
    return;
  }
  mRecyclerView.setAdapter(getCommentAdapter());
  if (savedInstanceState != null) {
    setReplyToCommentId(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(this,(int)mBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions((int)mBlogId,this,mSuggestionServiceConnectionManager,mPost.isWP());
  if (mSuggestionAdapter != null) {
    mEditComment.setAdapter(mSuggestionAdapter);
  }
}",0.9978517722878624
14119,"@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (progress == 0) {
    progress=1;
  }
  imageWidthText.setText(progress * 10 + ""String_Node_Str"");
}","@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (progress == 0) {
    progress=1;
  }
  imageWidthText.setText(String.format(Locale.US,""String_Node_Str"",progress * 10));
}",0.8459657701711492
14120,"@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    int scrollThreshold=DisplayUtils.dpToPx(getActivity(),2);
    if (((mLastYPos - pos) > scrollThreshold) || ((pos - mLastYPos) > scrollThreshold))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == MotionEvent.ACTION_UP) {
    ActionBar actionBar=getActionBar();
    if (actionBar != null && actionBar.isShowing()) {
      setContentEditingModeVisible(true);
      return false;
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      Spannable spannable=mContentEditText.getText();
      if (spannable == null) {
        return false;
      }
      WPImageSpan[] imageSpans=spannable.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (imageSpans.length != 0) {
        final WPImageSpan imageSpan=imageSpans[0];
        MediaFile mediaFile=imageSpan.getMediaFile();
        if (mediaFile == null)         return false;
        if (!mediaFile.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (mFeaturedImageSupported) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(mediaFile.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(mediaFile.getWidth());
          titleText.setText(mediaFile.getTitle());
          caption.setText(mediaFile.getCaption());
          featuredCheckBox.setChecked(mediaFile.isFeatured());
          if (mediaFile.isFeatured()) {
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
 else {
            featuredInPostCheckBox.setVisibility(View.GONE);
          }
          featuredInPostCheckBox.setChecked(mediaFile.isFeaturedInPost());
          alignmentSpinner.setSelection(mediaFile.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMaximumImageWidth(getActivity(),imageSpan.getImageSource(),mBlogSettingMaxImageWidth);
          seekBar.setMax(maxWidth / 10);
          if (mediaFile.getWidth() != 0) {
            seekBar.setProgress(mediaFile.getWidth() / 10);
          }
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0) {
                progress=1;
              }
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          showImageSettings(alertView,titleText,caption,imageWidthText,featuredCheckBox,featuredInPostCheckBox,maxWidth,alignmentSpinner,imageSpan);
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=spannable.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        Intent intent=new Intent(ACTION_MEDIA_GALLERY_TOUCHED);
        intent.putExtra(EXTRA_MEDIA_GALLERY,gallerySpan.getMediaGallery());
        getActivity().sendBroadcast(intent);
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    int scrollThreshold=DisplayUtils.dpToPx(getActivity(),2);
    if (((mLastYPos - pos) > scrollThreshold) || ((pos - mLastYPos) > scrollThreshold))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == MotionEvent.ACTION_UP) {
    ActionBar actionBar=getActionBar();
    if (actionBar != null && actionBar.isShowing()) {
      setContentEditingModeVisible(true);
      return false;
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      Spannable spannable=mContentEditText.getText();
      if (spannable == null) {
        return false;
      }
      WPImageSpan[] imageSpans=spannable.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (imageSpans.length != 0) {
        final WPImageSpan imageSpan=imageSpans[0];
        MediaFile mediaFile=imageSpan.getMediaFile();
        if (mediaFile == null)         return false;
        if (!mediaFile.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (mFeaturedImageSupported) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          seekBar.setProgress(mediaFile.getWidth());
          titleText.setText(mediaFile.getTitle());
          caption.setText(mediaFile.getCaption());
          featuredCheckBox.setChecked(mediaFile.isFeatured());
          if (mediaFile.isFeatured()) {
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
 else {
            featuredInPostCheckBox.setVisibility(View.GONE);
          }
          featuredInPostCheckBox.setChecked(mediaFile.isFeaturedInPost());
          alignmentSpinner.setSelection(mediaFile.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMaximumImageWidth(getActivity(),imageSpan.getImageSource(),mBlogSettingMaxImageWidth);
          seekBar.setMax(maxWidth / 10);
          imageWidthText.setText(String.format(Locale.US,""String_Node_Str"",maxWidth));
          if (mediaFile.getWidth() != 0) {
            seekBar.setProgress(mediaFile.getWidth() / 10);
          }
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0) {
                progress=1;
              }
              imageWidthText.setText(String.format(Locale.US,""String_Node_Str"",progress * 10));
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          showImageSettings(alertView,titleText,caption,imageWidthText,featuredCheckBox,featuredInPostCheckBox,maxWidth,alignmentSpinner,imageSpan);
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=spannable.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        Intent intent=new Intent(ACTION_MEDIA_GALLERY_TOUCHED);
        intent.putExtra(EXTRA_MEDIA_GALLERY,gallerySpan.getMediaGallery());
        getActivity().sendBroadcast(intent);
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}",0.982211114378124
14121,"private WPEditImageSpan createWPEditImageSpanLocal(Context context,MediaFile mediaFile){
  if (context == null || mediaFile == null || mediaFile.getFilePath() == null) {
    return null;
  }
  Uri imageUri=Uri.parse(mediaFile.getFilePath());
  Bitmap thumbnailBitmap;
  if (MediaUtils.isVideo(imageUri.toString())) {
    thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.media_movieclip);
  }
 else {
    thumbnailBitmap=ImageUtils.getWPImageSpanThumbnailFromFilePath(context,imageUri.getEncodedPath(),ImageUtils.getMaximumThumbnailWidthForEditor(context));
    if (thumbnailBitmap == null) {
      thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.legacy_dashicon_format_image_big_grey);
    }
  }
  WPEditImageSpan imageSpan=new WPEditImageSpan(context,thumbnailBitmap,imageUri);
  mediaFile.setWidth(MediaUtils.getMinimumImageWidth(context,imageUri,mBlogSettingMaxImageWidth));
  return imageSpan;
}","private WPEditImageSpan createWPEditImageSpanLocal(Context context,MediaFile mediaFile){
  if (context == null || mediaFile == null || mediaFile.getFilePath() == null) {
    return null;
  }
  Uri imageUri=Uri.parse(mediaFile.getFilePath());
  Bitmap thumbnailBitmap;
  if (MediaUtils.isVideo(imageUri.toString())) {
    thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.media_movieclip);
  }
 else {
    thumbnailBitmap=ImageUtils.getWPImageSpanThumbnailFromFilePath(context,imageUri.getEncodedPath(),ImageUtils.getMaximumThumbnailWidthForEditor(context));
    if (thumbnailBitmap == null) {
      thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.legacy_dashicon_format_image_big_grey);
    }
  }
  WPEditImageSpan imageSpan=new WPEditImageSpan(context,thumbnailBitmap,imageUri);
  mediaFile.setWidth(MediaUtils.getMinimumImageWidth(context,imageUri,mBlogSettingMaxImageWidth));
  imageSpan.setMediaFile(mediaFile);
  return imageSpan;
}",0.973939703628002
14122,"private WPEditImageSpan createWPEditImageSpanLocal(Context context,MediaFile mediaFile){
  if (context == null || mediaFile == null || mediaFile.getFilePath() == null) {
    return null;
  }
  Uri imageUri=Uri.parse(mediaFile.getFilePath());
  Bitmap thumbnailBitmap;
  if (MediaUtils.isVideo(imageUri.toString())) {
    thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.media_movieclip);
  }
 else {
    thumbnailBitmap=ImageUtils.getWPImageSpanThumbnailFromFilePath(context,imageUri.getEncodedPath(),ImageUtils.getMaximumThumbnailWidthForEditor(context));
    if (thumbnailBitmap == null) {
      thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.legacy_dashicon_format_image_big_grey);
    }
  }
  WPEditImageSpan imageSpan=new WPEditImageSpan(context,thumbnailBitmap,imageUri);
  mediaFile.setWidth(MediaUtils.getMaximumImageWidth(context,imageUri,mBlogSettingMaxImageWidth));
  return imageSpan;
}","private WPEditImageSpan createWPEditImageSpanLocal(Context context,MediaFile mediaFile){
  if (context == null || mediaFile == null || mediaFile.getFilePath() == null) {
    return null;
  }
  Uri imageUri=Uri.parse(mediaFile.getFilePath());
  Bitmap thumbnailBitmap;
  if (MediaUtils.isVideo(imageUri.toString())) {
    thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.media_movieclip);
  }
 else {
    thumbnailBitmap=ImageUtils.getWPImageSpanThumbnailFromFilePath(context,imageUri.getEncodedPath(),ImageUtils.getMaximumThumbnailWidthForEditor(context));
    if (thumbnailBitmap == null) {
      thumbnailBitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.legacy_dashicon_format_image_big_grey);
    }
  }
  WPEditImageSpan imageSpan=new WPEditImageSpan(context,thumbnailBitmap,imageUri);
  mediaFile.setWidth(MediaUtils.getMaximumImageWidth(context,imageUri,mBlogSettingMaxImageWidth));
  imageSpan.setMediaFile(mediaFile);
  return imageSpan;
}",0.973939703628002
14123,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.people_management_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setTitle(R.string.people);
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    if (NetworkUtils.isNetworkAvailable(this)) {
      PeopleTable.deletePeopleForLocalBlogIdExceptForFirstPage(blog.getLocalTableBlogId());
    }
    PeopleListFragment peopleListFragment=PeopleListFragment.newInstance(blog.getLocalTableBlogId());
    peopleListFragment.setOnPersonSelectedListener(this);
    peopleListFragment.setOnFetchPeopleListener(this);
    mPeopleEndOfListReached=false;
    mFetchRequestInProgress=false;
    fragmentManager.beginTransaction().add(R.id.fragment_container,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT).commit();
  }
 else {
    mPeopleEndOfListReached=savedInstanceState.getBoolean(KEY_END_OF_LIST_REACHED);
    mFetchRequestInProgress=savedInstanceState.getBoolean(KEY_FETCH_REQUEST_IN_PROGRESS);
    PeopleListFragment peopleListFragment=getListFragment();
    if (peopleListFragment != null) {
      peopleListFragment.setOnPersonSelectedListener(this);
      peopleListFragment.setOnFetchPeopleListener(this);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.people_management_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setTitle(R.string.people);
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    if (NetworkUtils.isNetworkAvailable(this)) {
      PeopleTable.deletePeopleForLocalBlogIdExceptForFirstPage(blog.getLocalTableBlogId());
    }
    PeopleListFragment peopleListFragment=PeopleListFragment.newInstance(blog.getLocalTableBlogId());
    peopleListFragment.setOnPersonSelectedListener(this);
    peopleListFragment.setOnFetchPeopleListener(this);
    mPeopleEndOfListReached=false;
    mFetchRequestInProgress=false;
    fragmentManager.beginTransaction().add(R.id.fragment_container,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT).commit();
  }
 else {
    mPeopleEndOfListReached=savedInstanceState.getBoolean(KEY_END_OF_LIST_REACHED);
    mFetchRequestInProgress=savedInstanceState.getBoolean(KEY_FETCH_REQUEST_IN_PROGRESS);
    PeopleListFragment peopleListFragment=getListFragment();
    if (peopleListFragment != null) {
      peopleListFragment.setOnPersonSelectedListener(this);
      peopleListFragment.setOnFetchPeopleListener(this);
    }
    PersonDetailFragment personDetailFragment=getDetailFragment();
    if (personDetailFragment != null && personDetailFragment.isAdded()) {
      removeToolbarElevation();
    }
  }
}",0.9486075222509333
14124,"private boolean navigateBackToPeopleListFragment(){
  FragmentManager fragmentManager=getFragmentManager();
  if (fragmentManager.getBackStackEntryCount() > 0) {
    PersonDetailFragment personDetailFragment=getDetailFragment();
    boolean shouldResetToolbarElevation=(personDetailFragment != null);
    ActionBar actionBar=getSupportActionBar();
    if (shouldResetToolbarElevation && actionBar != null) {
      actionBar.setElevation(getResources().getDimension(R.dimen.appbar_elevation));
    }
    fragmentManager.popBackStack();
    return true;
  }
  return false;
}","private boolean navigateBackToPeopleListFragment(){
  FragmentManager fragmentManager=getFragmentManager();
  if (fragmentManager.getBackStackEntryCount() > 0) {
    fragmentManager.popBackStack();
    PersonDetailFragment personDetailFragment=getDetailFragment();
    if (personDetailFragment != null && personDetailFragment.isAdded()) {
      resetToolbarElevation();
    }
    return true;
  }
  return false;
}",0.4620060790273556
14125,"@Override public void onPersonSelected(Person person){
  PersonDetailFragment personDetailFragment=getDetailFragment();
  long personID=person.getPersonID();
  int localTableBlogID=person.getLocalTableBlogId();
  if (personDetailFragment == null) {
    personDetailFragment=PersonDetailFragment.newInstance(personID,localTableBlogID);
  }
 else {
    personDetailFragment.setPersonDetails(personID,localTableBlogID);
  }
  if (!personDetailFragment.isAdded()) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.OPENED_PERSON);
    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
    fragmentTransaction.add(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT);
    fragmentTransaction.addToBackStack(null);
    ActionBar actionBar=getSupportActionBar();
    if (actionBar != null) {
      actionBar.setElevation(0);
    }
    fragmentTransaction.commit();
  }
}","@Override public void onPersonSelected(Person person){
  PersonDetailFragment personDetailFragment=getDetailFragment();
  long personID=person.getPersonID();
  int localTableBlogID=person.getLocalTableBlogId();
  if (personDetailFragment == null) {
    personDetailFragment=PersonDetailFragment.newInstance(personID,localTableBlogID);
  }
 else {
    personDetailFragment.setPersonDetails(personID,localTableBlogID);
  }
  if (!personDetailFragment.isAdded()) {
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.OPENED_PERSON);
    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
    fragmentTransaction.add(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT);
    fragmentTransaction.addToBackStack(null);
    removeToolbarElevation();
    fragmentTransaction.commit();
  }
}",0.8861469433538979
14126,"private void runUrlCanonicalization(String testCaseComment,JSONObject testSetup) throws JSONException {
  final JSONObject input=testSetup.getJSONObject(""String_Node_Str"");
  final String inputUrl=input.isNull(""String_Node_Str"") ? null : input.getString(""String_Node_Str"");
  final JSONObject output=testSetup.getJSONObject(""String_Node_Str"");
  final String outputUrl=output.optString(""String_Node_Str"",null);
  final JSONObject error=output.optJSONObject(""String_Node_Str"");
  String canonicalizedUrl=null;
  try {
    canonicalizedUrl=XMLRPCUtils.sanitizeSiteUrl(inputUrl);
    assertNull(testCaseMessage(""String_Node_Str"",testCaseComment),error);
  }
 catch (  XMLRPCUtils.XMLRPCUtilsException hce) {
    assertNotNull(testCaseMessage(""String_Node_Str"",testCaseComment),error);
    assertEquals(testCaseMessage(""String_Node_Str"",testCaseComment),error.getString(""String_Node_Str""),getInstrumentation().getTargetContext().getString(hce.errorMsgId));
  }
  assertEquals(testCaseMessage(""String_Node_Str"",testCaseComment),outputUrl,canonicalizedUrl);
}","private void runUrlCanonicalization(String testCaseComment,JSONObject testSetup) throws JSONException {
  final JSONObject input=testSetup.getJSONObject(""String_Node_Str"");
  final String inputUrl=input.isNull(""String_Node_Str"") ? null : input.getString(""String_Node_Str"");
  final JSONObject output=testSetup.getJSONObject(""String_Node_Str"");
  final String outputUrl=output.optString(""String_Node_Str"",null);
  final JSONObject error=output.optJSONObject(""String_Node_Str"");
  String canonicalizedUrl=null;
  try {
    canonicalizedUrl=XMLRPCUtils.sanitizeSiteUrl(inputUrl,true);
    assertNull(testCaseMessage(""String_Node_Str"",testCaseComment),error);
  }
 catch (  XMLRPCUtils.XMLRPCUtilsException hce) {
    assertNotNull(testCaseMessage(""String_Node_Str"",testCaseComment),error);
    assertEquals(testCaseMessage(""String_Node_Str"",testCaseComment),error.getString(""String_Node_Str""),getInstrumentation().getTargetContext().getString(hce.errorMsgId));
  }
  assertEquals(testCaseMessage(""String_Node_Str"",testCaseComment),outputUrl,canonicalizedUrl);
}",0.9976314542870678
14127,"private static boolean isFollowActionSuccessful(JSONObject json,boolean isAskingToFollow){
  if (json == null) {
    return false;
  }
  final boolean isSubscribed;
  if (json.has(""String_Node_Str"")) {
    isSubscribed=json.optBoolean(""String_Node_Str"",false);
  }
 else   if (json.has(""String_Node_Str"")) {
    isSubscribed=json.optBoolean(""String_Node_Str"",false);
  }
 else {
    isSubscribed=false;
  }
  return (isSubscribed == isAskingToFollow);
}","private static boolean isFollowActionSuccessful(JSONObject json,boolean isAskingToFollow){
  if (json == null) {
    return false;
  }
  boolean isSubscribed;
  if (json.has(""String_Node_Str"")) {
    isSubscribed=json.optBoolean(""String_Node_Str"",false);
  }
 else {
    isSubscribed=json.has(""String_Node_Str"") && json.optBoolean(""String_Node_Str"",false);
  }
  return (isSubscribed == isAskingToFollow);
}",0.7953488372093023
14128,"@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  if (view.getVisibility() == View.VISIBLE && mReaderWebView.hasUrlClickListener() && isValidClickedUrl(url)) {
    return mReaderWebView.getUrlClickListener().onUrlClick(url);
  }
 else {
    return false;
  }
}","@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  return view.getVisibility() == View.VISIBLE && mReaderWebView.hasUrlClickListener() && isValidClickedUrl(url) && mReaderWebView.getUrlClickListener().onUrlClick(url);
}",0.8838951310861424
14129,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  builder.setTitle(R.string.role);
  builder.setNegativeButton(R.string.cancel,null);
  builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (mListener != null) {
        String role=mRoleListAdapter.getSelectedRole();
        Bundle args=getArguments();
        if (args != null) {
          long personID=args.getLong(PERSON_ID_TAG);
          int localTableBlogId=args.getInt(PERSON_LOCAL_TABLE_BLOG_ID_TAG);
          mListener.onRoleChanged(personID,localTableBlogId,role);
        }
      }
    }
  }
);
  if (mRoleListAdapter == null) {
    final String[] roles=getResources().getStringArray(R.array.roles);
    mRoleListAdapter=new RoleListAdapter(getActivity(),R.layout.role_list_row,roles);
  }
  Bundle args=getArguments();
  if (args != null) {
    String role=args.getString(ROLE_TAG);
    mRoleListAdapter.setSelectedRole(role);
  }
  builder.setAdapter(mRoleListAdapter,null);
  return builder.create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  builder.setTitle(R.string.role);
  builder.setNegativeButton(R.string.cancel,null);
  builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (mListener != null) {
        String role=mRoleListAdapter.getSelectedRole();
        Bundle args=getArguments();
        if (args != null) {
          long personID=args.getLong(PERSON_ID_TAG);
          int localTableBlogId=args.getInt(PERSON_LOCAL_TABLE_BLOG_ID_TAG);
          mListener.onRoleChanged(personID,localTableBlogId,role);
        }
      }
    }
  }
);
  if (mRoleListAdapter == null) {
    final String[] roles=getResources().getStringArray(R.array.roles);
    mRoleListAdapter=new RoleListAdapter(getActivity(),R.layout.role_list_row,roles);
  }
  if (savedInstanceState != null) {
    String savedRole=savedInstanceState.getString(ROLE_TAG);
    mRoleListAdapter.setSelectedRole(savedRole);
  }
 else {
    Bundle args=getArguments();
    if (args != null) {
      String role=args.getString(ROLE_TAG);
      mRoleListAdapter.setSelectedRole(role);
    }
  }
  builder.setAdapter(mRoleListAdapter,null);
  return builder.create();
}",0.8985167837626854
14130,"@Override public void onClick(View v){
  changeSelection(position);
}","@Override public void onClick(View v){
  showRoleChangeDialog();
}",0.7851851851851852
14131,"private void showRoleChangeDialog(){
  Context context=getActivity();
  AlertDialog.Builder builder=new AlertDialog.Builder(context,R.style.Calypso_AlertDialog);
  builder.setTitle(R.string.role);
  builder.setNegativeButton(R.string.cancel,null);
  builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (mListener != null) {
        String role=mRoleListAdapter.getSelectedRole();
        mListener.onRoleChanged(mPersonID,mLocalTableBlogID,role);
      }
    }
  }
);
  if (mRoleListAdapter == null) {
    final String[] roles=getResources().getStringArray(R.array.roles);
    mRoleListAdapter=new RoleListAdapter(context,R.layout.role_list_row,roles);
  }
  Person person=loadPerson();
  if (person != null) {
    mRoleListAdapter.setSelectedRole(person.getRole());
  }
  builder.setAdapter(mRoleListAdapter,null);
  builder.show();
}","private void showRoleChangeDialog(){
  Person person=loadPerson();
  if (person == null) {
    return;
  }
  RoleChangeDialogFragment.newInstance(person.getPersonID(),person.getLocalTableBlogId(),person.getRole()).show(getFragmentManager(),null);
}",0.0938023450586264
14132,"private void hideSearchMessage(){
  if (!isAdded())   return;
  TextView txtSearchMsg=(TextView)getView().findViewById(R.id.text_search_message);
  if (txtSearchMsg.getVisibility() == View.VISIBLE) {
    AniUtils.fadeOut(txtSearchMsg,AniUtils.Duration.MEDIUM);
  }
  RecyclerView recycler=mRecyclerView.getInternalRecyclerView();
  if (recycler != null && recycler.getVisibility() != View.VISIBLE) {
    AniUtils.fadeIn(recycler,AniUtils.Duration.MEDIUM);
  }
}","private void hideSearchMessage(){
  if (!isAdded())   return;
  mEmptyView.setVisibility(View.GONE);
}",0.3303730017761989
14133,"private void showSearchMessage(){
  if (!isAdded())   return;
  boolean isLandscape=DisplayUtils.isLandscape(getActivity());
  boolean isTablet=DisplayUtils.isXLarge(getActivity());
  if (!isLandscape || isTablet) {
    TextView txtSearchMsg=(TextView)getView().findViewById(R.id.text_search_message);
    if (txtSearchMsg.getVisibility() != View.VISIBLE) {
      AniUtils.fadeIn(txtSearchMsg,AniUtils.Duration.MEDIUM);
    }
  }
  RecyclerView recycler=mRecyclerView.getInternalRecyclerView();
  if (recycler != null && recycler.getVisibility() == View.VISIBLE) {
    AniUtils.fadeOut(recycler,AniUtils.Duration.MEDIUM);
  }
  mEmptyView.setVisibility(View.GONE);
}","private void showSearchMessage(){
  if (!isAdded())   return;
  getPostAdapter().clear();
  boolean isLandscape=DisplayUtils.isLandscape(getActivity());
  boolean isTablet=DisplayUtils.isXLarge(getActivity());
  if (!isLandscape || isTablet) {
    setEmptyTitleAndDescription(getString(R.string.reader_label_post_search_explainer),null);
    mEmptyView.setVisibility(View.VISIBLE);
  }
}",0.4862298195631529
14134,"private void resetPostAdapter(ReaderPostListType postListType){
  mPostListType=postListType;
  mPostAdapter=null;
  mRecyclerView.setAdapter(null);
  mHasUpdatedPosts=false;
  checkPostAdapter();
}","private void resetPostAdapter(ReaderPostListType postListType){
  mPostListType=postListType;
  mPostAdapter=null;
  mRecyclerView.setAdapter(null);
  mRecyclerView.setAdapter(getPostAdapter());
}",0.883248730964467
14135,"private void checkPostAdapter(){
  if (isAdded() && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostAdapter());
    if (!mHasUpdatedPosts && NetworkUtils.isNetworkAvailable(getActivity())) {
      mHasUpdatedPosts=true;
      if (getPostListType().isTagType()) {
        updateCurrentTagIfTime();
      }
 else       if (getPostListType() == ReaderPostListType.BLOG_PREVIEW) {
        updatePostsInCurrentBlogOrFeed(UpdateAction.REQUEST_NEWER);
      }
 else       if (getPostListType() == ReaderPostListType.SEARCH_RESULTS) {
        updatePostsInCurrentSearch(0);
      }
    }
  }
}","private void checkPostAdapter(){
  if (isAdded() && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostAdapter());
    if (!mHasUpdatedPosts && NetworkUtils.isNetworkAvailable(getActivity())) {
      mHasUpdatedPosts=true;
      if (getPostListType().isTagType()) {
        updateCurrentTagIfTime();
      }
 else       if (getPostListType() == ReaderPostListType.BLOG_PREVIEW) {
        updatePostsInCurrentBlogOrFeed(UpdateAction.REQUEST_NEWER);
      }
    }
  }
}",0.8900999091734787
14136,"private void submitSearchQuery(@NonNull String query){
  if (!isAdded())   return;
  ReaderSearchTable.addOrUpdateQueryString(query);
  mSearchView.clearFocus();
  hideSearchMessage();
  mCurrentSearchQuery=query;
  resetPostAdapter(ReaderPostListType.SEARCH_RESULTS);
}","private void submitSearchQuery(@NonNull String query){
  if (!isAdded())   return;
  ReaderSearchTable.addOrUpdateQueryString(query);
  mSearchView.clearFocus();
  hideSearchMessage();
  mCurrentSearchQuery=query;
  resetPostAdapter(ReaderPostListType.SEARCH_RESULTS);
  updatePostsInCurrentSearch(0);
}",0.9424083769633508
14137,"private boolean shouldShowBoxAndPagesAnimation(){
  return getPostListType().isTagType() || getPostListType() == ReaderPostListType.SEARCH_RESULTS;
}","private boolean shouldShowBoxAndPagesAnimation(){
  return getPostListType().isTagType();
}",0.7583333333333333
14138,"public void setCurrentSearchQuery(@NonNull String query){
  mCurrentSearchQuery=query;
}","public void setCurrentSearchQuery(@NonNull String query){
  if (!query.equals(mCurrentSearchQuery)) {
    mCurrentSearchQuery=query;
    reload();
  }
}",0.7333333333333333
14139,"private static boolean isTagAlphaNumeric(String tagString){
  if (tagString == null)   return false;
  for (int i=0; i < tagString.length(); i++) {
    char c=tagString.charAt(i);
    if (!Character.isLetterOrDigit(c) && c != '-') {
      return false;
    }
  }
  return true;
}","private static boolean isTagAlphaNumeric(String tagString){
  if (TextUtils.isEmpty(tagString)) {
    return false;
  }
  for (int i=0; i < tagString.length(); i++) {
    char c=tagString.charAt(i);
    if (!Character.isLetterOrDigit(c) && c != '-') {
      return false;
    }
  }
  return true;
}",0.8492201039861352
14140,"private void deleteCredentialsInSmartLock(){
  if (isSmartLockAvailable()) {
    return;
  }
  Credential credential=new Credential.Builder(mUsername).setPassword(mPassword).build();
  Auth.CredentialsApi.delete(mCredentialsClient,credential).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    Status status){
      AppLog.i(T.NUX,status.isSuccess() ? ""String_Node_Str"" + mUsername : ""String_Node_Str"" + mUsername);
    }
  }
);
}","private void deleteCredentialsInSmartLock(){
  if (!isSmartLockAvailable()) {
    return;
  }
  Credential credential=new Credential.Builder(mUsername).setPassword(mPassword).build();
  Auth.CredentialsApi.delete(mCredentialsClient,credential).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    Status status){
      AppLog.i(T.NUX,status.isSuccess() ? ""String_Node_Str"" + mUsername : ""String_Node_Str"" + mUsername);
    }
  }
);
}",0.9989281886387996
14141,"private void updatePostObject(boolean isAutosave){
  if (mPost == null) {
    AppLog.e(AppLog.T.POSTS,""String_Node_Str"");
    return;
  }
  if (mEditorFragment != null) {
    if (mShowNewEditor) {
      updatePostContentNewEditor(isAutosave,(String)mEditorFragment.getTitle(),(String)mEditorFragment.getContent());
    }
 else {
      updatePostContent(isAutosave);
    }
  }
  if (mEditPostSettingsFragment != null) {
    mEditPostSettingsFragment.updatePostSettings();
  }
}","private synchronized void updatePostObject(boolean isAutosave){
  if (mPost == null) {
    AppLog.e(AppLog.T.POSTS,""String_Node_Str"");
    return;
  }
  if (mEditorFragment != null) {
    if (mShowNewEditor) {
      updatePostContentNewEditor(isAutosave,(String)mEditorFragment.getTitle(),(String)mEditorFragment.getContent());
    }
 else {
      updatePostContent(isAutosave);
    }
  }
  if (mEditPostSettingsFragment != null) {
    mEditPostSettingsFragment.updatePostSettings();
  }
}",0.9865284974093264
14142,"@Override public boolean onOptionsItemSelected(final MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    Fragment fragment=getFragmentManager().findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG);
    if (fragment != null && fragment.isVisible()) {
      return false;
    }
    if (mViewPager.getCurrentItem() > PAGE_CONTENT) {
      if (mViewPager.getCurrentItem() == PAGE_SETTINGS) {
        mPost.setFeaturedImageId(mEditPostSettingsFragment.getFeaturedImageId());
        mEditorFragment.setFeaturedImageId(mPost.getFeaturedImageId());
      }
      mViewPager.setCurrentItem(PAGE_CONTENT);
      invalidateOptionsMenu();
    }
 else {
      saveAndFinish();
    }
    return true;
  }
  MediaUploadService mediaUploadService=MediaUploadService.getInstance();
  if ((mediaUploadService != null && mediaUploadService.hasUploads()) || mEditorFragment.isUploadingMedia()) {
    ToastUtils.showToast(this,R.string.editor_toast_uploading_please_wait,Duration.SHORT);
    return false;
  }
  if (itemId == R.id.menu_save_post) {
    return savePost();
  }
 else   if (itemId == R.id.menu_preview_post) {
    mViewPager.setCurrentItem(PAGE_PREVIEW);
  }
 else   if (itemId == R.id.menu_post_settings) {
    InputMethodManager imm=((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE));
    imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
    if (mShowNewEditor) {
      mEditPostSettingsFragment.updateFeaturedImage(mPost.getFeaturedImageId());
    }
    mViewPager.setCurrentItem(PAGE_SETTINGS);
  }
  return false;
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    Fragment fragment=getFragmentManager().findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG);
    if (fragment != null && fragment.isVisible()) {
      return false;
    }
    if (mViewPager.getCurrentItem() > PAGE_CONTENT) {
      if (mViewPager.getCurrentItem() == PAGE_SETTINGS) {
        mPost.setFeaturedImageId(mEditPostSettingsFragment.getFeaturedImageId());
        mEditorFragment.setFeaturedImageId(mPost.getFeaturedImageId());
      }
      mViewPager.setCurrentItem(PAGE_CONTENT);
      invalidateOptionsMenu();
    }
 else {
      saveAndFinish();
    }
    return true;
  }
  MediaUploadService mediaUploadService=MediaUploadService.getInstance();
  if ((mediaUploadService != null && mediaUploadService.hasUploads()) || mEditorFragment.isUploadingMedia()) {
    ToastUtils.showToast(this,R.string.editor_toast_uploading_please_wait,Duration.SHORT);
    return false;
  }
  if (itemId == R.id.menu_save_post) {
    return publishPost();
  }
 else   if (itemId == R.id.menu_preview_post) {
    mViewPager.setCurrentItem(PAGE_PREVIEW);
  }
 else   if (itemId == R.id.menu_post_settings) {
    InputMethodManager imm=((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE));
    imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
    if (mShowNewEditor) {
      mEditPostSettingsFragment.updateFeaturedImage(mPost.getFeaturedImageId());
    }
    mViewPager.setCurrentItem(PAGE_SETTINGS);
  }
  return false;
}",0.9965975873801424
14143,"@Override protected void onResume(){
  super.onResume();
  mAutoSaveTimer=new Timer();
  mAutoSaveTimer.scheduleAtFixedRate(new AutoSaveTask(),AUTOSAVE_INTERVAL_MILLIS,AUTOSAVE_INTERVAL_MILLIS);
}","@Override protected void onResume(){
  super.onResume();
  mHandler=new Handler();
  mHandler.postDelayed(mAutoSave,AUTOSAVE_INTERVAL_MILLIS);
}",0.6705882352941176
14144,"private void saveAndFinish(){
  savePost(true);
  if (mEditorFragment != null && mPost.hasEmptyContentFields()) {
    if (mIsNewPost) {
      WordPress.wpDB.deletePost(mPost);
      finish();
      return;
    }
  }
 else   if (mOriginalPost != null && !mPost.hasChanges(mOriginalPost)) {
    WordPress.wpDB.updatePost(mOriginalPost);
    finish();
    return;
  }
 else {
    if (mShowNewEditor) {
      updatePostContentNewEditor(false,mPost.getTitle(),mPost.getContent());
      savePostToDb();
    }
 else {
      savePost(false);
    }
  }
  Intent i=new Intent();
  i.putExtra(EXTRA_SAVED_AS_LOCAL_DRAFT,true);
  i.putExtra(EXTRA_IS_PAGE,mIsPage);
  setResult(RESULT_OK,i);
  ToastUtils.showToast(this,R.string.editor_toast_changes_saved);
  finish();
}","private void saveAndFinish(){
  new SaveAndFinishTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.154555940023068
14145,"@Override public void onPageSelected(int position){
  invalidateOptionsMenu();
  if (position == PAGE_CONTENT) {
    setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()));
  }
 else   if (position == PAGE_SETTINGS) {
    setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
  }
 else   if (position == PAGE_PREVIEW) {
    setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
    savePost(true);
    if (mEditPostPreviewFragment != null) {
      mEditPostPreviewFragment.loadPost();
    }
  }
}","@Override public void onPageSelected(int position){
  invalidateOptionsMenu();
  if (position == PAGE_CONTENT) {
    setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()));
  }
 else   if (position == PAGE_SETTINGS) {
    setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
  }
 else   if (position == PAGE_PREVIEW) {
    setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
    savePostAsync();
    if (mEditPostPreviewFragment != null) {
      mEditPostPreviewFragment.loadPost();
    }
  }
}",0.9901873327386262
14146,"@Override protected void onPause(){
  super.onPause();
  try {
    unregisterReceiver(mGalleryReceiver);
  }
 catch (  IllegalArgumentException e) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  stopMediaUploadService();
  mAutoSaveTimer.cancel();
}","@Override protected void onPause(){
  super.onPause();
  try {
    unregisterReceiver(mGalleryReceiver);
  }
 catch (  IllegalArgumentException e) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  stopMediaUploadService();
  mHandler.removeCallbacks(mAutoSave);
  mHandler=null;
}",0.8926553672316384
14147,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.new_edit_post_activity);
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action) || NEW_MEDIA_GALLERY.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)|| (extras != null && extras.getInt(""String_Node_Str"",-1) > -1)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int blogId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        Blog quickPressBlog=WordPress.wpDB.instantiateBlogByLocalId(blogId);
        if (quickPressBlog == null) {
          showErrorAndFinish(R.string.blog_not_found);
          return;
        }
        if (quickPressBlog.isHidden()) {
          showErrorAndFinish(R.string.error_blog_hidden);
          return;
        }
        WordPress.currentBlog=quickPressBlog;
      }
      mPost=new Post(WordPress.getCurrentLocalTableBlogId(),false);
      mPost.setCategories(""String_Node_Str"" + SiteSettingsInterface.getDefaultCategory(this) + ""String_Node_Str"");
      mPost.setPostFormat(SiteSettingsInterface.getDefaultFormat(this));
      WordPress.wpDB.savePost(mPost);
      mIsNewPost=true;
    }
 else     if (extras != null) {
      long localTablePostId=extras.getLong(EXTRA_POSTID,-1);
      mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      mIsNewPost=extras.getBoolean(EXTRA_IS_NEW_POST);
      mPost=WordPress.wpDB.getPostForLocalTablePostId(localTablePostId);
      mOriginalPost=WordPress.wpDB.getPostForLocalTablePostId(localTablePostId);
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(Post)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(Post)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(WordPress.imageLoader);
  }
  if (WordPress.getCurrentBlog() == null) {
    showErrorAndFinish(R.string.blog_not_found);
    return;
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        savePost(true);
        if (mEditPostPreviewFragment != null) {
          mEditPostPreviewFragment.loadPost();
        }
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.new_edit_post_activity);
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action) || NEW_MEDIA_GALLERY.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)|| (extras != null && extras.getInt(""String_Node_Str"",-1) > -1)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int blogId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        Blog quickPressBlog=WordPress.wpDB.instantiateBlogByLocalId(blogId);
        if (quickPressBlog == null) {
          showErrorAndFinish(R.string.blog_not_found);
          return;
        }
        if (quickPressBlog.isHidden()) {
          showErrorAndFinish(R.string.error_blog_hidden);
          return;
        }
        WordPress.currentBlog=quickPressBlog;
      }
      mPost=new Post(WordPress.getCurrentLocalTableBlogId(),false);
      mPost.setCategories(""String_Node_Str"" + SiteSettingsInterface.getDefaultCategory(this) + ""String_Node_Str"");
      mPost.setPostFormat(SiteSettingsInterface.getDefaultFormat(this));
      WordPress.wpDB.savePost(mPost);
      mIsNewPost=true;
    }
 else     if (extras != null) {
      long localTablePostId=extras.getLong(EXTRA_POSTID,-1);
      mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      mIsNewPost=extras.getBoolean(EXTRA_IS_NEW_POST);
      mPost=WordPress.wpDB.getPostForLocalTablePostId(localTablePostId);
      mOriginalPost=WordPress.wpDB.getPostForLocalTablePostId(localTablePostId);
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(Post)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(Post)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(WordPress.imageLoader);
  }
  if (WordPress.getCurrentBlog() == null) {
    showErrorAndFinish(R.string.blog_not_found);
    return;
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        savePostAsync();
        if (mEditPostPreviewFragment != null) {
          mEditPostPreviewFragment.loadPost();
        }
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}",0.9986924997028408
14148,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  savePost(true);
  outState.putSerializable(STATE_KEY_CURRENT_POST,mPost);
  outState.putSerializable(STATE_KEY_ORIGINAL_POST,mOriginalPost);
  if (mEditorFragment != null) {
    getFragmentManager().putFragment(outState,STATE_KEY_EDITOR_FRAGMENT,mEditorFragment);
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  savePostAsync();
  outState.putSerializable(STATE_KEY_CURRENT_POST,mPost);
  outState.putSerializable(STATE_KEY_ORIGINAL_POST,mOriginalPost);
  if (mEditorFragment != null) {
    getFragmentManager().putFragment(outState,STATE_KEY_EDITOR_FRAGMENT,mEditorFragment);
  }
}",0.9852744310575636
14149,"private void savePostToDb(){
  WordPress.wpDB.updatePost(mPost);
}","private synchronized void savePostToDb(){
  WordPress.wpDB.updatePost(mPost);
}",0.9103448275862068
14150,"private void actionMode(Bundle extras){
  int actionMode=SIGN_IN_REQUEST;
  if (extras != null) {
    actionMode=extras.getInt(EXTRA_START_FRAGMENT,-1);
    if (extras.containsKey(EXTRA_JETPACK_SITE_AUTH)) {
      Blog jetpackBlog=WordPress.getBlog(extras.getInt(EXTRA_JETPACK_SITE_AUTH));
      if (jetpackBlog != null) {
        String customMessage=extras.getString(EXTRA_JETPACK_MESSAGE_AUTH,null);
        mSignInFragment.setBlogAndCustomMessageForJetpackAuth(jetpackBlog,customMessage);
      }
    }
 else     if (extras.containsKey(EXTRA_IS_AUTH_ERROR)) {
      mSignInFragment.showAuthErrorMessage();
    }
  }
switch (actionMode) {
case ADD_SELF_HOSTED_BLOG:
    mSignInFragment.forceSelfHostedMode();
  break;
default :
break;
}
mSignInFragment.smartLockAutoFill();
}","private void actionMode(Bundle extras){
  int actionMode=SIGN_IN_REQUEST;
  if (extras != null) {
    actionMode=extras.getInt(EXTRA_START_FRAGMENT,-1);
    if (extras.containsKey(EXTRA_JETPACK_SITE_AUTH)) {
      Blog jetpackBlog=WordPress.getBlog(extras.getInt(EXTRA_JETPACK_SITE_AUTH));
      if (jetpackBlog != null) {
        String customMessage=extras.getString(EXTRA_JETPACK_MESSAGE_AUTH,null);
        mSignInFragment.setBlogAndCustomMessageForJetpackAuth(jetpackBlog,customMessage);
      }
    }
 else     if (extras.containsKey(EXTRA_IS_AUTH_ERROR)) {
      mSignInFragment.showAuthErrorMessage();
    }
  }
switch (actionMode) {
case ADD_SELF_HOSTED_BLOG:
    mSignInFragment.forceSelfHostedMode();
  break;
default :
break;
}
}",0.9756418696510862
14151,"public void onCredentialRetrieved(Credential credential){
  AppLog.d(T.NUX,""String_Node_Str"" + credential.getId());
  AnalyticsTracker.track(Stat.LOGIN_AUTOFILL_CREDENTIALS_FILLED);
  mUsernameEditText.setText(credential.getId());
  mPasswordEditText.setText(credential.getPassword());
}","public void onCredentialRetrieved(Credential credential){
  AppLog.d(T.NUX,""String_Node_Str"" + credential.getId());
  if (EditTextUtils.getText(mUsernameEditText).isEmpty() && EditTextUtils.getText(mPasswordEditText).isEmpty()) {
    AnalyticsTracker.track(Stat.LOGIN_AUTOFILL_CREDENTIALS_FILLED);
    mUsernameEditText.setText(credential.getId());
    mPasswordEditText.setText(credential.getPassword());
  }
}",0.8223495702005731
14152,"@Override public void onResponse(JSONObject jsonObject){
  setPrimaryBlog(jsonObject);
  finishCurrentActivity(userBlogList);
}","@Override public void onResponse(JSONObject jsonObject){
  setPrimaryBlog(jsonObject);
  finishCurrentActivity(userBlogList);
  String displayName=JSONUtils.getStringDecoded(jsonObject,""String_Node_Str"");
  Uri profilePicture=Uri.parse(JSONUtils.getString(jsonObject,""String_Node_Str""));
  saveCrendentialsInSmartLock(mUsername,mPassword,displayName,profilePicture);
}",0.5131313131313131
14153,"private void signInAndFetchBlogListWPCom(){
  LoginWPCom login=new LoginWPCom(mUsername,mPassword,mTwoStepCode,mShouldSendTwoStepSMS,mJetpackBlog);
  login.execute(new LoginAbstract.Callback(){
    @Override public void onSuccess(){
      mShouldSendTwoStepSMS=false;
      saveCrendentialsInSmartLock();
      if (isJetpackAuth() && getActivity() != null) {
        getActivity().setResult(Activity.RESULT_OK);
        getActivity().finish();
        return;
      }
      FetchBlogListWPCom fetchBlogListWPCom=new FetchBlogListWPCom();
      fetchBlogListWPCom.execute(mFetchBlogListCallback);
    }
    @Override public void onError(    int errorMessageId,    boolean twoStepCodeRequired,    boolean httpAuthRequired,    boolean erroneousSslCertificate){
      mFetchBlogListCallback.onError(errorMessageId,twoStepCodeRequired,httpAuthRequired,erroneousSslCertificate,""String_Node_Str"");
      mShouldSendTwoStepSMS=false;
      if (errorMessageId == R.string.username_or_password_incorrect) {
        deleteCredentialsInSmartLock();
      }
    }
  }
);
}","private void signInAndFetchBlogListWPCom(){
  LoginWPCom login=new LoginWPCom(mUsername,mPassword,mTwoStepCode,mShouldSendTwoStepSMS,mJetpackBlog);
  login.execute(new LoginAbstract.Callback(){
    @Override public void onSuccess(){
      mShouldSendTwoStepSMS=false;
      if (isJetpackAuth() && getActivity() != null) {
        getActivity().setResult(Activity.RESULT_OK);
        getActivity().finish();
        return;
      }
      FetchBlogListWPCom fetchBlogListWPCom=new FetchBlogListWPCom();
      fetchBlogListWPCom.execute(mFetchBlogListCallback);
    }
    @Override public void onError(    int errorMessageId,    boolean twoStepCodeRequired,    boolean httpAuthRequired,    boolean erroneousSslCertificate){
      mFetchBlogListCallback.onError(errorMessageId,twoStepCodeRequired,httpAuthRequired,erroneousSslCertificate,""String_Node_Str"");
      mShouldSendTwoStepSMS=false;
      if (errorMessageId == R.string.username_or_password_incorrect) {
        deleteCredentialsInSmartLock();
      }
    }
  }
);
}",0.9822200864968764
14154,"private void saveCrendentialsInSmartLock(){
  if (!isGooglePlayServicesAvailable() || mCredentialsClient == null) {
    return;
  }
  Credential credential=new Credential.Builder(mUsername).setPassword(mPassword).build();
  Auth.CredentialsApi.save(mCredentialsClient,credential).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    Status status){
      if (!status.isSuccess() && status.hasResolution()) {
        try {
          status.startResolutionForResult(getActivity(),SignInActivity.SMART_LOCK_SAVE);
        }
 catch (        IntentSender.SendIntentException e) {
        }
      }
    }
  }
);
}","private void saveCrendentialsInSmartLock(String username,String password,String displayName,Uri profilePicture){
  if (!isGooglePlayServicesAvailable() || mCredentialsClient == null || !mCredentialsClient.isConnected()) {
    return;
  }
  Credential credential=new Credential.Builder(username).setPassword(password).setName(displayName).setProfilePictureUri(profilePicture).build();
  Auth.CredentialsApi.save(mCredentialsClient,credential).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    Status status){
      if (!status.isSuccess() && status.hasResolution()) {
        try {
          status.startResolutionForResult(getActivity(),SignInActivity.SMART_LOCK_SAVE);
        }
 catch (        IntentSender.SendIntentException e) {
        }
      }
    }
  }
);
}",0.8476454293628809
14155,"@Override public void onConnected(Bundle bundle){
  AppLog.d(T.NUX,""String_Node_Str"");
}","@Override public void onConnected(Bundle bundle){
  AppLog.d(T.NUX,""String_Node_Str"");
  smartLockAutoFill();
}",0.8844221105527639
14156,"private void deleteCredentialsInSmartLock(){
  if (!isGooglePlayServicesAvailable() || mCredentialsClient == null) {
    return;
  }
  Credential credential=new Credential.Builder(mUsername).setPassword(mPassword).build();
  Auth.CredentialsApi.delete(mCredentialsClient,credential).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    Status status){
      AppLog.i(T.NUX,status.isSuccess() ? ""String_Node_Str"" + mUsername : ""String_Node_Str"" + mUsername);
    }
  }
);
}","private void deleteCredentialsInSmartLock(){
  if (!isGooglePlayServicesAvailable() || mCredentialsClient == null || !mCredentialsClient.isConnected()) {
    return;
  }
  Credential credential=new Credential.Builder(mUsername).setPassword(mPassword).build();
  Auth.CredentialsApi.delete(mCredentialsClient,credential).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    Status status){
      AppLog.i(T.NUX,status.isSuccess() ? ""String_Node_Str"" + mUsername : ""String_Node_Str"" + mUsername);
    }
  }
);
}",0.9647283126787416
14157,"@Override public void onSuccess(){
  mShouldSendTwoStepSMS=false;
  saveCrendentialsInSmartLock();
  if (isJetpackAuth() && getActivity() != null) {
    getActivity().setResult(Activity.RESULT_OK);
    getActivity().finish();
    return;
  }
  FetchBlogListWPCom fetchBlogListWPCom=new FetchBlogListWPCom();
  fetchBlogListWPCom.execute(mFetchBlogListCallback);
}","@Override public void onSuccess(){
  mShouldSendTwoStepSMS=false;
  if (isJetpackAuth() && getActivity() != null) {
    getActivity().setResult(Activity.RESULT_OK);
    getActivity().finish();
    return;
  }
  FetchBlogListWPCom fetchBlogListWPCom=new FetchBlogListWPCom();
  fetchBlogListWPCom.execute(mFetchBlogListCallback);
}",0.9523809523809524
14158,"@Override public void onPersonSelected(Person person){
  FragmentManager fragmentManager=getFragmentManager();
  PersonDetailFragment personDetailFragment=(PersonDetailFragment)fragmentManager.findFragmentByTag(KEY_PERSON_DETAIL_FRAGMENT);
  long personID=person.getPersonID();
  int localTableBlogID=person.getLocalTableBlogId();
  if (personDetailFragment == null) {
    personDetailFragment=PersonDetailFragment.newInstance(personID,localTableBlogID);
  }
 else {
    personDetailFragment.setPersonDetails(personID,localTableBlogID);
  }
  if (!personDetailFragment.isAdded()) {
    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
    fragmentTransaction.setCustomAnimations(R.animator.fragment_slide_in_from_right,R.animator.fragment_slide_out_to_left,R.animator.fragment_slide_in_from_left,R.animator.fragment_slide_out_to_right);
    fragmentTransaction.replace(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT);
    fragmentTransaction.addToBackStack(null);
    fragmentTransaction.commit();
  }
}","@Override public void onPersonSelected(Person person){
  FragmentManager fragmentManager=getFragmentManager();
  PersonDetailFragment personDetailFragment=(PersonDetailFragment)fragmentManager.findFragmentByTag(KEY_PERSON_DETAIL_FRAGMENT);
  long personID=person.getPersonID();
  int localTableBlogID=person.getLocalTableBlogId();
  if (personDetailFragment == null) {
    personDetailFragment=PersonDetailFragment.newInstance(personID,localTableBlogID);
  }
 else {
    personDetailFragment.setPersonDetails(personID,localTableBlogID);
  }
  if (!personDetailFragment.isAdded()) {
    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
    fragmentTransaction.setCustomAnimations(R.animator.fragment_slide_in_from_right,0,0,R.animator.fragment_slide_out_to_right);
    fragmentTransaction.add(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT);
    fragmentTransaction.addToBackStack(null);
    fragmentTransaction.commit();
  }
}",0.956436612824278
14159,"private void refreshUsersList(String dotComBlogId,final int localBlogId){
  PeopleUtils.fetchUsers(dotComBlogId,localBlogId,new PeopleUtils.Callback(){
    @Override public void onSuccess(    List<Person> peopleList){
      PeopleTable.savePeople(peopleList);
      FragmentManager fragmentManager=getFragmentManager();
      PeopleListFragment peopleListFragment=(PeopleListFragment)fragmentManager.findFragmentByTag(KEY_PEOPLE_LIST_FRAGMENT);
      PersonDetailFragment personDetailFragment=(PersonDetailFragment)fragmentManager.findFragmentByTag(KEY_PERSON_DETAIL_FRAGMENT);
      if (peopleListFragment != null) {
        peopleListFragment.refreshPeopleList();
      }
      if (personDetailFragment != null) {
        personDetailFragment.refreshPersonDetails();
      }
    }
    @Override public void onError(    VolleyError error){
    }
    @Override public void onJSONException(    JSONException exception){
    }
  }
);
}","private void refreshUsersList(String dotComBlogId,final int localTableBlogId){
  PeopleUtils.fetchUsers(dotComBlogId,localTableBlogId,new PeopleUtils.Callback(){
    @Override public void onSuccess(    List<Person> peopleList){
      PeopleTable.savePeople(peopleList);
      FragmentManager fragmentManager=getFragmentManager();
      PeopleListFragment peopleListFragment=(PeopleListFragment)fragmentManager.findFragmentByTag(KEY_PEOPLE_LIST_FRAGMENT);
      PersonDetailFragment personDetailFragment=(PersonDetailFragment)fragmentManager.findFragmentByTag(KEY_PERSON_DETAIL_FRAGMENT);
      if (peopleListFragment != null) {
        peopleListFragment.refreshPeopleList();
      }
      if (personDetailFragment != null) {
        personDetailFragment.refreshPersonDetails();
      }
    }
    @Override public void onError(    VolleyError error){
    }
    @Override public void onJSONException(    JSONException exception){
    }
  }
);
}",0.9946695095948828
14160,"public void onDomLoaded(){
  ProfilingUtils.split(""String_Node_Str"");
  mWebView.post(new Runnable(){
    public void run(){
      if (!isAdded()) {
        return;
      }
      mDomHasLoaded=true;
      mWebView.execJavaScriptFromString(""String_Node_Str"");
      mWebView.execJavaScriptFromString(""String_Node_Str"" + mTitlePlaceholder + ""String_Node_Str"");
      mWebView.execJavaScriptFromString(""String_Node_Str"" + mContentPlaceholder + ""String_Node_Str"");
      updateVisualEditorFields();
      mWebView.execJavaScriptFromString(""String_Node_Str"" + getString(R.string.tap_to_try_again) + ""String_Node_Str"");
      mWebView.execJavaScriptFromString(""String_Node_Str"");
      hideActionBarIfNeeded();
      ToggleButton htmlButton=(ToggleButton)getActivity().findViewById(R.id.format_bar_button_html);
      htmlButton.setChecked(false);
      for (      ToggleButton button : mTagToggleButtonMap.values()) {
        button.setChecked(false);
      }
      boolean editorHasFocus=false;
      if (mWaitingMediaFiles.size() > 0) {
        mWebView.execJavaScriptFromString(""String_Node_Str"");
        editorHasFocus=true;
        for (        Map.Entry<String,MediaFile> entry : mWaitingMediaFiles.entrySet()) {
          appendMediaFile(entry.getValue(),entry.getKey(),null);
        }
        mWaitingMediaFiles.clear();
      }
      if (mWaitingGalleries.size() > 0) {
        mWebView.execJavaScriptFromString(""String_Node_Str"");
        editorHasFocus=true;
        for (        MediaGallery mediaGallery : mWaitingGalleries) {
          appendGallery(mediaGallery);
        }
        mWaitingGalleries.clear();
      }
      if (!editorHasFocus) {
        mWebView.execJavaScriptFromString(""String_Node_Str"");
      }
      ((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(mWebView,InputMethodManager.SHOW_IMPLICIT);
      ProfilingUtils.split(""String_Node_Str"");
      ProfilingUtils.dump();
      ProfilingUtils.stop();
    }
  }
);
}","public void onDomLoaded(){
  ProfilingUtils.split(""String_Node_Str"");
  mWebView.post(new Runnable(){
    public void run(){
      if (!isAdded()) {
        return;
      }
      mDomHasLoaded=true;
      mWebView.execJavaScriptFromString(""String_Node_Str"");
      mWebView.execJavaScriptFromString(""String_Node_Str"" + Utils.escapeQuotes(mTitlePlaceholder) + ""String_Node_Str"");
      mWebView.execJavaScriptFromString(""String_Node_Str"" + Utils.escapeQuotes(mContentPlaceholder) + ""String_Node_Str"");
      updateVisualEditorFields();
      mWebView.execJavaScriptFromString(""String_Node_Str"" + Utils.escapeQuotes(getString(R.string.tap_to_try_again)) + ""String_Node_Str"");
      mWebView.execJavaScriptFromString(""String_Node_Str"");
      hideActionBarIfNeeded();
      ToggleButton htmlButton=(ToggleButton)getActivity().findViewById(R.id.format_bar_button_html);
      htmlButton.setChecked(false);
      for (      ToggleButton button : mTagToggleButtonMap.values()) {
        button.setChecked(false);
      }
      boolean editorHasFocus=false;
      if (mWaitingMediaFiles.size() > 0) {
        mWebView.execJavaScriptFromString(""String_Node_Str"");
        editorHasFocus=true;
        for (        Map.Entry<String,MediaFile> entry : mWaitingMediaFiles.entrySet()) {
          appendMediaFile(entry.getValue(),entry.getKey(),null);
        }
        mWaitingMediaFiles.clear();
      }
      if (mWaitingGalleries.size() > 0) {
        mWebView.execJavaScriptFromString(""String_Node_Str"");
        editorHasFocus=true;
        for (        MediaGallery mediaGallery : mWaitingGalleries) {
          appendGallery(mediaGallery);
        }
        mWaitingGalleries.clear();
      }
      if (!editorHasFocus) {
        mWebView.execJavaScriptFromString(""String_Node_Str"");
      }
      ((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(mWebView,InputMethodManager.SHOW_IMPLICIT);
      ProfilingUtils.split(""String_Node_Str"");
      ProfilingUtils.dump();
      ProfilingUtils.stop();
    }
  }
);
}",0.9851778656126482
14161,"private String formatPostContentForWebView(Context context,Post post){
  if (context == null || post == null) {
    return null;
  }
  String title=(TextUtils.isEmpty(post.getTitle()) ? ""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"" : StringUtils.unescapeHTML(post.getTitle()));
  String postContent=PostUtils.collapseShortcodes(post.getDescription());
  if (!TextUtils.isEmpty(post.getMoreText())) {
    postContent+=""String_Node_Str"" + post.getMoreText();
  }
  if (post.isLocalDraft()) {
    postContent=postContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  String textColorStr=HtmlUtils.colorResToHtmlColor(context,R.color.grey_dark);
  String linkColorStr=HtmlUtils.colorResToHtmlColor(context,R.color.reader_hyperlink);
  int contentMargin=getResources().getDimensionPixelSize(R.dimen.content_margin);
  String marginStr=Integer.toString(contentMargin) + ""String_Node_Str"";
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + marginStr + ""String_Node_Str""+ marginStr+ ""String_Node_Str""+ ""String_Node_Str""+ textColorStr+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ linkColorStr+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ title+ ""String_Node_Str""+ StringUtils.addPTags(postContent)+ ""String_Node_Str"";
}","private String formatPostContentForWebView(Context context,Post post){
  if (context == null || post == null) {
    return null;
  }
  String title=(TextUtils.isEmpty(post.getTitle()) ? ""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"" : StringUtils.unescapeHTML(post.getTitle()));
  String postContent=PostUtils.collapseShortcodes(post.getDescription());
  if (!TextUtils.isEmpty(post.getMoreText())) {
    postContent+=""String_Node_Str"" + post.getMoreText();
  }
  if (post.isLocalDraft()) {
    postContent=postContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + title + ""String_Node_Str""+ StringUtils.addPTags(postContent)+ ""String_Node_Str"";
}",0.6355710549258936
14162,"void refreshPreview(){
  if (!isAdded())   return;
  new Thread(){
    @Override public void run(){
      Post post=WordPress.wpDB.getPostForLocalTablePostId(mLocalPostId);
      final String htmlContent=formatPostContentForWebView(getActivity(),post);
      getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (!isAdded())           return;
          if (htmlContent != null) {
            mWebView.loadDataWithBaseURL(null,htmlContent,""String_Node_Str"",""String_Node_Str"",null);
          }
 else {
            ToastUtils.showToast(getActivity(),R.string.post_not_found);
          }
        }
      }
);
    }
  }
.start();
}","void refreshPreview(){
  if (!isAdded())   return;
  new Thread(){
    @Override public void run(){
      Post post=WordPress.wpDB.getPostForLocalTablePostId(mLocalPostId);
      final String htmlContent=formatPostContentForWebView(getActivity(),post);
      getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          if (!isAdded())           return;
          if (htmlContent != null) {
            mWebView.loadDataWithBaseURL(""String_Node_Str"",htmlContent,""String_Node_Str"",""String_Node_Str"",null);
          }
 else {
            ToastUtils.showToast(getActivity(),R.string.post_not_found);
          }
        }
      }
);
    }
  }
.start();
}",0.9844559585492229
14163,"@Override public void run(){
  if (!isAdded())   return;
  if (htmlContent != null) {
    mWebView.loadDataWithBaseURL(null,htmlContent,""String_Node_Str"",""String_Node_Str"",null);
  }
 else {
    ToastUtils.showToast(getActivity(),R.string.post_not_found);
  }
}","@Override public void run(){
  if (!isAdded())   return;
  if (htmlContent != null) {
    mWebView.loadDataWithBaseURL(""String_Node_Str"",htmlContent,""String_Node_Str"",""String_Node_Str"",null);
  }
 else {
    ToastUtils.showToast(getActivity(),R.string.post_not_found);
  }
}",0.9607476635514018
14164,"public static void fetchUsers(final String siteID,final PeopleUtils.Callback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null) {
        try {
          JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
          List<Person> people=peopleListFromJSON(jsonArray,siteID);
          PeopleTable.savePeople(people);
          if (callback != null) {
            callback.onSuccess();
          }
        }
 catch (        JSONException e) {
          AppLog.e(T.API,e);
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError(volleyError);
      }
    }
  }
;
  String path=String.format(""String_Node_Str"",siteID);
  WordPress.getRestClientUtilsV1_1().get(path,listener,errorListener);
}","public static void fetchUsers(final String siteID,final PeopleUtils.Callback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null) {
        try {
          JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
          List<Person> people=peopleListFromJSON(jsonArray,siteID);
          PeopleTable.savePeople(people);
          if (callback != null) {
            callback.onSuccess();
          }
        }
 catch (        JSONException e) {
          AppLog.e(T.API,""String_Node_Str"" + e);
        }
      }
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.API,volleyError);
      if (callback != null) {
        callback.onError(volleyError);
      }
    }
  }
;
  String path=String.format(""String_Node_Str"",siteID);
  WordPress.getRestClientUtilsV1_1().get(path,listener,errorListener);
}",0.9905123339658444
14165,"@Override public void onResponse(JSONObject jsonObject){
  if (jsonObject != null) {
    try {
      JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
      List<Person> people=peopleListFromJSON(jsonArray,siteID);
      PeopleTable.savePeople(people);
      if (callback != null) {
        callback.onSuccess();
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.API,e);
    }
  }
}","@Override public void onResponse(JSONObject jsonObject){
  if (jsonObject != null) {
    try {
      JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
      List<Person> people=peopleListFromJSON(jsonArray,siteID);
      PeopleTable.savePeople(people);
      if (callback != null) {
        callback.onSuccess();
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.API,""String_Node_Str"" + e);
    }
  }
}",0.9760765550239234
14166,"private void handleBlogRemoved(){
  if (!AccountHelper.isSignedIn()) {
    ActivityLauncher.showSignInForResult(this);
  }
 else {
    Blog blog=WordPress.getCurrentBlog();
    MySiteFragment mySiteFragment=getMySiteFragment();
    if (mySiteFragment != null) {
      mySiteFragment.setBlog(blog);
    }
    if (blog != null) {
      int blogId=blog.getLocalTableBlogId();
      ActivityLauncher.showSitePickerForResult(this,blogId);
    }
  }
}","private void handleBlogRemoved(){
  if (!AccountHelper.isSignedIn()) {
    ActivityLauncher.showSignInForResult(this,true);
  }
 else {
    Blog blog=WordPress.getCurrentBlog();
    MySiteFragment mySiteFragment=getMySiteFragment();
    if (mySiteFragment != null) {
      mySiteFragment.setBlog(blog);
    }
    if (blog != null) {
      int blogId=blog.getLocalTableBlogId();
      ActivityLauncher.showSitePickerForResult(this,blogId);
    }
  }
}",0.994413407821229
14167,"@Override protected List<Map<String,Object>> doInBackground(Void... notUsed){
  if (TextUtils.isEmpty(mSelfHostedUrl)) {
    mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
    trackInvalidInsertedURL(mSelfHostedUrl);
    return null;
  }
  String baseURL=UrlUtils.convertUrlToPunycodeIfNeeded(mSelfHostedUrl);
  baseURL=UrlUtils.addUrlSchemeIfNeeded(baseURL,false);
  if (!URLUtil.isValidUrl(baseURL)) {
    mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
    trackInvalidInsertedURL(baseURL);
    return null;
  }
  String xmlrpcUrl=getSelfHostedXmlrpcUrl(baseURL);
  if (xmlrpcUrl == null) {
    if (mErroneousSslCertificate || mHttpAuthRequired || mErrorMsgId == org.wordpress.android.R.string.xmlrpc_missing_method_error) {
      return null;
    }
    if (mErrorMsgId == 0) {
      mErrorMsgId=org.wordpress.android.R.string.no_site_error;
    }
    return null;
  }
  if (!URLUtil.isValidUrl(xmlrpcUrl)) {
    mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
    trackInvalidInsertedURL(xmlrpcUrl);
    return null;
  }
  URI xmlrpcUri;
  xmlrpcUri=URI.create(xmlrpcUrl);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(xmlrpcUri,mHttpUsername,mHttpPassword);
  Object[] params={mUsername,mPassword};
  try {
    Object[] userBlogs=(Object[])client.call(Method.GET_BLOGS,params);
    if (userBlogs == null) {
      mErrorMsgId=org.wordpress.android.R.string.xmlrpc_malformed_response_error;
      mClientResponse=client.getResponse();
      return null;
    }
    Arrays.sort(userBlogs,BlogUtils.BlogNameComparator);
    List<Map<String,Object>> userBlogList=new ArrayList<Map<String,Object>>();
    for (    Object blog : userBlogs) {
      try {
        userBlogList.add((Map<String,Object>)blog);
      }
 catch (      ClassCastException e) {
        AppLog.e(T.NUX,""String_Node_Str"");
      }
    }
    return userBlogList;
  }
 catch (  XmlPullParserException parserException) {
    mErrorMsgId=org.wordpress.android.R.string.xmlrpc_error;
    AppLog.e(T.NUX,""String_Node_Str"",parserException);
  }
catch (  XMLRPCFault xmlRpcFault) {
    handleXmlRpcFault(xmlRpcFault);
  }
catch (  XMLRPCException xmlRpcException) {
    AppLog.e(T.NUX,""String_Node_Str"",xmlRpcException);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
catch (  SSLHandshakeException e) {
    if (WPUrlUtils.isWordPressCom(xmlrpcUri)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
    mErrorMsgId=org.wordpress.android.R.string.site_timeout_error;
  }
catch (  IOException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
  mClientResponse=client.getResponse();
  return null;
}","@Override protected List<Map<String,Object>> doInBackground(Void... notUsed){
  if (TextUtils.isEmpty(mSelfHostedUrl)) {
    mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
    trackInvalidInsertedURL(mSelfHostedUrl);
    return null;
  }
  String baseURL=UrlUtils.convertUrlToPunycodeIfNeeded(mSelfHostedUrl);
  baseURL=UrlUtils.addUrlSchemeIfNeeded(baseURL,false);
  if (!URLUtil.isValidUrl(baseURL)) {
    mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
    trackInvalidInsertedURL(baseURL);
    return null;
  }
  String xmlrpcUrl=getSelfHostedXmlrpcUrl(baseURL);
  if (xmlrpcUrl == null) {
    if (mErroneousSslCertificate || mHttpAuthRequired || mErrorMsgId == org.wordpress.android.R.string.xmlrpc_missing_method_error) {
      return null;
    }
    if (mErrorMsgId == 0) {
      mErrorMsgId=org.wordpress.android.R.string.no_site_error;
    }
    return null;
  }
  if (!URLUtil.isValidUrl(xmlrpcUrl)) {
    mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
    trackInvalidInsertedURL(xmlrpcUrl);
    return null;
  }
  URI xmlrpcUri;
  xmlrpcUri=URI.create(xmlrpcUrl);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(xmlrpcUri,mHttpUsername,mHttpPassword);
  Object[] params={mUsername,mPassword};
  try {
    Object[] userBlogs=(Object[])client.call(Method.GET_BLOGS,params);
    if (userBlogs == null) {
      mErrorMsgId=org.wordpress.android.R.string.xmlrpc_malformed_response_error;
      mClientResponse=client.getResponse();
      return null;
    }
    Arrays.sort(userBlogs,BlogUtils.BlogNameComparator);
    List<Map<String,Object>> userBlogList=new ArrayList<Map<String,Object>>();
    for (    Object blog : userBlogs) {
      try {
        userBlogList.add((Map<String,Object>)blog);
      }
 catch (      ClassCastException e) {
        AppLog.e(T.NUX,""String_Node_Str"");
      }
    }
    return userBlogList;
  }
 catch (  XmlPullParserException parserException) {
    mErrorMsgId=org.wordpress.android.R.string.xmlrpc_error;
    AppLog.e(T.NUX,""String_Node_Str"",parserException);
  }
catch (  XMLRPCFault xmlRpcFault) {
    handleXmlRpcFault(xmlRpcFault);
  }
catch (  XMLRPCException xmlRpcException) {
    AppLog.e(T.NUX,""String_Node_Str"",xmlRpcException);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
catch (  SSLHandshakeException e) {
    if (!WPUrlUtils.isWordPressCom(xmlrpcUri)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
  }
catch (  ConnectTimeoutException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
    mErrorMsgId=org.wordpress.android.R.string.site_timeout_error;
  }
catch (  IOException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
  mClientResponse=client.getResponse();
  return null;
}",0.9998234774933804
14168,"/** 
 * retrieve a single person
 * @param personId - unique id in people table
 * @return Person if found, null otherwise
 */
private static Person getPerson(long personId){
  String[] args={Long.toString(personId)};
  Cursor c=getReadableDb().rawQuery(""String_Node_Str"" + PEOPLE_TABLE + ""String_Node_Str"",args);
  try {
    if (!c.moveToFirst()) {
      return null;
    }
    String username=c.getString(c.getColumnIndex(""String_Node_Str""));
    String firstName=c.getString(c.getColumnIndex(""String_Node_Str""));
    String lastName=c.getString(c.getColumnIndex(""String_Node_Str""));
    String displayName=c.getString(c.getColumnIndex(""String_Node_Str""));
    String avatarUrl=c.getString(c.getColumnIndex(""String_Node_Str""));
    return new Person(personId,username,firstName,lastName,displayName,avatarUrl,null);
  }
  finally {
    SqlUtils.closeCursor(c);
  }
}","/** 
 * retrieve a single person
 * @param personId - unique id in people table
 * @return Person if found, null otherwise
 */
public static Person getPerson(long personId){
  String[] args={Long.toString(personId)};
  Cursor c=getReadableDb().rawQuery(""String_Node_Str"" + PEOPLE_TABLE + ""String_Node_Str"",args);
  try {
    if (!c.moveToFirst()) {
      return null;
    }
    String username=c.getString(c.getColumnIndex(""String_Node_Str""));
    String firstName=c.getString(c.getColumnIndex(""String_Node_Str""));
    String lastName=c.getString(c.getColumnIndex(""String_Node_Str""));
    String displayName=c.getString(c.getColumnIndex(""String_Node_Str""));
    String avatarUrl=c.getString(c.getColumnIndex(""String_Node_Str""));
    return new Person(personId,username,firstName,lastName,displayName,avatarUrl,null);
  }
  finally {
    SqlUtils.closeCursor(c);
  }
}",0.9936599423631124
14169,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final PeopleViewHolder holder;
  if (convertView == null || convertView.getTag() == null) {
    convertView=mInflater.inflate(R.layout.people_list_row,parent,false);
    holder=new PeopleViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(PeopleViewHolder)convertView.getTag();
  }
  Person person=getItem(position);
  if (person != null) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),mAvatarSz);
    holder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    holder.txtDisplayName.setText(person.getDisplayName());
    holder.txtUsername.setText(person.getUsername());
    holder.txtRole.setText(Role.toString(mContext,person.getRole()));
    holder.txtRole.setBackgroundColor(Role.backgroundColor(mContext,person.getRole()));
  }
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final PeopleViewHolder holder;
  if (convertView == null || convertView.getTag() == null) {
    convertView=mInflater.inflate(R.layout.people_list_row,parent,false);
    holder=new PeopleViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(PeopleViewHolder)convertView.getTag();
  }
  Person person=getItem(position);
  if (person != null) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),mAvatarSz);
    holder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    holder.txtDisplayName.setText(person.getDisplayName());
    holder.txtUsername.setText(person.getUsername());
    holder.txtRole.setText(Role.getLabel(mContext,person.getRole()));
    holder.txtRole.setBackgroundColor(Role.backgroundColor(mContext,person.getRole()));
  }
  return convertView;
}",0.9912568306010928
14170,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPersonId=getIntent().getExtras().getInt(EXTRA_PERSON_ID);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  setContentView(R.layout.person_activity);
  setTitle(R.string.edit_user);
  refreshUserDetails();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPersonId=getIntent().getExtras().getLong(EXTRA_PERSON_ID);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  setContentView(R.layout.person_activity);
  setTitle(R.string.edit_user);
  refreshUserDetails();
}",0.991812865497076
14171,"private void refreshUserDetails(){
  WPNetworkImageView imgAvatar=(WPNetworkImageView)findViewById(R.id.person_avatar);
  TextView txtDisplayName=(TextView)findViewById(R.id.person_display_name);
  TextView txtUsername=(TextView)findViewById(R.id.person_username);
  TextView txtRole=(TextView)findViewById(R.id.person_role);
  TextView txtRemove=(TextView)findViewById(R.id.person_remove);
  Person person=PeopleTable.getPerson(mPersonId);
  if (person != null) {
    int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_large);
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),avatarSz);
    imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    txtDisplayName.setText(person.getDisplayName());
    txtUsername.setText(person.getUsername());
    txtRole.setText(Role.toString(this,person.getRole()));
    txtRemove.setText(String.format(getString(R.string.remove_user),person.getFirstName().toUpperCase()));
    txtRemove.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
}","private void refreshUserDetails(){
  WPNetworkImageView imgAvatar=(WPNetworkImageView)findViewById(R.id.person_avatar);
  TextView txtDisplayName=(TextView)findViewById(R.id.person_display_name);
  TextView txtUsername=(TextView)findViewById(R.id.person_username);
  TextView txtRole=(TextView)findViewById(R.id.person_role);
  TextView txtRemove=(TextView)findViewById(R.id.person_remove);
  Person person=PeopleTable.getPerson(mPersonId);
  if (person != null) {
    int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_large);
    String avatarUrl=GravatarUtils.fixGravatarUrl(person.getAvatarUrl(),avatarSz);
    imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
    txtDisplayName.setText(person.getDisplayName());
    txtUsername.setText(person.getUsername());
    txtRole.setText(Role.getLabel(this,person.getRole()));
    txtRemove.setText(String.format(getString(R.string.remove_user),person.getFirstName().toUpperCase()));
    txtRemove.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
}",0.9927404718693283
14172,"public static void setFloat(ExtraKey key,float value){
  Crashlytics.setFloat(key.name(),value);
}","public static void setFloat(ExtraKey key,float value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setFloat(key.name(),value);
}",0.8
14173,"public static void setString(ExtraKey key,String value){
  Crashlytics.setString(key.name(),value);
}","public static void setString(ExtraKey key,String value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setString(key.name(),value);
}",0.8047808764940239
14174,"public static void setBool(ExtraKey key,boolean value){
  Crashlytics.setBool(key.name(),value);
}","public static void setBool(ExtraKey key,boolean value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setBool(key.name(),value);
}",0.8
14175,"public static void setInt(ExtraKey key,int value){
  Crashlytics.setInt(key.name(),value);
}","public static void setInt(ExtraKey key,int value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setInt(key.name(),value);
}",0.7896995708154506
14176,"public static void setFloat(ExtraKey key,float value){
  Crashlytics.setFloat(key.name(),value);
}","public static void setFloat(ExtraKey key,float value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setFloat(key.name(),value);
}",0.8
14177,"public static void setString(ExtraKey key,String value){
  Crashlytics.setString(key.name(),value);
}","public static void setString(ExtraKey key,String value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setString(key.name(),value);
}",0.8047808764940239
14178,"public static void setBool(ExtraKey key,boolean value){
  Crashlytics.setBool(key.name(),value);
}","public static void setBool(ExtraKey key,boolean value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setBool(key.name(),value);
}",0.8
14179,"public static void setInt(ExtraKey key,int value){
  Crashlytics.setInt(key.name(),value);
}","public static void setInt(ExtraKey key,int value){
  if (!Fabric.isInitialized()) {
    return;
  }
  Crashlytics.setInt(key.name(),value);
}",0.7896995708154506
14180,"public void onEventMainThread(PrefsEvents.AccountSettingsPostError event){
  if (isAdded()) {
    ToastUtils.showToast(getActivity(),R.string.error_post_account_settings,ToastUtils.Duration.LONG);
  }
}","public void onEventMainThread(PrefsEvents.AccountSettingsPostError event){
  if (isAdded()) {
    ToastUtils.showToast(getActivity(),R.string.error_post_account_settings,ToastUtils.Duration.LONG);
    checkIfEmailChangeIsPending();
  }
}",0.9202733485193622
14181,"private void checkIfEmailChangeIsPending(){
  final Account account=AccountHelper.getDefaultAccount();
  if (account.getPendingEmailChange()) {
    showPendingEmailChangeSnackbar(account.getNewEmail());
  }
  mEmailPreference.setEnabled(!account.getPendingEmailChange());
}","private void checkIfEmailChangeIsPending(){
  final Account account=AccountHelper.getDefaultAccount();
  if (account.getPendingEmailChange()) {
    showPendingEmailChangeSnackbar(account.getNewEmail());
  }
 else   if (mEmailSnackbar != null && mEmailSnackbar.isShown()) {
    mEmailSnackbar.dismiss();
  }
  mEmailPreference.setEnabled(!account.getPendingEmailChange());
}",0.7554179566563467
14182,"private void sortLanguages(){
  if (mLanguagePref == null)   return;
  Pair<String[],String[]> pair=WPPrefUtils.createSortedLanguageDisplayStrings(mLanguagePref.getEntryValues(),WPPrefUtils.languageLocale(null));
  String[] sortedEntries=pair.first;
  String[] sortedValues=pair.second;
  mLanguagePref.setEntries(sortedEntries);
  mLanguagePref.setEntryValues(sortedValues);
  mLanguagePref.setDetails(WPPrefUtils.createLanguageDetailDisplayStrings(sortedValues));
}","private void sortLanguages(){
  if (mLanguagePref == null)   return;
  Pair<String[],String[]> pair=WPPrefUtils.createSortedLanguageDisplayStrings(mLanguagePref.getEntryValues(),WPPrefUtils.languageLocale(null));
  if (pair != null) {
    String[] sortedEntries=pair.first;
    String[] sortedValues=pair.second;
    mLanguagePref.setEntries(sortedEntries);
    mLanguagePref.setEntryValues(sortedValues);
    mLanguagePref.setDetails(WPPrefUtils.createLanguageDetailDisplayStrings(sortedValues));
  }
}",0.9628865979381444
14183,"/** 
 * Generates display strings for given language codes. Used as entries in language preference.
 */
public static Pair<String[],String[]> createSortedLanguageDisplayStrings(CharSequence[] languageCodes,Locale locale){
  if (languageCodes == null || languageCodes.length < 1)   return null;
  String[] entryStrings=new String[languageCodes.length];
  for (int i=0; i < languageCodes.length; ++i) {
    entryStrings[i]=StringUtils.capitalize(getLanguageString(languageCodes[i].toString(),locale)) + ""String_Node_Str"" + languageCodes[i];
  }
  Arrays.sort(entryStrings);
  String[] sortedEntries=new String[languageCodes.length];
  String[] sortedValues=new String[languageCodes.length];
  for (int i=0; i < entryStrings.length; ++i) {
    String[] split=entryStrings[i].split(""String_Node_Str"");
    sortedEntries[i]=split[0];
    sortedValues[i]=split[1];
  }
  return new Pair<>(sortedEntries,sortedValues);
}","/** 
 * Generates display strings for given language codes. Used as entries in language preference.
 */
@Nullable public static Pair<String[],String[]> createSortedLanguageDisplayStrings(CharSequence[] languageCodes,Locale locale){
  if (languageCodes == null || languageCodes.length < 1)   return null;
  ArrayList<String> entryStrings=new ArrayList<>(languageCodes.length);
  for (int i=0; i < languageCodes.length; ++i) {
    entryStrings.add(i,StringUtils.capitalize(getLanguageString(languageCodes[i].toString(),locale)) + ""String_Node_Str"" + languageCodes[i]);
  }
  Collections.sort(entryStrings,Collator.getInstance(locale));
  String[] sortedEntries=new String[languageCodes.length];
  String[] sortedValues=new String[languageCodes.length];
  for (int i=0; i < entryStrings.size(); ++i) {
    String[] split=entryStrings.get(i).split(""String_Node_Str"");
    sortedEntries[i]=split[0];
    sortedValues[i]=split[1];
  }
  return new Pair<>(sortedEntries,sortedValues);
}",0.904862579281184
14184,"/** 
 * Generates detail display strings in the currently selected locale. Used as detail text in language preference dialog.
 */
public static String[] createLanguageDetailDisplayStrings(CharSequence[] languageCodes){
  if (languageCodes == null || languageCodes.length < 1)   return null;
  String[] detailStrings=new String[languageCodes.length];
  for (int i=0; i < languageCodes.length; ++i) {
    detailStrings[i]=StringUtils.capitalize(getLanguageString(languageCodes[i].toString(),WPPrefUtils.languageLocale(languageCodes[i].toString())));
  }
  return detailStrings;
}","/** 
 * Generates detail display strings in the currently selected locale. Used as detail text in language preference dialog.
 */
@Nullable public static String[] createLanguageDetailDisplayStrings(CharSequence[] languageCodes){
  if (languageCodes == null || languageCodes.length < 1)   return null;
  String[] detailStrings=new String[languageCodes.length];
  for (int i=0; i < languageCodes.length; ++i) {
    detailStrings[i]=StringUtils.capitalize(getLanguageString(languageCodes[i].toString(),WPPrefUtils.languageLocale(languageCodes[i].toString())));
  }
  return detailStrings;
}",0.9914089347079038
14185,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Fragment settingsFragment=fragmentManager.findFragmentByTag(KEY_SETTINGS_FRAGMENT);
  Fragment passcodeFragment=fragmentManager.findFragmentByTag(KEY_PASSCODE_FRAGMENT);
  if (settingsFragment == null || passcodeFragment == null) {
    Bundle passcodeArgs=new Bundle();
    passcodeArgs.putBoolean(PasscodePreferenceFragment.KEY_SHOULD_INFLATE,false);
    settingsFragment=new SettingsFragment();
    passcodeFragment=new PasscodePreferenceFragment();
    passcodeFragment.setArguments(passcodeArgs);
    fragmentManager.beginTransaction().replace(android.R.id.content,passcodeFragment,KEY_PASSCODE_FRAGMENT).add(android.R.id.content,settingsFragment,KEY_SETTINGS_FRAGMENT).commit();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  mSettingsFragment=(SettingsFragment)fragmentManager.findFragmentByTag(KEY_SETTINGS_FRAGMENT);
  mPasscodePreferenceFragment=(PasscodePreferenceFragment)fragmentManager.findFragmentByTag(KEY_PASSCODE_FRAGMENT);
  if (mSettingsFragment == null || mPasscodePreferenceFragment == null) {
    Bundle passcodeArgs=new Bundle();
    passcodeArgs.putBoolean(PasscodePreferenceFragment.KEY_SHOULD_INFLATE,false);
    mSettingsFragment=new SettingsFragment();
    mPasscodePreferenceFragment=new PasscodePreferenceFragment();
    mPasscodePreferenceFragment.setArguments(passcodeArgs);
    fragmentManager.beginTransaction().replace(android.R.id.content,mPasscodePreferenceFragment,KEY_PASSCODE_FRAGMENT).add(android.R.id.content,mSettingsFragment,KEY_SETTINGS_FRAGMENT).commit();
  }
}",0.7667458432304038
14186,"private boolean handleLanguagePreferenceClick(){
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
  dialogBuilder.setTitle(getString(R.string.language));
  String[] availableLocales=getResources().getStringArray(R.array.available_languages);
  final String[] values=new String[availableLocales.length + 1];
  final Map<String,String> localeMap=new HashMap<>();
  for (int i=0; i < availableLocales.length; ++i) {
    String localString=availableLocales[i];
    if (localString.contains(""String_Node_Str"")) {
      localString=localString.substring(0,localString.indexOf(""String_Node_Str""));
    }
    Locale locale=new Locale(localString);
    values[i + 1]=locale.getDisplayLanguage() + ""String_Node_Str"" + availableLocales[i]+ ""String_Node_Str"";
    localeMap.put(values[i + 1],availableLocales[i]);
  }
  values[0]=getActivity().getString(R.string.device) + ""String_Node_Str"" + Locale.getDefault().getLanguage()+ ""String_Node_Str"";
  localeMap.put(values[0],Locale.getDefault().getLanguage());
  Arrays.sort(values,1,values.length);
  ArrayAdapter<String> adapter=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,values);
  ListView listView=new ListView(getActivity());
  listView.setAdapter(adapter);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Resources res=getResources();
      DisplayMetrics dm=res.getDisplayMetrics();
      Configuration conf=res.getConfiguration();
      String localString=localeMap.get(values[position]);
      if (localString.contains(""String_Node_Str"")) {
        conf.locale=new Locale(localString.substring(0,localString.indexOf(""String_Node_Str"")),localString.substring(localString.indexOf(""String_Node_Str"") + 1,localString.length()));
      }
 else {
        conf.locale=new Locale(localString);
      }
      res.updateConfiguration(conf,dm);
      mSettings.edit().putString(LANGUAGE_PREF_KEY,localeMap.get(values[position])).apply();
      if (position != 0) {
        Map<String,Object> properties=new HashMap<String,Object>();
        properties.put(""String_Node_Str"",conf.locale.toString());
        AnalyticsTracker.track(Stat.ACCOUNT_SETTINGS_LANGUAGE_SELECTION_FORCED,properties);
      }
      AnalyticsUtils.refreshMetadata();
      Intent refresh=new Intent(getActivity(),getActivity().getClass());
      startActivity(refresh);
      getActivity().setResult(LANGUAGE_CHANGED);
      getActivity().finish();
    }
  }
);
  dialogBuilder.setView(listView);
  dialogBuilder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  mDialog=dialogBuilder.show();
  return true;
}","private boolean handleLanguagePreferenceClick(){
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
  dialogBuilder.setTitle(getString(R.string.language));
  String[] availableLocales=getResources().getStringArray(R.array.available_languages);
  final String[] values=new String[availableLocales.length + 1];
  final Map<String,String> localeMap=new HashMap<>();
  for (int i=0; i < availableLocales.length; ++i) {
    String localString=availableLocales[i];
    if (localString.contains(""String_Node_Str"")) {
      localString=localString.substring(0,localString.indexOf(""String_Node_Str""));
    }
    Locale locale=new Locale(localString);
    values[i + 1]=locale.getDisplayLanguage() + ""String_Node_Str"" + availableLocales[i]+ ""String_Node_Str"";
    localeMap.put(values[i + 1],availableLocales[i]);
  }
  values[0]=getActivity().getString(R.string.device) + ""String_Node_Str"" + Locale.getDefault().getLanguage()+ ""String_Node_Str"";
  localeMap.put(values[0],Locale.getDefault().getLanguage());
  Arrays.sort(values,1,values.length);
  ArrayAdapter<String> adapter=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,values);
  ListView listView=new ListView(getActivity());
  listView.setAdapter(adapter);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Resources res=getResources();
      DisplayMetrics dm=res.getDisplayMetrics();
      Configuration conf=res.getConfiguration();
      String localString=localeMap.get(values[position]);
      if (localString.contains(""String_Node_Str"")) {
        conf.locale=new Locale(localString.substring(0,localString.indexOf(""String_Node_Str"")),localString.substring(localString.indexOf(""String_Node_Str"") + 1,localString.length()));
      }
 else {
        conf.locale=new Locale(localString);
      }
      res.updateConfiguration(conf,dm);
      if (position > 0) {
        mSettings.edit().putString(LANGUAGE_PREF_KEY,localeMap.get(values[position])).apply();
      }
 else {
        mSettings.edit().remove(LANGUAGE_PREF_KEY).apply();
      }
      if (position != 0) {
        Map<String,Object> properties=new HashMap<String,Object>();
        properties.put(""String_Node_Str"",conf.locale.toString());
        AnalyticsTracker.track(Stat.ACCOUNT_SETTINGS_LANGUAGE_SELECTION_FORCED,properties);
      }
      AnalyticsUtils.refreshMetadata();
      Intent refresh=new Intent(getActivity(),getActivity().getClass());
      startActivity(refresh);
      getActivity().setResult(LANGUAGE_CHANGED);
      getActivity().finish();
    }
  }
);
  dialogBuilder.setView(listView);
  dialogBuilder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  mDialog=dialogBuilder.show();
  return true;
}",0.9807162534435262
14187,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Resources res=getResources();
  DisplayMetrics dm=res.getDisplayMetrics();
  Configuration conf=res.getConfiguration();
  String localString=localeMap.get(values[position]);
  if (localString.contains(""String_Node_Str"")) {
    conf.locale=new Locale(localString.substring(0,localString.indexOf(""String_Node_Str"")),localString.substring(localString.indexOf(""String_Node_Str"") + 1,localString.length()));
  }
 else {
    conf.locale=new Locale(localString);
  }
  res.updateConfiguration(conf,dm);
  mSettings.edit().putString(LANGUAGE_PREF_KEY,localeMap.get(values[position])).apply();
  if (position != 0) {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.put(""String_Node_Str"",conf.locale.toString());
    AnalyticsTracker.track(Stat.ACCOUNT_SETTINGS_LANGUAGE_SELECTION_FORCED,properties);
  }
  AnalyticsUtils.refreshMetadata();
  Intent refresh=new Intent(getActivity(),getActivity().getClass());
  startActivity(refresh);
  getActivity().setResult(LANGUAGE_CHANGED);
  getActivity().finish();
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Resources res=getResources();
  DisplayMetrics dm=res.getDisplayMetrics();
  Configuration conf=res.getConfiguration();
  String localString=localeMap.get(values[position]);
  if (localString.contains(""String_Node_Str"")) {
    conf.locale=new Locale(localString.substring(0,localString.indexOf(""String_Node_Str"")),localString.substring(localString.indexOf(""String_Node_Str"") + 1,localString.length()));
  }
 else {
    conf.locale=new Locale(localString);
  }
  res.updateConfiguration(conf,dm);
  if (position > 0) {
    mSettings.edit().putString(LANGUAGE_PREF_KEY,localeMap.get(values[position])).apply();
  }
 else {
    mSettings.edit().remove(LANGUAGE_PREF_KEY).apply();
  }
  if (position != 0) {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.put(""String_Node_Str"",conf.locale.toString());
    AnalyticsTracker.track(Stat.ACCOUNT_SETTINGS_LANGUAGE_SELECTION_FORCED,properties);
  }
  AnalyticsUtils.refreshMetadata();
  Intent refresh=new Intent(getActivity(),getActivity().getClass());
  startActivity(refresh);
  getActivity().setResult(LANGUAGE_CHANGED);
  getActivity().finish();
}",0.958904109589041
14188,"public static void applyLocale(Activity context,boolean restart){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  if (sharedPreferences.contains(SettingsFragment.LANGUAGE_PREF_KEY)) {
    Locale contextLocale=context.getResources().getConfiguration().locale;
    String contextLanguage=contextLocale.getLanguage();
    String contextCountry=contextLocale.getCountry();
    String locale=sharedPreferences.getString(SettingsFragment.LANGUAGE_PREF_KEY,""String_Node_Str"");
    if (!TextUtils.isEmpty(contextCountry)) {
      contextLanguage+=""String_Node_Str"" + contextCountry;
    }
    if (!locale.equals(contextLanguage)) {
      Resources resources=context.getResources();
      Configuration conf=resources.getConfiguration();
      conf.locale=new Locale(locale);
      resources.updateConfiguration(conf,resources.getDisplayMetrics());
      if (restart) {
        Intent refresh=new Intent(context,context.getClass());
        refresh.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        context.startActivity(refresh);
        context.finish();
        context.overridePendingTransition(0,0);
      }
    }
  }
}","public static void applyLocale(Activity context,boolean restart){
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  if (sharedPreferences.contains(SettingsFragment.LANGUAGE_PREF_KEY)) {
    Locale contextLocale=context.getResources().getConfiguration().locale;
    String contextLanguage=contextLocale.getLanguage();
    String contextCountry=contextLocale.getCountry();
    String locale=sharedPreferences.getString(SettingsFragment.LANGUAGE_PREF_KEY,""String_Node_Str"");
    if (!TextUtils.isEmpty(contextCountry)) {
      contextLanguage+=""String_Node_Str"" + contextCountry;
    }
    if (!locale.equals(contextLanguage)) {
      Resources resources=context.getResources();
      Configuration conf=resources.getConfiguration();
      conf.locale=new Locale(locale);
      resources.updateConfiguration(conf,resources.getDisplayMetrics());
      if (restart) {
        Intent refresh=context.getIntent();
        if (refresh == null) {
          refresh=new Intent(context,context.getClass());
        }
        refresh.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        context.startActivity(refresh);
        context.finish();
        context.overridePendingTransition(0,0);
      }
    }
  }
}",0.966832504145937
14189,"public static void showFab(final View view,final boolean show){
  if (view == null)   return;
  Context context=view.getContext();
  int fabHeight=context.getResources().getDimensionPixelSize(android.support.design.R.dimen.design_fab_size_normal);
  int fabMargin=context.getResources().getDimensionPixelSize(R.dimen.fab_margin);
  int max=(fabHeight + fabMargin) * 2;
  float fromY=(show ? max : 0f);
  float toY=(show ? 0f : max);
  ObjectAnimator anim=ObjectAnimator.ofFloat(view,View.TRANSLATION_Y,fromY,toY);
  anim.setInterpolator(show ? new DecelerateInterpolator() : new AccelerateInterpolator());
  anim.setDuration(show ? Duration.LONG.toMillis(context) : Duration.SHORT.toMillis(context));
  anim.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      super.onAnimationStart(animation);
      if (view.getVisibility() != View.VISIBLE) {
        view.setVisibility(View.VISIBLE);
      }
    }
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      if (!show) {
        view.setVisibility(View.GONE);
      }
    }
  }
);
  anim.start();
}","public static void showFab(final View view,final boolean show){
  if (view == null)   return;
  Context context=view.getContext();
  int fabHeight=context.getResources().getDimensionPixelSize(android.support.design.R.dimen.design_fab_size_normal);
  int fabMargin=context.getResources().getDimensionPixelSize(R.dimen.fab_margin);
  int max=(fabHeight + fabMargin) * 2;
  float fromY=(show ? max : 0f);
  float toY=(show ? 0f : max);
  ObjectAnimator anim=ObjectAnimator.ofFloat(view,View.TRANSLATION_Y,fromY,toY);
  if (show) {
    anim.setInterpolator(new DecelerateInterpolator());
  }
 else {
    anim.setInterpolator(new AccelerateInterpolator());
  }
  anim.setDuration(show ? Duration.LONG.toMillis(context) : Duration.SHORT.toMillis(context));
  anim.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      super.onAnimationStart(animation);
      if (view.getVisibility() != View.VISIBLE) {
        view.setVisibility(View.VISIBLE);
      }
    }
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      if (!show) {
        view.setVisibility(View.GONE);
      }
    }
  }
);
  anim.start();
}",0.9706375838926176
14190,"/** 
 * Instantiate a new Blog object from it's local id
 * @param localId local blog id
 * @return a new Blog instance or null if the localId was not found
 */
public Blog instantiateBlogByLocalId(int localId){
  String[] fields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Cursor c=db.query(BLOGS_TABLE,fields,""String_Node_Str"",new String[]{Integer.toString(localId)},null,null,null);
  Blog blog=null;
  if (c.moveToFirst()) {
    if (c.getString(0) != null) {
      blog=new Blog();
      blog.setLocalTableBlogId(localId);
      blog.setUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setBlogName(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setUsername(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setPassword(decryptPassword(c.getString(c.getColumnIndex(""String_Node_Str""))));
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) == null) {
        blog.setHttpuser(""String_Node_Str"");
      }
 else {
        blog.setHttpuser(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) == null) {
        blog.setHttppassword(""String_Node_Str"");
      }
 else {
        blog.setHttppassword(decryptPassword(c.getString(c.getColumnIndex(""String_Node_Str""))));
      }
      blog.setImagePlacement(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setFeaturedImageCapable(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setFullSizeImage(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setMaxImageWidth(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setMaxImageWidthId(c.getInt(c.getColumnIndex(""String_Node_Str"")));
      blog.setRemoteBlogId(c.getInt(c.getColumnIndex(""String_Node_Str"")));
      blog.setDotcomFlag(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setDotcom_username(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setDotcom_password(decryptPassword(c.getString(c.getColumnIndex(""String_Node_Str""))));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setApi_key(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setApi_blogid(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setWpVersion(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      blog.setPostFormats(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setScaledImage(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setScaledImageWidth(c.getInt(c.getColumnIndex(""String_Node_Str"")));
      blog.setHomeURL(c.getString(c.getColumnIndex(""String_Node_Str"")));
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) == null) {
        blog.setBlogOptions(""String_Node_Str"");
      }
 else {
        blog.setBlogOptions(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      blog.setAdmin(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setHidden(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
    }
  }
  c.close();
  return blog;
}","/** 
 * Instantiate a new Blog object from it's local id
 * @param localId local blog id
 * @return a new Blog instance or null if the localId was not found
 */
public Blog instantiateBlogByLocalId(int localId){
  String[] fields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Cursor c=db.query(BLOGS_TABLE,fields,""String_Node_Str"",new String[]{Integer.toString(localId)},null,null,null);
  Blog blog=null;
  if (c.moveToFirst()) {
    if (c.getString(0) != null) {
      blog=new Blog();
      blog.setLocalTableBlogId(localId);
      blog.setUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setBlogName(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setUsername(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setPassword(decryptPassword(c.getString(c.getColumnIndex(""String_Node_Str""))));
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) == null) {
        blog.setHttpuser(""String_Node_Str"");
      }
 else {
        blog.setHttpuser(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) == null) {
        blog.setHttppassword(""String_Node_Str"");
      }
 else {
        blog.setHttppassword(decryptPassword(c.getString(c.getColumnIndex(""String_Node_Str""))));
      }
      blog.setImagePlacement(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setFeaturedImageCapable(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setFullSizeImage(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setMaxImageWidth(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setMaxImageWidthId(c.getInt(c.getColumnIndex(""String_Node_Str"")));
      blog.setRemoteBlogId(c.getInt(c.getColumnIndex(""String_Node_Str"")));
      blog.setDotcomFlag(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setDotcom_username(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setDotcom_password(decryptPassword(c.getString(c.getColumnIndex(""String_Node_Str""))));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setApi_key(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setApi_blogid(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) != null) {
        blog.setWpVersion(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      blog.setPostFormats(c.getString(c.getColumnIndex(""String_Node_Str"")));
      blog.setScaledImage(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setScaledImageWidth(c.getInt(c.getColumnIndex(""String_Node_Str"")));
      blog.setHomeURL(c.getString(c.getColumnIndex(""String_Node_Str"")));
      if (c.getString(c.getColumnIndex(""String_Node_Str"")) == null) {
        blog.setBlogOptions(""String_Node_Str"");
      }
 else {
        blog.setBlogOptions(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      blog.setAdmin(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setHidden(c.getInt(c.getColumnIndex(""String_Node_Str"")) > 0);
      blog.setPlanID(c.getString(c.getColumnIndex(""String_Node_Str"")));
    }
  }
  c.close();
  return blog;
}",0.9882475842256464
14191,"public static void save(Account account,SQLiteDatabase database){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",0);
  values.put(""String_Node_Str"",account.getUserName());
  values.put(""String_Node_Str"",account.getUserId());
  values.put(""String_Node_Str"",account.getDisplayName());
  values.put(""String_Node_Str"",account.getProfileUrl());
  values.put(""String_Node_Str"",account.getAvatarUrl());
  values.put(""String_Node_Str"",account.getPrimaryBlogId());
  values.put(""String_Node_Str"",account.getSiteCount());
  values.put(""String_Node_Str"",account.getVisibleSiteCount());
  values.put(""String_Node_Str"",account.getAccessToken());
  values.put(""String_Node_Str"",account.getEmail());
  values.put(""String_Node_Str"",account.getFirstName());
  values.put(""String_Node_Str"",account.getLastName());
  values.put(""String_Node_Str"",account.getAboutMe());
  values.put(""String_Node_Str"",account.getNewEmail());
  values.put(""String_Node_Str"",account.getPendingEmailChange());
  values.put(""String_Node_Str"",account.getPendingEmailChange());
  database.insertWithOnConflict(ACCOUNT_TABLE,null,values,SQLiteDatabase.CONFLICT_REPLACE);
}","public static void save(Account account,SQLiteDatabase database){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",0);
  values.put(""String_Node_Str"",account.getUserName());
  values.put(""String_Node_Str"",account.getUserId());
  values.put(""String_Node_Str"",account.getDisplayName());
  values.put(""String_Node_Str"",account.getProfileUrl());
  values.put(""String_Node_Str"",account.getAvatarUrl());
  values.put(""String_Node_Str"",account.getPrimaryBlogId());
  values.put(""String_Node_Str"",account.getSiteCount());
  values.put(""String_Node_Str"",account.getVisibleSiteCount());
  values.put(""String_Node_Str"",account.getAccessToken());
  values.put(""String_Node_Str"",account.getEmail());
  values.put(""String_Node_Str"",account.getFirstName());
  values.put(""String_Node_Str"",account.getLastName());
  values.put(""String_Node_Str"",account.getAboutMe());
  values.put(""String_Node_Str"",account.getNewEmail());
  values.put(""String_Node_Str"",account.getPendingEmailChange());
  values.put(""String_Node_Str"",account.getWebAddress());
  database.insertWithOnConflict(ACCOUNT_TABLE,null,values,SQLiteDatabase.CONFLICT_REPLACE);
}",0.9878472222222222
14192,"private void bumpPromoAnaylticsAndShowPromoDialogIfNecessary(){
  if (mIsUpdatingStats || mThereWasAnErrorLoadingStats) {
    return;
  }
  AppPrefs.bumpAnalyticsForStatsWidgetPromo();
  String prevWidgetKeysString=AppPrefs.getStatsWidgetsKeys();
  if (StringUtils.isEmpty(prevWidgetKeysString)) {
    int counter=AppPrefs.getAnalyticsForStatsWidgetPromo();
    if (counter == 3 || counter == 1000 || counter == 10000) {
      DialogFragment newFragment=StatsWidgetPromoDialogFragment.newInstance();
      newFragment.show(getFragmentManager(),""String_Node_Str"");
    }
  }
}","private void bumpPromoAnaylticsAndShowPromoDialogIfNecessary(){
  if (mIsUpdatingStats || mThereWasAnErrorLoadingStats) {
    return;
  }
  if (!StringUtils.isEmpty(AppPrefs.getStatsWidgetsKeys())) {
    return;
  }
  AppPrefs.bumpAnalyticsForStatsWidgetPromo();
  int counter=AppPrefs.getAnalyticsForStatsWidgetPromo();
  if (counter == 3 || counter == 1000 || counter == 10000) {
    DialogFragment newFragment=StatsWidgetPromoDialogFragment.newInstance();
    newFragment.show(getFragmentManager(),""String_Node_Str"");
  }
}",0.7302452316076294
14193,"private void checkAllRequestsFinished(Request<JSONObject> req){
synchronized (mStatsNetworkRequests) {
    if (req != null) {
      mStatsNetworkRequests.remove(req);
    }
    boolean isStillWorking=mStatsNetworkRequests.size() > 0;
    EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(isStillWorking));
  }
}","private void checkAllRequestsFinished(Request<JSONObject> req){
synchronized (mStatsNetworkRequests) {
    if (req != null) {
      mStatsNetworkRequests.remove(req);
    }
    boolean isStillWorking=mStatsNetworkRequests.size() > 0 || singleThreadNetworkHandler.getQueue().size() > 0;
    EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(isStillWorking));
  }
}",0.9257142857142856
14194,"private void startTasks(final String blogId,final StatsTimeframe timeframe,final String date,final StatsEndpointsEnum sectionToUpdate,final int maxResultsRequested,final int pageRequested){
  String cachedStats=getCachedStats(blogId,timeframe,date,sectionToUpdate,maxResultsRequested,pageRequested);
  if (cachedStats != null) {
    BaseStatsModel mResponseObjectModel;
    try {
      JSONObject response=new JSONObject(cachedStats);
      mResponseObjectModel=StatsUtils.parseResponse(sectionToUpdate,blogId,response);
      EventBus.getDefault().post(sectionToUpdate.getEndpointUpdateEvent(blogId,timeframe,date,maxResultsRequested,pageRequested,mResponseObjectModel));
      updateWidgetsUI(blogId,sectionToUpdate,timeframe,date,pageRequested,mResponseObjectModel);
      checkAllRequestsFinished(null);
      return;
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,e);
    }
  }
  final RestClientUtils restClientUtils=WordPress.getRestClientUtilsV1_1();
  String period=timeframe.getLabelForRestCall();
  EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(true));
  RestListener vListener=new RestListener(sectionToUpdate,blogId,timeframe,date,maxResultsRequested,pageRequested);
  final String periodDateMaxPlaceholder=""String_Node_Str"";
  String path=String.format(""String_Node_Str"" + sectionToUpdate.getRestEndpointPath(),blogId);
synchronized (mStatsNetworkRequests) {
switch (sectionToUpdate) {
case VISITS:
      path=String.format(path + ""String_Node_Str"",period,date);
    break;
case TOP_POSTS:
case REFERRERS:
case CLICKS:
case GEO_VIEWS:
case AUTHORS:
case VIDEO_PLAYS:
case SEARCH_TERMS:
  path=String.format(path + periodDateMaxPlaceholder,period,date,maxResultsRequested);
break;
case TAGS_AND_CATEGORIES:
case PUBLICIZE:
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
break;
case COMMENTS:
break;
case FOLLOWERS_WPCOM:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case FOLLOWERS_EMAIL:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case COMMENT_FOLLOWERS:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case INSIGHTS_ALL_TIME:
case INSIGHTS_POPULAR:
break;
case INSIGHTS_TODAY:
path=String.format(path + ""String_Node_Str"",date);
break;
case INSIGHTS_LATEST_POST_SUMMARY:
path=String.format(""String_Node_Str"",blogId,sectionToUpdate.getRestEndpointPath() + ""String_Node_Str"");
break;
case INSIGHTS_LATEST_POST_VIEWS:
path=String.format(path + ""String_Node_Str"",pageRequested);
break;
default :
AppLog.i(T.STATS,""String_Node_Str"" + sectionToUpdate.name());
return;
}
if (checkIfRequestShouldBeEnqueued(restClientUtils,path)) {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
Request<JSONObject> currentRequest=restClientUtils.get(path,vListener,vListener);
vListener.currentRequest=currentRequest;
currentRequest.setTag(""String_Node_Str"");
mStatsNetworkRequests.add(currentRequest);
}
 else {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
}
}
}","private void startTasks(final String blogId,final StatsTimeframe timeframe,final String date,final StatsEndpointsEnum sectionToUpdate,final int maxResultsRequested,final int pageRequested){
  EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(true));
  String cachedStats=getCachedStats(blogId,timeframe,date,sectionToUpdate,maxResultsRequested,pageRequested);
  if (cachedStats != null) {
    BaseStatsModel mResponseObjectModel;
    try {
      JSONObject response=new JSONObject(cachedStats);
      mResponseObjectModel=StatsUtils.parseResponse(sectionToUpdate,blogId,response);
      EventBus.getDefault().post(sectionToUpdate.getEndpointUpdateEvent(blogId,timeframe,date,maxResultsRequested,pageRequested,mResponseObjectModel));
      updateWidgetsUI(blogId,sectionToUpdate,timeframe,date,pageRequested,mResponseObjectModel);
      checkAllRequestsFinished(null);
      return;
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,e);
    }
  }
  final RestClientUtils restClientUtils=WordPress.getRestClientUtilsV1_1();
  String period=timeframe.getLabelForRestCall();
  RestListener vListener=new RestListener(sectionToUpdate,blogId,timeframe,date,maxResultsRequested,pageRequested);
  final String periodDateMaxPlaceholder=""String_Node_Str"";
  String path=String.format(""String_Node_Str"" + sectionToUpdate.getRestEndpointPath(),blogId);
synchronized (mStatsNetworkRequests) {
switch (sectionToUpdate) {
case VISITS:
      path=String.format(path + ""String_Node_Str"",period,date);
    break;
case TOP_POSTS:
case REFERRERS:
case CLICKS:
case GEO_VIEWS:
case AUTHORS:
case VIDEO_PLAYS:
case SEARCH_TERMS:
  path=String.format(path + periodDateMaxPlaceholder,period,date,maxResultsRequested);
break;
case TAGS_AND_CATEGORIES:
case PUBLICIZE:
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
break;
case COMMENTS:
break;
case FOLLOWERS_WPCOM:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case FOLLOWERS_EMAIL:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case COMMENT_FOLLOWERS:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case INSIGHTS_ALL_TIME:
case INSIGHTS_POPULAR:
break;
case INSIGHTS_TODAY:
path=String.format(path + ""String_Node_Str"",date);
break;
case INSIGHTS_LATEST_POST_SUMMARY:
path=String.format(""String_Node_Str"",blogId,sectionToUpdate.getRestEndpointPath() + ""String_Node_Str"");
break;
case INSIGHTS_LATEST_POST_VIEWS:
path=String.format(path + ""String_Node_Str"",pageRequested);
break;
default :
AppLog.i(T.STATS,""String_Node_Str"" + sectionToUpdate.name());
return;
}
if (checkIfRequestShouldBeEnqueued(restClientUtils,path)) {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
Request<JSONObject> currentRequest=restClientUtils.get(path,vListener,vListener);
vListener.currentRequest=currentRequest;
currentRequest.setTag(""String_Node_Str"");
mStatsNetworkRequests.add(currentRequest);
}
 else {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
}
}
}",0.9784533648170012
14195,"public boolean shouldUpdateFragmentOnErrorEvent(StatsEvents.SectionUpdateError errorEvent){
  StatsEvents.SectionUpdatedAbstract abstractEvent=errorEvent;
  if (!shouldUpdateFragmentOnUpdateEvent(abstractEvent)) {
    return false;
  }
  StatsService.StatsEndpointsEnum sectionToUpdate=errorEvent.mEndPointName;
  StatsService.StatsEndpointsEnum[] sectionsToUpdate=getSectionsToUpdate();
  int indexOfDatamodelMatch=-1;
  for (int i=0; i < getSectionsToUpdate().length; i++) {
    if (sectionToUpdate == sectionsToUpdate[i]) {
      indexOfDatamodelMatch=i;
      break;
    }
  }
  if (-1 == indexOfDatamodelMatch) {
    return false;
  }
  return true;
}","public boolean shouldUpdateFragmentOnErrorEvent(StatsEvents.SectionUpdateError errorEvent){
  if (!shouldUpdateFragmentOnUpdateEvent(errorEvent)) {
    return false;
  }
  StatsService.StatsEndpointsEnum sectionToUpdate=errorEvent.mEndPointName;
  StatsService.StatsEndpointsEnum[] sectionsToUpdate=getSectionsToUpdate();
  int indexOfDatamodelMatch=-1;
  for (int i=0; i < getSectionsToUpdate().length; i++) {
    if (sectionToUpdate == sectionsToUpdate[i]) {
      indexOfDatamodelMatch=i;
      break;
    }
  }
  if (-1 == indexOfDatamodelMatch) {
    return false;
  }
  return true;
}",0.9390048154093098
14196,"/** 
 * This is called every time an App Widget is deleted from the App Widget host.
 * @param context
 * @param widgetIDs
 */
@Override public void onDeleted(Context context,int[] widgetIDs){
  setRemoteBlogIDForWidgetIDs(widgetIDs,null);
}","/** 
 * This is called every time an App Widget is deleted from the App Widget host.
 * @param context The Context in which this receiver is running.
 * @param widgetIDs Widget IDs to set blank. We cannot remove widget from home screen.
 */
@Override public void onDeleted(Context context,int[] widgetIDs){
  setRemoteBlogIDForWidgetIDs(widgetIDs,null);
}",0.8087248322147651
14197,"public void testNumberExceptionWithInvalidInteger() throws Exception {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  XMLRPCClientInterface xmlrpcClientInterface=XMLRPCFactory.instantiate(URI.create(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  try {
    xmlrpcClientInterface.call(ApiHelper.Methods.GET_MEDIA_LIBRARY,null);
  }
 catch (  NumberFormatException e) {
    return;
  }
  assertTrue(""String_Node_Str"",false);
}","public void testNumberExceptionWithInvalidInteger() throws Exception {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  XMLRPCClientInterface xmlrpcClientInterface=XMLRPCFactory.instantiate(URI.create(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  try {
    xmlrpcClientInterface.call(Method.GET_MEDIA_LIBRARY,null);
  }
 catch (  NumberFormatException e) {
    return;
  }
  assertTrue(""String_Node_Str"",false);
}",0.9876819708846584
14198,"public void testNumberExceptionWithInvalidDouble() throws Exception {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  XMLRPCClientInterface xmlrpcClientInterface=XMLRPCFactory.instantiate(URI.create(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  try {
    xmlrpcClientInterface.call(ApiHelper.Methods.GET_MEDIA_LIBRARY,null);
  }
 catch (  NumberFormatException e) {
    return;
  }
  assertTrue(""String_Node_Str"",false);
}","public void testNumberExceptionWithInvalidDouble() throws Exception {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  XMLRPCClientInterface xmlrpcClientInterface=XMLRPCFactory.instantiate(URI.create(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  try {
    xmlrpcClientInterface.call(Method.GET_MEDIA_LIBRARY,null);
  }
 catch (  NumberFormatException e) {
    return;
  }
  assertTrue(""String_Node_Str"",false);
}",0.9876543209876544
14199,"private String getXmlrpcByUserEnteredPath(String baseUrl){
  String xmlRpcUrl;
  if (!UrlUtils.isValidUrlAndHostNotNull(baseUrl)) {
    AppLog.e(T.NUX,""String_Node_Str"" + baseUrl);
    mErrorMsgId=org.wordpress.android.R.string.invalid_url_message;
    return null;
  }
  URI uri=URI.create(baseUrl);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(uri,mHttpUsername,mHttpPassword);
  try {
    client.call(ApiHelper.Methods.LIST_METHODS);
    xmlRpcUrl=baseUrl;
    return xmlRpcUrl;
  }
 catch (  XMLRPCException e) {
    AppLog.i(T.NUX,""String_Node_Str"" + baseUrl);
    if (isHTTPAuthErrorMessage(e)) {
      return null;
    }
  }
catch (  SSLHandshakeException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  SSLPeerUnverifiedException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  IOException e) {
    AppLog.i(T.NUX,""String_Node_Str"" + baseUrl);
    if (isHTTPAuthErrorMessage(e)) {
      return null;
    }
  }
catch (  XmlPullParserException e) {
    AppLog.i(T.NUX,""String_Node_Str"" + baseUrl);
    if (isHTTPAuthErrorMessage(e)) {
      return null;
    }
  }
catch (  IllegalArgumentException e) {
    CrashlyticsUtils.setString(ExtraKey.ENTERED_URL,baseUrl);
    CrashlyticsUtils.logException(e,ExceptionType.SPECIFIC,T.NUX);
    mErrorMsgId=org.wordpress.android.R.string.invalid_url_message;
    return null;
  }
  String guessURL=baseUrl;
  if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
    guessURL=guessURL.substring(0,guessURL.length() - 1);
  }
  guessURL+=""String_Node_Str"";
  uri=URI.create(guessURL);
  client=XMLRPCFactory.instantiate(uri,mHttpUsername,mHttpPassword);
  try {
    client.call(ApiHelper.Methods.LIST_METHODS);
    xmlRpcUrl=guessURL;
    return xmlRpcUrl;
  }
 catch (  XMLRPCException e) {
    AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
    AppLog.e(T.NUX,""String_Node_Str"" + guessURL,e);
  }
catch (  SSLHandshakeException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  SSLPeerUnverifiedException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  IOException e) {
    AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
    AppLog.e(T.NUX,""String_Node_Str"" + guessURL,e);
  }
catch (  XmlPullParserException e) {
    AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
    AppLog.e(T.NUX,""String_Node_Str"" + guessURL,e);
  }
  return null;
}","private String getXmlrpcByUserEnteredPath(String baseUrl){
  String xmlRpcUrl;
  if (!UrlUtils.isValidUrlAndHostNotNull(baseUrl)) {
    AppLog.e(T.NUX,""String_Node_Str"" + baseUrl);
    mErrorMsgId=org.wordpress.android.R.string.invalid_url_message;
    return null;
  }
  URI uri=URI.create(baseUrl);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(uri,mHttpUsername,mHttpPassword);
  try {
    client.call(Method.LIST_METHODS);
    xmlRpcUrl=baseUrl;
    return xmlRpcUrl;
  }
 catch (  XMLRPCException e) {
    AppLog.i(T.NUX,""String_Node_Str"" + baseUrl);
    if (isHTTPAuthErrorMessage(e)) {
      return null;
    }
  }
catch (  SSLHandshakeException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  SSLPeerUnverifiedException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  IOException e) {
    AppLog.i(T.NUX,""String_Node_Str"" + baseUrl);
    if (isHTTPAuthErrorMessage(e)) {
      return null;
    }
  }
catch (  XmlPullParserException e) {
    AppLog.i(T.NUX,""String_Node_Str"" + baseUrl);
    if (isHTTPAuthErrorMessage(e)) {
      return null;
    }
  }
catch (  IllegalArgumentException e) {
    CrashlyticsUtils.setString(ExtraKey.ENTERED_URL,baseUrl);
    CrashlyticsUtils.logException(e,ExceptionType.SPECIFIC,T.NUX);
    mErrorMsgId=org.wordpress.android.R.string.invalid_url_message;
    return null;
  }
  String guessURL=baseUrl;
  if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
    guessURL=guessURL.substring(0,guessURL.length() - 1);
  }
  guessURL+=""String_Node_Str"";
  uri=URI.create(guessURL);
  client=XMLRPCFactory.instantiate(uri,mHttpUsername,mHttpPassword);
  try {
    client.call(Method.LIST_METHODS);
    xmlRpcUrl=guessURL;
    return xmlRpcUrl;
  }
 catch (  XMLRPCException e) {
    AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
    AppLog.e(T.NUX,""String_Node_Str"" + guessURL,e);
  }
catch (  SSLHandshakeException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  SSLPeerUnverifiedException e) {
    if (!WPUrlUtils.isWordPressCom(baseUrl)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
    return null;
  }
catch (  IOException e) {
    AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
    AppLog.e(T.NUX,""String_Node_Str"" + guessURL,e);
  }
catch (  XmlPullParserException e) {
    AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
    AppLog.e(T.NUX,""String_Node_Str"" + guessURL,e);
  }
  return null;
}",0.996103436060928
14200,"@Override protected List<Map<String,Object>> doInBackground(Void... notUsed){
  String xmlrpcUrl=null;
  if (mSelfHostedUrl != null && mSelfHostedUrl.length() != 0) {
    xmlrpcUrl=getSelfHostedXmlrpcUrl(mSelfHostedUrl);
  }
  if (xmlrpcUrl == null) {
    if (!mHttpAuthRequired && mErrorMsgId == 0) {
      mErrorMsgId=org.wordpress.android.R.string.no_site_error;
    }
    return null;
  }
  URI xmlrpcUri;
  xmlrpcUri=URI.create(xmlrpcUrl);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(xmlrpcUri,mHttpUsername,mHttpPassword);
  Object[] params={mUsername,mPassword};
  try {
    Object[] userBlogs=(Object[])client.call(ApiHelper.Methods.GET_BLOGS,params);
    if (userBlogs == null) {
      mErrorMsgId=org.wordpress.android.R.string.xmlrpc_error;
      mClientResponse=client.getResponse();
      return null;
    }
    Arrays.sort(userBlogs,BlogUtils.BlogNameComparator);
    List<Map<String,Object>> userBlogList=new ArrayList<Map<String,Object>>();
    for (    Object blog : userBlogs) {
      try {
        userBlogList.add((Map<String,Object>)blog);
      }
 catch (      ClassCastException e) {
        AppLog.e(T.NUX,""String_Node_Str"");
      }
    }
    return userBlogList;
  }
 catch (  XmlPullParserException parserException) {
    mErrorMsgId=org.wordpress.android.R.string.xmlrpc_error;
    AppLog.e(T.NUX,""String_Node_Str"",parserException);
  }
catch (  XMLRPCFault xmlRpcFault) {
    handleXmlRpcFault(xmlRpcFault);
  }
catch (  XMLRPCException xmlRpcException) {
    AppLog.e(T.NUX,""String_Node_Str"",xmlRpcException);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
catch (  SSLHandshakeException e) {
    if (WPUrlUtils.isWordPressCom(xmlrpcUri)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
  }
catch (  IOException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
  mClientResponse=client.getResponse();
  return null;
}","@Override protected List<Map<String,Object>> doInBackground(Void... notUsed){
  String xmlrpcUrl=null;
  if (mSelfHostedUrl != null && mSelfHostedUrl.length() != 0) {
    xmlrpcUrl=getSelfHostedXmlrpcUrl(mSelfHostedUrl);
  }
  if (xmlrpcUrl == null) {
    if (!mHttpAuthRequired && mErrorMsgId == 0) {
      mErrorMsgId=org.wordpress.android.R.string.no_site_error;
    }
    return null;
  }
  URI xmlrpcUri;
  xmlrpcUri=URI.create(xmlrpcUrl);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(xmlrpcUri,mHttpUsername,mHttpPassword);
  Object[] params={mUsername,mPassword};
  try {
    Object[] userBlogs=(Object[])client.call(Method.GET_BLOGS,params);
    if (userBlogs == null) {
      mErrorMsgId=org.wordpress.android.R.string.xmlrpc_error;
      mClientResponse=client.getResponse();
      return null;
    }
    Arrays.sort(userBlogs,BlogUtils.BlogNameComparator);
    List<Map<String,Object>> userBlogList=new ArrayList<Map<String,Object>>();
    for (    Object blog : userBlogs) {
      try {
        userBlogList.add((Map<String,Object>)blog);
      }
 catch (      ClassCastException e) {
        AppLog.e(T.NUX,""String_Node_Str"");
      }
    }
    return userBlogList;
  }
 catch (  XmlPullParserException parserException) {
    mErrorMsgId=org.wordpress.android.R.string.xmlrpc_error;
    AppLog.e(T.NUX,""String_Node_Str"",parserException);
  }
catch (  XMLRPCFault xmlRpcFault) {
    handleXmlRpcFault(xmlRpcFault);
  }
catch (  XMLRPCException xmlRpcException) {
    AppLog.e(T.NUX,""String_Node_Str"",xmlRpcException);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
catch (  SSLHandshakeException e) {
    if (WPUrlUtils.isWordPressCom(xmlrpcUri)) {
      mErroneousSslCertificate=true;
    }
    AppLog.w(T.NUX,""String_Node_Str"");
  }
catch (  IOException e) {
    AppLog.e(T.NUX,""String_Node_Str"",e);
    mErrorMsgId=org.wordpress.android.R.string.no_site_error;
  }
  mClientResponse=client.getResponse();
  return null;
}",0.997211660329531
14201,"/** 
 * change the status of a single comment
 */
static void moderateComment(final int accountId,final Comment comment,final CommentStatus newStatus,final CommentActionListener actionListener){
  if (newStatus != null && newStatus.equals(CommentStatus.TRASH)) {
    deleteComment(accountId,comment,actionListener);
    return;
  }
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comment == null || newStatus == null || newStatus == CommentStatus.UNKNOWN) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Map<String,String> postHash=new HashMap<String,String>();
      postHash.put(""String_Node_Str"",CommentStatus.toString(newStatus));
      postHash.put(""String_Node_Str"",comment.getCommentText());
      postHash.put(""String_Node_Str"",comment.getAuthorName());
      postHash.put(""String_Node_Str"",comment.getAuthorUrl());
      postHash.put(""String_Node_Str"",comment.getAuthorEmail());
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),Long.toString(comment.commentID),postHash};
      Object result;
      try {
        result=client.call(ApiHelper.Methods.EDIT_COMMENT,params);
      }
 catch (      XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
      final boolean success=(result != null && Boolean.parseBoolean(result.toString()));
      if (success)       CommentTable.updateCommentStatus(blog.getLocalTableBlogId(),comment.commentID,CommentStatus.toString(newStatus));
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(success);
          }
        }
);
      }
    }
  }
.start();
}","/** 
 * change the status of a single comment
 */
static void moderateComment(final int accountId,final Comment comment,final CommentStatus newStatus,final CommentActionListener actionListener){
  if (newStatus != null && newStatus.equals(CommentStatus.TRASH)) {
    deleteComment(accountId,comment,actionListener);
    return;
  }
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comment == null || newStatus == null || newStatus == CommentStatus.UNKNOWN) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Map<String,String> postHash=new HashMap<String,String>();
      postHash.put(""String_Node_Str"",CommentStatus.toString(newStatus));
      postHash.put(""String_Node_Str"",comment.getCommentText());
      postHash.put(""String_Node_Str"",comment.getAuthorName());
      postHash.put(""String_Node_Str"",comment.getAuthorUrl());
      postHash.put(""String_Node_Str"",comment.getAuthorEmail());
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),Long.toString(comment.commentID),postHash};
      Object result;
      try {
        result=client.call(Method.EDIT_COMMENT,params);
      }
 catch (      XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
      final boolean success=(result != null && Boolean.parseBoolean(result.toString()));
      if (success)       CommentTable.updateCommentStatus(blog.getLocalTableBlogId(),comment.commentID,CommentStatus.toString(newStatus));
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(success);
          }
        }
);
      }
    }
  }
.start();
}",0.9974845643722844
14202,"/** 
 * delete (trash) a single comment
 */
private static void deleteComment(final int accountId,final Comment comment,final CommentActionListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comment == null) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),comment.commentID};
      Object result;
      try {
        result=client.call(ApiHelper.Methods.DELETE_COMMENT,params);
      }
 catch (      final XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
      final boolean success=(result != null && Boolean.parseBoolean(result.toString()));
      if (success)       CommentTable.deleteComment(accountId,comment.commentID);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(success);
          }
        }
);
      }
    }
  }
.start();
}","/** 
 * delete (trash) a single comment
 */
private static void deleteComment(final int accountId,final Comment comment,final CommentActionListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comment == null) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),comment.commentID};
      Object result;
      try {
        result=client.call(Method.DELETE_COMMENT,params);
      }
 catch (      final XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        result=null;
      }
      final boolean success=(result != null && Boolean.parseBoolean(result.toString()));
      if (success)       CommentTable.deleteComment(accountId,comment.commentID);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(success);
          }
        }
);
      }
    }
  }
.start();
}",0.9963272120200334
14203,"/** 
 * delete multiple comments
 */
private static void deleteComments(final int accountId,final CommentList comments,final OnCommentsModeratedListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comments == null || comments.size() == 0) {
    if (actionListener != null)     actionListener.onCommentsModerated(new CommentList());
    return;
  }
  final CommentList deletedComments=new CommentList();
  final int localBlogId=blog.getLocalTableBlogId();
  final int remoteBlogId=blog.getRemoteBlogId();
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      for (      Comment comment : comments) {
        Object[] params={remoteBlogId,blog.getUsername(),blog.getPassword(),comment.commentID};
        Object result;
        try {
          result=client.call(ApiHelper.Methods.DELETE_COMMENT,params);
          boolean success=(result != null && Boolean.parseBoolean(result.toString()));
          if (success)           deletedComments.add(comment);
        }
 catch (        XMLRPCException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        IOException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        XmlPullParserException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
      }
      CommentTable.deleteComments(localBlogId,deletedComments);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onCommentsModerated(deletedComments);
          }
        }
);
      }
    }
  }
.start();
}","/** 
 * delete multiple comments
 */
private static void deleteComments(final int accountId,final CommentList comments,final OnCommentsModeratedListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comments == null || comments.size() == 0) {
    if (actionListener != null)     actionListener.onCommentsModerated(new CommentList());
    return;
  }
  final CommentList deletedComments=new CommentList();
  final int localBlogId=blog.getLocalTableBlogId();
  final int remoteBlogId=blog.getRemoteBlogId();
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      for (      Comment comment : comments) {
        Object[] params={remoteBlogId,blog.getUsername(),blog.getPassword(),comment.commentID};
        Object result;
        try {
          result=client.call(Method.DELETE_COMMENT,params);
          boolean success=(result != null && Boolean.parseBoolean(result.toString()));
          if (success)           deletedComments.add(comment);
        }
 catch (        XMLRPCException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        IOException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        XmlPullParserException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
      }
      CommentTable.deleteComments(localBlogId,deletedComments);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onCommentsModerated(deletedComments);
          }
        }
);
      }
    }
  }
.start();
}",0.9968758875319512
14204,"/** 
 * reply to an individual comment
 */
static void submitReplyToComment(final int accountId,final Comment comment,final String replyText,final CommentActionListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comment == null || TextUtils.isEmpty(replyText)) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Map<String,Object> replyHash=new HashMap<String,Object>();
      replyHash.put(""String_Node_Str"",Long.toString(comment.commentID));
      replyHash.put(""String_Node_Str"",replyText);
      replyHash.put(""String_Node_Str"",""String_Node_Str"");
      replyHash.put(""String_Node_Str"",""String_Node_Str"");
      replyHash.put(""String_Node_Str"",""String_Node_Str"");
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),Long.toString(comment.postID),replyHash};
      long newCommentID;
      try {
        Object newCommentIDObject=client.call(ApiHelper.Methods.NEW_COMMENT,params);
        if (newCommentIDObject instanceof Integer) {
          newCommentID=((Integer)newCommentIDObject).longValue();
        }
 else         if (newCommentIDObject instanceof Long) {
          newCommentID=(Long)newCommentIDObject;
        }
 else {
          AppLog.e(T.COMMENTS,""String_Node_Str"");
          newCommentID=-1;
        }
      }
 catch (      XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
      final boolean succeeded=(newCommentID >= 0);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(succeeded);
          }
        }
);
      }
    }
  }
.start();
}","/** 
 * reply to an individual comment
 */
static void submitReplyToComment(final int accountId,final Comment comment,final String replyText,final CommentActionListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comment == null || TextUtils.isEmpty(replyText)) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Map<String,Object> replyHash=new HashMap<String,Object>();
      replyHash.put(""String_Node_Str"",Long.toString(comment.commentID));
      replyHash.put(""String_Node_Str"",replyText);
      replyHash.put(""String_Node_Str"",""String_Node_Str"");
      replyHash.put(""String_Node_Str"",""String_Node_Str"");
      replyHash.put(""String_Node_Str"",""String_Node_Str"");
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),Long.toString(comment.postID),replyHash};
      long newCommentID;
      try {
        Object newCommentIDObject=client.call(Method.NEW_COMMENT,params);
        if (newCommentIDObject instanceof Integer) {
          newCommentID=((Integer)newCommentIDObject).longValue();
        }
 else         if (newCommentIDObject instanceof Long) {
          newCommentID=(Long)newCommentIDObject;
        }
 else {
          AppLog.e(T.COMMENTS,""String_Node_Str"");
          newCommentID=-1;
        }
      }
 catch (      XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
      final boolean succeeded=(newCommentID >= 0);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(succeeded);
          }
        }
);
      }
    }
  }
.start();
}",0.9974787989915196
14205,"/** 
 * change the status of multiple comments TODO: investigate using system.multiCall to perform a single call to moderate the list
 */
static void moderateComments(final int accountId,final CommentList comments,final CommentStatus newStatus,final OnCommentsModeratedListener actionListener){
  if (newStatus != null && newStatus.equals(CommentStatus.TRASH)) {
    deleteComments(accountId,comments,actionListener);
    return;
  }
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comments == null || comments.size() == 0 || newStatus == null || newStatus == CommentStatus.UNKNOWN) {
    if (actionListener != null)     actionListener.onCommentsModerated(new CommentList());
    return;
  }
  final CommentList moderatedComments=new CommentList();
  final String newStatusStr=CommentStatus.toString(newStatus);
  final int localBlogId=blog.getLocalTableBlogId();
  final int remoteBlogId=blog.getRemoteBlogId();
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      for (      Comment comment : comments) {
        Map<String,String> postHash=new HashMap<String,String>();
        postHash.put(""String_Node_Str"",newStatusStr);
        postHash.put(""String_Node_Str"",comment.getCommentText());
        postHash.put(""String_Node_Str"",comment.getAuthorName());
        postHash.put(""String_Node_Str"",comment.getAuthorUrl());
        postHash.put(""String_Node_Str"",comment.getAuthorEmail());
        Object[] params={remoteBlogId,blog.getUsername(),blog.getPassword(),Long.toString(comment.commentID),postHash};
        Object result;
        try {
          result=client.call(ApiHelper.Methods.EDIT_COMMENT,params);
          boolean success=(result != null && Boolean.parseBoolean(result.toString()));
          if (success) {
            comment.setStatus(newStatusStr);
            moderatedComments.add(comment);
          }
        }
 catch (        XMLRPCException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        IOException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        XmlPullParserException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
      }
      CommentTable.updateCommentsStatus(localBlogId,moderatedComments,newStatusStr);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onCommentsModerated(moderatedComments);
          }
        }
);
      }
    }
  }
.start();
}","/** 
 * change the status of multiple comments TODO: investigate using system.multiCall to perform a single call to moderate the list
 */
static void moderateComments(final int accountId,final CommentList comments,final CommentStatus newStatus,final OnCommentsModeratedListener actionListener){
  if (newStatus != null && newStatus.equals(CommentStatus.TRASH)) {
    deleteComments(accountId,comments,actionListener);
    return;
  }
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comments == null || comments.size() == 0 || newStatus == null || newStatus == CommentStatus.UNKNOWN) {
    if (actionListener != null)     actionListener.onCommentsModerated(new CommentList());
    return;
  }
  final CommentList moderatedComments=new CommentList();
  final String newStatusStr=CommentStatus.toString(newStatus);
  final int localBlogId=blog.getLocalTableBlogId();
  final int remoteBlogId=blog.getRemoteBlogId();
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      for (      Comment comment : comments) {
        Map<String,String> postHash=new HashMap<String,String>();
        postHash.put(""String_Node_Str"",newStatusStr);
        postHash.put(""String_Node_Str"",comment.getCommentText());
        postHash.put(""String_Node_Str"",comment.getAuthorName());
        postHash.put(""String_Node_Str"",comment.getAuthorUrl());
        postHash.put(""String_Node_Str"",comment.getAuthorEmail());
        Object[] params={remoteBlogId,blog.getUsername(),blog.getPassword(),Long.toString(comment.commentID),postHash};
        Object result;
        try {
          result=client.call(Method.EDIT_COMMENT,params);
          boolean success=(result != null && Boolean.parseBoolean(result.toString()));
          if (success) {
            comment.setStatus(newStatusStr);
            moderatedComments.add(comment);
          }
        }
 catch (        XMLRPCException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        IOException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
catch (        XmlPullParserException e) {
          AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        }
      }
      CommentTable.updateCommentsStatus(localBlogId,moderatedComments,newStatusStr);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onCommentsModerated(moderatedComments);
          }
        }
);
      }
    }
  }
.start();
}",0.997914691943128
14206,"public static void addComment(final int accountId,final String postID,final String commentText,final CommentActionListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || TextUtils.isEmpty(commentText)) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Map<String,Object> commentHash=new HashMap<String,Object>();
      commentHash.put(""String_Node_Str"",commentText);
      commentHash.put(""String_Node_Str"",""String_Node_Str"");
      commentHash.put(""String_Node_Str"",""String_Node_Str"");
      commentHash.put(""String_Node_Str"",""String_Node_Str"");
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),postID,commentHash};
      int newCommentID;
      try {
        newCommentID=(Integer)client.call(ApiHelper.Methods.NEW_COMMENT,params);
      }
 catch (      XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
      final boolean succeeded=(newCommentID >= 0);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(succeeded);
          }
        }
);
      }
    }
  }
.start();
}","public static void addComment(final int accountId,final String postID,final String commentText,final CommentActionListener actionListener){
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || TextUtils.isEmpty(commentText)) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      Map<String,Object> commentHash=new HashMap<String,Object>();
      commentHash.put(""String_Node_Str"",commentText);
      commentHash.put(""String_Node_Str"",""String_Node_Str"");
      commentHash.put(""String_Node_Str"",""String_Node_Str"");
      commentHash.put(""String_Node_Str"",""String_Node_Str"");
      Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),postID,commentHash};
      int newCommentID;
      try {
        newCommentID=(Integer)client.call(Method.NEW_COMMENT,params);
      }
 catch (      XMLRPCException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      IOException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
catch (      XmlPullParserException e) {
        AppLog.e(T.COMMENTS,""String_Node_Str"",e);
        newCommentID=-1;
      }
      final boolean succeeded=(newCommentID >= 0);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onActionResult(succeeded);
          }
        }
);
      }
    }
  }
.start();
}",0.9967503692762186
14207,"@Override protected Boolean doInBackground(Void... params){
  final Blog blog;
  blog=WordPress.wpDB.instantiateBlogByLocalId(mLocalBlogId);
  if (blog == null) {
    AppLog.e(AppLog.T.COMMENTS,""String_Node_Str"" + mLocalBlogId);
    return false;
  }
  final String authorName=getEditTextStr(R.id.author_name);
  final String authorEmail=getEditTextStr(R.id.author_email);
  final String authorUrl=getEditTextStr(R.id.author_url);
  final String content=getEditTextStr(R.id.edit_comment_content);
  final Map<String,String> postHash=new HashMap<String,String>();
  postHash.put(""String_Node_Str"",CommentStatus.toString(mComment.getStatusEnum()));
  postHash.put(""String_Node_Str"",content);
  postHash.put(""String_Node_Str"",authorName);
  postHash.put(""String_Node_Str"",authorUrl);
  postHash.put(""String_Node_Str"",authorEmail);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Object[] xmlParams={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),Long.toString(mCommentId),postHash};
  try {
    Object result=client.call(ApiHelper.Methods.EDIT_COMMENT,xmlParams);
    boolean isSaved=(result != null && Boolean.parseBoolean(result.toString()));
    if (isSaved) {
      mComment.setAuthorEmail(authorEmail);
      mComment.setAuthorUrl(authorUrl);
      mComment.setAuthorName(authorName);
      mComment.setCommentText(content);
      CommentTable.updateComment(mLocalBlogId,mComment);
    }
    return isSaved;
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.COMMENTS,e);
    return false;
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.COMMENTS,e);
    return false;
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.COMMENTS,e);
    return false;
  }
}","@Override protected Boolean doInBackground(Void... params){
  final Blog blog;
  blog=WordPress.wpDB.instantiateBlogByLocalId(mLocalBlogId);
  if (blog == null) {
    AppLog.e(AppLog.T.COMMENTS,""String_Node_Str"" + mLocalBlogId);
    return false;
  }
  final String authorName=getEditTextStr(R.id.author_name);
  final String authorEmail=getEditTextStr(R.id.author_email);
  final String authorUrl=getEditTextStr(R.id.author_url);
  final String content=getEditTextStr(R.id.edit_comment_content);
  final Map<String,String> postHash=new HashMap<String,String>();
  postHash.put(""String_Node_Str"",CommentStatus.toString(mComment.getStatusEnum()));
  postHash.put(""String_Node_Str"",content);
  postHash.put(""String_Node_Str"",authorName);
  postHash.put(""String_Node_Str"",authorUrl);
  postHash.put(""String_Node_Str"",authorEmail);
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Object[] xmlParams={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),Long.toString(mCommentId),postHash};
  try {
    Object result=client.call(Method.EDIT_COMMENT,xmlParams);
    boolean isSaved=(result != null && Boolean.parseBoolean(result.toString()));
    if (isSaved) {
      mComment.setAuthorEmail(authorEmail);
      mComment.setAuthorUrl(authorUrl);
      mComment.setAuthorName(authorName);
      mComment.setCommentText(content);
      CommentTable.updateComment(mLocalBlogId,mComment);
    }
    return isSaved;
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.COMMENTS,e);
    return false;
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.COMMENTS,e);
    return false;
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.COMMENTS,e);
    return false;
  }
}",0.9968705547652916
14208,"private String getCanonicalCategoryName(int category_id){
  String new_category_name=null;
  Map<?,?> result=null;
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),""String_Node_Str"",category_id};
  mClient=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  try {
    result=(Map<?,?>)mClient.call(ApiHelper.Methods.GET_TERM,params);
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
  if (result != null) {
    if (result.containsKey(""String_Node_Str"")) {
      new_category_name=result.get(""String_Node_Str"").toString();
    }
  }
  return new_category_name;
}","private String getCanonicalCategoryName(int category_id){
  String new_category_name=null;
  Map<?,?> result=null;
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),""String_Node_Str"",category_id};
  mClient=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  try {
    result=(Map<?,?>)mClient.call(Method.GET_TERM,params);
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
  if (result != null) {
    if (result.containsKey(""String_Node_Str"")) {
      new_category_name=result.get(""String_Node_Str"").toString();
    }
  }
  return new_category_name;
}",0.9929260450160772
14209,"public String addCategory(final String category_name,String category_slug,String category_desc,int parent_id){
  String returnString=""String_Node_Str"";
  updateSelectedCategoryList();
  mListScrollPositionManager.saveScrollOffset();
  Map<String,Object> struct=new HashMap<String,Object>();
  struct.put(""String_Node_Str"",category_name);
  struct.put(""String_Node_Str"",category_slug);
  struct.put(""String_Node_Str"",category_desc);
  struct.put(""String_Node_Str"",parent_id);
  mClient=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),struct};
  Object result=null;
  try {
    result=mClient.call(ApiHelper.Methods.NEW_CATEGORY,params);
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
  if (result != null) {
    int category_id=Integer.parseInt(result.toString());
    final String new_category_name=getCanonicalCategoryName(category_id);
    if (new_category_name == null) {
      return returnString;
    }
    final Activity that=this;
    if (!new_category_name.equals(category_name)) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          Toast.makeText(that,String.format(String.valueOf(getText(R.string.category_automatically_renamed)),category_name,new_category_name),Toast.LENGTH_LONG).show();
        }
      }
);
    }
    WordPress.wpDB.insertCategory(blog.getLocalTableBlogId(),category_id,parent_id,new_category_name);
    returnString=""String_Node_Str"";
    mSelectedCategories.add(new_category_name);
  }
  return returnString;
}","public String addCategory(final String category_name,String category_slug,String category_desc,int parent_id){
  String returnString=""String_Node_Str"";
  updateSelectedCategoryList();
  mListScrollPositionManager.saveScrollOffset();
  Map<String,Object> struct=new HashMap<String,Object>();
  struct.put(""String_Node_Str"",category_name);
  struct.put(""String_Node_Str"",category_slug);
  struct.put(""String_Node_Str"",category_desc);
  struct.put(""String_Node_Str"",parent_id);
  mClient=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),struct};
  Object result=null;
  try {
    result=mClient.call(Method.NEW_CATEGORY,params);
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
  if (result != null) {
    int category_id=Integer.parseInt(result.toString());
    final String new_category_name=getCanonicalCategoryName(category_id);
    if (new_category_name == null) {
      return returnString;
    }
    final Activity that=this;
    if (!new_category_name.equals(category_name)) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          Toast.makeText(that,String.format(String.valueOf(getText(R.string.category_automatically_renamed)),category_name,new_category_name),Toast.LENGTH_LONG).show();
        }
      }
);
    }
    WordPress.wpDB.insertCategory(blog.getLocalTableBlogId(),category_id,parent_id,new_category_name);
    returnString=""String_Node_Str"";
    mSelectedCategories.add(new_category_name);
  }
  return returnString;
}",0.996845425867508
14210,"/** 
 * Gets the categories via a xmlrpc call
 * @return result message
 */
public String fetchCategories(){
  String returnMessage;
  Object result[]=null;
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword()};
  mClient=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  boolean success=false;
  try {
    result=(Object[])mClient.call(ApiHelper.Methods.GET_CATEGORIES,params);
    success=true;
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
  if (success) {
    WordPress.wpDB.clearCategories(blog.getLocalTableBlogId());
    for (    Object aResult : result) {
      Map<?,?> curHash=(Map<?,?>)aResult;
      String categoryName=curHash.get(""String_Node_Str"").toString();
      String categoryID=curHash.get(""String_Node_Str"").toString();
      String categoryParentID=curHash.get(""String_Node_Str"").toString();
      int convertedCategoryID=Integer.parseInt(categoryID);
      int convertedCategoryParentID=Integer.parseInt(categoryParentID);
      WordPress.wpDB.insertCategory(blog.getLocalTableBlogId(),convertedCategoryID,convertedCategoryParentID,categoryName);
    }
    returnMessage=""String_Node_Str"";
  }
 else {
    returnMessage=""String_Node_Str"";
  }
  return returnMessage;
}","/** 
 * Gets the categories via a xmlrpc call
 * @return result message
 */
public String fetchCategories(){
  String returnMessage;
  Object result[]=null;
  Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword()};
  mClient=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  boolean success=false;
  try {
    result=(Object[])mClient.call(Method.GET_CATEGORIES,params);
    success=true;
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
  if (success) {
    WordPress.wpDB.clearCategories(blog.getLocalTableBlogId());
    for (    Object aResult : result) {
      Map<?,?> curHash=(Map<?,?>)aResult;
      String categoryName=curHash.get(""String_Node_Str"").toString();
      String categoryID=curHash.get(""String_Node_Str"").toString();
      String categoryParentID=curHash.get(""String_Node_Str"").toString();
      int convertedCategoryID=Integer.parseInt(categoryID);
      int convertedCategoryParentID=Integer.parseInt(categoryParentID);
      WordPress.wpDB.insertCategory(blog.getLocalTableBlogId(),convertedCategoryID,convertedCategoryParentID,categoryName);
    }
    returnMessage=""String_Node_Str"";
  }
 else {
    returnMessage=""String_Node_Str"";
  }
  return returnMessage;
}",0.9960979070592408
14211,"private void downloadMediaItem(long mediaId){
  Object[] apiParams={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),mediaId};
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(mBlog.getUri(),mBlog.getHttpuser(),mBlog.getHttppassword());
  try {
    Map<?,?> results=(Map<?,?>)client.call(ApiHelper.Methods.GET_MEDIA_ITEM,apiParams);
    if (results != null) {
      String strBlogId=Integer.toString(mBlog.getLocalTableBlogId());
      MediaFile mediaFile=new MediaFile(strBlogId,results,mBlog.isDotcomFlag());
      WordPress.wpDB.saveMediaFile(mediaFile);
      AppLog.d(AppLog.T.POSTS,""String_Node_Str"" + mediaFile.getFileURL());
      EventBus.getDefault().post(new PostEvents.PostMediaInfoUpdated(mediaId,mediaFile.getFileURL()));
    }
  }
 catch (  ClassCastException|XMLRPCException|XmlPullParserException|IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
}","private void downloadMediaItem(long mediaId){
  Object[] apiParams={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),mediaId};
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(mBlog.getUri(),mBlog.getHttpuser(),mBlog.getHttppassword());
  try {
    Map<?,?> results=(Map<?,?>)client.call(Method.GET_MEDIA_ITEM,apiParams);
    if (results != null) {
      String strBlogId=Integer.toString(mBlog.getLocalTableBlogId());
      MediaFile mediaFile=new MediaFile(strBlogId,results,mBlog.isDotcomFlag());
      WordPress.wpDB.saveMediaFile(mediaFile);
      AppLog.d(AppLog.T.POSTS,""String_Node_Str"" + mediaFile.getFileURL());
      EventBus.getDefault().post(new PostEvents.PostMediaInfoUpdated(mediaId,mediaFile.getFileURL()));
    }
  }
 catch (  ClassCastException|XMLRPCException|XmlPullParserException|IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
  }
}",0.9937888198757764
14212,"private void fetchPostsInBlog(int blogId,boolean isPage,boolean loadMore){
  Blog blog=WordPress.getBlog(blogId);
  if (blog == null) {
    return;
  }
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  int numPostsToRequest;
  if (loadMore) {
    int numExisting=WordPress.wpDB.getUploadedCountInBlog(blogId,isPage);
    numPostsToRequest=numExisting + NUM_POSTS_TO_REQUEST;
  }
 else {
    numPostsToRequest=NUM_POSTS_TO_REQUEST;
  }
  Object[] result;
  Object[] xmlrpcParams={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),numPostsToRequest};
  PostEvents.RequestPosts event=new PostEvents.RequestPosts(blogId,isPage);
  try {
    boolean canLoadMore;
    result=(Object[])client.call(isPage ? ApiHelper.Methods.GET_PAGES : ""String_Node_Str"",xmlrpcParams);
    if (result != null && result.length > 0) {
      canLoadMore=true;
      int startPosition=0;
      if (loadMore && result.length > NUM_POSTS_TO_REQUEST) {
        startPosition=result.length - NUM_POSTS_TO_REQUEST;
      }
      List<Map<?,?>> postsList=new ArrayList<>();
      for (int ctr=startPosition; ctr < result.length; ctr++) {
        Map<?,?> postMap=(Map<?,?>)result[ctr];
        postsList.add(postMap);
      }
      if (!loadMore) {
        WordPress.wpDB.deleteUploadedPosts(blogId,isPage);
      }
      WordPress.wpDB.savePosts(postsList,blogId,isPage,false);
    }
 else {
      canLoadMore=false;
    }
    event.setCanLoadMore(canLoadMore);
  }
 catch (  XMLRPCException|IOException|XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
    ApiHelper.ErrorType errorType;
    if (e instanceof XMLRPCFault) {
      if (((XMLRPCFault)(e)).getFaultCode() == 401) {
        errorType=ApiHelper.ErrorType.UNAUTHORIZED;
      }
 else {
        errorType=ApiHelper.ErrorType.NETWORK_XMLRPC;
      }
    }
 else {
      errorType=ApiHelper.ErrorType.INVALID_RESULT;
    }
    event.setErrorType(errorType);
  }
  EventBus.getDefault().post(event);
}","private void fetchPostsInBlog(int blogId,boolean isPage,boolean loadMore){
  Blog blog=WordPress.getBlog(blogId);
  if (blog == null) {
    return;
  }
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  int numPostsToRequest;
  if (loadMore) {
    int numExisting=WordPress.wpDB.getUploadedCountInBlog(blogId,isPage);
    numPostsToRequest=numExisting + NUM_POSTS_TO_REQUEST;
  }
 else {
    numPostsToRequest=NUM_POSTS_TO_REQUEST;
  }
  Object[] result;
  Object[] xmlrpcParams={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),numPostsToRequest};
  PostEvents.RequestPosts event=new PostEvents.RequestPosts(blogId,isPage);
  try {
    boolean canLoadMore;
    result=(Object[])client.call(isPage ? Method.GET_PAGES : ""String_Node_Str"",xmlrpcParams);
    if (result != null && result.length > 0) {
      canLoadMore=true;
      int startPosition=0;
      if (loadMore && result.length > NUM_POSTS_TO_REQUEST) {
        startPosition=result.length - NUM_POSTS_TO_REQUEST;
      }
      List<Map<?,?>> postsList=new ArrayList<>();
      for (int ctr=startPosition; ctr < result.length; ctr++) {
        Map<?,?> postMap=(Map<?,?>)result[ctr];
        postsList.add(postMap);
      }
      if (!loadMore) {
        WordPress.wpDB.deleteUploadedPosts(blogId,isPage);
      }
      WordPress.wpDB.savePosts(postsList,blogId,isPage,false);
    }
 else {
      canLoadMore=false;
    }
    event.setCanLoadMore(canLoadMore);
  }
 catch (  XMLRPCException|IOException|XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
    ApiHelper.ErrorType errorType;
    if (e instanceof XMLRPCFault) {
      if (((XMLRPCFault)(e)).getFaultCode() == 401) {
        errorType=ApiHelper.ErrorType.UNAUTHORIZED;
      }
 else {
        errorType=ApiHelper.ErrorType.NETWORK_XMLRPC;
      }
    }
 else {
      errorType=ApiHelper.ErrorType.INVALID_RESULT;
    }
    event.setErrorType(errorType);
  }
  EventBus.getDefault().post(event);
}",0.9972616380383372
14213,"private Object uploadFileHelper(Object[] params,final File tempFile){
  if (mClient instanceof XMLRPCClient) {
    XMLRPCClient xmlrpcClient=(XMLRPCClient)mClient;
    xmlrpcClient.setOnBytesUploadedListener(new XMLRPCClient.OnBytesUploadedListener(){
      @Override public void onBytesUploaded(      long uploadedBytes){
        if (tempFile.length() == 0) {
          return;
        }
        float percentage=(uploadedBytes * 100) / tempFile.length();
        mPostUploadNotifier.updateNotificationProgress(percentage);
      }
    }
);
  }
  try {
    return mClient.call(ApiHelper.Methods.UPLOAD_FILE,params,tempFile);
  }
 catch (  XMLRPCException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
catch (  IOException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload_connection);
    return null;
  }
catch (  XmlPullParserException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload);
    return null;
  }
 finally {
    if (tempFile != null && tempFile.exists()) {
      tempFile.delete();
    }
  }
}","private Object uploadFileHelper(Object[] params,final File tempFile){
  if (mClient instanceof XMLRPCClient) {
    XMLRPCClient xmlrpcClient=(XMLRPCClient)mClient;
    xmlrpcClient.setOnBytesUploadedListener(new XMLRPCClient.OnBytesUploadedListener(){
      @Override public void onBytesUploaded(      long uploadedBytes){
        if (tempFile.length() == 0) {
          return;
        }
        float percentage=(uploadedBytes * 100) / tempFile.length();
        mPostUploadNotifier.updateNotificationProgress(percentage);
      }
    }
);
  }
  try {
    return mClient.call(Method.UPLOAD_FILE,params,tempFile);
  }
 catch (  XMLRPCException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
catch (  IOException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload_connection);
    return null;
  }
catch (  XmlPullParserException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload);
    return null;
  }
 finally {
    if (tempFile != null && tempFile.exists()) {
      tempFile.delete();
    }
  }
}",0.9955663039097138
14214,"/** 
 * Request remote site data via XML-RPC.
 */
@Override protected void fetchRemoteData(){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword()};
      instantiateInterface().callAsync(mOptionsCallback,ApiHelper.Methods.GET_OPTIONS,params);
      instantiateInterface().callAsync(mCategoriesCallback,ApiHelper.Methods.GET_CATEGORIES,params);
    }
  }
);
  thread.run();
}","/** 
 * Request remote site data via XML-RPC.
 */
@Override protected void fetchRemoteData(){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword()};
      instantiateInterface().callAsync(mOptionsCallback,Method.GET_OPTIONS,params);
      instantiateInterface().callAsync(mCategoriesCallback,Method.GET_CATEGORIES,params);
    }
  }
);
  thread.run();
}",0.9767932489451476
14215,"@Override public void run(){
  Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword()};
  instantiateInterface().callAsync(mOptionsCallback,ApiHelper.Methods.GET_OPTIONS,params);
  instantiateInterface().callAsync(mCategoriesCallback,ApiHelper.Methods.GET_CATEGORIES,params);
}","@Override public void run(){
  Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword()};
  instantiateInterface().callAsync(mOptionsCallback,Method.GET_OPTIONS,params);
  instantiateInterface().callAsync(mCategoriesCallback,Method.GET_CATEGORIES,params);
}",0.9143835616438356
14216,"@Override public void saveSettings(){
  super.saveSettings();
  final Map<String,String> params=serializeSelfHostedParams();
  if (params == null || params.isEmpty())   return;
  XMLRPCCallback callback=new XMLRPCCallback(){
    @Override public void onSuccess(    long id,    final Object result){
      notifySavedOnUiThread(null);
      mRemoteSettings.copyFrom(mSettings);
      if (result != null) {
        HashMap<String,Object> properties=new HashMap<>();
        if (result instanceof Map) {
          Map<String,Object> resultMap=(Map)result;
          Set<String> keys=resultMap.keySet();
          for (          String key : keys) {
            Object currentValue=resultMap.get(key);
            if (currentValue != null) {
              properties.put(SAVED_ITEM_PREFIX + key,currentValue);
            }
          }
        }
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SITE_SETTINGS_SAVED_REMOTELY,properties);
      }
    }
    @Override public void onFailure(    long id,    final Exception error){
      notifySavedOnUiThread(error);
    }
  }
;
  final Object[] callParams={mBlog.getRemoteBlogId(),mSettings.username,mSettings.password,params};
  XMLRPCClientInterface xmlrpcInterface=instantiateInterface();
  if (xmlrpcInterface == null)   return;
  xmlrpcInterface.callAsync(callback,ApiHelper.Methods.SET_OPTIONS,callParams);
}","@Override public void saveSettings(){
  super.saveSettings();
  final Map<String,String> params=serializeSelfHostedParams();
  if (params == null || params.isEmpty())   return;
  XMLRPCCallback callback=new XMLRPCCallback(){
    @Override public void onSuccess(    long id,    final Object result){
      notifySavedOnUiThread(null);
      mRemoteSettings.copyFrom(mSettings);
      if (result != null) {
        HashMap<String,Object> properties=new HashMap<>();
        if (result instanceof Map) {
          Map<String,Object> resultMap=(Map)result;
          Set<String> keys=resultMap.keySet();
          for (          String key : keys) {
            Object currentValue=resultMap.get(key);
            if (currentValue != null) {
              properties.put(SAVED_ITEM_PREFIX + key,currentValue);
            }
          }
        }
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SITE_SETTINGS_SAVED_REMOTELY,properties);
      }
    }
    @Override public void onFailure(    long id,    final Exception error){
      notifySavedOnUiThread(error);
    }
  }
;
  final Object[] callParams={mBlog.getRemoteBlogId(),mSettings.username,mSettings.password,params};
  XMLRPCClientInterface xmlrpcInterface=instantiateInterface();
  if (xmlrpcInterface == null)   return;
  xmlrpcInterface.callAsync(callback,Method.SET_OPTIONS,callParams);
}",0.9960014540167212
14217,"/** 
 * Gets available post formats via XML-RPC. Since both self-hosted and .com sites retrieve the format list via XML-RPC there is no need to implement this in the sub-classes.
 */
private void fetchPostFormats(){
  XMLRPCClientInterface client=instantiateInterface();
  if (client == null)   return;
  Map<String,String> args=new HashMap<>();
  args.put(ApiHelper.Params.SHOW_SUPPORTED_POST_FORMATS,""String_Node_Str"");
  Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),args};
  client.callAsync(new XMLRPCCallback(){
    @Override public void onSuccess(    long id,    Object result){
      credentialsVerified(true);
      if (result != null && result instanceof HashMap) {
        Map<?,?> resultMap=(HashMap<?,?>)result;
        Map allFormats;
        Object[] supportedFormats;
        if (resultMap.containsKey(""String_Node_Str"")) {
          allFormats=(Map)resultMap.get(""String_Node_Str"");
          supportedFormats=(Object[])resultMap.get(""String_Node_Str"");
        }
 else {
          allFormats=resultMap;
          supportedFormats=allFormats.keySet().toArray();
        }
        mRemoteSettings.postFormats=new HashMap<>();
        mRemoteSettings.postFormats.put(""String_Node_Str"",""String_Node_Str"");
        for (        Object supportedFormat : supportedFormats) {
          if (allFormats.containsKey(supportedFormat)) {
            mRemoteSettings.postFormats.put(supportedFormat.toString(),allFormats.get(supportedFormat).toString());
          }
        }
        mSettings.postFormats=new HashMap<>(mRemoteSettings.postFormats);
        String[] formatKeys=new String[mRemoteSettings.postFormats.size()];
        mRemoteSettings.postFormatKeys=mRemoteSettings.postFormats.keySet().toArray(formatKeys);
        mSettings.postFormatKeys=mRemoteSettings.postFormatKeys.clone();
        notifyUpdatedOnUiThread(null);
      }
    }
    @Override public void onFailure(    long id,    Exception error){
    }
  }
,ApiHelper.Methods.GET_POST_FORMATS,params);
}","/** 
 * Gets available post formats via XML-RPC. Since both self-hosted and .com sites retrieve the format list via XML-RPC there is no need to implement this in the sub-classes.
 */
private void fetchPostFormats(){
  XMLRPCClientInterface client=instantiateInterface();
  if (client == null)   return;
  Map<String,String> args=new HashMap<>();
  args.put(Param.SHOW_SUPPORTED_POST_FORMATS,""String_Node_Str"");
  Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),args};
  client.callAsync(new XMLRPCCallback(){
    @Override public void onSuccess(    long id,    Object result){
      credentialsVerified(true);
      if (result != null && result instanceof HashMap) {
        Map<?,?> resultMap=(HashMap<?,?>)result;
        Map allFormats;
        Object[] supportedFormats;
        if (resultMap.containsKey(""String_Node_Str"")) {
          allFormats=(Map)resultMap.get(""String_Node_Str"");
          supportedFormats=(Object[])resultMap.get(""String_Node_Str"");
        }
 else {
          allFormats=resultMap;
          supportedFormats=allFormats.keySet().toArray();
        }
        mRemoteSettings.postFormats=new HashMap<>();
        mRemoteSettings.postFormats.put(""String_Node_Str"",""String_Node_Str"");
        for (        Object supportedFormat : supportedFormats) {
          if (allFormats.containsKey(supportedFormat)) {
            mRemoteSettings.postFormats.put(supportedFormat.toString(),allFormats.get(supportedFormat).toString());
          }
        }
        mSettings.postFormats=new HashMap<>(mRemoteSettings.postFormats);
        String[] formatKeys=new String[mRemoteSettings.postFormats.size()];
        mRemoteSettings.postFormatKeys=mRemoteSettings.postFormats.keySet().toArray(formatKeys);
        mSettings.postFormatKeys=mRemoteSettings.postFormatKeys.clone();
        notifyUpdatedOnUiThread(null);
      }
    }
    @Override public void onFailure(    long id,    Exception error){
    }
  }
,Method.GET_POST_FORMATS,params);
}",0.9945109780439122
14218,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == SignInActivity.REQUEST_CODE) {
    if (resultCode == RESULT_CANCELED) {
      finish();
    }
    mResultCode=resultCode;
    final Blog currentBlog=WordPress.getBlog(mLocalBlogID);
    if (resultCode == RESULT_OK && currentBlog != null && !currentBlog.isDotcomFlag()) {
      if (StatsUtils.getBlogId(mLocalBlogID) == null) {
        final Handler handler=new Handler();
        XMLRPCClientInterface xmlrpcClient=XMLRPCFactory.instantiate(currentBlog.getUri(),""String_Node_Str"",""String_Node_Str"");
        Map<String,String> args=ApiHelper.blogOptionsXMLRPCParameters;
        Object[] params={currentBlog.getRemoteBlogId(),currentBlog.getUsername(),currentBlog.getPassword(),args};
        xmlrpcClient.callAsync(new XMLRPCCallback(){
          @Override public void onSuccess(          long id,          Object result){
            if (result != null && (result instanceof HashMap)) {
              Map<?,?> blogOptions=(HashMap<?,?>)result;
              ApiHelper.updateBlogOptions(currentBlog,blogOptions);
              AnalyticsUtils.refreshMetadata();
              AnalyticsUtils.trackWithBlogDetails(AnalyticsTracker.Stat.SIGNED_INTO_JETPACK,currentBlog);
              AnalyticsUtils.trackWithBlogDetails(AnalyticsTracker.Stat.PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN,currentBlog);
              if (isFinishing()) {
                return;
              }
              if (NetworkUtils.checkConnection(StatsActivity.this)) {
                handler.post(new Runnable(){
                  @Override public void run(){
                    mSwipeToRefreshHelper.setRefreshing(true);
                    mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
                    createFragments(true);
                  }
                }
);
              }
            }
          }
          @Override public void onFailure(          long id,          Exception error){
            AppLog.e(T.STATS,""String_Node_Str"" + ""String_Node_Str"",error);
            handler.post(new Runnable(){
              @Override public void run(){
                mSwipeToRefreshHelper.setRefreshing(false);
                ToastUtils.showToast(StatsActivity.this,StatsActivity.this.getString(R.string.error_refresh_stats),Duration.LONG);
              }
            }
);
          }
        }
,ApiHelper.Methods.GET_OPTIONS,params);
      }
 else {
        mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
        createFragments(true);
      }
      mSwipeToRefreshHelper.setRefreshing(true);
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == SignInActivity.REQUEST_CODE) {
    if (resultCode == RESULT_CANCELED) {
      finish();
    }
    mResultCode=resultCode;
    final Blog currentBlog=WordPress.getBlog(mLocalBlogID);
    if (resultCode == RESULT_OK && currentBlog != null && !currentBlog.isDotcomFlag()) {
      if (StatsUtils.getBlogId(mLocalBlogID) == null) {
        final Handler handler=new Handler();
        XMLRPCClientInterface xmlrpcClient=XMLRPCFactory.instantiate(currentBlog.getUri(),""String_Node_Str"",""String_Node_Str"");
        Map<String,String> args=ApiHelper.blogOptionsXMLRPCParameters;
        Object[] params={currentBlog.getRemoteBlogId(),currentBlog.getUsername(),currentBlog.getPassword(),args};
        xmlrpcClient.callAsync(new XMLRPCCallback(){
          @Override public void onSuccess(          long id,          Object result){
            if (result != null && (result instanceof HashMap)) {
              Map<?,?> blogOptions=(HashMap<?,?>)result;
              ApiHelper.updateBlogOptions(currentBlog,blogOptions);
              AnalyticsUtils.refreshMetadata();
              AnalyticsUtils.trackWithBlogDetails(AnalyticsTracker.Stat.SIGNED_INTO_JETPACK,currentBlog);
              AnalyticsUtils.trackWithBlogDetails(AnalyticsTracker.Stat.PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN,currentBlog);
              if (isFinishing()) {
                return;
              }
              if (NetworkUtils.checkConnection(StatsActivity.this)) {
                handler.post(new Runnable(){
                  @Override public void run(){
                    mSwipeToRefreshHelper.setRefreshing(true);
                    mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
                    createFragments(true);
                  }
                }
);
              }
            }
          }
          @Override public void onFailure(          long id,          Exception error){
            AppLog.e(T.STATS,""String_Node_Str"" + ""String_Node_Str"",error);
            handler.post(new Runnable(){
              @Override public void run(){
                mSwipeToRefreshHelper.setRefreshing(false);
                ToastUtils.showToast(StatsActivity.this,StatsActivity.this.getString(R.string.error_refresh_stats),Duration.LONG);
              }
            }
);
          }
        }
,Method.GET_OPTIONS,params);
      }
 else {
        mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
        createFragments(true);
      }
      mSwipeToRefreshHelper.setRefreshing(true);
    }
  }
}",0.9979427716476528
14219,"@Override public void onResume(){
  super.onResume();
  refreshAccountDetails();
  EventBus.getDefault().register(this);
}","@Override public void onResume(){
  super.onResume();
  refreshAccountDetails();
}",0.803921568627451
14220,"private void updateLabel(WPTextView textView,String text){
  if (text == null || text.isEmpty()) {
    textView.setVisibility(View.GONE);
  }
 else {
    textView.setVisibility(View.VISIBLE);
    textView.setText(text);
  }
}","private void updateLabel(WPTextView textView,String text){
  textView.setText(text);
  if (text == null || text.isEmpty()) {
    textView.setVisibility(View.GONE);
  }
 else {
    textView.setVisibility(View.VISIBLE);
  }
}",0.8794642857142857
14221,"public void updateAccountSettingsFromRestResponse(JSONObject json){
  mFirstName=json.optString(""String_Node_Str"");
  mLastName=json.optString(""String_Node_Str"");
  mAboutMe=json.optString(""String_Node_Str"");
}","public void updateAccountSettingsFromRestResponse(JSONObject json){
  mFirstName=json.optString(""String_Node_Str"");
  mLastName=json.optString(""String_Node_Str"");
  mDisplayName=json.optString(""String_Node_Str"");
  mAboutMe=json.optString(""String_Node_Str"");
}",0.8936170212765957
14222,"private void handleDefaultPush(String from,@NonNull Bundle data){
  SimperiumUtils.configureSimperium(this,AccountHelper.getDefaultAccount().getAccessToken());
  long wpcomUserId=AccountHelper.getDefaultAccount().getUserId();
  String pushUserId=data.getString(PUSH_ARG_USER);
  if (!String.valueOf(wpcomUserId).equals(pushUserId)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  String noteType=StringUtils.notNullStr(data.getString(PUSH_ARG_TYPE));
  if (noteType.equals(PUSH_TYPE_PUSH_AUTH)) {
    handlePushAuth(from,data);
    return;
  }
  String title=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_TITLE));
  if (title == null) {
    title=getString(R.string.app_name);
  }
  String message=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_MSG));
  String noteId=data.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"");
  long thisTime=System.currentTimeMillis();
  if (mPreviousNoteId != null && mPreviousNoteId.equals(noteId)) {
    long seconds=TimeUnit.MILLISECONDS.toSeconds(thisTime - mPreviousNoteTime);
    if (seconds <= 1) {
      AppLog.w(T.NOTIFS,""String_Node_Str"");
      return;
    }
  }
  mPreviousNoteId=noteId;
  mPreviousNoteTime=thisTime;
  int pushId=0;
  for (  int id : mActiveNotificationsMap.keySet()) {
    Bundle noteBundle=mActiveNotificationsMap.get(id);
    if (noteBundle != null && noteBundle.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"").equals(noteId)) {
      pushId=id;
      mActiveNotificationsMap.put(pushId,data);
      break;
    }
  }
  if (pushId == 0) {
    pushId=PUSH_NOTIFICATION_ID + mActiveNotificationsMap.size();
    mActiveNotificationsMap.put(pushId,data);
  }
  String iconUrl=data.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconUrl != null) {
    try {
      iconUrl=URLDecoder.decode(iconUrl,""String_Node_Str"");
      int largeIconSize=getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_height);
      String resizedUrl=PhotonUtils.getPhotonImageUrl(iconUrl,largeIconSize,largeIconSize);
      largeIconBitmap=ImageUtils.downloadBitmap(resizedUrl);
      if (largeIconBitmap != null && shouldCircularizeNoteIcon(noteType)) {
        largeIconBitmap=ImageUtils.getCircularBitmap(largeIconBitmap);
      }
    }
 catch (    UnsupportedEncodingException e) {
      AppLog.e(T.NOTIFS,e);
    }
  }
  Map<String,String> properties=new HashMap<>();
  if (!TextUtils.isEmpty(noteType)) {
    if (noteType.equals(PUSH_TYPE_COMMENT)) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      properties.put(""String_Node_Str"",noteType);
    }
  }
  AnalyticsTracker.track(Stat.PUSH_NOTIFICATION_RECEIVED,properties);
  NotificationCompat.Builder builder;
  builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setColor(getResources().getColor(R.color.blue_wordpress)).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setGroup(NOTIFICATION_GROUP_KEY);
  if (noteType.equals(PUSH_TYPE_COMMENT)) {
    Intent commentReplyIntent=new Intent(this,WPMainActivity.class);
    commentReplyIntent.putExtra(WPMainActivity.ARG_OPENED_FROM_PUSH,true);
    commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
    commentReplyIntent.setAction(""String_Node_Str"");
    commentReplyIntent.addCategory(""String_Node_Str"");
    commentReplyIntent.addCategory(""String_Node_Str"");
    commentReplyIntent.putExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,true);
    if (noteId != null) {
      commentReplyIntent.putExtra(NotificationsListFragment.NOTE_ID_EXTRA,noteId);
    }
    PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(this,0,commentReplyIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    builder.addAction(R.drawable.ic_reply_white_24dp,getText(R.string.reply),commentReplyPendingIntent);
  }
  if (largeIconBitmap != null) {
    builder.setLargeIcon(largeIconBitmap);
  }
  showNotificationForBuilder(builder,this,pushId);
  if (mActiveNotificationsMap.size() > 1) {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle pushBundle : mActiveNotificationsMap.values()) {
      if (noteCtr > mMaxInboxItems) {
        break;
      }
      if (pushBundle == null || pushBundle.getString(PUSH_ARG_MSG) == null) {
        continue;
      }
      if (pushBundle.getString(PUSH_ARG_TYPE,""String_Node_Str"").equals(PUSH_TYPE_COMMENT)) {
        String pnTitle=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_TITLE)));
        String pnMessage=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnTitle + ""String_Node_Str"" + pnMessage);
      }
 else {
        String pnMessage=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnMessage);
      }
      noteCtr++;
    }
    if (mActiveNotificationsMap.size() > mMaxInboxItems) {
      inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),mActiveNotificationsMap.size() - mMaxInboxItems));
    }
    String subject=String.format(getString(R.string.new_notifications),mActiveNotificationsMap.size());
    NotificationCompat.Builder groupBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setColor(getResources().getColor(R.color.blue_wordpress)).setGroup(NOTIFICATION_GROUP_KEY).setGroupSummary(true).setAutoCancel(true).setTicker(message).setContentTitle(getString(R.string.app_name)).setContentText(subject).setStyle(inboxStyle);
    showNotificationForBuilder(groupBuilder,this,GROUP_NOTIFICATION_ID);
  }
 else {
    builder.setGroupSummary(true);
    showNotificationForBuilder(builder,this,GROUP_NOTIFICATION_ID);
  }
  EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
}","private void handleDefaultPush(String from,@NonNull Bundle data){
  SimperiumUtils.configureSimperium(this,AccountHelper.getDefaultAccount().getAccessToken());
  long wpcomUserId=AccountHelper.getDefaultAccount().getUserId();
  String pushUserId=data.getString(PUSH_ARG_USER);
  if (!String.valueOf(wpcomUserId).equals(pushUserId)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  String noteType=StringUtils.notNullStr(data.getString(PUSH_ARG_TYPE));
  if (noteType.equals(PUSH_TYPE_PUSH_AUTH)) {
    handlePushAuth(from,data);
    return;
  }
  String title=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_TITLE));
  if (title == null) {
    title=getString(R.string.app_name);
  }
  String message=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_MSG));
  String noteId=data.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"");
  long thisTime=System.currentTimeMillis();
  if (mPreviousNoteId != null && mPreviousNoteId.equals(noteId)) {
    long seconds=TimeUnit.MILLISECONDS.toSeconds(thisTime - mPreviousNoteTime);
    if (seconds <= 1) {
      AppLog.w(T.NOTIFS,""String_Node_Str"");
      return;
    }
  }
  mPreviousNoteId=noteId;
  mPreviousNoteTime=thisTime;
  int pushId=0;
  for (  Integer id : mActiveNotificationsMap.keySet()) {
    if (id == null) {
      continue;
    }
    Bundle noteBundle=mActiveNotificationsMap.get(id);
    if (noteBundle != null && noteBundle.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"").equals(noteId)) {
      pushId=id;
      mActiveNotificationsMap.put(pushId,data);
      break;
    }
  }
  if (pushId == 0) {
    pushId=PUSH_NOTIFICATION_ID + mActiveNotificationsMap.size();
    mActiveNotificationsMap.put(pushId,data);
  }
  String iconUrl=data.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconUrl != null) {
    try {
      iconUrl=URLDecoder.decode(iconUrl,""String_Node_Str"");
      int largeIconSize=getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_height);
      String resizedUrl=PhotonUtils.getPhotonImageUrl(iconUrl,largeIconSize,largeIconSize);
      largeIconBitmap=ImageUtils.downloadBitmap(resizedUrl);
      if (largeIconBitmap != null && shouldCircularizeNoteIcon(noteType)) {
        largeIconBitmap=ImageUtils.getCircularBitmap(largeIconBitmap);
      }
    }
 catch (    UnsupportedEncodingException e) {
      AppLog.e(T.NOTIFS,e);
    }
  }
  Map<String,String> properties=new HashMap<>();
  if (!TextUtils.isEmpty(noteType)) {
    if (noteType.equals(PUSH_TYPE_COMMENT)) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      properties.put(""String_Node_Str"",noteType);
    }
  }
  AnalyticsTracker.track(Stat.PUSH_NOTIFICATION_RECEIVED,properties);
  NotificationCompat.Builder builder;
  builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setColor(getResources().getColor(R.color.blue_wordpress)).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setGroup(NOTIFICATION_GROUP_KEY);
  if (noteType.equals(PUSH_TYPE_COMMENT)) {
    Intent commentReplyIntent=new Intent(this,WPMainActivity.class);
    commentReplyIntent.putExtra(WPMainActivity.ARG_OPENED_FROM_PUSH,true);
    commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
    commentReplyIntent.setAction(""String_Node_Str"");
    commentReplyIntent.addCategory(""String_Node_Str"");
    commentReplyIntent.addCategory(""String_Node_Str"");
    commentReplyIntent.putExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,true);
    if (noteId != null) {
      commentReplyIntent.putExtra(NotificationsListFragment.NOTE_ID_EXTRA,noteId);
    }
    PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(this,0,commentReplyIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    builder.addAction(R.drawable.ic_reply_white_24dp,getText(R.string.reply),commentReplyPendingIntent);
  }
  if (largeIconBitmap != null) {
    builder.setLargeIcon(largeIconBitmap);
  }
  showNotificationForBuilder(builder,this,pushId);
  if (mActiveNotificationsMap.size() > 1) {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle pushBundle : mActiveNotificationsMap.values()) {
      if (noteCtr > mMaxInboxItems) {
        break;
      }
      if (pushBundle == null || pushBundle.getString(PUSH_ARG_MSG) == null) {
        continue;
      }
      if (pushBundle.getString(PUSH_ARG_TYPE,""String_Node_Str"").equals(PUSH_TYPE_COMMENT)) {
        String pnTitle=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_TITLE)));
        String pnMessage=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnTitle + ""String_Node_Str"" + pnMessage);
      }
 else {
        String pnMessage=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnMessage);
      }
      noteCtr++;
    }
    if (mActiveNotificationsMap.size() > mMaxInboxItems) {
      inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),mActiveNotificationsMap.size() - mMaxInboxItems));
    }
    String subject=String.format(getString(R.string.new_notifications),mActiveNotificationsMap.size());
    NotificationCompat.Builder groupBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setColor(getResources().getColor(R.color.blue_wordpress)).setGroup(NOTIFICATION_GROUP_KEY).setGroupSummary(true).setAutoCancel(true).setTicker(message).setContentTitle(getString(R.string.app_name)).setContentText(subject).setStyle(inboxStyle);
    showNotificationForBuilder(groupBuilder,this,GROUP_NOTIFICATION_ID);
  }
 else {
    builder.setGroupSummary(true);
    showNotificationForBuilder(builder,this,GROUP_NOTIFICATION_ID);
  }
  EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
}",0.9954819277108434
14223,"private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  String toastText=getString(R.string.no_network_message);
  if (NetworkUtils.isNetworkAvailable(this)) {
    if (mCurrentTheme != null) {
      boolean isCurrentTheme=mCurrentTheme.getId().equals(themeId);
      Map<String,Object> themeProperties=new HashMap<>();
      themeProperties.put(THEME_ID,themeId);
switch (type) {
case PREVIEW:
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_PREVIEWED_SITE,themeProperties);
      break;
case DEMO:
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DEMO_ACCESSED,themeProperties);
  break;
case DETAILS:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DETAILS_ACCESSED,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_SUPPORT_ACCESSED,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,themeId,type,isCurrentTheme);
return;
}
 else {
toastText=getString(R.string.could_not_load_theme);
}
}
Toast.makeText(this,toastText,Toast.LENGTH_SHORT).show();
}","private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  String toastText=getString(R.string.no_network_message);
  if (NetworkUtils.isNetworkAvailable(this)) {
    if (mCurrentTheme != null) {
      boolean isCurrentTheme=mCurrentTheme.getId().equals(themeId);
      Map<String,Object> themeProperties=new HashMap<>();
      themeProperties.put(THEME_ID,themeId);
switch (type) {
case PREVIEW:
        if (isCurrentTheme) {
          AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_CUSTOMIZE_ACCESSED,themeProperties);
        }
 else {
          AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_PREVIEWED_SITE,themeProperties);
        }
      break;
case DEMO:
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DEMO_ACCESSED,themeProperties);
  break;
case DETAILS:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DETAILS_ACCESSED,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_SUPPORT_ACCESSED,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,themeId,type,isCurrentTheme);
return;
}
 else {
toastText=getString(R.string.could_not_load_theme);
}
}
Toast.makeText(this,toastText,Toast.LENGTH_SHORT).show();
}",0.9270281288218508
14224,"private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  String toastText=getString(R.string.no_network_message);
  if (NetworkUtils.isNetworkAvailable(this)) {
    if (mCurrentTheme != null) {
      boolean isCurrentTheme=mCurrentTheme.getId().equals(themeId);
      Map<String,Object> themeProperties=new HashMap<>();
      themeProperties.put(THEME_ID,themeId);
switch (type) {
case PREVIEW:
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_PREVIEWED_SITE,themeProperties);
      break;
case DEMO:
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DEMO_ACCESSED,themeProperties);
  break;
case DETAILS:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DETAILS_ACCESSED,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_SUPPORT_ACCESSED,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,themeId,type,isCurrentTheme);
return;
}
 else {
toastText=getString(R.string.could_not_load_theme);
}
}
Toast.makeText(this,toastText,Toast.LENGTH_SHORT).show();
}","private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  String toastText=getString(R.string.no_network_message);
  if (NetworkUtils.isNetworkAvailable(this)) {
    if (mCurrentTheme != null) {
      boolean isCurrentTheme=mCurrentTheme.getId().equals(themeId);
      Map<String,Object> themeProperties=new HashMap<>();
      themeProperties.put(THEME_ID,themeId);
switch (type) {
case PREVIEW:
        if (isCurrentTheme) {
          AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_CUSTOMIZE_ACCESSED,themeProperties);
        }
 else {
          AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_PREVIEWED_SITE,themeProperties);
        }
      break;
case DEMO:
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DEMO_ACCESSED,themeProperties);
  break;
case DETAILS:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DETAILS_ACCESSED,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_SUPPORT_ACCESSED,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,themeId,type,isCurrentTheme);
return;
}
 else {
toastText=getString(R.string.could_not_load_theme);
}
}
Toast.makeText(this,toastText,Toast.LENGTH_SHORT).show();
}",0.9270281288218508
14225,"private void showCloseAfterDialog(){
  getNumberPickerDialog(true,mSiteSettings.getCloseAfter() > 0,new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mSwitchChecked=isChecked;
    }
  }
,R.string.close_after_switch_text,R.string.close_after_description,R.string.close_after_header,1,getResources().getInteger(R.integer.close_after_limit),mSiteSettings.getCloseAfter(),R.string.site_settings_close_after_dialog_title,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (mSiteSettings.getCloseAfter() != mNumberPicker.getValue()) {
        if (mSwitchChecked) {
          onPreferenceChange(mCloseAfterPref,mNumberPicker.getValue());
        }
 else {
          onPreferenceChange(mCloseAfterPref,0);
        }
      }
    }
  }
,null);
  mNumberPicker.setFormatter(new NumberPicker.Formatter(){
    @Override public String format(    int value){
      return getResources().getQuantityString(R.plurals.days_quantity,value,value);
    }
  }
);
}","private void showCloseAfterDialog(){
  mSwitchChecked=mSiteSettings.getCloseAfter() > 0;
  getNumberPickerDialog(true,mSwitchChecked,new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mSwitchChecked=isChecked;
    }
  }
,R.string.close_after_switch_text,R.string.close_after_description,R.string.close_after_header,1,getResources().getInteger(R.integer.close_after_limit),mSiteSettings.getCloseAfter(),R.string.site_settings_close_after_dialog_title,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (mSwitchChecked && mSiteSettings.getCloseAfter() != mNumberPicker.getValue()) {
        onPreferenceChange(mCloseAfterPref,mNumberPicker.getValue());
      }
 else {
        onPreferenceChange(mCloseAfterPref,0);
      }
    }
  }
,null);
  mNumberPicker.setFormatter(new NumberPicker.Formatter(){
    @Override public String format(    int value){
      return getResources().getQuantityString(R.plurals.days_quantity,value,value);
    }
  }
);
}",0.8608501118568233
14226,"private void showPagingDialog(){
  getNumberPickerDialog(true,mSiteSettings.getPagingCount() > 0,new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mSwitchChecked=isChecked;
    }
  }
,R.string.site_settings_paging_title,R.string.paging_description,R.string.paging_header,1,getResources().getInteger(R.integer.paging_limit),mSiteSettings.getPagingCount(),R.string.site_settings_paging_title,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (mSiteSettings.getPagingCount() != mNumberPicker.getValue()) {
        if (mSwitchChecked) {
          onPreferenceChange(mPagingPref,mNumberPicker.getValue());
        }
 else {
          onPreferenceChange(mPagingPref,0);
        }
      }
    }
  }
,null);
}","private void showPagingDialog(){
  mSwitchChecked=mSiteSettings.getPagingCount() > 0;
  getNumberPickerDialog(true,mSwitchChecked,new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mSwitchChecked=isChecked;
    }
  }
,R.string.site_settings_paging_title,R.string.paging_description,R.string.paging_header,1,getResources().getInteger(R.integer.paging_limit),mSiteSettings.getPagingCount(),R.string.site_settings_paging_title,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (mSwitchChecked && mSiteSettings.getPagingCount() != mNumberPicker.getValue()) {
        onPreferenceChange(mPagingPref,mNumberPicker.getValue());
      }
 else {
        onPreferenceChange(mPagingPref,0);
      }
    }
  }
,null);
}",0.8113960113960114
14227,"private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  String toastText=getString(R.string.no_network_message);
  if (NetworkUtils.isNetworkAvailable(this)) {
    if (mCurrentTheme != null) {
      boolean isCurrentTheme=mCurrentTheme.getId().equals(themeId);
      Map<String,Object> themeProperties=new HashMap<>();
      themeProperties.put(THEME_ID,themeId);
switch (type) {
case PREVIEW:
        if (isCurrentTheme) {
          AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_CUSTOMIZE_ACCESSED,themeProperties);
        }
 else {
          AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_PREVIEWED_SITE,themeProperties);
        }
      break;
case DEMO:
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DEMO_ACCESSED,themeProperties);
  break;
case DETAILS:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DETAILS_ACCESSED,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_SUPPORT_ACCESSED,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,themeId,type,isCurrentTheme);
return;
}
 else {
toastText=getString(R.string.could_not_load_theme);
}
}
Toast.makeText(this,toastText,Toast.LENGTH_SHORT).show();
}","private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  String toastText=getString(R.string.no_network_message);
  if (NetworkUtils.isNetworkAvailable(this)) {
    if (mCurrentTheme != null) {
      boolean isCurrentTheme=mCurrentTheme.getId().equals(themeId);
      Map<String,Object> themeProperties=new HashMap<>();
      themeProperties.put(THEME_ID,themeId);
switch (type) {
case PREVIEW:
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_PREVIEWED_SITE,themeProperties);
      break;
case DEMO:
    AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DEMO_ACCESSED,themeProperties);
  break;
case DETAILS:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_DETAILS_ACCESSED,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.THEMES_SUPPORT_ACCESSED,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,themeId,type,isCurrentTheme);
return;
}
 else {
toastText=getString(R.string.could_not_load_theme);
}
}
Toast.makeText(this,toastText,Toast.LENGTH_SHORT).show();
}",0.9270281288218508
14228,"private View getListEditorView(final Dialog dialog,String footerText){
  ContextThemeWrapper wrapper=new ContextThemeWrapper(getActivity(),R.style.Calypso_SiteSettingsTheme);
  View view=View.inflate(wrapper,R.layout.list_editor,null);
  ((TextView)view.findViewById(R.id.list_editor_footer_text)).setText(footerText);
  final MultiSelectListView list=(MultiSelectListView)view.findViewById(android.R.id.list);
  list.setEnterMultiSelectListener(new MultiSelectListView.OnEnterMultiSelect(){
    @Override public void onEnterMultiSelect(){
      WPActivityUtils.setStatusBarColor(dialog.getWindow(),R.color.action_mode_status_bar_tint);
    }
  }
);
  list.setExitMultiSelectListener(new MultiSelectListView.OnExitMultiSelect(){
    @Override public void onExitMultiSelect(){
      WPActivityUtils.setStatusBarColor(dialog.getWindow(),R.color.status_bar_tint);
    }
  }
);
  list.setDeleteRequestListener(new MultiSelectListView.OnDeleteRequested(){
    @Override public boolean onDeleteRequested(){
      SparseBooleanArray checkedItems=list.getCheckedItemPositions();
      HashMap<String,Object> properties=new HashMap<>();
      properties.put(""String_Node_Str"",checkedItems.size());
      AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SETTINGS_DELETED_LIST_ITEMS,properties);
      ListAdapter adapter=list.getAdapter();
      for (int i=0; i < checkedItems.size(); i++) {
        final int index=checkedItems.keyAt(i);
        if (checkedItems.get(index) && mEditingList.size() > index) {
          mEditingList.remove(adapter.getItem(index).toString());
        }
      }
      list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
      return true;
    }
  }
);
  list.setEmptyView(view.findViewById(R.id.empty_view));
  list.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
  list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
  view.findViewById(R.id.fab_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
      final EditText input=new EditText(getActivity());
      WPPrefUtils.layoutAsInput(input);
      input.setHint(R.string.list_editor_input_hint);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String entry=input.getText().toString();
          if (!mEditingList.contains(entry)) {
            mEditingList.add(entry);
            list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
            AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SETTINGS_ADDED_LIST_ITEM);
          }
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      AlertDialog alertDialog=builder.create();
      int spacing=getResources().getDimensionPixelSize(R.dimen.dlp_padding_start);
      alertDialog.setView(input,spacing,spacing,spacing,0);
      alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
      alertDialog.show();
      alertDialog.getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT);
      Button positive=alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
      Button negative=alertDialog.getButton(DialogInterface.BUTTON_NEGATIVE);
      if (positive != null)       WPPrefUtils.layoutAsFlatButton(positive);
      if (negative != null)       WPPrefUtils.layoutAsFlatButton(negative);
    }
  }
);
  return view;
}","private View getListEditorView(final Dialog dialog,String footerText){
  ContextThemeWrapper wrapper=new ContextThemeWrapper(getActivity(),R.style.Calypso_SiteSettingsTheme);
  View view=View.inflate(wrapper,R.layout.list_editor,null);
  ((TextView)view.findViewById(R.id.list_editor_footer_text)).setText(footerText);
  final MultiSelectListView list=(MultiSelectListView)view.findViewById(android.R.id.list);
  list.setEnterMultiSelectListener(new MultiSelectListView.OnEnterMultiSelect(){
    @Override public void onEnterMultiSelect(){
      WPActivityUtils.setStatusBarColor(dialog.getWindow(),R.color.action_mode_status_bar_tint);
    }
  }
);
  list.setExitMultiSelectListener(new MultiSelectListView.OnExitMultiSelect(){
    @Override public void onExitMultiSelect(){
      WPActivityUtils.setStatusBarColor(dialog.getWindow(),R.color.status_bar_tint);
    }
  }
);
  list.setDeleteRequestListener(new MultiSelectListView.OnDeleteRequested(){
    @Override public boolean onDeleteRequested(){
      SparseBooleanArray checkedItems=list.getCheckedItemPositions();
      HashMap<String,Object> properties=new HashMap<>();
      properties.put(""String_Node_Str"",checkedItems.size());
      AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SETTINGS_DELETED_LIST_ITEMS,properties);
      ListAdapter adapter=list.getAdapter();
      for (int i=0; i < checkedItems.size(); i++) {
        final int index=checkedItems.keyAt(i);
        if (checkedItems.get(index)) {
          mEditingList.remove(adapter.getItem(index).toString());
        }
      }
      list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
      return true;
    }
  }
);
  list.setEmptyView(view.findViewById(R.id.empty_view));
  list.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
  list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
  view.findViewById(R.id.fab_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
      final EditText input=new EditText(getActivity());
      WPPrefUtils.layoutAsInput(input);
      input.setHint(R.string.list_editor_input_hint);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String entry=input.getText().toString();
          if (!mEditingList.contains(entry)) {
            mEditingList.add(entry);
            list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
            AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SETTINGS_ADDED_LIST_ITEM);
          }
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      AlertDialog alertDialog=builder.create();
      int spacing=getResources().getDimensionPixelSize(R.dimen.dlp_padding_start);
      alertDialog.setView(input,spacing,spacing,spacing,0);
      alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
      alertDialog.show();
      alertDialog.getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT);
      Button positive=alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
      Button negative=alertDialog.getButton(DialogInterface.BUTTON_NEGATIVE);
      if (positive != null)       WPPrefUtils.layoutAsFlatButton(positive);
      if (negative != null)       WPPrefUtils.layoutAsFlatButton(negative);
    }
  }
);
  return view;
}",0.9957644486951768
14229,"@Override public boolean onDeleteRequested(){
  SparseBooleanArray checkedItems=list.getCheckedItemPositions();
  HashMap<String,Object> properties=new HashMap<>();
  properties.put(""String_Node_Str"",checkedItems.size());
  AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SETTINGS_DELETED_LIST_ITEMS,properties);
  ListAdapter adapter=list.getAdapter();
  for (int i=0; i < checkedItems.size(); i++) {
    final int index=checkedItems.keyAt(i);
    if (checkedItems.get(index) && mEditingList.size() > index) {
      mEditingList.remove(adapter.getItem(index).toString());
    }
  }
  list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
  return true;
}","@Override public boolean onDeleteRequested(){
  SparseBooleanArray checkedItems=list.getCheckedItemPositions();
  HashMap<String,Object> properties=new HashMap<>();
  properties.put(""String_Node_Str"",checkedItems.size());
  AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SETTINGS_DELETED_LIST_ITEMS,properties);
  ListAdapter adapter=list.getAdapter();
  for (int i=0; i < checkedItems.size(); i++) {
    final int index=checkedItems.keyAt(i);
    if (checkedItems.get(index)) {
      mEditingList.remove(adapter.getItem(index).toString());
    }
  }
  list.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.wp_simple_list_item_1,mEditingList));
  return true;
}",0.9778095919828204
14230,"@Override protected void onBindDialogView(View view){
  super.onBindDialogView(view);
  if (view != null) {
    Typeface typeface=TypefaceCache.getTypeface(getContext(),TypefaceCache.FAMILY_OPEN_SANS,Typeface.NORMAL,TypefaceCache.VARIATION_NORMAL);
    EditText editText=getEditText();
    ViewParent oldParent=editText.getParent();
    if (oldParent != view) {
      if (oldParent != null) {
        ((ViewGroup)oldParent).removeView(editText);
      }
      ((View)oldParent).setPadding(((View)oldParent).getPaddingLeft(),0,((View)oldParent).getPaddingRight(),((View)oldParent).getPaddingBottom());
      onAddEditTextToDialogView(view,editText);
    }
    editText.setSelection(editText.getText().length());
    editText.setTypeface(typeface);
    editText.setTextColor(getContext().getResources().getColor(R.color.grey_dark));
  }
}","@Override protected void onBindDialogView(final View view){
  super.onBindDialogView(view);
  if (view != null) {
    Typeface typeface=TypefaceCache.getTypeface(getContext(),TypefaceCache.FAMILY_OPEN_SANS,Typeface.NORMAL,TypefaceCache.VARIATION_NORMAL);
    EditText editText=getEditText();
    ViewParent oldParent=editText.getParent();
    if (oldParent != view) {
      if (oldParent != null) {
        ((ViewGroup)oldParent).removeView(editText);
      }
      ((View)oldParent).setPadding(((View)oldParent).getPaddingLeft(),0,((View)oldParent).getPaddingRight(),((View)oldParent).getPaddingBottom());
      onAddEditTextToDialogView(view,editText);
    }
    editText.setSelection(editText.getText().length());
    editText.setTypeface(typeface);
    editText.setTextColor(getContext().getResources().getColor(R.color.grey_dark));
    editText.requestFocusFromTouch();
    (new Handler()).postDelayed(new Runnable(){
      public void run(){
        InputMethodManager inputMethodManager=(InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        inputMethodManager.toggleSoftInputFromWindow(view.getWindowToken(),InputMethodManager.SHOW_FORCED,0);
      }
    }
,SHOW_KEYBOARD_DELAY);
  }
}",0.8085106382978723
14231,"public static boolean dropAllTables(SQLiteDatabase db) throws SQLiteException {
  if (db == null) {
    return false;
  }
  if (db.isReadOnly()) {
    throw new SQLiteException(""String_Node_Str"");
  }
  List<String> tableNames=new ArrayList<String>();
  Cursor cursor=db.rawQuery(""String_Node_Str"",null);
  if (cursor.moveToFirst()) {
    do {
      String tableName=cursor.getString(0);
      if (!tableName.equals(""String_Node_Str"") && !tableName.equals(""String_Node_Str"")) {
        tableNames.add(tableName);
      }
    }
 while (cursor.moveToNext());
  }
  db.beginTransaction();
  try {
    for (    String tableName : tableNames) {
      db.execSQL(""String_Node_Str"" + tableName);
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}","public static boolean dropAllTables(SQLiteDatabase db) throws SQLiteException {
  if (db == null) {
    return false;
  }
  if (db.isReadOnly()) {
    throw new SQLiteException(""String_Node_Str"");
  }
  List<String> tableNames=new ArrayList<String>();
  Cursor cursor=db.rawQuery(""String_Node_Str"",null);
  if (cursor.moveToFirst()) {
    do {
      String tableName=cursor.getString(0);
      if (!tableName.equals(""String_Node_Str"") && !tableName.equals(""String_Node_Str"")) {
        tableNames.add(tableName);
      }
    }
 while (cursor.moveToNext());
  }
  db.beginTransaction();
  try {
    for (    String tableName : tableNames) {
      db.execSQL(""String_Node_Str"" + tableName);
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
    closeCursor(cursor);
  }
}",0.9844816883923028
14232,"private void inflateImageView(){
  ViewStub viewStub=(ViewStub)mView.findViewById(R.id.media_listitem_details_stub);
  if (viewStub != null) {
    if (mIsLocal)     viewStub.setLayoutResource(R.layout.media_grid_image_local);
 else     viewStub.setLayoutResource(R.layout.media_grid_image_network);
    viewStub.inflate();
  }
  mImageView=(ImageView)mView.findViewById(R.id.media_listitem_details_image);
  mProgressView.setVisibility(View.VISIBLE);
  mImageView.setImageDrawable(new ColorDrawable(getResources().getColor(R.color.transparent)));
}","private void inflateImageView(){
  ViewStub viewStub=(ViewStub)mView.findViewById(R.id.media_listitem_details_stub);
  if (viewStub != null) {
    if (mIsLocal)     viewStub.setLayoutResource(R.layout.media_grid_image_local);
 else     viewStub.setLayoutResource(R.layout.media_grid_image_network);
    viewStub.inflate();
  }
  mImageView=(ImageView)mView.findViewById(R.id.media_listitem_details_image);
  mProgressView.setVisibility(View.VISIBLE);
  mImageView.setImageDrawable(new ColorDrawable(getResources().getColor(R.color.grey_lighten_20)));
}",0.9763636363636364
14233,"public void updateFeaturedImage(int id){
  if (mFeaturedImageId != id) {
    mFeaturedImageId=id;
    if (mFeaturedImageId > 0) {
      int blogId=WordPress.getCurrentBlog().getLocalTableBlogId();
      Cursor cursor=WordPress.wpDB.getMediaFile(String.valueOf(blogId),String.valueOf(mFeaturedImageId));
      if (cursor != null && cursor.moveToFirst()) {
        mFeaturedImageView.setVisibility(View.VISIBLE);
        mFeaturedImageButton.setVisibility(View.GONE);
        int maxWidth=getContext().getResources().getDisplayMetrics().widthPixels;
        int padding=DisplayUtils.dpToPx(getContext(),16);
        int imageWidth=(maxWidth - padding);
        String thumbUrl=WordPressMediaUtils.getNetworkThumbnailUrl(cursor,imageWidth);
        WordPressMediaUtils.loadNetworkImage(thumbUrl,mFeaturedImageView);
      }
      if (cursor != null) {
        cursor.close();
      }
    }
 else {
      mFeaturedImageView.setVisibility(View.GONE);
      mFeaturedImageButton.setVisibility(View.VISIBLE);
    }
  }
}","public void updateFeaturedImage(int id){
  if (mFeaturedImageId != id) {
    mFeaturedImageId=id;
    if (mFeaturedImageId > 0) {
      int blogId=WordPress.getCurrentBlog().getLocalTableBlogId();
      Cursor cursor=WordPress.wpDB.getMediaFile(String.valueOf(blogId),String.valueOf(mFeaturedImageId));
      if (cursor != null && cursor.moveToFirst()) {
        mFeaturedImageView.setVisibility(View.VISIBLE);
        mFeaturedImageButton.setVisibility(View.GONE);
        int maxWidth=getResources().getDisplayMetrics().widthPixels;
        int padding=DisplayUtils.dpToPx(getActivity(),16);
        int imageWidth=(maxWidth - padding);
        String thumbUrl=WordPressMediaUtils.getNetworkThumbnailUrl(cursor,imageWidth);
        WordPressMediaUtils.loadNetworkImage(thumbUrl,mFeaturedImageView);
      }
      if (cursor != null) {
        cursor.close();
      }
    }
 else {
      mFeaturedImageView.setVisibility(View.GONE);
      mFeaturedImageButton.setVisibility(View.VISIBLE);
    }
  }
}",0.9860973187686196
14234,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  PreferenceManager.setDefaultValues(getContext(),R.xml.settings,false);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getContext());
  mSupportNewEditor=prefs.getBoolean(getString(R.string.pref_key_visual_editor_enabled),false);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getActivity() != null) {
    PreferenceManager.setDefaultValues(getActivity(),R.xml.settings,false);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getActivity());
    mSupportNewEditor=prefs.getBoolean(getString(R.string.pref_key_visual_editor_enabled),false);
  }
}",0.9054593874833556
14235,"private void launchMediaGalleryActivity(){
  Intent intent=new Intent(getContext(),MediaGalleryPickerActivity.class);
  intent.putExtra(MediaGalleryPickerActivity.PARAM_SELECT_ONE_ITEM,true);
  startActivityForResult(intent,MediaGalleryPickerActivity.REQUEST_CODE);
}","private void launchMediaGalleryActivity(){
  Intent intent=new Intent(getActivity(),MediaGalleryPickerActivity.class);
  intent.putExtra(MediaGalleryPickerActivity.PARAM_SELECT_ONE_ITEM,true);
  startActivityForResult(intent,MediaGalleryPickerActivity.REQUEST_CODE);
}",0.97196261682243
14236,"public static String getPhotonImageUrl(String imageUrl,int width,int height,Quality quality){
  if (TextUtils.isEmpty(imageUrl)) {
    return ""String_Node_Str"";
  }
  int schemePos=imageUrl.indexOf(""String_Node_Str"");
  if (schemePos == -1) {
    return imageUrl;
  }
  imageUrl=UrlUtils.removeQuery(imageUrl);
  if (imageUrl.endsWith(""String_Node_Str"")) {
    return imageUrl;
  }
  if (isMshotsUrl(imageUrl)) {
    return imageUrl + ""String_Node_Str"" + width+ ""String_Node_Str""+ height;
  }
  String query=""String_Node_Str"";
switch (quality) {
case HIGH:
    query+=""String_Node_Str"";
  break;
case LOW:
query+=""String_Node_Str"";
break;
default :
query+=""String_Node_Str"";
break;
}
if (width > 0 && height > 0) {
query+=""String_Node_Str"" + width + ""String_Node_Str""+ height;
}
 else if (width > 0) {
query+=""String_Node_Str"" + width;
}
 else if (height > 0) {
query+=""String_Node_Str"" + height;
}
if (imageUrl.contains(""String_Node_Str"")) {
if (imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"")) return imageUrl + query;
}
if (UrlUtils.isHttps(imageUrl)) {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
 else {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
}","public static String getPhotonImageUrl(String imageUrl,int width,int height,Quality quality){
  if (TextUtils.isEmpty(imageUrl)) {
    return ""String_Node_Str"";
  }
  int schemePos=imageUrl.indexOf(""String_Node_Str"");
  if (schemePos == -1) {
    return imageUrl;
  }
  imageUrl=UrlUtils.removeQuery(imageUrl);
  if (imageUrl.endsWith(""String_Node_Str"")) {
    return imageUrl;
  }
  if (isMshotsUrl(imageUrl)) {
    return imageUrl + ""String_Node_Str"" + width+ ""String_Node_Str""+ height;
  }
  String query=""String_Node_Str"";
switch (quality) {
case HIGH:
    query+=""String_Node_Str"";
  break;
case LOW:
query+=""String_Node_Str"";
break;
default :
query+=""String_Node_Str"";
break;
}
if (width > 0 && height > 0) {
query+=""String_Node_Str"" + width + ""String_Node_Str""+ height;
}
 else if (width > 0) {
query+=""String_Node_Str"" + width;
}
 else if (height > 0) {
query+=""String_Node_Str"" + height;
}
if (imageUrl.contains(""String_Node_Str"")) {
if (imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"")) return imageUrl + query;
}
if (imageUrl.contains(""String_Node_Str"")) {
return imageUrl + query;
}
if (UrlUtils.isHttps(imageUrl)) {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
 else {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
}",0.9737134394668642
14237,"private void configureImageButton(Context context,ThemeViewHolder themeViewHolder,final String themeId,final boolean isPremium,boolean isCurrent){
  final PopupMenu popupMenu=new PopupMenu(context,themeViewHolder.imageButton);
  popupMenu.getMenuInflater().inflate(R.menu.theme_more,popupMenu.getMenu());
  configureMenuForTheme(popupMenu.getMenu(),isCurrent);
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
switch (item.getItemId()) {
case R.id.menu_activate:
        if (isPremium) {
          mCallback.onDetailsSelected(themeId);
        }
 else {
          mCallback.onActivateSelected(themeId);
        }
      break;
case R.id.menu_try_and_customize:
    mCallback.onTryAndCustomizeSelected(themeId);
  break;
case R.id.menu_view:
mCallback.onViewSelected(themeId);
break;
case R.id.menu_details:
mCallback.onDetailsSelected(themeId);
break;
case R.id.menu_support:
default :
mCallback.onSupportSelected(themeId);
break;
}
return true;
}
}
);
themeViewHolder.imageButton.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
popupMenu.show();
}
}
);
}","private void configureImageButton(Context context,ThemeViewHolder themeViewHolder,final String themeId,final boolean isPremium,boolean isCurrent){
  final PopupMenu popupMenu=new PopupMenu(context,themeViewHolder.imageButton);
  popupMenu.getMenuInflater().inflate(R.menu.theme_more,popupMenu.getMenu());
  configureMenuForTheme(popupMenu.getMenu(),isCurrent);
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      int i=item.getItemId();
      if (i == R.id.menu_activate) {
        if (isPremium) {
          mCallback.onDetailsSelected(themeId);
        }
 else {
          mCallback.onActivateSelected(themeId);
        }
      }
 else       if (i == R.id.menu_try_and_customize) {
        mCallback.onTryAndCustomizeSelected(themeId);
      }
 else       if (i == R.id.menu_view) {
        mCallback.onViewSelected(themeId);
      }
 else       if (i == R.id.menu_details) {
        mCallback.onDetailsSelected(themeId);
      }
 else {
        mCallback.onSupportSelected(themeId);
      }
      return true;
    }
  }
);
  themeViewHolder.imageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      popupMenu.show();
    }
  }
);
}",0.6787878787878788
14238,"private void configureCardView(Context context,ThemeViewHolder themeViewHolder,boolean isCurrent){
  Resources resources=context.getResources();
  if (isCurrent) {
    themeViewHolder.detailsView.setBackgroundColor(resources.getColor(R.color.blue_wordpress));
    themeViewHolder.nameView.setTextColor(resources.getColor(R.color.white));
    themeViewHolder.activeView.setVisibility(View.VISIBLE);
    themeViewHolder.cardView.setCardBackgroundColor(resources.getColor(R.color.blue_wordpress));
  }
 else {
    themeViewHolder.detailsView.setBackgroundColor(resources.getColor(R.color.cardview_light_background));
    themeViewHolder.nameView.setTextColor(resources.getColor(R.color.black));
    themeViewHolder.activeView.setVisibility(View.GONE);
    themeViewHolder.cardView.setCardBackgroundColor(resources.getColor(R.color.cardview_light_background));
  }
}","private void configureCardView(Context context,ThemeViewHolder themeViewHolder,boolean isCurrent){
  Resources resources=context.getResources();
  if (isCurrent) {
    themeViewHolder.detailsView.setBackgroundColor(resources.getColor(R.color.blue_wordpress));
    themeViewHolder.nameView.setTextColor(resources.getColor(R.color.white));
    themeViewHolder.activeView.setVisibility(View.VISIBLE);
    themeViewHolder.cardView.setCardBackgroundColor(resources.getColor(R.color.blue_wordpress));
  }
 else {
    themeViewHolder.detailsView.setBackgroundColor(resources.getColor(android.support.v7.cardview.R.color.cardview_light_background));
    themeViewHolder.nameView.setTextColor(resources.getColor(R.color.black));
    themeViewHolder.activeView.setVisibility(View.GONE);
    themeViewHolder.cardView.setCardBackgroundColor(resources.getColor(android.support.v7.cardview.R.color.cardview_light_background));
  }
}",0.9685393258426966
14239,"@Override public boolean onMenuItemClick(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_activate:
    if (isPremium) {
      mCallback.onDetailsSelected(themeId);
    }
 else {
      mCallback.onActivateSelected(themeId);
    }
  break;
case R.id.menu_try_and_customize:
mCallback.onTryAndCustomizeSelected(themeId);
break;
case R.id.menu_view:
mCallback.onViewSelected(themeId);
break;
case R.id.menu_details:
mCallback.onDetailsSelected(themeId);
break;
case R.id.menu_support:
default :
mCallback.onSupportSelected(themeId);
break;
}
return true;
}","@Override public boolean onMenuItemClick(MenuItem item){
  int i=item.getItemId();
  if (i == R.id.menu_activate) {
    if (isPremium) {
      mCallback.onDetailsSelected(themeId);
    }
 else {
      mCallback.onActivateSelected(themeId);
    }
  }
 else   if (i == R.id.menu_try_and_customize) {
    mCallback.onTryAndCustomizeSelected(themeId);
  }
 else   if (i == R.id.menu_view) {
    mCallback.onViewSelected(themeId);
  }
 else   if (i == R.id.menu_details) {
    mCallback.onDetailsSelected(themeId);
  }
 else {
    mCallback.onSupportSelected(themeId);
  }
  return true;
}",0.4847428073234525
14240,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
14241,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
14242,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
14243,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
14244,"/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  mTitlePref=(EditTextPreference)getPref(R.string.pref_key_site_title);
  mTaglinePref=(EditTextPreference)getPref(R.string.pref_key_site_tagline);
  mAddressPref=(EditTextPreference)getPref(R.string.pref_key_site_address);
  mPrivacyPref=(DetailListPreference)getPref(R.string.pref_key_site_visibility);
  mLanguagePref=(DetailListPreference)getPref(R.string.pref_key_site_language);
  mUsernamePref=(EditTextPreference)getPref(R.string.pref_key_site_username);
  mPasswordPref=(EditTextPreference)getPref(R.string.pref_key_site_password);
  mLocationPref=(WPSwitchPreference)getPref(R.string.pref_key_site_location);
  mCategoryPref=(DetailListPreference)getPref(R.string.pref_key_site_category);
  mFormatPref=(DetailListPreference)getPref(R.string.pref_key_site_format);
  mAllowCommentsPref=(WPSwitchPreference)getPref(R.string.pref_key_site_allow_comments);
  mAllowCommentsNested=(WPSwitchPreference)getPref(R.string.pref_key_site_allow_comments_nested);
  mSendPingbacksPref=(WPSwitchPreference)getPref(R.string.pref_key_site_send_pingbacks);
  mSendPingbacksNested=(WPSwitchPreference)getPref(R.string.pref_key_site_send_pingbacks_nested);
  mReceivePingbacksPref=(WPSwitchPreference)getPref(R.string.pref_key_site_receive_pingbacks);
  mReceivePingbacksNested=(WPSwitchPreference)getPref(R.string.pref_key_site_receive_pingbacks_nested);
  mIdentityRequiredPreference=(WPSwitchPreference)getPref(R.string.pref_key_site_identity_required);
  mUserAccountRequiredPref=(WPSwitchPreference)getPref(R.string.pref_key_site_user_account_required);
  mCloseAfterPref=(DetailListPreference)getPref(R.string.pref_key_site_close_after);
  mSortByPref=(DetailListPreference)getPref(R.string.pref_key_site_sort_by);
  mThreadingPref=(DetailListPreference)getPref(R.string.pref_key_site_threading);
  mPagingPref=(DetailListPreference)getPref(R.string.pref_key_site_paging);
  mWhitelistPref=(DetailListPreference)getPref(R.string.pref_key_site_whitelist);
  mMultipleLinksPref=(WPPreference)getPref(R.string.pref_key_site_multiple_links);
  mModerationHoldPref=(WPPreference)getPref(R.string.pref_key_site_moderation_hold);
  mBlacklistPref=(WPPreference)getPref(R.string.pref_key_site_blacklist);
  mRelatedPostsPref=findPreference(getString(R.string.pref_key_site_related_posts));
  mRelatedPostsPref.setOnPreferenceClickListener(this);
  mModerationHoldPref.setOnPreferenceClickListener(this);
  mBlacklistPref.setOnPreferenceClickListener(this);
  if (mBlog.isDotcomFlag()) {
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_account);
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_remove_site);
  }
 else {
    removePreference(R.string.pref_key_site_general,R.string.pref_key_site_visibility);
    removePreference(R.string.pref_key_site_general,R.string.pref_key_site_language);
    removePreference(R.string.pref_key_site_writing,R.string.pref_key_site_related_posts);
    removePreference(R.string.pref_key_site_writing,R.string.pref_key_site_category);
    removePreference(R.string.pref_key_site_writing,R.string.pref_key_site_format);
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_start_over);
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_delete_site);
  }
}","/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  mTitlePref=(EditTextPreference)getPref(R.string.pref_key_site_title);
  mTaglinePref=(EditTextPreference)getPref(R.string.pref_key_site_tagline);
  mAddressPref=(EditTextPreference)getPref(R.string.pref_key_site_address);
  mPrivacyPref=(DetailListPreference)getPref(R.string.pref_key_site_visibility);
  mLanguagePref=(DetailListPreference)getPref(R.string.pref_key_site_language);
  mUsernamePref=(EditTextPreference)getPref(R.string.pref_key_site_username);
  mPasswordPref=(EditTextPreference)getPref(R.string.pref_key_site_password);
  mLocationPref=(WPSwitchPreference)getPref(R.string.pref_key_site_location);
  mCategoryPref=(DetailListPreference)getPref(R.string.pref_key_site_category);
  mFormatPref=(DetailListPreference)getPref(R.string.pref_key_site_format);
  mAllowCommentsPref=(WPSwitchPreference)getPref(R.string.pref_key_site_allow_comments);
  mAllowCommentsNested=(WPSwitchPreference)getPref(R.string.pref_key_site_allow_comments_nested);
  mSendPingbacksPref=(WPSwitchPreference)getPref(R.string.pref_key_site_send_pingbacks);
  mSendPingbacksNested=(WPSwitchPreference)getPref(R.string.pref_key_site_send_pingbacks_nested);
  mReceivePingbacksPref=(WPSwitchPreference)getPref(R.string.pref_key_site_receive_pingbacks);
  mReceivePingbacksNested=(WPSwitchPreference)getPref(R.string.pref_key_site_receive_pingbacks_nested);
  mIdentityRequiredPreference=(WPSwitchPreference)getPref(R.string.pref_key_site_identity_required);
  mUserAccountRequiredPref=(WPSwitchPreference)getPref(R.string.pref_key_site_user_account_required);
  mCloseAfterPref=(DetailListPreference)getPref(R.string.pref_key_site_close_after);
  mSortByPref=(DetailListPreference)getPref(R.string.pref_key_site_sort_by);
  mThreadingPref=(DetailListPreference)getPref(R.string.pref_key_site_threading);
  mPagingPref=(DetailListPreference)getPref(R.string.pref_key_site_paging);
  mWhitelistPref=(DetailListPreference)getPref(R.string.pref_key_site_whitelist);
  mMultipleLinksPref=getPref(R.string.pref_key_site_multiple_links);
  mModerationHoldPref=getPref(R.string.pref_key_site_moderation_hold);
  mBlacklistPref=getPref(R.string.pref_key_site_blacklist);
  mRelatedPostsPref=findPreference(getString(R.string.pref_key_site_related_posts));
  mRelatedPostsPref.setOnPreferenceClickListener(this);
  mModerationHoldPref.setOnPreferenceClickListener(this);
  mBlacklistPref.setOnPreferenceClickListener(this);
  if (mBlog.isDotcomFlag()) {
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_account);
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_remove_site);
  }
 else {
    removePreference(R.string.pref_key_site_general,R.string.pref_key_site_visibility);
    removePreference(R.string.pref_key_site_general,R.string.pref_key_site_language);
    removePreference(R.string.pref_key_site_writing,R.string.pref_key_site_related_posts);
    removePreference(R.string.pref_key_site_writing,R.string.pref_key_site_category);
    removePreference(R.string.pref_key_site_writing,R.string.pref_key_site_format);
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_start_over);
    removePreference(R.string.pref_key_site_screen,R.string.pref_key_site_delete_site);
  }
}",0.9937906564163216
14245,"private String getCloseAfterSummary(int period){
  if (period == 0)   getString(R.string.never);
  return getResources().getQuantityString(R.plurals.days_quantity,period,period);
}","private String getCloseAfterSummary(int period){
  if (period == 0)   return getString(R.string.never);
  return getResources().getQuantityString(R.plurals.days_quantity,period,period);
}",0.9809264305177112
14246,"private String getThreadingSummary(int levels){
  if (levels <= 1)   getString(R.string.none);
  return String.format(getString(R.string.levels_quantity),levels);
}","private String getThreadingSummary(int levels){
  if (levels <= 1)   return getString(R.string.none);
  return String.format(getString(R.string.levels_quantity),levels);
}",0.9791044776119404
14247,"public static String getPhotonImageUrl(String imageUrl,int width,int height,Quality quality){
  if (TextUtils.isEmpty(imageUrl)) {
    return ""String_Node_Str"";
  }
  int schemePos=imageUrl.indexOf(""String_Node_Str"");
  if (schemePos == -1) {
    return imageUrl;
  }
  imageUrl=UrlUtils.removeQuery(imageUrl);
  if (imageUrl.endsWith(""String_Node_Str"")) {
    return imageUrl;
  }
  if (isMshotsUrl(imageUrl)) {
    return imageUrl + ""String_Node_Str"" + width+ ""String_Node_Str""+ height;
  }
  String query=""String_Node_Str"";
switch (quality) {
case HIGH:
    query+=""String_Node_Str"";
  break;
case LOW:
query+=""String_Node_Str"";
break;
default :
query+=""String_Node_Str"";
break;
}
if (width > 0 && height > 0) {
query+=""String_Node_Str"" + width + ""String_Node_Str""+ height;
}
 else if (width > 0) {
query+=""String_Node_Str"" + width;
}
 else if (height > 0) {
query+=""String_Node_Str"" + height;
}
if (imageUrl.contains(""String_Node_Str"")) {
if (imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"")) return imageUrl + query;
}
if (UrlUtils.isHttps(imageUrl)) {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
 else {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
}","public static String getPhotonImageUrl(String imageUrl,int width,int height,Quality quality){
  if (TextUtils.isEmpty(imageUrl)) {
    return ""String_Node_Str"";
  }
  int schemePos=imageUrl.indexOf(""String_Node_Str"");
  if (schemePos == -1) {
    return imageUrl;
  }
  imageUrl=UrlUtils.removeQuery(imageUrl);
  if (imageUrl.endsWith(""String_Node_Str"")) {
    return imageUrl;
  }
  if (isMshotsUrl(imageUrl)) {
    return imageUrl + ""String_Node_Str"" + width+ ""String_Node_Str""+ height;
  }
  String query=""String_Node_Str"";
switch (quality) {
case HIGH:
    query+=""String_Node_Str"";
  break;
case LOW:
query+=""String_Node_Str"";
break;
default :
query+=""String_Node_Str"";
break;
}
if (width > 0 && height > 0) {
query+=""String_Node_Str"" + width + ""String_Node_Str""+ height;
}
 else if (width > 0) {
query+=""String_Node_Str"" + width;
}
 else if (height > 0) {
query+=""String_Node_Str"" + height;
}
if (imageUrl.contains(""String_Node_Str"")) {
if (imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"") || imageUrl.contains(""String_Node_Str"")) return imageUrl + query;
}
if (imageUrl.contains(""String_Node_Str"")) {
return imageUrl + query;
}
if (UrlUtils.isHttps(imageUrl)) {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
 else {
return ""String_Node_Str"" + imageUrl.substring(schemePos + 3,imageUrl.length()) + query;
}
}",0.9737134394668642
14248,"private void loadThumbnail(final String src,final ImageView thumbnailImage){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      if (isAdded()) {
        final Uri localUri=Utils.downloadExternalMedia(getActivity(),Uri.parse(src));
        getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            thumbnailImage.setImageURI(localUri);
          }
        }
);
      }
    }
  }
);
  thread.start();
}","private void loadThumbnail(final String src,final ImageView thumbnailImage){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      if (isAdded()) {
        final Uri localUri=Utils.downloadExternalMedia(getActivity(),Uri.parse(src));
        if (getActivity() != null) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              thumbnailImage.setImageURI(localUri);
            }
          }
);
        }
      }
    }
  }
);
  thread.start();
}",0.9385699899295066
14249,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
14250,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
14251,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
14252,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
14253,"private void toggleViews(boolean enabled){
  mShowHeader.setEnabled(enabled);
  mShowImages.setEnabled(enabled);
  mPreviewHeader.setEnabled(enabled);
  mRelatedPostsListHeader.setEnabled(enabled);
  mRelatedPostsList.setEnabled(enabled);
}","private void toggleViews(boolean enabled){
  mShowHeader.setEnabled(enabled);
  mShowImages.setEnabled(enabled);
  mPreviewHeader.setEnabled(enabled);
  mRelatedPostsListHeader.setEnabled(enabled);
  if (enabled) {
    mRelatedPostsList.setAlpha(1.0f);
  }
 else {
    mRelatedPostsList.setAlpha(0.5f);
  }
}",0.8102189781021898
14254,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup root,Bundle savedInstanceState){
  setStyle(STYLE_NORMAL,R.style.Calypso_SiteSettingsTheme);
  getDialog().setTitle(R.string.site_settings_related_posts_title);
  View v=inflater.inflate(R.layout.related_posts_dialog,root,false);
  mShowRelatedPosts=(WPSwitch)v.findViewById(R.id.toggle_related_posts_switch);
  mShowHeader=(CheckBox)v.findViewById(R.id.show_header_checkbox);
  mShowImages=(CheckBox)v.findViewById(R.id.show_images_checkbox);
  mPreviewHeader=(TextView)v.findViewById(R.id.preview_header);
  mRelatedPostsListHeader=(TextView)v.findViewById(R.id.related_posts_list_header);
  mRelatedPostsList=(LinearLayout)v.findViewById(R.id.related_posts_list);
  Bundle args=getArguments();
  if (args != null) {
    mShowRelatedPosts.setChecked(args.getBoolean(SHOW_RELATED_POSTS_KEY));
    mShowHeader.setChecked(args.getBoolean(SHOW_HEADER_KEY));
    mShowImages.setChecked(args.getBoolean(SHOW_IMAGES_KEY));
  }
  mPreviewImages=new ArrayList<>();
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image1));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image2));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image3));
  mShowRelatedPosts.setOnCheckedChangeListener(this);
  mShowHeader.setOnCheckedChangeListener(this);
  mShowImages.setOnCheckedChangeListener(this);
  toggleViews(mShowRelatedPosts.isChecked());
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup root,Bundle savedInstanceState){
  setStyle(STYLE_NORMAL,R.style.Calypso_SiteSettingsTheme);
  getDialog().setTitle(R.string.site_settings_related_posts_title);
  View v=inflater.inflate(R.layout.related_posts_dialog,root,false);
  mShowRelatedPosts=(WPSwitch)v.findViewById(R.id.toggle_related_posts_switch);
  mShowHeader=(CheckBox)v.findViewById(R.id.show_header_checkbox);
  mShowImages=(CheckBox)v.findViewById(R.id.show_images_checkbox);
  mPreviewHeader=(TextView)v.findViewById(R.id.preview_header);
  mRelatedPostsListHeader=(TextView)v.findViewById(R.id.related_posts_list_header);
  mRelatedPostsList=(LinearLayout)v.findViewById(R.id.related_posts_list);
  mPreviewImages=new ArrayList<>();
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image1));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image2));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image3));
  Bundle args=getArguments();
  if (args != null) {
    mShowRelatedPosts.setChecked(args.getBoolean(SHOW_RELATED_POSTS_KEY));
    mShowHeader.setChecked(args.getBoolean(SHOW_HEADER_KEY));
    mShowImages.setChecked(args.getBoolean(SHOW_IMAGES_KEY));
  }
  toggleShowHeader(mShowHeader.isChecked());
  toggleShowImages(mShowImages.isChecked());
  mShowRelatedPosts.setOnCheckedChangeListener(this);
  mShowHeader.setOnCheckedChangeListener(this);
  mShowImages.setOnCheckedChangeListener(this);
  toggleViews(mShowRelatedPosts.isChecked());
  return v;
}",0.6799468791500664
14255,"public Map<Integer,String> getCategoryNames(){
  Map<Integer,String> categoryNames=new HashMap<>();
  if (mSettings.categories != null && mSettings.categories.length == 0) {
    for (    CategoryModel model : mSettings.categories) {
      categoryNames.put(model.id,model.name);
    }
  }
  return categoryNames;
}","public Map<Integer,String> getCategoryNames(){
  Map<Integer,String> categoryNames=new HashMap<>();
  if (mSettings.categories != null && mSettings.categories.length > 0) {
    for (    CategoryModel model : mSettings.categories) {
      categoryNames.put(model.id,model.name);
    }
  }
  return categoryNames;
}",0.9952153110047848
14256,"/** 
 * Gets available post formats via XML-RPC. Since both self-hosted and .com sites retrieve the format list via XML-RPC there is no need to implement this in the sub-classes.
 */
private void fetchPostFormats(){
  XMLRPCClientInterface client=instantiateInterface();
  if (client == null)   return;
  Map<String,String> args=new HashMap<>();
  args.put(ApiHelper.Params.SHOW_SUPPORTED_POST_FORMATS,""String_Node_Str"");
  Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),args};
  client.callAsync(new XMLRPCCallback(){
    @Override public void onSuccess(    long id,    Object result){
      credentialsVerified(true);
      if (result != null && result instanceof HashMap) {
        Map<?,?> resultMap=(HashMap<?,?>)result;
        Map allFormats;
        Object[] supportedFormats;
        if (resultMap.containsKey(""String_Node_Str"")) {
          allFormats=(Map)resultMap.get(""String_Node_Str"");
          supportedFormats=(Object[])resultMap.get(""String_Node_Str"");
        }
 else {
          allFormats=resultMap;
          supportedFormats=allFormats.keySet().toArray();
        }
        mRemoteSettings.postFormats=new HashMap<>();
        for (        Object supportedFormat : supportedFormats) {
          if (allFormats.containsKey(supportedFormat)) {
            mRemoteSettings.postFormats.put(supportedFormat.toString(),allFormats.get(supportedFormat).toString());
          }
        }
        mSettings.postFormats=new HashMap<>(mRemoteSettings.postFormats);
        notifyUpdatedOnUiThread(null);
      }
    }
    @Override public void onFailure(    long id,    Exception error){
    }
  }
,ApiHelper.Methods.GET_POST_FORMATS,params);
}","/** 
 * Gets available post formats via XML-RPC. Since both self-hosted and .com sites retrieve the format list via XML-RPC there is no need to implement this in the sub-classes.
 */
private void fetchPostFormats(){
  XMLRPCClientInterface client=instantiateInterface();
  if (client == null)   return;
  Map<String,String> args=new HashMap<>();
  args.put(ApiHelper.Params.SHOW_SUPPORTED_POST_FORMATS,""String_Node_Str"");
  Object[] params={mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),args};
  client.callAsync(new XMLRPCCallback(){
    @Override public void onSuccess(    long id,    Object result){
      credentialsVerified(true);
      if (result != null && result instanceof HashMap) {
        Map<?,?> resultMap=(HashMap<?,?>)result;
        Map allFormats;
        Object[] supportedFormats;
        if (resultMap.containsKey(""String_Node_Str"")) {
          allFormats=(Map)resultMap.get(""String_Node_Str"");
          supportedFormats=(Object[])resultMap.get(""String_Node_Str"");
        }
 else {
          allFormats=resultMap;
          supportedFormats=allFormats.keySet().toArray();
        }
        mRemoteSettings.postFormats=new HashMap<>();
        mRemoteSettings.postFormats.put(""String_Node_Str"",""String_Node_Str"");
        for (        Object supportedFormat : supportedFormats) {
          if (allFormats.containsKey(supportedFormat)) {
            mRemoteSettings.postFormats.put(supportedFormat.toString(),allFormats.get(supportedFormat).toString());
          }
        }
        mSettings.postFormats=new HashMap<>(mRemoteSettings.postFormats);
        notifyUpdatedOnUiThread(null);
      }
    }
    @Override public void onFailure(    long id,    Exception error){
    }
  }
,ApiHelper.Methods.GET_POST_FORMATS,params);
}",0.977456647398844
14257,"@Override public void onSuccess(long id,Object result){
  credentialsVerified(true);
  if (result != null && result instanceof HashMap) {
    Map<?,?> resultMap=(HashMap<?,?>)result;
    Map allFormats;
    Object[] supportedFormats;
    if (resultMap.containsKey(""String_Node_Str"")) {
      allFormats=(Map)resultMap.get(""String_Node_Str"");
      supportedFormats=(Object[])resultMap.get(""String_Node_Str"");
    }
 else {
      allFormats=resultMap;
      supportedFormats=allFormats.keySet().toArray();
    }
    mRemoteSettings.postFormats=new HashMap<>();
    for (    Object supportedFormat : supportedFormats) {
      if (allFormats.containsKey(supportedFormat)) {
        mRemoteSettings.postFormats.put(supportedFormat.toString(),allFormats.get(supportedFormat).toString());
      }
    }
    mSettings.postFormats=new HashMap<>(mRemoteSettings.postFormats);
    notifyUpdatedOnUiThread(null);
  }
}","@Override public void onSuccess(long id,Object result){
  credentialsVerified(true);
  if (result != null && result instanceof HashMap) {
    Map<?,?> resultMap=(HashMap<?,?>)result;
    Map allFormats;
    Object[] supportedFormats;
    if (resultMap.containsKey(""String_Node_Str"")) {
      allFormats=(Map)resultMap.get(""String_Node_Str"");
      supportedFormats=(Object[])resultMap.get(""String_Node_Str"");
    }
 else {
      allFormats=resultMap;
      supportedFormats=allFormats.keySet().toArray();
    }
    mRemoteSettings.postFormats=new HashMap<>();
    mRemoteSettings.postFormats.put(""String_Node_Str"",""String_Node_Str"");
    for (    Object supportedFormat : supportedFormats) {
      if (allFormats.containsKey(supportedFormat)) {
        mRemoteSettings.postFormats.put(supportedFormat.toString(),allFormats.get(supportedFormat).toString());
      }
    }
    mSettings.postFormats=new HashMap<>(mRemoteSettings.postFormats);
    notifyUpdatedOnUiThread(null);
  }
}",0.9608050847457628
14258,"@Override public void onMediaUploadCancelClicked(String mediaId){
}","@Override public void onMediaUploadCancelClicked(String mediaId,boolean delete){
}",0.8993288590604027
14259,"@Override public void onMediaUploadCancelClicked(String mediaId){
}","@Override public void onMediaUploadCancelClicked(String mediaId,boolean delete){
}",0.8993288590604027
14260,"public static String getBlogId(Blog blog){
  if (blog == null) {
    return null;
  }
  if (blog.isDotcomFlag()) {
    return String.valueOf(blog.getRemoteBlogId());
  }
 else {
    return blog.getApi_blogid();
  }
}","public static String getBlogId(Blog blog){
  if (blog == null) {
    return null;
  }
  if (blog.isDotcomFlag()) {
    return String.valueOf(blog.getRemoteBlogId());
  }
 else {
    String remoteID=blog.getApi_blogid();
    if (StringUtils.isEmpty(remoteID)) {
      return null;
    }
    try {
      int parsedBlogID=Integer.parseInt(remoteID);
      if (parsedBlogID < 1) {
        return null;
      }
    }
 catch (    NumberFormatException e) {
      AppLog.e(T.STATS,""String_Node_Str"" + remoteID);
      return null;
    }
    return remoteID;
  }
}",0.533678756476684
14261,"protected void handleInvalidUsernameOrPassword(int messageId){
  mErroneousLogInCount+=1;
  if (mErroneousLogInCount >= WPCOM_ERRONEOUS_LOGIN_THRESHOLD) {
    mPasswordEditText.setError(null);
    mUsernameEditText.setError(null);
    showInvalidUsernameOrPasswordDialog();
  }
 else {
    showUsernameError(messageId);
    showPasswordError(messageId);
  }
  endProgress();
}","protected void handleInvalidUsernameOrPassword(int messageId){
  mErroneousLogInCount+=1;
  if (mErroneousLogInCount >= WPCOM_ERRONEOUS_LOGIN_THRESHOLD) {
    mPasswordEditText.setError(null);
    mUsernameEditText.setError(null);
    showInvalidUsernameOrPasswordDialog();
  }
 else {
    showPasswordError(messageId);
    showUsernameError(messageId);
  }
  endProgress();
}",0.9574468085106383
14262,"protected boolean isUserDataValid(){
  final String username=EditTextUtils.getText(mUsernameEditText).trim();
  final String password=EditTextUtils.getText(mPasswordEditText).trim();
  boolean retValue=true;
  if (username.equals(""String_Node_Str"")) {
    mUsernameEditText.setError(getString(R.string.required_field));
    mUsernameEditText.requestFocus();
    retValue=false;
  }
  if (password.equals(""String_Node_Str"")) {
    mPasswordEditText.setError(getString(R.string.required_field));
    mPasswordEditText.requestFocus();
    retValue=false;
  }
  return retValue;
}","protected boolean isUserDataValid(){
  final String username=EditTextUtils.getText(mUsernameEditText).trim();
  final String password=EditTextUtils.getText(mPasswordEditText).trim();
  boolean retValue=true;
  if (password.equals(""String_Node_Str"")) {
    mPasswordEditText.setError(getString(R.string.required_field));
    mPasswordEditText.requestFocus();
    retValue=false;
  }
  if (username.equals(""String_Node_Str"")) {
    mUsernameEditText.setError(getString(R.string.required_field));
    mUsernameEditText.requestFocus();
    retValue=false;
  }
  return retValue;
}",0.9166666666666666
14263,"protected boolean specificShowError(int messageId){
switch (getErrorType(messageId)) {
case USERNAME:
case PASSWORD:
    showUsernameError(messageId);
  showPasswordError(messageId);
return true;
default :
return false;
}
}","protected boolean specificShowError(int messageId){
switch (getErrorType(messageId)) {
case USERNAME:
case PASSWORD:
    showPasswordError(messageId);
  showUsernameError(messageId);
return true;
default :
return false;
}
}",0.8565022421524664
14264,"@Override public void onMediaUploadProgress(final String mediaId,final float progress){
  mWebView.post(new Runnable(){
    @Override public void run(){
      String progressString=String.format(""String_Node_Str"",progress);
      mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str""+ progressString+ ""String_Node_Str"");
    }
  }
);
}","@Override public void onMediaUploadProgress(final String mediaId,final float progress){
  mWebView.post(new Runnable(){
    @Override public void run(){
      String progressString=String.format(Locale.US,""String_Node_Str"",progress);
      mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str""+ progressString+ ""String_Node_Str"");
    }
  }
);
}",0.9864130434782608
14265,"private void addFragment(){
  if (mIsInSearchMode) {
    addSearchFragment();
  }
 else {
    addBrowserFragment();
  }
}","private void addFragment(){
  if (mIsInSearchMode) {
    addBrowserFragment();
    addSearchFragment();
  }
 else {
    addBrowserFragment();
  }
}",0.9029850746268656
14266,"private void addBrowserFragment(){
  FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
  fragmentTransaction.add(R.id.theme_browser_container,mThemeBrowserFragment);
  fragmentTransaction.addToBackStack(null);
  fragmentTransaction.commit();
}","private void addBrowserFragment(){
  FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
  fragmentTransaction.add(R.id.theme_browser_container,mThemeBrowserFragment);
  fragmentTransaction.commit();
}",0.8849206349206349
14267,"@Override public void run(){
  mFetchingThemes=false;
  if (result == null) {
    mThemeBrowserFragment.mEmptyView.setText(""String_Node_Str"");
    mThemeSearchFragment.mEmptyView.setText(""String_Node_Str"");
  }
  mThemeBrowserFragment.setRefreshing(false);
  mThemeSearchFragment.setRefreshing(false);
}","@Override public void run(){
  mFetchingThemes=false;
  if (mThemeBrowserFragment.isVisible()) {
    mThemeBrowserFragment.mEmptyView.setText(""String_Node_Str"");
    mThemeBrowserFragment.setRefreshing(false);
  }
 else   if (mThemeSearchFragment.isVisible()) {
    mThemeSearchFragment.mEmptyView.setText(""String_Node_Str"");
    mThemeSearchFragment.setRefreshing(false);
  }
}",0.5814977973568282
14268,"@Override public void onSearchClicked(){
  FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
  fragmentTransaction.replace(R.id.theme_browser_container,mThemeSearchFragment);
  fragmentTransaction.addToBackStack(null);
  fragmentTransaction.commit();
}","@Override public void onSearchClicked(){
  mIsInSearchMode=true;
  addSearchFragment();
}",0.3924731182795699
14269,"@Override protected void onPostExecute(final ArrayList<Theme> result){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      mFetchingThemes=false;
      if (result == null) {
        mThemeBrowserFragment.mEmptyView.setText(""String_Node_Str"");
        mThemeSearchFragment.mEmptyView.setText(""String_Node_Str"");
      }
      mThemeBrowserFragment.setRefreshing(false);
      mThemeSearchFragment.setRefreshing(false);
    }
  }
);
}","@Override protected void onPostExecute(final ArrayList<Theme> result){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      mFetchingThemes=false;
      if (mThemeBrowserFragment.isVisible()) {
        mThemeBrowserFragment.mEmptyView.setText(""String_Node_Str"");
        mThemeBrowserFragment.setRefreshing(false);
      }
 else       if (mThemeSearchFragment.isVisible()) {
        mThemeSearchFragment.mEmptyView.setText(""String_Node_Str"");
        mThemeSearchFragment.setRefreshing(false);
      }
    }
  }
);
}",0.6741116751269035
14270,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.THEMES_ACCESSED_THEMES_BROWSER);
  }
  setContentView(R.layout.theme_browser_activity);
  configureToolbar();
  addBrowserFragment();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.THEMES_ACCESSED_THEMES_BROWSER);
  }
  setContentView(R.layout.theme_browser_activity);
  configureToolbar();
  mThemeBrowserFragment=new ThemeBrowserFragment();
  mThemeSearchFragment=new ThemeSearchFragment();
  addFragment();
}",0.8993020937188435
14271,"@Override protected void onResume(){
  super.onResume();
  mIsRunning=true;
  mThemeSearchFragment=new ThemeSearchFragment();
  ActivityId.trackLastActivity(ActivityId.THEMES);
  fetchThemesIfNoneAvailable();
}","@Override protected void onResume(){
  super.onResume();
  mIsRunning=true;
  ActivityId.trackLastActivity(ActivityId.THEMES);
  fetchThemesIfNoneAvailable();
}",0.8648648648648649
14272,"private void addBrowserFragment(){
  FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
  mThemeBrowserFragment=new ThemeBrowserFragment();
  fragmentTransaction.add(R.id.theme_browser_container,mThemeBrowserFragment);
  fragmentTransaction.commit();
}","private void addBrowserFragment(){
  FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();
  fragmentTransaction.add(R.id.theme_browser_container,mThemeBrowserFragment);
  fragmentTransaction.addToBackStack(null);
  fragmentTransaction.commit();
}",0.8273381294964028
14273,"@Override public boolean onMenuItemActionCollapse(MenuItem item){
  getActivity().getFragmentManager().popBackStack();
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem item){
  ((ThemeBrowserActivity)getActivity()).setIsInSearchMode(false);
  getActivity().getFragmentManager().popBackStack();
  return true;
}",0.8035714285714286
14274,"private void configureBucketAndAdapter(){
  mBucket=SimperiumUtils.getNotesBucket();
  if (mBucket != null) {
    if (mNotesAdapter == null) {
      mNotesAdapter=new NotesAdapter(getActivity(),mBucket);
      mNotesAdapter.setOnNoteClickListener(mOnNoteClickListener);
      mRecyclerView.setAdapter(mNotesAdapter);
    }
  }
 else {
    if (!AccountHelper.isSignedInWordPressDotCom()) {
      showEmptyView(R.string.notifications_account_required,true);
    }
 else {
      showEmptyView(R.string.error_refresh_notifications,false);
    }
  }
}","private void configureBucketAndAdapter(){
  mBucket=SimperiumUtils.getNotesBucket();
  if (mBucket != null) {
    if (mNotesAdapter == null) {
      mNotesAdapter=new NotesAdapter(getActivity(),mBucket);
      mNotesAdapter.setOnNoteClickListener(mOnNoteClickListener);
    }
    if (mRecyclerView.getAdapter() == null) {
      mRecyclerView.setAdapter(mNotesAdapter);
    }
  }
 else {
    if (!AccountHelper.isSignedInWordPressDotCom()) {
      showEmptyView(R.string.notifications_account_required,true);
    }
 else {
      showEmptyView(R.string.error_refresh_notifications,false);
    }
  }
}",0.9545454545454546
14275,"private void updateWidgetsIfNecessary(String blogId,final StatsEndpointsEnum endpointName,StatsTimeframe timeframe,String date,int pageRequested,Serializable responseObjectModel){
  if (pageRequested != -1) {
    return;
  }
  if (endpointName != StatsEndpointsEnum.VISITS) {
    return;
  }
  if (timeframe != StatsTimeframe.DAY && timeframe != StatsTimeframe.INSIGHTS) {
    return;
  }
  int parsedBlogID=Integer.parseInt(blogId);
  int localTableBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(parsedBlogID);
  if (!date.equals(StatsUtils.getCurrentDateTZ(localTableBlogId))) {
    return;
  }
  final long primaryBlogId=AccountHelper.getDefaultAccount().getPrimaryBlogId();
  if (localTableBlogId != WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId((int)primaryBlogId)) {
    return;
  }
  if (responseObjectModel == null) {
    return;
  }
  if (responseObjectModel instanceof VisitsModel) {
    VisitsModel visitsModel=(VisitsModel)responseObjectModel;
    if (visitsModel.getVisits() == null || visitsModel.getVisits().size() == 0) {
      return;
    }
    List<VisitModel> visits=visitsModel.getVisits();
    VisitModel data=visits.get(visits.size() - 1);
    StatsWidgetProvider.updateWidgets(getApplicationContext(),data);
  }
 else   if (responseObjectModel instanceof VolleyError) {
    VolleyError error=(VolleyError)responseObjectModel;
    StatsWidgetProvider.updateWidgets(getApplicationContext(),error);
  }
 else   if (responseObjectModel instanceof StatsError) {
    StatsError statsError=(StatsError)responseObjectModel;
    StatsWidgetProvider.updateWidgets(getApplicationContext(),statsError);
  }
}","private void updateWidgetsIfNecessary(String blogId,final StatsEndpointsEnum endpointName,StatsTimeframe timeframe,String date,int pageRequested,Serializable responseObjectModel){
  if (pageRequested != -1) {
    return;
  }
  if (endpointName != StatsEndpointsEnum.VISITS) {
    return;
  }
  if (timeframe != StatsTimeframe.DAY && timeframe != StatsTimeframe.INSIGHTS) {
    return;
  }
  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(this);
  ComponentName thisWidget=new ComponentName(this,StatsWidgetProvider.class);
  if (appWidgetManager.getAppWidgetIds(thisWidget).length == 0) {
    return;
  }
  int parsedBlogID=Integer.parseInt(blogId);
  int localTableBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(parsedBlogID);
  if (!date.equals(StatsUtils.getCurrentDateTZ(localTableBlogId))) {
    return;
  }
  final long primaryBlogId=AccountHelper.getDefaultAccount().getPrimaryBlogId();
  if (localTableBlogId != WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId((int)primaryBlogId)) {
    return;
  }
  if (responseObjectModel == null) {
    return;
  }
  if (responseObjectModel instanceof VisitsModel) {
    VisitsModel visitsModel=(VisitsModel)responseObjectModel;
    if (visitsModel.getVisits() == null || visitsModel.getVisits().size() == 0) {
      return;
    }
    List<VisitModel> visits=visitsModel.getVisits();
    VisitModel data=visits.get(visits.size() - 1);
    StatsWidgetProvider.updateWidgets(getApplicationContext(),data);
  }
 else   if (responseObjectModel instanceof VolleyError) {
    VolleyError error=(VolleyError)responseObjectModel;
    StatsWidgetProvider.updateWidgets(getApplicationContext(),error);
  }
 else   if (responseObjectModel instanceof StatsError) {
    StatsError statsError=(StatsError)responseObjectModel;
    StatsWidgetProvider.updateWidgets(getApplicationContext(),statsError);
  }
}",0.9336763865065753
14276,"@Override public void run(){
  if (!isTagValid) {
    AppLog.d(T.READER,""String_Node_Str"");
    setCurrentTag(ReaderTag.getDefaultTag(),true);
  }
 else   if (timeToAutoUpdate && !isUpdating()) {
    AppLog.d(T.READER,""String_Node_Str"");
    updateCurrentTag();
  }
 else {
    refreshPosts();
  }
}","@Override public void run(){
  if (!isAdded())   return;
  if (!isTagValid) {
    AppLog.d(T.READER,""String_Node_Str"");
    setCurrentTag(ReaderTag.getDefaultTag(),true);
  }
 else   if (timeToAutoUpdate && !isUpdating()) {
    AppLog.d(T.READER,""String_Node_Str"");
    updateCurrentTag();
  }
 else {
    refreshPosts();
  }
}",0.9552715654952076
14277,"@Override public void onResume(){
  super.onResume();
  checkAdapter();
  if (mWasPaused) {
    AppLog.d(T.READER,""String_Node_Str"");
    mWasPaused=false;
    if (getPostListType().equals(ReaderPostListType.TAG_FOLLOWED)) {
      new Thread(){
        @Override public void run(){
          final boolean isTagValid=ReaderTagTable.tagExists(getCurrentTag());
          final boolean timeToAutoUpdate=isTagValid && ReaderTagTable.shouldAutoUpdateTag(getCurrentTag());
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              if (!isTagValid) {
                AppLog.d(T.READER,""String_Node_Str"");
                setCurrentTag(ReaderTag.getDefaultTag(),true);
              }
 else               if (timeToAutoUpdate && !isUpdating()) {
                AppLog.d(T.READER,""String_Node_Str"");
                updateCurrentTag();
              }
 else {
                refreshPosts();
              }
            }
          }
);
        }
      }
.start();
    }
 else {
      refreshPosts();
    }
  }
}","@Override public void onResume(){
  super.onResume();
  checkAdapter();
  if (mWasPaused) {
    AppLog.d(T.READER,""String_Node_Str"");
    mWasPaused=false;
    if (getPostListType().equals(ReaderPostListType.TAG_FOLLOWED)) {
      resumeFollowedTag();
    }
 else {
      refreshPosts();
    }
  }
}",0.3439114391143911
14278,"public static void askForSslTrust(final Context ctx,final GenericCallback<Void> certificateTrusted){
  AlertDialog.Builder alert=new AlertDialog.Builder(ctx);
  alert.setTitle(ctx.getString(R.string.ssl_certificate_error));
  alert.setMessage(ctx.getString(R.string.ssl_certificate_ask_trust));
  alert.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      SelfSignedSSLCertsManager selfSignedSSLCertsManager;
      try {
        selfSignedSSLCertsManager=SelfSignedSSLCertsManager.getInstance(ctx);
        selfSignedSSLCertsManager.addCertificates(selfSignedSSLCertsManager.getLastFailureChain());
      }
 catch (      GeneralSecurityException e) {
        AppLog.e(T.API,e);
      }
catch (      IOException e) {
        AppLog.e(T.API,e);
      }
      if (certificateTrusted != null) {
        certificateTrusted.callback(null);
      }
    }
  }
);
  alert.setNeutralButton(R.string.ssl_certificate_details,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      ActivityLauncher.viewSSLCerts(ctx);
    }
  }
);
  alert.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  alert.show();
}","public static void askForSslTrust(final Context ctx,final GenericCallback<Void> certificateTrusted){
  AlertDialog.Builder alert=new AlertDialog.Builder(ctx);
  alert.setTitle(ctx.getString(R.string.ssl_certificate_error));
  alert.setMessage(ctx.getString(R.string.ssl_certificate_ask_trust));
  alert.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      SelfSignedSSLCertsManager selfSignedSSLCertsManager;
      try {
        selfSignedSSLCertsManager=SelfSignedSSLCertsManager.getInstance(ctx);
        X509Certificate[] certificates=selfSignedSSLCertsManager.getLastFailureChain();
        AppLog.i(T.NUX,""String_Node_Str"" + Arrays.toString(certificates));
        selfSignedSSLCertsManager.addCertificates(certificates);
      }
 catch (      GeneralSecurityException e) {
        AppLog.e(T.API,e);
      }
catch (      IOException e) {
        AppLog.e(T.API,e);
      }
      if (certificateTrusted != null) {
        certificateTrusted.callback(null);
      }
    }
  }
);
  alert.setNeutralButton(R.string.ssl_certificate_details,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      ActivityLauncher.viewSSLCerts(ctx);
    }
  }
);
  alert.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  alert.show();
}",0.8837375178316691
14279,"/** 
 * Synchronous method to fetch the String content at the specified HTTP URL.
 * @param stringUrl URL to fetch contents for.
 * @return content of the resource, or null if URL was invalid or resource could not be retrieved.
 */
public static String getResponse(final String stringUrl) throws SSLHandshakeException {
  try {
    URL url=new URL(stringUrl);
    HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
    urlConnection.setInstanceFollowRedirects(true);
    InputStream inputStream=urlConnection.getInputStream();
    BufferedReader r=new BufferedReader(new InputStreamReader(inputStream));
    StringBuilder sb=new StringBuilder();
    String line;
    while ((line=r.readLine()) != null) {
      sb.append(line);
    }
    return sb.toString();
  }
 catch (  SSLHandshakeException e) {
    throw e;
  }
catch (  IOException e) {
    AppLog.e(T.API,e);
  }
  return null;
}","public static String getResponse(final String stringUrl,int numberOfRedirects) throws SSLHandshakeException {
  RequestFuture<String> future=RequestFuture.newFuture();
  StringRequest request=new StringRequest(stringUrl,future,future);
  request.setRetryPolicy(new DefaultRetryPolicy(XMLRPCClient.DEFAULT_SOCKET_TIMEOUT,0,1));
  WordPress.requestQueue.add(request);
  try {
    return future.get(XMLRPCClient.DEFAULT_SOCKET_TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.API,e);
  }
catch (  ExecutionException e) {
    if (e.getCause() != null && e.getCause() instanceof RedirectError) {
      if (numberOfRedirects > 5) {
        AppLog.e(T.API,""String_Node_Str"",e);
        return null;
      }
      RedirectError re=(RedirectError)e.getCause();
      if (re.networkResponse != null) {
        String newURL=getRedirectURL(stringUrl,re.networkResponse);
        if (newURL == null) {
          AppLog.e(T.API,""String_Node_Str"",e);
          return null;
        }
        if (URLUtil.isHttpsUrl(stringUrl) && !URLUtil.isHttpsUrl(newURL)) {
          AppLog.e(T.API,""String_Node_Str"",e);
          return null;
        }
        AppLog.i(T.API,""String_Node_Str"" + stringUrl + ""String_Node_Str""+ newURL);
        return getResponse(newURL,numberOfRedirects + 1);
      }
    }
 else {
      AppLog.e(T.API,e);
    }
  }
catch (  TimeoutException e) {
    AppLog.e(T.API,e);
  }
  return null;
}",0.1341880341880341
14280,"private DefaultHttpClient instantiateClientForUri(URI uri,UsernamePasswordCredentials usernamePasswordCredentials){
  DefaultHttpClient client=null;
  if (uri != null && uri.getHost() != null && uri.getHost().endsWith(""String_Node_Str"")) {
    mIsWpcom=true;
  }
  if (mIsWpcom || (uri == null || uri.getScheme() == null || uri.getScheme().equals(""String_Node_Str""))) {
    client=new DefaultHttpClient();
  }
 else {
    int port=uri.getPort();
    if (port == -1) {
      port=443;
    }
    try {
      client=new ConnectionClient(port);
    }
 catch (    GeneralSecurityException e) {
      AppLog.e(T.API,""String_Node_Str"",e);
      client=null;
    }
catch (    IOException e) {
      AppLog.e(T.API,""String_Node_Str"",e);
      client=null;
    }
    if (client == null) {
      client=new DefaultHttpClient();
    }
  }
  HttpConnectionParams.setConnectionTimeout(client.getParams(),DEFAULT_CONNECTION_TIMEOUT);
  HttpConnectionParams.setSoTimeout(client.getParams(),DEFAULT_SOCKET_TIMEOUT);
  if (usernamePasswordCredentials != null) {
    BasicCredentialsProvider cP=new BasicCredentialsProvider();
    cP.setCredentials(AuthScope.ANY,usernamePasswordCredentials);
    client.setCredentialsProvider(cP);
  }
  return client;
}","private DefaultHttpClient instantiateClientForUri(URI uri,UsernamePasswordCredentials usernamePasswordCredentials){
  DefaultHttpClient client=null;
  if (uri != null && uri.getHost() != null && uri.getHost().endsWith(""String_Node_Str"")) {
    mIsWpcom=true;
  }
  if (mIsWpcom) {
    client=new DefaultHttpClient();
  }
 else {
    int port=uri.getPort();
    if (port == -1) {
      port=443;
    }
    try {
      client=new ConnectionClient(port);
    }
 catch (    GeneralSecurityException e) {
      AppLog.e(T.API,""String_Node_Str"",e);
      client=null;
    }
catch (    IOException e) {
      AppLog.e(T.API,""String_Node_Str"",e);
      client=null;
    }
    if (client == null) {
      client=new DefaultHttpClient();
    }
  }
  HttpConnectionParams.setConnectionTimeout(client.getParams(),DEFAULT_CONNECTION_TIMEOUT);
  HttpConnectionParams.setSoTimeout(client.getParams(),DEFAULT_SOCKET_TIMEOUT);
  if (usernamePasswordCredentials != null) {
    BasicCredentialsProvider cP=new BasicCredentialsProvider();
    cP.setCredentials(AuthScope.ANY,usernamePasswordCredentials);
    client.setCredentialsProvider(cP);
  }
  return client;
}",0.9626207475850485
14281,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ReaderTag tag=mTags.get(position);
  final TagViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.reader_tag_toolbar_menu_item,parent,false);
    holder=new TagViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(TagViewHolder)convertView.getTag();
  }
  holder.textView.setText(tag.getCapitalizedTagName());
  if (isCurrentTag(tag)) {
    holder.textView.setBackground(mSelectedBackground);
  }
 else {
    holder.textView.setBackground(null);
  }
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ReaderTag tag=mTags.get(position);
  final TagViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.reader_tag_toolbar_menu_item,parent,false);
    holder=new TagViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(TagViewHolder)convertView.getTag();
  }
  holder.textView.setText(tag.getCapitalizedTagName());
  if (isCurrentTag(tag)) {
    holder.textView.setBackgroundDrawable(mSelectedBackground);
  }
 else {
    holder.textView.setBackgroundDrawable(null);
  }
  return convertView;
}",0.9873817034700316
14282,"private void launchWithNoteId(){
  if (isFinishing() || getIntent() == null)   return;
  if (getIntent().hasExtra(NotificationsUtils.ARG_PUSH_AUTH_TOKEN)) {
    Bundle extras=getIntent().getExtras();
    String token=extras.getString(NotificationsUtils.ARG_PUSH_AUTH_TOKEN,""String_Node_Str"");
    String title=extras.getString(NotificationsUtils.ARG_PUSH_AUTH_TITLE,""String_Node_Str"");
    String message=extras.getString(NotificationsUtils.ARG_PUSH_AUTH_MESSAGE,""String_Node_Str"");
    long expires=extras.getLong(NotificationsUtils.ARG_PUSH_AUTH_EXPIRES,0);
    long now=System.currentTimeMillis() / 1000;
    if (expires > 0 && now > expires) {
      ToastUtils.showToast(this,R.string.push_auth_expired,ToastUtils.Duration.LONG);
      AnalyticsTracker.track(AnalyticsTracker.Stat.PUSH_AUTHENTICATION_EXPIRED);
    }
 else {
      NotificationsUtils.showPushAuthAlert(this,token,title,message);
    }
  }
  mViewPager.setCurrentItem(WPMainTabAdapter.TAB_NOTIFS);
  String noteId=getIntent().getStringExtra(NotificationsListFragment.NOTE_ID_EXTRA);
  boolean shouldShowKeyboard=getIntent().getBooleanExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,false);
  if (!TextUtils.isEmpty(noteId)) {
    NotificationsListFragment.openNote(this,noteId,shouldShowKeyboard,false);
    GCMIntentService.clearNotificationsMap();
  }
}","private void launchWithNoteId(){
  if (isFinishing() || getIntent() == null)   return;
  if (getIntent().hasExtra(NotificationsUtils.ARG_PUSH_AUTH_TOKEN)) {
    Bundle extras=getIntent().getExtras();
    String token=extras.getString(NotificationsUtils.ARG_PUSH_AUTH_TOKEN,""String_Node_Str"");
    String title=extras.getString(NotificationsUtils.ARG_PUSH_AUTH_TITLE,""String_Node_Str"");
    String message=extras.getString(NotificationsUtils.ARG_PUSH_AUTH_MESSAGE,""String_Node_Str"");
    long expires=extras.getLong(NotificationsUtils.ARG_PUSH_AUTH_EXPIRES,0);
    long now=System.currentTimeMillis() / 1000;
    if (expires > 0 && now > expires) {
      ToastUtils.showToast(this,R.string.push_auth_expired,ToastUtils.Duration.LONG);
      AnalyticsTracker.track(AnalyticsTracker.Stat.PUSH_AUTHENTICATION_EXPIRED);
    }
 else {
      NotificationsUtils.showPushAuthAlert(this,token,title,message);
    }
  }
  mViewPager.setCurrentItem(WPMainTabAdapter.TAB_NOTIFS);
  boolean shouldShowKeyboard=getIntent().getBooleanExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,false);
  if (GCMIntentService.getNotificationsMap().size() == 1) {
    String noteId=getIntent().getStringExtra(NotificationsListFragment.NOTE_ID_EXTRA);
    if (!TextUtils.isEmpty(noteId)) {
      NotificationsListFragment.openNote(this,noteId,shouldShowKeyboard,false);
    }
  }
  GCMIntentService.clearNotificationsMap();
}",0.8267543859649122
14283,"/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  if (null != (mTitlePreference=(EditTextPreference)findPreference(getString(R.string.pref_key_site_title)))) {
    mTitlePreference.setOnPreferenceChangeListener(this);
    mTitlePreference.setSummary(mRemoteTitle);
  }
  if (null != (mTaglinePreference=(EditTextPreference)findPreference(getString(R.string.pref_key_site_tagline)))) {
    mTaglinePreference.setOnPreferenceChangeListener(this);
  }
  if (null != (mAddressPreference=(EditTextPreference)findPreference(getString(R.string.pref_key_site_address)))) {
    mAddressPreference.setOnPreferenceChangeListener(this);
  }
  if (null != (mPrivacyPreference=(DetailListPreference)findPreference(getString(R.string.pref_key_site_visibility)))) {
    if (!mBlog.isDotcomFlag()) {
      removePreference(R.string.pref_key_site_general,mPrivacyPreference);
    }
 else {
      mPrivacyPreference.setOnPreferenceChangeListener(this);
    }
  }
  if (null != (mLanguagePreference=(DetailListPreference)findPreference(getString(R.string.pref_key_site_language)))) {
    if (!mBlog.isDotcomFlag()) {
      removePreference(R.string.pref_key_site_general,mLanguagePreference);
    }
 else {
      mLanguagePreference.setOnPreferenceChangeListener(this);
      String[] languageIds=getResources().getStringArray(R.array.lang_ids);
      String[] languageCodes=getResources().getStringArray(R.array.language_codes);
      for (int i=0; i < languageIds.length && i < languageCodes.length; ++i) {
        mLanguageCodes.put(languageCodes[i],languageIds[i]);
      }
    }
  }
}","/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  if (null != (mTitlePreference=(EditTextPreference)findPreference(getString(R.string.pref_key_site_title)))) {
    mTitlePreference.setOnPreferenceChangeListener(this);
    changeEditTextPreferenceValue(mTitlePreference,StringUtils.unescapeHTML(mRemoteTitle));
  }
  if (null != (mTaglinePreference=(EditTextPreference)findPreference(getString(R.string.pref_key_site_tagline)))) {
    mTaglinePreference.setOnPreferenceChangeListener(this);
  }
  if (null != (mAddressPreference=(EditTextPreference)findPreference(getString(R.string.pref_key_site_address)))) {
    mAddressPreference.setOnPreferenceChangeListener(this);
  }
  if (null != (mPrivacyPreference=(DetailListPreference)findPreference(getString(R.string.pref_key_site_visibility)))) {
    if (!mBlog.isDotcomFlag()) {
      removePreference(R.string.pref_key_site_general,mPrivacyPreference);
    }
 else {
      mPrivacyPreference.setOnPreferenceChangeListener(this);
    }
  }
  if (null != (mLanguagePreference=(DetailListPreference)findPreference(getString(R.string.pref_key_site_language)))) {
    if (!mBlog.isDotcomFlag()) {
      removePreference(R.string.pref_key_site_general,mLanguagePreference);
    }
 else {
      mLanguagePreference.setOnPreferenceChangeListener(this);
      String[] languageIds=getResources().getStringArray(R.array.lang_ids);
      String[] languageCodes=getResources().getStringArray(R.array.language_codes);
      for (int i=0; i < languageIds.length && i < languageCodes.length; ++i) {
        mLanguageCodes.put(languageCodes[i],languageIds[i]);
      }
    }
  }
}",0.9715653995809638
14284,"private void handleResponseToSelfHostedSettingsSetRequest(Map result){
  AppLog.d(AppLog.T.API,""String_Node_Str"");
  mBlog.setBlogName(getNestedMapValue(result,""String_Node_Str""));
  WordPress.wpDB.saveBlog(mBlog);
  EventBus.getDefault().post(new CoreEvents.BlogListChanged());
}","private void handleResponseToSelfHostedSettingsSetRequest(Map result){
  AppLog.d(AppLog.T.API,""String_Node_Str"");
  mBlog.setBlogName(StringUtils.unescapeHTML(getNestedMapValue(result,""String_Node_Str"")));
  WordPress.wpDB.saveBlog(mBlog);
  EventBus.getDefault().post(new CoreEvents.BlogListChanged());
}",0.955631399317406
14285,"private HashMap<String,String> generateSelfHostedParams(){
  HashMap<String,String> params=new HashMap<>();
  if (mTitlePreference != null && !mTitlePreference.getText().equals(mRemoteTitle)) {
    params.put(""String_Node_Str"",mTitlePreference.getText());
  }
  if (mTaglinePreference != null && !mTaglinePreference.getText().equals(mRemoteTagline)) {
    params.put(""String_Node_Str"",mTaglinePreference.getText());
  }
  return params;
}","private HashMap<String,String> generateSelfHostedParams(){
  HashMap<String,String> params=new HashMap<>();
  if (mTitlePreference != null && !mTitlePreference.getText().equals(StringUtils.unescapeHTML(mRemoteTitle))) {
    params.put(""String_Node_Str"",mTitlePreference.getText());
  }
  if (mTaglinePreference != null && !mTaglinePreference.getText().equals(StringUtils.unescapeHTML(mRemoteTagline))) {
    params.put(""String_Node_Str"",mTaglinePreference.getText());
  }
  return params;
}",0.9439655172413792
14286,"private void handleResponseToSelfHostedSettingsSetRequest(Map result){
  AppLog.d(AppLog.T.API,""String_Node_Str"");
  mBlog.setBlogName(StringUtils.unescapeHTML(getNestedMapValue(result,""String_Node_Str"")));
  WordPress.wpDB.saveBlog(mBlog);
  EventBus.getDefault().post(new CoreEvents.BlogListChanged());
}","private void handleResponseToSelfHostedSettingsSetRequest(Map result){
  AppLog.d(AppLog.T.API,""String_Node_Str"");
  if (result.containsKey(""String_Node_Str"")) {
    String titleResult=getNestedMapValue(result,""String_Node_Str"");
    if (TextUtils.isEmpty(titleResult)) {
      titleResult=mBlog.getUrl();
    }
    mBlog.setBlogName(StringUtils.unescapeHTML(titleResult));
    WordPress.wpDB.saveBlog(mBlog);
    EventBus.getDefault().post(new CoreEvents.BlogListChanged());
  }
}",0.6581956797966964
14287,"private void changeSelection(RadioButton radioButton,int position){
  CharSequence[] values=getEntryValues();
  if (radioButton != null && mSelectedIndex != position && values != null && position < values.length) {
    mSelectedIndex=position;
    radioButton.setChecked(true);
    callChangeListener(values[position]);
  }
}","private void changeSelection(RadioButton radioButton,int position){
  CharSequence[] values=getEntryValues();
  if (radioButton != null && values != null && position < values.length) {
    mSelectedIndex=position;
    radioButton.setChecked(true);
    callChangeListener(values[position]);
  }
}",0.7064516129032258
14288,"@Override protected void onDialogClosed(boolean positiveResult){
  CharSequence[] values=getEntryValues();
  if (values != null && mSelectedIndex < values.length && mSelectedIndex != mStartingIndex) {
    String value=values[positiveResult ? mSelectedIndex : mStartingIndex].toString();
    setValue(value);
    callChangeListener(value);
  }
}","@Override protected void onDialogClosed(boolean positiveResult){
  CharSequence[] values=getEntryValues();
  if (values != null && mSelectedIndex < values.length) {
    String value=values[positiveResult ? mSelectedIndex : mStartingIndex].toString();
    callChangeListener(value);
  }
}",0.9096671949286846
14289,"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
switch (viewType) {
case VIEW_TYPE_HEADER:
    View headerView=new ReaderCommentsPostHeaderView(parent.getContext());
  return new PostHeaderHolder(headerView);
default :
View commentView=LayoutInflater.from(parent.getContext()).inflate(R.layout.reader_listitem_comment,parent,false);
return new CommentHolder(commentView);
}
}","@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
switch (viewType) {
case VIEW_TYPE_HEADER:
    View headerView=new ReaderCommentsPostHeaderView(parent.getContext());
  headerView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));
return new PostHeaderHolder(headerView);
default :
View commentView=LayoutInflater.from(parent.getContext()).inflate(R.layout.reader_listitem_comment,parent,false);
return new CommentHolder(commentView);
}
}",0.8665977249224406
14290,"public void setPost(final ReaderPost post){
  if (post == null)   return;
  TextView txtTitle=(TextView)findViewById(R.id.text_post_title);
  TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  TextView txtDateline=(TextView)findViewById(R.id.text_post_dateline);
  TextView txtCommentsClosed=(TextView)findViewById(R.id.text_comments_closed);
  WPNetworkImageView imgAvatar=(WPNetworkImageView)findViewById(R.id.image_post_avatar);
  txtTitle.setText(post.getTitle());
  if (post.hasBlogName()) {
    txtBlogName.setText(post.getBlogName());
  }
 else {
    txtBlogName.setText(R.string.reader_untitled_post);
  }
  java.util.Date dtPublished=DateTimeUtils.iso8601ToJavaDate(post.getPublished());
  String dateLine=DateTimeUtils.javaDateToTimeSpan(dtPublished);
  if (post.isCommentsOpen || post.numReplies > 0) {
    dateLine+=""String_Node_Str"" + ReaderUtils.getShortCommentLabelText(getContext(),post.numReplies);
  }
  if (post.isLikesEnabled) {
    dateLine+=""String_Node_Str"" + ReaderUtils.getShortLikeLabelText(getContext(),post.numLikes);
  }
  txtDateline.setText(dateLine);
  int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_extra_small);
  String avatarUrl;
  if (post.hasBlogUrl()) {
    avatarUrl=GravatarUtils.blavatarFromUrl(post.getBlogUrl(),avatarSz);
    imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.BLAVATAR);
  }
 else {
    avatarUrl=post.getPostAvatarForDisplay(avatarSz);
    imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  }
  txtTitle.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      ReaderActivityLauncher.showReaderPostDetail(getContext(),post.blogId,post.postId);
    }
  }
);
}","public void setPost(final ReaderPost post){
  if (post == null)   return;
  TextView txtTitle=(TextView)findViewById(R.id.text_post_title);
  TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  TextView txtDateline=(TextView)findViewById(R.id.text_post_dateline);
  TextView txtCommentsClosed=(TextView)findViewById(R.id.text_comments_closed);
  WPNetworkImageView imgAvatar=(WPNetworkImageView)findViewById(R.id.image_post_avatar);
  txtTitle.setText(post.getTitle());
  if (post.hasBlogName()) {
    txtBlogName.setText(post.getBlogName());
  }
 else {
    txtBlogName.setText(R.string.reader_untitled_post);
  }
  java.util.Date dtPublished=DateTimeUtils.iso8601ToJavaDate(post.getPublished());
  String dateLine=DateTimeUtils.javaDateToTimeSpan(dtPublished);
  if (post.isCommentsOpen || post.numReplies > 0) {
    dateLine+=""String_Node_Str"" + ReaderUtils.getShortCommentLabelText(getContext(),post.numReplies);
  }
  if (post.isLikesEnabled) {
    dateLine+=""String_Node_Str"" + ReaderUtils.getShortLikeLabelText(getContext(),post.numLikes);
  }
  txtDateline.setText(dateLine);
  int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_extra_small);
  String avatarUrl;
  if (post.hasBlogUrl()) {
    avatarUrl=GravatarUtils.blavatarFromUrl(post.getBlogUrl(),avatarSz);
    imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.BLAVATAR);
  }
 else {
    avatarUrl=post.getPostAvatarForDisplay(avatarSz);
    imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  }
}",0.9378843788437884
14291,"public ReaderBlogInfoView(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){
  super(context,attrs,defStyleAttr,defStyleRes);
  initView(context,attrs);
}","public ReaderBlogInfoView(Context context,AttributeSet attrs,int defStyleAttr){
  super(context,attrs,defStyleAttr);
  initView(context,attrs);
}",0.9119496855345912
14292,"void customizeUIWithResults(){
  if (!isAdded()) {
    return;
  }
  mResultContainer.removeAllViews();
  if (isDataEmpty(0) || !(mDatamodels[0] instanceof InsightsLatestPostModel)) {
    showErrorUI(null);
    return;
  }
  final InsightsLatestPostModel latestPostModel=(InsightsLatestPostModel)mDatamodels[0];
  View mainView=getView();
  if (mainView != null) {
    mainView.setVisibility(latestPostModel.isLatestPostAvailable() ? View.VISIBLE : View.GONE);
  }
  if (!latestPostModel.isLatestPostAvailable()) {
    return;
  }
  if (latestPostModel.getPostViewsCount() == Integer.MIN_VALUE) {
    refreshStats(latestPostModel.getPostID(),new StatsService.StatsEndpointsEnum[]{StatsService.StatsEndpointsEnum.INSIGHTS_LATEST_POST_VIEWS});
    showPlaceholderUI();
    return;
  }
  TextView moduleTitle=(TextView)mainView.findViewById(R.id.stats_module_title);
  moduleTitle.setOnClickListener(ButtonsOnClickListener);
  moduleTitle.setTextColor(getResources().getColor(R.color.stats_link_text_color));
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_latest_post_item,(ViewGroup)mResultContainer.getRootView(),false);
  String trendLabel=getString(R.string.stats_insights_latest_post_trend);
  String sinceLabel=StatsUtils.getSinceLabel(getActivity(),latestPostModel.getPostDate());
  final String trendLabelFormatted=String.format(trendLabel,sinceLabel,latestPostModel.getPostTitle());
  int startIndex, endIndex;
  startIndex=trendLabelFormatted.indexOf(latestPostModel.getPostTitle());
  endIndex=startIndex + latestPostModel.getPostTitle().length() + 1;
  Spannable descriptionTextToSpan=new SpannableString(trendLabelFormatted);
  descriptionTextToSpan.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.stats_link_text_color)),startIndex,endIndex,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  TextView trendLabelTextField=(TextView)ll.findViewById(R.id.stats_post_trend_label);
  trendLabelTextField.setText(descriptionTextToSpan);
  trendLabelTextField.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      StatsUtils.openPostInReaderOrInAppWebview(getActivity(),latestPostModel.getBlogID(),String.valueOf(latestPostModel.getPostID()),StatsConstants.ITEM_TYPE_POST,latestPostModel.getPostURL());
    }
  }
);
  LinearLayout tabs=(LinearLayout)ll.findViewById(R.id.stats_latest_post_tabs);
  for (int i=0; i < tabs.getChildCount(); i++) {
    LinearLayout currentTab=(LinearLayout)tabs.getChildAt(i);
switch (i) {
case 0:
      setupTab(currentTab,FormatUtils.formatDecimal(latestPostModel.getPostViewsCount()),StatsVisitorsAndViewsFragment.OverviewLabel.VIEWS);
    break;
case 1:
  setupTab(currentTab,FormatUtils.formatDecimal(latestPostModel.getPostLikeCount()),StatsVisitorsAndViewsFragment.OverviewLabel.LIKES);
break;
case 2:
setupTab(currentTab,FormatUtils.formatDecimal(latestPostModel.getPostCommentCount()),StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS);
break;
}
}
mResultContainer.addView(ll);
}","void customizeUIWithResults(){
  if (!isAdded()) {
    return;
  }
  mResultContainer.removeAllViews();
  if (isDataEmpty(0) || !(mDatamodels[0] instanceof InsightsLatestPostModel)) {
    showErrorUI(null);
    return;
  }
  final InsightsLatestPostModel latestPostModel=(InsightsLatestPostModel)mDatamodels[0];
  View mainView=getView();
  if (mainView != null) {
    mainView.setVisibility(latestPostModel.isLatestPostAvailable() ? View.VISIBLE : View.GONE);
  }
  if (!latestPostModel.isLatestPostAvailable()) {
    return;
  }
  if (latestPostModel.getPostViewsCount() == Integer.MIN_VALUE) {
    refreshStats(latestPostModel.getPostID(),new StatsService.StatsEndpointsEnum[]{StatsService.StatsEndpointsEnum.INSIGHTS_LATEST_POST_VIEWS});
    showPlaceholderUI();
    return;
  }
  TextView moduleTitle=(TextView)mainView.findViewById(R.id.stats_module_title);
  moduleTitle.setOnClickListener(ViewsTabOnClickListener);
  moduleTitle.setTextColor(getResources().getColor(R.color.stats_link_text_color));
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_latest_post_item,(ViewGroup)mResultContainer.getRootView(),false);
  String trendLabel=getString(R.string.stats_insights_latest_post_trend);
  String sinceLabel=StatsUtils.getSinceLabel(getActivity(),latestPostModel.getPostDate()).toLowerCase();
  String postTitle=StringEscapeUtils.unescapeHtml(latestPostModel.getPostTitle());
  final String trendLabelFormatted=String.format(trendLabel,sinceLabel,postTitle);
  int startIndex, endIndex;
  startIndex=trendLabelFormatted.indexOf(postTitle);
  endIndex=startIndex + postTitle.length() + 1;
  Spannable descriptionTextToSpan=new SpannableString(trendLabelFormatted);
  descriptionTextToSpan.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.stats_link_text_color)),startIndex,endIndex,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  TextView trendLabelTextField=(TextView)ll.findViewById(R.id.stats_post_trend_label);
  trendLabelTextField.setText(descriptionTextToSpan);
  trendLabelTextField.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      StatsUtils.openPostInReaderOrInAppWebview(getActivity(),latestPostModel.getBlogID(),String.valueOf(latestPostModel.getPostID()),StatsConstants.ITEM_TYPE_POST,latestPostModel.getPostURL());
    }
  }
);
  LinearLayout tabs=(LinearLayout)ll.findViewById(R.id.stats_latest_post_tabs);
  for (int i=0; i < tabs.getChildCount(); i++) {
    LinearLayout currentTab=(LinearLayout)tabs.getChildAt(i);
switch (i) {
case 0:
      setupTab(currentTab,FormatUtils.formatDecimal(latestPostModel.getPostViewsCount()),StatsVisitorsAndViewsFragment.OverviewLabel.VIEWS);
    break;
case 1:
  setupTab(currentTab,FormatUtils.formatDecimal(latestPostModel.getPostLikeCount()),StatsVisitorsAndViewsFragment.OverviewLabel.LIKES);
break;
case 2:
setupTab(currentTab,FormatUtils.formatDecimal(latestPostModel.getPostCommentCount()),StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS);
break;
}
}
mResultContainer.addView(ll);
}",0.9623788401511416
14293,"private void setupTab(LinearLayout currentTab,String total,final StatsVisitorsAndViewsFragment.OverviewLabel itemType){
  final TextView label;
  final TextView value;
  final ImageView icon;
  currentTab.setTag(itemType);
  currentTab.setOnClickListener(ButtonsOnClickListener);
  label=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_label);
  label.setText(itemType.getLabel());
  value=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_value);
  value.setText(total);
  label.setTextColor(getResources().getColor(R.color.grey_darken_20));
  value.setTextColor(getResources().getColor(R.color.blue_wordpress));
  icon=(ImageView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_icon);
  icon.setImageDrawable(getTabIcon(itemType));
  if (itemType == StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS) {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_white);
  }
 else {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_white);
  }
}","private void setupTab(LinearLayout currentTab,String total,final StatsVisitorsAndViewsFragment.OverviewLabel itemType){
  final TextView label;
  final TextView value;
  final ImageView icon;
  currentTab.setTag(itemType);
  if (itemType == StatsVisitorsAndViewsFragment.OverviewLabel.VIEWS) {
    currentTab.setOnClickListener(ViewsTabOnClickListener);
  }
 else {
    currentTab.setClickable(false);
  }
  label=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_label);
  label.setText(itemType.getLabel());
  label.setTextColor(getResources().getColor(R.color.grey_darken_20));
  value=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_value);
  value.setText(total);
  if (total.equals(""String_Node_Str"")) {
    value.setTextColor(getResources().getColor(R.color.grey));
  }
 else {
    if (itemType == StatsVisitorsAndViewsFragment.OverviewLabel.VIEWS) {
      value.setTextColor(getResources().getColor(R.color.blue_wordpress));
    }
 else {
      value.setTextColor(getResources().getColor(R.color.grey_darken_30));
    }
  }
  icon=(ImageView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_icon);
  icon.setImageDrawable(getTabIcon(itemType));
  if (itemType == StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS) {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_white);
  }
 else {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_white);
  }
}",0.7707509881422925
14294,"private void setupTab(LinearLayout currentTab,String total,final StatsVisitorsAndViewsFragment.OverviewLabel itemType){
  final TextView label;
  final TextView value;
  final ImageView icon;
  currentTab.setTag(itemType);
  currentTab.setOnClickListener(ButtonsOnClickListener);
  label=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_label);
  label.setText(itemType.getLabel());
  value=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_value);
  value.setText(total);
  label.setTextColor(getResources().getColor(R.color.grey_darken_20));
  value.setTextColor(getResources().getColor(R.color.blue_wordpress));
  icon=(ImageView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_icon);
  icon.setImageDrawable(getTabIcon(itemType));
  if (itemType == StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS) {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_white);
  }
 else {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_white);
  }
}","private void setupTab(LinearLayout currentTab,String total,final StatsVisitorsAndViewsFragment.OverviewLabel itemType){
  final TextView label;
  final TextView value;
  final ImageView icon;
  currentTab.setTag(itemType);
  currentTab.setOnClickListener(ButtonsOnClickListener);
  label=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_label);
  label.setText(itemType.getLabel());
  label.setTextColor(getResources().getColor(R.color.grey_darken_20));
  value=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_value);
  value.setText(total);
  if (total.equals(""String_Node_Str"")) {
    value.setTextColor(getResources().getColor(R.color.grey));
  }
 else {
    value.setTextColor(getResources().getColor(R.color.blue_wordpress));
  }
  icon=(ImageView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_icon);
  icon.setImageDrawable(getTabIcon(itemType));
  if (itemType == StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS) {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_white);
  }
 else {
    currentTab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_white);
  }
}",0.928379588182632
14295,"public void updateBackGroundAndIcon(){
  if (isChecked) {
    label.setTextColor(getResources().getColor(R.color.grey_dark));
    value.setTextColor(getResources().getColor(R.color.orange_jazzy));
  }
 else {
    label.setTextColor(getResources().getColor(R.color.grey_darken_20));
    value.setTextColor(getResources().getColor(R.color.blue_wordpress));
  }
  icon.setImageDrawable(getTabIcon());
  if (isLastItem) {
    if (isChecked) {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_white);
    }
 else {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_blue_light);
    }
  }
 else {
    if (isChecked) {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_white);
    }
 else {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_blue_light);
    }
  }
}","public void updateBackGroundAndIcon(int currentValue){
  if (isChecked) {
    label.setTextColor(getResources().getColor(R.color.grey_dark));
    value.setTextColor(getResources().getColor(R.color.orange_jazzy));
  }
 else {
    label.setTextColor(getResources().getColor(R.color.grey_darken_20));
    if (currentValue == 0) {
      value.setTextColor(getResources().getColor(R.color.grey));
    }
 else {
      value.setTextColor(getResources().getColor(R.color.blue_wordpress));
    }
  }
  icon.setImageDrawable(getTabIcon());
  if (isLastItem) {
    if (isChecked) {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_white);
    }
 else {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_latest_blue_light);
    }
  }
 else {
    if (isChecked) {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_white);
    }
 else {
      tab.setBackgroundResource(R.drawable.stats_visitors_and_views_button_blue_light);
    }
  }
}",0.9297124600638976
14296,"public TabViewHolder(LinearLayout currentTab,OverviewLabel labelItem,boolean checked,boolean isLastItem){
  tab=currentTab;
  innerContainer=(LinearLayout)currentTab.findViewById(R.id.stats_visitors_and_views_tab_inner_container);
  label=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_label);
  label.setText(labelItem.getLabel());
  value=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_value);
  icon=(ImageView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_icon);
  this.labelItem=labelItem;
  this.isChecked=checked;
  this.isLastItem=isLastItem;
  updateBackGroundAndIcon();
}","public TabViewHolder(LinearLayout currentTab,OverviewLabel labelItem,boolean checked,boolean isLastItem){
  tab=currentTab;
  innerContainer=(LinearLayout)currentTab.findViewById(R.id.stats_visitors_and_views_tab_inner_container);
  label=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_label);
  label.setText(labelItem.getLabel());
  value=(TextView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_value);
  icon=(ImageView)currentTab.findViewById(R.id.stats_visitors_and_views_tab_icon);
  this.labelItem=labelItem;
  this.isChecked=checked;
  this.isLastItem=isLastItem;
  updateBackGroundAndIcon(0);
}",0.999213217938631
14297,"private void updateUIBelowTheGraph(int itemPosition){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph.length == 0) {
    return;
  }
  if (dataToShowOnGraph.length <= itemPosition || itemPosition == -1) {
    itemPosition=dataToShowOnGraph.length - 1;
  }
  String date=mStatsDate[itemPosition];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  mDateTextView.setText(getDateForDisplayInLabels(date,getTimeframe()));
  VisitModel modelTapped=dataToShowOnGraph[itemPosition];
  for (int i=0; i < mModuleButtonsContainer.getChildCount(); i++) {
    View o=mModuleButtonsContainer.getChildAt(i);
    if (o instanceof LinearLayout && o.getTag() instanceof TabViewHolder) {
      TabViewHolder tabViewHolder=(TabViewHolder)o.getTag();
      tabViewHolder.updateBackGroundAndIcon();
switch (tabViewHolder.labelItem) {
case VIEWS:
        tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getViews()));
      break;
case VISITORS:
    tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getVisitors()));
  break;
case LIKES:
tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getLikes()));
break;
case COMMENTS:
tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getComments()));
break;
}
}
}
}","private void updateUIBelowTheGraph(int itemPosition){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph.length == 0) {
    return;
  }
  if (dataToShowOnGraph.length <= itemPosition || itemPosition == -1) {
    itemPosition=dataToShowOnGraph.length - 1;
  }
  String date=mStatsDate[itemPosition];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  mDateTextView.setText(getDateForDisplayInLabels(date,getTimeframe()));
  VisitModel modelTapped=dataToShowOnGraph[itemPosition];
  for (int i=0; i < mModuleButtonsContainer.getChildCount(); i++) {
    View o=mModuleButtonsContainer.getChildAt(i);
    if (o instanceof LinearLayout && o.getTag() instanceof TabViewHolder) {
      TabViewHolder tabViewHolder=(TabViewHolder)o.getTag();
      int currentValue=0;
switch (tabViewHolder.labelItem) {
case VIEWS:
        currentValue=modelTapped.getViews();
      break;
case VISITORS:
    currentValue=modelTapped.getVisitors();
  break;
case LIKES:
currentValue=modelTapped.getLikes();
break;
case COMMENTS:
currentValue=modelTapped.getComments();
break;
}
tabViewHolder.value.setText(FormatUtils.formatDecimal(currentValue));
tabViewHolder.updateBackGroundAndIcon(currentValue);
}
}
}",0.8326719576719577
14298,"public InsightsLatestPostModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  mPostsFound=response.optInt(""String_Node_Str"",0);
  if (mPostsFound == 0) {
    return;
  }
  JSONArray postsObject=response.getJSONArray(""String_Node_Str"");
  if (postsObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONObject firstPostObject=postsObject.getJSONObject(0);
  this.mPostID=firstPostObject.getInt(""String_Node_Str"");
  this.mPostTitle=firstPostObject.getString(""String_Node_Str"");
  this.mPostDate=firstPostObject.getString(""String_Node_Str"");
  this.mPostURL=firstPostObject.getString(""String_Node_Str"");
  this.mPostLikeCount=firstPostObject.getInt(""String_Node_Str"");
  JSONObject discussionObject=response.optJSONObject(""String_Node_Str"");
  if (discussionObject != null) {
    this.mPostCommentCount=discussionObject.optInt(""String_Node_Str"",0);
  }
}","public InsightsLatestPostModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  mPostsFound=response.optInt(""String_Node_Str"",0);
  if (mPostsFound == 0) {
    return;
  }
  JSONArray postsObject=response.getJSONArray(""String_Node_Str"");
  if (postsObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONObject firstPostObject=postsObject.getJSONObject(0);
  this.mPostID=firstPostObject.getInt(""String_Node_Str"");
  this.mPostTitle=firstPostObject.getString(""String_Node_Str"");
  this.mPostDate=firstPostObject.getString(""String_Node_Str"");
  this.mPostURL=firstPostObject.getString(""String_Node_Str"");
  this.mPostLikeCount=firstPostObject.getInt(""String_Node_Str"");
  JSONObject discussionObject=firstPostObject.optJSONObject(""String_Node_Str"");
  if (discussionObject != null) {
    this.mPostCommentCount=discussionObject.optInt(""String_Node_Str"",0);
  }
}",0.9874795862819816
14299,"public void updateSettingForChannelAndType(Channel channel,Type type,String settingName,boolean newValue,long blogId){
  String typeName=type.toString();
  try {
switch (channel) {
case BLOGS:
      JSONObject blogJson=getBlogSettings().get(blogId);
    if (blogJson != null) {
      JSONObject blogSetting=JSONUtils.queryJSON(blogJson,typeName,new JSONObject());
      blogSetting.put(settingName,newValue);
      blogJson.put(typeName,blogSetting);
      getBlogSettings().put(blogId,blogJson);
    }
  break;
case OTHER:
JSONObject otherSetting=JSONUtils.queryJSON(getOtherSettings(),typeName,new JSONObject());
otherSetting.put(settingName,newValue);
getOtherSettings().put(typeName,otherSetting);
break;
case DOTCOM:
JSONObject dotcomSetting=JSONUtils.queryJSON(getDotcomSettings(),typeName,new JSONObject());
dotcomSetting.put(settingName,newValue);
getDotcomSettings().put(typeName,dotcomSetting);
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
}
}","public void updateSettingForChannelAndType(Channel channel,Type type,String settingName,boolean newValue,long blogId){
  String typeName=type.toString();
  try {
switch (channel) {
case BLOGS:
      JSONObject blogJson=getBlogSettings().get(blogId);
    if (blogJson != null) {
      JSONObject blogSetting=JSONUtils.queryJSON(blogJson,typeName,new JSONObject());
      blogSetting.put(settingName,newValue);
      blogJson.put(typeName,blogSetting);
      getBlogSettings().put(blogId,blogJson);
    }
  break;
case OTHER:
JSONObject otherSetting=JSONUtils.queryJSON(getOtherSettings(),typeName,new JSONObject());
otherSetting.put(settingName,newValue);
getOtherSettings().put(typeName,otherSetting);
break;
case DOTCOM:
getDotcomSettings().put(settingName,newValue);
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
}
}",0.925764192139738
14300,"public List<Map<String,Object>> getBlogsBy(String byString,String[] extraFields,int limit,boolean shouldHideJetpack){
  if (db == null) {
    return new Vector<>();
  }
  if (shouldHideJetpack) {
    String hideJetpackArgs=""String_Node_Str"";
    if (TextUtils.isEmpty(byString)) {
      byString=hideJetpackArgs;
    }
 else {
      byString=hideJetpackArgs + ""String_Node_Str"" + byString;
    }
  }
  String limitStr=null;
  if (limit != 0) {
    limitStr=String.valueOf(limit);
  }
  String[] baseFields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] allFields=baseFields;
  if (extraFields != null) {
    allFields=(String[])ArrayUtils.addAll(baseFields,extraFields);
  }
  Cursor c=db.query(BLOGS_TABLE,allFields,byString,null,null,null,null,limitStr);
  int numRows=c.getCount();
  c.moveToFirst();
  List<Map<String,Object>> blogs=new Vector<>();
  for (int i=0; i < numRows; i++) {
    int id=c.getInt(0);
    String blogName=c.getString(1);
    String username=c.getString(2);
    int blogId=c.getInt(3);
    String url=c.getString(4);
    if (id > 0) {
      Map<String,Object> blogMap=new HashMap<>();
      blogMap.put(""String_Node_Str"",id);
      blogMap.put(""String_Node_Str"",blogName);
      blogMap.put(""String_Node_Str"",username);
      blogMap.put(""String_Node_Str"",blogId);
      blogMap.put(""String_Node_Str"",url);
      int extraFieldsIndex=baseFields.length;
      if (extraFields != null) {
        for (int j=0; j < extraFields.length; ++j) {
          blogMap.put(extraFields[j],c.getString(extraFieldsIndex + j));
        }
      }
      blogs.add(blogMap);
    }
    c.moveToNext();
  }
  c.close();
  Collections.sort(blogs,BlogUtils.BlogNameComparator);
  return blogs;
}","public List<Map<String,Object>> getBlogsBy(String byString,String[] extraFields,int limit,boolean shouldHideJetpack){
  if (db == null) {
    return new Vector<>();
  }
  if (shouldHideJetpack) {
    String hideJetpackArgs=String.format(""String_Node_Str"",encryptPassword(""String_Node_Str""));
    if (TextUtils.isEmpty(byString)) {
      byString=hideJetpackArgs;
    }
 else {
      byString=hideJetpackArgs + ""String_Node_Str"" + byString;
    }
  }
  String limitStr=null;
  if (limit != 0) {
    limitStr=String.valueOf(limit);
  }
  String[] baseFields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] allFields=baseFields;
  if (extraFields != null) {
    allFields=(String[])ArrayUtils.addAll(baseFields,extraFields);
  }
  Cursor c=db.query(BLOGS_TABLE,allFields,byString,null,null,null,null,limitStr);
  int numRows=c.getCount();
  c.moveToFirst();
  List<Map<String,Object>> blogs=new Vector<>();
  for (int i=0; i < numRows; i++) {
    int id=c.getInt(0);
    String blogName=c.getString(1);
    String username=c.getString(2);
    int blogId=c.getInt(3);
    String url=c.getString(4);
    if (id > 0) {
      Map<String,Object> blogMap=new HashMap<>();
      blogMap.put(""String_Node_Str"",id);
      blogMap.put(""String_Node_Str"",blogName);
      blogMap.put(""String_Node_Str"",username);
      blogMap.put(""String_Node_Str"",blogId);
      blogMap.put(""String_Node_Str"",url);
      int extraFieldsIndex=baseFields.length;
      if (extraFields != null) {
        for (int j=0; j < extraFields.length; ++j) {
          blogMap.put(extraFields[j],c.getString(extraFieldsIndex + j));
        }
      }
      blogs.add(blogMap);
    }
    c.moveToNext();
  }
  c.close();
  Collections.sort(blogs,BlogUtils.BlogNameComparator);
  return blogs;
}",0.9860568878973788
14301,"private void configureBlogsSettings(){
  if (mNotificationsSettings == null || mNotificationsSettings.getBlogSettings() == null) {
    return;
  }
  List<Map<String,Object>> blogs=WordPress.wpDB.getBlogsBy(""String_Node_Str"",null,0,false);
  Context context=getActivity();
  PreferenceCategory blogsCategory=(PreferenceCategory)findPreference(getString(R.string.pref_notification_blogs));
  for (  Map blog : blogs) {
    if (context == null)     return;
    String siteUrl=MapUtils.getMapStr(blog,""String_Node_Str"");
    String title=MapUtils.getMapStr(blog,""String_Node_Str"");
    long blogId=MapUtils.getMapLong(blog,""String_Node_Str"");
    PreferenceScreen prefScreen=getPreferenceManager().createPreferenceScreen(context);
    prefScreen.setTitle(title);
    prefScreen.setSummary(UrlUtils.getDomainFromUrl(siteUrl));
    addPreferencesForPreferenceScreen(prefScreen,Channel.BLOGS,blogId);
    blogsCategory.addPreference(prefScreen);
  }
}","private void configureBlogsSettings(){
  if (mNotificationsSettings == null || mNotificationsSettings.getBlogSettings() == null) {
    return;
  }
  String args=String.format(""String_Node_Str"",WordPressDB.encryptPassword(""String_Node_Str""));
  List<Map<String,Object>> blogs=WordPress.wpDB.getBlogsBy(args,null,0,false);
  Context context=getActivity();
  PreferenceCategory blogsCategory=(PreferenceCategory)findPreference(getString(R.string.pref_notification_blogs));
  for (  Map blog : blogs) {
    if (context == null)     return;
    String siteUrl=MapUtils.getMapStr(blog,""String_Node_Str"");
    String title=MapUtils.getMapStr(blog,""String_Node_Str"");
    long blogId=MapUtils.getMapLong(blog,""String_Node_Str"");
    PreferenceScreen prefScreen=getPreferenceManager().createPreferenceScreen(context);
    prefScreen.setTitle(title);
    prefScreen.setSummary(UrlUtils.getDomainFromUrl(siteUrl));
    addPreferencesForPreferenceScreen(prefScreen,Channel.BLOGS,blogId);
    blogsCategory.addPreference(prefScreen);
  }
}",0.9411167512690356
14302,"@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  if (newValue == null)   return false;
  if (preference == mTitlePreference) {
    changeEditTextPreferenceValue(mTitlePreference,newValue.toString());
    return true;
  }
 else   if (preference == mTaglinePreference) {
    changeEditTextPreferenceValue(mTaglinePreference,newValue.toString());
    return true;
  }
 else   if (preference == mAddressPreference) {
    changeEditTextPreferenceValue(mAddressPreference,newValue.toString());
    return true;
  }
 else   if (preference == mLanguagePreference) {
    changeLanguageValue(newValue.toString());
    return true;
  }
 else   if (preference == mPrivacyPreference) {
    mPrivacyPreference.setSummary(privacyStringForValue(Integer.valueOf(newValue.toString())));
    return true;
  }
  return false;
}","@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  if (newValue == null)   return false;
  if (preference == mTitlePreference) {
    changeEditTextPreferenceValue(mTitlePreference,newValue.toString());
    return true;
  }
 else   if (preference == mTaglinePreference) {
    changeEditTextPreferenceValue(mTaglinePreference,newValue.toString());
    return true;
  }
 else   if (preference == mAddressPreference) {
    changeEditTextPreferenceValue(mAddressPreference,newValue.toString());
    return true;
  }
 else   if (preference == mLanguagePreference) {
    changeLanguageValue(newValue.toString());
    return true;
  }
 else   if (preference == mPrivacyPreference) {
    changePrivacyValue(Integer.valueOf(newValue.toString()));
    return true;
  }
  return false;
}",0.9721886336154776
14303,"/** 
 * Helper method to parse JSON response to REST request.
 */
private void handleResponseToWPComSettingsRequest(JSONObject response){
  if (mTitlePreference != null) {
    mTitlePreference.setEnabled(true);
    mRemoteTitle=response.optString(RestClientUtils.SITE_TITLE_KEY);
    changeEditTextPreferenceValue(mTitlePreference,mRemoteTitle);
  }
  if (mTaglinePreference != null) {
    mTaglinePreference.setEnabled(true);
    mRemoteTagline=response.optString(RestClientUtils.SITE_DESC_KEY);
    changeEditTextPreferenceValue(mTaglinePreference,mRemoteTagline);
  }
  mRemoteAddress=response.optString(RestClientUtils.SITE_URL_KEY);
  changeEditTextPreferenceValue(mAddressPreference,mRemoteAddress);
  JSONObject settingsObject=response.optJSONObject(""String_Node_Str"");
  if (settingsObject != null) {
    mRemoteLanguage=convertLanguageIdToLanguageCode(settingsObject.optString(""String_Node_Str""));
    if (mLanguagePreference != null) {
      String[] languageCodes=getResources().getStringArray(R.array.language_codes);
      mLanguagePreference.setEntries(createLanguageDisplayStrings(languageCodes));
      mLanguagePreference.setDetails(createLanguageDetailDisplayStrings(languageCodes,mRemoteLanguage));
      mLanguagePreference.setEnabled(true);
      changeLanguageValue(mRemoteLanguage);
      mLanguagePreference.setSummary(firstLetterCapitalized(getLanguageString(mRemoteLanguage,new Locale(localeInput(mRemoteLanguage)))));
    }
    mRemotePrivacy=settingsObject.optInt(""String_Node_Str"");
    if (mPrivacyPreference != null) {
      mPrivacyPreference.setEnabled(true);
      mPrivacyPreference.setValue(String.valueOf(mRemotePrivacy));
    }
    changePrivacyValue(mRemotePrivacy);
  }
}","/** 
 * Helper method to parse JSON response to REST request.
 */
private void handleResponseToWPComSettingsRequest(JSONObject response){
  if (mTitlePreference != null) {
    mTitlePreference.setEnabled(true);
    mRemoteTitle=response.optString(RestClientUtils.SITE_TITLE_KEY);
    changeEditTextPreferenceValue(mTitlePreference,mRemoteTitle);
  }
  if (mTaglinePreference != null) {
    mTaglinePreference.setEnabled(true);
    mRemoteTagline=response.optString(RestClientUtils.SITE_DESC_KEY);
    changeEditTextPreferenceValue(mTaglinePreference,mRemoteTagline);
  }
  mRemoteAddress=response.optString(RestClientUtils.SITE_URL_KEY);
  changeEditTextPreferenceValue(mAddressPreference,mRemoteAddress);
  JSONObject settingsObject=response.optJSONObject(""String_Node_Str"");
  if (settingsObject != null) {
    mRemoteLanguage=convertLanguageIdToLanguageCode(settingsObject.optString(""String_Node_Str""));
    if (mLanguagePreference != null) {
      String[] languageCodes=getResources().getStringArray(R.array.language_codes);
      mLanguagePreference.setEntries(createLanguageDisplayStrings(languageCodes));
      mLanguagePreference.setDetails(createLanguageDetailDisplayStrings(languageCodes,mRemoteLanguage));
      mLanguagePreference.setEnabled(true);
      changeLanguageValue(mRemoteLanguage);
      mLanguagePreference.setSummary(firstLetterCapitalized(getLanguageString(mRemoteLanguage,new Locale(localeInput(mRemoteLanguage)))));
    }
    mRemotePrivacy=settingsObject.optInt(""String_Node_Str"");
    if (mPrivacyPreference != null) {
      mPrivacyPreference.setEnabled(true);
      mPrivacyPreference.setValue(String.valueOf(mRemotePrivacy));
      mPrivacyPreference.setSummary(privacyStringForValue(mRemotePrivacy));
    }
  }
}",0.9664545980335454
14304,"private void changePrivacyValue(int newValue){
  if (mPrivacyPreference != null && Integer.valueOf(mPrivacyPreference.getValue()) == newValue) {
    mPrivacyPreference.setValue(String.valueOf(newValue));
    mPrivacyPreference.setSummary(privacyStringForValue(newValue));
  }
}","private void changePrivacyValue(int newValue){
  if (mPrivacyPreference != null && Integer.valueOf(mPrivacyPreference.getValue()) != newValue) {
    mPrivacyPreference.setValue(String.valueOf(newValue));
    mPrivacyPreference.setSummary(privacyStringForValue(newValue));
    mPrivacyPreference.refreshAdapter();
  }
}",0.9277310924369748
14305,"@SuppressWarnings(""String_Node_Str"") public static boolean isNotificationsEnabled(Context context){
  AppOpsManager mAppOps=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
  ApplicationInfo appInfo=context.getApplicationInfo();
  String pkg=context.getApplicationContext().getPackageName();
  int uid=appInfo.uid;
  Class appOpsClass;
  try {
    appOpsClass=Class.forName(AppOpsManager.class.getName());
    Method checkOpNoThrowMethod=appOpsClass.getMethod(CHECK_OP_NO_THROW,Integer.TYPE,Integer.TYPE,String.class);
    Field opPostNotificationValue=appOpsClass.getDeclaredField(OP_POST_NOTIFICATION);
    int value=(int)opPostNotificationValue.get(Integer.class);
    return ((int)checkOpNoThrowMethod.invoke(mAppOps,value,uid,pkg) == AppOpsManager.MODE_ALLOWED);
  }
 catch (  ClassNotFoundException|NoSuchFieldException|NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
    e.printStackTrace();
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") @TargetApi(19) public static boolean isNotificationsEnabled(Context context){
  if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    AppOpsManager mAppOps=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
    ApplicationInfo appInfo=context.getApplicationInfo();
    String pkg=context.getApplicationContext().getPackageName();
    int uid=appInfo.uid;
    Class appOpsClass;
    try {
      appOpsClass=Class.forName(AppOpsManager.class.getName());
      Method checkOpNoThrowMethod=appOpsClass.getMethod(CHECK_OP_NO_THROW,Integer.TYPE,Integer.TYPE,String.class);
      Field opPostNotificationValue=appOpsClass.getDeclaredField(OP_POST_NOTIFICATION);
      int value=(int)opPostNotificationValue.get(Integer.class);
      return ((int)checkOpNoThrowMethod.invoke(mAppOps,value,uid,pkg) == AppOpsManager.MODE_ALLOWED);
    }
 catch (    ClassNotFoundException|NoSuchFieldException|NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
      e.printStackTrace();
    }
  }
  return true;
}",0.9092682926829267
14306,"public ReaderPostViewHolder(View itemView){
  super(itemView);
  cardView=(CardView)itemView.findViewById(R.id.card_view);
  txtTitle=(TextView)itemView.findViewById(R.id.text_title);
  txtText=(TextView)itemView.findViewById(R.id.text_excerpt);
  txtBlogName=(TextView)itemView.findViewById(R.id.text_blog_name);
  txtDate=(TextView)itemView.findViewById(R.id.text_date);
  txtTag=(TextView)itemView.findViewById(R.id.text_tag);
  commentCount=(ReaderIconCountView)itemView.findViewById(R.id.count_comments);
  likeCount=(ReaderIconCountView)itemView.findViewById(R.id.count_likes);
  imgFeatured=(WPNetworkImageView)itemView.findViewById(R.id.image_featured);
  imgAvatar=(WPNetworkImageView)itemView.findViewById(R.id.image_avatar);
  imgMore=(ImageView)itemView.findViewById(R.id.image_more);
  layoutPostHeader=(ViewGroup)itemView.findViewById(R.id.layout_post_header);
  layoutDiscover=(ViewGroup)itemView.findViewById(R.id.layout_discover);
  imgDiscoverAvatar=(WPNetworkImageView)layoutDiscover.findViewById(R.id.image_discover_avatar);
  txtDiscover=(TextView)layoutDiscover.findViewById(R.id.text_discover);
  if (getPostListType() == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
    txtBlogName.setTextColor(R.color.grey_lighten_10);
  }
}","public ReaderPostViewHolder(View itemView){
  super(itemView);
  cardView=(CardView)itemView.findViewById(R.id.card_view);
  txtTitle=(TextView)itemView.findViewById(R.id.text_title);
  txtText=(TextView)itemView.findViewById(R.id.text_excerpt);
  txtBlogName=(TextView)itemView.findViewById(R.id.text_blog_name);
  txtDate=(TextView)itemView.findViewById(R.id.text_date);
  txtTag=(TextView)itemView.findViewById(R.id.text_tag);
  commentCount=(ReaderIconCountView)itemView.findViewById(R.id.count_comments);
  likeCount=(ReaderIconCountView)itemView.findViewById(R.id.count_likes);
  imgFeatured=(WPNetworkImageView)itemView.findViewById(R.id.image_featured);
  imgAvatar=(WPNetworkImageView)itemView.findViewById(R.id.image_avatar);
  imgMore=(ImageView)itemView.findViewById(R.id.image_more);
  layoutPostHeader=(ViewGroup)itemView.findViewById(R.id.layout_post_header);
  layoutDiscover=(ViewGroup)itemView.findViewById(R.id.layout_discover);
  imgDiscoverAvatar=(WPNetworkImageView)layoutDiscover.findViewById(R.id.image_discover_avatar);
  txtDiscover=(TextView)layoutDiscover.findViewById(R.id.text_discover);
  if (getPostListType() == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
    int color=itemView.getContext().getResources().getColor(R.color.grey_lighten_10);
    txtBlogName.setTextColor(color);
  }
}",0.9595645412130638
14307,"public static void viewCurrentSite(Context context){
  Intent intent=new Intent(context,ViewSiteActivity.class);
  slideInFromRight(context,intent);
}","public static void viewCurrentSite(Context context){
  Intent intent=new Intent(context,ViewSiteActivity.class);
  slideInFromRight(context,intent);
  AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_VIEW_SITE);
}",0.819672131147541
14308,"public static void viewBlogSettingsForResult(Activity activity,Blog blog){
  if (blog == null)   return;
  Intent intent=new Intent(activity,BlogPreferencesActivity.class);
  intent.putExtra(BlogPreferencesActivity.ARG_LOCAL_BLOG_ID,blog.getLocalTableBlogId());
  slideInFromRightForResult(activity,intent,RequestCodes.BLOG_SETTINGS);
}","public static void viewBlogSettingsForResult(Activity activity,Blog blog){
  if (blog == null)   return;
  Intent intent=new Intent(activity,BlogPreferencesActivity.class);
  intent.putExtra(BlogPreferencesActivity.ARG_LOCAL_BLOG_ID,blog.getLocalTableBlogId());
  slideInFromRightForResult(activity,intent,RequestCodes.BLOG_SETTINGS);
  AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_SETTINGS);
}",0.9118046132971506
14309,"public static void viewCurrentBlogPages(Context context){
  Intent intent=new Intent(context,PagesListActivity.class);
  intent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,true);
  slideInFromRight(context,intent);
}","public static void viewCurrentBlogPages(Context context){
  Intent intent=new Intent(context,PagesListActivity.class);
  intent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,true);
  slideInFromRight(context,intent);
  AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_PAGES);
}",0.8744939271255061
14310,"public static void viewCurrentBlogComments(Context context){
  Intent intent=new Intent(context,CommentsActivity.class);
  slideInFromRight(context,intent);
}","public static void viewCurrentBlogComments(Context context){
  Intent intent=new Intent(context,CommentsActivity.class);
  slideInFromRight(context,intent);
  AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_COMMENTS);
}",0.8293963254593176
14311,"public static void viewCurrentBlogPosts(Context context){
  Intent intent=new Intent(context,PostsListActivity.class);
  slideInFromRight(context,intent);
}","public static void viewCurrentBlogPosts(Context context){
  Intent intent=new Intent(context,PostsListActivity.class);
  slideInFromRight(context,intent);
  AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_POSTS);
}",0.8342245989304813
14312,"public static void viewCurrentBlogMedia(Context context){
  Intent intent=new Intent(context,MediaBrowserActivity.class);
  slideInFromRight(context,intent);
}","public static void viewCurrentBlogMedia(Context context){
  Intent intent=new Intent(context,MediaBrowserActivity.class);
  slideInFromRight(context,intent);
  AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_MEDIA_LIBRARY);
}",0.8195876288659794
14313,"private void trackLastVisibleTab(int position){
switch (position) {
case WPMainTabAdapter.TAB_MY_SITE:
    ActivityId.trackLastActivity(ActivityId.MY_SITE);
  break;
case WPMainTabAdapter.TAB_READER:
ActivityId.trackLastActivity(ActivityId.READER);
break;
case WPMainTabAdapter.TAB_ME:
ActivityId.trackLastActivity(ActivityId.ME);
break;
case WPMainTabAdapter.TAB_NOTIFS:
ActivityId.trackLastActivity(ActivityId.NOTIFICATIONS);
break;
default :
break;
}
}","private void trackLastVisibleTab(int position){
switch (position) {
case WPMainTabAdapter.TAB_MY_SITE:
    ActivityId.trackLastActivity(ActivityId.MY_SITE);
  AnalyticsTracker.track(AnalyticsTracker.Stat.MY_SITE_ACCESSED);
break;
case WPMainTabAdapter.TAB_READER:
ActivityId.trackLastActivity(ActivityId.READER);
AnalyticsTracker.track(AnalyticsTracker.Stat.READER_ACCESSED);
break;
case WPMainTabAdapter.TAB_ME:
ActivityId.trackLastActivity(ActivityId.ME);
AnalyticsTracker.track(AnalyticsTracker.Stat.ME_ACCESSED);
break;
case WPMainTabAdapter.TAB_NOTIFS:
ActivityId.trackLastActivity(ActivityId.NOTIFICATIONS);
AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_ACCESSED);
break;
default :
break;
}
}",0.7804459691252144
14314,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_SETTINGS);
  }
  addPreferencesFromResource(R.xml.settings);
  OnPreferenceChangeListener preferenceChangeListener=new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (newValue != null) {
        preference.setSummary(newValue.toString());
      }
      ActivityUtils.hideKeyboard(getActivity());
      return true;
    }
  }
;
  mTaglineTextPreference=(WPEditTextPreference)findPreference(getString(R.string.pref_key_post_sig));
  if (mTaglineTextPreference != null) {
    mTaglineTextPreference.setOnPreferenceChangeListener(preferenceChangeListener);
  }
  findPreference(getString(R.string.pref_key_language)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_app_about)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_notifications)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_oss_licenses)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_reset_shared_pref)).setOnPreferenceClickListener(this);
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  initNotifications();
  updatePostSignature();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.settings);
  OnPreferenceChangeListener preferenceChangeListener=new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (newValue != null) {
        preference.setSummary(newValue.toString());
      }
      ActivityUtils.hideKeyboard(getActivity());
      return true;
    }
  }
;
  mTaglineTextPreference=(WPEditTextPreference)findPreference(getString(R.string.pref_key_post_sig));
  if (mTaglineTextPreference != null) {
    mTaglineTextPreference.setOnPreferenceChangeListener(preferenceChangeListener);
  }
  findPreference(getString(R.string.pref_key_language)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_app_about)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_notifications)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_oss_licenses)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_reset_shared_pref)).setOnPreferenceClickListener(this);
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  initNotifications();
  updatePostSignature();
}",0.9613019891500904
14315,"private void readIntent(Intent intent,Bundle savedInstanceState){
  if (intent == null) {
    return;
  }
  ReaderTypes.ReaderPostListType postListType;
  if (intent.hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
    postListType=(ReaderTypes.ReaderPostListType)intent.getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
  }
 else {
    postListType=ReaderTypes.DEFAULT_POST_LIST_TYPE;
  }
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.READER_ACCESSED);
    if (postListType == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
      long blogId=intent.getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
      long feedId=intent.getLongExtra(ReaderConstants.ARG_FEED_ID,0);
      if (feedId != 0) {
        showListFragmentForFeed(feedId);
      }
 else {
        showListFragmentForBlog(blogId);
      }
    }
 else {
      ReaderTag tag;
      if (intent.hasExtra(ReaderConstants.ARG_TAG)) {
        tag=(ReaderTag)intent.getSerializableExtra(ReaderConstants.ARG_TAG);
      }
 else {
        tag=AppPrefs.getReaderTag();
      }
      if (postListType == ReaderTypes.ReaderPostListType.TAG_FOLLOWED && !ReaderTagTable.tagExists(tag)) {
        tag=ReaderTag.getDefaultTag();
      }
      showListFragmentForTag(tag,postListType);
    }
  }
switch (postListType) {
case TAG_PREVIEW:
    setTitle(R.string.reader_title_tag_preview);
  break;
case BLOG_PREVIEW:
setTitle(R.string.reader_title_blog_preview);
break;
default :
break;
}
}","private void readIntent(Intent intent,Bundle savedInstanceState){
  if (intent == null) {
    return;
  }
  ReaderTypes.ReaderPostListType postListType;
  if (intent.hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
    postListType=(ReaderTypes.ReaderPostListType)intent.getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
  }
 else {
    postListType=ReaderTypes.DEFAULT_POST_LIST_TYPE;
  }
  if (savedInstanceState == null) {
    if (postListType == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
      long blogId=intent.getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
      long feedId=intent.getLongExtra(ReaderConstants.ARG_FEED_ID,0);
      if (feedId != 0) {
        showListFragmentForFeed(feedId);
      }
 else {
        showListFragmentForBlog(blogId);
      }
    }
 else {
      ReaderTag tag;
      if (intent.hasExtra(ReaderConstants.ARG_TAG)) {
        tag=(ReaderTag)intent.getSerializableExtra(ReaderConstants.ARG_TAG);
      }
 else {
        tag=AppPrefs.getReaderTag();
      }
      if (postListType == ReaderTypes.ReaderPostListType.TAG_FOLLOWED && !ReaderTagTable.tagExists(tag)) {
        tag=ReaderTag.getDefaultTag();
      }
      showListFragmentForTag(tag,postListType);
    }
  }
switch (postListType) {
case TAG_PREVIEW:
    setTitle(R.string.reader_title_tag_preview);
  break;
case BLOG_PREVIEW:
setTitle(R.string.reader_title_blog_preview);
break;
default :
break;
}
}",0.9767280305661687
14316,"private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions=null;
switch (stat) {
case APPLICATION_STARTED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
break;
case APPLICATION_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyToIncrement(""String_Node_Str"");
incrementSessionCount();
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_PREVIEWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_OPENED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIKED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_REBLOGGED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_UNFOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LOADED_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_LOADED_FRESHLY_PRESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_COMMENTED_ON_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOCKED_BLOG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SAVED_DRAFT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CLOSED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BLOCKQUOTE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_UNAPPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case SIGNED_IN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_INSIGHTS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_DAYS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SINGLE_POST_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_OPENED_WEB_VERSION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_TAPPED_BAR_CHART:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SCROLLED_TO_BOTTOM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_RECEIVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case LOGIN_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SETTINGS_LANGUAGE_SELECTION_FORCED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}","private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions=null;
switch (stat) {
case APPLICATION_STARTED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
break;
case APPLICATION_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyToIncrement(""String_Node_Str"");
incrementSessionCount();
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_PREVIEWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_OPENED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIKED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_REBLOGGED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_UNFOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LOADED_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_LOADED_FRESHLY_PRESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_COMMENTED_ON_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOCKED_BLOG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SAVED_DRAFT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CLOSED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BLOCKQUOTE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_UNAPPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case SIGNED_IN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_INSIGHTS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_DAYS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SINGLE_POST_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_OPENED_WEB_VERSION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_TAPPED_BAR_CHART:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SCROLLED_TO_BOTTOM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_RECEIVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case LOGIN_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SETTINGS_LANGUAGE_SELECTION_FORCED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case MY_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}",0.9891252239295536
14317,"@Override public void track(AnalyticsTracker.Stat stat,Map<String,?> properties){
  if (mNosaraClient == null) {
    return;
  }
  Map<String,Object> predefinedEventProperties=new HashMap<String,Object>();
  String eventName;
switch (stat) {
case APPLICATION_STARTED:
    eventName=""String_Node_Str"";
  break;
case APPLICATION_OPENED:
eventName=""String_Node_Str"";
break;
case APPLICATION_CLOSED:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_THEMES_BROWSER:
eventName=""String_Node_Str"";
break;
case THEMES_CHANGED_THEME:
eventName=""String_Node_Str"";
break;
case THEMES_PREVIEWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_ACCESSED:
eventName=""String_Node_Str"";
break;
case READER_OPENED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_LIKED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_REBLOGGED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_INFINITE_SCROLL:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_UNFOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_FRESHLY_PRESSED:
eventName=""String_Node_Str"";
break;
case READER_COMMENTED_ON_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_BLOCKED_BLOG:
eventName=""String_Node_Str"";
break;
case READER_BLOG_PREVIEW:
eventName=""String_Node_Str"";
break;
case READER_TAG_PREVIEW:
eventName=""String_Node_Str"";
break;
case EDITOR_CREATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SAVED_DRAFT:
eventName=""String_Node_Str"";
break;
case EDITOR_CLOSED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_UPDATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SCHEDULED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_TAPPED_BLOCKQUOTE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
eventName=""String_Node_Str"";
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNAPPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_REPLIED_TO:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_TRASHED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_LIKED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNLIKED:
eventName=""String_Node_Str"";
break;
case OPENED_POSTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_PAGES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_COMMENTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_SETTINGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case CREATED_ACCOUNT:
eventName=""String_Node_Str"";
break;
case SHARED_ITEM:
eventName=""String_Node_Str"";
break;
case ADDED_SELF_HOSTED_SITE:
eventName=""String_Node_Str"";
break;
case SIGNED_IN:
eventName=""String_Node_Str"";
break;
case SIGNED_INTO_JETPACK:
eventName=""String_Node_Str"";
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
eventName=""String_Node_Str"";
break;
case STATS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_INSIGHTS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_PERIOD_DAYS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_SINGLE_POST_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_OPENED_WEB_VERSION:
eventName=""String_Node_Str"";
break;
case STATS_TAPPED_BAR_CHART:
eventName=""String_Node_Str"";
break;
case STATS_SCROLLED_TO_BOTTOM:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_INSTALL_JETPACK:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_RECEIVED:
eventName=""String_Node_Str"";
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
eventName=""String_Node_Str"";
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
eventName=""String_Node_Str"";
break;
default :
eventName=null;
break;
}
if (eventName == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + stat.name() + ""String_Node_Str"");
return;
}
final String user;
final TracksClient.NosaraUserType userType;
if (mWpcomUserName != null) {
user=mWpcomUserName;
userType=TracksClient.NosaraUserType.WPCOM;
}
 else {
if (getAnonID() == null) {
user=generateNewAnonID();
}
 else {
user=getAnonID();
}
userType=TracksClient.NosaraUserType.ANON;
}
final JSONObject propertiesToJSON;
if (properties != null && properties.size() > 0) {
propertiesToJSON=new JSONObject(properties);
for (String key : predefinedEventProperties.keySet()) {
try {
if (propertiesToJSON.has(key)) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str"");
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + propertiesToJSON.get(key).toString() + ""String_Node_Str""+ predefinedEventProperties.get(key).toString());
}
 else {
propertiesToJSON.put(key,predefinedEventProperties.get(key));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
}
}
}
 else {
propertiesToJSON=new JSONObject(predefinedEventProperties);
}
if (propertiesToJSON.length() > 0) {
mNosaraClient.track(EVENTS_PREFIX + eventName,propertiesToJSON,user,userType);
}
 else {
mNosaraClient.track(EVENTS_PREFIX + eventName,user,userType);
}
}","@Override public void track(AnalyticsTracker.Stat stat,Map<String,?> properties){
  if (mNosaraClient == null) {
    return;
  }
  Map<String,Object> predefinedEventProperties=new HashMap<String,Object>();
  String eventName;
switch (stat) {
case APPLICATION_STARTED:
    eventName=""String_Node_Str"";
  break;
case APPLICATION_OPENED:
eventName=""String_Node_Str"";
break;
case APPLICATION_CLOSED:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_THEMES_BROWSER:
eventName=""String_Node_Str"";
break;
case THEMES_CHANGED_THEME:
eventName=""String_Node_Str"";
break;
case THEMES_PREVIEWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_ACCESSED:
eventName=""String_Node_Str"";
break;
case READER_OPENED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_LIKED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_REBLOGGED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_INFINITE_SCROLL:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_UNFOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_FRESHLY_PRESSED:
eventName=""String_Node_Str"";
break;
case READER_COMMENTED_ON_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_BLOCKED_BLOG:
eventName=""String_Node_Str"";
break;
case READER_BLOG_PREVIEW:
eventName=""String_Node_Str"";
break;
case READER_TAG_PREVIEW:
eventName=""String_Node_Str"";
break;
case EDITOR_CREATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SAVED_DRAFT:
eventName=""String_Node_Str"";
break;
case EDITOR_CLOSED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_UPDATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SCHEDULED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_TAPPED_BLOCKQUOTE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
eventName=""String_Node_Str"";
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNAPPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_REPLIED_TO:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_TRASHED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_LIKED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNLIKED:
eventName=""String_Node_Str"";
break;
case OPENED_POSTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_PAGES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_COMMENTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_SETTINGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case CREATED_ACCOUNT:
eventName=""String_Node_Str"";
break;
case SHARED_ITEM:
eventName=""String_Node_Str"";
break;
case ADDED_SELF_HOSTED_SITE:
eventName=""String_Node_Str"";
break;
case SIGNED_IN:
eventName=""String_Node_Str"";
break;
case SIGNED_INTO_JETPACK:
eventName=""String_Node_Str"";
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
eventName=""String_Node_Str"";
break;
case STATS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_INSIGHTS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_PERIOD_DAYS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_SINGLE_POST_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_OPENED_WEB_VERSION:
eventName=""String_Node_Str"";
break;
case STATS_TAPPED_BAR_CHART:
eventName=""String_Node_Str"";
break;
case STATS_SCROLLED_TO_BOTTOM:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_INSTALL_JETPACK:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_RECEIVED:
eventName=""String_Node_Str"";
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
eventName=""String_Node_Str"";
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
eventName=""String_Node_Str"";
break;
case ME_ACCESSED:
eventName=""String_Node_Str"";
break;
case MY_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
default :
eventName=null;
break;
}
if (eventName == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + stat.name() + ""String_Node_Str"");
return;
}
final String user;
final TracksClient.NosaraUserType userType;
if (mWpcomUserName != null) {
user=mWpcomUserName;
userType=TracksClient.NosaraUserType.WPCOM;
}
 else {
if (getAnonID() == null) {
user=generateNewAnonID();
}
 else {
user=getAnonID();
}
userType=TracksClient.NosaraUserType.ANON;
}
final JSONObject propertiesToJSON;
if (properties != null && properties.size() > 0) {
propertiesToJSON=new JSONObject(properties);
for (String key : predefinedEventProperties.keySet()) {
try {
if (propertiesToJSON.has(key)) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str"");
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + propertiesToJSON.get(key).toString() + ""String_Node_Str""+ predefinedEventProperties.get(key).toString());
}
 else {
propertiesToJSON.put(key,predefinedEventProperties.get(key));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
}
}
}
 else {
propertiesToJSON=new JSONObject(predefinedEventProperties);
}
if (propertiesToJSON.length() > 0) {
mNosaraClient.track(EVENTS_PREFIX + eventName,propertiesToJSON,user,userType);
}
 else {
mNosaraClient.track(EVENTS_PREFIX + eventName,user,userType);
}
}",0.9933258519874786
14318,"private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions=null;
switch (stat) {
case APPLICATION_STARTED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
break;
case APPLICATION_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyToIncrement(""String_Node_Str"");
incrementSessionCount();
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_PREVIEWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_OPENED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIKED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_REBLOGGED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_UNFOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LOADED_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_LOADED_FRESHLY_PRESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_COMMENTED_ON_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOCKED_BLOG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SAVED_DRAFT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CLOSED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BLOCKQUOTE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_UNAPPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case SIGNED_IN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_INSIGHTS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_DAYS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SINGLE_POST_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_OPENED_WEB_VERSION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_TAPPED_BAR_CHART:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SCROLLED_TO_BOTTOM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_RECEIVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case LOGIN_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SETTINGS_LANGUAGE_SELECTION_FORCED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}","private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions=null;
switch (stat) {
case APPLICATION_STARTED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
break;
case APPLICATION_OPENED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyToIncrement(""String_Node_Str"");
incrementSessionCount();
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case THEMES_PREVIEWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_OPENED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_LIKED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_REBLOGGED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_UNFOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LOADED_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_LOADED_FRESHLY_PRESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_COMMENTED_ON_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_FOLLOWED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOCKED_BLOG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_BLOG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case READER_TAG_PREVIEW:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SAVED_DRAFT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_CLOSED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BLOCKQUOTE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_UNAPPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_LIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_UNLIKED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case OPENED_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case SIGNED_IN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_INSIGHTS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_DAYS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SINGLE_POST_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_OPENED_WEB_VERSION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_TAPPED_BAR_CHART:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SCROLLED_TO_BOTTOM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
instructions.setCurrentDateForPeopleProperty(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case PUSH_NOTIFICATION_RECEIVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case LOGIN_FAILED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SETTINGS_LANGUAGE_SELECTION_FORCED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case ME_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case MY_SITE_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}",0.9891252239295536
14319,"@Override public void track(AnalyticsTracker.Stat stat,Map<String,?> properties){
  if (mNosaraClient == null) {
    return;
  }
  Map<String,Object> predefinedEventProperties=new HashMap<String,Object>();
  String eventName;
switch (stat) {
case APPLICATION_STARTED:
    eventName=""String_Node_Str"";
  break;
case APPLICATION_OPENED:
eventName=""String_Node_Str"";
break;
case APPLICATION_CLOSED:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_THEMES_BROWSER:
eventName=""String_Node_Str"";
break;
case THEMES_CHANGED_THEME:
eventName=""String_Node_Str"";
break;
case THEMES_PREVIEWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_ACCESSED:
eventName=""String_Node_Str"";
break;
case READER_OPENED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_LIKED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_REBLOGGED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_INFINITE_SCROLL:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_UNFOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_FRESHLY_PRESSED:
eventName=""String_Node_Str"";
break;
case READER_COMMENTED_ON_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_BLOCKED_BLOG:
eventName=""String_Node_Str"";
break;
case READER_BLOG_PREVIEW:
eventName=""String_Node_Str"";
break;
case READER_TAG_PREVIEW:
eventName=""String_Node_Str"";
break;
case EDITOR_CREATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SAVED_DRAFT:
eventName=""String_Node_Str"";
break;
case EDITOR_CLOSED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_UPDATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SCHEDULED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_TAPPED_BLOCKQUOTE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
eventName=""String_Node_Str"";
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNAPPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_REPLIED_TO:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_TRASHED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_LIKED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNLIKED:
eventName=""String_Node_Str"";
break;
case OPENED_POSTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_PAGES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_COMMENTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_SETTINGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case CREATED_ACCOUNT:
eventName=""String_Node_Str"";
break;
case SHARED_ITEM:
eventName=""String_Node_Str"";
break;
case ADDED_SELF_HOSTED_SITE:
eventName=""String_Node_Str"";
break;
case SIGNED_IN:
eventName=""String_Node_Str"";
break;
case SIGNED_INTO_JETPACK:
eventName=""String_Node_Str"";
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
eventName=""String_Node_Str"";
break;
case STATS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_INSIGHTS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_PERIOD_DAYS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_SINGLE_POST_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_OPENED_WEB_VERSION:
eventName=""String_Node_Str"";
break;
case STATS_TAPPED_BAR_CHART:
eventName=""String_Node_Str"";
break;
case STATS_SCROLLED_TO_BOTTOM:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_INSTALL_JETPACK:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_RECEIVED:
eventName=""String_Node_Str"";
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
eventName=""String_Node_Str"";
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
eventName=""String_Node_Str"";
break;
default :
eventName=null;
break;
}
if (eventName == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + stat.name() + ""String_Node_Str"");
return;
}
final String user;
final TracksClient.NosaraUserType userType;
if (mWpcomUserName != null) {
user=mWpcomUserName;
userType=TracksClient.NosaraUserType.WPCOM;
}
 else {
if (getAnonID() == null) {
user=generateNewAnonID();
}
 else {
user=getAnonID();
}
userType=TracksClient.NosaraUserType.ANON;
}
final JSONObject propertiesToJSON;
if (properties != null && properties.size() > 0) {
propertiesToJSON=new JSONObject(properties);
for (String key : predefinedEventProperties.keySet()) {
try {
if (propertiesToJSON.has(key)) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str"");
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + propertiesToJSON.get(key).toString() + ""String_Node_Str""+ predefinedEventProperties.get(key).toString());
}
 else {
propertiesToJSON.put(key,predefinedEventProperties.get(key));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
}
}
}
 else {
propertiesToJSON=new JSONObject(predefinedEventProperties);
}
if (propertiesToJSON.length() > 0) {
mNosaraClient.track(EVENTS_PREFIX + eventName,propertiesToJSON,user,userType);
}
 else {
mNosaraClient.track(EVENTS_PREFIX + eventName,user,userType);
}
}","@Override public void track(AnalyticsTracker.Stat stat,Map<String,?> properties){
  if (mNosaraClient == null) {
    return;
  }
  Map<String,Object> predefinedEventProperties=new HashMap<String,Object>();
  String eventName;
switch (stat) {
case APPLICATION_STARTED:
    eventName=""String_Node_Str"";
  break;
case APPLICATION_OPENED:
eventName=""String_Node_Str"";
break;
case APPLICATION_CLOSED:
eventName=""String_Node_Str"";
break;
case THEMES_ACCESSED_THEMES_BROWSER:
eventName=""String_Node_Str"";
break;
case THEMES_CHANGED_THEME:
eventName=""String_Node_Str"";
break;
case THEMES_PREVIEWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_ACCESSED:
eventName=""String_Node_Str"";
break;
case READER_OPENED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_LIKED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_REBLOGGED_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_INFINITE_SCROLL:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_UNFOLLOWED_READER_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_TAG:
eventName=""String_Node_Str"";
break;
case READER_LOADED_FRESHLY_PRESSED:
eventName=""String_Node_Str"";
break;
case READER_COMMENTED_ON_ARTICLE:
eventName=""String_Node_Str"";
break;
case READER_FOLLOWED_SITE:
eventName=""String_Node_Str"";
break;
case READER_BLOCKED_BLOG:
eventName=""String_Node_Str"";
break;
case READER_BLOG_PREVIEW:
eventName=""String_Node_Str"";
break;
case READER_TAG_PREVIEW:
eventName=""String_Node_Str"";
break;
case EDITOR_CREATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SAVED_DRAFT:
eventName=""String_Node_Str"";
break;
case EDITOR_CLOSED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_UPDATED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_SCHEDULED_POST:
eventName=""String_Node_Str"";
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",true);
break;
case EDITOR_TAPPED_BLOCKQUOTE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_BOLD:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_IMAGE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_ITALIC:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_LINK:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_MORE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_STRIKETHROUGH:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case EDITOR_TAPPED_UNDERLINE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
eventName=""String_Node_Str"";
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_APPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNAPPROVED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_REPLIED_TO:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_TRASHED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_LIKED:
eventName=""String_Node_Str"";
break;
case NOTIFICATION_UNLIKED:
eventName=""String_Node_Str"";
break;
case OPENED_POSTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_PAGES:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_COMMENTS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_SITE:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_VIEW_ADMIN:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case OPENED_SETTINGS:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case CREATED_ACCOUNT:
eventName=""String_Node_Str"";
break;
case SHARED_ITEM:
eventName=""String_Node_Str"";
break;
case ADDED_SELF_HOSTED_SITE:
eventName=""String_Node_Str"";
break;
case SIGNED_IN:
eventName=""String_Node_Str"";
break;
case SIGNED_INTO_JETPACK:
eventName=""String_Node_Str"";
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
eventName=""String_Node_Str"";
break;
case STATS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_INSIGHTS_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_PERIOD_DAYS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_WEEKS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_MONTHS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_PERIOD_YEARS_ACCESSED:
eventName=""String_Node_Str"";
predefinedEventProperties.put(""String_Node_Str"",""String_Node_Str"");
break;
case STATS_VIEW_ALL_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_SINGLE_POST_ACCESSED:
eventName=""String_Node_Str"";
break;
case STATS_OPENED_WEB_VERSION:
eventName=""String_Node_Str"";
break;
case STATS_TAPPED_BAR_CHART:
eventName=""String_Node_Str"";
break;
case STATS_SCROLLED_TO_BOTTOM:
eventName=""String_Node_Str"";
break;
case STATS_SELECTED_INSTALL_JETPACK:
eventName=""String_Node_Str"";
break;
case PUSH_NOTIFICATION_RECEIVED:
eventName=""String_Node_Str"";
break;
case SUPPORT_OPENED_HELPSHIFT_SCREEN:
eventName=""String_Node_Str"";
break;
case SUPPORT_SENT_REPLY_TO_SUPPORT_MESSAGE:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED:
eventName=""String_Node_Str"";
break;
case LOGIN_FAILED_TO_GUESS_XMLRPC:
eventName=""String_Node_Str"";
break;
case ME_ACCESSED:
eventName=""String_Node_Str"";
break;
case MY_SITE_ACCESSED:
eventName=""String_Node_Str"";
break;
default :
eventName=null;
break;
}
if (eventName == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + stat.name() + ""String_Node_Str"");
return;
}
final String user;
final TracksClient.NosaraUserType userType;
if (mWpcomUserName != null) {
user=mWpcomUserName;
userType=TracksClient.NosaraUserType.WPCOM;
}
 else {
if (getAnonID() == null) {
user=generateNewAnonID();
}
 else {
user=getAnonID();
}
userType=TracksClient.NosaraUserType.ANON;
}
final JSONObject propertiesToJSON;
if (properties != null && properties.size() > 0) {
propertiesToJSON=new JSONObject(properties);
for (String key : predefinedEventProperties.keySet()) {
try {
if (propertiesToJSON.has(key)) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str"");
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + propertiesToJSON.get(key).toString() + ""String_Node_Str""+ predefinedEventProperties.get(key).toString());
}
 else {
propertiesToJSON.put(key,predefinedEventProperties.get(key));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
}
}
}
 else {
propertiesToJSON=new JSONObject(predefinedEventProperties);
}
if (propertiesToJSON.length() > 0) {
mNosaraClient.track(EVENTS_PREFIX + eventName,propertiesToJSON,user,userType);
}
 else {
mNosaraClient.track(EVENTS_PREFIX + eventName,user,userType);
}
}",0.9933258519874786
14320,"@Override public void onBindViewHolder(final PostViewHolder holder,final int position){
  PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (post.hasTitle()) {
    holder.txtTitle.setText(post.getTitle());
  }
 else {
    holder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
  }
  if (post.hasExcerpt()) {
    holder.txtExcerpt.setVisibility(View.VISIBLE);
    holder.txtExcerpt.setText(post.getExcerpt());
  }
 else {
    holder.txtExcerpt.setVisibility(View.GONE);
  }
  if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
    holder.imgFeatured.setVisibility(View.VISIBLE);
    holder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
  }
 else {
    holder.imgFeatured.setVisibility(View.GONE);
  }
  if (post.isLocalDraft()) {
    holder.txtDate.setVisibility(View.GONE);
    holder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
  }
 else {
    holder.txtDate.setText(post.getFormattedDate());
    holder.txtDate.setVisibility(View.VISIBLE);
    holder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
  }
  updateStatusText(holder.txtStatus,post);
  configurePostButtons(holder,post);
  if (mOnLoadMoreListener != null && position >= getItemCount() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      PostsListPost selectedPost=getItem(position);
      if (mOnPostSelectedListener != null && selectedPost != null) {
        mOnPostSelectedListener.onPostSelected(selectedPost);
      }
    }
  }
);
}","@Override public void onBindViewHolder(PostViewHolder holder,int position){
  final PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (post.hasTitle()) {
    holder.txtTitle.setText(post.getTitle());
  }
 else {
    holder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
  }
  if (post.hasExcerpt()) {
    holder.txtExcerpt.setVisibility(View.VISIBLE);
    holder.txtExcerpt.setText(post.getExcerpt());
  }
 else {
    holder.txtExcerpt.setVisibility(View.GONE);
  }
  if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
    holder.imgFeatured.setVisibility(View.VISIBLE);
    holder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
  }
 else {
    holder.imgFeatured.setVisibility(View.GONE);
  }
  if (post.isLocalDraft()) {
    holder.txtDate.setVisibility(View.GONE);
    holder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
  }
 else {
    holder.txtDate.setText(post.getFormattedDate());
    holder.txtDate.setVisibility(View.VISIBLE);
    holder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
  }
  updateStatusText(holder.txtStatus,post);
  configurePostButtons(holder,post);
  if (mOnLoadMoreListener != null && position >= getItemCount() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mOnPostSelectedListener != null) {
        mOnPostSelectedListener.onPostSelected(post);
      }
    }
  }
);
}",0.9429747207524986
14321,"public PostsListPost(Post post){
  postId=post.getLocalTablePostId();
  blogId=post.getLocalTableBlogId();
  featuredImageId=post.getFeaturedImageId();
  title=post.getTitle();
  description=post.getDescription();
  excerpt=post.getPostExcerpt();
  status=post.getPostStatus();
  isLocalDraft=post.isLocalDraft();
  hasLocalChanges=post.hasChangedFromLocalDraftToPublished();
  isUploading=post.isUploading();
  setDateCreatedGmt(post.getDate_created_gmt());
  if (!hasExcerpt() && hasDescription()) {
    excerpt=makeExcerpt(description);
  }
}","public PostsListPost(Post post){
  postId=post.getLocalTablePostId();
  blogId=post.getLocalTableBlogId();
  featuredImageId=post.getFeaturedImageId();
  title=post.getTitle();
  description=post.getDescription();
  excerpt=post.getPostExcerpt();
  status=post.getPostStatus();
  isLocalDraft=post.isLocalDraft();
  hasLocalChanges=post.isLocalChange();
  isUploading=post.isUploading();
  setDateCreatedGmt(post.getDate_created_gmt());
  if (!hasExcerpt() && hasDescription()) {
    excerpt=makeExcerpt(description);
  }
}",0.9662921348314608
14322,"private void refreshPosts(){
  if (!isAdded())   return;
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog == null) {
    ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts,Duration.LONG);
    return;
  }
  boolean hasLocalChanges=WordPress.wpDB.findLocalChanges(currentBlog.getLocalTableBlogId(),mIsPage);
  if (hasLocalChanges) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
    dialogBuilder.setTitle(getResources().getText(R.string.local_changes));
    dialogBuilder.setMessage(getResources().getText(R.string.overwrite_local_changes));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(true);
        requestPosts(false);
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(false);
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    setRefreshing(true);
    requestPosts(false);
  }
}","private void refreshPosts(){
  if (!isAdded())   return;
  if (hasLocalChanges()) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
    dialogBuilder.setTitle(getResources().getText(R.string.local_changes));
    dialogBuilder.setMessage(getResources().getText(R.string.overwrite_local_changes));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(true);
        requestPosts(false);
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(false);
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    setRefreshing(true);
    requestPosts(false);
  }
}",0.8418254319893664
14323,"private void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  if (WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage)) {
    return;
  }
  int postCount;
  if (loadMore) {
    postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
    showLoadMoreProgress();
  }
 else {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
    setRefreshing(true);
    updateEmptyView(EmptyViewMessageType.LOADING);
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
        break;
default :
      updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
    break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}","private void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  int postCount;
  if (loadMore) {
    postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
    showLoadMoreProgress();
  }
 else {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
    setRefreshing(true);
    updateEmptyView(EmptyViewMessageType.LOADING);
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
        break;
default :
      updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
    break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}",0.9716399506781752
14324,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  initSwipeToRefreshHelper();
  if (WordPress.getCurrentBlog() != null && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostListAdapter());
  }
  if (bundle == null) {
    loadPosts();
    if (NetworkUtils.checkConnection(getActivity())) {
      requestPosts(false);
    }
  }
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  initSwipeToRefreshHelper();
  if (WordPress.getCurrentBlog() != null && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostListAdapter());
  }
  if (bundle == null) {
    loadPosts();
    if (!hasLocalChanges() && NetworkUtils.checkConnection(getActivity())) {
      requestPosts(false);
    }
  }
}",0.9727722772277227
14325,"public static void getPushNotificationSettings(Context context,RestRequest.Listener listener,RestRequest.ErrorListener errorListener){
  if (!AccountHelper.isSignedInWordPressDotCom()) {
    return;
  }
  String gcmToken=GCMRegistrar.getRegistrationId(context);
  if (TextUtils.isEmpty(gcmToken)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(context);
  String deviceID=settings.getString(WPCOM_PUSH_DEVICE_SERVER_ID,null);
  if (TextUtils.isEmpty(deviceID)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  WordPress.getRestClientUtilsV1_1().get(""String_Node_Str"" + deviceID,listener,errorListener);
}","public static void getPushNotificationSettings(Context context,RestRequest.Listener listener,RestRequest.ErrorListener errorListener){
  if (!AccountHelper.isSignedInWordPressDotCom()) {
    return;
  }
  String gcmToken=GCMRegistrar.getRegistrationId(context);
  if (TextUtils.isEmpty(gcmToken)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    if (errorListener != null) {
      errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
    }
    return;
  }
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(context);
  String deviceID=settings.getString(WPCOM_PUSH_DEVICE_SERVER_ID,null);
  if (TextUtils.isEmpty(deviceID)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    if (errorListener != null) {
      errorListener.onErrorResponse(new VolleyError(""String_Node_Str""));
    }
    return;
  }
  WordPress.getRestClientUtilsV1_1().get(""String_Node_Str"" + deviceID,listener,errorListener);
}",0.8629130966952264
14326,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(NotificationEvents.NotificationsSettingsStatusChanged event){
  if (TextUtils.isEmpty(event.getMessage())) {
    mMessageTextView.setVisibility(View.GONE);
  }
 else {
    mMessageTextView.setVisibility(View.VISIBLE);
    mMessageTextView.setText(event.getMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(NotificationEvents.NotificationsSettingsStatusChanged event){
  if (TextUtils.isEmpty(event.getMessage())) {
    mMessageContainer.setVisibility(View.GONE);
  }
 else {
    mMessageContainer.setVisibility(View.VISIBLE);
    mMessageTextView.setText(event.getMessage());
  }
}",0.9501466275659824
14327,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setElevation(0.0f);
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  setContentView(R.layout.notifications_settings_activity);
  setTitle(R.string.notifications);
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    fragmentManager.beginTransaction().add(R.id.fragment_container,new NotificationsSettingsFragment()).commit();
  }
  mMessageTextView=(TextView)findViewById(R.id.notifications_settings_message);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setElevation(0.0f);
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  setContentView(R.layout.notifications_settings_activity);
  setTitle(R.string.notifications);
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    fragmentManager.beginTransaction().add(R.id.fragment_container,new NotificationsSettingsFragment()).commit();
  }
  mMessageContainer=findViewById(R.id.notifications_settings_message_container);
  mMessageTextView=(TextView)findViewById(R.id.notifications_settings_message);
}",0.9440221147201106
14328,"public PostsListPost(Post post){
  postId=post.getLocalTablePostId();
  blogId=post.getLocalTableBlogId();
  featuredImageId=post.getFeaturedImageId();
  title=post.getTitle();
  description=post.getDescription();
  excerpt=post.getPostExcerpt();
  status=post.getPostStatus();
  isLocalDraft=post.isLocalDraft();
  hasLocalChanges=post.hasChangedFromLocalDraftToPublished();
  isUploading=post.isUploading();
  setDateCreatedGmt(post.getDate_created_gmt());
  if (!hasExcerpt() && hasDescription()) {
    excerpt=makeExcerpt(description);
  }
}","public PostsListPost(Post post){
  postId=post.getLocalTablePostId();
  blogId=post.getLocalTableBlogId();
  featuredImageId=post.getFeaturedImageId();
  title=post.getTitle();
  description=post.getDescription();
  excerpt=post.getPostExcerpt();
  status=post.getPostStatus();
  isLocalDraft=post.isLocalDraft();
  hasLocalChanges=post.isLocalChange();
  isUploading=post.isUploading();
  setDateCreatedGmt(post.getDate_created_gmt());
  if (!hasExcerpt() && hasDescription()) {
    excerpt=makeExcerpt(description);
  }
}",0.9662921348314608
14329,"private void refreshPosts(){
  if (!isAdded())   return;
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog == null) {
    ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts,Duration.LONG);
    return;
  }
  boolean hasLocalChanges=WordPress.wpDB.findLocalChanges(currentBlog.getLocalTableBlogId(),mIsPage);
  if (hasLocalChanges) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
    dialogBuilder.setTitle(getResources().getText(R.string.local_changes));
    dialogBuilder.setMessage(getResources().getText(R.string.overwrite_local_changes));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(true);
        requestPosts(false);
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(false);
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    setRefreshing(true);
    requestPosts(false);
  }
}","private void refreshPosts(){
  if (!isAdded())   return;
  if (hasLocalChanges()) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
    dialogBuilder.setTitle(getResources().getText(R.string.local_changes));
    dialogBuilder.setMessage(getResources().getText(R.string.overwrite_local_changes));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(true);
        requestPosts(false);
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        setRefreshing(false);
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    setRefreshing(true);
    requestPosts(false);
  }
}",0.8418254319893664
14330,"private void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  if (WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage)) {
    return;
  }
  int postCount;
  if (loadMore) {
    postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
    showLoadMoreProgress();
  }
 else {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
    setRefreshing(true);
    updateEmptyView(EmptyViewMessageType.LOADING);
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
        break;
default :
      updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
    break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}","private void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  int postCount;
  if (loadMore) {
    postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
    showLoadMoreProgress();
  }
 else {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
    setRefreshing(true);
    updateEmptyView(EmptyViewMessageType.LOADING);
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
        break;
default :
      updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
    break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}",0.9716399506781752
14331,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  initSwipeToRefreshHelper();
  if (WordPress.getCurrentBlog() != null && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostListAdapter());
  }
  if (bundle == null) {
    loadPosts();
    if (NetworkUtils.checkConnection(getActivity())) {
      requestPosts(false);
    }
  }
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  initSwipeToRefreshHelper();
  if (WordPress.getCurrentBlog() != null && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostListAdapter());
  }
  if (bundle == null) {
    loadPosts();
    if (!hasLocalChanges() && NetworkUtils.checkConnection(getActivity())) {
      requestPosts(false);
    }
  }
}",0.9727722772277227
14332,"@Override public void onLoadMore(){
  if (mCanLoadMorePosts && !mIsFetchingPosts)   requestPosts(true);
}","@Override public void onLoadMore(){
  if (mCanLoadMorePosts && !mIsFetchingPosts) {
    requestPosts(true);
  }
}",0.963302752293578
14333,"private void initSwipeToRefreshHelper(){
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(getActivity(),(CustomSwipeRefreshLayout)getView().findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!isAdded()) {
        return;
      }
      if (!NetworkUtils.checkConnection(getActivity())) {
        setRefreshing(false);
        updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
        return;
      }
      refreshPosts();
    }
  }
);
}","private void initSwipeToRefreshHelper(){
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(getActivity(),(CustomSwipeRefreshLayout)getView().findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!isAdded()) {
        return;
      }
      if (!NetworkUtils.checkConnection(getActivity())) {
        setRefreshing(false);
        updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
        return;
      }
      if (hasLocalChanges()) {
        confirmRequestPosts();
      }
 else {
        requestPosts(false);
      }
    }
  }
);
}",0.8829493087557604
14334,"private void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  if (WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage)) {
    return;
  }
  int postCount;
  if (loadMore) {
    postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
    showLoadMoreProgress();
  }
 else {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
    setRefreshing(true);
    updateEmptyView(EmptyViewMessageType.LOADING);
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
        break;
default :
      updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
    break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}","private void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  int postCount;
  if (loadMore) {
    postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
    showLoadMoreProgress();
  }
 else {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
    setRefreshing(true);
    updateEmptyView(EmptyViewMessageType.LOADING);
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      setRefreshing(false);
      hideLoadMoreProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
        break;
default :
      updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
    break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}",0.9650037230081906
14335,"@Override public void onRefreshStarted(){
  if (!isAdded()) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  refreshPosts();
}","@Override public void onRefreshStarted(){
  if (!isAdded()) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  if (hasLocalChanges()) {
    confirmRequestPosts();
  }
 else {
    requestPosts(false);
  }
}",0.8388214904679376
14336,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  initSwipeToRefreshHelper();
  if (WordPress.getCurrentBlog() != null && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostListAdapter());
  }
  if (bundle == null) {
    loadPosts();
    if (NetworkUtils.checkConnection(getActivity())) {
      requestPosts(false);
    }
  }
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  initSwipeToRefreshHelper();
  if (WordPress.getCurrentBlog() != null && mRecyclerView.getAdapter() == null) {
    mRecyclerView.setAdapter(getPostListAdapter());
  }
  if (bundle == null) {
    loadPosts();
    if (NetworkUtils.checkConnection(getActivity()) && !hasLocalChanges()) {
      requestPosts(false);
    }
  }
}",0.9727722772277227
14337,"public PostsListPost(Post post){
  postId=post.getLocalTablePostId();
  blogId=post.getLocalTableBlogId();
  featuredImageId=post.getFeaturedImageId();
  title=post.getTitle();
  description=post.getDescription();
  excerpt=post.getPostExcerpt();
  status=post.getPostStatus();
  isLocalDraft=post.isLocalDraft();
  hasLocalChanges=post.hasChangedFromLocalDraftToPublished();
  isUploading=post.isUploading();
  setDateCreatedGmt(post.getDate_created_gmt());
  if (!hasExcerpt() && hasDescription()) {
    excerpt=makeExcerpt(description);
  }
}","public PostsListPost(Post post){
  postId=post.getLocalTablePostId();
  blogId=post.getLocalTableBlogId();
  featuredImageId=post.getFeaturedImageId();
  title=post.getTitle();
  description=post.getDescription();
  excerpt=post.getPostExcerpt();
  status=post.getPostStatus();
  isLocalDraft=post.isLocalDraft();
  hasLocalChanges=post.isLocalChange();
  isUploading=post.isUploading();
  setDateCreatedGmt(post.getDate_created_gmt());
  if (!hasExcerpt() && hasDescription()) {
    excerpt=makeExcerpt(description);
  }
}",0.9662921348314608
14338,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,final int position){
  if (getItemViewType(position) == VIEW_TYPE_ENDLIST_INDICATOR) {
    return;
  }
  final PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (holder instanceof PostViewHolder) {
    PostViewHolder postHolder=(PostViewHolder)holder;
    if (post.hasTitle()) {
      postHolder.txtTitle.setText(post.getTitle());
    }
 else {
      postHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    if (post.hasExcerpt()) {
      postHolder.txtExcerpt.setVisibility(View.VISIBLE);
      postHolder.txtExcerpt.setText(post.getExcerpt());
    }
 else {
      postHolder.txtExcerpt.setVisibility(View.GONE);
    }
    if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
      postHolder.imgFeatured.setVisibility(View.VISIBLE);
      postHolder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
    }
 else {
      postHolder.imgFeatured.setVisibility(View.GONE);
    }
    if (post.isLocalDraft()) {
      postHolder.txtDate.setVisibility(View.GONE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
    }
 else {
      postHolder.txtDate.setText(post.getFormattedDate());
      postHolder.txtDate.setVisibility(View.VISIBLE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
    }
    updateStatusText(postHolder.txtStatus,post);
    configurePostButtons(postHolder,post);
  }
 else   if (holder instanceof PageViewHolder) {
    PageViewHolder pageHolder=(PageViewHolder)holder;
    if (post.hasTitle()) {
      pageHolder.txtTitle.setText(post.getTitle());
    }
 else {
      pageHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    String dateStr=getPageDateHeaderText(context,post);
    pageHolder.txtDate.setText(dateStr);
    updateStatusText(pageHolder.txtStatus,post);
    boolean showDate;
    if (position > 0) {
      String prevDateStr=getPageDateHeaderText(context,mPosts.get(position - 1));
      showDate=!prevDateStr.equals(dateStr);
    }
 else {
      showDate=true;
    }
    pageHolder.dateHeader.setVisibility(showDate ? View.VISIBLE : View.GONE);
    pageHolder.btnMore.setVisibility(post.isUploading() ? View.GONE : View.VISIBLE);
    pageHolder.btnMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPagePopupMenu(v,post);
      }
    }
);
    pageHolder.dividerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
  }
  if (mOnLoadMoreListener != null && position >= getItemCount() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      PostsListPost selectedPost=getItem(position);
      if (mOnPostSelectedListener != null && selectedPost != null) {
        mOnPostSelectedListener.onPostSelected(selectedPost);
      }
    }
  }
);
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,final int position){
  if (getItemViewType(position) == VIEW_TYPE_ENDLIST_INDICATOR) {
    return;
  }
  final PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (holder instanceof PostViewHolder) {
    PostViewHolder postHolder=(PostViewHolder)holder;
    if (post.hasTitle()) {
      postHolder.txtTitle.setText(post.getTitle());
    }
 else {
      postHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    if (post.hasExcerpt()) {
      postHolder.txtExcerpt.setVisibility(View.VISIBLE);
      postHolder.txtExcerpt.setText(post.getExcerpt());
    }
 else {
      postHolder.txtExcerpt.setVisibility(View.GONE);
    }
    if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
      postHolder.imgFeatured.setVisibility(View.VISIBLE);
      postHolder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
    }
 else {
      postHolder.imgFeatured.setVisibility(View.GONE);
    }
    if (post.isLocalDraft()) {
      postHolder.txtDate.setVisibility(View.GONE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
    }
 else {
      postHolder.txtDate.setText(post.getFormattedDate());
      postHolder.txtDate.setVisibility(View.VISIBLE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
    }
    updateStatusText(postHolder.txtStatus,post);
    configurePostButtons(postHolder,post);
  }
 else   if (holder instanceof PageViewHolder) {
    PageViewHolder pageHolder=(PageViewHolder)holder;
    if (post.hasTitle()) {
      pageHolder.txtTitle.setText(post.getTitle());
    }
 else {
      pageHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    String dateStr=getPageDateHeaderText(context,post);
    pageHolder.txtDate.setText(dateStr);
    updateStatusText(pageHolder.txtStatus,post);
    boolean showDate;
    if (position > 0) {
      String prevDateStr=getPageDateHeaderText(context,mPosts.get(position - 1));
      showDate=!prevDateStr.equals(dateStr);
    }
 else {
      showDate=true;
    }
    pageHolder.dateHeader.setVisibility(showDate ? View.VISIBLE : View.GONE);
    pageHolder.btnMore.setVisibility(post.isUploading() ? View.GONE : View.VISIBLE);
    pageHolder.btnMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPagePopupMenu(v,post);
      }
    }
);
    pageHolder.dividerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
  }
  if (mOnLoadMoreListener != null && position >= mPosts.size() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      PostsListPost selectedPost=getItem(position);
      if (mOnPostSelectedListener != null && selectedPost != null) {
        mOnPostSelectedListener.onPostSelected(selectedPost);
      }
    }
  }
);
}",0.9966777408637874
14339,"@Override public void onPostSelected(ReaderPost post){
  if (!isAdded() || post == null)   return;
  long blogId=post.blogId;
  long postId=post.postId;
  if (post.isDiscoverPost()) {
    ReaderPostDiscoverData discoverData=post.getDiscoverData();
    if (discoverData != null && discoverData.getDiscoverType() == ReaderPostDiscoverData.DiscoverType.EDITOR_PICK) {
      if (discoverData.getBlogId() != 0 && discoverData.getPostId() != 0) {
        blogId=discoverData.getBlogId();
        postId=discoverData.getPostId();
      }
 else       if (discoverData.hasPermalink()) {
        ReaderActivityLauncher.openUrl(getActivity(),discoverData.getPermaLink());
        return;
      }
    }
  }
  ReaderPostListType type=getPostListType();
  Map<String,Object> analyticsProperties=new HashMap<>();
switch (type) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
    String key=(type == ReaderPostListType.TAG_PREVIEW ? AnalyticsTracker.READER_DETAIL_TYPE_TAG_PREVIEW : AnalyticsTracker.READER_DETAIL_TYPE_NORMAL);
  analyticsProperties.put(AnalyticsTracker.READER_DETAIL_TYPE_KEY,key);
ReaderActivityLauncher.showReaderPostPagerForTag(getActivity(),getCurrentTag(),getPostListType(),blogId,postId);
break;
case BLOG_PREVIEW:
analyticsProperties.put(AnalyticsTracker.READER_DETAIL_TYPE_KEY,AnalyticsTracker.READER_DETAIL_TYPE_BLOG_PREVIEW);
ReaderActivityLauncher.showReaderPostPagerForBlog(getActivity(),blogId,postId);
break;
}
AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE,analyticsProperties);
}","@Override public void onPostSelected(ReaderPost post){
  if (!isAdded() || post == null)   return;
  if (post.isDiscoverPost()) {
    ReaderPostDiscoverData discoverData=post.getDiscoverData();
    if (discoverData != null && discoverData.getDiscoverType() == ReaderPostDiscoverData.DiscoverType.EDITOR_PICK) {
      if (discoverData.getBlogId() != 0 && discoverData.getPostId() != 0) {
        ReaderActivityLauncher.showReaderPostDetail(getActivity(),discoverData.getBlogId(),discoverData.getPostId());
        return;
      }
 else       if (discoverData.hasPermalink()) {
        ReaderActivityLauncher.openUrl(getActivity(),discoverData.getPermaLink());
        return;
      }
    }
  }
  ReaderPostListType type=getPostListType();
  Map<String,Object> analyticsProperties=new HashMap<>();
switch (type) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
    String key=(type == ReaderPostListType.TAG_PREVIEW ? AnalyticsTracker.READER_DETAIL_TYPE_TAG_PREVIEW : AnalyticsTracker.READER_DETAIL_TYPE_NORMAL);
  analyticsProperties.put(AnalyticsTracker.READER_DETAIL_TYPE_KEY,key);
ReaderActivityLauncher.showReaderPostPagerForTag(getActivity(),getCurrentTag(),getPostListType(),post.blogId,post.postId);
break;
case BLOG_PREVIEW:
analyticsProperties.put(AnalyticsTracker.READER_DETAIL_TYPE_KEY,AnalyticsTracker.READER_DETAIL_TYPE_BLOG_PREVIEW);
ReaderActivityLauncher.showReaderPostPagerForBlog(getActivity(),post.blogId,post.postId);
break;
}
AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE,analyticsProperties);
}",0.9334212261041528
14340,"private void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError || mVisitsData instanceof StatsError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  mNoActivtyThisPeriodContainer.setVisibility(View.GONE);
  OverviewLabel selectedStatsType=overviewItems[mSelectedOverviewItemIndex];
  mLegendContainer.setVisibility(View.VISIBLE);
  mLegendLabel.setText(StringUtils.capitalize(selectedStatsType.getLabel().toLowerCase()));
switch (selectedStatsType) {
case VIEWS:
    mVisitorsCheckboxContainer.setVisibility(View.VISIBLE);
  mVisitorsCheckbox.setEnabled(true);
mVisitorsCheckbox.setChecked(mIsCheckboxChecked);
break;
default :
mVisitorsCheckboxContainer.setVisibility(View.GONE);
break;
}
final String[] horLabels=new String[dataToShowOnGraph.length];
mStatsDate=new String[dataToShowOnGraph.length];
GraphView.GraphViewData[] mainSeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
GraphView.GraphViewData[] secondarySeriesItems=null;
if (mIsCheckboxChecked && selectedStatsType == OverviewLabel.VIEWS) {
secondarySeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
}
for (int i=0; i < dataToShowOnGraph.length; i++) {
int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
currentItemValue=dataToShowOnGraph[i].getViews();
break;
case VISITORS:
currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
mainSeriesItems[i]=new GraphView.GraphViewData(i,currentItemValue);
if (mIsCheckboxChecked && secondarySeriesItems != null) {
secondarySeriesItems[i]=new GraphView.GraphViewData(i,dataToShowOnGraph[i].getVisitors());
}
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
}
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
GraphViewSeries mainSeriesOnScreen=new GraphViewSeries(mainSeriesItems);
mainSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_main_series);
mainSeriesOnScreen.getStyle().highlightColor=getResources().getColor(R.color.stats_bar_graph_main_series_highlight);
mainSeriesOnScreen.getStyle().outerhighlightColor=getResources().getColor(R.color.stats_bar_graph_outer_highlight);
mainSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),5);
mGraphView.addSeries(mainSeriesOnScreen);
if (mIsCheckboxChecked && secondarySeriesItems != null && selectedStatsType == OverviewLabel.VIEWS) {
GraphViewSeries secondarySeries=new GraphViewSeries(secondarySeriesItems);
secondarySeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),10);
secondarySeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_secondary_series);
secondarySeries.getStyle().highlightColor=getResources().getColor(R.color.orange_fire);
mGraphView.addSeries(secondarySeries);
}
switch (selectedStatsType) {
case VISITORS:
double maxYValue=getMaxYValueForVisitorsAndView(dataToShowOnGraph);
mGraphView.setManualYAxisBounds(maxYValue,0d);
break;
default :
mGraphView.setManualYAxis(false);
break;
}
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.getGraphViewStyle().setMaxColumnWidth(DisplayUtils.dpToPx(getActivity(),StatsConstants.STATS_GRAPH_BAR_MAX_COLUMN_WIDTH_DP));
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
boolean resultsAvailable=false;
for (int i=0; i < dataToShowOnGraph.length; i++) {
if (dataToShowOnGraph[i].getViews() != 0 || dataToShowOnGraph[i].getVisitors() != 0 || dataToShowOnGraph[i].getLikes() != 0 || dataToShowOnGraph[i].getComments() != 0) {
resultsAvailable=true;
break;
}
}
mNoActivtyThisPeriodContainer.setVisibility(resultsAvailable ? View.GONE : View.VISIBLE);
mGraphView.setClickable(resultsAvailable);
if (mPrevNumberOfBarsGraph != -1 && mPrevNumberOfBarsGraph != dataToShowOnGraph.length) {
mSelectedBarGraphBarIndex=-1;
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
onBarTapped(dataToShowOnGraph.length - 1);
mGraphView.highlightBar(dataToShowOnGraph.length - 1);
return;
}
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
int barSelectedOnGraph;
if (mSelectedBarGraphBarIndex == -1) {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
}
 else if (mSelectedBarGraphBarIndex < dataToShowOnGraph.length) {
barSelectedOnGraph=mSelectedBarGraphBarIndex;
}
 else {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
mSelectedBarGraphBarIndex=barSelectedOnGraph;
}
updateUIBelowTheGraph(barSelectedOnGraph);
mGraphView.highlightBar(barSelectedOnGraph);
}","private void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError || mVisitsData instanceof StatsError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  mNoActivtyThisPeriodContainer.setVisibility(View.GONE);
  OverviewLabel selectedStatsType=overviewItems[mSelectedOverviewItemIndex];
  mLegendContainer.setVisibility(View.VISIBLE);
  mLegendLabel.setText(StringUtils.capitalize(selectedStatsType.getLabel().toLowerCase()));
switch (selectedStatsType) {
case VIEWS:
    mVisitorsCheckboxContainer.setVisibility(View.VISIBLE);
  mVisitorsCheckbox.setEnabled(true);
mVisitorsCheckbox.setChecked(mIsCheckboxChecked);
break;
default :
mVisitorsCheckboxContainer.setVisibility(View.GONE);
break;
}
final String[] horLabels=new String[dataToShowOnGraph.length];
mStatsDate=new String[dataToShowOnGraph.length];
GraphView.GraphViewData[] mainSeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
GraphView.GraphViewData[] secondarySeriesItems=null;
if (mIsCheckboxChecked && selectedStatsType == OverviewLabel.VIEWS) {
secondarySeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
}
boolean atLeastOneResultIsAvailable=false;
for (int i=0; i < dataToShowOnGraph.length; i++) {
int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
currentItemValue=dataToShowOnGraph[i].getViews();
break;
case VISITORS:
currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
mainSeriesItems[i]=new GraphView.GraphViewData(i,currentItemValue);
if (currentItemValue > 0) {
atLeastOneResultIsAvailable=true;
}
if (mIsCheckboxChecked && secondarySeriesItems != null) {
secondarySeriesItems[i]=new GraphView.GraphViewData(i,dataToShowOnGraph[i].getVisitors());
}
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
}
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
GraphViewSeries mainSeriesOnScreen=new GraphViewSeries(mainSeriesItems);
mainSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_main_series);
mainSeriesOnScreen.getStyle().highlightColor=getResources().getColor(R.color.stats_bar_graph_main_series_highlight);
mainSeriesOnScreen.getStyle().outerhighlightColor=getResources().getColor(R.color.stats_bar_graph_outer_highlight);
mainSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),5);
mGraphView.addSeries(mainSeriesOnScreen);
if (mIsCheckboxChecked && secondarySeriesItems != null && selectedStatsType == OverviewLabel.VIEWS) {
GraphViewSeries secondarySeries=new GraphViewSeries(secondarySeriesItems);
secondarySeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),10);
secondarySeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_secondary_series);
secondarySeries.getStyle().highlightColor=getResources().getColor(R.color.orange_fire);
mGraphView.addSeries(secondarySeries);
}
switch (selectedStatsType) {
case VISITORS:
double maxYValue=getMaxYValueForVisitorsAndView(dataToShowOnGraph);
mGraphView.setManualYAxisBounds(maxYValue,0d);
break;
default :
mGraphView.setManualYAxis(false);
break;
}
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.getGraphViewStyle().setMaxColumnWidth(DisplayUtils.dpToPx(getActivity(),StatsConstants.STATS_GRAPH_BAR_MAX_COLUMN_WIDTH_DP));
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
mNoActivtyThisPeriodContainer.setVisibility(atLeastOneResultIsAvailable ? View.GONE : View.VISIBLE);
mGraphView.setClickable(atLeastOneResultIsAvailable);
if (mPrevNumberOfBarsGraph != -1 && mPrevNumberOfBarsGraph != dataToShowOnGraph.length) {
mSelectedBarGraphBarIndex=-1;
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
onBarTapped(dataToShowOnGraph.length - 1);
mGraphView.highlightBar(dataToShowOnGraph.length - 1);
return;
}
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
int barSelectedOnGraph;
if (mSelectedBarGraphBarIndex == -1) {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
}
 else if (mSelectedBarGraphBarIndex < dataToShowOnGraph.length) {
barSelectedOnGraph=mSelectedBarGraphBarIndex;
}
 else {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
mSelectedBarGraphBarIndex=barSelectedOnGraph;
}
updateUIBelowTheGraph(barSelectedOnGraph);
mGraphView.highlightBar(barSelectedOnGraph);
}",0.9569471624266144
14341,"private void showPagePopupMenu(View view,int position){
  final PostsListPost page=getItem(position);
  if (page == null || mOnPostButtonClickListener == null) {
    return;
  }
  Context context=view.getContext();
  PopupMenu popup=new PopupMenu(context,view);
  boolean showViewItem=!page.isLocalDraft() && page.getStatusEnum() == PostStatus.PUBLISHED;
  boolean showStatsItem=!page.isLocalDraft() && page.getStatusEnum() == PostStatus.PUBLISHED;
  boolean showEditItem=true;
  boolean showTrashItem=!page.isLocalDraft();
  boolean showDeleteItem=!showTrashItem;
  if (showViewItem) {
    MenuItem mnuView=popup.getMenu().add(context.getString(R.string.button_view));
    mnuView.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_VIEW,page);
        return true;
      }
    }
);
  }
  if (showStatsItem) {
    MenuItem mnuStats=popup.getMenu().add(context.getString(R.string.button_stats));
    mnuStats.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_STATS,page);
        return true;
      }
    }
);
  }
  if (showEditItem) {
    MenuItem mnuEdit=popup.getMenu().add(context.getString(R.string.button_edit));
    mnuEdit.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_EDIT,page);
        return true;
      }
    }
);
  }
  if (showTrashItem) {
    MenuItem mnuTrash=popup.getMenu().add(context.getString(R.string.button_trash));
    mnuTrash.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_TRASH,page);
        return true;
      }
    }
);
  }
  if (showDeleteItem) {
    MenuItem mnuDelete=popup.getMenu().add(context.getString(R.string.button_delete));
    mnuDelete.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_DELETE,page);
        return true;
      }
    }
);
  }
  popup.show();
}","private void showPagePopupMenu(View view,final PostsListPost page){
  if (page == null || mOnPostButtonClickListener == null) {
    return;
  }
  Context context=view.getContext();
  PopupMenu popup=new PopupMenu(context,view);
  boolean showViewItem=!page.isLocalDraft() && page.getStatusEnum() == PostStatus.PUBLISHED;
  boolean showStatsItem=!page.isLocalDraft() && page.getStatusEnum() == PostStatus.PUBLISHED;
  boolean showEditItem=true;
  boolean showTrashItem=!page.isLocalDraft();
  boolean showDeleteItem=!showTrashItem;
  if (showViewItem) {
    MenuItem mnuView=popup.getMenu().add(context.getString(R.string.button_view));
    mnuView.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_VIEW,page);
        return true;
      }
    }
);
  }
  if (showStatsItem) {
    MenuItem mnuStats=popup.getMenu().add(context.getString(R.string.button_stats));
    mnuStats.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_STATS,page);
        return true;
      }
    }
);
  }
  if (showEditItem) {
    MenuItem mnuEdit=popup.getMenu().add(context.getString(R.string.button_edit));
    mnuEdit.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_EDIT,page);
        return true;
      }
    }
);
  }
  if (showTrashItem) {
    MenuItem mnuTrash=popup.getMenu().add(context.getString(R.string.button_trash));
    mnuTrash.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_TRASH,page);
        return true;
      }
    }
);
  }
  if (showDeleteItem) {
    MenuItem mnuDelete=popup.getMenu().add(context.getString(R.string.button_delete));
    mnuDelete.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        mOnPostButtonClickListener.onPostButtonClicked(PostListButton.BUTTON_DELETE,page);
        return true;
      }
    }
);
  }
  popup.show();
}",0.983632734530938
14342,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,final int position){
  PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (holder instanceof PostViewHolder) {
    PostViewHolder postHolder=(PostViewHolder)holder;
    if (post.hasTitle()) {
      postHolder.txtTitle.setText(post.getTitle());
    }
 else {
      postHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    if (post.hasExcerpt()) {
      postHolder.txtExcerpt.setVisibility(View.VISIBLE);
      postHolder.txtExcerpt.setText(post.getExcerpt());
    }
 else {
      postHolder.txtExcerpt.setVisibility(View.GONE);
    }
    if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
      postHolder.imgFeatured.setVisibility(View.VISIBLE);
      postHolder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
    }
 else {
      postHolder.imgFeatured.setVisibility(View.GONE);
    }
    if (post.isLocalDraft()) {
      postHolder.txtDate.setVisibility(View.GONE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
    }
 else {
      postHolder.txtDate.setText(post.getFormattedDate());
      postHolder.txtDate.setVisibility(View.VISIBLE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
    }
    updateStatusText(postHolder.txtStatus,post);
    configurePostButtons(postHolder,post);
  }
 else   if (holder instanceof PageViewHolder) {
    PageViewHolder pageHolder=(PageViewHolder)holder;
    if (post.hasTitle()) {
      pageHolder.txtTitle.setText(post.getTitle());
    }
 else {
      pageHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    String dateStr=getPageDateHeaderText(context,post);
    pageHolder.txtDate.setText(dateStr);
    updateStatusText(pageHolder.txtStatus,post);
    boolean showDate;
    if (position > 0) {
      String prevDateStr=getPageDateHeaderText(context,mPosts.get(position - 1));
      showDate=!prevDateStr.equals(dateStr);
    }
 else {
      showDate=true;
    }
    pageHolder.dateHeader.setVisibility(showDate ? View.VISIBLE : View.GONE);
    pageHolder.btnMore.setVisibility(post.isUploading() ? View.GONE : View.VISIBLE);
    pageHolder.btnMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPagePopupMenu(v,position);
      }
    }
);
    pageHolder.dividerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
  }
  if (mOnLoadMoreListener != null && position >= getItemCount() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      PostsListPost selectedPost=getItem(position);
      if (mOnPostSelectedListener != null && selectedPost != null) {
        mOnPostSelectedListener.onPostSelected(selectedPost);
      }
    }
  }
);
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,final int position){
  final PostsListPost post=mPosts.get(position);
  Context context=holder.itemView.getContext();
  if (holder instanceof PostViewHolder) {
    PostViewHolder postHolder=(PostViewHolder)holder;
    if (post.hasTitle()) {
      postHolder.txtTitle.setText(post.getTitle());
    }
 else {
      postHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    if (post.hasExcerpt()) {
      postHolder.txtExcerpt.setVisibility(View.VISIBLE);
      postHolder.txtExcerpt.setText(post.getExcerpt());
    }
 else {
      postHolder.txtExcerpt.setVisibility(View.GONE);
    }
    if (post.hasFeaturedImageId() || post.hasFeaturedImageUrl()) {
      postHolder.imgFeatured.setVisibility(View.VISIBLE);
      postHolder.imgFeatured.setImageUrl(post.getFeaturedImageUrl(),WPNetworkImageView.ImageType.PHOTO);
    }
 else {
      postHolder.imgFeatured.setVisibility(View.GONE);
    }
    if (post.isLocalDraft()) {
      postHolder.txtDate.setVisibility(View.GONE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_DELETE);
    }
 else {
      postHolder.txtDate.setText(post.getFormattedDate());
      postHolder.txtDate.setVisibility(View.VISIBLE);
      postHolder.btnTrash.setButtonType(PostListButton.BUTTON_TRASH);
    }
    updateStatusText(postHolder.txtStatus,post);
    configurePostButtons(postHolder,post);
  }
 else   if (holder instanceof PageViewHolder) {
    PageViewHolder pageHolder=(PageViewHolder)holder;
    if (post.hasTitle()) {
      pageHolder.txtTitle.setText(post.getTitle());
    }
 else {
      pageHolder.txtTitle.setText(""String_Node_Str"" + context.getResources().getText(R.string.untitled) + ""String_Node_Str"");
    }
    String dateStr=getPageDateHeaderText(context,post);
    pageHolder.txtDate.setText(dateStr);
    updateStatusText(pageHolder.txtStatus,post);
    boolean showDate;
    if (position > 0) {
      String prevDateStr=getPageDateHeaderText(context,mPosts.get(position - 1));
      showDate=!prevDateStr.equals(dateStr);
    }
 else {
      showDate=true;
    }
    pageHolder.dateHeader.setVisibility(showDate ? View.VISIBLE : View.GONE);
    pageHolder.btnMore.setVisibility(post.isUploading() ? View.GONE : View.VISIBLE);
    pageHolder.btnMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPagePopupMenu(v,post);
      }
    }
);
    pageHolder.dividerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
  }
  if (mOnLoadMoreListener != null && position >= getItemCount() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
    mOnLoadMoreListener.onLoadMore();
  }
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      PostsListPost selectedPost=getItem(position);
      if (mOnPostSelectedListener != null && selectedPost != null) {
        mOnPostSelectedListener.onPostSelected(selectedPost);
      }
    }
  }
);
}",0.9980506822612084
14343,"@Override public void onResume(){
  super.onResume();
  mNotificationsEnabled=NotificationsUtils.isNotificationsEnabled(getActivity());
  if (hasNotificationsSettings()) {
    new LoadNotificationsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,true);
  }
  refreshSettings();
}","@Override public void onResume(){
  super.onResume();
  mNotificationsEnabled=NotificationsUtils.isNotificationsEnabled(getActivity());
  refreshSettings();
}",0.7117117117117117
14344,"@Override public void onResponse(JSONObject response){
  AppLog.d(T.NOTIFS,""String_Node_Str"");
  if (!isAdded())   return;
  boolean settingsExisted=hasNotificationsSettings();
  if (!settingsExisted) {
    EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(null));
  }
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  SharedPreferences.Editor editor=settings.edit();
  editor.putString(NotificationsUtils.WPCOM_PUSH_DEVICE_NOTIFICATION_SETTINGS,response.toString());
  editor.apply();
  new LoadNotificationsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,!settingsExisted);
}","@Override public void onResponse(JSONObject response){
  AppLog.d(T.NOTIFS,""String_Node_Str"");
  if (!isAdded())   return;
  boolean settingsExisted=hasNotificationsSettings();
  if (!settingsExisted) {
    EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(null));
  }
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  SharedPreferences.Editor editor=settings.edit();
  editor.putString(NotificationsUtils.WPCOM_PUSH_DEVICE_NOTIFICATION_SETTINGS,response.toString());
  editor.apply();
  loadNotificationsAndUpdateUI(!settingsExisted);
  updateUIForNotificationsEnabledState();
}",0.8666666666666667
14345,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  mDeviceId=settings.getString(NotificationsUtils.WPCOM_PUSH_DEVICE_SERVER_ID,""String_Node_Str"");
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  mDeviceId=settings.getString(NotificationsUtils.WPCOM_PUSH_DEVICE_SERVER_ID,""String_Node_Str"");
  if (hasNotificationsSettings()) {
    loadNotificationsAndUpdateUI(true);
  }
}",0.8840579710144928
14346,"private void refreshSettings(){
  if (!hasNotificationsSettings()) {
    EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(getString(R.string.loading)));
  }
  NotificationsUtils.getPushNotificationSettings(getActivity(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      AppLog.d(T.NOTIFS,""String_Node_Str"");
      if (!isAdded())       return;
      boolean settingsExisted=hasNotificationsSettings();
      if (!settingsExisted) {
        EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(null));
      }
      SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
      SharedPreferences.Editor editor=settings.edit();
      editor.putString(NotificationsUtils.WPCOM_PUSH_DEVICE_NOTIFICATION_SETTINGS,response.toString());
      editor.apply();
      new LoadNotificationsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,!settingsExisted);
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      if (!isAdded())       return;
      AppLog.e(T.NOTIFS,""String_Node_Str"",error);
      if (!hasNotificationsSettings()) {
        EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(getString(R.string.error_loading_notifications)));
      }
    }
  }
);
}","private void refreshSettings(){
  if (!hasNotificationsSettings()) {
    EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(getString(R.string.loading)));
  }
  if (hasNotificationsSettings()) {
    updateUIForNotificationsEnabledState();
  }
  NotificationsUtils.getPushNotificationSettings(getActivity(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      AppLog.d(T.NOTIFS,""String_Node_Str"");
      if (!isAdded())       return;
      boolean settingsExisted=hasNotificationsSettings();
      if (!settingsExisted) {
        EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(null));
      }
      SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
      SharedPreferences.Editor editor=settings.edit();
      editor.putString(NotificationsUtils.WPCOM_PUSH_DEVICE_NOTIFICATION_SETTINGS,response.toString());
      editor.apply();
      loadNotificationsAndUpdateUI(!settingsExisted);
      updateUIForNotificationsEnabledState();
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      if (!isAdded())       return;
      AppLog.e(T.NOTIFS,""String_Node_Str"",error);
      if (!hasNotificationsSettings()) {
        EventBus.getDefault().post(new NotificationEvents.NotificationsSettingsStatusChanged(getString(R.string.error_loading_notifications)));
      }
    }
  }
);
}",0.908713692946058
14347,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.comment_detail_fragment,container,false);
  mTxtStatus=(TextView)view.findViewById(R.id.text_status);
  mTxtContent=(TextView)view.findViewById(R.id.text_content);
  mLayoutButtons=(ViewGroup)inflater.inflate(R.layout.comment_action_footer,null,false);
  mBtnLikeComment=mLayoutButtons.findViewById(R.id.btn_like);
  mBtnLikeIcon=(ImageView)mLayoutButtons.findViewById(R.id.btn_like_icon);
  mBtnLikeTextView=(TextView)mLayoutButtons.findViewById(R.id.btn_like_text);
  mBtnModerateComment=mLayoutButtons.findViewById(R.id.btn_moderate);
  mBtnModerateIcon=(ImageView)mLayoutButtons.findViewById(R.id.btn_moderate_icon);
  mBtnModerateTextView=(TextView)mLayoutButtons.findViewById(R.id.btn_moderate_text);
  mBtnSpamComment=(TextView)mLayoutButtons.findViewById(R.id.text_btn_spam);
  mBtnTrashComment=(TextView)mLayoutButtons.findViewById(R.id.image_trash_comment);
  setTextDrawable(mBtnSpamComment,R.drawable.ic_action_spam);
  setTextDrawable(mBtnTrashComment,R.drawable.ic_action_trash);
  mLayoutReply=(ViewGroup)view.findViewById(R.id.layout_comment_box);
  mEditReply=(SuggestionAutoCompleteText)mLayoutReply.findViewById(R.id.edit_comment);
  mEditReply.getAutoSaveTextHelper().setUniqueId(String.format(""String_Node_Str"",AccountHelper.getCurrentUsernameForBlog(WordPress.getCurrentBlog()),getRemoteBlogId(),getCommentId()));
  mImgSubmitReply=(ImageView)mLayoutReply.findViewById(R.id.image_post_comment);
  mBtnLikeComment.setVisibility(View.GONE);
  mLayoutButtons.setVisibility(View.GONE);
  mTxtContent.setLinksClickable(true);
  mTxtContent.setMovementMethod(WPLinkMovementMethod.getInstance());
  mEditReply.setHint(R.string.reader_hint_comment_on_comment);
  mEditReply.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_SEND)       submitReply();
      return false;
    }
  }
);
  if (!TextUtils.isEmpty(mRestoredReplyText)) {
    mEditReply.setText(mRestoredReplyText);
    mRestoredReplyText=null;
  }
  mImgSubmitReply.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      submitReply();
    }
  }
);
  mBtnSpamComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mComment.getStatusEnum() == CommentStatus.SPAM) {
        moderateComment(CommentStatus.APPROVED);
      }
 else {
        moderateComment(CommentStatus.SPAM);
      }
    }
  }
);
  mBtnTrashComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      moderateComment(CommentStatus.TRASH);
    }
  }
);
  mBtnLikeComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      likeComment();
    }
  }
);
  setupSuggestionServiceAndAdapter();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.comment_detail_fragment,container,false);
  mTxtStatus=(TextView)view.findViewById(R.id.text_status);
  mTxtContent=(TextView)view.findViewById(R.id.text_content);
  mLayoutButtons=(ViewGroup)inflater.inflate(R.layout.comment_action_footer,null,false);
  mBtnLikeComment=mLayoutButtons.findViewById(R.id.btn_like);
  mBtnLikeIcon=(ImageView)mLayoutButtons.findViewById(R.id.btn_like_icon);
  mBtnLikeTextView=(TextView)mLayoutButtons.findViewById(R.id.btn_like_text);
  mBtnModerateComment=mLayoutButtons.findViewById(R.id.btn_moderate);
  mBtnModerateIcon=(ImageView)mLayoutButtons.findViewById(R.id.btn_moderate_icon);
  mBtnModerateTextView=(TextView)mLayoutButtons.findViewById(R.id.btn_moderate_text);
  mBtnSpamComment=(TextView)mLayoutButtons.findViewById(R.id.text_btn_spam);
  mBtnTrashComment=(TextView)mLayoutButtons.findViewById(R.id.image_trash_comment);
  setTextDrawable(mBtnSpamComment,R.drawable.ic_action_spam);
  setTextDrawable(mBtnTrashComment,R.drawable.ic_action_trash);
  mLayoutReply=(ViewGroup)view.findViewById(R.id.layout_comment_box);
  mEditReply=(SuggestionAutoCompleteText)mLayoutReply.findViewById(R.id.edit_comment);
  mEditReply.getAutoSaveTextHelper().setUniqueId(String.format(""String_Node_Str"",AccountHelper.getCurrentUsernameForBlog(WordPress.getCurrentBlog()),getRemoteBlogId(),getCommentId()));
  mImgSubmitReply=(ImageView)mLayoutReply.findViewById(R.id.image_post_comment);
  mBtnLikeComment.setVisibility(View.GONE);
  mLayoutButtons.setVisibility(View.GONE);
  mTxtContent.setLinksClickable(true);
  mTxtContent.setMovementMethod(WPLinkMovementMethod.getInstance());
  mEditReply.setHint(R.string.reader_hint_comment_on_comment);
  mEditReply.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_SEND)       submitReply();
      return false;
    }
  }
);
  if (!TextUtils.isEmpty(mRestoredReplyText)) {
    mEditReply.setText(mRestoredReplyText);
    mRestoredReplyText=null;
  }
  mImgSubmitReply.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      submitReply();
    }
  }
);
  mBtnSpamComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!hasComment())       return;
      if (mComment.getStatusEnum() == CommentStatus.SPAM) {
        moderateComment(CommentStatus.APPROVED);
      }
 else {
        moderateComment(CommentStatus.SPAM);
      }
    }
  }
);
  mBtnTrashComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      moderateComment(CommentStatus.TRASH);
    }
  }
);
  mBtnLikeComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      likeComment();
    }
  }
);
  setupSuggestionServiceAndAdapter();
  return view;
}",0.9937309114290308
14348,"private void submitReply(){
  if (!isAdded() || mIsSubmittingReply)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  final String replyText=EditTextUtils.getText(mEditReply);
  if (TextUtils.isEmpty(replyText))   return;
  mEditReply.setEnabled(false);
  EditTextUtils.hideSoftInput(mEditReply);
  mImgSubmitReply.setVisibility(View.GONE);
  final ProgressBar progress=(ProgressBar)getView().findViewById(R.id.progress_submit_comment);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsSubmittingReply=false;
      if (succeeded && mOnCommentChangeListener != null)       mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL,ChangeType.REPLIED);
      if (isAdded()) {
        mEditReply.setEnabled(true);
        mImgSubmitReply.setVisibility(View.VISIBLE);
        progress.setVisibility(View.GONE);
        updateStatusViews();
        if (succeeded) {
          ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
          mEditReply.setText(null);
          mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
        }
 else {
          ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
          EditTextUtils.showSoftInput(mEditReply);
        }
      }
    }
  }
;
  mIsSubmittingReply=true;
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_REPLIED_TO);
  if (mNote != null) {
    if (mShouldRequestCommentFromNote) {
      CommentActions.submitReplyToCommentRestApi(mNote.getSiteId(),mComment.commentID,replyText,actionListener);
    }
 else {
      CommentActions.submitReplyToCommentNote(mNote,replyText,actionListener);
    }
  }
 else {
    CommentActions.submitReplyToComment(mLocalBlogId,mComment,replyText,actionListener);
  }
}","private void submitReply(){
  if (!hasComment() || !isAdded() || mIsSubmittingReply)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  final String replyText=EditTextUtils.getText(mEditReply);
  if (TextUtils.isEmpty(replyText))   return;
  mEditReply.setEnabled(false);
  EditTextUtils.hideSoftInput(mEditReply);
  mImgSubmitReply.setVisibility(View.GONE);
  final ProgressBar progress=(ProgressBar)getView().findViewById(R.id.progress_submit_comment);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsSubmittingReply=false;
      if (succeeded && mOnCommentChangeListener != null)       mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL,ChangeType.REPLIED);
      if (isAdded()) {
        mEditReply.setEnabled(true);
        mImgSubmitReply.setVisibility(View.VISIBLE);
        progress.setVisibility(View.GONE);
        updateStatusViews();
        if (succeeded) {
          ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
          mEditReply.setText(null);
          mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
        }
 else {
          ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
          EditTextUtils.showSoftInput(mEditReply);
        }
      }
    }
  }
;
  mIsSubmittingReply=true;
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_REPLIED_TO);
  if (mNote != null) {
    if (mShouldRequestCommentFromNote) {
      CommentActions.submitReplyToCommentRestApi(mNote.getSiteId(),mComment.commentID,replyText,actionListener);
    }
 else {
      CommentActions.submitReplyToCommentNote(mNote,replyText,actionListener);
    }
  }
 else {
    CommentActions.submitReplyToComment(mLocalBlogId,mComment,replyText,actionListener);
  }
}",0.9956196856480288
14349,"private void saveHiddenSites(){
  WordPress.wpDB.getDatabase().beginTransaction();
  try {
    WordPress.wpDB.setAllDotComBlogsVisibility(true);
    boolean skippedCurrentSite=false;
    String currentSiteName=null;
    SiteList hiddenSites=getAdapter().getHiddenSites();
    for (    SiteRecord site : hiddenSites) {
      if (site.localId == mCurrentLocalId) {
        skippedCurrentSite=true;
        currentSiteName=site.getBlogNameOrHostName();
      }
 else {
        WordPress.wpDB.setDotComBlogsVisibility(site.localId,false);
        StatsTable.deleteStatsForBlog(this,site.localId);
      }
    }
    if (skippedCurrentSite) {
      ToastUtils.showToast(this,getString(R.string.site_picker_cant_hide_current_site,currentSiteName),ToastUtils.Duration.LONG);
    }
    WordPress.wpDB.getDatabase().setTransactionSuccessful();
  }
  finally {
    WordPress.wpDB.getDatabase().endTransaction();
  }
}","private void saveHiddenSites(){
  WordPress.wpDB.getDatabase().beginTransaction();
  try {
    WordPress.wpDB.setAllDotComBlogsVisibility(true);
    boolean skippedCurrentSite=false;
    String currentSiteName=null;
    SiteList hiddenSites=getAdapter().getHiddenSites();
    for (    SiteRecord site : hiddenSites) {
      if (site.localId == mCurrentLocalId) {
        skippedCurrentSite=true;
        currentSiteName=site.getBlogNameOrHostName();
      }
 else {
        WordPress.wpDB.setDotComBlogsVisibility(site.localId,false);
        StatsTable.deleteStatsForBlog(this,site.localId);
      }
    }
    if (skippedCurrentSite) {
      String cantHideCurrentSite=getString(R.string.site_picker_cant_hide_current_site);
      ToastUtils.showToast(this,String.format(cantHideCurrentSite,currentSiteName),ToastUtils.Duration.LONG);
    }
    WordPress.wpDB.getDatabase().setTransactionSuccessful();
  }
  finally {
    WordPress.wpDB.getDatabase().endTransaction();
  }
}",0.910154173312068
14350,"private void updateActionModeTitle(){
  if (mActionMode != null) {
    int numSelected=getAdapter().getNumSelected();
    mActionMode.setTitle(getString(R.string.cab_selected,numSelected));
  }
}","private void updateActionModeTitle(){
  if (mActionMode != null) {
    int numSelected=getAdapter().getNumSelected();
    String cabSelected=getString(R.string.cab_selected);
    mActionMode.setTitle(String.format(cabSelected,numSelected));
  }
}",0.7891156462585034
14351,"private void updateTitle(int position){
  if (isFinishing() || !canShowTitle()) {
    return;
  }
  final String title=getString(R.string.reader_title_photo_viewer,position + 1,getImageCount());
  if (title.equals(mTxtTitle.getText())) {
    return;
  }
  mTxtTitle.setText(title);
}","private void updateTitle(int position){
  if (isFinishing() || !canShowTitle()) {
    return;
  }
  String titlePhotoViewer=getString(R.string.reader_title_photo_viewer);
  String title=String.format(titlePhotoViewer,position + 1,getImageCount());
  if (title.equals(mTxtTitle.getText())) {
    return;
  }
  mTxtTitle.setText(title);
}",0.8562197092084006
14352,"@Override public void onTagDeleted(ReaderTag tag){
  mTagsChanged=true;
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_UNFOLLOWED_READER_TAG);
  if (mLastAddedTagName != null && mLastAddedTagName.equalsIgnoreCase(tag.getTagName())) {
    mLastAddedTagName=null;
  }
  showInfoToast(getString(R.string.reader_label_removed_tag,tag.getCapitalizedTagName()));
}","@Override public void onTagDeleted(ReaderTag tag){
  mTagsChanged=true;
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_UNFOLLOWED_READER_TAG);
  if (mLastAddedTagName != null && mLastAddedTagName.equalsIgnoreCase(tag.getTagName())) {
    mLastAddedTagName=null;
  }
  String labelRemovedTag=getString(R.string.reader_label_removed_tag);
  showInfoToast(String.format(labelRemovedTag,tag.getCapitalizedTagName()));
}",0.866581956797967
14353,"private void performAddTag(final String tagName){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && !isFinishing()) {
        getPageAdapter().refreshFollowedTagFragment();
        ToastUtils.showToast(ReaderSubsActivity.this,R.string.reader_toast_err_add_tag);
        mLastAddedTagName=null;
      }
    }
  }
;
  ReaderTag tag=new ReaderTag(tagName,ReaderTagType.FOLLOWED);
  if (ReaderTagActions.performTagAction(tag,TagAction.ADD,actionListener)) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.READER_FOLLOWED_READER_TAG);
    mLastAddedTagName=tag.getTagName();
    getPageAdapter().refreshFollowedTagFragment();
    showInfoToast(getString(R.string.reader_label_added_tag,tag.getCapitalizedTagName()));
  }
}","private void performAddTag(final String tagName){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && !isFinishing()) {
        getPageAdapter().refreshFollowedTagFragment();
        ToastUtils.showToast(ReaderSubsActivity.this,R.string.reader_toast_err_add_tag);
        mLastAddedTagName=null;
      }
    }
  }
;
  ReaderTag tag=new ReaderTag(tagName,ReaderTagType.FOLLOWED);
  if (ReaderTagActions.performTagAction(tag,TagAction.ADD,actionListener)) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.READER_FOLLOWED_READER_TAG);
    mLastAddedTagName=tag.getTagName();
    getPageAdapter().refreshFollowedTagFragment();
    String labelAddedTag=getString(R.string.reader_label_added_tag);
    showInfoToast(String.format(labelAddedTag,tag.getCapitalizedTagName()));
  }
}",0.9402261712439418
14354,"public static String getLongLikeLabelText(Context context,int numLikes,boolean isLikedByCurrentUser){
  if (isLikedByCurrentUser) {
switch (numLikes) {
case 1:
      return context.getString(R.string.reader_likes_only_you);
case 2:
    return context.getString(R.string.reader_likes_you_and_one);
default :
  return context.getString(R.string.reader_likes_you_and_multi,numLikes - 1);
}
}
 else {
return (numLikes == 1 ? context.getString(R.string.reader_likes_one) : context.getString(R.string.reader_likes_multi,numLikes));
}
}","public static String getLongLikeLabelText(Context context,int numLikes,boolean isLikedByCurrentUser){
  if (isLikedByCurrentUser) {
switch (numLikes) {
case 1:
      return context.getString(R.string.reader_likes_only_you);
case 2:
    return context.getString(R.string.reader_likes_you_and_one);
default :
  return context.getString(R.string.reader_likes_you_and_multi,numLikes - 1);
}
}
 else {
if (numLikes == 1) {
return context.getString(R.string.reader_likes_one);
}
 else {
String likes=context.getString(R.string.reader_likes_multi);
return String.format(likes,numLikes);
}
}
}",0.9281867145421904
14355,"public static void openUrl(Context context,String url,OpenUrlType openUrlType){
  if (TextUtils.isEmpty(url)) {
    return;
  }
  if (openUrlType == OpenUrlType.INTERNAL) {
    WPWebViewActivity.openURL(context,url);
  }
 else {
    try {
      Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
      context.startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      ToastUtils.showToast(context,context.getString(R.string.reader_toast_err_url_intent,url),ToastUtils.Duration.LONG);
    }
  }
}","public static void openUrl(Context context,String url,OpenUrlType openUrlType){
  if (TextUtils.isEmpty(url)) {
    return;
  }
  if (openUrlType == OpenUrlType.INTERNAL) {
    WPWebViewActivity.openURL(context,url);
  }
 else {
    try {
      Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
      context.startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      String readerToastErrorUrlIntent=context.getString(R.string.reader_toast_err_url_intent);
      ToastUtils.showToast(context,String.format(readerToastErrorUrlIntent,url),ToastUtils.Duration.LONG);
    }
  }
}",0.8541114058355438
14356,"public static String getLongLikeLabelText(Context context,int numLikes,boolean isLikedByCurrentUser){
  if (isLikedByCurrentUser) {
switch (numLikes) {
case 1:
      return context.getString(R.string.reader_likes_only_you);
case 2:
    return context.getString(R.string.reader_likes_you_and_one);
default :
  return context.getString(R.string.reader_likes_you_and_multi,numLikes - 1);
}
}
 else {
if (numLikes == 1) {
return context.getString(R.string.reader_likes_one);
}
 else {
String likes=context.getString(R.string.reader_likes_multi);
return String.format(likes,numLikes);
}
}
}","public static String getLongLikeLabelText(Context context,int numLikes,boolean isLikedByCurrentUser){
  if (isLikedByCurrentUser) {
switch (numLikes) {
case 1:
      return context.getString(R.string.reader_likes_only_you);
case 2:
    return context.getString(R.string.reader_likes_you_and_one);
default :
  String youAndMultiLikes=context.getString(R.string.reader_likes_you_and_multi);
return String.format(youAndMultiLikes,numLikes - 1);
}
}
 else {
if (numLikes == 1) {
return context.getString(R.string.reader_likes_one);
}
 else {
String likes=context.getString(R.string.reader_likes_multi);
return String.format(likes,numLikes);
}
}
}",0.9421352893235534
14357,"private static void showTappedUrl(Context context,String url){
  if (context == null || TextUtils.isEmpty(url))   return;
  try {
    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
    context.startActivity(intent);
  }
 catch (  ActivityNotFoundException e) {
    ToastUtils.showToast(context,context.getString(R.string.reader_toast_err_url_intent,url),ToastUtils.Duration.LONG);
  }
}","private static void showTappedUrl(Context context,String url){
  if (context == null || TextUtils.isEmpty(url))   return;
  try {
    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
    context.startActivity(intent);
  }
 catch (  ActivityNotFoundException e) {
    String readerToastUrlErrorIntent=context.getString(R.string.reader_toast_err_url_intent);
    ToastUtils.showToast(context,String.format(readerToastUrlErrorIntent,url),ToastUtils.Duration.LONG);
  }
}",0.8122866894197952
14358,"private void updateStatusText(TextView txtStatus,PostsListPost post){
  if ((post.getStatusEnum() == PostStatus.PUBLISHED) && !post.isLocalDraft() && !post.hasLocalChanges()) {
    txtStatus.setVisibility(View.GONE);
  }
 else {
    int statusTextResId=0;
    int statusIconResId=0;
    int statusColorResId=R.color.grey_darken_10;
    if (post.isUploading()) {
      statusTextResId=R.string.post_uploading;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.isLocalDraft()) {
      statusTextResId=R.string.local_draft;
      statusIconResId=R.drawable.noticon_scheduled;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.hasLocalChanges()) {
      statusTextResId=R.string.local_changes;
      statusIconResId=R.drawable.noticon_scheduled;
      statusColorResId=R.color.alert_yellow;
    }
 else {
switch (post.getStatusEnum()) {
case DRAFT:
        statusTextResId=R.string.draft;
      statusIconResId=R.drawable.noticon_scheduled;
    statusColorResId=R.color.alert_yellow;
  break;
case PRIVATE:
statusTextResId=R.string.post_private;
break;
case PENDING:
statusTextResId=R.string.pending_review;
statusIconResId=R.drawable.noticon_scheduled;
statusColorResId=R.color.alert_yellow;
break;
case SCHEDULED:
statusTextResId=R.string.scheduled;
statusIconResId=R.drawable.noticon_scheduled;
statusColorResId=R.color.alert_yellow;
break;
case TRASHED:
statusTextResId=R.string.trashed;
statusIconResId=R.drawable.noticon_trashed;
statusColorResId=R.color.alert_red;
break;
}
}
Context context=txtStatus.getContext();
Resources resources=context.getResources();
txtStatus.setTextColor(resources.getColor(statusColorResId));
txtStatus.setText(statusTextResId != 0 ? resources.getString(statusTextResId) : ""String_Node_Str"");
Drawable drawable=(statusIconResId != 0 ? context.getDrawable(statusIconResId) : null);
txtStatus.setCompoundDrawablesWithIntrinsicBounds(drawable,null,null,null);
txtStatus.setVisibility(View.VISIBLE);
}
}","private void updateStatusText(TextView txtStatus,PostsListPost post){
  if ((post.getStatusEnum() == PostStatus.PUBLISHED) && !post.isLocalDraft() && !post.hasLocalChanges()) {
    txtStatus.setVisibility(View.GONE);
  }
 else {
    int statusTextResId=0;
    int statusIconResId=0;
    int statusColorResId=R.color.grey_darken_10;
    if (post.isUploading()) {
      statusTextResId=R.string.post_uploading;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.isLocalDraft()) {
      statusTextResId=R.string.local_draft;
      statusIconResId=R.drawable.noticon_scheduled;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.hasLocalChanges()) {
      statusTextResId=R.string.local_changes;
      statusIconResId=R.drawable.noticon_scheduled;
      statusColorResId=R.color.alert_yellow;
    }
 else {
switch (post.getStatusEnum()) {
case DRAFT:
        statusTextResId=R.string.draft;
      statusIconResId=R.drawable.noticon_scheduled;
    statusColorResId=R.color.alert_yellow;
  break;
case PRIVATE:
statusTextResId=R.string.post_private;
break;
case PENDING:
statusTextResId=R.string.pending_review;
statusIconResId=R.drawable.noticon_scheduled;
statusColorResId=R.color.alert_yellow;
break;
case SCHEDULED:
statusTextResId=R.string.scheduled;
statusIconResId=R.drawable.noticon_scheduled;
statusColorResId=R.color.alert_yellow;
break;
case TRASHED:
statusTextResId=R.string.trashed;
statusIconResId=R.drawable.noticon_trashed;
statusColorResId=R.color.alert_red;
break;
}
}
Resources resources=txtStatus.getContext().getResources();
txtStatus.setTextColor(resources.getColor(statusColorResId));
txtStatus.setText(statusTextResId != 0 ? resources.getString(statusTextResId) : ""String_Node_Str"");
Drawable drawable=(statusIconResId != 0 ? resources.getDrawable(statusIconResId) : null);
txtStatus.setCompoundDrawablesWithIntrinsicBounds(drawable,null,null,null);
txtStatus.setVisibility(View.VISIBLE);
}
}",0.9716764480734882
14359,"/** 
 * Updates post object with content of this fragment
 */
public void updatePostSettings(){
  if (!isAdded() || mPost == null) {
    return;
  }
  String password=(mPasswordEditText.getText() != null) ? mPasswordEditText.getText().toString() : ""String_Node_Str"";
  String pubDate=(mPubDateText.getText() != null) ? mPubDateText.getText().toString() : ""String_Node_Str"";
  String excerpt=(mExcerptEditText.getText() != null) ? mExcerptEditText.getText().toString() : ""String_Node_Str"";
  long pubDateTimestamp=0;
  if (mIsCustomPubDate && pubDate.equals(getResources().getText(R.string.immediately)) && !mPost.isLocalDraft()) {
    Date d=new Date();
    pubDateTimestamp=d.getTime();
  }
 else   if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (mPost.getDate_created_gmt() > 0)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
 else   if (pubDate.equals(getResources().getText(R.string.immediately)) && mPost.isLocalDraft()) {
    mPost.setDate_created_gmt(0);
    mPost.setDateCreated(0);
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mPost.isPage()) {
    tags=(mTagsEditText.getText() != null) ? mTagsEditText.getText().toString() : ""String_Node_Str"";
    if (mPostFormats != null && mPostFormatSpinner != null && mPostFormatSpinner.getSelectedItemPosition() < mPostFormats.length) {
      postFormat=mPostFormats[mPostFormatSpinner.getSelectedItemPosition()];
    }
  }
  String status=getPostStatusForSpinnerPosition(mStatusSpinner.getSelectedItemPosition());
  if (mPost.isUploaded() && mPost.getPostStatus().equals(PostStatus.toString(PostStatus.DRAFT)) && status.equals(PostStatus.toString(PostStatus.PUBLISHED))) {
    mPost.setChangedFromLocalDraftToPublished(true);
  }
  if (mPost.supportsLocation()) {
    mPost.setLocation(mPostLocation);
  }
  mPost.setPostExcerpt(excerpt);
  mPost.setDate_created_gmt(pubDateTimestamp);
  mPost.setJSONCategories(new JSONArray(mCategories));
  mPost.setKeywords(tags);
  mPost.setPostStatus(status);
  mPost.setPassword(password);
  mPost.setPostFormat(postFormat);
}","/** 
 * Updates post object with content of this fragment
 */
public void updatePostSettings(){
  if (!isAdded() || mPost == null) {
    return;
  }
  String password=EditTextUtils.getText(mPasswordEditText);
  String pubDate=EditTextUtils.getText(mPubDateText);
  String excerpt=EditTextUtils.getText(mExcerptEditText);
  long pubDateTimestamp=0;
  if (mIsCustomPubDate && pubDate.equals(getText(R.string.immediately)) && !mPost.isLocalDraft()) {
    Date d=new Date();
    pubDateTimestamp=d.getTime();
  }
 else   if (!pubDate.equals(getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (mPost.getDate_created_gmt() > 0)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
 else   if (pubDate.equals(getText(R.string.immediately)) && mPost.isLocalDraft()) {
    mPost.setDate_created_gmt(0);
    mPost.setDateCreated(0);
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mPost.isPage()) {
    tags=EditTextUtils.getText(mTagsEditText);
    if (mPostFormats != null && mPostFormatSpinner != null && mPostFormatSpinner.getSelectedItemPosition() < mPostFormats.length) {
      postFormat=mPostFormats[mPostFormatSpinner.getSelectedItemPosition()];
    }
  }
  String status;
  if (mStatusSpinner != null) {
    status=getPostStatusForSpinnerPosition(mStatusSpinner.getSelectedItemPosition());
  }
 else {
    status=mPost.getPostStatus();
  }
  if (mPost.isUploaded() && mPost.getPostStatus().equals(PostStatus.toString(PostStatus.DRAFT)) && status.equals(PostStatus.toString(PostStatus.PUBLISHED))) {
    mPost.setChangedFromLocalDraftToPublished(true);
  }
  if (mPost.supportsLocation()) {
    mPost.setLocation(mPostLocation);
  }
  mPost.setPostExcerpt(excerpt);
  mPost.setDate_created_gmt(pubDateTimestamp);
  mPost.setJSONCategories(new JSONArray(mCategories));
  mPost.setKeywords(tags);
  mPost.setPostStatus(status);
  mPost.setPassword(password);
  mPost.setPostFormat(postFormat);
}",0.4025187696778881
14360,"/** 
 * returns text string from passed EditText
 */
public static String getText(EditText edit){
  if (edit.getText() == null) {
    return ""String_Node_Str"";
  }
  return edit.getText().toString();
}","/** 
 * returns non-null text string from passed TextView
 */
public static String getText(TextView textView){
  return (textView != null) ? textView.getText().toString() : ""String_Node_Str"";
}",0.6395939086294417
14361,"public static void viewStatsSinglePostDetails(Context context,PostModel post){
  if (post == null)   return;
  Intent statsPostViewIntent=new Intent(context,StatsSingleItemDetailsActivity.class);
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_REMOTE_BLOG_ID,post.getBlogID());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_REMOTE_ITEM_ID,post.getItemID());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_REMOTE_ITEM_TYPE,post.getPostType());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_ITEM_TITLE,post.getTitle());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_ITEM_URL,post.getTitle());
  context.startActivity(statsPostViewIntent);
}","public static void viewStatsSinglePostDetails(Context context,PostModel post){
  if (post == null)   return;
  Intent statsPostViewIntent=new Intent(context,StatsSingleItemDetailsActivity.class);
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_REMOTE_BLOG_ID,post.getBlogID());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_REMOTE_ITEM_ID,post.getItemID());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_REMOTE_ITEM_TYPE,post.getPostType());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_ITEM_TITLE,post.getTitle());
  statsPostViewIntent.putExtra(StatsSingleItemDetailsActivity.ARG_ITEM_URL,post.getUrl());
  context.startActivity(statsPostViewIntent);
}",0.994550408719346
14362,"@Override public View onCreateView(@NonNull LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.post_list,container,false);
  mRecyclerView=(RecyclerView)view.findViewById(R.id.recycler_view);
  mEmptyView=view.findViewById(R.id.empty_view);
  mEmptyViewImage=view.findViewById(R.id.empty_tags_box_top);
  mEmptyViewTitle=(TextView)view.findViewById(R.id.title_empty);
  mProgressLoadMore=(ProgressBar)view.findViewById(R.id.progress);
  Context context=getActivity();
  int spacingHorizontal=context.getResources().getDimensionPixelSize(R.dimen.content_margin);
  int spacingVertical=context.getResources().getDimensionPixelSize(R.dimen.reader_card_gutters);
  mRecyclerView.addItemDecoration(new ReaderItemDecoration(spacingHorizontal,spacingVertical));
  return view;
}","@Override public View onCreateView(@NonNull LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.post_list_fragment,container,false);
  mRecyclerView=(RecyclerView)view.findViewById(R.id.recycler_view);
  mEmptyView=view.findViewById(R.id.empty_view);
  mEmptyViewImage=view.findViewById(R.id.empty_tags_box_top);
  mEmptyViewTitle=(TextView)view.findViewById(R.id.title_empty);
  mProgressLoadMore=(ProgressBar)view.findViewById(R.id.progress);
  Context context=getActivity();
  mRecyclerView.setLayoutManager(new LinearLayoutManager(context));
  int spacingHorizontal=context.getResources().getDimensionPixelSize(R.dimen.content_margin);
  int spacingVertical=context.getResources().getDimensionPixelSize(R.dimen.reader_card_gutters);
  mRecyclerView.addItemDecoration(new ReaderItemDecoration(spacingHorizontal,spacingVertical));
  return view;
}",0.9556706966033393
14363,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == SignInActivity.REQUEST_CODE) {
    if (resultCode == RESULT_CANCELED) {
      finish();
    }
    mResultCode=resultCode;
    final Blog currentBlog=WordPress.getBlog(mLocalBlogID);
    if (resultCode == RESULT_OK && currentBlog != null && !currentBlog.isDotcomFlag()) {
      if (StatsUtils.getBlogId(mLocalBlogID) == null) {
        final Handler handler=new Handler();
        XMLRPCClientInterface xmlrpcClient=XMLRPCFactory.instantiate(currentBlog.getUri(),""String_Node_Str"",""String_Node_Str"");
        Map<String,String> args=ApiHelper.blogOptionsXMLRPCParameters;
        Object[] params={currentBlog.getRemoteBlogId(),currentBlog.getUsername(),currentBlog.getPassword(),args};
        xmlrpcClient.callAsync(new XMLRPCCallback(){
          @Override public void onSuccess(          long id,          Object result){
            if (result != null && (result instanceof HashMap)) {
              Map<?,?> blogOptions=(HashMap<?,?>)result;
              ApiHelper.updateBlogOptions(currentBlog,blogOptions);
              AnalyticsUtils.refreshMetadata();
              AnalyticsTracker.track(AnalyticsTracker.Stat.SIGNED_INTO_JETPACK);
              AnalyticsTracker.track(AnalyticsTracker.Stat.PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN);
              if (!isFinishing()) {
                return;
              }
              if (NetworkUtils.checkConnection(StatsActivity.this)) {
                handler.post(new Runnable(){
                  @Override public void run(){
                    mSwipeToRefreshHelper.setRefreshing(true);
                    mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
                    createFragments(true);
                  }
                }
);
              }
            }
          }
          @Override public void onFailure(          long id,          Exception error){
            AppLog.e(T.STATS,""String_Node_Str"" + ""String_Node_Str"",error);
            handler.post(new Runnable(){
              @Override public void run(){
                mSwipeToRefreshHelper.setRefreshing(false);
                ToastUtils.showToast(StatsActivity.this,StatsActivity.this.getString(R.string.error_refresh_stats),Duration.LONG);
              }
            }
);
          }
        }
,""String_Node_Str"",params);
      }
 else {
        mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
        createFragments(true);
      }
      mSwipeToRefreshHelper.setRefreshing(true);
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == SignInActivity.REQUEST_CODE) {
    if (resultCode == RESULT_CANCELED) {
      finish();
    }
    mResultCode=resultCode;
    final Blog currentBlog=WordPress.getBlog(mLocalBlogID);
    if (resultCode == RESULT_OK && currentBlog != null && !currentBlog.isDotcomFlag()) {
      if (StatsUtils.getBlogId(mLocalBlogID) == null) {
        final Handler handler=new Handler();
        XMLRPCClientInterface xmlrpcClient=XMLRPCFactory.instantiate(currentBlog.getUri(),""String_Node_Str"",""String_Node_Str"");
        Map<String,String> args=ApiHelper.blogOptionsXMLRPCParameters;
        Object[] params={currentBlog.getRemoteBlogId(),currentBlog.getUsername(),currentBlog.getPassword(),args};
        xmlrpcClient.callAsync(new XMLRPCCallback(){
          @Override public void onSuccess(          long id,          Object result){
            if (result != null && (result instanceof HashMap)) {
              Map<?,?> blogOptions=(HashMap<?,?>)result;
              ApiHelper.updateBlogOptions(currentBlog,blogOptions);
              AnalyticsUtils.refreshMetadata();
              AnalyticsTracker.track(AnalyticsTracker.Stat.SIGNED_INTO_JETPACK);
              AnalyticsTracker.track(AnalyticsTracker.Stat.PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN);
              if (isFinishing()) {
                return;
              }
              if (NetworkUtils.checkConnection(StatsActivity.this)) {
                handler.post(new Runnable(){
                  @Override public void run(){
                    mSwipeToRefreshHelper.setRefreshing(true);
                    mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
                    createFragments(true);
                  }
                }
);
              }
            }
          }
          @Override public void onFailure(          long id,          Exception error){
            AppLog.e(T.STATS,""String_Node_Str"" + ""String_Node_Str"",error);
            handler.post(new Runnable(){
              @Override public void run(){
                mSwipeToRefreshHelper.setRefreshing(false);
                ToastUtils.showToast(StatsActivity.this,StatsActivity.this.getString(R.string.error_refresh_stats),Duration.LONG);
              }
            }
);
          }
        }
,""String_Node_Str"",params);
      }
 else {
        mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
        createFragments(true);
      }
      mSwipeToRefreshHelper.setRefreshing(true);
    }
  }
}",0.9998089780324736
14364,"public void updateNotificationWithError(String mErrorMessage,boolean isMediaError,boolean isPage,boolean isVideoPressError){
  AppLog.d(T.POSTS,""String_Node_Str"" + mErrorMessage);
  Builder notificationBuilder=new NotificationCompat.Builder(getApplicationContext());
  String postOrPage=(String)(isPage ? mContext.getResources().getText(R.string.page_id) : mContext.getResources().getText(R.string.post_id));
  Intent notificationIntent=new Intent(mContext,isPage ? PagesListActivity.class : PostsListActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  notificationIntent.setAction(Intent.ACTION_MAIN);
  notificationIntent.addCategory(Intent.CATEGORY_LAUNCHER);
  notificationIntent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,isPage);
  notificationIntent.putExtra(PostsListActivity.EXTRA_ERROR_MSG,mErrorMessage);
  if (isVideoPressError) {
    notificationIntent.putExtra(PostsListActivity.EXTRA_ERROR_INFO_TITLE,getString(R.string.learn_more));
    notificationIntent.putExtra(PostsListActivity.EXTRA_ERROR_INFO_LINK,Constants.videoPressURL);
  }
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  String errorText=mContext.getResources().getText(R.string.upload_failed).toString();
  if (isMediaError) {
    errorText=mContext.getResources().getText(R.string.media) + ""String_Node_Str"" + mContext.getResources().getText(R.string.error);
  }
  notificationBuilder.setSmallIcon(android.R.drawable.stat_notify_error);
  notificationBuilder.setContentTitle((isMediaError) ? errorText : mContext.getResources().getText(R.string.upload_failed));
  notificationBuilder.setContentText((isMediaError) ? mErrorMessage : postOrPage + ""String_Node_Str"" + errorText+ ""String_Node_Str""+ mErrorMessage);
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (mNotificationErrorId == 0) {
    mNotificationErrorId=mNotificationId + (new Random()).nextInt();
  }
  mNotificationManager.notify(mNotificationErrorId,notificationBuilder.build());
}","public void updateNotificationWithError(String mErrorMessage,boolean isMediaError,boolean isPage,boolean isVideoPressError){
  AppLog.d(T.POSTS,""String_Node_Str"" + mErrorMessage);
  Builder notificationBuilder=new NotificationCompat.Builder(getApplicationContext());
  String postOrPage=(String)(isPage ? mContext.getResources().getText(R.string.page_id) : mContext.getResources().getText(R.string.post_id));
  Intent notificationIntent=new Intent(mContext,isPage ? PagesListActivity.class : PostsListActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,isPage);
  notificationIntent.putExtra(PostsListActivity.EXTRA_ERROR_MSG,mErrorMessage);
  if (isVideoPressError) {
    notificationIntent.putExtra(PostsListActivity.EXTRA_ERROR_INFO_TITLE,getString(R.string.learn_more));
    notificationIntent.putExtra(PostsListActivity.EXTRA_ERROR_INFO_LINK,Constants.videoPressURL);
  }
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  String errorText=mContext.getResources().getText(R.string.upload_failed).toString();
  if (isMediaError) {
    errorText=mContext.getResources().getText(R.string.media) + ""String_Node_Str"" + mContext.getResources().getText(R.string.error);
  }
  notificationBuilder.setSmallIcon(android.R.drawable.stat_notify_error);
  notificationBuilder.setContentTitle((isMediaError) ? errorText : mContext.getResources().getText(R.string.upload_failed));
  notificationBuilder.setContentText((isMediaError) ? mErrorMessage : postOrPage + ""String_Node_Str"" + errorText+ ""String_Node_Str""+ mErrorMessage);
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (mNotificationErrorId == 0) {
    mNotificationErrorId=mNotificationId + (new Random()).nextInt();
  }
  mNotificationManager.notify(mNotificationErrorId,notificationBuilder.build());
}",0.955132722574583
14365,"public PostUploadNotifier(Post post){
  mNotificationManager=(NotificationManager)SystemServiceFactory.get(mContext,Context.NOTIFICATION_SERVICE);
  mNotificationBuilder=new NotificationCompat.Builder(getApplicationContext());
  mNotificationBuilder.setSmallIcon(android.R.drawable.stat_sys_upload);
  Intent notificationIntent=new Intent(mContext,post.isPage() ? PagesListActivity.class : PostsListActivity.class);
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getLocalTableBlogId())));
  notificationIntent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,post.isPage());
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  mNotificationBuilder.setContentIntent(pendingIntent);
  mNotificationId=(new Random()).nextInt() + post.getLocalTableBlogId();
  startForeground(mNotificationId,mNotificationBuilder.build());
}","public PostUploadNotifier(Post post){
  mNotificationManager=(NotificationManager)SystemServiceFactory.get(mContext,Context.NOTIFICATION_SERVICE);
  mNotificationBuilder=new NotificationCompat.Builder(getApplicationContext());
  mNotificationBuilder.setSmallIcon(android.R.drawable.stat_sys_upload);
  mNotificationId=(new Random()).nextInt() + post.getLocalTableBlogId();
  startForeground(mNotificationId,mNotificationBuilder.build());
}",0.46875
14366,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.media_browser_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setTitle(R.string.media);
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  FragmentTransaction ft=fm.beginTransaction();
  mMediaAddFragment=(MediaAddFragment)fm.findFragmentById(R.id.mediaAddFragment);
  mMediaGridFragment=(MediaGridFragment)fm.findFragmentById(R.id.mediaGridFragment);
  mMediaItemFragment=(MediaItemFragment)fm.findFragmentByTag(MediaItemFragment.TAG);
  if (mMediaItemFragment != null)   ft.hide(mMediaGridFragment);
  mMediaEditFragment=(MediaEditFragment)fm.findFragmentByTag(MediaEditFragment.TAG);
  if (mMediaEditFragment != null && !mMediaEditFragment.isInLayout())   ft.hide(mMediaItemFragment);
  ft.commit();
  setupAddMenuPopup();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    uploadSharedFiles();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.getCurrentBlog() == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  setContentView(R.layout.media_browser_activity);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setTitle(R.string.media);
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  FragmentTransaction ft=fm.beginTransaction();
  mMediaAddFragment=(MediaAddFragment)fm.findFragmentById(R.id.mediaAddFragment);
  mMediaGridFragment=(MediaGridFragment)fm.findFragmentById(R.id.mediaGridFragment);
  mMediaItemFragment=(MediaItemFragment)fm.findFragmentByTag(MediaItemFragment.TAG);
  if (mMediaItemFragment != null)   ft.hide(mMediaGridFragment);
  mMediaEditFragment=(MediaEditFragment)fm.findFragmentByTag(MediaEditFragment.TAG);
  if (mMediaEditFragment != null && !mMediaEditFragment.isInLayout())   ft.hide(mMediaItemFragment);
  ft.commit();
  setupAddMenuPopup();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    uploadSharedFiles();
  }
}",0.9415730337078652
14367,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ProfilingUtils.split(""String_Node_Str"");
  ProfilingUtils.dump();
  setContentView(R.layout.posts);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  FragmentManager fm=getFragmentManager();
  mPostList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    mIsPage=extras.getBoolean(EXTRA_VIEW_PAGES);
    showErrorDialogIfNeeded(extras);
  }
  if (mIsPage) {
    getSupportActionBar().setTitle(getString(R.string.pages));
  }
 else {
    getSupportActionBar().setTitle(getString(R.string.posts));
  }
  WordPress.currentPost=null;
  if (savedInstanceState != null) {
    popPostDetail();
  }
  attemptToSelectPost();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.getCurrentBlog() == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  ProfilingUtils.split(""String_Node_Str"");
  ProfilingUtils.dump();
  setContentView(R.layout.posts);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  FragmentManager fm=getFragmentManager();
  mPostList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    mIsPage=extras.getBoolean(EXTRA_VIEW_PAGES);
    showErrorDialogIfNeeded(extras);
  }
  if (mIsPage) {
    getSupportActionBar().setTitle(getString(R.string.pages));
  }
 else {
    getSupportActionBar().setTitle(getString(R.string.posts));
  }
  WordPress.currentPost=null;
  if (savedInstanceState != null) {
    popPostDetail();
  }
  attemptToSelectPost();
}",0.923529411764706
14368,"public void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    mSwipeToRefreshHelper.setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  updateEmptyView(EmptyViewMessageType.LOADING);
  int postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
  if (!loadMore) {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  showProgress();
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded())       return;
      if (mEmptyViewAnimationHandler.isShowingLoadingAnimation() || mEmptyViewAnimationHandler.isBetweenSequences()) {
        mKeepSwipeRefreshLayoutVisible=true;
      }
 else {
        mSwipeToRefreshHelper.setRefreshing(false);
      }
      hideProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      getPostListAdapter().loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      mSwipeToRefreshHelper.setRefreshing(false);
      hideProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          if (mEmptyView == null || mEmptyView.getVisibility() != View.VISIBLE) {
            ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_unauthorized_pages : R.string.error_refresh_unauthorized_posts,Duration.LONG);
          }
        updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
      break;
default :
    ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts,Duration.LONG);
  updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}","public void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    mSwipeToRefreshHelper.setRefreshing(false);
    updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
    return;
  }
  updateEmptyView(EmptyViewMessageType.LOADING);
  int postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
  if (!loadMore) {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
  }
  List<Object> apiArgs=new Vector<>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  if (loadMore) {
    showProgress();
  }
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded())       return;
      if (mEmptyViewAnimationHandler.isShowingLoadingAnimation() || mEmptyViewAnimationHandler.isBetweenSequences()) {
        mKeepSwipeRefreshLayoutVisible=true;
      }
 else {
        mSwipeToRefreshHelper.setRefreshing(false);
      }
      hideProgress();
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      getPostListAdapter().loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      mSwipeToRefreshHelper.setRefreshing(false);
      hideProgress();
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          if (mEmptyView == null || mEmptyView.getVisibility() != View.VISIBLE) {
            ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_unauthorized_pages : R.string.error_refresh_unauthorized_posts,Duration.LONG);
          }
        updateEmptyView(EmptyViewMessageType.PERMISSION_ERROR);
      break;
default :
    ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts,Duration.LONG);
  updateEmptyView(EmptyViewMessageType.GENERIC_ERROR);
break;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}",0.9893280632411068
14369,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setElevation(0.0f);
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  setContentView(R.layout.settings_activity);
  Bundle passcodeArgs=new Bundle();
  passcodeArgs.putBoolean(PasscodePreferenceFragment.KEY_SHOULD_INFLATE,false);
  mSettingsFragment=new SettingsFragment();
  mPasscodePreferenceFragment=new PasscodePreferenceFragment();
  mPasscodePreferenceFragment.setArguments(passcodeArgs);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.fragment_container,mSettingsFragment).add(R.id.fragment_container,mPasscodePreferenceFragment).commit();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setElevation(0.0f);
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  setContentView(R.layout.settings_activity);
  FragmentManager fragmentManager=getFragmentManager();
  if (savedInstanceState == null) {
    Bundle passcodeArgs=new Bundle();
    passcodeArgs.putBoolean(PasscodePreferenceFragment.KEY_SHOULD_INFLATE,false);
    mSettingsFragment=new SettingsFragment();
    mPasscodePreferenceFragment=new PasscodePreferenceFragment();
    mPasscodePreferenceFragment.setArguments(passcodeArgs);
    fragmentManager.beginTransaction().add(R.id.fragment_container,mSettingsFragment).add(R.id.fragment_container,mPasscodePreferenceFragment).commit();
  }
 else {
    mSettingsFragment=(SettingsFragment)fragmentManager.getFragment(savedInstanceState,KEY_SETTINGS_FRAGMENT);
    mPasscodePreferenceFragment=(PasscodePreferenceFragment)fragmentManager.getFragment(savedInstanceState,KEY_PASSCODE_FRAGMENT);
  }
}",0.6823049464558899
14370,"@Override public void onStart(){
  super.onStart();
  mPasscodePreferenceFragment.setPreferences(mSettingsFragment.findPreference(getString(R.string.pref_key_passcode_toggle)),mSettingsFragment.findPreference(getString(R.string.pref_key_change_passcode)));
}","@Override public void onStart(){
  super.onStart();
  Preference togglePref=mSettingsFragment.findPreference(getString(R.string.pref_key_passcode_toggle));
  Preference changePref=mSettingsFragment.findPreference(getString(R.string.pref_key_change_passcode));
  if (togglePref != null && changePref != null) {
    mPasscodePreferenceFragment.setPreferences(togglePref,changePref);
  }
}",0.4192546583850932
14371,"void customizeUIWithResults(){
  mResultContainer.removeAllViews();
  if (isDataEmpty(0) || !(mDatamodels[0] instanceof InsightsPopularModel)) {
    showErrorUI(null);
    return;
  }
  InsightsPopularModel data=(InsightsPopularModel)mDatamodels[0];
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_most_popular_item,(ViewGroup)mResultContainer.getRootView(),false);
  int dayOfTheWeek=data.getHighestDayOfWeek();
  Calendar c=Calendar.getInstance();
  c.setFirstDayOfWeek(Calendar.MONDAY);
  c.setTimeInMillis(System.currentTimeMillis());
switch (dayOfTheWeek) {
case 0:
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  break;
case 1:
c.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);
break;
case 2:
c.set(Calendar.DAY_OF_WEEK,Calendar.WEDNESDAY);
break;
case 3:
c.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);
break;
case 4:
c.set(Calendar.DAY_OF_WEEK,Calendar.FRIDAY);
break;
case 5:
c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);
break;
case 6:
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
break;
}
DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
final TextView mostPopularDayTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day);
mostPopularDayTextView.setText(formatter.format(c.getTime()));
final TextView mostPopularDayPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day_percent);
mostPopularDayPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_weekly_views),data.getHighestDayPercent().intValue()));
TextView mostPopularHourTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour);
DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(getActivity());
c.set(Calendar.HOUR_OF_DAY,data.getHighestHour());
c.set(Calendar.MINUTE,0);
mostPopularHourTextView.setText(timeFormat.format(c.getTime()));
final TextView mostPopularHourPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour_percent);
mostPopularHourPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_daily_views),data.getHighestHourPercent().intValue()));
mResultContainer.addView(ll);
}","void customizeUIWithResults(){
  mResultContainer.removeAllViews();
  if (isDataEmpty(0) || !(mDatamodels[0] instanceof InsightsPopularModel)) {
    showErrorUI(null);
    return;
  }
  InsightsPopularModel data=(InsightsPopularModel)mDatamodels[0];
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_most_popular_item,(ViewGroup)mResultContainer.getRootView(),false);
  int dayOfTheWeek=data.getHighestDayOfWeek();
  Calendar c=Calendar.getInstance();
  c.setFirstDayOfWeek(Calendar.MONDAY);
  c.setTimeInMillis(System.currentTimeMillis());
switch (dayOfTheWeek) {
case 0:
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  break;
case 1:
c.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);
break;
case 2:
c.set(Calendar.DAY_OF_WEEK,Calendar.WEDNESDAY);
break;
case 3:
c.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);
break;
case 4:
c.set(Calendar.DAY_OF_WEEK,Calendar.FRIDAY);
break;
case 5:
c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);
break;
case 6:
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
break;
}
DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
final TextView mostPopularDayTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day);
mostPopularDayTextView.setText(formatter.format(c.getTime()));
final TextView mostPopularDayPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day_percent);
mostPopularDayPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_weekly_views),roundToInteger(data.getHighestDayPercent())));
TextView mostPopularHourTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour);
DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(getActivity());
c.set(Calendar.HOUR_OF_DAY,data.getHighestHour());
c.set(Calendar.MINUTE,0);
mostPopularHourTextView.setText(timeFormat.format(c.getTime()));
final TextView mostPopularHourPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour_percent);
mostPopularHourPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_daily_views),roundToInteger(data.getHighestHourPercent())));
mResultContainer.addView(ll);
}",0.9884579870729456
14372,"void customizeUIWithResults(){
  mResultContainer.removeAllViews();
  if (isDataEmpty(0) || !(mDatamodels[0] instanceof InsightsPopularModel)) {
    showErrorUI(null);
    return;
  }
  InsightsPopularModel data=(InsightsPopularModel)mDatamodels[0];
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_most_popular_item,(ViewGroup)mResultContainer.getRootView(),false);
  int dayOfTheWeek=data.getHighestDayOfWeek();
  Calendar c=Calendar.getInstance();
  c.setFirstDayOfWeek(Calendar.MONDAY);
  c.setTimeInMillis(System.currentTimeMillis());
switch (dayOfTheWeek) {
case 0:
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  break;
case 1:
c.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);
break;
case 2:
c.set(Calendar.DAY_OF_WEEK,Calendar.WEDNESDAY);
break;
case 3:
c.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);
break;
case 4:
c.set(Calendar.DAY_OF_WEEK,Calendar.FRIDAY);
break;
case 5:
c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);
break;
case 6:
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
break;
}
DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
final TextView mostPopularDayTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day);
mostPopularDayTextView.setText(formatter.format(c.getTime()).toUpperCase());
TextView mostPopularHourTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour);
DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(getActivity());
c.set(Calendar.HOUR_OF_DAY,data.getHighestHour());
c.set(Calendar.MINUTE,0);
mostPopularHourTextView.setText(timeFormat.format(c.getTime()));
mResultContainer.addView(ll);
}","void customizeUIWithResults(){
  mResultContainer.removeAllViews();
  if (isDataEmpty(0) || !(mDatamodels[0] instanceof InsightsPopularModel)) {
    showErrorUI(null);
    return;
  }
  InsightsPopularModel data=(InsightsPopularModel)mDatamodels[0];
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_most_popular_item,(ViewGroup)mResultContainer.getRootView(),false);
  int dayOfTheWeek=data.getHighestDayOfWeek();
  Calendar c=Calendar.getInstance();
  c.setFirstDayOfWeek(Calendar.MONDAY);
  c.setTimeInMillis(System.currentTimeMillis());
switch (dayOfTheWeek) {
case 0:
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  break;
case 1:
c.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);
break;
case 2:
c.set(Calendar.DAY_OF_WEEK,Calendar.WEDNESDAY);
break;
case 3:
c.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);
break;
case 4:
c.set(Calendar.DAY_OF_WEEK,Calendar.FRIDAY);
break;
case 5:
c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);
break;
case 6:
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
break;
}
DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
final TextView mostPopularDayTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day);
mostPopularDayTextView.setText(formatter.format(c.getTime()));
final TextView mostPopularDayPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day_percent);
mostPopularDayPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_weekly_views),data.getHighestDayPercent().intValue()));
TextView mostPopularHourTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour);
DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(getActivity());
c.set(Calendar.HOUR_OF_DAY,data.getHighestHour());
c.set(Calendar.MINUTE,0);
mostPopularHourTextView.setText(timeFormat.format(c.getTime()));
final TextView mostPopularHourPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour_percent);
mostPopularHourPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_daily_views),data.getHighestHourPercent().intValue()));
mResultContainer.addView(ll);
}",0.8519398258115598
14373,"public InsightsPopularModel(String blogID,JSONObject response) throws JSONException {
  this.setBlogID(blogID);
  this.mHighestDayOfWeek=response.getInt((""String_Node_Str""));
  this.mHighestHour=response.getInt((""String_Node_Str""));
  this.mHighestDayPercent=response.getDouble(""String_Node_Str"");
}","public InsightsPopularModel(String blogID,JSONObject response) throws JSONException {
  this.setBlogID(blogID);
  this.mHighestDayOfWeek=response.getInt((""String_Node_Str""));
  this.mHighestHour=response.getInt((""String_Node_Str""));
  this.mHighestDayPercent=response.getDouble(""String_Node_Str"");
  this.mHighestHourPercent=response.getDouble(""String_Node_Str"");
}",0.9006024096385542
14374,"private void saveAndFinish(){
  savePost(true);
  if (mEditorFragment != null && mPost.hasEmptyContentFields()) {
    if (mIsNewPost) {
      WordPress.wpDB.deletePost(mPost);
    }
  }
 else   if (mOriginalPost != null && !mPost.hasChanges(mOriginalPost)) {
    WordPress.wpDB.updatePost(mOriginalPost);
    WordPress.currentPost=mOriginalPost;
  }
 else {
    savePost(false);
    WordPress.currentPost=mPost;
    Intent i=new Intent();
    i.putExtra(EXTRA_SHOULD_REFRESH,true);
    i.putExtra(EXTRA_SAVED_AS_LOCAL_DRAFT,true);
    i.putExtra(EXTRA_IS_PAGE,mIsPage);
    setResult(RESULT_OK,i);
    ToastUtils.showToast(this,R.string.editor_toast_changes_saved);
  }
  finish();
}","private void saveAndFinish(){
  savePost(true);
  if (mEditorFragment != null && mPost.hasEmptyContentFields()) {
    if (mIsNewPost) {
      WordPress.wpDB.deletePost(mPost);
      finish();
      return;
    }
  }
 else   if (mOriginalPost != null && !mPost.hasChanges(mOriginalPost)) {
    WordPress.wpDB.updatePost(mOriginalPost);
    WordPress.currentPost=mOriginalPost;
    finish();
    return;
  }
 else {
    savePost(false);
  }
  WordPress.currentPost=mPost;
  Intent i=new Intent();
  i.putExtra(EXTRA_SHOULD_REFRESH,true);
  i.putExtra(EXTRA_SAVED_AS_LOCAL_DRAFT,true);
  i.putExtra(EXTRA_IS_PAGE,mIsPage);
  setResult(RESULT_OK,i);
  ToastUtils.showToast(this,R.string.editor_toast_changes_saved);
  finish();
}",0.9332386363636364
14375,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  String text=isMarkValid(mMark) ? String.valueOf(mMark) + ""String_Node_Str"" : ""String_Node_Str"";
  if (!TextUtils.isEmpty(text)) {
    float textHeight=mTextPaint.descent() + mTextPaint.ascent();
    float yPositionOfText=(getWidth() - textHeight) / 2.0f;
    canvas.drawText(text,(getWidth() - mTextPaint.measureText(text)) / 2.0f,yPositionOfText,mTextPaint);
    String viewsText=getResources().getString(R.string.stats_views);
    float paddingBetweenTextRows=-10f;
    canvas.drawText(viewsText,(getWidth() - mSecondLineTextPaint.measureText(viewsText)) / 2.0f,yPositionOfText - (textHeight + paddingBetweenTextRows),mSecondLineTextPaint);
  }
  float delta=mStrokeWidth / 2f;
  canvas.translate(0f,2 * delta);
  mOuterRect.set(delta,delta,getWidth() - delta,getHeight() - delta);
  float innerCircleRadius=(getWidth() - mStrokeWidth) / 2f;
  canvas.drawCircle(getWidth() / 2f,getHeight() / 2f,innerCircleRadius,mInnerCirclePaint);
  canvas.drawArc(mOuterRect,150,240f,false,mBgRingPaint);
  canvas.drawArc(mOuterRect,150,getMarkAngle(),false,mPaint);
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  String text=(isMarkValid(mMark) ? String.valueOf(mMark) : ""String_Node_Str"") + ""String_Node_Str"";
  if (!TextUtils.isEmpty(text)) {
    float textHeight=mTextPaint.descent() + mTextPaint.ascent();
    float yPositionOfText=(getWidth() - textHeight) / 2.0f;
    canvas.drawText(text,(getWidth() - mTextPaint.measureText(text)) / 2.0f,yPositionOfText,mTextPaint);
    String viewsText=getResources().getString(R.string.stats_views);
    float paddingBetweenTextRows=-10f;
    canvas.drawText(viewsText,(getWidth() - mSecondLineTextPaint.measureText(viewsText)) / 2.0f,yPositionOfText - (textHeight + paddingBetweenTextRows),mSecondLineTextPaint);
  }
  float delta=mStrokeWidth / 2f;
  canvas.translate(0f,2 * delta);
  mOuterRect.set(delta,delta,getWidth() - delta,getHeight() - delta);
  float innerCircleRadius=(getWidth() - mStrokeWidth) / 2f;
  canvas.drawCircle(getWidth() / 2f,getHeight() / 2f,innerCircleRadius,mInnerCirclePaint);
  canvas.drawArc(mOuterRect,150,240f,false,mBgRingPaint);
  canvas.drawArc(mOuterRect,150,getMarkAngle(),false,mPaint);
}",0.9964633068081344
14376,"public static void viewBlogStats(Context context,int blogLocalTableId){
  Intent intent=new Intent(context,StatsActivity.class);
  intent.putExtra(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,blogLocalTableId);
  context.startActivity(intent);
}","public static void viewBlogStats(Context context,int blogLocalTableId){
  if (blogLocalTableId == 0)   return;
  Intent intent=new Intent(context,StatsActivity.class);
  intent.putExtra(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,blogLocalTableId);
  context.startActivity(intent);
}",0.9242718446601942
14377,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_my_site,container,false);
  FragmentManager fm=getFragmentManager();
  fm.beginTransaction().add(new MediaAddFragment(),ADD_MEDIA_FRAGMENT_TAG).commit();
  mBlavatarSz=getResources().getDimensionPixelSize(R.dimen.blavatar_sz_small);
  mBlavatarImageView=(WPNetworkImageView)rootView.findViewById(R.id.my_site_blavatar);
  mBlogTitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_title_label);
  mBlogSubtitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_subtitle_label);
  mLookAndFeelHeader=(LinearLayout)rootView.findViewById(R.id.my_site_look_and_feel_header);
  mThemesContainer=(RelativeLayout)rootView.findViewById(R.id.my_site_themes_container);
  WPTextView switchSiteTextView=(WPTextView)rootView.findViewById(R.id.switch_site);
  switchSiteTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int localBlogId=(mBlog != null ? mBlog.getLocalTableBlogId() : 0);
      ActivityLauncher.showSitePickerForResult(getActivity(),localBlogId);
    }
  }
);
  WPTextView viewSiteTextView=(WPTextView)rootView.findViewById(R.id.my_site_view_site_text_view);
  viewSiteTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentSite(getActivity());
    }
  }
);
  WPTextView statsTextView=(WPTextView)rootView.findViewById(R.id.my_site_stats_text_view);
  statsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogStats(getActivity(),mBlog.getLocalTableBlogId());
    }
  }
);
  WPTextView blogPostsTextView=(WPTextView)rootView.findViewById(R.id.my_site_blog_posts_text_view);
  blogPostsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPosts(getActivity());
    }
  }
);
  WPTextView mediaTextView=(WPTextView)rootView.findViewById(R.id.my_site_media_text_view);
  mediaTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogMedia(getActivity());
    }
  }
);
  WPTextView pagesTextView=(WPTextView)rootView.findViewById(R.id.my_site_pages_text_view);
  pagesTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPages(getActivity());
    }
  }
);
  WPTextView commentsTextView=(WPTextView)rootView.findViewById(R.id.my_site_comments_text_view);
  commentsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogComments(getActivity());
    }
  }
);
  WPTextView themesTextView=(WPTextView)rootView.findViewById(R.id.my_site_themes_text_view);
  themesTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogThemes(getActivity());
    }
  }
);
  WPTextView settingsTextView=(WPTextView)rootView.findViewById(R.id.my_site_settings_text_view);
  settingsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogSettingsForResult(getActivity(),mBlog);
    }
  }
);
  WPTextView viewAdminTextView=(WPTextView)rootView.findViewById(R.id.my_site_view_admin_text_view);
  viewAdminTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogAdmin(getActivity(),mBlog);
    }
  }
);
  LinearLayout addPostContainer=(LinearLayout)rootView.findViewById(R.id.my_site_posts_add_button_container);
  addPostContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addNewBlogPostOrPage(getActivity(),mBlog,false);
    }
  }
);
  LinearLayout addPageContainer=(LinearLayout)rootView.findViewById(R.id.my_site_pages_add_button_container);
  addPageContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addNewBlogPostOrPage(getActivity(),mBlog,true);
    }
  }
);
  LinearLayout addMediaContainer=(LinearLayout)rootView.findViewById(R.id.my_site_media_add_button_container);
  addMediaContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addMedia(getActivity());
    }
  }
);
  refreshBlogDetails();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_my_site,container,false);
  FragmentManager fm=getFragmentManager();
  fm.beginTransaction().add(new MediaAddFragment(),ADD_MEDIA_FRAGMENT_TAG).commit();
  mBlavatarSz=getResources().getDimensionPixelSize(R.dimen.blavatar_sz_small);
  mBlavatarImageView=(WPNetworkImageView)rootView.findViewById(R.id.my_site_blavatar);
  mBlogTitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_title_label);
  mBlogSubtitleTextView=(WPTextView)rootView.findViewById(R.id.my_site_subtitle_label);
  mLookAndFeelHeader=(LinearLayout)rootView.findViewById(R.id.my_site_look_and_feel_header);
  mThemesContainer=(RelativeLayout)rootView.findViewById(R.id.my_site_themes_container);
  WPTextView switchSiteTextView=(WPTextView)rootView.findViewById(R.id.switch_site);
  switchSiteTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int localBlogId=(mBlog != null ? mBlog.getLocalTableBlogId() : 0);
      ActivityLauncher.showSitePickerForResult(getActivity(),localBlogId);
    }
  }
);
  WPTextView viewSiteTextView=(WPTextView)rootView.findViewById(R.id.my_site_view_site_text_view);
  viewSiteTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentSite(getActivity());
    }
  }
);
  WPTextView statsTextView=(WPTextView)rootView.findViewById(R.id.my_site_stats_text_view);
  statsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mBlog != null) {
        ActivityLauncher.viewBlogStats(getActivity(),mBlog.getLocalTableBlogId());
      }
    }
  }
);
  WPTextView blogPostsTextView=(WPTextView)rootView.findViewById(R.id.my_site_blog_posts_text_view);
  blogPostsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPosts(getActivity());
    }
  }
);
  WPTextView mediaTextView=(WPTextView)rootView.findViewById(R.id.my_site_media_text_view);
  mediaTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogMedia(getActivity());
    }
  }
);
  WPTextView pagesTextView=(WPTextView)rootView.findViewById(R.id.my_site_pages_text_view);
  pagesTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogPages(getActivity());
    }
  }
);
  WPTextView commentsTextView=(WPTextView)rootView.findViewById(R.id.my_site_comments_text_view);
  commentsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogComments(getActivity());
    }
  }
);
  WPTextView themesTextView=(WPTextView)rootView.findViewById(R.id.my_site_themes_text_view);
  themesTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewCurrentBlogThemes(getActivity());
    }
  }
);
  WPTextView settingsTextView=(WPTextView)rootView.findViewById(R.id.my_site_settings_text_view);
  settingsTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogSettingsForResult(getActivity(),mBlog);
    }
  }
);
  WPTextView viewAdminTextView=(WPTextView)rootView.findViewById(R.id.my_site_view_admin_text_view);
  viewAdminTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.viewBlogAdmin(getActivity(),mBlog);
    }
  }
);
  LinearLayout addPostContainer=(LinearLayout)rootView.findViewById(R.id.my_site_posts_add_button_container);
  addPostContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addNewBlogPostOrPage(getActivity(),mBlog,false);
    }
  }
);
  LinearLayout addPageContainer=(LinearLayout)rootView.findViewById(R.id.my_site_pages_add_button_container);
  addPageContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addNewBlogPostOrPage(getActivity(),mBlog,true);
    }
  }
);
  LinearLayout addMediaContainer=(LinearLayout)rootView.findViewById(R.id.my_site_media_add_button_container);
  addMediaContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.addMedia(getActivity());
    }
  }
);
  refreshBlogDetails();
  return rootView;
}",0.9960958109106256
14378,"public NoteViewHolder(View view){
  super(view);
  headerView=view.findViewById(R.id.time_header);
  contentView=view.findViewById(R.id.note_content_container);
  headerText=(TextView)view.findViewById(R.id.header_date_text);
  txtSubject=(TextView)view.findViewById(R.id.note_subject);
  txtSubjectNoticon=(TextView)view.findViewById(R.id.note_subject_noticon);
  txtDetail=(TextView)view.findViewById(R.id.note_detail);
  imgAvatar=(WPNetworkImageView)view.findViewById(R.id.note_avatar);
  noteIcon=(NoticonTextView)view.findViewById(R.id.note_icon);
  progressBar=view.findViewById(R.id.moderate_progress);
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mOnNoteClickListener != null && noteId != null) {
        mOnNoteClickListener.onClickNote(noteId);
      }
    }
  }
);
}","public NoteViewHolder(View view){
  super(view);
  headerView=view.findViewById(R.id.time_header);
  contentView=view.findViewById(R.id.note_content_container);
  headerText=(TextView)view.findViewById(R.id.header_date_text);
  txtSubject=(TextView)view.findViewById(R.id.note_subject);
  txtSubjectNoticon=(TextView)view.findViewById(R.id.note_subject_noticon);
  txtDetail=(TextView)view.findViewById(R.id.note_detail);
  imgAvatar=(WPNetworkImageView)view.findViewById(R.id.note_avatar);
  noteIcon=(NoticonTextView)view.findViewById(R.id.note_icon);
  progressBar=view.findViewById(R.id.moderate_progress);
}",0.8383561643835616
14379,"@Override public void onBindViewHolder(NoteViewHolder noteViewHolder,Cursor cursor){
  final Bucket.ObjectCursor<Note> objectCursor=(Bucket.ObjectCursor<Note>)cursor;
  noteViewHolder.noteId=objectCursor.getSimperiumKey();
  Note.NoteTimeGroup timeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
  Note.NoteTimeGroup previousTimeGroup=null;
  if (objectCursor.getPosition() > 0 && objectCursor.moveToPrevious()) {
    previousTimeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
    objectCursor.moveToNext();
  }
  if (previousTimeGroup != null && previousTimeGroup == timeGroup) {
    noteViewHolder.headerView.setVisibility(View.GONE);
  }
 else {
    if (timeGroup == Note.NoteTimeGroup.GROUP_TODAY) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.stats_timeframe_today).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_YESTERDAY) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.stats_timeframe_yesterday).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_OLDER_TWO_DAYS) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.older_two_days).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_OLDER_WEEK) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.older_last_week).toUpperCase());
    }
 else {
      noteViewHolder.headerText.setText(mContext.getString(R.string.older_month).toUpperCase());
    }
    noteViewHolder.headerView.setVisibility(View.VISIBLE);
  }
  if (mHiddenNoteIds.size() > 0 && mHiddenNoteIds.contains(objectCursor.getSimperiumKey())) {
    noteViewHolder.contentView.setVisibility(View.GONE);
    noteViewHolder.headerView.setVisibility(View.GONE);
  }
 else {
    noteViewHolder.contentView.setVisibility(View.VISIBLE);
  }
  CommentStatus commentStatus=CommentStatus.UNKNOWN;
  if (SqlUtils.sqlToBool(getIntForColumnName(objectCursor,Note.Schema.IS_UNAPPROVED_INDEX))) {
    commentStatus=CommentStatus.UNAPPROVED;
  }
  String localStatus=getStringForColumnName(objectCursor,Note.Schema.LOCAL_STATUS);
  if (!TextUtils.isEmpty(localStatus)) {
    commentStatus=CommentStatus.fromString(localStatus);
  }
  if (mModeratingNoteIds.size() > 0 && mModeratingNoteIds.contains(objectCursor.getSimperiumKey())) {
    noteViewHolder.progressBar.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.progressBar.setVisibility(View.GONE);
  }
  String noteSubjectHtml=getStringForColumnName(objectCursor,Note.Schema.SUBJECT_INDEX).trim();
  CharSequence noteSubjectSpanned=Html.fromHtml(noteSubjectHtml);
  noteSubjectSpanned=noteSubjectSpanned.subSequence(0,TextUtils.getTrimmedLength(noteSubjectSpanned));
  noteViewHolder.txtSubject.setText(noteSubjectSpanned);
  String noteSubjectNoticon=getStringForColumnName(objectCursor,Note.Schema.COMMENT_SUBJECT_NOTICON);
  if (!TextUtils.isEmpty(noteSubjectNoticon)) {
    CommentUtils.indentTextViewFirstLine(noteViewHolder.txtSubject,DisplayUtils.dpToPx(mContext,22));
    noteViewHolder.txtSubjectNoticon.setText(noteSubjectNoticon);
    noteViewHolder.txtSubjectNoticon.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.txtSubjectNoticon.setVisibility(View.GONE);
  }
  String noteSnippet=getStringForColumnName(objectCursor,Note.Schema.SNIPPET_INDEX);
  if (!TextUtils.isEmpty(noteSnippet)) {
    noteViewHolder.txtSubject.setMaxLines(2);
    noteViewHolder.txtDetail.setText(noteSnippet);
    noteViewHolder.txtDetail.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.txtSubject.setMaxLines(3);
    noteViewHolder.txtDetail.setVisibility(View.GONE);
  }
  String avatarUrl=GravatarUtils.fixGravatarUrl(getStringForColumnName(objectCursor,Note.Schema.ICON_URL_INDEX),mAvatarSz);
  noteViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  boolean isUnread=SqlUtils.sqlToBool(getIntForColumnName(objectCursor,Note.Schema.UNREAD_INDEX));
  String noticonCharacter=getStringForColumnName(objectCursor,Note.Schema.NOTICON_INDEX);
  if (!TextUtils.isEmpty(noticonCharacter)) {
    noteViewHolder.noteIcon.setText(noticonCharacter);
    if (commentStatus == CommentStatus.UNAPPROVED) {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_orange);
    }
 else     if (isUnread) {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_blue_white_stroke);
    }
 else {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_grey);
    }
    noteViewHolder.noteIcon.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.noteIcon.setVisibility(View.GONE);
  }
  if (isUnread) {
    noteViewHolder.itemView.setBackgroundResource(mUnreadBackgroundResId);
  }
 else {
    noteViewHolder.itemView.setBackgroundResource(mReadBackgroundResId);
  }
}","@Override public void onBindViewHolder(NoteViewHolder noteViewHolder,Cursor cursor){
  final Bucket.ObjectCursor<Note> objectCursor=(Bucket.ObjectCursor<Note>)cursor;
  final String noteId=objectCursor.getSimperiumKey();
  Note.NoteTimeGroup timeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
  Note.NoteTimeGroup previousTimeGroup=null;
  if (objectCursor.getPosition() > 0 && objectCursor.moveToPrevious()) {
    previousTimeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
    objectCursor.moveToNext();
  }
  if (previousTimeGroup != null && previousTimeGroup == timeGroup) {
    noteViewHolder.headerView.setVisibility(View.GONE);
  }
 else {
    if (timeGroup == Note.NoteTimeGroup.GROUP_TODAY) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.stats_timeframe_today).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_YESTERDAY) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.stats_timeframe_yesterday).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_OLDER_TWO_DAYS) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.older_two_days).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_OLDER_WEEK) {
      noteViewHolder.headerText.setText(mContext.getString(R.string.older_last_week).toUpperCase());
    }
 else {
      noteViewHolder.headerText.setText(mContext.getString(R.string.older_month).toUpperCase());
    }
    noteViewHolder.headerView.setVisibility(View.VISIBLE);
  }
  if (mHiddenNoteIds.size() > 0 && mHiddenNoteIds.contains(objectCursor.getSimperiumKey())) {
    noteViewHolder.contentView.setVisibility(View.GONE);
    noteViewHolder.headerView.setVisibility(View.GONE);
  }
 else {
    noteViewHolder.contentView.setVisibility(View.VISIBLE);
  }
  CommentStatus commentStatus=CommentStatus.UNKNOWN;
  if (SqlUtils.sqlToBool(getIntForColumnName(objectCursor,Note.Schema.IS_UNAPPROVED_INDEX))) {
    commentStatus=CommentStatus.UNAPPROVED;
  }
  String localStatus=getStringForColumnName(objectCursor,Note.Schema.LOCAL_STATUS);
  if (!TextUtils.isEmpty(localStatus)) {
    commentStatus=CommentStatus.fromString(localStatus);
  }
  if (mModeratingNoteIds.size() > 0 && mModeratingNoteIds.contains(objectCursor.getSimperiumKey())) {
    noteViewHolder.progressBar.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.progressBar.setVisibility(View.GONE);
  }
  String noteSubjectHtml=getStringForColumnName(objectCursor,Note.Schema.SUBJECT_INDEX).trim();
  CharSequence noteSubjectSpanned=Html.fromHtml(noteSubjectHtml);
  noteSubjectSpanned=noteSubjectSpanned.subSequence(0,TextUtils.getTrimmedLength(noteSubjectSpanned));
  noteViewHolder.txtSubject.setText(noteSubjectSpanned);
  String noteSubjectNoticon=getStringForColumnName(objectCursor,Note.Schema.COMMENT_SUBJECT_NOTICON);
  if (!TextUtils.isEmpty(noteSubjectNoticon)) {
    CommentUtils.indentTextViewFirstLine(noteViewHolder.txtSubject,DisplayUtils.dpToPx(mContext,22));
    noteViewHolder.txtSubjectNoticon.setText(noteSubjectNoticon);
    noteViewHolder.txtSubjectNoticon.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.txtSubjectNoticon.setVisibility(View.GONE);
  }
  String noteSnippet=getStringForColumnName(objectCursor,Note.Schema.SNIPPET_INDEX);
  if (!TextUtils.isEmpty(noteSnippet)) {
    noteViewHolder.txtSubject.setMaxLines(2);
    noteViewHolder.txtDetail.setText(noteSnippet);
    noteViewHolder.txtDetail.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.txtSubject.setMaxLines(3);
    noteViewHolder.txtDetail.setVisibility(View.GONE);
  }
  String avatarUrl=GravatarUtils.fixGravatarUrl(getStringForColumnName(objectCursor,Note.Schema.ICON_URL_INDEX),mAvatarSz);
  noteViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  boolean isUnread=SqlUtils.sqlToBool(getIntForColumnName(objectCursor,Note.Schema.UNREAD_INDEX));
  String noticonCharacter=getStringForColumnName(objectCursor,Note.Schema.NOTICON_INDEX);
  if (!TextUtils.isEmpty(noticonCharacter)) {
    noteViewHolder.noteIcon.setText(noticonCharacter);
    if (commentStatus == CommentStatus.UNAPPROVED) {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_orange);
    }
 else     if (isUnread) {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_blue_white_stroke);
    }
 else {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_grey);
    }
    noteViewHolder.noteIcon.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.noteIcon.setVisibility(View.GONE);
  }
  if (isUnread) {
    noteViewHolder.itemView.setBackgroundResource(mUnreadBackgroundResId);
  }
 else {
    noteViewHolder.itemView.setBackgroundResource(mReadBackgroundResId);
  }
  noteViewHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mOnNoteClickListener != null && noteId != null) {
        mOnNoteClickListener.onClickNote(noteId);
      }
    }
  }
);
}",0.9721584672188404
14380,"public HtmlToSpannedConverter(String source,WPHtml.ImageGetter imageGetter,WPHtml.TagHandler tagHandler,Parser parser,Context context,Post p,int maxImageWidth){
  mSource=source;
  mSpannableStringBuilder=new SpannableStringBuilder();
  mImageGetter=imageGetter;
  mReader=parser;
  mysteryTagContent=""String_Node_Str"";
  mysteryTagName=null;
  ctx=context;
  post=p;
  mMaxImageWidth=maxImageWidth;
}","public HtmlToSpannedConverter(String source,WPHtml.ImageGetter imageGetter,WPHtml.TagHandler tagHandler,Parser parser,Context context,Post p,int maxImageWidth){
  mSource=source;
  mSpannableStringBuilder=new SpannableStringBuilder();
  mImageGetter=imageGetter;
  mReader=parser;
  mysteryTagContent=""String_Node_Str"";
  mysteryTagName=null;
  mContext=context;
  mPost=p;
  mMaxImageWidth=maxImageWidth;
}",0.9529702970297028
14381,"private void handleStartTag(String tag,Attributes attributes){
  if (!mysteryTagFound) {
    if (post != null) {
      if (!post.isLocalDraft()) {
        if (tag.equalsIgnoreCase(""String_Node_Str""))         startImg(mSpannableStringBuilder,attributes,mImageGetter);
        return;
      }
    }
    if (tag.equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Bold());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Bold());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Big());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Small());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      startFont(mSpannableStringBuilder,attributes);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
      start(mSpannableStringBuilder,new Blockquote());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Monospace());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      startA(mSpannableStringBuilder,attributes);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Underline());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Super());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Sub());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Strike());
    }
 else     if (tag.length() == 2 && Character.toLowerCase(tag.charAt(0)) == 'h' && tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {
      handleP(mSpannableStringBuilder);
      start(mSpannableStringBuilder,new Header(tag.charAt(1) - '1'));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      startImg(mSpannableStringBuilder,attributes,mImageGetter);
    }
 else {
      if (tag.equalsIgnoreCase(""String_Node_Str"") || tag.equalsIgnoreCase(""String_Node_Str"")) {
        return;
      }
      mysteryTagFound=true;
      mysteryTagName=tag;
    }
  }
}","private void handleStartTag(String tag,Attributes attributes){
  if (!mysteryTagFound) {
    if (mPost != null) {
      if (!mPost.isLocalDraft()) {
        if (tag.equalsIgnoreCase(""String_Node_Str""))         startImg(mSpannableStringBuilder,attributes,mImageGetter);
        return;
      }
    }
    if (tag.equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Bold());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Bold());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Italic());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Big());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Small());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      startFont(mSpannableStringBuilder,attributes);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
      start(mSpannableStringBuilder,new Blockquote());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Monospace());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      startA(mSpannableStringBuilder,attributes);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Underline());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Super());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Sub());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      start(mSpannableStringBuilder,new Strike());
    }
 else     if (tag.length() == 2 && Character.toLowerCase(tag.charAt(0)) == 'h' && tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {
      handleP(mSpannableStringBuilder);
      start(mSpannableStringBuilder,new Header(tag.charAt(1) - '1'));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      startImg(mSpannableStringBuilder,attributes,mImageGetter);
    }
 else {
      if (tag.equalsIgnoreCase(""String_Node_Str"") || tag.equalsIgnoreCase(""String_Node_Str"")) {
        return;
      }
      mysteryTagFound=true;
      mysteryTagName=tag;
    }
  }
}",0.9989969909729188
14382,"private void handleEndTag(String tag){
  if (post != null) {
    if (!post.isLocalDraft())     return;
  }
  if (!mysteryTagFound) {
    if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleBr(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Bold.class,new StyleSpan(Typeface.BOLD));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Bold.class,new StyleSpan(Typeface.BOLD));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Big.class,new RelativeSizeSpan(1.25f));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Small.class,new RelativeSizeSpan(0.8f));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      endFont(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
      end(mSpannableStringBuilder,Blockquote.class,new QuoteSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Monospace.class,new TypefaceSpan(""String_Node_Str""));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      endA(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Underline.class,new WPUnderlineSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Super.class,new SuperscriptSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Sub.class,new SubscriptSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Strike.class,new StrikethroughSpan());
    }
 else     if (tag.length() == 2 && Character.toLowerCase(tag.charAt(0)) == 'h' && tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {
      handleP(mSpannableStringBuilder);
      endHeader(mSpannableStringBuilder);
    }
  }
 else {
    if (tag.equalsIgnoreCase(""String_Node_Str"") || tag.equalsIgnoreCase(""String_Node_Str"")) {
      return;
    }
    if (mysteryTagName.equals(tag)) {
      mysteryTagFound=false;
      mSpannableStringBuilder.append(mysteryTagContent);
    }
  }
}","private void handleEndTag(String tag){
  if (mPost != null) {
    if (!mPost.isLocalDraft())     return;
  }
  if (!mysteryTagFound) {
    if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleBr(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Bold.class,new StyleSpan(Typeface.BOLD));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Bold.class,new StyleSpan(Typeface.BOLD));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Italic.class,new StyleSpan(Typeface.ITALIC));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Big.class,new RelativeSizeSpan(1.25f));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Small.class,new RelativeSizeSpan(0.8f));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      endFont(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      handleP(mSpannableStringBuilder);
      end(mSpannableStringBuilder,Blockquote.class,new QuoteSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Monospace.class,new TypefaceSpan(""String_Node_Str""));
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      endA(mSpannableStringBuilder);
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Underline.class,new WPUnderlineSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Super.class,new SuperscriptSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Sub.class,new SubscriptSpan());
    }
 else     if (tag.equalsIgnoreCase(""String_Node_Str"")) {
      end(mSpannableStringBuilder,Strike.class,new StrikethroughSpan());
    }
 else     if (tag.length() == 2 && Character.toLowerCase(tag.charAt(0)) == 'h' && tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {
      handleP(mSpannableStringBuilder);
      endHeader(mSpannableStringBuilder);
    }
  }
 else {
    if (tag.equalsIgnoreCase(""String_Node_Str"") || tag.equalsIgnoreCase(""String_Node_Str"")) {
      return;
    }
    if (mysteryTagName.equals(tag)) {
      mysteryTagFound=false;
      mSpannableStringBuilder.append(mysteryTagContent);
    }
  }
}",0.999033193683532
14383,"private void startImg(SpannableStringBuilder text,Attributes attributes,WPHtml.ImageGetter img){
  if (ctx == null)   return;
  String src=attributes.getValue(""String_Node_Str"");
  Bitmap resizedBitmap=null;
  try {
    resizedBitmap=ImageUtils.getWPImageSpanThumbnailFromFilePath(ctx,src,mMaxImageWidth);
    if (resizedBitmap == null && src != null) {
      if (src.contains(""String_Node_Str"")) {
        resizedBitmap=BitmapFactory.decodeResource(ctx.getResources(),org.wordpress.android.editor.R.drawable.media_movieclip);
      }
 else {
        resizedBitmap=BitmapFactory.decodeResource(ctx.getResources(),R.drawable.media_image_placeholder);
      }
    }
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
  }
  if (resizedBitmap != null) {
    int len=text.length();
    text.append(""String_Node_Str"");
    Uri curStream=Uri.parse(src);
    if (curStream == null) {
      return;
    }
    WPImageSpan is=new WPImageSpan(ctx,resizedBitmap,curStream);
    MediaFile mf=WordPress.wpDB.getMediaFile(src,post);
    if (mf != null) {
      is.setMediaFile(mf);
      is.setImageSource(curStream);
      text.setSpan(is,len,text.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
      text.setSpan(as,text.getSpanStart(is),text.getSpanEnd(is),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
 else   if (post != null) {
    if (post.isLocalDraft()) {
      if (attributes != null) {
        text.append(""String_Node_Str"");
        for (int i=0; i < attributes.getLength(); i++) {
          String aName=attributes.getLocalName(i);
          if (""String_Node_Str"".equals(aName))           aName=attributes.getQName(i);
          text.append(""String_Node_Str"");
          text.append(aName + ""String_Node_Str"" + attributes.getValue(i)+ ""String_Node_Str"");
        }
        text.append(""String_Node_Str"");
      }
    }
  }
}","private void startImg(SpannableStringBuilder text,Attributes attributes,WPHtml.ImageGetter img){
  if (mContext == null)   return;
  String src=attributes.getValue(""String_Node_Str"");
  Bitmap resizedBitmap=null;
  try {
    resizedBitmap=ImageUtils.getWPImageSpanThumbnailFromFilePath(mContext,src,mMaxImageWidth);
    if (resizedBitmap == null && src != null) {
      if (src.contains(""String_Node_Str"")) {
        resizedBitmap=BitmapFactory.decodeResource(mContext.getResources(),org.wordpress.android.editor.R.drawable.media_movieclip);
      }
 else {
        resizedBitmap=BitmapFactory.decodeResource(mContext.getResources(),R.drawable.media_image_placeholder);
      }
    }
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
  }
  if (resizedBitmap != null) {
    int len=text.length();
    text.append(""String_Node_Str"");
    Uri curStream=Uri.parse(src);
    if (curStream == null) {
      return;
    }
    WPImageSpan is=new WPImageSpan(mContext,resizedBitmap,curStream);
    MediaFile mf=WordPress.wpDB.getMediaFile(src,mPost);
    if (mf != null) {
      is.setMediaFile(mf);
      is.setImageSource(curStream);
      text.setSpan(is,len,text.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
      text.setSpan(as,text.getSpanStart(is),text.getSpanEnd(is),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
 else   if (mPost != null) {
    if (mPost.isLocalDraft()) {
      if (attributes != null) {
        text.append(""String_Node_Str"");
        for (int i=0; i < attributes.getLength(); i++) {
          String aName=attributes.getLocalName(i);
          if (""String_Node_Str"".equals(aName))           aName=attributes.getQName(i);
          text.append(""String_Node_Str"");
          text.append(aName + ""String_Node_Str"" + attributes.getValue(i)+ ""String_Node_Str"");
        }
        text.append(""String_Node_Str"");
      }
    }
  }
}",0.9865269461077844
14384,"public void refreshStats(int pageNumberRequested,StatsService.StatsEndpointsEnum[] sections){
  if (!isAdded()) {
    return;
  }
  if (sections == null) {
    sections=getSectionsToUpdate();
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.w(AppLog.T.STATS,this.getClass().getCanonicalName() + ""String_Node_Str"");
    return;
  }
  final String blogId=StatsUtils.getBlogId(getLocalTableBlogID());
  final Blog currentBlog=WordPress.getBlog(getLocalTableBlogID());
  if (currentBlog == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  if (blogId == null) {
    AppLog.e(AppLog.T.STATS,""String_Node_Str"" + currentBlog.getHomeURL());
    return;
  }
  if (!currentBlog.isDotcomFlag() && !currentBlog.hasValidJetpackCredentials()) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  int[] sectionsForTheService=new int[sections.length];
  for (int i=0; i < sections.length; i++) {
    sectionsForTheService[i]=sections[i].ordinal();
  }
  Intent intent=new Intent(getActivity(),StatsService.class);
  intent.putExtra(StatsService.ARG_BLOG_ID,blogId);
  intent.putExtra(StatsService.ARG_PERIOD,mStatsTimeframe);
  intent.putExtra(StatsService.ARG_DATE,mDate);
  if (isSingleView()) {
    if (pageNumberRequested > 0) {
      intent.putExtra(StatsService.ARG_MAX_RESULTS,StatsService.MAX_RESULTS_REQUESTED_PER_PAGE);
    }
 else {
      intent.putExtra(StatsService.ARG_MAX_RESULTS,MAX_RESULTS_REQUESTED);
    }
  }
  if (pageNumberRequested > 0) {
    intent.putExtra(StatsService.ARG_PAGE_REQUESTED,pageNumberRequested);
  }
  intent.putExtra(StatsService.ARG_SECTION,sectionsForTheService);
  getActivity().startService(intent);
}","public void refreshStats(int pageNumberRequested,StatsService.StatsEndpointsEnum[] sections){
  if (!isAdded()) {
    return;
  }
  if (sections == null) {
    sections=getSectionsToUpdate();
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.w(AppLog.T.STATS,this.getClass().getCanonicalName() + ""String_Node_Str"");
    return;
  }
  final String blogId=StatsUtils.getBlogId(getLocalTableBlogID());
  final Blog currentBlog=WordPress.getBlog(getLocalTableBlogID());
  if (currentBlog == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  if (blogId == null) {
    AppLog.e(AppLog.T.STATS,""String_Node_Str"" + currentBlog.getHomeURL());
    return;
  }
  if (!currentBlog.isDotcomFlag() && !currentBlog.hasValidJetpackCredentials() && !AccountHelper.getDefaultAccount().hasAccessToken()) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  int[] sectionsForTheService=new int[sections.length];
  for (int i=0; i < sections.length; i++) {
    sectionsForTheService[i]=sections[i].ordinal();
  }
  Intent intent=new Intent(getActivity(),StatsService.class);
  intent.putExtra(StatsService.ARG_BLOG_ID,blogId);
  intent.putExtra(StatsService.ARG_PERIOD,mStatsTimeframe);
  intent.putExtra(StatsService.ARG_DATE,mDate);
  if (isSingleView()) {
    if (pageNumberRequested > 0) {
      intent.putExtra(StatsService.ARG_MAX_RESULTS,StatsService.MAX_RESULTS_REQUESTED_PER_PAGE);
    }
 else {
      intent.putExtra(StatsService.ARG_MAX_RESULTS,MAX_RESULTS_REQUESTED);
    }
  }
  if (pageNumberRequested > 0) {
    intent.putExtra(StatsService.ARG_PAGE_REQUESTED,pageNumberRequested);
  }
  intent.putExtra(StatsService.ARG_SECTION,sectionsForTheService);
  getActivity().startService(intent);
}",0.9840069787728992
14385,"public static void handleNoteBlockSpanClick(NotificationsDetailActivity activity,NoteBlockClickableSpan clickedSpan){
switch (clickedSpan.getRangeType()) {
case SITE:
    activity.showBlogPreviewActivity(clickedSpan.getId());
  break;
case USER:
activity.showBlogPreviewActivity(clickedSpan.getSiteId());
break;
case POST:
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getId());
break;
case COMMENT:
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getPostId());
break;
case STAT:
case FOLLOW:
int localTableSiteId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId((int)clickedSpan.getSiteId());
if (localTableSiteId > 0) {
activity.showStatsActivityForSite(localTableSiteId,clickedSpan.getRangeType());
}
 else if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
break;
case LIKE:
if (ReaderPostTable.postExists(clickedSpan.getSiteId(),clickedSpan.getId())) {
activity.showReaderPostLikeUsers(clickedSpan.getSiteId(),clickedSpan.getId());
}
 else {
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getId());
}
break;
default :
if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
}
}","public static void handleNoteBlockSpanClick(NotificationsDetailActivity activity,NoteBlockClickableSpan clickedSpan){
switch (clickedSpan.getRangeType()) {
case SITE:
    activity.showBlogPreviewActivity(clickedSpan.getId());
  break;
case USER:
activity.showBlogPreviewActivity(clickedSpan.getSiteId());
break;
case POST:
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getId());
break;
case COMMENT:
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
break;
case STAT:
case FOLLOW:
int localTableSiteId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId((int)clickedSpan.getSiteId());
if (localTableSiteId > 0) {
activity.showStatsActivityForSite(localTableSiteId,clickedSpan.getRangeType());
}
 else if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
break;
case LIKE:
if (ReaderPostTable.postExists(clickedSpan.getSiteId(),clickedSpan.getId())) {
activity.showReaderPostLikeUsers(clickedSpan.getSiteId(),clickedSpan.getId());
}
 else {
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getId());
}
break;
default :
if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
}
}",0.9666123778501629
14386,"@Override protected List<NoteBlock> doInBackground(Void... params){
  if (mNote == null)   return null;
  JSONArray bodyArray=mNote.getBody();
  final List<NoteBlock> noteList=new ArrayList<>();
  if (mNote.getHeader() != null) {
    ImageType imageType=mNote.isFollowType() ? ImageType.BLAVATAR : ImageType.AVATAR;
    HeaderNoteBlock headerNoteBlock=new HeaderNoteBlock(getActivity(),mNote.getHeader(),imageType,mOnNoteBlockTextClickListener,mOnGravatarClickedListener);
    headerNoteBlock.setIsComment(mNote.isCommentType());
    noteList.add(headerNoteBlock);
  }
  if (bodyArray != null && bodyArray.length() > 0) {
    for (int i=0; i < bodyArray.length(); i++) {
      try {
        JSONObject noteObject=bodyArray.getJSONObject(i);
        NoteBlock noteBlock;
        String noteBlockTypeString=JSONUtils.queryJSON(noteObject,""String_Node_Str"",""String_Node_Str"");
        if (BlockType.fromString(noteBlockTypeString) == BlockType.USER) {
          if (mNote.isCommentType()) {
            mCommentListPosition=i + noteList.size();
            if (i + 1 < bodyArray.length()) {
              JSONObject commentTextBlock=bodyArray.getJSONObject(i + 1);
              noteObject.put(""String_Node_Str"",commentTextBlock);
              i++;
            }
            noteObject.put(""String_Node_Str"",mNote.getTimestamp());
            noteBlock=new CommentUserNoteBlock(getActivity(),noteObject,mOnNoteBlockTextClickListener,mOnGravatarClickedListener);
            CommentUserNoteBlock commentUserNoteBlock=(CommentUserNoteBlock)noteBlock;
            mOnCommentStatusChangeListener=commentUserNoteBlock.getOnCommentChangeListener();
            commentUserNoteBlock.setCommentStatus(mNote.getCommentStatus());
            commentUserNoteBlock.configureResources(getActivity());
          }
 else {
            noteBlock=new UserNoteBlock(getActivity(),noteObject,mOnNoteBlockTextClickListener,mOnGravatarClickedListener);
          }
        }
 else         if (isFooterBlock(noteObject)) {
          noteBlock=new FooterNoteBlock(noteObject,mOnNoteBlockTextClickListener);
          ((FooterNoteBlock)noteBlock).setClickableSpan(JSONUtils.queryJSON(noteObject,""String_Node_Str"",new JSONObject()),mNote.getType());
        }
 else {
          noteBlock=new NoteBlock(noteObject,mOnNoteBlockTextClickListener);
        }
        if (isAdded() && noteBlock.containsBadgeMediaType()) {
          mIsBadgeView=true;
          mBackgroundColor=getActivity().getResources().getColor(R.color.transparent);
        }
        if (mIsBadgeView) {
          noteBlock.setIsBadge();
        }
        noteList.add(noteBlock);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
      }
    }
  }
  return noteList;
}","@Override protected List<NoteBlock> doInBackground(Void... params){
  if (mNote == null)   return null;
  JSONArray bodyArray=mNote.getBody();
  final List<NoteBlock> noteList=new ArrayList<>();
  if (mNote.getHeader() != null) {
    ImageType imageType=mNote.isFollowType() ? ImageType.BLAVATAR : ImageType.AVATAR;
    HeaderNoteBlock headerNoteBlock=new HeaderNoteBlock(getActivity(),mNote.getHeader(),imageType,mOnNoteBlockTextClickListener,mOnGravatarClickedListener);
    headerNoteBlock.setIsComment(mNote.isCommentType());
    noteList.add(headerNoteBlock);
  }
  if (bodyArray != null && bodyArray.length() > 0) {
    for (int i=0; i < bodyArray.length(); i++) {
      try {
        JSONObject noteObject=bodyArray.getJSONObject(i);
        NoteBlock noteBlock;
        String noteBlockTypeString=JSONUtils.queryJSON(noteObject,""String_Node_Str"",""String_Node_Str"");
        if (BlockType.fromString(noteBlockTypeString) == BlockType.USER) {
          if (mNote.isCommentType()) {
            mCommentListPosition=i + noteList.size();
            if (i + 1 < bodyArray.length()) {
              JSONObject commentTextBlock=bodyArray.getJSONObject(i + 1);
              noteObject.put(""String_Node_Str"",commentTextBlock);
              i++;
            }
            noteObject.put(""String_Node_Str"",mNote.getTimestamp());
            noteBlock=new CommentUserNoteBlock(getActivity(),noteObject,mOnNoteBlockTextClickListener,mOnGravatarClickedListener);
            CommentUserNoteBlock commentUserNoteBlock=(CommentUserNoteBlock)noteBlock;
            mOnCommentStatusChangeListener=commentUserNoteBlock.getOnCommentChangeListener();
            commentUserNoteBlock.setCommentStatus(mNote.getCommentStatus());
            commentUserNoteBlock.configureResources(getActivity());
          }
 else {
            noteBlock=new UserNoteBlock(getActivity(),noteObject,mOnNoteBlockTextClickListener,mOnGravatarClickedListener);
          }
        }
 else         if (isFooterBlock(noteObject)) {
          noteBlock=new FooterNoteBlock(noteObject,mOnNoteBlockTextClickListener);
          ((FooterNoteBlock)noteBlock).setClickableSpan(JSONUtils.queryJSON(noteObject,""String_Node_Str"",new JSONObject()),mNote.getType());
          if (mNote.isUserList() && !ReaderPostTable.postExists(mNote.getSiteId(),mNote.getPostId())) {
            ReaderPostActions.requestPost(mNote.getSiteId(),mNote.getPostId(),null);
          }
        }
 else {
          noteBlock=new NoteBlock(noteObject,mOnNoteBlockTextClickListener);
        }
        if (isAdded() && noteBlock.containsBadgeMediaType()) {
          mIsBadgeView=true;
          mBackgroundColor=getActivity().getResources().getColor(R.color.transparent);
        }
        if (mIsBadgeView) {
          noteBlock.setIsBadge();
        }
        noteList.add(noteBlock);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
      }
    }
  }
  return noteList;
}",0.9647924330005256
14387,"public static void handleNoteBlockSpanClick(NotificationsDetailActivity activity,NoteBlockClickableSpan clickedSpan){
switch (clickedSpan.getRangeType()) {
case SITE:
    activity.showBlogPreviewActivity(clickedSpan.getId());
  break;
case USER:
activity.showBlogPreviewActivity(clickedSpan.getSiteId());
break;
case POST:
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getId());
break;
case COMMENT:
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getPostId());
break;
case STAT:
case FOLLOW:
int localTableSiteId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId((int)clickedSpan.getSiteId());
if (localTableSiteId > 0) {
activity.showStatsActivityForSite(localTableSiteId,clickedSpan.getRangeType());
}
 else if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
break;
case LIKE:
activity.showReaderPostLikeUsers(clickedSpan.getSiteId(),clickedSpan.getId());
break;
default :
if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
}
}","public static void handleNoteBlockSpanClick(NotificationsDetailActivity activity,NoteBlockClickableSpan clickedSpan){
switch (clickedSpan.getRangeType()) {
case SITE:
    activity.showBlogPreviewActivity(clickedSpan.getId());
  break;
case USER:
activity.showBlogPreviewActivity(clickedSpan.getSiteId());
break;
case POST:
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getId());
break;
case COMMENT:
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getPostId());
break;
case STAT:
case FOLLOW:
int localTableSiteId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId((int)clickedSpan.getSiteId());
if (localTableSiteId > 0) {
activity.showStatsActivityForSite(localTableSiteId,clickedSpan.getRangeType());
}
 else if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
break;
case LIKE:
if (ReaderPostTable.postExists(clickedSpan.getSiteId(),clickedSpan.getId())) {
activity.showReaderPostLikeUsers(clickedSpan.getSiteId(),clickedSpan.getId());
}
 else {
activity.showPostActivity(clickedSpan.getSiteId(),clickedSpan.getId());
}
break;
default :
if (!TextUtils.isEmpty(clickedSpan.getUrl())) {
activity.showWebViewActivityForUrl(clickedSpan.getUrl());
}
}
}",0.9294677628732152
14388,"public NoticonTextView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  this.setTypeface(TypefaceCache.getTypefaceForTypefaceName(context,NotificationsUtils.NOTICON_FONT_NAME));
}","public NoticonTextView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  this.setTypeface(TypefaceCache.getTypefaceForTypefaceName(context,NOTICON_FONT_NAME));
}",0.9537712895377128
14389,"@Override public void run(){
  AppLog.e(T.STATS,this.getClass().getName() + ""String_Node_Str"");
  StatsUtils.logVolleyErrorDetails(volleyError);
  mResponseObjectModel=volleyError;
  EventBus.getDefault().post(new StatsEvents.SectionUpdated(mEndpointName,mRequestBlogId,mTimeframe,mDate,mResponseObjectModel));
  checkAllRequestsFinished();
}","@Override public void run(){
  AppLog.e(T.STATS,this.getClass().getName() + ""String_Node_Str"");
  StatsUtils.logVolleyErrorDetails(volleyError);
  mResponseObjectModel=volleyError;
  EventBus.getDefault().post(new StatsEvents.SectionUpdated(mEndpointName,mRequestBlogId,mTimeframe,mDate,mResponseObjectModel));
  checkAllRequestsFinished(currentRequest);
}",0.9799426934097422
14390,"void checkAllRequestsFinished(){
synchronized (mStatsNetworkRequests) {
    Iterator<Request<JSONObject>> it=mStatsNetworkRequests.iterator();
    while (it.hasNext()) {
      Request<JSONObject> req=it.next();
      if (req.hasHadResponseDelivered() || req.isCanceled()) {
        it.remove();
      }
    }
    boolean isStillWorking=mStatsNetworkRequests.size() > 0;
    EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(isStillWorking));
  }
}","void checkAllRequestsFinished(Request<JSONObject> req){
synchronized (mStatsNetworkRequests) {
    if (req != null) {
      mStatsNetworkRequests.remove(req);
    }
    boolean isStillWorking=mStatsNetworkRequests.size() > 0;
    EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(isStillWorking));
  }
}",0.5979381443298969
14391,"@Override public void onResponse(final JSONObject response){
  singleThreadNetworkHandler.submit(new Thread(){
    @Override public void run(){
      if (response != null) {
        try {
          mResponseObjectModel=StatsUtils.parseResponse(mEndpointName,mRequestBlogId,response);
        }
 catch (        JSONException e) {
          AppLog.e(AppLog.T.STATS,e);
        }
      }
      EventBus.getDefault().post(new StatsEvents.SectionUpdated(mEndpointName,mRequestBlogId,mTimeframe,mDate,mResponseObjectModel));
      checkAllRequestsFinished();
    }
  }
);
}","@Override public void onResponse(final JSONObject response){
  singleThreadNetworkHandler.submit(new Thread(){
    @Override public void run(){
      if (response != null) {
        try {
          mResponseObjectModel=StatsUtils.parseResponse(mEndpointName,mRequestBlogId,response);
        }
 catch (        JSONException e) {
          AppLog.e(AppLog.T.STATS,e);
        }
      }
      EventBus.getDefault().post(new StatsEvents.SectionUpdated(mEndpointName,mRequestBlogId,mTimeframe,mDate,mResponseObjectModel));
      checkAllRequestsFinished(currentRequest);
    }
  }
);
}",0.9878048780487804
14392,"private void startTasks(final String blogId,final StatsTimeframe timeframe,final String date,final StatsEndpointsEnum sectionToUpdate,final int maxResultsRequested,final int pageRequested){
  final RestClientUtils restClientUtils=WordPress.getRestClientUtilsV1_1();
  String period=timeframe.getLabelForRestCall();
  EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(true));
  RestListener vListener=new RestListener(sectionToUpdate,blogId,timeframe,date);
  final String periodDateMaxPlaceholder=""String_Node_Str"";
  String path=String.format(""String_Node_Str"" + sectionToUpdate.getRestEndpointPath(),blogId);
synchronized (mStatsNetworkRequests) {
switch (sectionToUpdate) {
case VISITS:
      path=String.format(path + ""String_Node_Str"",period,date);
    break;
case TOP_POSTS:
case REFERRERS:
case CLICKS:
case GEO_VIEWS:
case AUTHORS:
case VIDEO_PLAYS:
case SEARCH_TERMS:
  path=String.format(path + periodDateMaxPlaceholder,period,date,maxResultsRequested);
break;
case TAGS_AND_CATEGORIES:
case PUBLICIZE:
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
break;
case COMMENTS:
break;
case FOLLOWERS_WPCOM:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case FOLLOWERS_EMAIL:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case COMMENT_FOLLOWERS:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
default :
AppLog.i(T.STATS,""String_Node_Str"" + sectionToUpdate.name());
return;
}
if (checkIfRequestShouldBeEnqueued(restClientUtils,path)) {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
Request<JSONObject> currentRequest=restClientUtils.get(path,vListener,vListener);
currentRequest.setTag(""String_Node_Str"");
mStatsNetworkRequests.add(currentRequest);
}
 else {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
}
}
}","private void startTasks(final String blogId,final StatsTimeframe timeframe,final String date,final StatsEndpointsEnum sectionToUpdate,final int maxResultsRequested,final int pageRequested){
  final RestClientUtils restClientUtils=WordPress.getRestClientUtilsV1_1();
  String period=timeframe.getLabelForRestCall();
  EventBus.getDefault().post(new StatsEvents.UpdateStatusChanged(true));
  RestListener vListener=new RestListener(sectionToUpdate,blogId,timeframe,date);
  final String periodDateMaxPlaceholder=""String_Node_Str"";
  String path=String.format(""String_Node_Str"" + sectionToUpdate.getRestEndpointPath(),blogId);
synchronized (mStatsNetworkRequests) {
switch (sectionToUpdate) {
case VISITS:
      path=String.format(path + ""String_Node_Str"",period,date);
    break;
case TOP_POSTS:
case REFERRERS:
case CLICKS:
case GEO_VIEWS:
case AUTHORS:
case VIDEO_PLAYS:
case SEARCH_TERMS:
  path=String.format(path + periodDateMaxPlaceholder,period,date,maxResultsRequested);
break;
case TAGS_AND_CATEGORIES:
case PUBLICIZE:
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
break;
case COMMENTS:
break;
case FOLLOWERS_WPCOM:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case FOLLOWERS_EMAIL:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
case COMMENT_FOLLOWERS:
if (pageRequested < 1) {
path=String.format(path + ""String_Node_Str"",maxResultsRequested);
}
 else {
path=String.format(path + ""String_Node_Str"",period,date,maxResultsRequested,pageRequested);
}
break;
default :
AppLog.i(T.STATS,""String_Node_Str"" + sectionToUpdate.name());
return;
}
if (checkIfRequestShouldBeEnqueued(restClientUtils,path)) {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
Request<JSONObject> currentRequest=restClientUtils.get(path,vListener,vListener);
vListener.currentRequest=currentRequest;
currentRequest.setTag(""String_Node_Str"");
mStatsNetworkRequests.add(currentRequest);
}
 else {
AppLog.d(AppLog.T.STATS,""String_Node_Str"" + path);
}
}
}",0.9908543386125362
14393,"@Override public void onErrorResponse(final VolleyError volleyError){
  singleThreadNetworkHandler.submit(new Thread(){
    @Override public void run(){
      AppLog.e(T.STATS,this.getClass().getName() + ""String_Node_Str"");
      StatsUtils.logVolleyErrorDetails(volleyError);
      mResponseObjectModel=volleyError;
      EventBus.getDefault().post(new StatsEvents.SectionUpdated(mEndpointName,mRequestBlogId,mTimeframe,mDate,mResponseObjectModel));
      checkAllRequestsFinished();
    }
  }
);
}","@Override public void onErrorResponse(final VolleyError volleyError){
  singleThreadNetworkHandler.submit(new Thread(){
    @Override public void run(){
      AppLog.e(T.STATS,this.getClass().getName() + ""String_Node_Str"");
      StatsUtils.logVolleyErrorDetails(volleyError);
      mResponseObjectModel=volleyError;
      EventBus.getDefault().post(new StatsEvents.SectionUpdated(mEndpointName,mRequestBlogId,mTimeframe,mDate,mResponseObjectModel));
      checkAllRequestsFinished(currentRequest);
    }
  }
);
}",0.9861660079051384
14394,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case RequestCodes.READER_SUBS:
case RequestCodes.READER_REBLOG:
    ReaderPostListFragment readerFragment=getReaderListFragment();
  if (readerFragment != null) {
  }
break;
case RequestCodes.ADD_ACCOUNT:
if (resultCode == RESULT_OK) {
WordPress.registerForCloudMessaging(this);
}
 else {
finish();
}
break;
case RequestCodes.REAUTHENTICATE:
if (resultCode == RESULT_CANCELED) {
ActivityLauncher.showSignInForResult(this);
}
 else {
WordPress.registerForCloudMessaging(this);
}
break;
case RequestCodes.SETTINGS:
if (AccountHelper.isSignedIn()) {
WordPress.registerForCloudMessaging(this);
}
 else {
ActivityLauncher.showSignInForResult(this);
}
break;
case RequestCodes.SITE_PICKER:
if (resultCode == RESULT_OK && data != null) {
int localId=data.getIntExtra(SitePickerActivity.KEY_LOCAL_ID,0);
Blog blog=WordPress.setCurrentBlog(localId);
WordPress.wpDB.updateLastBlogId(localId);
MySiteFragment mySiteFragment=getMySiteFragment();
if (mySiteFragment != null) {
mySiteFragment.setBlog(blog);
}
}
break;
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case RequestCodes.READER_SUBS:
case RequestCodes.READER_REBLOG:
    ReaderPostListFragment readerFragment=getReaderListFragment();
  if (readerFragment != null) {
  }
break;
case RequestCodes.ADD_ACCOUNT:
if (resultCode == RESULT_OK) {
WordPress.registerForCloudMessaging(this);
}
 else {
finish();
}
break;
case RequestCodes.REAUTHENTICATE:
if (resultCode == RESULT_CANCELED) {
ActivityLauncher.showSignInForResult(this);
}
 else {
WordPress.registerForCloudMessaging(this);
}
break;
case RequestCodes.SETTINGS:
if (AccountHelper.isSignedIn()) {
WordPress.registerForCloudMessaging(this);
}
 else {
ActivityLauncher.showSignInForResult(this);
}
break;
case RequestCodes.NOTE_DETAIL:
if (getNotificationListFragment() != null) {
getNotificationListFragment().onActivityResult(requestCode,resultCode,data);
}
break;
case RequestCodes.SITE_PICKER:
if (resultCode == RESULT_OK && data != null) {
int localId=data.getIntExtra(SitePickerActivity.KEY_LOCAL_ID,0);
Blog blog=WordPress.setCurrentBlog(localId);
WordPress.wpDB.updateLastBlogId(localId);
MySiteFragment mySiteFragment=getMySiteFragment();
if (mySiteFragment != null) {
mySiteFragment.setBlog(blog);
}
}
break;
}
}",0.935251798561151
14395,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == NOTE_DETAIL_REQUEST_CODE && resultCode == Activity.RESULT_OK && data != null) {
    if (SimperiumUtils.getNotesBucket() == null)     return;
    try {
      Note note=SimperiumUtils.getNotesBucket().get(StringUtils.notNullStr(data.getStringExtra(NOTE_MODERATE_ID_EXTRA)));
      CommentStatus commentStatus=CommentStatus.fromString(data.getStringExtra(NOTE_MODERATE_STATUS_EXTRA));
      moderateCommentForNote(note,commentStatus);
    }
 catch (    BucketObjectMissingException e) {
      e.printStackTrace();
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == RequestCodes.NOTE_DETAIL && resultCode == Activity.RESULT_OK && data != null) {
    if (SimperiumUtils.getNotesBucket() == null)     return;
    try {
      Note note=SimperiumUtils.getNotesBucket().get(StringUtils.notNullStr(data.getStringExtra(NOTE_MODERATE_ID_EXTRA)));
      CommentStatus commentStatus=CommentStatus.fromString(data.getStringExtra(NOTE_MODERATE_STATUS_EXTRA));
      moderateCommentForNote(note,commentStatus);
    }
 catch (    BucketObjectMissingException e) {
      e.printStackTrace();
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.9809384164222874
14396,"/** 
 * Open a note fragment based on the type of note
 */
public static void openNote(Activity activity,final String noteId,boolean shouldShowKeyboard){
  if (noteId == null || activity == null) {
    return;
  }
  Intent detailIntent=new Intent(activity,NotificationsDetailActivity.class);
  detailIntent.putExtra(NOTE_ID_EXTRA,noteId);
  detailIntent.putExtra(NOTE_INSTANT_REPLY_EXTRA,shouldShowKeyboard);
  ActivityOptionsCompat options=ActivityOptionsCompat.makeCustomAnimation(activity,R.anim.reader_activity_slide_in,R.anim.do_nothing);
  ActivityCompat.startActivityForResult(activity,detailIntent,NOTE_DETAIL_REQUEST_CODE,options.toBundle());
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS);
}","/** 
 * Open a note fragment based on the type of note
 */
public static void openNote(Activity activity,final String noteId,boolean shouldShowKeyboard){
  if (noteId == null || activity == null) {
    return;
  }
  Intent detailIntent=new Intent(activity,NotificationsDetailActivity.class);
  detailIntent.putExtra(NOTE_ID_EXTRA,noteId);
  detailIntent.putExtra(NOTE_INSTANT_REPLY_EXTRA,shouldShowKeyboard);
  ActivityOptionsCompat options=ActivityOptionsCompat.makeCustomAnimation(activity,R.anim.reader_activity_slide_in,R.anim.do_nothing);
  ActivityCompat.startActivityForResult(activity,detailIntent,RequestCodes.NOTE_DETAIL,options.toBundle());
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS);
}",0.98252688172043
14397,"@Override public void onCreate(Bundle savedInstanceState){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    getWindow().setStatusBarColor(getResources().getColor(R.color.status_bar_tint));
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mViewPager=(WPMainViewPager)findViewById(R.id.viewpager_main);
  mTabAdapter=new WPMainTabAdapter(getFragmentManager());
  mViewPager.setAdapter(mTabAdapter);
  mTabs=(SlidingTabLayout)findViewById(R.id.sliding_tabs);
  mTabs.setSelectedIndicatorColors(getResources().getColor(R.color.tab_indicator));
  mTabs.setDistributeEvenly(true);
  Integer icons[]={R.drawable.main_tab_sites,R.drawable.main_tab_reader,R.drawable.main_tab_me,R.drawable.main_tab_notifications};
  mTabs.setCustomTabView(R.layout.tab_icon,R.id.tab_icon,R.id.tab_badge,icons);
  mTabs.setViewPager(mViewPager);
  mTabs.setOnPageChangeListener(this);
  if (savedInstanceState == null) {
    if (showSignInIfRequired()) {
      int position=AppPrefs.getMainTabIndex();
      if (mTabAdapter.isValidPosition(position) && position != mViewPager.getCurrentItem()) {
        mViewPager.setCurrentItem(position);
      }
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  setStatusBarColor();
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mViewPager=(WPMainViewPager)findViewById(R.id.viewpager_main);
  mTabAdapter=new WPMainTabAdapter(getFragmentManager());
  mViewPager.setAdapter(mTabAdapter);
  mTabs=(SlidingTabLayout)findViewById(R.id.sliding_tabs);
  mTabs.setSelectedIndicatorColors(getResources().getColor(R.color.tab_indicator));
  mTabs.setDistributeEvenly(true);
  Integer icons[]={R.drawable.main_tab_sites,R.drawable.main_tab_reader,R.drawable.main_tab_me,R.drawable.main_tab_notifications};
  mTabs.setCustomTabView(R.layout.tab_icon,R.id.tab_icon,R.id.tab_badge,icons);
  mTabs.setViewPager(mViewPager);
  mTabs.setOnPageChangeListener(this);
  if (savedInstanceState == null) {
    if (showSignInIfRequired()) {
      int position=AppPrefs.getMainTabIndex();
      if (mTabAdapter.isValidPosition(position) && position != mViewPager.getCurrentItem()) {
        mViewPager.setCurrentItem(position);
      }
    }
  }
}",0.9266340595820364
14398,"private void initInfoButtons(View rootView){
  OnClickListener infoButtonListener=new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getActivity(),HelpActivity.class);
      intent.putExtra(ENTERED_URL_KEY,EditTextUtils.getText(mUrlEditText));
      intent.putExtra(ENTERED_USERNAME_KEY,EditTextUtils.getText(mUsernameEditText));
      intent.putExtra(HelpshiftHelper.ORIGIN_KEY,Tag.ORIGIN_SETTINGS_SCREEN_HELP);
      startActivity(intent);
    }
  }
;
  mInfoButton=(ImageView)rootView.findViewById(R.id.info_button);
  mInfoButtonSecondary=(ImageView)rootView.findViewById(R.id.info_button_secondary);
  mInfoButton.setOnClickListener(infoButtonListener);
  mInfoButtonSecondary.setOnClickListener(infoButtonListener);
}","private void initInfoButtons(View rootView){
  OnClickListener infoButtonListener=new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getActivity(),HelpActivity.class);
      intent.putExtra(ENTERED_URL_KEY,EditTextUtils.getText(mUrlEditText));
      intent.putExtra(ENTERED_USERNAME_KEY,EditTextUtils.getText(mUsernameEditText));
      intent.putExtra(HelpshiftHelper.ORIGIN_KEY,Tag.ORIGIN_LOGIN_SCREEN_HELP);
      startActivity(intent);
    }
  }
;
  mInfoButton=(ImageView)rootView.findViewById(R.id.info_button);
  mInfoButtonSecondary=(ImageView)rootView.findViewById(R.id.info_button_secondary);
  mInfoButton.setOnClickListener(infoButtonListener);
  mInfoButtonSecondary.setOnClickListener(infoButtonListener);
}",0.9941672067401166
14399,"private void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError || mVisitsData instanceof StatsError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  OverviewLabel selectedStatsType=overviewItems[mSelectedOverviewItemIndex];
  mLegendContainer.setVisibility(View.VISIBLE);
  mLegendLabel.setText(StringUtils.capitalize(selectedStatsType.getLabel().toLowerCase()));
switch (selectedStatsType) {
case VIEWS:
    mVisitorsCheckboxContainer.setVisibility(View.VISIBLE);
  mVisitorsCheckbox.setEnabled(true);
mVisitorsCheckbox.setChecked(mIsCheckboxChecked);
break;
default :
mVisitorsCheckboxContainer.setVisibility(View.GONE);
break;
}
final String[] horLabels=new String[dataToShowOnGraph.length];
mStatsDate=new String[dataToShowOnGraph.length];
GraphView.GraphViewData[] mainSeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
GraphView.GraphViewData[] secondarySeriesItems=null;
if (mIsCheckboxChecked && selectedStatsType == OverviewLabel.VIEWS) {
secondarySeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
}
for (int i=0; i < dataToShowOnGraph.length; i++) {
int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
currentItemValue=dataToShowOnGraph[i].getViews();
break;
case VISITORS:
currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
mainSeriesItems[i]=new GraphView.GraphViewData(i,currentItemValue);
if (mIsCheckboxChecked && secondarySeriesItems != null) {
secondarySeriesItems[i]=new GraphView.GraphViewData(i,dataToShowOnGraph[i].getVisitors());
}
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
}
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
GraphViewSeries mainSeriesOnScreen=new GraphViewSeries(mainSeriesItems);
mainSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
mainSeriesOnScreen.getStyle().highlightColor=getResources().getColor(R.color.calypso_orange_dark);
mainSeriesOnScreen.getStyle().outerhighlightColor=getResources().getColor(R.color.stats_bar_graph_outer_highlight);
mainSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),5);
mGraphView.addSeries(mainSeriesOnScreen);
if (mIsCheckboxChecked && secondarySeriesItems != null && selectedStatsType == OverviewLabel.VIEWS) {
GraphViewSeries secondarySeries=new GraphViewSeries(secondarySeriesItems);
secondarySeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),10);
secondarySeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views_inner);
secondarySeries.getStyle().highlightColor=getResources().getColor(R.color.orange_dark);
mGraphView.addSeries(secondarySeries);
}
switch (selectedStatsType) {
case VISITORS:
double maxYValue=getMaxYValueForVisitorsAndView(dataToShowOnGraph);
mGraphView.setManualYAxisBounds(maxYValue,0d);
break;
default :
mGraphView.setManualYAxis(false);
break;
}
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.getGraphViewStyle().setMaxColumnWidth(DisplayUtils.dpToPx(getActivity(),StatsConstants.STATS_GRAPH_BAR_MAX_COLUMN_WIDTH_DP));
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
int barSelectedOnGraph;
if (mSelectedBarGraphBarIndex == -1) {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
}
 else if (mSelectedBarGraphBarIndex < dataToShowOnGraph.length) {
barSelectedOnGraph=mSelectedBarGraphBarIndex;
}
 else {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
mSelectedBarGraphBarIndex=barSelectedOnGraph;
}
updateUIBelowTheGraph(barSelectedOnGraph);
mGraphView.highlightBar(barSelectedOnGraph);
}","private void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError || mVisitsData instanceof StatsError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  OverviewLabel selectedStatsType=overviewItems[mSelectedOverviewItemIndex];
  mLegendContainer.setVisibility(View.VISIBLE);
  mLegendLabel.setText(StringUtils.capitalize(selectedStatsType.getLabel().toLowerCase()));
switch (selectedStatsType) {
case VIEWS:
    mVisitorsCheckboxContainer.setVisibility(View.VISIBLE);
  mVisitorsCheckbox.setEnabled(true);
mVisitorsCheckbox.setChecked(mIsCheckboxChecked);
break;
default :
mVisitorsCheckboxContainer.setVisibility(View.GONE);
break;
}
final String[] horLabels=new String[dataToShowOnGraph.length];
mStatsDate=new String[dataToShowOnGraph.length];
GraphView.GraphViewData[] mainSeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
GraphView.GraphViewData[] secondarySeriesItems=null;
if (mIsCheckboxChecked && selectedStatsType == OverviewLabel.VIEWS) {
secondarySeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
}
for (int i=0; i < dataToShowOnGraph.length; i++) {
int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
currentItemValue=dataToShowOnGraph[i].getViews();
break;
case VISITORS:
currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
mainSeriesItems[i]=new GraphView.GraphViewData(i,currentItemValue);
if (mIsCheckboxChecked && secondarySeriesItems != null) {
secondarySeriesItems[i]=new GraphView.GraphViewData(i,dataToShowOnGraph[i].getVisitors());
}
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
}
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
GraphViewSeries mainSeriesOnScreen=new GraphViewSeries(mainSeriesItems);
mainSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
mainSeriesOnScreen.getStyle().highlightColor=getResources().getColor(R.color.orange_fire);
mainSeriesOnScreen.getStyle().outerhighlightColor=getResources().getColor(R.color.stats_bar_graph_outer_highlight);
mainSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),5);
mGraphView.addSeries(mainSeriesOnScreen);
if (mIsCheckboxChecked && secondarySeriesItems != null && selectedStatsType == OverviewLabel.VIEWS) {
GraphViewSeries secondarySeries=new GraphViewSeries(secondarySeriesItems);
secondarySeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),10);
secondarySeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views_inner);
secondarySeries.getStyle().highlightColor=getResources().getColor(R.color.orange_fire);
mGraphView.addSeries(secondarySeries);
}
switch (selectedStatsType) {
case VISITORS:
double maxYValue=getMaxYValueForVisitorsAndView(dataToShowOnGraph);
mGraphView.setManualYAxisBounds(maxYValue,0d);
break;
default :
mGraphView.setManualYAxis(false);
break;
}
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.getGraphViewStyle().setMaxColumnWidth(DisplayUtils.dpToPx(getActivity(),StatsConstants.STATS_GRAPH_BAR_MAX_COLUMN_WIDTH_DP));
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
int barSelectedOnGraph;
if (mSelectedBarGraphBarIndex == -1) {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
}
 else if (mSelectedBarGraphBarIndex < dataToShowOnGraph.length) {
barSelectedOnGraph=mSelectedBarGraphBarIndex;
}
 else {
barSelectedOnGraph=dataToShowOnGraph.length - 1;
mSelectedBarGraphBarIndex=barSelectedOnGraph;
}
updateUIBelowTheGraph(barSelectedOnGraph);
mGraphView.highlightBar(barSelectedOnGraph);
}",0.9958639705882352
14400,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || ((requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case MediaPickerActivity.ACTIVITY_REQUEST_CODE_MEDIA_SELECTION:
      if (resultCode == MediaPickerActivity.ACTIVITY_RESULT_CODE_MEDIA_SELECTED) {
        handleMediaSelectionResult(data);
      }
 else       if (resultCode == MediaPickerActivity.ACTIVITY_RESULT_CODE_GALLERY_CREATED) {
        mGalleryIds=new ArrayList<>();
        mUploadingMedia=new ArrayList<>();
        mMediaIdToPath=new HashMap<>();
        handleGalleryResult(data);
      }
    break;
case MediaGalleryActivity.REQUEST_CODE:
  if (resultCode == Activity.RESULT_OK) {
    handleMediaGalleryResult(data);
  }
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
Uri imageUri=data.getData();
fetchMedia(imageUri);
AnalyticsTracker.track(Stat.EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY);
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
fetchMedia(videoUri);
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
if (extras == null) return;
String linkURL=extras.getString(""String_Node_Str"");
if (linkURL != null && !linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (str == null) return;
if (mActivity.getPost().isLocalDraft()) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (linkText == null) return;
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (RuntimeException e) {
AppLog.e(T.POSTS,e);
}
break;
}
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || ((requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case MediaPickerActivity.ACTIVITY_REQUEST_CODE_MEDIA_SELECTION:
      if (resultCode == MediaPickerActivity.ACTIVITY_RESULT_CODE_MEDIA_SELECTED) {
        handleMediaSelectionResult(data);
      }
 else       if (resultCode == MediaPickerActivity.ACTIVITY_RESULT_CODE_GALLERY_CREATED) {
        mGalleryIds=new ArrayList<>();
        mUploadingMedia=new ArrayList<>();
        mMediaIdToPath=new HashMap<>();
        handleGalleryResult(data);
      }
    break;
case MediaGalleryActivity.REQUEST_CODE:
  if (resultCode == Activity.RESULT_OK) {
    handleMediaGalleryResult(data);
  }
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
Uri imageUri=data.getData();
fetchMedia(imageUri);
AnalyticsTracker.track(Stat.EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY);
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
fetchMedia(videoUri);
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
try {
File f=new File(mMediaCapturePath);
Uri capturedImageUri=Uri.fromFile(f);
if (!addMedia(capturedImageUri,null,getActivity())) Toast.makeText(getActivity(),getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
AnalyticsTracker.track(Stat.EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY);
}
 catch (RuntimeException e) {
AppLog.e(T.POSTS,e);
}
catch (OutOfMemoryError e) {
AppLog.e(T.POSTS,e);
}
}
 else if (mActivity != null && mQuickMediaType > -1 && TextUtils.isEmpty(mContentEditText.getText())) {
WordPress.wpDB.deletePost(mActivity.getPost());
mActivity.finish();
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
if (extras == null) return;
String linkURL=extras.getString(""String_Node_Str"");
if (linkURL != null && !linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (str == null) return;
if (mActivity.getPost().isLocalDraft()) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (linkText == null) return;
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (RuntimeException e) {
AppLog.e(T.POSTS,e);
}
break;
}
}
}",0.8857064920894708
14401,"/** 
 * Handles result from   {@link org.wordpress.android.ui.media.MediaPickerActivity}. Uploads local media to users blog then adds a gallery to the Post with all the selected media.
 * @param data
 */
private void handleGalleryResult(Intent data){
  if (data != null) {
    List<MediaItem> selectedContent=data.getParcelableArrayListExtra(MediaPickerActivity.SELECTED_CONTENT_RESULTS_KEY);
    if (selectedContent != null && selectedContent.size() > 0) {
      for (      MediaItem content : selectedContent) {
        Uri source=content.getSource();
        final String id=content.getTag();
        if (source != null && id != null) {
          final String sourceString=source.toString();
          if (sourceString.contains(""String_Node_Str"")) {
            mGalleryIds.add(id);
            AnalyticsTracker.track(Stat.EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY);
          }
 else           if (MediaUtils.isValidImage(sourceString)) {
            queueFileForUpload(sourceString);
            addMedia(source,null,getActivity());
            AnalyticsTracker.track(Stat.EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY);
          }
        }
      }
      if (mUploadingMedia.size() > 0) {
        String galleryToast=getString(R.string.editor_toast_gallery_pending_formatted,mUploadingMedia.size());
        ToastUtils.showToast(getActivity(),galleryToast,ToastUtils.Duration.SHORT);
      }
 else {
        createGallery();
      }
    }
  }
}","/** 
 * Handles result from   {@link org.wordpress.android.ui.media.MediaPickerActivity}. Uploads local media to users blog then adds a gallery to the Post with all the selected media.
 * @param data contains the selected media content with key {@link org.wordpress.android.ui.media.MediaPickerActivity#SELECTED_CONTENT_RESULTS_KEY}
 */
private void handleGalleryResult(Intent data){
  if (data != null) {
    List<MediaItem> selectedContent=data.getParcelableArrayListExtra(MediaPickerActivity.SELECTED_CONTENT_RESULTS_KEY);
    if (selectedContent != null && selectedContent.size() > 0) {
      mGalleryContentCount=selectedContent.size();
      for (      MediaItem content : selectedContent) {
        Uri source=content.getSource();
        final String id=content.getTag();
        if (source != null && id != null) {
          final String sourceString=source.toString();
          if (sourceString.contains(""String_Node_Str"")) {
            mGalleryIds.add(id);
            AnalyticsTracker.track(Stat.EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY);
          }
 else           if (MediaUtils.isValidImage(sourceString)) {
            queueFileForUpload(sourceString);
            addMedia(source,null,getActivity());
            AnalyticsTracker.track(Stat.EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY);
          }
        }
      }
      if (mUploadingMedia.size() > 0) {
        String galleryToast=getString(R.string.editor_toast_gallery_pending_formatted,mUploadingMedia.size());
        ToastUtils.showToast(getActivity(),galleryToast,ToastUtils.Duration.SHORT);
      }
 else {
        createGallery();
      }
    }
  }
}",0.8237597911227154
14402,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (MediaUploadService.MEDIA_UPLOAD_INTENT_NOTIFICATION.equals(action)) {
    String mediaId=intent.getStringExtra(MediaUploadService.MEDIA_UPLOAD_INTENT_NOTIFICATION_EXTRA);
    String newId=intent.getStringExtra(MediaUploadService.MEDIA_UPLOAD_INTENT_NOTIFICATION_ERROR);
    if (mediaId != null && newId != null && mUploadingMedia.contains(mediaId)) {
      mGalleryIds.add(newId);
      if (mGalleryIds.size() == mMediaIdToPath.size()) {
        for (        String id : mUploadingMedia) {
          String newText=mContentEditText.getText().toString().replace(""String_Node_Str"" + mMediaIdToPath.get(id) + ""String_Node_Str"",""String_Node_Str"");
          mContentEditText.setText(newText);
        }
        createGallery();
        stopMediaUploadService();
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (MediaUploadService.MEDIA_UPLOAD_INTENT_NOTIFICATION.equals(action)) {
    String mediaId=intent.getStringExtra(MediaUploadService.MEDIA_UPLOAD_INTENT_NOTIFICATION_EXTRA);
    String newId=intent.getStringExtra(MediaUploadService.MEDIA_UPLOAD_INTENT_NOTIFICATION_ERROR);
    if (mediaId != null && newId != null && mUploadingMedia.contains(mediaId)) {
      mGalleryIds.add(newId);
      if (mGalleryIds.size() == mGalleryContentCount) {
        for (        String id : mUploadingMedia) {
          String newText=mContentEditText.getText().toString().replace(""String_Node_Str"" + mMediaIdToPath.get(id) + ""String_Node_Str"",""String_Node_Str"");
          mContentEditText.setText(newText);
        }
        createGallery();
        stopMediaUploadService();
        mGalleryContentCount=0;
      }
    }
  }
}",0.9604897050639956
14403,"private String uploadImage(MediaFile mediaFile){
  AppLog.d(T.POSTS,""String_Node_Str"" + mediaFile);
  if (mediaFile.getFilePath() == null) {
    return null;
  }
  Uri imageUri=Uri.parse(mediaFile.getFilePath());
  File imageFile=null;
  String mimeType=""String_Node_Str"", path=""String_Node_Str"";
  if (imageUri.toString().contains(""String_Node_Str"")) {
    String[] projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE};
    Cursor cur=mContext.getContentResolver().query(imageUri,projection,null,null,null);
    if (cur != null && cur.moveToFirst()) {
      int dataColumn=cur.getColumnIndex(Images.Media.DATA);
      int mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
      String thumbData=cur.getString(dataColumn);
      mimeType=cur.getString(mimeTypeColumn);
      imageFile=new File(thumbData);
      path=thumbData;
      mediaFile.setFilePath(imageFile.getPath());
    }
  }
 else {
    path=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
    imageFile=new File(path);
    mediaFile.setFilePath(path);
  }
  if (imageFile == null) {
    mErrorMessage=mContext.getString(R.string.file_not_found);
    return null;
  }
  if (TextUtils.isEmpty(mimeType)) {
    mimeType=MediaUtils.getMediaFileMimeType(imageFile);
  }
  String fileName=MediaUtils.getMediaFileName(imageFile,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int orientation=ImageUtils.getImageOrientation(mContext,path);
  String resizedPictureURL=null;
  boolean shouldUploadResizedVersion=false;
  if (!mimeType.equals(""String_Node_Str"") && !mBlog.getMaxImageWidth().equals(""String_Node_Str"")) {
    int pictureSettingWidth=mediaFile.getWidth();
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inJustDecodeBounds=true;
    BitmapFactory.decodeFile(path,options);
    int imageHeight=options.outHeight;
    int imageWidth=options.outWidth;
    int[] dimensions={imageWidth,imageHeight};
    if (dimensions[0] != 0 && dimensions[0] != pictureSettingWidth) {
      shouldUploadResizedVersion=true;
    }
  }
  boolean shouldAddImageWidthCSS=false;
  if (shouldUploadResizedVersion) {
    MediaFile resizedMediaFile=new MediaFile(mediaFile);
    byte[] bytes=ImageUtils.createThumbnailFromUri(mContext,imageUri,resizedMediaFile.getWidth(),fileExtension,orientation);
    if (bytes == null) {
      shouldUploadResizedVersion=false;
      shouldAddImageWidthCSS=true;
    }
 else {
      String tempFilePath;
      File resizedImageFile;
      try {
        resizedImageFile=File.createTempFile(""String_Node_Str"",fileExtension);
        FileOutputStream out=new FileOutputStream(resizedImageFile);
        out.write(bytes);
        out.close();
        tempFilePath=resizedImageFile.getPath();
      }
 catch (      IOException e) {
        AppLog.w(T.POSTS,""String_Node_Str"");
        mErrorMessage=mContext.getString(R.string.error_media_upload);
        return null;
      }
      if (!TextUtils.isEmpty(tempFilePath)) {
        resizedMediaFile.setFilePath(tempFilePath);
        Map<String,Object> parameters=new HashMap<String,Object>();
        parameters.put(""String_Node_Str"",fileName);
        parameters.put(""String_Node_Str"",mimeType);
        parameters.put(""String_Node_Str"",resizedMediaFile);
        parameters.put(""String_Node_Str"",true);
        resizedPictureURL=uploadImageFile(parameters,resizedMediaFile,mBlog);
        if (resizedPictureURL == null) {
          AppLog.w(T.POSTS,""String_Node_Str"");
          return null;
        }
 else         if (resizedImageFile.exists()) {
          resizedImageFile.delete();
        }
      }
 else {
        AppLog.w(T.POSTS,""String_Node_Str"");
        mErrorMessage=mContext.getString(R.string.out_of_memory);
        return null;
      }
    }
  }
  String fullSizeUrl=null;
  if (!shouldUploadResizedVersion || mBlog.isFullSizeImage()) {
    Map<String,Object> parameters=new HashMap<String,Object>();
    parameters.put(""String_Node_Str"",fileName);
    parameters.put(""String_Node_Str"",mimeType);
    parameters.put(""String_Node_Str"",mediaFile);
    parameters.put(""String_Node_Str"",true);
    fullSizeUrl=uploadImageFile(parameters,mediaFile,mBlog);
    if (fullSizeUrl == null) {
      mErrorMessage=mContext.getString(R.string.error_media_upload);
      return null;
    }
  }
  return mediaFile.getImageHtmlForUrls(fullSizeUrl,resizedPictureURL,shouldAddImageWidthCSS);
}","private String uploadImage(MediaFile mediaFile){
  AppLog.d(T.POSTS,""String_Node_Str"" + mediaFile.getFilePath());
  if (mediaFile.getFilePath() == null) {
    return null;
  }
  Uri imageUri=Uri.parse(mediaFile.getFilePath());
  File imageFile=null;
  String mimeType=""String_Node_Str"", path=""String_Node_Str"";
  if (imageUri.toString().contains(""String_Node_Str"")) {
    String[] projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE};
    Cursor cur=mContext.getContentResolver().query(imageUri,projection,null,null,null);
    if (cur != null && cur.moveToFirst()) {
      int dataColumn=cur.getColumnIndex(Images.Media.DATA);
      int mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
      String thumbData=cur.getString(dataColumn);
      mimeType=cur.getString(mimeTypeColumn);
      imageFile=new File(thumbData);
      path=thumbData;
      mediaFile.setFilePath(imageFile.getPath());
    }
  }
 else {
    path=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
    imageFile=new File(path);
    mediaFile.setFilePath(path);
  }
  if (imageFile == null) {
    mErrorMessage=mContext.getString(R.string.file_not_found);
    return null;
  }
  if (TextUtils.isEmpty(mimeType)) {
    mimeType=MediaUtils.getMediaFileMimeType(imageFile);
  }
  String fileName=MediaUtils.getMediaFileName(imageFile,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int orientation=ImageUtils.getImageOrientation(mContext,path);
  String resizedPictureURL=null;
  boolean shouldUploadResizedVersion=false;
  if (!mimeType.equals(""String_Node_Str"") && !mBlog.getMaxImageWidth().equals(""String_Node_Str"")) {
    int pictureSettingWidth=mediaFile.getWidth();
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inJustDecodeBounds=true;
    BitmapFactory.decodeFile(path,options);
    int imageHeight=options.outHeight;
    int imageWidth=options.outWidth;
    int[] dimensions={imageWidth,imageHeight};
    if (dimensions[0] != 0 && dimensions[0] != pictureSettingWidth) {
      shouldUploadResizedVersion=true;
    }
  }
  boolean shouldAddImageWidthCSS=false;
  if (shouldUploadResizedVersion) {
    MediaFile resizedMediaFile=new MediaFile(mediaFile);
    byte[] bytes=ImageUtils.createThumbnailFromUri(mContext,imageUri,resizedMediaFile.getWidth(),fileExtension,orientation);
    if (bytes == null) {
      shouldUploadResizedVersion=false;
      shouldAddImageWidthCSS=true;
    }
 else {
      String tempFilePath;
      File resizedImageFile;
      try {
        resizedImageFile=File.createTempFile(""String_Node_Str"",fileExtension);
        FileOutputStream out=new FileOutputStream(resizedImageFile);
        out.write(bytes);
        out.close();
        tempFilePath=resizedImageFile.getPath();
      }
 catch (      IOException e) {
        AppLog.w(T.POSTS,""String_Node_Str"");
        mErrorMessage=mContext.getString(R.string.error_media_upload);
        return null;
      }
      if (!TextUtils.isEmpty(tempFilePath)) {
        resizedMediaFile.setFilePath(tempFilePath);
        Map<String,Object> parameters=new HashMap<String,Object>();
        parameters.put(""String_Node_Str"",fileName);
        parameters.put(""String_Node_Str"",mimeType);
        parameters.put(""String_Node_Str"",resizedMediaFile);
        parameters.put(""String_Node_Str"",true);
        resizedPictureURL=uploadImageFile(parameters,resizedMediaFile,mBlog);
        if (resizedPictureURL == null) {
          AppLog.w(T.POSTS,""String_Node_Str"");
          return null;
        }
 else         if (resizedImageFile.exists()) {
          resizedImageFile.delete();
        }
      }
 else {
        AppLog.w(T.POSTS,""String_Node_Str"");
        mErrorMessage=mContext.getString(R.string.out_of_memory);
        return null;
      }
    }
  }
  String fullSizeUrl=null;
  if (!shouldUploadResizedVersion || mBlog.isFullSizeImage()) {
    Map<String,Object> parameters=new HashMap<String,Object>();
    parameters.put(""String_Node_Str"",fileName);
    parameters.put(""String_Node_Str"",mimeType);
    parameters.put(""String_Node_Str"",mediaFile);
    parameters.put(""String_Node_Str"",true);
    fullSizeUrl=uploadImageFile(parameters,mediaFile,mBlog);
    if (fullSizeUrl == null) {
      mErrorMessage=mContext.getString(R.string.error_media_upload);
      return null;
    }
  }
  return mediaFile.getImageHtmlForUrls(fullSizeUrl,resizedPictureURL,shouldAddImageWidthCSS);
}",0.9984290843806104
14404,"private Object uploadFileHelper(Object[] params,final File tempFile){
  AppLog.w(T.POSTS,""String_Node_Str"" + params);
  if (mClient instanceof XMLRPCClient) {
    XMLRPCClient xmlrpcClient=(XMLRPCClient)mClient;
    xmlrpcClient.setOnBytesUploadedListener(new XMLRPCClient.OnBytesUploadedListener(){
      @Override public void onBytesUploaded(      long uploadedBytes){
        if (tempFile.length() == 0) {
          return;
        }
        float percentage=(uploadedBytes * 100) / tempFile.length();
        mPostUploadNotifier.updateNotificationProgress(percentage);
      }
    }
);
  }
  try {
    AppLog.i(T.API,""String_Node_Str"" + params);
    return mClient.call(""String_Node_Str"",params,tempFile);
  }
 catch (  XMLRPCException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
catch (  IOException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
catch (  XmlPullParserException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
 finally {
    if (tempFile != null && tempFile.exists()) {
      tempFile.delete();
    }
  }
}","private Object uploadFileHelper(Object[] params,final File tempFile){
  AppLog.d(T.POSTS,""String_Node_Str"" + Arrays.toString(params));
  if (mClient instanceof XMLRPCClient) {
    XMLRPCClient xmlrpcClient=(XMLRPCClient)mClient;
    xmlrpcClient.setOnBytesUploadedListener(new XMLRPCClient.OnBytesUploadedListener(){
      @Override public void onBytesUploaded(      long uploadedBytes){
        if (tempFile.length() == 0) {
          return;
        }
        float percentage=(uploadedBytes * 100) / tempFile.length();
        mPostUploadNotifier.updateNotificationProgress(percentage);
      }
    }
);
  }
  try {
    return mClient.call(""String_Node_Str"",params,tempFile);
  }
 catch (  XMLRPCException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
catch (  IOException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
catch (  XmlPullParserException e) {
    AppLog.e(T.API,e);
    mErrorMessage=mContext.getResources().getString(R.string.error_media_upload) + ""String_Node_Str"" + e.getMessage();
    return null;
  }
 finally {
    if (tempFile != null && tempFile.exists()) {
      tempFile.delete();
    }
  }
}",0.9713248638838476
14405,"private String uploadImageFile(Map<String,Object> pictureParams,MediaFile mf,Blog blog){
  AppLog.d(T.POSTS,""String_Node_Str"" + pictureParams);
  File tempFile;
  try {
    String fileExtension=MimeTypeMap.getFileExtensionFromUrl(mf.getFileName());
    tempFile=createTempUploadFile(fileExtension);
  }
 catch (  IOException e) {
    mIsMediaError=true;
    mErrorMessage=mContext.getString(R.string.file_not_found);
    return null;
  }
  Object[] params={1,blog.getUsername(),blog.getPassword(),pictureParams};
  Object result=uploadFileHelper(params,tempFile);
  if (result == null) {
    mIsMediaError=true;
    return null;
  }
  Map<?,?> contentHash=(HashMap<?,?>)result;
  String pictureURL=contentHash.get(""String_Node_Str"").toString();
  if (mf.isFeatured()) {
    try {
      if (contentHash.get(""String_Node_Str"") != null) {
        featuredImageID=Integer.parseInt(contentHash.get(""String_Node_Str"").toString());
        if (!mf.isFeaturedInPost())         return ""String_Node_Str"";
      }
    }
 catch (    NumberFormatException e) {
      AppLog.e(T.POSTS,e);
    }
  }
  return pictureURL;
}","private String uploadImageFile(Map<String,Object> pictureParams,MediaFile mf,Blog blog){
  File tempFile;
  try {
    String fileExtension=MimeTypeMap.getFileExtensionFromUrl(mf.getFileName());
    tempFile=createTempUploadFile(fileExtension);
  }
 catch (  IOException e) {
    mIsMediaError=true;
    mErrorMessage=mContext.getString(R.string.file_not_found);
    return null;
  }
  Object[] params={1,blog.getUsername(),blog.getPassword(),pictureParams};
  Object result=uploadFileHelper(params,tempFile);
  if (result == null) {
    mIsMediaError=true;
    return null;
  }
  Map<?,?> contentHash=(HashMap<?,?>)result;
  String pictureURL=contentHash.get(""String_Node_Str"").toString();
  if (mf.isFeatured()) {
    try {
      if (contentHash.get(""String_Node_Str"") != null) {
        featuredImageID=Integer.parseInt(contentHash.get(""String_Node_Str"").toString());
        if (!mf.isFeaturedInPost())         return ""String_Node_Str"";
      }
    }
 catch (    NumberFormatException e) {
      AppLog.e(T.POSTS,e);
    }
  }
  return pictureURL;
}",0.9745252431681334
14406,"private void toggleBlogFollowStatus(){
  if (!isAdded() || mFollowButton == null) {
    return;
  }
  final boolean isAskingToFollow=!ReaderBlogTable.isFollowedBlog(mCurrentBlogId);
  ReaderActions.ActionListener followListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && isAdded()) {
        mFollowButton.setIsFollowed(!isAskingToFollow);
      }
    }
  }
;
  mFollowButton.setIsFollowedAnimated(isAskingToFollow);
  if (mCurrentFeedId != 0) {
    ReaderBlogActions.followFeedById(mCurrentFeedId,isAskingToFollow,followListener);
  }
 else {
    ReaderBlogActions.followBlogById(mCurrentBlogId,isAskingToFollow,followListener);
  }
}","private void toggleBlogFollowStatus(){
  if (!isAdded() || mFollowButton == null) {
    return;
  }
  final boolean isAskingToFollow;
  if (mCurrentFeedId != 0) {
    isAskingToFollow=!ReaderBlogTable.isFollowedFeed(mCurrentFeedId);
  }
 else {
    isAskingToFollow=!ReaderBlogTable.isFollowedBlog(mCurrentBlogId);
  }
  ReaderActions.ActionListener followListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && isAdded()) {
        mFollowButton.setIsFollowed(!isAskingToFollow);
      }
    }
  }
;
  mFollowButton.setIsFollowedAnimated(isAskingToFollow);
  if (mCurrentFeedId != 0) {
    ReaderBlogActions.followFeedById(mCurrentFeedId,isAskingToFollow,followListener);
  }
 else {
    ReaderBlogActions.followBlogById(mCurrentBlogId,isAskingToFollow,followListener);
  }
}",0.9026098026734564
14407,"public void loadFeedInfo(long feedId,BlogInfoListener blogInfoListener){
  mBlogInfoListener=blogInfoListener;
  showBlogInfo(ReaderBlogTable.getBlogInfo(feedId),false);
  requestFeedInfo(feedId);
}","public void loadFeedInfo(long feedId,BlogInfoListener blogInfoListener){
  mBlogInfoListener=blogInfoListener;
  showBlogInfo(ReaderBlogTable.getFeedInfo(feedId),false);
  requestFeedInfo(feedId);
}",0.9797979797979798
14408,"public void setFeedUrl(String url){
  this.feedUrl=StringUtils.notNullStr(feedUrl);
}","public void setFeedUrl(String feedUrl){
  this.feedUrl=StringUtils.notNullStr(feedUrl);
}",0.9655172413793104
14409,"protected void signInError(int messageId,String clientResponse){
  AnalyticsTracker.track(Stat.LOGIN_FAILED);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  SignInDialogFragment nuxAlert;
  if (messageId == org.wordpress.android.R.string.account_two_step_auth_enabled) {
    nuxAlert=SignInDialogFragment.newInstance(getString(org.wordpress.android.R.string.nux_cannot_log_in),getString(messageId),org.wordpress.android.R.drawable.noticon_alert_big,2,getString(org.wordpress.android.R.string.cancel),getString(org.wordpress.android.R.string.visit_security_settings),""String_Node_Str"",SignInDialogFragment.ACTION_OPEN_URL,0);
    Bundle bundle=nuxAlert.getArguments();
    bundle.putString(SignInDialogFragment.ARG_OPEN_URL_PARAM,""String_Node_Str"");
    nuxAlert.setArguments(bundle);
  }
 else {
    if (messageId == org.wordpress.android.R.string.username_or_password_incorrect) {
      handleInvalidUsernameOrPassword(messageId);
      return;
    }
 else     if (messageId == org.wordpress.android.R.string.invalid_url_message) {
      showUrlError(messageId);
      endProgress();
      return;
    }
 else {
      AppLog.e(T.NUX,clientResponse);
      nuxAlert=SignInDialogFragment.newInstance(getString(org.wordpress.android.R.string.nux_cannot_log_in),getString(messageId),R.drawable.noticon_alert_big,3,getString(R.string.cancel),getString(R.string.contact_us),getString(R.string.reader_title_applog),SignInDialogFragment.ACTION_OPEN_SUPPORT_CHAT,SignInDialogFragment.ACTION_OPEN_APPLICATION_LOG);
    }
  }
  ft.add(nuxAlert,""String_Node_Str"");
  ft.commitAllowingStateLoss();
  endProgress();
}","protected void signInError(int messageId,String clientResponse){
  AnalyticsTracker.track(Stat.LOGIN_FAILED);
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  SignInDialogFragment nuxAlert;
  if (messageId == org.wordpress.android.R.string.account_two_step_auth_enabled) {
    nuxAlert=SignInDialogFragment.newInstance(getString(org.wordpress.android.R.string.nux_cannot_log_in),getString(messageId),org.wordpress.android.R.drawable.noticon_alert_big,2,getString(org.wordpress.android.R.string.cancel),getString(org.wordpress.android.R.string.visit_security_settings),""String_Node_Str"",SignInDialogFragment.ACTION_OPEN_URL,0);
    Bundle bundle=nuxAlert.getArguments();
    bundle.putString(SignInDialogFragment.ARG_OPEN_URL_PARAM,""String_Node_Str"");
    nuxAlert.setArguments(bundle);
  }
 else {
    if (messageId == org.wordpress.android.R.string.username_or_password_incorrect) {
      handleInvalidUsernameOrPassword(messageId);
      return;
    }
 else     if (messageId == org.wordpress.android.R.string.invalid_url_message) {
      showUrlError(messageId);
      endProgress();
      return;
    }
 else {
      AppLog.e(T.NUX,""String_Node_Str"" + clientResponse);
      nuxAlert=SignInDialogFragment.newInstance(getString(org.wordpress.android.R.string.nux_cannot_log_in),getString(messageId),R.drawable.noticon_alert_big,3,getString(R.string.cancel),getString(R.string.contact_us),getString(R.string.reader_title_applog),SignInDialogFragment.ACTION_OPEN_SUPPORT_CHAT,SignInDialogFragment.ACTION_OPEN_APPLICATION_LOG);
    }
  }
  ft.add(nuxAlert,""String_Node_Str"");
  ft.commitAllowingStateLoss();
  endProgress();
}",0.9938837920489296
14410,"public static void d(T tag,String message){
  Log.d(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.d,message);
}","public static void d(T tag,String message){
  message=StringUtils.notNullStr(message);
  Log.d(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.d,message);
}",0.8668730650154799
14411,"public static void i(T tag,String message){
  Log.i(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.i,message);
}","public static void i(T tag,String message){
  message=StringUtils.notNullStr(message);
  Log.i(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.i,message);
}",0.8668730650154799
14412,"public static void v(T tag,String message){
  Log.v(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.v,message);
}","public static void v(T tag,String message){
  message=StringUtils.notNullStr(message);
  Log.v(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.v,message);
}",0.8668730650154799
14413,"public static void w(T tag,String message){
  Log.w(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.w,message);
}","public static void w(T tag,String message){
  message=StringUtils.notNullStr(message);
  Log.w(TAG + ""String_Node_Str"" + tag.toString(),message);
  addEntry(tag,LogLevel.w,message);
}",0.8668730650154799
14414,"private boolean isValidPosition(int position){
  return (position > 0 && position < mComments.size());
}","private boolean isValidPosition(int position){
  return (position >= 0 && position < mComments.size());
}",0.9952153110047848
14415,"private void toggleLike(Context context,CommentHolder holder,ReaderComment comment,int position){
  if (!NetworkUtils.checkConnection(context)) {
    return;
  }
  boolean isAskingToLike=!comment.isLikedByCurrentUser;
  ReaderAnim.animateLikeButton(holder.imgLike,isAskingToLike);
  if (!ReaderCommentActions.performLikeAction(comment,isAskingToLike)) {
    ToastUtils.showToast(context,R.string.reader_toast_err_generic);
    return;
  }
  ReaderComment updatedComment=ReaderCommentTable.getComment(comment.blogId,comment.postId,comment.commentId);
  mComments.set(position,updatedComment);
  showLikeStatus(holder,updatedComment,position);
}","private void toggleLike(Context context,CommentHolder holder,int position){
  if (!NetworkUtils.checkConnection(context)) {
    return;
  }
  if (!isValidPosition(position)) {
    ToastUtils.showToast(context,R.string.reader_toast_err_generic);
    return;
  }
  ReaderComment comment=mComments.get(position);
  boolean isAskingToLike=!comment.isLikedByCurrentUser;
  ReaderAnim.animateLikeButton(holder.imgLike,isAskingToLike);
  if (!ReaderCommentActions.performLikeAction(comment,isAskingToLike)) {
    ToastUtils.showToast(context,R.string.reader_toast_err_generic);
    return;
  }
  ReaderComment updatedComment=ReaderCommentTable.getComment(comment.blogId,comment.postId,comment.commentId);
  mComments.set(position,updatedComment);
  showLikeStatus(holder,updatedComment,position);
}",0.8661087866108786
14416,"private void showLikeStatus(final CommentHolder holder,final ReaderComment comment,final int position){
  if (mPost.isLikesEnabled) {
    holder.layoutLikes.setVisibility(View.VISIBLE);
    holder.imgLike.setSelected(comment.isLikedByCurrentUser);
    if (comment.numLikes == 0) {
      holder.txtLike.setText(mLike);
      holder.txtLike.setTextColor(mLinkColor);
      holder.txtLikeCount.setVisibility(View.GONE);
    }
 else     if (comment.numLikes == 1 && comment.isLikedByCurrentUser) {
      holder.txtLike.setText(mLikedByYou);
      holder.txtLike.setTextColor(mLinkColor);
      holder.txtLikeCount.setVisibility(View.GONE);
    }
 else {
      holder.txtLike.setText(mLikedBy);
      holder.txtLike.setTextColor(mNoLinkColor);
      holder.txtLikeCount.setText(comment.numLikes == 1 ? mLikesSingle : String.format(mLikesMulti,comment.numLikes));
      holder.txtLikeCount.setSelected(comment.isLikedByCurrentUser);
      holder.txtLikeCount.setVisibility(View.VISIBLE);
    }
    holder.layoutLikes.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleLike(v.getContext(),holder,comment,position);
      }
    }
);
    holder.txtLikeCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderLikingUsers(v.getContext(),comment);
      }
    }
);
  }
 else {
    holder.layoutLikes.setVisibility(View.GONE);
    holder.layoutLikes.setOnClickListener(null);
  }
}","private void showLikeStatus(final CommentHolder holder,final ReaderComment comment,final int position){
  if (mPost.isLikesEnabled) {
    holder.layoutLikes.setVisibility(View.VISIBLE);
    holder.imgLike.setSelected(comment.isLikedByCurrentUser);
    if (comment.numLikes == 0) {
      holder.txtLike.setText(mLike);
      holder.txtLike.setTextColor(mLinkColor);
      holder.txtLikeCount.setVisibility(View.GONE);
    }
 else     if (comment.numLikes == 1 && comment.isLikedByCurrentUser) {
      holder.txtLike.setText(mLikedByYou);
      holder.txtLike.setTextColor(mLinkColor);
      holder.txtLikeCount.setVisibility(View.GONE);
    }
 else {
      holder.txtLike.setText(mLikedBy);
      holder.txtLike.setTextColor(mNoLinkColor);
      holder.txtLikeCount.setText(comment.numLikes == 1 ? mLikesSingle : String.format(mLikesMulti,comment.numLikes));
      holder.txtLikeCount.setSelected(comment.isLikedByCurrentUser);
      holder.txtLikeCount.setVisibility(View.VISIBLE);
    }
    holder.layoutLikes.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleLike(v.getContext(),holder,position);
      }
    }
);
    holder.txtLikeCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderLikingUsers(v.getContext(),comment);
      }
    }
);
  }
 else {
    holder.layoutLikes.setVisibility(View.GONE);
    holder.layoutLikes.setOnClickListener(null);
  }
}",0.9973579920739762
14417,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.stats_visitors_and_views_fragment,container,false);
  mDateTextView=(TextView)view.findViewById(R.id.stats_summary_date);
  mGraphContainer=(LinearLayout)view.findViewById(R.id.stats_bar_chart_fragment_container);
  mModuleButtonsContainer=(LinearLayout)view.findViewById(R.id.stats_pager_tabs);
  for (int i=0; i < overviewItems.length; i++) {
    LinearLayout currentTab=(LinearLayout)inflater.inflate(R.layout.stats_visitors_and_views_tab,container,false);
    boolean isLastItem=i == (overviewItems.length - 1);
    boolean isChecked=i == mSelectedOverviewItemIndex;
    TabViewHolder currentTabViewHolder=new TabViewHolder(currentTab,overviewItems[i],isChecked,isLastItem);
    currentTab.setOnClickListener(TopButtonsOnClickListener);
    currentTab.setTag(currentTabViewHolder);
    mModuleButtonsContainer.addView(currentTab);
  }
  mModuleButtonsContainer.setVisibility(View.VISIBLE);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.stats_visitors_and_views_fragment,container,false);
  mDateTextView=(TextView)view.findViewById(R.id.stats_summary_date);
  mGraphContainer=(LinearLayout)view.findViewById(R.id.stats_bar_chart_fragment_container);
  mModuleButtonsContainer=(LinearLayout)view.findViewById(R.id.stats_pager_tabs);
  if (mModuleButtonsContainer.getChildCount() == overviewItems.length) {
    for (int i=0; i < mModuleButtonsContainer.getChildCount(); i++) {
      LinearLayout currentTab=(LinearLayout)mModuleButtonsContainer.getChildAt(i);
      boolean isLastItem=i == (overviewItems.length - 1);
      boolean isChecked=i == mSelectedOverviewItemIndex;
      TabViewHolder currentTabViewHolder=new TabViewHolder(currentTab,overviewItems[i],isChecked,isLastItem);
      currentTab.setOnClickListener(TopButtonsOnClickListener);
      currentTab.setTag(currentTabViewHolder);
    }
    mModuleButtonsContainer.setVisibility(View.VISIBLE);
  }
  return view;
}",0.7884166277440449
14418,"private void updateUIBelowTheGraph(int itemPosition){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph.length <= itemPosition) {
    itemPosition=dataToShowOnGraph.length - 1;
  }
  String date=mStatsDate[itemPosition];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  mDateTextView.setText(getDateForDisplayInLabels(date,getTimeframe()));
  VisitModel modelTapped=dataToShowOnGraph[itemPosition];
  for (int i=0; i < mModuleButtonsContainer.getChildCount(); i++) {
    View o=mModuleButtonsContainer.getChildAt(i);
    if (o instanceof LinearLayout && o.getTag() instanceof TabViewHolder) {
      TabViewHolder tabViewHolder=(TabViewHolder)o.getTag();
      tabViewHolder.updateBackGroundAndIcon();
switch (tabViewHolder.labelItem) {
case VIEWS:
        tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getViews()));
      break;
case VISITORS:
    tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getVisitors()));
  break;
case LIKES:
tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getLikes()));
break;
case COMMENTS:
tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getComments()));
break;
}
}
}
}","private void updateUIBelowTheGraph(int itemPosition){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph.length == 0) {
    return;
  }
  if (dataToShowOnGraph.length <= itemPosition || itemPosition == -1) {
    itemPosition=dataToShowOnGraph.length - 1;
  }
  String date=mStatsDate[itemPosition];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  mDateTextView.setText(getDateForDisplayInLabels(date,getTimeframe()));
  VisitModel modelTapped=dataToShowOnGraph[itemPosition];
  for (int i=0; i < mModuleButtonsContainer.getChildCount(); i++) {
    View o=mModuleButtonsContainer.getChildAt(i);
    if (o instanceof LinearLayout && o.getTag() instanceof TabViewHolder) {
      TabViewHolder tabViewHolder=(TabViewHolder)o.getTag();
      tabViewHolder.updateBackGroundAndIcon();
switch (tabViewHolder.labelItem) {
case VIEWS:
        tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getViews()));
      break;
case VISITORS:
    tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getVisitors()));
  break;
case LIKES:
tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getLikes()));
break;
case COMMENTS:
tabViewHolder.value.setText(FormatUtils.formatDecimal(modelTapped.getComments()));
break;
}
}
}
}",0.974477958236659
14419,"public String getLabel(){
  return WordPress.getContext().getString(mLabelResId);
}","public String getLabel(){
  return WordPress.getContext().getString(mLabelResId).toUpperCase();
}",0.9222222222222224
14420,"void updateCommentList(){
  CommentsListFragment listFragment=getListFragment();
  if (listFragment != null) {
    listFragment.updateComments(false);
    listFragment.setRefreshing(true);
  }
}","void updateCommentList(){
  CommentsListFragment listFragment=getListFragment();
  if (listFragment != null) {
    listFragment.setRefreshing(true);
    listFragment.updateComments(false);
  }
}",0.8041237113402062
14421,"void updateComments(boolean loadMore){
  if (mIsUpdatingComments) {
    AppLog.w(AppLog.T.COMMENTS,""String_Node_Str"");
    return;
  }
  updateEmptyView(MessageType.LOADING);
  mUpdateCommentsTask=new UpdateCommentsTask(loadMore);
  mUpdateCommentsTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","void updateComments(boolean loadMore){
  if (mIsUpdatingComments) {
    AppLog.w(AppLog.T.COMMENTS,""String_Node_Str"");
    return;
  }
 else   if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    updateEmptyView(MessageType.NETWORK_ERROR);
    setRefreshing(false);
    return;
  }
  updateEmptyView(MessageType.LOADING);
  mUpdateCommentsTask=new UpdateCommentsTask(loadMore);
  mUpdateCommentsTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.799475753604194
14422,"public void refreshMediaFromServer(int offset,final boolean auto){
  if (WordPress.getCurrentBlog() == null || mFilter == Filter.CUSTOM_DATE) {
    setRefreshing(false);
    return;
  }
  if (mSearchTerm != null && mSearchTerm.length() > 0) {
    setRefreshing(false);
    return;
  }
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    updateEmptyView(MessageType.LOADING);
    mListener.onMediaItemListDownloadStart();
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    Callback callback=new Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrievedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              refreshSpinnerAdapter();
              updateEmptyView(MessageType.NO_CONTENT);
              if (!auto) {
                mGridView.setSelection(0);
              }
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
              mSwipeToRefreshHelper.setRefreshing(false);
            }
          }
);
        }
      }
      @Override public void onFailure(      final ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (errorType != ApiHelper.ErrorType.NO_ERROR) {
          if (getActivity() != null) {
            if (errorType != ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP) {
              ToastUtils.showToast(getActivity(),getString(R.string.error_refresh_media),Duration.LONG);
            }
 else {
              if (mEmptyView == null || mEmptyView.getVisibility() != View.VISIBLE) {
                ToastUtils.showToast(getActivity(),getString(R.string.media_error_no_permission));
              }
            }
          }
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrievedAll(mHasRetrievedAllMedia);
        }
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
              mSwipeToRefreshHelper.setRefreshing(false);
              if (errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP) {
                updateEmptyView(MessageType.PERMISSION_ERROR);
              }
 else {
                updateEmptyView(MessageType.GENERIC_ERROR);
              }
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,mFilter,callback);
    getMediaTask.execute(apiArgs);
  }
}","public void refreshMediaFromServer(int offset,final boolean auto){
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    updateEmptyView(MessageType.NETWORK_ERROR);
    setRefreshing(false);
    return;
  }
  if (WordPress.getCurrentBlog() == null || mFilter == Filter.CUSTOM_DATE) {
    setRefreshing(false);
    return;
  }
  if (mSearchTerm != null && mSearchTerm.length() > 0) {
    setRefreshing(false);
    return;
  }
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    updateEmptyView(MessageType.LOADING);
    mListener.onMediaItemListDownloadStart();
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    Callback callback=new Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrievedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              refreshSpinnerAdapter();
              updateEmptyView(MessageType.NO_CONTENT);
              if (!auto) {
                mGridView.setSelection(0);
              }
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
              mSwipeToRefreshHelper.setRefreshing(false);
            }
          }
);
        }
      }
      @Override public void onFailure(      final ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (errorType != ApiHelper.ErrorType.NO_ERROR) {
          if (getActivity() != null) {
            if (errorType != ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP) {
              ToastUtils.showToast(getActivity(),getString(R.string.error_refresh_media),Duration.LONG);
            }
 else {
              if (mEmptyView == null || mEmptyView.getVisibility() != View.VISIBLE) {
                ToastUtils.showToast(getActivity(),getString(R.string.media_error_no_permission));
              }
            }
          }
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrievedAll(mHasRetrievedAllMedia);
        }
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
              mSwipeToRefreshHelper.setRefreshing(false);
              if (errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP) {
                updateEmptyView(MessageType.PERMISSION_ERROR);
              }
 else {
                updateEmptyView(MessageType.GENERIC_ERROR);
              }
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,mFilter,callback);
    getMediaTask.execute(apiArgs);
  }
}",0.9773392939725604
14423,"public void setFilter(Filter filter,MessageId messageId){
  mFilter=filter;
  Cursor cursor=filterItems(mFilter);
  if (filter != Filter.CUSTOM_DATE || cursor == null || cursor.getCount() == 0) {
    mResultView.setVisibility(View.GONE);
  }
  if (cursor != null && cursor.getCount() != 0) {
    mGridAdapter.swapCursor(cursor);
    hideEmptyView();
  }
 else {
    if (filter != Filter.CUSTOM_DATE) {
      showEmptyViewWithMessage(messageId);
    }
  }
}","public void setFilter(Filter filter,MessageId messageId){
  mFilter=filter;
  Cursor cursor=filterItems(mFilter);
  if (filter != Filter.CUSTOM_DATE || cursor == null || cursor.getCount() == 0) {
    mResultView.setVisibility(View.GONE);
  }
  if (cursor != null && cursor.getCount() != 0) {
    mGridAdapter.swapCursor(cursor);
    hideEmptyView();
  }
 else {
    mGridAdapter.changeCursor(null);
    if (filter != Filter.CUSTOM_DATE) {
      showEmptyViewWithMessage(messageId);
    }
  }
}",0.9610115911485776
14424,"private void hideEmptyView(){
  mEmptyView.setVisibility(View.GONE);
  mGridView.setVisibility(View.VISIBLE);
}","private void hideEmptyView(){
  mEmptyView.setVisibility(View.GONE);
}",0.7734806629834254
14425,"private void showEmptyViewWithMessage(MessageId messageId){
  int stringId=0;
switch (messageId) {
case LOADING:
    stringId=R.string.loading_media;
  break;
case NO_CONTENT:
stringId=R.string.media_empty_list;
break;
case NETWORK_ERROR:
stringId=R.string.network_error;
break;
case PERMISSION_ERROR:
stringId=R.string.media_error_no_permission;
break;
case NO_CONTENT_CUSTOM_DATE:
stringId=R.string.media_empty_list_custom_date;
break;
}
mGridView.setVisibility(View.GONE);
mEmptyView.setVisibility(View.VISIBLE);
mEmptyViewTitle.setText(getResources().getString(stringId));
}","private void showEmptyViewWithMessage(MessageId messageId){
  int stringId=0;
switch (messageId) {
case LOADING:
    stringId=R.string.loading_media;
  break;
case NO_CONTENT:
stringId=R.string.media_empty_list;
break;
case NETWORK_ERROR:
stringId=R.string.network_error;
break;
case PERMISSION_ERROR:
stringId=R.string.media_error_no_permission;
break;
case NO_CONTENT_CUSTOM_DATE:
stringId=R.string.media_empty_list_custom_date;
break;
}
mEmptyView.setVisibility(View.VISIBLE);
mEmptyViewTitle.setText(getResources().getString(stringId));
}",0.9482142857142856
14426,"public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(){
        if (mCanLoadMorePosts && !mIsFetchingPosts)         requestPosts(true);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(      int postCount){
        if (!isAdded()) {
          return;
        }
        if (getListView().getEmptyView() == null) {
          getListView().setEmptyView(getView().findViewById(R.id.empty_view));
        }
        if (postCount == 0 && !isRefreshing()) {
          updateEmptyView(MessageType.NO_CONTENT);
        }
        if (postCount == 0 && mCanLoadMorePosts) {
          if (isAdded() && NetworkUtils.isNetworkAvailable(getActivity())) {
            setRefreshing(true);
            requestPosts(false);
          }
 else {
            updateEmptyView(MessageType.NETWORK_ERROR);
          }
        }
 else         if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
 else         if (isAdded() && ((PostsActivity)getActivity()).isDualPane()) {
          int selectedPosition=getListView().getCheckedItemPosition();
          if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}","public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(){
        if (mCanLoadMorePosts && !mIsFetchingPosts)         requestPosts(true);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(      int postCount){
        if (!isAdded()) {
          return;
        }
        if (postCount == 0) {
          mEmptyView.setVisibility(View.VISIBLE);
        }
 else {
          mEmptyView.setVisibility(View.GONE);
        }
        if (!isRefreshing()) {
          updateEmptyView(MessageType.NO_CONTENT);
        }
        if (postCount == 0 && mCanLoadMorePosts) {
          if (isAdded() && NetworkUtils.isNetworkAvailable(getActivity())) {
            setRefreshing(true);
            requestPosts(false);
          }
 else {
            updateEmptyView(MessageType.NETWORK_ERROR);
          }
        }
 else         if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
 else         if (isAdded() && ((PostsActivity)getActivity()).isDualPane()) {
          int selectedPosition=getListView().getCheckedItemPosition();
          if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}",0.9446009389671362
14427,"private void updateEmptyView(MessageType messageType){
  if (mEmptyViewTitle != null) {
    int stringId=0;
    View noContentImage=getView().findViewById(R.id.empty_tags_box_top);
    if (messageType == MessageType.NO_CONTENT) {
      noContentImage.setVisibility(View.VISIBLE);
    }
 else {
      noContentImage.setVisibility(View.GONE);
    }
switch (messageType) {
case LOADING:
      stringId=mIsPage ? R.string.loading_pages : R.string.loading_posts;
    break;
case NO_CONTENT:
  stringId=mIsPage ? R.string.pages_empty_list : R.string.posts_empty_list;
break;
case NETWORK_ERROR:
stringId=R.string.network_error;
break;
case PERMISSION_ERROR:
stringId=mIsPage ? R.string.error_refresh_unauthorized_pages : R.string.error_refresh_unauthorized_posts;
break;
case GENERIC_ERROR:
stringId=mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts;
break;
}
mEmptyViewTitle.setText(getText(stringId));
}
}","private void updateEmptyView(MessageType messageType){
  if (mEmptyView != null) {
    int stringId=0;
    if (messageType == MessageType.NO_CONTENT) {
      mEmptyViewImage.setVisibility(View.VISIBLE);
    }
 else {
      mEmptyViewImage.setVisibility(View.GONE);
    }
switch (messageType) {
case LOADING:
      stringId=mIsPage ? R.string.loading_pages : R.string.loading_posts;
    break;
case NO_CONTENT:
  stringId=mIsPage ? R.string.pages_empty_list : R.string.posts_empty_list;
break;
case NETWORK_ERROR:
stringId=R.string.network_error;
break;
case PERMISSION_ERROR:
stringId=mIsPage ? R.string.error_refresh_unauthorized_pages : R.string.error_refresh_unauthorized_posts;
break;
case GENERIC_ERROR:
stringId=mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts;
break;
}
mEmptyViewTitle.setText(getText(stringId));
}
}",0.9343148357870896
14428,"@Override public void onPostsLoaded(int postCount){
  if (!isAdded()) {
    return;
  }
  if (getListView().getEmptyView() == null) {
    getListView().setEmptyView(getView().findViewById(R.id.empty_view));
  }
  if (postCount == 0 && !isRefreshing()) {
    updateEmptyView(MessageType.NO_CONTENT);
  }
  if (postCount == 0 && mCanLoadMorePosts) {
    if (isAdded() && NetworkUtils.isNetworkAvailable(getActivity())) {
      setRefreshing(true);
      requestPosts(false);
    }
 else {
      updateEmptyView(MessageType.NETWORK_ERROR);
    }
  }
 else   if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
 else   if (isAdded() && ((PostsActivity)getActivity()).isDualPane()) {
    int selectedPosition=getListView().getCheckedItemPosition();
    if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
      }
    }
  }
}","@Override public void onPostsLoaded(int postCount){
  if (!isAdded()) {
    return;
  }
  if (postCount == 0) {
    mEmptyView.setVisibility(View.VISIBLE);
  }
 else {
    mEmptyView.setVisibility(View.GONE);
  }
  if (!isRefreshing()) {
    updateEmptyView(MessageType.NO_CONTENT);
  }
  if (postCount == 0 && mCanLoadMorePosts) {
    if (isAdded() && NetworkUtils.isNetworkAvailable(getActivity())) {
      setRefreshing(true);
      requestPosts(false);
    }
 else {
      updateEmptyView(MessageType.NETWORK_ERROR);
    }
  }
 else   if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
 else   if (isAdded() && ((PostsActivity)getActivity()).isDualPane()) {
    int selectedPosition=getListView().getCheckedItemPosition();
    if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
      }
    }
  }
}",0.932370820668693
14429,"@Override public View onCreateView(@NonNull LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.post_listview,container,false);
  mEmptyViewTitle=(TextView)view.findViewById(R.id.title_empty);
  return view;
}","@Override public View onCreateView(@NonNull LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.post_listview,container,false);
  mEmptyView=view.findViewById(R.id.empty_view);
  mEmptyViewImage=view.findViewById(R.id.empty_tags_box_top);
  mEmptyViewTitle=(TextView)view.findViewById(R.id.title_empty);
  return view;
}",0.827906976744186
14430,"@Override public void onClick(View v){
  showSettings();
}","@Override public void onClick(View v){
  if (isFinishing())   return;
  FragmentManager fm=getFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    fm.popBackStack();
  }
 else {
    toggleDrawer();
  }
}",0.3308823529411764
14431,"/** 
 * Create menu drawer ListView and listeners
 */
private void initMenuDrawer(){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  if (mDrawerLayout != null) {
    int drawerWidth=isStaticMenuDrawer() ? getResources().getDimensionPixelSize(R.dimen.drawer_width_static) : WPActivityUtils.getOptimalDrawerWidth(this);
    ViewGroup leftDrawer=(ViewGroup)mDrawerLayout.findViewById(R.id.capture_insets_frame_layout);
    leftDrawer.getLayoutParams().width=drawerWidth;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      mDrawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.color_primary_dark));
    }
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.open_drawer,R.string.close_drawer){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_arrow_back_white_24dp);
    mDrawerLayout.setDrawerListener(mDrawerToggle);
  }
  mDrawerListView=(ListView)findViewById(R.id.drawer_list);
  if (mDrawerListView.getHeaderViewsCount() == 0) {
    View view=getLayoutInflater().inflate(R.layout.drawer_header,mDrawerListView,false);
    mDrawerListView.addHeaderView(view,null,false);
  }
  mScrollPositionManager=new ListScrollPositionManager(mDrawerListView,false);
  View settingsRow=findViewById(R.id.settings_row);
  settingsRow.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSettings();
    }
  }
);
  mDrawerAdapter=new DrawerAdapter(this);
  mDrawerListView.setAdapter(mDrawerAdapter);
  mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      int menuPosition=position - mDrawerListView.getHeaderViewsCount();
      DrawerItem item=(DrawerItem)mDrawerAdapter.getItem(menuPosition);
      drawerItemSelected(item);
    }
  }
);
  initBlogSpinner();
  updateMenuDrawer();
}","/** 
 * Create menu drawer ListView and listeners
 */
private void initMenuDrawer(){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  if (mDrawerLayout != null) {
    int drawerWidth=isStaticMenuDrawer() ? getResources().getDimensionPixelSize(R.dimen.drawer_width_static) : WPActivityUtils.getOptimalDrawerWidth(this);
    ViewGroup leftDrawer=(ViewGroup)mDrawerLayout.findViewById(R.id.capture_insets_frame_layout);
    leftDrawer.getLayoutParams().width=drawerWidth;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      mDrawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.color_primary_dark));
    }
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,getToolbar(),R.string.open_drawer,R.string.close_drawer){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_arrow_back_white_24dp);
    mDrawerLayout.setDrawerListener(mDrawerToggle);
  }
  mDrawerListView=(ListView)findViewById(R.id.drawer_list);
  if (mDrawerListView.getHeaderViewsCount() == 0) {
    View view=getLayoutInflater().inflate(R.layout.drawer_header,mDrawerListView,false);
    mDrawerListView.addHeaderView(view,null,false);
  }
  mScrollPositionManager=new ListScrollPositionManager(mDrawerListView,false);
  View settingsRow=findViewById(R.id.settings_row);
  settingsRow.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSettings();
    }
  }
);
  mDrawerAdapter=new DrawerAdapter(this);
  mDrawerListView.setAdapter(mDrawerAdapter);
  mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      int menuPosition=position - mDrawerListView.getHeaderViewsCount();
      DrawerItem item=(DrawerItem)mDrawerAdapter.getItem(menuPosition);
      drawerItemSelected(item);
    }
  }
);
  initBlogSpinner();
  updateMenuDrawer();
  setToolbarClickListener();
}",0.9921752738654148
14432,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(null);
  createMenuDrawer(R.layout.comment_activity);
  setSupportActionBar(getToolbar());
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setTitle(getString(R.string.tab_comments));
  }
  getFragmentManager().addOnBackStackChangedListener(mOnBackStackChangedListener);
  restoreSavedInstance(savedInstanceState);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(null);
  createMenuDrawer(R.layout.comment_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setTitle(getString(R.string.tab_comments));
  }
  getFragmentManager().addOnBackStackChangedListener(mOnBackStackChangedListener);
  restoreSavedInstance(savedInstanceState);
}",0.9596510359869138
14433,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    FragmentManager fm=getFragmentManager();
    if (fm.getBackStackEntryCount() > 0) {
      fm.popBackStack();
      setupBaseLayout();
      return true;
    }
  }
 else   if (itemId == R.id.menu_new_media) {
    View view=findViewById(R.id.menu_new_media);
    if (view != null) {
      int y_offset=getResources().getDimensionPixelSize(R.dimen.action_bar_spinner_y_offset);
      int[] loc=new int[2];
      view.getLocationOnScreen(loc);
      mAddMediaPopup.showAtLocation(view,Gravity.TOP | Gravity.LEFT,loc[0],loc[1] + view.getHeight() + y_offset);
    }
 else {
      View gridView=findViewById(R.id.media_gridview);
      mAddMediaPopup.showAtLocation(gridView,Gravity.CENTER,0,0);
    }
    return true;
  }
 else   if (itemId == R.id.menu_search) {
    mSearchMenuItem=item;
    mSearchMenuItem.setOnActionExpandListener(this);
    mSearchMenuItem.expandActionView();
    mSearchView=(SearchView)item.getActionView();
    mSearchView.setOnQueryTextListener(this);
    if (!TextUtils.isEmpty(mQuery)) {
      onQueryTextSubmit(mQuery);
      mSearchView.setQuery(mQuery,true);
    }
    return true;
  }
 else   if (itemId == R.id.menu_edit_media) {
    String mediaId=mMediaItemFragment.getMediaId();
    FragmentManager fm=getFragmentManager();
    if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
      FragmentTransaction ft=fm.beginTransaction();
      if (mMediaItemFragment.isVisible())       ft.hide(mMediaItemFragment);
      mMediaEditFragment=MediaEditFragment.newInstance(mediaId);
      ft.add(R.id.media_browser_container,mMediaEditFragment,MediaEditFragment.TAG);
      ft.addToBackStack(null);
      ft.commit();
      if (getDrawerToggle() != null) {
        getDrawerToggle().setDrawerIndicatorEnabled(false);
      }
    }
 else {
      mMediaEditFragment.loadMedia(mediaId);
    }
    if (mSearchView != null) {
      mSearchView.clearFocus();
    }
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == R.id.menu_new_media) {
    View view=findViewById(R.id.menu_new_media);
    if (view != null) {
      int y_offset=getResources().getDimensionPixelSize(R.dimen.action_bar_spinner_y_offset);
      int[] loc=new int[2];
      view.getLocationOnScreen(loc);
      mAddMediaPopup.showAtLocation(view,Gravity.TOP | Gravity.LEFT,loc[0],loc[1] + view.getHeight() + y_offset);
    }
 else {
      View gridView=findViewById(R.id.media_gridview);
      mAddMediaPopup.showAtLocation(gridView,Gravity.CENTER,0,0);
    }
    return true;
  }
 else   if (itemId == R.id.menu_search) {
    mSearchMenuItem=item;
    mSearchMenuItem.setOnActionExpandListener(this);
    mSearchMenuItem.expandActionView();
    mSearchView=(SearchView)item.getActionView();
    mSearchView.setOnQueryTextListener(this);
    if (!TextUtils.isEmpty(mQuery)) {
      onQueryTextSubmit(mQuery);
      mSearchView.setQuery(mQuery,true);
    }
    return true;
  }
 else   if (itemId == R.id.menu_edit_media) {
    String mediaId=mMediaItemFragment.getMediaId();
    FragmentManager fm=getFragmentManager();
    if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
      FragmentTransaction ft=fm.beginTransaction();
      if (mMediaItemFragment.isVisible())       ft.hide(mMediaItemFragment);
      mMediaEditFragment=MediaEditFragment.newInstance(mediaId);
      ft.add(R.id.media_browser_container,mMediaEditFragment,MediaEditFragment.TAG);
      ft.addToBackStack(null);
      ft.commit();
      if (getDrawerToggle() != null) {
        getDrawerToggle().setDrawerIndicatorEnabled(false);
      }
    }
 else {
      mMediaEditFragment.loadMedia(mediaId);
    }
    if (mSearchView != null) {
      mSearchView.clearFocus();
    }
  }
  return super.onOptionsItemSelected(item);
}",0.9469160768452984
14434,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  createMenuDrawer(R.layout.media_browser_activity);
  setSupportActionBar(getToolbar());
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setTitle(R.string.media);
  }
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  FragmentTransaction ft=fm.beginTransaction();
  setupBaseLayout();
  mMediaAddFragment=(MediaAddFragment)fm.findFragmentById(R.id.mediaAddFragment);
  mMediaGridFragment=(MediaGridFragment)fm.findFragmentById(R.id.mediaGridFragment);
  mMediaItemFragment=(MediaItemFragment)fm.findFragmentByTag(MediaItemFragment.TAG);
  if (mMediaItemFragment != null)   ft.hide(mMediaGridFragment);
  mMediaEditFragment=(MediaEditFragment)fm.findFragmentByTag(MediaEditFragment.TAG);
  if (mMediaEditFragment != null && !mMediaEditFragment.isInLayout())   ft.hide(mMediaItemFragment);
  ft.commit();
  setupAddMenuPopup();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    uploadSharedFiles();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  createMenuDrawer(R.layout.media_browser_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setTitle(R.string.media);
  }
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  FragmentTransaction ft=fm.beginTransaction();
  setupBaseLayout();
  mMediaAddFragment=(MediaAddFragment)fm.findFragmentById(R.id.mediaAddFragment);
  mMediaGridFragment=(MediaGridFragment)fm.findFragmentById(R.id.mediaGridFragment);
  mMediaItemFragment=(MediaItemFragment)fm.findFragmentByTag(MediaItemFragment.TAG);
  if (mMediaItemFragment != null)   ft.hide(mMediaGridFragment);
  mMediaEditFragment=(MediaEditFragment)fm.findFragmentByTag(MediaEditFragment.TAG);
  if (mMediaEditFragment != null && !mMediaEditFragment.isInLayout())   ft.hide(mMediaItemFragment);
  ft.commit();
  setupAddMenuPopup();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    uploadSharedFiles();
  }
}",0.9847170590665014
14435,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(null);
  AppLog.i(T.NOTIFS,""String_Node_Str"");
  createMenuDrawer(R.layout.notifications_activity);
  setSupportActionBar(getToolbar());
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_ACCESSED);
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (mNotesListFragment == null) {
    mNotesListFragment=(NotificationsListFragment)fragmentManager.findFragmentByTag(TAG_LIST_VIEW);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setTitle(getResources().getString(R.string.notifications));
  }
  fragmentManager.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mNotesListFragment.setOnNoteClickListener(new NoteClickListener());
  GCMIntentService.clearNotificationsMap();
  if (savedInstanceState != null) {
    mHasPerformedInitialUpdate=savedInstanceState.getBoolean(KEY_INITIAL_UPDATE);
    if (savedInstanceState.getString(KEY_REPLY_TEXT) != null) {
      mRestoredReplyText=savedInstanceState.getString(KEY_REPLY_TEXT);
    }
    if (savedInstanceState.getString(NOTE_ID_EXTRA) != null) {
      openNoteForNoteId(savedInstanceState.getString(NOTE_ID_EXTRA));
    }
    if (savedInstanceState.containsKey(KEY_LIST_SCROLL_POSITION)) {
      mNotesListFragment.setRestoredListPosition(savedInstanceState.getInt(KEY_LIST_SCROLL_POSITION,RecyclerView.NO_POSITION));
    }
  }
 else {
    launchWithNoteId();
  }
  if (SimperiumUtils.isUserNotAuthorized()) {
    AuthenticationDialogUtils.showAuthErrorDialog(this,R.string.sign_in_again,R.string.simperium_connection_error);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(null);
  AppLog.i(T.NOTIFS,""String_Node_Str"");
  createMenuDrawer(R.layout.notifications_activity);
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_ACCESSED);
  }
  FragmentManager fragmentManager=getFragmentManager();
  if (mNotesListFragment == null) {
    mNotesListFragment=(NotificationsListFragment)fragmentManager.findFragmentByTag(TAG_LIST_VIEW);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setTitle(getResources().getString(R.string.notifications));
  }
  fragmentManager.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mNotesListFragment.setOnNoteClickListener(new NoteClickListener());
  GCMIntentService.clearNotificationsMap();
  if (savedInstanceState != null) {
    mHasPerformedInitialUpdate=savedInstanceState.getBoolean(KEY_INITIAL_UPDATE);
    if (savedInstanceState.getString(KEY_REPLY_TEXT) != null) {
      mRestoredReplyText=savedInstanceState.getString(KEY_REPLY_TEXT);
    }
    if (savedInstanceState.getString(NOTE_ID_EXTRA) != null) {
      openNoteForNoteId(savedInstanceState.getString(NOTE_ID_EXTRA));
    }
    if (savedInstanceState.containsKey(KEY_LIST_SCROLL_POSITION)) {
      mNotesListFragment.setRestoredListPosition(savedInstanceState.getInt(KEY_LIST_SCROLL_POSITION,RecyclerView.NO_POSITION));
    }
  }
 else {
    launchWithNoteId();
  }
  if (SimperiumUtils.isUserNotAuthorized()) {
    AuthenticationDialogUtils.showAuthErrorDialog(this,R.string.sign_in_again,R.string.simperium_connection_error);
  }
}",0.989127240669997
14436,"public void onBackStackChanged(){
  int backStackEntryCount=getFragmentManager().getBackStackEntryCount();
  if (getSupportActionBar() != null && backStackEntryCount == 0) {
    getSupportActionBar().setTitle(R.string.notifications);
  }
  if (getDrawerToggle() != null) {
    getDrawerToggle().setDrawerIndicatorEnabled(backStackEntryCount == 0);
  }
}","public void onBackStackChanged(){
  int backStackEntryCount=getFragmentManager().getBackStackEntryCount();
  if (getSupportActionBar() != null && backStackEntryCount == 0) {
    getSupportActionBar().setTitle(R.string.notifications);
  }
 else {
    mRestoredReplyText=getCommentReplyText();
  }
  if (getDrawerToggle() != null) {
    getDrawerToggle().setDrawerIndicatorEnabled(backStackEntryCount == 0);
  }
}",0.9240837696335078
14437,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ProfilingUtils.split(""String_Node_Str"");
  ProfilingUtils.dump();
  createMenuDrawer(R.layout.posts);
  setSupportActionBar(getToolbar());
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
  }
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mPostList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    mIsPage=extras.getBoolean(EXTRA_VIEW_PAGES);
    showErrorDialogIfNeeded(extras);
  }
  if (mIsPage) {
    getSupportActionBar().setTitle(getString(R.string.pages));
  }
 else {
    getSupportActionBar().setTitle(getString(R.string.posts));
  }
  WordPress.currentPost=null;
  if (savedInstanceState != null) {
    popPostDetail();
  }
  attemptToSelectPost();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ProfilingUtils.split(""String_Node_Str"");
  ProfilingUtils.dump();
  createMenuDrawer(R.layout.posts);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
  }
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mPostList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    mIsPage=extras.getBoolean(EXTRA_VIEW_PAGES);
    showErrorDialogIfNeeded(extras);
  }
  if (mIsPage) {
    getSupportActionBar().setTitle(getString(R.string.pages));
  }
 else {
    getSupportActionBar().setTitle(getString(R.string.posts));
  }
  WordPress.currentPost=null;
  if (savedInstanceState != null) {
    popPostDetail();
  }
  attemptToSelectPost();
}",0.9805160610847816
14438,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comment_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
    mHasUpdatedComments=savedInstanceState.getBoolean(KEY_HAS_UPDATED_COMMENTS);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    if (NetworkUtils.isNetworkAvailable(this)) {
      ReaderCommentTable.purgeExcessCommentsForPost(mBlogId,mPostId);
    }
  }
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  int spacingHorizontal=getResources().getDimensionPixelSize(R.dimen.reader_detail_margin);
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView.addItemDecoration(new ReaderRecyclerView.ReaderItemDecoration(spacingHorizontal,spacingVertical));
  mCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mEditComment=(SuggestionAutoCompleteText)mCommentBox.findViewById(R.id.edit_comment);
  mEditComment.getAutoSaveTextHelper().setUniqueId(String.format(""String_Node_Str"",WordPress.getLoggedInUsername(this,null),mPostId,mBlogId));
  mImgSubmitComment=(ImageView)mCommentBox.findViewById(R.id.image_post_comment);
  if (!loadPost()) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
    return;
  }
  mRecyclerView.setAdapter(getCommentAdapter());
  if (savedInstanceState != null) {
    setReplyToCommentId(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(this,(int)mBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions((int)mBlogId,this,mSuggestionServiceConnectionManager,mPost.isWP());
  if (mSuggestionAdapter != null) {
    mEditComment.setAdapter(mSuggestionAdapter);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comment_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
    mHasUpdatedComments=savedInstanceState.getBoolean(KEY_HAS_UPDATED_COMMENTS);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    if (NetworkUtils.isNetworkAvailable(this)) {
      ReaderCommentTable.purgeExcessCommentsForPost(mBlogId,mPostId);
    }
  }
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  int spacingHorizontal=getResources().getDimensionPixelSize(R.dimen.reader_detail_margin);
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView.addItemDecoration(new ReaderRecyclerView.ReaderItemDecoration(spacingHorizontal,spacingVertical));
  mCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mEditComment=(SuggestionAutoCompleteText)mCommentBox.findViewById(R.id.edit_comment);
  mEditComment.getAutoSaveTextHelper().setUniqueId(String.format(""String_Node_Str"",WordPress.getLoggedInUsername(this,null),mPostId,mBlogId));
  mImgSubmitComment=(ImageView)mCommentBox.findViewById(R.id.image_post_comment);
  if (!loadPost()) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
    return;
  }
  mRecyclerView.setAdapter(getCommentAdapter());
  if (savedInstanceState != null) {
    setReplyToCommentId(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(this,(int)mBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions((int)mBlogId,this,mSuggestionServiceConnectionManager,mPost.isWP());
  if (mSuggestionAdapter != null) {
    mEditComment.setAdapter(mSuggestionAdapter);
  }
}",0.968381112984823
14439,"@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    onBackPressed();
  return true;
case R.id.menu_tags:
ReaderActivityLauncher.showReaderSubsForResult(this);
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case R.id.menu_tags:
    ReaderActivityLauncher.showReaderSubsForResult(this);
  return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.8424908424908425
14440,"private void readIntent(Intent intent,Bundle savedInstanceState){
  if (intent == null) {
    return;
  }
  if (intent.hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
    mPostListType=(ReaderTypes.ReaderPostListType)intent.getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
  }
 else {
    mPostListType=ReaderTypes.DEFAULT_POST_LIST_TYPE;
  }
  if (mPostListType.isPreviewType() && getDrawerToggle() != null) {
    getDrawerToggle().setDrawerIndicatorEnabled(false);
    getDrawerToggle().setToolbarNavigationClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        onBackPressed();
      }
    }
);
  }
switch (mPostListType) {
case TAG_PREVIEW:
    setTitle(R.string.reader_title_tag_preview);
  break;
case BLOG_PREVIEW:
setTitle(R.string.reader_title_blog_preview);
break;
default :
break;
}
if (savedInstanceState == null) {
AnalyticsTracker.track(AnalyticsTracker.Stat.READER_ACCESSED);
if (mPostListType == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
long blogId=intent.getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
String blogUrl=intent.getStringExtra(ReaderConstants.ARG_BLOG_URL);
showListFragmentForBlog(blogId,blogUrl);
}
 else {
ReaderTag tag;
if (intent.hasExtra(ReaderConstants.ARG_TAG)) {
tag=(ReaderTag)intent.getSerializableExtra(ReaderConstants.ARG_TAG);
}
 else {
tag=AppPrefs.getReaderTag();
}
if (mPostListType == ReaderTypes.ReaderPostListType.TAG_FOLLOWED && !ReaderTagTable.tagExists(tag)) {
tag=ReaderTag.getDefaultTag();
}
showListFragmentForTag(tag,mPostListType);
}
}
}","private void readIntent(Intent intent,Bundle savedInstanceState){
  if (intent == null) {
    return;
  }
  if (intent.hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
    mPostListType=(ReaderTypes.ReaderPostListType)intent.getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
  }
 else {
    mPostListType=ReaderTypes.DEFAULT_POST_LIST_TYPE;
  }
  if (mPostListType.isPreviewType() && getDrawerToggle() != null) {
    getDrawerToggle().setDrawerIndicatorEnabled(false);
    getToolbar().setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        onBackPressed();
      }
    }
);
  }
switch (mPostListType) {
case TAG_PREVIEW:
    setTitle(R.string.reader_title_tag_preview);
  break;
case BLOG_PREVIEW:
setTitle(R.string.reader_title_blog_preview);
break;
default :
break;
}
if (savedInstanceState == null) {
AnalyticsTracker.track(AnalyticsTracker.Stat.READER_ACCESSED);
if (mPostListType == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
long blogId=intent.getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
String blogUrl=intent.getStringExtra(ReaderConstants.ARG_BLOG_URL);
showListFragmentForBlog(blogId,blogUrl);
}
 else {
ReaderTag tag;
if (intent.hasExtra(ReaderConstants.ARG_TAG)) {
tag=(ReaderTag)intent.getSerializableExtra(ReaderConstants.ARG_TAG);
}
 else {
tag=AppPrefs.getReaderTag();
}
if (mPostListType == ReaderTypes.ReaderPostListType.TAG_FOLLOWED && !ReaderTagTable.tagExists(tag)) {
tag=ReaderTag.getDefaultTag();
}
showListFragmentForTag(tag,mPostListType);
}
}
}",0.9916020671834626
14441,"@Override public void onBackPressed(){
  ReaderPostListFragment fragment=getListFragment();
  if (fragment == null || !fragment.goBackInTagHistory()) {
    super.onBackPressed();
  }
}","@Override public void onBackPressed(){
  ReaderPostListFragment fragment=getListFragment();
  if (fragment == null || !fragment.goBackInTagHistory()) {
    setToolbarClickListener();
    super.onBackPressed();
  }
}",0.9223057644110276
14442,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_post_pager);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mViewPager=(ReaderViewPager)findViewById(R.id.viewpager);
  mProgress=(ProgressBar)findViewById(R.id.progress_loading);
  final String title;
  if (savedInstanceState != null) {
    title=savedInstanceState.getString(ReaderConstants.ARG_TITLE);
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mIsSinglePostView=savedInstanceState.getBoolean(ARG_IS_SINGLE_POST);
    if (savedInstanceState.containsKey(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)savedInstanceState.getSerializable(ReaderConstants.ARG_POST_LIST_TYPE);
    }
    if (savedInstanceState.containsKey(ReaderConstants.ARG_TAG)) {
      mCurrentTag=(ReaderTag)savedInstanceState.getSerializable(ReaderConstants.ARG_TAG);
    }
  }
 else {
    title=getIntent().getStringExtra(ReaderConstants.ARG_TITLE);
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    mIsSinglePostView=getIntent().getBooleanExtra(ARG_IS_SINGLE_POST,false);
    if (getIntent().hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)getIntent().getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
    }
    if (getIntent().hasExtra(ReaderConstants.ARG_TAG)) {
      mCurrentTag=(ReaderTag)getIntent().getSerializableExtra(ReaderConstants.ARG_TAG);
    }
  }
  if (mPostListType == null) {
    mPostListType=ReaderPostListType.TAG_FOLLOWED;
  }
  if (!TextUtils.isEmpty(title)) {
    this.setTitle(title);
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      super.onPageSelected(position);
      AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
    }
    @Override public void onPageScrollStateChanged(    int state){
      super.onPageScrollStateChanged(state);
      if (state == ViewPager.SCROLL_STATE_DRAGGING) {
        ReaderPostDetailFragment fragment=getActiveDetailFragment();
        if (fragment != null) {
          fragment.pauseWebView();
        }
      }
    }
  }
);
  mViewPager.setPageTransformer(false,new ReaderViewPagerTransformer(ReaderViewPagerTransformer.TransformType.SLIDE_OVER));
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_post_pager);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mToolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mViewPager=(ReaderViewPager)findViewById(R.id.viewpager);
  mProgress=(ProgressBar)findViewById(R.id.progress_loading);
  final String title;
  if (savedInstanceState != null) {
    title=savedInstanceState.getString(ReaderConstants.ARG_TITLE);
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mIsSinglePostView=savedInstanceState.getBoolean(ARG_IS_SINGLE_POST);
    if (savedInstanceState.containsKey(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)savedInstanceState.getSerializable(ReaderConstants.ARG_POST_LIST_TYPE);
    }
    if (savedInstanceState.containsKey(ReaderConstants.ARG_TAG)) {
      mCurrentTag=(ReaderTag)savedInstanceState.getSerializable(ReaderConstants.ARG_TAG);
    }
  }
 else {
    title=getIntent().getStringExtra(ReaderConstants.ARG_TITLE);
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    mIsSinglePostView=getIntent().getBooleanExtra(ARG_IS_SINGLE_POST,false);
    if (getIntent().hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)getIntent().getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
    }
    if (getIntent().hasExtra(ReaderConstants.ARG_TAG)) {
      mCurrentTag=(ReaderTag)getIntent().getSerializableExtra(ReaderConstants.ARG_TAG);
    }
  }
  if (mPostListType == null) {
    mPostListType=ReaderPostListType.TAG_FOLLOWED;
  }
  if (!TextUtils.isEmpty(title)) {
    this.setTitle(title);
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      super.onPageSelected(position);
      AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
    }
    @Override public void onPageScrollStateChanged(    int state){
      super.onPageScrollStateChanged(state);
      if (state == ViewPager.SCROLL_STATE_DRAGGING) {
        ReaderPostDetailFragment fragment=getActiveDetailFragment();
        if (fragment != null) {
          fragment.pauseWebView();
        }
      }
    }
  }
);
  mViewPager.setPageTransformer(false,new ReaderViewPagerTransformer(ReaderViewPagerTransformer.TransformType.SLIDE_OVER));
}",0.9724502827951104
14443,"@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    onBackPressed();
  return true;
case R.id.menu_publish:
submitReblog();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case R.id.menu_publish:
    submitReblog();
  return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.8613445378151261
14444,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_reblog);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  View view=View.inflate(this,R.layout.reader_spinner,toolbar);
  mSpinner=(Spinner)view.findViewById(R.id.action_bar_spinner);
  mSpinner.setAdapter(getReblogAdapter());
  mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      mDestinationBlogId=id;
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      mDestinationBlogId=0;
    }
  }
);
  mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
  mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
  mEditComment=(EditText)findViewById(R.id.edit_comment);
  mLayoutExcerpt=(ViewGroup)findViewById(R.id.layout_post_excerpt);
  if (savedInstanceState == null) {
    mEditComment.setVisibility(View.INVISIBLE);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (!isFinishing()) {
          animateCommentView();
        }
      }
    }
,300);
  }
  loadPost();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_reblog);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  View view=View.inflate(this,R.layout.reader_spinner,toolbar);
  mSpinner=(Spinner)view.findViewById(R.id.action_bar_spinner);
  mSpinner.setAdapter(getReblogAdapter());
  mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      mDestinationBlogId=id;
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      mDestinationBlogId=0;
    }
  }
);
  mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
  mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
  mEditComment=(EditText)findViewById(R.id.edit_comment);
  mLayoutExcerpt=(ViewGroup)findViewById(R.id.layout_post_excerpt);
  if (savedInstanceState == null) {
    mEditComment.setVisibility(View.INVISIBLE);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (!isFinishing()) {
          animateCommentView();
        }
      }
    }
,300);
  }
  loadPost();
}",0.9490835030549898
14445,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_subs);
  restoreState(savedInstanceState);
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mViewPager.setAdapter(getPageAdapter());
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  PagerTabStrip tabStrip=(PagerTabStrip)findViewById(R.id.pager_tabs);
  tabStrip.setTabIndicatorColorResource(R.color.tab_indicator);
  tabStrip.setTextColor(getResources().getColor(R.color.tab_text_selected));
  mEditAdd=(EditText)findViewById(R.id.edit_add);
  mEditAdd.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE) {
        addCurrentEntry();
      }
      return false;
    }
  }
);
  mBtnAdd=(ImageButton)findViewById(R.id.btn_add);
  mBtnAdd.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      addCurrentEntry();
    }
  }
);
  if (savedInstanceState == null) {
    restorePreviousPage();
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      String pageTitle=(String)getPageAdapter().getPageTitle(position);
      AppPrefs.setReaderSubsPageTitle(pageTitle);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_subs);
  restoreState(savedInstanceState);
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mViewPager.setAdapter(getPageAdapter());
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  PagerTabStrip tabStrip=(PagerTabStrip)findViewById(R.id.pager_tabs);
  tabStrip.setTabIndicatorColorResource(R.color.tab_indicator);
  tabStrip.setTextColor(getResources().getColor(R.color.tab_text_selected));
  mEditAdd=(EditText)findViewById(R.id.edit_add);
  mEditAdd.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE) {
        addCurrentEntry();
      }
      return false;
    }
  }
);
  mBtnAdd=(ImageButton)findViewById(R.id.btn_add);
  mBtnAdd.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      addCurrentEntry();
    }
  }
);
  if (savedInstanceState == null) {
    restorePreviousPage();
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      String pageTitle=(String)getPageAdapter().getPageTitle(position);
      AppPrefs.setReaderSubsPageTitle(pageTitle);
    }
  }
);
}",0.9545729860690492
14446,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_userlist);
  setTitle(null);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
  }
  int spacingHorizontal=0;
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  mRecyclerView.addItemDecoration(new ReaderRecyclerView.ReaderItemDecoration(spacingHorizontal,spacingVertical));
  long blogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
  long postId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
  long commentId=getIntent().getLongExtra(ReaderConstants.ARG_COMMENT_ID,0);
  loadUsers(blogId,postId,commentId);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_userlist);
  setTitle(null);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  getSupportActionBar().setDisplayShowTitleEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
  }
  int spacingHorizontal=0;
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  mRecyclerView.addItemDecoration(new ReaderRecyclerView.ReaderItemDecoration(spacingHorizontal,spacingVertical));
  long blogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
  long postId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
  long commentId=getIntent().getLongExtra(ReaderConstants.ARG_COMMENT_ID,0);
  loadUsers(blogId,postId,commentId);
}",0.9315068493150684
14447,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    FragmentManager fm=getFragmentManager();
    if (fm.getBackStackEntryCount() > 0) {
      fm.popBackStack();
      setupBaseLayout();
      return true;
    }
  }
 else   if (itemId == R.id.menu_search) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    if (mSearchFragment == null) {
      mSearchFragment=ThemeSearchFragment.newInstance();
    }
    ft.add(R.id.theme_browser_container,mSearchFragment,ThemeSearchFragment.TAG);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
    ft.addToBackStack(null);
    ft.commit();
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == R.id.menu_search) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    if (mSearchFragment == null) {
      mSearchFragment=ThemeSearchFragment.newInstance();
    }
    ft.add(R.id.theme_browser_container,mSearchFragment,ThemeSearchFragment.TAG);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
    ft.addToBackStack(null);
    ft.commit();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.8409090909090909
14448,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.THEMES_ACCESSED_THEMES_BROWSER);
  }
  setTitle(R.string.themes);
  createMenuDrawer(R.layout.theme_browser_activity);
  setSupportActionBar(getToolbar());
  mThemePagerAdapter=new ThemePagerAdapter(getFragmentManager());
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setHomeButtonEnabled(true);
  }
  mViewPager=(ViewPager)findViewById(R.id.theme_browser_pager);
  mViewPager.setAdapter(mThemePagerAdapter);
  mTabLayout=(SlidingTabLayout)findViewById(R.id.sliding_tabs);
  mTabLayout.setCustomTabView(R.layout.tab_text,R.id.text_tab);
  mTabLayout.setSelectedIndicatorColors(getResources().getColor(R.color.tab_indicator));
  mTabLayout.setDistributeEvenly(true);
  mTabLayout.setViewPager(mViewPager);
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  setupBaseLayout();
  mPreviewFragment=(ThemePreviewFragment)fm.findFragmentByTag(ThemePreviewFragment.TAG);
  mDetailsFragment=(ThemeDetailsFragment)fm.findFragmentByTag(ThemeDetailsFragment.TAG);
  mSearchFragment=(ThemeSearchFragment)fm.findFragmentByTag(ThemeSearchFragment.TAG);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.THEMES_ACCESSED_THEMES_BROWSER);
  }
  setTitle(R.string.themes);
  createMenuDrawer(R.layout.theme_browser_activity);
  mThemePagerAdapter=new ThemePagerAdapter(getFragmentManager());
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setHomeButtonEnabled(true);
  }
  mViewPager=(ViewPager)findViewById(R.id.theme_browser_pager);
  mViewPager.setAdapter(mThemePagerAdapter);
  mTabLayout=(SlidingTabLayout)findViewById(R.id.sliding_tabs);
  mTabLayout.setCustomTabView(R.layout.tab_text,R.id.text_tab);
  mTabLayout.setSelectedIndicatorColors(getResources().getColor(R.color.tab_indicator));
  mTabLayout.setDistributeEvenly(true);
  mTabLayout.setViewPager(mViewPager);
  FragmentManager fm=getFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  setupBaseLayout();
  mPreviewFragment=(ThemePreviewFragment)fm.findFragmentByTag(ThemePreviewFragment.TAG);
  mDetailsFragment=(ThemeDetailsFragment)fm.findFragmentByTag(ThemeDetailsFragment.TAG);
  mSearchFragment=(ThemeSearchFragment)fm.findFragmentByTag(ThemeSearchFragment.TAG);
}",0.9253431536658856
14449,"private void setMainViewsLabel(String dateFormatted,int totals){
  mStatsViewsLabel.setText(getString(R.string.stats_views) + ""String_Node_Str"" + dateFormatted);
  mStatsViewsTotals.setText(String.valueOf(totals));
}","private void setMainViewsLabel(String dateFormatted,int totals){
  mStatsViewsLabel.setText(getString(R.string.stats_views) + ""String_Node_Str"" + dateFormatted);
  mStatsViewsTotals.setText(FormatUtils.formatDecimal(totals));
}",0.9164785553047404
14450,"void updatePostsInCurrentBlog(final RequestDataAction updateAction){
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  ReaderActions.UpdateResultListener resultListener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result){
      if (!isAdded()) {
        return;
      }
      setIsUpdating(false,updateAction);
      if (result.isNewOrChanged()) {
        refreshPosts();
      }
    }
  }
;
  ReaderPostActions.requestPostsForBlog(mCurrentBlogId,mCurrentBlogUrl,updateAction,resultListener);
}","void updatePostsInCurrentBlog(final RequestDataAction updateAction){
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  ReaderActions.UpdateResultListener resultListener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result){
      if (!isAdded()) {
        return;
      }
      setIsUpdating(false,updateAction);
      if (result.isNewOrChanged()) {
        refreshPosts(false);
      }
    }
  }
;
  ReaderPostActions.requestPostsForBlog(mCurrentBlogId,mCurrentBlogUrl,updateAction,resultListener);
}",0.9962658700522778
14451,"void updatePostsWithTag(final ReaderTag tag,final RequestDataAction updateAction,final RefreshType refreshType){
  if (tag == null) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (getPostListType() == ReaderPostListType.TAG_FOLLOWED && ReaderTagTable.isEmpty()) {
    AppLog.d(T.READER,""String_Node_Str"");
    return;
  }
  if (refreshType == RefreshType.MANUAL && isCurrentTag(tag)) {
    if (tag.getTagName().equals(ReaderTag.TAG_NAME_LIKED) || tag.getTagName().equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts();
  }
  ReaderActions.UpdateResultListener resultListener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result){
      if (!isAdded()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (!isCurrentTag(tag)) {
        return;
      }
      if (result.isNewOrChanged()) {
        if (!isPostAdapterEmpty() && updateAction == RequestDataAction.LOAD_NEWER) {
          showNewPostsBar();
        }
        refreshPosts();
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
;
  ReaderPostActions.updatePostsInTag(tag,updateAction,resultListener);
}","void updatePostsWithTag(final ReaderTag tag,final RequestDataAction updateAction,final RefreshType refreshType){
  if (tag == null) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (getPostListType() == ReaderPostListType.TAG_FOLLOWED && ReaderTagTable.isEmpty()) {
    AppLog.d(T.READER,""String_Node_Str"");
    return;
  }
  if (refreshType == RefreshType.MANUAL && isCurrentTag(tag)) {
    if (tag.getTagName().equals(ReaderTag.TAG_NAME_LIKED) || tag.getTagName().equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts(false);
  }
  ReaderActions.UpdateResultListener resultListener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result){
      if (!isAdded()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (!isCurrentTag(tag)) {
        return;
      }
      if (result.isNewOrChanged()) {
        if (!isPostAdapterEmpty() && updateAction == RequestDataAction.LOAD_NEWER) {
          showNewPostsBar();
        }
        boolean isLoadingOlderPosts=(updateAction == RequestDataAction.LOAD_OLDER);
        refreshPosts(isLoadingOlderPosts);
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
;
  ReaderPostActions.updatePostsInTag(tag,updateAction,resultListener);
}",0.9631147540983608
14452,"@Override public void onResume(){
  super.onResume();
  if (mWasPaused) {
    AppLog.d(T.READER,""String_Node_Str"");
    mWasPaused=false;
    refreshPosts();
    refreshTags();
    if (!isUpdating() && getPostListType() == ReaderPostListType.TAG_FOLLOWED && ReaderTagTable.shouldAutoUpdateTag(mCurrentTag)) {
      AppLog.i(T.READER,""String_Node_Str"");
      updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.AUTOMATIC);
    }
  }
}","@Override public void onResume(){
  super.onResume();
  if (mWasPaused) {
    AppLog.d(T.READER,""String_Node_Str"");
    mWasPaused=false;
    refreshPosts(false);
    refreshTags();
    if (!isUpdating() && getPostListType() == ReaderPostListType.TAG_FOLLOWED && ReaderTagTable.shouldAutoUpdateTag(mCurrentTag)) {
      AppLog.i(T.READER,""String_Node_Str"");
      updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.AUTOMATIC);
    }
  }
}",0.99457111834962
14453,"@Override public void onUndo(Parcelable parcelable){
  ReaderBlogActions.undoBlockBlogFromReader(blockResult);
  refreshPosts();
}","@Override public void onUndo(Parcelable parcelable){
  ReaderBlogActions.undoBlockBlogFromReader(blockResult);
  refreshPosts(false);
}",0.981132075471698
14454,"private void blockBlogForPost(final ReaderPost post){
  if (post == null || !hasPostAdapter()) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && isAdded()) {
        hideUndoBar();
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_block_blog,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final ReaderBlogActions.BlockedBlogResult blockResult=ReaderBlogActions.blockBlogFromReader(post.blogId,actionListener);
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_BLOCKED_BLOG);
  getPostAdapter().removePostsInBlog(post.blogId);
  UndoBarController.UndoListener undoListener=new UndoBarController.UndoListener(){
    @Override public void onUndo(    Parcelable parcelable){
      ReaderBlogActions.undoBlockBlogFromReader(blockResult);
      refreshPosts();
    }
  }
;
  new UndoBarController.UndoBar(getActivity()).message(getString(R.string.reader_toast_blog_blocked)).listener(undoListener).translucent(true).show();
}","private void blockBlogForPost(final ReaderPost post){
  if (post == null || !hasPostAdapter()) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && isAdded()) {
        hideUndoBar();
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_block_blog,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final ReaderBlogActions.BlockedBlogResult blockResult=ReaderBlogActions.blockBlogFromReader(post.blogId,actionListener);
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_BLOCKED_BLOG);
  getPostAdapter().removePostsInBlog(post.blogId);
  UndoBarController.UndoListener undoListener=new UndoBarController.UndoListener(){
    @Override public void onUndo(    Parcelable parcelable){
      ReaderBlogActions.undoBlockBlogFromReader(blockResult);
      refreshPosts(false);
    }
  }
;
  new UndoBarController.UndoBar(getActivity()).message(getString(R.string.reader_toast_blog_blocked)).listener(undoListener).translucent(true).show();
}",0.9978364344439636
14455,"void refreshPosts(){
  if (hasPostAdapter()) {
    getPostAdapter().refresh();
  }
}","void refreshPosts(boolean isLoadingOlderPosts){
  if (hasPostAdapter()) {
    getPostAdapter().refresh(isLoadingOlderPosts);
  }
}",0.7850467289719626
14456,"@Override public void onUpdateResult(ReaderActions.UpdateResult result){
  if (!isAdded()) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(false,updateAction);
  if (!isCurrentTag(tag)) {
    return;
  }
  if (result.isNewOrChanged()) {
    if (!isPostAdapterEmpty() && updateAction == RequestDataAction.LOAD_NEWER) {
      showNewPostsBar();
    }
    refreshPosts();
  }
 else {
    setEmptyTitleAndDescriptionForCurrentTag();
  }
}","@Override public void onUpdateResult(ReaderActions.UpdateResult result){
  if (!isAdded()) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(false,updateAction);
  if (!isCurrentTag(tag)) {
    return;
  }
  if (result.isNewOrChanged()) {
    if (!isPostAdapterEmpty() && updateAction == RequestDataAction.LOAD_NEWER) {
      showNewPostsBar();
    }
    boolean isLoadingOlderPosts=(updateAction == RequestDataAction.LOAD_OLDER);
    refreshPosts(isLoadingOlderPosts);
  }
 else {
    setEmptyTitleAndDescriptionForCurrentTag();
  }
}",0.9032258064516128
14457,"void reload(){
  clear();
  loadPosts();
}","void reload(){
  clear();
  loadPosts(false);
}",0.9438202247191012
14458,"@Override protected void onPostExecute(Boolean result){
  if (result) {
    if (mPosts.size() == 0) {
      mPosts.addAll(allPosts);
      notifyDataSetChanged();
    }
 else {
      ReaderPostList newPosts=new ReaderPostList();
      for (      ReaderPost post : allPosts) {
        int index=mPosts.indexOfPost(post);
        if (index == -1) {
          newPosts.add(post);
        }
 else         if (!post.isSamePost(mPosts.get(index))) {
          mPosts.set(index,post);
          notifyItemChanged(index);
        }
      }
      if (newPosts.size() > 0) {
        mPosts.addAll(0,newPosts);
        notifyItemRangeInserted(0,newPosts.size());
      }
    }
  }
  if (mDataLoadedListener != null) {
    mDataLoadedListener.onDataLoaded(isEmpty());
  }
  mIsTaskRunning=false;
}","@Override protected void onPostExecute(Boolean result){
  if (result) {
    if (mPosts.size() == 0) {
      mPosts.addAll(allPosts);
      notifyDataSetChanged();
    }
 else {
      ReaderPostList newPosts=new ReaderPostList();
      for (      ReaderPost post : allPosts) {
        int index=mPosts.indexOfPost(post);
        if (index == -1) {
          newPosts.add(post);
        }
 else         if (!post.isSamePost(mPosts.get(index))) {
          mPosts.set(index,post);
          notifyItemChanged(index);
        }
      }
      if (newPosts.size() > 0) {
        int firstIndex=(isLoadingOlderPosts ? mPosts.size() : 0);
        mPosts.addAll(firstIndex,newPosts);
        notifyItemRangeInserted(firstIndex,newPosts.size());
      }
    }
  }
  if (mDataLoadedListener != null) {
    mDataLoadedListener.onDataLoaded(isEmpty());
  }
  mIsTaskRunning=false;
}",0.946795646916566
14459,"public void refresh(){
  loadPosts();
}","public void refresh(boolean isLoadingOlderPosts){
  loadPosts(isLoadingOlderPosts);
}",0.6290322580645161
14460,"private void loadPosts(){
  if (mIsTaskRunning) {
    AppLog.w(AppLog.T.READER,""String_Node_Str"");
    return;
  }
  new LoadPostsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","private void loadPosts(boolean isLoadingOlderPosts){
  if (mIsTaskRunning) {
    AppLog.w(AppLog.T.READER,""String_Node_Str"");
    return;
  }
  new LoadPostsTask(isLoadingOlderPosts).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.8915094339622641
14461,"@Override public void drawSeries(Canvas canvas,GraphViewDataInterface[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  float colwidth=graphwidth / values.length;
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  List<BarChartRect> barChartRects=new LinkedList<>();
  for (int i=0; i < values.length; i++) {
    float valY=(float)(values[i].getY() - minY);
    float ratY=(float)(valY / diffY);
    float y=graphheight * ratY;
    if (style.getValueDependentColor() != null) {
      paint.setColor(style.getValueDependentColor().get(values[i]));
    }
    float pad=style.padding;
    float left=(i * colwidth) + horstart;
    float top=(border - y) + graphheight;
    float right=left + colwidth;
    float bottom=graphheight + border - 1;
    if ((top - bottom) == 1) {
      if (mBarPositionToHighlight == i) {
        paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
        paint.setAlpha(75);
        canvas.drawRect(left + pad,10f,right - pad,bottom,paint);
      }
 else {
        paint.setColor(style.color);
        paint.setAlpha(25);
        Shader shader=new LinearGradient(left + pad,bottom - 50,left + pad,bottom,Color.WHITE,Color.BLACK,Shader.TileMode.CLAMP);
        paint.setShader(shader);
        canvas.drawRect(left + pad,bottom - 50,right - pad,bottom,paint);
        paint.setShader(null);
      }
    }
 else {
      if (mBarPositionToHighlight == i) {
        paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
      }
 else {
        paint.setColor(style.color);
      }
      canvas.drawRect(left + pad,top,right - pad,bottom,paint);
    }
    barChartRects.add(new BarChartRect(left + pad,top,right - pad,bottom));
  }
  mSeriesRectsDrawedOnScreen.add(barChartRects);
}","@Override public void drawSeries(Canvas canvas,GraphViewDataInterface[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  float colwidth=graphwidth / values.length;
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  List<BarChartRect> barChartRects=new LinkedList<>();
  for (int i=0; i < values.length; i++) {
    float valY=(float)(values[i].getY() - minY);
    float ratY=(float)(valY / diffY);
    float y=graphheight * ratY;
    if (style.getValueDependentColor() != null) {
      paint.setColor(style.getValueDependentColor().get(values[i]));
    }
    float pad=style.padding;
    float left=(i * colwidth) + horstart;
    float top=(border - y) + graphheight;
    float right=left + colwidth;
    float bottom=graphheight + border - 1;
    if (mBarPositionToHighlight == i) {
      paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
      paint.setAlpha(50);
      canvas.drawRect(left,10f,right,bottom,paint);
    }
    if ((top - bottom) == 1) {
      if (mBarPositionToHighlight != i) {
        paint.setColor(style.color);
        paint.setAlpha(25);
        Shader shader=new LinearGradient(left + pad,bottom - 50,left + pad,bottom,Color.WHITE,Color.BLACK,Shader.TileMode.CLAMP);
        paint.setShader(shader);
        canvas.drawRect(left + pad,bottom - 50,right - pad,bottom,paint);
        paint.setShader(null);
      }
    }
 else {
      paint.setAlpha(255);
      if (mBarPositionToHighlight == i) {
        paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
      }
 else {
        paint.setColor(style.color);
      }
      canvas.drawRect(left + pad,top,right - pad,bottom,paint);
    }
    barChartRects.add(new BarChartRect(left + pad,top,right - pad,bottom));
  }
  mSeriesRectsDrawedOnScreen.add(barChartRects);
}",0.8792602377807134
14462,"private void updateUI(){
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  final String[] horLabels=new String[dataToShowOnGraph.length];
  mStatsDate=new String[dataToShowOnGraph.length];
  GraphView.GraphViewData[] views=new GraphView.GraphViewData[dataToShowOnGraph.length];
  OverviewLabel selectedStatsType=overviewItems[mSelectedOverviewItemIndex];
  for (int i=0; i < dataToShowOnGraph.length; i++) {
    int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
      currentItemValue=dataToShowOnGraph[i].getViews();
    break;
case VISITORS:
  currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
views[i]=new GraphView.GraphViewData(i,currentItemValue);
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
}
mCurrentSeriesOnScreen=new GraphViewSeries(views);
mCurrentSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
mCurrentSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),1);
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
mGraphView.addSeries(mCurrentSeriesOnScreen);
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
int barSelectedOnGraph=mSelectedBarGraphBarIndex != -1 ? mSelectedBarGraphBarIndex : dataToShowOnGraph.length - 1;
mGraphView.highlightBar(barSelectedOnGraph);
updateUIBelowTheGraph(barSelectedOnGraph);
}","private void updateUI(){
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  if (mVisitsData instanceof VolleyError) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph((VisitsModel)mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  final String[] horLabels=new String[dataToShowOnGraph.length];
  mStatsDate=new String[dataToShowOnGraph.length];
  GraphView.GraphViewData[] views=new GraphView.GraphViewData[dataToShowOnGraph.length];
  OverviewLabel selectedStatsType=overviewItems[mSelectedOverviewItemIndex];
  for (int i=0; i < dataToShowOnGraph.length; i++) {
    int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
      currentItemValue=dataToShowOnGraph[i].getViews();
    break;
case VISITORS:
  currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
views[i]=new GraphView.GraphViewData(i,currentItemValue);
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
}
mCurrentSeriesOnScreen=new GraphViewSeries(views);
mCurrentSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
mCurrentSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),5);
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
mGraphView.addSeries(mCurrentSeriesOnScreen);
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
int barSelectedOnGraph=mSelectedBarGraphBarIndex != -1 ? mSelectedBarGraphBarIndex : dataToShowOnGraph.length - 1;
mGraphView.highlightBar(barSelectedOnGraph);
updateUIBelowTheGraph(barSelectedOnGraph);
}",0.9995561473590768
14463,"private int getNumOfPoints(){
  return 7;
}","private int getNumOfPoints(){
  if (!isAdded()) {
    return 0;
  }
  if (StatsUIHelper.shouldLoadMoreBars(getActivity())) {
    return 10;
  }
 else {
    return 7;
  }
}",0.4018691588785046
14464,"public FollowHelper(Activity activity){
  mActivityRef=new WeakReference<Activity>(activity);
}","public FollowHelper(Activity activity){
  mActivityRef=new WeakReference<>(activity);
}",0.956043956043956
14465,"public FollowRestListener(Activity activity,final FollowDataModel followData){
  this.mActivityRef=new WeakReference<Activity>(activity);
  this.mFollowData=followData;
}","public FollowRestListener(Activity activity,final FollowDataModel followData){
  this.mActivityRef=new WeakReference<>(activity);
  this.mFollowData=followData;
}",0.9759036144578314
14466,"@Override public void drawSeries(Canvas canvas,GraphViewDataInterface[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  float colwidth=graphwidth / values.length;
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  List<BarChartRect> barChartRects=new LinkedList<BarChartRect>();
  for (int i=0; i < values.length; i++) {
    float valY=(float)(values[i].getY() - minY);
    float ratY=(float)(valY / diffY);
    float y=graphheight * ratY;
    if (style.getValueDependentColor() != null) {
      paint.setColor(style.getValueDependentColor().get(values[i]));
    }
    float pad=style.padding;
    float left=(i * colwidth) + horstart;
    float top=(border - y) + graphheight;
    float right=left + colwidth;
    float bottom=graphheight + border - 1;
    if ((top - bottom) == 1) {
      if (mBarPositionToHighlight == i) {
        paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
        paint.setAlpha(75);
        canvas.drawRect(left + pad,10f,right - pad,bottom,paint);
      }
 else {
        paint.setColor(style.color);
        paint.setAlpha(25);
        Shader shader=new LinearGradient(left + pad,bottom - 50,left + pad,bottom,Color.WHITE,Color.BLACK,Shader.TileMode.CLAMP);
        paint.setShader(shader);
        canvas.drawRect(left + pad,bottom - 50,right - pad,bottom,paint);
        paint.setShader(null);
      }
    }
 else {
      if (mBarPositionToHighlight == i) {
        paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
      }
 else {
        paint.setColor(style.color);
      }
      canvas.drawRect(left + pad,top,right - pad,bottom,paint);
    }
    barChartRects.add(new BarChartRect(left + pad,top,right - pad,bottom));
  }
  mSeriesRectsDrawedOnScreen.add(barChartRects);
}","@Override public void drawSeries(Canvas canvas,GraphViewDataInterface[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  float colwidth=graphwidth / values.length;
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  List<BarChartRect> barChartRects=new LinkedList<>();
  for (int i=0; i < values.length; i++) {
    float valY=(float)(values[i].getY() - minY);
    float ratY=(float)(valY / diffY);
    float y=graphheight * ratY;
    if (style.getValueDependentColor() != null) {
      paint.setColor(style.getValueDependentColor().get(values[i]));
    }
    float pad=style.padding;
    float left=(i * colwidth) + horstart;
    float top=(border - y) + graphheight;
    float right=left + colwidth;
    float bottom=graphheight + border - 1;
    if ((top - bottom) == 1) {
      if (mBarPositionToHighlight == i) {
        paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
        paint.setAlpha(75);
        canvas.drawRect(left + pad,10f,right - pad,bottom,paint);
      }
 else {
        paint.setColor(style.color);
        paint.setAlpha(25);
        Shader shader=new LinearGradient(left + pad,bottom - 50,left + pad,bottom,Color.WHITE,Color.BLACK,Shader.TileMode.CLAMP);
        paint.setShader(shader);
        canvas.drawRect(left + pad,bottom - 50,right - pad,bottom,paint);
        paint.setShader(null);
      }
    }
 else {
      if (mBarPositionToHighlight == i) {
        paint.setColor(getResources().getColor(R.color.stats_views_hover_color));
      }
 else {
        paint.setColor(style.color);
      }
      canvas.drawRect(left + pad,top,right - pad,bottom,paint);
    }
    barChartRects.add(new BarChartRect(left + pad,top,right - pad,bottom));
  }
  mSeriesRectsDrawedOnScreen.add(barChartRects);
}",0.996806812134114
14467,"public RestListener(Activity activity,StatsService.StatsEndpointsEnum endpointName,String blogId,StatsTimeframe timeframe){
  mActivityRef=new WeakReference<Activity>(activity);
  mRequestBlogId=blogId;
  mTimeframe=timeframe;
  mEndpointName=endpointName;
}","public RestListener(Activity activity,StatsService.StatsEndpointsEnum endpointName,String blogId,StatsTimeframe timeframe){
  mActivityRef=new WeakReference<>(activity);
  mRequestBlogId=blogId;
  mTimeframe=timeframe;
  mEndpointName=endpointName;
}",0.984251968503937
14468,"public void setEntryTextOrLink(String linkUrl,String linkName){
  if (entryTextView == null) {
    return;
  }
  boolean isLink=false;
  if (TextUtils.isEmpty(linkUrl)) {
    entryTextView.setText(linkName);
    isLink=(linkName != null && linkName.startsWith(""String_Node_Str""));
  }
 else   if (TextUtils.isEmpty(linkName)) {
    entryTextView.setText(linkUrl);
    isLink=(linkUrl != null && linkUrl.startsWith(""String_Node_Str""));
  }
 else {
    entryTextView.setText(Html.fromHtml(""String_Node_Str"" + linkUrl + ""String_Node_Str""+ linkName+ ""String_Node_Str""));
  }
  if (isLink) {
    entryTextView.setMovementMethod(StatsWPLinkMovementMethod.getInstance());
    Linkify.addLinks(entryTextView,Linkify.WEB_URLS);
  }
  StatsUIHelper.removeUnderlines((Spannable)entryTextView.getText());
}","public void setEntryTextOrLink(String linkUrl,String linkName){
  if (entryTextView == null) {
    return;
  }
  boolean isLink=false;
  if (TextUtils.isEmpty(linkUrl)) {
    entryTextView.setText(linkName);
    isLink=(linkName != null && linkName.startsWith(""String_Node_Str""));
  }
 else   if (TextUtils.isEmpty(linkName)) {
    entryTextView.setText(linkUrl);
    isLink=(linkUrl != null && linkUrl.startsWith(""String_Node_Str""));
  }
 else {
    entryTextView.setText(Html.fromHtml(""String_Node_Str"" + linkUrl + ""String_Node_Str""+ linkName+ ""String_Node_Str""));
  }
  if (isLink) {
    entryTextView.setMovementMethod(StatsWPLinkMovementMethod.getInstance());
    Linkify.addLinks(entryTextView,Linkify.WEB_URLS);
  }
  entryTextView.setHighlightColor(entryTextView.getResources().getColor(R.color.transparent));
  StatsUIHelper.removeUnderlines((Spannable)entryTextView.getText());
}",0.9435531788472964
14469,"public AuthorModel(String blogId,String date,JSONObject authorJSON) throws JSONException {
  setBlogId(blogId);
  setDate(StatsUtils.toMs(date));
  setGroupId(authorJSON.getString(""String_Node_Str""));
  setName(authorJSON.getString(""String_Node_Str""));
  setViews(authorJSON.getInt(""String_Node_Str""));
  setAvatar(JSONUtil.getString(authorJSON,""String_Node_Str""));
  JSONObject followData=authorJSON.optJSONObject(""String_Node_Str"");
  if (followData != null) {
    this.mFollowData=new FollowDataModel(followData);
  }
  JSONArray postsJSON=authorJSON.getJSONArray(""String_Node_Str"");
  mPosts=new ArrayList<SingleItemModel>(authorJSON.length());
  for (int i=0; i < postsJSON.length(); i++) {
    JSONObject currentPostJSON=postsJSON.getJSONObject(i);
    String postId=String.valueOf(currentPostJSON.getInt(""String_Node_Str""));
    String title=currentPostJSON.getString(""String_Node_Str"");
    int views=currentPostJSON.getInt(""String_Node_Str"");
    String url=currentPostJSON.getString(""String_Node_Str"");
    SingleItemModel currentPost=new SingleItemModel(mBlogId,mDate,postId,title,views,url,null);
    mPosts.add(currentPost);
  }
}","public AuthorModel(String blogId,String date,JSONObject authorJSON) throws JSONException {
  setBlogId(blogId);
  setDate(StatsUtils.toMs(date));
  setGroupId(authorJSON.getString(""String_Node_Str""));
  setName(authorJSON.getString(""String_Node_Str""));
  setViews(authorJSON.getInt(""String_Node_Str""));
  setAvatar(JSONUtil.getString(authorJSON,""String_Node_Str""));
  JSONObject followData=authorJSON.optJSONObject(""String_Node_Str"");
  if (followData != null) {
    this.mFollowData=new FollowDataModel(followData);
  }
  JSONArray postsJSON=authorJSON.getJSONArray(""String_Node_Str"");
  mPosts=new ArrayList<>(authorJSON.length());
  for (int i=0; i < postsJSON.length(); i++) {
    JSONObject currentPostJSON=postsJSON.getJSONObject(i);
    String postId=String.valueOf(currentPostJSON.getInt(""String_Node_Str""));
    String title=currentPostJSON.getString(""String_Node_Str"");
    int views=currentPostJSON.getInt(""String_Node_Str"");
    String url=currentPostJSON.getString(""String_Node_Str"");
    SingleItemModel currentPost=new SingleItemModel(mBlogId,mDate,postId,title,views,url,null);
    mPosts.add(currentPost);
  }
}",0.9933949801849404
14470,"public AuthorsModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONArray authorsJSONArray;
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherViews=firstDayObject.optInt(""String_Node_Str"");
  authorsJSONArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (authorsJSONArray != null) {
    mAuthors=new ArrayList<AuthorModel>(authorsJSONArray.length());
    for (int i=0; i < authorsJSONArray.length(); i++) {
      try {
        JSONObject currentAuthorJSON=authorsJSONArray.getJSONObject(i);
        AuthorModel currentAuthor=new AuthorModel(blogID,mDate,currentAuthorJSON);
        mAuthors.add(currentAuthor);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}","public AuthorsModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONArray authorsJSONArray;
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherViews=firstDayObject.optInt(""String_Node_Str"");
  authorsJSONArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (authorsJSONArray != null) {
    mAuthors=new ArrayList<>(authorsJSONArray.length());
    for (int i=0; i < authorsJSONArray.length(); i++) {
      try {
        JSONObject currentAuthorJSON=authorsJSONArray.getJSONObject(i);
        AuthorModel currentAuthor=new AuthorModel(blogID,mDate,currentAuthorJSON);
        mAuthors.add(currentAuthor);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}",0.9953606073386756
14471,"public ClickGroupModel(String blogId,String date,JSONObject clickGroupJSON) throws JSONException {
  setBlogId(blogId);
  setDate(StatsUtils.toMs(date));
  setGroupId(clickGroupJSON.getString(""String_Node_Str""));
  setName(clickGroupJSON.getString(""String_Node_Str""));
  setViews(clickGroupJSON.getInt(""String_Node_Str""));
  setIcon(JSONUtil.getString(clickGroupJSON,""String_Node_Str""));
  if (!TextUtils.isEmpty(JSONUtil.getString(clickGroupJSON,""String_Node_Str""))) {
    setUrl(JSONUtil.getString(clickGroupJSON,""String_Node_Str""));
  }
 else {
    JSONArray childrenJSON=clickGroupJSON.getJSONArray(""String_Node_Str"");
    mClicks=new ArrayList<SingleItemModel>(childrenJSON.length());
    for (int i=0; i < childrenJSON.length(); i++) {
      JSONObject currentResultJSON=childrenJSON.getJSONObject(i);
      String name=currentResultJSON.getString(""String_Node_Str"");
      int totals=currentResultJSON.getInt(""String_Node_Str"");
      String icon=currentResultJSON.optString(""String_Node_Str"");
      String url=currentResultJSON.optString(""String_Node_Str"");
      SingleItemModel rm=new SingleItemModel(blogId,date,null,name,totals,url,icon);
      mClicks.add(rm);
    }
  }
}","public ClickGroupModel(String blogId,String date,JSONObject clickGroupJSON) throws JSONException {
  setBlogId(blogId);
  setDate(StatsUtils.toMs(date));
  setGroupId(clickGroupJSON.getString(""String_Node_Str""));
  setName(clickGroupJSON.getString(""String_Node_Str""));
  setViews(clickGroupJSON.getInt(""String_Node_Str""));
  setIcon(JSONUtil.getString(clickGroupJSON,""String_Node_Str""));
  if (!TextUtils.isEmpty(JSONUtil.getString(clickGroupJSON,""String_Node_Str""))) {
    setUrl(JSONUtil.getString(clickGroupJSON,""String_Node_Str""));
  }
 else {
    JSONArray childrenJSON=clickGroupJSON.getJSONArray(""String_Node_Str"");
    mClicks=new ArrayList<>(childrenJSON.length());
    for (int i=0; i < childrenJSON.length(); i++) {
      JSONObject currentResultJSON=childrenJSON.getJSONObject(i);
      String name=currentResultJSON.getString(""String_Node_Str"");
      int totals=currentResultJSON.getInt(""String_Node_Str"");
      String icon=currentResultJSON.optString(""String_Node_Str"");
      String url=currentResultJSON.optString(""String_Node_Str"");
      SingleItemModel rm=new SingleItemModel(blogId,date,null,name,totals,url,icon);
      mClicks.add(rm);
    }
  }
}",0.6414934238438693
14472,"public ClicksModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONArray jClickGroupsArray;
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherClicks=firstDayObject.getInt(""String_Node_Str"");
  this.mTotalClicks=firstDayObject.getInt(""String_Node_Str"");
  jClickGroupsArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (jClickGroupsArray != null) {
    mClickGroups=new ArrayList<ClickGroupModel>(jClickGroupsArray.length());
    for (int i=0; i < jClickGroupsArray.length(); i++) {
      try {
        JSONObject currentGroupJSON=jClickGroupsArray.getJSONObject(i);
        ClickGroupModel currentGroupModel=new ClickGroupModel(blogID,mDate,currentGroupJSON);
        mClickGroups.add(currentGroupModel);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}","public ClicksModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONArray jClickGroupsArray;
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherClicks=firstDayObject.getInt(""String_Node_Str"");
  this.mTotalClicks=firstDayObject.getInt(""String_Node_Str"");
  jClickGroupsArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (jClickGroupsArray != null) {
    mClickGroups=new ArrayList<>(jClickGroupsArray.length());
    for (int i=0; i < jClickGroupsArray.length(); i++) {
      try {
        JSONObject currentGroupJSON=jClickGroupsArray.getJSONObject(i);
        ClickGroupModel currentGroupModel=new ClickGroupModel(blogID,mDate,currentGroupJSON);
        mClickGroups.add(currentGroupModel);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}",0.99412915851272
14473,"public CommentFollowersModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPage=response.getInt(""String_Node_Str"");
  this.mPages=response.getInt(""String_Node_Str"");
  this.mTotal=response.getInt(""String_Node_Str"");
  JSONArray postsJSONArray=response.optJSONArray(""String_Node_Str"");
  if (postsJSONArray != null) {
    mPosts=new ArrayList<SingleItemModel>(postsJSONArray.length());
    for (int i=0; i < postsJSONArray.length(); i++) {
      JSONObject currentPostJSON=postsJSONArray.getJSONObject(i);
      String postId=String.valueOf(currentPostJSON.getInt(""String_Node_Str""));
      String title=currentPostJSON.getString(""String_Node_Str"");
      int followers=currentPostJSON.getInt(""String_Node_Str"");
      String url=currentPostJSON.getString(""String_Node_Str"");
      SingleItemModel currentPost=new SingleItemModel(blogID,null,postId,title,followers,url,null);
      mPosts.add(currentPost);
    }
  }
}","public CommentFollowersModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPage=response.getInt(""String_Node_Str"");
  this.mPages=response.getInt(""String_Node_Str"");
  this.mTotal=response.getInt(""String_Node_Str"");
  JSONArray postsJSONArray=response.optJSONArray(""String_Node_Str"");
  if (postsJSONArray != null) {
    mPosts=new ArrayList<>(postsJSONArray.length());
    for (int i=0; i < postsJSONArray.length(); i++) {
      JSONObject currentPostJSON=postsJSONArray.getJSONObject(i);
      String postId=String.valueOf(currentPostJSON.getInt(""String_Node_Str""));
      String title=currentPostJSON.getString(""String_Node_Str"");
      int followers=currentPostJSON.getInt(""String_Node_Str"");
      String url=currentPostJSON.getString(""String_Node_Str"");
      SingleItemModel currentPost=new SingleItemModel(blogID,null,postId,title,followers,url,null);
      mPosts.add(currentPost);
    }
  }
}",0.531233595800525
14474,"public CommentsModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=response.getString(""String_Node_Str"");
  this.mMonthlyComments=response.getInt(""String_Node_Str"");
  this.mTotalComments=response.getInt(""String_Node_Str"");
  this.mMostActiveDay=response.getString(""String_Node_Str"");
  this.mMostActiveTime=response.getString(""String_Node_Str"");
  JSONArray postsJSONArray=response.optJSONArray(""String_Node_Str"");
  if (postsJSONArray != null) {
    mPosts=new ArrayList<SingleItemModel>(postsJSONArray.length());
    for (int i=0; i < postsJSONArray.length(); i++) {
      JSONObject currentPostJSON=postsJSONArray.getJSONObject(i);
      String itemID=String.valueOf(currentPostJSON.getInt(""String_Node_Str""));
      String name=currentPostJSON.getString(""String_Node_Str"");
      int totals=currentPostJSON.getInt(""String_Node_Str"");
      String link=currentPostJSON.getString(""String_Node_Str"");
      SingleItemModel currentPost=new SingleItemModel(blogID,mDate,itemID,name,totals,link,null);
      mPosts.add(currentPost);
    }
  }
  JSONArray authorsJSONArray=response.optJSONArray(""String_Node_Str"");
  if (authorsJSONArray != null) {
    mAuthors=new ArrayList<AuthorModel>(authorsJSONArray.length());
    for (int i=0; i < authorsJSONArray.length(); i++) {
      JSONObject currentAuthorJSON=authorsJSONArray.getJSONObject(i);
      String name=currentAuthorJSON.getString(""String_Node_Str"");
      int comments=currentAuthorJSON.getInt(""String_Node_Str"");
      String url=currentAuthorJSON.getString(""String_Node_Str"");
      String gravatar=currentAuthorJSON.getString(""String_Node_Str"");
      JSONObject followData=currentAuthorJSON.optJSONObject(""String_Node_Str"");
      AuthorModel currentAuthor=new AuthorModel(blogID,mDate,url,name,gravatar,comments,followData);
      mAuthors.add(currentAuthor);
    }
  }
}","public CommentsModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=response.getString(""String_Node_Str"");
  this.mMonthlyComments=response.getInt(""String_Node_Str"");
  this.mTotalComments=response.getInt(""String_Node_Str"");
  this.mMostActiveDay=response.getString(""String_Node_Str"");
  this.mMostActiveTime=response.getString(""String_Node_Str"");
  JSONArray postsJSONArray=response.optJSONArray(""String_Node_Str"");
  if (postsJSONArray != null) {
    mPosts=new ArrayList<>(postsJSONArray.length());
    for (int i=0; i < postsJSONArray.length(); i++) {
      JSONObject currentPostJSON=postsJSONArray.getJSONObject(i);
      String itemID=String.valueOf(currentPostJSON.getInt(""String_Node_Str""));
      String name=currentPostJSON.getString(""String_Node_Str"");
      int totals=currentPostJSON.getInt(""String_Node_Str"");
      String link=currentPostJSON.getString(""String_Node_Str"");
      SingleItemModel currentPost=new SingleItemModel(blogID,mDate,itemID,name,totals,link,null);
      mPosts.add(currentPost);
    }
  }
  JSONArray authorsJSONArray=response.optJSONArray(""String_Node_Str"");
  if (authorsJSONArray != null) {
    mAuthors=new ArrayList<>(authorsJSONArray.length());
    for (int i=0; i < authorsJSONArray.length(); i++) {
      JSONObject currentAuthorJSON=authorsJSONArray.getJSONObject(i);
      String name=currentAuthorJSON.getString(""String_Node_Str"");
      int comments=currentAuthorJSON.getInt(""String_Node_Str"");
      String url=currentAuthorJSON.getString(""String_Node_Str"");
      String gravatar=currentAuthorJSON.getString(""String_Node_Str"");
      JSONObject followData=currentAuthorJSON.optJSONObject(""String_Node_Str"");
      AuthorModel currentAuthor=new AuthorModel(blogID,mDate,url,name,gravatar,comments,followData);
      mAuthors.add(currentAuthor);
    }
  }
}",0.9930406852248392
14475,"public FollowersModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPage=response.getInt(""String_Node_Str"");
  this.mPages=response.getInt(""String_Node_Str"");
  this.mTotal=response.getInt(""String_Node_Str"");
  this.mTotalEmail=response.getInt(""String_Node_Str"");
  this.mTotalWPCom=response.getInt(""String_Node_Str"");
  JSONArray subscribersJSONArray=response.optJSONArray(""String_Node_Str"");
  if (subscribersJSONArray != null) {
    mSubscribers=new ArrayList<FollowerModel>(subscribersJSONArray.length());
    for (int i=0; i < subscribersJSONArray.length(); i++) {
      JSONObject currentAuthorJSON=subscribersJSONArray.getJSONObject(i);
      try {
        FollowerModel currentFollower=new FollowerModel(mBlogID,currentAuthorJSON);
        mSubscribers.add(currentFollower);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}","public FollowersModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPage=response.getInt(""String_Node_Str"");
  this.mPages=response.getInt(""String_Node_Str"");
  this.mTotal=response.getInt(""String_Node_Str"");
  this.mTotalEmail=response.getInt(""String_Node_Str"");
  this.mTotalWPCom=response.getInt(""String_Node_Str"");
  JSONArray subscribersJSONArray=response.optJSONArray(""String_Node_Str"");
  if (subscribersJSONArray != null) {
    mSubscribers=new ArrayList<>(subscribersJSONArray.length());
    for (int i=0; i < subscribersJSONArray.length(); i++) {
      JSONObject currentAuthorJSON=subscribersJSONArray.getJSONObject(i);
      try {
        FollowerModel currentFollower=new FollowerModel(mBlogID,currentAuthorJSON);
        mSubscribers.add(currentFollower);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}",0.9934902353530296
14476,"public GeoviewsModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  Iterator<String> keys=jDaysObject.keys();
  String firstDayKey=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(firstDayKey);
  this.otherViews=firstDayObject.getInt(""String_Node_Str"");
  this.totalViews=firstDayObject.getInt(""String_Node_Str"");
  JSONObject countryInfoJSON=response.optJSONObject(""String_Node_Str"");
  JSONArray viewsJSON=firstDayObject.optJSONArray(""String_Node_Str"");
  if (viewsJSON != null && countryInfoJSON != null) {
    countries=new ArrayList<GeoviewModel>(viewsJSON.length());
    for (int i=0; i < viewsJSON.length(); i++) {
      JSONObject currentCountryJSON=viewsJSON.getJSONObject(i);
      String currentCountryCode=currentCountryJSON.getString(""String_Node_Str"");
      int currentCountryViews=currentCountryJSON.getInt(""String_Node_Str"");
      String flagIcon=null;
      String countryFullName=null;
      JSONObject currentCountryDetails=countryInfoJSON.optJSONObject(currentCountryCode);
      if (currentCountryDetails != null) {
        flagIcon=currentCountryDetails.optString(""String_Node_Str"");
        countryFullName=currentCountryDetails.optString(""String_Node_Str"");
      }
      GeoviewModel m=new GeoviewModel(currentCountryCode,countryFullName,currentCountryViews,flagIcon);
      countries.add(m);
    }
    Collections.sort(countries,new java.util.Comparator<GeoviewModel>(){
      public int compare(      GeoviewModel o1,      GeoviewModel o2){
        return o2.getViews() - o1.getViews();
      }
    }
);
  }
}","public GeoviewsModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  Iterator<String> keys=jDaysObject.keys();
  String firstDayKey=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(firstDayKey);
  this.otherViews=firstDayObject.getInt(""String_Node_Str"");
  this.totalViews=firstDayObject.getInt(""String_Node_Str"");
  JSONObject countryInfoJSON=response.optJSONObject(""String_Node_Str"");
  JSONArray viewsJSON=firstDayObject.optJSONArray(""String_Node_Str"");
  if (viewsJSON != null && countryInfoJSON != null) {
    countries=new ArrayList<>(viewsJSON.length());
    for (int i=0; i < viewsJSON.length(); i++) {
      JSONObject currentCountryJSON=viewsJSON.getJSONObject(i);
      String currentCountryCode=currentCountryJSON.getString(""String_Node_Str"");
      int currentCountryViews=currentCountryJSON.getInt(""String_Node_Str"");
      String flagIcon=null;
      String countryFullName=null;
      JSONObject currentCountryDetails=countryInfoJSON.optJSONObject(currentCountryCode);
      if (currentCountryDetails != null) {
        flagIcon=currentCountryDetails.optString(""String_Node_Str"");
        countryFullName=currentCountryDetails.optString(""String_Node_Str"");
      }
      GeoviewModel m=new GeoviewModel(currentCountryCode,countryFullName,currentCountryViews,flagIcon);
      countries.add(m);
    }
    Collections.sort(countries,new java.util.Comparator<GeoviewModel>(){
      public int compare(      GeoviewModel o1,      GeoviewModel o2){
        return o2.getViews() - o1.getViews();
      }
    }
);
  }
}",0.9966536530953708
14477,"private void parseResponseObject(JSONObject response) throws JSONException {
  mDate=response.getString(""String_Node_Str"");
  mHighestDayAverage=response.getInt(""String_Node_Str"");
  mHighestWeekAverage=response.getInt(""String_Node_Str"");
  mHighestMonth=response.getInt(""String_Node_Str"");
  mYears=new LinkedList<Year>();
  mAverages=new LinkedList<Average>();
  mWeeks=new LinkedList<Week>();
  JSONArray dataJSON=response.getJSONArray(""String_Node_Str"");
  if (dataJSON != null) {
    JSONArray fieldsJSON=response.getJSONArray(""String_Node_Str"");
    try {
      fieldColumnsMapping=new HashMap<String,Integer>(2);
      for (int i=0; i < fieldsJSON.length(); i++) {
        final String field=fieldsJSON.getString(i);
        fieldColumnsMapping.put(field,i);
      }
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
      throw e;
    }
    VisitModel[] visitModels=new VisitModel[dataJSON.length()];
    int viewsColumnIndex=fieldColumnsMapping.get(""String_Node_Str"");
    int periodColumnIndex=fieldColumnsMapping.get(""String_Node_Str"");
    for (int i=0; i < dataJSON.length(); i++) {
      try {
        JSONArray currentDayData=dataJSON.getJSONArray(i);
        VisitModel currentVisitModel=new VisitModel();
        currentVisitModel.setPeriod(currentDayData.getString(periodColumnIndex));
        currentVisitModel.setViews(currentDayData.getInt(viewsColumnIndex));
        visitModels[i]=currentVisitModel;
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + i,e);
      }
    }
    mDayViews=visitModels;
  }
 else {
    mDayViews=null;
  }
  parseYears(response);
  parseAverages(response);
  parseWeeks(response);
}","private void parseResponseObject(JSONObject response) throws JSONException {
  mDate=response.getString(""String_Node_Str"");
  mHighestDayAverage=response.getInt(""String_Node_Str"");
  mHighestWeekAverage=response.getInt(""String_Node_Str"");
  mHighestMonth=response.getInt(""String_Node_Str"");
  mYears=new LinkedList<>();
  mAverages=new LinkedList<>();
  mWeeks=new LinkedList<>();
  JSONArray dataJSON=response.getJSONArray(""String_Node_Str"");
  if (dataJSON != null) {
    JSONArray fieldsJSON=response.getJSONArray(""String_Node_Str"");
    try {
      fieldColumnsMapping=new HashMap<>(2);
      for (int i=0; i < fieldsJSON.length(); i++) {
        final String field=fieldsJSON.getString(i);
        fieldColumnsMapping.put(field,i);
      }
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,""String_Node_Str"",e);
      throw e;
    }
    VisitModel[] visitModels=new VisitModel[dataJSON.length()];
    int viewsColumnIndex=fieldColumnsMapping.get(""String_Node_Str"");
    int periodColumnIndex=fieldColumnsMapping.get(""String_Node_Str"");
    for (int i=0; i < dataJSON.length(); i++) {
      try {
        JSONArray currentDayData=dataJSON.getJSONArray(i);
        VisitModel currentVisitModel=new VisitModel();
        currentVisitModel.setPeriod(currentDayData.getString(periodColumnIndex));
        currentVisitModel.setViews(currentDayData.getInt(viewsColumnIndex));
        visitModels[i]=currentVisitModel;
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + i,e);
      }
    }
    mDayViews=visitModels;
  }
 else {
    mDayViews=null;
  }
  parseYears(response);
  parseAverages(response);
  parseWeeks(response);
}",0.9914680788467196
14478,"public PublicizeModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=null;
  JSONArray services=response.getJSONArray(""String_Node_Str"");
  if (services.length() > 0) {
    mServices=new ArrayList<SingleItemModel>(services.length());
    for (int i=0; i < services.length(); i++) {
      JSONObject current=services.getJSONObject(i);
      String serviceName=current.getString(""String_Node_Str"");
      int followers=current.getInt(""String_Node_Str"");
      SingleItemModel currentItem=new SingleItemModel(blogID,mDate,null,serviceName,followers,null,null);
      mServices.add(currentItem);
    }
  }
}","public PublicizeModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=null;
  JSONArray services=response.getJSONArray(""String_Node_Str"");
  if (services.length() > 0) {
    mServices=new ArrayList<>(services.length());
    for (int i=0; i < services.length(); i++) {
      JSONObject current=services.getJSONObject(i);
      String serviceName=current.getString(""String_Node_Str"");
      int followers=current.getInt(""String_Node_Str"");
      SingleItemModel currentItem=new SingleItemModel(blogID,mDate,null,serviceName,followers,null,null);
      mServices.add(currentItem);
    }
  }
}",0.9883268482490272
14479,"public ReferrersModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONArray jGroupsArray;
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherViews=firstDayObject.optInt(""String_Node_Str"");
  this.mTotalViews=firstDayObject.optInt(""String_Node_Str"");
  jGroupsArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (jGroupsArray != null) {
    mGroups=new ArrayList<ReferrerGroupModel>(jGroupsArray.length());
    for (int i=0; i < jGroupsArray.length(); i++) {
      try {
        JSONObject currentGroupJSON=jGroupsArray.getJSONObject(i);
        ReferrerGroupModel currentGroupModel=new ReferrerGroupModel(blogID,mDate,currentGroupJSON);
        mGroups.add(currentGroupModel);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}","public ReferrersModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  JSONArray jGroupsArray;
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherViews=firstDayObject.optInt(""String_Node_Str"");
  this.mTotalViews=firstDayObject.optInt(""String_Node_Str"");
  jGroupsArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (jGroupsArray != null) {
    mGroups=new ArrayList<>(jGroupsArray.length());
    for (int i=0; i < jGroupsArray.length(); i++) {
      try {
        JSONObject currentGroupJSON=jGroupsArray.getJSONObject(i);
        ReferrerGroupModel currentGroupModel=new ReferrerGroupModel(blogID,mDate,currentGroupJSON);
        mGroups.add(currentGroupModel);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}",0.992776886035313
14480,"public TagsContainerModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=response.getString(""String_Node_Str"");
  JSONArray outerTags=response.getJSONArray(""String_Node_Str"");
  if (outerTags != null) {
    mTags=new ArrayList<TagsModel>(outerTags.length());
    for (int i=0; i < outerTags.length(); i++) {
      JSONObject current=outerTags.getJSONObject(i);
      mTags.add(new TagsModel(current));
    }
  }
}","public TagsContainerModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mDate=response.getString(""String_Node_Str"");
  JSONArray outerTags=response.getJSONArray(""String_Node_Str"");
  if (outerTags != null) {
    mTags=new ArrayList<>(outerTags.length());
    for (int i=0; i < outerTags.length(); i++) {
      JSONObject current=outerTags.getJSONObject(i);
      mTags.add(new TagsModel(current));
    }
  }
}",0.9901207464324918
14481,"public TagsModel(JSONObject responseJSON) throws JSONException {
  this.mViews=responseJSON.getInt(""String_Node_Str"");
  JSONArray innerTagsJSON=responseJSON.getJSONArray(""String_Node_Str"");
  mTags=new ArrayList<TagModel>(innerTagsJSON.length());
  for (int i=0; i < innerTagsJSON.length(); i++) {
    JSONObject currentTagJSON=innerTagsJSON.getJSONObject(i);
    TagModel currentTag=new TagModel(currentTagJSON);
    mTags.add(currentTag);
  }
}","public TagsModel(JSONObject responseJSON) throws JSONException {
  this.mViews=responseJSON.getInt(""String_Node_Str"");
  JSONArray innerTagsJSON=responseJSON.getJSONArray(""String_Node_Str"");
  mTags=new ArrayList<>(innerTagsJSON.length());
  for (int i=0; i < innerTagsJSON.length(); i++) {
    JSONObject currentTagJSON=innerTagsJSON.getJSONObject(i);
    TagModel currentTag=new TagModel(currentTagJSON);
    mTags.add(currentTag);
  }
}",0.9909706546275396
14482,"public TopPostsAndPagesModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONArray postViewsArray=null;
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  Iterator<String> keys=jDaysObject.keys();
  if (keys.hasNext()) {
    String key=keys.next();
    JSONObject jDateObject=jDaysObject.optJSONObject(key);
    postViewsArray=(jDateObject != null) ? jDateObject.getJSONArray(""String_Node_Str"") : null;
  }
  if (postViewsArray == null) {
    postViewsArray=new JSONArray();
  }
  ArrayList<SingleItemModel> list=new ArrayList<SingleItemModel>(postViewsArray.length());
  for (int i=0; i < postViewsArray.length(); i++) {
    try {
      JSONObject postObject=postViewsArray.getJSONObject(i);
      String itemID=postObject.getString(""String_Node_Str"");
      String itemTitle=postObject.getString(""String_Node_Str"");
      int itemTotal=postObject.getInt(""String_Node_Str"");
      String itemURL=postObject.getString(""String_Node_Str"");
      SingleItemModel currentModel=new SingleItemModel(blogID,mDate,itemID,itemTitle,itemTotal,itemURL,null);
      list.add(currentModel);
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
    }
  }
  this.mTopPostsAndPages=list;
}","public TopPostsAndPagesModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONArray postViewsArray=null;
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  Iterator<String> keys=jDaysObject.keys();
  if (keys.hasNext()) {
    String key=keys.next();
    JSONObject jDateObject=jDaysObject.optJSONObject(key);
    postViewsArray=(jDateObject != null) ? jDateObject.getJSONArray(""String_Node_Str"") : null;
  }
  if (postViewsArray == null) {
    postViewsArray=new JSONArray();
  }
  ArrayList<SingleItemModel> list=new ArrayList<>(postViewsArray.length());
  for (int i=0; i < postViewsArray.length(); i++) {
    try {
      JSONObject postObject=postViewsArray.getJSONObject(i);
      String itemID=postObject.getString(""String_Node_Str"");
      String itemTitle=postObject.getString(""String_Node_Str"");
      int itemTotal=postObject.getInt(""String_Node_Str"");
      String itemURL=postObject.getString(""String_Node_Str"");
      SingleItemModel currentModel=new SingleItemModel(blogID,mDate,itemID,itemTitle,itemTotal,itemURL,null);
      list.add(currentModel);
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
    }
  }
  this.mTopPostsAndPages=list;
}",0.9950576606260296
14483,"public VideoPlaysModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherPlays=firstDayObject.getInt(""String_Node_Str"");
  this.mTotalPlays=firstDayObject.getInt(""String_Node_Str"");
  JSONArray playsJSONArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (playsJSONArray != null) {
    mPlays=new ArrayList<SingleItemModel>(playsJSONArray.length());
    for (int i=0; i < playsJSONArray.length(); i++) {
      JSONObject currentVideoplaysJSON=playsJSONArray.getJSONObject(i);
      String postId=String.valueOf(currentVideoplaysJSON.getInt(""String_Node_Str""));
      String title=currentVideoplaysJSON.getString(""String_Node_Str"");
      int views=currentVideoplaysJSON.getInt(""String_Node_Str"");
      String url=currentVideoplaysJSON.getString(""String_Node_Str"");
      SingleItemModel currentPost=new SingleItemModel(blogID,mDate,postId,title,views,url,null);
      mPlays.add(currentPost);
    }
  }
}","public VideoPlaysModel(String blogID,JSONObject response) throws JSONException {
  this.mBlogID=blogID;
  this.mPeriod=response.getString(""String_Node_Str"");
  this.mDate=response.getString(""String_Node_Str"");
  JSONObject jDaysObject=response.getJSONObject(""String_Node_Str"");
  if (jDaysObject.length() == 0) {
    throw new JSONException(""String_Node_Str"");
  }
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherPlays=firstDayObject.getInt(""String_Node_Str"");
  this.mTotalPlays=firstDayObject.getInt(""String_Node_Str"");
  JSONArray playsJSONArray=firstDayObject.optJSONArray(""String_Node_Str"");
  if (playsJSONArray != null) {
    mPlays=new ArrayList<>(playsJSONArray.length());
    for (int i=0; i < playsJSONArray.length(); i++) {
      JSONObject currentVideoplaysJSON=playsJSONArray.getJSONObject(i);
      String postId=String.valueOf(currentVideoplaysJSON.getInt(""String_Node_Str""));
      String title=currentVideoplaysJSON.getString(""String_Node_Str"");
      int views=currentVideoplaysJSON.getInt(""String_Node_Str"");
      String url=currentVideoplaysJSON.getString(""String_Node_Str"");
      SingleItemModel currentPost=new SingleItemModel(blogID,mDate,postId,title,views,url,null);
      mPlays.add(currentPost);
    }
  }
}",0.9944008958566628
14484,"public VisitsModel(String blogID,JSONObject response) throws JSONException {
  this.setBlogID(blogID);
  this.setDate(response.getString(""String_Node_Str""));
  this.setUnit(response.getString(""String_Node_Str""));
  this.setFields(response.getJSONArray(""String_Node_Str"").toString());
  JSONArray dataJSON;
  try {
    dataJSON=response.getJSONArray(""String_Node_Str"");
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.STATS,this.getClass().getName() + ""String_Node_Str"",e);
    dataJSON=new JSONArray();
  }
  if (dataJSON == null || dataJSON.length() == 0) {
    mVisits=new ArrayList<VisitModel>(0);
  }
 else {
    HashMap<String,Integer> columnsMapping=new HashMap<String,Integer>(6);
    final JSONArray fieldsJSON=getFieldsJSON();
    if (fieldsJSON == null || fieldsJSON.length() == 0) {
      mVisits=new ArrayList<VisitModel>(0);
    }
 else {
      try {
        for (int i=0; i < fieldsJSON.length(); i++) {
          final String field=fieldsJSON.getString(i);
          columnsMapping.put(field,i);
        }
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + response.toString(),e);
        mVisits=new ArrayList<VisitModel>(0);
      }
    }
    int viewsColumnIndex=columnsMapping.get(""String_Node_Str"");
    int visitorsColumnIndex=columnsMapping.get(""String_Node_Str"");
    int likesColumnIndex=columnsMapping.get(""String_Node_Str"");
    int commentsColumnIndex=columnsMapping.get(""String_Node_Str"");
    int periodColumnIndex=columnsMapping.get(""String_Node_Str"");
    int numPoints=dataJSON.length();
    mVisits=new ArrayList<VisitModel>(numPoints);
    for (int i=0; i < numPoints; i++) {
      try {
        JSONArray currentDayData=dataJSON.getJSONArray(i);
        VisitModel currentVisitModel=new VisitModel();
        currentVisitModel.setPeriod(currentDayData.getString(periodColumnIndex));
        currentVisitModel.setViews(currentDayData.getInt(viewsColumnIndex));
        currentVisitModel.setVisitors(currentDayData.getInt(visitorsColumnIndex));
        currentVisitModel.setComments(currentDayData.getInt(commentsColumnIndex));
        currentVisitModel.setLikes(currentDayData.getInt(likesColumnIndex));
        mVisits.add(currentVisitModel);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}","public VisitsModel(String blogID,JSONObject response) throws JSONException {
  this.setBlogID(blogID);
  this.setDate(response.getString(""String_Node_Str""));
  this.setUnit(response.getString(""String_Node_Str""));
  this.setFields(response.getJSONArray(""String_Node_Str"").toString());
  JSONArray dataJSON;
  try {
    dataJSON=response.getJSONArray(""String_Node_Str"");
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.STATS,this.getClass().getName() + ""String_Node_Str"",e);
    dataJSON=new JSONArray();
  }
  if (dataJSON == null || dataJSON.length() == 0) {
    mVisits=new ArrayList<>(0);
  }
 else {
    HashMap<String,Integer> columnsMapping=new HashMap<>(6);
    final JSONArray fieldsJSON=getFieldsJSON();
    if (fieldsJSON == null || fieldsJSON.length() == 0) {
      mVisits=new ArrayList<>(0);
    }
 else {
      try {
        for (int i=0; i < fieldsJSON.length(); i++) {
          final String field=fieldsJSON.getString(i);
          columnsMapping.put(field,i);
        }
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + ""String_Node_Str"" + response.toString(),e);
        mVisits=new ArrayList<>(0);
      }
    }
    int viewsColumnIndex=columnsMapping.get(""String_Node_Str"");
    int visitorsColumnIndex=columnsMapping.get(""String_Node_Str"");
    int likesColumnIndex=columnsMapping.get(""String_Node_Str"");
    int commentsColumnIndex=columnsMapping.get(""String_Node_Str"");
    int periodColumnIndex=columnsMapping.get(""String_Node_Str"");
    int numPoints=dataJSON.length();
    mVisits=new ArrayList<>(numPoints);
    for (int i=0; i < numPoints; i++) {
      try {
        JSONArray currentDayData=dataJSON.getJSONArray(i);
        VisitModel currentVisitModel=new VisitModel();
        currentVisitModel.setPeriod(currentDayData.getString(periodColumnIndex));
        currentVisitModel.setViews(currentDayData.getInt(viewsColumnIndex));
        currentVisitModel.setVisitors(currentDayData.getInt(visitorsColumnIndex));
        currentVisitModel.setComments(currentDayData.getInt(commentsColumnIndex));
        currentVisitModel.setLikes(currentDayData.getInt(likesColumnIndex));
        mVisits.add(currentVisitModel);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,""String_Node_Str"" + i + ""String_Node_Str""+ response.toString(),e);
      }
    }
  }
}",0.9886506935687264
14485,"@Override public void onRefreshStarted(){
  if (!NetworkUtils.checkConnection(getBaseContext())) {
    mSwipeToRefreshHelper.setRefreshing(false);
    return;
  }
  if (mIsUpdatingStats) {
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  loadStatsFragments(true,true,true);
  refreshStats(mCurrentTimeframe,StatsUtils.getCurrentDateTZ(mLocalBlogID),true);
}","@Override public void onRefreshStarted(){
  if (!NetworkUtils.checkConnection(getBaseContext())) {
    mSwipeToRefreshHelper.setRefreshing(false);
    return;
  }
  if (mIsUpdatingStats) {
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
  loadStatsFragments(true,true,true);
  refreshStats(mCurrentTimeframe,mRequestedDate,true);
}",0.7770534550195567
14486,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.STATS_ACCESSED);
  }
  mNoMenuDrawer=getIntent().getBooleanExtra(ARG_NO_MENU_DRAWER,false);
  ActionBar actionBar=getSupportActionBar();
  if (mNoMenuDrawer) {
    setContentView(R.layout.stats_activity);
    if (actionBar != null) {
      actionBar.setDisplayHomeAsUpEnabled(true);
    }
  }
 else {
    createMenuDrawer(R.layout.stats_activity);
  }
  mFragmentContainer=(LinearLayout)findViewById(R.id.stats_fragment_container);
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(SwipeRefreshLayout)findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!NetworkUtils.checkConnection(getBaseContext())) {
        mSwipeToRefreshHelper.setRefreshing(false);
        return;
      }
      if (mIsUpdatingStats) {
        AppLog.w(T.STATS,""String_Node_Str"");
        return;
      }
      loadStatsFragments(true,true,true);
      refreshStats(mCurrentTimeframe,StatsUtils.getCurrentDateTZ(mLocalBlogID),true);
    }
  }
);
  setTitle(R.string.stats);
  if (savedInstanceState != null) {
    mNavPosition=savedInstanceState.getInt(SAVED_NAV_POSITION);
    mResultCode=savedInstanceState.getInt(SAVED_WP_LOGIN_STATE);
    mLocalBlogID=savedInstanceState.getInt(ARG_LOCAL_TABLE_BLOG_ID);
    mCurrentTimeframe=(StatsTimeframe)savedInstanceState.getSerializable(SAVED_STATS_TIMEFRAME);
    mRequestedDate=savedInstanceState.getString(SAVED_STATS_REQUESTED_DATE);
  }
 else   if (getIntent() != null) {
    mLocalBlogID=getIntent().getIntExtra(ARG_LOCAL_TABLE_BLOG_ID,-1);
    if (getIntent().hasExtra(SAVED_STATS_TIMEFRAME)) {
      mCurrentTimeframe=(StatsTimeframe)getIntent().getSerializableExtra(SAVED_STATS_TIMEFRAME);
    }
 else {
      mCurrentTimeframe=StatsTimeframe.DAY;
    }
    mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
  }
  final Blog currentBlog=WordPress.getBlog(mLocalBlogID);
  if (currentBlog == null) {
    AppLog.e(T.STATS,""String_Node_Str"" + mLocalBlogID + ""String_Node_Str"");
    Toast.makeText(this,R.string.stats_no_blog,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  loadStatsFragments(false,true,true);
  ScrollViewExt scrollView=(ScrollViewExt)findViewById(R.id.scroll_view_stats);
  if (scrollView != null) {
    scrollView.setScrollViewListener(this);
  }
  if (!mNoMenuDrawer && actionBar != null && mSpinner == null) {
    final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
    if (toolbar != null) {
      View view=View.inflate(this,R.layout.reader_spinner,toolbar);
      mSpinner=(Spinner)view.findViewById(R.id.action_bar_spinner);
      StatsTimeframe[] timeframes={StatsTimeframe.DAY,StatsTimeframe.WEEK,StatsTimeframe.MONTH,StatsTimeframe.YEAR};
      mTimeframeSpinnerAdapter=new TimeframeSpinnerAdapter(this,timeframes);
      actionBar.setDisplayShowTitleEnabled(false);
      mSpinner.setAdapter(mTimeframeSpinnerAdapter);
      mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> parent,        View view,        int position,        long id){
          final StatsTimeframe selectedTimeframe=(StatsTimeframe)mTimeframeSpinnerAdapter.getItem(position);
          if (mCurrentTimeframe == selectedTimeframe) {
            AppLog.d(T.STATS,""String_Node_Str"" + selectedTimeframe.getLabel());
            return;
          }
          AppLog.d(T.STATS,""String_Node_Str"" + selectedTimeframe.getLabel());
          mCurrentTimeframe=selectedTimeframe;
          if (NetworkUtils.isNetworkAvailable(StatsActivity.this)) {
            String date=StatsUtils.getCurrentDateTZ(mLocalBlogID);
            mSwipeToRefreshHelper.setRefreshing(true);
            refreshStats(selectedTimeframe,date,true);
            loadStatsFragments(true,true,false);
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> parent){
        }
      }
);
    }
  }
  selectCurrentTimeframeInActionBar();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  if (savedInstanceState == null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.STATS_ACCESSED);
  }
  mNoMenuDrawer=getIntent().getBooleanExtra(ARG_NO_MENU_DRAWER,false);
  ActionBar actionBar=getSupportActionBar();
  if (mNoMenuDrawer) {
    setContentView(R.layout.stats_activity);
    if (actionBar != null) {
      actionBar.setDisplayHomeAsUpEnabled(true);
    }
  }
 else {
    createMenuDrawer(R.layout.stats_activity);
  }
  mFragmentContainer=(LinearLayout)findViewById(R.id.stats_fragment_container);
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(SwipeRefreshLayout)findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!NetworkUtils.checkConnection(getBaseContext())) {
        mSwipeToRefreshHelper.setRefreshing(false);
        return;
      }
      if (mIsUpdatingStats) {
        AppLog.w(T.STATS,""String_Node_Str"");
        return;
      }
      mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
      loadStatsFragments(true,true,true);
      refreshStats(mCurrentTimeframe,mRequestedDate,true);
    }
  }
);
  setTitle(R.string.stats);
  if (savedInstanceState != null) {
    mNavPosition=savedInstanceState.getInt(SAVED_NAV_POSITION);
    mResultCode=savedInstanceState.getInt(SAVED_WP_LOGIN_STATE);
    mLocalBlogID=savedInstanceState.getInt(ARG_LOCAL_TABLE_BLOG_ID);
    mCurrentTimeframe=(StatsTimeframe)savedInstanceState.getSerializable(SAVED_STATS_TIMEFRAME);
    mRequestedDate=savedInstanceState.getString(SAVED_STATS_REQUESTED_DATE);
  }
 else   if (getIntent() != null) {
    mLocalBlogID=getIntent().getIntExtra(ARG_LOCAL_TABLE_BLOG_ID,-1);
    if (getIntent().hasExtra(SAVED_STATS_TIMEFRAME)) {
      mCurrentTimeframe=(StatsTimeframe)getIntent().getSerializableExtra(SAVED_STATS_TIMEFRAME);
    }
 else {
      mCurrentTimeframe=StatsTimeframe.DAY;
    }
    mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
  }
  final Blog currentBlog=WordPress.getBlog(mLocalBlogID);
  if (currentBlog == null) {
    AppLog.e(T.STATS,""String_Node_Str"" + mLocalBlogID + ""String_Node_Str"");
    Toast.makeText(this,R.string.stats_no_blog,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  loadStatsFragments(false,true,true);
  ScrollViewExt scrollView=(ScrollViewExt)findViewById(R.id.scroll_view_stats);
  if (scrollView != null) {
    scrollView.setScrollViewListener(this);
  }
  if (!mNoMenuDrawer && actionBar != null && mSpinner == null) {
    final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
    if (toolbar != null) {
      View view=View.inflate(this,R.layout.reader_spinner,toolbar);
      mSpinner=(Spinner)view.findViewById(R.id.action_bar_spinner);
      StatsTimeframe[] timeframes={StatsTimeframe.DAY,StatsTimeframe.WEEK,StatsTimeframe.MONTH,StatsTimeframe.YEAR};
      mTimeframeSpinnerAdapter=new TimeframeSpinnerAdapter(this,timeframes);
      actionBar.setDisplayShowTitleEnabled(false);
      mSpinner.setAdapter(mTimeframeSpinnerAdapter);
      mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> parent,        View view,        int position,        long id){
          final StatsTimeframe selectedTimeframe=(StatsTimeframe)mTimeframeSpinnerAdapter.getItem(position);
          if (mCurrentTimeframe == selectedTimeframe) {
            AppLog.d(T.STATS,""String_Node_Str"" + selectedTimeframe.getLabel());
            return;
          }
          AppLog.d(T.STATS,""String_Node_Str"" + selectedTimeframe.getLabel());
          mCurrentTimeframe=selectedTimeframe;
          if (NetworkUtils.isNetworkAvailable(StatsActivity.this)) {
            String date=StatsUtils.getCurrentDateTZ(mLocalBlogID);
            mSwipeToRefreshHelper.setRefreshing(true);
            refreshStats(selectedTimeframe,date,true);
            loadStatsFragments(true,true,false);
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> parent){
        }
      }
);
    }
  }
  selectCurrentTimeframeInActionBar();
}",0.9786339754816112
14487,"private static String getCurrentDateTimeTZ(String blogTimeZoneOption,String pattern){
  Date date=new Date();
  SimpleDateFormat gmtDf=new SimpleDateFormat(pattern);
  if (blogTimeZoneOption == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return gmtDf.format(date);
  }
  if (blogTimeZoneOption.equals(""String_Node_Str"")) {
    gmtDf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  }
 else   if (blogTimeZoneOption.startsWith(""String_Node_Str"")) {
    gmtDf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str"" + blogTimeZoneOption));
  }
 else {
    if (blogTimeZoneOption.startsWith(""String_Node_Str"")) {
      gmtDf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str"" + blogTimeZoneOption));
    }
 else {
      gmtDf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str"" + blogTimeZoneOption));
    }
  }
  return gmtDf.format(date);
}","private static String getCurrentDateTimeTZ(String blogTimeZoneOption,String pattern){
  Date date=new Date();
  SimpleDateFormat gmtDf=new SimpleDateFormat(pattern);
  if (blogTimeZoneOption == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return gmtDf.format(date);
  }
  AppLog.d(T.STATS,""String_Node_Str"" + blogTimeZoneOption);
  String timezoneNormalized;
  if (blogTimeZoneOption.equals(""String_Node_Str"") || blogTimeZoneOption.equals(""String_Node_Str"")) {
    timezoneNormalized=""String_Node_Str"";
  }
 else {
    String[] timezoneSplitted=org.apache.commons.lang.StringUtils.split(blogTimeZoneOption,""String_Node_Str"");
    timezoneNormalized=timezoneSplitted[0];
    if (timezoneSplitted.length > 1 && timezoneSplitted[1].equals(""String_Node_Str"")) {
      timezoneNormalized+=""String_Node_Str"";
    }
    if (timezoneNormalized.startsWith(""String_Node_Str"")) {
      timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
    }
 else {
      if (timezoneNormalized.startsWith(""String_Node_Str"")) {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
 else {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
    }
  }
  AppLog.d(T.STATS,""String_Node_Str"" + timezoneNormalized);
  gmtDf.setTimeZone(TimeZone.getTimeZone(timezoneNormalized));
  return gmtDf.format(date);
}",0.350091407678245
14488,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.stats_activity_view_all);
  if (savedInstanceState == null) {
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(SwipeRefreshLayout)findViewById(R.id.ptr_layout),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!NetworkUtils.checkConnection(getBaseContext())) {
        mSwipeToRefreshHelper.setRefreshing(false);
        return;
      }
      refreshStats();
    }
  }
);
  if (savedInstanceState != null) {
    mLocalBlogID=savedInstanceState.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    Serializable oldData=savedInstanceState.getSerializable(StatsAbstractFragment.ARG_REST_RESPONSE);
    if (oldData != null && oldData instanceof Serializable[]) {
      mRestResponse=(Serializable[])oldData;
    }
    mTimeframe=(StatsTimeframe)savedInstanceState.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=savedInstanceState.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=savedInstanceState.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,0);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=savedInstanceState.getInt(StatsAbstractListFragment.ARGS_TOP_PAGER_SELECTED_BUTTON_INDEX,0);
  }
 else   if (getIntent() != null) {
    Bundle extras=getIntent().getExtras();
    mLocalBlogID=extras.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    mTimeframe=(StatsTimeframe)extras.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=extras.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=extras.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,0);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=extras.getInt(StatsAbstractListFragment.ARGS_TOP_PAGER_SELECTED_BUTTON_INDEX,0);
  }
  TextView dateTextView=(TextView)findViewById(R.id.stats_summary_date);
  dateTextView.setVisibility(View.GONE);
  setTitle(getDateForDisplayInLabels(mDate,mTimeframe));
  FragmentManager fm=getFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  mFragment=(StatsAbstractListFragment)fm.findFragmentByTag(""String_Node_Str"" + getInnerFragmentTAG());
  if (mFragment == null) {
    mFragment=getInnerFragment();
    ft.replace(R.id.stats_single_view_fragment,mFragment,""String_Node_Str"" + getInnerFragmentTAG());
    ft.commit();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.stats_activity_view_all);
  if (savedInstanceState == null) {
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(SwipeRefreshLayout)findViewById(R.id.ptr_layout),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!NetworkUtils.checkConnection(getBaseContext())) {
        mSwipeToRefreshHelper.setRefreshing(false);
        return;
      }
      refreshStats();
    }
  }
);
  if (savedInstanceState != null) {
    mLocalBlogID=savedInstanceState.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    Serializable oldData=savedInstanceState.getSerializable(StatsAbstractFragment.ARG_REST_RESPONSE);
    if (oldData != null && oldData instanceof Serializable[]) {
      mRestResponse=(Serializable[])oldData;
    }
    mTimeframe=(StatsTimeframe)savedInstanceState.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=savedInstanceState.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=savedInstanceState.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,0);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=savedInstanceState.getInt(StatsAbstractListFragment.ARGS_TOP_PAGER_SELECTED_BUTTON_INDEX,0);
  }
 else   if (getIntent() != null) {
    Bundle extras=getIntent().getExtras();
    mLocalBlogID=extras.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    mTimeframe=(StatsTimeframe)extras.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=extras.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=extras.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,0);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=extras.getInt(StatsAbstractListFragment.ARGS_TOP_PAGER_SELECTED_BUTTON_INDEX,0);
  }
  TextView dateTextView=(TextView)findViewById(R.id.stats_summary_date);
switch (mStatsViewType) {
case TOP_POSTS_AND_PAGES:
case REFERRERS:
case CLICKS:
case GEOVIEWS:
case AUTHORS:
case VIDEO_PLAYS:
    dateTextView.setText(getDateForDisplayInLabels(mDate,mTimeframe));
  dateTextView.setVisibility(View.VISIBLE);
break;
default :
dateTextView.setVisibility(View.GONE);
break;
}
setTitle(R.string.stats);
FragmentManager fm=getFragmentManager();
FragmentTransaction ft=fm.beginTransaction();
mFragment=(StatsAbstractListFragment)fm.findFragmentByTag(""String_Node_Str"" + getInnerFragmentTAG());
if (mFragment == null) {
mFragment=getInnerFragment();
ft.replace(R.id.stats_single_view_fragment,mFragment,""String_Node_Str"" + getInnerFragmentTAG());
ft.commit();
}
}",0.8936567164179104
14489,"private String getRestPath(StatsService.StatsEndpointsEnum restEndpoint,int pageNumber){
  final String blogId=StatsUtils.getBlogId(mLocalBlogID);
  String endpointPath=""String_Node_Str"";
switch (restEndpoint) {
case TOP_POSTS:
    endpointPath=""String_Node_Str"";
  break;
case REFERRERS:
endpointPath=""String_Node_Str"";
break;
case CLICKS:
endpointPath=""String_Node_Str"";
break;
case GEO_VIEWS:
endpointPath=""String_Node_Str"";
break;
case AUTHORS:
endpointPath=""String_Node_Str"";
break;
case VIDEO_PLAYS:
endpointPath=""String_Node_Str"";
break;
case COMMENTS:
endpointPath=""String_Node_Str"";
break;
case TAGS_AND_CATEGORIES:
endpointPath=""String_Node_Str"";
break;
case PUBLICIZE:
endpointPath=""String_Node_Str"";
break;
case FOLLOWERS_WPCOM:
endpointPath=""String_Node_Str"";
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,MAX_RESULT_PER_PAGE,pageNumber);
case FOLLOWERS_EMAIL:
endpointPath=""String_Node_Str"";
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,MAX_RESULT_PER_PAGE,pageNumber);
case COMMENT_FOLLOWERS:
endpointPath=""String_Node_Str"";
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,MAX_RESULT_PER_PAGE,1);
}
int numberOfItemsToLoad=100;
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,numberOfItemsToLoad);
}","private String getRestPath(StatsService.StatsEndpointsEnum restEndpoint,int pageNumber){
  final String blogId=StatsUtils.getBlogId(mLocalBlogID);
  String endpointPath=""String_Node_Str"";
switch (restEndpoint) {
case TOP_POSTS:
    endpointPath=""String_Node_Str"";
  break;
case REFERRERS:
endpointPath=""String_Node_Str"";
break;
case CLICKS:
endpointPath=""String_Node_Str"";
break;
case GEO_VIEWS:
endpointPath=""String_Node_Str"";
break;
case AUTHORS:
endpointPath=""String_Node_Str"";
break;
case VIDEO_PLAYS:
endpointPath=""String_Node_Str"";
break;
case COMMENTS:
endpointPath=""String_Node_Str"";
break;
case TAGS_AND_CATEGORIES:
endpointPath=""String_Node_Str"";
break;
case PUBLICIZE:
endpointPath=""String_Node_Str"";
break;
case FOLLOWERS_WPCOM:
endpointPath=""String_Node_Str"";
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,MAX_RESULTS_PER_PAGE,pageNumber);
case FOLLOWERS_EMAIL:
endpointPath=""String_Node_Str"";
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,MAX_RESULTS_PER_PAGE,pageNumber);
case COMMENT_FOLLOWERS:
endpointPath=""String_Node_Str"";
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,MAX_RESULTS_PER_PAGE,1);
}
return String.format(""String_Node_Str"",blogId,endpointPath,mTimeframe.getLabelForRestCall(),mDate,MAX_RESULTS_REQUESTED);
}",0.9744136460554372
14490,"@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  String name=children.getTitle();
  int total=children.getTotals();
  holder.setEntryTextOrLink(name,name);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.networkImageView.setVisibility(View.GONE);
  if (StringUtils.isNotBlank(children.getUrl())) {
    holder.imgMore.setVisibility(View.VISIBLE);
    holder.imgMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        PopupMenu popup=new PopupMenu(activity,view);
        MenuItem menuItem=popup.getMenu().add(getString(R.string.view_in_browser));
        menuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
          @Override public boolean onMenuItemClick(          MenuItem item){
            WPWebViewActivity.openURL(activity,children.getUrl());
            return true;
          }
        }
);
        popup.show();
      }
    }
);
  }
  return convertView;
}","@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  String name=children.getTitle();
  int total=children.getTotals();
  String icon=children.getIcon();
  holder.setEntryTextOrLink(children.getUrl(),name);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.networkImageView.setVisibility(View.GONE);
  holder.imgMore.setVisibility(View.GONE);
  return convertView;
}",0.6472663139329806
14491,"public ReferrerGroupModel(String blogId,String date,JSONObject groupJSON) throws JSONException {
  setBlogId(blogId);
  setDate(StatsUtils.toMs(date));
  setGroupId(groupJSON.getString(""String_Node_Str""));
  setName(groupJSON.getString(""String_Node_Str""));
  setTotal(groupJSON.getInt(""String_Node_Str""));
  if (groupJSON.has(""String_Node_Str"") && !groupJSON.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    setIcon(groupJSON.getString(""String_Node_Str""));
  }
  if (groupJSON.has(""String_Node_Str"") && !groupJSON.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    setUrl(groupJSON.getString(""String_Node_Str""));
  }
 else {
    JSONArray resultsJSON=groupJSON.getJSONArray(""String_Node_Str"");
    mResults=new ArrayList<SingleItemModel>(resultsJSON.length());
    for (int i=0; i < resultsJSON.length(); i++) {
      JSONObject currentResultJSON=resultsJSON.getJSONObject(i);
      String name=currentResultJSON.getString(""String_Node_Str"");
      int totals=currentResultJSON.getInt(""String_Node_Str"");
      String icon=currentResultJSON.optString(""String_Node_Str"");
      SingleItemModel rm=new SingleItemModel(blogId,date,null,name,totals,null,icon);
      mResults.add(rm);
    }
  }
}","public ReferrerGroupModel(String blogId,String date,JSONObject groupJSON) throws JSONException {
  setBlogId(blogId);
  setDate(StatsUtils.toMs(date));
  setGroupId(groupJSON.getString(""String_Node_Str""));
  setName(groupJSON.getString(""String_Node_Str""));
  setTotal(groupJSON.getInt(""String_Node_Str""));
  if (groupJSON.has(""String_Node_Str"") && !groupJSON.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    setIcon(groupJSON.getString(""String_Node_Str""));
  }
  if (groupJSON.has(""String_Node_Str"") && !groupJSON.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    setUrl(groupJSON.getString(""String_Node_Str""));
  }
 else {
    JSONArray resultsJSON=groupJSON.getJSONArray(""String_Node_Str"");
    mResults=new ArrayList<>();
    for (int i=0; i < resultsJSON.length(); i++) {
      JSONObject currentResultJSON=resultsJSON.getJSONObject(i);
      if (currentResultJSON.has(""String_Node_Str"")) {
        JSONArray currentResultChildensJSON=currentResultJSON.getJSONArray(""String_Node_Str"");
        for (int j=0; j < currentResultChildensJSON.length(); j++) {
          JSONObject currentChild=currentResultChildensJSON.getJSONObject(j);
          mResults.add(getChildren(blogId,date,currentChild));
        }
      }
 else {
        mResults.add(getChildren(blogId,date,currentResultJSON));
      }
    }
    Collections.sort(mResults,new java.util.Comparator<SingleItemModel>(){
      public int compare(      SingleItemModel o1,      SingleItemModel o2){
        return o2.getTotals() - o1.getTotals();
      }
    }
);
  }
}",0.5929938605994944
14492,"@Override public int getItemCount(){
switch (getBlogType()) {
case RECOMMENDED:
    return mRecommendedBlogs.size() + 1;
case FOLLOWED:
  return mFollowedBlogs.size();
default :
return 0;
}
}","@Override public int getItemCount(){
switch (getBlogType()) {
case RECOMMENDED:
    if (mRecommendedBlogs.size() == 0) {
      return 0;
    }
 else {
      return mRecommendedBlogs.size() + 1;
    }
case FOLLOWED:
  return mFollowedBlogs.size();
default :
return 0;
}
}",0.7982646420824295
14493,"private void changeFollowStatus(final TextView textView,final int position,final boolean isAskingToFollow){
  if (position >= getBlogCount()) {
    return;
  }
  final long blogId;
  final String blogUrl;
switch (getBlogType()) {
case RECOMMENDED:
    ReaderRecommendedBlog blog=mRecommendedBlogs.get(position);
  blogId=blog.blogId;
blogUrl=blog.getBlogUrl();
break;
case FOLLOWED:
if (position >= mRecommendedBlogs.size()) {
return;
}
ReaderBlog info=mFollowedBlogs.get(position);
blogId=info.blogId;
blogUrl=info.getUrl();
break;
default :
return;
}
ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
@Override public void onActionResult(boolean succeeded){
Context context=textView.getContext();
if (!succeeded && context != null) {
int resId=(isAskingToFollow ? R.string.reader_toast_err_follow_blog : R.string.reader_toast_err_unfollow_blog);
ToastUtils.showToast(context,resId);
ReaderUtils.showFollowStatus(textView,!isAskingToFollow);
checkFollowStatus();
}
}
}
;
if (ReaderBlogActions.performFollowAction(blogId,blogUrl,isAskingToFollow,actionListener)) {
if (getBlogType() == ReaderBlogType.FOLLOWED) {
mFollowedBlogs.get(position).isFollowing=isAskingToFollow;
}
notifyItemChanged(position);
if (mFollowListener != null) {
mFollowListener.onFollowBlogChanged();
}
}
}","private void changeFollowStatus(final TextView textView,final int position,final boolean isAskingToFollow){
  if (getItemViewType(position) != VIEW_TYPE_ITEM) {
    return;
  }
  final long blogId;
  final String blogUrl;
switch (getBlogType()) {
case RECOMMENDED:
    ReaderRecommendedBlog blog=mRecommendedBlogs.get(position);
  blogId=blog.blogId;
blogUrl=blog.getBlogUrl();
break;
case FOLLOWED:
if (position >= mRecommendedBlogs.size()) {
return;
}
ReaderBlog info=mFollowedBlogs.get(position);
blogId=info.blogId;
blogUrl=info.getUrl();
break;
default :
return;
}
ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
@Override public void onActionResult(boolean succeeded){
Context context=textView.getContext();
if (!succeeded && context != null) {
int resId=(isAskingToFollow ? R.string.reader_toast_err_follow_blog : R.string.reader_toast_err_unfollow_blog);
ToastUtils.showToast(context,resId);
ReaderUtils.showFollowStatus(textView,!isAskingToFollow);
checkFollowStatus();
}
}
}
;
if (ReaderBlogActions.performFollowAction(blogId,blogUrl,isAskingToFollow,actionListener)) {
if (getBlogType() == ReaderBlogType.FOLLOWED) {
mFollowedBlogs.get(position).isFollowing=isAskingToFollow;
}
notifyItemChanged(position);
if (mFollowListener != null) {
mFollowListener.onFollowBlogChanged();
}
}
}",0.9745537409798708
14494,"public void refresh(){
  if (mIsTaskRunning) {
    AppLog.w(T.READER,""String_Node_Str"");
  }
 else {
    new LoadBlogsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}","public void refresh(){
  if (mIsTaskRunning) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  new LoadBlogsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.9444444444444444
14495,"@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  String name=children.getTitle();
  int total=children.getTotals();
  String url=children.getUrl();
  holder.setEntryTextOrLink(url,name);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.networkImageView.setVisibility(View.INVISIBLE);
  return convertView;
}","@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  String name=children.getTitle();
  int total=children.getTotals();
  String url=children.getUrl();
  holder.setEntryTextOrLink(url,name);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.networkImageView.setVisibility(View.GONE);
  return convertView;
}",0.994256541161455
14496,"@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  holder.setEntryTextOrLink(children.getUrl(),children.getTitle());
  holder.totalsTextView.setText(FormatUtils.formatDecimal(children.getTotals()));
  holder.networkImageView.setVisibility(View.INVISIBLE);
  return convertView;
}","@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  holder.setEntryTextOrLink(children.getUrl(),children.getTitle());
  holder.totalsTextView.setText(FormatUtils.formatDecimal(children.getTotals()));
  holder.networkImageView.setVisibility(View.GONE);
  return convertView;
}",0.993805918788713
14497,"@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  String name=children.getTitle();
  int total=children.getTotals();
  holder.setEntryTextOrLink(name,name);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.networkImageView.setVisibility(View.INVISIBLE);
  if (StringUtils.isNotBlank(children.getUrl())) {
    holder.imgMore.setVisibility(View.VISIBLE);
    holder.imgMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        PopupMenu popup=new PopupMenu(activity,view);
        MenuItem menuItem=popup.getMenu().add(getString(R.string.view_in_browser));
        menuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
          @Override public boolean onMenuItemClick(          MenuItem item){
            WPWebViewActivity.openURL(activity,children.getUrl());
            return true;
          }
        }
);
        popup.show();
      }
    }
);
  }
  return convertView;
}","@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final SingleItemModel children=(SingleItemModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  String name=children.getTitle();
  int total=children.getTotals();
  holder.setEntryTextOrLink(name,name);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.networkImageView.setVisibility(View.GONE);
  if (StringUtils.isNotBlank(children.getUrl())) {
    holder.imgMore.setVisibility(View.VISIBLE);
    holder.imgMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        PopupMenu popup=new PopupMenu(activity,view);
        MenuItem menuItem=popup.getMenu().add(getString(R.string.view_in_browser));
        menuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
          @Override public boolean onMenuItemClick(          MenuItem item){
            WPWebViewActivity.openURL(activity,children.getUrl());
            return true;
          }
        }
);
        popup.show();
      }
    }
);
  }
  return convertView;
}",0.9318420132820692
14498,"@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    convertView.setTag(new StatsViewHolder(convertView));
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  TagsModel group=(TagsModel)getGroup(groupPosition);
  StringBuilder groupName=new StringBuilder();
  List<TagModel> tags=group.getTags();
  for (int i=0; i < tags.size(); i++) {
    TagModel currentTag=tags.get(i);
    groupName.append(currentTag.getName());
    if (i < (tags.size() - 1)) {
      groupName.append(""String_Node_Str"");
    }
  }
  int total=group.getViews();
  int children=getChildrenCount(groupPosition);
  holder.entryTextView.setText(groupName);
  if (children > 0) {
    StatsUIHelper.setEntryTextViewClickListener(convertView,holder.entryTextView);
  }
 else {
    holder.entryTextView.setOnClickListener(null);
  }
  holder.entryTextView.setTextColor(getResources().getColor(R.color.stats_link_text_color));
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.chevronImageView.setVisibility(children > 0 ? View.VISIBLE : View.GONE);
  return convertView;
}","@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
    ViewGroup.LayoutParams params=viewHolder.networkImageView.getLayoutParams();
    params.width=DisplayUtils.dpToPx(convertView.getContext(),12);
    params.height=params.width;
    viewHolder.networkImageView.setLayoutParams(params);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  TagsModel group=(TagsModel)getGroup(groupPosition);
  StringBuilder groupName=new StringBuilder();
  List<TagModel> tags=group.getTags();
  for (int i=0; i < tags.size(); i++) {
    TagModel currentTag=tags.get(i);
    groupName.append(currentTag.getName());
    if (i < (tags.size() - 1)) {
      groupName.append(""String_Node_Str"");
    }
  }
  int total=group.getViews();
  int children=getChildrenCount(groupPosition);
  holder.entryTextView.setText(groupName);
  holder.entryTextView.setOnClickListener(null);
  if (children > 0) {
    StatsUIHelper.setEntryTextViewClickListener(convertView,holder.entryTextView);
  }
 else {
    if (tags != null || tags.size() == 1) {
      holder.setEntryTextOrLink(tags.get(0).getLink(),groupName.toString());
    }
  }
  holder.entryTextView.setTextColor(getResources().getColor(R.color.stats_link_text_color));
  holder.totalsTextView.setText(FormatUtils.formatDecimal(total));
  holder.chevronImageView.setVisibility(children > 0 ? View.VISIBLE : View.GONE);
  if (children == 0) {
    holder.networkImageView.setVisibility(View.VISIBLE);
    int drawableResource=groupName.toString().equalsIgnoreCase(""String_Node_Str"") ? R.drawable.stats_icon_categories : R.drawable.stats_icon_tags;
    holder.networkImageView.setImageDrawable(getResources().getDrawable(drawableResource));
  }
  return convertView;
}",0.7417752948479206
14499,"@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final TagModel children=(TagModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  String name=children.getName();
  holder.entryTextView.setText(name);
  holder.entryTextView.setTextColor(getResources().getColor(R.color.stats_link_text_color));
  holder.totalsTextView.setText(""String_Node_Str"");
  holder.networkImageView.setVisibility(View.INVISIBLE);
  return convertView;
}","@Override public View getChildView(int groupPosition,final int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final TagModel children=(TagModel)getChild(groupPosition,childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(convertView);
    ViewGroup.LayoutParams params=viewHolder.networkImageView.getLayoutParams();
    params.width=DisplayUtils.dpToPx(convertView.getContext(),12);
    params.height=params.width;
    viewHolder.networkImageView.setLayoutParams(params);
    convertView.setTag(viewHolder);
  }
  final StatsViewHolder holder=(StatsViewHolder)convertView.getTag();
  holder.setEntryTextOrLink(children.getLink(),children.getName());
  holder.totalsTextView.setText(""String_Node_Str"");
  holder.networkImageView.setVisibility(View.VISIBLE);
  holder.networkImageView.setImageDrawable(getResources().getDrawable(R.drawable.stats_icon_tags));
  return convertView;
}",0.681465038845727
14500,"@Override public int getChildrenCount(int groupPosition){
  TagsModel currentGroup=groups.get(groupPosition);
  List<TagModel> referrals=currentGroup.getTags();
  if (referrals == null || referrals.size() == 1) {
    return 0;
  }
 else {
    return referrals.size();
  }
}","@Override public int getChildrenCount(int groupPosition){
  TagsModel currentGroup=groups.get(groupPosition);
  List<TagModel> tags=currentGroup.getTags();
  if (tags == null || tags.size() == 1) {
    return 0;
  }
 else {
    return tags.size();
  }
}",0.7984790874524715
14501,"public static void reloadGroupViews(final Context ctx,final ExpandableListAdapter mAdapter,final SparseBooleanArray mGroupIdToExpandedMap,final LinearLayout mLinearLayout,final int maxNumberOfItemsToshow){
  if (ctx == null || mLinearLayout == null || mAdapter == null || mGroupIdToExpandedMap == null) {
    return;
  }
  int groupCount=Math.min(mAdapter.getGroupCount(),maxNumberOfItemsToshow);
  if (groupCount == 0) {
    mLinearLayout.removeAllViews();
    return;
  }
  int numExistingGroupViews=mLinearLayout.getChildCount();
  if (groupCount < numExistingGroupViews) {
    int numToRemove=numExistingGroupViews - groupCount;
    mLinearLayout.removeViews(groupCount,numToRemove);
    numExistingGroupViews=groupCount;
  }
  int bgColor=Color.TRANSPARENT;
  for (int i=0; i < groupCount; i++) {
    boolean isExpanded=mGroupIdToExpandedMap.get(i);
    final View groupView;
    if (i < numExistingGroupViews) {
      View convertView=mLinearLayout.getChildAt(i);
      groupView=mAdapter.getGroupView(i,isExpanded,convertView,mLinearLayout);
      groupView.setBackgroundColor(bgColor);
      setViewBackgroundWithoutResettingPadding(groupView,i == 0 ? 0 : R.drawable.stats_list_item_odd_background);
    }
 else {
      groupView=mAdapter.getGroupView(i,isExpanded,null,mLinearLayout);
      groupView.setBackgroundColor(bgColor);
      setViewBackgroundWithoutResettingPadding(groupView,i == 0 ? 0 : R.drawable.stats_list_item_odd_background);
      mLinearLayout.addView(groupView);
    }
    if (isExpanded) {
      StatsUIHelper.showChildViews(mAdapter,mLinearLayout,i,groupView,false);
    }
    final int groupPosition=i;
    groupView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mAdapter.getChildrenCount(groupPosition) == 0) {
          return;
        }
        boolean shouldExpand=!mGroupIdToExpandedMap.get(groupPosition);
        mGroupIdToExpandedMap.put(groupPosition,shouldExpand);
        if (shouldExpand) {
          StatsUIHelper.showChildViews(mAdapter,mLinearLayout,groupPosition,groupView,true);
        }
 else {
          StatsUIHelper.hideChildViews(groupView,true);
        }
      }
    }
);
  }
}","public static void reloadGroupViews(final Context ctx,final ExpandableListAdapter mAdapter,final SparseBooleanArray mGroupIdToExpandedMap,final LinearLayout mLinearLayout,final int maxNumberOfItemsToshow){
  if (ctx == null || mLinearLayout == null || mAdapter == null || mGroupIdToExpandedMap == null) {
    return;
  }
  int groupCount=Math.min(mAdapter.getGroupCount(),maxNumberOfItemsToshow);
  if (groupCount == 0) {
    mLinearLayout.removeAllViews();
    return;
  }
  int numExistingGroupViews=mLinearLayout.getChildCount();
  if (groupCount < numExistingGroupViews) {
    int numToRemove=numExistingGroupViews - groupCount;
    mLinearLayout.removeViews(groupCount,numToRemove);
    numExistingGroupViews=groupCount;
  }
  int bgColor=Color.TRANSPARENT;
  for (int i=0; i < groupCount; i++) {
    boolean isExpanded=mGroupIdToExpandedMap.get(i);
    final View groupView;
    if (i < numExistingGroupViews) {
      View convertView=mLinearLayout.getChildAt(i);
      groupView=mAdapter.getGroupView(i,isExpanded,convertView,mLinearLayout);
      groupView.setBackgroundColor(bgColor);
      setViewBackgroundWithoutResettingPadding(groupView,i == 0 ? 0 : R.drawable.stats_list_item_background);
    }
 else {
      groupView=mAdapter.getGroupView(i,isExpanded,null,mLinearLayout);
      groupView.setBackgroundColor(bgColor);
      setViewBackgroundWithoutResettingPadding(groupView,i == 0 ? 0 : R.drawable.stats_list_item_background);
      mLinearLayout.addView(groupView);
    }
    if (isExpanded) {
      StatsUIHelper.showChildViews(mAdapter,mLinearLayout,i,groupView,false);
    }
    final int groupPosition=i;
    groupView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mAdapter.getChildrenCount(groupPosition) == 0) {
          return;
        }
        boolean shouldExpand=!mGroupIdToExpandedMap.get(groupPosition);
        mGroupIdToExpandedMap.put(groupPosition,shouldExpand);
        if (shouldExpand) {
          StatsUIHelper.showChildViews(mAdapter,mLinearLayout,groupPosition,groupView,true);
        }
 else {
          StatsUIHelper.hideChildViews(groupView,groupPosition,true);
        }
      }
    }
);
  }
}",0.9950045413260672
14502,"public static void showChildViews(ExpandableListAdapter mAdapter,LinearLayout mLinearLayout,int groupPosition,View groupView,boolean animate){
  int childCount=Math.min(mAdapter.getChildrenCount(groupPosition),STATS_CHILD_MAX_ITEMS);
  if (childCount == 0) {
    return;
  }
  final ViewGroup childContainer=(ViewGroup)groupView.findViewById(R.id.layout_child_container);
  if (childContainer == null) {
    return;
  }
  int numExistingViews=childContainer.getChildCount();
  if (childCount < numExistingViews) {
    int numToRemove=numExistingViews - childCount;
    childContainer.removeViews(childCount,numToRemove);
    numExistingViews=childCount;
  }
  for (int i=0; i < childCount; i++) {
    boolean isLastChild=(i == childCount - 1);
    if (i < numExistingViews) {
      View convertView=childContainer.getChildAt(i);
      mAdapter.getChildView(groupPosition,i,isLastChild,convertView,mLinearLayout);
    }
 else {
      View childView=mAdapter.getChildView(groupPosition,i,isLastChild,null,mLinearLayout);
      childView.setPadding(childView.getPaddingLeft(),childView.getPaddingTop(),0,childView.getPaddingBottom());
      childContainer.addView(childView);
    }
  }
  if (childContainer.getVisibility() != View.VISIBLE) {
    if (animate) {
      Animation expand=new ScaleAnimation(1.0f,1.0f,0.0f,1.0f);
      expand.setDuration(ANIM_DURATION);
      expand.setInterpolator(getInterpolator());
      childContainer.startAnimation(expand);
    }
    childContainer.setVisibility(View.VISIBLE);
  }
  StatsUIHelper.setGroupChevron(true,groupView,animate);
}","public static void showChildViews(ExpandableListAdapter mAdapter,LinearLayout mLinearLayout,int groupPosition,View groupView,boolean animate){
  int childCount=Math.min(mAdapter.getChildrenCount(groupPosition),STATS_CHILD_MAX_ITEMS);
  if (childCount == 0) {
    return;
  }
  final ViewGroup childContainer=(ViewGroup)groupView.findViewById(R.id.layout_child_container);
  if (childContainer == null) {
    return;
  }
  int numExistingViews=childContainer.getChildCount();
  if (childCount < numExistingViews) {
    int numToRemove=numExistingViews - childCount;
    childContainer.removeViews(childCount,numToRemove);
    numExistingViews=childCount;
  }
  for (int i=0; i < childCount; i++) {
    boolean isLastChild=(i == childCount - 1);
    if (i < numExistingViews) {
      View convertView=childContainer.getChildAt(i);
      mAdapter.getChildView(groupPosition,i,isLastChild,convertView,mLinearLayout);
    }
 else {
      View childView=mAdapter.getChildView(groupPosition,i,isLastChild,null,mLinearLayout);
      childView.setPadding(0,childView.getPaddingTop(),0,isLastChild ? 0 : childView.getPaddingBottom());
      setViewBackgroundWithoutResettingPadding(childView,R.drawable.stats_list_item_child_background);
      childContainer.addView(childView);
    }
  }
  if (childContainer.getVisibility() != View.VISIBLE) {
    if (animate) {
      Animation expand=new ScaleAnimation(1.0f,1.0f,0.0f,1.0f);
      expand.setDuration(ANIM_DURATION);
      expand.setInterpolator(getInterpolator());
      childContainer.startAnimation(expand);
    }
    childContainer.setVisibility(View.VISIBLE);
  }
  StatsUIHelper.setGroupChevron(true,groupView,groupPosition,animate);
}",0.9447174447174448
14503,"public static void setGroupChevron(final boolean isGroupExpanded,View groupView,boolean animate){
  final ImageView chevron=(ImageView)groupView.findViewById(R.id.stats_list_cell_chevron);
  if (chevron == null) {
    return;
  }
  chevron.clearAnimation();
  if (animate) {
    chevron.setImageResource(isGroupExpanded ? R.drawable.stats_chevron_right : R.drawable.stats_chevron_down);
    float start=(isGroupExpanded ? 0.0f : 0.0f);
    float end=(isGroupExpanded ? 90.0f : -90.0f);
    Animation rotate=new RotateAnimation(start,end,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
    rotate.setDuration(ANIM_DURATION);
    rotate.setInterpolator(getInterpolator());
    rotate.setFillAfter(true);
    chevron.startAnimation(rotate);
  }
 else {
    chevron.setImageResource(isGroupExpanded ? R.drawable.stats_chevron_down : R.drawable.stats_chevron_right);
  }
}","public static void setGroupChevron(final boolean isGroupExpanded,View groupView,int groupPosition,boolean animate){
  final ImageView chevron=(ImageView)groupView.findViewById(R.id.stats_list_cell_chevron);
  if (chevron == null) {
    return;
  }
  if (isGroupExpanded) {
    setViewBackgroundWithoutResettingPadding(groupView,R.drawable.stats_list_item_expanded_background);
  }
 else {
    setViewBackgroundWithoutResettingPadding(groupView,groupPosition == 0 ? 0 : R.drawable.stats_list_item_background);
  }
  chevron.clearAnimation();
  if (animate) {
    chevron.setImageResource(isGroupExpanded ? R.drawable.stats_chevron_right : R.drawable.stats_chevron_down);
    float start=(isGroupExpanded ? 0.0f : 0.0f);
    float end=(isGroupExpanded ? 90.0f : -90.0f);
    Animation rotate=new RotateAnimation(start,end,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
    rotate.setDuration(ANIM_DURATION);
    rotate.setInterpolator(getInterpolator());
    rotate.setFillAfter(true);
    chevron.startAnimation(rotate);
  }
 else {
    chevron.setImageResource(isGroupExpanded ? R.drawable.stats_chevron_down : R.drawable.stats_chevron_right);
  }
}",0.8621529469069654
14504,"public static void hideChildViews(View groupView,boolean animate){
  final ViewGroup childContainer=(ViewGroup)groupView.findViewById(R.id.layout_child_container);
  if (childContainer == null) {
    return;
  }
  if (childContainer.getVisibility() != View.GONE) {
    if (animate) {
      Animation expand=new ScaleAnimation(1.0f,1.0f,1.0f,0.0f);
      expand.setDuration(ANIM_DURATION);
      expand.setInterpolator(getInterpolator());
      expand.setAnimationListener(new Animation.AnimationListener(){
        @Override public void onAnimationStart(        Animation animation){
        }
        @Override public void onAnimationEnd(        Animation animation){
          childContainer.setVisibility(View.GONE);
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
      }
);
      childContainer.startAnimation(expand);
    }
 else {
      childContainer.setVisibility(View.GONE);
    }
  }
  StatsUIHelper.setGroupChevron(false,groupView,animate);
}","public static void hideChildViews(View groupView,int groupPosition,boolean animate){
  final ViewGroup childContainer=(ViewGroup)groupView.findViewById(R.id.layout_child_container);
  if (childContainer == null) {
    return;
  }
  if (childContainer.getVisibility() != View.GONE) {
    if (animate) {
      Animation expand=new ScaleAnimation(1.0f,1.0f,1.0f,0.0f);
      expand.setDuration(ANIM_DURATION);
      expand.setInterpolator(getInterpolator());
      expand.setAnimationListener(new Animation.AnimationListener(){
        @Override public void onAnimationStart(        Animation animation){
        }
        @Override public void onAnimationEnd(        Animation animation){
          childContainer.setVisibility(View.GONE);
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
      }
);
      childContainer.startAnimation(expand);
    }
 else {
      childContainer.setVisibility(View.GONE);
    }
  }
  StatsUIHelper.setGroupChevron(false,groupView,groupPosition,animate);
}",0.984313725490196
14505,"/** 
 * called when user selects an item from the drawer
 */
private void drawerItemSelected(DrawerItem item){
  if (item == null || item.isSelected(this)) {
    closeDrawer();
    return;
  }
  ActivityId activityId=item.getDrawerItemId().toActivityId();
  if (activityId != ActivityId.UNKNOWN) {
    ActivityId.trackLastActivity(WPDrawerActivity.this,activityId);
  }
  final Intent intent;
switch (item.getDrawerItemId()) {
case READER:
    mShouldFinish=true;
  intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case NOTIFICATIONS:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case POSTS:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_POSTS);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case MEDIA:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_MEDIA_LIBRARY);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case PAGES:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_PAGES);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case COMMENTS:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_COMMENTS);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case THEMES:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case STATS:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case VIEW_SITE:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case QUICK_PHOTO:
mShouldFinish=false;
intent=new Intent(WPDrawerActivity.this,EditPostActivity.class);
intent.putExtra(""String_Node_Str"",DeviceUtils.getInstance().hasCamera(getApplicationContext()) ? Constants.QUICK_POST_PHOTO_CAMERA : Constants.QUICK_POST_PHOTO_LIBRARY);
break;
case QUICK_VIDEO:
mShouldFinish=false;
intent=new Intent(WPDrawerActivity.this,EditPostActivity.class);
intent.putExtra(""String_Node_Str"",DeviceUtils.getInstance().hasCamera(getApplicationContext()) ? Constants.QUICK_POST_VIDEO_CAMERA : Constants.QUICK_POST_VIDEO_LIBRARY);
break;
default :
mShouldFinish=false;
intent=null;
break;
}
if (intent == null) {
ToastUtils.showToast(this,R.string.reader_toast_err_generic);
return;
}
if (getSupportActionBar() != null) {
int titleResId=item.getTitleResId();
if (titleResId != 0) {
getSupportActionBar().setTitle(getString(titleResId));
}
 else {
getSupportActionBar().setTitle(null);
}
}
closeDrawer();
hideActivityContainer(true);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
intent.putExtra(OPENED_FROM_DRAWER,true);
intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
intent.putExtra(OPENED_FROM_DRAWER,true);
intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
startActivity(intent);
}
}
,OPENED_FROM_DRAWER_DELAY);
}","/** 
 * called when user selects an item from the drawer
 */
private void drawerItemSelected(DrawerItem item){
  if (item == null || item.isSelected(this)) {
    closeDrawer();
    return;
  }
  ActivityId activityId=item.getDrawerItemId().toActivityId();
  if (activityId != ActivityId.UNKNOWN) {
    ActivityId.trackLastActivity(WPDrawerActivity.this,activityId);
  }
  final Intent intent;
switch (item.getDrawerItemId()) {
case READER:
    mShouldFinish=true;
  intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case NOTIFICATIONS:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case POSTS:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_POSTS);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case MEDIA:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_MEDIA_LIBRARY);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case PAGES:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_PAGES);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case COMMENTS:
mShouldFinish=true;
AnalyticsTracker.track(AnalyticsTracker.Stat.OPENED_COMMENTS);
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case THEMES:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case STATS:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case VIEW_SITE:
mShouldFinish=true;
intent=WPActivityUtils.getIntentForActivityId(this,activityId);
break;
case QUICK_PHOTO:
mShouldFinish=false;
intent=new Intent(WPDrawerActivity.this,EditPostActivity.class);
intent.putExtra(""String_Node_Str"",DeviceUtils.getInstance().hasCamera(getApplicationContext()) ? Constants.QUICK_POST_PHOTO_CAMERA : Constants.QUICK_POST_PHOTO_LIBRARY);
break;
case QUICK_VIDEO:
mShouldFinish=false;
intent=new Intent(WPDrawerActivity.this,EditPostActivity.class);
intent.putExtra(""String_Node_Str"",DeviceUtils.getInstance().hasCamera(getApplicationContext()) ? Constants.QUICK_POST_VIDEO_CAMERA : Constants.QUICK_POST_VIDEO_LIBRARY);
break;
default :
mShouldFinish=false;
intent=null;
break;
}
if (intent == null) {
ToastUtils.showToast(this,R.string.reader_toast_err_generic);
return;
}
if (mShouldFinish) {
if (getSupportActionBar() != null) {
int titleResId=item.getTitleResId();
if (titleResId != 0) {
getSupportActionBar().setTitle(getString(titleResId));
}
 else {
getSupportActionBar().setTitle(null);
}
}
closeDrawer();
hideActivityContainer(true);
new Handler().postDelayed(new Runnable(){
@Override public void run(){
intent.putExtra(OPENED_FROM_DRAWER,true);
intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
intent.putExtra(OPENED_FROM_DRAWER,true);
intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
startActivity(intent);
}
}
,OPENED_FROM_DRAWER_DELAY);
}
 else {
closeDrawer();
startActivity(intent);
}
}",0.9879066598535172
14506,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case ADD_ACCOUNT_REQUEST:
    if (resultCode == RESULT_OK) {
      getBlogNames();
      setupCurrentBlog();
      if (mDrawerListView != null) {
        initMenuDrawer();
      }
      WordPress.registerForCloudMessaging(this);
      showReaderIfNoBlog();
    }
 else {
      finish();
    }
  break;
case SETTINGS_REQUEST:
if (mDrawerListView != null && resultCode != SettingsActivity.RESULT_SIGNED_OUT) {
  initMenuDrawer();
  String[] blogNames=getBlogNames();
  if (blogNames.length >= 1) {
    setupCurrentBlog();
  }
  if (data != null && data.getBooleanExtra(SettingsActivity.CURRENT_BLOG_CHANGED,true)) {
    blogChanged();
  }
  WordPress.registerForCloudMessaging(this);
}
break;
case AUTHENTICATE_REQUEST:
if (resultCode == RESULT_CANCELED) {
Intent i=new Intent(this,SignInActivity.class);
startActivityForResult(i,ADD_ACCOUNT_REQUEST);
}
 else {
WordPress.registerForCloudMessaging(this);
}
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case ADD_ACCOUNT_REQUEST:
    if (resultCode == RESULT_OK) {
      getBlogNames();
      setupCurrentBlog();
      if (mDrawerListView != null) {
        initBlogSpinner();
      }
      WordPress.registerForCloudMessaging(this);
      showReaderIfNoBlog();
    }
 else {
      finish();
    }
  break;
case SETTINGS_REQUEST:
if (mDrawerListView != null && resultCode != SettingsActivity.RESULT_SIGNED_OUT) {
  initBlogSpinner();
  String[] blogNames=getBlogNames();
  if (blogNames.length >= 1) {
    setupCurrentBlog();
  }
  if (data != null && data.getBooleanExtra(SettingsActivity.CURRENT_BLOG_CHANGED,true)) {
    blogChanged();
  }
  WordPress.registerForCloudMessaging(this);
}
break;
case AUTHENTICATE_REQUEST:
if (resultCode == RESULT_CANCELED) {
Intent i=new Intent(this,SignInActivity.class);
startActivityForResult(i,ADD_ACCOUNT_REQUEST);
}
 else {
WordPress.registerForCloudMessaging(this);
}
break;
}
}",0.9842738205365402
14507,"public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == android.R.id.home && mDrawerLayout != null) {
    if (mDrawerLayout.isDrawerOpen(GravityCompat.START)) {
      mDrawerLayout.closeDrawer(GravityCompat.START);
    }
 else {
      mDrawerLayout.openDrawer(GravityCompat.START);
    }
  }
  return super.onOptionsItemSelected(item);
}","public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == android.R.id.home && mDrawerLayout != null) {
    toggleDrawer();
  }
  return super.onOptionsItemSelected(item);
}",0.6895306859205776
14508,"@Override public void onReceive(Context context,Intent intent){
  if (intent == null || intent.getAction() == null)   return;
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_SIGNOUT)) {
    onSignout();
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_INVALID_CREDENTIALS)) {
    AuthenticationDialogUtils.showAuthErrorDialog(WPDrawerActivity.this);
  }
  if (intent.getAction().equals(SimperiumUtils.BROADCAST_ACTION_SIMPERIUM_NOT_AUTHORIZED) && WPDrawerActivity.this instanceof NotificationsActivity) {
    AuthenticationDialogUtils.showAuthErrorDialog(WPDrawerActivity.this,R.string.sign_in_again,R.string.simperium_connection_error);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_TWO_FA_AUTH)) {
    AuthenticationDialogUtils.showAuthErrorDialog(WPDrawerActivity.this);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_INVALID_SSL_CERTIFICATE)) {
    SelfSignedSSLCertsManager.askForSslTrust(WPDrawerActivity.this);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_LOGIN_LIMIT)) {
    ToastUtils.showToast(context,R.string.limit_reached,Duration.LONG);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_BLOG_LIST_CHANGED)) {
    initMenuDrawer();
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent == null || intent.getAction() == null)   return;
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_SIGNOUT)) {
    onSignout();
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_INVALID_CREDENTIALS)) {
    AuthenticationDialogUtils.showAuthErrorDialog(WPDrawerActivity.this);
  }
  if (intent.getAction().equals(SimperiumUtils.BROADCAST_ACTION_SIMPERIUM_NOT_AUTHORIZED) && WPDrawerActivity.this instanceof NotificationsActivity) {
    AuthenticationDialogUtils.showAuthErrorDialog(WPDrawerActivity.this,R.string.sign_in_again,R.string.simperium_connection_error);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_TWO_FA_AUTH)) {
    AuthenticationDialogUtils.showAuthErrorDialog(WPDrawerActivity.this);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_INVALID_SSL_CERTIFICATE)) {
    SelfSignedSSLCertsManager.askForSslTrust(WPDrawerActivity.this);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_XMLRPC_LOGIN_LIMIT)) {
    ToastUtils.showToast(context,R.string.limit_reached,Duration.LONG);
  }
  if (intent.getAction().equals(WordPress.BROADCAST_ACTION_BLOG_LIST_CHANGED)) {
    initBlogSpinner();
  }
}",0.993293885601578
14509,"/** 
 * Create menu drawer ListView and listeners
 */
private void initMenuDrawer(int blogSelection){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  if (mDrawerLayout != null) {
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.open_drawer,R.string.close_drawer){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_arrow_back_white_24dp);
    mDrawerLayout.setDrawerListener(mDrawerToggle);
  }
  mDrawerListView=(ListView)findViewById(R.id.drawer_list);
  if (mDrawerListView.getHeaderViewsCount() == 0) {
    View view=getLayoutInflater().inflate(R.layout.menu_drawer_header,mDrawerListView,false);
    mDrawerListView.addHeaderView(view,null,false);
  }
  mBlogSpinner=(Spinner)findViewById(R.id.blog_spinner);
  View divider=findViewById(R.id.blog_spinner_divider);
  String[] blogNames=getBlogNames();
  if (blogNames.length > 1) {
    mBlogSpinner.setVisibility(View.VISIBLE);
    divider.setVisibility(View.VISIBLE);
    mBlogSpinner.setOnItemSelectedListener(mItemSelectedListener);
    populateBlogSpinner(blogNames);
  }
 else {
    mBlogSpinner.setVisibility(View.GONE);
    divider.setVisibility(View.GONE);
  }
  View settingsRow=findViewById(R.id.settings_row);
  settingsRow.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSettings();
    }
  }
);
  mDrawerAdapter=new MenuDrawerAdapter(this);
  mDrawerListView.setAdapter(mDrawerAdapter);
  mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      int menuPosition=position - mDrawerListView.getHeaderViewsCount();
      DrawerItem item=(DrawerItem)mDrawerAdapter.getItem(menuPosition);
      drawerItemSelected(item);
    }
  }
);
  if (blogSelection != -1 && mBlogSpinner != null) {
    mBlogSpinner.setSelection(blogSelection);
  }
  updateMenuDrawer();
}","/** 
 * Create menu drawer ListView and listeners
 */
private void initMenuDrawer(){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  if (mDrawerLayout != null) {
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.open_drawer,R.string.close_drawer){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_arrow_back_white_24dp);
    mDrawerLayout.setDrawerListener(mDrawerToggle);
  }
  mDrawerListView=(ListView)findViewById(R.id.drawer_list);
  if (mDrawerListView.getHeaderViewsCount() == 0) {
    View view=getLayoutInflater().inflate(R.layout.menu_drawer_header,mDrawerListView,false);
    mDrawerListView.addHeaderView(view,null,false);
  }
  View settingsRow=findViewById(R.id.settings_row);
  settingsRow.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSettings();
    }
  }
);
  mDrawerAdapter=new MenuDrawerAdapter(this);
  mDrawerListView.setAdapter(mDrawerAdapter);
  mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      int menuPosition=position - mDrawerListView.getHeaderViewsCount();
      DrawerItem item=(DrawerItem)mDrawerAdapter.getItem(menuPosition);
      drawerItemSelected(item);
    }
  }
);
  initBlogSpinner();
  updateMenuDrawer();
}",0.8285568065506653
14510,"void refreshMenuDrawer(){
  if (mDrawerAdapter == null)   return;
  setupCurrentBlog();
  updateMenuDrawer();
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog != null && mDrawerListView != null && mDrawerListView.getHeaderViewsCount() > 0) {
    for (int i=0; i < blogIDs.length; i++) {
      if (blogIDs[i] == currentBlog.getLocalTableBlogId()) {
        if (mBlogSpinner != null) {
          mBlogSpinner.setSelection(i);
        }
      }
    }
  }
}","void refreshMenuDrawer(){
  if (mDrawerAdapter == null)   return;
  setupCurrentBlog();
  updateMenuDrawer();
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog != null && mDrawerListView != null && mDrawerListView.getHeaderViewsCount() > 0) {
    for (int i=0; i < mBlogIDs.length; i++) {
      if (mBlogIDs[i] == currentBlog.getLocalTableBlogId()) {
        if (mBlogSpinner != null) {
          mBlogSpinner.setSelection(i);
        }
      }
    }
  }
}",0.9936170212765958
14511,"/** 
 * Get the names of all the blogs configured within the application. If a blog does not have a specific name, the blog URL is returned.
 * @return array of blog names
 */
private static String[] getBlogNames(){
  List<Map<String,Object>> accounts=WordPress.wpDB.getVisibleAccounts();
  int blogCount=accounts.size();
  blogIDs=new int[blogCount];
  String[] blogNames=new String[blogCount];
  for (int i=0; i < blogCount; i++) {
    Map<String,Object> account=accounts.get(i);
    blogNames[i]=BlogUtils.getBlogNameFromAccountMap(account);
    blogIDs[i]=Integer.valueOf(account.get(""String_Node_Str"").toString());
  }
  return blogNames;
}","/** 
 * Get the names of all the blogs configured within the application. If a blog does not have a specific name, the blog URL is returned.
 * @return array of blog names
 */
private static String[] getBlogNames(){
  List<Map<String,Object>> accounts=WordPress.wpDB.getVisibleAccounts();
  int blogCount=accounts.size();
  mBlogIDs=new int[blogCount];
  String[] blogNames=new String[blogCount];
  for (int i=0; i < blogCount; i++) {
    Map<String,Object> account=accounts.get(i);
    blogNames[i]=BlogUtils.getBlogNameFromAccountMap(account);
    mBlogIDs[i]=Integer.valueOf(account.get(""String_Node_Str"").toString());
  }
  return blogNames;
}",0.9953560371517028
14512,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (!mBlogSpinnerInitialized) {
    mBlogSpinnerInitialized=true;
  }
 else {
    WordPress.setCurrentBlog(blogIDs[position]);
    updateMenuDrawer();
    blogChanged();
  }
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (!mBlogSpinnerInitialized) {
    mBlogSpinnerInitialized=true;
  }
 else {
    WordPress.setCurrentBlog(mBlogIDs[position]);
    updateMenuDrawer();
    blogChanged();
  }
}",0.9944341372912802
14513,"public ReaderBlogInfoView(Context context){
  super(context);
  View view=LayoutInflater.from(context).inflate(R.layout.reader_blog_info_view,this,true);
  mImageMshot=(WPNetworkImageView)view.findViewById(R.id.image_mshot);
  int displayWidth=DisplayUtils.getDisplayPixelWidth(getContext());
  RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)mImageMshot.getLayoutParams();
  if (DisplayUtils.isLandscape(context)) {
    params.width=(int)(displayWidth * 0.15f);
  }
 else {
    params.width=(int)(displayWidth * 0.25f);
  }
}","public ReaderBlogInfoView(Context context){
  super(context);
  View view=LayoutInflater.from(context).inflate(R.layout.reader_blog_info_view,this,true);
  view.setId(R.id.layout_blog_info_view);
  mImageMshot=(WPNetworkImageView)view.findViewById(R.id.image_mshot);
  int displayWidth=DisplayUtils.getDisplayPixelWidth(getContext());
  RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)mImageMshot.getLayoutParams();
  if (DisplayUtils.isLandscape(context)) {
    params.width=(int)(displayWidth * 0.15f);
  }
 else {
    params.width=(int)(displayWidth * 0.25f);
  }
}",0.9626998223801064
14514,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.stats_activity_view_all);
  if (savedInstanceState == null) {
  }
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  outerContainer=(LinearLayout)findViewById(R.id.stats_fragment_container);
  mPullToRefreshHelper=new PullToRefreshHelper(this,(PullToRefreshLayout)findViewById(R.id.ptr_layout),new PullToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(    View view){
      if (!NetworkUtils.checkConnection(getBaseContext())) {
        mPullToRefreshHelper.setRefreshing(false);
        return;
      }
      refreshStats();
    }
  }
);
  setTitle(getString(R.string.stats));
  if (savedInstanceState != null) {
    mLocalBlogID=savedInstanceState.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    mRestResponse=(Serializable[])savedInstanceState.getSerializable(StatsAbstractFragment.ARG_REST_RESPONSE);
    mTimeframe=(StatsTimeframe)savedInstanceState.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=savedInstanceState.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=savedInstanceState.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,-1);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=savedInstanceState.getInt(StatsAbstractListFragment.ARGS_OUTER_PAGER_SELECTED_BUTTON_INDEX,-1);
  }
 else   if (getIntent() != null) {
    Bundle extras=getIntent().getExtras();
    mLocalBlogID=extras.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    mTimeframe=(StatsTimeframe)extras.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=extras.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=extras.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,-1);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=extras.getInt(StatsAbstractListFragment.ARGS_OUTER_PAGER_SELECTED_BUTTON_INDEX,-1);
    refreshStats();
  }
  TextView dateTextView=(TextView)findViewById(R.id.stats_summary_date);
  dateTextView.setText(StatsUIHelper.getDateForDisplayInLabels(mDate,mTimeframe));
  FragmentManager fm=getFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  if (fm.findFragmentByTag(""String_Node_Str"" + getInnerFragmentTAG()) == null) {
    fragment=getInnerFragment();
    ft.replace(R.id.stats_single_view_fragment,fragment,""String_Node_Str"" + getInnerFragmentTAG());
    ft.commit();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.stats_activity_view_all);
  if (savedInstanceState == null) {
  }
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  outerContainer=(LinearLayout)findViewById(R.id.stats_fragment_container);
  mPullToRefreshHelper=new PullToRefreshHelper(this,(PullToRefreshLayout)findViewById(R.id.ptr_layout),new PullToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(    View view){
      if (!NetworkUtils.checkConnection(getBaseContext())) {
        mPullToRefreshHelper.setRefreshing(false);
        return;
      }
      refreshStats();
    }
  }
);
  setTitle(getString(R.string.stats));
  if (savedInstanceState != null) {
    mLocalBlogID=savedInstanceState.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    mRestResponse=(Serializable[])savedInstanceState.getSerializable(StatsAbstractFragment.ARG_REST_RESPONSE);
    mTimeframe=(StatsTimeframe)savedInstanceState.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=savedInstanceState.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=savedInstanceState.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,-1);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=savedInstanceState.getInt(StatsAbstractListFragment.ARGS_OUTER_PAGER_SELECTED_BUTTON_INDEX,-1);
  }
 else   if (getIntent() != null) {
    Bundle extras=getIntent().getExtras();
    mLocalBlogID=extras.getInt(StatsActivity.ARG_LOCAL_TABLE_BLOG_ID,-1);
    mTimeframe=(StatsTimeframe)extras.getSerializable(StatsAbstractFragment.ARGS_TIMEFRAME);
    mDate=extras.getString(StatsAbstractFragment.ARGS_START_DATE);
    int ordinal=extras.getInt(StatsAbstractFragment.ARGS_VIEW_TYPE,-1);
    mStatsViewType=StatsViewType.values()[ordinal];
    mOuterPagerSelectedButtonIndex=extras.getInt(StatsAbstractListFragment.ARGS_OUTER_PAGER_SELECTED_BUTTON_INDEX,-1);
    refreshStats();
  }
  TextView dateTextView=(TextView)findViewById(R.id.stats_summary_date);
  dateTextView.setText(getDateForDisplayInLabels(mDate,mTimeframe));
  FragmentManager fm=getFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  if (fm.findFragmentByTag(""String_Node_Str"" + getInnerFragmentTAG()) == null) {
    fragment=getInnerFragment();
    ft.replace(R.id.stats_single_view_fragment,fragment,""String_Node_Str"" + getInnerFragmentTAG());
    ft.commit();
  }
}",0.9972430090586846
14515,"private void updateUIBelowTheGraph(int itemPosition){
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph(mVisitsData);
  String date=mStatsDate[itemPosition];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  mDateTextView.setText(StatsUIHelper.getDateForDisplayInLabels(date,getTimeframe()));
  VisitModel modelTapped=dataToShowOnGraph[itemPosition];
  for (int i=0; i < mRadioGroup.getChildCount(); i++) {
    View o=mRadioGroup.getChildAt(i);
    if (o instanceof RadioButton) {
      RadioButton currentBtm=(RadioButton)o;
      if (i == mSelectedOverviewItemIndex) {
        currentBtm.setChecked(true);
      }
      OverviewLabel overviewItem=(OverviewLabel)currentBtm.getTag();
switch (overviewItem) {
case VIEWS:
        currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getViews());
      break;
case VISITORS:
    currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getVisitors());
  break;
case LIKES:
currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getLikes());
break;
case COMMENTS:
currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getComments());
break;
}
}
}
}","private void updateUIBelowTheGraph(int itemPosition){
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph(mVisitsData);
  String date=mStatsDate[itemPosition];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  mDateTextView.setText(getDateForDisplayInLabels(date,getTimeframe()));
  VisitModel modelTapped=dataToShowOnGraph[itemPosition];
  for (int i=0; i < mRadioGroup.getChildCount(); i++) {
    View o=mRadioGroup.getChildAt(i);
    if (o instanceof RadioButton) {
      RadioButton currentBtm=(RadioButton)o;
      if (i == mSelectedOverviewItemIndex) {
        currentBtm.setChecked(true);
      }
      OverviewLabel overviewItem=(OverviewLabel)currentBtm.getTag();
switch (overviewItem) {
case VIEWS:
        currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getViews());
      break;
case VISITORS:
    currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getVisitors());
  break;
case LIKES:
currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getLikes());
break;
case COMMENTS:
currentBtm.setText(overviewItem.getLabel() + ""String_Node_Str"" + modelTapped.getComments());
break;
}
}
}
}",0.9942857142857144
14516,"/** 
 * Open a note fragment based on the type of note
 */
private void openNote(final Note note){
  if (note == null || isFinishing() || isActivityDestroyed()) {
    return;
  }
  mSelectedNoteId=note.getId();
  if (note.isUnread()) {
    note.markAsRead();
  }
  mDetailFragment=getDetailFragmentForNote(note);
  FragmentManager fm=getFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  ft.hide(mNotesListFragment);
  ft.add(R.id.layout_fragment_container,mDetailFragment);
  ft.addToBackStack(null);
  ft.commitAllowingStateLoss();
  if (note.getFormattedSubject() != null) {
    setTitle(note.getTitle());
  }
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS);
}","/** 
 * Open a note fragment based on the type of note
 */
private void openNote(final Note note){
  if (note == null || isFinishing() || isActivityDestroyed()) {
    return;
  }
  mSelectedNoteId=note.getId();
  if (note.isUnread()) {
    note.markAsRead();
  }
  mDetailFragment=getDetailFragmentForNote(note);
  FragmentManager fm=getFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  ft.hide(mNotesListFragment);
  ft.add(R.id.layout_fragment_container,mDetailFragment);
  ft.addToBackStack(null);
  ft.commitAllowingStateLoss();
  if (getSupportActionBar() != null && note.getFormattedSubject() != null) {
    getSupportActionBar().setTitle(note.getTitle());
  }
  AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS);
}",0.9661954517516902
14517,"public void onBackStackChanged(){
  int backStackEntryCount=getFragmentManager().getBackStackEntryCount();
  if (backStackEntryCount == 0) {
    setTitle(R.string.notifications);
  }
  if (getDrawerToggle() != null) {
    getDrawerToggle().setDrawerIndicatorEnabled(backStackEntryCount == 0);
  }
}","public void onBackStackChanged(){
  int backStackEntryCount=getFragmentManager().getBackStackEntryCount();
  if (getSupportActionBar() != null && backStackEntryCount == 0) {
    getSupportActionBar().setTitle(R.string.notifications);
  }
  if (getDrawerToggle() != null) {
    getDrawerToggle().setDrawerIndicatorEnabled(backStackEntryCount == 0);
  }
}",0.9155145929339478
14518,"@Override public void onClick(View view){
  if (mOnPostPopupListener != null) {
    mOnPostPopupListener.onShowPostPopup(view,post);
  }
}","@Override public void onClick(View v){
  mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}",0.6008230452674898
14519,"@Override public ReaderPostViewHolder onCreateViewHolder(ViewGroup viewGroup,final int position){
  View view=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.reader_cardview_post,viewGroup,false);
  view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ReaderPost post=getItem(position);
      if (mPostSelectedListener != null && post != null) {
        mPostSelectedListener.onPostSelected(post.blogId,post.postId);
      }
    }
  }
);
  return new ReaderPostViewHolder(view);
}","@Override public ReaderPostViewHolder onCreateViewHolder(ViewGroup viewGroup,int position){
  View view=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.reader_cardview_post,viewGroup,false);
  return new ReaderPostViewHolder(view);
}",0.6219974715549936
14520,"@Override public void onBindViewHolder(final ReaderPostViewHolder holder,final int position){
  final ReaderPost post=mPosts.get(position);
  ReaderTypes.ReaderPostListType postListType=getPostListType();
  holder.txtTitle.setText(post.getTitle());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(post.getDatePublished()));
  if (postListType == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
    holder.layoutPostHeader.setVisibility(View.GONE);
  }
 else {
    holder.layoutPostHeader.setVisibility(View.VISIBLE);
    holder.imgAvatar.setImageUrl(post.getPostAvatarForDisplay(mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
    if (post.hasBlogName()) {
      holder.txtBlogName.setText(post.getBlogName());
    }
 else     if (post.hasAuthorName()) {
      holder.txtBlogName.setText(post.getAuthorName());
    }
 else {
      holder.txtBlogName.setText(null);
    }
    ReaderUtils.showFollowStatus(holder.txtFollow,post.isFollowedByCurrentUser);
    holder.txtFollow.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleFollow(holder,position,post);
      }
    }
);
    if (!post.isExternal) {
      holder.layoutPostHeader.setEnabled(true);
      holder.layoutPostHeader.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          ReaderActivityLauncher.showReaderBlogPreview(view.getContext(),post.blogId,post.getBlogUrl());
        }
      }
);
    }
 else {
      holder.layoutPostHeader.setOnClickListener(null);
      holder.layoutPostHeader.setEnabled(false);
    }
  }
  if (post.hasExcerpt()) {
    holder.txtText.setVisibility(View.VISIBLE);
    holder.txtText.setText(post.getExcerpt());
  }
 else {
    holder.txtText.setVisibility(View.GONE);
  }
  final int titleMargin;
  if (post.hasFeaturedImage()) {
    final String imageUrl=post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight);
    holder.imgFeatured.setImageUrl(imageUrl,WPNetworkImageView.ImageType.PHOTO);
    holder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else   if (post.hasFeaturedVideo()) {
    holder.imgFeatured.setVideoUrl(post.postId,post.getFeaturedVideo());
    holder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else {
    holder.imgFeatured.setVisibility(View.GONE);
    titleMargin=(holder.layoutPostHeader.getVisibility() == View.VISIBLE ? 0 : mMarginLarge);
  }
  RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)holder.txtTitle.getLayoutParams();
  params.topMargin=titleMargin;
  final String tagToDisplay=(mCurrentTag != null ? post.getTagForDisplay(mCurrentTag.getTagName()) : null);
  if (!TextUtils.isEmpty(tagToDisplay)) {
    holder.txtTag.setText(tagToDisplay);
    holder.txtTag.setVisibility(View.VISIBLE);
    holder.txtTag.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mOnTagSelectedListener != null) {
          mOnTagSelectedListener.onTagSelected(tagToDisplay);
        }
      }
    }
);
  }
 else {
    holder.txtTag.setVisibility(View.GONE);
    holder.txtTag.setOnClickListener(null);
  }
  boolean showLikes=post.isWP() && post.isLikesEnabled;
  boolean showComments=post.isWP() && (post.isCommentsOpen || post.numReplies > 0);
  if (showLikes || showComments) {
    showCounts(holder,post,false);
  }
  if (showLikes) {
    holder.likeCount.setSelected(post.isLikedByCurrentUser);
    holder.likeCount.setVisibility(View.VISIBLE);
    holder.likeCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleLike(v.getContext(),holder,position,post);
      }
    }
);
  }
 else {
    holder.likeCount.setVisibility(View.GONE);
    holder.likeCount.setOnClickListener(null);
  }
  if (showComments) {
    holder.commentCount.setVisibility(View.VISIBLE);
    holder.commentCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderComments(v.getContext(),post);
      }
    }
);
  }
 else {
    holder.commentCount.setVisibility(View.GONE);
    holder.commentCount.setOnClickListener(null);
  }
  if (post.canReblog()) {
    showReblogStatus(holder.imgBtnReblog,post.isRebloggedByCurrentUser);
    holder.imgBtnReblog.setVisibility(View.VISIBLE);
    if (!post.isRebloggedByCurrentUser) {
      holder.imgBtnReblog.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderAnim.animateReblogButton(holder.imgBtnReblog);
          if (mReblogListener != null) {
            mReblogListener.onRequestReblog(post,v);
          }
        }
      }
);
    }
 else {
      holder.imgBtnReblog.setOnClickListener(null);
    }
  }
 else {
    holder.imgBtnReblog.setVisibility(View.INVISIBLE);
    holder.imgBtnReblog.setOnClickListener(null);
  }
  if (post.isWP() && !post.isPrivate && postListType == ReaderTypes.ReaderPostListType.TAG_FOLLOWED) {
    holder.imgMore.setVisibility(View.VISIBLE);
    holder.imgMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mOnPostPopupListener != null) {
          mOnPostPopupListener.onShowPostPopup(view,post);
        }
      }
    }
);
  }
 else {
    holder.imgMore.setVisibility(View.GONE);
    holder.imgMore.setOnClickListener(null);
  }
  if (mCanRequestMorePosts && mDataRequestedListener != null && (position >= getItemCount() - 1)) {
    mDataRequestedListener.onRequestData();
  }
}","@Override public void onBindViewHolder(final ReaderPostViewHolder holder,final int position){
  final ReaderPost post=mPosts.get(position);
  ReaderTypes.ReaderPostListType postListType=getPostListType();
  holder.txtTitle.setText(post.getTitle());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(post.getDatePublished()));
  if (postListType == ReaderTypes.ReaderPostListType.BLOG_PREVIEW) {
    holder.layoutPostHeader.setVisibility(View.GONE);
  }
 else {
    holder.layoutPostHeader.setVisibility(View.VISIBLE);
    holder.imgAvatar.setImageUrl(post.getPostAvatarForDisplay(mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
    if (post.hasBlogName()) {
      holder.txtBlogName.setText(post.getBlogName());
    }
 else     if (post.hasAuthorName()) {
      holder.txtBlogName.setText(post.getAuthorName());
    }
 else {
      holder.txtBlogName.setText(null);
    }
    ReaderUtils.showFollowStatus(holder.txtFollow,post.isFollowedByCurrentUser);
    holder.txtFollow.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleFollow(holder,position,post);
      }
    }
);
    if (!post.isExternal) {
      holder.layoutPostHeader.setEnabled(true);
      holder.layoutPostHeader.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          ReaderActivityLauncher.showReaderBlogPreview(view.getContext(),post.blogId,post.getBlogUrl());
        }
      }
);
    }
 else {
      holder.layoutPostHeader.setOnClickListener(null);
      holder.layoutPostHeader.setEnabled(false);
    }
  }
  if (post.hasExcerpt()) {
    holder.txtText.setVisibility(View.VISIBLE);
    holder.txtText.setText(post.getExcerpt());
  }
 else {
    holder.txtText.setVisibility(View.GONE);
  }
  final int titleMargin;
  if (post.hasFeaturedImage()) {
    final String imageUrl=post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight);
    holder.imgFeatured.setImageUrl(imageUrl,WPNetworkImageView.ImageType.PHOTO);
    holder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else   if (post.hasFeaturedVideo()) {
    holder.imgFeatured.setVideoUrl(post.postId,post.getFeaturedVideo());
    holder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else {
    holder.imgFeatured.setVisibility(View.GONE);
    titleMargin=(holder.layoutPostHeader.getVisibility() == View.VISIBLE ? 0 : mMarginLarge);
  }
  RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)holder.txtTitle.getLayoutParams();
  params.topMargin=titleMargin;
  final String tagToDisplay=(mCurrentTag != null ? post.getTagForDisplay(mCurrentTag.getTagName()) : null);
  if (!TextUtils.isEmpty(tagToDisplay)) {
    holder.txtTag.setText(tagToDisplay);
    holder.txtTag.setVisibility(View.VISIBLE);
    holder.txtTag.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mOnTagSelectedListener != null) {
          mOnTagSelectedListener.onTagSelected(tagToDisplay);
        }
      }
    }
);
  }
 else {
    holder.txtTag.setVisibility(View.GONE);
    holder.txtTag.setOnClickListener(null);
  }
  boolean showLikes=post.isWP() && post.isLikesEnabled;
  boolean showComments=post.isWP() && (post.isCommentsOpen || post.numReplies > 0);
  if (showLikes || showComments) {
    showCounts(holder,post,false);
  }
  if (showLikes) {
    holder.likeCount.setSelected(post.isLikedByCurrentUser);
    holder.likeCount.setVisibility(View.VISIBLE);
    holder.likeCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleLike(v.getContext(),holder,position,post);
      }
    }
);
  }
 else {
    holder.likeCount.setVisibility(View.GONE);
    holder.likeCount.setOnClickListener(null);
  }
  if (showComments) {
    holder.commentCount.setVisibility(View.VISIBLE);
    holder.commentCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderComments(v.getContext(),post);
      }
    }
);
  }
 else {
    holder.commentCount.setVisibility(View.GONE);
    holder.commentCount.setOnClickListener(null);
  }
  if (post.canReblog()) {
    showReblogStatus(holder.imgBtnReblog,post.isRebloggedByCurrentUser);
    holder.imgBtnReblog.setVisibility(View.VISIBLE);
    if (!post.isRebloggedByCurrentUser) {
      holder.imgBtnReblog.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderAnim.animateReblogButton(holder.imgBtnReblog);
          if (mReblogListener != null) {
            mReblogListener.onRequestReblog(post,v);
          }
        }
      }
);
    }
 else {
      holder.imgBtnReblog.setOnClickListener(null);
    }
  }
 else {
    holder.imgBtnReblog.setVisibility(View.INVISIBLE);
    holder.imgBtnReblog.setOnClickListener(null);
  }
  if (post.isWP() && !post.isPrivate && postListType == ReaderTypes.ReaderPostListType.TAG_FOLLOWED) {
    holder.imgMore.setVisibility(View.VISIBLE);
    holder.imgMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mOnPostPopupListener != null) {
          mOnPostPopupListener.onShowPostPopup(view,post);
        }
      }
    }
);
  }
 else {
    holder.imgMore.setVisibility(View.GONE);
    holder.imgMore.setOnClickListener(null);
  }
  if (mCanRequestMorePosts && mDataRequestedListener != null && (position >= getItemCount() - 1)) {
    mDataRequestedListener.onRequestData();
  }
  if (mPostSelectedListener != null) {
    holder.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mPostSelectedListener.onPostSelected(post.blogId,post.postId);
      }
    }
);
  }
  ;
}",0.9778788143743988
14521,"/** 
 * Create menu drawer ListView and listeners
 */
private void initMenuDrawer(int blogSelection){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerListView=(ListView)findViewById(R.id.left_drawer);
  if (mDrawerListView.getHeaderViewsCount() == 0) {
    View view=getLayoutInflater().inflate(R.layout.menu_drawer_header,mDrawerListView,false);
    mDrawerListView.addHeaderView(view,null,false);
  }
  mBlogSpinner=(Spinner)findViewById(R.id.blog_spinner);
  String[] blogNames=getBlogNames();
  if (blogNames.length > 1) {
    mBlogSpinner.setVisibility(View.VISIBLE);
    mBlogSpinner.setOnItemSelectedListener(mItemSelectedListener);
    populateBlogSpinner(blogNames);
  }
 else {
    mBlogSpinner.setVisibility(View.GONE);
  }
  mDrawerAdapter=new MenuDrawerAdapter(this);
  mDrawerListView.setAdapter(mDrawerAdapter);
  mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mDrawerLayout.closeDrawer(Gravity.START);
      int menuPosition=position - mDrawerListView.getHeaderViewsCount();
      if (menuPosition < 0 || menuPosition >= mDrawerAdapter.getCount()) {
        return;
      }
      MenuDrawerItem item=(MenuDrawerItem)mDrawerAdapter.getItem(menuPosition);
      if (item.hasItemId()) {
        ActivityId.trackLastActivity(WPDrawerActivity.this,item.getItemId());
      }
      if (!item.isSelected()) {
        item.selectItem();
      }
    }
  }
);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.open_drawer,R.string.close_drawer){
    public void onDrawerClosed(    View view){
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      invalidateOptionsMenu();
    }
  }
;
  mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_arrow_back_white_24dp);
  if (blogSelection != -1 && mBlogSpinner != null) {
    mBlogSpinner.setSelection(blogSelection);
  }
  updateMenuDrawer();
}","/** 
 * Create menu drawer ListView and listeners
 */
private void initMenuDrawer(int blogSelection){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerListView=(ListView)findViewById(R.id.left_drawer);
  if (mDrawerListView.getHeaderViewsCount() == 0) {
    View view=getLayoutInflater().inflate(R.layout.menu_drawer_header,mDrawerListView,false);
    mDrawerListView.addHeaderView(view,null,false);
  }
  mBlogSpinner=(Spinner)findViewById(R.id.blog_spinner);
  View divider=findViewById(R.id.blog_spinner_divider);
  String[] blogNames=getBlogNames();
  if (blogNames.length > 1) {
    mBlogSpinner.setVisibility(View.VISIBLE);
    divider.setVisibility(View.VISIBLE);
    mBlogSpinner.setOnItemSelectedListener(mItemSelectedListener);
    populateBlogSpinner(blogNames);
  }
 else {
    mBlogSpinner.setVisibility(View.GONE);
    divider.setVisibility(View.GONE);
  }
  mDrawerAdapter=new MenuDrawerAdapter(this);
  mDrawerListView.setAdapter(mDrawerAdapter);
  mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mDrawerLayout.closeDrawer(Gravity.START);
      int menuPosition=position - mDrawerListView.getHeaderViewsCount();
      if (menuPosition < 0 || menuPosition >= mDrawerAdapter.getCount()) {
        return;
      }
      MenuDrawerItem item=(MenuDrawerItem)mDrawerAdapter.getItem(menuPosition);
      if (item.hasItemId()) {
        ActivityId.trackLastActivity(WPDrawerActivity.this,item.getItemId());
      }
      if (!item.isSelected()) {
        item.selectItem();
      }
    }
  }
);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.open_drawer,R.string.close_drawer){
    public void onDrawerClosed(    View view){
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      invalidateOptionsMenu();
    }
  }
;
  mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_arrow_back_white_24dp);
  if (blogSelection != -1 && mBlogSpinner != null) {
    mBlogSpinner.setSelection(blogSelection);
  }
  updateMenuDrawer();
}",0.9672327194451088
14522,"public void setItems(List<MenuDrawerItem> visibleItems){
  if (mItems.size() == visibleItems.size() && mItems.containsAll(visibleItems)) {
    return;
  }
  mItems.clear();
  mItems.addAll(visibleItems);
  notifyDataSetChanged();
}","void setItems(List<MenuDrawerItem> visibleItems){
  mItems.clear();
  mItems.addAll(visibleItems);
  notifyDataSetChanged();
}",0.7058823529411765
14523,"private void showReader(){
  Intent intent;
  intent=new Intent(WPDrawerActivity.this,ReaderPostListActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
  startActivity(intent);
}","private void showReader(){
  Intent intent=new Intent(WPDrawerActivity.this,ReaderPostListActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
  startActivity(intent);
}",0.9739583333333334
14524,"/** 
 * called when user selects an item from the drawer to start the associated activity
 */
private void startDrawerIntent(Intent intent){
  intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
  startActivity(intent);
}","/** 
 * called when user selects an item from the drawer - starts the associated activity after a brief delay (to give drawer time to close)
 */
private void startDrawerIntent(final Intent intent){
  intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
  startActivity(intent);
}",0.8537074148296593
14525,"public void testRefreshBlogContent() throws InterruptedException {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Blog dummyBlog=new Blog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new ApiHelper.RefreshBlogContentTask(mTargetContext,dummyBlog,new GenericCallback(){
    @Override public void onSuccess(){
      assertTrue(true);
      countDownLatch.countDown();
    }
    @Override public void onFailure(    ErrorType errorType,    String errorMessage,    Throwable throwable){
      assertTrue(false);
      countDownLatch.countDown();
    }
  }
).execute(false);
  countDownLatch.await(5000,TimeUnit.SECONDS);
}","public void testRefreshBlogContent() throws InterruptedException {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Blog dummyBlog=new Blog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new ApiHelper.RefreshBlogContentTask(dummyBlog,new GenericCallback(){
    @Override public void onSuccess(){
      assertTrue(true);
      countDownLatch.countDown();
    }
    @Override public void onFailure(    ErrorType errorType,    String errorMessage,    Throwable throwable){
      assertTrue(false);
      countDownLatch.countDown();
    }
  }
).execute(false);
  countDownLatch.await(5000,TimeUnit.SECONDS);
}",0.98927805575411
14526,"public void testRefreshBlogContentEmptyResponse() throws InterruptedException {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Blog dummyBlog=new Blog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new ApiHelper.RefreshBlogContentTask(mTargetContext,dummyBlog,new GenericCallback(){
    @Override public void onSuccess(){
      assertTrue(false);
      countDownLatch.countDown();
    }
    @Override public void onFailure(    ErrorType errorType,    String errorMessage,    Throwable throwable){
      assertTrue(true);
      countDownLatch.countDown();
    }
  }
).execute(false);
  countDownLatch.await(5000,TimeUnit.SECONDS);
}","public void testRefreshBlogContentEmptyResponse() throws InterruptedException {
  XMLRPCFactoryTest.setPrefixAllInstances(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  Blog dummyBlog=new Blog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new ApiHelper.RefreshBlogContentTask(dummyBlog,new GenericCallback(){
    @Override public void onSuccess(){
      assertTrue(false);
      countDownLatch.countDown();
    }
    @Override public void onFailure(    ErrorType errorType,    String errorMessage,    Throwable throwable){
      assertTrue(true);
      countDownLatch.countDown();
    }
  }
).execute(false);
  countDownLatch.await(5000,TimeUnit.SECONDS);
}",0.9894736842105264
14527,"public List<Map<String,Object>> getAccountsBy(String byString,String[] extraFields,int limit){
  if (db == null) {
    return new Vector<Map<String,Object>>();
  }
  String limitStr=null;
  if (limit == 0) {
    limitStr=String.valueOf(limit);
  }
  String[] baseFields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] allFields=baseFields;
  if (extraFields != null) {
    allFields=(String[])ArrayUtils.addAll(baseFields,extraFields);
  }
  Cursor c=db.query(SETTINGS_TABLE,allFields,byString,null,null,null,null,limitStr);
  int numRows=c.getCount();
  c.moveToFirst();
  List<Map<String,Object>> accounts=new Vector<Map<String,Object>>();
  for (int i=0; i < numRows; i++) {
    int id=c.getInt(0);
    String blogName=c.getString(1);
    String username=c.getString(2);
    int blogId=c.getInt(3);
    String url=c.getString(4);
    String password=c.getString(5);
    if (password != null && !password.equals(""String_Node_Str"") && id > 0) {
      Map<String,Object> thisHash=new HashMap<String,Object>();
      thisHash.put(""String_Node_Str"",id);
      thisHash.put(""String_Node_Str"",blogName);
      thisHash.put(""String_Node_Str"",username);
      thisHash.put(""String_Node_Str"",blogId);
      thisHash.put(""String_Node_Str"",url);
      if (extraFields != null) {
        for (int j=0; j < extraFields.length; ++j) {
          thisHash.put(extraFields[j],c.getString(6 + j));
        }
      }
      accounts.add(thisHash);
    }
    c.moveToNext();
  }
  c.close();
  Collections.sort(accounts,BlogUtils.BlogNameComparator);
  return accounts;
}","public List<Map<String,Object>> getAccountsBy(String byString,String[] extraFields,int limit){
  if (db == null) {
    return new Vector<Map<String,Object>>();
  }
  String limitStr=null;
  if (limit != 0) {
    limitStr=String.valueOf(limit);
  }
  String[] baseFields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] allFields=baseFields;
  if (extraFields != null) {
    allFields=(String[])ArrayUtils.addAll(baseFields,extraFields);
  }
  Cursor c=db.query(SETTINGS_TABLE,allFields,byString,null,null,null,null,limitStr);
  int numRows=c.getCount();
  c.moveToFirst();
  List<Map<String,Object>> accounts=new Vector<Map<String,Object>>();
  for (int i=0; i < numRows; i++) {
    int id=c.getInt(0);
    String blogName=c.getString(1);
    String username=c.getString(2);
    int blogId=c.getInt(3);
    String url=c.getString(4);
    String password=c.getString(5);
    if (password != null && !password.equals(""String_Node_Str"") && id > 0) {
      Map<String,Object> thisHash=new HashMap<String,Object>();
      thisHash.put(""String_Node_Str"",id);
      thisHash.put(""String_Node_Str"",blogName);
      thisHash.put(""String_Node_Str"",username);
      thisHash.put(""String_Node_Str"",blogId);
      thisHash.put(""String_Node_Str"",url);
      if (extraFields != null) {
        for (int j=0; j < extraFields.length; ++j) {
          thisHash.put(extraFields[j],c.getString(6 + j));
        }
      }
      accounts.add(thisHash);
    }
    c.moveToNext();
  }
  c.close();
  Collections.sort(accounts,BlogUtils.BlogNameComparator);
  return accounts;
}",0.9993894993894994
14528,"public static void displayHtmlComment(TextView textView,String content,int maxImageSize){
  if (textView == null)   return;
  if (content == null) {
    textView.setText(null);
    return;
  }
  if (!content.contains(""String_Node_Str"") && !content.contains(""String_Node_Str"")) {
    content=content.trim();
    textView.setText(content);
    if (content.contains(""String_Node_Str"")) {
      Linkify.addLinks(textView,Linkify.WEB_URLS);
    }
    return;
  }
  content=Emoticons.replaceEmoticonsWithEmoji(content);
  final Spanned html;
  if (maxImageSize > 0 && content.contains(""String_Node_Str"")) {
    Drawable loading=textView.getContext().getResources().getDrawable(R.drawable.remote_image);
    Drawable failed=textView.getContext().getResources().getDrawable(R.drawable.remote_failed);
    html=HtmlUtils.fromHtml(content,new WPImageGetter(textView,maxImageSize,WordPress.imageLoader,loading,failed));
  }
 else {
    html=HtmlUtils.fromHtml(content);
  }
  CharSequence source=html;
  int start=0;
  int end=source.length();
  while (start < end && Character.isWhitespace(source.charAt(start))) {
    start++;
  }
  while (end > start && Character.isWhitespace(source.charAt(end - 1))) {
    end--;
  }
  textView.setText(source);
}","public static void displayHtmlComment(TextView textView,String content,int maxImageSize){
  if (textView == null) {
    return;
  }
  if (content == null) {
    textView.setText(null);
    return;
  }
  if (!content.contains(""String_Node_Str"") && !content.contains(""String_Node_Str"")) {
    content=content.trim();
    textView.setText(content);
    if (content.contains(""String_Node_Str"")) {
      Linkify.addLinks(textView,Linkify.WEB_URLS);
    }
    return;
  }
  content=Emoticons.replaceEmoticonsWithEmoji(content);
  final Spanned html;
  if (maxImageSize > 0 && content.contains(""String_Node_Str"")) {
    Drawable loading=textView.getContext().getResources().getDrawable(R.drawable.remote_image);
    Drawable failed=textView.getContext().getResources().getDrawable(R.drawable.remote_failed);
    html=HtmlUtils.fromHtml(content,new WPImageGetter(textView,maxImageSize,WordPress.imageLoader,loading,failed));
  }
 else {
    html=HtmlUtils.fromHtml(content);
  }
  CharSequence source=html;
  int start=0;
  int end=source.length();
  while (start < end && Character.isWhitespace(source.charAt(start))) {
    start++;
  }
  while (end > start && Character.isWhitespace(source.charAt(end - 1))) {
    end--;
  }
  textView.setText(source.subSequence(start,end));
}",0.9804858622062924
14529,"public static CharSequence displayHtmlComment(TextView textView,String content,int maxImageSize){
  if (textView == null)   return null;
  if (content == null) {
    textView.setText(null);
    return null;
  }
  if (!content.contains(""String_Node_Str"") && !content.contains(""String_Node_Str"")) {
    content=content.trim();
    textView.setText(content);
    if (content.contains(""String_Node_Str"")) {
      Linkify.addLinks(textView,Linkify.WEB_URLS);
    }
    return content;
  }
  content=Emoticons.replaceEmoticonsWithEmoji(content);
  final Spanned html;
  if (maxImageSize > 0 && content.contains(""String_Node_Str"")) {
    Drawable loading=textView.getContext().getResources().getDrawable(R.drawable.remote_image);
    Drawable failed=textView.getContext().getResources().getDrawable(R.drawable.remote_failed);
    html=HtmlUtils.fromHtml(content,new WPImageGetter(textView,maxImageSize,WordPress.imageLoader,loading,failed));
  }
 else {
    html=HtmlUtils.fromHtml(content);
  }
  CharSequence source=html;
  int start=0;
  int end=source.length();
  while (start < end && Character.isWhitespace(source.charAt(start))) {
    start++;
  }
  while (end > start && Character.isWhitespace(source.charAt(end - 1))) {
    end--;
  }
  textView.setText(source);
  return source;
}","public static void displayHtmlComment(TextView textView,String content,int maxImageSize){
  if (textView == null) {
    return;
  }
  if (content == null) {
    textView.setText(null);
    return;
  }
  if (!content.contains(""String_Node_Str"") && !content.contains(""String_Node_Str"")) {
    content=content.trim();
    textView.setText(content);
    if (content.contains(""String_Node_Str"")) {
      Linkify.addLinks(textView,Linkify.WEB_URLS);
    }
    return;
  }
  content=Emoticons.replaceEmoticonsWithEmoji(content);
  final Spanned html;
  if (maxImageSize > 0 && content.contains(""String_Node_Str"")) {
    Drawable loading=textView.getContext().getResources().getDrawable(R.drawable.remote_image);
    Drawable failed=textView.getContext().getResources().getDrawable(R.drawable.remote_failed);
    html=HtmlUtils.fromHtml(content,new WPImageGetter(textView,maxImageSize,WordPress.imageLoader,loading,failed));
  }
 else {
    html=HtmlUtils.fromHtml(content);
  }
  CharSequence source=html;
  int start=0;
  int end=source.length();
  while (start < end && Character.isWhitespace(source.charAt(start))) {
    start++;
  }
  while (end > start && Character.isWhitespace(source.charAt(end - 1))) {
    end--;
  }
  textView.setText(source.subSequence(start,end));
}",0.9600626468285044
14530,"private void loadPost(){
  mPost=ReaderPostTable.getPost(mBlogId,mPostId);
  if (mPost == null) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
  }
  final View postHeader=findViewById(R.id.layout_post_header);
  final TextView txtTitle=(TextView)postHeader.findViewById(R.id.text_post_title);
  final WPNetworkImageView imgAvatar=(WPNetworkImageView)postHeader.findViewById(R.id.image_post_avatar);
  final TextView txtCommentsClosed=(TextView)findViewById(R.id.text_comments_closed);
  txtTitle.setText(mPost.getTitle());
  String url=mPost.getPostAvatarForDisplay(getResources().getDimensionPixelSize(R.dimen.avatar_sz_small));
  imgAvatar.setImageUrl(url,WPNetworkImageView.ImageType.AVATAR);
  if (mPost.isCommentsOpen) {
    mCommentBox.setVisibility(View.VISIBLE);
    txtCommentsClosed.setVisibility(View.GONE);
    mEditComment.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_SEND) {
          submitComment();
        }
        return false;
      }
    }
);
    mImgSubmitComment.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        submitComment();
      }
    }
);
  }
 else {
    mCommentBox.setVisibility(View.GONE);
    txtCommentsClosed.setVisibility(View.VISIBLE);
  }
}","private void loadPost(){
  mPost=ReaderPostTable.getPost(mBlogId,mPostId);
  if (mPost == null) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
  }
  final View postHeader=findViewById(R.id.layout_post_header);
  final TextView txtTitle=(TextView)postHeader.findViewById(R.id.text_post_title);
  final WPNetworkImageView imgAvatar=(WPNetworkImageView)postHeader.findViewById(R.id.image_post_avatar);
  final TextView txtCommentsClosed=(TextView)findViewById(R.id.text_comments_closed);
  txtTitle.setText(mPost.getTitle());
  String url=mPost.getPostAvatarForDisplay(getResources().getDimensionPixelSize(R.dimen.avatar_sz_small));
  imgAvatar.setImageUrl(url,WPNetworkImageView.ImageType.AVATAR);
  if (mPost.isCommentsOpen) {
    mCommentBox.setVisibility(View.VISIBLE);
    txtCommentsClosed.setVisibility(View.GONE);
    mEditComment.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_SEND) {
          submitComment();
        }
        return false;
      }
    }
);
    mImgSubmitComment.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        submitComment();
      }
    }
);
  }
 else {
    mCommentBox.setVisibility(View.GONE);
    mEditComment.setEnabled(false);
    txtCommentsClosed.setVisibility(View.VISIBLE);
  }
}",0.988031914893617
14531,"public void search(String searchTerm){
  mLastSearch=searchTerm;
  String blogId=getBlogId();
  Cursor cursor=WordPress.wpDB.getThemes(blogId,searchTerm);
  if (mAdapter == null) {
    return;
  }
 else {
    mAdapter.changeCursor(cursor);
    mGridView.invalidateViews();
    if (cursor == null || cursor.getCount() == 0) {
      mNoResultText.setVisibility(View.VISIBLE);
    }
 else {
      mNoResultText.setVisibility(View.GONE);
    }
  }
}","public void search(String searchTerm){
  mLastSearch=searchTerm;
  if (mAdapter == null || WordPress.getCurrentBlog() == null) {
    return;
  }
  String blogId=String.valueOf(WordPress.getCurrentBlog().getRemoteBlogId());
  Cursor cursor=WordPress.wpDB.getThemes(blogId,searchTerm);
  mAdapter.changeCursor(cursor);
  mGridView.invalidateViews();
  if (cursor == null || cursor.getCount() == 0) {
    mNoResultText.setVisibility(View.VISIBLE);
  }
 else {
    mNoResultText.setVisibility(View.GONE);
  }
}",0.7886435331230284
14532,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comments);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
  }
  loadPost();
  mListView=(WPListView)findViewById(android.R.id.list);
  int height=getResources().getDimensionPixelSize(R.dimen.margin_extra_small);
  ReaderUtils.addListViewHeader(mListView,height);
  mListView.setAdapter(getCommentAdapter());
  mLayoutCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mLayoutCommentBox.setVisibility(View.VISIBLE);
  if (savedInstanceState != null && savedInstanceState.containsKey(KEY_REPLY_TO_COMMENT_ID)) {
    showAddCommentBox(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comments);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
  }
  loadPost();
  mListView=(WPListView)findViewById(android.R.id.list);
  int height=getResources().getDimensionPixelSize(R.dimen.margin_extra_small);
  ReaderUtils.addListViewHeader(mListView,height);
  mListView.setAdapter(getCommentAdapter());
  mLayoutCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mLayoutCommentBox.setVisibility(View.VISIBLE);
  final ImageView imgPostComment=(ImageView)mLayoutCommentBox.findViewById(R.id.image_post_comment);
  imgPostComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      submitComment(mReplyToCommentId);
    }
  }
);
  if (savedInstanceState != null && savedInstanceState.containsKey(KEY_REPLY_TO_COMMENT_ID)) {
    showAddCommentBox(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
}",0.900860456416012
14533,"@Override public void onClick(View v){
  submitComment(replyToCommentId);
}","@Override public void onClick(View v){
  submitComment(mReplyToCommentId);
}",0.9801324503311258
14534,"private void showAddCommentBox(final long replyToCommentId){
  if (isFinishing() || mIsSubmittingComment) {
    return;
  }
  final EditText editComment=(EditText)mLayoutCommentBox.findViewById(R.id.edit_comment);
  editComment.setHint(replyToCommentId == 0 ? R.string.reader_hint_comment_on_post : R.string.reader_hint_comment_on_comment);
  if (mLayoutCommentBox.getVisibility() != View.VISIBLE) {
    AniUtils.flyIn(mLayoutCommentBox);
  }
  editComment.requestFocus();
  editComment.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_SEND) {
        submitComment(replyToCommentId);
      }
      return false;
    }
  }
);
  final ImageView imgPostComment=(ImageView)findViewById(R.id.image_post_comment);
  imgPostComment.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      submitComment(replyToCommentId);
    }
  }
);
  EditTextUtils.showSoftInput(editComment);
  if (replyToCommentId != 0) {
    getCommentAdapter().setHighlightCommentId(replyToCommentId,false);
    mListView.postDelayed(new Runnable(){
      @Override public void run(){
        scrollToCommentId(replyToCommentId);
      }
    }
,300);
  }
  mReplyToCommentId=replyToCommentId;
}","private void showAddCommentBox(final long replyToCommentId){
  if (isFinishing() || mIsSubmittingComment) {
    return;
  }
  final EditText editComment=(EditText)mLayoutCommentBox.findViewById(R.id.edit_comment);
  editComment.setHint(replyToCommentId == 0 ? R.string.reader_hint_comment_on_post : R.string.reader_hint_comment_on_comment);
  if (mLayoutCommentBox.getVisibility() != View.VISIBLE) {
    AniUtils.flyIn(mLayoutCommentBox);
  }
  editComment.requestFocus();
  editComment.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_SEND) {
        submitComment(replyToCommentId);
      }
      return false;
    }
  }
);
  EditTextUtils.showSoftInput(editComment);
  if (replyToCommentId != 0) {
    getCommentAdapter().setHighlightCommentId(replyToCommentId,false);
    mListView.postDelayed(new Runnable(){
      @Override public void run(){
        scrollToCommentId(replyToCommentId);
      }
    }
,300);
  }
  mReplyToCommentId=replyToCommentId;
}",0.90390625
14535,"/** 
 * Open a note fragment based on the type of note
 */
private void openNote(final Note note){
  if (note == null || isFinishing() || isActivityDestroyed()) {
    return;
  }
  mSelectedNoteId=note.getId();
  if (note.isUnread()) {
    note.markAsRead();
  }
  mDetailFragment=getDetailFragmentForNote(note);
  if (DisplayUtils.isLandscapeTablet(this)) {
    FragmentManager fm=getFragmentManager();
    FragmentTransaction ft=fm.beginTransaction();
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
    ft.replace(R.id.notifications_detail_fragment_container,mDetailFragment);
    ft.commitAllowingStateLoss();
    return;
  }
  FragmentManager fm=getFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  ft.replace(R.id.layout_fragment_container,mDetailFragment);
  mMenuDrawer.setDrawerIndicatorEnabled(false);
  ft.addToBackStack(null);
  ft.commitAllowingStateLoss();
  if (note.getFormattedSubject() != null) {
    setTitle(note.getTitle());
  }
}","/** 
 * Open a note fragment based on the type of note
 */
private void openNote(final Note note){
  if (note == null || isFinishing() || isActivityDestroyed()) {
    return;
  }
  mSelectedNoteId=note.getId();
  if (note.isUnread()) {
    note.markAsRead();
  }
  mDetailFragment=getDetailFragmentForNote(note);
  if (DisplayUtils.isLandscapeTablet(this)) {
    FragmentManager fm=getFragmentManager();
    FragmentTransaction ft=fm.beginTransaction();
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
    ft.replace(R.id.notifications_detail_fragment_container,mDetailFragment,TAG_TABLET_DETAIL_VIEW);
    ft.commitAllowingStateLoss();
    return;
  }
  FragmentManager fm=getFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  ft.replace(R.id.layout_fragment_container,mDetailFragment);
  mMenuDrawer.setDrawerIndicatorEnabled(false);
  ft.addToBackStack(null);
  ft.commitAllowingStateLoss();
  if (note.getFormattedSubject() != null) {
    setTitle(note.getTitle());
  }
}",0.9891662741403674
14536,"@Override public void onSaveInstanceState(@Nonnull Bundle outState){
  if (outState.isEmpty()) {
    outState.putBoolean(""String_Node_Str"",true);
  }
  outState.putBoolean(KEY_INITIAL_UPDATE,mHasPerformedInitialUpdate);
  if (DisplayUtils.isLandscapeTablet(this) || getFragmentManager().getBackStackEntryCount() > 0) {
    outState.putString(NOTE_ID_EXTRA,mSelectedNoteId);
  }
  if (!TextUtils.isEmpty(getCommentReplyText())) {
    outState.putString(KEY_REPLY_TEXT,getCommentReplyText());
  }
  super.onSaveInstanceState(outState);
}","@Override public void onSaveInstanceState(@Nonnull Bundle outState){
  if (outState.isEmpty()) {
    outState.putBoolean(""String_Node_Str"",true);
  }
  outState.putBoolean(KEY_INITIAL_UPDATE,mHasPerformedInitialUpdate);
  if (getFragmentManager().getBackStackEntryCount() > 0 || getFragmentManager().findFragmentByTag(TAG_TABLET_DETAIL_VIEW) != null) {
    outState.putString(NOTE_ID_EXTRA,mSelectedNoteId);
  }
  if (!TextUtils.isEmpty(getCommentReplyText())) {
    outState.putString(KEY_REPLY_TEXT,getCommentReplyText());
  }
  super.onSaveInstanceState(outState);
}",0.8605072463768116
14537,"ImageSizeMap(String jsonString){
  if (TextUtils.isEmpty(jsonString)) {
    return;
  }
  try {
    JSONObject json=new JSONObject(jsonString);
    Iterator<String> it=json.keys();
    if (!it.hasNext()) {
      return;
    }
    while (it.hasNext()) {
      JSONObject jsonAttach=json.optJSONObject(it.next());
      String mimeType=JSONUtil.getString(json,""String_Node_Str"");
      if (mimeType.startsWith(""String_Node_Str"")) {
        String normUrl=UrlUtils.normalizeUrl(UrlUtils.removeQuery(JSONUtil.getString(json,""String_Node_Str"")));
        int width=jsonAttach.optInt(""String_Node_Str"");
        int height=jsonAttach.optInt(""String_Node_Str"");
        this.put(normUrl,new ImageSize(width,height));
      }
    }
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.READER,e);
  }
}","ImageSizeMap(String jsonString){
  if (TextUtils.isEmpty(jsonString)) {
    return;
  }
  try {
    JSONObject json=new JSONObject(jsonString);
    Iterator<String> it=json.keys();
    if (!it.hasNext()) {
      return;
    }
    while (it.hasNext()) {
      JSONObject jsonAttach=json.optJSONObject(it.next());
      if (jsonAttach != null && JSONUtil.getString(jsonAttach,""String_Node_Str"").startsWith(""String_Node_Str"")) {
        String normUrl=UrlUtils.normalizeUrl(UrlUtils.removeQuery(JSONUtil.getString(json,""String_Node_Str"")));
        int width=jsonAttach.optInt(""String_Node_Str"");
        int height=jsonAttach.optInt(""String_Node_Str"");
        this.put(normUrl,new ImageSize(width,height));
      }
    }
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.READER,e);
  }
}",0.9583858764186634
14538,"/** 
 * returns true if airplane mode has been enabled
 */
public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}","/** 
 * returns true if airplane mode has been enabled
 */
@TargetApi(VERSION_CODES.JELLY_BEAN_MR1) @SuppressWarnings(""String_Node_Str"") public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}",0.9133333333333332
14539,"/** 
 * returns true if airplane mode has been enabled
 */
public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}","/** 
 * returns true if airplane mode has been enabled
 */
@TargetApi(VERSION_CODES.JELLY_BEAN_MR1) @SuppressWarnings(""String_Node_Str"") public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}",0.9133333333333332
14540,"private String formatPostContentForWebView(final String content){
  StringBuilder sbHtml=new StringBuilder(""String_Node_Str"");
  sbHtml.append(String.format(""String_Node_Str"",mPost.getTitle())).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.linkColorStr).append(""String_Node_Str"");
  if (canEnableJavaScript()) {
    sbHtml.append(""String_Node_Str"").append(pxToDp(mResourceVars.videoWidthPx)).append(""String_Node_Str"").append(""String_Node_Str"").append(pxToDp(mResourceVars.videoHeightPx)).append(""String_Node_Str"");
  }
 else {
    sbHtml.append(""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"");
  if (content.contains(""String_Node_Str"")) {
    AppLog.d(AppLog.T.READER,""String_Node_Str"");
    sbHtml.append(""String_Node_Str"").append(""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(content).append(""String_Node_Str"");
  return sbHtml.toString();
}","private String formatPostContentForWebView(final String content){
  StringBuilder sbHtml=new StringBuilder(""String_Node_Str"");
  sbHtml.append(String.format(""String_Node_Str"",mPost.getTitle())).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.linkColorStr).append(""String_Node_Str"");
  if (canEnableJavaScript()) {
    sbHtml.append(""String_Node_Str"").append(pxToDp(mResourceVars.videoWidthPx)).append(""String_Node_Str"").append(""String_Node_Str"").append(pxToDp(mResourceVars.videoHeightPx)).append(""String_Node_Str"");
  }
 else {
    sbHtml.append(""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.greyExtraLightStr).append(""String_Node_Str"").append(""String_Node_Str"").append(mResourceVars.marginSmallPx).append(""String_Node_Str"");
  if (content.contains(""String_Node_Str"")) {
    AppLog.d(AppLog.T.READER,""String_Node_Str"");
    sbHtml.append(""String_Node_Str"").append(""String_Node_Str"");
  }
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(content).append(""String_Node_Str"");
  return sbHtml.toString();
}",0.9935802469135804
14541,"public static String getSrcAttrValue(final String tag){
  if (tag == null) {
    return null;
  }
  Matcher matcher=SRC_ATTR_PATTERN.matcher(tag);
  if (matcher.find()) {
    return tag.substring(matcher.start() + 5,matcher.end() - 1);
  }
 else {
    return null;
  }
}","private static String getSrcAttrValue(final String tag){
  if (tag == null) {
    return null;
  }
  Matcher matcher=SRC_ATTR_PATTERN.matcher(tag);
  if (matcher.find()) {
    return tag.substring(matcher.start() + 5,matcher.end() - 1);
  }
 else {
    return null;
  }
}",0.9796672828096118
14542,"private void replaceImageTag(final String imageTag,final String imageUrl){
  if (imageUrl.contains(""String_Node_Str"")) {
    return;
  }
  int origWidth;
  int origHeight;
  ReaderAttachment attach=(mAttachments != null ? mAttachments.get(imageUrl) : null);
  if (attach != null && attach.isImage()) {
    origWidth=attach.width;
    origHeight=attach.height;
  }
 else   if (imageUrl.contains(""String_Node_Str"")) {
    Uri uri=Uri.parse(imageUrl.replace(""String_Node_Str"",""String_Node_Str""));
    origWidth=StringUtils.stringToInt(uri.getQueryParameter(""String_Node_Str""));
    origHeight=StringUtils.stringToInt(uri.getQueryParameter(""String_Node_Str""));
  }
 else {
    return;
  }
  int newWidth;
  int newHeight;
  if (origWidth > 0 && origHeight > 0) {
    float ratio=((float)origHeight / (float)origWidth);
    newWidth=mResourceVars.fullSizeImageWidth;
    newHeight=(int)(newWidth * ratio);
  }
 else   if (origWidth > 0) {
    newWidth=mResourceVars.fullSizeImageWidth;
    newHeight=0;
  }
 else {
    return;
  }
  String newImageUrl=ReaderUtils.getResizedImageUrl(imageUrl,newWidth,newHeight,mPost.isPrivate);
  String newImageTag=String.format(""String_Node_Str"",newImageUrl,newWidth,newHeight);
  int start=mRenderBuilder.indexOf(imageTag);
  if (start == -1) {
    AppLog.w(AppLog.T.READER,""String_Node_Str"");
    return;
  }
  mRenderBuilder.replace(start,start + imageTag.length(),newImageTag);
}","private void replaceImageTag(final String imageTag,final String imageUrl){
  if (imageTag.contains(""String_Node_Str"")) {
    return;
  }
  int origWidth;
  int origHeight;
  ReaderAttachment attach=(mAttachments != null ? mAttachments.get(imageUrl) : null);
  if (attach != null && attach.isImage()) {
    origWidth=attach.width;
    origHeight=attach.height;
  }
 else   if (imageUrl.contains(""String_Node_Str"")) {
    Uri uri=Uri.parse(imageUrl.replace(""String_Node_Str"",""String_Node_Str""));
    origWidth=StringUtils.stringToInt(uri.getQueryParameter(""String_Node_Str""));
    origHeight=StringUtils.stringToInt(uri.getQueryParameter(""String_Node_Str""));
  }
 else {
    origWidth=0;
    origHeight=0;
  }
  int newWidth;
  int newHeight;
  if (origWidth > 0 && origHeight > 0) {
    float ratio=((float)origHeight / (float)origWidth);
    newWidth=mResourceVars.fullSizeImageWidth;
    newHeight=(int)(newWidth * ratio);
  }
 else   if (origWidth > 0) {
    newWidth=mResourceVars.fullSizeImageWidth;
    newHeight=0;
  }
 else {
    AppLog.d(AppLog.T.READER,""String_Node_Str"" + imageUrl);
    return;
  }
  String newImageUrl=ReaderUtils.getResizedImageUrl(imageUrl,newWidth,newHeight,mPost.isPrivate);
  String newImageTag=String.format(""String_Node_Str"",newImageUrl,newWidth,newHeight);
  int start=mRenderBuilder.indexOf(imageTag);
  if (start == -1) {
    AppLog.w(AppLog.T.READER,""String_Node_Str"");
    return;
  }
  mRenderBuilder.replace(start,start + imageTag.length(),newImageTag);
}",0.779113706630024
14543,"public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(){
        if (mCanLoadMorePosts && !mIsFetchingPosts)         requestPosts(true);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(      int postCount){
        if (postCount == 0 && mCanLoadMorePosts) {
          requestPosts(false);
          setRefreshing(true);
        }
 else         if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
 else         if (DisplayUtils.isTablet(getActivity())) {
          int selectedPosition=getListView().getCheckedItemPosition();
          if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}","public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(){
        if (mCanLoadMorePosts && !mIsFetchingPosts)         requestPosts(true);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(      int postCount){
        if (postCount == 0 && mCanLoadMorePosts) {
          setRefreshing(true);
          requestPosts(false);
        }
 else         if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
 else         if (DisplayUtils.isTablet(getActivity())) {
          int selectedPosition=getListView().getCheckedItemPosition();
          if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}",0.981074481074481
14544,"public void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  int postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
  if (!loadMore) {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
  }
  List<Object> apiArgs=new Vector<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  if (mProgressFooterView != null && loadMore) {
    mProgressFooterView.setVisibility(View.VISIBLE);
  }
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded())       return;
      mPullToRefreshHelper.setRefreshing(false);
      if (mProgressFooterView != null) {
        mProgressFooterView.setVisibility(View.GONE);
      }
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      getPostListAdapter().loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      mPullToRefreshHelper.setRefreshing(false);
      if (mProgressFooterView != null) {
        mProgressFooterView.setVisibility(View.GONE);
      }
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_unauthorized_pages : R.string.error_refresh_unauthorized_posts,Duration.LONG);
        return;
default :
      ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts,Duration.LONG);
    return;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}","public void requestPosts(boolean loadMore){
  if (!isAdded() || WordPress.getCurrentBlog() == null || mIsFetchingPosts) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  int postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
  if (!loadMore) {
    mCanLoadMorePosts=true;
    postCount=POSTS_REQUEST_COUNT;
  }
  List<Object> apiArgs=new Vector<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  if (mProgressFooterView != null && loadMore) {
    mProgressFooterView.setVisibility(View.VISIBLE);
  }
  mCurrentFetchPostsTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded())       return;
      mPullToRefreshHelper.setRefreshing(false);
      if (mProgressFooterView != null) {
        mProgressFooterView.setVisibility(View.GONE);
      }
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
      }
      getPostListAdapter().loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mCurrentFetchPostsTask=null;
      mIsFetchingPosts=false;
      if (!isAdded()) {
        return;
      }
      mPullToRefreshHelper.setRefreshing(false);
      if (mProgressFooterView != null) {
        mProgressFooterView.setVisibility(View.GONE);
      }
      if (errorType != ErrorType.TASK_CANCELLED && errorType != ErrorType.NO_ERROR) {
switch (errorType) {
case UNAUTHORIZED:
          ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_unauthorized_pages : R.string.error_refresh_unauthorized_posts,Duration.LONG);
        return;
default :
      ToastUtils.showToast(getActivity(),mIsPage ? R.string.error_refresh_pages : R.string.error_refresh_posts,Duration.LONG);
    return;
}
}
}
}
);
mIsFetchingPosts=true;
mCurrentFetchPostsTask.execute(apiArgs);
}",0.977886977886978
14545,"@Override public void onPostsLoaded(int postCount){
  if (postCount == 0 && mCanLoadMorePosts) {
    requestPosts(false);
    setRefreshing(true);
  }
 else   if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
 else   if (DisplayUtils.isTablet(getActivity())) {
    int selectedPosition=getListView().getCheckedItemPosition();
    if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
      }
    }
  }
}","@Override public void onPostsLoaded(int postCount){
  if (postCount == 0 && mCanLoadMorePosts) {
    setRefreshing(true);
    requestPosts(false);
  }
 else   if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
 else   if (DisplayUtils.isTablet(getActivity())) {
    int selectedPosition=getListView().getCheckedItemPosition();
    if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
      }
    }
  }
}",0.9724669603524227
14546,"@Override public void bindView(View view,Context context,Cursor cursor){
  if (cursor.isClosed())   return;
  Bucket.ObjectCursor<Note> objectCursor=(Bucket.ObjectCursor<Note>)cursor;
  view.setActivated(mShouldHighlightRows && objectCursor.getPosition() == mSelectedPosition);
  NoteViewHolder noteViewHolder=(NoteViewHolder)view.getTag();
  noteViewHolder.setNoteId(objectCursor.getSimperiumKey());
  Note.NoteTimeGroup timeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
  Note.NoteTimeGroup previousTimeGroup=null;
  if (objectCursor.getPosition() > 0 && objectCursor.moveToPrevious()) {
    previousTimeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
    objectCursor.moveToNext();
  }
  if (previousTimeGroup != null && previousTimeGroup == timeGroup) {
    noteViewHolder.headerView.setVisibility(View.GONE);
  }
 else {
    if (timeGroup == Note.NoteTimeGroup.GROUP_TODAY) {
      noteViewHolder.headerText.setText(context.getString(R.string.stats_timeframe_today).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_YESTERDAY) {
      noteViewHolder.headerText.setText(context.getString(R.string.stats_timeframe_yesterday).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_LAST_WEEK) {
      noteViewHolder.headerText.setText(context.getString(R.string.last_week).toUpperCase());
    }
 else {
      noteViewHolder.headerText.setText(context.getString(R.string.older).toUpperCase());
    }
    noteViewHolder.headerView.setVisibility(View.VISIBLE);
  }
  String noteSubjectHtml=getStringForColumnName(objectCursor,Note.Schema.SUBJECT_INDEX);
  noteViewHolder.txtLabel.setText(Html.fromHtml(noteSubjectHtml));
  String noteSnippet=getStringForColumnName(objectCursor,Note.Schema.SNIPPET_INDEX);
  if (!TextUtils.isEmpty(noteSnippet)) {
    noteViewHolder.txtLabel.setMaxLines(2);
    noteViewHolder.txtDetail.setText(noteSnippet);
    noteViewHolder.txtDetail.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.txtLabel.setMaxLines(3);
    noteViewHolder.txtDetail.setVisibility(View.GONE);
  }
  String avatarUrl=PhotonUtils.fixAvatar(getStringForColumnName(objectCursor,Note.Schema.ICON_URL_INDEX),mAvatarSz);
  noteViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  boolean isUnread=SqlUtils.sqlToBool(getIntForColumnName(objectCursor,Note.Schema.UNREAD_INDEX));
  String noticonCharacter=getStringForColumnName(objectCursor,Note.Schema.NOTICON_INDEX);
  if (!TextUtils.isEmpty(noticonCharacter)) {
    noteViewHolder.noteIcon.setText(noticonCharacter);
    if (isUnread) {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_blue);
    }
 else {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_grey);
    }
    noteViewHolder.noteIcon.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.noteIcon.setVisibility(View.GONE);
  }
  if (isUnread) {
    view.setBackgroundResource(mUnreadBackgroundResId);
  }
 else {
    view.setBackgroundResource(mReadBackgroundResId);
  }
}","@Override public void bindView(View view,Context context,Cursor cursor){
  if (cursor.isClosed())   return;
  Bucket.ObjectCursor<Note> objectCursor=(Bucket.ObjectCursor<Note>)cursor;
  view.setActivated(mShouldHighlightRows && objectCursor.getPosition() == mSelectedPosition);
  NoteViewHolder noteViewHolder=(NoteViewHolder)view.getTag();
  noteViewHolder.setNoteId(objectCursor.getSimperiumKey());
  Note.NoteTimeGroup timeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
  Note.NoteTimeGroup previousTimeGroup=null;
  if (objectCursor.getPosition() > 0 && objectCursor.moveToPrevious()) {
    previousTimeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
    objectCursor.moveToNext();
  }
  if (previousTimeGroup != null && previousTimeGroup == timeGroup) {
    noteViewHolder.headerView.setVisibility(View.GONE);
  }
 else {
    if (timeGroup == Note.NoteTimeGroup.GROUP_TODAY) {
      noteViewHolder.headerText.setText(context.getString(R.string.stats_timeframe_today).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_YESTERDAY) {
      noteViewHolder.headerText.setText(context.getString(R.string.stats_timeframe_yesterday).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_LAST_WEEK) {
      noteViewHolder.headerText.setText(context.getString(R.string.last_week).toUpperCase());
    }
 else {
      noteViewHolder.headerText.setText(context.getString(R.string.older).toUpperCase());
    }
    noteViewHolder.headerView.setVisibility(View.VISIBLE);
  }
  String noteSubjectHtml=getStringForColumnName(objectCursor,Note.Schema.SUBJECT_INDEX).trim();
  CharSequence noteSubjectSpanned=Html.fromHtml(noteSubjectHtml);
  noteSubjectSpanned=noteSubjectSpanned.subSequence(0,TextUtils.getTrimmedLength(noteSubjectSpanned));
  noteViewHolder.txtLabel.setText(noteSubjectSpanned);
  String noteSnippet=getStringForColumnName(objectCursor,Note.Schema.SNIPPET_INDEX);
  if (!TextUtils.isEmpty(noteSnippet)) {
    noteViewHolder.txtLabel.setMaxLines(2);
    noteViewHolder.txtDetail.setText(noteSnippet);
    noteViewHolder.txtDetail.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.txtLabel.setMaxLines(3);
    noteViewHolder.txtDetail.setVisibility(View.GONE);
  }
  String avatarUrl=PhotonUtils.fixAvatar(getStringForColumnName(objectCursor,Note.Schema.ICON_URL_INDEX),mAvatarSz);
  noteViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  boolean isUnread=SqlUtils.sqlToBool(getIntForColumnName(objectCursor,Note.Schema.UNREAD_INDEX));
  String noticonCharacter=getStringForColumnName(objectCursor,Note.Schema.NOTICON_INDEX);
  if (!TextUtils.isEmpty(noticonCharacter)) {
    noteViewHolder.noteIcon.setText(noticonCharacter);
    if (isUnread) {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_blue);
    }
 else {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_grey);
    }
    noteViewHolder.noteIcon.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.noteIcon.setVisibility(View.GONE);
  }
  if (isUnread) {
    view.setBackgroundResource(mUnreadBackgroundResId);
  }
 else {
    view.setBackgroundResource(mReadBackgroundResId);
  }
}",0.9595519601742376
14547,"public static Spannable getSpannableTextFromIndices(JSONObject subject,final NoteBlock.OnNoteBlockTextClickListener onNoteBlockTextClickListener){
  if (subject == null) {
    return new SpannableStringBuilder();
  }
  String text=subject.optString(""String_Node_Str"",""String_Node_Str"");
  SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(text);
  boolean shouldLink=onNoteBlockTextClickListener != null;
  try {
    JSONArray idsArray=subject.getJSONArray(""String_Node_Str"");
    for (int i=0; i < idsArray.length(); i++) {
      JSONObject idObject=(JSONObject)idsArray.get(i);
      NoteBlockClickableSpan clickableSpan=new NoteBlockClickableSpan(idObject,mBgColor,mTextColor,mLinkColor,shouldLink){
        @Override public void onClick(        View widget){
          if (onNoteBlockTextClickListener != null) {
            onNoteBlockTextClickListener.onNoteBlockTextClicked(this);
          }
        }
      }
;
      int[] indices=clickableSpan.getIndices();
      if (indices.length == 2 && indices[0] <= spannableStringBuilder.length() && indices[1] <= spannableStringBuilder.length()) {
        spannableStringBuilder.setSpan(clickableSpan,indices[0],indices[1],Spanned.SPAN_INCLUSIVE_INCLUSIVE);
        if (clickableSpan.getSpanStyle() != Typeface.NORMAL) {
          StyleSpan styleSpan=new StyleSpan(clickableSpan.getSpanStyle());
          spannableStringBuilder.setSpan(styleSpan,indices[0],indices[1],Spanned.SPAN_INCLUSIVE_INCLUSIVE);
        }
      }
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return spannableStringBuilder;
}","public static Spannable getSpannableTextFromIndices(JSONObject subject,final NoteBlock.OnNoteBlockTextClickListener onNoteBlockTextClickListener){
  if (subject == null) {
    return new SpannableStringBuilder();
  }
  String text=subject.optString(""String_Node_Str"",""String_Node_Str"").trim();
  SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(text);
  boolean shouldLink=onNoteBlockTextClickListener != null;
  try {
    JSONArray idsArray=subject.getJSONArray(""String_Node_Str"");
    for (int i=0; i < idsArray.length(); i++) {
      JSONObject idObject=(JSONObject)idsArray.get(i);
      NoteBlockClickableSpan clickableSpan=new NoteBlockClickableSpan(idObject,mBgColor,mTextColor,mLinkColor,shouldLink){
        @Override public void onClick(        View widget){
          if (onNoteBlockTextClickListener != null) {
            onNoteBlockTextClickListener.onNoteBlockTextClicked(this);
          }
        }
      }
;
      int[] indices=clickableSpan.getIndices();
      if (indices.length == 2 && indices[0] <= spannableStringBuilder.length() && indices[1] <= spannableStringBuilder.length()) {
        spannableStringBuilder.setSpan(clickableSpan,indices[0],indices[1],Spanned.SPAN_INCLUSIVE_INCLUSIVE);
        if (clickableSpan.getSpanStyle() != Typeface.NORMAL) {
          StyleSpan styleSpan=new StyleSpan(clickableSpan.getSpanStyle());
          spannableStringBuilder.setSpan(styleSpan,indices[0],indices[1],Spanned.SPAN_INCLUSIVE_INCLUSIVE);
        }
      }
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return spannableStringBuilder;
}",0.9978145488604432
14548,"private void updateStatusViews(){
  if (!isAdded() || !hasComment())   return;
  final int moderationDrawResId;
  final int moderationTextResId;
  final CommentStatus newStatus;
  final int statusTextResId;
  final int statusColor;
switch (mComment.getStatusEnum()) {
case APPROVED:
    moderationDrawResId=R.drawable.ic_comment_moderate_approve_active;
  moderationTextResId=R.string.comment_status_approved;
newStatus=CommentStatus.UNAPPROVED;
statusTextResId=R.string.comment_status_approved;
statusColor=getActivity().getResources().getColor(R.color.calypso_orange);
mBtnModerateComment.setTextColor(getActivity().getResources().getColor(R.color.calypso_orange));
break;
case UNAPPROVED:
moderationDrawResId=R.drawable.ic_comment_moderate_approve;
moderationTextResId=R.string.mnu_comment_approve;
newStatus=CommentStatus.APPROVED;
statusTextResId=R.string.comment_status_unapproved;
statusColor=getActivity().getResources().getColor(R.color.calypso_orange);
mBtnModerateComment.setTextColor(getActivity().getResources().getColor(R.color.calypso_blue));
break;
case SPAM:
moderationDrawResId=R.drawable.ic_comment_moderate_approve;
moderationTextResId=R.string.mnu_comment_approve;
newStatus=CommentStatus.APPROVED;
statusTextResId=R.string.comment_status_spam;
statusColor=getActivity().getResources().getColor(R.color.comment_status_spam);
break;
case TRASH:
moderationDrawResId=R.drawable.ic_comment_moderate_approve;
moderationTextResId=R.string.mnu_comment_approve;
newStatus=CommentStatus.APPROVED;
statusTextResId=R.string.comment_status_trash;
statusColor=getActivity().getResources().getColor(R.color.comment_status_spam);
break;
default :
return;
}
int commentActionCount=0;
if (mNote != null && canLike()) {
commentActionCount++;
mBtnLikeComment.setVisibility(View.VISIBLE);
toggleLikeButton(mNote.hasLikedComment());
}
 else {
mBtnLikeComment.setVisibility(View.GONE);
}
if (mIsUsersBlog && mComment.getStatusEnum() != CommentStatus.APPROVED) {
mTxtStatus.setText(getString(statusTextResId).toUpperCase());
mTxtStatus.setTextColor(statusColor);
if (mTxtStatus.getVisibility() != View.VISIBLE) {
mTxtStatus.clearAnimation();
AniUtils.fadeIn(mTxtStatus);
}
}
 else {
mTxtStatus.setVisibility(View.GONE);
}
if (canModerate()) {
commentActionCount++;
setTextDrawable(mBtnModerateComment,moderationDrawResId);
mBtnModerateComment.setText(moderationTextResId);
mBtnModerateComment.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
moderateComment(newStatus);
}
}
);
mBtnModerateComment.setVisibility(View.VISIBLE);
}
 else {
mBtnModerateComment.setVisibility(View.GONE);
}
if (canMarkAsSpam()) {
commentActionCount++;
mBtnSpamComment.setVisibility(View.VISIBLE);
if (mComment.getStatusEnum() == CommentStatus.SPAM) {
mBtnSpamComment.setText(R.string.mnu_comment_unspam);
}
 else {
mBtnSpamComment.setText(R.string.mnu_comment_spam);
}
}
 else {
mBtnSpamComment.setVisibility(View.GONE);
}
if (canTrash()) {
commentActionCount++;
mBtnTrashComment.setVisibility(View.VISIBLE);
}
 else {
mBtnTrashComment.setVisibility(View.GONE);
}
if (canEdit()) {
commentActionCount++;
mBtnEditComment.setVisibility(View.VISIBLE);
}
 else {
mBtnEditComment.setVisibility(View.GONE);
}
if (commentActionCount > 3) {
if (commentActionCount >= 4 && canEdit()) {
mBtnEditComment.setVisibility(View.GONE);
}
if (commentActionCount == 5 && canMarkAsSpam()) {
mBtnSpamComment.setVisibility(View.GONE);
}
mBtnMore.setVisibility(View.VISIBLE);
}
 else {
mBtnMore.setVisibility(View.GONE);
}
mLayoutButtons.setVisibility(View.VISIBLE);
}","private void updateStatusViews(){
  if (!isAdded() || !hasComment())   return;
  final int moderationDrawResId;
  final int moderationTextResId;
  final CommentStatus newStatus;
  final int statusTextResId;
  final int statusColor;
switch (mComment.getStatusEnum()) {
case APPROVED:
    moderationDrawResId=R.drawable.ic_comment_moderate_approve_active;
  moderationTextResId=R.string.comment_status_approved;
newStatus=CommentStatus.UNAPPROVED;
statusTextResId=R.string.comment_status_approved;
statusColor=getActivity().getResources().getColor(R.color.calypso_orange);
mBtnModerateComment.setTextColor(getActivity().getResources().getColor(R.color.calypso_orange));
break;
case UNAPPROVED:
moderationDrawResId=R.drawable.ic_comment_moderate_approve;
moderationTextResId=R.string.mnu_comment_approve;
newStatus=CommentStatus.APPROVED;
statusTextResId=R.string.comment_status_unapproved;
statusColor=getActivity().getResources().getColor(R.color.calypso_orange);
mBtnModerateComment.setTextColor(getActivity().getResources().getColor(R.color.calypso_blue));
break;
case SPAM:
moderationDrawResId=R.drawable.ic_comment_moderate_approve;
moderationTextResId=R.string.mnu_comment_approve;
newStatus=CommentStatus.APPROVED;
statusTextResId=R.string.comment_status_spam;
statusColor=getActivity().getResources().getColor(R.color.comment_status_spam);
mBtnModerateComment.setTextColor(getActivity().getResources().getColor(R.color.calypso_blue));
break;
case TRASH:
moderationDrawResId=R.drawable.ic_comment_moderate_approve;
moderationTextResId=R.string.mnu_comment_approve;
newStatus=CommentStatus.APPROVED;
statusTextResId=R.string.comment_status_trash;
statusColor=getActivity().getResources().getColor(R.color.comment_status_spam);
mBtnModerateComment.setTextColor(getActivity().getResources().getColor(R.color.calypso_blue));
break;
default :
return;
}
int commentActionCount=0;
if (mNote != null && canLike()) {
commentActionCount++;
mBtnLikeComment.setVisibility(View.VISIBLE);
toggleLikeButton(mNote.hasLikedComment());
}
 else {
mBtnLikeComment.setVisibility(View.GONE);
}
if (mIsUsersBlog && mComment.getStatusEnum() != CommentStatus.APPROVED) {
mTxtStatus.setText(getString(statusTextResId).toUpperCase());
mTxtStatus.setTextColor(statusColor);
if (mTxtStatus.getVisibility() != View.VISIBLE) {
mTxtStatus.clearAnimation();
AniUtils.fadeIn(mTxtStatus);
}
}
 else {
mTxtStatus.setVisibility(View.GONE);
}
if (canModerate()) {
commentActionCount++;
setTextDrawable(mBtnModerateComment,moderationDrawResId);
mBtnModerateComment.setText(moderationTextResId);
mBtnModerateComment.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
moderateComment(newStatus);
}
}
);
mBtnModerateComment.setVisibility(View.VISIBLE);
}
 else {
mBtnModerateComment.setVisibility(View.GONE);
}
if (canMarkAsSpam()) {
commentActionCount++;
mBtnSpamComment.setVisibility(View.VISIBLE);
if (mComment.getStatusEnum() == CommentStatus.SPAM) {
mBtnSpamComment.setText(R.string.mnu_comment_unspam);
}
 else {
mBtnSpamComment.setText(R.string.mnu_comment_spam);
}
}
 else {
mBtnSpamComment.setVisibility(View.GONE);
}
if (canTrash()) {
commentActionCount++;
mBtnTrashComment.setVisibility(View.VISIBLE);
}
 else {
mBtnTrashComment.setVisibility(View.GONE);
}
if (canEdit()) {
commentActionCount++;
mBtnEditComment.setVisibility(View.VISIBLE);
}
 else {
mBtnEditComment.setVisibility(View.GONE);
}
if (commentActionCount > 3) {
if (commentActionCount >= 4 && canEdit()) {
mBtnEditComment.setVisibility(View.GONE);
}
if (commentActionCount == 5 && canMarkAsSpam()) {
mBtnSpamComment.setVisibility(View.GONE);
}
mBtnMore.setVisibility(View.VISIBLE);
}
 else {
mBtnMore.setVisibility(View.GONE);
}
mLayoutButtons.setVisibility(View.VISIBLE);
}",0.973979731580389
14549,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  if (!isAdded())   return;
  if (!DisplayUtils.isLandscapeTablet(getActivity())) {
    v.setBackgroundColor(getActivity().getResources().getColor(R.color.white));
    float yOffset=-v.getY();
    v.animate().translationY(yOffset).alpha(0.0f).setDuration(NotificationsActivity.NOTIFICATION_TRANSITION_DURATION);
  }
  Note note=mNotesAdapter.getNote(position);
  if (note != null && mNoteClickListener != null) {
    mNoteClickListener.onClickNote(note,v.getY());
    mNotesAdapter.setSelectedPosition(position);
  }
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  if (!isAdded())   return;
  Note note=mNotesAdapter.getNote(position);
  if (note != null && mNoteClickListener != null) {
    mNoteClickListener.onClickNote(note,v.getY());
    mNotesAdapter.setSelectedPosition(position);
  }
}",0.6821192052980133
14550,"@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(getNoteText().toString());
  if (hasImageMediaItem()) {
    noteBlockHolder.avatarImageView.setImageUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),WordPress.imageLoader);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.setImageResource(R.drawable.placeholder);
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  if (mTextViewIndent == 0) {
    Context context=view.getContext();
    if (context != null) {
      mTextViewIndent=context.getResources().getDimensionPixelSize(R.dimen.avatar_sz_small) + context.getResources().getDimensionPixelSize(R.dimen.margin_medium);
    }
  }
  CommentUtils.indentTextViewFirstLine(noteBlockHolder.commentTextView,NotificationUtils.getSpannableTextFromIndices(getNoteData().optJSONObject(""String_Node_Str""),getOnNoteBlockTextClickListener()),mTextViewIndent);
  return view;
}","@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(getNoteText().toString());
  if (hasImageMediaItem()) {
    noteBlockHolder.avatarImageView.setImageUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),WordPress.imageLoader);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.setImageResource(R.drawable.placeholder);
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  if (mTextViewIndent == 0) {
    Context context=view.getContext();
    if (context != null) {
      mTextViewIndent=context.getResources().getDimensionPixelSize(R.dimen.comment_avatar_size) + DisplayUtils.dpToPx(context,6);
    }
  }
  CommentUtils.indentTextViewFirstLine(noteBlockHolder.commentTextView,NotificationUtils.getSpannableTextFromIndices(getNoteData().optJSONObject(""String_Node_Str""),getOnNoteBlockTextClickListener()),mTextViewIndent);
  return view;
}",0.9572649572649572
14551,"public static void saveAttachmentsForPosts(ReaderPostList posts){
  if (posts == null || posts.size() == 0) {
    return;
  }
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  SQLiteStatement stmt=db.compileStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    for (    ReaderPost post : posts) {
      if (post.hasAttachments()) {
        String[] args={Long.toString(post.blogId),Long.toString(post.postId)};
        db.delete(""String_Node_Str"",""String_Node_Str"",args);
        stmt.bindLong(1,post.blogId);
        stmt.bindLong(2,post.postId);
        for (        ReaderAttachment attach : post.getAttachments()) {
          stmt.bindLong(3,attach.attachmentId);
          stmt.bindString(4,attach.getUrl());
          stmt.bindString(5,attach.getMimeType());
          stmt.bindLong(6,attach.width);
          stmt.bindLong(7,attach.height);
          stmt.execute();
        }
      }
    }
  }
  finally {
    db.endTransaction();
    SqlUtils.closeStatement(stmt);
  }
}","public static void saveAttachmentsForPosts(ReaderPostList posts){
  if (posts == null || posts.size() == 0) {
    return;
  }
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  SQLiteStatement stmt=db.compileStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    for (    ReaderPost post : posts) {
      if (post.hasAttachments()) {
        String[] args={Long.toString(post.blogId),Long.toString(post.postId)};
        db.delete(""String_Node_Str"",""String_Node_Str"",args);
        stmt.bindLong(1,post.blogId);
        stmt.bindLong(2,post.postId);
        for (        ReaderAttachment attach : post.getAttachments()) {
          stmt.bindLong(3,attach.attachmentId);
          stmt.bindString(4,attach.getUrl());
          stmt.bindString(5,attach.getMimeType());
          stmt.bindLong(6,attach.width);
          stmt.bindLong(7,attach.height);
          stmt.execute();
        }
      }
    }
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
}",0.9752720079129574
14552,"private void deleteQuickPressShortcutsForAccount(Context ctx,int accountId){
  List<Map<String,Object>> shortcuts=getQuickPressShortcuts(accountId);
  if (shortcuts.size() == 0)   return;
  String packageName=EditPostActivity.class.getPackage().getName();
  String className=EditPostActivity.class.getName();
  for (int i=0; i < shortcuts.size(); i++) {
    Map<String,Object> shortcutHash=shortcuts.get(i);
    Intent shortcutIntent=new Intent();
    shortcutIntent.setClassName(packageName,className);
    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    shortcutIntent.setAction(Intent.ACTION_VIEW);
    Intent broadcastShortcutIntent=new Intent();
    broadcastShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
    broadcastShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,shortcutHash.get(""String_Node_Str"").toString());
    broadcastShortcutIntent.putExtra(""String_Node_Str"",false);
    broadcastShortcutIntent.setAction(""String_Node_Str"");
    ctx.sendBroadcast(broadcastShortcutIntent);
    String shortcutId=shortcutHash.get(""String_Node_Str"").toString();
    db.delete(QUICKPRESS_SHORTCUTS_TABLE,""String_Node_Str"",new String[]{shortcutId});
  }
}","private void deleteQuickPressShortcutsForAccount(Context ctx,int accountId){
  List<Map<String,Object>> shortcuts=getQuickPressShortcuts(accountId);
  if (shortcuts.size() == 0)   return;
  for (int i=0; i < shortcuts.size(); i++) {
    Map<String,Object> shortcutHash=shortcuts.get(i);
    Intent shortcutIntent=new Intent(WordPress.getContext(),EditPostActivity.class);
    shortcutIntent.setAction(Intent.ACTION_MAIN);
    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    Intent broadcastShortcutIntent=new Intent();
    broadcastShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
    broadcastShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,shortcutHash.get(""String_Node_Str"").toString());
    broadcastShortcutIntent.putExtra(""String_Node_Str"",false);
    broadcastShortcutIntent.setAction(""String_Node_Str"");
    ctx.sendBroadcast(broadcastShortcutIntent);
    String shortcutId=shortcutHash.get(""String_Node_Str"").toString();
    db.delete(QUICKPRESS_SHORTCUTS_TABLE,""String_Node_Str"",new String[]{shortcutId});
  }
}",0.8716216216216216
14553,"private void buildDialog(int positionParam){
  final int position=positionParam;
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AddQuickPressShortcutActivity.this);
  dialogBuilder.setTitle(R.string.quickpress_add_alert_title);
  final EditText quickPressShortcutName=new EditText(AddQuickPressShortcutActivity.this);
  quickPressShortcutName.setText(""String_Node_Str"" + StringUtils.unescapeHTML(accountNames.get(position)));
  dialogBuilder.setView(quickPressShortcutName);
  dialogBuilder.setPositiveButton(R.string.add,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (TextUtils.isEmpty(quickPressShortcutName.getText())) {
        Toast t=Toast.makeText(AddQuickPressShortcutActivity.this,R.string.quickpress_add_error,Toast.LENGTH_LONG);
        t.show();
      }
 else {
        Intent shortcutIntent=new Intent(AddQuickPressShortcutActivity.this,EditPostActivity.class);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        shortcutIntent.putExtra(EditPostActivity.EXTRA_QUICKPRESS_BLOG_ID,accountIDs[position]);
        shortcutIntent.putExtra(EditPostActivity.EXTRA_IS_QUICKPRESS,true);
        Intent addIntent=new Intent();
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,quickPressShortcutName.getText().toString());
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(AddQuickPressShortcutActivity.this,R.drawable.app_icon));
        WordPress.wpDB.addQuickPressShortcut(accountIDs[position],quickPressShortcutName.getText().toString());
        if (WordPress.currentBlog == null) {
          WordPress.currentBlog=WordPress.wpDB.instantiateBlogByLocalId(accountIDs[position]);
          WordPress.wpDB.updateLastBlogId(accountIDs[position]);
        }
        addIntent.setAction(""String_Node_Str"");
        AddQuickPressShortcutActivity.this.sendBroadcast(addIntent);
        AddQuickPressShortcutActivity.this.finish();
      }
    }
  }
);
  dialogBuilder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  dialogBuilder.setCancelable(false);
  dialogBuilder.create().show();
}","private void buildDialog(int positionParam){
  final int position=positionParam;
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AddQuickPressShortcutActivity.this);
  dialogBuilder.setTitle(R.string.quickpress_add_alert_title);
  final EditText quickPressShortcutName=new EditText(AddQuickPressShortcutActivity.this);
  quickPressShortcutName.setText(""String_Node_Str"" + StringUtils.unescapeHTML(accountNames.get(position)));
  dialogBuilder.setView(quickPressShortcutName);
  dialogBuilder.setPositiveButton(R.string.add,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (TextUtils.isEmpty(quickPressShortcutName.getText())) {
        Toast t=Toast.makeText(AddQuickPressShortcutActivity.this,R.string.quickpress_add_error,Toast.LENGTH_LONG);
        t.show();
      }
 else {
        Intent shortcutIntent=new Intent(getApplicationContext(),EditPostActivity.class);
        shortcutIntent.setAction(Intent.ACTION_MAIN);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        shortcutIntent.putExtra(EditPostActivity.EXTRA_QUICKPRESS_BLOG_ID,accountIDs[position]);
        shortcutIntent.putExtra(EditPostActivity.EXTRA_IS_QUICKPRESS,true);
        Intent addIntent=new Intent();
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,quickPressShortcutName.getText().toString());
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(AddQuickPressShortcutActivity.this,R.drawable.app_icon));
        WordPress.wpDB.addQuickPressShortcut(accountIDs[position],quickPressShortcutName.getText().toString());
        if (WordPress.currentBlog == null) {
          WordPress.currentBlog=WordPress.wpDB.instantiateBlogByLocalId(accountIDs[position]);
          WordPress.wpDB.updateLastBlogId(accountIDs[position]);
        }
        addIntent.setAction(""String_Node_Str"");
        AddQuickPressShortcutActivity.this.sendBroadcast(addIntent);
        AddQuickPressShortcutActivity.this.finish();
      }
    }
  }
);
  dialogBuilder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  dialogBuilder.setCancelable(false);
  dialogBuilder.create().show();
}",0.9769948186528498
14554,"/** 
 * @param imageUrl the url of the image to load
 * @param hiResWidth maximum width of the full-size image
 * @param isPrivate whether this is an image from a private blog
 * @param position the position of the image in ReaderPhotoViewerActivity
 * @param photoListener optional listener
 */
public void setImageUrl(String imageUrl,int hiResWidth,boolean isPrivate,int position,ReaderPhotoListener photoListener){
  int loResWidth=(int)(hiResWidth * 0.15f);
  if (isPrivate) {
    mLoResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,loResWidth,0);
    mHiResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,hiResWidth,0);
  }
 else {
    mLoResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,loResWidth,0);
    mHiResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,hiResWidth,0);
  }
  mPosition=position;
  mPhotoListener=photoListener;
  loadImageIfNecessary(false);
}","/** 
 * @param imageUrl the url of the image to load
 * @param hiResWidth maximum width of the full-size image
 * @param isPrivate whether this is an image from a private blog
 * @param position the position of the image in ReaderPhotoViewerActivity
 * @param photoListener optional listener
 */
public void setImageUrl(String imageUrl,int hiResWidth,boolean isPrivate,int position,ReaderPhotoListener photoListener){
  int loResWidth=(int)(hiResWidth * 0.15f);
  if (isPrivate) {
    mLoResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,loResWidth,0);
    mHiResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,hiResWidth,0);
  }
 else {
    mLoResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,loResWidth,0);
    mHiResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,hiResWidth,0);
  }
  mPosition=position;
  mPhotoListener=photoListener;
  loadLoResImage(false);
}",0.9853603603603605
14555,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!isInEditMode()) {
    loadImageIfNecessary(true);
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!isInEditMode()) {
    loadLoResImage(true);
  }
}",0.9595959595959596
14556,"@Override public void onResponse(final ImageLoader.ImageContainer response,boolean isImmediate){
  post(new Runnable(){
    @Override public void run(){
      handleResponse(response,false);
    }
  }
);
}","@Override public void onResponse(final ImageContainer response,boolean isImmediate){
  post(new Runnable(){
    @Override public void run(){
      handleResponse(response,false);
    }
  }
);
}",0.9698492462311558
14557,"public ReaderPhotoView(Context context,AttributeSet attrs){
  super(context,attrs);
  mImageView=new ImageView(context);
  LayoutParams paramsImg=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  paramsImg.addRule(CENTER_IN_PARENT);
  this.addView(mImageView,paramsImg);
  mProgress=new ProgressBar(context);
  LayoutParams paramsProgress=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  paramsProgress.addRule(CENTER_IN_PARENT);
  mProgress.setVisibility(View.GONE);
  this.addView(mProgress,paramsProgress);
  mTxtError=new WPTextView(context);
  LayoutParams paramsTxt=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  paramsTxt.addRule(CENTER_IN_PARENT);
  mTxtError.setGravity(Gravity.CENTER);
  mTxtError.setText(context.getString(R.string.reader_toast_err_view_image));
  mTxtError.setTextColor(context.getResources().getColor(R.color.grey_extra_light));
  mTxtError.setTextSize(TypedValue.COMPLEX_UNIT_PX,context.getResources().getDimensionPixelSize(R.dimen.text_sz_large));
  mTxtError.setVisibility(View.GONE);
  this.addView(mTxtError,paramsTxt);
}","public ReaderPhotoView(Context context,AttributeSet attrs){
  super(context,attrs);
  mImageView=new ImageView(context);
  LayoutParams paramsImg=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  paramsImg.addRule(CENTER_IN_PARENT);
  this.addView(mImageView,paramsImg);
  mTxtError=new WPTextView(context);
  LayoutParams paramsTxt=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  paramsTxt.addRule(CENTER_IN_PARENT);
  mTxtError.setGravity(Gravity.CENTER);
  mTxtError.setText(context.getString(R.string.reader_toast_err_view_image));
  mTxtError.setTextColor(context.getResources().getColor(R.color.grey_extra_light));
  mTxtError.setTextSize(TypedValue.COMPLEX_UNIT_PX,context.getResources().getDimensionPixelSize(R.dimen.text_sz_large));
  mTxtError.setVisibility(View.GONE);
  this.addView(mTxtError,paramsTxt);
  mProgress=new ProgressBar(context);
  LayoutParams paramsProgress=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  paramsProgress.addRule(CENTER_IN_PARENT);
  mProgress.setVisibility(View.GONE);
  this.addView(mProgress,paramsProgress);
}",0.7670504871567759
14558,"@Override protected void onDetachedFromWindow(){
  if (mImageContainer != null) {
    mImageContainer.cancelRequest();
    mImageView.setImageDrawable(null);
    mImageContainer=null;
  }
  super.onDetachedFromWindow();
}","@Override protected void onDetachedFromWindow(){
  if (mLoResContainer != null || mHiResContainer != null) {
    mImageView.setImageDrawable(null);
  }
  if (mLoResContainer != null) {
    mLoResContainer.cancelRequest();
    mLoResContainer=null;
  }
  if (mHiResContainer != null) {
    mHiResContainer.cancelRequest();
    mHiResContainer=null;
  }
  super.onDetachedFromWindow();
}",0.504950495049505
14559,"private void handleResponse(ImageLoader.ImageContainer response,boolean isLoResResponse){
  if (response.getBitmap() != null) {
    mImageView.setImageBitmap(response.getBitmap());
    createAttacher(mImageView);
    if (isLoResResponse) {
      ReaderAnim.fadeIn(mImageView,ReaderAnim.Duration.MEDIUM);
      if (mPhotoListener != null) {
        mPhotoListener.onPhotoLoaded(mPosition);
      }
      getHiResImage();
    }
    AppLog.d(AppLog.T.READER,""String_Node_Str"" + (isLoResResponse ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","private void handleResponse(ImageContainer response,boolean isLoResResponse){
  if (response.getBitmap() != null) {
    mImageView.setImageBitmap(response.getBitmap());
    createAttacher(mImageView);
    if (isLoResResponse) {
      hideProgress();
      ReaderAnim.fadeIn(mImageView,ReaderAnim.Duration.SHORT);
      if (mPhotoListener != null) {
        mPhotoListener.onPhotoLoaded(mPosition);
      }
      loadHiResImage();
    }
    AppLog.d(AppLog.T.READER,""String_Node_Str"" + (isLoResResponse ? ""String_Node_Str"" : ""String_Node_Str""));
  }
 else {
    AppLog.w(AppLog.T.READER,""String_Node_Str"" + (isLoResResponse ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.8571428571428571
14560,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.reader_fragment_photo_viewer,container,false);
  mPhotoView=(ReaderPhotoView)view.findViewById(R.id.photo_view);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mPhotoView=new ReaderPhotoView(container.getContext());
  mPhotoView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  return mPhotoView;
}",0.5236486486486487
14561,"/** 
 * @param loResImageUrl the url of the lo-res image to load
 * @param hiResImageUrl the url of the hi-res image to load
 * @param position the position of the image in ReaderPhotoViewerActivity
 * @param photoListener optional listener
 */
public void setImageUrl(String loResImageUrl,String hiResImageUrl,int position,ReaderPhotoListener photoListener){
  mLoResImageUrl=loResImageUrl;
  mHiResImageUrl=hiResImageUrl;
  mPosition=position;
  mPhotoListener=photoListener;
  loadImageIfNecessary(false);
}","/** 
 * @param imageUrl the url of the image to load
 * @param hiResWidth maximum width of the full-size image
 * @param isPrivate whether this is an image from a private blog
 * @param position the position of the image in ReaderPhotoViewerActivity
 * @param photoListener optional listener
 */
public void setImageUrl(String imageUrl,int hiResWidth,boolean isPrivate,int position,ReaderPhotoListener photoListener){
  int loResWidth=(int)(hiResWidth * 0.15f);
  if (isPrivate) {
    mLoResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,loResWidth,0);
    mHiResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,hiResWidth,0);
  }
 else {
    mLoResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,loResWidth,0);
    mHiResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,hiResWidth,0);
  }
  mPosition=position;
  mPhotoListener=photoListener;
  loadImageIfNecessary(false);
}",0.5381870092790864
14562,"private void showProgress(){
  if (mProgress != null) {
    mProgress.setVisibility(View.VISIBLE);
  }
}","private void showProgress(){
  if (mProgress != null) {
    mProgress.setVisibility(View.VISIBLE);
    mProgress.bringToFront();
  }
}",0.8739495798319328
14563,"private void getLoResImage(final boolean isInLayoutPass){
  showProgress();
  Point pt=DisplayUtils.getDisplayPixelSize(this.getContext());
  int maxSize=Math.min(pt.x,pt.y);
  mImageContainer=WordPress.imageLoader.get(mLoResImageUrl,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.e(AppLog.T.READER,error);
      hideProgress();
      showError();
    }
    @Override public void onResponse(    final ImageLoader.ImageContainer response,    boolean isImmediate){
      hideProgress();
      if (isImmediate && isInLayoutPass) {
        post(new Runnable(){
          @Override public void run(){
            handleResponse(response,true);
          }
        }
);
      }
 else {
        handleResponse(response,true);
      }
    }
  }
,maxSize,maxSize);
}","private void getLoResImage(final boolean isInLayoutPass){
  Point pt=DisplayUtils.getDisplayPixelSize(this.getContext());
  int maxSize=Math.min(pt.x,pt.y);
  showProgress();
  mImageContainer=WordPress.imageLoader.get(mLoResImageUrl,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.e(AppLog.T.READER,error);
      hideProgress();
      showError();
    }
    @Override public void onResponse(    final ImageLoader.ImageContainer response,    boolean isImmediate){
      if (isImmediate && isInLayoutPass) {
        post(new Runnable(){
          @Override public void run(){
            handleResponse(response,true);
            hideProgress();
          }
        }
);
      }
 else {
        handleResponse(response,true);
        hideProgress();
      }
    }
  }
,maxSize,maxSize);
}",0.8375149342891278
14564,"private void handleResponse(ImageLoader.ImageContainer response,boolean isLoResResponse){
  if (response.getBitmap() != null) {
    mImageView.setImageBitmap(response.getBitmap());
    if (isLoResResponse) {
      ReaderAnim.fadeIn(mImageView,ReaderAnim.Duration.MEDIUM);
      getHiResImage();
      if (mPhotoListener != null) {
        mPhotoListener.onPhotoLoaded(mPosition);
      }
    }
    createAttacher(mImageView);
  }
}","private void handleResponse(ImageLoader.ImageContainer response,boolean isLoResResponse){
  if (response.getBitmap() != null) {
    mImageView.setImageBitmap(response.getBitmap());
    createAttacher(mImageView);
    if (isLoResResponse) {
      ReaderAnim.fadeIn(mImageView,ReaderAnim.Duration.MEDIUM);
      if (mPhotoListener != null) {
        mPhotoListener.onPhotoLoaded(mPosition);
      }
      getHiResImage();
    }
    AppLog.d(AppLog.T.READER,""String_Node_Str"" + (isLoResResponse ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.7909371781668383
14565,"private void showImage(){
  if (!isAdded() || TextUtils.isEmpty(mImageUrl)) {
    return;
  }
  Point pt=DisplayUtils.getDisplayPixelSize(getActivity());
  int hiResWidth=Math.max(pt.x,pt.y);
  int loResWidth=(int)(hiResWidth * 0.10f);
  final String loResImageUrl;
  final String hiResImageUrl;
  if (mIsPrivate) {
    loResImageUrl=ReaderUtils.getPrivateImageForDisplay(mImageUrl,loResWidth,0);
    hiResImageUrl=ReaderUtils.getPrivateImageForDisplay(mImageUrl,hiResWidth,0);
  }
 else {
    loResImageUrl=PhotonUtils.getPhotonImageUrl(mImageUrl,loResWidth,0);
    hiResImageUrl=PhotonUtils.getPhotonImageUrl(mImageUrl,hiResWidth,0);
  }
  mPhotoView.setImageUrl(loResImageUrl,hiResImageUrl,mPosition,mPhotoListener);
}","private void showImage(){
  if (!isAdded() || TextUtils.isEmpty(mImageUrl)) {
    return;
  }
  Point pt=DisplayUtils.getDisplayPixelSize(getActivity());
  int hiResWidth=Math.max(pt.x,pt.y);
  mPhotoView.setImageUrl(mImageUrl,hiResWidth,mIsPrivate,mPosition,mPhotoListener);
}",0.406813627254509
14566,"/** 
 * @param imageUrl the url of the image to load
 * @param hiResWidth maximum width of the full-size image
 * @param isPrivate whether this is an image from a private blog
 * @param position the position of the image in ReaderPhotoViewerActivity
 */
public void setImageUrl(String imageUrl,int hiResWidth,boolean isPrivate,int position){
  int loResWidth=(int)(hiResWidth * 0.15f);
  if (isPrivate) {
    mLoResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,loResWidth,0);
    mHiResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,hiResWidth,0);
  }
 else {
    mLoResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,loResWidth,0);
    mHiResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,hiResWidth,0);
  }
  mPosition=position;
  loadLoResImage(false);
}","/** 
 * @param imageUrl the url of the image to load
 * @param hiResWidth maximum width of the full-size image
 * @param isPrivate whether this is an image from a private blog
 * @param position the position of the image in ReaderPhotoViewerActivity
 */
public void setImageUrl(String imageUrl,int hiResWidth,boolean isPrivate,int position){
  int loResWidth=(int)(hiResWidth * 0.10f);
  if (isPrivate) {
    mLoResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,loResWidth,0);
    mHiResImageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,hiResWidth,0);
  }
 else {
    mLoResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,loResWidth,0);
    mHiResImageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,hiResWidth,0);
  }
  mPosition=position;
  loadLoResImage(false);
}",0.9987129987129988
14567,"private void loadLoResImage(final boolean isInLayoutPass){
  if (!hasLayout() || TextUtils.isEmpty(mLoResImageUrl)) {
    return;
  }
  if (isRequestingUrl(mLoResContainer,mLoResImageUrl)) {
    return;
  }
  AppLog.w(AppLog.T.READER,""String_Node_Str"" + mPosition);
  Point pt=DisplayUtils.getDisplayPixelSize(this.getContext());
  int maxSize=Math.min(pt.x,pt.y);
  showProgress();
  mLoResContainer=WordPress.imageLoader.get(mLoResImageUrl,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.e(AppLog.T.READER,error);
      hideProgress();
      showError();
    }
    @Override public void onResponse(    final ImageContainer response,    boolean isImmediate){
      if (isImmediate && isInLayoutPass) {
        post(new Runnable(){
          @Override public void run(){
            handleResponse(response,true);
          }
        }
);
      }
 else {
        handleResponse(response,true);
      }
    }
  }
,maxSize,maxSize);
}","private void loadLoResImage(final boolean isInLayoutPass){
  if (!hasLayout() || TextUtils.isEmpty(mLoResImageUrl)) {
    return;
  }
  if (isRequestingUrl(mLoResContainer,mLoResImageUrl)) {
    return;
  }
  AppLog.d(AppLog.T.READER,""String_Node_Str"" + mPosition);
  showProgress();
  Point pt=DisplayUtils.getDisplayPixelSize(this.getContext());
  int maxSize=Math.min(pt.x,pt.y);
  mLoResContainer=WordPress.imageLoader.get(mLoResImageUrl,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.e(AppLog.T.READER,error);
      hideProgress();
      showError();
    }
    @Override public void onResponse(    final ImageContainer response,    boolean isImmediate){
      if (isImmediate && isInLayoutPass) {
        post(new Runnable(){
          @Override public void run(){
            handleResponse(response,true);
          }
        }
);
      }
 else {
        handleResponse(response,true);
      }
    }
  }
,maxSize,maxSize);
}",0.9809236947791165
14568,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.reader_activity_photo_viewer);
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mTxtTitle=(TextView)findViewById(R.id.text_title);
  if (savedInstanceState != null) {
    mInitialImageUrl=savedInstanceState.getString(ReaderConstants.ARG_IMAGE_URL);
    mIsPrivate=savedInstanceState.getBoolean(ReaderConstants.ARG_IS_PRIVATE);
    mContent=savedInstanceState.getString(ReaderConstants.ARG_CONTENT);
  }
 else   if (getIntent() != null) {
    mInitialImageUrl=getIntent().getStringExtra(ReaderConstants.ARG_IMAGE_URL);
    mIsPrivate=getIntent().getBooleanExtra(ReaderConstants.ARG_IS_PRIVATE,false);
    mContent=getIntent().getStringExtra(ReaderConstants.ARG_CONTENT);
  }
  mViewPager.setPageTransformer(false,new ReaderViewPagerTransformer(TransformType.FLOW));
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      updateTitle(position);
    }
  }
);
  loadImageList();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.reader_activity_photo_viewer);
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mTxtTitle=(TextView)findViewById(R.id.text_title);
  mTxtTitle.setVisibility(View.GONE);
  if (savedInstanceState != null) {
    mInitialImageUrl=savedInstanceState.getString(ReaderConstants.ARG_IMAGE_URL);
    mIsPrivate=savedInstanceState.getBoolean(ReaderConstants.ARG_IS_PRIVATE);
    mContent=savedInstanceState.getString(ReaderConstants.ARG_CONTENT);
  }
 else   if (getIntent() != null) {
    mInitialImageUrl=getIntent().getStringExtra(ReaderConstants.ARG_IMAGE_URL);
    mIsPrivate=getIntent().getBooleanExtra(ReaderConstants.ARG_IS_PRIVATE,false);
    mContent=getIntent().getStringExtra(ReaderConstants.ARG_CONTENT);
  }
  mViewPager.setPageTransformer(false,new ReaderViewPagerTransformer(TransformType.FLOW));
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      updateTitle(position);
    }
  }
);
  loadImageList();
}",0.9837467921300256
14569,"private void flagSuperProperty(String property){
  try {
    JSONObject superProperty=new JSONObject();
    superProperty.put(property,true);
    mMixpanel.registerSuperProperties(superProperty);
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.UTILS,e);
  }
}","private void flagSuperProperty(String property){
  try {
    JSONObject superProperties=mMixpanel.getSuperProperties();
    superProperties.put(property,true);
    mMixpanel.registerSuperProperties(superProperties);
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.UTILS,e);
  }
}",0.6086956521739131
14570,"private void incrementSuperProperty(String property){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(WordPress.getContext());
  int propertyCount=preferences.getInt(property,0);
  propertyCount++;
  SharedPreferences.Editor editor=preferences.edit();
  editor.putInt(property,propertyCount);
  editor.commit();
  try {
    JSONObject superProperty=new JSONObject();
    superProperty.put(property,propertyCount);
    mMixpanel.registerSuperProperties(superProperty);
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.UTILS,e);
  }
}","private void incrementSuperProperty(String property){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(WordPress.getContext());
  int propertyCount=preferences.getInt(property,0);
  propertyCount++;
  SharedPreferences.Editor editor=preferences.edit();
  editor.putInt(property,propertyCount);
  editor.commit();
  try {
    JSONObject superProperties=mMixpanel.getSuperProperties();
    superProperties.put(property,propertyCount);
    mMixpanel.registerSuperProperties(superProperties);
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.UTILS,e);
  }
}",0.7975778546712803
14571,"public void transformPage(View view,float position){
switch (mTransformType) {
case DEPTH:
    if (position <= -1) {
      view.setAlpha(0);
      view.setVisibility(View.INVISIBLE);
    }
 else     if (position <= 0) {
      view.setAlpha(1);
      view.setTranslationX(0);
      view.setScaleX(1);
      view.setScaleY(1);
      view.setVisibility(View.VISIBLE);
    }
 else     if (position <= 1) {
      view.setAlpha(1 - position);
      int pageWidth=view.getWidth();
      view.setTranslationX(pageWidth * -position);
      float scaleFactor=MIN_SCALE_DEPTH + (1 - MIN_SCALE_DEPTH) * (1 - Math.abs(position));
      view.setScaleX(scaleFactor);
      view.setScaleY(scaleFactor);
      if (position == 1) {
        view.setVisibility(View.INVISIBLE);
      }
 else {
        view.setVisibility(View.VISIBLE);
      }
    }
 else {
      view.setAlpha(0);
      view.setVisibility(View.INVISIBLE);
    }
  break;
case ZOOM:
if (position < -1) {
  view.setAlpha(0);
}
 else if (position <= 1) {
  int pageWidth=view.getWidth();
  int pageHeight=view.getHeight();
  float scaleFactor=Math.max(MIN_SCALE_ZOOM,1 - Math.abs(position));
  float vertMargin=pageHeight * (1 - scaleFactor) / 2;
  float horzMargin=pageWidth * (1 - scaleFactor) / 2;
  if (position < 0) {
    view.setTranslationX(horzMargin - vertMargin / 2);
  }
 else {
    view.setTranslationX(-horzMargin + vertMargin / 2);
  }
  view.setScaleX(scaleFactor);
  view.setScaleY(scaleFactor);
  view.setAlpha(MIN_ALPHA_ZOOM + (scaleFactor - MIN_SCALE_ZOOM) / (1 - MIN_SCALE_ZOOM) * (1 - MIN_ALPHA_ZOOM));
}
 else {
  view.setAlpha(0);
}
break;
}
}","public void transformPage(View view,float position){
  float alpha;
  float scale;
  float translationX;
switch (mTransformType) {
case DEPTH:
    if (position > 0 && position < 1) {
      alpha=(1 - position);
      scale=MIN_SCALE_DEPTH + (1 - MIN_SCALE_DEPTH) * (1 - Math.abs(position));
      translationX=(view.getWidth() * -position);
    }
 else {
      alpha=1;
      scale=1;
      translationX=0;
    }
  break;
case ZOOM:
if (position >= -1 && position <= 1) {
  scale=Math.max(MIN_SCALE_ZOOM,1 - Math.abs(position));
  alpha=MIN_ALPHA_ZOOM + (scale - MIN_SCALE_ZOOM) / (1 - MIN_SCALE_ZOOM) * (1 - MIN_ALPHA_ZOOM);
  float vMargin=view.getHeight() * (1 - scale) / 2;
  float hMargin=view.getWidth() * (1 - scale) / 2;
  if (position < 0) {
    translationX=(hMargin - vMargin / 2);
  }
 else {
    translationX=(-hMargin + vMargin / 2);
  }
}
 else {
  alpha=1;
  scale=1;
  translationX=0;
}
break;
default :
return;
}
view.setAlpha(alpha);
view.setTranslationX(translationX);
view.setScaleX(scale);
view.setScaleY(scale);
}",0.2780506233471855
14572,"public void transformPage(View view,float position){
  int pageWidth=view.getWidth();
  if (position < -1) {
    view.setAlpha(0);
  }
 else   if (position <= 0) {
    view.setAlpha(1);
    view.setTranslationX(0);
    view.setScaleX(1);
    view.setScaleY(1);
  }
 else   if (position <= 1) {
    view.setAlpha(1 - position);
    view.setTranslationX(pageWidth * -position);
    float scaleFactor=MIN_SCALE + (1 - MIN_SCALE) * (1 - Math.abs(position));
    view.setScaleX(scaleFactor);
    view.setScaleY(scaleFactor);
  }
 else {
    view.setAlpha(0);
  }
}","public void transformPage(View view,float position){
  int pageWidth=view.getWidth();
  if (position < -1) {
    view.setAlpha(0);
  }
 else   if (position <= 0) {
    view.setAlpha(1);
    view.setTranslationX(0);
    view.setScaleX(1);
    view.setScaleY(1);
  }
 else   if (position <= 1) {
    view.setAlpha(1 - position);
    view.setTranslationX(pageWidth * -position);
    float scaleFactor=MIN_SCALE + (1 - MIN_SCALE) * (1 - Math.abs(position));
    view.setScaleX(scaleFactor);
    view.setScaleY(scaleFactor);
  }
 else {
    view.setAlpha(0);
  }
  if (position == 0) {
    view.bringToFront();
  }
}",0.9555555555555556
14573,"public static ReaderPostDetailFragment newInstance(long blogId,long postId,ReaderPostListType postListType){
  AppLog.d(T.READER,""String_Node_Str"");
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
  Bundle args=new Bundle();
  args.putLong(ReaderConstants.ARG_BLOG_ID,blogId);
  args.putLong(ReaderConstants.ARG_POST_ID,postId);
  if (postListType != null) {
    args.putSerializable(ReaderConstants.ARG_POST_LIST_TYPE,postListType);
  }
  ReaderPostDetailFragment fragment=new ReaderPostDetailFragment();
  fragment.setArguments(args);
  return fragment;
}","public static ReaderPostDetailFragment newInstance(long blogId,long postId,ReaderPostListType postListType){
  AppLog.d(T.READER,""String_Node_Str"");
  Bundle args=new Bundle();
  args.putLong(ReaderConstants.ARG_BLOG_ID,blogId);
  args.putLong(ReaderConstants.ARG_POST_ID,postId);
  if (postListType != null) {
    args.putSerializable(ReaderConstants.ARG_POST_LIST_TYPE,postListType);
  }
  ReaderPostDetailFragment fragment=new ReaderPostDetailFragment();
  fragment.setArguments(args);
  return fragment;
}",0.9348025711662076
14574,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  mListView=(WPListView)rootView.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)rootView.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts();
      hideNewPostsBar();
    }
  }
);
switch (getPostListType()) {
case TAG_FOLLOWED:
    break;
case TAG_PREVIEW:
  mTagInfoView=(ViewGroup)inflater.inflate(R.layout.reader_tag_info_view,container,false);
rootView.addView(mTagInfoView);
ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,mTagInfoView.getId());
break;
case BLOG_PREVIEW:
mBlogInfoView=new ReaderBlogInfoView(container.getContext());
rootView.addView(mBlogInfoView);
mBlogInfoView.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT));
int spacerHeight=mBlogInfoView.getMshotHeight() + DisplayUtils.dpToPx(container.getContext(),105);
mMshotSpacerView=ReaderUtils.addListViewHeader(mListView,spacerHeight);
mMshotSpacerView.setTag(MSHOT_SPACER_TAG);
mBlogInfoView.bringToFront();
mBlogInfoView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
@Override public void onGlobalLayout(){
int currentHeight=mMshotSpacerView.getLayoutParams().height;
int newHeight=mBlogInfoView.getInfoContainerHeight() + mBlogInfoView.getMshotHeight();
if (currentHeight != newHeight) {
mMshotSpacerView.getLayoutParams().height=newHeight;
}
}
}
);
break;
}
mEmptyView=rootView.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)rootView.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)rootView.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,ReaderTypes.RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}
);
return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  mListView=(WPListView)rootView.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)rootView.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts();
      hideNewPostsBar();
    }
  }
);
switch (getPostListType()) {
case TAG_FOLLOWED:
    break;
case TAG_PREVIEW:
  mTagInfoView=(ViewGroup)inflater.inflate(R.layout.reader_tag_info_view,container,false);
rootView.addView(mTagInfoView);
ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,mTagInfoView.getId());
break;
case BLOG_PREVIEW:
mBlogInfoView=new ReaderBlogInfoView(container.getContext());
rootView.addView(mBlogInfoView);
mBlogInfoView.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT));
int spacerHeight=mBlogInfoView.getMshotHeight() + DisplayUtils.dpToPx(container.getContext(),105);
mMshotSpacerView=ReaderUtils.addListViewHeader(mListView,spacerHeight);
mMshotSpacerView.setTag(MSHOT_SPACER_TAG);
mBlogInfoView.bringToFront();
mBlogInfoView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
@Override public void onGlobalLayout(){
int currentHeight=mMshotSpacerView.getLayoutParams().height;
int newHeight=mBlogInfoView.getInfoContainerHeight() + mBlogInfoView.getMshotHeight();
if (currentHeight != newHeight) {
mMshotSpacerView.getLayoutParams().height=newHeight;
}
}
}
);
break;
}
mEmptyView=rootView.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)rootView.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)rootView.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,ReaderTypes.RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}
);
return rootView;
}",0.9884904086738948
14575,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  position-=mListView.getHeaderViewsCount();
  if (position >= 0 && mPostSelectedListener != null) {
    ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
    if (post != null) {
      mPostSelectedListener.onPostSelected(post.blogId,post.postId);
    }
  }
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  position-=mListView.getHeaderViewsCount();
  if (position >= 0 && mPostSelectedListener != null) {
    ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
    if (post != null) {
      AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
      mPostSelectedListener.onPostSelected(post.blogId,post.postId);
    }
  }
}",0.907292954264524
14576,"@Override public void onPageSelected(int position){
  super.onPageSelected(position);
  onRequestFullScreen(false);
}","@Override public void onPageSelected(int position){
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
  super.onPageSelected(position);
  onRequestFullScreen(false);
}",0.7672131147540984
14577,"@Override public void onCreate(Bundle savedInstanceState){
  if (isFullScreenSupported()) {
    getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_post_pager);
  getWindow().setBackgroundDrawable(null);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  final int position;
  final String title;
  final Serializable serializedList;
  if (savedInstanceState != null) {
    position=savedInstanceState.getInt(ARG_POSITION,0);
    title=savedInstanceState.getString(ARG_TITLE);
    serializedList=savedInstanceState.getSerializable(ARG_BLOG_POST_ID_LIST);
    if (savedInstanceState.containsKey(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)savedInstanceState.getSerializable(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
 else {
    position=getIntent().getIntExtra(ARG_POSITION,0);
    title=getIntent().getStringExtra(ARG_TITLE);
    serializedList=getIntent().getSerializableExtra(ARG_BLOG_POST_ID_LIST);
    if (getIntent().hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)getIntent().getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
  if (!TextUtils.isEmpty(title)) {
    this.setTitle(title);
  }
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mPageAdapter=new PostPagerAdapter(getFragmentManager(),new ReaderBlogIdPostIdList(serializedList));
  mViewPager.setAdapter(mPageAdapter);
  if (mPageAdapter.isValidPosition(position)) {
    mViewPager.setCurrentItem(position);
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      super.onPageSelected(position);
      onRequestFullScreen(false);
    }
    @Override public void onPageScrollStateChanged(    int state){
      super.onPageScrollStateChanged(state);
      if (state == ViewPager.SCROLL_STATE_DRAGGING) {
        onRequestFullScreen(false);
        ReaderPostDetailFragment fragment=getActiveDetailFragment();
        if (fragment != null) {
          fragment.pauseWebView();
        }
      }
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  if (isFullScreenSupported()) {
    getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_post_pager);
  getWindow().setBackgroundDrawable(null);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  final int position;
  final String title;
  final Serializable serializedList;
  if (savedInstanceState != null) {
    position=savedInstanceState.getInt(ARG_POSITION,0);
    title=savedInstanceState.getString(ARG_TITLE);
    serializedList=savedInstanceState.getSerializable(ARG_BLOG_POST_ID_LIST);
    if (savedInstanceState.containsKey(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)savedInstanceState.getSerializable(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
 else {
    position=getIntent().getIntExtra(ARG_POSITION,0);
    title=getIntent().getStringExtra(ARG_TITLE);
    serializedList=getIntent().getSerializableExtra(ARG_BLOG_POST_ID_LIST);
    if (getIntent().hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)getIntent().getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
  if (!TextUtils.isEmpty(title)) {
    this.setTitle(title);
  }
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mPageAdapter=new PostPagerAdapter(getFragmentManager(),new ReaderBlogIdPostIdList(serializedList));
  mViewPager.setAdapter(mPageAdapter);
  if (mPageAdapter.isValidPosition(position)) {
    mViewPager.setCurrentItem(position);
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
      super.onPageSelected(position);
      onRequestFullScreen(false);
    }
    @Override public void onPageScrollStateChanged(    int state){
      super.onPageScrollStateChanged(state);
      if (state == ViewPager.SCROLL_STATE_DRAGGING) {
        onRequestFullScreen(false);
        ReaderPostDetailFragment fragment=getActiveDetailFragment();
        if (fragment != null) {
          fragment.pauseWebView();
        }
      }
    }
  }
);
}",0.9838327225695191
14578,"/** 
 * tbl_tag_updates routines
 */
public static String getTagNewestDate(ReaderTag tag){
  if (tag == null) {
    return ""String_Node_Str"";
  }
  String[] args={tag.getTagName(),Integer.toString(tag.tagType.toInt())};
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
}","/** 
 * tbl_tag_updates routines
 */
public static String getTagNewestDate(ReaderTag tag){
  return getDateColumn(tag,""String_Node_Str"");
}",0.5968819599109132
14579,"public static void setTagNewestDate(ReaderTag tag,String date){
  if (tag == null) {
    return;
  }
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tag.getTagName());
  values.put(""String_Node_Str"",tag.tagType.toInt());
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}","public static void setTagNewestDate(ReaderTag tag,String date){
  setDateColumn(tag,""String_Node_Str"",date);
}",0.3304940374787052
14580,"public static void setTagLastUpdated(ReaderTag tag,String date){
  if (tag == null) {
    return;
  }
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tag.getTagName());
  values.put(""String_Node_Str"",tag.tagType.toInt());
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}","public static void setTagLastUpdated(ReaderTag tag,String date){
  setDateColumn(tag,""String_Node_Str"",date);
}",0.33276740237691
14581,"private static String getTagLastUpdated(ReaderTag tag){
  if (tag == null) {
    return ""String_Node_Str"";
  }
  String[] args={tag.getTagName(),Integer.toString(tag.tagType.toInt())};
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
}","private static String getTagLastUpdated(ReaderTag tag){
  return getDateColumn(tag,""String_Node_Str"");
}",0.5224274406332454
14582,"public static String getTagOldestDate(ReaderTag tag){
  if (tag == null) {
    return ""String_Node_Str"";
  }
  String[] args={tag.getTagName(),Integer.toString(tag.tagType.toInt())};
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
}","public static String getTagOldestDate(ReaderTag tag){
  return getDateColumn(tag,""String_Node_Str"");
}",0.5173333333333333
14583,"public static void setTagOldestDate(ReaderTag tag,String date){
  if (tag == null) {
    return;
  }
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tag.getTagName());
  values.put(""String_Node_Str"",tag.tagType.toInt());
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}","public static void setTagOldestDate(ReaderTag tag,String date){
  setDateColumn(tag,""String_Node_Str"",date);
}",0.3304940374787052
14584,"private static void setDateColumn(ReaderTag tag,String colName,String date){
  if (tag == null) {
    return;
  }
  String[] args={tag.getTagName(),Integer.toString(tag.tagType.toInt())};
  boolean rowExists=SqlUtils.boolForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
  final String sql;
  if (rowExists) {
    sql=""String_Node_Str"" + colName + ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + colName + ""String_Node_Str""+ colName+ ""String_Node_Str"";
  }
  SQLiteStatement stmt=ReaderDatabase.getWritableDb().compileStatement(sql);
  try {
    stmt.bindString(1,date);
    stmt.bindString(2,tag.getTagName());
    stmt.bindLong(3,tag.tagType.toInt());
    stmt.execute();
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
}","private static void setDateColumn(ReaderTag tag,String colName,String date){
  if (tag == null) {
    return;
  }
  String[] args={tag.getTagName(),Integer.toString(tag.tagType.toInt())};
  boolean rowExists=SqlUtils.boolForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
  final String sql;
  if (rowExists) {
    sql=""String_Node_Str"" + colName + ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + colName + ""String_Node_Str"";
  }
  SQLiteStatement stmt=ReaderDatabase.getWritableDb().compileStatement(sql);
  try {
    stmt.bindString(1,date);
    stmt.bindString(2,tag.getTagName());
    stmt.bindLong(3,tag.tagType.toInt());
    stmt.execute();
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
}",0.981132075471698
14585,"@Override protected void onMessage(Context context,Intent intent){
  AppLog.v(T.NOTIFS,""String_Node_Str"");
  Bundle extras=intent.getExtras();
  if (extras == null) {
    AppLog.v(T.NOTIFS,""String_Node_Str"");
    return;
  }
  if (TextUtils.equals(extras.getString(""String_Node_Str""),""String_Node_Str"")) {
    HelpshiftHelper.getInstance().handlePush(context,intent);
    return;
  }
  if (extras.containsKey(""String_Node_Str"")) {
    String mpMessage=intent.getExtras().getString(""String_Node_Str"");
    String title=getString(R.string.app_name);
    Intent resultIntent=new Intent(this,PostsActivity.class);
    PendingIntent pendingIntent=PendingIntent.getActivity(this,0,resultIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    AnalyticsTrackerMixpanel.showNotification(context,pendingIntent,R.drawable.notification_icon,title,mpMessage);
  }
  if (!WordPress.hasValidWPComCredentials(context)) {
    return;
  }
  handleDefaultPush(context,extras);
}","@Override protected void onMessage(Context context,Intent intent){
  AppLog.v(T.NOTIFS,""String_Node_Str"");
  Bundle extras=intent.getExtras();
  if (extras == null) {
    AppLog.v(T.NOTIFS,""String_Node_Str"");
    return;
  }
  if (TextUtils.equals(extras.getString(""String_Node_Str""),""String_Node_Str"")) {
    HelpshiftHelper.getInstance().handlePush(context,intent);
    return;
  }
  if (extras.containsKey(""String_Node_Str"")) {
    String mpMessage=intent.getExtras().getString(""String_Node_Str"");
    String title=getString(R.string.app_name);
    Intent resultIntent=new Intent(this,PostsActivity.class);
    PendingIntent pendingIntent=PendingIntent.getActivity(this,0,resultIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    AnalyticsTrackerMixpanel.showNotification(context,pendingIntent,R.drawable.notification_icon,title,mpMessage);
    return;
  }
  if (!WordPress.hasValidWPComCredentials(context)) {
    return;
  }
  handleDefaultPush(context,extras);
}",0.9937304075235108
14586,"@Override public void drawSeries(Canvas canvas,GraphViewDataInterface[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  float colwidth=graphwidth / values.length;
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  List<BarChartRect> barChartRects=new LinkedList<BarChartRect>();
  for (int i=0; i < values.length; i++) {
    float valY=(float)(values[i].getY() - minY);
    float ratY=(float)(valY / diffY);
    float y=graphheight * ratY;
    if (style.getValueDependentColor() != null) {
      paint.setColor(style.getValueDependentColor().get(values[i]));
    }
    if (barPositionToHighlight == i) {
      int color;
      if (style.color == getResources().getColor(R.color.stats_bar_graph_views)) {
        color=getResources().getColor(R.color.orange_medium);
      }
 else {
        color=getResources().getColor(R.color.orange_dark);
      }
      paint.setColor(color);
    }
 else {
      paint.setColor(style.color);
    }
    float pad=style.padding;
    float left=(i * colwidth) + horstart;
    float top=(border - y) + graphheight;
    float right=left + colwidth;
    float bottom=graphheight + border - 1;
    canvas.drawRect(left + pad,top,right - pad,bottom,paint);
    barChartRects.add(new BarChartRect(left + pad,top,right - pad,bottom));
  }
  seriesRectsDrawedOnScreen.add(barChartRects);
}","@Override public void drawSeries(Canvas canvas,GraphViewDataInterface[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  float colwidth=graphwidth / values.length;
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  List<BarChartRect> barChartRects=new LinkedList<BarChartRect>();
  for (int i=0; i < values.length; i++) {
    float valY=(float)(values[i].getY() - minY);
    float ratY=(float)(valY / diffY);
    float y=graphheight * ratY;
    if (style.getValueDependentColor() != null) {
      paint.setColor(style.getValueDependentColor().get(values[i]));
    }
    if (mBarPositionToHighlight == i) {
      int color;
      if (style.color == getResources().getColor(R.color.stats_bar_graph_views)) {
        color=getResources().getColor(R.color.orange_medium);
      }
 else {
        color=getResources().getColor(R.color.orange_dark);
      }
      paint.setColor(color);
    }
 else {
      paint.setColor(style.color);
    }
    float pad=style.padding;
    float left=(i * colwidth) + horstart;
    float top=(border - y) + graphheight;
    float right=left + colwidth;
    float bottom=graphheight + border - 1;
    canvas.drawRect(left + pad,top,right - pad,bottom,paint);
    barChartRects.add(new BarChartRect(left + pad,top,right - pad,bottom));
  }
  mSeriesRectsDrawedOnScreen.add(barChartRects);
}",0.9979181124219292
14587,"public boolean isPointInside(float x,float y){
  if (x >= this.left && x <= this.right && y <= this.bottom && y >= this.top) {
    return true;
  }
  return false;
}","public boolean isPointInside(float x,float y){
  if (x >= this.mLeft && x <= this.mRight && y <= this.mBottom && y >= this.mTop) {
    return true;
  }
  return false;
}",0.9640718562874252
14588,"BarChartRect(float left,float top,float right,float bottom){
  this.left=left;
  this.top=top;
  this.right=right;
  this.bottom=bottom;
}","BarChartRect(float left,float top,float right,float bottom){
  this.mLeft=left;
  this.mTop=top;
  this.mRight=right;
  this.mBottom=bottom;
}",0.9571428571428572
14589,"@Override public String formatLabel(double value,boolean isValueX){
  if (isValueX)   return null;
  if (value < 1000) {
    return null;
  }
 else   if (value < 1000000) {
    return Math.round(value / 1000) + ""String_Node_Str"";
  }
 else   if (value < 1000000000) {
    return Math.round(value / 1000000) + ""String_Node_Str"";
  }
 else {
    return null;
  }
}","@Override public String formatLabel(double value,boolean isValueX){
  if (isValueX) {
    return null;
  }
  if (value < 1000) {
    return null;
  }
 else   if (value < 1000000) {
    return Math.round(value / 1000) + ""String_Node_Str"";
  }
 else   if (value < 1000000000) {
    return Math.round(value / 1000000) + ""String_Node_Str"";
  }
 else {
    return null;
  }
}",0.9508196721311476
14590,"private void setProperties(){
  getGraphViewStyle().setHorizontalLabelsColor(Color.BLACK);
  getGraphViewStyle().setVerticalLabelsColor(Color.BLACK);
  getGraphViewStyle().setTextSize(getResources().getDimensionPixelSize(R.dimen.graph_font_size));
  getGraphViewStyle().setGridXColor(Color.TRANSPARENT);
  getGraphViewStyle().setGridYColor(getResources().getColor(R.color.stats_bar_graph_grid));
  getGraphViewStyle().setNumVerticalLabels(6);
  setCustomLabelFormatter(new CustomLabelFormatter(){
    @Override public String formatLabel(    double value,    boolean isValueX){
      if (isValueX)       return null;
      if (value < 1000) {
        return null;
      }
 else       if (value < 1000000) {
        return Math.round(value / 1000) + ""String_Node_Str"";
      }
 else       if (value < 1000000000) {
        return Math.round(value / 1000000) + ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
);
}","private void setProperties(){
  getGraphViewStyle().setHorizontalLabelsColor(Color.BLACK);
  getGraphViewStyle().setVerticalLabelsColor(Color.BLACK);
  getGraphViewStyle().setTextSize(getResources().getDimensionPixelSize(R.dimen.graph_font_size));
  getGraphViewStyle().setGridXColor(Color.TRANSPARENT);
  getGraphViewStyle().setGridYColor(getResources().getColor(R.color.stats_bar_graph_grid));
  getGraphViewStyle().setNumVerticalLabels(6);
  setCustomLabelFormatter(new CustomLabelFormatter(){
    @Override public String formatLabel(    double value,    boolean isValueX){
      if (isValueX) {
        return null;
      }
      if (value < 1000) {
        return null;
      }
 else       if (value < 1000000) {
        return Math.round(value / 1000) + ""String_Node_Str"";
      }
 else       if (value < 1000000000) {
        return Math.round(value / 1000000) + ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
);
}",0.9745222929936306
14591,"public int getTappedBar(){
  float[] lastBarChartTouchedPoint=this.getLastTouchedPointOnCanvasAndReset();
  if (lastBarChartTouchedPoint[0] == 0f && lastBarChartTouchedPoint[1] == 0f) {
    return -1;
  }
  for (  List<BarChartRect> currentSerieChartRects : seriesRectsDrawedOnScreen) {
    int i=0;
    for (    BarChartRect barChartRect : currentSerieChartRects) {
      if (barChartRect.isPointInside(lastBarChartTouchedPoint[0],lastBarChartTouchedPoint[1])) {
        return i;
      }
      i++;
    }
  }
  return -1;
}","public int getTappedBar(){
  float[] lastBarChartTouchedPoint=this.getLastTouchedPointOnCanvasAndReset();
  if (lastBarChartTouchedPoint[0] == 0f && lastBarChartTouchedPoint[1] == 0f) {
    return -1;
  }
  for (  List<BarChartRect> currentSerieChartRects : mSeriesRectsDrawedOnScreen) {
    int i=0;
    for (    BarChartRect barChartRect : currentSerieChartRects) {
      if (barChartRect.isPointInside(lastBarChartTouchedPoint[0],lastBarChartTouchedPoint[1])) {
        return i;
      }
      i++;
    }
  }
  return -1;
}",0.9971455756422456
14592,"@Override protected double getMaxY(){
  double maxY=super.getMaxY();
  final int divideBy;
  if (maxY < 100)   divideBy=10;
 else   if (maxY < 1000)   divideBy=100;
 else   if (maxY < 10000)   divideBy=1000;
 else   if (maxY < 100000)   divideBy=10000;
 else   if (maxY < 1000000)   divideBy=100000;
 else   divideBy=1000000;
  maxY=Math.rint((maxY / divideBy) + 1) * divideBy;
  return maxY;
}","@Override protected double getMaxY(){
  double maxY=super.getMaxY();
  final int divideBy;
  if (maxY < 100) {
    divideBy=10;
  }
 else   if (maxY < 1000) {
    divideBy=100;
  }
 else   if (maxY < 10000) {
    divideBy=1000;
  }
 else   if (maxY < 100000) {
    divideBy=10000;
  }
 else   if (maxY < 1000000) {
    divideBy=100000;
  }
 else {
    divideBy=1000000;
  }
  maxY=Math.rint((maxY / divideBy) + 1) * divideBy;
  return maxY;
}",0.6889952153110048
14593,"@Override public void run(){
  barPositionToHighlight=-1;
  redrawAll();
}","@Override public void run(){
  mBarPositionToHighlight=-1;
  redrawAll();
}",0.9798657718120806
14594,"/** 
 * @param canvas
 */
@Override protected void onDraw(Canvas canvas){
  seriesRectsDrawedOnScreen.clear();
  super.onDraw(canvas);
}","/** 
 * @param canvas
 */
@Override protected void onDraw(Canvas canvas){
  mSeriesRectsDrawedOnScreen.clear();
  super.onDraw(canvas);
}",0.989010989010989
14595,"public void highlightBar(int barPosition){
  barPositionToHighlight=barPosition;
  if (barPositionToHighlight == -1) {
    return;
  }
  this.redrawAll();
  final Handler handler=new Handler();
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      barPositionToHighlight=-1;
      redrawAll();
    }
  }
,500);
}","public void highlightBar(int barPosition){
  mBarPositionToHighlight=barPosition;
  if (mBarPositionToHighlight == -1) {
    return;
  }
  this.redrawAll();
  final Handler handler=new Handler();
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      mBarPositionToHighlight=-1;
      redrawAll();
    }
  }
,500);
}",0.986627043090639
14596,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.stats_visitors_and_views_fragment,container,false);
  setRetainInstance(true);
  TextView titleTextView=(TextView)view.findViewById(R.id.stats_pager_title);
  titleTextView.setText(getTitle().toUpperCase(Locale.getDefault()));
  mVisitorsToday=(TextView)view.findViewById(R.id.stats_visitors_and_views_today_visitors_count);
  mViewsToday=(TextView)view.findViewById(R.id.stats_visitors_and_views_today_views_count);
  mViewsBestEver=(TextView)view.findViewById(R.id.stats_visitors_and_views_best_ever_views_count);
  mViewsAllTime=(TextView)view.findViewById(R.id.stats_visitors_and_views_all_time_view_count);
  mCommentsAllTime=(TextView)view.findViewById(R.id.stats_visitors_and_views_all_time_comment_count);
  mRadioGroup=(RadioGroup)view.findViewById(R.id.stats_pager_tabs);
  mRadioGroup.setVisibility(View.VISIBLE);
  mRadioGroup.setOnCheckedChangeListener(this);
  for (int i=0; i < TITLES.length; i++) {
    RadioButton rb=(RadioButton)LayoutInflater.from(getActivity()).inflate(R.layout.stats_radio_button,null,false);
    RadioGroup.LayoutParams params=new RadioGroup.LayoutParams(RadioGroup.LayoutParams.WRAP_CONTENT,RadioGroup.LayoutParams.WRAP_CONTENT);
    int dp8=DisplayUtils.dpToPx(view.getContext(),8);
    params.setMargins(0,0,dp8,0);
    rb.setMinimumWidth(DisplayUtils.dpToPx(view.getContext(),80));
    rb.setGravity(Gravity.CENTER);
    rb.setLayoutParams(params);
    rb.setText(TITLES[i]);
    mRadioGroup.addView(rb);
    if (i == mSelectedButtonIndex)     rb.setChecked(true);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.stats_visitors_and_views_fragment,container,false);
  setRetainInstance(true);
  TextView titleTextView=(TextView)view.findViewById(R.id.stats_pager_title);
  titleTextView.setText(getTitle().toUpperCase(Locale.getDefault()));
  mVisitorsToday=(TextView)view.findViewById(R.id.stats_visitors_and_views_today_visitors_count);
  mViewsToday=(TextView)view.findViewById(R.id.stats_visitors_and_views_today_views_count);
  mViewsBestEver=(TextView)view.findViewById(R.id.stats_visitors_and_views_best_ever_views_count);
  mViewsAllTime=(TextView)view.findViewById(R.id.stats_visitors_and_views_all_time_view_count);
  mCommentsAllTime=(TextView)view.findViewById(R.id.stats_visitors_and_views_all_time_comment_count);
  mRadioGroup=(RadioGroup)view.findViewById(R.id.stats_pager_tabs);
  mRadioGroup.setVisibility(View.VISIBLE);
  mRadioGroup.setOnCheckedChangeListener(this);
  for (int i=0; i < TITLES.length; i++) {
    RadioButton rb=(RadioButton)LayoutInflater.from(getActivity()).inflate(R.layout.stats_radio_button,null,false);
    RadioGroup.LayoutParams params=new RadioGroup.LayoutParams(RadioGroup.LayoutParams.WRAP_CONTENT,RadioGroup.LayoutParams.WRAP_CONTENT);
    int dp8=DisplayUtils.dpToPx(view.getContext(),8);
    params.setMargins(0,0,dp8,0);
    rb.setMinimumWidth(DisplayUtils.dpToPx(view.getContext(),80));
    rb.setGravity(Gravity.CENTER);
    rb.setLayoutParams(params);
    rb.setText(TITLES[i]);
    mRadioGroup.addView(rb);
    if (i == mSelectedButtonIndex) {
      rb.setChecked(true);
    }
  }
  return view;
}",0.9892729439809296
14597,"private void refreshSummary(final StatsSummary stats){
  if (getActivity() == null)   return;
  if (stats == null) {
    mVisitorsToday.setText(""String_Node_Str"");
    mViewsToday.setText(""String_Node_Str"");
    mViewsBestEver.setText(""String_Node_Str"");
    mViewsAllTime.setText(""String_Node_Str"");
    mCommentsAllTime.setText(""String_Node_Str"");
  }
 else {
    mVisitorsToday.setText(FormatUtils.formatDecimal(stats.getVisitorsToday()));
    mViewsToday.setText(FormatUtils.formatDecimal(stats.getViewsToday()));
    mViewsBestEver.setText(FormatUtils.formatDecimal(stats.getViewsBestDayTotal()));
    mViewsAllTime.setText(FormatUtils.formatDecimal(stats.getViewsAllTime()));
    mCommentsAllTime.setText(FormatUtils.formatDecimal(stats.getCommentsAllTime()));
  }
}","private void refreshSummary(final StatsSummary stats){
  if (getActivity() == null) {
    return;
  }
  if (stats == null) {
    mVisitorsToday.setText(""String_Node_Str"");
    mViewsToday.setText(""String_Node_Str"");
    mViewsBestEver.setText(""String_Node_Str"");
    mViewsAllTime.setText(""String_Node_Str"");
    mCommentsAllTime.setText(""String_Node_Str"");
  }
 else {
    mVisitorsToday.setText(FormatUtils.formatDecimal(stats.getVisitorsToday()));
    mViewsToday.setText(FormatUtils.formatDecimal(stats.getViewsToday()));
    mViewsBestEver.setText(FormatUtils.formatDecimal(stats.getViewsBestDayTotal()));
    mViewsAllTime.setText(FormatUtils.formatDecimal(stats.getViewsAllTime()));
    mCommentsAllTime.setText(FormatUtils.formatDecimal(stats.getCommentsAllTime()));
  }
}",0.9948453608247424
14598,"@Override public boolean onOptionsItemSelected(final MenuItem item){
  if (mWebView == null)   return false;
  int itemID=item.getItemId();
  if (itemID == R.id.menu_refresh) {
    mWebView.reload();
    return true;
  }
 else   if (itemID == R.id.menu_share) {
    Intent share=new Intent(Intent.ACTION_SEND);
    share.setType(""String_Node_Str"");
    share.putExtra(Intent.EXTRA_TEXT,mWebView.getUrl());
    startActivity(Intent.createChooser(share,getResources().getText(R.string.share_link)));
    return true;
  }
 else   if (itemID == R.id.menu_browser) {
    String url=mWebView.getUrl();
    if (url != null) {
      Uri uri=Uri.parse(url);
      if (uri != null) {
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setData(uri);
        startActivity(i);
        AppLockManager.getInstance().setExtendedTimeout();
      }
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
  if (mWebView == null) {
    return false;
  }
  int itemID=item.getItemId();
  if (itemID == R.id.menu_refresh) {
    mWebView.reload();
    return true;
  }
 else   if (itemID == R.id.menu_share) {
    Intent share=new Intent(Intent.ACTION_SEND);
    share.setType(""String_Node_Str"");
    share.putExtra(Intent.EXTRA_TEXT,mWebView.getUrl());
    startActivity(Intent.createChooser(share,getResources().getText(R.string.share_link)));
    return true;
  }
 else   if (itemID == R.id.menu_browser) {
    String url=mWebView.getUrl();
    if (url != null) {
      Uri uri=Uri.parse(url);
      if (uri != null) {
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setData(uri);
        startActivity(i);
        AppLockManager.getInstance().setExtendedTimeout();
      }
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9956331877729258
14599,"@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  if (WordPress.getCurrentBlog() == null)   return null;
  String blogId=WordPress.getCurrentBlog().getDotComBlogId();
  if (TextUtils.isEmpty(blogId))   blogId=""String_Node_Str"";
  StatsBarChartUnit unit=getBarChartUnit();
  return new CursorLoader(getActivity(),StatsContentProvider.STATS_BAR_CHART_DATA_URI,null,""String_Node_Str"",new String[]{blogId,unit.name()},null);
}","@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  if (WordPress.getCurrentBlog() == null) {
    return null;
  }
  String blogId=WordPress.getCurrentBlog().getDotComBlogId();
  if (TextUtils.isEmpty(blogId)) {
    blogId=""String_Node_Str"";
  }
  StatsBarChartUnit unit=getBarChartUnit();
  return new CursorLoader(getActivity(),StatsContentProvider.STATS_BAR_CHART_DATA_URI,null,""String_Node_Str"",new String[]{blogId,unit.name()},null);
}",0.9822222222222222
14600,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (StatsActivity.STATS_TOUCH_DETECTED.equals(action)) {
    int tappedBar;
    if (graphView != null && (tappedBar=graphView.getTappedBar()) != -1) {
      graphView.highlightBar(tappedBar);
      handleBarChartTap(tappedBar);
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (StatsActivity.STATS_TOUCH_DETECTED.equals(action)) {
    int tappedBar;
    if (mGraphView != null && (tappedBar=mGraphView.getTappedBar()) != -1) {
      mGraphView.highlightBar(tappedBar);
      handleBarChartTap(tappedBar);
    }
  }
}",0.9868613138686132
14601,"private int getNumOfPoints(){
  if (hasActivity() && DisplayUtils.isTablet(getActivity())) {
    return 30;
  }
  if (getBarChartUnit() == StatsBarChartUnit.DAY)   return 7;
 else   return 12;
}","private int getNumOfPoints(){
  if (hasActivity() && DisplayUtils.isTablet(getActivity())) {
    return 30;
  }
  if (getBarChartUnit() == StatsBarChartUnit.DAY) {
    return 7;
  }
 else {
    return 12;
  }
}",0.9356435643564356
14602,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  if (getActivity() == null)   return;
  if (!cursor.moveToFirst()) {
    Context context=mGraphContainer.getContext();
    if (context != null) {
      LayoutInflater inflater=LayoutInflater.from(context);
      View emptyBarGraphView=inflater.inflate(R.layout.stats_bar_graph_empty,mGraphContainer,false);
      if (emptyBarGraphView != null)       mGraphContainer.addView(emptyBarGraphView);
    }
    return;
  }
  int numPoints=Math.min(getNumOfPoints(),cursor.getCount());
  final String[] horLabels=new String[numPoints];
  statsDate=new String[numPoints];
  GraphView.GraphViewData[] views=new GraphView.GraphViewData[numPoints];
  GraphView.GraphViewData[] visitors=new GraphView.GraphViewData[numPoints];
  StatsBarChartUnit unit=getBarChartUnit();
  for (int i=numPoints - 1; i >= 0; i--) {
    views[i]=new GraphView.GraphViewData(i,getViews(cursor));
    visitors[i]=new GraphView.GraphViewData(i,getVisitors(cursor));
    horLabels[i]=getDateLabel(cursor,unit);
    statsDate[i]=getDate(cursor);
    cursor.moveToNext();
  }
  viewsSeries=new GraphViewSeries(views);
  visitorsSeries=new GraphViewSeries(visitors);
  viewsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
  viewsSeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),1);
  visitorsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_visitors);
  visitorsSeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),3);
  if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
    graphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
  }
 else {
    mGraphContainer.removeAllViews();
    graphView=new StatsBarGraph(getActivity());
    mGraphContainer.addView(graphView);
  }
  if (graphView != null) {
    graphView.removeAllSeries();
    graphView.addSeries(viewsSeries);
    graphView.addSeries(visitorsSeries);
    graphView.getGraphViewStyle().setNumHorizontalLabels(getNumOfHorizontalLabels(numPoints));
    graphView.setHorizontalLabels(horLabels);
  }
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  if (getActivity() == null) {
    return;
  }
  if (!cursor.moveToFirst()) {
    Context context=mGraphContainer.getContext();
    if (context != null) {
      LayoutInflater inflater=LayoutInflater.from(context);
      View emptyBarGraphView=inflater.inflate(R.layout.stats_bar_graph_empty,mGraphContainer,false);
      if (emptyBarGraphView != null) {
        mGraphContainer.addView(emptyBarGraphView);
      }
    }
    return;
  }
  int numPoints=Math.min(getNumOfPoints(),cursor.getCount());
  final String[] horLabels=new String[numPoints];
  mStatsDate=new String[numPoints];
  GraphView.GraphViewData[] views=new GraphView.GraphViewData[numPoints];
  GraphView.GraphViewData[] visitors=new GraphView.GraphViewData[numPoints];
  StatsBarChartUnit unit=getBarChartUnit();
  for (int i=numPoints - 1; i >= 0; i--) {
    views[i]=new GraphView.GraphViewData(i,getViews(cursor));
    visitors[i]=new GraphView.GraphViewData(i,getVisitors(cursor));
    horLabels[i]=getDateLabel(cursor,unit);
    mStatsDate[i]=getDate(cursor);
    cursor.moveToNext();
  }
  mViewsSeries=new GraphViewSeries(views);
  mVisitorsSeries=new GraphViewSeries(visitors);
  mViewsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
  mViewsSeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),1);
  mVisitorsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_visitors);
  mVisitorsSeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),3);
  if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
    mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
  }
 else {
    mGraphContainer.removeAllViews();
    mGraphView=new StatsBarGraph(getActivity());
    mGraphContainer.addView(mGraphView);
  }
  if (mGraphView != null) {
    mGraphView.removeAllSeries();
    mGraphView.addSeries(mViewsSeries);
    mGraphView.addSeries(mVisitorsSeries);
    mGraphView.getGraphViewStyle().setNumHorizontalLabels(getNumOfHorizontalLabels(numPoints));
    mGraphView.setHorizontalLabels(horLabels);
  }
}",0.917349566846172
14603,"private void handleBarChartTap(int tappedBar){
  if (tappedBar < 0 || statsDate.length < tappedBar) {
    return;
  }
  String date=statsDate[tappedBar];
  StatsBarChartUnit unit=getBarChartUnit();
  if (unit == StatsBarChartUnit.DAY) {
    StatsUtils.StatsCredentials credentials=StatsUtils.getCurrentBlogStatsCredentials();
    if (credentials == null) {
      return;
    }
    String statsAuthenticatedUser=credentials.getUsername();
    String statsAuthenticatedPassword=credentials.getPassword();
    String url=""String_Node_Str"" + WordPress.getCurrentRemoteBlogId() + ""String_Node_Str""+ date+ ""String_Node_Str"";
    Intent statsWebViewIntent=new Intent(this.getActivity(),StatsWebViewActivity.class);
    statsWebViewIntent.putExtra(StatsWebViewActivity.STATS_AUTHENTICATED_USER,statsAuthenticatedUser);
    statsWebViewIntent.putExtra(StatsWebViewActivity.STATS_AUTHENTICATED_PASSWD,statsAuthenticatedPassword);
    statsWebViewIntent.putExtra(StatsWebViewActivity.STATS_AUTHENTICATED_URL,url);
    this.getActivity().startActivity(statsWebViewIntent);
  }
 else {
    GraphViewDataInterface[] views=viewsSeries.getData();
    GraphViewDataInterface[] visitors=visitorsSeries.getData();
    String formattedDate;
    if (unit == StatsBarChartUnit.WEEK) {
      formattedDate=StatsUtils.parseDate(date,""String_Node_Str"",""String_Node_Str"");
    }
 else {
      formattedDate=StatsUtils.parseDate(date,""String_Node_Str"",""String_Node_Str"");
    }
    String message=String.format(""String_Node_Str"",formattedDate,getString(R.string.stats_totals_views),(int)views[tappedBar].getY(),getString(R.string.stats_totals_visitors),(int)visitors[tappedBar].getY());
    ToastUtils.showToast(this.getActivity(),message,ToastUtils.Duration.LONG);
  }
}","private void handleBarChartTap(int tappedBar){
  if (tappedBar < 0 || mStatsDate.length < tappedBar) {
    return;
  }
  String date=mStatsDate[tappedBar];
  StatsBarChartUnit unit=getBarChartUnit();
  if (unit == StatsBarChartUnit.DAY) {
    StatsUtils.StatsCredentials credentials=StatsUtils.getCurrentBlogStatsCredentials();
    if (credentials == null) {
      return;
    }
    String statsAuthenticatedUser=credentials.getUsername();
    String statsAuthenticatedPassword=credentials.getPassword();
    String url=""String_Node_Str"" + WordPress.getCurrentRemoteBlogId() + ""String_Node_Str""+ date+ ""String_Node_Str"";
    Intent statsWebViewIntent=new Intent(this.getActivity(),StatsWebViewActivity.class);
    statsWebViewIntent.putExtra(StatsWebViewActivity.STATS_AUTHENTICATED_USER,statsAuthenticatedUser);
    statsWebViewIntent.putExtra(StatsWebViewActivity.STATS_AUTHENTICATED_PASSWD,statsAuthenticatedPassword);
    statsWebViewIntent.putExtra(StatsWebViewActivity.STATS_AUTHENTICATED_URL,url);
    this.getActivity().startActivity(statsWebViewIntent);
  }
 else {
    GraphViewDataInterface[] views=mViewsSeries.getData();
    GraphViewDataInterface[] visitors=mVisitorsSeries.getData();
    String formattedDate;
    if (unit == StatsBarChartUnit.WEEK) {
      formattedDate=StatsUtils.parseDate(date,""String_Node_Str"",""String_Node_Str"");
    }
 else {
      formattedDate=StatsUtils.parseDate(date,""String_Node_Str"",""String_Node_Str"");
    }
    String message=String.format(""String_Node_Str"",formattedDate,getString(R.string.stats_totals_views),(int)views[tappedBar].getY(),getString(R.string.stats_totals_visitors),(int)visitors[tappedBar].getY());
    ToastUtils.showToast(this.getActivity(),message,ToastUtils.Duration.LONG);
  }
}",0.9965635738831616
14604,"private int getNumOfHorizontalLabels(int numPoints){
  if (hasActivity() && DisplayUtils.isTablet(getActivity())) {
    return numPoints / 5;
  }
  if (getBarChartUnit() == StatsBarChartUnit.DAY)   return numPoints / 2;
 else   return numPoints / 3;
}","private int getNumOfHorizontalLabels(int numPoints){
  if (hasActivity() && DisplayUtils.isTablet(getActivity())) {
    return numPoints / 5;
  }
  if (getBarChartUnit() == StatsBarChartUnit.DAY) {
    return numPoints / 2;
  }
 else {
    return numPoints / 3;
  }
}",0.9498069498069498
14605,"private void showStatsActivity(int remoteBlogId){
  if (getActivity() == null || isRemoving())   return;
  if (WordPress.getCurrentRemoteBlogId() != remoteBlogId) {
    int localBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(remoteBlogId);
    WordPress.setCurrentBlog(localBlogId);
  }
  Intent intent=new Intent(getActivity(),StatsActivity.class);
  intent.putExtra(StatsActivity.ARG_NO_MENU_DRAWER,true);
  getActivity().startActivity(intent);
}","private void showStatsActivity(int remoteBlogId){
  if (getActivity() == null || isRemoving()) {
    return;
  }
  if (WordPress.getCurrentRemoteBlogId() != remoteBlogId) {
    int localBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(remoteBlogId);
    WordPress.setCurrentBlog(localBlogId);
  }
  Intent intent=new Intent(getActivity(),StatsActivity.class);
  intent.putExtra(StatsActivity.ARG_NO_MENU_DRAWER,true);
  getActivity().startActivity(intent);
}",0.971861471861472
14606,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle state){
  View view=inflater.inflate(R.layout.notifications_big_badge,parent,false);
  NetworkImageView badgeImageView=(NetworkImageView)view.findViewById(R.id.badge);
  TextView bodyTextView=(TextView)view.findViewById(R.id.body);
  bodyTextView.setMovementMethod(StatsWPLinkMovementMethod.getInstance());
  if (getNote() != null) {
    String noteHTML=JSONUtil.queryJSON(getNote().toJSONObject(),""String_Node_Str"",""String_Node_Str"");
    if (noteHTML.equals(""String_Node_Str"")) {
      noteHTML=getNote().getSubject();
    }
    Spanned html=HtmlUtils.fromHtml(noteHTML);
    bodyTextView.setText(html);
    String iconURL=getNote().getIconURL();
    if (!iconURL.equals(""String_Node_Str""))     badgeImageView.setImageUrl(iconURL,WordPress.imageLoader);
    if (isStatsNote()) {
      final int remoteBlogId=getNote().getMetaValueAsInt(""String_Node_Str"",-1);
      if (WordPress.wpDB.isDotComAccountVisible(remoteBlogId)) {
        TextView txtStats=(TextView)view.findViewById(R.id.text_stats_link);
        txtStats.setVisibility(View.VISIBLE);
        View.OnClickListener statsListener=new View.OnClickListener(){
          @Override public void onClick(          View v){
            showStatsActivity(remoteBlogId);
          }
        }
;
        txtStats.setOnClickListener(statsListener);
        badgeImageView.setOnClickListener(statsListener);
      }
    }
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle state){
  View view=inflater.inflate(R.layout.notifications_big_badge,parent,false);
  NetworkImageView badgeImageView=(NetworkImageView)view.findViewById(R.id.badge);
  TextView bodyTextView=(TextView)view.findViewById(R.id.body);
  bodyTextView.setMovementMethod(StatsWPLinkMovementMethod.getInstance());
  if (getNote() != null) {
    String noteHTML=JSONUtil.queryJSON(getNote().toJSONObject(),""String_Node_Str"",""String_Node_Str"");
    if (noteHTML.equals(""String_Node_Str"")) {
      noteHTML=getNote().getSubject();
    }
    Spanned html=HtmlUtils.fromHtml(noteHTML);
    bodyTextView.setText(html);
    String iconURL=getNote().getIconURL();
    if (!iconURL.equals(""String_Node_Str"")) {
      badgeImageView.setImageUrl(iconURL,WordPress.imageLoader);
    }
    if (isStatsNote()) {
      final int remoteBlogId=getNote().getMetaValueAsInt(""String_Node_Str"",-1);
      if (WordPress.wpDB.isDotComAccountVisible(remoteBlogId)) {
        TextView txtStats=(TextView)view.findViewById(R.id.text_stats_link);
        txtStats.setVisibility(View.VISIBLE);
        View.OnClickListener statsListener=new View.OnClickListener(){
          @Override public void onClick(          View v){
            showStatsActivity(remoteBlogId);
          }
        }
;
        txtStats.setOnClickListener(statsListener);
        badgeImageView.setOnClickListener(statsListener);
      }
    }
  }
  return view;
}",0.9966216216216216
14607,"boolean isStatsNote(){
  if (getNote() == null)   return false;
  String type=getNote().getType();
  if (type == null)   return false;
  return (type.contains(""String_Node_Str"") || type.startsWith(""String_Node_Str"") || type.startsWith(""String_Node_Str"")|| type.startsWith(""String_Node_Str""));
}","boolean isStatsNote(){
  if (getNote() == null) {
    return false;
  }
  String type=getNote().getType();
  if (type == null) {
    return false;
  }
  return (type.contains(""String_Node_Str"") || type.startsWith(""String_Node_Str"") || type.startsWith(""String_Node_Str"")|| type.startsWith(""String_Node_Str""));
}",0.9735099337748344
14608,"public static WPLinkMovementMethod getInstance(){
  if (mMovementMethod == null)   mMovementMethod=new StatsWPLinkMovementMethod();
  return mMovementMethod;
}","public static WPLinkMovementMethod getInstance(){
  if (mMovementMethod == null) {
    mMovementMethod=new StatsWPLinkMovementMethod();
  }
  return mMovementMethod;
}",0.9754601226993864
14609,"private void showStatsActivity(int remoteBlogId){
  if (getActivity() == null || isRemoving())   return;
  if (WordPress.getCurrentRemoteBlogId() != remoteBlogId) {
    int localBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(remoteBlogId);
    WordPress.setCurrentBlog(localBlogId);
  }
  Intent intent=new Intent(getActivity(),StatsActivity.class);
  intent.putExtra(StatsActivity.ARG_NO_MENU_DRAWER,true);
  getActivity().startActivity(intent);
}","private void showStatsActivity(int remoteBlogId){
  if (getActivity() == null || isRemoving()) {
    return;
  }
  if (WordPress.getCurrentRemoteBlogId() != remoteBlogId) {
    int localBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(remoteBlogId);
    WordPress.setCurrentBlog(localBlogId);
  }
  Intent intent=new Intent(getActivity(),StatsActivity.class);
  intent.putExtra(StatsActivity.ARG_NO_MENU_DRAWER,true);
  getActivity().startActivity(intent);
}",0.971861471861472
14610,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle state){
  View view=inflater.inflate(R.layout.notifications_big_badge,parent,false);
  NetworkImageView badgeImageView=(NetworkImageView)view.findViewById(R.id.badge);
  TextView bodyTextView=(TextView)view.findViewById(R.id.body);
  bodyTextView.setMovementMethod(StatsWPLinkMovementMethod.getInstance());
  if (getNote() != null) {
    String noteHTML=JSONUtil.queryJSON(getNote().toJSONObject(),""String_Node_Str"",""String_Node_Str"");
    if (noteHTML.equals(""String_Node_Str"")) {
      noteHTML=getNote().getSubject();
    }
    Spanned html=HtmlUtils.fromHtml(noteHTML);
    bodyTextView.setText(html);
    String iconURL=getNote().getIconURL();
    if (!iconURL.equals(""String_Node_Str""))     badgeImageView.setImageUrl(iconURL,WordPress.imageLoader);
    if (isStatsNote()) {
      final int remoteBlogId=getNote().getMetaValueAsInt(""String_Node_Str"",-1);
      if (WordPress.wpDB.isDotComAccountVisible(remoteBlogId)) {
        TextView txtStats=(TextView)view.findViewById(R.id.text_stats_link);
        txtStats.setVisibility(View.VISIBLE);
        View.OnClickListener statsListener=new View.OnClickListener(){
          @Override public void onClick(          View v){
            showStatsActivity(remoteBlogId);
          }
        }
;
        txtStats.setOnClickListener(statsListener);
        badgeImageView.setOnClickListener(statsListener);
      }
    }
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle state){
  View view=inflater.inflate(R.layout.notifications_big_badge,parent,false);
  NetworkImageView badgeImageView=(NetworkImageView)view.findViewById(R.id.badge);
  TextView bodyTextView=(TextView)view.findViewById(R.id.body);
  bodyTextView.setMovementMethod(StatsWPLinkMovementMethod.getInstance());
  if (getNote() != null) {
    String noteHTML=JSONUtil.queryJSON(getNote().toJSONObject(),""String_Node_Str"",""String_Node_Str"");
    if (noteHTML.equals(""String_Node_Str"")) {
      noteHTML=getNote().getSubject();
    }
    Spanned html=HtmlUtils.fromHtml(noteHTML);
    bodyTextView.setText(html);
    String iconURL=getNote().getIconURL();
    if (!iconURL.equals(""String_Node_Str"")) {
      badgeImageView.setImageUrl(iconURL,WordPress.imageLoader);
    }
    if (isStatsNote()) {
      final int remoteBlogId=getNote().getMetaValueAsInt(""String_Node_Str"",-1);
      if (WordPress.wpDB.isDotComAccountVisible(remoteBlogId)) {
        TextView txtStats=(TextView)view.findViewById(R.id.text_stats_link);
        txtStats.setVisibility(View.VISIBLE);
        View.OnClickListener statsListener=new View.OnClickListener(){
          @Override public void onClick(          View v){
            showStatsActivity(remoteBlogId);
          }
        }
;
        txtStats.setOnClickListener(statsListener);
        badgeImageView.setOnClickListener(statsListener);
      }
    }
  }
  return view;
}",0.9966216216216216
14611,"boolean isStatsNote(){
  if (getNote() == null)   return false;
  String type=getNote().getType();
  if (type == null)   return false;
  return (type.contains(""String_Node_Str"") || type.startsWith(""String_Node_Str"") || type.startsWith(""String_Node_Str"")|| type.startsWith(""String_Node_Str""));
}","boolean isStatsNote(){
  if (getNote() == null) {
    return false;
  }
  String type=getNote().getType();
  if (type == null) {
    return false;
  }
  return (type.contains(""String_Node_Str"") || type.startsWith(""String_Node_Str"") || type.startsWith(""String_Node_Str"")|| type.startsWith(""String_Node_Str""));
}",0.9735099337748344
14612,"public static WPLinkMovementMethod getInstance(){
  if (mMovementMethod == null)   mMovementMethod=new StatsWPLinkMovementMethod();
  return mMovementMethod;
}","public static WPLinkMovementMethod getInstance(){
  if (mMovementMethod == null) {
    mMovementMethod=new StatsWPLinkMovementMethod();
  }
  return mMovementMethod;
}",0.9754601226993864
14613,"public JSONObject getCustomField(String key){
  JSONArray customFields=getCustomFields();
  if (customFields == null) {
    return null;
  }
  for (int i=0; i < customFields.length(); i++) {
    try {
      JSONObject jsonObject=new JSONObject(customFields.getString(i));
      String curentKey=jsonObject.getString(""String_Node_Str"");
      if (key.equals(curentKey)) {
        return jsonObject;
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.POSTS,e);
    }
  }
  return null;
}","public JSONObject getCustomField(String key){
  JSONArray customFieldsJson=getCustomFields();
  if (customFieldsJson == null) {
    return null;
  }
  for (int i=0; i < customFieldsJson.length(); i++) {
    try {
      JSONObject jsonObject=new JSONObject(customFieldsJson.getString(i));
      String curentKey=jsonObject.getString(""String_Node_Str"");
      if (key.equals(curentKey)) {
        return jsonObject;
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.POSTS,e);
    }
  }
  return null;
}",0.984126984126984
14614,"private void initLocation(ViewGroup rootView){
  Post post=mActivity.getPost();
  if (hasLocationProvider() && post.supportsLocation()) {
    View locationRootView=((ViewStub)rootView.findViewById(R.id.stub_post_location_settings)).inflate();
    ((TextView)locationRootView.findViewById(R.id.locationLabel)).setText(getResources().getString(R.string.location).toUpperCase());
    mLocationText=(TextView)locationRootView.findViewById(R.id.locationText);
    mLocationText.setOnClickListener(this);
    mLocationAddSection=locationRootView.findViewById(R.id.sectionLocationAdd);
    mLocationSearchSection=locationRootView.findViewById(R.id.sectionLocationSearch);
    mLocationViewSection=locationRootView.findViewById(R.id.sectionLocationView);
    if (mActivity.getPost().hasLocation()) {
      showLocationView();
    }
 else {
      showLocationAdd();
    }
    Button addLocation=(Button)locationRootView.findViewById(R.id.addLocation);
    addLocation.setOnClickListener(this);
    mButtonSearchLocation=(Button)locationRootView.findViewById(R.id.searchLocation);
    mButtonSearchLocation.setOnClickListener(this);
    mLocationEditText=(EditText)locationRootView.findViewById(R.id.searchLocationText);
    mLocationEditText.setOnEditorActionListener(this);
    mLocationEditText.addTextChangedListener(mLocationEditTextWatcher);
    Button updateLocation=(Button)locationRootView.findViewById(R.id.updateLocation);
    Button removeLocation=(Button)locationRootView.findViewById(R.id.removeLocation);
    updateLocation.setOnClickListener(this);
    removeLocation.setOnClickListener(this);
    if (post.hasLocation()) {
      PostLocation location=post.getLocation();
      new GetAddressTask().execute(location.getLatitude(),location.getLongitude());
    }
  }
}","private void initLocation(ViewGroup rootView){
  Post post=mActivity.getPost();
  if (hasLocationProvider() && post.supportsLocation()) {
    View locationRootView=((ViewStub)rootView.findViewById(R.id.stub_post_location_settings)).inflate();
    TextView locationLabel=((TextView)locationRootView.findViewById(R.id.locationLabel));
    locationLabel.setText(getResources().getString(R.string.location).toUpperCase());
    mLocationText=(TextView)locationRootView.findViewById(R.id.locationText);
    mLocationText.setOnClickListener(this);
    mLocationAddSection=locationRootView.findViewById(R.id.sectionLocationAdd);
    mLocationSearchSection=locationRootView.findViewById(R.id.sectionLocationSearch);
    mLocationViewSection=locationRootView.findViewById(R.id.sectionLocationView);
    if (mActivity.getPost().hasLocation()) {
      showLocationView();
    }
 else {
      showLocationAdd();
    }
    Button addLocation=(Button)locationRootView.findViewById(R.id.addLocation);
    addLocation.setOnClickListener(this);
    mButtonSearchLocation=(Button)locationRootView.findViewById(R.id.searchLocation);
    mButtonSearchLocation.setOnClickListener(this);
    mLocationEditText=(EditText)locationRootView.findViewById(R.id.searchLocationText);
    mLocationEditText.setOnEditorActionListener(this);
    mLocationEditText.addTextChangedListener(mLocationEditTextWatcher);
    Button updateLocation=(Button)locationRootView.findViewById(R.id.updateLocation);
    Button removeLocation=(Button)locationRootView.findViewById(R.id.removeLocation);
    updateLocation.setOnClickListener(this);
    removeLocation.setOnClickListener(this);
    if (post.hasLocation()) {
      PostLocation location=post.getLocation();
      new GetAddressTask().execute(location.getLatitude(),location.getLongitude());
    }
  }
}",0.9882943143812708
14615,"public static Geocoder getGeocoder(Context context){
  if (!Geocoder.isPresent())   return null;
  Geocoder gcd;
  try {
    gcd=new Geocoder(context,Locale.getDefault());
  }
 catch (  NullPointerException cannotIstantiateEx) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"",cannotIstantiateEx);
    return null;
  }
  return gcd;
}","public static Geocoder getGeocoder(Context context){
  if (!Geocoder.isPresent()) {
    return null;
  }
  Geocoder gcd;
  try {
    gcd=new Geocoder(context,Locale.getDefault());
  }
 catch (  NullPointerException cannotIstantiateEx) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"",cannotIstantiateEx);
    return null;
  }
  return gcd;
}",0.9464285714285714
14616,"public static String getLocationNameFromAddress(Address address){
  String locality=""String_Node_Str"", adminArea=""String_Node_Str"", country=""String_Node_Str"";
  if (address.getLocality() != null)   locality=address.getLocality();
  if (address.getAdminArea() != null)   adminArea=address.getAdminArea();
  if (address.getCountryName() != null)   country=address.getCountryName();
  return ((locality.equals(""String_Node_Str"")) ? locality : locality + ""String_Node_Str"") + ((adminArea.equals(""String_Node_Str"")) ? adminArea : adminArea + ""String_Node_Str"") + country;
}","public static String getLocationNameFromAddress(Address address){
  String locality=""String_Node_Str"", adminArea=""String_Node_Str"", country=""String_Node_Str"";
  if (address.getLocality() != null) {
    locality=address.getLocality();
  }
  if (address.getAdminArea() != null) {
    adminArea=address.getAdminArea();
  }
  if (address.getCountryName() != null) {
    country=address.getCountryName();
  }
  return ((locality.equals(""String_Node_Str"")) ? locality : locality + ""String_Node_Str"") + ((adminArea.equals(""String_Node_Str"")) ? adminArea : adminArea + ""String_Node_Str"") + country;
}",0.9793103448275862
14617,"private void copyDatabase(SQLiteDatabase db){
  String copyFrom=db.getPath();
  String copyTo=WordPress.getContext().getExternalFilesDir(null).getAbsolutePath() + ""String_Node_Str"" + DB_NAME;
  try {
    InputStream input=new FileInputStream(copyFrom);
    OutputStream output=new FileOutputStream(copyTo);
    byte[] buffer=new byte[1024];
    int length;
    while ((length=input.read(buffer)) > 0)     output.write(buffer,0,length);
    output.flush();
    output.close();
    input.close();
  }
 catch (  IOException e) {
    AppLog.e(T.DB,""String_Node_Str"",e);
  }
}","private void copyDatabase(SQLiteDatabase db){
  String copyFrom=db.getPath();
  String copyTo=WordPress.getContext().getExternalFilesDir(null).getAbsolutePath() + ""String_Node_Str"" + DB_NAME;
  try {
    InputStream input=new FileInputStream(copyFrom);
    OutputStream output=new FileOutputStream(copyTo);
    byte[] buffer=new byte[1024];
    int length;
    while ((length=input.read(buffer)) > 0) {
      output.write(buffer,0,length);
    }
    output.flush();
    output.close();
    input.close();
  }
 catch (  IOException e) {
    AppLog.e(T.DB,""String_Node_Str"",e);
  }
}",0.9913194444444444
14618,"private static void purge(){
  SQLiteDatabase db=getWritableDb();
  db.beginTransaction();
  try {
    int numPostsDeleted=ReaderPostTable.purge(db);
    if (numPostsDeleted > 0) {
      AppLog.i(T.READER,String.format(""String_Node_Str"",numPostsDeleted));
      int numCommentsDeleted=ReaderCommentTable.purge(db);
      if (numCommentsDeleted > 0)       AppLog.i(T.READER,String.format(""String_Node_Str"",numCommentsDeleted));
      int numLikesDeleted=ReaderLikeTable.purge(db);
      if (numLikesDeleted > 0)       AppLog.i(T.READER,String.format(""String_Node_Str"",numLikesDeleted));
      int numThumbsPurged=ReaderThumbnailTable.purge(db);
      if (numThumbsPurged > 0)       AppLog.i(T.READER,String.format(""String_Node_Str"",numThumbsPurged));
      int numTagsPurged=ReaderTagTable.purge(db);
      if (numTagsPurged > 0)       AppLog.i(T.READER,String.format(""String_Node_Str"",numTagsPurged));
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}","private static void purge(){
  SQLiteDatabase db=getWritableDb();
  db.beginTransaction();
  try {
    int numPostsDeleted=ReaderPostTable.purge(db);
    if (numPostsDeleted > 0) {
      AppLog.i(T.READER,String.format(""String_Node_Str"",numPostsDeleted));
      int numCommentsDeleted=ReaderCommentTable.purge(db);
      if (numCommentsDeleted > 0) {
        AppLog.i(T.READER,String.format(""String_Node_Str"",numCommentsDeleted));
      }
      int numLikesDeleted=ReaderLikeTable.purge(db);
      if (numLikesDeleted > 0) {
        AppLog.i(T.READER,String.format(""String_Node_Str"",numLikesDeleted));
      }
      int numThumbsPurged=ReaderThumbnailTable.purge(db);
      if (numThumbsPurged > 0) {
        AppLog.i(T.READER,String.format(""String_Node_Str"",numThumbsPurged));
      }
      int numTagsPurged=ReaderTagTable.purge(db);
      if (numTagsPurged > 0) {
        AppLog.i(T.READER,String.format(""String_Node_Str"",numTagsPurged));
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}",0.9763079960513328
14619,"public static void addOrUpdatePost(ReaderPost post){
  if (post == null)   return;
  ReaderPostList posts=new ReaderPostList();
  posts.add(post);
  addOrUpdatePosts(null,posts);
}","public static void addOrUpdatePost(ReaderPost post){
  if (post == null) {
    return;
  }
  ReaderPostList posts=new ReaderPostList();
  posts.add(post);
  addOrUpdatePosts(null,posts);
}",0.9782608695652174
14620,"private static ReaderPost getPostFromCursor(Cursor c,PostColumnIndexes cols){
  if (c == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  if (cols == null)   cols=new PostColumnIndexes(c);
  post.postId=c.getLong(cols.idx_post_id);
  post.blogId=c.getLong(cols.idx_blog_id);
  post.authorId=c.getLong(cols.idx_author_id);
  post.setPseudoId(c.getString(cols.idx_pseudo_id));
  post.setAuthorName(c.getString(cols.idx_author_name));
  post.setBlogName(c.getString(cols.idx_blog_name));
  post.setBlogUrl(c.getString(cols.idx_blog_url));
  post.setExcerpt(c.getString(cols.idx_excerpt));
  post.setFeaturedImage(c.getString(cols.idx_featured_image));
  post.setFeaturedVideo(c.getString(cols.idx_featured_video));
  post.setTitle(c.getString(cols.idx_title));
  post.setText(c.getString(cols.idx_text));
  post.setUrl(c.getString(cols.idx_url));
  post.setPostAvatar(c.getString(cols.idx_post_avatar));
  post.timestamp=c.getLong(cols.idx_timestamp);
  post.setPublished(c.getString(cols.idx_published));
  post.numReplies=c.getInt(cols.idx_num_replies);
  post.numLikes=c.getInt(cols.idx_num_likes);
  post.isLikedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_liked));
  post.isFollowedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_followed));
  post.isCommentsOpen=SqlUtils.sqlToBool(c.getInt(cols.idx_is_comments_open));
  post.isRebloggedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_reblogged));
  post.isExternal=SqlUtils.sqlToBool(c.getInt(cols.idx_is_external));
  post.isPrivate=SqlUtils.sqlToBool(c.getInt(cols.idx_is_private));
  post.isVideoPress=SqlUtils.sqlToBool(c.getInt(cols.idx_is_videopress));
  post.setTags(c.getString(cols.idx_tag_list));
  post.setPrimaryTag(c.getString(cols.idx_primary_tag));
  post.setSecondaryTag(c.getString(cols.idx_secondary_tag));
  return post;
}","private static ReaderPost getPostFromCursor(Cursor c,PostColumnIndexes cols){
  if (c == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ReaderPost post=new ReaderPost();
  if (cols == null) {
    cols=new PostColumnIndexes(c);
  }
  post.postId=c.getLong(cols.idx_post_id);
  post.blogId=c.getLong(cols.idx_blog_id);
  post.authorId=c.getLong(cols.idx_author_id);
  post.setPseudoId(c.getString(cols.idx_pseudo_id));
  post.setAuthorName(c.getString(cols.idx_author_name));
  post.setBlogName(c.getString(cols.idx_blog_name));
  post.setBlogUrl(c.getString(cols.idx_blog_url));
  post.setExcerpt(c.getString(cols.idx_excerpt));
  post.setFeaturedImage(c.getString(cols.idx_featured_image));
  post.setFeaturedVideo(c.getString(cols.idx_featured_video));
  post.setTitle(c.getString(cols.idx_title));
  post.setText(c.getString(cols.idx_text));
  post.setUrl(c.getString(cols.idx_url));
  post.setPostAvatar(c.getString(cols.idx_post_avatar));
  post.timestamp=c.getLong(cols.idx_timestamp);
  post.setPublished(c.getString(cols.idx_published));
  post.numReplies=c.getInt(cols.idx_num_replies);
  post.numLikes=c.getInt(cols.idx_num_likes);
  post.isLikedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_liked));
  post.isFollowedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_followed));
  post.isCommentsOpen=SqlUtils.sqlToBool(c.getInt(cols.idx_is_comments_open));
  post.isRebloggedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_reblogged));
  post.isExternal=SqlUtils.sqlToBool(c.getInt(cols.idx_is_external));
  post.isPrivate=SqlUtils.sqlToBool(c.getInt(cols.idx_is_private));
  post.isVideoPress=SqlUtils.sqlToBool(c.getInt(cols.idx_is_videopress));
  post.setTags(c.getString(cols.idx_tag_list));
  post.setPrimaryTag(c.getString(cols.idx_primary_tag));
  post.setSecondaryTag(c.getString(cols.idx_secondary_tag));
  return post;
}",0.9957378795950984
14621,"public static ReaderPostList getPostsInBlog(long blogId,int maxPosts){
  String sql=""String_Node_Str"";
  if (maxPosts > 0)   sql+=""String_Node_Str"" + Integer.toString(maxPosts);
  Cursor cursor=ReaderDatabase.getReadableDb().rawQuery(sql,new String[]{Long.toString(blogId)});
  try {
    ReaderPostList posts=new ReaderPostList();
    if (cursor == null || !cursor.moveToFirst())     return posts;
    final PostColumnIndexes cols=new PostColumnIndexes(cursor);
    do {
      posts.add(getPostFromCursor(cursor,cols));
    }
 while (cursor.moveToNext());
    return posts;
  }
  finally {
    SqlUtils.closeCursor(cursor);
  }
}","public static ReaderPostList getPostsInBlog(long blogId,int maxPosts){
  String sql=""String_Node_Str"";
  if (maxPosts > 0) {
    sql+=""String_Node_Str"" + Integer.toString(maxPosts);
  }
  Cursor cursor=ReaderDatabase.getReadableDb().rawQuery(sql,new String[]{Long.toString(blogId)});
  try {
    ReaderPostList posts=new ReaderPostList();
    if (cursor == null || !cursor.moveToFirst()) {
      return posts;
    }
    final PostColumnIndexes cols=new PostColumnIndexes(cursor);
    do {
      posts.add(getPostFromCursor(cursor,cols));
    }
 while (cursor.moveToNext());
    return posts;
  }
  finally {
    SqlUtils.closeCursor(cursor);
  }
}",0.9858934169278996
14622,"public static int getNumCommentsForPost(ReaderPost post){
  if (post == null)   return 0;
  String[] args=new String[]{Long.toString(post.blogId),Long.toString(post.postId)};
  return SqlUtils.intForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
}","public static int getNumCommentsForPost(ReaderPost post){
  if (post == null) {
    return 0;
  }
  String[] args=new String[]{Long.toString(post.blogId),Long.toString(post.postId)};
  return SqlUtils.intForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
}",0.9849624060150376
14623,"public static ReaderPost getPost(long blogId,long postId){
  String[] args=new String[]{Long.toString(blogId),Long.toString(postId)};
  Cursor c=ReaderDatabase.getReadableDb().rawQuery(""String_Node_Str"",args);
  try {
    if (!c.moveToFirst())     return null;
    return getPostFromCursor(c,null);
  }
  finally {
    SqlUtils.closeCursor(c);
  }
}","public static ReaderPost getPost(long blogId,long postId){
  String[] args=new String[]{Long.toString(blogId),Long.toString(postId)};
  Cursor c=ReaderDatabase.getReadableDb().rawQuery(""String_Node_Str"",args);
  try {
    if (!c.moveToFirst()) {
      return null;
    }
    return getPostFromCursor(c,null);
  }
  finally {
    SqlUtils.closeCursor(c);
  }
}",0.940677966101695
14624,"public static void setPostReblogged(ReaderPost post,boolean isReblogged){
  if (post == null)   return;
  String sql=""String_Node_Str"" + SqlUtils.boolToSql(isReblogged) + ""String_Node_Str"";
  String[] args={Long.toString(post.blogId),Long.toString(post.postId)};
  ReaderDatabase.getWritableDb().execSQL(sql,args);
}","public static void setPostReblogged(ReaderPost post,boolean isReblogged){
  if (post == null) {
    return;
  }
  String sql=""String_Node_Str"" + SqlUtils.boolToSql(isReblogged) + ""String_Node_Str"";
  String[] args={Long.toString(post.blogId),Long.toString(post.postId)};
  ReaderDatabase.getWritableDb().execSQL(sql,args);
}",0.9875
14625,"public static int deletePostsWithTag(String tagName){
  if (TextUtils.isEmpty(tagName))   return 0;
  int numDeleted=ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",new String[]{tagName});
  if (numDeleted > 0)   ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",null);
  return numDeleted;
}","public static int deletePostsWithTag(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return 0;
  }
  int numDeleted=ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",new String[]{tagName});
  if (numDeleted > 0)   ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",null);
  return numDeleted;
}",0.9884393063583816
14626,"public static ReaderTag getReaderTag(){
  String tagName=getString(PREFKEY_READER_TAG_NAME);
  if (TextUtils.isEmpty(tagName)) {
    return null;
  }
  ReaderTagType tagType=ReaderTagType.fromInt(getInt(PREFKEY_READER_TAG_TYPE));
  return new ReaderTag(tagName,tagType);
}","public static ReaderTag getReaderTag(){
  String tagName=getString(PREFKEY_READER_TAG_NAME);
  if (TextUtils.isEmpty(tagName)) {
    return null;
  }
  int tagType=getInt(PREFKEY_READER_TAG_TYPE);
  return new ReaderTag(tagName,ReaderTagType.fromInt(tagType));
}",0.700374531835206
14627,"public static void setReaderTag(ReaderTag tag){
  SharedPreferences.Editor editor=prefs().edit();
  if (tag != null) {
    editor.putString(PREFKEY_READER_TAG_NAME,tag.getTagName());
    editor.putInt(PREFKEY_READER_TAG_TYPE,tag.tagType.toInt());
  }
 else {
    editor.remove(PREFKEY_READER_TAG_NAME);
    editor.remove(PREFKEY_READER_TAG_TYPE);
  }
  editor.commit();
}","public static void setReaderTag(ReaderTag tag){
  if (tag != null && !TextUtils.isEmpty(tag.getTagName())) {
    setString(PREFKEY_READER_TAG_NAME,tag.getTagName());
    setInt(PREFKEY_READER_TAG_TYPE,tag.tagType.toInt());
  }
 else {
    prefs().edit().remove(PREFKEY_READER_TAG_NAME).remove(PREFKEY_READER_TAG_TYPE).commit();
  }
}",0.7670454545454546
14628,"private static ReaderTagList parseTags(JSONObject jsonObject,String name,ReaderTagType topicType){
  ReaderTagList topics=new ReaderTagList();
  if (jsonObject == null)   return topics;
  JSONObject jsonTopics=jsonObject.optJSONObject(name);
  if (jsonTopics == null)   return topics;
  Iterator<String> it=jsonTopics.keys();
  while (it.hasNext()) {
    String internalName=it.next();
    JSONObject jsonTopic=jsonTopics.optJSONObject(internalName);
    if (jsonTopic != null) {
      String tagName=JSONUtil.getStringDecoded(jsonTopic,""String_Node_Str"");
      String endpoint=JSONUtil.getString(jsonTopic,""String_Node_Str"");
      topics.add(new ReaderTag(tagName,endpoint,topicType));
    }
  }
  return topics;
}","private static ReaderTagList parseTags(JSONObject jsonObject,String name,ReaderTagType topicType){
  ReaderTagList topics=new ReaderTagList();
  if (jsonObject == null) {
    return topics;
  }
  JSONObject jsonTopics=jsonObject.optJSONObject(name);
  if (jsonTopics == null) {
    return topics;
  }
  Iterator<String> it=jsonTopics.keys();
  while (it.hasNext()) {
    String internalName=it.next();
    JSONObject jsonTopic=jsonTopics.optJSONObject(internalName);
    if (jsonTopic != null) {
      String tagName=JSONUtil.getStringDecoded(jsonTopic,""String_Node_Str"");
      String endpoint=JSONUtil.getString(jsonTopic,""String_Node_Str"");
      topics.add(new ReaderTag(tagName,endpoint,topicType));
    }
  }
  return topics;
}",0.9889655172413792
14629,"private static void deleteTags(ReaderTagList topics){
  if (topics == null || topics.size() == 0)   return;
  ReaderDatabase.getWritableDb().beginTransaction();
  try {
    for (    ReaderTag topic : topics) {
      ReaderTagTable.deleteTag(topic.getTagName());
      ReaderPostTable.deletePostsWithTag(topic.getTagName());
    }
    ReaderDatabase.getWritableDb().setTransactionSuccessful();
  }
  finally {
    ReaderDatabase.getWritableDb().endTransaction();
  }
}","private static void deleteTags(ReaderTagList topics){
  if (topics == null || topics.size() == 0) {
    return;
  }
  ReaderDatabase.getWritableDb().beginTransaction();
  try {
    for (    ReaderTag topic : topics) {
      ReaderTagTable.deleteTag(topic.getTagName());
      ReaderPostTable.deletePostsWithTag(topic.getTagName());
    }
    ReaderDatabase.getWritableDb().setTransactionSuccessful();
  }
  finally {
    ReaderDatabase.getWritableDb().endTransaction();
  }
}",0.9915074309978767
14630,"static String sanitizeTitle(final String tagName){
  if (tagName == null) {
    return ""String_Node_Str"";
  }
  String sanitized=tagName.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  while (sanitized.contains(""String_Node_Str""))   sanitized=sanitized.replace(""String_Node_Str"",""String_Node_Str"");
  return sanitized.trim();
}","static String sanitizeTitle(final String tagName){
  if (tagName == null) {
    return ""String_Node_Str"";
  }
  String sanitized=tagName.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  while (sanitized.contains(""String_Node_Str"")) {
    sanitized=sanitized.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return sanitized.trim();
}",0.9914163090128756
14631,"public static int getImageOrientation(Context ctx,String filePath){
  Uri curStream;
  int orientation=0;
  if (!filePath.contains(""String_Node_Str""))   curStream=Uri.parse(""String_Node_Str"" + filePath);
 else   curStream=Uri.parse(filePath);
  try {
    Cursor cur=ctx.getContentResolver().query(curStream,new String[]{MediaStore.Images.Media.ORIENTATION},null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        orientation=cur.getInt(cur.getColumnIndex(MediaStore.Images.Media.ORIENTATION));
      }
      cur.close();
    }
  }
 catch (  Exception errReadingContentResolver) {
    AppLog.e(AppLog.T.UTILS,errReadingContentResolver);
  }
  if (orientation == 0) {
    orientation=getExifOrientation(filePath);
  }
  return orientation;
}","public static int getImageOrientation(Context ctx,String filePath){
  Uri curStream;
  int orientation=0;
  filePath=filePath.replace(""String_Node_Str"",""String_Node_Str"");
  if (!filePath.contains(""String_Node_Str""))   curStream=Uri.parse(""String_Node_Str"" + filePath);
 else   curStream=Uri.parse(filePath);
  try {
    Cursor cur=ctx.getContentResolver().query(curStream,new String[]{MediaStore.Images.Media.ORIENTATION},null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        orientation=cur.getInt(cur.getColumnIndex(MediaStore.Images.Media.ORIENTATION));
      }
      cur.close();
    }
  }
 catch (  Exception errReadingContentResolver) {
    AppLog.e(AppLog.T.UTILS,errReadingContentResolver);
  }
  if (orientation == 0) {
    orientation=getExifOrientation(filePath);
  }
  return orientation;
}",0.958490566037736
14632,"/** 
 * nbradbury - 21-Feb-2014 - similar to createThumbnail but more efficient since it doesn't require passing the full-size image as an array of bytes[]
 */
public static byte[] createThumbnailFromUri(Context context,Uri imageUri,int maxWidth,String fileExtension,int rotation){
  if (context == null || imageUri == null)   return null;
  String filePath=null;
  if (imageUri.toString().contains(""String_Node_Str"")) {
    String[] projection=new String[]{MediaStore.Images.Media.DATA};
    Cursor cur=context.getContentResolver().query(imageUri,projection,null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        int dataColumn=cur.getColumnIndex(MediaStore.Images.Media.DATA);
        filePath=cur.getString(dataColumn);
      }
      cur.close();
    }
  }
  if (TextUtils.isEmpty(filePath)) {
    filePath=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
    filePath=filePath.replace(""String_Node_Str"",""String_Node_Str"");
  }
  BitmapFactory.Options optBounds=new BitmapFactory.Options();
  optBounds.inJustDecodeBounds=true;
  try {
    BitmapFactory.decodeFile(filePath,optBounds);
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
    return null;
  }
  int scale=1;
  if (maxWidth > 0 && optBounds.outWidth > maxWidth) {
    double d=Math.pow(2,(int)Math.round(Math.log(maxWidth / (double)optBounds.outWidth) / Math.log(0.5)));
    scale=(int)d;
  }
  BitmapFactory.Options optActual=new BitmapFactory.Options();
  optActual.inSampleSize=scale;
  Bitmap bmpResized;
  try {
    bmpResized=BitmapFactory.decodeFile(filePath,optActual);
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.setFloat(CrashlyticsUtils.ExtraKey.IMAGE_RESIZE_SCALE,scale);
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
    return null;
  }
  if (bmpResized == null)   return null;
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  float percentage=(float)maxWidth / bmpResized.getWidth();
  float proportionateHeight=bmpResized.getHeight() * percentage;
  int finalHeight=(int)Math.rint(proportionateHeight);
  float scaleWidth=((float)maxWidth) / bmpResized.getWidth();
  float scaleHeight=((float)finalHeight) / bmpResized.getHeight();
  float scaleBy=Math.min(scaleWidth,scaleHeight);
  Matrix matrix=new Matrix();
  matrix.postScale(scaleBy,scaleBy);
  if (rotation != 0) {
    matrix.setRotate(rotation);
  }
  Bitmap.CompressFormat fmt;
  if (fileExtension != null && fileExtension.equalsIgnoreCase(""String_Node_Str"")) {
    fmt=Bitmap.CompressFormat.PNG;
  }
 else {
    fmt=Bitmap.CompressFormat.JPEG;
  }
  final Bitmap bmpRotated;
  try {
    bmpRotated=Bitmap.createBitmap(bmpResized,0,0,bmpResized.getWidth(),bmpResized.getHeight(),matrix,true);
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.setInt(CrashlyticsUtils.ExtraKey.IMAGE_ANGLE,rotation);
    CrashlyticsUtils.setInt(CrashlyticsUtils.ExtraKey.IMAGE_WIDTH,bmpResized.getWidth());
    CrashlyticsUtils.setInt(CrashlyticsUtils.ExtraKey.IMAGE_HEIGHT,bmpResized.getHeight());
    CrashlyticsUtils.setFloat(CrashlyticsUtils.ExtraKey.IMAGE_RESIZE_SCALE,scaleBy);
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
    return null;
  }
  bmpRotated.compress(fmt,100,stream);
  bmpResized.recycle();
  bmpRotated.recycle();
  return stream.toByteArray();
}","/** 
 * nbradbury - 21-Feb-2014 - similar to createThumbnail but more efficient since it doesn't require passing the full-size image as an array of bytes[]
 */
public static byte[] createThumbnailFromUri(Context context,Uri imageUri,int maxWidth,String fileExtension,int rotation){
  if (context == null || imageUri == null || maxWidth <= 0)   return null;
  String filePath=null;
  if (imageUri.toString().contains(""String_Node_Str"")) {
    String[] projection=new String[]{MediaStore.Images.Media.DATA};
    Cursor cur=context.getContentResolver().query(imageUri,projection,null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        int dataColumn=cur.getColumnIndex(MediaStore.Images.Media.DATA);
        filePath=cur.getString(dataColumn);
      }
      cur.close();
    }
  }
  if (TextUtils.isEmpty(filePath)) {
    filePath=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
    filePath=filePath.replace(""String_Node_Str"",""String_Node_Str"");
  }
  BitmapFactory.Options optBounds=new BitmapFactory.Options();
  optBounds.inJustDecodeBounds=true;
  try {
    BitmapFactory.decodeFile(filePath,optBounds);
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
    return null;
  }
  int scale=1;
  if (maxWidth > 0 && optBounds.outWidth > maxWidth) {
    double d=Math.pow(2,(int)Math.round(Math.log(maxWidth / (double)optBounds.outWidth) / Math.log(0.5)));
    scale=(int)d;
  }
  BitmapFactory.Options optActual=new BitmapFactory.Options();
  optActual.inSampleSize=scale;
  Bitmap bmpResized;
  try {
    bmpResized=BitmapFactory.decodeFile(filePath,optActual);
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.setFloat(CrashlyticsUtils.ExtraKey.IMAGE_RESIZE_SCALE,scale);
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
    return null;
  }
  if (bmpResized == null)   return null;
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  float percentage=(float)maxWidth / bmpResized.getWidth();
  float proportionateHeight=bmpResized.getHeight() * percentage;
  int finalHeight=(int)Math.rint(proportionateHeight);
  float scaleWidth=((float)maxWidth) / bmpResized.getWidth();
  float scaleHeight=((float)finalHeight) / bmpResized.getHeight();
  float scaleBy=Math.min(scaleWidth,scaleHeight);
  Matrix matrix=new Matrix();
  matrix.postScale(scaleBy,scaleBy);
  if (rotation != 0) {
    matrix.setRotate(rotation);
  }
  Bitmap.CompressFormat fmt;
  if (fileExtension != null && fileExtension.equalsIgnoreCase(""String_Node_Str"")) {
    fmt=Bitmap.CompressFormat.PNG;
  }
 else {
    fmt=Bitmap.CompressFormat.JPEG;
  }
  final Bitmap bmpRotated;
  try {
    bmpRotated=Bitmap.createBitmap(bmpResized,0,0,bmpResized.getWidth(),bmpResized.getHeight(),matrix,true);
  }
 catch (  OutOfMemoryError e) {
    CrashlyticsUtils.setInt(CrashlyticsUtils.ExtraKey.IMAGE_ANGLE,rotation);
    CrashlyticsUtils.setInt(CrashlyticsUtils.ExtraKey.IMAGE_WIDTH,bmpResized.getWidth());
    CrashlyticsUtils.setInt(CrashlyticsUtils.ExtraKey.IMAGE_HEIGHT,bmpResized.getHeight());
    CrashlyticsUtils.setFloat(CrashlyticsUtils.ExtraKey.IMAGE_RESIZE_SCALE,scaleBy);
    CrashlyticsUtils.logException(e,CrashlyticsUtils.ExceptionType.SPECIFIC,AppLog.T.UTILS);
    return null;
  }
  bmpRotated.compress(fmt,100,stream);
  bmpResized.recycle();
  bmpRotated.recycle();
  return stream.toByteArray();
}",0.997535160214586
14633,"public String getFeaturedImageForDisplay(int width,int height){
  if (featuredImageForDisplay == null) {
    if (!hasFeaturedImage()) {
      featuredImageForDisplay=""String_Node_Str"";
    }
 else     if (isPrivate) {
      featuredImageForDisplay=UrlUtils.makeHttps(featuredImage);
    }
 else {
      featuredImageForDisplay=PhotonUtils.getPhotonImageUrl(featuredImage,width,height);
    }
  }
  return featuredImageForDisplay;
}","public String getFeaturedImageForDisplay(int width,int height){
  if (featuredImageForDisplay == null) {
    if (!hasFeaturedImage()) {
      featuredImageForDisplay=""String_Node_Str"";
    }
 else     if (isPrivate) {
      featuredImageForDisplay=ReaderUtils.getPrivateImageForDisplay(featuredImage,width,height);
    }
 else {
      featuredImageForDisplay=PhotonUtils.getPhotonImageUrl(featuredImage,width,height);
    }
  }
  return featuredImageForDisplay;
}",0.906040268456376
14634,"public static ReaderPost fromJson(JSONObject json){
  if (json == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
 else {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.setBlogUrl(JSONUtil.getString(json,""String_Node_Str""));
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  assignAuthorFromJson(post,json.optJSONObject(""String_Node_Str""));
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    post.setPrimaryTag(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    post.published=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    post.published=JSONUtil.getString(json,""String_Node_Str"");
  }
  String likeDate=JSONUtil.getString(json,""String_Node_Str"");
  if (!TextUtils.isEmpty(likeDate)) {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(likeDate);
  }
 else {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(post.published);
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      if (!TextUtils.isEmpty(mediaUrl)) {
        String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
        boolean isVideo=(type != null && type.equals(""String_Node_Str""));
        if (isVideo) {
          post.featuredVideo=mediaUrl;
        }
 else {
          post.featuredImage=mediaUrl;
        }
      }
    }
    if (!post.hasFeaturedImage()) {
      post.featuredImage=findFeaturedImage(post.text);
    }
  }
  if (!post.hasTitle() && post.hasExcerpt()) {
    post.title=extractTitle(post.excerpt,50);
  }
  assignTagsFromJson(post,json.optJSONObject(""String_Node_Str""));
  if (post.blogId == 0) {
    JSONObject jsonSite=JSONUtil.getJSONChild(json,""String_Node_Str"");
    if (jsonSite != null) {
      post.blogId=jsonSite.optInt(""String_Node_Str"");
      post.blogName=JSONUtil.getString(jsonSite,""String_Node_Str"");
      post.setBlogUrl(JSONUtil.getString(jsonSite,""String_Node_Str""));
      post.isPrivate=JSONUtil.getBool(jsonSite,""String_Node_Str"");
    }
  }
  return post;
}","public static ReaderPost fromJson(JSONObject json){
  if (json == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
 else {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.setBlogUrl(JSONUtil.getString(json,""String_Node_Str""));
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  assignAuthorFromJson(post,json.optJSONObject(""String_Node_Str""));
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    post.setPrimaryTag(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    post.published=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    post.published=JSONUtil.getString(json,""String_Node_Str"");
  }
  String likeDate=JSONUtil.getString(json,""String_Node_Str"");
  if (!TextUtils.isEmpty(likeDate)) {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(likeDate);
  }
 else {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(post.published);
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      if (!TextUtils.isEmpty(mediaUrl)) {
        String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
        boolean isVideo=(type != null && type.equals(""String_Node_Str""));
        if (isVideo) {
          post.featuredVideo=mediaUrl;
        }
 else {
          post.featuredImage=mediaUrl;
        }
      }
    }
    if (!post.hasFeaturedImage()) {
      post.featuredImage=findFeaturedImage(post.text);
    }
  }
  if (!post.hasTitle() && post.hasExcerpt()) {
    post.title=extractTitle(post.excerpt,50);
  }
  assignTagsFromJson(post,json.optJSONObject(""String_Node_Str""));
  JSONObject jsonSite=JSONUtil.getJSONChild(json,""String_Node_Str"");
  if (jsonSite != null) {
    post.blogId=jsonSite.optInt(""String_Node_Str"");
    post.blogName=JSONUtil.getString(jsonSite,""String_Node_Str"");
    post.setBlogUrl(JSONUtil.getString(jsonSite,""String_Node_Str""));
    post.isPrivate=JSONUtil.getBool(jsonSite,""String_Node_Str"");
  }
  return post;
}",0.98989898989899
14635,"private void loadImage(String imageUrl){
  if (TextUtils.isEmpty(imageUrl)) {
    handleImageLoadFailure();
    return;
  }
  if (mIsPrivate) {
    imageUrl=UrlUtils.makeHttps(imageUrl);
  }
 else {
    Point pt=DisplayUtils.getDisplayPixelSize(this);
    int maxWidth=Math.max(pt.x,pt.y);
    imageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,maxWidth,0);
  }
  final ProgressBar progress=(ProgressBar)findViewById(R.id.progress);
  progress.setVisibility(View.VISIBLE);
  final WPNetworkImageView imageView=(WPNetworkImageView)findViewById(R.id.image_photo);
  imageView.setImageUrl(imageUrl,ImageType.PHOTO_FULL,new ImageListener(){
    @Override public void onImageLoaded(    boolean succeeded){
      progress.setVisibility(View.GONE);
      if (succeeded) {
        createAttacher(imageView);
      }
 else {
        handleImageLoadFailure();
      }
    }
  }
);
}","private void loadImage(String imageUrl){
  if (TextUtils.isEmpty(imageUrl)) {
    handleImageLoadFailure();
    return;
  }
  Point pt=DisplayUtils.getDisplayPixelSize(this);
  int maxWidth=Math.max(pt.x,pt.y);
  if (mIsPrivate) {
    imageUrl=ReaderUtils.getPrivateImageForDisplay(imageUrl,maxWidth,0);
  }
 else {
    imageUrl=PhotonUtils.getPhotonImageUrl(imageUrl,maxWidth,0);
  }
  final ProgressBar progress=(ProgressBar)findViewById(R.id.progress);
  progress.setVisibility(View.VISIBLE);
  final WPNetworkImageView imageView=(WPNetworkImageView)findViewById(R.id.image_photo);
  imageView.setImageUrl(imageUrl,ImageType.PHOTO_FULL,new ImageListener(){
    @Override public void onImageLoaded(    boolean succeeded){
      progress.setVisibility(View.GONE);
      if (succeeded) {
        createAttacher(imageView);
      }
 else {
        handleImageLoadFailure();
      }
    }
  }
);
}",0.8956916099773242
14636,"/** 
 * Loads the image for the view if it isn't already loaded.
 * @param isInLayoutPass True if this was invoked from a layout pass, false otherwise.
 */
private void loadImageIfNecessary(final boolean isInLayoutPass){
  if (mImageType == ImageType.NONE) {
    return;
  }
  int width=getWidth();
  int height=getHeight();
  boolean isFullyWrapContent=getLayoutParams() != null && getLayoutParams().height == LayoutParams.WRAP_CONTENT && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
  if (width == 0 && height == 0 && !isFullyWrapContent) {
    return;
  }
  if (TextUtils.isEmpty(mUrl)) {
    if (mImageContainer != null) {
      mImageContainer.cancelRequest();
      mImageContainer=null;
    }
    showErrorImage();
    return;
  }
  if (mImageContainer != null && mImageContainer.getRequestUrl() != null) {
    if (mImageContainer.getRequestUrl().equals(mUrl)) {
      return;
    }
 else {
      mImageContainer.cancelRequest();
      showDefaultImage();
    }
  }
  Point pt=DisplayUtils.getDisplayPixelSize(this.getContext());
  int maxSize=Math.max(pt.x,pt.y);
  ImageLoader.ImageContainer newContainer=WordPress.imageLoader.get(mUrl,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      if (mImageType == ImageType.MSHOT && mRetryCnt < MAX_RETRIES && VolleyUtils.statusCodeFromVolleyError(error) == 307) {
        mRetryCnt++;
        retry(isInLayoutPass);
      }
 else {
        showErrorImage();
        if (mImageListener != null) {
          mImageListener.onImageLoaded(false);
        }
      }
    }
    @Override public void onResponse(    final ImageLoader.ImageContainer response,    boolean isImmediate){
      if (isImmediate && isInLayoutPass) {
        post(new Runnable(){
          @Override public void run(){
            handleResponse(response,true,false);
          }
        }
);
      }
 else {
        handleResponse(response,isImmediate,true);
      }
    }
  }
,maxSize,maxSize);
  mImageContainer=newContainer;
}","/** 
 * Loads the image for the view if it isn't already loaded.
 * @param isInLayoutPass True if this was invoked from a layout pass, false otherwise.
 */
private void loadImageIfNecessary(final boolean isInLayoutPass){
  if (mImageType == ImageType.NONE) {
    return;
  }
  int width=getWidth();
  int height=getHeight();
  boolean isFullyWrapContent=getLayoutParams() != null && getLayoutParams().height == LayoutParams.WRAP_CONTENT && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
  if (width == 0 && height == 0 && !isFullyWrapContent) {
    return;
  }
  if (TextUtils.isEmpty(mUrl)) {
    if (mImageContainer != null) {
      mImageContainer.cancelRequest();
      mImageContainer=null;
    }
    showErrorImage();
    return;
  }
  if (mImageContainer != null && mImageContainer.getRequestUrl() != null) {
    if (mImageContainer.getRequestUrl().equals(mUrl)) {
      return;
    }
 else {
      mImageContainer.cancelRequest();
      showDefaultImage();
    }
  }
  Point pt=DisplayUtils.getDisplayPixelSize(this.getContext());
  int maxSize=Math.max(pt.x,pt.y);
  if (mImageType == ImageType.PHOTO || mImageType == ImageType.PHOTO_FULL) {
    AppLog.i(AppLog.T.READER,mUrl);
  }
  ImageLoader.ImageContainer newContainer=WordPress.imageLoader.get(mUrl,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      if (mImageType == ImageType.MSHOT && mRetryCnt < MAX_RETRIES && VolleyUtils.statusCodeFromVolleyError(error) == 307) {
        mRetryCnt++;
        retry(isInLayoutPass);
      }
 else {
        showErrorImage();
        if (mImageListener != null) {
          mImageListener.onImageLoaded(false);
        }
      }
    }
    @Override public void onResponse(    final ImageLoader.ImageContainer response,    boolean isImmediate){
      if (isImmediate && isInLayoutPass) {
        post(new Runnable(){
          @Override public void run(){
            handleResponse(response,true,false);
          }
        }
);
      }
 else {
        handleResponse(response,isImmediate,true);
      }
    }
  }
,maxSize,maxSize);
  mImageContainer=newContainer;
}",0.9717459550833132
14637,"private void showProgressFooter(){
  if (mProgressFooter != null || mProgressFooter.getVisibility() != View.VISIBLE) {
    mProgressFooter.setVisibility(View.VISIBLE);
  }
}","private void showProgressFooter(){
  if (mProgressFooter != null && mProgressFooter.getVisibility() != View.VISIBLE) {
    mProgressFooter.setVisibility(View.VISIBLE);
  }
}",0.9884393063583816
14638,"private void hideProgressFooter(){
  if (mProgressFooter != null || mProgressFooter.getVisibility() == View.VISIBLE) {
    mProgressFooter.setVisibility(View.INVISIBLE);
  }
}","private void hideProgressFooter(){
  if (mProgressFooter != null && mProgressFooter.getVisibility() == View.VISIBLE) {
    mProgressFooter.setVisibility(View.INVISIBLE);
  }
}",0.9885714285714284
14639,"private int indexOfBlogId(long blogId){
  for (int i=0; i < size(); i++) {
    if (this.get(i).blogId == blogId)     return i;
  }
  return -1;
}","private int indexOfBlogId(long blogId){
  for (int i=0; i < size(); i++) {
    if (this.get(i).blogId == blogId) {
      return i;
    }
  }
  return -1;
}",0.9666666666666668
14640,"private int indexOfFeedId(long feedId){
  for (int i=0; i < size(); i++) {
    if (this.get(i).feedId == feedId)     return i;
  }
  return -1;
}","private int indexOfFeedId(long feedId){
  for (int i=0; i < size(); i++) {
    if (this.get(i).feedId == feedId) {
      return i;
    }
  }
  return -1;
}",0.9666666666666668
14641,"private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mHasAlreadyUpdatedPost=savedInstanceState.getBoolean(ReaderConstants.KEY_ALREADY_UPDATED);
    mHasAlreadyRequestedPost=savedInstanceState.getBoolean(ReaderConstants.KEY_ALREADY_REQUESTED);
    if (savedInstanceState.getBoolean(KEY_SHOW_COMMENT_BOX)) {
      long replyToCommentId=savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID);
      showAddCommentBox(replyToCommentId);
    }
    mListState=savedInstanceState.getParcelable(ReaderConstants.KEY_LIST_STATE);
  }
}","private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mHasAlreadyUpdatedPost=savedInstanceState.getBoolean(ReaderConstants.KEY_ALREADY_UPDATED);
    mHasAlreadyRequestedPost=savedInstanceState.getBoolean(ReaderConstants.KEY_ALREADY_REQUESTED);
    if (savedInstanceState.getBoolean(KEY_SHOW_COMMENT_BOX)) {
      long replyToCommentId=savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID);
      showAddCommentBox(replyToCommentId);
    }
    if (savedInstanceState.containsKey(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)savedInstanceState.getSerializable(ReaderConstants.ARG_POST_LIST_TYPE);
    }
    mListState=savedInstanceState.getParcelable(ReaderConstants.KEY_LIST_STATE);
  }
}",0.8310387984981227
14642,"private boolean isBlogPreview(){
  return (mPostListType != null && mPostListType == ReaderTypes.ReaderPostListType.BLOG_PREVIEW);
}","private boolean isBlogPreview(){
  return (getPostListType() == ReaderTypes.ReaderPostListType.BLOG_PREVIEW);
}",0.8724279835390947
14643,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putLong(ReaderConstants.ARG_BLOG_ID,mBlogId);
  outState.putLong(ReaderConstants.ARG_POST_ID,mPostId);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_UPDATED,mHasAlreadyUpdatedPost);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_REQUESTED,mHasAlreadyRequestedPost);
  outState.putBoolean(KEY_SHOW_COMMENT_BOX,mIsAddCommentBoxShowing);
  if (mIsAddCommentBoxShowing) {
    outState.putLong(KEY_REPLY_TO_COMMENT_ID,mReplyToCommentId);
  }
  if (getListView() != null && getListView().getFirstVisiblePosition() > 0) {
    mListState=getListView().onSaveInstanceState();
    outState.putParcelable(ReaderConstants.KEY_LIST_STATE,mListState);
  }
 else {
    mListState=null;
  }
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putLong(ReaderConstants.ARG_BLOG_ID,mBlogId);
  outState.putLong(ReaderConstants.ARG_POST_ID,mPostId);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_UPDATED,mHasAlreadyUpdatedPost);
  outState.putBoolean(ReaderConstants.KEY_ALREADY_REQUESTED,mHasAlreadyRequestedPost);
  outState.putBoolean(KEY_SHOW_COMMENT_BOX,mIsAddCommentBoxShowing);
  outState.putSerializable(ReaderConstants.ARG_POST_LIST_TYPE,getPostListType());
  if (mIsAddCommentBoxShowing) {
    outState.putLong(KEY_REPLY_TO_COMMENT_ID,mReplyToCommentId);
  }
  if (getListView() != null && getListView().getFirstVisiblePosition() > 0) {
    mListState=getListView().onSaveInstanceState();
    outState.putParcelable(ReaderConstants.KEY_LIST_STATE,mListState);
  }
 else {
    mListState=null;
  }
}",0.9508393285371702
14644,"@Override public void run(){
  if (mReaderWebView.getVisibility() != View.VISIBLE)   AppLog.d(T.READER,""String_Node_Str"");
  showContent();
}","@Override public void run(){
  showContent();
}",0.5
14645,"@Override public void onStop(){
  super.onStop();
  if (mReaderWebView != null) {
    mReaderWebView.hideCustomView();
  }
}","@Override public void onStop(){
  super.onStop();
}",0.5828571428571429
14646,"private void showContentDelayed(){
  mHandler.postDelayed(new Runnable(){
    @Override public void run(){
      if (mReaderWebView.getVisibility() != View.VISIBLE)       AppLog.d(T.READER,""String_Node_Str"");
      showContent();
    }
  }
,1000L);
}","private void showContentDelayed(){
  mHandler.postDelayed(new Runnable(){
    @Override public void run(){
      showContent();
    }
  }
,1000L);
}",0.7437185929648241
14647,"void pauseWebView(){
  if (mReaderWebView != null) {
    mReaderWebView.onPause();
  }
}","void pauseWebView(){
  if (mReaderWebView != null) {
    if (mReaderWebView.isCustomViewShowing()) {
      mReaderWebView.hideCustomView();
    }
    mReaderWebView.onPause();
  }
 else {
    AppLog.i(T.READER,""String_Node_Str"");
  }
}",0.5386996904024768
14648,"@Override public void onCustomViewHidden(){
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.show();
  }
  pauseWebView();
}","@Override public void onCustomViewHidden(){
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.show();
  }
}",0.9379310344827586
14649,"@Override public void onCreate(Bundle savedInstanceState){
  if (isFullScreenSupported()) {
    getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_post_pager);
  getWindow().setBackgroundDrawable(null);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  final int position;
  final String title;
  final Serializable serializedList;
  if (savedInstanceState != null) {
    position=savedInstanceState.getInt(ARG_POSITION,0);
    title=savedInstanceState.getString(ARG_TITLE);
    serializedList=savedInstanceState.getSerializable(ARG_BLOG_POST_ID_LIST);
    if (savedInstanceState.containsKey(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)savedInstanceState.getSerializable(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
 else {
    position=getIntent().getIntExtra(ARG_POSITION,0);
    title=getIntent().getStringExtra(ARG_TITLE);
    serializedList=getIntent().getSerializableExtra(ARG_BLOG_POST_ID_LIST);
    if (getIntent().hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)getIntent().getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
  if (!TextUtils.isEmpty(title)) {
    this.setTitle(title);
  }
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mPageAdapter=new PostPagerAdapter(getSupportFragmentManager(),new ReaderBlogIdPostIdList(serializedList));
  mViewPager.setAdapter(mPageAdapter);
  if (mPageAdapter.isValidPosition(position)) {
    mViewPager.setCurrentItem(position);
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      super.onPageSelected(position);
      onRequestFullScreen(false);
    }
    @Override public void onPageScrollStateChanged(    int state){
      super.onPageScrollStateChanged(state);
      if (state == ViewPager.SCROLL_STATE_DRAGGING) {
        onRequestFullScreen(false);
      }
    }
  }
);
  if (savedInstanceState == null) {
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (!isFinishing()) {
          animateNavButtons(mViewPager.getCurrentItem());
        }
      }
    }
,750);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  if (isFullScreenSupported()) {
    getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_post_pager);
  getWindow().setBackgroundDrawable(null);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  final int position;
  final String title;
  final Serializable serializedList;
  if (savedInstanceState != null) {
    position=savedInstanceState.getInt(ARG_POSITION,0);
    title=savedInstanceState.getString(ARG_TITLE);
    serializedList=savedInstanceState.getSerializable(ARG_BLOG_POST_ID_LIST);
    if (savedInstanceState.containsKey(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)savedInstanceState.getSerializable(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
 else {
    position=getIntent().getIntExtra(ARG_POSITION,0);
    title=getIntent().getStringExtra(ARG_TITLE);
    serializedList=getIntent().getSerializableExtra(ARG_BLOG_POST_ID_LIST);
    if (getIntent().hasExtra(ReaderConstants.ARG_POST_LIST_TYPE)) {
      mPostListType=(ReaderPostListType)getIntent().getSerializableExtra(ReaderConstants.ARG_POST_LIST_TYPE);
    }
  }
  if (!TextUtils.isEmpty(title)) {
    this.setTitle(title);
  }
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mPageAdapter=new PostPagerAdapter(getSupportFragmentManager(),new ReaderBlogIdPostIdList(serializedList));
  mViewPager.setAdapter(mPageAdapter);
  if (mPageAdapter.isValidPosition(position)) {
    mViewPager.setCurrentItem(position);
  }
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      super.onPageSelected(position);
      onRequestFullScreen(false);
    }
    @Override public void onPageScrollStateChanged(    int state){
      super.onPageScrollStateChanged(state);
      if (state == ViewPager.SCROLL_STATE_DRAGGING) {
        onRequestFullScreen(false);
        ReaderPostDetailFragment fragment=getActiveDetailFragment();
        if (fragment != null) {
          fragment.pauseWebView();
        }
      }
    }
  }
);
  if (savedInstanceState == null) {
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (!isFinishing()) {
          animateNavButtons(mViewPager.getCurrentItem());
        }
      }
    }
,750);
  }
}",0.9702768729641694
14650,"@Override public Fragment getItem(int position){
  long blogId=mIdList.get(position).getBlogId();
  long postId=mIdList.get(position).getPostId();
  if (blogId == END_ID && postId == END_ID) {
    return PostPagerEndFragment.newInstance();
  }
 else {
    return ReaderPostDetailFragment.newInstance(blogId,postId,getPostListType());
  }
}","@Override public Fragment getItem(int position){
  long blogId=mIdList.get(position).getBlogId();
  long postId=mIdList.get(position).getPostId();
  Fragment fragment;
  if (blogId == END_ID && postId == END_ID) {
    fragment=PostPagerEndFragment.newInstance();
  }
 else {
    fragment=ReaderPostDetailFragment.newInstance(blogId,postId,getPostListType());
  }
  mFragmentMap.put(getItemKey(position),new WeakReference<Fragment>(fragment));
  return fragment;
}",0.8104738154613467
14651,"@Override public void onPageScrollStateChanged(int state){
  super.onPageScrollStateChanged(state);
  if (state == ViewPager.SCROLL_STATE_DRAGGING) {
    onRequestFullScreen(false);
  }
}","@Override public void onPageScrollStateChanged(int state){
  super.onPageScrollStateChanged(state);
  if (state == ViewPager.SCROLL_STATE_DRAGGING) {
    onRequestFullScreen(false);
    ReaderPostDetailFragment fragment=getActiveDetailFragment();
    if (fragment != null) {
      fragment.pauseWebView();
    }
  }
}",0.7420634920634921
14652,"void setCurrentTag(final String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  if (isCurrentTag(tagName) && hasPostAdapter() && tagName.equals(getPostAdapter().getCurrentTag())) {
    return;
  }
  mCurrentTag=tagName;
  if (getPostListType().equals(ReaderTypes.ReaderPostListType.TAG_FOLLOWED)) {
    UserPrefs.setReaderTag(tagName);
  }
  getPostAdapter().setCurrentTag(tagName);
  hideNewPostsBar();
  updateTagPreviewHeader();
  if (ReaderTagTable.shouldAutoUpdateTag(tagName)) {
    updatePostsWithTag(tagName,RequestDataAction.LOAD_NEWER,ReaderTypes.RefreshType.AUTOMATIC);
  }
}","void setCurrentTag(final String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  if (isCurrentTag(tagName) && hasPostAdapter() && tagName.equals(getPostAdapter().getCurrentTag())) {
    return;
  }
  mCurrentTag=tagName;
  if (getPostListType().equals(ReaderTypes.ReaderPostListType.TAG_FOLLOWED)) {
    UserPrefs.setReaderTag(tagName);
  }
  getPostAdapter().setCurrentTag(tagName);
  hideNewPostsBar();
  updateTagPreviewHeader();
  hideLoadingProgress();
  if (ReaderTagTable.shouldAutoUpdateTag(tagName)) {
    updatePostsWithTag(tagName,RequestDataAction.LOAD_NEWER,ReaderTypes.RefreshType.AUTOMATIC);
  }
}",0.9796582587469488
14653,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == WPComLoginActivity.REQUEST_CODE) {
    mResultCode=resultCode;
    if (resultCode == RESULT_OK && !WordPress.getCurrentBlog().isDotcomFlag()) {
      if (getBlogId() == null) {
        final Blog currentBlog=WordPress.getCurrentBlog();
        XMLRPCClientInterface xmlrpcClient=XMLRPCFactory.instantiate(currentBlog.getUri(),""String_Node_Str"",""String_Node_Str"");
        Map<String,String> args=ApiHelper.blogOptionsXMLRPCParameters;
        Object[] params={currentBlog.getRemoteBlogId(),currentBlog.getUsername(),currentBlog.getPassword(),args};
        xmlrpcClient.callAsync(new XMLRPCCallback(){
          @Override public void onSuccess(          long id,          Object result){
            if (result != null && (result instanceof HashMap)) {
              Map<?,?> blogOptions=(HashMap<?,?>)result;
              ApiHelper.updateBlogOptions(currentBlog,blogOptions);
              AnalyticsTracker.track(AnalyticsTracker.Stat.SIGNED_INTO_JETPACK);
              AnalyticsTracker.track(AnalyticsTracker.Stat.PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN);
              if (!isFinishing()) {
                mPullToRefreshHelper.setRefreshing(true);
                refreshStats();
              }
            }
          }
          @Override public void onFailure(          long id,          Exception error){
            AppLog.e(T.STATS,""String_Node_Str"" + ""String_Node_Str"",error);
          }
        }
,""String_Node_Str"",params);
      }
      mPullToRefreshHelper.setRefreshing(true);
      refreshStats();
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == WPComLoginActivity.REQUEST_CODE) {
    mResultCode=resultCode;
    if (resultCode == RESULT_OK && !WordPress.getCurrentBlog().isDotcomFlag()) {
      if (getBlogId() == null) {
        final Handler handler=new Handler();
        final Blog currentBlog=WordPress.getCurrentBlog();
        XMLRPCClientInterface xmlrpcClient=XMLRPCFactory.instantiate(currentBlog.getUri(),""String_Node_Str"",""String_Node_Str"");
        Map<String,String> args=ApiHelper.blogOptionsXMLRPCParameters;
        Object[] params={currentBlog.getRemoteBlogId(),currentBlog.getUsername(),currentBlog.getPassword(),args};
        xmlrpcClient.callAsync(new XMLRPCCallback(){
          @Override public void onSuccess(          long id,          Object result){
            if (result != null && (result instanceof HashMap)) {
              Map<?,?> blogOptions=(HashMap<?,?>)result;
              ApiHelper.updateBlogOptions(currentBlog,blogOptions);
              AnalyticsTracker.track(AnalyticsTracker.Stat.SIGNED_INTO_JETPACK);
              AnalyticsTracker.track(AnalyticsTracker.Stat.PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN);
              if (!isFinishing()) {
                mPullToRefreshHelper.setRefreshing(true);
                refreshStats();
              }
            }
          }
          @Override public void onFailure(          long id,          Exception error){
            AppLog.e(T.STATS,""String_Node_Str"" + ""String_Node_Str"",error);
            handler.post(new Runnable(){
              @Override public void run(){
                mPullToRefreshHelper.setRefreshing(false);
                ToastUtils.showToast(StatsActivity.this,StatsActivity.this.getString(R.string.error_refresh_stats),Duration.LONG);
              }
            }
);
          }
        }
,""String_Node_Str"",params);
      }
 else {
        refreshStats();
      }
      mPullToRefreshHelper.setRefreshing(true);
    }
  }
}",0.8900106269925611
14654,"private void refreshStats(){
  if (WordPress.getCurrentBlog() == null) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(this)) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (mIsUpdatingStats) {
    mPullToRefreshHelper.setRefreshing(false);
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  final String blogId;
  if (WordPress.getCurrentBlog().isDotcomFlag() && dotComCredentialsMatch()) {
    blogId=String.valueOf(WordPress.getCurrentBlog().getRemoteBlogId());
  }
 else {
    blogId=getBlogId();
    if (blogId == null) {
      new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new VerifyJetpackSettingsCallback(StatsActivity.this)).execute(false);
      return;
    }
  }
  Intent intent=new Intent(this,StatsService.class);
  intent.putExtra(StatsService.ARG_BLOG_ID,blogId);
  startService(intent);
}","private void refreshStats(){
  if (WordPress.getCurrentBlog() == null) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(this)) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (mIsUpdatingStats) {
    mPullToRefreshHelper.setRefreshing(false);
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  final Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog == null) {
    mPullToRefreshHelper.setRefreshing(false);
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  final String blogId=getBlogId();
  if (blogId != null) {
    if (!WordPress.getCurrentBlog().isDotcomFlag() && !WordPress.getCurrentBlog().hasValidJetpackCredentials() && mResultCode != RESULT_CANCELED) {
      if (WordPress.hasValidWPComCredentials(this)) {
        SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
        String username=settings.getString(WordPress.WPCOM_USERNAME_PREFERENCE,null);
        String password=WordPressDB.decryptPassword(settings.getString(WordPress.WPCOM_PASSWORD_PREFERENCE,null));
        WordPress.getCurrentBlog().setDotcom_username(username);
        WordPress.getCurrentBlog().setDotcom_password(password);
        WordPress.wpDB.saveBlog(WordPress.getCurrentBlog());
        mPullToRefreshHelper.setRefreshing(true);
      }
 else {
        startWPComLoginActivity();
        return;
      }
    }
  }
 else {
    if (!currentBlog.isDotcomFlag()) {
      new ApiHelper.RefreshBlogContentTask(this,currentBlog,new VerifyJetpackSettingsCallback(StatsActivity.this)).execute(false);
    }
 else {
      Toast.makeText(this,R.string.error_refresh_stats,Toast.LENGTH_LONG).show();
      AppLog.e(T.STATS,""String_Node_Str"" + currentBlog.getHomeURL());
    }
    return;
  }
  if (!currentBlog.isDotcomFlag() && !currentBlog.hasValidJetpackCredentials() && !WordPress.hasValidWPComCredentials(this)) {
    mPullToRefreshHelper.setRefreshing(false);
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  Intent intent=new Intent(this,StatsService.class);
  intent.putExtra(StatsService.ARG_BLOG_ID,blogId);
  startService(intent);
}",0.4454545454545454
14655,"String getBlogId(){
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog.isDotcomFlag() && !dotComCredentialsMatch()) {
    return String.valueOf(currentBlog.getRemoteBlogId());
  }
  return currentBlog.getApi_blogid();
}","/** 
 * Return the remote blogId as stored on the wpcom backend. <p> blogId is always available for dotcom blogs. It could be null on Jetpack blogs with blogOptions still empty or when the option 'jetpack_client_id' is not available in blogOptions. </p>
 * @return String  blogId or null
 */
String getBlogId(){
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog.isDotcomFlag()) {
    return String.valueOf(currentBlog.getRemoteBlogId());
  }
 else {
    return currentBlog.getApi_blogid();
  }
}",0.5491251682368775
14656,"@Override protected void onResume(){
  super.onResume();
  mPullToRefreshHelper.registerReceiver(this);
  mIsInFront=true;
  LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(this);
  lbm.registerReceiver(mReceiver,new IntentFilter(StatsService.ACTION_STATS_UPDATING));
  if (WordPress.getCurrentBlog() != null && !WordPress.getCurrentBlog().isDotcomFlag() && !WordPress.getCurrentBlog().hasValidJetpackCredentials() && mResultCode != RESULT_CANCELED) {
    if (WordPress.hasValidWPComCredentials(this)) {
      SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
      String username=settings.getString(WordPress.WPCOM_USERNAME_PREFERENCE,null);
      String password=WordPressDB.decryptPassword(settings.getString(WordPress.WPCOM_PASSWORD_PREFERENCE,null));
      WordPress.getCurrentBlog().setDotcom_username(username);
      WordPress.getCurrentBlog().setDotcom_password(password);
      WordPress.wpDB.saveBlog(WordPress.getCurrentBlog());
      mPullToRefreshHelper.setRefreshing(true);
      refreshStats();
    }
 else {
      startWPComLoginActivity();
    }
    return;
  }
  if (!mIsRestoredFromState) {
    mPullToRefreshHelper.setRefreshing(true);
    refreshStats();
  }
}","@Override protected void onResume(){
  super.onResume();
  mPullToRefreshHelper.registerReceiver(this);
  mIsInFront=true;
  LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(this);
  lbm.registerReceiver(mReceiver,new IntentFilter(StatsService.ACTION_STATS_UPDATING));
  if (!mIsRestoredFromState) {
    mPullToRefreshHelper.setRefreshing(true);
    refreshStats();
  }
}",0.3646546359676416
14657,"public void addSuperPropertyToFlag(String superPropertyToFlag){
  if (!mSuperPropertiesToFlag.contains(superPropertyToFlag)) {
    mSuperPropertiesToFlag.add(superPropertyToFlag);
  }
}","public void addSuperPropertyToFlag(String superPropertyToFlag){
  if (mSuperPropertiesToFlag == null) {
    mSuperPropertiesToFlag=new ArrayList<String>();
  }
  if (!mSuperPropertiesToFlag.contains(superPropertyToFlag)) {
    mSuperPropertiesToFlag.add(superPropertyToFlag);
  }
}",0.7939914163090128
14658,"@Override protected void onPostExecute(Boolean result){
  mIsPostTaskRunning=false;
  if (!hasActivity()) {
    return;
  }
  if (!result) {
    if (!mHasAlreadyRequestedPost) {
      mHasAlreadyRequestedPost=true;
      requestPost();
    }
    return;
  }
  final String postTitle=mPost.hasTitle() ? mPost.getTitle() : getString(R.string.reader_untitled_post);
  if (hostIsReaderActivity()) {
    getActivity().setTitle(postTitle);
  }
  txtTitle.setText(postTitle);
  txtDate.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()));
  ReaderUtils.showFollowStatus(txtFollow,mPost.isFollowedByCurrentUser);
  txtFollow.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      togglePostFollowed(mPost,txtFollow);
    }
  }
);
  if (mPost.numLikes > 0 && mLayoutLikes.getVisibility() == View.GONE)   mLayoutLikes.setVisibility(View.INVISIBLE);
  if (mPost.hasBlogName()) {
    txtBlogName.setText(mPost.getBlogName());
    txtBlogName.setVisibility(View.VISIBLE);
  }
 else {
    txtBlogName.setVisibility(View.GONE);
  }
  if (mPost.hasAuthorName() && !mPost.getAuthorName().equals(mPost.getBlogName())) {
    txtAuthorName.setText(mPost.getAuthorName());
    txtAuthorName.setVisibility(View.VISIBLE);
  }
 else {
    txtAuthorName.setVisibility(View.GONE);
  }
  if (mPost.hasPostAvatar()) {
    int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_medium);
    imgAvatar.setImageUrl(mPost.getPostAvatarForDisplay(avatarSz),WPNetworkImageView.ImageType.AVATAR);
    imgAvatar.setVisibility(View.VISIBLE);
  }
 else {
    imgAvatar.setVisibility(View.GONE);
  }
  if (showFeaturedImage) {
    imgFeatured.setVisibility(View.VISIBLE);
    imgFeatured.setImageUrl(featuredImageUrl,WPNetworkImageView.ImageType.PHOTO);
    imgFeatured.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPhotoViewer(mPost.getFeaturedImage());
      }
    }
);
  }
 else {
    imgFeatured.setVisibility(View.GONE);
  }
  imgBtnReblog.setVisibility(mPost.isWP() ? View.VISIBLE : View.GONE);
  imgBtnReblog.setSelected(mPost.isRebloggedByCurrentUser);
  if (mPost.isWP()) {
    imgBtnReblog.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        doPostReblog(imgBtnReblog,mPost);
      }
    }
);
  }
  if (mPost.isWP() && mPost.isCommentsOpen) {
    imgBtnComment.setVisibility(View.VISIBLE);
    imgBtnComment.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleShowAddCommentBox();
      }
    }
);
  }
 else {
    imgBtnComment.setVisibility(View.GONE);
  }
  txtTitle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ReaderActivityLauncher.openUrl(getActivity(),mPost.getUrl());
    }
  }
);
  mWebView.getSettings().setJavaScriptEnabled(hasEmbedsOrIframes());
  mWebView.loadDataWithBaseURL(null,postHtml,""String_Node_Str"",""String_Node_Str"",null);
  if (mPost.isWP() && mLayoutIcons.getVisibility() != View.VISIBLE)   animateIconBar(true);
  if (getListView().getAdapter() == null) {
    getListView().setAdapter(getCommentAdapter());
  }
  if (getListView().getVisibility() != View.VISIBLE) {
    getListView().setVisibility(View.VISIBLE);
  }
  if (mWebView.getVisibility() == View.VISIBLE) {
    showContent();
  }
 else {
    showContentDelayed();
  }
}","@Override protected void onPostExecute(Boolean result){
  mIsPostTaskRunning=false;
  if (!hasActivity()) {
    return;
  }
  if (!result) {
    if (!mHasAlreadyRequestedPost) {
      mHasAlreadyRequestedPost=true;
      requestPost();
    }
    return;
  }
  final String postTitle=mPost.hasTitle() ? mPost.getTitle() : getString(R.string.reader_untitled_post);
  if (hostIsReaderActivity()) {
    getActivity().setTitle(postTitle);
  }
  txtTitle.setText(postTitle);
  txtDate.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()));
  ReaderUtils.showFollowStatus(txtFollow,mPost.isFollowedByCurrentUser);
  txtFollow.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      togglePostFollowed(mPost,txtFollow);
    }
  }
);
  if (mPost.numLikes > 0 && mLayoutLikes.getVisibility() == View.GONE)   mLayoutLikes.setVisibility(View.INVISIBLE);
  if (mPost.hasBlogName()) {
    txtBlogName.setText(mPost.getBlogName());
    txtBlogName.setVisibility(View.VISIBLE);
  }
 else {
    txtBlogName.setVisibility(View.GONE);
  }
  if (mPost.hasAuthorName() && !mPost.getAuthorName().equals(mPost.getBlogName())) {
    txtAuthorName.setText(mPost.getAuthorName());
    txtAuthorName.setVisibility(View.VISIBLE);
  }
 else {
    txtAuthorName.setVisibility(View.GONE);
  }
  if (mPost.hasPostAvatar()) {
    int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_medium);
    imgAvatar.setImageUrl(mPost.getPostAvatarForDisplay(avatarSz),WPNetworkImageView.ImageType.AVATAR);
    imgAvatar.setVisibility(View.VISIBLE);
  }
 else {
    imgAvatar.setVisibility(View.GONE);
  }
  if (showFeaturedImage) {
    imgFeatured.setVisibility(View.VISIBLE);
    imgFeatured.setImageUrl(featuredImageUrl,WPNetworkImageView.ImageType.PHOTO);
    imgFeatured.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPhotoViewer(mPost.getFeaturedImage());
      }
    }
);
  }
 else {
    imgFeatured.setVisibility(View.GONE);
  }
  imgBtnReblog.setVisibility(mPost.isWP() ? View.VISIBLE : View.GONE);
  imgBtnReblog.setSelected(mPost.isRebloggedByCurrentUser);
  if (mPost.isWP()) {
    imgBtnReblog.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        doPostReblog(imgBtnReblog,mPost);
      }
    }
);
  }
  if (mPost.isWP() && mPost.isCommentsOpen) {
    imgBtnComment.setVisibility(View.VISIBLE);
    imgBtnComment.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleShowAddCommentBox();
      }
    }
);
  }
 else {
    imgBtnComment.setVisibility(View.GONE);
  }
  txtTitle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ReaderActivityLauncher.openUrl(getActivity(),mPost.getUrl());
    }
  }
);
  mLayoutIcons.setVisibility(mPost.isExternal ? View.GONE : View.VISIBLE);
  mWebView.getSettings().setJavaScriptEnabled(hasEmbedsOrIframes());
  mWebView.loadDataWithBaseURL(null,postHtml,""String_Node_Str"",""String_Node_Str"",null);
  if (mPost.isWP() && mLayoutIcons.getVisibility() != View.VISIBLE)   animateIconBar(true);
  if (getListView().getAdapter() == null) {
    getListView().setAdapter(getCommentAdapter());
  }
  if (getListView().getVisibility() != View.VISIBLE) {
    getListView().setVisibility(View.VISIBLE);
  }
  if (mWebView.getVisibility() == View.VISIBLE) {
    showContent();
  }
 else {
    showContentDelayed();
  }
}",0.9892132892276716
14659,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.reader_fragment_post_detail,container,false);
  mListView=(WPListView)view.findViewById(android.R.id.list);
  if (isFullScreenSupported()) {
    mListView.setOnScrollDirectionListener(this);
    ReaderUtils.addListViewHeader(mListView,DisplayUtils.getActionBarHeight(container.getContext()));
  }
  ViewGroup headerDetail=(ViewGroup)inflater.inflate(R.layout.reader_listitem_post_detail,mListView,false);
  mListView.addHeaderView(headerDetail,null,false);
  mCommentFooter=(ViewGroup)inflater.inflate(R.layout.reader_footer_progress,mListView,false);
  mCommentFooter.setVisibility(View.GONE);
  mCommentFooter.setBackgroundColor(getResources().getColor(R.color.grey_extra_light));
  mProgressFooter=(ProgressBar)mCommentFooter.findViewById(R.id.progress_footer);
  mProgressFooter.setVisibility(View.INVISIBLE);
  mListView.addFooterView(mCommentFooter);
  mLayoutIcons=(ViewGroup)view.findViewById(R.id.layout_actions);
  mLayoutLikes=(ViewGroup)view.findViewById(R.id.layout_likes);
  mWebView=(WebView)view.findViewById(R.id.webView);
  mWebView.setWebViewClient(readerWebViewClient);
  mWebView.getSettings().setUserAgentString(WordPress.getUserAgent());
  mListView.setVisibility(View.INVISIBLE);
  mWebView.setVisibility(View.INVISIBLE);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        HitTestResult hr=((WebView)v).getHitTestResult();
        if (hr != null && (hr.getType() == HitTestResult.IMAGE_TYPE || hr.getType() == HitTestResult.SRC_IMAGE_ANCHOR_TYPE)) {
          String imageUrl=hr.getExtra();
          if (imageUrl == null)           return false;
          if (imageUrl.startsWith(""String_Node_Str""))           return false;
          showPhotoViewer(imageUrl);
          return true;
        }
      }
      return false;
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.reader_fragment_post_detail,container,false);
  mListView=(WPListView)view.findViewById(android.R.id.list);
  if (isFullScreenSupported()) {
    mListView.setOnScrollDirectionListener(this);
    ReaderUtils.addListViewHeader(mListView,DisplayUtils.getActionBarHeight(container.getContext()));
  }
  ViewGroup headerDetail=(ViewGroup)inflater.inflate(R.layout.reader_listitem_post_detail,mListView,false);
  mListView.addHeaderView(headerDetail,null,false);
  mCommentFooter=(ViewGroup)inflater.inflate(R.layout.reader_footer_progress,mListView,false);
  mCommentFooter.setVisibility(View.GONE);
  mCommentFooter.setBackgroundColor(getResources().getColor(R.color.grey_extra_light));
  mProgressFooter=(ProgressBar)mCommentFooter.findViewById(R.id.progress_footer);
  mProgressFooter.setVisibility(View.INVISIBLE);
  mListView.addFooterView(mCommentFooter);
  mLayoutIcons=(ViewGroup)view.findViewById(R.id.layout_actions);
  mLayoutLikes=(ViewGroup)view.findViewById(R.id.layout_likes);
  mWebView=(WebView)view.findViewById(R.id.webView);
  mWebView.setWebViewClient(readerWebViewClient);
  mWebView.getSettings().setUserAgentString(WordPress.getUserAgent());
  mListView.setVisibility(View.INVISIBLE);
  mWebView.setVisibility(View.INVISIBLE);
  mLayoutIcons.setVisibility(View.INVISIBLE);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        HitTestResult hr=((WebView)v).getHitTestResult();
        if (hr != null && (hr.getType() == HitTestResult.IMAGE_TYPE || hr.getType() == HitTestResult.SRC_IMAGE_ANCHOR_TYPE)) {
          String imageUrl=hr.getExtra();
          if (imageUrl == null)           return false;
          if (imageUrl.startsWith(""String_Node_Str""))           return false;
          showPhotoViewer(imageUrl);
          return true;
        }
      }
      return false;
    }
  }
);
  return view;
}",0.9889582333173308
14660,"private void loadMshotImage(final ReaderBlogInfo blogInfo){
  if (blogInfo == null || !blogInfo.hasUrl()) {
    hideProgress();
    return;
  }
  if (blogInfo.isPrivate) {
    hideProgress();
    mImageMshot.setImageType(WPNetworkImageView.ImageType.MSHOT);
    mImageMshot.showErrorImage();
    return;
  }
  WPNetworkImageView.ImageListener imageListener=new WPNetworkImageView.ImageListener(){
    @Override public void onImageLoaded(    boolean succeeded){
      hideProgress();
    }
  }
;
  final String imageUrl=blogInfo.getMshotsUrl(mMshotWidth);
  mImageMshot.setImageUrl(imageUrl,WPNetworkImageView.ImageType.MSHOT,imageListener);
}","private void loadMshotImage(final ReaderBlogInfo blogInfo){
  if (blogInfo == null || !blogInfo.hasUrl()) {
    hideProgress();
    return;
  }
  if (blogInfo.isPrivate) {
    hideProgress();
    mImageMshot.setScaleType(ImageView.ScaleType.CENTER);
    mImageMshot.setImageResource(R.drawable.dashicon_lock);
    return;
  }
  WPNetworkImageView.ImageListener imageListener=new WPNetworkImageView.ImageListener(){
    @Override public void onImageLoaded(    boolean succeeded){
      hideProgress();
    }
  }
;
  final String imageUrl=blogInfo.getMshotsUrl(mMshotWidth);
  mImageMshot.setImageUrl(imageUrl,WPNetworkImageView.ImageType.MSHOT,imageListener);
}",0.901689708141321
14661,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  boolean hasTransparentActionBar=isFullScreenSupported();
  mListView=(WPListView)rootView.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)rootView.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (hasTransparentActionBar) {
    View actionBarSpacer=rootView.findViewById(R.id.view_actionbar_spacer);
    actionBarSpacer.setVisibility(View.VISIBLE);
  }
switch (getPostListType()) {
case TAG_FOLLOWED:
    ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,R.id.view_actionbar_spacer);
  break;
case TAG_PREVIEW:
mTagInfoView=(ViewGroup)inflater.inflate(R.layout.reader_tag_info_view,container,false);
rootView.addView(mTagInfoView);
ReaderUtils.layoutBelow(rootView,mTagInfoView.getId(),R.id.view_actionbar_spacer);
ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,mTagInfoView.getId());
break;
case BLOG_PREVIEW:
ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,R.id.view_actionbar_spacer);
mBlogInfoView=new ReaderBlogInfoView(container.getContext());
rootView.addView(mBlogInfoView);
mBlogInfoView.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT));
ReaderUtils.layoutBelow(rootView,mBlogInfoView.getId(),R.id.view_actionbar_spacer);
mMshotSpacerView=ReaderUtils.addListViewHeader(mListView,mBlogInfoView.getMshotHeight());
mBlogInfoView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
@Override public void onGlobalLayout(){
mBlogInfoView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
checkBlogInfoSize();
}
}
);
mBlogInfoView.bringToFront();
break;
}
mEmptyView=rootView.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)rootView.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)rootView.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}
);
return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  boolean hasTransparentActionBar=isFullScreenSupported();
  mListView=(WPListView)rootView.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)rootView.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (hasTransparentActionBar) {
    View actionBarSpacer=rootView.findViewById(R.id.view_actionbar_spacer);
    actionBarSpacer.setVisibility(View.VISIBLE);
  }
switch (getPostListType()) {
case TAG_FOLLOWED:
    ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,R.id.view_actionbar_spacer);
  break;
case TAG_PREVIEW:
mTagInfoView=(ViewGroup)inflater.inflate(R.layout.reader_tag_info_view,container,false);
rootView.addView(mTagInfoView);
ReaderUtils.layoutBelow(rootView,mTagInfoView.getId(),R.id.view_actionbar_spacer);
ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,mTagInfoView.getId());
break;
case BLOG_PREVIEW:
ReaderUtils.layoutBelow(rootView,R.id.ptr_layout,R.id.view_actionbar_spacer);
mBlogInfoView=new ReaderBlogInfoView(container.getContext());
rootView.addView(mBlogInfoView);
mBlogInfoView.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT));
ReaderUtils.layoutBelow(rootView,mBlogInfoView.getId(),R.id.view_actionbar_spacer);
mMshotSpacerView=ReaderUtils.addListViewHeader(mListView,mBlogInfoView.getMshotHeight());
mMshotSpacerView.setTag(MSHOT_SPACER_TAG);
mBlogInfoView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
@Override public void onGlobalLayout(){
mBlogInfoView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
checkBlogInfoSize();
}
}
);
mBlogInfoView.bringToFront();
break;
}
mEmptyView=rootView.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)rootView.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)rootView.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}
);
return rootView;
}",0.9933897002305918
14662,"private void repositionBlogInfoView(){
  int scrollPos=mListView.getVerticalScrollOffset();
  if (mBlogInfoView == null || scrollPos == mLastPostListScrollPos) {
    return;
  }
  mBlogInfoView.scaleMshotImageBasedOnScrollPos(scrollPos);
  final int mshotBottom;
  if (mMshotSpacerView.getHeight() > 0) {
    mshotBottom=Math.max(0,mMshotSpacerView.getTop() + mBlogInfoView.getMshotHeight());
  }
 else {
    mshotBottom=0;
  }
  mBlogInfoView.moveInfoContainer(mshotBottom);
  mLastPostListScrollPos=scrollPos;
}","private void repositionBlogInfoView(){
  int scrollPos=mListView.getVerticalScrollOffset();
  if (mBlogInfoView == null || scrollPos == mLastPostListScrollPos) {
    return;
  }
  mBlogInfoView.scaleMshotImageBasedOnScrollPos(scrollPos);
  View firstChild=mListView.getChildAt(0);
  boolean isSpacer=(firstChild != null && MSHOT_SPACER_TAG.equals(firstChild.getTag()));
  final int infoTop;
  if (isSpacer) {
    infoTop=Math.max(0,firstChild.getTop() + mBlogInfoView.getMshotHeight());
  }
 else {
    infoTop=0;
  }
  mBlogInfoView.moveInfoContainer(infoTop);
  mLastPostListScrollPos=scrollPos;
}",0.5089928057553957
14663,"public void showErrorImage(){
switch (mImageType) {
case NONE:
    break;
case PHOTO_FULL:
  setImageDrawable(null);
break;
case AVATAR:
setImageResource(R.drawable.placeholder);
break;
case MSHOT:
setScaleType(ImageView.ScaleType.CENTER);
setImageResource(R.drawable.ic_error);
break;
default :
setImageDrawable(new ColorDrawable(getColorRes(R.color.grey_medium)));
break;
}
}","public void showErrorImage(){
switch (mImageType) {
case NONE:
    break;
case PHOTO_FULL:
  setImageDrawable(null);
break;
case AVATAR:
setImageResource(R.drawable.placeholder);
break;
default :
setImageDrawable(new ColorDrawable(getColorRes(R.color.grey_medium)));
break;
}
}",0.8470948012232415
14664,"private void showBlogInfo(final ReaderBlogInfo blogInfo){
  final TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  final TextView txtDescription=(TextView)findViewById(R.id.text_blog_description);
  final TextView txtFollowCnt=(TextView)findViewById(R.id.text_follow_count);
  final TextView txtFollowBtn=(TextView)findViewById(R.id.text_follow_blog);
  if ((blogInfo != null && !blogInfo.isIncomplete())) {
    mInfoContainerView.setVisibility(View.VISIBLE);
    if (blogInfo.hasName()) {
      txtBlogName.setText(blogInfo.getName());
      txtBlogName.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderActivityLauncher.openUrl(getContext(),blogInfo.getUrl());
        }
      }
);
    }
    if (blogInfo.hasDescription()) {
      txtDescription.setText(blogInfo.getDescription());
      txtDescription.setVisibility(View.VISIBLE);
    }
 else {
      txtDescription.setVisibility(View.GONE);
    }
    if (blogInfo.numSubscribers > 0) {
      String numFollowers=getResources().getString(R.string.reader_label_followers,FormatUtils.formatInt(blogInfo.numSubscribers));
      txtFollowCnt.setText(numFollowers);
      txtFollowCnt.setVisibility(View.VISIBLE);
    }
 else {
      txtFollowCnt.setVisibility(View.INVISIBLE);
    }
    ReaderUtils.showFollowStatus(txtFollowBtn,blogInfo.isFollowing);
    txtFollowBtn.setVisibility(View.VISIBLE);
    txtFollowBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleBlogFollowStatus(txtFollowBtn,blogInfo);
      }
    }
);
    if (!mHasLoadedMshot) {
      loadMshotImage(blogInfo);
    }
  }
 else {
    mInfoContainerView.setVisibility(View.INVISIBLE);
  }
}","private void showBlogInfo(final ReaderBlogInfo blogInfo){
  final TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  final TextView txtDescription=(TextView)findViewById(R.id.text_blog_description);
  final TextView txtFollowCnt=(TextView)findViewById(R.id.text_follow_count);
  final TextView txtFollowBtn=(TextView)findViewById(R.id.text_follow_blog);
  if (blogInfo != null) {
    mHasLoadedInfo=true;
  }
  if ((blogInfo != null && !blogInfo.isIncomplete())) {
    mInfoContainerView.setVisibility(View.VISIBLE);
    if (blogInfo.hasName()) {
      txtBlogName.setText(blogInfo.getName());
      txtBlogName.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderActivityLauncher.openUrl(getContext(),blogInfo.getUrl());
        }
      }
);
    }
    if (blogInfo.hasDescription()) {
      txtDescription.setText(blogInfo.getDescription());
      txtDescription.setVisibility(View.VISIBLE);
    }
 else {
      txtDescription.setVisibility(View.GONE);
    }
    if (blogInfo.numSubscribers > 0) {
      String numFollowers=getResources().getString(R.string.reader_label_followers,FormatUtils.formatInt(blogInfo.numSubscribers));
      txtFollowCnt.setText(numFollowers);
      txtFollowCnt.setVisibility(View.VISIBLE);
    }
 else {
      txtFollowCnt.setVisibility(View.INVISIBLE);
    }
    ReaderUtils.showFollowStatus(txtFollowBtn,blogInfo.isFollowing);
    txtFollowBtn.setVisibility(View.VISIBLE);
    txtFollowBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleBlogFollowStatus(txtFollowBtn,blogInfo);
      }
    }
);
    if (!mHasLoadedMshot) {
      loadMshotImage(blogInfo);
    }
  }
 else {
    mInfoContainerView.setVisibility(View.INVISIBLE);
  }
}",0.9845981517782134
14665,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final Context context=container.getContext();
  final ViewGroup view=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  boolean hasTransparentActionBar=isFullScreenSupported();
  mActionBarHeight=DisplayUtils.getActionBarHeight(context);
  mListView=(WPListView)view.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (hasTransparentActionBar) {
    ReaderUtils.setTopMargin(mNewPostsBar,mActionBarHeight);
  }
switch (getPostListType()) {
case TAG_FOLLOWED:
    if (hasTransparentActionBar) {
      ReaderUtils.addListViewHeader(mListView,mActionBarHeight);
    }
  break;
case TAG_PREVIEW:
final ViewGroup previewContainer=(ViewGroup)view.findViewById(R.id.layout_preview_container);
if (hasTransparentActionBar) {
ReaderUtils.setTopMargin(previewContainer,mActionBarHeight);
}
mTagInfoView=(ViewGroup)inflater.inflate(R.layout.reader_tag_preview_header,container,false);
previewContainer.addView(mTagInfoView);
previewContainer.setVisibility(View.VISIBLE);
break;
case BLOG_PREVIEW:
mBlogInfoView=new ReaderBlogInfoHeader(context);
if (hasTransparentActionBar) {
ReaderUtils.setTopMargin(mBlogInfoView,mActionBarHeight);
}
view.addView(mBlogInfoView);
mBlogInfoView.bringToFront();
mListView.setHeaderDividersEnabled(false);
mMshotSpacerView=ReaderUtils.addListViewHeader(mListView,mBlogInfoView.getMshotDefaultHeight());
mBlogInfoView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
@Override public void onGlobalLayout(){
mBlogInfoView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
mMshotSpacerView.getLayoutParams().height=mBlogInfoView.getMshotDefaultHeight() + mBlogInfoView.getInfoContainerHeight();
repositionBlogInfoView();
}
}
);
mListView.setOnScrollChangedListener(this);
break;
}
mEmptyView=view.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}
);
return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final Context context=container.getContext();
  final ViewGroup view=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  boolean hasTransparentActionBar=isFullScreenSupported();
  mActionBarHeight=DisplayUtils.getActionBarHeight(context);
  mListView=(WPListView)view.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (hasTransparentActionBar) {
    ReaderUtils.setTopMargin(mNewPostsBar,mActionBarHeight);
  }
switch (getPostListType()) {
case TAG_FOLLOWED:
    if (hasTransparentActionBar) {
      ReaderUtils.addListViewHeader(mListView,mActionBarHeight);
    }
  break;
case TAG_PREVIEW:
final ViewGroup previewContainer=(ViewGroup)view.findViewById(R.id.layout_preview_container);
if (hasTransparentActionBar) {
ReaderUtils.setTopMargin(previewContainer,mActionBarHeight);
}
mTagInfoView=(ViewGroup)inflater.inflate(R.layout.reader_tag_preview_header,container,false);
previewContainer.addView(mTagInfoView);
previewContainer.setVisibility(View.VISIBLE);
break;
case BLOG_PREVIEW:
mBlogInfoView=new ReaderBlogInfoHeader(context);
if (hasTransparentActionBar) {
ReaderUtils.setTopMargin(mBlogInfoView,mActionBarHeight);
}
view.addView(mBlogInfoView);
mListView.setHeaderDividersEnabled(false);
mMshotSpacerView=ReaderUtils.addListViewHeader(mListView,mBlogInfoView.getMshotDefaultHeight());
mBlogInfoView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
@Override public void onGlobalLayout(){
mBlogInfoView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
mMshotSpacerView.getLayoutParams().height=mBlogInfoView.getMshotDefaultHeight() + mBlogInfoView.getInfoContainerHeight();
}
}
);
mBlogInfoView.bringToFront();
mListView.setOnScrollChangedListener(this);
break;
}
mEmptyView=view.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}
);
return view;
}",0.98951153730896
14666,"private void repositionBlogInfoView(){
  if (mBlogInfoView == null) {
    return;
  }
  int scrollPos=mListView.getVerticalScrollOffset();
  mBlogInfoView.scaleMshotImageBasedOnScrollPos(scrollPos);
  int mshotBottom=mMshotSpacerView.getTop() + mBlogInfoView.getMshotDefaultHeight();
  int infoTop=(mshotBottom < mActionBarHeight ? mActionBarHeight : mshotBottom);
  mBlogInfoView.setInfoContainerTop(infoTop);
}","private void repositionBlogInfoView(int scrollPos){
  if (mBlogInfoView == null) {
    return;
  }
  mBlogInfoView.scaleMshotImageBasedOnScrollPos(scrollPos);
  int mshotBottom;
  if (mMshotSpacerView.getHeight() > 0) {
    mshotBottom=mMshotSpacerView.getTop() + mBlogInfoView.getMshotDefaultHeight();
  }
 else {
    mshotBottom=0;
  }
  int infoTop=(mshotBottom < mActionBarHeight ? mActionBarHeight : mshotBottom);
  mBlogInfoView.setInfoContainerTop(infoTop);
}",0.8177676537585421
14667,"@Override public void onGlobalLayout(){
  mBlogInfoView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  mMshotSpacerView.getLayoutParams().height=mBlogInfoView.getMshotDefaultHeight() + mBlogInfoView.getInfoContainerHeight();
  repositionBlogInfoView();
}","@Override public void onGlobalLayout(){
  mBlogInfoView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  mMshotSpacerView.getLayoutParams().height=mBlogInfoView.getMshotDefaultHeight() + mBlogInfoView.getInfoContainerHeight();
}",0.9446640316205532
14668,"@Override public void onScrollChanged(){
  repositionBlogInfoView();
}","@Override public void onScrollChanged(){
  if (isPostAdapterEmpty()) {
    return;
  }
  int scrollPos=mListView.getVerticalScrollOffset();
  if (scrollPos != mLastPostListScrollPos) {
    repositionBlogInfoView(scrollPos);
    mLastPostListScrollPos=scrollPos;
  }
}",0.3976261127596439
14669,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  checkActionBar();
  boolean adapterAlreadyExists=hasPostAdapter();
  mListView.setAdapter(getPostAdapter());
  if (!adapterAlreadyExists) {
    boolean isRecreated=(savedInstanceState != null);
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
      getPostAdapter().setCurrentTag(mCurrentTag);
    if (!isRecreated && ReaderTagTable.shouldAutoUpdateTag(mCurrentTag)) {
      updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.AUTOMATIC);
    }
  break;
case BLOG_PREVIEW:
getPostAdapter().setCurrentBlog(mCurrentBlogId);
if (!isRecreated) {
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
}
break;
}
}
switch (getPostListType()) {
case BLOG_PREVIEW:
if (mBlogInfoView != null) {
mBlogInfoView.setBlogIdAndUrl(mCurrentBlogId,mCurrentBlogUrl);
}
break;
case TAG_PREVIEW:
updateTagPreviewHeader();
break;
}
getPostAdapter().setOnTagSelectedListener(mOnTagSelectedListener);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  checkActionBar();
  boolean adapterAlreadyExists=hasPostAdapter();
  mListView.setAdapter(getPostAdapter());
  if (!adapterAlreadyExists) {
    boolean isRecreated=(savedInstanceState != null);
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
      getPostAdapter().setCurrentTag(mCurrentTag);
    if (!isRecreated && ReaderTagTable.shouldAutoUpdateTag(mCurrentTag)) {
      updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.AUTOMATIC);
    }
  break;
case BLOG_PREVIEW:
getPostAdapter().setCurrentBlog(mCurrentBlogId);
if (!isRecreated) {
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
}
break;
}
}
switch (getPostListType()) {
case BLOG_PREVIEW:
loadBlogInfoIfNotLoaded();
break;
case TAG_PREVIEW:
updateTagPreviewHeader();
break;
}
getPostAdapter().setOnTagSelectedListener(mOnTagSelectedListener);
}",0.9443099273607748
14670,"public void scaleMshotImageBasedOnScrollPos(int scrollPos){
  if (mImageMshot == null) {
    return;
  }
  float scale=Math.max(0f,0.9f + (-scrollPos * 0.004f));
  if (scale == mPreviousMshotScale) {
    return;
  }
  float centerX=mMshotWidth * 0.5f;
  Matrix matrix=new Matrix();
  matrix.setScale(scale,scale,centerX,0);
  mImageMshot.setImageMatrix(matrix);
  mPreviousMshotScale=scale;
}","public void scaleMshotImageBasedOnScrollPos(int scrollPos){
  if (mImageMshot == null) {
    return;
  }
  float scale=Math.max(0f,0.9f + (-scrollPos * 0.008f));
  if (scale != mCurrentMshotScale) {
    float centerX=mMshotWidth * 0.5f;
    Matrix matrix=new Matrix();
    matrix.setScale(scale,scale,centerX,0);
    mImageMshot.setImageMatrix(matrix);
    mCurrentMshotScale=scale;
  }
}",0.8692307692307693
14671,"private void showBlogInfo(final ReaderBlogInfo blogInfo){
  final TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  final TextView txtDescription=(TextView)findViewById(R.id.text_blog_description);
  final TextView txtFollowCnt=(TextView)findViewById(R.id.text_follow_count);
  final TextView txtFollowBtn=(TextView)findViewById(R.id.text_follow_blog);
  mHasBlogInfo=(blogInfo != null && !blogInfo.isIncomplete());
  if (mHasBlogInfo) {
    mInfoContainerView.setVisibility(View.VISIBLE);
    if (blogInfo.hasName()) {
      txtBlogName.setText(blogInfo.getName());
      txtBlogName.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderActivityLauncher.openUrl(getContext(),blogInfo.getUrl());
        }
      }
);
    }
    if (blogInfo.hasDescription()) {
      txtDescription.setText(blogInfo.getDescription());
      txtDescription.setVisibility(View.VISIBLE);
    }
 else {
      txtDescription.setVisibility(View.GONE);
    }
    if (blogInfo.numSubscribers > 0) {
      String numFollowers=getResources().getString(R.string.reader_label_followers,FormatUtils.formatInt(blogInfo.numSubscribers));
      txtFollowCnt.setText(numFollowers);
      txtFollowCnt.setVisibility(View.VISIBLE);
    }
 else {
      txtFollowCnt.setVisibility(View.INVISIBLE);
    }
    ReaderUtils.showFollowStatus(txtFollowBtn,blogInfo.isFollowing);
    txtFollowBtn.setVisibility(View.VISIBLE);
    txtFollowBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleBlogFollowStatus(txtFollowBtn,blogInfo);
      }
    }
);
    if (!mHasLoadedMshot) {
      loadMshotImage(blogInfo);
    }
  }
 else {
    mInfoContainerView.setVisibility(View.INVISIBLE);
  }
}","private void showBlogInfo(final ReaderBlogInfo blogInfo){
  final TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  final TextView txtDescription=(TextView)findViewById(R.id.text_blog_description);
  final TextView txtFollowCnt=(TextView)findViewById(R.id.text_follow_count);
  final TextView txtFollowBtn=(TextView)findViewById(R.id.text_follow_blog);
  if ((blogInfo != null && !blogInfo.isIncomplete())) {
    mInfoContainerView.setVisibility(View.VISIBLE);
    if (blogInfo.hasName()) {
      txtBlogName.setText(blogInfo.getName());
      txtBlogName.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderActivityLauncher.openUrl(getContext(),blogInfo.getUrl());
        }
      }
);
    }
    if (blogInfo.hasDescription()) {
      txtDescription.setText(blogInfo.getDescription());
      txtDescription.setVisibility(View.VISIBLE);
    }
 else {
      txtDescription.setVisibility(View.GONE);
    }
    if (blogInfo.numSubscribers > 0) {
      String numFollowers=getResources().getString(R.string.reader_label_followers,FormatUtils.formatInt(blogInfo.numSubscribers));
      txtFollowCnt.setText(numFollowers);
      txtFollowCnt.setVisibility(View.VISIBLE);
    }
 else {
      txtFollowCnt.setVisibility(View.INVISIBLE);
    }
    ReaderUtils.showFollowStatus(txtFollowBtn,blogInfo.isFollowing);
    txtFollowBtn.setVisibility(View.VISIBLE);
    txtFollowBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleBlogFollowStatus(txtFollowBtn,blogInfo);
      }
    }
);
    if (!mHasLoadedMshot) {
      loadMshotImage(blogInfo);
    }
  }
 else {
    mInfoContainerView.setVisibility(View.INVISIBLE);
  }
}",0.9895627644569815
14672,"@Override public void onStart(){
  super.onStart();
  showPost();
}","@Override public void onStart(){
  super.onStart();
  if (!hasPost()) {
    showPost();
  }
}",0.8375
14673,"@Override public void onResume(){
  super.onResume();
  if (hasEmbedsOrIframes())   resumeWebView();
}","@Override public void onResume(){
  super.onResume();
  if (hasEmbedsOrIframes()) {
    resumeWebView();
  }
}",0.9622641509433962
14674,"@Override public void onPause(){
  if (hasEmbedsOrIframes())   pauseWebView();
  super.onPause();
}","@Override public void onPause(){
  if (hasEmbedsOrIframes()) {
    pauseWebView();
  }
  super.onPause();
}",0.9611650485436892
14675,"public static void removeWpComUserRelatedData(Context context){
  VolleyUtils.cancelAllRequests(requestQueue);
  NotificationUtils.unregisterDevicePushNotifications(context);
  try {
    GCMRegistrar.checkDevice(context);
    GCMRegistrar.unregister(context);
  }
 catch (  Exception e) {
    AppLog.v(T.NOTIFS,""String_Node_Str"" + e.getMessage());
  }
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
  editor.remove(WordPress.WPCOM_USERNAME_PREFERENCE);
  editor.remove(WordPress.WPCOM_PASSWORD_PREFERENCE);
  editor.remove(WordPress.ACCESS_TOKEN_PREFERENCE);
  editor.commit();
  UserPrefs.reset();
  ReaderDatabase.reset();
  SimperiumUtils.getNotesBucket().reset();
  SimperiumUtils.getMetaBucket().reset();
  Intent broadcastIntent=new Intent();
  broadcastIntent.setAction(BROADCAST_ACTION_SIGNOUT);
  context.sendBroadcast(broadcastIntent);
}","public static void removeWpComUserRelatedData(Context context){
  VolleyUtils.cancelAllRequests(requestQueue);
  NotificationUtils.unregisterDevicePushNotifications(context);
  try {
    GCMRegistrar.checkDevice(context);
    GCMRegistrar.unregister(context);
  }
 catch (  Exception e) {
    AppLog.v(T.NOTIFS,""String_Node_Str"" + e.getMessage());
  }
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
  editor.remove(WordPress.WPCOM_USERNAME_PREFERENCE);
  editor.remove(WordPress.WPCOM_PASSWORD_PREFERENCE);
  editor.remove(WordPress.ACCESS_TOKEN_PREFERENCE);
  editor.commit();
  UserPrefs.reset();
  ReaderDatabase.reset();
  SimperiumUtils.resetBuckets();
  Intent broadcastIntent=new Intent();
  broadcastIntent.setAction(BROADCAST_ACTION_SIGNOUT);
  context.sendBroadcast(broadcastIntent);
}",0.963260619977038
14676,"public String getType(){
  return queryJSON(""String_Node_Str"",NOTE_UNKNOWN_TYPE);
}","public String getType(){
  String noteType=queryJSON(""String_Node_Str"",NOTE_UNKNOWN_TYPE);
  if (noteType.contains(NOTE_ACHIEVEMENT_TYPE)) {
    noteType=NOTE_ACHIEVEMENT_TYPE;
  }
  return noteType;
}",0.5352112676056338
14677,"private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions=null;
switch (stat) {
case APPLICATION_OPENED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_OPENED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LIKED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_REBLOGGED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_FOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_UNFOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LOADED_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_LOADED_FRESHLY_PRESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_COMMENTED_ON_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_PERFORMED_ACTION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}","private AnalyticsTrackerMixpanelInstructionsForStat instructionsForStat(AnalyticsTracker.Stat stat){
  AnalyticsTrackerMixpanelInstructionsForStat instructions=null;
switch (stat) {
case APPLICATION_OPENED:
    instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
  instructions.setSuperPropertyToIncrement(""String_Node_Str"");
break;
case APPLICATION_CLOSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case THEMES_ACCESSED_THEMES_BROWSER:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case THEMES_CHANGED_THEME:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_OPENED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LIKED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_REBLOGGED_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_INFINITE_SCROLL:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_FOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_UNFOLLOWED_READER_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_LOADED_TAG:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case READER_LOADED_FRESHLY_PRESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case READER_COMMENTED_ON_ARTICLE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_CREATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_LOCAL_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_ADDED_PHOTO_VIA_WP_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_UPDATED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_SCHEDULED_POST:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_PHOTO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_VIDEO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_CATEGORIES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case EDITOR_PUBLISHED_POST_WITH_TAGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATIONS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATIONS_OPENED_NOTIFICATION_DETAILS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case NOTIFICATION_PERFORMED_ACTION:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_APPROVED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_REPLIED_TO:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_TRASHED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case NOTIFICATION_FLAGGED_AS_SPAM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case OPENED_POSTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_PAGES:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_COMMENTS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_VIEW_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_VIEW_ADMIN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case OPENED_MEDIA_LIBRARY:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case OPENED_SETTINGS:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithPropertyIncrementor(""String_Node_Str"",AnalyticsTracker.Stat.APPLICATION_CLOSED);
break;
case CREATED_ACCOUNT:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case CREATED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SHARED_ITEM:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsWithSuperPropertyAndPeoplePropertyIncrementor(""String_Node_Str"");
break;
case ADDED_SELF_HOSTED_SITE:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case SIGNED_INTO_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
instructions.addSuperPropertyToFlag(""String_Node_Str"");
break;
case PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
case STATS_ACCESSED:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
instructions.setSuperPropertyAndPeoplePropertyToIncrement(""String_Node_Str"");
break;
case STATS_SELECTED_INSTALL_JETPACK:
instructions=AnalyticsTrackerMixpanelInstructionsForStat.mixpanelInstructionsForEventName(""String_Node_Str"");
break;
default :
instructions=null;
break;
}
return instructions;
}",0.9885204081632653
14678,"private void showLoadingProgress(){
  if (hasActivity() && mProgress != null) {
    mProgress.setVisibility(View.VISIBLE);
  }
}","private void showLoadingProgress(){
  if (hasActivity() && mProgress != null) {
    mProgress.bringToFront();
    mProgress.setVisibility(View.VISIBLE);
  }
}",0.8951048951048951
14679,"public static void openUrl(Context context,String url,OpenUrlType openUrlType){
  if (TextUtils.isEmpty(url)) {
    return;
  }
  if (openUrlType == OpenUrlType.INTERNAL) {
    NotificationsWebViewActivity.openUrl(context,url);
  }
 else {
    try {
      Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
      context.startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      ToastUtils.showToast(context,context.getString(R.string.reader_toast_err_url_intent,url),ToastUtils.Duration.LONG);
    }
  }
}","public static void openUrl(Context context,String url,OpenUrlType openUrlType){
  if (TextUtils.isEmpty(url)) {
    return;
  }
  if (openUrlType == OpenUrlType.INTERNAL && WordPress.getCurrentBlog() != null) {
    NotificationsWebViewActivity.openUrl(context,url);
  }
 else {
    try {
      Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
      context.startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      ToastUtils.showToast(context,context.getString(R.string.reader_toast_err_url_intent,url),ToastUtils.Duration.LONG);
    }
  }
}",0.9657657657657658
14680,"public boolean isScrolledToTop(){
  return (getVerticalScrollOffset() == 0);
}","public boolean isScrolledToTop(){
  return (getChildCount() == 0 || getVerticalScrollOffset() == 0);
}",0.8666666666666667
14681,"@Override public void onUpdateResult(UpdateResult result){
  mHasPerformedInitialUpdate=true;
  ReaderPostListFragment listFragment=getListFragment();
  if (listFragment != null) {
    if (result == UpdateResult.CHANGED) {
      listFragment.refreshTags();
      if (isTagTableEmpty && ReaderPostTable.isEmpty()) {
        listFragment.updatePostsWithTag(listFragment.getCurrentTag(),RequestDataAction.LOAD_NEWER,ReaderPostListFragment.RefreshType.AUTOMATIC);
      }
    }
  }
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderUserActions.updateCurrentUser(null);
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderBlogActions.updateFollowedBlogs(null);
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderAuthActions.updateCookies(ReaderActivity.this);
}","@Override public void onUpdateResult(UpdateResult result){
  mHasPerformedInitialUpdate=true;
  if (result == UpdateResult.CHANGED) {
    ReaderPostListFragment listFragment=getListFragment();
    if (listFragment != null && listFragment.getPostListType() == ReaderPostListType.TAG_FOLLOWED) {
      listFragment.refreshTags();
      if (isTagTableEmpty && isPostTableEmpty) {
        listFragment.updatePostsWithTag(listFragment.getCurrentTag(),RequestDataAction.LOAD_NEWER,ReaderPostListFragment.RefreshType.AUTOMATIC);
      }
    }
  }
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderUserActions.updateCurrentUser(null);
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderBlogActions.updateFollowedBlogs(null);
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderAuthActions.updateCookies(ReaderActivity.this);
}",0.9010282776349614
14682,"private void performInitialUpdate(){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    return;
  }
  final boolean isTagTableEmpty=ReaderTagTable.isEmpty();
  ReaderActions.UpdateResultListener listener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    UpdateResult result){
      mHasPerformedInitialUpdate=true;
      ReaderPostListFragment listFragment=getListFragment();
      if (listFragment != null) {
        if (result == UpdateResult.CHANGED) {
          listFragment.refreshTags();
          if (isTagTableEmpty && ReaderPostTable.isEmpty()) {
            listFragment.updatePostsWithTag(listFragment.getCurrentTag(),RequestDataAction.LOAD_NEWER,ReaderPostListFragment.RefreshType.AUTOMATIC);
          }
        }
      }
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderUserActions.updateCurrentUser(null);
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderBlogActions.updateFollowedBlogs(null);
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderAuthActions.updateCookies(ReaderActivity.this);
    }
  }
;
  ReaderTagActions.updateTags(listener);
}","private void performInitialUpdate(){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    return;
  }
  final boolean isTagTableEmpty=ReaderTagTable.isEmpty();
  final boolean isPostTableEmpty=ReaderPostTable.isEmpty();
  ReaderActions.UpdateResultListener listener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    UpdateResult result){
      mHasPerformedInitialUpdate=true;
      if (result == UpdateResult.CHANGED) {
        ReaderPostListFragment listFragment=getListFragment();
        if (listFragment != null && listFragment.getPostListType() == ReaderPostListType.TAG_FOLLOWED) {
          listFragment.refreshTags();
          if (isTagTableEmpty && isPostTableEmpty) {
            listFragment.updatePostsWithTag(listFragment.getCurrentTag(),RequestDataAction.LOAD_NEWER,ReaderPostListFragment.RefreshType.AUTOMATIC);
          }
        }
      }
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderUserActions.updateCurrentUser(null);
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderBlogActions.updateFollowedBlogs(null);
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderAuthActions.updateCookies(ReaderActivity.this);
    }
  }
;
  ReaderTagActions.updateTags(listener);
}",0.9059322033898304
14683,"void updatePostsWithTag(final String tagName,final RequestDataAction updateAction,final RefreshType refreshType){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (refreshType == RefreshType.MANUAL && isCurrentTag(tagName)) {
    if (tagName.equals(ReaderTag.TAG_NAME_LIKED) || tagName.equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts();
  }
  ReaderActions.UpdateResultAndCountListener resultListener=new ReaderActions.UpdateResultAndCountListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result,    int numNewPosts){
      if (!hasActivity()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (!isCurrentTag(tagName)) {
        AppLog.i(T.READER,""String_Node_Str"");
        return;
      }
      if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0) {
        if (!isPostAdapterEmpty() && getPostListType().equals(ReaderPostListType.TAG_FOLLOWED) && updateAction == RequestDataAction.LOAD_NEWER && !isListScrolledToTop()) {
          showNewPostsBar();
        }
 else {
          refreshPosts();
        }
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
;
  boolean allowBackfill=(updateAction == RequestDataAction.LOAD_NEWER && !isPostAdapterEmpty());
  if (allowBackfill) {
    ReaderActions.PostBackfillListener backfillListener=new ReaderActions.PostBackfillListener(){
      @Override public void onPostsBackfilled(      int numNewPosts){
        if (!hasActivity()) {
          AppLog.w(T.READER,""String_Node_Str"");
          return;
        }
        if (!isCurrentTag(tagName)) {
          AppLog.i(T.READER,""String_Node_Str"");
        }
 else         if (isPostAdapterEmpty()) {
          refreshPosts();
        }
      }
    }
;
    ReaderPostActions.updatePostsInTagWithBackfill(tagName,resultListener,backfillListener);
  }
 else {
    ReaderPostActions.updatePostsInTag(tagName,updateAction,resultListener);
  }
}","void updatePostsWithTag(final String tagName,final RequestDataAction updateAction,final RefreshType refreshType){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (getPostListType() == ReaderPostListType.TAG_FOLLOWED && ReaderTagTable.isEmpty()) {
    AppLog.d(T.READER,""String_Node_Str"");
    return;
  }
  if (refreshType == RefreshType.MANUAL && isCurrentTag(tagName)) {
    if (tagName.equals(ReaderTag.TAG_NAME_LIKED) || tagName.equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts();
  }
  ReaderActions.UpdateResultAndCountListener resultListener=new ReaderActions.UpdateResultAndCountListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result,    int numNewPosts){
      if (!hasActivity()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (!isCurrentTag(tagName)) {
        AppLog.i(T.READER,""String_Node_Str"");
        return;
      }
      if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0) {
        if (!isPostAdapterEmpty() && getPostListType().equals(ReaderPostListType.TAG_FOLLOWED) && updateAction == RequestDataAction.LOAD_NEWER && !isListScrolledToTop()) {
          showNewPostsBar();
        }
 else {
          refreshPosts();
        }
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
;
  boolean allowBackfill=(updateAction == RequestDataAction.LOAD_NEWER && !isPostAdapterEmpty());
  if (allowBackfill) {
    ReaderActions.PostBackfillListener backfillListener=new ReaderActions.PostBackfillListener(){
      @Override public void onPostsBackfilled(      int numNewPosts){
        if (!hasActivity()) {
          AppLog.w(T.READER,""String_Node_Str"");
          return;
        }
        if (!isCurrentTag(tagName)) {
          AppLog.i(T.READER,""String_Node_Str"");
        }
 else         if (isPostAdapterEmpty()) {
          refreshPosts();
        }
      }
    }
;
    ReaderPostActions.updatePostsInTagWithBackfill(tagName,resultListener,backfillListener);
  }
 else {
    ReaderPostActions.updatePostsInTag(tagName,updateAction,resultListener);
  }
}",0.4199648197009674
14684,"private static String getEndpointForTag(String tagName){
  String endpoint=ReaderTagTable.getEndpointForTag(tagName);
  if (TextUtils.isEmpty(endpoint)) {
    return String.format(""String_Node_Str"",ReaderTagActions.sanitizeTitle(tagName));
  }
 else {
    return endpoint;
  }
}","private static String getEndpointForTag(String tagName){
  String endpoint=ReaderTagTable.getEndpointForTag(tagName);
  if (TextUtils.isEmpty(endpoint)) {
    if (ReaderTag.isDefaultTagName(tagName)) {
      return null;
    }
 else {
      return String.format(""String_Node_Str"",ReaderTagActions.sanitizeTitle(tagName));
    }
  }
 else {
    return endpoint;
  }
}",0.8633540372670807
14685,"private static void updatePostsInTag(final String tagName,final ReaderActions.RequestDataAction updateAction,final ReaderActions.UpdateResultAndCountListener resultListener,final ReaderActions.PostBackfillListener backfillListener){
  StringBuilder sb=new StringBuilder(getEndpointForTag(tagName));
  sb.append(""String_Node_Str"").append(ReaderConstants.READER_MAX_POSTS_TO_REQUEST);
  sb.append(""String_Node_Str"");
  if (ReaderPostTable.hasPostsWithTag(tagName)) {
switch (updateAction) {
case LOAD_NEWER:
      String dateNewest=ReaderTagTable.getTagNewestDate(tagName);
    if (!TextUtils.isEmpty(dateNewest)) {
      sb.append(""String_Node_Str"").append(UrlUtils.urlEncode(dateNewest));
      AppLog.d(T.READER,String.format(""String_Node_Str"",tagName,dateNewest));
    }
  break;
case LOAD_OLDER:
String dateOldest=ReaderTagTable.getTagOldestDate(tagName);
if (TextUtils.isEmpty(dateOldest)) {
dateOldest=ReaderPostTable.getOldestPubDateWithTag(tagName);
}
if (!TextUtils.isEmpty(dateOldest)) {
sb.append(""String_Node_Str"").append(UrlUtils.urlEncode(dateOldest));
AppLog.d(T.READER,String.format(""String_Node_Str"",tagName,dateOldest));
}
break;
}
}
 else {
AppLog.d(T.READER,String.format(""String_Node_Str"",tagName));
}
com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
@Override public void onResponse(JSONObject jsonObject){
handleUpdatePostsWithTagResponse(tagName,updateAction,jsonObject,resultListener,backfillListener);
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
AppLog.e(T.READER,volleyError);
if (resultListener != null) {
resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED,-1);
}
}
}
;
WordPress.getRestClientUtils().get(sb.toString(),null,null,listener,errorListener);
}","private static void updatePostsInTag(final String tagName,final ReaderActions.RequestDataAction updateAction,final ReaderActions.UpdateResultAndCountListener resultListener,final ReaderActions.PostBackfillListener backfillListener){
  String endpoint=getEndpointForTag(tagName);
  if (TextUtils.isEmpty(endpoint)) {
    if (resultListener != null) {
      resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED,-1);
    }
    return;
  }
  StringBuilder sb=new StringBuilder(endpoint);
  sb.append(""String_Node_Str"").append(ReaderConstants.READER_MAX_POSTS_TO_REQUEST);
  sb.append(""String_Node_Str"");
  if (ReaderPostTable.hasPostsWithTag(tagName)) {
switch (updateAction) {
case LOAD_NEWER:
      String dateNewest=ReaderTagTable.getTagNewestDate(tagName);
    if (!TextUtils.isEmpty(dateNewest)) {
      sb.append(""String_Node_Str"").append(UrlUtils.urlEncode(dateNewest));
      AppLog.d(T.READER,String.format(""String_Node_Str"",tagName,dateNewest));
    }
  break;
case LOAD_OLDER:
String dateOldest=ReaderTagTable.getTagOldestDate(tagName);
if (TextUtils.isEmpty(dateOldest)) {
dateOldest=ReaderPostTable.getOldestPubDateWithTag(tagName);
}
if (!TextUtils.isEmpty(dateOldest)) {
sb.append(""String_Node_Str"").append(UrlUtils.urlEncode(dateOldest));
AppLog.d(T.READER,String.format(""String_Node_Str"",tagName,dateOldest));
}
break;
}
}
 else {
AppLog.d(T.READER,String.format(""String_Node_Str"",tagName));
}
com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
@Override public void onResponse(JSONObject jsonObject){
handleUpdatePostsWithTagResponse(tagName,updateAction,jsonObject,resultListener,backfillListener);
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
AppLog.e(T.READER,volleyError);
if (resultListener != null) {
resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED,-1);
}
}
}
;
WordPress.getRestClientUtils().get(sb.toString(),null,null,listener,errorListener);
}",0.9354166666666668
14686,"private static void backfillPostsWithTag(final String tagName,final Date dateBefore,final int recursionCounter,final ReaderActions.PostBackfillListener backfillListener){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      handleBackfillResponse(jsonObject,tagName,recursionCounter,backfillListener);
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.READER,volleyError);
    }
  }
;
  String strDateBefore=DateTimeUtils.javaDateToIso8601(dateBefore);
  String path=getEndpointForTag(tagName) + ""String_Node_Str"" + ReaderConstants.READER_MAX_POSTS_TO_REQUEST+ ""String_Node_Str""+ ""String_Node_Str""+ UrlUtils.urlEncode(strDateBefore);
  AppLog.i(T.READER,String.format(""String_Node_Str"",tagName,recursionCounter));
  WordPress.getRestClientUtils().get(path,null,null,listener,errorListener);
}","private static void backfillPostsWithTag(final String tagName,final Date dateBefore,final int recursionCounter,final ReaderActions.PostBackfillListener backfillListener){
  String endpoint=getEndpointForTag(tagName);
  if (TextUtils.isEmpty(endpoint)) {
    return;
  }
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      handleBackfillResponse(jsonObject,tagName,recursionCounter,backfillListener);
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.READER,volleyError);
    }
  }
;
  String strDateBefore=DateTimeUtils.javaDateToIso8601(dateBefore);
  String path=endpoint + ""String_Node_Str"" + ReaderConstants.READER_MAX_POSTS_TO_REQUEST+ ""String_Node_Str""+ ""String_Node_Str""+ UrlUtils.urlEncode(strDateBefore);
  AppLog.i(T.READER,String.format(""String_Node_Str"",tagName,recursionCounter));
  WordPress.getRestClientUtils().get(path,null,null,listener,errorListener);
}",0.936996684036002
14687,"private static ReaderTag getTagFromCursor(Cursor c){
  if (c == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String tagName=c.getString(c.getColumnIndex(""String_Node_Str""));
  String endpoint=c.getString(c.getColumnIndex(""String_Node_Str""));
  ReaderTagType tagType=ReaderTag.ReaderTagType.fromInt(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  return new ReaderTag(tagName,endpoint,tagType);
}","private static ReaderTag getTagFromCursor(Cursor c){
  if (c == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String tagName=c.getString(c.getColumnIndex(""String_Node_Str""));
  String endpoint=c.getString(c.getColumnIndex(""String_Node_Str""));
  ReaderTagType tagType=ReaderTag.ReaderTagType.fromInt(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  return new ReaderTag(tagName,endpoint,tagType);
}",0.990498812351544
14688,"public static void setTagNewestDate(String tagName,String date){
  if (TextUtils.isEmpty(tagName))   return;
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tagName);
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}","public static void setTagNewestDate(String tagName,String date){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tagName);
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}",0.9695550351288056
14689,"public static void setTagLastUpdated(String tagName,String date){
  if (TextUtils.isEmpty(tagName))   return;
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tagName);
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}","public static void setTagLastUpdated(String tagName,String date){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tagName);
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}",0.969626168224299
14690,"public static void addOrUpdateTag(ReaderTag tag){
  if (tag == null)   return;
  ReaderTagList tags=new ReaderTagList();
  tags.add(tag);
  addOrUpdateTags(tags);
}","public static void addOrUpdateTag(ReaderTag tag){
  if (tag == null) {
    return;
  }
  ReaderTagList tags=new ReaderTagList();
  tags.add(tag);
  addOrUpdateTags(tags);
}",0.9761904761904762
14691,"public static void addOrUpdateTags(ReaderTagList tags){
  if (tags == null || tags.size() == 0)   return;
  SQLiteStatement stmt=null;
  try {
    stmt=ReaderDatabase.getWritableDb().compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str"");
    for (    ReaderTag topic : tags) {
      stmt.bindString(1,topic.getTagName());
      stmt.bindString(2,topic.getEndpoint());
      stmt.bindLong(3,topic.tagType.toInt());
      stmt.execute();
      stmt.clearBindings();
    }
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
}","public static void addOrUpdateTags(ReaderTagList tags){
  if (tags == null || tags.size() == 0) {
    return;
  }
  SQLiteStatement stmt=null;
  try {
    stmt=ReaderDatabase.getWritableDb().compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str"");
    for (    ReaderTag topic : tags) {
      stmt.bindString(1,topic.getTagName());
      stmt.bindString(2,topic.getEndpoint());
      stmt.bindLong(3,topic.tagType.toInt());
      stmt.execute();
      stmt.clearBindings();
    }
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
}",0.9926873857404022
14692,"public static void setRecommendedTags(ReaderTagList topics){
  if (topics == null)   return;
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  SQLiteStatement stmt=db.compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str"");
  db.beginTransaction();
  try {
    try {
      db.execSQL(""String_Node_Str"");
      for (      ReaderTag topic : topics) {
        stmt.bindString(1,topic.getTagName());
        stmt.bindString(2,topic.getEndpoint());
        stmt.bindLong(3,topic.tagType.toInt());
        stmt.execute();
        stmt.clearBindings();
      }
      db.setTransactionSuccessful();
    }
 catch (    SQLException e) {
      AppLog.e(T.READER,e);
    }
  }
  finally {
    SqlUtils.closeStatement(stmt);
    db.endTransaction();
  }
}","public static void setRecommendedTags(ReaderTagList topics){
  if (topics == null) {
    return;
  }
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  SQLiteStatement stmt=db.compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str"");
  db.beginTransaction();
  try {
    try {
      db.execSQL(""String_Node_Str"");
      for (      ReaderTag topic : topics) {
        stmt.bindString(1,topic.getTagName());
        stmt.bindString(2,topic.getEndpoint());
        stmt.bindLong(3,topic.tagType.toInt());
        stmt.execute();
        stmt.clearBindings();
      }
      db.setTransactionSuccessful();
    }
 catch (    SQLException e) {
      AppLog.e(T.READER,e);
    }
  }
  finally {
    SqlUtils.closeStatement(stmt);
    db.endTransaction();
  }
}",0.9947712418300654
14693,"public static boolean shouldAutoUpdateTag(String tagName){
  int minutes=minutesSinceLastUpdate(tagName);
  if (minutes == NEVER_UPDATED)   return true;
  return (minutes >= Constants.READER_AUTO_UPDATE_DELAY_MINUTES);
}","public static boolean shouldAutoUpdateTag(String tagName){
  int minutes=minutesSinceLastUpdate(tagName);
  if (minutes == NEVER_UPDATED) {
    return true;
  }
  return (minutes >= Constants.READER_AUTO_UPDATE_DELAY_MINUTES);
}",0.9821428571428572
14694,"public static ReaderTag getTag(String tagName){
  if (TextUtils.isEmpty(tagName))   return null;
  Cursor c=ReaderDatabase.getReadableDb().rawQuery(""String_Node_Str"",new String[]{tagName});
  try {
    if (!c.moveToFirst())     return null;
    return getTagFromCursor(c);
  }
  finally {
    SqlUtils.closeCursor(c);
  }
}","public static ReaderTag getTag(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return null;
  }
  Cursor c=ReaderDatabase.getReadableDb().rawQuery(""String_Node_Str"",new String[]{tagName});
  try {
    if (!c.moveToFirst()) {
      return null;
    }
    return getTagFromCursor(c);
  }
  finally {
    SqlUtils.closeCursor(c);
  }
}",0.8825301204819277
14695,"/** 
 * tbl_tag_updates routines
 */
public static String getTagNewestDate(String tagName){
  if (TextUtils.isEmpty(tagName))   return ""String_Node_Str"";
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}","/** 
 * tbl_tag_updates routines
 */
public static String getTagNewestDate(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return ""String_Node_Str"";
  }
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}",0.9849056603773584
14696,"public static void replaceTags(ReaderTagList tags){
  if (tags == null || tags.size() == 0)   return;
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  try {
    try {
      db.execSQL(""String_Node_Str"");
      addOrUpdateTags(tags);
      db.setTransactionSuccessful();
    }
 catch (    SQLException e) {
      AppLog.e(T.READER,e);
    }
  }
  finally {
    db.endTransaction();
  }
}","public static void replaceTags(ReaderTagList tags){
  if (tags == null || tags.size() == 0) {
    return;
  }
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  try {
    try {
      db.execSQL(""String_Node_Str"");
      addOrUpdateTags(tags);
      db.setTransactionSuccessful();
    }
 catch (    SQLException e) {
      AppLog.e(T.READER,e);
    }
  }
  finally {
    db.endTransaction();
  }
}",0.9904761904761904
14697,"public static void deleteTag(String tagName){
  if (TextUtils.isEmpty(tagName))   return;
  String[] args={tagName};
  ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",args);
  ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",args);
}","public static void deleteTag(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  String[] args={tagName};
  ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",args);
  ReaderDatabase.getWritableDb().delete(""String_Node_Str"",""String_Node_Str"",args);
}",0.9861111111111112
14698,"private static int minutesSinceLastUpdate(String tagName){
  if (TextUtils.isEmpty(tagName))   return 0;
  String updated=getTagLastUpdated(tagName);
  if (TextUtils.isEmpty(updated))   return NEVER_UPDATED;
  Date dtUpdated=DateTimeUtils.iso8601ToJavaDate(updated);
  if (dtUpdated == null)   return 0;
  Date dtNow=new Date();
  return DateTimeUtils.minutesBetween(dtUpdated,dtNow);
}","private static int minutesSinceLastUpdate(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return 0;
  }
  String updated=getTagLastUpdated(tagName);
  if (TextUtils.isEmpty(updated)) {
    return NEVER_UPDATED;
  }
  Date dtUpdated=DateTimeUtils.iso8601ToJavaDate(updated);
  if (dtUpdated == null) {
    return 0;
  }
  Date dtNow=new Date();
  return DateTimeUtils.minutesBetween(dtUpdated,dtNow);
}",0.9698492462311558
14699,"public static String getTagLastUpdated(String tagName){
  if (TextUtils.isEmpty(tagName))   return ""String_Node_Str"";
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}","public static String getTagLastUpdated(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return ""String_Node_Str"";
  }
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}",0.982532751091703
14700,"public static boolean tagExists(String tagName){
  if (TextUtils.isEmpty(tagName))   return false;
  return SqlUtils.boolForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}","public static boolean tagExists(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return false;
  }
  return SqlUtils.boolForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}",0.9807692307692308
14701,"public static String getTagOldestDate(String tagName){
  if (TextUtils.isEmpty(tagName))   return ""String_Node_Str"";
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}","public static String getTagOldestDate(String tagName){
  if (TextUtils.isEmpty(tagName)) {
    return ""String_Node_Str"";
  }
  return SqlUtils.stringForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",new String[]{tagName});
}",0.9824561403508772
14702,"public static void setTagOldestDate(String tagName,String date){
  if (TextUtils.isEmpty(tagName))   return;
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tagName);
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}","public static void setTagOldestDate(String tagName,String date){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",tagName);
  values.put(""String_Node_Str"",date);
  try {
    ReaderDatabase.getWritableDb().insertWithOnConflict(""String_Node_Str"",null,values,SQLiteDatabase.CONFLICT_REPLACE);
  }
 catch (  SQLException e) {
    AppLog.e(T.READER,e);
  }
}",0.9695550351288056
14703,"@Override public void onUpdateResult(UpdateResult result){
  mHasPerformedInitialUpdate=true;
  ReaderPostListFragment listFragment=getListFragment();
  if (listFragment != null) {
    if (animateRefresh) {
      listFragment.setIsUpdating(false,RequestDataAction.LOAD_NEWER);
    }
    if (result == UpdateResult.CHANGED) {
      listFragment.refreshTags();
    }
  }
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderUserActions.updateCurrentUser(null);
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderBlogActions.updateFollowedBlogs();
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderAuthActions.updateCookies(ReaderActivity.this);
}","@Override public void onUpdateResult(UpdateResult result){
  mHasPerformedInitialUpdate=true;
  ReaderPostListFragment listFragment=getListFragment();
  if (listFragment != null) {
    if (result == UpdateResult.CHANGED) {
      listFragment.refreshTags();
      if (isTagTableEmpty && ReaderPostTable.isEmpty()) {
        listFragment.updatePostsWithCurrentTag(RequestDataAction.LOAD_NEWER);
      }
    }
  }
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderUserActions.updateCurrentUser(null);
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderBlogActions.updateFollowedBlogs();
  AppLog.i(T.READER,""String_Node_Str"");
  ReaderAuthActions.updateCookies(ReaderActivity.this);
}",0.8091603053435115
14704,"private void performInitialUpdate(){
  if (!NetworkUtils.isNetworkAvailable(this))   return;
  ReaderPostListFragment listFragment=getListFragment();
  final boolean animateRefresh=(listFragment != null && ReaderTagTable.isEmpty());
  if (animateRefresh) {
    listFragment.setIsUpdating(true,RequestDataAction.LOAD_NEWER);
  }
  ReaderActions.UpdateResultListener listener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    UpdateResult result){
      mHasPerformedInitialUpdate=true;
      ReaderPostListFragment listFragment=getListFragment();
      if (listFragment != null) {
        if (animateRefresh) {
          listFragment.setIsUpdating(false,RequestDataAction.LOAD_NEWER);
        }
        if (result == UpdateResult.CHANGED) {
          listFragment.refreshTags();
        }
      }
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderUserActions.updateCurrentUser(null);
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderBlogActions.updateFollowedBlogs();
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderAuthActions.updateCookies(ReaderActivity.this);
    }
  }
;
  ReaderTagActions.updateTags(listener);
}","private void performInitialUpdate(){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    return;
  }
  final boolean isTagTableEmpty=ReaderTagTable.isEmpty();
  ReaderActions.UpdateResultListener listener=new ReaderActions.UpdateResultListener(){
    @Override public void onUpdateResult(    UpdateResult result){
      mHasPerformedInitialUpdate=true;
      ReaderPostListFragment listFragment=getListFragment();
      if (listFragment != null) {
        if (result == UpdateResult.CHANGED) {
          listFragment.refreshTags();
          if (isTagTableEmpty && ReaderPostTable.isEmpty()) {
            listFragment.updatePostsWithCurrentTag(RequestDataAction.LOAD_NEWER);
          }
        }
      }
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderUserActions.updateCurrentUser(null);
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderBlogActions.updateFollowedBlogs();
      AppLog.i(T.READER,""String_Node_Str"");
      ReaderAuthActions.updateCookies(ReaderActivity.this);
    }
  }
;
  ReaderTagActions.updateTags(listener);
}",0.5200179937022043
14705,"private void updatePostsWithTag(final String tagName,final RequestDataAction updateAction,RefreshType refreshType){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (refreshType == RefreshType.MANUAL && isCurrentTag(tagName)) {
    if (tagName.equals(ReaderTag.TAG_NAME_LIKED) || tagName.equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts();
  }
  ReaderPostActions.updatePostsWithTag(tagName,updateAction,new ReaderActions.UpdateResultAndCountListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result,    int numNewPosts){
      if (!hasActivity()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0 && isCurrentTag(tagName)) {
        if (!isEmpty() && updateAction == RequestDataAction.LOAD_NEWER) {
          showNewPostsBar(numNewPosts);
        }
 else {
          refreshPosts();
        }
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
);
}","private void updatePostsWithTag(final String tagName,final RequestDataAction updateAction,RefreshType refreshType){
  if (TextUtils.isEmpty(tagName)) {
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  if (ReaderTagTable.isEmpty()) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (refreshType == RefreshType.MANUAL && isCurrentTag(tagName)) {
    if (tagName.equals(ReaderTag.TAG_NAME_LIKED) || tagName.equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts();
  }
  ReaderPostActions.updatePostsWithTag(tagName,updateAction,new ReaderActions.UpdateResultAndCountListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result,    int numNewPosts){
      if (!hasActivity()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0 && isCurrentTag(tagName)) {
        if (!isEmpty() && updateAction == RequestDataAction.LOAD_NEWER) {
          showNewPostsBar(numNewPosts);
        }
 else {
          refreshPosts();
        }
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
);
}",0.9649122807017544
14706,"private void updatePostsWithCurrentTag(RequestDataAction updateAction){
  if (hasCurrentTag()) {
    updatePostsWithTag(mCurrentTag,updateAction,RefreshType.AUTOMATIC);
  }
}","protected void updatePostsWithCurrentTag(RequestDataAction updateAction){
  if (hasCurrentTag()) {
    updatePostsWithTag(mCurrentTag,updateAction,RefreshType.AUTOMATIC);
  }
}",0.9771428571428572
14707,"@Override public void onActivityResumed(Activity arg0){
  if (!canSynchWithWordPressDotComBackend())   return;
  if (WordPress.hasValidWPComCredentials(mContext)) {
    String token=null;
    try {
      GCMRegistrar.checkDevice(mContext);
      GCMRegistrar.checkManifest(mContext);
      token=GCMRegistrar.getRegistrationId(mContext);
      String gcmId=BuildConfig.GCM_ID;
      if (gcmId == null || token == null || token.equals(""String_Node_Str"")) {
        AppLog.e(T.NOTIFS,""String_Node_Str"");
        return;
      }
 else {
        NotificationUtils.registerDeviceForPushNotifications(mContext,token);
      }
    }
 catch (    Exception e) {
      AppLog.e(T.NOTIFS,""String_Node_Str"" + e.getMessage());
    }
  }
  WordPress.updateCurrentBlogStatsInBackground();
}","@Override public void onActivityResumed(Activity arg0){
  if (!canSynchWithWordPressDotComBackend())   return;
  if (WordPress.hasValidWPComCredentials(mContext)) {
    String token=null;
    try {
      GCMRegistrar.checkDevice(mContext);
      GCMRegistrar.checkManifest(mContext);
      token=GCMRegistrar.getRegistrationId(mContext);
      String gcmId=BuildConfig.GCM_ID;
      if (gcmId == null || token == null || token.equals(""String_Node_Str"")) {
        AppLog.e(T.NOTIFS,""String_Node_Str"");
        return;
      }
 else {
        NotificationUtils.registerDeviceForPushNotifications(mContext,token);
      }
    }
 catch (    Exception e) {
      AppLog.e(T.NOTIFS,""String_Node_Str"" + e.getMessage());
    }
  }
  WordPress.updateCurrentBlogStatsInBackground(false);
}",0.9967845659163987
14708,"public static void setupVolleyQueue(){
  requestQueue=Volley.newRequestQueue(mContext,VolleyUtils.getHTTPClientStack(mContext));
  imageLoader=new ImageLoader(requestQueue,getBitmapCache());
  VolleyLog.setTag(TAG);
  imageLoader.setBatchedResponseDelay(0);
}","public static void setupVolleyQueue(){
  requestQueue=Volley.newRequestQueue(mContext,VolleyUtils.getHTTPClientStack(mContext));
  imageLoader=new ImageLoader(requestQueue,getBitmapCache());
  VolleyLog.setTag(AppLog.TAG);
  imageLoader.setBatchedResponseDelay(0);
}",0.9866666666666668
14709,"@Override public void onCreate(){
  ProfilingUtils.start(""String_Node_Str"");
  AppLog.enableRecording(true);
  if (!Utils.isDebugBuild()) {
    Crashlytics.start(this);
    AppLog.enableCrashlytics(true);
  }
  versionName=getVersionName(this);
  initWpDb();
  wpStatsDB=new WordPressStatsDB(this);
  mContext=this;
  setupVolleyQueue();
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
  if (settings.getInt(""String_Node_Str"",-1) >= 0) {
    shouldRestoreSelectedActivity=true;
  }
  registerForCloudMessaging(this);
  AppLockManager.getInstance().enableDefaultAppLockIfAvailable(this);
  if (AppLockManager.getInstance().isAppLockFeatureEnabled()) {
    AppLockManager.getInstance().getCurrentAppLock().setDisabledActivities(new String[]{""String_Node_Str""});
  }
  AnalyticsTracker.registerTracker(new AnalyticsTrackerMixpanel());
  AnalyticsTracker.registerTracker(new AnalyticsTrackerWPCom());
  AnalyticsTracker.beginSession();
  AnalyticsTracker.track(AnalyticsTracker.Stat.APPLICATION_OPENED);
  super.onCreate();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    ApplicationLifecycleMonitor pnBackendMponitor=new ApplicationLifecycleMonitor();
    registerComponentCallbacks(pnBackendMponitor);
    registerActivityLifecycleCallbacks(pnBackendMponitor);
  }
  updateCurrentBlogStatsInBackground();
}","@Override public void onCreate(){
  ProfilingUtils.start(""String_Node_Str"");
  AppLog.enableRecording(true);
  if (!Utils.isDebugBuild()) {
    Crashlytics.start(this);
    AppLog.enableCrashlytics(true);
  }
  versionName=getVersionName(this);
  initWpDb();
  wpStatsDB=new WordPressStatsDB(this);
  mContext=this;
  setupVolleyQueue();
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
  if (settings.getInt(""String_Node_Str"",-1) >= 0) {
    shouldRestoreSelectedActivity=true;
  }
  registerForCloudMessaging(this);
  AppLockManager.getInstance().enableDefaultAppLockIfAvailable(this);
  if (AppLockManager.getInstance().isAppLockFeatureEnabled()) {
    AppLockManager.getInstance().getCurrentAppLock().setDisabledActivities(new String[]{""String_Node_Str""});
  }
  AnalyticsTracker.registerTracker(new AnalyticsTrackerMixpanel());
  AnalyticsTracker.registerTracker(new AnalyticsTrackerWPCom());
  AnalyticsTracker.beginSession();
  AnalyticsTracker.track(AnalyticsTracker.Stat.APPLICATION_OPENED);
  super.onCreate();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    ApplicationLifecycleMonitor pnBackendMponitor=new ApplicationLifecycleMonitor();
    registerComponentCallbacks(pnBackendMponitor);
    registerActivityLifecycleCallbacks(pnBackendMponitor);
  }
  updateCurrentBlogStatsInBackground(false);
}",0.9981745162468054
14710,"public synchronized static void updateCurrentBlogStatsInBackground(){
  if (statsLastPingDate != null) {
    Date now=new Date();
    long nowInMilliseconds=now.getTime();
    long lastPingDateInMilliseconds=statsLastPingDate.getTime();
    int secondsPassed=(int)(nowInMilliseconds - lastPingDateInMilliseconds) / (1000);
    if (secondsPassed < 30 * 60) {
      return;
    }
  }
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog != null) {
    String blogID=null;
    if (currentBlog.isDotcomFlag()) {
      blogID=String.valueOf(currentBlog.getRemoteBlogId());
    }
 else     if (currentBlog.isJetpackPowered() && currentBlog.hasValidJetpackCredentials()) {
      blogID=currentBlog.getApi_blogid();
    }
    if (blogID != null) {
      Intent intent=new Intent(mContext,StatsService.class);
      intent.putExtra(StatsService.ARG_BLOG_ID,blogID);
      mContext.startService(intent);
      statsLastPingDate=new Date();
    }
  }
}","public synchronized static void updateCurrentBlogStatsInBackground(boolean alwaysUpdate){
  if (!alwaysUpdate && mStatsLastPingDate != null) {
    Date now=new Date();
    long nowInMilliseconds=now.getTime();
    long lastPingDateInMilliseconds=mStatsLastPingDate.getTime();
    int secondsPassed=(int)(nowInMilliseconds - lastPingDateInMilliseconds) / (1000);
    if (secondsPassed < 30 * 60) {
      return;
    }
  }
  Blog currentBlog=WordPress.getCurrentBlog();
  if (currentBlog != null) {
    String blogID=null;
    if (currentBlog.isDotcomFlag()) {
      blogID=String.valueOf(currentBlog.getRemoteBlogId());
    }
 else     if (currentBlog.isJetpackPowered() && currentBlog.hasValidJetpackCredentials()) {
      blogID=currentBlog.getApi_blogid();
    }
    if (blogID != null) {
      Intent intent=new Intent(mContext,StatsService.class);
      intent.putExtra(StatsService.ARG_BLOG_ID,blogID);
      mContext.startService(intent);
      mStatsLastPingDate=new Date();
    }
  }
}",0.9763617677286742
14711,"/** 
 * This method is called when the user changes the active blog or hides all blogs
 */
public void onBlogChanged(){
  WordPress.wpDB.updateLastBlogId(WordPress.getCurrentLocalTableBlogId());
  Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
  while (itemIterator.hasNext()) {
    MenuDrawerItem item=itemIterator.next();
    if (item.isSelected() && !item.isVisible()) {
      if (mAdapter.getCount() > 0) {
        mAdapter.getItem(0).selectItem();
      }
      if (item.hasItemId()) {
        SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(WPActionBarActivity.this);
        SharedPreferences.Editor editor=settings.edit();
        editor.putInt(LAST_ACTIVITY_PREFERENCE,item.getItemId());
        editor.commit();
      }
      break;
    }
  }
  WordPress.statsLastPingDate=null;
  if (shouldUpdateCurrentBlogStatsInBackground()) {
    WordPress.updateCurrentBlogStatsInBackground();
  }
}","/** 
 * This method is called when the user changes the active blog or hides all blogs
 */
public void onBlogChanged(){
  WordPress.wpDB.updateLastBlogId(WordPress.getCurrentLocalTableBlogId());
  Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
  while (itemIterator.hasNext()) {
    MenuDrawerItem item=itemIterator.next();
    if (item.isSelected() && !item.isVisible()) {
      if (mAdapter.getCount() > 0) {
        mAdapter.getItem(0).selectItem();
      }
      if (item.hasItemId()) {
        SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(WPActionBarActivity.this);
        SharedPreferences.Editor editor=settings.edit();
        editor.putInt(LAST_ACTIVITY_PREFERENCE,item.getItemId());
        editor.commit();
      }
      break;
    }
  }
  if (shouldUpdateCurrentBlogStatsInBackground()) {
    WordPress.updateCurrentBlogStatsInBackground(true);
  }
}",0.97828447339848
14712,"private void refreshStats(){
  if (WordPress.getCurrentBlog() == null) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(this)) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (mIsUpdatingStats) {
    mPullToRefreshHelper.setRefreshing(false);
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  final String blogId;
  if (WordPress.getCurrentBlog().isDotcomFlag() && dotComCredentialsMatch()) {
    blogId=String.valueOf(WordPress.getCurrentBlog().getRemoteBlogId());
  }
 else {
    blogId=getBlogId();
    if (blogId == null) {
      new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new VerifyJetpackSettingsCallback(StatsActivity.this)).execute(false);
      return;
    }
  }
  if (!mHasVerifiedCreds) {
    verifyCredentials(blogId);
  }
  Intent intent=new Intent(this,StatsService.class);
  intent.putExtra(StatsService.ARG_BLOG_ID,blogId);
  startService(intent);
  WordPress.statsLastPingDate=new Date();
}","private void refreshStats(){
  if (WordPress.getCurrentBlog() == null) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (!NetworkUtils.isNetworkAvailable(this)) {
    mPullToRefreshHelper.setRefreshing(false);
    return;
  }
  if (mIsUpdatingStats) {
    mPullToRefreshHelper.setRefreshing(false);
    AppLog.w(T.STATS,""String_Node_Str"");
    return;
  }
  final String blogId;
  if (WordPress.getCurrentBlog().isDotcomFlag() && dotComCredentialsMatch()) {
    blogId=String.valueOf(WordPress.getCurrentBlog().getRemoteBlogId());
  }
 else {
    blogId=getBlogId();
    if (blogId == null) {
      new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new VerifyJetpackSettingsCallback(StatsActivity.this)).execute(false);
      return;
    }
  }
  if (!mHasVerifiedCreds) {
    verifyCredentials(blogId);
  }
  Intent intent=new Intent(this,StatsService.class);
  intent.putExtra(StatsService.ARG_BLOG_ID,blogId);
  startService(intent);
}",0.9789579158316634
14713,"public static void setIsFollowedBlogUrl(String url,boolean isFollowed){
  if (TextUtils.isEmpty(url))   return;
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  try {
    final String normUrl=UrlUtils.normalizeUrl(url);
    SQLiteStatement stmt=db.compileStatement(""String_Node_Str"");
    try {
      stmt.bindString(1,normUrl);
      stmt.bindLong(2,SqlUtils.boolToSql(isFollowed));
      stmt.execute();
    }
  finally {
      SqlUtils.closeStatement(stmt);
    }
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",SqlUtils.boolToSql(isFollowed));
    String[] args={normUrl};
    db.update(""String_Node_Str"",values,""String_Node_Str"",args);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}","private static void setIsFollowedBlogUrl(String url,boolean isFollowed,boolean updateBlogInfoTable){
  if (TextUtils.isEmpty(url)) {
    return;
  }
  String normUrl=UrlUtils.normalizeUrl(url);
  long sqlIsFollowed=SqlUtils.boolToSql(isFollowed);
  SQLiteStatement stmt=ReaderDatabase.getWritableDb().compileStatement(""String_Node_Str"");
  try {
    stmt.bindString(1,normUrl);
    stmt.bindLong(2,sqlIsFollowed);
    stmt.execute();
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
  if (updateBlogInfoTable) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",sqlIsFollowed);
    String[] args={normUrl};
    ReaderDatabase.getWritableDb().update(""String_Node_Str"",values,""String_Node_Str"",args);
  }
}",0.5597897503285151
14714,"public static boolean isFollowedBlogUrl(String url){
  if (TextUtils.isEmpty(url))   return false;
  String[] args={UrlUtils.normalizeUrl(url)};
  return SqlUtils.boolForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
}","public static boolean isFollowedBlogUrl(String url){
  if (TextUtils.isEmpty(url)) {
    return false;
  }
  String[] args={UrlUtils.normalizeUrl(url)};
  return SqlUtils.boolForQuery(ReaderDatabase.getReadableDb(),""String_Node_Str"",args);
}",0.9831223628691984
14715,"public static void setBlogInfo(ReaderBlogInfo blog){
  if (blog == null)   return;
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  SQLiteStatement stmt=ReaderDatabase.getWritableDb().compileStatement(sql);
  try {
    stmt.bindLong(1,blog.blogId);
    stmt.bindString(2,UrlUtils.normalizeUrl(blog.getUrl()));
    stmt.bindString(3,blog.getName());
    stmt.bindString(4,blog.getDescription());
    stmt.bindLong(5,SqlUtils.boolToSql(blog.isPrivate));
    stmt.bindLong(6,SqlUtils.boolToSql(blog.isJetpack));
    stmt.bindLong(7,SqlUtils.boolToSql(blog.isFollowing));
    stmt.bindLong(8,blog.numSubscribers);
    stmt.execute();
    stmt.clearBindings();
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
}","public static void setBlogInfo(ReaderBlogInfo blogInfo){
  if (blogInfo == null) {
    return;
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  SQLiteStatement stmt=ReaderDatabase.getWritableDb().compileStatement(sql);
  try {
    stmt.bindLong(1,blogInfo.blogId);
    stmt.bindString(2,UrlUtils.normalizeUrl(blogInfo.getUrl()));
    stmt.bindString(3,blogInfo.getName());
    stmt.bindString(4,blogInfo.getDescription());
    stmt.bindLong(5,SqlUtils.boolToSql(blogInfo.isPrivate));
    stmt.bindLong(6,SqlUtils.boolToSql(blogInfo.isJetpack));
    stmt.bindLong(7,SqlUtils.boolToSql(blogInfo.isFollowing));
    stmt.bindLong(8,blogInfo.numSubscribers);
    stmt.execute();
    stmt.clearBindings();
  }
  finally {
    SqlUtils.closeStatement(stmt);
  }
  setIsFollowedBlogUrl(blogInfo.getUrl(),blogInfo.isFollowing,false);
}",0.9258793969849246
14716,"public static void setFollowedBlogUrls(ReaderUrlList urls){
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  SQLiteStatement stmtUrl=db.compileStatement(""String_Node_Str"");
  SQLiteStatement stmtInfo=db.compileStatement(""String_Node_Str"");
  try {
    long sqlTrue=SqlUtils.boolToSql(true);
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    if (urls != null && urls.size() > 0) {
      for (      String url : urls) {
        String normUrl=UrlUtils.normalizeUrl(url);
        stmtUrl.bindString(1,normUrl);
        stmtUrl.bindLong(2,sqlTrue);
        stmtUrl.execute();
        stmtUrl.clearBindings();
        stmtInfo.bindLong(1,sqlTrue);
        stmtInfo.bindString(2,normUrl);
        stmtInfo.execute();
        stmtInfo.clearBindings();
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    SqlUtils.closeStatement(stmtUrl);
    SqlUtils.closeStatement(stmtInfo);
  }
}","public static void setFollowedBlogUrls(ReaderUrlList urls){
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  SQLiteStatement stmtUrl=db.compileStatement(""String_Node_Str"");
  SQLiteStatement stmtInfo=db.compileStatement(""String_Node_Str"");
  try {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    if (urls != null && urls.size() > 0) {
      long sqlTrue=SqlUtils.boolToSql(true);
      for (      String url : urls) {
        String normUrl=UrlUtils.normalizeUrl(url);
        stmtUrl.bindString(1,normUrl);
        stmtUrl.bindLong(2,sqlTrue);
        stmtUrl.execute();
        stmtUrl.clearBindings();
        stmtInfo.bindLong(1,sqlTrue);
        stmtInfo.bindString(2,normUrl);
        stmtInfo.execute();
        stmtInfo.clearBindings();
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    SqlUtils.closeStatement(stmtUrl);
    SqlUtils.closeStatement(stmtInfo);
  }
}",0.9547325102880658
14717,"private void requestBlogInfo(final long blogId){
  if (!mHasBlogInfo) {
    showProgress();
  }
  ReaderActions.RequestBlogInfoListener listener=new ReaderActions.RequestBlogInfoListener(){
    @Override public void onResult(    ReaderBlogInfo blogInfo){
      hideProgress();
      if (blogInfo != null) {
        showBlogInfo(blogInfo);
      }
    }
  }
;
  ReaderBlogActions.updateBlogInfo(blogId,listener);
}","private void requestBlogInfo(final long blogId){
  if (!mHasBlogInfo) {
    showProgress();
  }
  ReaderActions.UpdateBlogInfoListener listener=new ReaderActions.UpdateBlogInfoListener(){
    @Override public void onResult(    ReaderBlogInfo blogInfo){
      hideProgress();
      if (blogInfo != null) {
        showBlogInfo(blogInfo);
      }
    }
  }
;
  ReaderBlogActions.updateBlogInfo(blogId,listener);
}",0.9684466019417476
14718,"private void showBlogInfo(final ReaderBlogInfo blogInfo){
  final TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  final TextView txtDescription=(TextView)findViewById(R.id.text_blog_description);
  final TextView txtFollowCnt=(TextView)findViewById(R.id.text_follow_count);
  final TextView txtFollowBtn=(TextView)findViewById(R.id.text_follow_blog);
  final View divider=findViewById(R.id.divider);
  final View spacer=findViewById(R.id.view_header_image_spacer);
  mHasBlogInfo=(blogInfo != null);
  if (mHasBlogInfo) {
    txtBlogName.setText(blogInfo.getName());
    txtDescription.setText(blogInfo.getDescription());
    txtDescription.setVisibility(blogInfo.hasDescription() ? View.VISIBLE : View.GONE);
    String numFollowers=getResources().getString(R.string.reader_label_followers,FormatUtils.formatInt(blogInfo.numSubscribers));
    txtFollowCnt.setText(numFollowers);
    boolean isFollowing=ReaderBlogTable.isFollowedBlogUrl(blogInfo.getUrl());
    showBlogFollowStatus(txtFollowBtn,isFollowing);
    txtFollowBtn.setVisibility(View.VISIBLE);
    divider.setVisibility(View.VISIBLE);
    View.OnClickListener urlListener=new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.openUrl(getContext(),blogInfo.getUrl());
      }
    }
;
    spacer.setOnClickListener(urlListener);
    txtBlogName.setOnClickListener(urlListener);
    txtFollowBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleBlogFollowStatus(txtFollowBtn,blogInfo);
      }
    }
);
    if (mListener != null) {
      mListener.onBlogInfoShown(blogInfo);
    }
  }
 else {
    txtFollowBtn.setVisibility(View.INVISIBLE);
    divider.setVisibility(View.INVISIBLE);
  }
}","private void showBlogInfo(final ReaderBlogInfo blogInfo){
  final TextView txtBlogName=(TextView)findViewById(R.id.text_blog_name);
  final TextView txtDescription=(TextView)findViewById(R.id.text_blog_description);
  final TextView txtFollowCnt=(TextView)findViewById(R.id.text_follow_count);
  final TextView txtFollowBtn=(TextView)findViewById(R.id.text_follow_blog);
  final View divider=findViewById(R.id.divider);
  final View spacer=findViewById(R.id.view_header_image_spacer);
  mHasBlogInfo=(blogInfo != null);
  if (mHasBlogInfo) {
    txtBlogName.setText(blogInfo.getName());
    txtDescription.setText(blogInfo.getDescription());
    txtDescription.setVisibility(blogInfo.hasDescription() ? View.VISIBLE : View.GONE);
    String numFollowers=getResources().getString(R.string.reader_label_followers,FormatUtils.formatInt(blogInfo.numSubscribers));
    txtFollowCnt.setText(numFollowers);
    showBlogFollowStatus(txtFollowBtn,blogInfo.isFollowing);
    txtFollowBtn.setVisibility(View.VISIBLE);
    divider.setVisibility(View.VISIBLE);
    View.OnClickListener urlListener=new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.openUrl(getContext(),blogInfo.getUrl());
      }
    }
;
    spacer.setOnClickListener(urlListener);
    txtBlogName.setOnClickListener(urlListener);
    txtFollowBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleBlogFollowStatus(txtFollowBtn,blogInfo);
      }
    }
);
    if (mListener != null) {
      mListener.onBlogInfoShown(blogInfo);
    }
  }
 else {
    txtFollowBtn.setVisibility(View.INVISIBLE);
    divider.setVisibility(View.INVISIBLE);
  }
}",0.96490727532097
14719,"private void toggleBlogFollowStatus(TextView txtFollow,ReaderBlogInfo blogInfo){
  if (blogInfo == null || txtFollow == null) {
    return;
  }
  AniUtils.zoomAction(txtFollow);
  boolean isCurrentlyFollowing=ReaderBlogTable.isFollowedBlogUrl(blogInfo.getUrl());
  boolean isAskingToFollow=!isCurrentlyFollowing;
  if (ReaderBlogActions.performFollowAction(blogInfo.blogId,blogInfo.getUrl(),isAskingToFollow)) {
    boolean isNowFollowing=!isCurrentlyFollowing;
    showBlogFollowStatus(txtFollow,isNowFollowing);
  }
}","private void toggleBlogFollowStatus(TextView txtFollow,ReaderBlogInfo blogInfo){
  if (blogInfo == null || txtFollow == null) {
    return;
  }
  AniUtils.zoomAction(txtFollow);
  boolean isAskingToFollow=!blogInfo.isFollowing;
  if (ReaderBlogActions.performFollowAction(blogInfo.blogId,blogInfo.getUrl(),isAskingToFollow)) {
    showBlogFollowStatus(txtFollow,isAskingToFollow);
  }
}",0.7116022099447514
14720,"private void updatePostsWithCurrentTag(RequestDataAction updateAction){
  if (hasCurrentTag()) {
    updatePostsWithTag(mCurrentTag,updateAction,RefreshType.MANUAL);
  }
}","private void updatePostsWithCurrentTag(RequestDataAction updateAction){
  if (hasCurrentTag()) {
    updatePostsWithTag(mCurrentTag,updateAction,RefreshType.AUTOMATIC);
  }
}",0.9681159420289857
14721,"public static void updateBlogInfo(long blogId,final ReaderActions.RequestBlogInfoListener infoListener){
  RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      handleUpdateBlogInfoResponse(jsonObject,infoListener);
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.READER,volleyError);
      if (infoListener != null) {
        infoListener.onResult(null);
      }
    }
  }
;
  WordPress.getRestClientUtils().get(""String_Node_Str"" + blogId,listener,errorListener);
}","public static void updateBlogInfo(long blogId,final ReaderActions.UpdateBlogInfoListener infoListener){
  RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      handleUpdateBlogInfoResponse(jsonObject,infoListener);
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.READER,volleyError);
      if (infoListener != null) {
        infoListener.onResult(null);
      }
    }
  }
;
  WordPress.getRestClientUtils().get(""String_Node_Str"" + blogId,listener,errorListener);
}",0.9902767389678384
14722,"public static boolean performFollowAction(final long blogId,final String blogUrl,final boolean isAskingToFollow){
  if (TextUtils.isEmpty(blogUrl)) {
    return false;
  }
  final boolean isCurrentlyFollowing=ReaderBlogTable.isFollowedBlogUrl(blogUrl);
  if (isCurrentlyFollowing == isAskingToFollow) {
    return true;
  }
  final String path;
  final String actionName=(isAskingToFollow ? ""String_Node_Str"" : ""String_Node_Str"");
  final String domain=UrlUtils.getDomainFromUrl(blogUrl);
  if (isAskingToFollow) {
    if (blogId != 0) {
      path=""String_Node_Str"" + blogId + ""String_Node_Str"";
    }
 else {
      path=""String_Node_Str"" + domain;
    }
  }
 else {
    if (blogId != 0) {
      path=""String_Node_Str"" + blogId + ""String_Node_Str"";
    }
 else {
      path=""String_Node_Str"" + domain;
    }
  }
  ReaderBlogTable.setIsFollowedBlogUrl(blogUrl,isAskingToFollow);
  ReaderPostTable.setFollowStatusForPostsInBlog(blogId,isAskingToFollow);
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      AppLog.d(T.READER,""String_Node_Str"" + actionName + ""String_Node_Str"");
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.w(T.READER,""String_Node_Str"" + actionName + ""String_Node_Str"");
      AppLog.e(T.READER,volleyError);
      ReaderBlogTable.setIsFollowedBlogUrl(blogUrl,isCurrentlyFollowing);
      ReaderPostTable.setFollowStatusForPostsInBlog(blogId,isCurrentlyFollowing);
    }
  }
;
  WordPress.getRestClientUtils().post(path,listener,errorListener);
  return true;
}","public static boolean performFollowAction(final long blogId,final String blogUrl,final boolean isAskingToFollow){
  final boolean hasBlogId=(blogId != 0);
  final boolean hasBlogUrl=!TextUtils.isEmpty(blogUrl);
  if (!hasBlogId && !hasBlogUrl) {
    return false;
  }
  if (hasBlogUrl) {
    boolean isCurrentlyFollowing=ReaderBlogTable.isFollowedBlogUrl(blogUrl);
    if (isCurrentlyFollowing == isAskingToFollow) {
      return true;
    }
  }
  final String path;
  final String actionName=(isAskingToFollow ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isAskingToFollow) {
    if (hasBlogId) {
      path=""String_Node_Str"" + blogId + ""String_Node_Str"";
    }
 else {
      path=""String_Node_Str"" + UrlUtils.getDomainFromUrl(blogUrl);
      AppLog.w(T.READER,""String_Node_Str"");
    }
  }
 else {
    if (hasBlogId) {
      path=""String_Node_Str"" + blogId + ""String_Node_Str"";
    }
 else {
      path=""String_Node_Str"" + UrlUtils.getDomainFromUrl(blogUrl);
      AppLog.w(T.READER,""String_Node_Str"");
    }
  }
  if (hasBlogUrl) {
    ReaderBlogTable.setIsFollowedBlogUrl(blogUrl,isAskingToFollow);
  }
  if (hasBlogId) {
    ReaderPostTable.setFollowStatusForPostsInBlog(blogId,isAskingToFollow);
  }
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      AppLog.d(T.READER,""String_Node_Str"" + actionName + ""String_Node_Str"");
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.w(T.READER,""String_Node_Str"" + actionName + ""String_Node_Str"");
      AppLog.e(T.READER,volleyError);
      if (hasBlogUrl) {
        ReaderBlogTable.setIsFollowedBlogUrl(blogUrl,!isAskingToFollow);
      }
      if (hasBlogId) {
        ReaderPostTable.setFollowStatusForPostsInBlog(blogId,!isAskingToFollow);
      }
    }
  }
;
  WordPress.getRestClientUtils().post(path,listener,errorListener);
  return true;
}",0.4402583423035522
14723,"private static void handleUpdateBlogInfoResponse(JSONObject jsonObject,ReaderActions.RequestBlogInfoListener infoListener){
  if (jsonObject == null) {
    if (infoListener != null) {
      infoListener.onResult(null);
    }
    return;
  }
  ReaderBlogInfo blogInfo=ReaderBlogInfo.fromJson(jsonObject);
  ReaderBlogTable.setBlogInfo(blogInfo);
  if (infoListener != null) {
    infoListener.onResult(blogInfo);
  }
}","private static void handleUpdateBlogInfoResponse(JSONObject jsonObject,ReaderActions.UpdateBlogInfoListener infoListener){
  if (jsonObject == null) {
    if (infoListener != null) {
      infoListener.onResult(null);
    }
    return;
  }
  ReaderBlogInfo blogInfo=ReaderBlogInfo.fromJson(jsonObject);
  ReaderBlogTable.setBlogInfo(blogInfo);
  if (infoListener != null) {
    infoListener.onResult(blogInfo);
  }
}",0.9843937575030012
14724,"/** 
 * follow/unfollow the blog the passed post is in
 */
public static boolean performFollowAction(final ReaderPost post,final boolean isAskingToFollow){
  final ReaderPost originalPost=ReaderPostTable.getPost(post.blogId,post.postId);
  if (originalPost != null && originalPost.isFollowedByCurrentUser == isAskingToFollow) {
    return true;
  }
  post.isFollowedByCurrentUser=isAskingToFollow;
  ReaderPostTable.addOrUpdatePost(post);
  ReaderPostTable.setFollowStatusForPostsInBlog(post.blogId,isAskingToFollow);
  final String actionName=isAskingToFollow ? ""String_Node_Str"" : ""String_Node_Str"";
  String path=""String_Node_Str"" + post.blogId + ""String_Node_Str"";
  if (isAskingToFollow) {
    path+=""String_Node_Str"";
  }
 else {
    path+=""String_Node_Str"";
  }
  if (post.hasBlogUrl()) {
    ReaderBlogTable.setIsFollowedBlogUrl(post.getBlogUrl(),isAskingToFollow);
  }
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      AppLog.d(T.READER,String.format(""String_Node_Str"",actionName));
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      String error=VolleyUtils.errStringFromVolleyError(volleyError);
      if (TextUtils.isEmpty(error)) {
        AppLog.w(T.READER,String.format(""String_Node_Str"",actionName));
      }
 else {
        AppLog.w(T.READER,String.format(""String_Node_Str"",actionName,error));
      }
      AppLog.e(T.READER,volleyError);
      if (originalPost != null) {
        ReaderPostTable.addOrUpdatePost(originalPost);
        ReaderPostTable.setFollowStatusForPostsInBlog(originalPost.blogId,originalPost.isFollowedByCurrentUser);
        if (originalPost.hasBlogUrl()) {
          ReaderBlogTable.setIsFollowedBlogUrl(post.getBlogUrl(),originalPost.isFollowedByCurrentUser);
        }
      }
    }
  }
;
  WordPress.getRestClientUtils().post(path,listener,errorListener);
  return true;
}","/** 
 * follow/unfollow the blog the passed post is in TODO: this duplicates ReaderBlogActions.performFollowAction
 */
public static boolean performFollowAction(final ReaderPost post,final boolean isAskingToFollow){
  final ReaderPost originalPost=ReaderPostTable.getPost(post.blogId,post.postId);
  if (originalPost != null && originalPost.isFollowedByCurrentUser == isAskingToFollow) {
    return true;
  }
  post.isFollowedByCurrentUser=isAskingToFollow;
  ReaderPostTable.addOrUpdatePost(post);
  ReaderPostTable.setFollowStatusForPostsInBlog(post.blogId,isAskingToFollow);
  final String actionName=isAskingToFollow ? ""String_Node_Str"" : ""String_Node_Str"";
  String path=""String_Node_Str"" + post.blogId + ""String_Node_Str"";
  if (isAskingToFollow) {
    path+=""String_Node_Str"";
  }
 else {
    path+=""String_Node_Str"";
  }
  if (post.hasBlogUrl()) {
    ReaderBlogTable.setIsFollowedBlogUrl(post.getBlogUrl(),isAskingToFollow);
  }
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      AppLog.d(T.READER,String.format(""String_Node_Str"",actionName));
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      String error=VolleyUtils.errStringFromVolleyError(volleyError);
      if (TextUtils.isEmpty(error)) {
        AppLog.w(T.READER,String.format(""String_Node_Str"",actionName));
      }
 else {
        AppLog.w(T.READER,String.format(""String_Node_Str"",actionName,error));
      }
      AppLog.e(T.READER,volleyError);
      if (originalPost != null) {
        ReaderPostTable.addOrUpdatePost(originalPost);
        ReaderPostTable.setFollowStatusForPostsInBlog(originalPost.blogId,originalPost.isFollowedByCurrentUser);
        if (originalPost.hasBlogUrl()) {
          ReaderBlogTable.setIsFollowedBlogUrl(post.getBlogUrl(),originalPost.isFollowedByCurrentUser);
        }
      }
    }
  }
;
  WordPress.getRestClientUtils().post(path,listener,errorListener);
  return true;
}",0.98545101842871
14725,"@SuppressLint(""String_Node_Str"") private void loadPosts(){
  if (mIsTaskRunning)   AppLog.w(T.READER,""String_Node_Str"");
  if (SysUtils.canUseExecuteOnExecutor()) {
    new LoadPostsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
 else {
    new LoadPostsTask().execute();
  }
}","@SuppressLint(""String_Node_Str"") private void loadPosts(){
  if (mIsTaskRunning) {
    AppLog.w(T.READER,""String_Node_Str"");
  }
  if (SysUtils.canUseExecuteOnExecutor()) {
    new LoadPostsTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
 else {
    new LoadPostsTask().execute();
  }
}",0.9864864864864864
14726,"public WPDelayedHurlStack(final Context ctx,final Blog currentBlog){
  mCurrentBlog=currentBlog;
  mCtx=ctx;
  Thread SSLContextInitializer=new Thread(){
    @Override public void run(){
      try {
        TrustManager[] trustAllowedCerts=new TrustManager[]{new WPTrustManager(SelfSignedSSLCertsManager.getInstance(ctx).getLocalKeyStore())};
        SSLContext context=SSLContext.getInstance(""String_Node_Str"");
        context.init(null,trustAllowedCerts,new SecureRandom());
        mSslSocketFactory=context.getSocketFactory();
      }
 catch (      NoSuchAlgorithmException e) {
        AppLog.e(T.API,e);
      }
catch (      KeyManagementException e) {
        AppLog.e(T.API,e);
      }
catch (      GeneralSecurityException e) {
        AppLog.e(T.API,e);
      }
catch (      IOException e) {
        AppLog.e(T.API,e);
      }
    }
  }
;
  SSLContextInitializer.start();
}","public WPDelayedHurlStack(final Context ctx,final Blog currentBlog){
  mCurrentBlog=currentBlog;
  mCtx=ctx;
  Thread sslContextInitializer=new Thread(){
    @Override public void run(){
      try {
        TrustManager[] trustAllowedCerts=new TrustManager[]{new WPTrustManager(SelfSignedSSLCertsManager.getInstance(ctx).getLocalKeyStore())};
        SSLContext context=SSLContext.getInstance(""String_Node_Str"");
        context.init(null,trustAllowedCerts,new SecureRandom());
        mSslSocketFactory=context.getSocketFactory();
      }
 catch (      NoSuchAlgorithmException e) {
        AppLog.e(T.API,e);
      }
catch (      KeyManagementException e) {
        AppLog.e(T.API,e);
      }
catch (      GeneralSecurityException e) {
        AppLog.e(T.API,e);
      }
catch (      IOException e) {
        AppLog.e(T.API,e);
      }
    }
  }
;
  sslContextInitializer.start();
}",0.993212669683258
14727,"private void showDetailFragment(long blogId,long postId){
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
  String tagForFragment=getString(R.string.fragment_tag_reader_post_detail);
  Fragment fragment=ReaderPostDetailFragment.newInstance(blogId,postId,mIsBlogDetail);
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  if (hasListFragment()) {
    ft.replace(R.id.fragment_container,fragment,tagForFragment);
    ft.addToBackStack(tagForFragment);
  }
 else {
    ft.add(R.id.fragment_container,fragment,tagForFragment);
  }
  ft.commit();
}","private void showDetailFragment(long blogId,long postId){
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
  String tagForFragment=getString(R.string.fragment_tag_reader_post_detail);
  Fragment fragment=ReaderPostDetailFragment.newInstance(blogId,postId,mIsBlogDetail);
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  ft.add(R.id.fragment_container,fragment,tagForFragment);
  if (hasListFragment()) {
    ft.addToBackStack(tagForFragment);
  }
  ft.commit();
}",0.8166259168704156
14728,"private void loadHeaderImage(final ReaderBlogInfo blogInfo){
  if (blogInfo == null || blogInfo.isPrivate) {
    return;
  }
  WPNetworkImageView.ImageListener imageListener=new WPNetworkImageView.ImageListener(){
    @Override public void onImageLoaded(    boolean succeeded){
      if (hasActivity() && succeeded) {
        scaleHeaderImage();
        mHasLoadedHeaderImage=true;
      }
    }
  }
;
  final String imageUrl=blogInfo.getMshotsUrl(mHeaderImageWidth);
  mHeaderImage.setImageUrl(imageUrl,WPNetworkImageView.ImageType.MSHOT,imageListener);
}","private void loadHeaderImage(final ReaderBlogInfo blogInfo){
  if (blogInfo == null || blogInfo.isPrivate) {
    return;
  }
  WPNetworkImageView.ImageListener imageListener=new WPNetworkImageView.ImageListener(){
    @Override public void onImageLoaded(    boolean succeeded){
      if (succeeded && hasActivity()) {
        scaleHeaderImage();
        mHasLoadedHeaderImage=true;
      }
    }
  }
;
  final String imageUrl=blogInfo.getMshotsUrl(mHeaderImageWidth);
  mHeaderImage.setImageUrl(imageUrl,WPNetworkImageView.ImageType.MSHOT,imageListener);
}",0.960431654676259
14729,"void updatePostsInCurrentBlog(final RequestDataAction updateAction){
  setIsUpdating(true,updateAction);
  ReaderPostActions.requestPostsForBlog(mCurrentBlogId,updateAction,new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!hasActivity()) {
        return;
      }
      setIsUpdating(false,updateAction);
      if (succeeded) {
        refreshPosts();
      }
    }
  }
);
}","void updatePostsInCurrentBlog(final RequestDataAction updateAction){
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  ReaderPostActions.requestPostsForBlog(mCurrentBlogId,updateAction,new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!hasActivity()) {
        return;
      }
      setIsUpdating(false,updateAction);
      if (succeeded) {
        refreshPosts();
      }
    }
  }
);
}",0.8834853090172239
14730,"@Override public void onImageLoaded(boolean succeeded){
  if (hasActivity() && succeeded) {
    scaleHeaderImage();
    mHasLoadedHeaderImage=true;
  }
}","@Override public void onImageLoaded(boolean succeeded){
  if (succeeded && hasActivity()) {
    scaleHeaderImage();
    mHasLoadedHeaderImage=true;
  }
}",0.915032679738562
14731,"private void scaleHeaderImage(){
  if (!hasActivity()) {
    return;
  }
  final View firstChild=mListView.getChildAt(0);
  int top=(firstChild != null ? firstChild.getTop() : 0);
  float scale=0.9f + (top * 0.0005f);
  if (scale <= 0 || scale == mPreviousHeaderImageScale) {
    return;
  }
  float centerX=mHeaderImageWidth * 0.5f;
  Matrix matrix=new Matrix();
  matrix.setScale(scale,scale,centerX,0);
  mHeaderImage.setImageMatrix(matrix);
  mPreviousHeaderImageScale=scale;
}","private void scaleHeaderImage(){
  if (!hasActivity()) {
    return;
  }
  int top=mListView.getFirstChildTop();
  float scale=0.9f + (top * 0.0005f);
  if (scale <= 0 || scale == mPreviousHeaderImageScale) {
    return;
  }
  mPreviousHeaderImageScale=scale;
  float centerX=mHeaderImageWidth * 0.5f;
  Matrix matrix=new Matrix();
  matrix.setScale(scale,scale,centerX,0);
  mHeaderImage.setImageMatrix(matrix);
}",0.8022346368715084
14732,"private void checkActionBar(){
  final ActionBar actionBar=getActionBar();
  if (actionBar == null || actionBar.getNavigationMode() == ActionBar.NAVIGATION_MODE_LIST)   return;
switch (getPostListType()) {
case TAG:
    actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
actionBar.setListNavigationCallbacks(getActionBarAdapter(),this);
selectTagInActionBar(getCurrentTag());
break;
default :
actionBar.setDisplayShowTitleEnabled(true);
actionBar.setDisplayHomeAsUpEnabled(true);
actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
break;
}
}","private void checkActionBar(){
  final ActionBar actionBar=getActionBar();
  if (actionBar == null)   return;
switch (getPostListType()) {
case TAG:
    if (actionBar.getNavigationMode() != ActionBar.NAVIGATION_MODE_LIST) {
      actionBar.setDisplayShowTitleEnabled(false);
      actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
      actionBar.setListNavigationCallbacks(getActionBarAdapter(),this);
      selectTagInActionBar(getCurrentTag());
    }
  break;
default :
actionBar.setDisplayShowTitleEnabled(true);
actionBar.setDisplayHomeAsUpEnabled(true);
actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
break;
}
}",0.890302066772655
14733,"private boolean isCurrentTag(final String tagName){
  if (!hasCurrentTag() || TextUtils.isEmpty(tagName))   return false;
  return (mCurrentTag.equalsIgnoreCase(tagName));
}","private boolean isCurrentTag(final String tagName){
  if (!hasCurrentTag() || TextUtils.isEmpty(tagName)) {
    return false;
  }
  return (mCurrentTag.equalsIgnoreCase(tagName));
}",0.9774011299435028
14734,"private ReaderActionBarTagAdapter getActionBarAdapter(){
  if (mActionBarAdapter == null) {
    ReaderActions.DataLoadedListener dataListener=new ReaderActions.DataLoadedListener(){
      @Override public void onDataLoaded(      boolean isEmpty){
        if (!hasActivity())         return;
        AppLog.d(T.READER,""String_Node_Str"");
        selectTagInActionBar(getCurrentTag());
      }
    }
;
    boolean isStaticMenuDrawer;
    if (getActivity() instanceof WPActionBarActivity) {
      isStaticMenuDrawer=((WPActionBarActivity)getActivity()).isStaticMenuDrawer();
    }
 else {
      isStaticMenuDrawer=false;
    }
    mActionBarAdapter=new ReaderActionBarTagAdapter(getActivity(),isStaticMenuDrawer,dataListener);
  }
  return mActionBarAdapter;
}","private ReaderActionBarTagAdapter getActionBarAdapter(){
  if (mActionBarAdapter == null) {
    AppLog.d(T.READER,""String_Node_Str"");
    ReaderActions.DataLoadedListener dataListener=new ReaderActions.DataLoadedListener(){
      @Override public void onDataLoaded(      boolean isEmpty){
        if (!hasActivity())         return;
        AppLog.d(T.READER,""String_Node_Str"");
        selectTagInActionBar(getCurrentTag());
      }
    }
;
    mActionBarAdapter=new ReaderActionBarTagAdapter(getActivity(),hasStaticMenuDrawer(),dataListener);
  }
  return mActionBarAdapter;
}",0.6337078651685393
14735,"private void selectTagInActionBar(final String tagName){
  if (TextUtils.isEmpty(tagName))   return;
  ActionBar actionBar=getActionBar();
  if (actionBar == null)   return;
  int position=getActionBarAdapter().getIndexOfTagName(tagName);
  if (position == -1 || position == actionBar.getSelectedNavigationIndex())   return;
  if (actionBar.getNavigationMode() != ActionBar.NAVIGATION_MODE_LIST) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  actionBar.setSelectedNavigationItem(position);
}","private void selectTagInActionBar(final String tagName){
  if (TextUtils.isEmpty(tagName))   return;
  ActionBar actionBar=getActionBar();
  if (actionBar == null) {
    return;
  }
  int position=getActionBarAdapter().getIndexOfTagName(tagName);
  if (position == -1 || position == actionBar.getSelectedNavigationIndex()) {
    return;
  }
  if (actionBar.getNavigationMode() != ActionBar.NAVIGATION_MODE_LIST) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  actionBar.setSelectedNavigationItem(position);
}",0.9844357976653696
14736,"private void checkCurrentTag(){
  if (hasCurrentTag() && !ReaderTagTable.tagExists(getCurrentTag()))   mCurrentTag=ReaderTag.TAG_NAME_DEFAULT;
}","private void checkCurrentTag(){
  if (hasCurrentTag() && !ReaderTagTable.tagExists(getCurrentTag())) {
    mCurrentTag=ReaderTag.TAG_NAME_DEFAULT;
  }
}",0.972972972972973
14737,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  checkActionBar();
  mListView.setAdapter(getPostAdapter());
switch (getPostListType()) {
case TAG:
    getPostAdapter().setCurrentTag(mCurrentTag);
  if (ReaderTagTable.shouldAutoUpdateTag(mCurrentTag)) {
    updatePostsWithCurrentTag(RequestDataAction.LOAD_NEWER);
  }
break;
case BLOG:
getPostAdapter().setCurrentBlog(mCurrentBlogId);
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  checkActionBar();
  boolean adapterAlreadyExists=hasPostAdapter();
  mListView.setAdapter(getPostAdapter());
  if (!adapterAlreadyExists) {
switch (getPostListType()) {
case TAG:
      getPostAdapter().setCurrentTag(mCurrentTag);
    if (ReaderTagTable.shouldAutoUpdateTag(mCurrentTag)) {
      updatePostsWithCurrentTag(RequestDataAction.LOAD_NEWER);
    }
  break;
case BLOG:
getPostAdapter().setCurrentBlog(mCurrentBlogId);
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}",0.9224283305227656
14738,"private ReaderPostAdapter getPostAdapter(){
  if (mPostAdapter == null)   mPostAdapter=new ReaderPostAdapter(getActivity(),getPostListType(),mReblogListener,mDataLoadedListener,mDataRequestedListener);
  return mPostAdapter;
}","private ReaderPostAdapter getPostAdapter(){
  if (mPostAdapter == null) {
    AppLog.d(T.READER,""String_Node_Str"");
    mPostAdapter=new ReaderPostAdapter(getActivity(),getPostListType(),mReblogListener,mDataLoadedListener,mDataRequestedListener);
  }
  return mPostAdapter;
}",0.900398406374502
14739,"@Override public void onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu,com.actionbarsherlock.view.MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  menu.clear();
switch (getPostListType()) {
case TAG:
    inflater.inflate(R.menu.reader_native,menu);
  checkActionBar();
break;
case BLOG:
inflater.inflate(R.menu.basic_menu,menu);
break;
}
}","@Override public void onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu,com.actionbarsherlock.view.MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
switch (getPostListType()) {
case TAG:
    inflater.inflate(R.menu.reader_native,menu);
  checkActionBar();
break;
case BLOG:
inflater.inflate(R.menu.basic_menu,menu);
break;
}
}",0.9777777777777776
14740,"@Override public void onClick(View view){
}","@Override public void onClick(View view){
  reloadPosts(true);
  hideNewPostsBar();
}",0.671875
14741,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final Context context=container.getContext();
  final View view=inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  boolean hasTransparentActionBar=isFullScreenSupported();
  mListView=(ListView)view.findViewById(android.R.id.list);
  mListView.setOnTouchListener(this);
  mImageMshot=(WPNetworkImageView)view.findViewById(R.id.image_mshot);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (hasTransparentActionBar) {
    final int actionbarHeight=DisplayUtils.getActionBarHeight(context);
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)mNewPostsBar.getLayoutParams();
    params.topMargin=actionbarHeight;
  }
switch (getPostListType()) {
case BLOG:
    if (hasTransparentActionBar) {
    }
  mImageMshot.setVisibility(View.VISIBLE);
mImageMshot.setScaleType(ImageView.ScaleType.MATRIX);
ReaderBlogInfoHeader header=new ReaderBlogInfoHeader(context);
mListView.addHeaderView(header);
ReaderBlogInfoHeader.OnBlogInfoListener infoListener=new ReaderBlogInfoHeader.OnBlogInfoListener(){
@Override public void onBlogInfoShown(ReaderBlogInfo blogInfo){
if (hasActivity() && TextUtils.isEmpty(mImageMshot.getUrl())) {
int width=DisplayUtils.getDisplayPixelWidth(getActivity());
mImageMshot.setImageUrl(blogInfo.getMshotsUrl(width),WPNetworkImageView.ImageType.PHOTO);
}
}
}
;
header.setBlogId(mCurrentBlogId,infoListener);
break;
case TAG:
mImageMshot.setVisibility(View.GONE);
if (hasTransparentActionBar) {
ReaderFullScreenUtils.addListViewHeader(context,mListView);
}
break;
}
mEmptyView=view.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
if (getPostListType() == ReaderPostListType.TAG) {
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
updatePostsWithCurrentTag(ReaderActions.RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
}
}
);
}
return view;
}",0.0706113108859104
14742,"private void showDetailFragment(long blogId,long postId){
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
  String tagForFragment=getString(R.string.fragment_tag_reader_post_detail);
  Fragment fragment=ReaderPostDetailFragment.newInstance(blogId,postId);
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  if (hasListFragment()) {
    ft.replace(R.id.fragment_container,fragment,tagForFragment);
    ft.addToBackStack(tagForFragment);
  }
 else {
    ft.add(R.id.fragment_container,fragment,tagForFragment);
  }
  ft.commit();
}","private void showDetailFragment(long blogId,long postId){
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_OPENED_ARTICLE);
  String tagForFragment=getString(R.string.fragment_tag_reader_post_detail);
  Fragment fragment=ReaderPostDetailFragment.newInstance(blogId,postId);
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  ft.add(R.id.fragment_container,fragment,tagForFragment);
  if (hasListFragment()) {
    ft.add(R.id.fragment_container,fragment,tagForFragment);
  }
  ft.commit();
}",0.8288288288288288
14743,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  Context context=container.getContext();
  final View view=inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  mEmptyView=view.findViewById(R.id.empty_view);
  mListView.setOnScrollListener(this);
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      if (mPostSelectedListener != null) {
        position-=mListView.getHeaderViewsCount();
        ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
        if (post != null)         mPostSelectedListener.onPostSelected(post.blogId,post.postId);
      }
    }
  }
);
  mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
  mProgress.setVisibility(View.GONE);
  if (getPostListType() == ReaderPostListType.TAG) {
    mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
      @Override public void onRefreshStarted(      View view){
        if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
          mPullToRefreshHelper.setRefreshing(false);
          return;
        }
        updatePostsWithCurrentTag(ReaderActions.RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
      }
    }
);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  mEmptyView=view.findViewById(R.id.empty_view);
  mListView.setOnScrollListener(this);
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      if (mPostSelectedListener != null) {
        position-=mListView.getHeaderViewsCount();
        ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
        if (post != null)         mPostSelectedListener.onPostSelected(post.blogId,post.postId);
      }
    }
  }
);
  mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
  mProgress.setVisibility(View.GONE);
  if (getPostListType() == ReaderPostListType.TAG) {
    mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
      @Override public void onRefreshStarted(      View view){
        if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
          mPullToRefreshHelper.setRefreshing(false);
          return;
        }
        updatePostsWithCurrentTag(ReaderActions.RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
      }
    }
);
  }
  return view;
}",0.9882022471910112
14744,"@Override public void onCreate(Bundle savedInstanceState){
  if (isFullScreenSupported())   ReaderFullScreenUtils.enableActionBarOverlay(this);
  super.onCreate(savedInstanceState);
  createMenuDrawer(R.layout.reader_activity_main);
  getSupportFragmentManager().addOnBackStackChangedListener(this);
  final ReaderFragmentType fragmentType;
  if (getIntent().hasExtra(ARG_READER_FRAGMENT)) {
    fragmentType=(ReaderFragmentType)getIntent().getSerializableExtra(ARG_READER_FRAGMENT);
  }
 else {
    fragmentType=ReaderFragmentType.POST_LIST;
  }
switch (fragmentType) {
case POST_LIST:
    String tagName=getIntent().getStringExtra(ReaderActivity.ARG_TAG_NAME);
  if (TextUtils.isEmpty(tagName))   tagName=UserPrefs.getReaderTag();
if (TextUtils.isEmpty(tagName) || !ReaderTagTable.tagExists(tagName)) tagName=ReaderTag.TAG_NAME_DEFAULT;
showListFragment(tagName);
break;
case POST_DETAIL:
long blogId=getIntent().getLongExtra(ReaderActivity.ARG_BLOG_ID,0);
long postId=getIntent().getLongExtra(ReaderActivity.ARG_POST_ID,0);
showDetailFragment(blogId,postId);
break;
}
}","@Override public void onCreate(Bundle savedInstanceState){
  if (isFullScreenSupported())   ReaderFullScreenUtils.enableActionBarOverlay(this);
  super.onCreate(savedInstanceState);
  createMenuDrawer(R.layout.reader_activity_main);
  getSupportFragmentManager().addOnBackStackChangedListener(this);
  if (savedInstanceState == null) {
    final ReaderFragmentType fragmentType;
    if (getIntent().hasExtra(ARG_READER_FRAGMENT)) {
      fragmentType=(ReaderFragmentType)getIntent().getSerializableExtra(ARG_READER_FRAGMENT);
    }
 else {
      fragmentType=ReaderFragmentType.POST_LIST;
    }
switch (fragmentType) {
case POST_LIST:
      String tagName=getIntent().getStringExtra(ReaderActivity.ARG_TAG_NAME);
    if (TextUtils.isEmpty(tagName))     tagName=UserPrefs.getReaderTag();
  if (TextUtils.isEmpty(tagName) || !ReaderTagTable.tagExists(tagName))   tagName=ReaderTag.TAG_NAME_DEFAULT;
showListFragment(tagName);
break;
case POST_DETAIL:
long blogId=getIntent().getLongExtra(ReaderActivity.ARG_BLOG_ID,0);
long postId=getIntent().getLongExtra(ReaderActivity.ARG_POST_ID,0);
showDetailFragment(blogId,postId);
break;
}
}
}",0.9727767695099818
14745,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  if (activity instanceof ReaderFullScreenUtils.FullScreenListener)   mFullScreenListener=(ReaderFullScreenUtils.FullScreenListener)activity;
  if (activity instanceof OnPostSelectedListener)   mPostSelectedListener=(OnPostSelectedListener)activity;
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  if (activity instanceof ReaderFullScreenUtils.FullScreenListener) {
    mFullScreenListener=(ReaderFullScreenUtils.FullScreenListener)activity;
  }
  if (activity instanceof OnPostSelectedListener) {
    mPostSelectedListener=(OnPostSelectedListener)activity;
  }
}",0.9763313609467456
14746,"private void updatePostsWithCurrentTag(ReaderActions.RequestDataAction updateAction,RefreshType refreshType){
  if (hasCurrentTag())   updatePostsWithTag(mCurrentTag,updateAction,refreshType);
}","private void updatePostsWithCurrentTag(ReaderActions.RequestDataAction updateAction,RefreshType refreshType){
  if (hasCurrentTag()) {
    updatePostsWithTag(mCurrentTag,updateAction,refreshType);
  }
}",0.9797979797979798
14747,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  Context context=container.getContext();
  final View view=inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (isFullScreenSupported()) {
    ReaderFullScreenUtils.addListViewHeader(context,mListView);
    final int actionbarHeight=DisplayUtils.getActionBarHeight(context);
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)mNewPostsBar.getLayoutParams();
    params.topMargin=actionbarHeight;
  }
  mEmptyView=view.findViewById(R.id.empty_view);
  mListView.setOnScrollListener(this);
  if (getPostListType() == ReaderPostListType.TAG) {
    mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> adapterView,      View view,      int position,      long id){
        if (mPostSelectedListener != null) {
          position-=mListView.getHeaderViewsCount();
          ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
          if (post != null)           mPostSelectedListener.onPostSelected(post.blogId,post.postId);
        }
      }
    }
);
  }
  mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
  mProgress.setVisibility(View.GONE);
  if (getPostListType() == ReaderPostListType.TAG) {
    mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
      @Override public void onRefreshStarted(      View view){
        if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
          mPullToRefreshHelper.setRefreshing(false);
          return;
        }
        updatePostsWithCurrentTag(ReaderActions.RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
      }
    }
);
  }
  mListView.setAdapter(getPostAdapter());
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  Context context=container.getContext();
  final View view=inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (isFullScreenSupported()) {
    ReaderFullScreenUtils.addListViewHeader(context,mListView);
    final int actionbarHeight=DisplayUtils.getActionBarHeight(context);
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)mNewPostsBar.getLayoutParams();
    params.topMargin=actionbarHeight;
  }
  mEmptyView=view.findViewById(R.id.empty_view);
  mListView.setOnScrollListener(this);
  if (getPostListType() == ReaderPostListType.TAG) {
    mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> adapterView,      View view,      int position,      long id){
        if (mPostSelectedListener != null) {
          position-=mListView.getHeaderViewsCount();
          ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
          if (post != null)           mPostSelectedListener.onPostSelected(post.blogId,post.postId);
        }
      }
    }
);
  }
  mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
  mProgress.setVisibility(View.GONE);
  if (getPostListType() == ReaderPostListType.TAG) {
    mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
      @Override public void onRefreshStarted(      View view){
        if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
          mPullToRefreshHelper.setRefreshing(false);
          return;
        }
        updatePostsWithCurrentTag(ReaderActions.RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
      }
    }
);
  }
  return view;
}",0.9905320108205592
14748,"@Override public boolean onNavigationItemSelected(int itemPosition,long itemId){
  final ReaderTag tag=(ReaderTag)getActionBarAdapter().getItem(itemPosition);
  if (tag == null)   return false;
  setCurrentTag(tag.getTagName());
  AppLog.d(T.READER,""String_Node_Str"" + tag.getTagName());
  return true;
}","@Override public boolean onNavigationItemSelected(int itemPosition,long itemId){
  final ReaderTag tag=(ReaderTag)getActionBarAdapter().getItem(itemPosition);
  if (tag == null) {
    return false;
  }
  setCurrentTag(tag.getTagName());
  AppLog.d(T.READER,""String_Node_Str"" + tag.getTagName());
  return true;
}",0.987012987012987
14749,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  checkActionBar();
  if (getPostListType() == ReaderPostListType.BLOG) {
    getPostAdapter().setCurrentBlog(mCurrentBlogId);
    updatePostsInCurrentBlog();
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  checkActionBar();
  mListView.setAdapter(getPostAdapter());
switch (getPostListType()) {
case TAG:
    getPostAdapter().setCurrentTag(mCurrentTag);
  break;
case BLOG:
getPostAdapter().setCurrentBlog(mCurrentBlogId);
updatePostsInCurrentBlog();
break;
}
}",0.7631205673758865
14750,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  AppLog.d(T.READER,""String_Node_Str"");
  if (hasCurrentTag()) {
    outState.putString(ReaderActivity.ARG_TAG_NAME,mCurrentTag);
  }
  if (mCurrentBlogId != 0) {
    outState.putLong(ReaderActivity.ARG_BLOG_ID,mCurrentBlogId);
  }
  if (mListView != null && mListView.getFirstVisiblePosition() > 0)   outState.putParcelable(ReaderActivity.KEY_LIST_STATE,mListView.onSaveInstanceState());
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  AppLog.d(T.READER,""String_Node_Str"");
switch (getPostListType()) {
case TAG:
    outState.putString(ReaderActivity.ARG_TAG_NAME,mCurrentTag);
  break;
case BLOG:
outState.putLong(ReaderActivity.ARG_BLOG_ID,mCurrentBlogId);
break;
}
if (mListView != null && mListView.getFirstVisiblePosition() > 0) {
outState.putParcelable(ReaderActivity.KEY_LIST_STATE,mListView.onSaveInstanceState());
}
}",0.8795918367346939
14751,"@Override protected Boolean doInBackground(Void... params){
  final int numExisting;
switch (getPostListType()) {
case TAG:
    tmpPosts=ReaderPostTable.getPostsWithTag(mCurrentTag,Constants.READER_MAX_POSTS_TO_DISPLAY);
  numExisting=ReaderPostTable.getNumPostsWithTag(mCurrentTag);
break;
case BLOG:
tmpPosts=ReaderPostTable.getPostsInBlog(mCurrentBlogId,Constants.READER_MAX_POSTS_TO_DISPLAY);
numExisting=ReaderPostTable.getNumPostsInBlog(mCurrentBlogId);
break;
default :
return false;
}
if (mPosts.isSameList(tmpPosts)) return false;
mCanRequestMorePosts=(numExisting < Constants.READER_MAX_POSTS_TO_DISPLAY);
for (ReaderPost post : tmpPosts) {
post.getPostAvatarForDisplay(mAvatarSz);
post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight);
post.getDatePublished();
}
return true;
}","@Override protected Boolean doInBackground(Void... params){
  final int numExisting;
switch (getPostListType()) {
case TAG:
    tmpPosts=ReaderPostTable.getPostsWithTag(mCurrentTag,Constants.READER_MAX_POSTS_TO_DISPLAY);
  numExisting=ReaderPostTable.getNumPostsWithTag(mCurrentTag);
break;
case BLOG:
tmpPosts=ReaderPostTable.getPostsInBlog(mCurrentBlogId,Constants.READER_MAX_POSTS_TO_DISPLAY);
numExisting=ReaderPostTable.getNumPostsInBlog(mCurrentBlogId);
break;
default :
return false;
}
if (mPosts.isSameList(tmpPosts)) {
return false;
}
mCanRequestMorePosts=(numExisting < Constants.READER_MAX_POSTS_TO_DISPLAY);
for (ReaderPost post : tmpPosts) {
post.getPostAvatarForDisplay(mAvatarSz);
post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight);
post.getDatePublished();
}
return true;
}",0.9974874371859296
14752,"/** 
 * preload images for the post at the passed position
 */
private void preloadPostImages(final int position){
  if (position >= mPosts.size() || position < 0) {
    AppLog.w(T.READER,""String_Node_Str"" + Integer.toString(position));
    return;
  }
  mLastPreloadPos=position;
  if (mIsFlinging)   return;
  ReaderPost post=mPosts.get(position);
  if (post.hasFeaturedImage())   preloadImage(post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight));
  if (post.hasPostAvatar())   preloadImage(post.getPostAvatarForDisplay(mAvatarSz));
}","/** 
 * preload images for the post at the passed position
 */
private void preloadPostImages(final int position){
  if (position >= mPosts.size() || position < 0) {
    AppLog.w(T.READER,""String_Node_Str"" + Integer.toString(position));
    return;
  }
  mLastPreloadPos=position;
  if (mIsFlinging) {
    return;
  }
  ReaderPost post=mPosts.get(position);
  if (post.hasFeaturedImage())   preloadImage(post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight));
  if (post.hasPostAvatar())   preloadImage(post.getPostAvatarForDisplay(mAvatarSz));
}",0.9927007299270072
14753,"@Override protected void onPostExecute(Boolean result){
  if (result) {
    mPosts=(ReaderPostList)(tmpPosts.clone());
    if (mEnableImagePreload && mPosts.size() >= PRELOAD_OFFSET) {
      for (int i=0; i <= PRELOAD_OFFSET; i++)       preloadPostImages(i);
    }
    notifyDataSetChanged();
  }
  if (mDataLoadedListener != null)   mDataLoadedListener.onDataLoaded(isEmpty());
  mIsTaskRunning=false;
}","@Override protected void onPostExecute(Boolean result){
  if (result) {
    mPosts=(ReaderPostList)(tmpPosts.clone());
    if (mEnableImagePreload && mPosts.size() >= PRELOAD_OFFSET) {
      for (int i=0; i <= PRELOAD_OFFSET; i++)       preloadPostImages(i);
    }
    notifyDataSetChanged();
  }
  if (mDataLoadedListener != null) {
    mDataLoadedListener.onDataLoaded(isEmpty());
  }
  mIsTaskRunning=false;
}",0.9901960784313726
14754,"private void preloadImage(final String imageUrl){
  if (WordPress.imageLoader.isCached(imageUrl,0,0))   return;
  if (WordPress.requestQueue.getCache().get(imageUrl) != null)   return;
  WordPress.imageLoader.get(imageUrl,mImagePreloadListener);
}","private void preloadImage(final String imageUrl){
  if (WordPress.imageLoader.isCached(imageUrl,0,0)) {
    return;
  }
  if (WordPress.requestQueue.getCache().get(imageUrl) != null) {
    return;
  }
  WordPress.imageLoader.get(imageUrl,mImagePreloadListener);
}",0.9686274509803922
14755,"private void trackMixpanelDataForInstructions(WPStatsTrackerMixpanelInstructionsForStat instructions,JSONObject properties){
  if (instructions.getDisableForSelfHosted()) {
    return;
  }
  String eventName=instructions.getMixpanelEventName();
  if (eventName != null && !eventName.isEmpty()) {
    JSONObject savedPropertiesForStat=propertiesForStat(instructions.getStat());
    mMixpanel.track(eventName,savedPropertiesForStat);
  }
  if (instructions.getPeoplePropertyToIncrement() != null && !instructions.getPeoplePropertyToIncrement().isEmpty())   incrementPeopleProperty(instructions.getPeoplePropertyToIncrement());
  if (instructions.getSuperPropertyToIncrement() != null && !instructions.getSuperPropertyToIncrement().isEmpty())   incrementSuperProperty(instructions.getSuperPropertyToIncrement());
  if (instructions.getPropertyToIncrement() != null && !instructions.getPropertyToIncrement().isEmpty())   incrementProperty(instructions.getPropertyToIncrement(),instructions.getStatToAttachProperty());
  if (instructions.getSuperPropertyToFlag() != null && !instructions.getSuperPropertyToFlag().isEmpty())   flagSuperProperty(instructions.getSuperPropertyToFlag());
}","private void trackMixpanelDataForInstructions(WPStatsTrackerMixpanelInstructionsForStat instructions,JSONObject properties){
  if (instructions.getDisableForSelfHosted()) {
    return;
  }
  String eventName=instructions.getMixpanelEventName();
  if (eventName != null && !eventName.isEmpty()) {
    JSONObject savedPropertiesForStat=propertiesForStat(instructions.getStat());
    if (savedPropertiesForStat == null) {
      savedPropertiesForStat=new JSONObject();
    }
    if (properties != null) {
      Iterator<String> iter=properties.keys();
      while (iter.hasNext()) {
        String key=iter.next();
        try {
          Object value=properties.get(key);
          savedPropertiesForStat.put(key,value);
        }
 catch (        JSONException e) {
          AppLog.e(AppLog.T.UTILS,e);
        }
      }
    }
    mMixpanel.track(eventName,savedPropertiesForStat);
    removePropertiesForStat(instructions.getStat());
  }
  if (instructions.getPeoplePropertyToIncrement() != null && !instructions.getPeoplePropertyToIncrement().isEmpty())   incrementPeopleProperty(instructions.getPeoplePropertyToIncrement());
  if (instructions.getSuperPropertyToIncrement() != null && !instructions.getSuperPropertyToIncrement().isEmpty())   incrementSuperProperty(instructions.getSuperPropertyToIncrement());
  if (instructions.getPropertyToIncrement() != null && !instructions.getPropertyToIncrement().isEmpty())   incrementProperty(instructions.getPropertyToIncrement(),instructions.getStatToAttachProperty());
  if (instructions.getSuperPropertyToFlag() != null && !instructions.getSuperPropertyToFlag().isEmpty())   flagSuperProperty(instructions.getSuperPropertyToFlag());
}",0.7631027253668763
14756,"/** 
 * This method is called when the user changes the active blog or hides all blogs
 */
public void onBlogChanged(){
  WordPress.wpDB.updateLastBlogId(WordPress.getCurrentLocalTableBlogId());
  Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
  while (itemIterator.hasNext()) {
    MenuDrawerItem item=itemIterator.next();
    if (item.isSelected() && !item.isVisible()) {
      if (mAdapter.getCount() > 0) {
        mAdapter.getItem(0).selectItem();
      }
      if (item.hasItemId()) {
        SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(WPActionBarActivity.this);
        SharedPreferences.Editor editor=settings.edit();
        editor.putInt(LAST_ACTIVITY_PREFERENCE,item.getItemId());
        editor.commit();
      }
      break;
    }
  }
}","/** 
 * This method is called when the user changes the active blog or hides all blogs
 */
public void onBlogChanged(){
  WordPress.wpDB.updateLastBlogId(WordPress.getCurrentLocalTableBlogId());
  Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
  while (itemIterator.hasNext()) {
    MenuDrawerItem item=itemIterator.next();
    if (item.isSelected() && !item.isVisible()) {
      if (mAdapter.getCount() > 0) {
        mAdapter.getItem(0).selectItem();
      }
      if (item.hasItemId()) {
        SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(WPActionBarActivity.this);
        SharedPreferences.Editor editor=settings.edit();
        editor.putInt(LAST_ACTIVITY_PREFERENCE,item.getItemId());
        editor.commit();
      }
      break;
    }
  }
  if (shouldUpdateCurrentBlogStats()) {
    WordPress.updateCurrentBlogStats();
  }
}",0.9497005988023952
14757,"@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
}","@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  mPullToRefreshHelper.setRefreshing(false);
  if (statsActivityWeakRef.get() == null || statsActivityWeakRef.get().isFinishing() || !statsActivityWeakRef.get().mIsInFront) {
    return;
  }
  if (mSignInDialog != null && mSignInDialog.isShowing()) {
    return;
  }
  stopStatsService();
  Toast.makeText(statsActivityWeakRef.get(),R.string.error_refresh_stats,Toast.LENGTH_LONG).show();
}",0.350584307178631
14758,"@Override public void onSuccess(){
  if (statsActivityWeakRef.get() == null || statsActivityWeakRef.get().isFinishing() || !statsActivityWeakRef.get().mIsInFront) {
    return;
  }
  if (getBlogId() == null) {
    stopStatsService();
    AlertDialog.Builder builder=new AlertDialog.Builder(this.statsActivityWeakRef.get());
    if (WordPress.getCurrentBlog().isAdmin()) {
      builder.setMessage(getString(R.string.jetpack_message)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          Intent jetpackIntent=new Intent(VerifyJetpackSettingsCallback.this.statsActivityWeakRef.get(),AuthenticatedWebViewActivity.class);
          jetpackIntent.putExtra(AuthenticatedWebViewActivity.LOAD_AUTHENTICATED_URL,WordPress.getCurrentBlog().getAdminUrl() + ""String_Node_Str"");
          startActivityForResult(jetpackIntent,REQUEST_JETPACK);
        }
      }
);
      builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
        }
      }
);
    }
 else {
      builder.setMessage(getString(R.string.jetpack_message_not_admin)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,null);
    }
    builder.create().show();
  }
}","@Override public void onSuccess(){
  if (statsActivityWeakRef.get() == null || statsActivityWeakRef.get().isFinishing() || !statsActivityWeakRef.get().mIsInFront) {
    return;
  }
  if (getBlogId() == null) {
    stopStatsService();
    mPullToRefreshHelper.setRefreshing(false);
    AlertDialog.Builder builder=new AlertDialog.Builder(this.statsActivityWeakRef.get());
    if (WordPress.getCurrentBlog().isAdmin()) {
      builder.setMessage(getString(R.string.jetpack_message)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          Intent jetpackIntent=new Intent(VerifyJetpackSettingsCallback.this.statsActivityWeakRef.get(),AuthenticatedWebViewActivity.class);
          jetpackIntent.putExtra(AuthenticatedWebViewActivity.LOAD_AUTHENTICATED_URL,WordPress.getCurrentBlog().getAdminUrl() + ""String_Node_Str"");
          startActivityForResult(jetpackIntent,REQUEST_JETPACK);
        }
      }
);
      builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
        }
      }
);
    }
 else {
      builder.setMessage(getString(R.string.jetpack_message_not_admin)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,null);
    }
    builder.create().show();
  }
}",0.9837763203313772
14759,"@Override public void onDestroy(){
  for (  Request<JSONObject> req : statsNetworkRequests) {
    if (!req.hasHadResponseDelivered() && !req.isCanceled()) {
      req.cancel();
    }
  }
  if (orchestrator != null) {
    orchestrator.interrupt();
  }
  AppLog.i(T.STATS,""String_Node_Str"");
  super.onDestroy();
}","@Override public void onDestroy(){
  stopRefresh();
  AppLog.i(T.STATS,""String_Node_Str"");
  super.onDestroy();
}",0.508235294117647
14760,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  final String blogId=StringUtils.notNullStr(intent.getStringExtra(ARG_BLOG_ID));
  this.mBlogId=blogId;
  startTasks(blogId,startId);
  return START_NOT_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  final String blogId=StringUtils.notNullStr(intent.getStringExtra(ARG_BLOG_ID));
  if (mBlogId == null) {
    startTasks(blogId,startId);
  }
 else   if (blogId.equals(mBlogId)) {
    AppLog.i(T.STATS,""String_Node_Str"" + mBlogId);
  }
 else {
    stopRefresh();
    startTasks(blogId,startId);
  }
  this.mBlogId=blogId;
  return START_NOT_STICKY;
}",0.6232980332829047
14761,"@Override public void onResponse(final JSONObject jsonObject){
  updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      AppLog.d(T.STATS,""String_Node_Str"");
      numberOfFinishedNetworkCalls++;
      try {
        if (jsonObject == null)         return;
        StatUtils.saveSummary(mBlogId,jsonObject);
        StatsSummary stats=StatUtils.getSummary(mBlogId);
        if (stats != null) {
          LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(WordPress.getContext());
          Intent intent=new Intent(StatsService.ACTION_STATS_SUMMARY_UPDATED);
          intent.putExtra(StatsService.STATS_SUMMARY_UPDATED_EXTRA,stats);
          lbm.sendBroadcast(intent);
        }
      }
  finally {
        notifyResponseReceived();
      }
    }
  }
);
}","@Override public void onResponse(final JSONObject jsonObject){
  if (!updateUIExecutor.isShutdown() && !updateUIExecutor.isTerminated() && !updateUIExecutor.isTerminating())   updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      AppLog.d(T.STATS,""String_Node_Str"");
      numberOfFinishedNetworkCalls++;
      try {
        if (jsonObject == null)         return;
        StatUtils.saveSummary(mBlogId,jsonObject);
        StatsSummary stats=StatUtils.getSummary(mBlogId);
        if (stats != null) {
          LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(WordPress.getContext());
          Intent intent=new Intent(StatsService.ACTION_STATS_SUMMARY_UPDATED);
          intent.putExtra(StatsService.STATS_SUMMARY_UPDATED_EXTRA,stats);
          lbm.sendBroadcast(intent);
        }
      }
  finally {
        notifyResponseReceived();
      }
    }
  }
);
}",0.9341246290801188
14762,"private void startTasks(final String blogId,final int startId){
  orchestrator=new Thread(){
    @Override public void run(){
      updateUIExecutor=(ThreadPoolExecutor)Executors.newFixedThreadPool(1);
      RestClientUtils restClientUtils=WordPress.getRestClientUtils();
      final String today=StatUtils.getCurrentDate();
      final String yesterday=StatUtils.getYesterdaysDate();
      AppLog.i(T.STATS,""String_Node_Str"");
      broadcastUpdate(true);
      String path=String.format(""String_Node_Str"",blogId);
      statsNetworkRequests.add(restClientUtils.get(path,statsSummaryRestListener,statsSummaryErrListener));
      path=getBarChartPath(StatsBarChartUnit.WEEK,30);
      BarChartListener barChartRestListener=new BarChartListener(StatsBarChartUnit.WEEK);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=getBarChartPath(StatsBarChartUnit.MONTH,30);
      barChartRestListener=new BarChartListener(StatsBarChartUnit.MONTH);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      TopPostAndPageListener topPostAndPageRestListener=new TopPostAndPageListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,topPostAndPageRestListener,topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      topPostAndPageRestListener=new TopPostAndPageListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,new TopPostAndPageListener(yesterday),topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ReferrersListener referrersListener=new ReferrersListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      referrersListener=new ReferrersListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ClicksListener clicksListener=new ClicksListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      clicksListener=new ClicksListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      SearchEngineTermsListener searchEngineTermsListener=new SearchEngineTermsListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      searchEngineTermsListener=new SearchEngineTermsListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ViewsByCountryListener viewsByCountryListener=new ViewsByCountryListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      viewsByCountryListener=new ViewsByCountryListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      numberOfNetworkCalls=statsNetworkRequests.size();
      while (!isDone()) {
        waitForResponse();
      }
      updateUIExecutor.shutdown();
      broadcastUpdate(false);
      stopSelf(startId);
    }
  }
;
  orchestrator.start();
}","private void startTasks(final String blogId,final int startId){
  orchestrator=new Thread(){
    @Override public void run(){
      updateUIExecutor=(ThreadPoolExecutor)Executors.newFixedThreadPool(1);
      RestClientUtils restClientUtils=WordPress.getRestClientUtils();
      final String today=StatUtils.getCurrentDate();
      final String yesterday=StatUtils.getYesterdaysDate();
      AppLog.i(T.STATS,""String_Node_Str"" + blogId);
      broadcastUpdate(true);
      String path=String.format(""String_Node_Str"",blogId);
      statsNetworkRequests.add(restClientUtils.get(path,statsSummaryRestListener,statsSummaryErrListener));
      path=getBarChartPath(StatsBarChartUnit.WEEK,30);
      BarChartListener barChartRestListener=new BarChartListener(StatsBarChartUnit.WEEK);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=getBarChartPath(StatsBarChartUnit.MONTH,30);
      barChartRestListener=new BarChartListener(StatsBarChartUnit.MONTH);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      TopPostAndPageListener topPostAndPageRestListener=new TopPostAndPageListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,topPostAndPageRestListener,topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      topPostAndPageRestListener=new TopPostAndPageListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,new TopPostAndPageListener(yesterday),topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ReferrersListener referrersListener=new ReferrersListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      referrersListener=new ReferrersListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ClicksListener clicksListener=new ClicksListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      clicksListener=new ClicksListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      SearchEngineTermsListener searchEngineTermsListener=new SearchEngineTermsListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      searchEngineTermsListener=new SearchEngineTermsListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ViewsByCountryListener viewsByCountryListener=new ViewsByCountryListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      viewsByCountryListener=new ViewsByCountryListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      numberOfNetworkCalls=statsNetworkRequests.size();
      while (!isDone()) {
        waitForResponse();
      }
      updateUIExecutor.shutdown();
      mBlogId=null;
      broadcastUpdate(false);
      stopSelf(startId);
    }
  }
;
  orchestrator.start();
}",0.9961224762668806
14763,"@Override public void onErrorResponse(final VolleyError volleyError){
  updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      numberOfFinishedNetworkCalls++;
      if (volleyError != null) {
        AppLog.e(T.STATS,""String_Node_Str"" + volleyError.getMessage(),volleyError);
      }
      notifyResponseReceived();
    }
  }
);
}","@Override public void onErrorResponse(final VolleyError volleyError){
  if (!updateUIExecutor.isShutdown() && !updateUIExecutor.isTerminated() && !updateUIExecutor.isTerminating())   updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      numberOfFinishedNetworkCalls++;
      if (volleyError != null) {
        AppLog.e(T.STATS,""String_Node_Str"" + volleyError.getMessage(),volleyError);
      }
      notifyResponseReceived();
    }
  }
);
}",0.8638036809815951
14764,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ReaderComment comment=mComments.get(position);
  CommentViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.reader_listitem_comment,parent,false);
    holder=new CommentViewHolder(convertView);
    convertView.setTag(holder);
    holder.txtText.setLinksClickable(true);
    holder.txtText.setMovementMethod(WPLinkMovementMethod.getInstance());
  }
 else {
    holder=(CommentViewHolder)convertView.getTag();
  }
  holder.txtAuthor.setText(comment.getAuthorName());
  holder.imgAvatar.setImageUrl(PhotonUtils.fixAvatar(comment.getAuthorAvatar(),mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
  CommentUtils.displayHtmlComment(holder.txtText,comment.getText(),mMaxImageSz);
  java.util.Date dtPublished=DateTimeUtils.iso8601ToJavaDate(comment.getPublished());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(dtPublished));
  if (comment.hasAuthorBlogId()) {
    View.OnClickListener authorListener=new View.OnClickListener(){
      @Override public void onClick(      View view){
        ReaderActivityLauncher.showReaderBlogDetail(view.getContext(),comment.blogId);
      }
    }
;
    holder.imgAvatar.setOnClickListener(authorListener);
    holder.txtAuthor.setOnClickListener(authorListener);
    holder.txtAuthor.setTextColor(mLinkColor);
  }
 else {
    holder.txtAuthor.setTextColor(mNoLinkColor);
  }
  holder.spacerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
  holder.spacerIndent.setVisibility(comment.parentId == 0 ? View.GONE : View.VISIBLE);
  if (comment.level > 0) {
    int indent=Math.min(MAX_INDENT_LEVEL,comment.level) * mIndentPerLevel;
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)holder.spacerIndent.getLayoutParams();
    if (params.width != indent)     params.width=indent;
    holder.spacerIndent.setVisibility(View.VISIBLE);
  }
  if (mHighlightCommentId == comment.commentId) {
    convertView.setBackgroundColor(mBgColorHighlight);
    holder.progress.setVisibility(mShowProgressForHighlightedComment ? View.VISIBLE : View.GONE);
  }
 else {
    convertView.setBackgroundColor(mBgColorNormal);
    holder.progress.setVisibility(View.GONE);
  }
  if (mReplyListener != null) {
    holder.txtReply.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mReplyListener.onRequestReply(comment.commentId);
      }
    }
);
  }
  if (mMoreCommentsExist && mDataRequestedListener != null && (position >= getCount() - 1))   mDataRequestedListener.onRequestData(ReaderActions.RequestDataAction.LOAD_NEWER);
  holder.divider.setVisibility(position < getCount() - 1 ? View.VISIBLE : View.INVISIBLE);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ReaderComment comment=mComments.get(position);
  CommentViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.reader_listitem_comment,parent,false);
    holder=new CommentViewHolder(convertView);
    convertView.setTag(holder);
    holder.txtText.setLinksClickable(true);
    holder.txtText.setMovementMethod(WPLinkMovementMethod.getInstance());
  }
 else {
    holder=(CommentViewHolder)convertView.getTag();
  }
  holder.txtAuthor.setText(comment.getAuthorName());
  holder.imgAvatar.setImageUrl(PhotonUtils.fixAvatar(comment.getAuthorAvatar(),mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
  CommentUtils.displayHtmlComment(holder.txtText,comment.getText(),mMaxImageSz);
  java.util.Date dtPublished=DateTimeUtils.iso8601ToJavaDate(comment.getPublished());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(dtPublished));
  if (comment.hasAuthorBlogId()) {
    View.OnClickListener authorListener=new View.OnClickListener(){
      @Override public void onClick(      View view){
        ReaderActivityLauncher.showReaderBlogDetail(view.getContext(),comment.authorBlogId);
      }
    }
;
    holder.imgAvatar.setOnClickListener(authorListener);
    holder.txtAuthor.setOnClickListener(authorListener);
    holder.txtAuthor.setTextColor(mLinkColor);
  }
 else {
    holder.txtAuthor.setTextColor(mNoLinkColor);
  }
  holder.spacerTop.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
  holder.spacerIndent.setVisibility(comment.parentId == 0 ? View.GONE : View.VISIBLE);
  if (comment.level > 0) {
    int indent=Math.min(MAX_INDENT_LEVEL,comment.level) * mIndentPerLevel;
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)holder.spacerIndent.getLayoutParams();
    if (params.width != indent)     params.width=indent;
    holder.spacerIndent.setVisibility(View.VISIBLE);
  }
  if (mHighlightCommentId == comment.commentId) {
    convertView.setBackgroundColor(mBgColorHighlight);
    holder.progress.setVisibility(mShowProgressForHighlightedComment ? View.VISIBLE : View.GONE);
  }
 else {
    convertView.setBackgroundColor(mBgColorNormal);
    holder.progress.setVisibility(View.GONE);
  }
  if (mReplyListener != null) {
    holder.txtReply.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mReplyListener.onRequestReply(comment.commentId);
      }
    }
);
  }
  if (mMoreCommentsExist && mDataRequestedListener != null && (position >= getCount() - 1))   mDataRequestedListener.onRequestData(ReaderActions.RequestDataAction.LOAD_NEWER);
  holder.divider.setVisibility(position < getCount() - 1 ? View.VISIBLE : View.INVISIBLE);
  return convertView;
}",0.9985559566787005
14765,"/** 
 * This method is called when the user changes the active blog or hides all blogs
 */
public void onBlogChanged(){
  WordPress.wpDB.updateLastBlogId(WordPress.getCurrentLocalTableBlogId());
  Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
  while (itemIterator.hasNext()) {
    MenuDrawerItem item=itemIterator.next();
    if (item.isSelected() && !item.isVisible()) {
      if (mAdapter.getCount() > 0) {
        mAdapter.getItem(0).selectItem();
      }
      if (item.hasItemId()) {
        SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(WPActionBarActivity.this);
        SharedPreferences.Editor editor=settings.edit();
        editor.putInt(LAST_ACTIVITY_PREFERENCE,item.getItemId());
        editor.commit();
      }
      break;
    }
  }
}","/** 
 * This method is called when the user changes the active blog or hides all blogs
 */
public void onBlogChanged(){
  WordPress.wpDB.updateLastBlogId(WordPress.getCurrentLocalTableBlogId());
  Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
  while (itemIterator.hasNext()) {
    MenuDrawerItem item=itemIterator.next();
    if (item.isSelected() && !item.isVisible()) {
      if (mAdapter.getCount() > 0) {
        mAdapter.getItem(0).selectItem();
      }
      if (item.hasItemId()) {
        SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(WPActionBarActivity.this);
        SharedPreferences.Editor editor=settings.edit();
        editor.putInt(LAST_ACTIVITY_PREFERENCE,item.getItemId());
        editor.commit();
      }
      break;
    }
  }
  if (shouldUpdateCurrentBlogStats()) {
    WordPress.updateCurrentBlogStats();
  }
}",0.9497005988023952
14766,"@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
}","@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  mPullToRefreshHelper.setRefreshing(false);
  if (statsActivityWeakRef.get() == null || statsActivityWeakRef.get().isFinishing() || !statsActivityWeakRef.get().mIsInFront) {
    return;
  }
  if (mSignInDialog != null && mSignInDialog.isShowing()) {
    return;
  }
  stopStatsService();
  Toast.makeText(statsActivityWeakRef.get(),R.string.error_refresh_stats,Toast.LENGTH_LONG).show();
}",0.350584307178631
14767,"@Override public void onSuccess(){
  if (statsActivityWeakRef.get() == null || statsActivityWeakRef.get().isFinishing() || !statsActivityWeakRef.get().mIsInFront) {
    return;
  }
  if (getBlogId() == null) {
    stopStatsService();
    AlertDialog.Builder builder=new AlertDialog.Builder(this.statsActivityWeakRef.get());
    if (WordPress.getCurrentBlog().isAdmin()) {
      builder.setMessage(getString(R.string.jetpack_message)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          Intent jetpackIntent=new Intent(VerifyJetpackSettingsCallback.this.statsActivityWeakRef.get(),AuthenticatedWebViewActivity.class);
          jetpackIntent.putExtra(AuthenticatedWebViewActivity.LOAD_AUTHENTICATED_URL,WordPress.getCurrentBlog().getAdminUrl() + ""String_Node_Str"");
          startActivityForResult(jetpackIntent,REQUEST_JETPACK);
        }
      }
);
      builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
        }
      }
);
    }
 else {
      builder.setMessage(getString(R.string.jetpack_message_not_admin)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,null);
    }
    builder.create().show();
  }
}","@Override public void onSuccess(){
  if (statsActivityWeakRef.get() == null || statsActivityWeakRef.get().isFinishing() || !statsActivityWeakRef.get().mIsInFront) {
    return;
  }
  if (getBlogId() == null) {
    stopStatsService();
    mPullToRefreshHelper.setRefreshing(false);
    AlertDialog.Builder builder=new AlertDialog.Builder(this.statsActivityWeakRef.get());
    if (WordPress.getCurrentBlog().isAdmin()) {
      builder.setMessage(getString(R.string.jetpack_message)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          Intent jetpackIntent=new Intent(VerifyJetpackSettingsCallback.this.statsActivityWeakRef.get(),AuthenticatedWebViewActivity.class);
          jetpackIntent.putExtra(AuthenticatedWebViewActivity.LOAD_AUTHENTICATED_URL,WordPress.getCurrentBlog().getAdminUrl() + ""String_Node_Str"");
          startActivityForResult(jetpackIntent,REQUEST_JETPACK);
        }
      }
);
      builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
        }
      }
);
    }
 else {
      builder.setMessage(getString(R.string.jetpack_message_not_admin)).setTitle(getString(R.string.jetpack_not_found));
      builder.setPositiveButton(R.string.yes,null);
    }
    builder.create().show();
  }
}",0.9837763203313772
14768,"@Override public void onDestroy(){
  for (  Request<JSONObject> req : statsNetworkRequests) {
    if (!req.hasHadResponseDelivered() && !req.isCanceled()) {
      req.cancel();
    }
  }
  if (orchestrator != null) {
    orchestrator.interrupt();
  }
  AppLog.i(T.STATS,""String_Node_Str"");
  super.onDestroy();
}","@Override public void onDestroy(){
  stopRefresh();
  AppLog.i(T.STATS,""String_Node_Str"");
  super.onDestroy();
}",0.508235294117647
14769,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  final String blogId=StringUtils.notNullStr(intent.getStringExtra(ARG_BLOG_ID));
  this.mBlogId=blogId;
  startTasks(blogId,startId);
  return START_NOT_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  final String blogId=StringUtils.notNullStr(intent.getStringExtra(ARG_BLOG_ID));
  if (mBlogId == null) {
    startTasks(blogId,startId);
  }
 else   if (blogId.equals(mBlogId)) {
    AppLog.i(T.STATS,""String_Node_Str"" + mBlogId);
  }
 else {
    stopRefresh();
    startTasks(blogId,startId);
  }
  this.mBlogId=blogId;
  return START_NOT_STICKY;
}",0.6232980332829047
14770,"@Override public void onResponse(final JSONObject jsonObject){
  updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      AppLog.d(T.STATS,""String_Node_Str"");
      numberOfFinishedNetworkCalls++;
      try {
        if (jsonObject == null)         return;
        StatUtils.saveSummary(mBlogId,jsonObject);
        StatsSummary stats=StatUtils.getSummary(mBlogId);
        if (stats != null) {
          LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(WordPress.getContext());
          Intent intent=new Intent(StatsService.ACTION_STATS_SUMMARY_UPDATED);
          intent.putExtra(StatsService.STATS_SUMMARY_UPDATED_EXTRA,stats);
          lbm.sendBroadcast(intent);
        }
      }
  finally {
        notifyResponseReceived();
      }
    }
  }
);
}","@Override public void onResponse(final JSONObject jsonObject){
  if (!updateUIExecutor.isShutdown() && !updateUIExecutor.isTerminated() && !updateUIExecutor.isTerminating())   updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      AppLog.d(T.STATS,""String_Node_Str"");
      numberOfFinishedNetworkCalls++;
      try {
        if (jsonObject == null)         return;
        StatUtils.saveSummary(mBlogId,jsonObject);
        StatsSummary stats=StatUtils.getSummary(mBlogId);
        if (stats != null) {
          LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(WordPress.getContext());
          Intent intent=new Intent(StatsService.ACTION_STATS_SUMMARY_UPDATED);
          intent.putExtra(StatsService.STATS_SUMMARY_UPDATED_EXTRA,stats);
          lbm.sendBroadcast(intent);
        }
      }
  finally {
        notifyResponseReceived();
      }
    }
  }
);
}",0.9341246290801188
14771,"private void startTasks(final String blogId,final int startId){
  orchestrator=new Thread(){
    @Override public void run(){
      updateUIExecutor=(ThreadPoolExecutor)Executors.newFixedThreadPool(1);
      RestClientUtils restClientUtils=WordPress.getRestClientUtils();
      final String today=StatUtils.getCurrentDate();
      final String yesterday=StatUtils.getYesterdaysDate();
      AppLog.i(T.STATS,""String_Node_Str"");
      broadcastUpdate(true);
      String path=String.format(""String_Node_Str"",blogId);
      statsNetworkRequests.add(restClientUtils.get(path,statsSummaryRestListener,statsSummaryErrListener));
      path=getBarChartPath(StatsBarChartUnit.WEEK,30);
      BarChartListener barChartRestListener=new BarChartListener(StatsBarChartUnit.WEEK);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=getBarChartPath(StatsBarChartUnit.MONTH,30);
      barChartRestListener=new BarChartListener(StatsBarChartUnit.MONTH);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      TopPostAndPageListener topPostAndPageRestListener=new TopPostAndPageListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,topPostAndPageRestListener,topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      topPostAndPageRestListener=new TopPostAndPageListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,new TopPostAndPageListener(yesterday),topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ReferrersListener referrersListener=new ReferrersListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      referrersListener=new ReferrersListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ClicksListener clicksListener=new ClicksListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      clicksListener=new ClicksListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      SearchEngineTermsListener searchEngineTermsListener=new SearchEngineTermsListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      searchEngineTermsListener=new SearchEngineTermsListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ViewsByCountryListener viewsByCountryListener=new ViewsByCountryListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      viewsByCountryListener=new ViewsByCountryListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      numberOfNetworkCalls=statsNetworkRequests.size();
      while (!isDone()) {
        waitForResponse();
      }
      updateUIExecutor.shutdown();
      broadcastUpdate(false);
      stopSelf(startId);
    }
  }
;
  orchestrator.start();
}","private void startTasks(final String blogId,final int startId){
  orchestrator=new Thread(){
    @Override public void run(){
      updateUIExecutor=(ThreadPoolExecutor)Executors.newFixedThreadPool(1);
      RestClientUtils restClientUtils=WordPress.getRestClientUtils();
      final String today=StatUtils.getCurrentDate();
      final String yesterday=StatUtils.getYesterdaysDate();
      AppLog.i(T.STATS,""String_Node_Str"" + blogId);
      broadcastUpdate(true);
      String path=String.format(""String_Node_Str"",blogId);
      statsNetworkRequests.add(restClientUtils.get(path,statsSummaryRestListener,statsSummaryErrListener));
      path=getBarChartPath(StatsBarChartUnit.WEEK,30);
      BarChartListener barChartRestListener=new BarChartListener(StatsBarChartUnit.WEEK);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=getBarChartPath(StatsBarChartUnit.MONTH,30);
      barChartRestListener=new BarChartListener(StatsBarChartUnit.MONTH);
      statsNetworkRequests.add(restClientUtils.get(path,barChartRestListener,barChartRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      TopPostAndPageListener topPostAndPageRestListener=new TopPostAndPageListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,topPostAndPageRestListener,topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      topPostAndPageRestListener=new TopPostAndPageListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,new TopPostAndPageListener(yesterday),topPostAndPageRestListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ReferrersListener referrersListener=new ReferrersListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      referrersListener=new ReferrersListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,referrersListener,referrersListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ClicksListener clicksListener=new ClicksListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      clicksListener=new ClicksListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,clicksListener,clicksListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      SearchEngineTermsListener searchEngineTermsListener=new SearchEngineTermsListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      searchEngineTermsListener=new SearchEngineTermsListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,searchEngineTermsListener,searchEngineTermsListener));
      path=String.format(""String_Node_Str"",mBlogId,today);
      ViewsByCountryListener viewsByCountryListener=new ViewsByCountryListener(today);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      path=String.format(""String_Node_Str"",mBlogId,yesterday);
      viewsByCountryListener=new ViewsByCountryListener(yesterday);
      statsNetworkRequests.add(restClientUtils.get(path,viewsByCountryListener,viewsByCountryListener));
      numberOfNetworkCalls=statsNetworkRequests.size();
      while (!isDone()) {
        waitForResponse();
      }
      updateUIExecutor.shutdown();
      mBlogId=null;
      broadcastUpdate(false);
      stopSelf(startId);
    }
  }
;
  orchestrator.start();
}",0.9961224762668806
14772,"@Override public void onErrorResponse(final VolleyError volleyError){
  updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      numberOfFinishedNetworkCalls++;
      if (volleyError != null) {
        AppLog.e(T.STATS,""String_Node_Str"" + volleyError.getMessage(),volleyError);
      }
      notifyResponseReceived();
    }
  }
);
}","@Override public void onErrorResponse(final VolleyError volleyError){
  if (!updateUIExecutor.isShutdown() && !updateUIExecutor.isTerminated() && !updateUIExecutor.isTerminating())   updateUIExecutor.submit(new Thread(){
    @Override public void run(){
      numberOfFinishedNetworkCalls++;
      if (volleyError != null) {
        AppLog.e(T.STATS,""String_Node_Str"" + volleyError.getMessage(),volleyError);
      }
      notifyResponseReceived();
    }
  }
);
}",0.8638036809815951
14773,"public static ReaderPost fromJson(JSONObject json){
  if (json == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
 else {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.blogUrl=JSONUtil.getString(json,""String_Node_Str"");
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  JSONObject jsonAuthor=json.optJSONObject(""String_Node_Str"");
  if (jsonAuthor != null) {
    post.authorName=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    post.postAvatar=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
  }
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    post.published=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    post.published=JSONUtil.getString(json,""String_Node_Str"");
  }
  String likeDate=JSONUtil.getString(json,""String_Node_Str"");
  if (!TextUtils.isEmpty(likeDate)) {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(likeDate);
  }
 else {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(post.published);
  }
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null) {
    Iterator<String> it=jsonAttachments.keys();
    if (it != null && it.hasNext()) {
      JSONObject jsonFirstAttachment=jsonAttachments.optJSONObject(it.next());
      if (jsonFirstAttachment != null) {
        String thumbnail=JSONUtil.getString(jsonFirstAttachment,""String_Node_Str"");
        if (!TextUtils.isEmpty(thumbnail))         post.featuredImage=thumbnail;
        JSONObject jsonVideoPress=jsonFirstAttachment.optJSONObject(""String_Node_Str"");
        if (jsonVideoPress != null) {
          JSONObject jsonStdVideo=jsonVideoPress.optJSONObject(""String_Node_Str"");
          if (jsonStdVideo != null) {
            post.featuredVideo=JSONUtil.getString(jsonStdVideo,""String_Node_Str"");
            post.isVideoPress=true;
          }
        }
      }
    }
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      if (!TextUtils.isEmpty(mediaUrl)) {
        String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
        boolean isVideo=(type != null && type.equals(""String_Node_Str""));
        if (isVideo) {
          post.featuredVideo=mediaUrl;
        }
 else {
          post.featuredImage=mediaUrl;
        }
      }
    }
    if (!post.hasFeaturedImage())     post.featuredImage=findFeaturedImage(post.text);
  }
  if (!post.hasTitle() && post.hasExcerpt())   post.title=extractTitle(post.excerpt,50);
  JSONObject jsonTags=json.optJSONObject(""String_Node_Str"");
  if (jsonTags != null) {
    StringBuilder sbTags=new StringBuilder();
    Iterator<String> it=jsonTags.keys();
    boolean isFirst=true;
    while (it.hasNext()) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        sbTags.append(""String_Node_Str"");
      }
      sbTags.append(it.next());
    }
    post.setTags(sbTags.toString());
  }
  if (post.blogId == 0) {
    JSONObject jsonSite=JSONUtil.getJSONChild(json,""String_Node_Str"");
    if (jsonSite != null) {
      post.blogId=jsonSite.optInt(""String_Node_Str"");
      post.blogName=JSONUtil.getString(jsonSite,""String_Node_Str"");
      post.blogUrl=JSONUtil.getString(jsonSite,""String_Node_Str"");
      post.isPrivate=JSONUtil.getBool(jsonSite,""String_Node_Str"");
    }
  }
  return post;
}","public static ReaderPost fromJson(JSONObject json){
  if (json == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
 else {
    post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  }
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.blogUrl=JSONUtil.getString(json,""String_Node_Str"");
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  JSONObject jsonAuthor=json.optJSONObject(""String_Node_Str"");
  if (jsonAuthor != null) {
    post.authorName=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    post.postAvatar=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    if (TextUtils.isEmpty(post.blogUrl)) {
      post.blogUrl=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    }
  }
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    post.published=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    post.published=JSONUtil.getString(json,""String_Node_Str"");
  }
  String likeDate=JSONUtil.getString(json,""String_Node_Str"");
  if (!TextUtils.isEmpty(likeDate)) {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(likeDate);
  }
 else {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(post.published);
  }
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null) {
    Iterator<String> it=jsonAttachments.keys();
    if (it != null && it.hasNext()) {
      JSONObject jsonFirstAttachment=jsonAttachments.optJSONObject(it.next());
      if (jsonFirstAttachment != null) {
        String thumbnail=JSONUtil.getString(jsonFirstAttachment,""String_Node_Str"");
        if (!TextUtils.isEmpty(thumbnail))         post.featuredImage=thumbnail;
        JSONObject jsonVideoPress=jsonFirstAttachment.optJSONObject(""String_Node_Str"");
        if (jsonVideoPress != null) {
          JSONObject jsonStdVideo=jsonVideoPress.optJSONObject(""String_Node_Str"");
          if (jsonStdVideo != null) {
            post.featuredVideo=JSONUtil.getString(jsonStdVideo,""String_Node_Str"");
            post.isVideoPress=true;
          }
        }
      }
    }
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      if (!TextUtils.isEmpty(mediaUrl)) {
        String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
        boolean isVideo=(type != null && type.equals(""String_Node_Str""));
        if (isVideo) {
          post.featuredVideo=mediaUrl;
        }
 else {
          post.featuredImage=mediaUrl;
        }
      }
    }
    if (!post.hasFeaturedImage())     post.featuredImage=findFeaturedImage(post.text);
  }
  if (!post.hasTitle() && post.hasExcerpt())   post.title=extractTitle(post.excerpt,50);
  JSONObject jsonTags=json.optJSONObject(""String_Node_Str"");
  if (jsonTags != null) {
    StringBuilder sbTags=new StringBuilder();
    Iterator<String> it=jsonTags.keys();
    boolean isFirst=true;
    while (it.hasNext()) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        sbTags.append(""String_Node_Str"");
      }
      sbTags.append(it.next());
    }
    post.setTags(sbTags.toString());
  }
  if (post.blogId == 0) {
    JSONObject jsonSite=JSONUtil.getJSONChild(json,""String_Node_Str"");
    if (jsonSite != null) {
      post.blogId=jsonSite.optInt(""String_Node_Str"");
      post.blogName=JSONUtil.getString(jsonSite,""String_Node_Str"");
      post.blogUrl=JSONUtil.getString(jsonSite,""String_Node_Str"");
      post.isPrivate=JSONUtil.getBool(jsonSite,""String_Node_Str"");
    }
  }
  return post;
}",0.9877846790890268
14774,"private static void handleGetPostsResponse(long blogId,JSONObject jsonObject,final ReaderActions.ActionListener actionListener){
  if (jsonObject == null) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  ReaderPostList posts=ReaderPostList.fromJson(jsonObject);
  for (  ReaderPost post : posts) {
    post.blogId=blogId;
  }
  ReaderPostTable.addOrUpdatePosts(null,posts);
  if (actionListener != null) {
    actionListener.onActionResult(posts.size() > 0 ? true : false);
  }
}","private static void handleGetPostsResponse(JSONObject jsonObject,final ReaderActions.ActionListener actionListener){
  if (jsonObject == null) {
    if (actionListener != null)     actionListener.onActionResult(false);
    return;
  }
  ReaderPostList posts=ReaderPostList.fromJson(jsonObject);
  ReaderPostTable.addOrUpdatePosts(null,posts);
  if (actionListener != null) {
    actionListener.onActionResult(posts.size() > 0 ? true : false);
  }
}",0.9218106995884774
14775,"@Override public void onResponse(JSONObject jsonObject){
  handleGetPostsResponse(blogId,jsonObject,actionListener);
}","@Override public void onResponse(JSONObject jsonObject){
  handleGetPostsResponse(jsonObject,actionListener);
}",0.9694323144104804
14776,"public static void requestPostsForBlog(final long blogId,final ReaderActions.ActionListener actionListener){
  String path=""String_Node_Str"" + blogId + ""String_Node_Str""+ ""String_Node_Str"";
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      handleGetPostsResponse(blogId,jsonObject,actionListener);
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.READER,volleyError);
      if (actionListener != null)       actionListener.onActionResult(false);
    }
  }
;
  AppLog.d(T.READER,""String_Node_Str"" + blogId);
  WordPress.getRestClientUtils().get(path,null,null,listener,errorListener);
}","public static void requestPostsForBlog(final long blogId,final ReaderActions.ActionListener actionListener){
  String path=""String_Node_Str"" + blogId + ""String_Node_Str""+ ""String_Node_Str"";
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      handleGetPostsResponse(jsonObject,actionListener);
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(T.READER,volleyError);
      if (actionListener != null)       actionListener.onActionResult(false);
    }
  }
;
  AppLog.d(T.READER,""String_Node_Str"" + blogId);
  WordPress.getRestClientUtils().get(path,null,null,listener,errorListener);
}",0.9956709956709956
14777,"private int getThumbnailWidth(Context context,int targetWidth){
  final int DEFAULT_WIDTH=600;
  int width;
  if (targetWidth != 0) {
    width=targetWidth;
  }
 else {
    if (context == null) {
      return DEFAULT_WIDTH;
    }
    WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
    if (wm == null) {
      return DEFAULT_WIDTH;
    }
    Display display=wm.getDefaultDisplay();
    Point size=new Point();
    display.getSize(size);
    width=size.x;
    int height=size.y;
    if (height < width) {
      width=height;
    }
  }
  return width;
}","private int getThumbnailWidth(Context context,int targetWidth){
  final int DEFAULT_WIDTH=600;
  int width;
  if (targetWidth != 0) {
    width=targetWidth;
  }
 else {
    if (context == null) {
      return DEFAULT_WIDTH;
    }
    Point size=DisplayUtils.getDisplayPixelSize(context);
    width=size.x;
    if (size.y < width) {
      width=size.y;
    }
  }
  return width;
}",0.6452282157676349
14778,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  mProgressFooterView=View.inflate(getActivity(),R.layout.list_footer_progress,null);
  mProgressFooterView.setVisibility(View.GONE);
  ListView listView=getListView();
  listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  listView.setOnScrollListener(new ListScrollListener());
  listView.setDivider(getResources().getDrawable(R.drawable.list_divider));
  listView.setDividerHeight(1);
  listView.addFooterView(mProgressFooterView,null,false);
  setListAdapter(getNotesAdapter());
  TextView textview=(TextView)listView.getEmptyView();
  if (textview != null) {
    textview.setText(getText(R.string.notifications_empty_list));
  }
  mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)getActivity().findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(    View view){
      if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
        mPullToRefreshHelper.setRefreshing(false);
        return;
      }
      if (getActivity() instanceof NotificationsActivity) {
        ((NotificationsActivity)getActivity()).refreshNotes();
      }
    }
  }
,TextView.class);
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  mProgressFooterView=View.inflate(getActivity(),R.layout.list_footer_progress,null);
  mProgressFooterView.setVisibility(View.GONE);
  ListView listView=getListView();
  listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  listView.setOnScrollListener(new ListScrollListener());
  listView.setDivider(getResources().getDrawable(R.drawable.list_divider));
  listView.setDividerHeight(1);
  listView.addFooterView(mProgressFooterView,null,false);
  setListAdapter(getNotesAdapter());
  TextView textview=(TextView)listView.getEmptyView();
  if (textview != null) {
    textview.setText(getText(R.string.notifications_empty_list));
  }
  initPullToRefreshHelper();
}",0.745273631840796
14779,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  mProgressFooterView=View.inflate(getActivity(),R.layout.list_footer_progress,null);
  getListView().addFooterView(mProgressFooterView,null,false);
  mProgressFooterView.setVisibility(View.GONE);
  getListView().setDivider(getResources().getDrawable(R.drawable.list_divider));
  getListView().setDividerHeight(1);
  getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> arg0,    View v,    int position,    long id){
      if (position >= getPostListAdapter().getCount())       return;
      if (v == null)       return;
      PostsListPost postsListPost=(PostsListPost)getPostListAdapter().getItem(position);
      if (postsListPost == null)       return;
      if (!mIsFetchingPosts || isLoadingMorePosts()) {
        showPost(postsListPost.getPostId());
      }
 else       if (hasActivity()) {
        Toast.makeText(getActivity(),mIsPage ? R.string.loading_pages : R.string.loading_posts,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  TextView textView=(TextView)getActivity().findViewById(R.id.title_empty);
  if (textView != null) {
    if (mIsPage) {
      textView.setText(getText(R.string.pages_empty_list));
    }
 else {
      textView.setText(getText(R.string.posts_empty_list));
    }
  }
  WordPress.setOnPostUploadedListener(this);
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  mProgressFooterView=View.inflate(getActivity(),R.layout.list_footer_progress,null);
  getListView().addFooterView(mProgressFooterView,null,false);
  mProgressFooterView.setVisibility(View.GONE);
  getListView().setDivider(getResources().getDrawable(R.drawable.list_divider));
  getListView().setDividerHeight(1);
  getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> arg0,    View v,    int position,    long id){
      if (position >= getPostListAdapter().getCount())       return;
      if (v == null)       return;
      PostsListPost postsListPost=(PostsListPost)getPostListAdapter().getItem(position);
      if (postsListPost == null)       return;
      if (!mIsFetchingPosts || isLoadingMorePosts()) {
        showPost(postsListPost.getPostId());
      }
 else       if (hasActivity()) {
        Toast.makeText(getActivity(),mIsPage ? R.string.loading_pages : R.string.loading_posts,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  TextView textView=(TextView)getActivity().findViewById(R.id.title_empty);
  if (textView != null) {
    if (mIsPage) {
      textView.setText(getText(R.string.pages_empty_list));
    }
 else {
      textView.setText(getText(R.string.posts_empty_list));
    }
  }
  initPullToRefreshHelper();
  WordPress.setOnPostUploadedListener(this);
}",0.990258649647296
14780,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.post_listview,container,false);
  mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(    View view){
      if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
        mPullToRefreshHelper.setRefreshing(false);
        return;
      }
      refreshPosts((PostsActivity)getActivity());
    }
  }
,LinearLayout.class);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.post_listview,container,false);
}",0.4213135068153655
14781,"@Override public void onPostAction(int action,final Post post){
  if (post == null) {
    Toast.makeText(PostsActivity.this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
    return;
  }
  if (action == POST_DELETE) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedDelete);
    if (post.isLocalDraft()) {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText(R.string.delete_draft));
      dialogBuilder.setMessage(getResources().getText(R.string.delete_sure) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          WordPress.wpDB.deletePost(post);
          popPostDetail();
          attemptToSelectPost();
          mPostList.getPostListAdapter().loadPosts();
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
 else {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText((post.isPage()) ? R.string.delete_page : R.string.delete_post));
      dialogBuilder.setMessage(getResources().getText((post.isPage()) ? R.string.delete_sure_page : R.string.delete_sure_post) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          new deletePostTask().execute(post);
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
  }
 else   if (action == POST_SHARE) {
    new shareURLTask().execute(post);
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedShare);
  }
 else   if (action == POST_CLEAR) {
    FragmentManager fm=getSupportFragmentManager();
    ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
    if (f != null) {
      f.clearContent();
    }
  }
 else   if (action == POST_EDIT) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedEdit);
  }
 else   if (action == POST_VIEW) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedPreview);
  }
}","@Override public void onPostAction(int action,final Post post){
  if (post == null) {
    Toast.makeText(PostsActivity.this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
    return;
  }
  if (action == POST_DELETE) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedDelete);
    if (post.isLocalDraft()) {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText(R.string.delete_draft));
      dialogBuilder.setMessage(getResources().getText(R.string.delete_sure) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          WordPress.wpDB.deletePost(post);
          popPostDetail();
          attemptToSelectPost();
          mPostList.getPostListAdapter().loadPosts();
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
 else {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText((post.isPage()) ? R.string.delete_page : R.string.delete_post));
      dialogBuilder.setMessage(getResources().getText((post.isPage()) ? R.string.delete_sure_page : R.string.delete_sure_post) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          new deletePostTask().execute(post);
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
  }
 else   if (action == POST_SHARE) {
    if (post.getStatusEnum() != PostStatus.PUBLISHED) {
      AlertUtil.showAlert(this,R.string.error,post.isPage() ? R.string.page_not_published : R.string.post_not_published);
      return;
    }
    Intent share=new Intent(Intent.ACTION_SEND);
    share.setType(""String_Node_Str"");
    share.putExtra(Intent.EXTRA_SUBJECT,post.getTitle());
    share.putExtra(Intent.EXTRA_TEXT,post.getPermaLink());
    startActivity(Intent.createChooser(share,getResources().getText(R.string.share_url)));
    AppLockManager.getInstance().setExtendedTimeout();
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedShare);
  }
 else   if (action == POST_CLEAR) {
    FragmentManager fm=getSupportFragmentManager();
    ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
    if (f != null) {
      f.clearContent();
    }
  }
 else   if (action == POST_EDIT) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedEdit);
  }
 else   if (action == POST_VIEW) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedPreview);
  }
}",0.9177514792899408
14782,"@Override protected String doInBackground(Post... params){
  String result=null;
  post=params[0];
  if (post == null)   return null;
  Blog blog=WordPress.currentBlog;
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Object getPostResult;
  try {
    Object[] vParams={WordPress.currentBlog.getRemoteBlogId(),post.getRemotePostId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword()};
    getPostResult=client.call(mIsPage ? ""String_Node_Str"" : ""String_Node_Str"",vParams);
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
  if (getPostResult != null && getPostResult instanceof Map) {
    try {
      Map<?,?> postMap=(Map<?,?>)getPostResult;
      String postStatus=MapUtils.getMapStr(postMap,mIsPage ? ""String_Node_Str"" : ""String_Node_Str"");
      if (!""String_Node_Str"".equals(postStatus)) {
        if (mIsPage) {
          mErrorMsg=getString(R.string.page_not_published);
        }
 else {
          mErrorMsg=getString(R.string.post_not_published);
        }
        return null;
      }
 else {
        String postUrl=MapUtils.getMapStr(postMap,""String_Node_Str"");
        String shortlink=getShortlinkTagHref(postUrl);
        if (shortlink == null) {
          result=postUrl;
        }
 else {
          result=shortlink;
        }
      }
    }
 catch (    Exception e) {
      mErrorMsg=getResources().getText(R.string.error_generic).toString();
      return null;
    }
  }
  return result;
}","@Override protected Void doInBackground(Void... params){
  Object[] commentParams={WordPress.currentBlog.getRemoteBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword()};
  try {
    ApiHelper.refreshComments(PostsActivity.this,commentParams);
  }
 catch (  final Exception e) {
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
  }
  return null;
}",0.1757862990090478
14783,"@Override protected void onPostExecute(String shareURL){
  dismissDialog(ID_DIALOG_SHARE);
  if (shareURL == null) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
    dialogBuilder.setMessage(mErrorMsg);
    dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    if (!isFinishing()) {
      dialogBuilder.create().show();
    }
  }
 else {
    Intent share=new Intent(Intent.ACTION_SEND);
    share.setType(""String_Node_Str"");
    share.putExtra(Intent.EXTRA_SUBJECT,post.getTitle());
    share.putExtra(Intent.EXTRA_TEXT,shareURL);
    startActivity(Intent.createChooser(share,getResources().getText(R.string.share_url)));
    AppLockManager.getInstance().setExtendedTimeout();
  }
}","@Override protected void onPostExecute(Boolean result){
  dismissDialog(ID_DIALOG_DELETING);
  attemptToSelectPost();
  if (result) {
    Toast.makeText(PostsActivity.this,getResources().getText((mIsPage) ? R.string.page_deleted : R.string.post_deleted),Toast.LENGTH_SHORT).show();
    checkForLocalChanges(false);
    WordPress.wpDB.deletePost(post);
    mPostList.requestPosts(false);
    mPostList.setRefreshing(true);
  }
 else {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
    dialogBuilder.setMessage(mErrorMsg);
    dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    if (!isFinishing()) {
      dialogBuilder.create().show();
    }
  }
}",0.608786610878661
14784,"@Override protected void onPreExecute(){
  showDialog(ID_DIALOG_SHARE);
}","@Override protected void onPreExecute(){
  popPostDetail();
  showDialog(ID_DIALOG_DELETING);
}",0.8214285714285714
14785,"/** 
 * Show Alert Dialog
 * @param context
 * @param titleId
 * @param messageId
 * @param positiveButtontxt
 * @param positiveListener
 */
public static void showAlert(Context context,int titleId,String message,CharSequence positiveButtontxt,DialogInterface.OnClickListener positiveListener){
  Dialog dlg=new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(titleId).setPositiveButton(positiveButtontxt,positiveListener).setMessage(message).setCancelable(false).create();
  dlg.show();
}","/** 
 * Show Alert Dialog
 * @param context
 * @param titleId
 * @param messageId
 * @param positiveButtontxt
 * @param positiveListener
 */
public static void showAlert(Context context,int titleId,String message,CharSequence positiveButtontxt,DialogInterface.OnClickListener positiveListener){
  Dialog dlg=new AlertDialog.Builder(context).setTitle(titleId).setPositiveButton(positiveButtontxt,positiveListener).setMessage(message).setCancelable(false).create();
  dlg.show();
}",0.7005988023952096
14786,"public MediaFile getMediaFile(String src,Post post){
  Cursor c=db.query(MEDIA_TABLE,null,""String_Node_Str"" + post.getId() + ""String_Node_Str""+ src+ ""String_Node_Str"",null,null,null,null);
  int numRows=c.getCount();
  c.moveToFirst();
  MediaFile mf=new MediaFile();
  if (numRows >= 1) {
    mf.setPostID(c.getInt(1));
    mf.setFilePath(c.getString(2));
    mf.setFileName(c.getString(3));
    mf.setTitle(c.getString(4));
    mf.setDescription(c.getString(5));
    mf.setCaption(c.getString(6));
    mf.setHorizontalAlignment(c.getInt(7));
    mf.setWidth(c.getInt(8));
    mf.setHeight(c.getInt(9));
    mf.setMimeType(c.getString(10));
    mf.setFeatured(c.getInt(11) > 0);
    mf.setVideo(c.getInt(12) > 0);
    mf.setFeaturedInPost(c.getInt(13) > 0);
    mf.setFileURL(c.getString(14));
    mf.setThumbnailURL(c.getString(15));
    mf.setMediaId(c.getString(16));
    mf.setBlogId(c.getString(17));
    mf.setDateCreatedGMT(c.getLong(18));
    mf.setUploadState(c.getString(19));
    mf.setVideoPressShortCode(c.getString(20));
  }
 else {
    c.close();
    return null;
  }
  c.close();
  return mf;
}","public MediaFile getMediaFile(String src,Post post){
  Cursor c=db.query(MEDIA_TABLE,null,""String_Node_Str"",new String[]{String.valueOf(post.getLocalTablePostId()),src},null,null,null);
  try {
    if (c.moveToFirst()) {
      MediaFile mf=new MediaFile();
      mf.setId(c.getInt(0));
      mf.setPostID(c.getInt(1));
      mf.setFilePath(c.getString(2));
      mf.setFileName(c.getString(3));
      mf.setTitle(c.getString(4));
      mf.setDescription(c.getString(5));
      mf.setCaption(c.getString(6));
      mf.setHorizontalAlignment(c.getInt(7));
      mf.setWidth(c.getInt(8));
      mf.setHeight(c.getInt(9));
      mf.setMimeType(c.getString(10));
      mf.setFeatured(c.getInt(11) > 0);
      mf.setVideo(c.getInt(12) > 0);
      mf.setFeaturedInPost(c.getInt(13) > 0);
      mf.setFileURL(c.getString(14));
      mf.setThumbnailURL(c.getString(15));
      mf.setMediaId(c.getString(16));
      mf.setBlogId(c.getString(17));
      mf.setDateCreatedGMT(c.getLong(18));
      mf.setUploadState(c.getString(19));
      mf.setVideoPressShortCode(c.getString(20));
      return mf;
    }
 else {
      return null;
    }
  }
  finally {
    c.close();
  }
}",0.5353846153846153
14787,"public WordPressDB(Context ctx){
  this.context=ctx;
  db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
  db.execSQL(CREATE_TABLE_SETTINGS);
  db.execSQL(CREATE_TABLE_POSTS);
  db.execSQL(CREATE_TABLE_CATEGORIES);
  db.execSQL(CREATE_TABLE_QUICKPRESS_SHORTCUTS);
  db.execSQL(CREATE_TABLE_MEDIA);
  db.execSQL(CREATE_TABLE_THEMES);
  db.execSQL(CREATE_TABLE_NOTES);
  CommentTable.createTables(db);
  int currentVersion=db.getVersion();
switch (currentVersion) {
case 0:
    currentVersion++;
case 1:
  db.execSQL(ADD_BLOGID);
db.execSQL(UPDATE_BLOGID);
db.execSQL(ADD_LOCATION_FLAG);
db.execSQL(ADD_DOTCOM_USERNAME);
db.execSQL(ADD_DOTCOM_PASSWORD);
db.execSQL(ADD_API_KEY);
db.execSQL(ADD_API_BLOGID);
db.execSQL(ADD_DOTCOM_FLAG);
db.execSQL(ADD_WP_VERSION);
currentVersion=9;
case 9:
db.execSQL(ADD_HTTPUSER);
db.execSQL(ADD_HTTPPASSWORD);
migratePasswords();
currentVersion++;
case 10:
db.delete(POSTS_TABLE,null,null);
db.execSQL(CREATE_TABLE_POSTS);
migrateDrafts();
db.execSQL(ADD_POST_FORMATS);
currentVersion++;
case 11:
db.execSQL(ADD_SCALED_IMAGE);
db.execSQL(ADD_SCALED_IMAGE_IMG_WIDTH);
db.execSQL(ADD_LOCAL_POST_CHANGES);
currentVersion++;
case 12:
db.execSQL(ADD_FEATURED_IN_POST);
currentVersion++;
case 13:
db.execSQL(ADD_HOME_URL);
currentVersion++;
case 14:
db.execSQL(ADD_BLOG_OPTIONS);
currentVersion++;
case 15:
currentVersion++;
case 16:
migrateWPComAccount();
currentVersion++;
case 17:
db.execSQL(ADD_PARENTID_IN_CATEGORIES);
currentVersion++;
case 18:
db.execSQL(ADD_ACCOUNTS_ADMIN_FLAG);
db.execSQL(ADD_MEDIA_FILE_URL);
db.execSQL(ADD_MEDIA_THUMBNAIL_URL);
db.execSQL(ADD_MEDIA_UNIQUE_ID);
db.execSQL(ADD_MEDIA_BLOG_ID);
db.execSQL(ADD_MEDIA_DATE_GMT);
db.execSQL(ADD_MEDIA_UPLOAD_STATE);
currentVersion++;
case 19:
currentVersion++;
case 20:
db.execSQL(ADD_ACCOUNTS_HIDDEN_FLAG);
currentVersion++;
case 21:
db.execSQL(ADD_MEDIA_VIDEOPRESS_SHORTCODE);
currentVersion++;
case 22:
currentVersion++;
case 23:
CommentTable.reset(db);
currentVersion++;
}
db.setVersion(DATABASE_VERSION);
}","public WordPressDB(Context ctx){
  this.context=ctx;
  db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
  db.execSQL(CREATE_TABLE_SETTINGS);
  db.execSQL(CREATE_TABLE_POSTS);
  db.execSQL(CREATE_TABLE_CATEGORIES);
  db.execSQL(CREATE_TABLE_QUICKPRESS_SHORTCUTS);
  db.execSQL(CREATE_TABLE_MEDIA);
  db.execSQL(CREATE_TABLE_THEMES);
  db.execSQL(CREATE_TABLE_NOTES);
  CommentTable.createTables(db);
  int currentVersion=db.getVersion();
switch (currentVersion) {
case 0:
    currentVersion++;
case 1:
  db.execSQL(ADD_BLOGID);
db.execSQL(UPDATE_BLOGID);
db.execSQL(ADD_LOCATION_FLAG);
db.execSQL(ADD_DOTCOM_USERNAME);
db.execSQL(ADD_DOTCOM_PASSWORD);
db.execSQL(ADD_API_KEY);
db.execSQL(ADD_API_BLOGID);
db.execSQL(ADD_DOTCOM_FLAG);
db.execSQL(ADD_WP_VERSION);
currentVersion=9;
case 9:
db.execSQL(ADD_HTTPUSER);
db.execSQL(ADD_HTTPPASSWORD);
migratePasswords();
currentVersion++;
case 10:
db.delete(POSTS_TABLE,null,null);
db.execSQL(CREATE_TABLE_POSTS);
db.execSQL(ADD_POST_FORMATS);
currentVersion++;
case 11:
db.execSQL(ADD_SCALED_IMAGE);
db.execSQL(ADD_SCALED_IMAGE_IMG_WIDTH);
db.execSQL(ADD_LOCAL_POST_CHANGES);
currentVersion++;
case 12:
db.execSQL(ADD_FEATURED_IN_POST);
currentVersion++;
case 13:
db.execSQL(ADD_HOME_URL);
currentVersion++;
case 14:
db.execSQL(ADD_BLOG_OPTIONS);
currentVersion++;
case 15:
currentVersion++;
case 16:
migrateWPComAccount();
currentVersion++;
case 17:
db.execSQL(ADD_PARENTID_IN_CATEGORIES);
currentVersion++;
case 18:
db.execSQL(ADD_ACCOUNTS_ADMIN_FLAG);
db.execSQL(ADD_MEDIA_FILE_URL);
db.execSQL(ADD_MEDIA_THUMBNAIL_URL);
db.execSQL(ADD_MEDIA_UNIQUE_ID);
db.execSQL(ADD_MEDIA_BLOG_ID);
db.execSQL(ADD_MEDIA_DATE_GMT);
db.execSQL(ADD_MEDIA_UPLOAD_STATE);
currentVersion++;
case 19:
currentVersion++;
case 20:
db.execSQL(ADD_ACCOUNTS_HIDDEN_FLAG);
currentVersion++;
case 21:
db.execSQL(ADD_MEDIA_VIDEOPRESS_SHORTCODE);
currentVersion++;
case 22:
currentVersion++;
case 23:
CommentTable.reset(db);
currentVersion++;
}
db.setVersion(DATABASE_VERSION);
}",0.9957595410326764
14788,"public int updatePost(Post post,int blogID){
  int success=0;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    if (post.getMt_text_more() != null)     values.put(""String_Node_Str"",post.getMt_text_more());
    values.put(""String_Node_Str"",post.isUploaded());
    JSONArray categoriesJsonArray=post.getJSONCategories();
    if (categoriesJsonArray != null) {
      values.put(""String_Node_Str"",categoriesJsonArray.toString());
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getWP_post_format());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getMt_excerpt());
    int pageInt=0;
    if (post.isPage())     pageInt=1;
    success=db.update(POSTS_TABLE,values,""String_Node_Str"" + post.getBlogID() + ""String_Node_Str""+ post.getId()+ ""String_Node_Str""+ pageInt,null);
  }
  return (success);
}","public int updatePost(Post post){
  int result=0;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    values.put(""String_Node_Str"",post.getMoreText());
    values.put(""String_Node_Str"",post.isUploaded());
    JSONArray categoriesJsonArray=post.getJSONCategories();
    if (categoriesJsonArray != null) {
      values.put(""String_Node_Str"",categoriesJsonArray.toString());
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getKeywords());
    values.put(""String_Node_Str"",post.getPassword());
    values.put(""String_Node_Str"",post.getPostStatus());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getPostFormat());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getPostExcerpt());
    result=db.update(POSTS_TABLE,values,""String_Node_Str"",new String[]{String.valueOf(post.getLocalTableBlogId()),String.valueOf(post.getLocalTablePostId()),String.valueOf(SqlUtils.boolToSql(post.isPage()))});
  }
  return (result);
}",0.4819903453397697
14789,"public void deleteMediaFilesForPost(Post post){
  db.delete(MEDIA_TABLE,""String_Node_Str"" + post.getBlogID() + ""String_Node_Str""+ post.getId(),null);
}","public void deleteMediaFilesForPost(Post post){
  db.delete(MEDIA_TABLE,""String_Node_Str"" + post.getLocalTableBlogId() + ""String_Node_Str""+ post.getLocalTablePostId(),null);
}",0.9202453987730062
14790,"public boolean deletePost(Post post){
  int result=db.delete(POSTS_TABLE,""String_Node_Str"",new String[]{String.valueOf(post.getBlogID()),String.valueOf(post.getId())});
  return (result == 1);
}","public boolean deletePost(Post post){
  int result=db.delete(POSTS_TABLE,""String_Node_Str"",new String[]{String.valueOf(post.getLocalTableBlogId()),String.valueOf(post.getLocalTablePostId())});
  return (result == 1);
}",0.9368932038834952
14791,"public long savePost(Post post,int blogID){
  long returnValue=-1;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    values.put(""String_Node_Str"",post.getMt_text_more());
    JSONArray categoriesJsonArray=post.getJSONCategories();
    if (categoriesJsonArray != null) {
      values.put(""String_Node_Str"",categoriesJsonArray.toString());
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isUploaded());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getWP_post_format());
    values.put(""String_Node_Str"",post.getLatitude());
    values.put(""String_Node_Str"",post.getLongitude());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getMt_excerpt());
    returnValue=db.insert(POSTS_TABLE,null,values);
  }
  return (returnValue);
}","public long savePost(Post post){
  long result=-1;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",post.getLocalTableBlogId());
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    values.put(""String_Node_Str"",post.getMoreText());
    JSONArray categoriesJsonArray=post.getJSONCategories();
    if (categoriesJsonArray != null) {
      values.put(""String_Node_Str"",categoriesJsonArray.toString());
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getKeywords());
    values.put(""String_Node_Str"",post.getPassword());
    values.put(""String_Node_Str"",post.getPostStatus());
    values.put(""String_Node_Str"",post.isUploaded());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getPostFormat());
    values.put(""String_Node_Str"",post.getLatitude());
    values.put(""String_Node_Str"",post.getLongitude());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getPostExcerpt());
    result=db.insert(POSTS_TABLE,null,values);
    if (result >= 0 && post.isLocalDraft() && !post.isUploaded()) {
      post.setLocalTablePostId(result);
    }
  }
  return (result);
}",0.7406844106463878
14792,"public void setDate_created_gmt(long dateCreatedGmt){
  date_created_gmt=dateCreatedGmt;
}","public void setDate_created_gmt(long dateCreatedGmt){
  this.dateCreatedGmt=dateCreatedGmt;
}",0.9398907103825136
14793,"public PostStatus getStatusEnum(){
  return PostStatus.fromString(post_status);
}","public PostStatus getStatusEnum(){
  return PostStatus.fromString(status);
}",0.9681528662420382
14794,"public String getTitle(){
  return title;
}","public String getTitle(){
  return StringUtils.notNullStr(title);
}",0.7818181818181819
14795,"public long getDate_created_gmt(){
  return date_created_gmt;
}","public long getDate_created_gmt(){
  return dateCreatedGmt;
}",0.9516129032258064
14796,"/** 
 * Get the entire post content Joins description and mt_text_more fields if both are valid
 * @return post content as String
 */
public String getContent(){
  String postContent;
  if (!getMt_text_more().equals(""String_Node_Str"")) {
    if (isLocalDraft())     postContent=getDescription() + ""String_Node_Str"" + getMt_text_more();
 else     postContent=getDescription() + ""String_Node_Str"" + getMt_text_more();
  }
 else   postContent=getDescription();
  return postContent;
}","/** 
 * Get the entire post content Joins description and moreText fields if both are valid
 * @return post content as String
 */
public String getContent(){
  String postContent;
  if (!TextUtils.isEmpty(getMoreText())) {
    if (isLocalDraft())     postContent=getDescription() + ""String_Node_Str"" + getMoreText();
 else     postContent=getDescription() + ""String_Node_Str"" + getMoreText();
  }
 else   postContent=getDescription();
  return postContent;
}",0.6624068157614483
14797,"public String getDescription(){
  return description;
}","public String getDescription(){
  return StringUtils.notNullStr(description);
}",0.8208955223880597
14798,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + blogID;
  result=prime * result + (int)(id ^ (id >>> 32));
  result=prime * result + (isPage ? 1231 : 1237);
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + localTableBlogId;
  result=prime * result + (int)(localTablePostId ^ (localTablePostId >>> 32));
  result=prime * result + (isPage ? 1231 : 1237);
  return result;
}",0.9053497942386832
14799,"public String getPermaLink(){
  return permaLink;
}","public String getPermaLink(){
  return StringUtils.notNullStr(permaLink);
}",0.8095238095238095
14800,"public String getMediaPaths(){
  return mediaPaths;
}","public String getMediaPaths(){
  return StringUtils.notNullStr(mediaPaths);
}",0.8153846153846154
14801,"public Post(int blog_id,String title,String content,String excerpt,String picturePaths,long date,String categories,String tags,String status,String password,double latitude,double longitude,boolean isPage,String postFormat,boolean isLocalChange){
  this.blogID=blog_id;
  this.title=title;
  this.description=content;
  this.mt_excerpt=excerpt;
  this.mediaPaths=picturePaths;
  this.date_created_gmt=date;
  this.categories=categories;
  this.mt_keywords=tags;
  this.post_status=status;
  this.wp_password=password;
  this.isPage=isPage;
  this.wp_post_format=postFormat;
  this.latitude=latitude;
  this.longitude=longitude;
  this.isLocalChange=isLocalChange;
}","public Post(int blogId,boolean isPage){
  this.localTableBlogId=blogId;
  this.isPage=isPage;
  this.localDraft=true;
}",0.2397959183673469
14802,"/** 
 * Checks if this post currently has data differing from another post.
 * @param otherPost The post to compare to this post's editable data.
 * @return True if this post's data differs from otherPost's data, False otherwise.
 */
public boolean hasChanges(Post otherPost){
  return otherPost == null || !(StringUtils.equals(title,otherPost.title) && StringUtils.equals(description,otherPost.description) && StringUtils.equals(mt_excerpt,otherPost.mt_excerpt)&& StringUtils.equals(mt_keywords,otherPost.mt_keywords)&& StringUtils.equals(categories,otherPost.categories)&& StringUtils.equals(post_status,otherPost.post_status)&& StringUtils.equals(wp_password,otherPost.wp_password)&& StringUtils.equals(wp_post_format,otherPost.wp_post_format)&& this.date_created_gmt == otherPost.date_created_gmt && this.latitude == otherPost.latitude && this.longitude == otherPost.longitude);
}","/** 
 * Checks if this post currently has data differing from another post.
 * @param otherPost The post to compare to this post's editable data.
 * @return True if this post's data differs from otherPost's data, False otherwise.
 */
public boolean hasChanges(Post otherPost){
  return otherPost == null || !(StringUtils.equals(title,otherPost.title) && StringUtils.equals(description,otherPost.description) && StringUtils.equals(excerpt,otherPost.excerpt)&& StringUtils.equals(keywords,otherPost.keywords)&& StringUtils.equals(categories,otherPost.categories)&& StringUtils.equals(status,otherPost.status)&& StringUtils.equals(password,otherPost.password)&& StringUtils.equals(postFormat,otherPost.postFormat)&& this.dateCreatedGmt == otherPost.dateCreatedGmt && this.latitude == otherPost.latitude && this.longitude == otherPost.longitude);
}",0.8784722222222222
14803,"public boolean isNew(){
  return getId() >= 0;
}","public boolean isNew(){
  return getLocalTablePostId() >= 0;
}",0.8727272727272727
14804,"public String getLink(){
  return link;
}","public String getLink(){
  return StringUtils.notNullStr(link);
}",0.7735849056603774
14805,"@Override public boolean equals(Object other){
  if (other == this)   return true;
  if (other instanceof Post) {
    Post otherPost=(Post)other;
    return (this.id == otherPost.id && this.isPage == otherPost.isPage && this.blogID == otherPost.blogID);
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object other){
  if (other == this)   return true;
  if (other instanceof Post) {
    Post otherPost=(Post)other;
    return (this.localTablePostId == otherPost.localTablePostId && this.isPage == otherPost.isPage && this.localTableBlogId == otherPost.localTableBlogId);
  }
 else {
    return false;
  }
}",0.8115015974440895
14806,"public String getQuickPostType(){
  return quickPostType;
}","public String getQuickPostType(){
  return StringUtils.notNullStr(quickPostType);
}",0.8309859154929577
14807,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_new_edit_post);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action) || EditPostContentFragment.NEW_MEDIA_GALLERY.equals(action)|| EditPostContentFragment.NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)|| (extras != null && extras.getInt(""String_Node_Str"",-1) > -1)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int blogId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        try {
          Blog quickPressBlog=WordPress.wpDB.instantiateBlogByLocalId(blogId);
          if (quickPressBlog.isHidden()) {
            showErrorAndFinish(R.string.error_blog_hidden);
            return;
          }
          WordPress.currentBlog=quickPressBlog;
        }
 catch (        Exception e) {
          showErrorAndFinish(R.string.blog_not_found);
          return;
        }
      }
      mPost=new Post(WordPress.getCurrentLocalTableBlogId(),false);
      mIsNewPost=true;
    }
 else     if (extras != null) {
      long postId=extras.getLong(EXTRA_POSTID,-1);
      boolean isPage=extras.getBoolean(EXTRA_IS_PAGE);
      mIsNewPost=extras.getBoolean(EXTRA_IS_NEW_POST);
      mPost=new Post(WordPress.getCurrentLocalTableBlogId(),postId,isPage);
      mOriginalPost=new Post(WordPress.getCurrentLocalTableBlogId(),postId,isPage);
      if (isPage) {
        WPMobileStatsUtil.trackEventForWPCom(WPMobileStatsUtil.StatsEventPageDetailOpenedEditor);
        mStatEventEditorClosed=WPMobileStatsUtil.StatsEventPageDetailClosedEditor;
      }
 else {
        WPMobileStatsUtil.trackEventForWPCom(WPMobileStatsUtil.StatsEventPostDetailOpenedEditor);
        mStatEventEditorClosed=WPMobileStatsUtil.StatsEventPostDetailClosedEditor;
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else   if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
    try {
      mPost=(Post)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
      mOriginalPost=(Post)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
    }
 catch (    ClassCastException e) {
      mPost=null;
    }
  }
  if (WordPress.getCurrentBlog() == null) {
    showErrorAndFinish(R.string.blog_not_found);
    return;
  }
  if (mPost == null || mPost.getId() < 0) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  setTitle(WordPress.getCurrentBlog().getBlogName());
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager());
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      supportInvalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(WordPress.getCurrentBlog().getBlogName());
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        savePost(true);
        if (mEditPostPreviewFragment != null)         mEditPostPreviewFragment.loadPost(mPost);
      }
    }
  }
);
  mAutoSaveHandler=new Handler();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_new_edit_post);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action) || EditPostContentFragment.NEW_MEDIA_GALLERY.equals(action)|| EditPostContentFragment.NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)|| (extras != null && extras.getInt(""String_Node_Str"",-1) > -1)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int blogId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        try {
          Blog quickPressBlog=WordPress.wpDB.instantiateBlogByLocalId(blogId);
          if (quickPressBlog.isHidden()) {
            showErrorAndFinish(R.string.error_blog_hidden);
            return;
          }
          WordPress.currentBlog=quickPressBlog;
        }
 catch (        Exception e) {
          showErrorAndFinish(R.string.blog_not_found);
          return;
        }
      }
      mPost=new Post(WordPress.getCurrentLocalTableBlogId(),false);
      WordPress.wpDB.savePost(mPost);
      mIsNewPost=true;
    }
 else     if (extras != null) {
      long localTablePostId=extras.getLong(EXTRA_POSTID,-1);
      boolean isPage=extras.getBoolean(EXTRA_IS_PAGE);
      mIsNewPost=extras.getBoolean(EXTRA_IS_NEW_POST);
      mPost=WordPress.wpDB.getPostForLocalTablePostId(localTablePostId);
      mOriginalPost=WordPress.wpDB.getPostForLocalTablePostId(localTablePostId);
      if (isPage) {
        WPMobileStatsUtil.trackEventForWPCom(WPMobileStatsUtil.StatsEventPageDetailOpenedEditor);
        mStatEventEditorClosed=WPMobileStatsUtil.StatsEventPageDetailClosedEditor;
      }
 else {
        WPMobileStatsUtil.trackEventForWPCom(WPMobileStatsUtil.StatsEventPostDetailOpenedEditor);
        mStatEventEditorClosed=WPMobileStatsUtil.StatsEventPostDetailClosedEditor;
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else   if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
    try {
      mPost=(Post)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
      mOriginalPost=(Post)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
    }
 catch (    ClassCastException e) {
      mPost=null;
    }
  }
  if (WordPress.getCurrentBlog() == null) {
    showErrorAndFinish(R.string.blog_not_found);
    return;
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  setTitle(WordPress.getCurrentBlog().getBlogName());
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager());
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      supportInvalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(WordPress.getCurrentBlog().getBlogName());
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        savePost(true);
        if (mEditPostPreviewFragment != null)         mEditPostPreviewFragment.loadPost(mPost);
      }
    }
  }
);
  mAutoSaveHandler=new Handler();
}",0.9646053158808602
14808,"private void showCancelAlert(){
  if (mEditPostContentFragment != null && mEditPostContentFragment.hasEmptyContentFields()) {
    if (mIsNewPost)     mPost.delete();
    finish();
    return;
  }
  savePost(true);
  if (mOriginalPost != null && !mPost.hasChanges(mOriginalPost)) {
    mOriginalPost.update();
    WordPress.currentPost=mOriginalPost;
    finish();
    return;
  }
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(this);
  dialogBuilder.setTitle(getString((mPost.isPage()) ? R.string.edit_page : R.string.edit_post));
  dialogBuilder.setMessage(getString(R.string.prompt_save_changes));
  dialogBuilder.setPositiveButton(getResources().getText(R.string.save),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      savePost(false);
      WordPress.currentPost=mPost;
      Intent i=new Intent();
      i.putExtra(""String_Node_Str"",true);
      setResult(RESULT_OK,i);
      finish();
    }
  }
);
  dialogBuilder.setNeutralButton(getString(R.string.discard),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      if (mOriginalPost != null && !mIsNewPost) {
        mOriginalPost.update();
        WordPress.currentPost=mOriginalPost;
      }
 else       if (mPost != null && mIsNewPost) {
        mPost.delete();
      }
      finish();
    }
  }
);
  dialogBuilder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      dialog.dismiss();
    }
  }
);
  dialogBuilder.setCancelable(true);
  dialogBuilder.create().show();
}","private void showCancelAlert(){
  if (mEditPostContentFragment != null && mEditPostContentFragment.hasEmptyContentFields()) {
    if (mIsNewPost) {
      WordPress.wpDB.deletePost(mPost);
    }
    finish();
    return;
  }
  savePost(true);
  if (mOriginalPost != null && !mPost.hasChanges(mOriginalPost)) {
    WordPress.wpDB.updatePost(mOriginalPost);
    WordPress.currentPost=mOriginalPost;
    finish();
    return;
  }
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(this);
  dialogBuilder.setTitle(getString((mPost.isPage()) ? R.string.edit_page : R.string.edit_post));
  dialogBuilder.setMessage(getString(R.string.prompt_save_changes));
  dialogBuilder.setPositiveButton(getResources().getText(R.string.save),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      savePost(false);
      WordPress.currentPost=mPost;
      Intent i=new Intent();
      i.putExtra(""String_Node_Str"",true);
      setResult(RESULT_OK,i);
      finish();
    }
  }
);
  dialogBuilder.setNeutralButton(getString(R.string.discard),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      if (mOriginalPost != null && !mIsNewPost) {
        WordPress.wpDB.updatePost(mOriginalPost);
        WordPress.currentPost=mOriginalPost;
      }
 else       if (mPost != null && mIsNewPost) {
        WordPress.wpDB.deletePost(mPost);
      }
      finish();
    }
  }
);
  dialogBuilder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      dialog.dismiss();
    }
  }
);
  dialogBuilder.setCancelable(true);
  dialogBuilder.create().show();
}",0.9483459082994776
14809,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || ((requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case MediaGalleryActivity.REQUEST_CODE:
      if (resultCode == Activity.RESULT_OK) {
        handleMediaGalleryResult(data);
      }
    break;
case MediaGalleryPickerActivity.REQUEST_CODE:
  if (resultCode == Activity.RESULT_OK) {
    handleMediaGalleryPickerResult(data);
  }
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
Uri imageUri=data.getData();
fetchMedia(imageUri);
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
try {
File f=new File(mMediaCapturePath);
Uri capturedImageUri=Uri.fromFile(f);
if (!addMedia(capturedImageUri,null)) Toast.makeText(getActivity(),getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
}
 catch (Exception e) {
e.printStackTrace();
}
catch (OutOfMemoryError e) {
e.printStackTrace();
}
}
 else if (mActivity != null && mQuickMediaType > -1 && TextUtils.isEmpty(mContentEditText.getText())) {
mActivity.getPost().delete();
mActivity.finish();
}
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
fetchMedia(videoUri);
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideoUri=MediaUtils.getLastRecordedVideoUri(getActivity());
if (!addMedia(capturedVideoUri,null)) Toast.makeText(getActivity(),getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
}
 else if (mActivity != null && mQuickMediaType > -1 && TextUtils.isEmpty(mContentEditText.getText())) {
mActivity.getPost().delete();
mActivity.finish();
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
if (extras == null) return;
String linkURL=extras.getString(""String_Node_Str"");
if (linkURL != null && !linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (str == null) return;
if (mActivity.getPost().isLocalDraft()) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (linkText == null) return;
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
break;
}
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || ((requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case MediaGalleryActivity.REQUEST_CODE:
      if (resultCode == Activity.RESULT_OK) {
        handleMediaGalleryResult(data);
      }
    break;
case MediaGalleryPickerActivity.REQUEST_CODE:
  if (resultCode == Activity.RESULT_OK) {
    handleMediaGalleryPickerResult(data);
  }
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
Uri imageUri=data.getData();
fetchMedia(imageUri);
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
try {
File f=new File(mMediaCapturePath);
Uri capturedImageUri=Uri.fromFile(f);
if (!addMedia(capturedImageUri,null)) Toast.makeText(getActivity(),getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
}
 catch (Exception e) {
e.printStackTrace();
}
catch (OutOfMemoryError e) {
e.printStackTrace();
}
}
 else if (mActivity != null && mQuickMediaType > -1 && TextUtils.isEmpty(mContentEditText.getText())) {
WordPress.wpDB.deletePost(mActivity.getPost());
mActivity.finish();
}
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
fetchMedia(videoUri);
break;
case MediaUtils.RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideoUri=MediaUtils.getLastRecordedVideoUri(getActivity());
if (!addMedia(capturedVideoUri,null)) Toast.makeText(getActivity(),getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
}
 else if (mActivity != null && mQuickMediaType > -1 && TextUtils.isEmpty(mContentEditText.getText())) {
WordPress.wpDB.deletePost(mActivity.getPost());
mActivity.finish();
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
if (extras == null) return;
String linkURL=extras.getString(""String_Node_Str"");
if (linkURL != null && !linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (str == null) return;
if (mActivity.getPost().isLocalDraft()) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (linkText == null) return;
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
break;
}
}
}",0.99170326988775
14810,"private boolean addMedia(Uri imageUri,SpannableStringBuilder ssb){
  if (ssb != null && !MediaUtils.isInMediaStore(imageUri))   imageUri=MediaUtils.downloadExternalMedia(getActivity(),imageUri);
  if (imageUri == null) {
    return false;
  }
  Bitmap thumbnailBitmap;
  String mediaTitle;
  if (imageUri.toString().contains(""String_Node_Str"") && !MediaUtils.isInMediaStore(imageUri)) {
    thumbnailBitmap=BitmapFactory.decodeResource(getActivity().getResources(),R.drawable.media_movieclip);
    mediaTitle=getResources().getString(R.string.video);
  }
 else {
    ImageHelper ih=new ImageHelper();
    thumbnailBitmap=ih.getThumbnailForWPImageSpan(getActivity(),imageUri.getEncodedPath());
    if (thumbnailBitmap == null)     return false;
    mediaTitle=ih.getTitleForWPImageSpan(getActivity(),imageUri.getEncodedPath());
  }
  WPImageSpan is=new WPImageSpan(getActivity(),thumbnailBitmap,imageUri);
  MediaFile mediaFile=is.getMediaFile();
  mediaFile.setPostID(mActivity.getPost().getId());
  mediaFile.setTitle(mediaTitle);
  mediaFile.setFilePath(is.getImageSource().toString());
  MediaUtils.setWPImageSpanWidth(getActivity(),imageUri,is);
  if (imageUri.getEncodedPath() != null)   mediaFile.setVideo(imageUri.getEncodedPath().contains(""String_Node_Str""));
  mediaFile.save();
  if (ssb != null) {
    ssb.append(""String_Node_Str"");
    ssb.setSpan(is,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
    ssb.setSpan(as,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    ssb.append(""String_Node_Str"");
  }
 else {
    int selectionStart=mContentEditText.getSelectionStart();
    mStyleStart=selectionStart;
    int selectionEnd=mContentEditText.getSelectionEnd();
    if (selectionStart > selectionEnd) {
      int temp=selectionEnd;
      selectionEnd=selectionStart;
      selectionStart=temp;
    }
    Editable s=mContentEditText.getText();
    if (s == null)     return false;
    int line, column=0;
    if (mContentEditText.getLayout() != null) {
      line=mContentEditText.getLayout().getLineForOffset(selectionStart);
      column=mContentEditText.getSelectionStart() - mContentEditText.getLayout().getLineStart(line);
    }
    WPImageSpan[] image_spans=s.getSpans(selectionStart,selectionEnd,WPImageSpan.class);
    if (image_spans.length != 0) {
      s.insert(selectionEnd,""String_Node_Str"");
      selectionStart=selectionStart + 2;
      selectionEnd=selectionEnd + 2;
    }
 else     if (column != 0) {
      s.insert(selectionEnd,""String_Node_Str"");
      selectionStart=selectionStart + 1;
      selectionEnd=selectionEnd + 1;
    }
    s.insert(selectionStart,""String_Node_Str"");
    s.setSpan(is,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
    s.setSpan(as,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    s.insert(selectionEnd + 1,""String_Node_Str"");
  }
  if (mActivity != null && !mActivity.getSupportActionBar().isShowing())   ((InputMethodManager)mActivity.getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(InputMethodManager.SHOW_FORCED,InputMethodManager.HIDE_IMPLICIT_ONLY);
  return true;
}","private boolean addMedia(Uri imageUri,SpannableStringBuilder ssb){
  if (ssb != null && !MediaUtils.isInMediaStore(imageUri))   imageUri=MediaUtils.downloadExternalMedia(getActivity(),imageUri);
  if (imageUri == null) {
    return false;
  }
  Bitmap thumbnailBitmap;
  String mediaTitle;
  if (imageUri.toString().contains(""String_Node_Str"") && !MediaUtils.isInMediaStore(imageUri)) {
    thumbnailBitmap=BitmapFactory.decodeResource(getActivity().getResources(),R.drawable.media_movieclip);
    mediaTitle=getResources().getString(R.string.video);
  }
 else {
    ImageHelper ih=new ImageHelper();
    thumbnailBitmap=ih.getThumbnailForWPImageSpan(getActivity(),imageUri.getEncodedPath());
    if (thumbnailBitmap == null)     return false;
    mediaTitle=ih.getTitleForWPImageSpan(getActivity(),imageUri.getEncodedPath());
  }
  WPImageSpan is=new WPImageSpan(getActivity(),thumbnailBitmap,imageUri);
  MediaFile mediaFile=is.getMediaFile();
  mediaFile.setPostID(mActivity.getPost().getLocalTablePostId());
  mediaFile.setTitle(mediaTitle);
  mediaFile.setFilePath(is.getImageSource().toString());
  MediaUtils.setWPImageSpanWidth(getActivity(),imageUri,is);
  if (imageUri.getEncodedPath() != null)   mediaFile.setVideo(imageUri.getEncodedPath().contains(""String_Node_Str""));
  mediaFile.save();
  if (ssb != null) {
    ssb.append(""String_Node_Str"");
    ssb.setSpan(is,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
    ssb.setSpan(as,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    ssb.append(""String_Node_Str"");
  }
 else {
    int selectionStart=mContentEditText.getSelectionStart();
    mStyleStart=selectionStart;
    int selectionEnd=mContentEditText.getSelectionEnd();
    if (selectionStart > selectionEnd) {
      int temp=selectionEnd;
      selectionEnd=selectionStart;
      selectionStart=temp;
    }
    Editable s=mContentEditText.getText();
    if (s == null)     return false;
    int line, column=0;
    if (mContentEditText.getLayout() != null) {
      line=mContentEditText.getLayout().getLineForOffset(selectionStart);
      column=mContentEditText.getSelectionStart() - mContentEditText.getLayout().getLineStart(line);
    }
    WPImageSpan[] image_spans=s.getSpans(selectionStart,selectionEnd,WPImageSpan.class);
    if (image_spans.length != 0) {
      s.insert(selectionEnd,""String_Node_Str"");
      selectionStart=selectionStart + 2;
      selectionEnd=selectionEnd + 2;
    }
 else     if (column != 0) {
      s.insert(selectionEnd,""String_Node_Str"");
      selectionStart=selectionStart + 1;
      selectionEnd=selectionEnd + 1;
    }
    s.insert(selectionStart,""String_Node_Str"");
    s.setSpan(is,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
    s.setSpan(as,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    s.insert(selectionEnd + 1,""String_Node_Str"");
  }
  if (mActivity != null && !mActivity.getSupportActionBar().isShowing())   ((InputMethodManager)mActivity.getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(InputMethodManager.SHOW_FORCED,InputMethodManager.HIDE_IMPLICIT_ONLY);
  return true;
}",0.9978896593307204
14811,"public void savePostContent(boolean isAutoSave){
  Post post=mActivity.getPost();
  if (post == null || mContentEditText.getText() == null)   return;
  String title=(mTitleEditText.getText() != null) ? mTitleEditText.getText().toString() : ""String_Node_Str"";
  String content;
  Editable postContentEditable;
  try {
    postContentEditable=new SpannableStringBuilder(mContentEditText.getText());
  }
 catch (  IndexOutOfBoundsException e) {
    postContentEditable=mContentEditText.getText();
  }
  if (postContentEditable == null)   return;
  if (post.isLocalDraft()) {
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] characterStyles=postContentEditable.getSpans(0,postContentEditable.length(),CharacterStyle.class);
      for (      CharacterStyle characterStyle : characterStyles) {
        if (characterStyle.getClass().getName().equals(""String_Node_Str""))         postContentEditable.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContentEditable);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    WPImageSpan[] imageSpans=postContentEditable.getSpans(0,postContentEditable.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null)         continue;
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(wpIS);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
          mediaFile.save();
        }
        int tagStart=postContentEditable.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContentEditable.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContentEditable.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContentEditable.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContentEditable.toString();
  }
  if (!isAutoSave) {
    MediaGalleryImageSpan[] gallerySpans=postContentEditable.getSpans(0,postContentEditable.length(),MediaGalleryImageSpan.class);
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      int start=postContentEditable.getSpanStart(gallerySpan);
      postContentEditable.removeSpan(gallerySpan);
      postContentEditable.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
    }
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMt_text_more(""String_Node_Str"");
  }
  if (!post.isLocalDraft())   post.setLocalChange(true);
  post.update();
}","public void savePostContent(boolean isAutoSave){
  Post post=mActivity.getPost();
  if (post == null || mContentEditText.getText() == null)   return;
  String title=(mTitleEditText.getText() != null) ? mTitleEditText.getText().toString() : ""String_Node_Str"";
  String content;
  Editable postContentEditable;
  try {
    postContentEditable=new SpannableStringBuilder(mContentEditText.getText());
  }
 catch (  IndexOutOfBoundsException e) {
    postContentEditable=mContentEditText.getText();
  }
  if (postContentEditable == null)   return;
  if (post.isLocalDraft()) {
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] characterStyles=postContentEditable.getSpans(0,postContentEditable.length(),CharacterStyle.class);
      for (      CharacterStyle characterStyle : characterStyles) {
        if (characterStyle.getClass().getName().equals(""String_Node_Str""))         postContentEditable.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContentEditable);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    WPImageSpan[] imageSpans=postContentEditable.getSpans(0,postContentEditable.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null)         continue;
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(wpIS);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
          mediaFile.save();
        }
        int tagStart=postContentEditable.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContentEditable.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContentEditable.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContentEditable.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContentEditable.toString();
  }
  if (!isAutoSave) {
    MediaGalleryImageSpan[] gallerySpans=postContentEditable.getSpans(0,postContentEditable.length(),MediaGalleryImageSpan.class);
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      int start=postContentEditable.getSpanStart(gallerySpan);
      postContentEditable.removeSpan(gallerySpan);
      postContentEditable.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
    }
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMoreText(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMoreText(""String_Node_Str"");
  }
  if (!post.isLocalDraft())   post.setLocalChange(true);
  WordPress.wpDB.updatePost(post);
}",0.992457209167392
14812,"public void loadPost(Post post){
  if (post == null || post.getTitle() == null)   return;
  String postTitle=""String_Node_Str"" + post.getTitle() + ""String_Node_Str"";
  String postContent=postTitle + post.getDescription() + ""String_Node_Str""+ post.getMt_text_more();
  if (post.isLocalDraft()) {
    mTextView.setVisibility(View.VISIBLE);
    mWebView.setVisibility(View.GONE);
    mTextView.setText(WPHtml.fromHtml(postContent.replaceAll(""String_Node_Str"",""String_Node_Str""),getActivity(),post));
  }
 else {
    mTextView.setVisibility(View.GONE);
    mWebView.setVisibility(View.VISIBLE);
    String htmlText=""String_Node_Str"";
    htmlText=String.format(htmlText,StringUtils.addPTags(postContent));
    mWebView.loadDataWithBaseURL(""String_Node_Str"",htmlText,""String_Node_Str"",""String_Node_Str"",null);
  }
}","public void loadPost(Post post){
  if (post == null)   return;
  String postTitle=""String_Node_Str"" + post.getTitle() + ""String_Node_Str"";
  String postContent=postTitle + post.getDescription() + ""String_Node_Str""+ post.getMoreText();
  if (post.isLocalDraft()) {
    mTextView.setVisibility(View.VISIBLE);
    mWebView.setVisibility(View.GONE);
    mTextView.setText(WPHtml.fromHtml(postContent.replaceAll(""String_Node_Str"",""String_Node_Str""),getActivity(),post));
  }
 else {
    mTextView.setVisibility(View.GONE);
    mWebView.setVisibility(View.VISIBLE);
    String htmlText=""String_Node_Str"";
    htmlText=String.format(htmlText,StringUtils.addPTags(postContent));
    mWebView.loadDataWithBaseURL(""String_Node_Str"",htmlText,""String_Node_Str"",""String_Node_Str"",null);
  }
}",0.8118313404657017
14813,"public void savePostSettings(){
  Post post=mActivity.getPost();
  if (post == null)   return;
  String password=(mPasswordEditText.getText() != null) ? mPasswordEditText.getText().toString() : ""String_Node_Str"";
  String pubDate=(mPubDateText.getText() != null) ? mPubDateText.getText().toString() : ""String_Node_Str"";
  String excerpt=(mExcerptEditText.getText() != null) ? mExcerptEditText.getText().toString() : ""String_Node_Str"";
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (post.getDate_created_gmt() > 0)     pubDateTimestamp=post.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!post.isPage()) {
    tags=(mTagsEditText.getText() != null) ? mTagsEditText.getText().toString() : ""String_Node_Str"";
    Spinner postFormatSpinner=(Spinner)getActivity().findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  int selectedStatus=mStatusSpinner.getSelectedItemPosition();
  String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
    status=PostStatus.toString(PostStatus.PUBLISHED);
  break;
case 1:
status=PostStatus.toString(PostStatus.DRAFT);
break;
case 2:
status=PostStatus.toString(PostStatus.PENDING);
break;
case 3:
status=PostStatus.toString(PostStatus.PRIVATE);
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (WordPress.getCurrentBlog().isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mCurrentLocation == null) {
latitude=post.getLatitude();
longitude=post.getLongitude();
}
post.setMt_excerpt(excerpt);
post.setDate_created_gmt(pubDateTimestamp);
post.setJSONCategories(new JSONArray(mCategories));
post.setMt_keywords(tags);
post.setPost_status(status);
post.setWP_password(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setWP_post_form(postFormat);
post.update();
}","public void savePostSettings(){
  Post post=mActivity.getPost();
  if (post == null)   return;
  String password=(mPasswordEditText.getText() != null) ? mPasswordEditText.getText().toString() : ""String_Node_Str"";
  String pubDate=(mPubDateText.getText() != null) ? mPubDateText.getText().toString() : ""String_Node_Str"";
  String excerpt=(mExcerptEditText.getText() != null) ? mExcerptEditText.getText().toString() : ""String_Node_Str"";
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (post.getDate_created_gmt() > 0)     pubDateTimestamp=post.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!post.isPage()) {
    tags=(mTagsEditText.getText() != null) ? mTagsEditText.getText().toString() : ""String_Node_Str"";
    Spinner postFormatSpinner=(Spinner)getActivity().findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  int selectedStatus=mStatusSpinner.getSelectedItemPosition();
  String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
    status=PostStatus.toString(PostStatus.PUBLISHED);
  break;
case 1:
status=PostStatus.toString(PostStatus.DRAFT);
break;
case 2:
status=PostStatus.toString(PostStatus.PENDING);
break;
case 3:
status=PostStatus.toString(PostStatus.PRIVATE);
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (WordPress.getCurrentBlog().isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mCurrentLocation == null) {
latitude=post.getLatitude();
longitude=post.getLongitude();
}
post.setPostExcerpt(excerpt);
post.setDate_created_gmt(pubDateTimestamp);
post.setJSONCategories(new JSONArray(mCategories));
post.setKeywords(tags);
post.setPostStatus(status);
post.setPassword(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setPostFormat(postFormat);
WordPress.wpDB.updatePost(post);
}",0.9215591915303176
14814,"@Override public void onPostAction(int action,final Post post){
  if (post == null) {
    Toast.makeText(PostsActivity.this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
    return;
  }
  if (action == POST_DELETE) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedDelete);
    if (post.isLocalDraft()) {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText(R.string.delete_draft));
      dialogBuilder.setMessage(getResources().getText(R.string.delete_sure) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          post.delete();
          popPostDetail();
          attemptToSelectPost();
          mPostList.getPostListAdapter().loadPosts();
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
 else {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText((post.isPage()) ? R.string.delete_page : R.string.delete_post));
      dialogBuilder.setMessage(getResources().getText((post.isPage()) ? R.string.delete_sure_page : R.string.delete_sure_post) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          new deletePostTask().execute(post);
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
  }
 else   if (action == POST_SHARE) {
    new shareURLTask().execute(post);
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedShare);
  }
 else   if (action == POST_CLEAR) {
    FragmentManager fm=getSupportFragmentManager();
    ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
    if (f != null) {
      f.clearContent();
    }
  }
 else   if (action == POST_EDIT) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedEdit);
  }
 else   if (action == POST_VIEW) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedPreview);
  }
}","@Override public void onPostAction(int action,final Post post){
  if (post == null) {
    Toast.makeText(PostsActivity.this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
    return;
  }
  if (action == POST_DELETE) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedDelete);
    if (post.isLocalDraft()) {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText(R.string.delete_draft));
      dialogBuilder.setMessage(getResources().getText(R.string.delete_sure) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          WordPress.wpDB.deletePost(post);
          popPostDetail();
          attemptToSelectPost();
          mPostList.getPostListAdapter().loadPosts();
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
 else {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText((post.isPage()) ? R.string.delete_page : R.string.delete_post));
      dialogBuilder.setMessage(getResources().getText((post.isPage()) ? R.string.delete_sure_page : R.string.delete_sure_post) + ""String_Node_Str"" + post.getTitle()+ ""String_Node_Str"");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          new deletePostTask().execute(post);
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
  }
 else   if (action == POST_SHARE) {
    new shareURLTask().execute(post);
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedShare);
  }
 else   if (action == POST_CLEAR) {
    FragmentManager fm=getSupportFragmentManager();
    ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
    if (f != null) {
      f.clearContent();
    }
  }
 else   if (action == POST_EDIT) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedEdit);
  }
 else   if (action == POST_VIEW) {
    WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostDetailClickedPreview);
  }
}",0.993260590500642
14815,"@Override protected String doInBackground(Post... params){
  String result=null;
  post=params[0];
  if (post == null)   return null;
  Blog blog=WordPress.currentBlog;
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Object versionResult=new Object();
  try {
    if (mIsPage) {
      Object[] vParams={WordPress.currentBlog.getRemoteBlogId(),post.getPostid(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword()};
      versionResult=(Object)client.call(""String_Node_Str"",vParams);
    }
 else {
      Object[] vParams={post.getPostid(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword()};
      versionResult=(Object)client.call(""String_Node_Str"",vParams);
    }
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
  if (versionResult != null) {
    try {
      Map<?,?> contentHash=(Map<?,?>)versionResult;
      if ((mIsPage && !""String_Node_Str"".equals(contentHash.get(""String_Node_Str"").toString())) || (!mIsPage && !""String_Node_Str"".equals(contentHash.get(""String_Node_Str"").toString()))) {
        if (mIsPage) {
          mErrorMsg=getString(R.string.page_not_published);
        }
 else {
          mErrorMsg=getString(R.string.post_not_published);
        }
        return null;
      }
 else {
        String postURL=contentHash.get(""String_Node_Str"").toString();
        String shortlink=getShortlinkTagHref(postURL);
        if (shortlink == null) {
          result=postURL;
        }
 else {
          result=shortlink;
        }
      }
    }
 catch (    Exception e) {
      mErrorMsg=getResources().getText(R.string.error_generic).toString();
      return null;
    }
  }
  return result;
}","@Override protected String doInBackground(Post... params){
  String result=null;
  post=params[0];
  if (post == null)   return null;
  Blog blog=WordPress.currentBlog;
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Object getPostResult;
  try {
    Object[] vParams={WordPress.currentBlog.getRemoteBlogId(),post.getRemotePostId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword()};
    getPostResult=client.call(mIsPage ? ""String_Node_Str"" : ""String_Node_Str"",vParams);
  }
 catch (  XMLRPCException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
catch (  IOException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
catch (  XmlPullParserException e) {
    AppLog.e(AppLog.T.POSTS,e);
    mErrorMsg=getResources().getText(R.string.error_generic).toString();
    return null;
  }
  if (getPostResult != null && getPostResult instanceof Map) {
    try {
      Map<?,?> postMap=(Map<?,?>)getPostResult;
      String postStatus=MapUtils.getMapStr(postMap,mIsPage ? ""String_Node_Str"" : ""String_Node_Str"");
      if (!""String_Node_Str"".equals(postStatus)) {
        if (mIsPage) {
          mErrorMsg=getString(R.string.page_not_published);
        }
 else {
          mErrorMsg=getString(R.string.post_not_published);
        }
        return null;
      }
 else {
        String postUrl=MapUtils.getMapStr(postMap,""String_Node_Str"");
        String shortlink=getShortlinkTagHref(postUrl);
        if (shortlink == null) {
          result=postUrl;
        }
 else {
          result=shortlink;
        }
      }
    }
 catch (    Exception e) {
      mErrorMsg=getResources().getText(R.string.error_generic).toString();
      return null;
    }
  }
  return result;
}",0.4938514510575504
14816,"public void newPost(){
  WPMobileStatsUtil.trackEventForWPCom(statEventForNewPost());
  if (WordPress.getCurrentBlog() == null) {
    if (!isFinishing())     Toast.makeText(this,R.string.blog_not_found,Toast.LENGTH_SHORT).show();
    return;
  }
  Post newPost=new Post(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage);
  Intent i=new Intent(this,EditPostActivity.class);
  i.putExtra(EditPostActivity.EXTRA_POSTID,newPost.getId());
  i.putExtra(EditPostActivity.EXTRA_IS_PAGE,mIsPage);
  i.putExtra(EditPostActivity.EXTRA_IS_NEW_POST,true);
  startActivityForResult(i,ACTIVITY_EDIT_POST);
}","public void newPost(){
  WPMobileStatsUtil.trackEventForWPCom(statEventForNewPost());
  if (WordPress.getCurrentBlog() == null) {
    if (!isFinishing())     Toast.makeText(this,R.string.blog_not_found,Toast.LENGTH_SHORT).show();
    return;
  }
  Post newPost=new Post(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage);
  WordPress.wpDB.savePost(newPost);
  Intent i=new Intent(this,EditPostActivity.class);
  i.putExtra(EditPostActivity.EXTRA_POSTID,newPost.getLocalTablePostId());
  i.putExtra(EditPostActivity.EXTRA_IS_PAGE,mIsPage);
  i.putExtra(EditPostActivity.EXTRA_IS_NEW_POST,true);
  startActivityForResult(i,ACTIVITY_EDIT_POST);
}",0.96
14817,"private void showPost(long selectedID){
  if (WordPress.getCurrentBlog() == null)   return;
  Post post=new Post(WordPress.getCurrentLocalTableBlogId(),selectedID,mIsPage);
  if (post.getId() >= 0) {
    WordPress.currentPost=post;
    mOnPostSelectedListener.onPostSelected(post);
    mPostsListAdapter.notifyDataSetChanged();
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newAlertDialog(getString(R.string.post_not_found));
      ft.add(alert,""String_Node_Str"");
      ft.commitAllowingStateLoss();
    }
  }
}","private void showPost(long selectedId){
  if (WordPress.getCurrentBlog() == null)   return;
  Post post=WordPress.wpDB.getPostForLocalTablePostId(selectedId);
  if (post != null) {
    WordPress.currentPost=post;
    mOnPostSelectedListener.onPostSelected(post);
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newAlertDialog(getString(R.string.post_not_found));
      ft.add(alert,""String_Node_Str"");
      ft.commitAllowingStateLoss();
    }
  }
}",0.740801308258381
14818,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  boolean isPage=getIntent().getBooleanExtra(""String_Node_Str"",false);
  if (isPage) {
    this.setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_page));
  }
 else {
    this.setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_post));
  }
  mWebView.setWebChromeClient(new WordPressWebChromeClient(this));
  mWebView.getSettings().setJavaScriptEnabled(true);
  if (extras != null) {
    long mPostID=extras.getLong(""String_Node_Str"");
    int mBlogID=extras.getInt(""String_Node_Str"");
    Post post=new Post(mBlogID,mPostID,isPage);
    if (post.getId() < 0)     Toast.makeText(this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
 else     loadPostPreview(post);
  }
 else   if (WordPress.currentPost != null) {
    loadPostPreview(WordPress.currentPost);
  }
 else {
    Toast.makeText(this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  boolean isPage=getIntent().getBooleanExtra(""String_Node_Str"",false);
  if (isPage) {
    this.setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_page));
  }
 else {
    this.setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_post));
  }
  mWebView.setWebChromeClient(new WordPressWebChromeClient(this));
  mWebView.getSettings().setJavaScriptEnabled(true);
  if (extras != null) {
    long mPostID=extras.getLong(""String_Node_Str"");
    Post post=WordPress.wpDB.getPostForLocalTablePostId(mPostID);
    if (post == null)     Toast.makeText(this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
 else     loadPostPreview(post);
  }
 else   if (WordPress.currentPost != null) {
    loadPostPreview(WordPress.currentPost);
  }
 else {
    Toast.makeText(this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
  }
}",0.9172473867595818
14819,"/** 
 * Load the post preview. If the post is in a non-public state (e.g. draft status, part of a non-public blog, etc), load the preview as an authenticated URL. Otherwise, just load the preview normally.
 * @param post Post to load the preview for.
 */
private void loadPostPreview(Post post){
  if (post != null) {
    String url=post.getPermaLink();
    Date d=new Date();
    if (WordPress.getCurrentBlog().isPrivate() || post.isLocalDraft() || post.isLocalChange()|| post.getDate_created_gmt() > d.getTime() || !post.getPost_status().equals(""String_Node_Str"")) {
      if (-1 == url.indexOf('?')) {
        url=url.concat(""String_Node_Str"");
      }
 else {
        url=url.concat(""String_Node_Str"");
      }
      loadAuthenticatedUrl(url);
    }
 else {
      loadUrl(url);
    }
  }
}","/** 
 * Load the post preview. If the post is in a non-public state (e.g. draft status, part of a non-public blog, etc), load the preview as an authenticated URL. Otherwise, just load the preview normally.
 * @param post Post to load the preview for.
 */
private void loadPostPreview(Post post){
  if (post != null) {
    String url=post.getPermaLink();
    Date d=new Date();
    if (WordPress.getCurrentBlog().isPrivate() || post.isLocalDraft() || post.isLocalChange()|| post.getDate_created_gmt() > d.getTime() || post.getStatusEnum() != PostStatus.PUBLISHED) {
      if (-1 == url.indexOf('?')) {
        url=url.concat(""String_Node_Str"");
      }
 else {
        url=url.concat(""String_Node_Str"");
      }
      loadAuthenticatedUrl(url);
    }
 else {
      loadUrl(url);
    }
  }
}",0.9469026548672568
14820,"public void emptyLocalKeyStoreFile(){
  if (localTrustStoreFile.exists()) {
    localTrustStoreFile.delete();
  }
  try {
    createLocalKeyStoreFile();
    localKeyStore=KeyStore.getInstance(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
  }
catch (  IOException e) {
  }
}","public void emptyLocalKeyStoreFile(){
  if (localTrustStoreFile.exists()) {
    localTrustStoreFile.delete();
  }
  try {
    createLocalKeyStoreFile();
  }
 catch (  GeneralSecurityException e) {
    AppLog.e(T.API,""String_Node_Str"",e);
  }
catch (  IOException e) {
    AppLog.e(T.API,""String_Node_Str"",e);
  }
}",0.6909090909090909
14821,"public String getSnippet(){
  if (mSnippet == null) {
    mSnippet=queryJSON(""String_Node_Str"",""String_Node_Str"");
  }
  return mSnippet;
}","String getSnippet(){
  if (mSnippet == null) {
    mSnippet=queryJSON(""String_Node_Str"",""String_Node_Str"");
  }
  return mSnippet;
}",0.974169741697417
14822,"/** 
 * Gets the comment's text with getCommentText() and sends it through HTML.fromHTML
 */
public Spanned getCommentBody(){
  return mComment;
}","/** 
 * Gets the comment's text with getCommentText() and sends it through HTML.fromHTML
 */
Spanned getCommentBody(){
  return mComment;
}",0.975438596491228
14823,"public Map<String,JSONObject> getActions(){
  if (mActions == null) {
    try {
      JSONArray actions=queryJSON(""String_Node_Str"",new JSONArray());
      mActions=new HashMap<String,JSONObject>(actions.length());
      for (int i=0; i < actions.length(); i++) {
        JSONObject action=actions.getJSONObject(i);
        String actionType=JSONUtil.queryJSON(action,""String_Node_Str"",""String_Node_Str"");
        if (!actionType.equals(""String_Node_Str"")) {
          mActions.put(actionType,action);
        }
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.NOTIFS,""String_Node_Str"",e);
      mActions=new HashMap<String,JSONObject>();
    }
  }
  return mActions;
}","Map<String,JSONObject> getActions(){
  if (mActions == null) {
    try {
      JSONArray actions=queryJSON(""String_Node_Str"",new JSONArray());
      mActions=new HashMap<String,JSONObject>(actions.length());
      for (int i=0; i < actions.length(); i++) {
        JSONObject action=actions.getJSONObject(i);
        String actionType=JSONUtil.queryJSON(action,""String_Node_Str"",""String_Node_Str"");
        if (!actionType.equals(""String_Node_Str"")) {
          mActions.put(actionType,action);
        }
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.NOTIFS,""String_Node_Str"",e);
      mActions=new HashMap<String,JSONObject>();
    }
  }
  return mActions;
}",0.9948415622697128
14824,"public View getView(int position,View cachedView,ViewGroup parent){
  View v;
  if (cachedView == null) {
    v=getActivity().getLayoutInflater().inflate(R.layout.notifications_follow_row,null);
  }
 else {
    v=cachedView;
  }
  JSONObject noteItem=getItem(position + 1);
  JSONObject followAction=JSONUtil.queryJSON(noteItem,""String_Node_Str"",new JSONObject());
  FollowRow row=(FollowRow)v;
  row.setFollowListener(new FollowListener());
  row.setAction(followAction);
  row.setText(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""));
  row.getImageView().setImageUrl(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""),WordPress.imageLoader);
  return v;
}","public View getView(int position,View cachedView,ViewGroup parent){
  View v;
  if (cachedView == null) {
    v=getActivity().getLayoutInflater().inflate(R.layout.notifications_follow_row,null);
  }
 else {
    v=cachedView;
  }
  JSONObject noteItem=getItem(position + 1);
  JSONObject followAction=JSONUtil.queryJSON(noteItem,""String_Node_Str"",new JSONObject());
  FollowRow row=(FollowRow)v;
  row.setFollowListener(new FollowListener());
  row.setAction(followAction);
  row.setNameText(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""));
  row.getImageView().setImageUrl(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""),WordPress.imageLoader);
  return v;
}",0.9971056439942112
14825,"public View getView(int position,View cachedView,ViewGroup parent){
  View v;
  if (cachedView == null) {
    v=getActivity().getLayoutInflater().inflate(R.layout.notifications_follow_row,null);
  }
 else {
    v=cachedView;
  }
  JSONObject noteItem=getItem(position);
  JSONObject followAction=JSONUtil.queryJSON(noteItem,""String_Node_Str"",new JSONObject());
  FollowRow row=(FollowRow)v;
  row.setFollowListener(new FollowListener());
  row.setAction(followAction);
  row.setText(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""));
  row.getImageView().setImageUrl(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""),WordPress.imageLoader);
  return v;
}","public View getView(int position,View cachedView,ViewGroup parent){
  View v;
  if (cachedView == null) {
    v=getActivity().getLayoutInflater().inflate(R.layout.notifications_follow_row,null);
  }
 else {
    v=cachedView;
  }
  JSONObject noteItem=getItem(position);
  JSONObject followAction=JSONUtil.queryJSON(noteItem,""String_Node_Str"",new JSONObject());
  FollowRow row=(FollowRow)v;
  row.setFollowListener(new FollowListener());
  row.setAction(followAction);
  String headerText=JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str"");
  if (TextUtils.isEmpty(headerText)) {
    headerText=HtmlUtils.fastStripHtml(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""));
  }
  row.setNameText(headerText);
  row.getImageView().setImageUrl(JSONUtil.queryJSON(noteItem,""String_Node_Str"",""String_Node_Str""),WordPress.imageLoader);
  return v;
}",0.8553054662379421
14826,"protected static String fastUnescapeHtml(final String text){
  if (text == null || !text.contains(""String_Node_Str""))   return text;
  return StringEscapeUtils.unescapeHtml(text);
}","public static String fastUnescapeHtml(final String text){
  if (text == null || !text.contains(""String_Node_Str""))   return text;
  return StringEscapeUtils.unescapeHtml(text);
}",0.9693593314763232
14827,"private void showCommentForNote(Note note){
  mEnabledActions=note.getEnabledActions();
  Map<String,JSONObject> actions=note.getActions();
  if (actions.size() > 0) {
    String firstKey=actions.keySet().iterator().next();
    JSONObject jsonAction=actions.get(firstKey);
    JSONObject jsonParams=jsonAction.optJSONObject(""String_Node_Str"");
    if (jsonParams != null) {
      mRemoteBlogId=jsonParams.optInt(""String_Node_Str"");
      int commentId=jsonParams.optInt(""String_Node_Str"");
      int localBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(mRemoteBlogId);
      Comment comment=CommentTable.getComment(localBlogId,commentId);
      if (comment != null) {
        setComment(localBlogId,comment);
      }
 else {
        requestComment(localBlogId,mRemoteBlogId,commentId);
      }
    }
  }
 else {
    if (hasActivity())     ToastUtils.showToast(getActivity(),R.string.reader_toast_err_get_comment,ToastUtils.Duration.LONG);
  }
}","private void showCommentForNote(Note note){
  mEnabledActions=note.getEnabledActions();
  mRemoteBlogId=note.getBlogId();
  long commentId=note.getCommentId();
  int localBlogId=WordPress.wpDB.getLocalTableBlogIdForRemoteBlogId(mRemoteBlogId);
  Comment comment=CommentTable.getComment(localBlogId,commentId);
  if (comment != null) {
    setComment(localBlogId,comment);
  }
 else {
    requestComment(localBlogId,mRemoteBlogId,commentId);
  }
}",0.557541100786276
14828,"private void requestComment(final int localBlogId,final int remoteBlogId,final int commentId){
  final ProgressBar progress=(hasActivity() ? (ProgressBar)getView().findViewById(R.id.progress_loading) : null);
  if (progress != null)   progress.setVisibility(View.VISIBLE);
  RestRequest.Listener restListener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      mIsRequestingComment=false;
      if (hasActivity()) {
        if (progress != null)         progress.setVisibility(View.GONE);
        Comment comment=Comment.fromJSON(jsonObject);
        if (comment != null) {
          CommentTable.addComment(localBlogId,comment);
          setComment(localBlogId,comment);
        }
      }
    }
  }
;
  RestRequest.ErrorListener restErrListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      mIsRequestingComment=false;
      AppLog.e(T.COMMENTS,VolleyUtils.errStringFromVolleyError(volleyError),volleyError);
      if (hasActivity()) {
        if (progress != null)         progress.setVisibility(View.GONE);
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_get_comment,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final String path=String.format(""String_Node_Str"",remoteBlogId,commentId);
  mIsRequestingComment=true;
  WordPress.getRestClientUtils().get(path,restListener,restErrListener);
}","private void requestComment(final int localBlogId,final int remoteBlogId,final long commentId){
  final ProgressBar progress=(hasActivity() ? (ProgressBar)getView().findViewById(R.id.progress_loading) : null);
  if (progress != null)   progress.setVisibility(View.VISIBLE);
  RestRequest.Listener restListener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      mIsRequestingComment=false;
      if (hasActivity()) {
        if (progress != null)         progress.setVisibility(View.GONE);
        Comment comment=Comment.fromJSON(jsonObject);
        if (comment != null) {
          CommentTable.addComment(localBlogId,comment);
          setComment(localBlogId,comment);
        }
      }
    }
  }
;
  RestRequest.ErrorListener restErrListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      mIsRequestingComment=false;
      AppLog.e(T.COMMENTS,VolleyUtils.errStringFromVolleyError(volleyError),volleyError);
      if (hasActivity()) {
        if (progress != null)         progress.setVisibility(View.GONE);
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_get_comment,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final String path=String.format(""String_Node_Str"",remoteBlogId,commentId);
  mIsRequestingComment=true;
  WordPress.getRestClientUtils().get(path,restListener,restErrListener);
}",0.9975550122249388
14829,"public void loadPost(final Post post){
  if (post == null || post.getTitle() == null)   return;
  if (!hasActivity() || getView() == null)   return;
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      final TextView txtTitle=(TextView)getView().findViewById(R.id.postTitle);
      final WebView webView=(WebView)getView().findViewById(R.id.viewPostWebView);
      final TextView txtContent=(TextView)getView().findViewById(R.id.viewPostTextView);
      final ImageButton btnShareUrl=(ImageButton)getView().findViewById(R.id.sharePostLink);
      final ImageButton btnViewPost=(ImageButton)getView().findViewById(R.id.viewPost);
      final ImageButton btnAddComment=(ImageButton)getView().findViewById(R.id.addComment);
      final String title=(TextUtils.isEmpty(post.getTitle()) ? ""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"" : StringUtils.unescapeHTML(post.getTitle()));
      final String postContent=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
      final Spanned draftContent;
      final String htmlContent;
      if (post.isLocalDraft()) {
        draftContent=WPHtml.fromHtml(postContent.replaceAll(""String_Node_Str"",""String_Node_Str""),getActivity(),post);
        htmlContent=null;
      }
 else {
        draftContent=null;
        htmlContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + StringUtils.addPTags(postContent) + ""String_Node_Str"";
      }
      handler.post(new Runnable(){
        @Override public void run(){
          if (!hasActivity())           return;
          txtTitle.setText(title);
          if (post.isLocalDraft()) {
            txtContent.setVisibility(View.VISIBLE);
            webView.setVisibility(View.GONE);
            btnShareUrl.setVisibility(View.GONE);
            btnViewPost.setVisibility(View.GONE);
            btnAddComment.setVisibility(View.GONE);
            txtContent.setText(draftContent);
          }
 else {
            txtContent.setVisibility(View.GONE);
            webView.setVisibility(View.VISIBLE);
            btnShareUrl.setVisibility(View.VISIBLE);
            btnViewPost.setVisibility(View.VISIBLE);
            btnAddComment.setVisibility(post.isMt_allow_comments() ? View.VISIBLE : View.GONE);
            webView.loadDataWithBaseURL(""String_Node_Str"",htmlContent,""String_Node_Str"",""String_Node_Str"",null);
          }
        }
      }
);
    }
  }
.start();
}","public void loadPost(final Post post){
  if (post == null || post.getTitle() == null)   return;
  if (!hasActivity() || getView() == null)   return;
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      final TextView txtTitle=(TextView)getView().findViewById(R.id.postTitle);
      final WebView webView=(WebView)getView().findViewById(R.id.viewPostWebView);
      webView.setWebViewClient(new WPWebViewClient(WordPress.getCurrentBlog()));
      final TextView txtContent=(TextView)getView().findViewById(R.id.viewPostTextView);
      final ImageButton btnShareUrl=(ImageButton)getView().findViewById(R.id.sharePostLink);
      final ImageButton btnViewPost=(ImageButton)getView().findViewById(R.id.viewPost);
      final ImageButton btnAddComment=(ImageButton)getView().findViewById(R.id.addComment);
      final String title=(TextUtils.isEmpty(post.getTitle()) ? ""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"" : StringUtils.unescapeHTML(post.getTitle()));
      final String postContent=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
      final Spanned draftContent;
      final String htmlContent;
      if (post.isLocalDraft()) {
        draftContent=WPHtml.fromHtml(postContent.replaceAll(""String_Node_Str"",""String_Node_Str""),getActivity(),post);
        htmlContent=null;
      }
 else {
        draftContent=null;
        htmlContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + StringUtils.addPTags(postContent) + ""String_Node_Str"";
      }
      handler.post(new Runnable(){
        @Override public void run(){
          if (!hasActivity())           return;
          txtTitle.setText(title);
          if (post.isLocalDraft()) {
            txtContent.setVisibility(View.VISIBLE);
            webView.setVisibility(View.GONE);
            btnShareUrl.setVisibility(View.GONE);
            btnViewPost.setVisibility(View.GONE);
            btnAddComment.setVisibility(View.GONE);
            txtContent.setText(draftContent);
          }
 else {
            txtContent.setVisibility(View.GONE);
            webView.setVisibility(View.VISIBLE);
            btnShareUrl.setVisibility(View.VISIBLE);
            btnViewPost.setVisibility(View.VISIBLE);
            btnAddComment.setVisibility(post.isMt_allow_comments() ? View.VISIBLE : View.GONE);
            webView.loadDataWithBaseURL(""String_Node_Str"",htmlContent,""String_Node_Str"",""String_Node_Str"",null);
          }
        }
      }
);
    }
  }
.start();
}",0.9837772882034848
14830,"@Override public void run(){
  if (start) {
    attemptToSelectPost();
    mShouldAnimateRefreshButton=true;
    startAnimatingRefreshButton(mRefreshMenuItem);
    mIsRefreshing=true;
  }
 else {
    mShouldAnimateRefreshButton=false;
    stopAnimatingRefreshButton(mRefreshMenuItem);
    mIsRefreshing=false;
  }
}","@Override public void run(){
  if (start) {
    mShouldAnimateRefreshButton=true;
    startAnimatingRefreshButton(mRefreshMenuItem);
    mIsRefreshing=true;
  }
 else {
    mShouldAnimateRefreshButton=false;
    stopAnimatingRefreshButton(mRefreshMenuItem);
    mIsRefreshing=false;
  }
}",0.3880597014925373
14831,"protected void checkForLocalChanges(boolean shouldPrompt){
  if (WordPress.getCurrentBlog() == null)   return;
  boolean hasLocalChanges=WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage);
  if (hasLocalChanges) {
    if (!shouldPrompt)     return;
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.local_changes));
    dialogBuilder.setMessage(getResources().getText(R.string.remote_changes));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        popPostDetail();
        attemptToSelectPost();
        mPostList.requestPosts(false);
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    if (!isFinishing()) {
      dialogBuilder.create().show();
    }
  }
 else {
    popPostDetail();
    attemptToSelectPost();
    mShouldAnimateRefreshButton=true;
    mPostList.requestPosts(false);
  }
}","protected void checkForLocalChanges(boolean shouldPrompt){
  if (WordPress.getCurrentBlog() == null)   return;
  boolean hasLocalChanges=WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage);
  if (hasLocalChanges) {
    if (!shouldPrompt)     return;
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.local_changes));
    dialogBuilder.setMessage(getResources().getText(R.string.remote_changes));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        popPostDetail();
        attemptToSelectPost();
        mPostList.requestPosts(false);
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    if (!isFinishing()) {
      dialogBuilder.create().show();
    }
  }
 else {
    popPostDetail();
    mShouldAnimateRefreshButton=true;
    mPostList.requestPosts(false);
  }
}",0.9893575088687426
14832,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  Bundle extras=getIntent().getExtras();
  if (extras != null && extras.getBoolean(NotificationsActivity.FROM_NOTIFICATION_EXTRA)) {
    startNotificationsActivity(extras);
    return;
  }
  if (WordPress.shouldRestoreSelectedActivity && WordPress.getCurrentBlog() != null && !(this instanceof PagesActivity)) {
    new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new ApiHelper.GenericCallback(){
      @Override public void onSuccess(){
        if (!isFinishing())         updateMenuDrawer();
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (!isFinishing())         ToastUtils.showToastOrAuthAlert(PostsActivity.this,errorMessage,getString(R.string.error_generic));
      }
    }
).execute(false);
    WordPress.shouldRestoreSelectedActivity=false;
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
    int lastActivitySelection=settings.getInt(LAST_ACTIVITY_PREFERENCE,-1);
    if (lastActivitySelection > MenuDrawerItem.NO_ITEM_ID && lastActivitySelection != WPActionBarActivity.DASHBOARD_ACTIVITY) {
      Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
      while (itemIterator.hasNext()) {
        MenuDrawerItem item=itemIterator.next();
        if (item.hasItemId() && item.getItemId() == lastActivitySelection && !item.isSelected() && item.isVisible()) {
          mFirstLaunch=true;
          item.selectItem();
          finish();
          return;
        }
      }
    }
  }
  createMenuDrawer(R.layout.posts);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mPostList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  if (extras != null) {
    mIsPage=extras.getBoolean(EXTRA_VIEW_PAGES);
    showErrorDialogIfNeeded(extras);
  }
  if (mIsPage)   setTitle(getString(R.string.pages));
 else   setTitle(getString(R.string.posts));
  WordPress.currentPost=null;
  if (savedInstanceState != null)   popPostDetail();
  WPMobileStatsUtil.trackEventForWPCom(statEventForViewOpening());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  Bundle extras=getIntent().getExtras();
  if (extras != null && extras.getBoolean(NotificationsActivity.FROM_NOTIFICATION_EXTRA)) {
    startNotificationsActivity(extras);
    return;
  }
  if (WordPress.shouldRestoreSelectedActivity && WordPress.getCurrentBlog() != null && !(this instanceof PagesActivity)) {
    new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new ApiHelper.GenericCallback(){
      @Override public void onSuccess(){
        if (!isFinishing())         updateMenuDrawer();
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (!isFinishing())         ToastUtils.showToastOrAuthAlert(PostsActivity.this,errorMessage,getString(R.string.error_generic));
      }
    }
).execute(false);
    WordPress.shouldRestoreSelectedActivity=false;
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
    int lastActivitySelection=settings.getInt(LAST_ACTIVITY_PREFERENCE,-1);
    if (lastActivitySelection > MenuDrawerItem.NO_ITEM_ID && lastActivitySelection != WPActionBarActivity.DASHBOARD_ACTIVITY) {
      Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
      while (itemIterator.hasNext()) {
        MenuDrawerItem item=itemIterator.next();
        if (item.hasItemId() && item.getItemId() == lastActivitySelection && !item.isSelected() && item.isVisible()) {
          mFirstLaunch=true;
          item.selectItem();
          finish();
          return;
        }
      }
    }
  }
  createMenuDrawer(R.layout.posts);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mPostList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  if (extras != null) {
    mIsPage=extras.getBoolean(EXTRA_VIEW_PAGES);
    showErrorDialogIfNeeded(extras);
  }
  if (mIsPage)   setTitle(getString(R.string.pages));
 else   setTitle(getString(R.string.posts));
  WordPress.currentPost=null;
  if (savedInstanceState != null)   popPostDetail();
  attemptToSelectPost();
  WPMobileStatsUtil.trackEventForWPCom(statEventForViewOpening());
}",0.9949505150474652
14833,"@Override public void onRefresh(final boolean start){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (start) {
        attemptToSelectPost();
        mShouldAnimateRefreshButton=true;
        startAnimatingRefreshButton(mRefreshMenuItem);
        mIsRefreshing=true;
      }
 else {
        mShouldAnimateRefreshButton=false;
        stopAnimatingRefreshButton(mRefreshMenuItem);
        mIsRefreshing=false;
      }
    }
  }
);
}","@Override public void onRefresh(final boolean start){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (start) {
        mShouldAnimateRefreshButton=true;
        startAnimatingRefreshButton(mRefreshMenuItem);
        mIsRefreshing=true;
      }
 else {
        mShouldAnimateRefreshButton=false;
        stopAnimatingRefreshButton(mRefreshMenuItem);
        mIsRefreshing=false;
      }
    }
  }
);
}",0.9649717514124294
14834,"@Override protected void onResume(){
  super.onResume();
  if (WordPress.isSignedIn(PostsActivity.this)) {
    showReaderIfNoBlog();
  }
  if (WordPress.postsShouldRefresh) {
    checkForLocalChanges(false);
    WordPress.postsShouldRefresh=false;
  }
  attemptToSelectPost();
}","@Override protected void onResume(){
  super.onResume();
  if (WordPress.isSignedIn(PostsActivity.this)) {
    showReaderIfNoBlog();
  }
  if (WordPress.postsShouldRefresh) {
    checkForLocalChanges(false);
    WordPress.postsShouldRefresh=false;
  }
}",0.9529190207156308
14835,"@Override public void OnPostUploaded(String postId){
  if (!hasActivity())   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  if (!TextUtils.isEmpty(postId)) {
    List<Object> apiArgs=new Vector<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    apiArgs.add(postId);
    apiArgs.add(mIsPage);
    ApiHelper.FetchSinglePostTask fetchPostTask=new ApiHelper.FetchSinglePostTask(new ApiHelper.FetchSinglePostTask.Callback(){
      @Override public void onSuccess(){
        if (!hasActivity())         return;
        mIsFetchingPosts=false;
        mOnRefreshListener.onRefresh(false);
        getPostListAdapter().loadPosts();
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (!hasActivity())         return;
        Toast.makeText(getActivity(),R.string.error_refresh_posts,Toast.LENGTH_SHORT).show();
        mIsFetchingPosts=false;
        mOnRefreshListener.onRefresh(false);
      }
    }
);
    mOnRefreshListener.onRefresh(true);
    mIsFetchingPosts=true;
    fetchPostTask.execute(apiArgs);
  }
}","@Override public void OnPostUploaded(String postId){
  if (!hasActivity())   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  if (!TextUtils.isEmpty(postId)) {
    List<Object> apiArgs=new Vector<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    apiArgs.add(postId);
    apiArgs.add(mIsPage);
    ApiHelper.FetchSinglePostTask fetchPostTask=new ApiHelper.FetchSinglePostTask(new ApiHelper.FetchSinglePostTask.Callback(){
      @Override public void onSuccess(){
        if (!hasActivity())         return;
        mIsFetchingPosts=false;
        mOnRefreshListener.onRefresh(false);
        getPostListAdapter().loadPosts();
        mOnSinglePostLoadedListener.onSinglePostLoaded();
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (!hasActivity())         return;
        Toast.makeText(getActivity(),R.string.error_refresh_posts,Toast.LENGTH_SHORT).show();
        mIsFetchingPosts=false;
        mOnRefreshListener.onRefresh(false);
      }
    }
);
    mOnRefreshListener.onRefresh(true);
    mIsFetchingPosts=true;
    fetchPostTask.execute(apiArgs);
  }
}",0.9750644883920896
14836,"public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(){
        if (mCanLoadMorePosts && !mIsFetchingPosts)         requestPosts(true);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(      int postCount){
        if (postCount == 0 && mCanLoadMorePosts) {
          requestPosts(false);
        }
 else         if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}","public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(){
        if (mCanLoadMorePosts && !mIsFetchingPosts)         requestPosts(true);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(      int postCount){
        if (postCount == 0 && mCanLoadMorePosts) {
          requestPosts(false);
        }
 else         if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
 else         if (Utils.isTablet()) {
          int selectedPosition=getListView().getCheckedItemPosition();
          if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}",0.834373852368711
14837,"public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mOnPostSelectedListener=(OnPostSelectedListener)activity;
    mOnRefreshListener=(OnRefreshListener)activity;
  }
 catch (  ClassCastException e) {
    activity.finish();
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}","public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mOnPostSelectedListener=(OnPostSelectedListener)activity;
    mOnRefreshListener=(OnRefreshListener)activity;
    mOnSinglePostLoadedListener=(OnSinglePostLoadedListener)activity;
  }
 catch (  ClassCastException e) {
    activity.finish();
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}",0.904632152588556
14838,"@Override public void onPostsLoaded(int postCount){
  if (postCount == 0 && mCanLoadMorePosts) {
    requestPosts(false);
  }
 else   if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
}","@Override public void onPostsLoaded(int postCount){
  if (postCount == 0 && mCanLoadMorePosts) {
    requestPosts(false);
  }
 else   if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
 else   if (Utils.isTablet()) {
    int selectedPosition=getListView().getCheckedItemPosition();
    if (selectedPosition != ListView.INVALID_POSITION && selectedPosition < mPostsListAdapter.getCount()) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(selectedPosition);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
      }
    }
  }
}",0.7012791572610986
14839,"@Override public void onSuccess(){
  if (!hasActivity())   return;
  mIsFetchingPosts=false;
  mOnRefreshListener.onRefresh(false);
  getPostListAdapter().loadPosts();
}","@Override public void onSuccess(){
  if (!hasActivity())   return;
  mIsFetchingPosts=false;
  mOnRefreshListener.onRefresh(false);
  getPostListAdapter().loadPosts();
  mOnSinglePostLoadedListener.onSinglePostLoaded();
}",0.8666666666666667
14840,"private void setGroupChevron(boolean isGroupExpanded,View groupView,boolean animate){
  final ImageView chevron=(ImageView)groupView.findViewById(R.id.stats_list_cell_chevron);
  if (chevron == null)   return;
  if (animate) {
    float start=(isGroupExpanded ? 0.0f : 90.0f);
    float end=(isGroupExpanded ? 90.0f : 0.0f);
    Animation rotate=new RotateAnimation(start,end,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
    rotate.setDuration(ANIM_DURATION);
    rotate.setInterpolator(getInterpolator());
    rotate.setFillAfter(true);
    chevron.startAnimation(rotate);
  }
 else {
    chevron.setImageResource(isGroupExpanded ? R.drawable.stats_chevron_down : R.drawable.stats_chevron_right);
  }
}","private void setGroupChevron(final boolean isGroupExpanded,View groupView,boolean animate){
  final ImageView chevron=(ImageView)groupView.findViewById(R.id.stats_list_cell_chevron);
  if (chevron == null)   return;
  if (animate) {
    chevron.setImageResource(isGroupExpanded ? R.drawable.stats_chevron_right : R.drawable.stats_chevron_down);
    float start=(isGroupExpanded ? 0.0f : 0.0f);
    float end=(isGroupExpanded ? 90.0f : -90.0f);
    Animation rotate=new RotateAnimation(start,end,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
    rotate.setDuration(ANIM_DURATION);
    rotate.setInterpolator(getInterpolator());
    rotate.setFillAfter(true);
    chevron.startAnimation(rotate);
  }
 else {
    chevron.setImageResource(isGroupExpanded ? R.drawable.stats_chevron_down : R.drawable.stats_chevron_right);
  }
}",0.8691767708998086
14841,"@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    updateCommentList();
  return true;
case android.R.id.home:
if (isLarge()) {
  return super.onOptionsItemSelected(item);
}
 else {
  FragmentManager fm=getSupportFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    fm.popBackStack();
    return true;
  }
}
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    updateCommentList();
  return true;
case android.R.id.home:
if (isLargeOrXLarge()) {
  return super.onOptionsItemSelected(item);
}
 else {
  FragmentManager fm=getSupportFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    fm.popBackStack();
    return true;
  }
}
break;
}
return super.onOptionsItemSelected(item);
}",0.9910913140311804
14842,"@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    refreshNotes();
  return true;
case android.R.id.home:
if (isLarge()) {
  return super.onOptionsItemSelected(item);
}
 else {
  FragmentManager fm=getSupportFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    popNoteDetail();
    return true;
  }
 else {
    return super.onOptionsItemSelected(item);
  }
}
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    refreshNotes();
  return true;
case android.R.id.home:
if (isLargeOrXLarge()) {
  return super.onOptionsItemSelected(item);
}
 else {
  FragmentManager fm=getSupportFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    popNoteDetail();
    return true;
  }
 else {
    return super.onOptionsItemSelected(item);
  }
}
default :
return super.onOptionsItemSelected(item);
}
}",0.9920477137176938
14843,"public void run(){
  if (getActivity() == null)   return;
  mPostsCountView.setText(fmtPosts);
  mCategoriesCountView.setText(fmtCategories);
  mTagsCountView.setText(fmtTags);
  mFollowersCountView.setText(fmtFollowers);
  mCommentsCountView.setText(fmtComments);
  mSharesCountView.setText(fmtShares);
}","public void run(){
  refreshSummary(stats);
}",0.1885714285714285
14844,"@Override public void onResume(){
  super.onResume();
  refreshSummary();
}","@Override public void onResume(){
  super.onResume();
  LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(getActivity());
  lbm.registerReceiver(mReceiver,new IntentFilter(StatsService.ACTION_STATS_SUMMARY_UPDATED));
  refreshSummary();
}",0.4643962848297213
14845,"private void refreshSummary(){
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      if (WordPress.getCurrentBlog() == null)       return;
      String blogId=WordPress.getCurrentBlog().getDotComBlogId();
      if (TextUtils.isEmpty(blogId))       blogId=""String_Node_Str"";
      StatsSummary stats=StatUtils.getSummary(blogId);
      int posts=(stats != null ? stats.getPosts() : 0);
      int categories=(stats != null ? stats.getCategories() : 0);
      int tags=(stats != null ? stats.getTags() : 0);
      int followers=(stats != null ? stats.getFollowersBlog() : 0);
      int comments=(stats != null ? stats.getFollowersComments() : 0);
      int shares=(stats != null ? stats.getShares() : 0);
      final String fmtPosts=FormatUtils.formatDecimal(posts);
      final String fmtCategories=FormatUtils.formatDecimal(categories);
      final String fmtTags=FormatUtils.formatDecimal(tags);
      final String fmtFollowers=FormatUtils.formatDecimal(followers);
      final String fmtComments=FormatUtils.formatDecimal(comments);
      final String fmtShares=FormatUtils.formatDecimal(shares);
      handler.post(new Runnable(){
        public void run(){
          if (getActivity() == null)           return;
          mPostsCountView.setText(fmtPosts);
          mCategoriesCountView.setText(fmtCategories);
          mTagsCountView.setText(fmtTags);
          mFollowersCountView.setText(fmtFollowers);
          mCommentsCountView.setText(fmtComments);
          mSharesCountView.setText(fmtShares);
        }
      }
);
    }
  }
.start();
}","private void refreshSummary(final StatsSummary stats){
  if (getActivity() == null)   return;
  if (stats == null) {
    mPostsCountView.setText(""String_Node_Str"");
    mCategoriesCountView.setText(""String_Node_Str"");
    mTagsCountView.setText(""String_Node_Str"");
    mFollowersCountView.setText(""String_Node_Str"");
    mCommentsCountView.setText(""String_Node_Str"");
    mSharesCountView.setText(""String_Node_Str"");
  }
 else {
    mPostsCountView.setText(FormatUtils.formatDecimal(stats.getPosts()));
    mCategoriesCountView.setText(FormatUtils.formatDecimal(stats.getCategories()));
    mTagsCountView.setText(FormatUtils.formatDecimal(stats.getTags()));
    mFollowersCountView.setText(FormatUtils.formatDecimal(stats.getFollowersBlog()));
    mCommentsCountView.setText(FormatUtils.formatDecimal(stats.getFollowersComments()));
    mSharesCountView.setText(FormatUtils.formatDecimal(stats.getShares()));
  }
}",0.1500399042298483
14846,"@Override public String getTitle(){
  return getString(R.string.stats_view_visitors_and_views);
}","@Override protected String getTitle(){
  return getString(R.string.stats_view_visitors_and_views);
}",0.9441624365482234
14847,"public void run(){
  refreshViews(summary);
}","public void run(){
  refreshSummary(summary);
}",0.8695652173913043
14848,"@Override public void onReceive(Context context,Intent intent){
  String action=StringUtils.notNullStr(intent.getAction());
  if (action.equals(StatUtils.ACTION_STATS_SUMMARY_UPDATED)) {
    AppLog.i(AppLog.T.STATS,""String_Node_Str"");
    StatsSummary summary=(StatsSummary)intent.getSerializableExtra(StatUtils.STATS_SUMMARY_UPDATED_EXTRA);
    refreshViews(summary);
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=StringUtils.notNullStr(intent.getAction());
  if (action.equals(StatsService.ACTION_STATS_SUMMARY_UPDATED)) {
    Serializable serial=intent.getSerializableExtra(StatsService.STATS_SUMMARY_UPDATED_EXTRA);
    if (serial instanceof StatsSummary) {
      refreshSummary((StatsSummary)serial);
    }
  }
}",0.7222222222222222
14849,"@Override public void onResume(){
  super.onResume();
  LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(getActivity());
  lbm.registerReceiver(mReceiver,new IntentFilter(StatUtils.ACTION_STATS_SUMMARY_UPDATED));
  refreshSummary();
}","@Override public void onResume(){
  super.onResume();
  LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(getActivity());
  lbm.registerReceiver(mReceiver,new IntentFilter(StatsService.ACTION_STATS_SUMMARY_UPDATED));
  refreshSummary();
}",0.973630831643002
14850,"private void refreshSummary(){
  if (WordPress.getCurrentBlog() == null)   return;
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      String blogId=WordPress.getCurrentBlog().getDotComBlogId();
      if (TextUtils.isEmpty(blogId))       blogId=""String_Node_Str"";
      final StatsSummary summary=StatUtils.getSummary(blogId);
      handler.post(new Runnable(){
        public void run(){
          refreshViews(summary);
        }
      }
);
    }
  }
.start();
}","private void refreshSummary(final StatsSummary stats){
  if (getActivity() == null)   return;
  if (stats == null) {
    mVisitorsToday.setText(""String_Node_Str"");
    mViewsToday.setText(""String_Node_Str"");
    mViewsBestEver.setText(""String_Node_Str"");
    mViewsAllTime.setText(""String_Node_Str"");
    mCommentsAllTime.setText(""String_Node_Str"");
  }
 else {
    mVisitorsToday.setText(FormatUtils.formatDecimal(stats.getVisitorsToday()));
    mViewsToday.setText(FormatUtils.formatDecimal(stats.getViewsToday()));
    mViewsBestEver.setText(FormatUtils.formatDecimal(stats.getViewsBestDayTotal()));
    mViewsAllTime.setText(FormatUtils.formatDecimal(stats.getViewsAllTime()));
    mCommentsAllTime.setText(FormatUtils.formatDecimal(stats.getCommentsAllTime()));
  }
}",0.1330203442879499
14851,"@Override public void onResponse(final JSONObject response){
  new Thread(){
    @Override public void run(){
      parseResponse(response);
      notifyResponseReceived();
    }
  }
.start();
}","@Override public void onResponse(final JSONObject response){
  AppLog.d(AppLog.T.STATS,getTaskName() + ""String_Node_Str"");
  new Thread(){
    @Override public void run(){
      parseResponse(response);
      notifyResponseReceived();
    }
  }
.start();
}",0.8622222222222222
14852,"ContentResolver getContentResolver(){
  return WordPress.getContext().getContentResolver();
}","ContentResolver getContentResolver(){
  return getContext().getContentResolver();
}",0.9431818181818182
14853,"private void startTasks(final String blogId){
  final ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors.newFixedThreadPool(getMaxConcurrentTasks());
  new Thread(){
    @Override public void run(){
      final String today=StatUtils.getCurrentDate();
      final String yesterday=StatUtils.getYesterdaysDate();
      executor.submit(new SummaryTask(blogId));
      executor.submit(new BarChartTask(blogId,StatsBarChartUnit.WEEK));
      executor.submit(new BarChartTask(blogId,StatsBarChartUnit.MONTH));
      executor.submit(new TopPostsAndPagesTask(blogId,today));
      executor.submit(new TopPostsAndPagesTask(blogId,yesterday));
      executor.submit(new ViewsByCountryTask(blogId,today));
      executor.submit(new ViewsByCountryTask(blogId,yesterday));
      executor.submit(new ClicksTask(blogId,today));
      executor.submit(new ClicksTask(blogId,yesterday));
      executor.submit(new ReferrersTask(blogId,today));
      executor.submit(new ReferrersTask(blogId,yesterday));
      executor.submit(new SearchEngineTermsTask(blogId,today));
      executor.submit(new SearchEngineTermsTask(blogId,yesterday));
      AppLog.i(T.STATS,""String_Node_Str"");
      broadcastUpdate(true);
      try {
        executor.shutdown();
        if (!executor.awaitTermination(EXECUTOR_TIMEOUT_SECONDS,TimeUnit.SECONDS)) {
          AppLog.w(T.STATS,""String_Node_Str"");
          executor.shutdownNow();
        }
      }
 catch (      InterruptedException e) {
        AppLog.e(T.STATS,e);
        executor.shutdownNow();
        Thread.currentThread().interrupt();
      }
 finally {
        AppLog.i(T.STATS,""String_Node_Str"");
        broadcastUpdate(false);
      }
    }
  }
.start();
}","private void startTasks(final String blogId){
  final ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors.newFixedThreadPool(getMaxConcurrentTasks());
  new Thread(){
    @Override public void run(){
      final String today=StatUtils.getCurrentDate();
      final String yesterday=StatUtils.getYesterdaysDate();
      executor.submit(new SummaryTask(blogId));
      executor.submit(new BarChartTask(blogId,StatsBarChartUnit.WEEK));
      executor.submit(new BarChartTask(blogId,StatsBarChartUnit.MONTH));
      executor.submit(new TopPostsAndPagesTask(blogId,today));
      executor.submit(new TopPostsAndPagesTask(blogId,yesterday));
      executor.submit(new ViewsByCountryTask(blogId,today));
      executor.submit(new ViewsByCountryTask(blogId,yesterday));
      executor.submit(new ClicksTask(blogId,today));
      executor.submit(new ClicksTask(blogId,yesterday));
      executor.submit(new ReferrersTask(blogId,today));
      executor.submit(new ReferrersTask(blogId,yesterday));
      executor.submit(new SearchEngineTermsTask(blogId,today));
      executor.submit(new SearchEngineTermsTask(blogId,yesterday));
      AppLog.i(T.STATS,""String_Node_Str"");
      broadcastUpdate(true);
      try {
        executor.shutdown();
        if (!executor.awaitTermination(EXECUTOR_TIMEOUT_SECONDS,TimeUnit.SECONDS)) {
          AppLog.w(T.STATS,""String_Node_Str"");
          executor.shutdownNow();
        }
      }
 catch (      InterruptedException e) {
        AppLog.w(T.STATS,""String_Node_Str"");
        executor.shutdownNow();
        Thread.currentThread().interrupt();
      }
 finally {
        AppLog.i(T.STATS,""String_Node_Str"");
        broadcastUpdate(false);
      }
    }
  }
.start();
}",0.9941211052322164
14854,"@Override public void run(){
  final String today=StatUtils.getCurrentDate();
  final String yesterday=StatUtils.getYesterdaysDate();
  executor.submit(new SummaryTask(blogId));
  executor.submit(new BarChartTask(blogId,StatsBarChartUnit.WEEK));
  executor.submit(new BarChartTask(blogId,StatsBarChartUnit.MONTH));
  executor.submit(new TopPostsAndPagesTask(blogId,today));
  executor.submit(new TopPostsAndPagesTask(blogId,yesterday));
  executor.submit(new ViewsByCountryTask(blogId,today));
  executor.submit(new ViewsByCountryTask(blogId,yesterday));
  executor.submit(new ClicksTask(blogId,today));
  executor.submit(new ClicksTask(blogId,yesterday));
  executor.submit(new ReferrersTask(blogId,today));
  executor.submit(new ReferrersTask(blogId,yesterday));
  executor.submit(new SearchEngineTermsTask(blogId,today));
  executor.submit(new SearchEngineTermsTask(blogId,yesterday));
  AppLog.i(T.STATS,""String_Node_Str"");
  broadcastUpdate(true);
  try {
    executor.shutdown();
    if (!executor.awaitTermination(EXECUTOR_TIMEOUT_SECONDS,TimeUnit.SECONDS)) {
      AppLog.w(T.STATS,""String_Node_Str"");
      executor.shutdownNow();
    }
  }
 catch (  InterruptedException e) {
    AppLog.e(T.STATS,e);
    executor.shutdownNow();
    Thread.currentThread().interrupt();
  }
 finally {
    AppLog.i(T.STATS,""String_Node_Str"");
    broadcastUpdate(false);
  }
}","@Override public void run(){
  final String today=StatUtils.getCurrentDate();
  final String yesterday=StatUtils.getYesterdaysDate();
  executor.submit(new SummaryTask(blogId));
  executor.submit(new BarChartTask(blogId,StatsBarChartUnit.WEEK));
  executor.submit(new BarChartTask(blogId,StatsBarChartUnit.MONTH));
  executor.submit(new TopPostsAndPagesTask(blogId,today));
  executor.submit(new TopPostsAndPagesTask(blogId,yesterday));
  executor.submit(new ViewsByCountryTask(blogId,today));
  executor.submit(new ViewsByCountryTask(blogId,yesterday));
  executor.submit(new ClicksTask(blogId,today));
  executor.submit(new ClicksTask(blogId,yesterday));
  executor.submit(new ReferrersTask(blogId,today));
  executor.submit(new ReferrersTask(blogId,yesterday));
  executor.submit(new SearchEngineTermsTask(blogId,today));
  executor.submit(new SearchEngineTermsTask(blogId,yesterday));
  AppLog.i(T.STATS,""String_Node_Str"");
  broadcastUpdate(true);
  try {
    executor.shutdown();
    if (!executor.awaitTermination(EXECUTOR_TIMEOUT_SECONDS,TimeUnit.SECONDS)) {
      AppLog.w(T.STATS,""String_Node_Str"");
      executor.shutdownNow();
    }
  }
 catch (  InterruptedException e) {
    AppLog.w(T.STATS,""String_Node_Str"");
    executor.shutdownNow();
    Thread.currentThread().interrupt();
  }
 finally {
    AppLog.i(T.STATS,""String_Node_Str"");
    broadcastUpdate(false);
  }
}",0.9149709302325582
14855,"@Override void parseResponse(JSONObject response){
  if (response == null)   return;
  StatUtils.saveSummary(mBlogId,response);
  StatUtils.broadcastSummaryUpdated(StatUtils.getSummary(mBlogId));
}","@Override void parseResponse(JSONObject response){
  if (response == null)   return;
  StatUtils.saveSummary(mBlogId,response);
  StatsSummary stats=StatUtils.getSummary(mBlogId);
  if (stats != null) {
    LocalBroadcastManager lbm=LocalBroadcastManager.getInstance(getContext());
    Intent intent=new Intent(StatsService.ACTION_STATS_SUMMARY_UPDATED);
    intent.putExtra(StatsService.STATS_SUMMARY_UPDATED_EXTRA,stats);
    lbm.sendBroadcast(intent);
  }
}",0.4170471841704718
14856,"@Override public void onCommentSelected(Comment comment){
  if (comment == null)   return;
  FragmentManager fm=getSupportFragmentManager();
  fm.executePendingTransactions();
  CommentDetailFragment detailFragment=getDetailFragment();
  CommentsListFragment listFragment=getListFragment();
  if (detailFragment == null) {
    FragmentTransaction ft=fm.beginTransaction();
    String tagForFragment=getString(R.string.fragment_tag_comment_detail);
    detailFragment=CommentDetailFragment.newInstance(WordPress.getCurrentLocalTableBlogId(),comment.commentID);
    ft.add(R.id.layout_fragment_container,detailFragment,tagForFragment).addToBackStack(tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
    if (listFragment != null)     ft.hide(listFragment);
    ft.commitAllowingStateLoss();
    mMenuDrawer.setDrawerIndicatorEnabled(false);
  }
 else {
    detailFragment.setComment(WordPress.getCurrentLocalTableBlogId(),comment.commentID);
    if (listFragment != null)     listFragment.setHighlightedCommentId(comment.commentID);
  }
}","@Override public void onCommentSelected(Comment comment){
  if (comment == null)   return;
  FragmentManager fm=getSupportFragmentManager();
  fm.executePendingTransactions();
  CommentDetailFragment detailFragment=getDetailFragment();
  CommentsListFragment listFragment=getListFragment();
  if (detailFragment == null) {
    FragmentTransaction ft=fm.beginTransaction();
    String tagForFragment=getString(R.string.fragment_tag_comment_detail);
    detailFragment=CommentDetailFragment.newInstance(WordPress.getCurrentLocalTableBlogId(),comment.commentID);
    ft.add(R.id.layout_fragment_container,detailFragment,tagForFragment).addToBackStack(tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
    if (listFragment != null)     ft.hide(listFragment);
    ft.commitAllowingStateLoss();
    mMenuDrawer.setDrawerIndicatorEnabled(false);
  }
 else {
    if (hasReaderFragment())     fm.popBackStackImmediate();
    detailFragment.setComment(WordPress.getCurrentLocalTableBlogId(),comment.commentID);
    if (listFragment != null)     listFragment.setHighlightedCommentId(comment.commentID);
  }
}",0.9720311783585512
14857,"@Override public void onBlogChanged(){
  super.onBlogChanged();
  stopService(new Intent(this,StatsService.class));
  FragmentManager fm=getSupportFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  StatsAbsViewFragment fragment;
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.VISITORS_AND_VIEWS);
  ft.replace(R.id.stats_visitors_and_views_container,fragment,StatsVisitorsAndViewsFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.TOP_POSTS_AND_PAGES);
  ft.replace(R.id.stats_top_posts_container,fragment,StatsTopPostsAndPagesFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.VIEWS_BY_COUNTRY);
  ft.replace(R.id.stats_geoviews_container,fragment,StatsGeoviewsFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.CLICKS);
  ft.replace(R.id.stats_clicks_container,fragment,StatsClicksFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.SEARCH_ENGINE_TERMS);
  ft.replace(R.id.stats_searchengine_container,fragment,StatsSearchEngineTermsFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.TOTALS_FOLLOWERS_AND_SHARES);
  ft.replace(R.id.stats_totals_followers_shares_container,fragment,StatsTotalsFollowersAndSharesFragment.TAG);
  fragment=StatsReferrersFragment.newInstance(StatsViewType.REFERRERS);
  ft.replace(R.id.stats_referrers_container,fragment,StatsReferrersFragment.TAG);
  ft.commit();
  refreshStats();
}","@Override public void onBlogChanged(){
  super.onBlogChanged();
  stopStatsService();
  FragmentManager fm=getSupportFragmentManager();
  FragmentTransaction ft=fm.beginTransaction();
  StatsAbsViewFragment fragment;
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.VISITORS_AND_VIEWS);
  ft.replace(R.id.stats_visitors_and_views_container,fragment,StatsVisitorsAndViewsFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.TOP_POSTS_AND_PAGES);
  ft.replace(R.id.stats_top_posts_container,fragment,StatsTopPostsAndPagesFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.VIEWS_BY_COUNTRY);
  ft.replace(R.id.stats_geoviews_container,fragment,StatsGeoviewsFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.CLICKS);
  ft.replace(R.id.stats_clicks_container,fragment,StatsClicksFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.SEARCH_ENGINE_TERMS);
  ft.replace(R.id.stats_searchengine_container,fragment,StatsSearchEngineTermsFragment.TAG);
  fragment=StatsAbsViewFragment.newInstance(StatsViewType.TOTALS_FOLLOWERS_AND_SHARES);
  ft.replace(R.id.stats_totals_followers_shares_container,fragment,StatsTotalsFollowersAndSharesFragment.TAG);
  fragment=StatsReferrersFragment.newInstance(StatsViewType.REFERRERS);
  ft.replace(R.id.stats_referrers_container,fragment,StatsReferrersFragment.TAG);
  ft.commit();
  refreshStats();
}",0.9860917941585536
14858,"@Override protected void onDestroy(){
  stopService(new Intent(this,StatsService.class));
  super.onDestroy();
}","@Override protected void onDestroy(){
  stopStatsService();
  super.onDestroy();
}",0.8350515463917526
14859,"synchronized void waitForResponse(){
  if (!mIsCompleted) {
    AppLog.d(AppLog.T.STATS,""String_Node_Str"" + getTaskName());
    while (!mIsCompleted) {
      try {
        Thread.sleep(250);
      }
 catch (      InterruptedException e) {
        AppLog.w(AppLog.T.STATS,""String_Node_Str"" + getTaskName());
        return;
      }
    }
  }
  AppLog.d(AppLog.T.STATS,""String_Node_Str"" + getTaskName());
}","synchronized void waitForResponse(){
  if (!mIsCompleted) {
    AppLog.d(AppLog.T.STATS,""String_Node_Str"" + getTaskName());
    while (!mIsCompleted) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        AppLog.w(AppLog.T.STATS,""String_Node_Str"" + getTaskName());
        return;
      }
    }
  }
  AppLog.d(AppLog.T.STATS,""String_Node_Str"" + getTaskName());
}",0.995049504950495
14860,"@Override public void onLoadMore(boolean loadMore){
  if (mCanLoadMorePosts)   requestPosts(loadMore);
}","@Override public void onLoadMore(boolean loadMore){
  if (mCanLoadMorePosts && !mIsFetchingPosts)   requestPosts(loadMore);
}",0.9082969432314412
14861,"@Override public void onClick(View v){
  mParentActivity.newPost();
}","@Override public void onClick(View v){
  if (hasActivity()) {
    PostsActivity postsActivity=(PostsActivity)getActivity();
    postsActivity.newPost();
  }
}",0.5726872246696035
14862,"@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  if (!hasActivity())   return;
  mOnRefreshListener.onRefresh(false);
  if (mProgressFooterView != null)   mProgressFooterView.setVisibility(View.GONE);
  if (!TextUtils.isEmpty(errorMessage) && !getActivity().isFinishing()) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    WPAlertDialogFragment alert=WPAlertDialogFragment.newAlertDialog(mIsPage ? getString(R.string.error_refresh_pages) : getString(R.string.error_refresh_posts));
    try {
      alert.show(ft,""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  mIsFetchingPosts=false;
  if (!hasActivity())   return;
  mOnRefreshListener.onRefresh(false);
  if (mProgressFooterView != null)   mProgressFooterView.setVisibility(View.GONE);
  if (!TextUtils.isEmpty(errorMessage) && !getActivity().isFinishing()) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    WPAlertDialogFragment alert=WPAlertDialogFragment.newAlertDialog(mIsPage ? getString(R.string.error_refresh_pages) : getString(R.string.error_refresh_posts));
    try {
      alert.show(ft,""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.981348637015782
14863,"public void onItemClick(AdapterView<?> arg0,View v,int position,long id){
  if (position >= getPostListAdapter().getCount())   return;
  if (v == null)   return;
  PostsListPost postsListPost=(PostsListPost)getPostListAdapter().getItem(position);
  if (postsListPost == null)   return;
  if (!mParentActivity.mIsRefreshing) {
    showPost(postsListPost.getPostId());
  }
 else {
    Toast.makeText(mParentActivity,R.string.please_wait_refresh_done,Toast.LENGTH_SHORT).show();
  }
}","public void onItemClick(AdapterView<?> arg0,View v,int position,long id){
  if (position >= getPostListAdapter().getCount())   return;
  if (v == null)   return;
  PostsListPost postsListPost=(PostsListPost)getPostListAdapter().getItem(position);
  if (postsListPost == null)   return;
  if (!mIsFetchingPosts) {
    showPost(postsListPost.getPostId());
  }
 else   if (hasActivity()) {
    Toast.makeText(getActivity(),R.string.please_wait_refresh_done,Toast.LENGTH_SHORT).show();
  }
}",0.7975206611570248
14864,"public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(      boolean loadMore){
        if (mCanLoadMorePosts)         requestPosts(loadMore);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(){
        if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}","public PostsListAdapter getPostListAdapter(){
  if (mPostsListAdapter == null) {
    PostsListAdapter.OnLoadMoreListener loadMoreListener=new PostsListAdapter.OnLoadMoreListener(){
      @Override public void onLoadMore(      boolean loadMore){
        if (mCanLoadMorePosts && !mIsFetchingPosts)         requestPosts(loadMore);
      }
    }
;
    PostsListAdapter.OnPostsLoadedListener postsLoadedListener=new PostsListAdapter.OnPostsLoadedListener(){
      @Override public void onPostsLoaded(      int postCount){
        if (postCount == 0 && mCanLoadMorePosts) {
          requestPosts(false);
        }
 else         if (mShouldSelectFirstPost) {
          mShouldSelectFirstPost=false;
          if (mPostsListAdapter.getCount() > 0) {
            PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
            if (postsListPost != null) {
              showPost(postsListPost.getPostId());
              getListView().setItemChecked(0,true);
            }
          }
        }
      }
    }
;
    mPostsListAdapter=new PostsListAdapter(getActivity(),mIsPage,loadMoreListener,postsLoadedListener);
  }
  return mPostsListAdapter;
}",0.9368709972552608
14865,"public void onResume(){
  super.onResume();
  mParentActivity=(PostsActivity)getActivity();
  if (WordPress.getCurrentBlog() != null) {
    getListView().setAdapter(getPostListAdapter());
    getPostListAdapter().loadPosts();
  }
}","public void onResume(){
  super.onResume();
  if (WordPress.getCurrentBlog() != null) {
    getListView().setAdapter(getPostListAdapter());
    getPostListAdapter().loadPosts();
  }
}",0.8840579710144928
14866,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  mProgressFooterView=View.inflate(getActivity(),R.layout.list_footer_progress,null);
  getListView().addFooterView(mProgressFooterView,null,false);
  mProgressFooterView.setVisibility(View.GONE);
  getListView().setDivider(getResources().getDrawable(R.drawable.list_divider));
  getListView().setDividerHeight(1);
  getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> arg0,    View v,    int position,    long id){
      if (position >= getPostListAdapter().getCount())       return;
      if (v == null)       return;
      PostsListPost postsListPost=(PostsListPost)getPostListAdapter().getItem(position);
      if (postsListPost == null)       return;
      if (!mParentActivity.mIsRefreshing) {
        showPost(postsListPost.getPostId());
      }
 else {
        Toast.makeText(mParentActivity,R.string.please_wait_refresh_done,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  TextView textview=(TextView)getListView().getEmptyView();
  if (textview != null) {
    if (mIsPage) {
      textview.setText(getText(R.string.pages_empty_list));
    }
 else {
      textview.setText(getText(R.string.posts_empty_list));
    }
    textview.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mParentActivity.newPost();
      }
    }
);
  }
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  mProgressFooterView=View.inflate(getActivity(),R.layout.list_footer_progress,null);
  getListView().addFooterView(mProgressFooterView,null,false);
  mProgressFooterView.setVisibility(View.GONE);
  getListView().setDivider(getResources().getDrawable(R.drawable.list_divider));
  getListView().setDividerHeight(1);
  getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> arg0,    View v,    int position,    long id){
      if (position >= getPostListAdapter().getCount())       return;
      if (v == null)       return;
      PostsListPost postsListPost=(PostsListPost)getPostListAdapter().getItem(position);
      if (postsListPost == null)       return;
      if (!mIsFetchingPosts) {
        showPost(postsListPost.getPostId());
      }
 else       if (hasActivity()) {
        Toast.makeText(getActivity(),R.string.please_wait_refresh_done,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  TextView textview=(TextView)getListView().getEmptyView();
  if (textview != null) {
    if (mIsPage) {
      textview.setText(getText(R.string.pages_empty_list));
    }
 else {
      textview.setText(getText(R.string.posts_empty_list));
    }
    textview.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (hasActivity()) {
          PostsActivity postsActivity=(PostsActivity)getActivity();
          postsActivity.newPost();
        }
      }
    }
);
  }
}",0.8810656517602283
14867,"@Override public void onPostsLoaded(){
  if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
}","@Override public void onPostsLoaded(int postCount){
  if (postCount == 0 && mCanLoadMorePosts) {
    requestPosts(false);
  }
 else   if (mShouldSelectFirstPost) {
    mShouldSelectFirstPost=false;
    if (mPostsListAdapter.getCount() > 0) {
      PostsListPost postsListPost=(PostsListPost)mPostsListAdapter.getItem(0);
      if (postsListPost != null) {
        showPost(postsListPost.getPostId());
        getListView().setItemChecked(0,true);
      }
    }
  }
}",0.8891537544696066
14868,"public void requestPosts(boolean loadMore){
  if (WordPress.getCurrentBlog() == null)   return;
  int postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
  if (!loadMore) {
    mOnRefreshListener.onRefresh(true);
    postCount=POSTS_REQUEST_COUNT;
  }
  List<Object> apiArgs=new Vector<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  if (mProgressFooterView != null && loadMore) {
    mProgressFooterView.setVisibility(View.VISIBLE);
  }
  ApiHelper.FetchPostsTask fetchPostsTaskTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      if (!hasActivity())       return;
      mOnRefreshListener.onRefresh(false);
      if (postCount == 0) {
        mCanLoadMorePosts=false;
        return;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
        if (mProgressFooterView != null) {
          mProgressFooterView.setVisibility(View.GONE);
        }
        return;
      }
      getPostListAdapter().loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      if (!hasActivity())       return;
      mOnRefreshListener.onRefresh(false);
      if (mProgressFooterView != null)       mProgressFooterView.setVisibility(View.GONE);
      if (!TextUtils.isEmpty(errorMessage) && !getActivity().isFinishing()) {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newAlertDialog(mIsPage ? getString(R.string.error_refresh_pages) : getString(R.string.error_refresh_posts));
        try {
          alert.show(ft,""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  fetchPostsTaskTask.execute(apiArgs);
}","public void requestPosts(boolean loadMore){
  if (WordPress.getCurrentBlog() == null)   return;
  int postCount=getPostListAdapter().getRemotePostCount() + POSTS_REQUEST_COUNT;
  if (!loadMore) {
    mOnRefreshListener.onRefresh(true);
    postCount=POSTS_REQUEST_COUNT;
  }
  List<Object> apiArgs=new Vector<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(mIsPage);
  apiArgs.add(postCount);
  apiArgs.add(loadMore);
  if (mProgressFooterView != null && loadMore) {
    mProgressFooterView.setVisibility(View.VISIBLE);
  }
  ApiHelper.FetchPostsTask fetchPostsTaskTask=new ApiHelper.FetchPostsTask(new ApiHelper.FetchPostsTask.Callback(){
    @Override public void onSuccess(    int postCount){
      mIsFetchingPosts=false;
      if (!hasActivity())       return;
      mOnRefreshListener.onRefresh(false);
      if (postCount == 0) {
        mCanLoadMorePosts=false;
      }
 else       if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
        mCanLoadMorePosts=false;
        if (mProgressFooterView != null) {
          mProgressFooterView.setVisibility(View.GONE);
        }
        return;
      }
      getPostListAdapter().loadPosts();
    }
    @Override public void onFailure(    ApiHelper.ErrorType errorType,    String errorMessage,    Throwable throwable){
      mIsFetchingPosts=false;
      if (!hasActivity())       return;
      mOnRefreshListener.onRefresh(false);
      if (mProgressFooterView != null)       mProgressFooterView.setVisibility(View.GONE);
      if (!TextUtils.isEmpty(errorMessage) && !getActivity().isFinishing()) {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newAlertDialog(mIsPage ? getString(R.string.error_refresh_pages) : getString(R.string.error_refresh_posts));
        try {
          alert.show(ft,""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  mIsFetchingPosts=true;
  fetchPostsTaskTask.execute(apiArgs);
}",0.9753958587088916
14869,"@Override public void onSuccess(int postCount){
  if (!hasActivity())   return;
  mOnRefreshListener.onRefresh(false);
  if (postCount == 0) {
    mCanLoadMorePosts=false;
    return;
  }
 else   if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
    mCanLoadMorePosts=false;
    if (mProgressFooterView != null) {
      mProgressFooterView.setVisibility(View.GONE);
    }
    return;
  }
  getPostListAdapter().loadPosts();
}","@Override public void onSuccess(int postCount){
  mIsFetchingPosts=false;
  if (!hasActivity())   return;
  mOnRefreshListener.onRefresh(false);
  if (postCount == 0) {
    mCanLoadMorePosts=false;
  }
 else   if (postCount == getPostListAdapter().getRemotePostCount() && postCount != POSTS_REQUEST_COUNT) {
    mCanLoadMorePosts=false;
    if (mProgressFooterView != null) {
      mProgressFooterView.setVisibility(View.GONE);
    }
    return;
  }
  getPostListAdapter().loadPosts();
}",0.9604166666666668
14870,"@Override protected Void doInBackground(Void... nada){
  if (WordPress.getCurrentBlog() != null) {
    List<PostsListPost> postsList=WordPress.wpDB.getPostsListPosts(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage);
    if (postsList.size() == 0 && mOnLoadMoreListener != null) {
      mOnLoadMoreListener.onLoadMore(false);
    }
 else {
      setPosts(postsList);
    }
  }
  return null;
}","@Override protected Void doInBackground(Void... nada){
  if (WordPress.getCurrentBlog() != null) {
    List<PostsListPost> postsList=WordPress.wpDB.getPostsListPosts(WordPress.getCurrentBlog().getLocalTableBlogId(),mIsPage);
    setPosts(postsList);
  }
  return null;
}",0.7153502235469449
14871,public void onPostsLoaded();,public void onPostsLoaded(int postCount);,0.8115942028985508
14872,"@Override protected void onPostExecute(Void nada){
  notifyDataSetChanged();
  if (mOnPostsLoadedListener != null) {
    mOnPostsLoadedListener.onPostsLoaded();
  }
}","@Override protected void onPostExecute(Void nada){
  notifyDataSetChanged();
  if (mOnPostsLoadedListener != null && mPosts != null) {
    mOnPostsLoadedListener.onPostsLoaded(mPosts.size());
  }
}",0.9146005509641874
14873,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  mNoMenuDrawer=getIntent().getBooleanExtra(ARG_NO_MENU_DRAWER,false);
  if (mNoMenuDrawer) {
    setContentView(R.layout.stats_activity);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
 else {
    createMenuDrawer(R.layout.stats_activity);
  }
  mFragmentContainer=(LinearLayout)findViewById(R.id.stats_fragment_container);
  mColumnLeft=(LinearLayout)findViewById(R.id.stats_tablet_col_left);
  mColumnRight=(LinearLayout)findViewById(R.id.stats_tablet_col_right);
  loadStatsFragments();
  setTitle(R.string.stats);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  mNoMenuDrawer=getIntent().getBooleanExtra(ARG_NO_MENU_DRAWER,false);
  if (mNoMenuDrawer) {
    setContentView(R.layout.stats_activity);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  }
 else {
    createMenuDrawer(R.layout.stats_activity);
  }
  mFragmentContainer=(LinearLayout)findViewById(R.id.stats_fragment_container);
  mColumnLeft=(LinearLayout)findViewById(R.id.stats_tablet_col_left);
  mColumnRight=(LinearLayout)findViewById(R.id.stats_tablet_col_right);
  loadStatsFragments();
  setTitle(R.string.stats);
  restoreState(savedInstanceState);
}",0.9771573604060914
14874,"public String getTitleForWPImageSpan(Context ctx,String filePath){
  if (filePath == null)   return null;
  Uri curStream=null;
  String title=""String_Node_Str"";
  if (filePath != null) {
    if (!filePath.contains(""String_Node_Str""))     curStream=Uri.parse(""String_Node_Str"" + filePath);
 else     curStream=Uri.parse(filePath);
  }
  if (curStream == null) {
    return null;
  }
  if (filePath.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    String[] projection=new String[]{Images.Thumbnails.DATA};
    String path=""String_Node_Str"";
    Cursor cur;
    try {
      cur=ctx.getContentResolver().query(curStream,projection,null,null,null);
    }
 catch (    Exception e1) {
      return null;
    }
    File jpeg=null;
    if (cur != null) {
      String thumbData=""String_Node_Str"";
      if (cur.moveToFirst()) {
        int dataColumn=cur.getColumnIndex(Images.Media.DATA);
        thumbData=cur.getString(dataColumn);
      }
      cur.close();
      if (thumbData == null) {
        return null;
      }
      jpeg=new File(thumbData);
      path=thumbData;
    }
 else {
      path=filePath.toString().replace(""String_Node_Str"",""String_Node_Str"");
      jpeg=new File(path);
    }
    title=jpeg.getName();
    return title;
  }
}","public String getTitleForWPImageSpan(Context ctx,String filePath){
  if (filePath == null)   return null;
  Uri curStream=null;
  String title=""String_Node_Str"";
  if (filePath != null) {
    if (!filePath.contains(""String_Node_Str""))     curStream=Uri.parse(""String_Node_Str"" + filePath);
 else     curStream=Uri.parse(filePath);
  }
  if (curStream == null) {
    return null;
  }
  if (filePath.contains(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    String[] projection=new String[]{Images.Thumbnails.DATA};
    Cursor cur;
    try {
      cur=ctx.getContentResolver().query(curStream,projection,null,null,null);
    }
 catch (    Exception e1) {
      AppLog.e(T.UTILS,e1);
      return null;
    }
    File jpeg=null;
    if (cur != null) {
      String thumbData=""String_Node_Str"";
      if (cur.moveToFirst()) {
        int dataColumn=cur.getColumnIndex(Images.Media.DATA);
        thumbData=cur.getString(dataColumn);
      }
      cur.close();
      if (thumbData == null) {
        return null;
      }
      jpeg=new File(thumbData);
    }
 else {
      String path=filePath.toString().replace(""String_Node_Str"",""String_Node_Str"");
      jpeg=new File(path);
    }
    title=jpeg.getName();
    return title;
  }
}",0.9634340222575516
14875,"/** 
 * nbradbury - 21-Feb-2014 - similar to createThumbnail but more efficient since it doesn't require passing the full-size image as an array of bytes[]
 */
public byte[] createThumbnailFromUri(Context context,Uri imageUri,int maxWidth,String fileExtension,int rotation){
  if (context == null || imageUri == null)   return null;
  AssetFileDescriptor descriptor=null;
  try {
    try {
      descriptor=context.getContentResolver().openAssetFileDescriptor(imageUri,""String_Node_Str"");
    }
 catch (    FileNotFoundException e) {
      AppLog.e(T.UTILS,e);
      return null;
    }
    BitmapFactory.Options optBounds=new BitmapFactory.Options();
    optBounds.inJustDecodeBounds=true;
    BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor(),null,optBounds);
    int scale=1;
    if (maxWidth > 0 && optBounds.outWidth > maxWidth) {
      double d=Math.pow(2,(int)Math.round(Math.log(maxWidth / (double)optBounds.outWidth) / Math.log(0.5)));
      scale=(int)d;
    }
    BitmapFactory.Options optActual=new BitmapFactory.Options();
    optActual.inSampleSize=scale;
    final Bitmap bmpResized=BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor(),null,optActual);
    if (bmpResized == null)     return null;
    ByteArrayOutputStream stream=new ByteArrayOutputStream();
    final Bitmap.CompressFormat fmt;
    if (fileExtension != null && fileExtension.equalsIgnoreCase(""String_Node_Str"")) {
      fmt=Bitmap.CompressFormat.PNG;
    }
 else {
      fmt=Bitmap.CompressFormat.JPEG;
    }
    if (rotation != 0) {
      Matrix matrix=new Matrix();
      matrix.setRotate(rotation);
      final Bitmap bmpRotated=Bitmap.createBitmap(bmpResized,0,0,bmpResized.getWidth(),bmpResized.getHeight(),matrix,true);
      bmpRotated.compress(fmt,100,stream);
      bmpResized.recycle();
      bmpRotated.recycle();
    }
 else {
      bmpResized.compress(fmt,100,stream);
      bmpResized.recycle();
    }
    return stream.toByteArray();
  }
  finally {
    if (descriptor != null) {
      try {
        descriptor.close();
      }
 catch (      IOException e) {
        AppLog.e(T.UTILS,e);
      }
    }
  }
}","/** 
 * nbradbury - 21-Feb-2014 - similar to createThumbnail but more efficient since it doesn't require passing the full-size image as an array of bytes[]
 */
public byte[] createThumbnailFromUri(Context context,Uri imageUri,int maxWidth,String fileExtension,int rotation){
  if (context == null || imageUri == null)   return null;
  String filePath=null;
  if (imageUri.toString().contains(""String_Node_Str"")) {
    String[] projection=new String[]{Images.Media.DATA};
    Cursor cur=context.getContentResolver().query(imageUri,projection,null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        int dataColumn=cur.getColumnIndex(Images.Media.DATA);
        filePath=cur.getString(dataColumn);
      }
      cur.close();
    }
  }
  if (TextUtils.isEmpty(filePath)) {
    filePath=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
    filePath=filePath.replace(""String_Node_Str"",""String_Node_Str"");
  }
  BitmapFactory.Options optBounds=new BitmapFactory.Options();
  optBounds.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(filePath,optBounds);
  int scale=1;
  if (maxWidth > 0 && optBounds.outWidth > maxWidth) {
    double d=Math.pow(2,(int)Math.round(Math.log(maxWidth / (double)optBounds.outWidth) / Math.log(0.5)));
    scale=(int)d;
  }
  BitmapFactory.Options optActual=new BitmapFactory.Options();
  optActual.inSampleSize=scale;
  Bitmap bmpResized=null;
  bmpResized=BitmapFactory.decodeFile(filePath,optActual);
  if (bmpResized == null)   return null;
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  final Bitmap.CompressFormat fmt;
  if (fileExtension != null && fileExtension.equalsIgnoreCase(""String_Node_Str"")) {
    fmt=Bitmap.CompressFormat.PNG;
  }
 else {
    fmt=Bitmap.CompressFormat.JPEG;
  }
  if (rotation != 0) {
    Matrix matrix=new Matrix();
    matrix.setRotate(rotation);
    final Bitmap bmpRotated=Bitmap.createBitmap(bmpResized,0,0,bmpResized.getWidth(),bmpResized.getHeight(),matrix,true);
    bmpRotated.compress(fmt,100,stream);
    bmpResized.recycle();
    bmpRotated.recycle();
  }
 else {
    bmpResized.compress(fmt,100,stream);
    bmpResized.recycle();
  }
  return stream.toByteArray();
}",0.4302218114602588
14876,"public static int[] getImageSize(Uri uri,Context context){
  String path=null;
  if (uri.toString().contains(""String_Node_Str"")) {
    String[] projection;
    Uri imgPath;
    projection=new String[]{Images.Media._ID,Images.Media.DATA};
    imgPath=uri;
    Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
    String thumbData=""String_Node_Str"";
    if (cur.moveToFirst()) {
      int dataColumn;
      dataColumn=cur.getColumnIndex(Images.Media.DATA);
      thumbData=cur.getString(dataColumn);
      path=thumbData;
    }
    cur.close();
  }
 else {
    path=uri.toString().replace(""String_Node_Str"",""String_Node_Str"");
  }
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,options);
  int imageHeight=options.outHeight;
  int imageWidth=options.outWidth;
  int[] dimensions={imageWidth,imageHeight};
  return dimensions;
}","public static int[] getImageSize(Uri uri,Context context){
  String path=null;
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  if (uri.toString().contains(""String_Node_Str"")) {
    String[] projection=new String[]{Images.Media._ID,Images.Media.DATA};
    Cursor cur=context.getContentResolver().query(uri,projection,null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        int dataColumn=cur.getColumnIndex(Images.Media.DATA);
        path=cur.getString(dataColumn);
      }
      cur.close();
    }
  }
  if (TextUtils.isEmpty(path)) {
    path=uri.toString().replace(""String_Node_Str"",""String_Node_Str"");
    path=path.replace(""String_Node_Str"",""String_Node_Str"");
  }
  BitmapFactory.decodeFile(path,options);
  int imageHeight=options.outHeight;
  int imageWidth=options.outWidth;
  int[] dimensions={imageWidth,imageHeight};
  return dimensions;
}",0.7289318303811058
14877,"public String uploadMediaFile(MediaFile mf,Blog blog){
  String content=""String_Node_Str"";
  String curImagePath=mf.getFilePath();
  if (curImagePath == null)   return null;
  if (curImagePath.contains(""String_Node_Str"")) {
    XMLRPCClient client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
    String tempFileName=""String_Node_Str"" + System.currentTimeMillis();
    try {
      context.openFileOutput(tempFileName,Context.MODE_PRIVATE);
    }
 catch (    FileNotFoundException e) {
      mErrorMessage=getResources().getString(R.string.file_error_create);
      mIsMediaError=true;
      return null;
    }
    File tempFile=context.getFileStreamPath(tempFileName);
    Uri videoUri=Uri.parse(curImagePath);
    File videoFile=null;
    String mimeType=""String_Node_Str"", xRes=""String_Node_Str"", yRes=""String_Node_Str"";
    if (videoUri.toString().contains(""String_Node_Str"")) {
      String[] projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE,Video.Media.RESOLUTION};
      Cursor cur=context.getContentResolver().query(videoUri,projection,null,null,null);
      if (cur != null && cur.moveToFirst()) {
        int mimeTypeColumn, resolutionColumn, dataColumn;
        dataColumn=cur.getColumnIndex(Video.Media.DATA);
        mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
        resolutionColumn=cur.getColumnIndex(Video.Media.RESOLUTION);
        mf=new MediaFile();
        String thumbData=cur.getString(dataColumn);
        mimeType=cur.getString(mimeTypeColumn);
        videoFile=new File(thumbData);
        mf.setFilePath(videoFile.getPath());
        String resolution=cur.getString(resolutionColumn);
        if (resolution != null) {
          String[] resx=resolution.split(""String_Node_Str"");
          xRes=resx[0];
          yRes=resx[1];
        }
 else {
          if (!blog.getMaxImageWidth().equals(""String_Node_Str"")) {
            xRes=blog.getMaxImageWidth();
            yRes=String.valueOf(Math.round(Integer.valueOf(blog.getMaxImageWidth()) * 0.75));
          }
 else {
            xRes=""String_Node_Str"";
            yRes=""String_Node_Str"";
          }
        }
      }
    }
 else {
      String filePath=videoUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
      mf.setFilePath(filePath);
      videoFile=new File(filePath);
    }
    if (videoFile == null) {
      mErrorMessage=context.getResources().getString(R.string.error_media_upload);
      return null;
    }
    if (TextUtils.isEmpty(mimeType)) {
      mimeType=getMediaFileMimeType(videoFile,false);
    }
    String videoName=getMediaFileName(videoFile,mimeType);
    Map<String,Object> m=new HashMap<String,Object>();
    m.put(""String_Node_Str"",videoName);
    m.put(""String_Node_Str"",mimeType);
    m.put(""String_Node_Str"",mf);
    m.put(""String_Node_Str"",true);
    Object[] params={1,blog.getUsername(),blog.getPassword(),m};
    FeatureSet featureSet=synchronousGetFeatureSet();
    boolean selfHosted=WordPress.currentBlog != null && !WordPress.currentBlog.isDotcomFlag();
    boolean isVideoEnabled=selfHosted || (featureSet != null && mFeatureSet.isVideopressEnabled());
    if (isVideoEnabled) {
      Object result=uploadFileHelper(client,params,tempFile);
      Map<?,?> resultMap=(HashMap<?,?>)result;
      if (resultMap != null && resultMap.containsKey(""String_Node_Str"")) {
        String resultURL=resultMap.get(""String_Node_Str"").toString();
        if (resultMap.containsKey(""String_Node_Str"")) {
          resultURL=resultMap.get(""String_Node_Str"").toString() + ""String_Node_Str"";
        }
 else {
          resultURL=String.format(""String_Node_Str"",xRes,yRes,resultURL,mimeType,resultURL);
        }
        content=content + resultURL;
      }
 else {
        return null;
      }
    }
 else {
      mErrorMessage=getString(R.string.media_no_video_message);
      mErrorUnavailableVideoPress=true;
      return null;
    }
  }
 else {
    curImagePath=mf.getFilePath();
    Uri imageUri=Uri.parse(curImagePath);
    File imageFile=null;
    String mimeType=""String_Node_Str"", orientation=""String_Node_Str"", path=""String_Node_Str"";
    if (imageUri.toString().contains(""String_Node_Str"")) {
      String[] projection;
      Uri imgPath;
      projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
      imgPath=imageUri;
      Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
      if (cur.moveToFirst()) {
        int dataColumn, mimeTypeColumn, orientationColumn;
        dataColumn=cur.getColumnIndex(Images.Media.DATA);
        mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
        orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
        orientation=cur.getString(orientationColumn);
        String thumbData=cur.getString(dataColumn);
        mimeType=cur.getString(mimeTypeColumn);
        imageFile=new File(thumbData);
        path=thumbData;
        mf.setFilePath(imageFile.getPath());
      }
    }
 else {
      path=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
      imageFile=new File(path);
      mf.setFilePath(path);
    }
    if (imageFile == null) {
      mErrorMessage=context.getString(R.string.file_not_found);
      mIsMediaError=true;
      return null;
    }
    if (TextUtils.isEmpty(mimeType)) {
      mimeType=getMediaFileMimeType(imageFile,false);
    }
    String fileName=getMediaFileName(imageFile,mimeType);
    ImageHelper ih=new ImageHelper();
    orientation=ih.getExifOrientation(path,orientation);
    String resizedPictureURL=null;
    boolean shouldUploadResizedVersion=false;
    if (!mimeType.equals(""String_Node_Str"") && !blog.getMaxImageWidth().equals(""String_Node_Str"")) {
      int pictureSettingWidth=mf.getWidth();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      BitmapFactory.decodeFile(path,options);
      int imageHeight=options.outHeight;
      int imageWidth=options.outWidth;
      int[] dimensions={imageWidth,imageHeight};
      if (dimensions[0] != 0 && dimensions[0] != pictureSettingWidth) {
        shouldUploadResizedVersion=true;
      }
    }
    if (shouldUploadResizedVersion) {
      byte[] bytes;
      byte[] finalBytes;
      try {
        bytes=new byte[(int)imageFile.length()];
      }
 catch (      OutOfMemoryError er) {
        mErrorMessage=context.getString(R.string.out_of_memory);
        mIsMediaError=true;
        return null;
      }
      DataInputStream in=null;
      try {
        in=new DataInputStream(new FileInputStream(imageFile));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        in.readFully(bytes);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      String width=String.valueOf(mf.getWidth());
      String fileExtensionThumb=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
      finalBytes=ih.createThumbnail(bytes,width,orientation,false,fileExtensionThumb);
      if (finalBytes == null) {
        mErrorMessage=context.getString(R.string.out_of_memory);
        mIsMediaError=true;
        return null;
      }
      Map<String,Object> m=new HashMap<String,Object>();
      m.put(""String_Node_Str"",fileName);
      m.put(""String_Node_Str"",mimeType);
      m.put(""String_Node_Str"",finalBytes);
      m.put(""String_Node_Str"",true);
      resizedPictureURL=uploadPicture(m,mf,blog);
      if (resizedPictureURL == null)       return null;
    }
    String fullSizeUrl=null;
    if (!shouldUploadResizedVersion || blog.isFullSizeImage()) {
      Map<String,Object> m=new HashMap<String,Object>();
      m.put(""String_Node_Str"",fileName);
      m.put(""String_Node_Str"",mimeType);
      m.put(""String_Node_Str"",mf);
      m.put(""String_Node_Str"",true);
      fullSizeUrl=uploadPicture(m,mf,blog);
      if (fullSizeUrl == null)       return null;
    }
    String alignment=""String_Node_Str"";
switch (mf.getHorizontalAlignment()) {
case 0:
      alignment=""String_Node_Str"";
    break;
case 1:
  alignment=""String_Node_Str"";
break;
case 2:
alignment=""String_Node_Str"";
break;
case 3:
alignment=""String_Node_Str"";
break;
}
String alignmentCSS=""String_Node_Str"" + alignment + ""String_Node_Str"";
if ((fullSizeUrl != null && fullSizeUrl.equalsIgnoreCase(""String_Node_Str"")) || (resizedPictureURL != null && resizedPictureURL.equalsIgnoreCase(""String_Node_Str""))) {
return ""String_Node_Str"";
}
if (fullSizeUrl != null && resizedPictureURL != null) {
}
 else if (fullSizeUrl == null) {
fullSizeUrl=resizedPictureURL;
}
 else {
resizedPictureURL=fullSizeUrl;
}
String mediaTitle=TextUtils.isEmpty(mf.getTitle()) ? ""String_Node_Str"" : mf.getTitle();
content=content + ""String_Node_Str"" + fullSizeUrl+ ""String_Node_Str""+ mediaTitle+ ""String_Node_Str""+ alignmentCSS+ ""String_Node_Str""+ resizedPictureURL+ ""String_Node_Str"";
if (!TextUtils.isEmpty(mf.getCaption())) {
content=String.format(""String_Node_Str"",alignment,mf.getWidth(),TextUtils.htmlEncode(mf.getCaption()),content);
}
}
return content;
}","public String uploadMediaFile(MediaFile mf,Blog blog){
  String content=""String_Node_Str"";
  String curImagePath=mf.getFilePath();
  if (curImagePath == null)   return null;
  if (curImagePath.contains(""String_Node_Str"")) {
    XMLRPCClient client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
    String tempFileName=""String_Node_Str"" + System.currentTimeMillis();
    try {
      context.openFileOutput(tempFileName,Context.MODE_PRIVATE);
    }
 catch (    FileNotFoundException e) {
      mErrorMessage=getResources().getString(R.string.file_error_create);
      mIsMediaError=true;
      return null;
    }
    File tempFile=context.getFileStreamPath(tempFileName);
    Uri videoUri=Uri.parse(curImagePath);
    File videoFile=null;
    String mimeType=""String_Node_Str"", xRes=""String_Node_Str"", yRes=""String_Node_Str"";
    if (videoUri.toString().contains(""String_Node_Str"")) {
      String[] projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE,Video.Media.RESOLUTION};
      Cursor cur=context.getContentResolver().query(videoUri,projection,null,null,null);
      if (cur != null && cur.moveToFirst()) {
        int mimeTypeColumn, resolutionColumn, dataColumn;
        dataColumn=cur.getColumnIndex(Video.Media.DATA);
        mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
        resolutionColumn=cur.getColumnIndex(Video.Media.RESOLUTION);
        mf=new MediaFile();
        String thumbData=cur.getString(dataColumn);
        mimeType=cur.getString(mimeTypeColumn);
        videoFile=new File(thumbData);
        mf.setFilePath(videoFile.getPath());
        String resolution=cur.getString(resolutionColumn);
        if (resolution != null) {
          String[] resx=resolution.split(""String_Node_Str"");
          xRes=resx[0];
          yRes=resx[1];
        }
 else {
          if (!blog.getMaxImageWidth().equals(""String_Node_Str"")) {
            xRes=blog.getMaxImageWidth();
            yRes=String.valueOf(Math.round(Integer.valueOf(blog.getMaxImageWidth()) * 0.75));
          }
 else {
            xRes=""String_Node_Str"";
            yRes=""String_Node_Str"";
          }
        }
      }
    }
 else {
      String filePath=videoUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
      mf.setFilePath(filePath);
      videoFile=new File(filePath);
    }
    if (videoFile == null) {
      mErrorMessage=context.getResources().getString(R.string.error_media_upload);
      return null;
    }
    if (TextUtils.isEmpty(mimeType)) {
      mimeType=getMediaFileMimeType(videoFile,false);
    }
    String videoName=getMediaFileName(videoFile,mimeType);
    Map<String,Object> m=new HashMap<String,Object>();
    m.put(""String_Node_Str"",videoName);
    m.put(""String_Node_Str"",mimeType);
    m.put(""String_Node_Str"",mf);
    m.put(""String_Node_Str"",true);
    Object[] params={1,blog.getUsername(),blog.getPassword(),m};
    FeatureSet featureSet=synchronousGetFeatureSet();
    boolean selfHosted=WordPress.currentBlog != null && !WordPress.currentBlog.isDotcomFlag();
    boolean isVideoEnabled=selfHosted || (featureSet != null && mFeatureSet.isVideopressEnabled());
    if (isVideoEnabled) {
      Object result=uploadFileHelper(client,params,tempFile);
      Map<?,?> resultMap=(HashMap<?,?>)result;
      if (resultMap != null && resultMap.containsKey(""String_Node_Str"")) {
        String resultURL=resultMap.get(""String_Node_Str"").toString();
        if (resultMap.containsKey(""String_Node_Str"")) {
          resultURL=resultMap.get(""String_Node_Str"").toString() + ""String_Node_Str"";
        }
 else {
          resultURL=String.format(""String_Node_Str"",xRes,yRes,resultURL,mimeType,resultURL);
        }
        content=content + resultURL;
      }
 else {
        return null;
      }
    }
 else {
      mErrorMessage=getString(R.string.media_no_video_message);
      mErrorUnavailableVideoPress=true;
      return null;
    }
  }
 else {
    curImagePath=mf.getFilePath();
    Uri imageUri=Uri.parse(curImagePath);
    File imageFile=null;
    String mimeType=""String_Node_Str"", orientation=""String_Node_Str"", path=""String_Node_Str"";
    if (imageUri.toString().contains(""String_Node_Str"")) {
      String[] projection;
      Uri imgPath;
      projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
      imgPath=imageUri;
      Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
      if (cur.moveToFirst()) {
        int dataColumn, mimeTypeColumn, orientationColumn;
        dataColumn=cur.getColumnIndex(Images.Media.DATA);
        mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
        orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
        orientation=cur.getString(orientationColumn);
        String thumbData=cur.getString(dataColumn);
        mimeType=cur.getString(mimeTypeColumn);
        imageFile=new File(thumbData);
        path=thumbData;
        mf.setFilePath(imageFile.getPath());
      }
    }
 else {
      path=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
      imageFile=new File(path);
      mf.setFilePath(path);
    }
    if (imageFile == null) {
      mErrorMessage=context.getString(R.string.file_not_found);
      mIsMediaError=true;
      return null;
    }
    if (TextUtils.isEmpty(mimeType)) {
      mimeType=getMediaFileMimeType(imageFile,true);
    }
    String fileName=getMediaFileName(imageFile,mimeType);
    ImageHelper ih=new ImageHelper();
    orientation=ih.getExifOrientation(path,orientation);
    String resizedPictureURL=null;
    boolean shouldUploadResizedVersion=false;
    if (!mimeType.equals(""String_Node_Str"") && !blog.getMaxImageWidth().equals(""String_Node_Str"")) {
      int pictureSettingWidth=mf.getWidth();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      BitmapFactory.decodeFile(path,options);
      int imageHeight=options.outHeight;
      int imageWidth=options.outWidth;
      int[] dimensions={imageWidth,imageHeight};
      if (dimensions[0] != 0 && dimensions[0] != pictureSettingWidth) {
        shouldUploadResizedVersion=true;
      }
    }
    if (shouldUploadResizedVersion) {
      byte[] bytes;
      byte[] finalBytes;
      try {
        bytes=new byte[(int)imageFile.length()];
      }
 catch (      OutOfMemoryError er) {
        mErrorMessage=context.getString(R.string.out_of_memory);
        mIsMediaError=true;
        return null;
      }
      DataInputStream in=null;
      try {
        in=new DataInputStream(new FileInputStream(imageFile));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        in.readFully(bytes);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      String width=String.valueOf(mf.getWidth());
      String fileExtensionThumb=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
      finalBytes=ih.createThumbnail(bytes,width,orientation,false,fileExtensionThumb);
      if (finalBytes == null) {
        mErrorMessage=context.getString(R.string.out_of_memory);
        mIsMediaError=true;
        return null;
      }
      Map<String,Object> m=new HashMap<String,Object>();
      m.put(""String_Node_Str"",fileName);
      m.put(""String_Node_Str"",mimeType);
      m.put(""String_Node_Str"",finalBytes);
      m.put(""String_Node_Str"",true);
      resizedPictureURL=uploadPicture(m,mf,blog);
      if (resizedPictureURL == null)       return null;
    }
    String fullSizeUrl=null;
    if (!shouldUploadResizedVersion || blog.isFullSizeImage()) {
      Map<String,Object> m=new HashMap<String,Object>();
      m.put(""String_Node_Str"",fileName);
      m.put(""String_Node_Str"",mimeType);
      m.put(""String_Node_Str"",mf);
      m.put(""String_Node_Str"",true);
      fullSizeUrl=uploadPicture(m,mf,blog);
      if (fullSizeUrl == null)       return null;
    }
    String alignment=""String_Node_Str"";
switch (mf.getHorizontalAlignment()) {
case 0:
      alignment=""String_Node_Str"";
    break;
case 1:
  alignment=""String_Node_Str"";
break;
case 2:
alignment=""String_Node_Str"";
break;
case 3:
alignment=""String_Node_Str"";
break;
}
String alignmentCSS=""String_Node_Str"" + alignment + ""String_Node_Str"";
if ((fullSizeUrl != null && fullSizeUrl.equalsIgnoreCase(""String_Node_Str"")) || (resizedPictureURL != null && resizedPictureURL.equalsIgnoreCase(""String_Node_Str""))) {
return ""String_Node_Str"";
}
if (fullSizeUrl != null && resizedPictureURL != null) {
}
 else if (fullSizeUrl == null) {
fullSizeUrl=resizedPictureURL;
}
 else {
resizedPictureURL=fullSizeUrl;
}
String mediaTitle=TextUtils.isEmpty(mf.getTitle()) ? ""String_Node_Str"" : mf.getTitle();
content=content + ""String_Node_Str"" + fullSizeUrl+ ""String_Node_Str""+ mediaTitle+ ""String_Node_Str""+ alignmentCSS+ ""String_Node_Str""+ resizedPictureURL+ ""String_Node_Str"";
if (!TextUtils.isEmpty(mf.getCaption())) {
content=String.format(""String_Node_Str"",alignment,mf.getWidth(),TextUtils.htmlEncode(mf.getCaption()),content);
}
}
return content;
}",0.999619420431686
14878,"public static void showToastOrAuthAlert(Context context,String xmlrpcMessage,String friendlyMessage){
  if (context == null)   return;
  if ((context instanceof FragmentActivity) && !TextUtils.isEmpty(xmlrpcMessage) && xmlrpcMessage.contains(""String_Node_Str"") || xmlrpcMessage.contains(""String_Node_Str"")) {
    FragmentActivity activity=(FragmentActivity)context;
    if (activity.isFinishing())     return;
    FragmentTransaction ft=activity.getSupportFragmentManager().beginTransaction();
    AuthErrorDialogFragment authAlert=AuthErrorDialogFragment.newInstance(WordPress.getCurrentBlog().isDotcomFlag());
    ft.add(authAlert,""String_Node_Str"");
    ft.commitAllowingStateLoss();
  }
 else {
    String errorMessage=TextUtils.isEmpty(friendlyMessage) ? context.getString(R.string.error_generic) : friendlyMessage;
    showToast(context,errorMessage,Duration.LONG);
  }
}","public static void showToastOrAuthAlert(Context context,String xmlrpcMessage,String friendlyMessage){
  if (context == null)   return;
  boolean isLoginLimitReached=false;
  if (!TextUtils.isEmpty(xmlrpcMessage)) {
    String lowerCaseXmlrpcMessage=xmlrpcMessage.toLowerCase();
    if (lowerCaseXmlrpcMessage.contains(""String_Node_Str"") && (lowerCaseXmlrpcMessage.contains(""String_Node_Str"") || lowerCaseXmlrpcMessage.contains(""String_Node_Str"")))     isLoginLimitReached=true;
  }
  if ((context instanceof FragmentActivity) && !TextUtils.isEmpty(xmlrpcMessage) && xmlrpcMessage.contains(""String_Node_Str"")) {
    FragmentActivity activity=(FragmentActivity)context;
    if (activity.isFinishing())     return;
    FragmentTransaction ft=activity.getSupportFragmentManager().beginTransaction();
    AuthErrorDialogFragment authAlert=AuthErrorDialogFragment.newInstance(WordPress.getCurrentBlog().isDotcomFlag());
    ft.add(authAlert,""String_Node_Str"");
    ft.commitAllowingStateLoss();
  }
 else {
    String errorMessage=null;
    if (isLoginLimitReached) {
      errorMessage=context.getString(R.string.limit_reached);
    }
 else {
      errorMessage=TextUtils.isEmpty(friendlyMessage) ? context.getString(R.string.error_generic) : friendlyMessage;
    }
    showToast(context,errorMessage,Duration.LONG);
  }
}",0.7265268915223336
14879,"@Override public void onFailure(VolleyError error){
  if (mSignInDialog != null && mSignInDialog.isShowing()) {
    return;
  }
  if (!isFinishing() && error.networkResponse != null && error.networkResponse.statusCode == 403) {
    AlertDialog.Builder builder=new AlertDialog.Builder(StatsActivity.this);
    builder.setTitle(getString(R.string.jetpack_stats_unauthorized)).setMessage(getString(R.string.jetpack_stats_switch_user));
    builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        startWPComLoginActivity();
      }
    }
);
    builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
      }
    }
);
    mSignInDialog=builder.create();
    mSignInDialog.show();
    return;
  }
  if (!isFinishing()) {
    ToastUtils.showToast(getBaseContext(),R.string.error_refresh_stats,ToastUtils.Duration.LONG);
  }
}","@Override public void onFailure(VolleyError error){
  if (mSignInDialog != null && mSignInDialog.isShowing()) {
    return;
  }
  if (isFinishing())   return;
  if (error.networkResponse != null && error.networkResponse.statusCode == 403) {
    AlertDialog.Builder builder=new AlertDialog.Builder(StatsActivity.this);
    builder.setTitle(getString(R.string.jetpack_stats_unauthorized)).setMessage(getString(R.string.jetpack_stats_switch_user));
    builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        startWPComLoginActivity();
      }
    }
);
    builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
      }
    }
);
    mSignInDialog=builder.create();
    mSignInDialog.show();
    return;
  }
  ToastUtils.showToastOrAuthAlert(StatsActivity.this,error,StatsActivity.this.getString(R.string.error_refresh_stats));
}",0.9205722742969906
14880,"private void refreshStats(){
  if (WordPress.getCurrentBlog() == null)   return;
  if (!NetworkUtils.isNetworkAvailable(this))   return;
  String blogId;
  if (WordPress.getCurrentBlog().isDotcomFlag() && dotComCredentialsMatch())   blogId=String.valueOf(WordPress.getCurrentBlog().getRemoteBlogId());
 else {
    blogId=getBlogId();
    if (blogId == null) {
      new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new VerifyJetpackSettingsCallback(StatsActivity.this)).execute(false);
      return;
    }
  }
  StatsRestHelper.getStatsSummary(blogId,new StatsRestHelper.StatsSummaryInterface(){
    @Override public void onSuccess(){
    }
    @Override public void onFailure(    VolleyError error){
      if (mSignInDialog != null && mSignInDialog.isShowing()) {
        return;
      }
      if (!isFinishing() && error.networkResponse != null && error.networkResponse.statusCode == 403) {
        AlertDialog.Builder builder=new AlertDialog.Builder(StatsActivity.this);
        builder.setTitle(getString(R.string.jetpack_stats_unauthorized)).setMessage(getString(R.string.jetpack_stats_switch_user));
        builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
            startWPComLoginActivity();
          }
        }
);
        builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        mSignInDialog=builder.create();
        mSignInDialog.show();
        return;
      }
      if (!isFinishing()) {
        ToastUtils.showToast(getBaseContext(),R.string.error_refresh_stats,ToastUtils.Duration.LONG);
      }
    }
  }
);
  StatsRestHelper.getStats(StatsViewType.CLICKS,blogId);
  StatsRestHelper.getStats(StatsViewType.REFERRERS,blogId);
  StatsRestHelper.getStats(StatsViewType.SEARCH_ENGINE_TERMS,blogId);
  StatsRestHelper.getStats(StatsViewType.TOP_POSTS_AND_PAGES,blogId);
  StatsRestHelper.getStats(StatsViewType.VIEWS_BY_COUNTRY,blogId);
  StatsRestHelper.getStats(StatsViewType.VISITORS_AND_VIEWS,blogId);
}","private void refreshStats(){
  if (WordPress.getCurrentBlog() == null)   return;
  if (!NetworkUtils.isNetworkAvailable(this))   return;
  String blogId;
  if (WordPress.getCurrentBlog().isDotcomFlag() && dotComCredentialsMatch())   blogId=String.valueOf(WordPress.getCurrentBlog().getRemoteBlogId());
 else {
    blogId=getBlogId();
    if (blogId == null) {
      new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new VerifyJetpackSettingsCallback(StatsActivity.this)).execute(false);
      return;
    }
  }
  StatsRestHelper.getStatsSummary(blogId,new StatsRestHelper.StatsSummaryInterface(){
    @Override public void onSuccess(){
    }
    @Override public void onFailure(    VolleyError error){
      if (mSignInDialog != null && mSignInDialog.isShowing()) {
        return;
      }
      if (isFinishing())       return;
      if (error.networkResponse != null && error.networkResponse.statusCode == 403) {
        AlertDialog.Builder builder=new AlertDialog.Builder(StatsActivity.this);
        builder.setTitle(getString(R.string.jetpack_stats_unauthorized)).setMessage(getString(R.string.jetpack_stats_switch_user));
        builder.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
            startWPComLoginActivity();
          }
        }
);
        builder.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        mSignInDialog=builder.create();
        mSignInDialog.show();
        return;
      }
      ToastUtils.showToastOrAuthAlert(StatsActivity.this,error,StatsActivity.this.getString(R.string.error_refresh_stats));
    }
  }
);
  StatsRestHelper.getStats(StatsViewType.CLICKS,blogId);
  StatsRestHelper.getStats(StatsViewType.REFERRERS,blogId);
  StatsRestHelper.getStats(StatsViewType.SEARCH_ENGINE_TERMS,blogId);
  StatsRestHelper.getStats(StatsViewType.TOP_POSTS_AND_PAGES,blogId);
  StatsRestHelper.getStats(StatsViewType.VIEWS_BY_COUNTRY,blogId);
  StatsRestHelper.getStats(StatsViewType.VISITORS_AND_VIEWS,blogId);
}",0.9587229190421892
14881,"public static void showToastOrAuthAlert(Context context,String xmlrpcMessage,String friendlyMessage){
  if (context == null)   return;
  if ((context instanceof FragmentActivity) && !TextUtils.isEmpty(xmlrpcMessage) && xmlrpcMessage.contains(""String_Node_Str"") || xmlrpcMessage.contains(""String_Node_Str"")) {
    FragmentActivity activity=(FragmentActivity)context;
    if (activity.isFinishing())     return;
    FragmentTransaction ft=activity.getSupportFragmentManager().beginTransaction();
    AuthErrorDialogFragment authAlert=AuthErrorDialogFragment.newInstance(WordPress.getCurrentBlog().isDotcomFlag());
    ft.add(authAlert,""String_Node_Str"");
    ft.commitAllowingStateLoss();
  }
 else {
    String errorMessage=TextUtils.isEmpty(friendlyMessage) ? context.getString(R.string.error_generic) : friendlyMessage;
    showToast(context,errorMessage);
  }
}","public static void showToastOrAuthAlert(Context context,String xmlrpcMessage,String friendlyMessage){
  if (context == null)   return;
  if ((context instanceof FragmentActivity) && !TextUtils.isEmpty(xmlrpcMessage) && xmlrpcMessage.contains(""String_Node_Str"") || xmlrpcMessage.contains(""String_Node_Str"")) {
    FragmentActivity activity=(FragmentActivity)context;
    if (activity.isFinishing())     return;
    FragmentTransaction ft=activity.getSupportFragmentManager().beginTransaction();
    AuthErrorDialogFragment authAlert=AuthErrorDialogFragment.newInstance(WordPress.getCurrentBlog().isDotcomFlag());
    ft.add(authAlert,""String_Node_Str"");
    ft.commitAllowingStateLoss();
  }
 else {
    String errorMessage=TextUtils.isEmpty(friendlyMessage) ? context.getString(R.string.error_generic) : friendlyMessage;
    showToast(context,errorMessage,Duration.LONG);
  }
}",0.9919540229885058
14882,"private void checkMenuDrawer(){
  if (mMenuDrawer == null) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  mMenuDrawer.setDrawerIndicatorEnabled(!hasDetailFragment());
}","private void checkMenuDrawer(){
  if (mMenuDrawer == null) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  int entryCount=getSupportFragmentManager().getBackStackEntryCount();
  mMenuDrawer.setDrawerIndicatorEnabled(entryCount == 0);
}",0.7546296296296297
14883,"private void showDetailFragment(long blogId,long postId){
  Fragment fragment=ReaderPostDetailFragment.newInstance(blogId,postId);
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  ft.add(R.id.fragment_container,fragment,FRAGMENT_TAG_POST_DETAIL);
  if (hasListFragment()) {
    ft.addToBackStack(FRAGMENT_TAG_POST_DETAIL);
  }
  ft.commit();
}","private void showDetailFragment(long blogId,long postId){
  Fragment fragment=ReaderPostDetailFragment.newInstance(blogId,postId);
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  ft.add(R.id.fragment_container,fragment,FRAGMENT_TAG_POST_DETAIL);
  if (hasListFragment()) {
    ft.addToBackStack(FRAGMENT_TAG_POST_DETAIL);
    ft.hide(getListFragment());
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  }
  ft.commit();
}",0.8838323353293414
14884,"@Override public void onDetach(){
  if (getActivity() != null && mOriginalTitle != null)   getActivity().setTitle(mOriginalTitle);
  super.onDetach();
}","@Override public void onDetach(){
  if (getActivity() != null && mOriginalTitle != null) {
    setTitle(mOriginalTitle);
  }
  super.onDetach();
}",0.9261744966442952
14885,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  mOriginalTitle=activity.getTitle();
  activity.setTitle(null);
  if (activity instanceof ReaderFullScreenUtils.FullScreenListener)   mFullScreenListener=(ReaderFullScreenUtils.FullScreenListener)activity;
  if (activity instanceof PostChangeListener)   mPostChangeListener=(PostChangeListener)activity;
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  mOriginalTitle=getTitle();
  setTitle(null);
  if (activity instanceof ReaderFullScreenUtils.FullScreenListener)   mFullScreenListener=(ReaderFullScreenUtils.FullScreenListener)activity;
  if (activity instanceof PostChangeListener)   mPostChangeListener=(PostChangeListener)activity;
}",0.976063829787234
14886,"private void updatePostsWithTag(final String tagName,final ReaderActions.RequestDataAction updateAction,RefreshType refreshType){
  if (TextUtils.isEmpty(tagName))   return;
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (refreshType == RefreshType.MANUAL && isCurrentTagName(tagName)) {
    if (tagName.equals(ReaderTag.TAG_NAME_LIKED) || tagName.equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts();
  }
  ReaderPostActions.updatePostsWithTag(tagName,updateAction,new ReaderActions.UpdateResultAndCountListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result,    int numNewPosts){
      if (!hasActivity()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0 && isCurrentTagName(tagName)) {
        if (!isPostAdapterEmpty() && updateAction == ReaderActions.RequestDataAction.LOAD_NEWER) {
          showNewPostsBar(numNewPosts);
        }
 else {
          refreshPosts();
        }
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
);
}","private void updatePostsWithTag(final String tagName,final ReaderActions.RequestDataAction updateAction,RefreshType refreshType){
  if (TextUtils.isEmpty(tagName))   return;
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    AppLog.i(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(true,updateAction);
  setEmptyTitleAndDescriptionForCurrentTag();
  if (refreshType == RefreshType.MANUAL && isCurrentTag(tagName)) {
    if (tagName.equals(ReaderTag.TAG_NAME_LIKED) || tagName.equals(ReaderTag.TAG_NAME_FOLLOWING))     refreshPosts();
  }
  ReaderPostActions.updatePostsWithTag(tagName,updateAction,new ReaderActions.UpdateResultAndCountListener(){
    @Override public void onUpdateResult(    ReaderActions.UpdateResult result,    int numNewPosts){
      if (!hasActivity()) {
        AppLog.w(T.READER,""String_Node_Str"");
        return;
      }
      setIsUpdating(false,updateAction);
      if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0 && isCurrentTag(tagName)) {
        if (!isPostAdapterEmpty() && updateAction == ReaderActions.RequestDataAction.LOAD_NEWER) {
          showNewPostsBar(numNewPosts);
        }
 else {
          refreshPosts();
        }
      }
 else {
        setEmptyTitleAndDescriptionForCurrentTag();
      }
    }
  }
);
}",0.9969230769230768
14887,"private void setCurrentTag(final String tagName){
  if (TextUtils.isEmpty(tagName))   return;
  if (isCurrentTagName(tagName) && tagName.equals(getPostAdapter().getCurrentTag()))   return;
  mCurrentTag=tagName;
  UserPrefs.setReaderTag(tagName);
  hideLoadingProgress();
  getPostAdapter().setCurrentTag(tagName);
  hideNewPostsBar();
  if (ReaderTagTable.shouldAutoUpdateTag(tagName))   updatePostsWithTag(tagName,ReaderActions.RequestDataAction.LOAD_NEWER,RefreshType.AUTOMATIC);
}","private void setCurrentTag(final String tagName){
  if (TextUtils.isEmpty(tagName))   return;
  if (isCurrentTag(tagName) && hasPostAdapter() && tagName.equals(getPostAdapter().getCurrentTag()))   return;
  mCurrentTag=tagName;
  UserPrefs.setReaderTag(tagName);
  hideLoadingProgress();
  getPostAdapter().setCurrentTag(tagName);
  hideNewPostsBar();
  if (ReaderTagTable.shouldAutoUpdateTag(tagName))   updatePostsWithTag(tagName,ReaderActions.RequestDataAction.LOAD_NEWER,RefreshType.AUTOMATIC);
}",0.959349593495935
14888,"private ReaderActionBarTagAdapter getActionBarAdapter(){
  if (mActionBarAdapter == null) {
    ReaderActions.DataLoadedListener dataListener=new ReaderActions.DataLoadedListener(){
      @Override public void onDataLoaded(      boolean isEmpty){
        AppLog.d(T.READER,""String_Node_Str"");
        selectTagInActionBar(getCurrentTagName());
      }
    }
;
    boolean isStaticMenuDrawer;
    if (getActivity() instanceof WPActionBarActivity) {
      isStaticMenuDrawer=((WPActionBarActivity)getActivity()).isStaticMenuDrawer();
    }
 else {
      isStaticMenuDrawer=false;
    }
    mActionBarAdapter=new ReaderActionBarTagAdapter(getActivity(),isStaticMenuDrawer,dataListener);
  }
  return mActionBarAdapter;
}","private ReaderActionBarTagAdapter getActionBarAdapter(){
  if (mActionBarAdapter == null) {
    ReaderActions.DataLoadedListener dataListener=new ReaderActions.DataLoadedListener(){
      @Override public void onDataLoaded(      boolean isEmpty){
        AppLog.d(T.READER,""String_Node_Str"");
        selectTagInActionBar(getCurrentTag());
      }
    }
;
    boolean isStaticMenuDrawer;
    if (getActivity() instanceof WPActionBarActivity) {
      isStaticMenuDrawer=((WPActionBarActivity)getActivity()).isStaticMenuDrawer();
    }
 else {
      isStaticMenuDrawer=false;
    }
    mActionBarAdapter=new ReaderActionBarTagAdapter(getActivity(),isStaticMenuDrawer,dataListener);
  }
  return mActionBarAdapter;
}",0.9972027972027973
14889,"private void selectTagInActionBar(final String tagName){
  if (TextUtils.isEmpty(tagName))   return;
  ActionBar actionBar=getActionBar();
  if (actionBar == null)   return;
  int position=getActionBarAdapter().getIndexOfTagName(tagName);
  if (position == -1 || position == actionBar.getSelectedNavigationIndex())   return;
  actionBar.setSelectedNavigationItem(position);
}","private void selectTagInActionBar(final String tagName){
  if (TextUtils.isEmpty(tagName))   return;
  ActionBar actionBar=getActionBar();
  if (actionBar == null)   return;
  int position=getActionBarAdapter().getIndexOfTagName(tagName);
  if (position == -1 || position == actionBar.getSelectedNavigationIndex())   return;
  if (actionBar.getNavigationMode() != ActionBar.NAVIGATION_MODE_LIST) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  actionBar.setSelectedNavigationItem(position);
}",0.8217934165720772
14890,"protected void refreshPosts(){
  getPostAdapter().refresh();
}","private void refreshPosts(){
  getPostAdapter().refresh();
}",0.9344262295081968
14891,"private void checkCurrentTag(){
  if (hasCurrentTag() && !ReaderTagTable.tagExists(getCurrentTagName()))   mCurrentTag=ReaderTag.TAG_NAME_DEFAULT;
}","private void checkCurrentTag(){
  if (hasCurrentTag() && !ReaderTagTable.tagExists(getCurrentTag()))   mCurrentTag=ReaderTag.TAG_NAME_DEFAULT;
}",0.9863013698630136
14892,"@Override public void onUpdateResult(ReaderActions.UpdateResult result,int numNewPosts){
  if (!hasActivity()) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(false,updateAction);
  if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0 && isCurrentTagName(tagName)) {
    if (!isPostAdapterEmpty() && updateAction == ReaderActions.RequestDataAction.LOAD_NEWER) {
      showNewPostsBar(numNewPosts);
    }
 else {
      refreshPosts();
    }
  }
 else {
    setEmptyTitleAndDescriptionForCurrentTag();
  }
}","@Override public void onUpdateResult(ReaderActions.UpdateResult result,int numNewPosts){
  if (!hasActivity()) {
    AppLog.w(T.READER,""String_Node_Str"");
    return;
  }
  setIsUpdating(false,updateAction);
  if (result == ReaderActions.UpdateResult.CHANGED && numNewPosts > 0 && isCurrentTag(tagName)) {
    if (!isPostAdapterEmpty() && updateAction == ReaderActions.RequestDataAction.LOAD_NEWER) {
      showNewPostsBar(numNewPosts);
    }
 else {
      refreshPosts();
    }
  }
 else {
    setEmptyTitleAndDescriptionForCurrentTag();
  }
}",0.9963369963369964
14893,"@Override public void onDataLoaded(boolean isEmpty){
  AppLog.d(T.READER,""String_Node_Str"");
  selectTagInActionBar(getCurrentTagName());
}","@Override public void onDataLoaded(boolean isEmpty){
  AppLog.d(T.READER,""String_Node_Str"");
  selectTagInActionBar(getCurrentTag());
}",0.9854014598540146
14894,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(false);
    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
    actionBar.setListNavigationCallbacks(getActionBarAdapter(),this);
  }
  if (savedInstanceState != null) {
    mCurrentTag=savedInstanceState.getString(KEY_TAG_NAME);
    mListState=savedInstanceState.getParcelable(LIST_STATE);
  }
  selectTagInActionBar(getCurrentTagName());
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (savedInstanceState != null) {
    AppLog.d(T.READER,""String_Node_Str"");
    mCurrentTag=savedInstanceState.getString(KEY_TAG_NAME);
    mListState=savedInstanceState.getParcelable(KEY_LIST_STATE);
  }
  setHasOptionsMenu(true);
  checkActionBar();
}",0.5823045267489712
14895,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  AppLog.d(T.READER,""String_Node_Str"");
  if (hasCurrentTag())   outState.putString(KEY_TAG_NAME,mCurrentTag);
  if (mListView != null && mListView.getFirstVisiblePosition() > 0)   outState.putParcelable(LIST_STATE,mListView.onSaveInstanceState());
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  AppLog.d(T.READER,""String_Node_Str"");
  if (hasCurrentTag())   outState.putString(KEY_TAG_NAME,mCurrentTag);
  if (mListView != null && mListView.getFirstVisiblePosition() > 0)   outState.putParcelable(KEY_LIST_STATE,mListView.onSaveInstanceState());
}",0.9943019943019944
14896,"@Override public void onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu,com.actionbarsherlock.view.MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  menu.clear();
  inflater.inflate(R.menu.reader_native,menu);
  mRefreshMenuItem=menu.findItem(R.id.menu_refresh);
}","@Override public void onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu,com.actionbarsherlock.view.MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  menu.clear();
  inflater.inflate(R.menu.reader_native,menu);
  mRefreshMenuItem=menu.findItem(R.id.menu_refresh);
  checkActionBar();
}",0.9667774086378738
14897,"public void savePostSettings(){
  Post post=mActivity.getPost();
  if (post == null)   return;
  String password=(mPasswordEditText.getText() != null) ? mPasswordEditText.getText().toString() : ""String_Node_Str"";
  String pubDate=(mPubDateText.getText() != null) ? mPubDateText.getText().toString() : ""String_Node_Str"";
  String excerpt=(mExcerptEditText.getText() != null) ? mExcerptEditText.getText().toString() : ""String_Node_Str"";
  long pubDateTimestamp=0;
  if (mIsCustomPubDate && pubDate.equals(getResources().getText(R.string.immediately))) {
    Calendar c=Calendar.getInstance();
    mYear=c.get(Calendar.YEAR);
    mMonth=c.get(Calendar.MONTH);
    mDay=c.get(Calendar.DAY_OF_MONTH);
    mHour=c.get(Calendar.HOUR_OF_DAY);
    mMinute=c.get(Calendar.MINUTE);
    Date d=new Date(mYear - 1900,mMonth,mDay,mHour,mMinute);
    long timestamp=d.getTime();
    pubDateTimestamp=timestamp;
  }
 else   if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (post.getDate_created_gmt() > 0)     pubDateTimestamp=post.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!post.isPage()) {
    tags=(mTagsEditText.getText() != null) ? mTagsEditText.getText().toString() : ""String_Node_Str"";
    Spinner postFormatSpinner=(Spinner)getActivity().findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  int selectedStatus=mStatusSpinner.getSelectedItemPosition();
  String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
    status=""String_Node_Str"";
  break;
case 1:
status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (WordPress.getCurrentBlog().isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mCurrentLocation == null) {
latitude=post.getLatitude();
longitude=post.getLongitude();
}
post.setMt_excerpt(excerpt);
post.setDate_created_gmt(pubDateTimestamp);
post.setJSONCategories(new JSONArray(mCategories));
post.setMt_keywords(tags);
post.setPost_status(status);
post.setWP_password(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setWP_post_form(postFormat);
post.update();
}","public void savePostSettings(){
  Post post=mActivity.getPost();
  if (post == null)   return;
  String password=(mPasswordEditText.getText() != null) ? mPasswordEditText.getText().toString() : ""String_Node_Str"";
  String pubDate=(mPubDateText.getText() != null) ? mPubDateText.getText().toString() : ""String_Node_Str"";
  String excerpt=(mExcerptEditText.getText() != null) ? mExcerptEditText.getText().toString() : ""String_Node_Str"";
  long pubDateTimestamp=0;
  if (mIsCustomPubDate && pubDate.equals(getResources().getText(R.string.immediately)) && !post.isLocalDraft()) {
    Calendar c=Calendar.getInstance();
    mYear=c.get(Calendar.YEAR);
    mMonth=c.get(Calendar.MONTH);
    mDay=c.get(Calendar.DAY_OF_MONTH);
    mHour=c.get(Calendar.HOUR_OF_DAY);
    mMinute=c.get(Calendar.MINUTE);
    Date d=new Date(mYear - 1900,mMonth,mDay,mHour,mMinute);
    long timestamp=d.getTime();
    pubDateTimestamp=timestamp;
  }
 else   if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (post.getDate_created_gmt() > 0)     pubDateTimestamp=post.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!post.isPage()) {
    tags=(mTagsEditText.getText() != null) ? mTagsEditText.getText().toString() : ""String_Node_Str"";
    Spinner postFormatSpinner=(Spinner)getActivity().findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  int selectedStatus=mStatusSpinner.getSelectedItemPosition();
  String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
    status=""String_Node_Str"";
  break;
case 1:
status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (WordPress.getCurrentBlog().isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mCurrentLocation == null) {
latitude=post.getLatitude();
longitude=post.getLongitude();
}
post.setMt_excerpt(excerpt);
post.setDate_created_gmt(pubDateTimestamp);
post.setJSONCategories(new JSONArray(mCategories));
post.setMt_keywords(tags);
post.setPost_status(status);
post.setWP_password(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setWP_post_form(postFormat);
post.update();
}",0.9950839819746006
14898,"@Override public void run(){
  if (getListView().getAdapter() == null)   getListView().setAdapter(getCommentAdapter());
  if (mWebView.getVisibility() != View.VISIBLE) {
    mWebView.setVisibility(View.VISIBLE);
    AppLog.w(T.READER,""String_Node_Str"");
  }
}","@Override public void run(){
  if (hasActivity())   getListView().setVisibility(View.VISIBLE);
}",0.4957746478873239
14899,"private void refreshLikes(final boolean forceReload){
  if (!hasActivity())   return;
  if (!hasPost() || !mPost.isWP())   return;
  new Thread(){
    @Override public void run(){
      final ViewGroup container=getContainerView();
      final ImageView imgBtnLike=(ImageView)container.findViewById(R.id.image_like_btn);
      final ViewGroup layoutLikingAvatars=(ViewGroup)mLayoutLikes.findViewById(R.id.layout_liking_avatars);
      final TextView txtLikeCount=(TextView)mLayoutLikes.findViewById(R.id.text_like_count);
      final int marginExtraSmall=getResources().getDimensionPixelSize(R.dimen.margin_extra_small);
      final int marginLarge=getResources().getDimensionPixelSize(R.dimen.margin_large);
      final int likeAvatarSize=getResources().getDimensionPixelSize(R.dimen.avatar_sz_small);
      final int likeAvatarSizeWithMargin=likeAvatarSize + (marginExtraSmall * 2);
      final int displayWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      final int spaceForAvatars=displayWidth - (marginLarge * 2);
      final int maxAvatars=spaceForAvatars / likeAvatarSizeWithMargin;
      final ArrayList<String> avatars=ReaderUserTable.getAvatarUrls(ReaderLikeTable.getLikesForPost(mPost),maxAvatars);
      mHandler.post(new Runnable(){
        public void run(){
          if (!hasActivity())           return;
          imgBtnLike.setSelected(mPost.isLikedByCurrentUser);
          imgBtnLike.setOnClickListener(new View.OnClickListener(){
            @Override public void onClick(            View view){
              doPostAction(imgBtnLike,ReaderPostActions.PostAction.TOGGLE_LIKE,mPost);
            }
          }
);
          if (avatars.size() == 0 || mPost.numLikes == 0) {
            mLayoutLikes.setVisibility(View.GONE);
            return;
          }
          if (mPost.isLikedByCurrentUser) {
            if (mPost.numLikes == 1) {
              txtLikeCount.setText(R.string.reader_likes_only_you);
            }
 else {
              txtLikeCount.setText(mPost.numLikes == 2 ? getString(R.string.reader_likes_you_and_one) : getString(R.string.reader_likes_you_and_multi,mPost.numLikes - 1));
            }
          }
 else {
            txtLikeCount.setText(mPost.numLikes == 1 ? getString(R.string.reader_likes_one) : getString(R.string.reader_likes_multi,mPost.numLikes));
          }
          View.OnClickListener clickListener=new View.OnClickListener(){
            @Override public void onClick(            View view){
              ReaderActivityLauncher.showReaderLikingUsers(getActivity(),mPost);
            }
          }
;
          mLayoutLikes.setOnClickListener(clickListener);
          if (forceReload || layoutLikingAvatars.getChildCount() < maxAvatars) {
            layoutLikingAvatars.removeAllViews();
            LayoutInflater inflater=getActivity().getLayoutInflater();
            for (            String url : avatars) {
              WPNetworkImageView imgAvatar=(WPNetworkImageView)inflater.inflate(R.layout.reader_like_avatar,layoutLikingAvatars,false);
              layoutLikingAvatars.addView(imgAvatar);
              imgAvatar.setImageUrl(PhotonUtils.fixAvatar(url,likeAvatarSize),WPNetworkImageView.ImageType.AVATAR);
            }
          }
          if (mLayoutLikes.getVisibility() != View.VISIBLE) {
            if (mWebView.getVisibility() == View.VISIBLE) {
              mLayoutLikes.setVisibility(View.VISIBLE);
            }
 else {
              new Handler().postDelayed(new Runnable(){
                @Override public void run(){
                  mLayoutLikes.setVisibility(View.VISIBLE);
                }
              }
,WEBVIEW_DELAY_MS);
            }
          }
        }
      }
);
    }
  }
.start();
}","private void refreshLikes(final boolean forceReload){
  if (!hasActivity())   return;
  if (!hasPost() || !mPost.isWP())   return;
  new Thread(){
    @Override public void run(){
      final ViewGroup container=getContainerView();
      final ImageView imgBtnLike=(ImageView)container.findViewById(R.id.image_like_btn);
      final ViewGroup layoutLikingAvatars=(ViewGroup)mLayoutLikes.findViewById(R.id.layout_liking_avatars);
      final TextView txtLikeCount=(TextView)mLayoutLikes.findViewById(R.id.text_like_count);
      final int marginExtraSmall=getResources().getDimensionPixelSize(R.dimen.margin_extra_small);
      final int marginLarge=getResources().getDimensionPixelSize(R.dimen.margin_large);
      final int likeAvatarSize=getResources().getDimensionPixelSize(R.dimen.avatar_sz_small);
      final int likeAvatarSizeWithMargin=likeAvatarSize + (marginExtraSmall * 2);
      final int displayWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      final int spaceForAvatars=displayWidth - (marginLarge * 2);
      final int maxAvatars=spaceForAvatars / likeAvatarSizeWithMargin;
      final ArrayList<String> avatars=ReaderUserTable.getAvatarUrls(ReaderLikeTable.getLikesForPost(mPost),maxAvatars);
      mHandler.post(new Runnable(){
        public void run(){
          if (!hasActivity())           return;
          imgBtnLike.setSelected(mPost.isLikedByCurrentUser);
          imgBtnLike.setOnClickListener(new View.OnClickListener(){
            @Override public void onClick(            View view){
              doPostAction(imgBtnLike,ReaderPostActions.PostAction.TOGGLE_LIKE,mPost);
            }
          }
);
          if (avatars.size() == 0 || mPost.numLikes == 0) {
            mLayoutLikes.setVisibility(View.GONE);
            return;
          }
          if (mPost.isLikedByCurrentUser) {
            if (mPost.numLikes == 1) {
              txtLikeCount.setText(R.string.reader_likes_only_you);
            }
 else {
              txtLikeCount.setText(mPost.numLikes == 2 ? getString(R.string.reader_likes_you_and_one) : getString(R.string.reader_likes_you_and_multi,mPost.numLikes - 1));
            }
          }
 else {
            txtLikeCount.setText(mPost.numLikes == 1 ? getString(R.string.reader_likes_one) : getString(R.string.reader_likes_multi,mPost.numLikes));
          }
          View.OnClickListener clickListener=new View.OnClickListener(){
            @Override public void onClick(            View view){
              ReaderActivityLauncher.showReaderLikingUsers(getActivity(),mPost);
            }
          }
;
          mLayoutLikes.setOnClickListener(clickListener);
          if (forceReload || layoutLikingAvatars.getChildCount() < maxAvatars) {
            layoutLikingAvatars.removeAllViews();
            LayoutInflater inflater=getActivity().getLayoutInflater();
            for (            String url : avatars) {
              WPNetworkImageView imgAvatar=(WPNetworkImageView)inflater.inflate(R.layout.reader_like_avatar,layoutLikingAvatars,false);
              layoutLikingAvatars.addView(imgAvatar);
              imgAvatar.setImageUrl(PhotonUtils.fixAvatar(url,likeAvatarSize),WPNetworkImageView.ImageType.AVATAR);
            }
          }
          if (mLayoutLikes.getVisibility() != View.VISIBLE)           mLayoutLikes.setVisibility(View.VISIBLE);
        }
      }
);
    }
  }
.start();
}",0.939398220087583
14900,"@Override protected void onPostExecute(Boolean result){
  mIsPostTaskRunning=false;
  if (!hasActivity())   return;
  if (!result) {
    requestPost();
    return;
  }
  getActivity().setTitle(mPost.getTitle());
  showFollowedStatus(txtFollow,mPost.isFollowedByCurrentUser);
  if (mPost.numLikes > 0 && mLayoutLikes.getVisibility() == View.GONE)   mLayoutLikes.setVisibility(View.INVISIBLE);
  if (mPost.hasTitle()) {
    txtTitle.setText(mPost.getTitle());
  }
 else {
    txtTitle.setText(R.string.reader_untitled_post);
  }
  txtBlogName.setText(mPost.getBlogName());
  txtDate.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()));
  if (mPost.hasAuthorName() && !mPost.getAuthorName().equals(mPost.getBlogName())) {
    txtAuthorName.setText(mPost.getAuthorName());
    txtAuthorName.setVisibility(View.VISIBLE);
  }
 else {
    txtAuthorName.setVisibility(View.GONE);
  }
  if (mPost.hasPostAvatar()) {
    int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_medium);
    imgAvatar.setImageUrl(mPost.getPostAvatarForDisplay(avatarSz),WPNetworkImageView.ImageType.AVATAR);
    imgAvatar.setVisibility(View.VISIBLE);
  }
 else {
    imgAvatar.setVisibility(View.GONE);
  }
  if (showFeaturedImage) {
    imgFeatured.setVisibility(View.VISIBLE);
    imgFeatured.setImageUrl(featuredImageUrl,WPNetworkImageView.ImageType.PHOTO);
    imgFeatured.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPhotoViewer(mPost.getFeaturedImage());
      }
    }
);
  }
 else {
    imgFeatured.setVisibility(View.GONE);
  }
  imgBtnReblog.setVisibility(mPost.isWP() ? View.VISIBLE : View.GONE);
  imgBtnReblog.setSelected(mPost.isRebloggedByCurrentUser);
  if (mPost.isWP()) {
    imgBtnReblog.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        doPostReblog(imgBtnReblog,mPost);
      }
    }
);
  }
  if (mPost.isWP() && mPost.isCommentsOpen) {
    imgBtnComment.setVisibility(View.VISIBLE);
    imgBtnComment.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleShowAddCommentBox();
      }
    }
);
  }
 else {
    imgBtnComment.setVisibility(View.GONE);
  }
  txtTitle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ReaderActivityLauncher.openUrl(getActivity(),mPost.getUrl());
    }
  }
);
  if (mPost.hasBlogUrl()) {
    View.OnClickListener clickListener=new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.openUrl(getActivity(),mPost.getBlogUrl());
      }
    }
;
    txtBlogName.setOnClickListener(clickListener);
    txtAuthorName.setOnClickListener(clickListener);
    imgAvatar.setOnClickListener(clickListener);
  }
  mWebView.setWebViewClient(readerWebViewClient);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (getListView().getAdapter() == null)       getListView().setAdapter(getCommentAdapter());
      if (mWebView.getVisibility() != View.VISIBLE) {
        mWebView.setVisibility(View.VISIBLE);
        AppLog.w(T.READER,""String_Node_Str"");
      }
    }
  }
,WEBVIEW_DELAY_MS);
  mWebView.loadDataWithBaseURL(null,postHtml,""String_Node_Str"",""String_Node_Str"",null);
  mLayoutIcons.setVisibility(mPost.isWP() ? View.VISIBLE : View.GONE);
  refreshLikes(false);
  refreshComments();
  if (!mHasAlreadyUpdatedPost) {
    updatePost();
    mHasAlreadyUpdatedPost=true;
  }
  getListView().setVisibility(View.VISIBLE);
}","@Override protected void onPostExecute(Boolean result){
  mIsPostTaskRunning=false;
  if (!hasActivity())   return;
  if (!result) {
    requestPost();
    return;
  }
  getActivity().setTitle(mPost.getTitle());
  showFollowedStatus(txtFollow,mPost.isFollowedByCurrentUser);
  if (mPost.numLikes > 0 && mLayoutLikes.getVisibility() == View.GONE)   mLayoutLikes.setVisibility(View.INVISIBLE);
  if (mPost.hasTitle()) {
    txtTitle.setText(mPost.getTitle());
  }
 else {
    txtTitle.setText(R.string.reader_untitled_post);
  }
  txtBlogName.setText(mPost.getBlogName());
  txtDate.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()));
  if (mPost.hasAuthorName() && !mPost.getAuthorName().equals(mPost.getBlogName())) {
    txtAuthorName.setText(mPost.getAuthorName());
    txtAuthorName.setVisibility(View.VISIBLE);
  }
 else {
    txtAuthorName.setVisibility(View.GONE);
  }
  if (mPost.hasPostAvatar()) {
    int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_medium);
    imgAvatar.setImageUrl(mPost.getPostAvatarForDisplay(avatarSz),WPNetworkImageView.ImageType.AVATAR);
    imgAvatar.setVisibility(View.VISIBLE);
  }
 else {
    imgAvatar.setVisibility(View.GONE);
  }
  if (showFeaturedImage) {
    imgFeatured.setVisibility(View.VISIBLE);
    imgFeatured.setImageUrl(featuredImageUrl,WPNetworkImageView.ImageType.PHOTO);
    imgFeatured.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showPhotoViewer(mPost.getFeaturedImage());
      }
    }
);
  }
 else {
    imgFeatured.setVisibility(View.GONE);
  }
  imgBtnReblog.setVisibility(mPost.isWP() ? View.VISIBLE : View.GONE);
  imgBtnReblog.setSelected(mPost.isRebloggedByCurrentUser);
  if (mPost.isWP()) {
    imgBtnReblog.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        doPostReblog(imgBtnReblog,mPost);
      }
    }
);
  }
  if (mPost.isWP() && mPost.isCommentsOpen) {
    imgBtnComment.setVisibility(View.VISIBLE);
    imgBtnComment.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleShowAddCommentBox();
      }
    }
);
  }
 else {
    imgBtnComment.setVisibility(View.GONE);
  }
  txtTitle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ReaderActivityLauncher.openUrl(getActivity(),mPost.getUrl());
    }
  }
);
  if (mPost.hasBlogUrl()) {
    View.OnClickListener clickListener=new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.openUrl(getActivity(),mPost.getBlogUrl());
      }
    }
;
    txtBlogName.setOnClickListener(clickListener);
    txtAuthorName.setOnClickListener(clickListener);
    imgAvatar.setOnClickListener(clickListener);
  }
  mWebView.setWebViewClient(readerWebViewClient);
  mWebView.loadDataWithBaseURL(null,postHtml,""String_Node_Str"",""String_Node_Str"",null);
  if (getListView().getAdapter() == null)   getListView().setAdapter(getCommentAdapter());
  refreshLikes(false);
  refreshComments();
  if (!mHasAlreadyUpdatedPost) {
    updatePost();
    mHasAlreadyUpdatedPost=true;
  }
  mLayoutIcons.setVisibility(mPost.isWP() ? View.VISIBLE : View.GONE);
  if (getListView().getVisibility() != View.VISIBLE) {
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (hasActivity())         getListView().setVisibility(View.VISIBLE);
      }
    }
,500L);
  }
}",0.8569816643159379
14901,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.reader_fragment_post_detail,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  setupListView(mListView);
  mListView.setVisibility(View.INVISIBLE);
  if (isFullScreenSupported()) {
    ReaderFullScreenUtils.addListViewHeader(container.getContext(),mListView);
  }
  ViewGroup headerDetail=(ViewGroup)inflater.inflate(R.layout.reader_listitem_post_detail,mListView,false);
  mListView.addHeaderView(headerDetail,null,false);
  mCommentFooter=(ViewGroup)inflater.inflate(R.layout.reader_footer_progress,mListView,false);
  mCommentFooter.setVisibility(View.GONE);
  mCommentFooter.setBackgroundColor(getResources().getColor(R.color.grey_extra_light));
  mProgressFooter=(ProgressBar)mCommentFooter.findViewById(R.id.progress_footer);
  mProgressFooter.setVisibility(View.INVISIBLE);
  mListView.addFooterView(mCommentFooter);
  mLayoutIcons=(ViewGroup)view.findViewById(R.id.layout_actions);
  mLayoutLikes=(ViewGroup)view.findViewById(R.id.layout_likes);
  mWebView=(WebView)view.findViewById(R.id.webView);
  mWebView.getSettings().setJavaScriptEnabled(false);
  mWebView.getSettings().setUserAgentString(Constants.USER_AGENT);
  mWebView.setVisibility(View.INVISIBLE);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        HitTestResult hr=((WebView)v).getHitTestResult();
        if (hr != null && (hr.getType() == HitTestResult.IMAGE_TYPE || hr.getType() == HitTestResult.SRC_IMAGE_ANCHOR_TYPE)) {
          String imageUrl=hr.getExtra();
          if (imageUrl == null)           return false;
          if (imageUrl.startsWith(""String_Node_Str""))           return false;
          if (mVideoThumbnailUrls.contains(imageUrl))           return false;
          if (imageUrl.contains(""String_Node_Str""))           return false;
          showPhotoViewer(imageUrl);
          return true;
        }
      }
      return false;
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.reader_fragment_post_detail,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  setupListView(mListView);
  mListView.setVisibility(View.INVISIBLE);
  if (isFullScreenSupported()) {
    ReaderFullScreenUtils.addListViewHeader(container.getContext(),mListView);
  }
  ViewGroup headerDetail=(ViewGroup)inflater.inflate(R.layout.reader_listitem_post_detail,mListView,false);
  mListView.addHeaderView(headerDetail,null,false);
  mCommentFooter=(ViewGroup)inflater.inflate(R.layout.reader_footer_progress,mListView,false);
  mCommentFooter.setVisibility(View.GONE);
  mCommentFooter.setBackgroundColor(getResources().getColor(R.color.grey_extra_light));
  mProgressFooter=(ProgressBar)mCommentFooter.findViewById(R.id.progress_footer);
  mProgressFooter.setVisibility(View.INVISIBLE);
  mListView.addFooterView(mCommentFooter);
  mLayoutIcons=(ViewGroup)view.findViewById(R.id.layout_actions);
  mLayoutLikes=(ViewGroup)view.findViewById(R.id.layout_likes);
  mWebView=(WebView)view.findViewById(R.id.webView);
  mWebView.getSettings().setJavaScriptEnabled(false);
  mWebView.getSettings().setUserAgentString(Constants.USER_AGENT);
  mWebView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        HitTestResult hr=((WebView)v).getHitTestResult();
        if (hr != null && (hr.getType() == HitTestResult.IMAGE_TYPE || hr.getType() == HitTestResult.SRC_IMAGE_ANCHOR_TYPE)) {
          String imageUrl=hr.getExtra();
          if (imageUrl == null)           return false;
          if (imageUrl.startsWith(""String_Node_Str""))           return false;
          if (mVideoThumbnailUrls.contains(imageUrl))           return false;
          if (imageUrl.contains(""String_Node_Str""))           return false;
          showPhotoViewer(imageUrl);
          return true;
        }
      }
      return false;
    }
  }
);
  return view;
}",0.9902143522833178
14902,"@Override public void onPageFinished(WebView view,String url){
  if (view.getVisibility() != View.VISIBLE)   view.setVisibility(View.VISIBLE);
}","@Override public void onPageFinished(WebView view,String url){
}",0.6153846153846154
14903,"private void submitReply(){
  if (!hasActivity() || mIsSubmittingReply)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  final String replyText=EditTextUtils.getText(mEditReply);
  if (TextUtils.isEmpty(replyText))   return;
  mEditReply.setEnabled(false);
  EditTextUtils.hideSoftInput(mEditReply);
  mImgSubmitReply.setVisibility(View.GONE);
  final ProgressBar progress=(ProgressBar)getActivity().findViewById(R.id.progress_submit_comment);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsSubmittingReply=false;
      if (!hasActivity())       return;
      mEditReply.setEnabled(true);
      mImgSubmitReply.setVisibility(View.VISIBLE);
      progress.setVisibility(View.GONE);
      if (succeeded) {
        if (mOnCommentChangeListener != null)         mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL);
        MessageBarUtils.showMessageBar(getActivity(),getString(R.string.note_reply_successful));
        mEditReply.setText(null);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
        mEditReply.requestFocus();
        InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.showSoftInput(mEditReply,InputMethodManager.SHOW_IMPLICIT);
      }
    }
  }
;
  mIsSubmittingReply=true;
  if (mNote != null) {
    CommentActions.submitReplyToCommentNote(mNote,replyText,actionListener);
  }
 else {
    CommentActions.submitReplyToComment(mLocalBlogId,mComment,replyText,actionListener);
  }
}","private void submitReply(){
  if (!hasActivity() || mIsSubmittingReply)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  final String replyText=EditTextUtils.getText(mEditReply);
  if (TextUtils.isEmpty(replyText))   return;
  mEditReply.setEnabled(false);
  EditTextUtils.hideSoftInput(mEditReply);
  mImgSubmitReply.setVisibility(View.GONE);
  final ProgressBar progress=(ProgressBar)getActivity().findViewById(R.id.progress_submit_comment);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsSubmittingReply=false;
      if (succeeded && mOnCommentChangeListener != null)       mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL);
      if (hasActivity()) {
        mEditReply.setEnabled(true);
        mImgSubmitReply.setVisibility(View.VISIBLE);
        progress.setVisibility(View.GONE);
        if (succeeded) {
          MessageBarUtils.showMessageBar(getActivity(),getString(R.string.note_reply_successful));
          mEditReply.setText(null);
        }
 else {
          ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
          mEditReply.requestFocus();
          InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
          imm.showSoftInput(mEditReply,InputMethodManager.SHOW_IMPLICIT);
        }
      }
    }
  }
;
  mIsSubmittingReply=true;
  if (mNote != null) {
    CommentActions.submitReplyToCommentNote(mNote,replyText,actionListener);
  }
 else {
    CommentActions.submitReplyToComment(mLocalBlogId,mComment,replyText,actionListener);
  }
}",0.9128939828080228
14904,"private void moderateComment(final CommentStatus newStatus){
  if (!hasActivity() || !hasComment() || mIsModeratingComment)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  mLayoutButtons.setEnabled(false);
  mLayoutButtons.clearAnimation();
  AniUtils.flyOut(mLayoutButtons);
  if (mTxtStatus.getVisibility() == View.VISIBLE) {
    mTxtStatus.clearAnimation();
    AniUtils.startAnimation(mTxtStatus,R.anim.fade_out);
    mTxtStatus.setVisibility(View.INVISIBLE);
  }
  final int msgResId;
  final MessageBarType msgType;
switch (newStatus) {
case APPROVED:
    msgResId=R.string.comment_approved;
  msgType=MessageBarType.INFO;
break;
case UNAPPROVED:
msgResId=R.string.comment_unapproved;
msgType=MessageBarType.ALERT;
break;
case SPAM:
msgResId=R.string.comment_spammed;
msgType=MessageBarType.ALERT;
break;
case TRASH:
msgResId=R.string.comment_trashed;
msgType=MessageBarType.ALERT;
break;
default :
msgResId=R.string.comment_moderated;
msgType=MessageBarType.INFO;
break;
}
MessageBarUtils.showMessageBar(getActivity(),getString(msgResId),msgType,null);
CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
@Override public void onActionResult(boolean succeeded){
mIsModeratingComment=false;
if (!hasActivity()) return;
mLayoutButtons.setEnabled(true);
if (succeeded) {
mComment.setStatus(CommentStatus.toString(newStatus));
if (mOnCommentChangeListener != null) mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL);
}
 else {
ToastUtils.showToast(getActivity(),R.string.error_moderate_comment,ToastUtils.Duration.LONG);
}
updateStatusViews();
}
}
;
mIsModeratingComment=true;
CommentActions.moderateComment(mLocalBlogId,mComment,newStatus,actionListener);
}","private void moderateComment(final CommentStatus newStatus){
  if (!hasActivity() || !hasComment() || mIsModeratingComment)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  mLayoutButtons.setEnabled(false);
  mLayoutButtons.clearAnimation();
  AniUtils.flyOut(mLayoutButtons);
  if (mTxtStatus.getVisibility() == View.VISIBLE) {
    mTxtStatus.clearAnimation();
    AniUtils.startAnimation(mTxtStatus,R.anim.fade_out);
    mTxtStatus.setVisibility(View.INVISIBLE);
  }
  final int msgResId;
  final MessageBarType msgType;
switch (newStatus) {
case APPROVED:
    msgResId=R.string.comment_approved;
  msgType=MessageBarType.INFO;
break;
case UNAPPROVED:
msgResId=R.string.comment_unapproved;
msgType=MessageBarType.ALERT;
break;
case SPAM:
msgResId=R.string.comment_spammed;
msgType=MessageBarType.ALERT;
break;
case TRASH:
msgResId=R.string.comment_trashed;
msgType=MessageBarType.ALERT;
break;
default :
msgResId=R.string.comment_moderated;
msgType=MessageBarType.INFO;
break;
}
MessageBarUtils.showMessageBar(getActivity(),getString(msgResId),msgType,null);
CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
@Override public void onActionResult(boolean succeeded){
mIsModeratingComment=false;
if (succeeded && mOnCommentChangeListener != null) mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL);
if (hasActivity()) {
mLayoutButtons.setEnabled(true);
if (succeeded) {
mComment.setStatus(CommentStatus.toString(newStatus));
}
 else {
ToastUtils.showToast(getActivity(),R.string.error_moderate_comment,ToastUtils.Duration.LONG);
}
updateStatusViews();
}
}
}
;
mIsModeratingComment=true;
CommentActions.moderateComment(mLocalBlogId,mComment,newStatus,actionListener);
}",0.9218928164196124
14905,"@Override public void onActionResult(boolean succeeded){
  mIsSubmittingReply=false;
  if (!hasActivity())   return;
  mEditReply.setEnabled(true);
  mImgSubmitReply.setVisibility(View.VISIBLE);
  progress.setVisibility(View.GONE);
  if (succeeded) {
    if (mOnCommentChangeListener != null)     mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL);
    MessageBarUtils.showMessageBar(getActivity(),getString(R.string.note_reply_successful));
    mEditReply.setText(null);
  }
 else {
    ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
    mEditReply.requestFocus();
    InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.showSoftInput(mEditReply,InputMethodManager.SHOW_IMPLICIT);
  }
}","@Override public void onActionResult(boolean succeeded){
  mIsSubmittingReply=false;
  if (succeeded && mOnCommentChangeListener != null)   mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL);
  if (hasActivity()) {
    mEditReply.setEnabled(true);
    mImgSubmitReply.setVisibility(View.VISIBLE);
    progress.setVisibility(View.GONE);
    if (succeeded) {
      MessageBarUtils.showMessageBar(getActivity(),getString(R.string.note_reply_successful));
      mEditReply.setText(null);
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
      mEditReply.requestFocus();
      InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.showSoftInput(mEditReply,InputMethodManager.SHOW_IMPLICIT);
    }
  }
}",0.7640586797066015
14906,"public View getView(final int position,View convertView,ViewGroup parent){
  final Comment comment=mComments.get(position);
  final CommentHolder holder;
  if (convertView == null || convertView.getTag() == null) {
    convertView=mInflater.inflate(R.layout.comment_row,null);
    holder=new CommentHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(CommentHolder)convertView.getTag();
  }
  holder.txtName.setText(comment.hasAuthorName() ? comment.getAuthorName() : mAnonymous);
  holder.txtPostTitle.setText(comment.getUnescapedPostTitle());
  holder.txtComment.setText(comment.getUnescapedCommentText());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(comment.getDatePublished()));
switch (comment.getStatusEnum()) {
case SPAM:
    holder.txtStatus.setText(mStatusTextSpam);
  holder.txtStatus.setTextColor(mStatusColorSpam);
holder.txtStatus.setVisibility(View.VISIBLE);
break;
case UNAPPROVED:
holder.txtStatus.setText(mStatusTextUnapproved);
holder.txtStatus.setTextColor(mStatusColorUnapproved);
holder.txtStatus.setVisibility(View.VISIBLE);
break;
default :
holder.txtStatus.setVisibility(View.GONE);
break;
}
if (mEnableSelection && isItemSelected(position)) {
convertView.setBackgroundDrawable(mSelectedBackground);
if (holder.imgCheckmark.getVisibility() != View.VISIBLE) holder.imgCheckmark.setVisibility(View.VISIBLE);
}
 else {
if (mHighlightedCommentId == comment.commentID) {
convertView.setBackgroundDrawable(mSelectedBackground);
}
 else {
convertView.setBackgroundDrawable(null);
}
if (holder.imgCheckmark.getVisibility() == View.VISIBLE) holder.imgCheckmark.setVisibility(View.GONE);
String avatarUrl=comment.getAvatarForDisplay(mAvatarSz);
if (!TextUtils.isEmpty(avatarUrl)) {
holder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
}
 else {
holder.imgAvatar.setImageDrawable(mDefaultAvatar);
}
}
if (mOnLoadMoreListener != null && position >= getCount() - 1) mOnLoadMoreListener.onLoadMore();
return convertView;
}","public View getView(final int position,View convertView,ViewGroup parent){
  final Comment comment=mComments.get(position);
  final CommentHolder holder;
  if (convertView == null || convertView.getTag() == null) {
    convertView=mInflater.inflate(R.layout.comment_row,null);
    holder=new CommentHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(CommentHolder)convertView.getTag();
  }
  holder.txtName.setText(comment.hasAuthorName() ? comment.getAuthorName() : mAnonymous);
  holder.txtPostTitle.setText(comment.getUnescapedPostTitle());
  holder.txtComment.setText(comment.getUnescapedCommentText());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(comment.getDatePublished()));
switch (comment.getStatusEnum()) {
case SPAM:
    holder.txtStatus.setText(mStatusTextSpam);
  holder.txtStatus.setTextColor(mStatusColorSpam);
holder.txtStatus.setVisibility(View.VISIBLE);
break;
case UNAPPROVED:
holder.txtStatus.setText(mStatusTextUnapproved);
holder.txtStatus.setTextColor(mStatusColorUnapproved);
holder.txtStatus.setVisibility(View.VISIBLE);
break;
default :
holder.txtStatus.setVisibility(View.GONE);
break;
}
final boolean useSelectionBackground;
if (mEnableSelection && isItemSelected(position)) {
useSelectionBackground=true;
if (holder.imgCheckmark.getVisibility() != View.VISIBLE) holder.imgCheckmark.setVisibility(View.VISIBLE);
}
 else {
useSelectionBackground=(mHighlightedCommentId == comment.commentID);
if (holder.imgCheckmark.getVisibility() == View.VISIBLE) holder.imgCheckmark.setVisibility(View.GONE);
String avatarUrl=comment.getAvatarForDisplay(mAvatarSz);
if (!TextUtils.isEmpty(avatarUrl)) {
holder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
}
 else {
holder.imgAvatar.setImageDrawable(mDefaultAvatar);
}
}
if (useSelectionBackground) {
convertView.setBackgroundColor(mSelectionColor);
}
 else {
convertView.setBackgroundDrawable(null);
}
if (mOnLoadMoreListener != null && position >= getCount() - 1) mOnLoadMoreListener.onLoadMore();
return convertView;
}",0.9087311402423942
14907,"protected CommentAdapter(Context context,OnLoadMoreListener onLoadMoreListener,OnSelectedItemsChangeListener onChangeListener){
  mInflater=LayoutInflater.from(context);
  mOnLoadMoreListener=onLoadMoreListener;
  mOnSelectedChangeListener=onChangeListener;
  final Resources resources=context.getResources();
  mStatusColorSpam=Color.RED;
  mStatusColorUnapproved=resources.getColor(R.color.orange_medium);
  mStatusTextSpam=resources.getString(R.string.spam);
  mStatusTextUnapproved=resources.getString(R.string.unapproved);
  mAnonymous=resources.getString(R.string.anonymous);
  mAvatarSz=resources.getDimensionPixelSize(R.dimen.avatar_sz_medium);
  mDefaultAvatar=resources.getDrawable(R.drawable.placeholder);
  mSelectedBackground=new ColorDrawable(resources.getColor(R.color.blue_extra_light));
}","protected CommentAdapter(Context context,OnLoadMoreListener onLoadMoreListener,OnSelectedItemsChangeListener onChangeListener){
  mInflater=LayoutInflater.from(context);
  mOnLoadMoreListener=onLoadMoreListener;
  mOnSelectedChangeListener=onChangeListener;
  final Resources resources=context.getResources();
  mStatusColorSpam=Color.RED;
  mStatusColorUnapproved=resources.getColor(R.color.orange_medium);
  mSelectionColor=resources.getColor(R.color.blue_extra_light);
  mStatusTextSpam=resources.getString(R.string.spam);
  mStatusTextUnapproved=resources.getString(R.string.unapproved);
  mAnonymous=resources.getString(R.string.anonymous);
  mAvatarSz=resources.getDimensionPixelSize(R.dimen.avatar_sz_medium);
  mDefaultAvatar=resources.getDrawable(R.drawable.placeholder);
}",0.9048519218651544
14908,"private void updateBlogOptions(Map<?,?> blogOptions){
  boolean isModified=false;
  Gson gson=new Gson();
  String blogOptionsJson=gson.toJson(blogOptions);
  if (blogOptionsJson != null) {
    isModified|=mBlog.bsetBlogOptions(blogOptionsJson);
  }
  if (!mBlog.isDotcomFlag()) {
    Map<?,?> sv=(HashMap<?,?>)blogOptions.get(""String_Node_Str"");
    String wpVersion=sv.get(""String_Node_Str"").toString();
    if (wpVersion.length() > 0) {
      isModified|=mBlog.bsetWpVersion(wpVersion);
    }
  }
  Map<?,?> featuredImageHash=(HashMap<?,?>)blogOptions.get(""String_Node_Str"");
  if (featuredImageHash != null) {
    boolean featuredImageCapable=Boolean.parseBoolean(featuredImageHash.get(""String_Node_Str"").toString());
    isModified|=mBlog.bsetFeaturedImageCapable(featuredImageCapable);
  }
 else {
    isModified|=mBlog.bsetFeaturedImageCapable(false);
  }
  if (isModified && WordPress.getCurrentBlog() != null && WordPress.getCurrentBlog().isActive()) {
    mBlog.save();
  }
}","private void updateBlogOptions(Map<?,?> blogOptions){
  boolean isModified=false;
  Gson gson=new Gson();
  String blogOptionsJson=gson.toJson(blogOptions);
  if (blogOptionsJson != null) {
    isModified|=mBlog.bsetBlogOptions(blogOptionsJson);
  }
  if (!mBlog.isDotcomFlag()) {
    Map<?,?> sv=(HashMap<?,?>)blogOptions.get(""String_Node_Str"");
    String wpVersion=MapUtils.getMapStr(sv,""String_Node_Str"");
    if (wpVersion.length() > 0) {
      isModified|=mBlog.bsetWpVersion(wpVersion);
    }
  }
  Map<?,?> featuredImageHash=(HashMap<?,?>)blogOptions.get(""String_Node_Str"");
  if (featuredImageHash != null) {
    boolean featuredImageCapable=MapUtils.getMapBool(featuredImageHash,""String_Node_Str"");
    isModified|=mBlog.bsetFeaturedImageCapable(featuredImageCapable);
  }
 else {
    isModified|=mBlog.bsetFeaturedImageCapable(false);
  }
  if (isModified && WordPress.getCurrentBlog() != null && WordPress.getCurrentBlog().isActive()) {
    WordPress.wpDB.saveBlog(mBlog);
  }
}",0.9377215189873418
14909,"@Override public void onAnimateRefreshButton(boolean start){
  if (start) {
    shouldAnimateRefreshButton=true;
    this.startAnimatingRefreshButton(refreshMenuItem);
  }
 else {
    shouldAnimateRefreshButton=false;
    this.stopAnimatingRefreshButton(refreshMenuItem);
  }
}","@Override public void onAnimateRefreshButton(boolean start){
  if (start) {
    mShouldAnimateRefreshButton=true;
    this.startAnimatingRefreshButton(refreshMenuItem);
  }
 else {
    mShouldAnimateRefreshButton=false;
    this.stopAnimatingRefreshButton(refreshMenuItem);
  }
}",0.9892086330935252
14910,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  MenuInflater inflater=getSupportMenuInflater();
  inflater.inflate(R.menu.basic_menu,menu);
  refreshMenuItem=menu.findItem(R.id.menu_refresh);
  if (shouldAnimateRefreshButton) {
    shouldAnimateRefreshButton=false;
    startAnimatingRefreshButton(refreshMenuItem);
  }
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  MenuInflater inflater=getSupportMenuInflater();
  inflater.inflate(R.menu.basic_menu,menu);
  refreshMenuItem=menu.findItem(R.id.menu_refresh);
  if (mShouldAnimateRefreshButton) {
    mShouldAnimateRefreshButton=false;
    startAnimatingRefreshButton(refreshMenuItem);
  }
  return true;
}",0.9921671018276762
14911,"public void refreshNotes(){
  mFirstLoadComplete=false;
  shouldAnimateRefreshButton=true;
  startAnimatingRefreshButton(mRefreshMenuItem);
  NotesResponseHandler notesHandler=new NotesResponseHandler(){
    @Override public void onNotes(    final List<Note> notes){
      mFirstLoadComplete=true;
      new Thread(){
        @Override public void run(){
          WordPress.wpDB.clearNotes();
          WordPress.wpDB.saveNotes(notes);
          NotificationsActivity.this.runOnUiThread(new Runnable(){
            @Override public void run(){
              refreshNotificationsListFragment(notes);
              stopAnimatingRefreshButton(mRefreshMenuItem);
            }
          }
);
        }
      }
.start();
    }
    @Override public void onErrorResponse(    VolleyError error){
      mFirstLoadComplete=true;
      final NotificationsListFragment.NotesAdapter adapter=mNotesList.getNotesAdapter();
      adapter.clear();
      adapter.addAll(new ArrayList<Note>());
      adapter.notifyDataSetChanged();
      ToastUtils.showToast(getContext(),R.string.error_refresh_notifications,ToastUtils.Duration.LONG);
      stopAnimatingRefreshButton(mRefreshMenuItem);
      shouldAnimateRefreshButton=false;
    }
  }
;
  NotificationUtils.refreshNotifications(notesHandler,notesHandler);
}","public void refreshNotes(){
  mFirstLoadComplete=false;
  mShouldAnimateRefreshButton=true;
  startAnimatingRefreshButton(mRefreshMenuItem);
  NotesResponseHandler notesHandler=new NotesResponseHandler(){
    @Override public void onNotes(    final List<Note> notes){
      mFirstLoadComplete=true;
      new Thread(){
        @Override public void run(){
          WordPress.wpDB.clearNotes();
          WordPress.wpDB.saveNotes(notes);
          NotificationsActivity.this.runOnUiThread(new Runnable(){
            @Override public void run(){
              refreshNotificationsListFragment(notes);
              stopAnimatingRefreshButton(mRefreshMenuItem);
            }
          }
);
        }
      }
.start();
    }
    @Override public void onErrorResponse(    VolleyError error){
      mFirstLoadComplete=true;
      final NotificationsListFragment.NotesAdapter adapter=mNotesList.getNotesAdapter();
      adapter.clear();
      adapter.addAll(new ArrayList<Note>());
      adapter.notifyDataSetChanged();
      ToastUtils.showToast(getContext(),R.string.error_refresh_notifications,ToastUtils.Duration.LONG);
      stopAnimatingRefreshButton(mRefreshMenuItem);
      mShouldAnimateRefreshButton=false;
    }
  }
;
  NotificationUtils.refreshNotifications(notesHandler,notesHandler);
}",0.9976816074188564
14912,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  MenuInflater inflater=getSupportMenuInflater();
  inflater.inflate(R.menu.notifications,menu);
  mRefreshMenuItem=menu.findItem(R.id.menu_refresh);
  if (shouldAnimateRefreshButton) {
    shouldAnimateRefreshButton=false;
    startAnimatingRefreshButton(mRefreshMenuItem);
  }
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  MenuInflater inflater=getSupportMenuInflater();
  inflater.inflate(R.menu.notifications,menu);
  mRefreshMenuItem=menu.findItem(R.id.menu_refresh);
  if (mShouldAnimateRefreshButton) {
    mShouldAnimateRefreshButton=false;
    startAnimatingRefreshButton(mRefreshMenuItem);
  }
  return true;
}",0.9922680412371134
14913,"private void signin(){
  if (!wpcomFieldsFilled()) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.required_fields));
    alert.show(ft,""String_Node_Str"");
    return;
  }
  new SetupBlogTask().execute();
}","private void signin(){
  if (!wpcomFieldsFilled()) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.required_fields));
    ft.add(alert,""String_Node_Str"");
    ft.commitAllowingStateLoss();
    return;
  }
  new SetupBlogTask().execute();
}",0.91350531107739
14914,"@Override protected void onPostExecute(final List<Object> userBlogList){
  if (mSetupBlog.isHttpAuthRequired()) {
    if (getActivity() == null) {
      return;
    }
    mSetupBlog.setHttpAuthRequired(false);
    AlertDialog.Builder alert=new AlertDialog.Builder(getActivity());
    alert.setTitle(R.string.http_authorization_required);
    View httpAuth=getActivity().getLayoutInflater().inflate(R.layout.alert_http_auth,null);
    final EditText usernameEditText=(EditText)httpAuth.findViewById(R.id.http_username);
    final EditText passwordEditText=(EditText)httpAuth.findViewById(R.id.http_password);
    alert.setView(httpAuth);
    final SetupBlogTask self=this;
    alert.setPositiveButton(R.string.sign_in,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        SetupBlogTask setupBlogTask=new SetupBlogTask();
        setupBlogTask.setHttpCredentials(usernameEditText.getText().toString(),passwordEditText.getText().toString());
        setupBlogTask.execute();
      }
    }
);
    alert.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    alert.show();
    endProgress();
    return;
  }
  if (userBlogList == null && mErrorMsgId != 0) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    NUXDialogFragment nuxAlert;
    if (mErrorMsgId == R.string.account_two_step_auth_enabled) {
      nuxAlert=NUXDialogFragment.newInstance(getString(R.string.nux_cannot_log_in),getString(mErrorMsgId),getString(R.string.nux_tap_continue),R.drawable.nux_icon_alert,true,getString(R.string.visit_security_settings),NUXDialogFragment.ACTION_OPEN_URL,""String_Node_Str"");
    }
 else {
      if (mErrorMsgId == R.string.username_or_password_incorrect) {
        showUsernameError(mErrorMsgId);
        showPasswordError(mErrorMsgId);
        mErrorMsgId=0;
        endProgress();
        return;
      }
 else {
        nuxAlert=NUXDialogFragment.newInstance(getString(R.string.nux_cannot_log_in),getString(mErrorMsgId),getString(R.string.nux_tap_continue),R.drawable.nux_icon_alert);
      }
    }
    nuxAlert.show(ft,""String_Node_Str"");
    mErrorMsgId=0;
    endProgress();
    return;
  }
  if (mSetupBlog.getXmlrpcUrl().contains(""String_Node_Str"")) {
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
    SharedPreferences.Editor editor=settings.edit();
    editor.putString(WordPress.WPCOM_USERNAME_PREFERENCE,mSetupBlog.getUsername());
    editor.putString(WordPress.WPCOM_PASSWORD_PREFERENCE,WordPressDB.encryptPassword(mSetupBlog.getPassword()));
    editor.commit();
    WordPress.restClient.get(""String_Node_Str"",new RestRequest.Listener(){
      @Override public void onResponse(      JSONObject jsonObject){
        ReaderUserActions.setCurrentUser(jsonObject);
      }
    }
,null);
  }
  if (userBlogList != null) {
    if (getActivity() != null) {
      getActivity().setResult(Activity.RESULT_OK);
      getActivity().finish();
    }
  }
 else {
    endProgress();
  }
}","@Override protected void onPostExecute(final List<Object> userBlogList){
  if (mSetupBlog.isHttpAuthRequired()) {
    if (getActivity() == null) {
      return;
    }
    mSetupBlog.setHttpAuthRequired(false);
    AlertDialog.Builder alert=new AlertDialog.Builder(getActivity());
    alert.setTitle(R.string.http_authorization_required);
    View httpAuth=getActivity().getLayoutInflater().inflate(R.layout.alert_http_auth,null);
    final EditText usernameEditText=(EditText)httpAuth.findViewById(R.id.http_username);
    final EditText passwordEditText=(EditText)httpAuth.findViewById(R.id.http_password);
    alert.setView(httpAuth);
    final SetupBlogTask self=this;
    alert.setPositiveButton(R.string.sign_in,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        SetupBlogTask setupBlogTask=new SetupBlogTask();
        setupBlogTask.setHttpCredentials(usernameEditText.getText().toString(),passwordEditText.getText().toString());
        setupBlogTask.execute();
      }
    }
);
    alert.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    alert.show();
    endProgress();
    return;
  }
  if (userBlogList == null && mErrorMsgId != 0) {
    FragmentTransaction ft=getFragmentManager().beginTransaction();
    NUXDialogFragment nuxAlert;
    if (mErrorMsgId == R.string.account_two_step_auth_enabled) {
      nuxAlert=NUXDialogFragment.newInstance(getString(R.string.nux_cannot_log_in),getString(mErrorMsgId),getString(R.string.nux_tap_continue),R.drawable.nux_icon_alert,true,getString(R.string.visit_security_settings),NUXDialogFragment.ACTION_OPEN_URL,""String_Node_Str"");
    }
 else {
      if (mErrorMsgId == R.string.username_or_password_incorrect) {
        showUsernameError(mErrorMsgId);
        showPasswordError(mErrorMsgId);
        mErrorMsgId=0;
        endProgress();
        return;
      }
 else {
        nuxAlert=NUXDialogFragment.newInstance(getString(R.string.nux_cannot_log_in),getString(mErrorMsgId),getString(R.string.nux_tap_continue),R.drawable.nux_icon_alert);
      }
    }
    ft.add(nuxAlert,""String_Node_Str"");
    ft.commitAllowingStateLoss();
    mErrorMsgId=0;
    endProgress();
    return;
  }
  if (mSetupBlog.getXmlrpcUrl().contains(""String_Node_Str"")) {
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
    SharedPreferences.Editor editor=settings.edit();
    editor.putString(WordPress.WPCOM_USERNAME_PREFERENCE,mSetupBlog.getUsername());
    editor.putString(WordPress.WPCOM_PASSWORD_PREFERENCE,WordPressDB.encryptPassword(mSetupBlog.getPassword()));
    editor.commit();
    WordPress.restClient.get(""String_Node_Str"",new RestRequest.Listener(){
      @Override public void onResponse(      JSONObject jsonObject){
        ReaderUserActions.setCurrentUser(jsonObject);
      }
    }
,null);
  }
  if (userBlogList != null) {
    if (getActivity() != null) {
      getActivity().setResult(Activity.RESULT_OK);
      getActivity().finish();
    }
  }
 else {
    endProgress();
  }
}",0.9922357787989226
14915,"protected void deleteComments(){
  for (  int i : selectedCommentPositions) {
    client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
    Comment listRow=(Comment)getListView().getItemAtPosition(i);
    int curCommentID=listRow.commentID;
    Object[] params={WordPress.currentBlog.getRemoteBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID};
    try {
      client.call(""String_Node_Str"",params);
    }
 catch (    final XMLRPCException e) {
      moderateErrorMsg=getResources().getText(R.string.error_moderate_comment).toString();
    }
  }
  dismissDialog(ID_DIALOG_DELETING);
  Thread action=new Thread(){
    public void run(){
      if (TextUtils.isEmpty(moderateErrorMsg)) {
        final String msg;
        if (checkedCommentTotal > 1) {
          msg=getResources().getText(R.string.comments_moderated).toString();
        }
 else {
          msg=getResources().getText(R.string.comment_moderated).toString();
        }
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        selectedCommentPositions.clear();
        mOnCommentChangeListener.onCommentDeleted();
      }
 else {
        if (!getActivity().isFinishing()) {
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
          try {
            alert.show(ft,""String_Node_Str"");
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  progressDialog=new ProgressDialog(getActivity().getApplicationContext());
}","protected void deleteComments(){
  for (  int i : selectedCommentPositions) {
    client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
    Comment listRow=(Comment)getListView().getItemAtPosition(i);
    int curCommentID=listRow.commentID;
    Object[] params={WordPress.currentBlog.getRemoteBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID};
    try {
      client.call(""String_Node_Str"",params);
    }
 catch (    final XMLRPCException e) {
      moderateErrorMsg=getResources().getText(R.string.error_moderate_comment).toString();
    }
  }
  dismissDialog(ID_DIALOG_DELETING);
  Thread action=new Thread(){
    public void run(){
      if (TextUtils.isEmpty(moderateErrorMsg)) {
        final String msg;
        if (checkedCommentTotal > 1) {
          msg=getResources().getText(R.string.comments_moderated).toString();
        }
 else {
          msg=getResources().getText(R.string.comment_moderated).toString();
        }
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        selectedCommentPositions.clear();
        mOnCommentChangeListener.onCommentDeleted();
      }
 else {
        if (!getActivity().isFinishing()) {
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
          ft.add(alert,""String_Node_Str"");
          ft.commitAllowingStateLoss();
        }
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  progressDialog=new ProgressDialog(getActivity().getApplicationContext());
}",0.9606694560669456
14916,"public void run(){
  if (TextUtils.isEmpty(moderateErrorMsg)) {
    final String msg;
    if (checkedCommentTotal > 1) {
      msg=getResources().getText(R.string.comments_moderated).toString();
    }
 else {
      msg=getResources().getText(R.string.comment_moderated).toString();
    }
    Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
    checkedCommentTotal=0;
    hideModerationBar();
    selectedCommentPositions.clear();
    mOnCommentChangeListener.onCommentDeleted();
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
      try {
        alert.show(ft,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}","public void run(){
  if (TextUtils.isEmpty(moderateErrorMsg)) {
    final String msg;
    if (checkedCommentTotal > 1) {
      msg=getResources().getText(R.string.comments_moderated).toString();
    }
 else {
      msg=getResources().getText(R.string.comment_moderated).toString();
    }
    Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
    checkedCommentTotal=0;
    hideModerationBar();
    selectedCommentPositions.clear();
    mOnCommentChangeListener.onCommentDeleted();
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
      ft.add(alert,""String_Node_Str"");
      ft.commitAllowingStateLoss();
    }
  }
}",0.915820895522388
14917,"@SuppressWarnings(""String_Node_Str"") protected void moderateComments(CommentStatus newStatus){
  final String newStatusStr=CommentStatus.toString(newStatus);
  final Blog blog=WordPress.currentBlog;
  Iterator it=selectedCommentPositions.iterator();
  final List<Comment> commentsUpdatedList=new LinkedList<Comment>();
  while (it.hasNext()) {
    int i=(Integer)it.next();
    client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
    Comment listRow=(Comment)getListView().getItemAtPosition(i);
    int curCommentID=listRow.commentID;
    Map<String,String> contentHash, postHash=new HashMap<String,String>();
    contentHash=(Map<String,String>)allComments.get(curCommentID);
    if (contentHash.get(""String_Node_Str"").equals(newStatusStr)) {
      it.remove();
      continue;
    }
    postHash.put(""String_Node_Str"",newStatusStr);
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),curCommentID,postHash};
    Object result;
    try {
      result=client.call(""String_Node_Str"",params);
      boolean bResult=Boolean.parseBoolean(result.toString());
      if (bResult) {
        it.remove();
        listRow.setStatus(newStatusStr);
        contentHash.put(""String_Node_Str"",newStatusStr);
        model.set(i,listRow);
        WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getLocalTableBlogId(),listRow.commentID,newStatusStr);
        commentsUpdatedList.add(WordPress.wpDB.getComment(WordPress.currentBlog.getLocalTableBlogId(),listRow.commentID));
      }
    }
 catch (    XMLRPCException e) {
      moderateErrorMsg=getResources().getText(R.string.error_moderate_comment).toString();
    }
  }
  dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        mOnCommentChangeListener.onCommentsModerated(commentsUpdatedList);
        ((WPActionBarActivity)getActivity()).updateMenuDrawer();
      }
 else {
        if (!getActivity().isFinishing()) {
          checkedCommentTotal=0;
          hideModerationBar();
          getListView().invalidateViews();
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
          alert.show(ft,""String_Node_Str"");
        }
        moderateErrorMsg=""String_Node_Str"";
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  progressDialog=new ProgressDialog(getActivity().getApplicationContext());
}","@SuppressWarnings(""String_Node_Str"") protected void moderateComments(CommentStatus newStatus){
  final String newStatusStr=CommentStatus.toString(newStatus);
  final Blog blog=WordPress.currentBlog;
  Iterator it=selectedCommentPositions.iterator();
  final List<Comment> commentsUpdatedList=new LinkedList<Comment>();
  while (it.hasNext()) {
    int i=(Integer)it.next();
    client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
    Comment listRow=(Comment)getListView().getItemAtPosition(i);
    int curCommentID=listRow.commentID;
    Map<String,String> contentHash, postHash=new HashMap<String,String>();
    contentHash=(Map<String,String>)allComments.get(curCommentID);
    if (contentHash.get(""String_Node_Str"").equals(newStatusStr)) {
      it.remove();
      continue;
    }
    postHash.put(""String_Node_Str"",newStatusStr);
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
    Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),curCommentID,postHash};
    Object result;
    try {
      result=client.call(""String_Node_Str"",params);
      boolean bResult=Boolean.parseBoolean(result.toString());
      if (bResult) {
        it.remove();
        listRow.setStatus(newStatusStr);
        contentHash.put(""String_Node_Str"",newStatusStr);
        model.set(i,listRow);
        WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getLocalTableBlogId(),listRow.commentID,newStatusStr);
        commentsUpdatedList.add(WordPress.wpDB.getComment(WordPress.currentBlog.getLocalTableBlogId(),listRow.commentID));
      }
    }
 catch (    XMLRPCException e) {
      moderateErrorMsg=getResources().getText(R.string.error_moderate_comment).toString();
    }
  }
  dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        mOnCommentChangeListener.onCommentsModerated(commentsUpdatedList);
        ((WPActionBarActivity)getActivity()).updateMenuDrawer();
      }
 else {
        if (!getActivity().isFinishing()) {
          checkedCommentTotal=0;
          hideModerationBar();
          getListView().invalidateViews();
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
          ft.add(alert,""String_Node_Str"");
          ft.commitAllowingStateLoss();
        }
        moderateErrorMsg=""String_Node_Str"";
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  progressDialog=new ProgressDialog(getActivity().getApplicationContext());
}",0.9904103128438924
14918,"private void showVideoPressUpgradeDialog(){
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  String title=getString(R.string.media_no_video_title);
  String message=getString(R.string.media_no_video_message);
  String infoTitle=getString(R.string.learn_more);
  String infoURL=Constants.videoPressURL;
  WPAlertDialogFragment.newInstance(message,title,false,infoTitle,infoURL).show(ft,""String_Node_Str"");
}","private void showVideoPressUpgradeDialog(){
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  String title=getString(R.string.media_no_video_title);
  String message=getString(R.string.media_no_video_message);
  String infoTitle=getString(R.string.learn_more);
  String infoURL=Constants.videoPressURL;
  WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(message,title,false,infoTitle,infoURL);
  ft.add(alert,""String_Node_Str"");
  ft.commitAllowingStateLoss();
}",0.9120171673819742
14919,"public void onClick(View v){
  if (!WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),isPage)) {
    switcher.showNext();
    numRecords+=20;
    refreshPosts(true);
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.remote_changes),getString(R.string.local_changes),true);
      alert.show(ft,""String_Node_Str"");
    }
  }
}","public void onClick(View v){
  if (!WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),isPage)) {
    switcher.showNext();
    numRecords+=20;
    refreshPosts(true);
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.remote_changes),getString(R.string.local_changes),true);
      ft.add(alert,""String_Node_Str"");
      ft.commitAllowingStateLoss();
    }
  }
}",0.9444967074317968
14920,"@Override public boolean onContextItemSelected(MenuItem item){
  Post post=new Post(WordPress.currentBlog.getLocalTableBlogId(),mSelectedID,isPage);
  if (post.getId() < 0) {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
      alert.show(ft,""String_Node_Str"");
    }
    return false;
  }
  int itemGroupID=item.getGroupId();
  if (itemGroupID == MENU_GROUP_POSTS || itemGroupID == MENU_GROUP_PAGES || itemGroupID == MENU_GROUP_DRAFTS) {
switch (item.getItemId()) {
case MENU_ITEM_EDIT:
      WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedEdit);
    Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
  i2.putExtra(EditPostActivity.EXTRA_POSTID,mSelectedID);
if (itemGroupID == MENU_GROUP_PAGES) {
  i2.putExtra(EditPostActivity.EXTRA_IS_PAGE,true);
}
 else if (itemGroupID == MENU_GROUP_DRAFTS) {
  if (isPage)   i2.putExtra(EditPostActivity.EXTRA_IS_PAGE,true);
}
getActivity().startActivityForResult(i2,PostsActivity.ACTIVITY_EDIT_POST);
return true;
case MENU_ITEM_DELETE:
WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedDelete);
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
case MENU_ITEM_PREVIEW:
WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedPreview);
Intent i=new Intent(getActivity(),PreviewPostActivity.class);
i.putExtra(""String_Node_Str"",itemGroupID == MENU_GROUP_PAGES ? true : false);
i.putExtra(""String_Node_Str"",mSelectedID);
i.putExtra(""String_Node_Str"",WordPress.currentBlog.getLocalTableBlogId());
startActivity(i);
return true;
case MENU_ITEM_SHARE:
WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedShare);
mOnPostActionListener.onPostAction(PostsActivity.POST_SHARE,post);
return true;
default :
return false;
}
}
return false;
}","@Override public boolean onContextItemSelected(MenuItem item){
  Post post=new Post(WordPress.currentBlog.getLocalTableBlogId(),mSelectedID,isPage);
  if (post.getId() < 0) {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
      ft.add(alert,""String_Node_Str"");
      ft.commitAllowingStateLoss();
    }
    return false;
  }
  int itemGroupID=item.getGroupId();
  if (itemGroupID == MENU_GROUP_POSTS || itemGroupID == MENU_GROUP_PAGES || itemGroupID == MENU_GROUP_DRAFTS) {
switch (item.getItemId()) {
case MENU_ITEM_EDIT:
      WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedEdit);
    Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
  i2.putExtra(EditPostActivity.EXTRA_POSTID,mSelectedID);
if (itemGroupID == MENU_GROUP_PAGES) {
  i2.putExtra(EditPostActivity.EXTRA_IS_PAGE,true);
}
 else if (itemGroupID == MENU_GROUP_DRAFTS) {
  if (isPage)   i2.putExtra(EditPostActivity.EXTRA_IS_PAGE,true);
}
getActivity().startActivityForResult(i2,PostsActivity.ACTIVITY_EDIT_POST);
return true;
case MENU_ITEM_DELETE:
WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedDelete);
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
case MENU_ITEM_PREVIEW:
WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedPreview);
Intent i=new Intent(getActivity(),PreviewPostActivity.class);
i.putExtra(""String_Node_Str"",itemGroupID == MENU_GROUP_PAGES ? true : false);
i.putExtra(""String_Node_Str"",mSelectedID);
i.putExtra(""String_Node_Str"",WordPress.currentBlog.getLocalTableBlogId());
startActivity(i);
return true;
case MENU_ITEM_SHARE:
WPMobileStatsUtil.flagProperty(statEventForViewClosing(),WPMobileStatsUtil.StatsPropertyPostMenuClickedShare);
mOnPostActionListener.onPostAction(PostsActivity.POST_SHARE,post);
return true;
default :
return false;
}
}
return false;
}",0.9866102889358704
14921,"public void createSwitcher(){
  switcher=new ViewSwitcher(getActivity().getApplicationContext());
  Button footer=(Button)View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_btn,null);
  footer.setText(getResources().getText(R.string.load_more) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.tab_pages : R.string.tab_posts));
  footer.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      if (!WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),isPage)) {
        switcher.showNext();
        numRecords+=20;
        refreshPosts(true);
      }
 else {
        if (!getActivity().isFinishing()) {
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.remote_changes),getString(R.string.local_changes),true);
          alert.show(ft,""String_Node_Str"");
        }
      }
    }
  }
);
  View progress=View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_progress,null);
  switcher.addView(footer);
  switcher.addView(progress);
}","public void createSwitcher(){
  switcher=new ViewSwitcher(getActivity().getApplicationContext());
  Button footer=(Button)View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_btn,null);
  footer.setText(getResources().getText(R.string.load_more) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.tab_pages : R.string.tab_posts));
  footer.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      if (!WordPress.wpDB.findLocalChanges(WordPress.getCurrentBlog().getLocalTableBlogId(),isPage)) {
        switcher.showNext();
        numRecords+=20;
        refreshPosts(true);
      }
 else {
        if (!getActivity().isFinishing()) {
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.remote_changes),getString(R.string.local_changes),true);
          ft.add(alert,""String_Node_Str"");
          ft.commitAllowingStateLoss();
        }
      }
    }
  }
);
  View progress=View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_progress,null);
  switcher.addView(footer);
  switcher.addView(progress);
}",0.9733615221987316
14922,"private void selectAndShowFirstPost(){
  Post post=new Post(WordPress.currentBlog.getLocalTableBlogId(),Integer.valueOf(mPostIDs[0]),isPage);
  if (post.getId() >= 0) {
    WordPress.currentPost=post;
    mOnPostSelectedListener.onPostSelected(post);
    FragmentManager fm=getActivity().getSupportFragmentManager();
    ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
    if (f != null && f.isInLayout())     getListView().setItemChecked(0,true);
  }
}","private void selectAndShowFirstPost(){
  Post post=new Post(WordPress.currentBlog.getLocalTableBlogId(),Integer.valueOf(mPostIDs[0]),isPage);
  if (post.getId() >= 0) {
    WordPress.currentPost=post;
    mOnPostSelectedListener.onPostSelected(post);
    FragmentManager fm=getActivity().getSupportFragmentManager();
    ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
    if (f != null && f.isInLayout()) {
      getListView().setItemChecked(0,true);
    }
  }
}",0.9896907216494846
14923,"private void showPost(long selectedID){
  Post post=new Post(WordPress.currentBlog.getLocalTableBlogId(),selectedID,isPage);
  if (post.getId() >= 0) {
    WordPress.currentPost=post;
    mOnPostSelectedListener.onPostSelected(post);
    mPostListAdapter.notifyDataSetChanged();
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
      alert.show(ft,""String_Node_Str"");
    }
  }
}","private void showPost(long selectedID){
  Post post=new Post(WordPress.currentBlog.getLocalTableBlogId(),selectedID,isPage);
  if (post.getId() >= 0) {
    WordPress.currentPost=post;
    mOnPostSelectedListener.onPostSelected(post);
    mPostListAdapter.notifyDataSetChanged();
  }
 else {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
      ft.add(alert,""String_Node_Str"");
      ft.commitAllowingStateLoss();
    }
  }
}",0.948651000870322
14924,"public List<Map<String,Object>> getBlogList(){
  if (mSelfHostedURL != null && mSelfHostedURL.length() != 0) {
    mXmlrpcUrl=getSelfHostedXmlrpcUrl(mSelfHostedURL);
  }
 else {
    mXmlrpcUrl=Constants.wpcomXMLRPCURL;
  }
  if (mXmlrpcUrl == null) {
    if (!mHttpAuthRequired)     mErrorMsgId=R.string.no_site_error;
    return null;
  }
  URI uri;
  try {
    uri=URI.create(mXmlrpcUrl);
  }
 catch (  Exception e1) {
    mErrorMsgId=R.string.no_site_error;
    return null;
  }
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(uri,mHttpUsername,mHttpPassword);
  Object[] params={mUsername,mPassword};
  try {
    Object[] userBlogs=(Object[])client.call(""String_Node_Str"",params);
    if (userBlogs == null) {
      mErrorMsgId=R.string.xmlrpc_error;
      return null;
    }
    Arrays.sort(userBlogs,Utils.BlogNameComparator);
    List<Map<String,Object>> userBlogList=new ArrayList<Map<String,Object>>();
    for (    Object blog : userBlogs) {
      try {
        userBlogList.add((Map<String,Object>)blog);
      }
 catch (      ClassCastException e) {
        AppLog.e(T.NUX,""String_Node_Str"");
      }
    }
    return userBlogList;
  }
 catch (  XMLRPCException e) {
    String message=e.getMessage();
    if (message.contains(""String_Node_Str"")) {
      mErrorMsgId=R.string.username_or_password_incorrect;
    }
 else     if (message.contains(""String_Node_Str"")) {
      mErrorMsgId=R.string.xmlrpc_error;
    }
 else     if (message.contains(""String_Node_Str"")) {
      mErrorMsgId=R.string.account_two_step_auth_enabled;
    }
 else {
      mErrorMsgId=R.string.no_network_message;
    }
    return null;
  }
}","public List<Map<String,Object>> getBlogList(){
  if (mSelfHostedURL != null && mSelfHostedURL.length() != 0) {
    mXmlrpcUrl=getSelfHostedXmlrpcUrl(mSelfHostedURL);
  }
 else {
    mXmlrpcUrl=Constants.wpcomXMLRPCURL;
  }
  if (mXmlrpcUrl == null) {
    if (!mHttpAuthRequired)     mErrorMsgId=R.string.no_site_error;
    return null;
  }
  URI uri;
  try {
    uri=URI.create(mXmlrpcUrl);
  }
 catch (  Exception e1) {
    mErrorMsgId=R.string.no_site_error;
    return null;
  }
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(uri,mHttpUsername,mHttpPassword);
  Object[] params={mUsername,mPassword};
  try {
    Object[] userBlogs=(Object[])client.call(""String_Node_Str"",params);
    if (userBlogs == null) {
      mErrorMsgId=R.string.no_network_message;
      return null;
    }
    Arrays.sort(userBlogs,Utils.BlogNameComparator);
    List<Map<String,Object>> userBlogList=new ArrayList<Map<String,Object>>();
    for (    Object blog : userBlogs) {
      try {
        userBlogList.add((Map<String,Object>)blog);
      }
 catch (      ClassCastException e) {
        AppLog.e(T.NUX,""String_Node_Str"");
      }
    }
    return userBlogList;
  }
 catch (  XMLRPCException e) {
    String message=e.getMessage();
    if (message.contains(""String_Node_Str"")) {
      mErrorMsgId=R.string.username_or_password_incorrect;
    }
 else     if (message.contains(""String_Node_Str"")) {
      mErrorMsgId=R.string.xmlrpc_error;
    }
 else     if (message.contains(""String_Node_Str"")) {
      mErrorMsgId=R.string.account_two_step_auth_enabled;
    }
 else {
      mErrorMsgId=R.string.no_network_message;
    }
    return null;
  }
}",0.9908424908424908
14925,"private static void getStatsClicks(final String blogId,final String date){
  WordPress.restClient.getStatsClicks(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseClicksTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      Log.e(TAG,""String_Node_Str"");
      updateRefreshMap(StatsViewType.CLICKS,-1);
    }
  }
);
}","private static void getStatsClicks(final String blogId,final String date){
  WordPress.restClient.getStatsClicks(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseClicksTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.e(T.STATS,""String_Node_Str"");
      updateRefreshMap(StatsViewType.CLICKS,-1);
    }
  }
);
}",0.990185387131952
14926,"public static void getStatsSummary(final String blogId,final StatsSummaryInterface callback){
  WordPress.restClient.getStatsSummary(blogId,new Listener(){
    @Override public void onResponse(    final JSONObject response){
      new AsyncTask<Void,Void,StatsSummary>(){
        @Override protected StatsSummary doInBackground(        Void... params){
          StatUtils.saveSummary(blogId,response);
          return StatUtils.getSummary(blogId);
        }
        protected void onPostExecute(        StatsSummary result){
          if (callback != null)           callback.onSuccess();
          StatUtils.broadcastSummaryUpdated(result);
        }
      }
.execute();
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      if (callback != null)       callback.onFailure(error);
      Log.e(TAG,""String_Node_Str"",error);
    }
  }
);
}","public static void getStatsSummary(final String blogId,final StatsSummaryInterface callback){
  WordPress.restClient.getStatsSummary(blogId,new Listener(){
    @Override public void onResponse(    final JSONObject response){
      new AsyncTask<Void,Void,StatsSummary>(){
        @Override protected StatsSummary doInBackground(        Void... params){
          StatUtils.saveSummary(blogId,response);
          return StatUtils.getSummary(blogId);
        }
        protected void onPostExecute(        StatsSummary result){
          if (callback != null)           callback.onSuccess();
          StatUtils.broadcastSummaryUpdated(result);
        }
      }
.execute();
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      if (callback != null)       callback.onFailure(error);
      AppLog.e(T.STATS,""String_Node_Str"",error);
    }
  }
);
}",0.9949579831932772
14927,"private static void getStatsTagsAndCategories(final String blogId){
  WordPress.restClient.getStatsTagsAndCategories(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTagsAndCategoriesTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.TAGS_AND_CATEGORIES,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
}","private static void getStatsTagsAndCategories(final String blogId){
  WordPress.restClient.getStatsTagsAndCategories(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTagsAndCategoriesTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.TAGS_AND_CATEGORIES,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
}",0.988577362409138
14928,"private static void getStatsComments(final String blogId){
  WordPress.restClient.getStatsMostCommented(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseMostCommentedTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.COMMENTS,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
  WordPress.restClient.getStatsTopCommenters(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTopCommentersTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.COMMENTS,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
}","private static void getStatsComments(final String blogId){
  WordPress.restClient.getStatsMostCommented(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseMostCommentedTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.COMMENTS,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
  WordPress.restClient.getStatsTopCommenters(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTopCommentersTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.COMMENTS,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
}",0.9893742621015348
14929,"private static void getStatsViewsByCountry(final String blogId,String date){
  WordPress.restClient.getStatsGeoviews(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseGeoViewsTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.VIEWS_BY_COUNTRY,-1);
      Log.e(""String_Node_Str"",StatsGeoviewsFragment.class.getSimpleName() + ""String_Node_Str"" + error.toString());
    }
  }
);
}","private static void getStatsViewsByCountry(final String blogId,String date){
  WordPress.restClient.getStatsGeoviews(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseGeoViewsTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.VIEWS_BY_COUNTRY,-1);
      AppLog.e(T.STATS,error);
    }
  }
);
}",0.8858267716535433
14930,"public static void getStatsBarChart(final String blogId,final StatsBarChartUnit barChartUnit){
  Listener listener=new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseBarChartTask().execute(blogId,response,barChartUnit.ordinal());
    }
  }
;
  ErrorListener errorListener=new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.VISITORS_AND_VIEWS,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
;
  WordPress.restClient.getStatsBarChartData(blogId,barChartUnit,30,listener,errorListener);
}","public static void getStatsBarChart(final String blogId,final StatsBarChartUnit barChartUnit){
  Listener listener=new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseBarChartTask().execute(blogId,response,barChartUnit.ordinal());
    }
  }
;
  ErrorListener errorListener=new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.VISITORS_AND_VIEWS,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
;
  WordPress.restClient.getStatsBarChartData(blogId,barChartUnit,30,listener,errorListener);
}",0.9925925925925926
14931,"private static void getStatsTopPostsAndPages(final String blogId,final String date){
  WordPress.restClient.getStatsTopPosts(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTopPostsAndPagesTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.TOP_POSTS_AND_PAGES,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
}","private static void getStatsTopPostsAndPages(final String blogId,final String date){
  WordPress.restClient.getStatsTopPosts(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTopPostsAndPagesTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.TOP_POSTS_AND_PAGES,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
}",0.9888551165146908
14932,"private static void getStatsReferrers(final String blogId,final String date){
  WordPress.restClient.getStatsReferrers(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseReferrersTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.REFERRERS,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
}","private static void getStatsReferrers(final String blogId,final String date){
  WordPress.restClient.getStatsReferrers(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseReferrersTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.REFERRERS,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
}",0.9904357066950054
14933,"private static void getStatsVideoPlays(final String blogId,String date){
  WordPress.restClient.getStatsVideoPlays(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseVideoPlaysTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.VIDEO_PLAYS,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
}","private static void getStatsVideoPlays(final String blogId,String date){
  WordPress.restClient.getStatsVideoPlays(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseVideoPlaysTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.VIDEO_PLAYS,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
}",0.9903121636167922
14934,"private static void getStatsTopAuthors(final String blogId){
  WordPress.restClient.getStatsTopAuthors(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTopAuthorsTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.TOP_AUTHORS,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
}","private static void getStatsTopAuthors(final String blogId){
  WordPress.restClient.getStatsTopAuthors(blogId,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseTopAuthorsTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.TOP_AUTHORS,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
}",0.9878453038674032
14935,"@Override public void onErrorResponse(VolleyError error){
  updateRefreshMap(StatsViewType.VISITORS_AND_VIEWS,-1);
  Log.e(TAG,""String_Node_Str"");
}","@Override public void onErrorResponse(VolleyError error){
  updateRefreshMap(StatsViewType.VISITORS_AND_VIEWS,-1);
  AppLog.e(T.STATS,""String_Node_Str"");
}",0.9702970297029704
14936,"private static void getStatsSearchEngineTerms(final String blogId,final String date){
  WordPress.restClient.getStatsSearchEngineTerms(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseSearchEngineTermsTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.SEARCH_ENGINE_TERMS,-1);
      Log.e(TAG,""String_Node_Str"");
    }
  }
);
}","private static void getStatsSearchEngineTerms(final String blogId,final String date){
  WordPress.restClient.getStatsSearchEngineTerms(blogId,date,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new ParseSearchEngineTermsTask().execute(blogId,response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      updateRefreshMap(StatsViewType.SEARCH_ENGINE_TERMS,-1);
      AppLog.e(T.STATS,""String_Node_Str"");
    }
  }
);
}",0.9910802775024776
14937,"public void refreshMediaFromServer(int offset){
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    ApiHelper.SyncMediaLibraryTask.Callback callback=new ApiHelper.SyncMediaLibraryTask.Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
        if (WordPress.wpDB.getMediaCountAll(blogId) == 0 && count == 0) {
          noMediaFinish();
        }
        mIsRefreshing=false;
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mGridAdapter.setRefreshing(false);
              String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
              Cursor cursor=WordPress.wpDB.getMediaImagesForBlog(blogId,mFilteredItems);
              mGridAdapter.swapCursor(cursor);
            }
          }
);
        }
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (errorType == ApiHelper.ErrorType.NO_ERROR) {
          String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
          Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,MediaGridFragment.Filter.ALL,callback);
    getMediaTask.execute(apiArgs);
  }
}","public void refreshMediaFromServer(int offset){
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    ApiHelper.SyncMediaLibraryTask.Callback callback=new ApiHelper.SyncMediaLibraryTask.Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
        if (WordPress.wpDB.getMediaCountAll(blogId) == 0 && count == 0) {
          noMediaFinish();
        }
        mIsRefreshing=false;
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mGridAdapter.setRefreshing(false);
              String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
              Cursor cursor=WordPress.wpDB.getMediaImagesForBlog(blogId,mFilteredItems);
              mGridAdapter.swapCursor(cursor);
            }
          }
);
        }
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (errorType != ApiHelper.ErrorType.NO_ERROR) {
          String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
          Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,MediaGridFragment.Filter.ALL,callback);
    getMediaTask.execute(apiArgs);
  }
}",0.9995821145006268
14938,"@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  if (errorType == ApiHelper.ErrorType.NO_ERROR) {
    String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
    Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (!isFinishing()) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}","@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  if (errorType != ApiHelper.ErrorType.NO_ERROR) {
    String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
    Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (!isFinishing()) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}",0.9986754966887416
14939,"public void refreshMediaFromServer(int offset){
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    ApiHelper.SyncMediaLibraryTask.Callback callback=new ApiHelper.SyncMediaLibraryTask.Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
        if (WordPress.wpDB.getMediaCountAll(blogId) == 0 && count == 0) {
          noMediaFinish();
        }
        mIsRefreshing=false;
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mGridAdapter.setRefreshing(false);
              String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
              Cursor cursor=WordPress.wpDB.getMediaImagesForBlog(blogId,mFilteredItems);
              mGridAdapter.swapCursor(cursor);
            }
          }
);
        }
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (errorType == ApiHelper.ErrorType.NO_ERROR) {
          String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
          Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,MediaGridFragment.Filter.ALL,callback);
    getMediaTask.execute(apiArgs);
  }
}","public void refreshMediaFromServer(int offset){
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    ApiHelper.SyncMediaLibraryTask.Callback callback=new ApiHelper.SyncMediaLibraryTask.Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
        if (WordPress.wpDB.getMediaCountAll(blogId) == 0 && count == 0) {
          noMediaFinish();
        }
        mIsRefreshing=false;
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mGridAdapter.setRefreshing(false);
              String blogId=String.valueOf(WordPress.getCurrentBlog().getLocalTableBlogId());
              Cursor cursor=WordPress.wpDB.getMediaImagesForBlog(blogId,mFilteredItems);
              mGridAdapter.swapCursor(cursor);
            }
          }
);
        }
      }
      @Override public void onFailure(      ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        if (errorType != ApiHelper.ErrorType.NO_ERROR) {
          String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
          Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,MediaGridFragment.Filter.ALL,callback);
    getMediaTask.execute(apiArgs);
  }
}",0.9995821145006268
14940,"@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  if (errorType == ApiHelper.ErrorType.NO_ERROR) {
    String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
    Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (!isFinishing()) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}","@Override public void onFailure(ApiHelper.ErrorType errorType,String errorMessage,Throwable throwable){
  if (errorType != ApiHelper.ErrorType.NO_ERROR) {
    String message=errorType == ApiHelper.ErrorType.NO_UPLOAD_FILES_CAP ? getString(R.string.media_error_no_permission) : getString(R.string.error_refresh_media);
    Toast.makeText(MediaGalleryPickerActivity.this,message,Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (!isFinishing()) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}",0.9986754966887416
14941,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.new_account_user_fragment_screen,container,false);
  WPTextView termsOfServiceTextView=(WPTextView)rootView.findViewById(R.id.l_agree_terms_of_service);
  termsOfServiceTextView.setText(Html.fromHtml(String.format(getString(R.string.agree_terms_of_service,""String_Node_Str"",""String_Node_Str""))));
  termsOfServiceTextView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Uri uri=Uri.parse(Constants.URL_TOS);
      startActivity(new Intent(Intent.ACTION_VIEW,uri));
    }
  }
);
  mSignupButton=(WPTextView)rootView.findViewById(R.id.signup_button);
  mSignupButton.setOnClickListener(signupClickListener);
  mSignupButton.setEnabled(false);
  mProgressTextSignIn=(WPTextView)rootView.findViewById(R.id.nux_sign_in_progress_text);
  mProgressBarSignIn=(ProgressBar)rootView.findViewById(R.id.nux_sign_in_progress_bar);
  mEmailTextField=(EditText)rootView.findViewById(R.id.email_address);
  mEmailTextField.setText(UserEmail.getPrimaryEmail(getActivity()));
  mEmailTextField.setSelection(mEmailTextField.getText().toString().length());
  mPasswordTextField=(EditText)rootView.findViewById(R.id.password);
  mUsernameTextField=(EditText)rootView.findViewById(R.id.username);
  mSiteUrlTextField=(EditText)rootView.findViewById(R.id.site_url);
  mEmailTextField.addTextChangedListener(this);
  mPasswordTextField.addTextChangedListener(this);
  mUsernameTextField.addTextChangedListener(this);
  mSiteUrlTextField.addTextChangedListener(this);
  mUsernameTextField.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mSiteUrlTextField.setText(mUsernameTextField.getText().toString());
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mEmailTextField.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus) {
        autocorrectEmail();
      }
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.new_account_user_fragment_screen,container,false);
  WPTextView termsOfServiceTextView=(WPTextView)rootView.findViewById(R.id.l_agree_terms_of_service);
  termsOfServiceTextView.setText(Html.fromHtml(String.format(getString(R.string.agree_terms_of_service),""String_Node_Str"",""String_Node_Str"")));
  termsOfServiceTextView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Uri uri=Uri.parse(Constants.URL_TOS);
      startActivity(new Intent(Intent.ACTION_VIEW,uri));
    }
  }
);
  mSignupButton=(WPTextView)rootView.findViewById(R.id.signup_button);
  mSignupButton.setOnClickListener(signupClickListener);
  mSignupButton.setEnabled(false);
  mProgressTextSignIn=(WPTextView)rootView.findViewById(R.id.nux_sign_in_progress_text);
  mProgressBarSignIn=(ProgressBar)rootView.findViewById(R.id.nux_sign_in_progress_bar);
  mEmailTextField=(EditText)rootView.findViewById(R.id.email_address);
  mEmailTextField.setText(UserEmail.getPrimaryEmail(getActivity()));
  mEmailTextField.setSelection(mEmailTextField.getText().toString().length());
  mPasswordTextField=(EditText)rootView.findViewById(R.id.password);
  mUsernameTextField=(EditText)rootView.findViewById(R.id.username);
  mSiteUrlTextField=(EditText)rootView.findViewById(R.id.site_url);
  mEmailTextField.addTextChangedListener(this);
  mPasswordTextField.addTextChangedListener(this);
  mUsernameTextField.addTextChangedListener(this);
  mSiteUrlTextField.addTextChangedListener(this);
  mUsernameTextField.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mSiteUrlTextField.setText(mUsernameTextField.getText().toString());
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mEmailTextField.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus) {
        autocorrectEmail();
      }
    }
  }
);
  return rootView;
}",0.999569151227919
14942,"private String getSelfHostedXmlrpcUrl(String url){
  String xmlrpcUrl=null;
  if (!Charset.forName(""String_Node_Str"").newEncoder().canEncode(url)) {
    if (url.toLowerCase().startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(7));
    }
 else     if (url.toLowerCase().startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(8));
    }
  }
  if (!(url.toLowerCase().startsWith(""String_Node_Str"")) && !(url.toLowerCase().startsWith(""String_Node_Str""))) {
    url=""String_Node_Str"" + url;
  }
  if (!URLUtil.isValidUrl(url)) {
    mErrorMsgId=R.string.invalid_url_message;
    return null;
  }
  String rsdUrl=ApiHelper.getRSDMetaTagHrefRegEx(url);
  if (rsdUrl == null) {
    rsdUrl=ApiHelper.getRSDMetaTagHref(url);
  }
  if (rsdUrl != null) {
    xmlrpcUrl=ApiHelper.getXMLRPCUrl(rsdUrl);
    if (xmlrpcUrl == null)     xmlrpcUrl=rsdUrl.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      XMLRPCClient client=new XMLRPCClient(url,mHttpUsername,mHttpPassword);
      try {
        client.call(""String_Node_Str"");
        xmlrpcUrl=url;
        mIsCustomUrl=true;
      }
 catch (      XMLRPCException e) {
        if (e.getMessage().contains(""String_Node_Str"")) {
          mHttpAuthRequired=true;
          return null;
        }
        String guessURL=url;
        if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
          guessURL=guessURL.substring(0,guessURL.length() - 1);
        }
        guessURL+=""String_Node_Str"";
        client=new XMLRPCClient(guessURL,mHttpUsername,mHttpPassword);
        try {
          client.call(""String_Node_Str"");
          xmlrpcUrl=guessURL;
        }
 catch (        XMLRPCException ex) {
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return xmlrpcUrl;
}","private String getSelfHostedXmlrpcUrl(String url){
  String xmlrpcUrl=null;
  if (!Charset.forName(""String_Node_Str"").newEncoder().canEncode(url)) {
    if (url.toLowerCase().startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(7));
    }
 else     if (url.toLowerCase().startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(8));
    }
 else {
      url=IDN.toASCII(url);
    }
  }
  if (!(url.toLowerCase().startsWith(""String_Node_Str"")) && !(url.toLowerCase().startsWith(""String_Node_Str""))) {
    url=""String_Node_Str"" + url;
  }
  if (!URLUtil.isValidUrl(url)) {
    mErrorMsgId=R.string.invalid_url_message;
    return null;
  }
  String rsdUrl=ApiHelper.getRSDMetaTagHrefRegEx(url);
  if (rsdUrl == null) {
    rsdUrl=ApiHelper.getRSDMetaTagHref(url);
  }
  if (rsdUrl != null) {
    xmlrpcUrl=ApiHelper.getXMLRPCUrl(rsdUrl);
    if (xmlrpcUrl == null)     xmlrpcUrl=rsdUrl.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      XMLRPCClient client=new XMLRPCClient(url,mHttpUsername,mHttpPassword);
      try {
        client.call(""String_Node_Str"");
        xmlrpcUrl=url;
        mIsCustomUrl=true;
      }
 catch (      XMLRPCException e) {
        if (e.getMessage().contains(""String_Node_Str"")) {
          mHttpAuthRequired=true;
          return null;
        }
        String guessURL=url;
        if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
          guessURL=guessURL.substring(0,guessURL.length() - 1);
        }
        guessURL+=""String_Node_Str"";
        client=new XMLRPCClient(guessURL,mHttpUsername,mHttpPassword);
        try {
          client.call(""String_Node_Str"");
          xmlrpcUrl=guessURL;
        }
 catch (        XMLRPCException ex) {
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return xmlrpcUrl;
}",0.9887880405766152
14943,"@Override protected void onMessage(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (!WordPress.hasValidWPComCredentials(context))   return;
  Bundle extras=intent.getExtras();
  if (extras == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String title=extras.getString(""String_Node_Str"");
  if (title == null)   title=""String_Node_Str"";
  String message=StringUtils.unescapeHTML(extras.getString(""String_Node_Str""));
  String note_id=extras.getString(""String_Node_Str"");
  Note note=null;
  if (extras.getString(""String_Node_Str"") != null) {
    byte[] decode=Base64.decode(intent.getStringExtra(""String_Node_Str""),Base64.DEFAULT);
    String unzippedString=NotificationUtils.unzipString(decode);
    JSONObject jsonObject=null;
    try {
      jsonObject=new JSONObject(unzippedString);
      JSONArray notesJSON=jsonObject.getJSONArray(""String_Node_Str"");
      note=new Note(notesJSON.getJSONObject(0));
      WordPress.wpDB.addNote(note,false);
    }
 catch (    JSONException e) {
      Log.e(WordPress.TAG,""String_Node_Str"" + e);
    }
  }
 else {
    note=new Note(extras);
    WordPress.wpDB.addNote(note,true);
    refreshNotes();
  }
  boolean md5GeneratedNoteId=false;
  if (note_id == null && note != null) {
    note_id=String.valueOf(WordPressDB.generateIdFor(note));
    md5GeneratedNoteId=true;
  }
  long thisTime=System.currentTimeMillis();
  if (mPreviousNoteId != null && mPreviousNoteId.equals(note_id)) {
    long seconds=TimeUnit.MILLISECONDS.toSeconds(thisTime - mPreviousNoteTime);
    if (seconds <= 1) {
      Log.w(""String_Node_Str"",""String_Node_Str"");
      return;
    }
  }
  mPreviousNoteId=note_id;
  mPreviousNoteTime=thisTime;
  if (note_id != null) {
    if (!activeNotificationsMap.containsKey(note_id))     activeNotificationsMap.put(note_id,extras);
  }
  String iconURL=extras.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconURL != null) {
    try {
      iconURL=URLDecoder.decode(iconURL,""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    float screenDensity=getResources().getDisplayMetrics().densityDpi;
    int size=Math.round(64 * (screenDensity / 160));
    String resizedURL=iconURL.replaceAll(""String_Node_Str"",""String_Node_Str"" + size);
    largeIconBitmap=ImageHelper.downloadBitmap(resizedURL);
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean sound, vibrate, light;
  sound=prefs.getBoolean(""String_Node_Str"",false);
  vibrate=prefs.getBoolean(""String_Node_Str"",false);
  light=prefs.getBoolean(""String_Node_Str"",false);
  NotificationCompat.Builder mBuilder;
  Intent resultIntent=new Intent(this,PostsActivity.class);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
  if (activeNotificationsMap.size() <= 1) {
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message));
    if (md5GeneratedNoteId)     resultIntent.putExtra(NotificationsActivity.MD5_NOTE_ID_EXTRA,note_id);
    if (note_id != null)     resultIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
    String noteType=extras.getString(""String_Node_Str"");
    if (noteType != null && noteType.equals(""String_Node_Str"")) {
      Intent commentReplyIntent=new Intent(this,PostsActivity.class);
      commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
      commentReplyIntent.setAction(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
      commentReplyIntent.putExtra(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA,true);
      if (note_id != null)       commentReplyIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
      PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(context,0,commentReplyIntent,PendingIntent.FLAG_CANCEL_CURRENT);
      mBuilder.addAction(R.drawable.ab_icon_reply,getResources().getText(R.string.reply),commentReplyPendingIntent);
    }
    if (largeIconBitmap != null) {
      mBuilder.setLargeIcon(largeIconBitmap);
    }
  }
 else {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle wpNotification : activeNotificationsMap.values()) {
      if (noteCtr > 5)       break;
      if (wpNotification.getString(""String_Node_Str"") != null) {
        if (wpNotification.getString(""String_Node_Str"").equals(""String_Node_Str""))         inboxStyle.addLine(wpNotification.getString(""String_Node_Str"") + ""String_Node_Str"" + wpNotification.getString(""String_Node_Str""));
 else         inboxStyle.addLine(wpNotification.getString(""String_Node_Str""));
        noteCtr++;
      }
    }
    if (activeNotificationsMap.size() > 5)     inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),activeNotificationsMap.size() - 5));
    String subject=String.format(getString(R.string.new_notifications),activeNotificationsMap.size());
    mBuilder=new NotificationCompat.Builder(this).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.notification_multi)).setSmallIcon(R.drawable.notification_icon).setContentTitle(""String_Node_Str"").setContentText(subject).setTicker(message).setAutoCancel(true).setStyle(inboxStyle);
  }
  if (sound)   mBuilder.setSound(Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.notification));
  if (vibrate)   mBuilder.setVibrate(new long[]{500,500,500});
  if (light)   mBuilder.setLights(0xff0000ff,1000,5000);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_UPDATE_CURRENT);
  mBuilder.setContentIntent(pendingIntent);
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.notify(notificationId,mBuilder.build());
  broadcastNewNotification();
}","@Override protected void onMessage(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (!WordPress.hasValidWPComCredentials(context))   return;
  Bundle extras=intent.getExtras();
  if (extras == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  long wpcomUserID=UserPrefs.getCurrentUserId();
  if (wpcomUserID <= 0) {
  }
 else {
    String userIDFromPN=extras.getString(""String_Node_Str"");
    if (!String.valueOf(wpcomUserID).equals(userIDFromPN)) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      return;
    }
  }
  String title=extras.getString(""String_Node_Str"");
  if (title == null)   title=""String_Node_Str"";
  String message=StringUtils.unescapeHTML(extras.getString(""String_Node_Str""));
  String note_id=extras.getString(""String_Node_Str"");
  Note note=null;
  if (extras.getString(""String_Node_Str"") != null) {
    byte[] decode=Base64.decode(intent.getStringExtra(""String_Node_Str""),Base64.DEFAULT);
    String unzippedString=NotificationUtils.unzipString(decode);
    JSONObject jsonObject=null;
    try {
      jsonObject=new JSONObject(unzippedString);
      JSONArray notesJSON=jsonObject.getJSONArray(""String_Node_Str"");
      note=new Note(notesJSON.getJSONObject(0));
      WordPress.wpDB.addNote(note,false);
    }
 catch (    JSONException e) {
      Log.e(WordPress.TAG,""String_Node_Str"" + e);
    }
  }
 else {
    note=new Note(extras);
    WordPress.wpDB.addNote(note,true);
    refreshNotes();
  }
  boolean md5GeneratedNoteId=false;
  if (note_id == null && note != null) {
    note_id=String.valueOf(WordPressDB.generateIdFor(note));
    md5GeneratedNoteId=true;
  }
  long thisTime=System.currentTimeMillis();
  if (mPreviousNoteId != null && mPreviousNoteId.equals(note_id)) {
    long seconds=TimeUnit.MILLISECONDS.toSeconds(thisTime - mPreviousNoteTime);
    if (seconds <= 1) {
      Log.w(""String_Node_Str"",""String_Node_Str"");
      return;
    }
  }
  mPreviousNoteId=note_id;
  mPreviousNoteTime=thisTime;
  if (note_id != null) {
    if (!activeNotificationsMap.containsKey(note_id))     activeNotificationsMap.put(note_id,extras);
  }
  String iconURL=extras.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconURL != null) {
    try {
      iconURL=URLDecoder.decode(iconURL,""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    float screenDensity=getResources().getDisplayMetrics().densityDpi;
    int size=Math.round(64 * (screenDensity / 160));
    String resizedURL=iconURL.replaceAll(""String_Node_Str"",""String_Node_Str"" + size);
    largeIconBitmap=ImageHelper.downloadBitmap(resizedURL);
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean sound, vibrate, light;
  sound=prefs.getBoolean(""String_Node_Str"",false);
  vibrate=prefs.getBoolean(""String_Node_Str"",false);
  light=prefs.getBoolean(""String_Node_Str"",false);
  NotificationCompat.Builder mBuilder;
  Intent resultIntent=new Intent(this,PostsActivity.class);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
  if (activeNotificationsMap.size() <= 1) {
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message));
    if (md5GeneratedNoteId)     resultIntent.putExtra(NotificationsActivity.MD5_NOTE_ID_EXTRA,note_id);
    if (note_id != null)     resultIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
    String noteType=extras.getString(""String_Node_Str"");
    if (noteType != null && noteType.equals(""String_Node_Str"")) {
      Intent commentReplyIntent=new Intent(this,PostsActivity.class);
      commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
      commentReplyIntent.setAction(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
      commentReplyIntent.putExtra(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA,true);
      if (note_id != null)       commentReplyIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
      PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(context,0,commentReplyIntent,PendingIntent.FLAG_CANCEL_CURRENT);
      mBuilder.addAction(R.drawable.ab_icon_reply,getResources().getText(R.string.reply),commentReplyPendingIntent);
    }
    if (largeIconBitmap != null) {
      mBuilder.setLargeIcon(largeIconBitmap);
    }
  }
 else {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle wpNotification : activeNotificationsMap.values()) {
      if (noteCtr > 5)       break;
      if (wpNotification.getString(""String_Node_Str"") != null) {
        if (wpNotification.getString(""String_Node_Str"").equals(""String_Node_Str""))         inboxStyle.addLine(wpNotification.getString(""String_Node_Str"") + ""String_Node_Str"" + wpNotification.getString(""String_Node_Str""));
 else         inboxStyle.addLine(wpNotification.getString(""String_Node_Str""));
        noteCtr++;
      }
    }
    if (activeNotificationsMap.size() > 5)     inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),activeNotificationsMap.size() - 5));
    String subject=String.format(getString(R.string.new_notifications),activeNotificationsMap.size());
    mBuilder=new NotificationCompat.Builder(this).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.notification_multi)).setSmallIcon(R.drawable.notification_icon).setContentTitle(""String_Node_Str"").setContentText(subject).setTicker(message).setAutoCancel(true).setStyle(inboxStyle);
  }
  if (sound)   mBuilder.setSound(Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.notification));
  if (vibrate)   mBuilder.setVibrate(new long[]{500,500,500});
  if (light)   mBuilder.setLights(0xff0000ff,1000,5000);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_UPDATE_CURRENT);
  mBuilder.setContentIntent(pendingIntent);
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.notify(notificationId,mBuilder.build());
  broadcastNewNotification();
}",0.9787521585704632
14944,"/** 
 * Sign out from all accounts by clearing out the password, which will require user to sign in again
 */
public static void signOut(Context context){
  NotificationUtils.unregisterPushNotificationsToken(context,GCMRegistrar.getRegistrationId(context));
  try {
    GCMRegistrar.checkDevice(context);
    GCMRegistrar.unregister(context);
  }
 catch (  Exception e) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
  editor.remove(WordPress.WPCOM_USERNAME_PREFERENCE);
  editor.remove(WordPress.WPCOM_PASSWORD_PREFERENCE);
  editor.remove(WordPress.ACCESS_TOKEN_PREFERENCE);
  editor.commit();
  wpDB.deactivateAccounts();
  wpDB.updateLastBlogId(-1);
  currentBlog=null;
  ReaderPrefs.reset();
  ReaderDatabase.reset();
  WordPress.wpDB.clearNotes();
  Intent broadcastIntent=new Intent();
  broadcastIntent.setAction(BROADCAST_ACTION_SIGNOUT);
  context.sendBroadcast(broadcastIntent);
}","/** 
 * Sign out from all accounts by clearing out the password, which will require user to sign in again
 */
public static void signOut(Context context){
  NotificationUtils.unregisterPushNotificationsToken(context,GCMRegistrar.getRegistrationId(context));
  try {
    GCMRegistrar.checkDevice(context);
    GCMRegistrar.unregister(context);
  }
 catch (  Exception e) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
  editor.remove(WordPress.WPCOM_USERNAME_PREFERENCE);
  editor.remove(WordPress.WPCOM_PASSWORD_PREFERENCE);
  editor.remove(WordPress.ACCESS_TOKEN_PREFERENCE);
  editor.commit();
  wpDB.deactivateAccounts();
  wpDB.updateLastBlogId(-1);
  currentBlog=null;
  UserPrefs.reset();
  ReaderDatabase.reset();
  WordPress.wpDB.clearNotes();
  Intent broadcastIntent=new Intent();
  broadcastIntent.setAction(BROADCAST_ACTION_SIGNOUT);
  context.sendBroadcast(broadcastIntent);
}",0.9970326409495548
14945,"@Override public void onResponse(JSONObject jsonObject){
  WPComLoginActivity.this.setResult(RESULT_OK);
  finish();
}","@Override public void onResponse(JSONObject jsonObject){
  WPComLoginActivity.this.setResult(RESULT_OK);
  ReaderUserActions.updateCurrentUser(jsonObject);
  finish();
}",0.8222996515679443
14946,"@Override protected void onPostExecute(Boolean isSignedIn){
  if (isSignedIn && !isFinishing()) {
    if (!mIsJetpackAuthRequest) {
      WordPress.restClient.get(""String_Node_Str"",new RestRequest.Listener(){
        @Override public void onResponse(        JSONObject jsonObject){
          WPComLoginActivity.this.setResult(RESULT_OK);
          finish();
        }
      }
,null);
    }
 else {
      WPComLoginActivity.this.setResult(RESULT_OK);
      finish();
    }
  }
 else {
    Toast.makeText(getBaseContext(),getString(R.string.invalid_login),Toast.LENGTH_SHORT).show();
    mSignInButon.setEnabled(true);
    mSignInButon.setText(R.string.sign_in);
  }
}","@Override protected void onPostExecute(Boolean isSignedIn){
  if (isSignedIn && !isFinishing()) {
    if (!mIsJetpackAuthRequest) {
      WordPress.restClient.get(""String_Node_Str"",new RestRequest.Listener(){
        @Override public void onResponse(        JSONObject jsonObject){
          WPComLoginActivity.this.setResult(RESULT_OK);
          ReaderUserActions.updateCurrentUser(jsonObject);
          finish();
        }
      }
,null);
    }
 else {
      WPComLoginActivity.this.setResult(RESULT_OK);
      finish();
    }
  }
 else {
    Toast.makeText(getBaseContext(),getString(R.string.invalid_login),Toast.LENGTH_SHORT).show();
    mSignInButon.setEnabled(true);
    mSignInButon.setText(R.string.sign_in);
  }
}",0.9575844716031632
14947,"/** 
 * Rich Text Editor
 */
@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    int scrollThreshold=DisplayUtils.dpToPx(getActivity(),2);
    if (((mLastYPos - pos) > scrollThreshold) || ((pos - mLastYPos) > scrollThreshold))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (mActivity != null && mActivity.getSupportActionBar().isShowing()) {
      setContentEditingModeVisible(true);
      return false;
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      final Spannable s=mContentEditText.getText();
      if (s == null)       return false;
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        MediaFile mediaFile=span.getMediaFile();
        if (mediaFile == null)         return false;
        if (!mediaFile.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(mediaFile.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(mediaFile.getWidth());
          titleText.setText(mediaFile.getTitle());
          caption.setText(mediaFile.getCaption());
          featuredCheckBox.setChecked(mediaFile.isFeatured());
          if (mediaFile.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(mediaFile.isFeaturedInPost());
          alignmentSpinner.setSelection(mediaFile.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMinimumImageWitdh(getActivity(),span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (mediaFile.getWidth() != 0)           seekBar.setProgress(mediaFile.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(getActivity()).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              String title=(titleText.getText() != null) ? titleText.getText().toString() : ""String_Node_Str"";
              MediaFile mediaFile=span.getMediaFile();
              if (mediaFile == null)               return;
              mediaFile.setTitle(title);
              mediaFile.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              mediaFile.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              String captionText=(caption.getText() != null) ? caption.getText().toString() : ""String_Node_Str"";
              mediaFile.setCaption(captionText);
              mediaFile.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
                if (click_spans.length > 1) {
                  for (                  WPImageSpan verifySpan : click_spans) {
                    if (verifySpan != span) {
                      MediaFile verifySpanMediaFile=verifySpan.getMediaFile();
                      verifySpanMediaFile.setFeatured(false);
                      verifySpanMediaFile.setFeaturedInPost(false);
                    }
                  }
                }
              }
              mediaFile.setFeaturedInPost(featuredInPostCheckBox.isChecked());
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}","/** 
 * Rich Text Editor
 */
@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    int scrollThreshold=DisplayUtils.dpToPx(getActivity(),2);
    if (((mLastYPos - pos) > scrollThreshold) || ((pos - mLastYPos) > scrollThreshold))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (mActivity != null && mActivity.getSupportActionBar().isShowing()) {
      setContentEditingModeVisible(true);
      return false;
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      Spannable s=mContentEditText.getText();
      if (s == null)       return false;
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        MediaFile mediaFile=span.getMediaFile();
        if (mediaFile == null)         return false;
        if (!mediaFile.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(mediaFile.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(mediaFile.getWidth());
          titleText.setText(mediaFile.getTitle());
          caption.setText(mediaFile.getCaption());
          featuredCheckBox.setChecked(mediaFile.isFeatured());
          if (mediaFile.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(mediaFile.isFeaturedInPost());
          alignmentSpinner.setSelection(mediaFile.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMinimumImageWitdh(getActivity(),span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (mediaFile.getWidth() != 0)           seekBar.setProgress(mediaFile.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(getActivity()).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              String title=(titleText.getText() != null) ? titleText.getText().toString() : ""String_Node_Str"";
              MediaFile mediaFile=span.getMediaFile();
              if (mediaFile == null)               return;
              mediaFile.setTitle(title);
              mediaFile.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              mediaFile.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              String captionText=(caption.getText() != null) ? caption.getText().toString() : ""String_Node_Str"";
              mediaFile.setCaption(captionText);
              mediaFile.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                Spannable contentSpannable=mContentEditText.getText();
                WPImageSpan[] postImageSpans=contentSpannable.getSpans(0,contentSpannable.length(),WPImageSpan.class);
                if (postImageSpans.length > 1) {
                  for (                  WPImageSpan postImageSpan : postImageSpans) {
                    if (postImageSpan != span) {
                      MediaFile postMediaFile=postImageSpan.getMediaFile();
                      postMediaFile.setFeatured(false);
                      postMediaFile.setFeaturedInPost(false);
                      postMediaFile.save();
                    }
                  }
                }
              }
              mediaFile.setFeaturedInPost(featuredInPostCheckBox.isChecked());
              mediaFile.save();
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}",0.9607808755625694
14948,"public void setMimeType(String type){
  mimeType=type;
}","public void setMimeType(String type){
  mimeType=StringUtils.notNullStr(type);
}",0.8235294117647058
14949,"public String getMimeType(){
  return mimeType;
}","public String getMimeType(){
  return StringUtils.notNullStr(mimeType);
}",0.8032786885245902
14950,"public static WPImageSpan prepareWPImageSpan(Context context,String blogId,final String mediaId){
  Cursor cursor=WordPress.wpDB.getMediaFile(blogId,mediaId);
  if (cursor == null || !cursor.moveToFirst()) {
    if (cursor != null)     cursor.close();
    return null;
  }
  String url=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (url == null) {
    cursor.close();
    return null;
  }
  Uri uri=Uri.parse(url);
  WPImageSpan imageSpan=new WPImageSpan(context,R.drawable.remote_image,uri);
  MediaFile mediaFile=imageSpan.getMediaFile();
  mediaFile.setMediaId(mediaId);
  mediaFile.setCaption(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setDescription(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setTitle(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setWidth(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setHeight(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setMimeType(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setFileName(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setThumbnailURL(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setDateCreatedGMT(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  boolean isVideo=false;
  String mimeType=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (mimeType != null && mimeType.contains(""String_Node_Str""))   isVideo=true;
  mediaFile.setVideo(isVideo);
  cursor.close();
  return imageSpan;
}","public static WPImageSpan prepareWPImageSpan(Context context,String blogId,final String mediaId){
  Cursor cursor=WordPress.wpDB.getMediaFile(blogId,mediaId);
  if (cursor == null || !cursor.moveToFirst()) {
    if (cursor != null)     cursor.close();
    return null;
  }
  String url=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (url == null) {
    cursor.close();
    return null;
  }
  Uri uri=Uri.parse(url);
  WPImageSpan imageSpan=new WPImageSpan(context,R.drawable.remote_image,uri);
  MediaFile mediaFile=imageSpan.getMediaFile();
  mediaFile.setMediaId(mediaId);
  mediaFile.setCaption(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setDescription(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setTitle(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setWidth(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setHeight(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setMimeType(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setFileName(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setThumbnailURL(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setDateCreatedGMT(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  mediaFile.setVideo(mediaFile.getMimeType().contains(""String_Node_Str""));
  mediaFile.save();
  cursor.close();
  return imageSpan;
}",0.9266558966074312
14951,"public static void setWPImageSpanWidth(Context context,Uri curStream,WPImageSpan is){
  MediaFile mediaFile=is.getMediaFile();
  if (mediaFile != null)   mediaFile.setWidth(getMinimumImageWitdh(context,curStream));
}","public static void setWPImageSpanWidth(Context context,Uri curStream,WPImageSpan is){
  MediaFile mediaFile=is.getMediaFile();
  if (mediaFile != null)   mediaFile.setWidth(getMinimumImageWidth(context,curStream));
}",0.9907407407407408
14952,"/** 
 * Rich Text Editor
 */
@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    int scrollThreshold=DisplayUtils.dpToPx(getActivity(),2);
    if (((mLastYPos - pos) > scrollThreshold) || ((pos - mLastYPos) > scrollThreshold))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (mActivity != null && mActivity.getSupportActionBar().isShowing()) {
      setContentEditingModeVisible(true);
      return false;
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      Spannable s=mContentEditText.getText();
      if (s == null)       return false;
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        MediaFile mediaFile=span.getMediaFile();
        if (mediaFile == null)         return false;
        if (!mediaFile.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(mediaFile.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(mediaFile.getWidth());
          titleText.setText(mediaFile.getTitle());
          caption.setText(mediaFile.getCaption());
          featuredCheckBox.setChecked(mediaFile.isFeatured());
          if (mediaFile.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(mediaFile.isFeaturedInPost());
          alignmentSpinner.setSelection(mediaFile.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMinimumImageWitdh(getActivity(),span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (mediaFile.getWidth() != 0)           seekBar.setProgress(mediaFile.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(getActivity()).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              String title=(titleText.getText() != null) ? titleText.getText().toString() : ""String_Node_Str"";
              MediaFile mediaFile=span.getMediaFile();
              if (mediaFile == null)               return;
              mediaFile.setTitle(title);
              mediaFile.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              mediaFile.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              String captionText=(caption.getText() != null) ? caption.getText().toString() : ""String_Node_Str"";
              mediaFile.setCaption(captionText);
              mediaFile.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                Spannable contentSpannable=mContentEditText.getText();
                WPImageSpan[] postImageSpans=contentSpannable.getSpans(0,contentSpannable.length(),WPImageSpan.class);
                if (postImageSpans.length > 1) {
                  for (                  WPImageSpan postImageSpan : postImageSpans) {
                    if (postImageSpan != span) {
                      MediaFile postMediaFile=postImageSpan.getMediaFile();
                      postMediaFile.setFeatured(false);
                      postMediaFile.setFeaturedInPost(false);
                      postMediaFile.save();
                    }
                  }
                }
              }
              mediaFile.setFeaturedInPost(featuredInPostCheckBox.isChecked());
              mediaFile.save();
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}","/** 
 * Rich Text Editor
 */
@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    int scrollThreshold=DisplayUtils.dpToPx(getActivity(),2);
    if (((mLastYPos - pos) > scrollThreshold) || ((pos - mLastYPos) > scrollThreshold))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (mActivity != null && mActivity.getSupportActionBar().isShowing()) {
      setContentEditingModeVisible(true);
      return false;
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      Spannable s=mContentEditText.getText();
      if (s == null)       return false;
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        MediaFile mediaFile=span.getMediaFile();
        if (mediaFile == null)         return false;
        if (!mediaFile.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(mediaFile.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(mediaFile.getWidth());
          titleText.setText(mediaFile.getTitle());
          caption.setText(mediaFile.getCaption());
          featuredCheckBox.setChecked(mediaFile.isFeatured());
          if (mediaFile.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(mediaFile.isFeaturedInPost());
          alignmentSpinner.setSelection(mediaFile.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMinimumImageWidth(getActivity(),span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (mediaFile.getWidth() != 0)           seekBar.setProgress(mediaFile.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(getActivity()).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              String title=(titleText.getText() != null) ? titleText.getText().toString() : ""String_Node_Str"";
              MediaFile mediaFile=span.getMediaFile();
              if (mediaFile == null)               return;
              mediaFile.setTitle(title);
              mediaFile.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              mediaFile.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              String captionText=(caption.getText() != null) ? caption.getText().toString() : ""String_Node_Str"";
              mediaFile.setCaption(captionText);
              mediaFile.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                Spannable contentSpannable=mContentEditText.getText();
                WPImageSpan[] postImageSpans=contentSpannable.getSpans(0,contentSpannable.length(),WPImageSpan.class);
                if (postImageSpans.length > 1) {
                  for (                  WPImageSpan postImageSpan : postImageSpans) {
                    if (postImageSpan != span) {
                      MediaFile postMediaFile=postImageSpan.getMediaFile();
                      postMediaFile.setFeatured(false);
                      postMediaFile.setFeaturedInPost(false);
                      postMediaFile.save();
                    }
                  }
                }
              }
              mediaFile.setFeaturedInPost(featuredInPostCheckBox.isChecked());
              mediaFile.save();
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}",0.9997685185185186
14953,"public void savePostContent(boolean isAutoSave){
  Post post=mActivity.getPost();
  if (post == null)   return;
  String title=(mTitleEditText.getText() != null) ? mTitleEditText.getText().toString() : ""String_Node_Str"";
  String content;
  if (post.isLocalDraft()) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14 && e != null) {
      CharacterStyle[] characterStyles=e.getSpans(0,e.length(),CharacterStyle.class);
      for (      CharacterStyle characterStyle : characterStyles) {
        if (characterStyle.getClass().getName().equals(""String_Node_Str""))         e.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(e);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=(mContentEditText.getText() != null) ? mContentEditText.getText().toString() : ""String_Node_Str"";
  }
  String images=""String_Node_Str"";
  post.deleteMediaFiles();
  Editable s=mContentEditText.getText();
  if (!isAutoSave) {
    MediaGalleryImageSpan[] gallerySpans=s.getSpans(0,s.length(),MediaGalleryImageSpan.class);
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      int start=s.getSpanStart(gallerySpan);
      s.removeSpan(gallerySpan);
      s.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
    }
  }
  WPImageSpan[] imageSpans=s.getSpans(0,s.length(),WPImageSpan.class);
  if (imageSpans.length != 0) {
    for (    WPImageSpan wpIS : imageSpans) {
      images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
      MediaFile mediaFile=wpIS.getMediaFile();
      if (mediaFile == null)       continue;
      if (mediaFile.getMediaId() != null) {
        updateMediaFileOnServer(wpIS);
      }
 else {
        mediaFile.setFileName(wpIS.getImageSource().toString());
        mediaFile.setFilePath(wpIS.getImageSource().toString());
        mediaFile.save();
      }
      int tagStart=s.getSpanStart(wpIS);
      if (!isAutoSave) {
        s.removeSpan(wpIS);
        if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
          s.insert(tagStart,WPHtml.getContent(wpIS));
        }
 else {
          s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
        }
      }
    }
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMt_text_more(""String_Node_Str"");
  }
  post.setMediaPaths(images);
  if (!post.isLocalDraft())   post.setLocalChange(true);
  post.update();
}","public void savePostContent(boolean isAutoSave){
  Post post=mActivity.getPost();
  if (post == null)   return;
  String title=(mTitleEditText.getText() != null) ? mTitleEditText.getText().toString() : ""String_Node_Str"";
  String content;
  if (post.isLocalDraft()) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14 && e != null) {
      CharacterStyle[] characterStyles=e.getSpans(0,e.length(),CharacterStyle.class);
      for (      CharacterStyle characterStyle : characterStyles) {
        if (characterStyle.getClass().getName().equals(""String_Node_Str""))         e.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(e);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=(mContentEditText.getText() != null) ? mContentEditText.getText().toString() : ""String_Node_Str"";
  }
  String images=""String_Node_Str"";
  post.deleteMediaFiles();
  Editable s=mContentEditText.getText();
  if (!isAutoSave) {
    MediaGalleryImageSpan[] gallerySpans=s.getSpans(0,s.length(),MediaGalleryImageSpan.class);
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      int start=s.getSpanStart(gallerySpan);
      s.removeSpan(gallerySpan);
      s.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
    }
  }
  WPImageSpan[] imageSpans=s.getSpans(0,s.length(),WPImageSpan.class);
  if (imageSpans.length != 0) {
    for (    WPImageSpan wpIS : imageSpans) {
      images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
      MediaFile mediaFile=wpIS.getMediaFile();
      if (mediaFile == null)       continue;
      if (mediaFile.getMediaId() != null) {
        updateMediaFileOnServer(wpIS);
      }
 else {
        mediaFile.setFileName(wpIS.getImageSource().toString());
        mediaFile.setFilePath(wpIS.getImageSource().toString());
        mediaFile.save();
      }
      int tagStart=s.getSpanStart(wpIS);
      if (!isAutoSave) {
        s.removeSpan(wpIS);
        if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
          s.insert(tagStart,WPHtml.getContent(wpIS));
        }
 else {
          s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
        }
      }
      if (post.isLocalDraft())       content=WPHtml.toHtml(s);
 else       content=s.toString();
    }
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMt_text_more(""String_Node_Str"");
  }
  post.setMediaPaths(images);
  if (!post.isLocalDraft())   post.setLocalChange(true);
  post.update();
}",0.9847938548361812
14954,"private boolean mustPingPushNotificationsBackend(){
  if (WordPress.hasValidWPComCredentials(mContext) == false)   return false;
  if (background == false)   return false;
  if (lastPingDate == null)   return false;
  Date now=new Date();
  long nowInMilliseconds=now.getTime();
  long lastPingDateInMilliseconds=lastPingDate.getTime();
  int secondsPassed=(int)(nowInMilliseconds - lastPingDateInMilliseconds) / (1000);
  if (secondsPassed >= DEFAULT_TIMEOUT) {
    lastPingDate=now;
    return true;
  }
  return false;
}","private boolean mustPingPushNotificationsBackend(){
  if (WordPress.hasValidWPComCredentials(mContext) == false)   return false;
  if (background == false)   return false;
  background=false;
  if (lastPingDate == null)   return false;
  Date now=new Date();
  long nowInMilliseconds=now.getTime();
  long lastPingDateInMilliseconds=lastPingDate.getTime();
  int secondsPassed=(int)(nowInMilliseconds - lastPingDateInMilliseconds) / (1000);
  if (secondsPassed >= DEFAULT_TIMEOUT) {
    lastPingDate=now;
    return true;
  }
  return false;
}",0.9812382739212008
14955,"private void submitReply(){
  if (!hasActivity() || mIsSubmittingReply)   return;
  final EditText editComment=(EditText)getActivity().findViewById(R.id.edit_comment);
  final ProgressBar progress=(ProgressBar)getActivity().findViewById(R.id.progress_submit_comment);
  final ImageView imgSubmit=(ImageView)getActivity().findViewById(R.id.image_post_comment);
  final String replyText=EditTextUtils.getText(editComment);
  if (TextUtils.isEmpty(replyText))   return;
  editComment.setEnabled(false);
  EditTextUtils.hideSoftInput(editComment);
  imgSubmit.setVisibility(View.GONE);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsSubmittingReply=false;
      if (hasActivity()) {
        editComment.setEnabled(true);
        imgSubmit.setVisibility(View.VISIBLE);
        progress.setVisibility(View.GONE);
        if (succeeded) {
          if (mChangeListener != null)           mChangeListener.onCommentAdded();
          MessageBarUtils.showMessageBar(getActivity(),getString(R.string.note_reply_successful));
          editComment.setText(null);
        }
 else {
          ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
          editComment.requestFocus();
          InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
          imm.showSoftInput(editComment,InputMethodManager.SHOW_IMPLICIT);
        }
      }
    }
  }
;
  mIsSubmittingReply=true;
  CommentActions.submitReplyToComment(mAccountId,mComment,replyText,actionListener);
}","private void submitReply(){
  if (!hasActivity() || mIsSubmittingReply)   return;
  if (!checkConnection(getActivity()))   return;
  final EditText editComment=(EditText)getActivity().findViewById(R.id.edit_comment);
  final ProgressBar progress=(ProgressBar)getActivity().findViewById(R.id.progress_submit_comment);
  final ImageView imgSubmit=(ImageView)getActivity().findViewById(R.id.image_post_comment);
  final String replyText=EditTextUtils.getText(editComment);
  if (TextUtils.isEmpty(replyText))   return;
  editComment.setEnabled(false);
  EditTextUtils.hideSoftInput(editComment);
  imgSubmit.setVisibility(View.GONE);
  progress.setVisibility(View.VISIBLE);
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsSubmittingReply=false;
      if (hasActivity()) {
        editComment.setEnabled(true);
        imgSubmit.setVisibility(View.VISIBLE);
        progress.setVisibility(View.GONE);
        if (succeeded) {
          if (mChangeListener != null)           mChangeListener.onCommentAdded();
          MessageBarUtils.showMessageBar(getActivity(),getString(R.string.note_reply_successful));
          editComment.setText(null);
        }
 else {
          ToastUtils.showToast(getActivity(),R.string.reply_failed,ToastUtils.Duration.LONG);
          editComment.requestFocus();
          InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
          imm.showSoftInput(editComment,InputMethodManager.SHOW_IMPLICIT);
        }
      }
    }
  }
;
  mIsSubmittingReply=true;
  CommentActions.submitReplyToComment(mAccountId,mComment,replyText,actionListener);
}",0.9857847403539308
14956,"@Override public void run(){
  showReplyBox();
}","@Override public void run(){
  ReaderAniUtils.flyIn(txtBtnApprove);
}",0.7008547008547008
14957,"private void approveComment(){
  if (!hasActivity() || !hasComment() || mIsApprovingComment)   return;
  final TextView txtBtnApprove=(TextView)getActivity().findViewById(R.id.text_approve);
  ReaderAniUtils.flyOut(txtBtnApprove);
  Runnable runnable=new Runnable(){
    @Override public void run(){
      showReplyBox();
    }
  }
;
  MessageBarUtils.showMessageBar(getActivity(),getString(R.string.comment_approved),MessageBarUtils.MessageBarType.INFO,runnable);
  mIsApprovingComment=true;
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsApprovingComment=false;
      if (hasActivity()) {
        if (succeeded) {
          mComment.setStatus(CommentStatus.toString(CommentStatus.APPROVED));
          if (mChangeListener != null)           mChangeListener.onCommentModerated();
        }
 else {
          hideReplyBox(true);
          txtBtnApprove.setVisibility(View.VISIBLE);
          ToastUtils.showToast(getActivity(),R.string.error_moderate_comment,ToastUtils.Duration.LONG);
        }
      }
    }
  }
;
  CommentActions.moderateComment(mAccountId,mComment,CommentStatus.APPROVED,actionListener);
}","private void approveComment(){
  if (!hasActivity() || !hasComment() || mIsApprovingComment)   return;
  if (!checkConnection(getActivity()))   return;
  final TextView txtBtnApprove=(TextView)getActivity().findViewById(R.id.text_approve);
  ReaderAniUtils.flyOut(txtBtnApprove);
  MessageBarUtils.showMessageBar(getActivity(),getString(R.string.comment_approved));
  CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      mIsApprovingComment=false;
      if (hasActivity()) {
        if (succeeded) {
          showReplyBox();
          mComment.setStatus(CommentStatus.toString(CommentStatus.APPROVED));
          if (mChangeListener != null)           mChangeListener.onCommentModerated();
        }
 else {
          ToastUtils.showToast(getActivity(),R.string.error_moderate_comment,ToastUtils.Duration.LONG);
          new Handler().postDelayed(new Runnable(){
            @Override public void run(){
              ReaderAniUtils.flyIn(txtBtnApprove);
            }
          }
,500);
        }
      }
    }
  }
;
  mIsApprovingComment=true;
  CommentActions.moderateComment(mAccountId,mComment,CommentStatus.APPROVED,actionListener);
}",0.5660377358490566
14958,"public static ReaderPost fromJson(JSONObject json){
  if (json == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.blogUrl=JSONUtil.getString(json,""String_Node_Str"");
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  post.published=JSONUtil.getString(json,""String_Node_Str"");
  JSONObject jsonAuthor=json.optJSONObject(""String_Node_Str"");
  if (jsonAuthor != null) {
    post.authorName=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    post.postAvatar=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
  }
  final String dateForTimestamp;
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    dateForTimestamp=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    String likeDate=JSONUtil.getString(json,""String_Node_Str"");
    if (!TextUtils.isEmpty(likeDate)) {
      dateForTimestamp=likeDate;
    }
 else {
      dateForTimestamp=post.published;
    }
  }
  post.timestamp=DateTimeUtils.iso8601ToTimestamp(dateForTimestamp);
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null) {
    Iterator<String> it=jsonAttachments.keys();
    if (it != null && it.hasNext()) {
      JSONObject jsonFirstAttachment=jsonAttachments.optJSONObject(it.next());
      if (jsonFirstAttachment != null) {
        String thumbnail=JSONUtil.getString(jsonFirstAttachment,""String_Node_Str"");
        if (!TextUtils.isEmpty(thumbnail))         post.featuredImage=thumbnail;
        JSONObject jsonVideoPress=jsonFirstAttachment.optJSONObject(""String_Node_Str"");
        if (jsonVideoPress != null) {
          JSONObject jsonStdVideo=jsonVideoPress.optJSONObject(""String_Node_Str"");
          if (jsonStdVideo != null) {
            post.featuredVideo=JSONUtil.getString(jsonStdVideo,""String_Node_Str"");
            post.isVideoPress=true;
          }
        }
      }
    }
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      boolean isVideo=(type != null && type.equals(""String_Node_Str""));
      if (isVideo) {
        post.featuredVideo=mediaUrl;
      }
 else {
        post.featuredImage=mediaUrl;
      }
    }
    if (!post.hasFeaturedImage() && post.isWP())     post.featuredImage=findFeaturedImage(post.text);
  }
  if (!post.hasTitle() && post.hasExcerpt())   post.title=extractTitle(post.excerpt,50);
  return post;
}","public static ReaderPost fromJson(JSONObject json){
  if (json == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.blogUrl=JSONUtil.getString(json,""String_Node_Str"");
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  JSONObject jsonAuthor=json.optJSONObject(""String_Node_Str"");
  if (jsonAuthor != null) {
    post.authorName=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    post.postAvatar=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
  }
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    post.published=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    post.published=JSONUtil.getString(json,""String_Node_Str"");
  }
  String likeDate=JSONUtil.getString(json,""String_Node_Str"");
  if (!TextUtils.isEmpty(likeDate)) {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(likeDate);
  }
 else {
    post.timestamp=DateTimeUtils.iso8601ToTimestamp(post.published);
  }
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null) {
    Iterator<String> it=jsonAttachments.keys();
    if (it != null && it.hasNext()) {
      JSONObject jsonFirstAttachment=jsonAttachments.optJSONObject(it.next());
      if (jsonFirstAttachment != null) {
        String thumbnail=JSONUtil.getString(jsonFirstAttachment,""String_Node_Str"");
        if (!TextUtils.isEmpty(thumbnail))         post.featuredImage=thumbnail;
        JSONObject jsonVideoPress=jsonFirstAttachment.optJSONObject(""String_Node_Str"");
        if (jsonVideoPress != null) {
          JSONObject jsonStdVideo=jsonVideoPress.optJSONObject(""String_Node_Str"");
          if (jsonStdVideo != null) {
            post.featuredVideo=JSONUtil.getString(jsonStdVideo,""String_Node_Str"");
            post.isVideoPress=true;
          }
        }
      }
    }
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      boolean isVideo=(type != null && type.equals(""String_Node_Str""));
      if (isVideo) {
        post.featuredVideo=mediaUrl;
      }
 else {
        post.featuredImage=mediaUrl;
      }
    }
    if (!post.hasFeaturedImage() && post.isWP())     post.featuredImage=findFeaturedImage(post.text);
  }
  if (!post.hasTitle() && post.hasExcerpt())   post.title=extractTitle(post.excerpt,50);
  return post;
}",0.7967564739733194
14959,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mWebView.getSettings().setJavaScriptEnabled(true);
  mWebView.getSettings().setUserAgentString(Constants.USER_AGENT);
  mWebView.getSettings().setDisplayZoomControls(false);
  mWebView.setWebChromeClient(new WordPressWebChromeClient(this));
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  String url=getIntent().getStringExtra(URL_TO_LOAD);
  if (url != null) {
    loadUrl(url);
  }
}","@SuppressLint(""String_Node_Str"") @Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mWebView.getSettings().setJavaScriptEnabled(true);
  mWebView.getSettings().setUserAgentString(Constants.USER_AGENT);
  if (android.os.Build.VERSION.SDK_INT >= 11) {
    mWebView.getSettings().setDisplayZoomControls(false);
  }
  mWebView.setWebChromeClient(new WordPressWebChromeClient(this));
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  String url=getIntent().getStringExtra(URL_TO_LOAD);
  if (url != null) {
    loadUrl(url);
  }
}",0.9238845144356956
14960,"public static void initialize(){
  mixpanel=MixpanelAPI.getInstance(WordPress.getContext(),Config.MIXPANEL_TOKEN);
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(WordPress.getContext());
  int sessionCount=preferences.getInt(""String_Node_Str"",0);
  sessionCount++;
  SharedPreferences.Editor editor=preferences.edit();
  editor.putInt(""String_Node_Str"",sessionCount);
  editor.commit();
  boolean connected=WordPress.hasValidWPComCredentials(WordPress.getContext());
  int numBlogs=WordPress.wpDB.getAccounts().size();
  try {
    JSONObject properties=new JSONObject();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",sessionCount);
    properties.put(""String_Node_Str"",connected);
    properties.put(""String_Node_Str"",numBlogs);
    mixpanel.registerSuperProperties(properties);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  if (connected) {
    String username=preferences.getString(WordPress.WPCOM_USERNAME_PREFERENCE,null);
    mixpanel.identify(username);
    mixpanel.getPeople().increment(""String_Node_Str"",1);
    try {
      JSONObject jsonObj=new JSONObject();
      jsonObj.put(""String_Node_Str"",username);
      jsonObj.put(""String_Node_Str"",username);
      mixpanel.getPeople().set(jsonObj);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
}","public static void initialize(){
  mixpanel=MixpanelAPI.getInstance(WordPress.getContext(),Config.MIXPANEL_TOKEN);
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(WordPress.getContext());
  int sessionCount=preferences.getInt(""String_Node_Str"",0);
  sessionCount++;
  SharedPreferences.Editor editor=preferences.edit();
  editor.putInt(""String_Node_Str"",sessionCount);
  editor.commit();
  boolean connected=WordPress.hasValidWPComCredentials(WordPress.getContext());
  int numBlogs=WordPress.wpDB.getShownAccounts().size();
  try {
    JSONObject properties=new JSONObject();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",sessionCount);
    properties.put(""String_Node_Str"",connected);
    properties.put(""String_Node_Str"",numBlogs);
    mixpanel.registerSuperProperties(properties);
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  if (connected) {
    String username=preferences.getString(WordPress.WPCOM_USERNAME_PREFERENCE,null);
    mixpanel.identify(username);
    mixpanel.getPeople().increment(""String_Node_Str"",1);
    try {
      JSONObject jsonObj=new JSONObject();
      jsonObj.put(""String_Node_Str"",username);
      jsonObj.put(""String_Node_Str"",username);
      mixpanel.getPeople().set(jsonObj);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
}",0.9981877491844872
14961,"@Override public void onImeBack(WPEditText ctrl,String text){
  if (!mActivity.getSupportActionBar().isShowing())   setContentEditingModeVisible(false);
}","@Override public void onImeBack(WPEditText ctrl,String text){
  if (mRootView.getBottom() < mOriginalViewBottom && !mActivity.getSupportActionBar().isShowing())   setContentEditingModeVisible(false);
}",0.8676056338028169
14962,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mActivity=(NewEditPostActivity)getActivity();
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_edit_post_content,container,false);
  mFormatBar=(RelativeLayout)rootView.findViewById(R.id.format_bar);
  mTitleEditText=(EditText)rootView.findViewById(R.id.post_title);
  mContentEditText=(WPEditText)rootView.findViewById(R.id.post_content);
  mBoldToggleButton=(ToggleButton)rootView.findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)rootView.findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)rootView.findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)rootView.findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)rootView.findViewById(R.id.strike);
  mAddPictureButton=(ImageButton)rootView.findViewById(R.id.addPictureButton);
  Button linkButton=(Button)rootView.findViewById(R.id.link);
  Button moreButton=(Button)rootView.findViewById(R.id.more);
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnEditTextImeBackListener(new WPEditText.EditTextImeBackListener(){
    @Override public void onImeBack(    WPEditText ctrl,    String text){
      if (!mActivity.getSupportActionBar().isShowing())       setContentEditingModeVisible(false);
    }
  }
);
  mAddPictureButton.setOnClickListener(mFormatBarButtonClickListener);
  mBoldToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  linkButton.setOnClickListener(mFormatBarButtonClickListener);
  mEmToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  mUnderlineToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  mStrikeToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  mBquoteToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  moreButton.setOnClickListener(mFormatBarButtonClickListener);
  Post post=mActivity.getPost();
  if (post != null) {
    if (!TextUtils.isEmpty(post.getContent())) {
      if (post.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(post.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""),mActivity,post));
 else       mContentEditText.setText(post.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
    if (!TextUtils.isEmpty(post.getTitle())) {
      mTitleEditText.setText(post.getTitle());
    }
  }
  mContentEditText.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP && mActivity != null && mActivity.getSupportActionBar().isShowing()) {
        setContentEditingModeVisible(true);
      }
      return false;
    }
  }
);
  String action=mActivity.getIntent().getAction();
  int quickMediaType=-1;
  if (mActivity.getIntent().getExtras() != null)   quickMediaType=mActivity.getIntent().getExtras().getInt(""String_Node_Str"",-1);
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))   setPostContentFromShareAction();
 else   if (NEW_MEDIA_GALLERY.equals(action))   prepareMediaGallery();
 else   if (NEW_MEDIA_POST.equals(action))   prepareMediaPost();
 else   if (quickMediaType >= 0) {
    if (quickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)     launchCamera();
 else     if (quickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)     launchPictureLibrary();
 else     if (quickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)     launchVideoCamera();
 else     if (quickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)     launchVideoLibrary();
    if (post != null) {
      if (quickMediaType == Constants.QUICK_POST_PHOTO_CAMERA || quickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       post.setQuickPostType(Post.QUICK_MEDIA_TYPE_PHOTO);
 else       if (quickMediaType == Constants.QUICK_POST_VIDEO_CAMERA || quickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       post.setQuickPostType(Post.QUICK_MEDIA_TYPE_VIDEO);
    }
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mActivity=(NewEditPostActivity)getActivity();
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_edit_post_content,container,false);
  mFormatBar=(RelativeLayout)rootView.findViewById(R.id.format_bar);
  mTitleEditText=(EditText)rootView.findViewById(R.id.post_title);
  mContentEditText=(WPEditText)rootView.findViewById(R.id.post_content);
  mBoldToggleButton=(ToggleButton)rootView.findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)rootView.findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)rootView.findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)rootView.findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)rootView.findViewById(R.id.strike);
  mAddPictureButton=(ImageButton)rootView.findViewById(R.id.addPictureButton);
  Button linkButton=(Button)rootView.findViewById(R.id.link);
  Button moreButton=(Button)rootView.findViewById(R.id.more);
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnEditTextImeBackListener(new WPEditText.EditTextImeBackListener(){
    @Override public void onImeBack(    WPEditText ctrl,    String text){
      if (mRootView.getBottom() < mOriginalViewBottom && !mActivity.getSupportActionBar().isShowing())       setContentEditingModeVisible(false);
    }
  }
);
  mAddPictureButton.setOnClickListener(mFormatBarButtonClickListener);
  mBoldToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  linkButton.setOnClickListener(mFormatBarButtonClickListener);
  mEmToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  mUnderlineToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  mStrikeToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  mBquoteToggleButton.setOnClickListener(mFormatBarButtonClickListener);
  moreButton.setOnClickListener(mFormatBarButtonClickListener);
  Post post=mActivity.getPost();
  if (post != null) {
    if (!TextUtils.isEmpty(post.getContent())) {
      if (post.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(post.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""),mActivity,post));
 else       mContentEditText.setText(post.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
    if (!TextUtils.isEmpty(post.getTitle())) {
      mTitleEditText.setText(post.getTitle());
    }
  }
  String action=mActivity.getIntent().getAction();
  int quickMediaType=-1;
  if (mActivity.getIntent().getExtras() != null)   quickMediaType=mActivity.getIntent().getExtras().getInt(""String_Node_Str"",-1);
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))   setPostContentFromShareAction();
 else   if (NEW_MEDIA_GALLERY.equals(action))   prepareMediaGallery();
 else   if (NEW_MEDIA_POST.equals(action))   prepareMediaPost();
 else   if (quickMediaType >= 0) {
    if (quickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)     launchCamera();
 else     if (quickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)     launchPictureLibrary();
 else     if (quickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)     launchVideoCamera();
 else     if (quickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)     launchVideoLibrary();
    if (post != null) {
      if (quickMediaType == Constants.QUICK_POST_PHOTO_CAMERA || quickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       post.setQuickPostType(Post.QUICK_MEDIA_TYPE_PHOTO);
 else       if (quickMediaType == Constants.QUICK_POST_VIDEO_CAMERA || quickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       post.setQuickPostType(Post.QUICK_MEDIA_TYPE_VIDEO);
    }
  }
  return rootView;
}",0.9509462151394422
14963,"/** 
 * Rich Text Editor
 */
@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    if (((mLastYPos - pos) > 2.0f) || ((pos - mLastYPos) > 2.0f))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == 1 && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      final Spannable s=mContentEditText.getText();
      if (s == null)       return false;
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          featuredCheckBox.setChecked(span.isFeatured());
          if (span.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(span.isFeaturedInPost());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMinimumImageWitdh(getActivity(),span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(getActivity()).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              String title=(titleText.getText() != null) ? titleText.getText().toString() : ""String_Node_Str"";
              span.setTitle(title);
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              String captionText=(caption.getText() != null) ? caption.getText().toString() : ""String_Node_Str"";
              span.setCaption(captionText);
              span.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
                if (click_spans.length > 1) {
                  for (                  WPImageSpan verifySpan : click_spans) {
                    if (verifySpan != span) {
                      verifySpan.setFeatured(false);
                      verifySpan.setFeaturedInPost(false);
                    }
                  }
                }
              }
              span.setFeaturedInPost(featuredInPostCheckBox.isChecked());
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}","/** 
 * Rich Text Editor
 */
@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    if (((mLastYPos - pos) > 2.0f) || ((pos - mLastYPos) > 2.0f))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == MotionEvent.ACTION_UP && !mScrollDetected) {
    if (mActivity != null && mActivity.getSupportActionBar().isShowing()) {
      setContentEditingModeVisible(true);
      return false;
    }
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      final Spannable s=mContentEditText.getText();
      if (s == null)       return false;
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(getActivity());
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          if (alertView == null)           return false;
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          featuredCheckBox.setChecked(span.isFeatured());
          if (span.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(span.isFeaturedInPost());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          final int maxWidth=MediaUtils.getMinimumImageWitdh(getActivity(),span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(getActivity()).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              String title=(titleText.getText() != null) ? titleText.getText().toString() : ""String_Node_Str"";
              span.setTitle(title);
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              String captionText=(caption.getText() != null) ? caption.getText().toString() : ""String_Node_Str"";
              span.setCaption(captionText);
              span.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
                if (click_spans.length > 1) {
                  for (                  WPImageSpan verifySpan : click_spans) {
                    if (verifySpan != span) {
                      verifySpan.setFeatured(false);
                      verifySpan.setFeaturedInPost(false);
                    }
                  }
                }
              }
              span.setFeaturedInPost(featuredInPostCheckBox.isChecked());
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        int selectionStart=mContentEditText.getSelectionStart();
        if (selectionStart >= 0 && mContentEditText.getSelectionEnd() >= selectionStart)         mContentEditText.setSelection(selectionStart,mContentEditText.getSelectionEnd());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}",0.9894254045101288
14964,"@Override public boolean onKeyPreIme(int keyCode,KeyEvent event){
  if (event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    clearFocus();
    if (mOnImeBack != null)     mOnImeBack.onImeBack(this,this.getText().toString());
  }
  return super.onKeyPreIme(keyCode,event);
}","@Override public boolean onKeyPreIme(int keyCode,KeyEvent event){
  if (event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    if (mOnImeBack != null)     mOnImeBack.onImeBack(this,this.getText().toString());
  }
  return super.onKeyPreIme(keyCode,event);
}",0.9704918032786886
14965,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  ListView list=getListView();
  list.setDivider(getResources().getDrawable(R.drawable.list_divider));
  list.setDividerHeight(1);
  list.setHeaderDividersEnabled(false);
  if (getNote() == null)   return;
  LayoutInflater inflater=getActivity().getLayoutInflater();
  DetailHeader noteHeader=(DetailHeader)inflater.inflate(R.layout.notifications_detail_header,null);
  noteHeader.setText(getHeaderText());
  noteHeader.setBackgroundColor(getResources().getColor(R.color.light_gray));
  noteHeader.getTextView().setGravity(Gravity.CENTER_HORIZONTAL);
  noteHeader.setClickable(false);
  list.addHeaderView(noteHeader);
  DetailHeader noteFooter=(DetailHeader)inflater.inflate(R.layout.notifications_detail_header,null);
  JSONObject bodyObject=getNote().queryJSON(""String_Node_Str"",new JSONObject());
  String footerText=JSONUtil.getStringDecoded(bodyObject,""String_Node_Str"");
  if (!footerText.equals(""String_Node_Str"")) {
    noteFooter.setText(footerText);
    String footerUrl=JSONUtil.getString(bodyObject,""String_Node_Str"");
    if (!footerUrl.equals(""String_Node_Str"")) {
      noteFooter.setUrl(footerUrl);
    }
    list.addFooterView(noteFooter);
  }
  setListAdapter(new NoteAdapter());
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  ListView list=getListView();
  list.setDivider(getResources().getDrawable(R.drawable.list_divider));
  list.setDividerHeight(1);
  list.setHeaderDividersEnabled(false);
  if (getNote() == null)   return;
  LayoutInflater inflater=getActivity().getLayoutInflater();
  DetailHeader noteHeader=(DetailHeader)inflater.inflate(R.layout.notifications_detail_header,null);
  noteHeader.setText(getHeaderText());
  noteHeader.setBackgroundColor(getResources().getColor(R.color.light_gray));
  noteHeader.getTextView().setGravity(Gravity.CENTER_HORIZONTAL);
  noteHeader.setClickable(false);
  list.addHeaderView(noteHeader);
  DetailHeader noteFooter=(DetailHeader)inflater.inflate(R.layout.notifications_detail_header,null);
  JSONObject bodyObject=getNote().queryJSON(""String_Node_Str"",new JSONObject());
  String footerText=getFooterText();
  if (!footerText.equals(""String_Node_Str"")) {
    noteFooter.setText(footerText);
    String footerUrl=JSONUtil.getString(bodyObject,""String_Node_Str"");
    if (!footerUrl.equals(""String_Node_Str"")) {
      noteFooter.setUrl(footerUrl);
    }
    list.addFooterView(noteFooter);
  }
  setListAdapter(new NoteAdapter());
}",0.8088119590873328
14966,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  Bundle extras=getIntent().getExtras();
  if (extras != null && extras.getBoolean(NotificationsActivity.FROM_NOTIFICATION_EXTRA)) {
    startNotificationsActivity(extras);
    return;
  }
  showErrorDialogIfNeeded(extras);
  if (WordPress.shouldRestoreSelectedActivity && WordPress.getCurrentBlog() != null && !(this instanceof PagesActivity)) {
    new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new ApiHelper.RefreshBlogContentTask.Callback(){
      @Override public void onSuccess(){
        if (!isFinishing())         updateMenuDrawer();
      }
      @Override public void onFailure(){
      }
    }
).execute(false);
    WordPress.shouldRestoreSelectedActivity=false;
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
    int lastActivitySelection=settings.getInt(LAST_ACTIVITY_PREFERENCE,-1);
    if (lastActivitySelection > MenuDrawerItem.NO_ITEM_ID && lastActivitySelection != WPActionBarActivity.DASHBOARD_ACTIVITY) {
      Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
      while (itemIterator.hasNext()) {
        MenuDrawerItem item=itemIterator.next();
        if (item.hasItemId() && item.getItemId() == lastActivitySelection && !item.isSelected() && item.isVisible()) {
          mFirstLaunch=true;
          item.selectItem();
          finish();
          return;
        }
      }
    }
  }
  createMenuDrawer(R.layout.posts);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  postList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  postList.setListShown(true);
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
    showErrorDialogIfNeeded(extras);
  }
  if (isPage)   setTitle(getString(R.string.pages));
 else   setTitle(getString(R.string.posts));
  WordPress.currentPost=null;
  WordPress.setOnPostUploadedListener(new WordPress.OnPostUploadedListener(){
    @Override public void OnPostUploaded(){
      if (isFinishing())       return;
      checkForLocalChanges(false);
    }
  }
);
  if (savedInstanceState != null)   popPostDetail();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  Bundle extras=getIntent().getExtras();
  if (extras != null && extras.getBoolean(NotificationsActivity.FROM_NOTIFICATION_EXTRA)) {
    startNotificationsActivity(extras);
    return;
  }
  if (WordPress.shouldRestoreSelectedActivity && WordPress.getCurrentBlog() != null && !(this instanceof PagesActivity)) {
    new ApiHelper.RefreshBlogContentTask(this,WordPress.getCurrentBlog(),new ApiHelper.RefreshBlogContentTask.Callback(){
      @Override public void onSuccess(){
        if (!isFinishing())         updateMenuDrawer();
      }
      @Override public void onFailure(){
      }
    }
).execute(false);
    WordPress.shouldRestoreSelectedActivity=false;
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
    int lastActivitySelection=settings.getInt(LAST_ACTIVITY_PREFERENCE,-1);
    if (lastActivitySelection > MenuDrawerItem.NO_ITEM_ID && lastActivitySelection != WPActionBarActivity.DASHBOARD_ACTIVITY) {
      Iterator<MenuDrawerItem> itemIterator=mMenuItems.iterator();
      while (itemIterator.hasNext()) {
        MenuDrawerItem item=itemIterator.next();
        if (item.hasItemId() && item.getItemId() == lastActivitySelection && !item.isSelected() && item.isVisible()) {
          mFirstLaunch=true;
          item.selectItem();
          finish();
          return;
        }
      }
    }
  }
  createMenuDrawer(R.layout.posts);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  postList=(PostsListFragment)fm.findFragmentById(R.id.postList);
  postList.setListShown(true);
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
    showErrorDialogIfNeeded(extras);
  }
  if (isPage)   setTitle(getString(R.string.pages));
 else   setTitle(getString(R.string.posts));
  WordPress.currentPost=null;
  WordPress.setOnPostUploadedListener(new WordPress.OnPostUploadedListener(){
    @Override public void OnPostUploaded(){
      if (isFinishing())       return;
      checkForLocalChanges(false);
    }
  }
);
  if (savedInstanceState != null)   popPostDetail();
}",0.9928410717938227
14967,"@Override public void run(){
  loadPosts(loadMore);
}","@Override public void run(){
  loadPosts(mLoadMore);
}",0.97196261682243
14968,"public void refreshPosts(final boolean loadMore){
  if (!loadMore) {
    mOnRefreshListener.onRefresh(true);
    numRecords=20;
  }
  List<Object> apiArgs=new Vector<Object>();
  apiArgs.add(WordPress.currentBlog);
  apiArgs.add(isPage);
  apiArgs.add(numRecords);
  apiArgs.add(loadMore);
  getPostsTask=new getRecentPostsTask();
  getPostsTask.execute(apiArgs);
}","public void refreshPosts(final boolean loadMore){
  if (!loadMore) {
    mOnRefreshListener.onRefresh(true);
    numRecords=20;
  }
  List<Object> apiArgs=new Vector<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  apiArgs.add(isPage);
  apiArgs.add(numRecords);
  apiArgs.add(loadMore);
  getPostsTask=new getRecentPostsTask();
  getPostsTask.execute(apiArgs);
}",0.9904761904761904
14969,"@Override protected Boolean doInBackground(List<?>... args){
  boolean success=false;
  List<?> arguments=args[0];
  WordPress.currentBlog=(Blog)arguments.get(0);
  isPage=(Boolean)arguments.get(1);
  int recordCount=(Integer)arguments.get(2);
  loadMore=(Boolean)arguments.get(3);
  XMLRPCClient client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
  Object[] result=null;
  Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),recordCount};
  try {
    result=(Object[])client.call((isPage) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    if (result != null) {
      if (result.length > 0) {
        success=true;
        Map<?,?> contentHash=new HashMap<Object,Object>();
        List<Map<?,?>> dbVector=new Vector<Map<?,?>>();
        if (!loadMore) {
          WordPress.wpDB.deleteUploadedPosts(WordPress.currentBlog.getId(),isPage);
        }
        for (int ctr=0; ctr < result.length; ctr++) {
          Map<String,Object> dbValues=new HashMap<String,Object>();
          contentHash=(Map<?,?>)result[ctr];
          dbValues.put(""String_Node_Str"",WordPress.currentBlog.getBlogId());
          dbVector.add(ctr,contentHash);
        }
        WordPress.wpDB.savePosts(dbVector,WordPress.currentBlog.getId(),isPage);
      }
 else {
        if (mPostListAdapter != null) {
          if (mPostIDs.length == 2) {
            try {
              WordPress.wpDB.deleteUploadedPosts(WordPress.currentBlog.getId(),WordPress.currentPost.isPage());
              mOnPostActionListener.onPostAction(PostsActivity.POST_CLEAR,WordPress.currentPost);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
            WordPress.currentPost=null;
          }
        }
      }
    }
  }
 catch (  XMLRPCException e) {
    errorMsg=e.getMessage();
    if (errorMsg == null)     errorMsg=getResources().getString(R.string.error_generic);
  }
  return success;
}","@Override protected Boolean doInBackground(List<?>... args){
  boolean success=false;
  List<?> arguments=args[0];
  mBlog=(Blog)arguments.get(0);
  if (mBlog == null)   return false;
  mIsPage=(Boolean)arguments.get(1);
  int recordCount=(Integer)arguments.get(2);
  mLoadMore=(Boolean)arguments.get(3);
  XMLRPCClient client=new XMLRPCClient(mBlog.getUrl(),mBlog.getHttpuser(),mBlog.getHttppassword());
  Object[] params={mBlog.getBlogId(),mBlog.getUsername(),mBlog.getPassword(),recordCount};
  try {
    Object[] result=(Object[])client.call((mIsPage) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    if (result != null) {
      if (result.length > 0) {
        success=true;
        List<Map<?,?>> postsList=new ArrayList<Map<?,?>>();
        if (!mLoadMore) {
          WordPress.wpDB.deleteUploadedPosts(mBlog.getId(),mIsPage);
        }
        for (int ctr=0; ctr < result.length; ctr++) {
          Map<?,?> postMap=(Map<?,?>)result[ctr];
          postsList.add(ctr,postMap);
        }
        WordPress.wpDB.savePosts(postsList,mBlog.getId(),mIsPage);
      }
    }
  }
 catch (  XMLRPCException e) {
    errorMsg=e.getMessage();
    if (errorMsg == null)     errorMsg=getResources().getString(R.string.error_generic);
  }
  return success;
}",0.5841135608577469
14970,"protected void onPostExecute(Boolean result){
  if (isCancelled() || !result) {
    mOnRefreshListener.onRefresh(false);
    if (getActivity() == null)     return;
    if (errorMsg != ""String_Node_Str"" && !getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(String.format(getResources().getString(R.string.error_refresh),(isPage) ? getResources().getText(R.string.pages) : getResources().getText(R.string.posts)),errorMsg);
      try {
        alert.show(ft,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      errorMsg=""String_Node_Str"";
    }
    return;
  }
  if (loadMore)   switcher.showPrevious();
  mOnRefreshListener.onRefresh(false);
  if (isAdded()) {
    if (getActivity() != null) {
      getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          loadPosts(loadMore);
        }
      }
);
    }
  }
}","protected void onPostExecute(Boolean result){
  if (isCancelled() || !result) {
    mOnRefreshListener.onRefresh(false);
    if (getActivity() == null)     return;
    if (errorMsg != ""String_Node_Str"" && !getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(String.format(getResources().getString(R.string.error_refresh),(mIsPage) ? getResources().getText(R.string.pages) : getResources().getText(R.string.posts)),errorMsg);
      try {
        alert.show(ft,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      errorMsg=""String_Node_Str"";
    }
    return;
  }
  if (mLoadMore)   switcher.showPrevious();
  mOnRefreshListener.onRefresh(false);
  if (isAdded()) {
    if (getActivity() != null) {
      getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          loadPosts(mLoadMore);
        }
      }
);
    }
  }
}",0.9955467590301832
14971,"public String cleanXMLRPCErrorMessage(String message){
  if (message != null) {
    if (message.indexOf(""String_Node_Str"") > -1)     message=message.substring(message.indexOf(""String_Node_Str"") + 2,message.length());
    if (message.indexOf(""String_Node_Str"") > -1)     message=message.substring(0,message.indexOf(""String_Node_Str""));
    return message;
  }
 else {
    return ""String_Node_Str"";
  }
}","public String cleanXMLRPCErrorMessage(String message){
  if (message != null) {
    if (message.indexOf(""String_Node_Str"") > -1)     message=message.substring(message.indexOf(""String_Node_Str"") + 2,message.length());
    if (message.indexOf(""String_Node_Str"") > -1)     message=message.substring(0,message.indexOf(""String_Node_Str""));
    message=StringUtils.unescapeHTML(message);
    return message;
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9118683901292596
14972,"@Override public void bindView(View view,Context context,Cursor cursor){
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  boolean isLocalFile=MediaUtils.isLocalFile(state);
  TextView filenameView=(TextView)view.findViewById(R.id.media_grid_item_filename);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (filenameView != null) {
    filenameView.setText(""String_Node_Str"" + fileName);
  }
  TextView titleView=(TextView)view.findViewById(R.id.media_grid_item_name);
  String title=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (title == null || title.equals(""String_Node_Str""))   title=fileName;
  titleView.setText(title);
  TextView uploadDateView=(TextView)view.findViewById(R.id.media_grid_item_upload_date);
  if (uploadDateView != null) {
    String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
    uploadDateView.setText(""String_Node_Str"" + date);
  }
  final ImageView imageView=(ImageView)view.findViewById(R.id.media_grid_item_image);
  if (isLocalFile) {
  }
 else {
    loadNetworkImage(cursor,(NetworkImageView)imageView);
  }
  String fileType=null;
  String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (filePath == null)   filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  fileType=filePath.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
  TextView fileTypeView=(TextView)view.findViewById(R.id.media_grid_item_filetype);
  if (Utils.isXLarge(context)) {
    fileTypeView.setText(""String_Node_Str"" + fileType);
  }
 else {
    fileTypeView.setText(fileType);
  }
  TextView dimensionView=(TextView)view.findViewById(R.id.media_grid_item_dimension);
  if (dimensionView != null) {
    if (MediaUtils.isValidImage(filePath)) {
      int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      if (width > 0 && height > 0) {
        String dimensions=width + ""String_Node_Str"" + height;
        dimensionView.setText(""String_Node_Str"" + dimensions);
        dimensionView.setVisibility(View.VISIBLE);
      }
    }
 else {
      dimensionView.setVisibility(View.GONE);
    }
  }
}","@Override public void bindView(View view,Context context,Cursor cursor){
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  boolean isLocalFile=MediaUtils.isLocalFile(state);
  TextView filenameView=(TextView)view.findViewById(R.id.media_grid_item_filename);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (filenameView != null) {
    filenameView.setText(""String_Node_Str"" + fileName);
  }
  TextView titleView=(TextView)view.findViewById(R.id.media_grid_item_name);
  String title=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (title == null || title.equals(""String_Node_Str""))   title=fileName;
  titleView.setText(title);
  TextView uploadDateView=(TextView)view.findViewById(R.id.media_grid_item_upload_date);
  if (uploadDateView != null) {
    String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
    uploadDateView.setText(""String_Node_Str"" + date);
  }
  final ImageView imageView=(ImageView)view.findViewById(R.id.media_grid_item_image);
  if (isLocalFile) {
  }
 else {
    loadNetworkImage(cursor,(NetworkImageView)imageView);
  }
  String fileType=null;
  String filePath=StringUtils.notNullStr(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  if (filePath.isEmpty())   filePath=StringUtils.notNullStr(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  fileType=filePath.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
  TextView fileTypeView=(TextView)view.findViewById(R.id.media_grid_item_filetype);
  if (Utils.isXLarge(context)) {
    fileTypeView.setText(""String_Node_Str"" + fileType);
  }
 else {
    fileTypeView.setText(fileType);
  }
  TextView dimensionView=(TextView)view.findViewById(R.id.media_grid_item_dimension);
  if (dimensionView != null) {
    if (MediaUtils.isValidImage(filePath)) {
      int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      if (width > 0 && height > 0) {
        String dimensions=width + ""String_Node_Str"" + height;
        dimensionView.setText(""String_Node_Str"" + dimensions);
        dimensionView.setVisibility(View.VISIBLE);
      }
    }
 else {
      dimensionView.setVisibility(View.GONE);
    }
  }
}",0.9856020942408376
14973,"@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,PostsActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  notificationIntent.setAction(""String_Node_Str"");
  notificationIntent.addCategory(""String_Node_Str"");
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=(new Random()).nextInt() + Integer.valueOf(post.getBlogID());
  nm.notify(notificationID,n);
  if (post.getPost_status() == null) {
    post.setPost_status(""String_Node_Str"");
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (x == 0)     descriptionContent=post.getDescription();
 else     moreContent=post.getMt_text_more();
    Matcher matcher;
    if (x == 0) {
      matcher=pattern.matcher(descriptionContent);
    }
 else {
      matcher=pattern.matcher(moreContent);
    }
    List<String> imageTags=new ArrayList<String>();
    while (matcher.find()) {
      imageTags.add(matcher.group());
    }
    for (    String tag : imageTags) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(tag);
      String imgPath=""String_Node_Str"";
      if (m.find()) {
        imgPath=m.group(1);
        if (!imgPath.equals(""String_Node_Str"")) {
          MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
          if (mf != null) {
            String imgHTML=uploadMediaFile(mf);
            if (imgHTML != null) {
              if (x == 0) {
                descriptionContent=descriptionContent.replace(tag,imgHTML);
              }
 else {
                moreContent=moreContent.replace(tag,imgHTML);
              }
            }
 else {
              if (x == 0)               descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else               moreContent=moreContent.replace(tag,""String_Node_Str"");
              mediaError=true;
            }
          }
        }
      }
    }
  }
  if (mediaError)   return false;
  JSONArray categoriesJsonArray=post.getJSONCategories();
  String[] theCategories=null;
  if (categoriesJsonArray != null) {
    theCategories=new String[categoriesJsonArray.length()];
    for (int i=0; i < categoriesJsonArray.length(); i++) {
      try {
        theCategories[i]=TextUtils.htmlEncode(categoriesJsonArray.getString(i));
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage() && post.isLocalDraft()) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String tagline=""String_Node_Str"";
    if (prefs.getBoolean(""String_Node_Str"",false)) {
      tagline=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      if (tagline != null) {
        String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
        if (moreContent == ""String_Node_Str"")         descriptionContent+=tag;
 else         moreContent+=tag;
      }
    }
  }
  if (!post.isPage()) {
    if (!post.getWP_post_format().equals(""String_Node_Str"")) {
      if (!post.getWP_post_format().equals(""String_Node_Str"")) {
        contentStruct.put(""String_Node_Str"",post.getWP_post_format());
      }
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.getTitle());
  long pubDate=post.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    post.setMt_text_more(""String_Node_Str"");
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage()) {
    if (post.getMt_keywords() != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.getMt_keywords());
    }
    if (theCategories != null && theCategories.length > 0)     contentStruct.put(""String_Node_Str"",theCategories);
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",post.getPost_status());
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage()) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      Map<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      Map<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      Map<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (featuredImageID != -1)   contentStruct.put(""String_Node_Str"",featuredImageID);
  XMLRPCClient client=new XMLRPCClient(post.getBlog().getUrl(),post.getBlog().getHttpuser(),post.getBlog().getHttppassword());
  if (post.getQuickPostType() != null)   client.addQuickPostHeader(post.getQuickPostType());
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.getWP_password() != null) {
    contentStruct.put(""String_Node_Str"",post.getWP_password());
  }
  Object[] params;
  if (post.isLocalDraft() && !post.isUploaded())   params=new Object[]{post.getBlog().getBlogId(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.isUploaded()) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=String.format(context.getResources().getText(R.string.error_upload).toString(),post.isPage() ? context.getResources().getText(R.string.page).toString() : context.getResources().getText(R.string.post).toString()) + ""String_Node_Str"" + cleanXMLRPCErrorMessage(e.getMessage());
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}","@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,PostsActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  notificationIntent.setAction(""String_Node_Str"");
  notificationIntent.addCategory(""String_Node_Str"");
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=(new Random()).nextInt() + Integer.valueOf(post.getBlogID());
  nm.notify(notificationID,n);
  if (post.getPost_status() == null) {
    post.setPost_status(""String_Node_Str"");
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (x == 0)     descriptionContent=post.getDescription();
 else     moreContent=post.getMt_text_more();
    Matcher matcher;
    if (x == 0) {
      matcher=pattern.matcher(descriptionContent);
    }
 else {
      matcher=pattern.matcher(moreContent);
    }
    List<String> imageTags=new ArrayList<String>();
    while (matcher.find()) {
      imageTags.add(matcher.group());
    }
    for (    String tag : imageTags) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(tag);
      String imgPath=""String_Node_Str"";
      if (m.find()) {
        imgPath=m.group(1);
        if (!imgPath.equals(""String_Node_Str"")) {
          MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
          if (mf != null) {
            String imgHTML=uploadMediaFile(mf);
            if (imgHTML != null) {
              if (x == 0) {
                descriptionContent=descriptionContent.replace(tag,imgHTML);
              }
 else {
                moreContent=moreContent.replace(tag,imgHTML);
              }
            }
 else {
              if (x == 0)               descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else               moreContent=moreContent.replace(tag,""String_Node_Str"");
              mediaError=true;
            }
          }
        }
      }
    }
  }
  if (mediaError)   return false;
  JSONArray categoriesJsonArray=post.getJSONCategories();
  String[] theCategories=null;
  if (categoriesJsonArray != null) {
    theCategories=new String[categoriesJsonArray.length()];
    for (int i=0; i < categoriesJsonArray.length(); i++) {
      try {
        theCategories[i]=TextUtils.htmlEncode(categoriesJsonArray.getString(i));
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage() && post.isLocalDraft()) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String tagline=""String_Node_Str"";
    if (prefs.getBoolean(""String_Node_Str"",false)) {
      tagline=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      if (tagline != null) {
        String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
        if (moreContent == ""String_Node_Str"")         descriptionContent+=tag;
 else         moreContent+=tag;
      }
    }
  }
  if (!post.isPage()) {
    if (!TextUtils.isEmpty(post.getWP_post_format())) {
      contentStruct.put(""String_Node_Str"",post.getWP_post_format());
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.getTitle());
  long pubDate=post.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    post.setMt_text_more(""String_Node_Str"");
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage()) {
    if (post.getMt_keywords() != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.getMt_keywords());
    }
    if (theCategories != null && theCategories.length > 0)     contentStruct.put(""String_Node_Str"",theCategories);
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",post.getPost_status());
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage()) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      Map<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      Map<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      Map<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (featuredImageID != -1)   contentStruct.put(""String_Node_Str"",featuredImageID);
  XMLRPCClient client=new XMLRPCClient(post.getBlog().getUrl(),post.getBlog().getHttpuser(),post.getBlog().getHttppassword());
  if (post.getQuickPostType() != null)   client.addQuickPostHeader(post.getQuickPostType());
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.getWP_password() != null) {
    contentStruct.put(""String_Node_Str"",post.getWP_password());
  }
  Object[] params;
  if (post.isLocalDraft() && !post.isUploaded())   params=new Object[]{post.getBlog().getBlogId(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.isUploaded()) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=String.format(context.getResources().getText(R.string.error_upload).toString(),post.isPage() ? context.getResources().getText(R.string.page).toString() : context.getResources().getText(R.string.post).toString()) + ""String_Node_Str"" + cleanXMLRPCErrorMessage(e.getMessage());
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}",0.9885467039959276
14974,"public void refreshMediaFromServer(int offset){
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    ApiHelper.SyncMediaLibraryTask.Callback callback=new ApiHelper.SyncMediaLibraryTask.Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mGridAdapter.setRefreshing(false);
              String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
              Cursor cursor=WordPress.wpDB.getMediaImagesForBlog(blogId,mFilteredItems);
              mGridAdapter.swapCursor(cursor);
            }
          }
);
        }
      }
      @Override public void onFailure(      int errorCode){
        if (errorCode == ApiHelper.SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP) {
          Toast.makeText(MediaGalleryPickerActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,MediaGridFragment.Filter.ALL,callback);
    getMediaTask.execute(apiArgs);
  }
}","public void refreshMediaFromServer(int offset){
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    ApiHelper.SyncMediaLibraryTask.Callback callback=new ApiHelper.SyncMediaLibraryTask.Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mGridAdapter.setRefreshing(false);
              String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
              Cursor cursor=WordPress.wpDB.getMediaImagesForBlog(blogId,mFilteredItems);
              mGridAdapter.swapCursor(cursor);
            }
          }
);
        }
      }
      @Override public void onFailure(      int errorCode){
        if (errorCode == ApiHelper.SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP || errorCode == SyncMediaLibraryTask.UNKNOWN_ERROR) {
          String errorMessage=errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP ? ""String_Node_Str"" : ""String_Node_Str"";
          Toast.makeText(MediaGalleryPickerActivity.this,errorMessage,Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (!isFinishing()) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,MediaGridFragment.Filter.ALL,callback);
    getMediaTask.execute(apiArgs);
  }
}",0.9503511746185516
14975,"@Override public void onFailure(int errorCode){
  if (errorCode == ApiHelper.SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP) {
    Toast.makeText(MediaGalleryPickerActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (!isFinishing()) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}","@Override public void onFailure(int errorCode){
  if (errorCode == ApiHelper.SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP || errorCode == SyncMediaLibraryTask.UNKNOWN_ERROR) {
    String errorMessage=errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP ? ""String_Node_Str"" : ""String_Node_Str"";
    Toast.makeText(MediaGalleryPickerActivity.this,errorMessage,Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (!isFinishing()) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}",0.8470407378939278
14976,"public void refreshMediaFromServer(int offset,final boolean auto){
  if (WordPress.getCurrentBlog() == null || mFilter == Filter.CUSTOM_DATE)   return;
  if (mSearchTerm != null && mSearchTerm.length() > 0)   return;
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mListener.onMediaItemListDownloadStart();
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    Callback callback=new Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              refreshSpinnerAdapter();
              setFilter(mFilter);
              if (!auto)               mGridView.setSelection(0);
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
      @Override public void onFailure(      int errorCode){
        if (errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP) {
          Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,mFilter,callback);
    getMediaTask.execute(apiArgs);
  }
}","public void refreshMediaFromServer(int offset,final boolean auto){
  if (WordPress.getCurrentBlog() == null || mFilter == Filter.CUSTOM_DATE)   return;
  if (mSearchTerm != null && mSearchTerm.length() > 0)   return;
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mListener.onMediaItemListDownloadStart();
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    Callback callback=new Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              refreshSpinnerAdapter();
              setFilter(mFilter);
              if (!auto)               mGridView.setSelection(0);
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
      @Override public void onFailure(      int errorCode){
        if (errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP || errorCode == SyncMediaLibraryTask.UNKNOWN_ERROR) {
          String errorMessage=errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP ? ""String_Node_Str"" : ""String_Node_Str"";
          Toast.makeText(getActivity(),errorMessage,Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,mFilter,callback);
    getMediaTask.execute(apiArgs);
  }
}",0.9513303049967552
14977,"@Override public void onFailure(int errorCode){
  if (errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (getActivity() != null && MediaGridFragment.this.isVisible()) {
    getActivity().runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mListener.onMediaItemListDownloaded();
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}","@Override public void onFailure(int errorCode){
  if (errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP || errorCode == SyncMediaLibraryTask.UNKNOWN_ERROR) {
    String errorMessage=errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP ? ""String_Node_Str"" : ""String_Node_Str"";
    Toast.makeText(getActivity(),errorMessage,Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (getActivity() != null && MediaGridFragment.this.isVisible()) {
    getActivity().runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mListener.onMediaItemListDownloaded();
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}",0.8634179821551132
14978,"public Theme getTheme(String blogId,String themeId){
  Cursor cursor=db.rawQuery(""String_Node_Str"" + THEMES_TABLE + ""String_Node_Str"",new String[]{blogId,themeId});
  if (cursor.moveToFirst()) {
    String name=cursor.getString(0);
    String description=cursor.getString(1);
    String screenshotURL=cursor.getString(2);
    String previewURL=cursor.getString(3);
    boolean isCurrent=cursor.getInt(4) == 1;
    boolean isPremium=cursor.getInt(5) == 1;
    String features=cursor.getString(6);
    Theme theme=new Theme();
    theme.setThemeId(themeId);
    theme.setName(name);
    theme.setDescription(description);
    theme.setScreenshotURL(screenshotURL);
    theme.setPreviewURL(previewURL);
    theme.setCurrent(isCurrent);
    theme.setPremium(isPremium);
    theme.setFeatures(features);
    cursor.close();
    return theme;
  }
 else {
    return null;
  }
}","public Theme getTheme(String blogId,String themeId){
  Cursor cursor=db.rawQuery(""String_Node_Str"" + THEMES_TABLE + ""String_Node_Str"",new String[]{blogId,themeId});
  if (cursor.moveToFirst()) {
    String name=cursor.getString(0);
    String description=cursor.getString(1);
    String screenshotURL=cursor.getString(2);
    String previewURL=cursor.getString(3);
    boolean isCurrent=cursor.getInt(4) == 1;
    boolean isPremium=cursor.getInt(5) == 1;
    String features=cursor.getString(6);
    Theme theme=new Theme();
    theme.setThemeId(themeId);
    theme.setName(name);
    theme.setDescription(description);
    theme.setScreenshotURL(screenshotURL);
    theme.setPreviewURL(previewURL);
    theme.setCurrent(isCurrent);
    theme.setPremium(isPremium);
    theme.setFeatures(features);
    cursor.close();
    return theme;
  }
 else {
    cursor.close();
    return null;
  }
}",0.9886492622020432
14979,"public MediaFile getMediaFile(String src,Post post){
  Cursor c=db.query(MEDIA_TABLE,null,""String_Node_Str"" + post.getId() + ""String_Node_Str""+ src+ ""String_Node_Str"",null,null,null,null);
  int numRows=c.getCount();
  c.moveToFirst();
  MediaFile mf=new MediaFile();
  if (numRows == 1) {
    mf.setPostID(c.getInt(1));
    mf.setFilePath(c.getString(2));
    mf.setFileName(c.getString(3));
    mf.setTitle(c.getString(4));
    mf.setDescription(c.getString(5));
    mf.setCaption(c.getString(6));
    mf.setHorizontalAlignment(c.getInt(7));
    mf.setWidth(c.getInt(8));
    mf.setHeight(c.getInt(9));
    mf.setMIMEType(c.getString(10));
    mf.setFeatured(c.getInt(11) > 0);
    mf.setVideo(c.getInt(12) > 0);
    mf.setFeaturedInPost(c.getInt(13) > 0);
    mf.setFileURL(c.getString(14));
    mf.setThumbnailURL(c.getString(15));
    mf.setMediaId(c.getString(16));
    mf.setBlogId(c.getString(17));
    mf.setDateCreatedGMT(c.getLong(18));
    mf.setUploadState(c.getString(19));
  }
 else {
    c.close();
    return null;
  }
  c.close();
  return mf;
}","public MediaFile getMediaFile(String src,Post post){
  Cursor c=db.query(MEDIA_TABLE,null,""String_Node_Str"" + post.getId() + ""String_Node_Str""+ src+ ""String_Node_Str"",null,null,null,null);
  int numRows=c.getCount();
  c.moveToFirst();
  MediaFile mf=new MediaFile();
  if (numRows >= 1) {
    mf.setPostID(c.getInt(1));
    mf.setFilePath(c.getString(2));
    mf.setFileName(c.getString(3));
    mf.setTitle(c.getString(4));
    mf.setDescription(c.getString(5));
    mf.setCaption(c.getString(6));
    mf.setHorizontalAlignment(c.getInt(7));
    mf.setWidth(c.getInt(8));
    mf.setHeight(c.getInt(9));
    mf.setMIMEType(c.getString(10));
    mf.setFeatured(c.getInt(11) > 0);
    mf.setVideo(c.getInt(12) > 0);
    mf.setFeaturedInPost(c.getInt(13) > 0);
    mf.setFileURL(c.getString(14));
    mf.setThumbnailURL(c.getString(15));
    mf.setMediaId(c.getString(16));
    mf.setBlogId(c.getString(17));
    mf.setDateCreatedGMT(c.getLong(18));
    mf.setUploadState(c.getString(19));
  }
 else {
    c.close();
    return null;
  }
  c.close();
  return mf;
}",0.9990592662276576
14980,"private WPImageSpan prepareWPImageSpan(String blogId,final String mediaId){
  Cursor cursor=WordPress.wpDB.getMediaFile(blogId,mediaId);
  if (cursor == null || !cursor.moveToFirst())   return null;
  String url=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (url == null)   return null;
  Uri uri=Uri.parse(url);
  WPImageSpan imageSpan=new WPImageSpan(EditPostActivity.this,R.drawable.remote_image,uri);
  imageSpan.setMediaId(mediaId);
  imageSpan.setCaption(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setDescription(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setTitle(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setWidth(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setHeight(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setMimeType(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setFileName(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setThumbnailURL(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setDateCreatedGMT(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  boolean isVideo=false;
  String mimeType=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (mimeType != null && mimeType.contains(""String_Node_Str""))   isVideo=true;
  imageSpan.setVideo(isVideo);
  cursor.close();
  return imageSpan;
}","private WPImageSpan prepareWPImageSpan(String blogId,final String mediaId){
  Cursor cursor=WordPress.wpDB.getMediaFile(blogId,mediaId);
  if (cursor == null || !cursor.moveToFirst()) {
    if (cursor != null)     cursor.close();
    return null;
  }
  String url=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (url == null) {
    cursor.close();
    return null;
  }
  Uri uri=Uri.parse(url);
  WPImageSpan imageSpan=new WPImageSpan(EditPostActivity.this,R.drawable.remote_image,uri);
  imageSpan.setMediaId(mediaId);
  imageSpan.setCaption(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setDescription(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setTitle(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setWidth(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setHeight(cursor.getInt(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setMimeType(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setFileName(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setThumbnailURL(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  imageSpan.setDateCreatedGMT(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  boolean isVideo=false;
  String mimeType=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (mimeType != null && mimeType.contains(""String_Node_Str""))   isVideo=true;
  imageSpan.setVideo(isVideo);
  cursor.close();
  return imageSpan;
}",0.9549966909331568
14981,"public Map<String,Object> getImageBytesForPath(String filePath,Context ctx){
  Uri curStream=null;
  String[] projection;
  Map<String,Object> mediaData=new HashMap<String,Object>();
  String title=""String_Node_Str"", orientation=""String_Node_Str"";
  byte[] bytes;
  if (filePath != null) {
    if (!filePath.contains(""String_Node_Str""))     curStream=Uri.parse(""String_Node_Str"" + filePath);
 else     curStream=Uri.parse(filePath);
  }
  if (curStream != null) {
    if (filePath.contains(""String_Node_Str"")) {
      int videoID=Integer.parseInt(curStream.getLastPathSegment());
      projection=new String[]{Video.Thumbnails._ID,Video.Thumbnails.DATA};
      ContentResolver crThumb=ctx.getContentResolver();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=1;
      Bitmap videoBitmap=MediaStore.Video.Thumbnails.getThumbnail(crThumb,videoID,MediaStore.Video.Thumbnails.MINI_KIND,options);
      ByteArrayOutputStream stream=new ByteArrayOutputStream();
      try {
        videoBitmap.compress(Bitmap.CompressFormat.PNG,100,stream);
        bytes=stream.toByteArray();
        title=""String_Node_Str"";
        videoBitmap=null;
      }
 catch (      Exception e) {
        return null;
      }
    }
 else {
      projection=new String[]{Images.Thumbnails._ID,Images.Thumbnails.DATA,Images.Media.ORIENTATION};
      String path=""String_Node_Str"";
      Cursor cur;
      try {
        cur=ctx.getContentResolver().query(curStream,projection,null,null,null);
      }
 catch (      Exception e1) {
        return null;
      }
      File jpeg=null;
      if (cur != null) {
        String thumbData=""String_Node_Str"";
        if (cur.moveToFirst()) {
          int dataColumn, orientationColumn;
          dataColumn=cur.getColumnIndex(Images.Media.DATA);
          thumbData=cur.getString(dataColumn);
          orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
          orientation=cur.getString(orientationColumn);
          if (orientation == null)           orientation=""String_Node_Str"";
        }
        if (thumbData == null) {
          return null;
        }
        jpeg=new File(thumbData);
        path=thumbData;
      }
 else {
        path=filePath.toString().replace(""String_Node_Str"",""String_Node_Str"");
        jpeg=new File(path);
      }
      title=jpeg.getName();
      try {
        bytes=new byte[(int)jpeg.length()];
      }
 catch (      Exception e) {
        return null;
      }
catch (      OutOfMemoryError e) {
        return null;
      }
      DataInputStream in=null;
      try {
        in=new DataInputStream(new FileInputStream(jpeg));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        return null;
      }
      try {
        in.readFully(bytes);
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
        return null;
      }
      title=jpeg.getName();
      if (orientation == ""String_Node_Str"") {
        orientation=getExifOrientation(path,orientation);
      }
    }
    mediaData.put(""String_Node_Str"",bytes);
    mediaData.put(""String_Node_Str"",title);
    mediaData.put(""String_Node_Str"",orientation);
    return mediaData;
  }
 else {
    return null;
  }
}","public Map<String,Object> getImageBytesForPath(String filePath,Context ctx){
  Uri curStream=null;
  String[] projection;
  Map<String,Object> mediaData=new HashMap<String,Object>();
  String title=""String_Node_Str"", orientation=""String_Node_Str"";
  byte[] bytes;
  if (filePath != null) {
    if (!filePath.contains(""String_Node_Str""))     curStream=Uri.parse(""String_Node_Str"" + filePath);
 else     curStream=Uri.parse(filePath);
  }
  if (curStream != null) {
    if (filePath.contains(""String_Node_Str"")) {
      int videoID=Integer.parseInt(curStream.getLastPathSegment());
      projection=new String[]{Video.Thumbnails._ID,Video.Thumbnails.DATA};
      ContentResolver crThumb=ctx.getContentResolver();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=1;
      Bitmap videoBitmap=MediaStore.Video.Thumbnails.getThumbnail(crThumb,videoID,MediaStore.Video.Thumbnails.MINI_KIND,options);
      ByteArrayOutputStream stream=new ByteArrayOutputStream();
      try {
        videoBitmap.compress(Bitmap.CompressFormat.PNG,100,stream);
        bytes=stream.toByteArray();
        title=""String_Node_Str"";
        videoBitmap=null;
      }
 catch (      Exception e) {
        return null;
      }
    }
 else {
      projection=new String[]{Images.Thumbnails._ID,Images.Thumbnails.DATA,Images.Media.ORIENTATION};
      String path=""String_Node_Str"";
      Cursor cur;
      try {
        cur=ctx.getContentResolver().query(curStream,projection,null,null,null);
      }
 catch (      Exception e1) {
        return null;
      }
      File jpeg=null;
      if (cur != null) {
        String thumbData=""String_Node_Str"";
        if (cur.moveToFirst()) {
          int dataColumn, orientationColumn;
          dataColumn=cur.getColumnIndex(Images.Media.DATA);
          thumbData=cur.getString(dataColumn);
          orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
          orientation=cur.getString(orientationColumn);
          if (orientation == null)           orientation=""String_Node_Str"";
        }
        cur.close();
        if (thumbData == null) {
          return null;
        }
        jpeg=new File(thumbData);
        path=thumbData;
      }
 else {
        path=filePath.toString().replace(""String_Node_Str"",""String_Node_Str"");
        jpeg=new File(path);
      }
      title=jpeg.getName();
      try {
        bytes=new byte[(int)jpeg.length()];
      }
 catch (      Exception e) {
        return null;
      }
catch (      OutOfMemoryError e) {
        return null;
      }
      DataInputStream in=null;
      try {
        in=new DataInputStream(new FileInputStream(jpeg));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        return null;
      }
      try {
        in.readFully(bytes);
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
        return null;
      }
      title=jpeg.getName();
      if (orientation == ""String_Node_Str"") {
        orientation=getExifOrientation(path,orientation);
      }
    }
    mediaData.put(""String_Node_Str"",bytes);
    mediaData.put(""String_Node_Str"",title);
    mediaData.put(""String_Node_Str"",orientation);
    return mediaData;
  }
 else {
    return null;
  }
}",0.9967707212055974
14982,"public static int[] getImageSize(Uri uri,Context context){
  String path=null;
  if (uri.toString().contains(""String_Node_Str"")) {
    String[] projection;
    Uri imgPath;
    projection=new String[]{Images.Media._ID,Images.Media.DATA};
    imgPath=uri;
    Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
    String thumbData=""String_Node_Str"";
    if (cur.moveToFirst()) {
      int dataColumn;
      dataColumn=cur.getColumnIndex(Images.Media.DATA);
      thumbData=cur.getString(dataColumn);
      path=thumbData;
    }
  }
 else {
    path=uri.toString().replace(""String_Node_Str"",""String_Node_Str"");
  }
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,options);
  int imageHeight=options.outHeight;
  int imageWidth=options.outWidth;
  int[] dimensions={imageWidth,imageHeight};
  return dimensions;
}","public static int[] getImageSize(Uri uri,Context context){
  String path=null;
  if (uri.toString().contains(""String_Node_Str"")) {
    String[] projection;
    Uri imgPath;
    projection=new String[]{Images.Media._ID,Images.Media.DATA};
    imgPath=uri;
    Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
    String thumbData=""String_Node_Str"";
    if (cur.moveToFirst()) {
      int dataColumn;
      dataColumn=cur.getColumnIndex(Images.Media.DATA);
      thumbData=cur.getString(dataColumn);
      path=thumbData;
    }
    cur.close();
  }
 else {
    path=uri.toString().replace(""String_Node_Str"",""String_Node_Str"");
  }
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,options);
  int imageHeight=options.outHeight;
  int imageWidth=options.outWidth;
  int[] dimensions={imageWidth,imageHeight};
  return dimensions;
}",0.9908651262761956
14983,"@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,PostsActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  notificationIntent.setAction(""String_Node_Str"");
  notificationIntent.addCategory(""String_Node_Str"");
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=(new Random()).nextInt() + Integer.valueOf(post.getBlogID());
  nm.notify(notificationID,n);
  if (post.getPost_status() == null) {
    post.setPost_status(""String_Node_Str"");
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (post.isLocalDraft()) {
      if (x == 0)       s=(Spannable)WPHtml.fromHtml(post.getDescription(),context,post);
 else       s=(Spannable)WPHtml.fromHtml(post.getMt_text_more(),context,post);
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          String prompt=context.getResources().getText(R.string.uploading_media_item) + String.valueOf(i + 1);
          n.setLatestEventInfo(context,context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage,prompt,n.contentIntent);
          nm.notify(notificationID,n);
          WPImageSpan wpIS=click_spans[i];
          int start=s.getSpanStart(wpIS);
          int end=s.getSpanEnd(wpIS);
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          String imgHTML=uploadMediaFile(mf);
          if (imgHTML != null) {
            SpannableString ss=new SpannableString(imgHTML);
            s.setSpan(ss,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            s.removeSpan(wpIS);
          }
 else {
            s.removeSpan(wpIS);
            mediaError=true;
          }
        }
      }
      if (x == 0)       descriptionContent=WPHtml.toHtml(s);
 else       moreContent=WPHtml.toHtml(s);
    }
 else {
      Matcher matcher;
      if (x == 0) {
        descriptionContent=post.getDescription();
        matcher=pattern.matcher(descriptionContent);
      }
 else {
        moreContent=post.getMt_text_more();
        matcher=pattern.matcher(moreContent);
      }
      List<String> imageTags=new ArrayList<String>();
      while (matcher.find()) {
        imageTags.add(matcher.group());
      }
      for (      String tag : imageTags) {
        Pattern p=Pattern.compile(""String_Node_Str"");
        Matcher m=p.matcher(tag);
        String imgPath=""String_Node_Str"";
        if (m.find()) {
          imgPath=m.group(1);
          if (!imgPath.equals(""String_Node_Str"")) {
            MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
            if (mf != null) {
              String imgHTML=uploadMediaFile(mf);
              if (imgHTML != null) {
                if (x == 0) {
                  descriptionContent=descriptionContent.replace(tag,imgHTML);
                }
 else {
                  moreContent=moreContent.replace(tag,imgHTML);
                }
              }
 else {
                if (x == 0)                 descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else                 moreContent=moreContent.replace(tag,""String_Node_Str"");
                mediaError=true;
              }
            }
          }
        }
      }
    }
  }
  if (mediaError)   return false;
  JSONArray categoriesJsonArray=post.getJSONCategories();
  String[] theCategories=null;
  if (categoriesJsonArray != null) {
    theCategories=new String[categoriesJsonArray.length()];
    for (int i=0; i < categoriesJsonArray.length(); i++) {
      try {
        theCategories[i]=TextUtils.htmlEncode(categoriesJsonArray.getString(i));
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage() && post.isLocalDraft()) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String tagline=""String_Node_Str"";
    if (prefs.getBoolean(""String_Node_Str"",false)) {
      tagline=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      if (tagline != null) {
        String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
        if (moreContent == ""String_Node_Str"")         descriptionContent+=tag;
 else         moreContent+=tag;
      }
    }
    if (!post.getWP_post_format().equals(""String_Node_Str"")) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       contentStruct.put(""String_Node_Str"",post.getWP_post_format());
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.getTitle());
  long pubDate=post.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    post.setMt_text_more(""String_Node_Str"");
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage()) {
    if (post.getMt_keywords() != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.getMt_keywords());
    }
    if (theCategories != null && theCategories.length > 0)     contentStruct.put(""String_Node_Str"",theCategories);
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",post.getPost_status());
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage()) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      Map<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      Map<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      Map<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (featuredImageID != -1)   contentStruct.put(""String_Node_Str"",featuredImageID);
  XMLRPCClient client=new XMLRPCClient(post.getBlog().getUrl(),post.getBlog().getHttpuser(),post.getBlog().getHttppassword());
  if (post.getQuickPostType() != null)   client.addQuickPostHeader(post.getQuickPostType());
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.getWP_password() != null) {
    contentStruct.put(""String_Node_Str"",post.getWP_password());
  }
  Object[] params;
  if (post.isLocalDraft() && !post.isUploaded())   params=new Object[]{post.getBlog().getBlogId(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.isUploaded()) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=String.format(context.getResources().getText(R.string.error_upload).toString(),post.isPage() ? context.getResources().getText(R.string.page).toString() : context.getResources().getText(R.string.post).toString()) + ""String_Node_Str"" + cleanXMLRPCErrorMessage(e.getMessage());
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}","@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,PostsActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  notificationIntent.setAction(""String_Node_Str"");
  notificationIntent.addCategory(""String_Node_Str"");
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=(new Random()).nextInt() + Integer.valueOf(post.getBlogID());
  nm.notify(notificationID,n);
  if (post.getPost_status() == null) {
    post.setPost_status(""String_Node_Str"");
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (x == 0)     descriptionContent=post.getDescription();
 else     moreContent=post.getMt_text_more();
    Matcher matcher;
    if (x == 0) {
      matcher=pattern.matcher(descriptionContent);
    }
 else {
      matcher=pattern.matcher(moreContent);
    }
    List<String> imageTags=new ArrayList<String>();
    while (matcher.find()) {
      imageTags.add(matcher.group());
    }
    for (    String tag : imageTags) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(tag);
      String imgPath=""String_Node_Str"";
      if (m.find()) {
        imgPath=m.group(1);
        if (!imgPath.equals(""String_Node_Str"")) {
          MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
          if (mf != null) {
            String imgHTML=uploadMediaFile(mf);
            if (imgHTML != null) {
              if (x == 0) {
                descriptionContent=descriptionContent.replace(tag,imgHTML);
              }
 else {
                moreContent=moreContent.replace(tag,imgHTML);
              }
            }
 else {
              if (x == 0)               descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else               moreContent=moreContent.replace(tag,""String_Node_Str"");
              mediaError=true;
            }
          }
        }
      }
    }
  }
  if (mediaError)   return false;
  JSONArray categoriesJsonArray=post.getJSONCategories();
  String[] theCategories=null;
  if (categoriesJsonArray != null) {
    theCategories=new String[categoriesJsonArray.length()];
    for (int i=0; i < categoriesJsonArray.length(); i++) {
      try {
        theCategories[i]=TextUtils.htmlEncode(categoriesJsonArray.getString(i));
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage() && post.isLocalDraft()) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String tagline=""String_Node_Str"";
    if (prefs.getBoolean(""String_Node_Str"",false)) {
      tagline=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      if (tagline != null) {
        String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
        if (moreContent == ""String_Node_Str"")         descriptionContent+=tag;
 else         moreContent+=tag;
      }
    }
    if (!post.getWP_post_format().equals(""String_Node_Str"")) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       contentStruct.put(""String_Node_Str"",post.getWP_post_format());
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.getTitle());
  long pubDate=post.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    post.setMt_text_more(""String_Node_Str"");
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage()) {
    if (post.getMt_keywords() != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.getMt_keywords());
    }
    if (theCategories != null && theCategories.length > 0)     contentStruct.put(""String_Node_Str"",theCategories);
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",post.getPost_status());
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage()) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      Map<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      Map<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      Map<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (featuredImageID != -1)   contentStruct.put(""String_Node_Str"",featuredImageID);
  XMLRPCClient client=new XMLRPCClient(post.getBlog().getUrl(),post.getBlog().getHttpuser(),post.getBlog().getHttppassword());
  if (post.getQuickPostType() != null)   client.addQuickPostHeader(post.getQuickPostType());
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.getWP_password() != null) {
    contentStruct.put(""String_Node_Str"",post.getWP_password());
  }
  Object[] params;
  if (post.isLocalDraft() && !post.isUploaded())   params=new Object[]{post.getBlog().getBlogId(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.isUploaded()) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=String.format(context.getResources().getText(R.string.error_upload).toString(),post.isPage() ? context.getResources().getText(R.string.page).toString() : context.getResources().getText(R.string.post).toString()) + ""String_Node_Str"" + cleanXMLRPCErrorMessage(e.getMessage());
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}",0.7895247332686712
14984,"@Override protected void onPostExecute(Boolean postUploadedSuccessfully){
  if (postUploadedSuccessfully) {
    WordPress.postUploaded();
    nm.cancel(notificationID);
  }
 else {
    String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
    Intent notificationIntent=new Intent(context,(post.isPage()) ? PagesActivity.class : PostsActivity.class);
    notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
    notificationIntent.setAction(""String_Node_Str"");
    notificationIntent.addCategory(""String_Node_Str"");
    notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
    notificationIntent.putExtra(""String_Node_Str"",error);
    notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    n.flags|=Notification.FLAG_AUTO_CANCEL;
    String errorText=context.getResources().getText(R.string.upload_failed).toString();
    if (mediaError)     errorText=context.getResources().getText(R.string.media) + ""String_Node_Str"" + context.getResources().getText(R.string.error);
    n.setLatestEventInfo(context,(mediaError) ? errorText : context.getResources().getText(R.string.upload_failed),(mediaError) ? error : postOrPage + ""String_Node_Str"" + errorText+ ""String_Node_Str""+ error,pendingIntent);
    nm.notify(notificationID,n);
  }
  postUploaded();
}","@Override protected void onPostExecute(Boolean postUploadedSuccessfully){
  if (postUploadedSuccessfully) {
    WordPress.postUploaded();
    nm.cancel(notificationID);
    WordPress.wpDB.deleteMediaFilesForPost(post);
  }
 else {
    String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
    Intent notificationIntent=new Intent(context,(post.isPage()) ? PagesActivity.class : PostsActivity.class);
    notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
    notificationIntent.setAction(""String_Node_Str"");
    notificationIntent.addCategory(""String_Node_Str"");
    notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
    notificationIntent.putExtra(""String_Node_Str"",error);
    notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);
    n.flags|=Notification.FLAG_AUTO_CANCEL;
    String errorText=context.getResources().getText(R.string.upload_failed).toString();
    if (mediaError)     errorText=context.getResources().getText(R.string.media) + ""String_Node_Str"" + context.getResources().getText(R.string.error);
    n.setLatestEventInfo(context,(mediaError) ? errorText : context.getResources().getText(R.string.upload_failed),(mediaError) ? error : postOrPage + ""String_Node_Str"" + errorText+ ""String_Node_Str""+ error,pendingIntent);
    nm.notify(notificationID,n);
  }
  postUploaded();
}",0.9843847595252968
14985,"public void saveNotes(List<Note> notes){
  db.beginTransaction();
  try {
    for (    Note note : notes) {
      addNote(note,false);
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}","public void saveNotes(List<Note> notes){
  db.beginTransaction();
  try {
    for (    Note note : notes)     addNote(note,false);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}",0.976958525345622
14986,"private static ReaderPost getPostFromCursor(Cursor c){
  if (c == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=c.getLong(COL_POST_ID);
  post.blogId=c.getLong(COL_BLOG_ID);
  post.setPseudoId(c.getString(COL_PSEUDO_ID));
  post.setAuthorName(c.getString(COL_AUTHOR_NAME));
  post.setBlogName(c.getString(COL_BLOG_NAME));
  post.setBlogUrl(c.getString(COL_BLOG_URL));
  post.setExcerpt(c.getString(COL_EXCERPT));
  post.setFeaturedImage(c.getString(COL_FEATURED_IMAGE));
  post.setFeaturedVideo(c.getString(COL_FEATURED_VIDEO));
  post.setTitle(c.getString(COL_TITLE));
  post.setText(c.getString(COL_TEXT));
  post.setUrl(c.getString(COL_URL));
  post.setPostAvatar(c.getString(COL_POST_AVATAR));
  post.timestamp=c.getLong(COL_TIMESTAMP);
  post.setPublished(c.getString(COL_PUBLISHED));
  post.numReplies=c.getInt(COL_NUM_REPLIES);
  post.numLikes=c.getInt(COL_NUM_LIKES);
  post.isLikedByCurrentUser=SqlUtils.sqlToBool(c.getInt(COL_IS_LIKED));
  post.isFollowedByCurrentUser=SqlUtils.sqlToBool(c.getInt(COL_IS_FOLLOWED));
  post.isCommentsOpen=SqlUtils.sqlToBool(c.getInt(COL_IS_COMMENTS_OPEN));
  post.isRebloggedByCurrentUser=SqlUtils.sqlToBool(c.getInt(COL_IS_REBLOGGED));
  post.isExternal=SqlUtils.sqlToBool(c.getInt(COL_IS_EXTERNAL));
  post.isPrivate=SqlUtils.sqlToBool(c.getInt(COL_IS_PRIVATE));
  return post;
}","private static ReaderPost getPostFromCursor(Cursor c){
  if (c == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=c.getLong(COL_POST_ID);
  post.blogId=c.getLong(COL_BLOG_ID);
  post.setPseudoId(c.getString(COL_PSEUDO_ID));
  post.setAuthorName(c.getString(COL_AUTHOR_NAME));
  post.setBlogName(c.getString(COL_BLOG_NAME));
  post.setBlogUrl(c.getString(COL_BLOG_URL));
  post.setExcerpt(c.getString(COL_EXCERPT));
  post.setFeaturedImage(c.getString(COL_FEATURED_IMAGE));
  post.setFeaturedVideo(c.getString(COL_FEATURED_VIDEO));
  post.setTitle(c.getString(COL_TITLE));
  post.setText(c.getString(COL_TEXT));
  post.setUrl(c.getString(COL_URL));
  post.setPostAvatar(c.getString(COL_POST_AVATAR));
  post.timestamp=c.getLong(COL_TIMESTAMP);
  post.setPublished(c.getString(COL_PUBLISHED));
  post.numReplies=c.getInt(COL_NUM_REPLIES);
  post.numLikes=c.getInt(COL_NUM_LIKES);
  post.isLikedByCurrentUser=SqlUtils.sqlToBool(c.getInt(COL_IS_LIKED));
  post.isFollowedByCurrentUser=SqlUtils.sqlToBool(c.getInt(COL_IS_FOLLOWED));
  post.isCommentsOpen=SqlUtils.sqlToBool(c.getInt(COL_IS_COMMENTS_OPEN));
  post.isRebloggedByCurrentUser=SqlUtils.sqlToBool(c.getInt(COL_IS_REBLOGGED));
  post.isExternal=SqlUtils.sqlToBool(c.getInt(COL_IS_EXTERNAL));
  post.isPrivate=SqlUtils.sqlToBool(c.getInt(COL_IS_PRIVATE));
  post.isVideoPress=SqlUtils.sqlToBool(c.getInt(COL_IS_VIDEOPRESS));
  return post;
}",0.975797965626096
14987,"public static void addOrUpdatePosts(final String tagName,ReaderPostList posts){
  if (posts == null || posts.size() == 0)   return;
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  SQLiteStatement stmtPosts=db.compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str"");
  SQLiteStatement stmtTags=db.compileStatement(""String_Node_Str"");
  try {
    for (    ReaderPost post : posts) {
      stmtPosts.bindLong(1,post.postId);
      stmtPosts.bindLong(2,post.blogId);
      stmtPosts.bindString(3,post.getPseudoId());
      stmtPosts.bindString(4,post.getAuthorName());
      stmtPosts.bindString(5,post.getTitle());
      stmtPosts.bindString(6,post.getText());
      stmtPosts.bindString(7,post.getExcerpt());
      stmtPosts.bindString(8,post.getUrl());
      stmtPosts.bindString(9,post.getBlogUrl());
      stmtPosts.bindString(10,post.getBlogName());
      stmtPosts.bindString(11,post.getFeaturedImage());
      stmtPosts.bindString(12,post.getFeaturedVideo());
      stmtPosts.bindString(13,post.getPostAvatar());
      stmtPosts.bindLong(14,post.timestamp);
      stmtPosts.bindString(15,post.getPublished());
      stmtPosts.bindLong(16,post.numReplies);
      stmtPosts.bindLong(17,post.numLikes);
      stmtPosts.bindLong(18,SqlUtils.boolToSql(post.isLikedByCurrentUser));
      stmtPosts.bindLong(19,SqlUtils.boolToSql(post.isFollowedByCurrentUser));
      stmtPosts.bindLong(20,SqlUtils.boolToSql(post.isCommentsOpen));
      stmtPosts.bindLong(21,SqlUtils.boolToSql(post.isRebloggedByCurrentUser));
      stmtPosts.bindLong(22,SqlUtils.boolToSql(post.isExternal));
      stmtPosts.bindLong(23,SqlUtils.boolToSql(post.isPrivate));
      stmtPosts.execute();
      stmtPosts.clearBindings();
    }
    if (!TextUtils.isEmpty(tagName)) {
      for (      ReaderPost post : posts) {
        stmtTags.bindLong(1,post.postId);
        stmtTags.bindLong(2,post.blogId);
        stmtTags.bindString(3,post.getPseudoId());
        stmtTags.bindString(4,tagName);
        stmtTags.execute();
        stmtTags.clearBindings();
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    SqlUtils.closeStatement(stmtPosts);
    SqlUtils.closeStatement(stmtTags);
  }
}","public static void addOrUpdatePosts(final String tagName,ReaderPostList posts){
  if (posts == null || posts.size() == 0)   return;
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  db.beginTransaction();
  SQLiteStatement stmtPosts=db.compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str"");
  SQLiteStatement stmtTags=db.compileStatement(""String_Node_Str"");
  try {
    for (    ReaderPost post : posts) {
      stmtPosts.bindLong(1,post.postId);
      stmtPosts.bindLong(2,post.blogId);
      stmtPosts.bindString(3,post.getPseudoId());
      stmtPosts.bindString(4,post.getAuthorName());
      stmtPosts.bindString(5,post.getTitle());
      stmtPosts.bindString(6,post.getText());
      stmtPosts.bindString(7,post.getExcerpt());
      stmtPosts.bindString(8,post.getUrl());
      stmtPosts.bindString(9,post.getBlogUrl());
      stmtPosts.bindString(10,post.getBlogName());
      stmtPosts.bindString(11,post.getFeaturedImage());
      stmtPosts.bindString(12,post.getFeaturedVideo());
      stmtPosts.bindString(13,post.getPostAvatar());
      stmtPosts.bindLong(14,post.timestamp);
      stmtPosts.bindString(15,post.getPublished());
      stmtPosts.bindLong(16,post.numReplies);
      stmtPosts.bindLong(17,post.numLikes);
      stmtPosts.bindLong(18,SqlUtils.boolToSql(post.isLikedByCurrentUser));
      stmtPosts.bindLong(19,SqlUtils.boolToSql(post.isFollowedByCurrentUser));
      stmtPosts.bindLong(20,SqlUtils.boolToSql(post.isCommentsOpen));
      stmtPosts.bindLong(21,SqlUtils.boolToSql(post.isRebloggedByCurrentUser));
      stmtPosts.bindLong(22,SqlUtils.boolToSql(post.isExternal));
      stmtPosts.bindLong(23,SqlUtils.boolToSql(post.isPrivate));
      stmtPosts.bindLong(24,SqlUtils.boolToSql(post.isVideoPress));
      stmtPosts.execute();
      stmtPosts.clearBindings();
    }
    if (!TextUtils.isEmpty(tagName)) {
      for (      ReaderPost post : posts) {
        stmtTags.bindLong(1,post.postId);
        stmtTags.bindLong(2,post.blogId);
        stmtTags.bindString(3,post.getPseudoId());
        stmtTags.bindString(4,tagName);
        stmtTags.execute();
        stmtTags.clearBindings();
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    SqlUtils.closeStatement(stmtPosts);
    SqlUtils.closeStatement(stmtTags);
  }
}",0.9850877192982456
14988,"protected static void createTables(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","protected static void createTables(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9868875086266392
14989,"private static void resetColumnIndexes(Cursor c){
  COL_POST_ID=c.getColumnIndex(""String_Node_Str"");
  COL_BLOG_ID=c.getColumnIndex(""String_Node_Str"");
  COL_PSEUDO_ID=c.getColumnIndex(""String_Node_Str"");
  COL_AUTHOR_NAME=c.getColumnIndex(""String_Node_Str"");
  COL_BLOG_NAME=c.getColumnIndex(""String_Node_Str"");
  COL_BLOG_URL=c.getColumnIndex(""String_Node_Str"");
  COL_EXCERPT=c.getColumnIndex(""String_Node_Str"");
  COL_FEATURED_IMAGE=c.getColumnIndex(""String_Node_Str"");
  COL_FEATURED_VIDEO=c.getColumnIndex(""String_Node_Str"");
  COL_TITLE=c.getColumnIndex(""String_Node_Str"");
  COL_TEXT=c.getColumnIndex(""String_Node_Str"");
  COL_URL=c.getColumnIndex(""String_Node_Str"");
  COL_POST_AVATAR=c.getColumnIndex(""String_Node_Str"");
  COL_TIMESTAMP=c.getColumnIndex(""String_Node_Str"");
  COL_PUBLISHED=c.getColumnIndex(""String_Node_Str"");
  COL_NUM_REPLIES=c.getColumnIndex(""String_Node_Str"");
  COL_NUM_LIKES=c.getColumnIndex(""String_Node_Str"");
  COL_IS_LIKED=c.getColumnIndex(""String_Node_Str"");
  COL_IS_FOLLOWED=c.getColumnIndex(""String_Node_Str"");
  COL_IS_COMMENTS_OPEN=c.getColumnIndex(""String_Node_Str"");
  COL_IS_REBLOGGED=c.getColumnIndex(""String_Node_Str"");
  COL_IS_EXTERNAL=c.getColumnIndex(""String_Node_Str"");
  COL_IS_PRIVATE=c.getColumnIndex(""String_Node_Str"");
}","private static void resetColumnIndexes(Cursor c){
  COL_POST_ID=c.getColumnIndex(""String_Node_Str"");
  COL_BLOG_ID=c.getColumnIndex(""String_Node_Str"");
  COL_PSEUDO_ID=c.getColumnIndex(""String_Node_Str"");
  COL_AUTHOR_NAME=c.getColumnIndex(""String_Node_Str"");
  COL_BLOG_NAME=c.getColumnIndex(""String_Node_Str"");
  COL_BLOG_URL=c.getColumnIndex(""String_Node_Str"");
  COL_EXCERPT=c.getColumnIndex(""String_Node_Str"");
  COL_FEATURED_IMAGE=c.getColumnIndex(""String_Node_Str"");
  COL_FEATURED_VIDEO=c.getColumnIndex(""String_Node_Str"");
  COL_TITLE=c.getColumnIndex(""String_Node_Str"");
  COL_TEXT=c.getColumnIndex(""String_Node_Str"");
  COL_URL=c.getColumnIndex(""String_Node_Str"");
  COL_POST_AVATAR=c.getColumnIndex(""String_Node_Str"");
  COL_TIMESTAMP=c.getColumnIndex(""String_Node_Str"");
  COL_PUBLISHED=c.getColumnIndex(""String_Node_Str"");
  COL_NUM_REPLIES=c.getColumnIndex(""String_Node_Str"");
  COL_NUM_LIKES=c.getColumnIndex(""String_Node_Str"");
  COL_IS_LIKED=c.getColumnIndex(""String_Node_Str"");
  COL_IS_FOLLOWED=c.getColumnIndex(""String_Node_Str"");
  COL_IS_COMMENTS_OPEN=c.getColumnIndex(""String_Node_Str"");
  COL_IS_REBLOGGED=c.getColumnIndex(""String_Node_Str"");
  COL_IS_EXTERNAL=c.getColumnIndex(""String_Node_Str"");
  COL_IS_PRIVATE=c.getColumnIndex(""String_Node_Str"");
  COL_IS_VIDEOPRESS=c.getColumnIndex(""String_Node_Str"");
}",0.9781859931113662
14990,"/** 
 * pre-loads commonly-accessed fields - avoids performance hit of loading these fields inside an adapter's getView() TODO: Caching comment images
 */
protected void preloadContent(){
  if (isCommentType()) {
    mComment=Note.prepareHtml(getCommentText());
    getCommentPreview();
  }
  getSubject();
  getIconURL();
}","/** 
 * pre-loads commonly-accessed fields - avoids performance hit of loading these fields inside an adapter's getView()
 */
protected void preloadContent(){
  if (isCommentType()) {
    mComment=Note.prepareHtml(getCommentText());
    getCommentPreview();
  }
  getSubject();
  getIconURL();
}",0.9531502423263328
14991,"public static ReaderPost fromJson(JSONObject json){
  if (json == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.blogUrl=JSONUtil.getString(json,""String_Node_Str"");
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  post.published=JSONUtil.getString(json,""String_Node_Str"");
  JSONObject jsonAuthor=json.optJSONObject(""String_Node_Str"");
  if (jsonAuthor != null) {
    post.authorName=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    post.postAvatar=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
  }
  final String dateForTimestamp;
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    dateForTimestamp=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    String likeDate=JSONUtil.getString(json,""String_Node_Str"");
    if (!TextUtils.isEmpty(likeDate)) {
      dateForTimestamp=likeDate;
    }
 else {
      dateForTimestamp=post.published;
    }
  }
  post.timestamp=DateTimeUtils.iso8601ToTimestamp(dateForTimestamp);
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null) {
    Iterator<String> it=jsonAttachments.keys();
    if (it != null && it.hasNext()) {
      JSONObject jsonFirstAttachment=jsonAttachments.optJSONObject(it.next());
      if (jsonFirstAttachment != null) {
        String thumbnail=JSONUtil.getString(jsonFirstAttachment,""String_Node_Str"");
        if (!TextUtils.isEmpty(thumbnail))         post.featuredImage=thumbnail;
        JSONObject jsonVideoPress=jsonFirstAttachment.optJSONObject(""String_Node_Str"");
        if (jsonVideoPress != null) {
          JSONObject jsonStdVideo=jsonVideoPress.optJSONObject(""String_Node_Str"");
          if (jsonStdVideo != null)           post.featuredVideo=JSONUtil.getString(jsonStdVideo,""String_Node_Str"");
        }
      }
    }
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      boolean isVideo=(type != null && type.equals(""String_Node_Str""));
      if (isVideo) {
        post.featuredVideo=mediaUrl;
      }
 else {
        post.featuredImage=mediaUrl;
      }
    }
    if (!post.hasFeaturedImage() && post.isWP())     post.featuredImage=findFeaturedImage(post.text);
  }
  if (!post.hasTitle() && post.hasExcerpt())   post.title=extractTitle(post.excerpt,50);
  return post;
}","public static ReaderPost fromJson(JSONObject json){
  if (json == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReaderPost post=new ReaderPost();
  post.postId=json.optLong(""String_Node_Str"");
  post.blogId=json.optLong(""String_Node_Str"");
  post.pseudoId=JSONUtil.getString(json,""String_Node_Str"");
  post.excerpt=HtmlUtils.fastStripHtml(JSONUtil.getString(json,""String_Node_Str""));
  post.text=JSONUtil.getString(json,""String_Node_Str"");
  post.title=JSONUtil.getStringDecoded(json,""String_Node_Str"");
  post.url=JSONUtil.getString(json,""String_Node_Str"");
  post.blogUrl=JSONUtil.getString(json,""String_Node_Str"");
  post.numReplies=json.optInt(""String_Node_Str"");
  post.numLikes=json.optInt(""String_Node_Str"");
  post.isLikedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isFollowedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isRebloggedByCurrentUser=JSONUtil.getBool(json,""String_Node_Str"");
  post.isCommentsOpen=JSONUtil.getBool(json,""String_Node_Str"");
  post.isExternal=JSONUtil.getBool(json,""String_Node_Str"");
  post.isPrivate=JSONUtil.getBool(json,""String_Node_Str"");
  post.published=JSONUtil.getString(json,""String_Node_Str"");
  JSONObject jsonAuthor=json.optJSONObject(""String_Node_Str"");
  if (jsonAuthor != null) {
    post.authorName=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
    post.postAvatar=JSONUtil.getString(jsonAuthor,""String_Node_Str"");
  }
  final String dateForTimestamp;
  JSONObject jsonEditorial=json.optJSONObject(""String_Node_Str"");
  if (jsonEditorial != null) {
    post.blogId=jsonEditorial.optLong(""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(jsonEditorial,""String_Node_Str"");
    post.featuredImage=getImageUrlFromFeaturedImageUrl(JSONUtil.getString(jsonEditorial,""String_Node_Str""));
    dateForTimestamp=JSONUtil.getString(jsonEditorial,""String_Node_Str"");
  }
 else {
    post.featuredImage=JSONUtil.getString(json,""String_Node_Str"");
    post.blogName=JSONUtil.getStringDecoded(json,""String_Node_Str"");
    String likeDate=JSONUtil.getString(json,""String_Node_Str"");
    if (!TextUtils.isEmpty(likeDate)) {
      dateForTimestamp=likeDate;
    }
 else {
      dateForTimestamp=post.published;
    }
  }
  post.timestamp=DateTimeUtils.iso8601ToTimestamp(dateForTimestamp);
  JSONObject jsonAttachments=json.optJSONObject(""String_Node_Str"");
  if (jsonAttachments != null) {
    Iterator<String> it=jsonAttachments.keys();
    if (it != null && it.hasNext()) {
      JSONObject jsonFirstAttachment=jsonAttachments.optJSONObject(it.next());
      if (jsonFirstAttachment != null) {
        String thumbnail=JSONUtil.getString(jsonFirstAttachment,""String_Node_Str"");
        if (!TextUtils.isEmpty(thumbnail))         post.featuredImage=thumbnail;
        JSONObject jsonVideoPress=jsonFirstAttachment.optJSONObject(""String_Node_Str"");
        if (jsonVideoPress != null) {
          JSONObject jsonStdVideo=jsonVideoPress.optJSONObject(""String_Node_Str"");
          if (jsonStdVideo != null) {
            post.featuredVideo=JSONUtil.getString(jsonStdVideo,""String_Node_Str"");
            post.isVideoPress=true;
          }
        }
      }
    }
  }
  if (!post.hasFeaturedImage()) {
    JSONObject jsonMedia=json.optJSONObject(""String_Node_Str"");
    if (jsonMedia != null) {
      String mediaUrl=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      String type=JSONUtil.getString(jsonMedia,""String_Node_Str"");
      boolean isVideo=(type != null && type.equals(""String_Node_Str""));
      if (isVideo) {
        post.featuredVideo=mediaUrl;
      }
 else {
        post.featuredImage=mediaUrl;
      }
    }
    if (!post.hasFeaturedImage() && post.isWP())     post.featuredImage=findFeaturedImage(post.text);
  }
  if (!post.hasTitle() && post.hasExcerpt())   post.title=extractTitle(post.excerpt,50);
  return post;
}",0.9931972789115646
14992,"public void addAll(List<Note> notes){
  Collections.sort(notes,new Note.TimeStampComparator());
  if (notes.size() == 0) {
    mAllNotesLoaded=true;
    if (mProgressFooterView != null)     mProgressFooterView.setVisibility(View.GONE);
  }
 else {
    setNotifyOnChange(false);
    try {
      Iterator<Note> noteIterator=notes.iterator();
      while (noteIterator.hasNext())       add(noteIterator.next());
    }
  finally {
      notifyDataSetChanged();
    }
  }
}","public void addAll(List<Note> notes){
  Collections.sort(notes,new Note.TimeStampComparator());
  if (notes.size() == 0) {
    mAllNotesLoaded=true;
    if (mProgressFooterView != null)     mProgressFooterView.setVisibility(View.GONE);
  }
 else {
    setNotifyOnChange(false);
    try {
      Iterator<Note> noteIterator=notes.iterator();
      while (noteIterator.hasNext())       add(noteIterator.next());
    }
  finally {
      setNotifyOnChange(true);
    }
  }
}",0.9775880469583778
14993,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=super.getView(position,convertView,parent);
  final Note note=getItem(position);
  final TextView detailText=(TextView)view.findViewById(R.id.note_detail);
  final ProgressBar placeholderLoading=(ProgressBar)view.findViewById(R.id.placeholder_loading);
  final NetworkImageView avatarView=(NetworkImageView)view.findViewById(R.id.note_avatar);
  final ImageView iconView=(ImageView)view.findViewById(R.id.note_icon);
  final TextView unreadIndicator=(TextView)view.findViewById(R.id.unread_indicator);
  if (note.isCommentType()) {
    detailText.setText(note.getCommentPreview());
    detailText.setVisibility(View.VISIBLE);
  }
 else {
    detailText.setVisibility(View.GONE);
  }
  String avatarUrl=note.getIconURL();
  if (avatarUrl != null && avatarUrl.contains(""String_Node_Str""))   avatarUrl=avatarUrl.replace(""String_Node_Str"",""String_Node_Str"" + mAvatarSz);
  avatarView.setImageUrl(avatarUrl,WordPress.imageLoader);
  avatarView.setDefaultImageResId(R.drawable.placeholder);
  iconView.setImageDrawable(getDrawableForType(note.getType()));
  unreadIndicator.setVisibility(note.isUnread() ? View.VISIBLE : View.GONE);
  placeholderLoading.setVisibility(note.isPlaceholder() ? View.VISIBLE : View.GONE);
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=super.getView(position,convertView,parent);
  final Note note=getItem(position);
  final TextView detailText=(TextView)view.findViewById(R.id.note_detail);
  final ProgressBar placeholderLoading=(ProgressBar)view.findViewById(R.id.placeholder_loading);
  final NetworkImageView avatarView=(NetworkImageView)view.findViewById(R.id.note_avatar);
  final ImageView iconView=(ImageView)view.findViewById(R.id.note_icon);
  final TextView unreadIndicator=(TextView)view.findViewById(R.id.unread_indicator);
  if (note.isCommentType()) {
    detailText.setText(note.getCommentPreview());
    detailText.setVisibility(View.VISIBLE);
  }
 else {
    detailText.setVisibility(View.GONE);
  }
  String iconUrl=note.getIconURL();
  if (iconUrl != null && iconUrl.contains(""String_Node_Str""))   iconUrl=iconUrl.replace(""String_Node_Str"",""String_Node_Str"" + mAvatarSz);
  avatarView.setImageUrl(iconUrl,WordPress.imageLoader);
  avatarView.setDefaultImageResId(R.drawable.placeholder);
  iconView.setImageDrawable(getDrawableForType(note.getType()));
  unreadIndicator.setVisibility(note.isUnread() ? View.VISIBLE : View.GONE);
  placeholderLoading.setVisibility(note.isPlaceholder() ? View.VISIBLE : View.GONE);
  return view;
}",0.9771515613099772
14994,"private String getPostHtml(ReaderPost post){
  if (post == null)   return ""String_Node_Str"";
  final String content;
  if (post.hasText()) {
    content=post.getText();
  }
 else   if (post.hasFeaturedImage()) {
    content=String.format(""String_Node_Str"",post.getFeaturedImage());
  }
 else {
    content=""String_Node_Str"";
  }
  int maxImageWidth=getMaxImageWidth();
  int marginLarge=getResources().getDimensionPixelSize(R.dimen.reader_margin_large);
  int marginMedium=getResources().getDimensionPixelSize(R.dimen.reader_margin_medium);
  final String linkColor=HtmlUtils.colorResToHtmlColor(this,R.color.reader_hyperlink);
  final String greyLight=HtmlUtils.colorResToHtmlColor(this,R.color.grey_light);
  StringBuilder sbHtml=new StringBuilder(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(marginMedium).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(greyLight).append(""String_Node_Str"").append(""String_Node_Str"").append(marginLarge).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(linkColor).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(maxImageWidth).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(processVideos(content)).append(""String_Node_Str"");
  return sbHtml.toString();
}","private String getPostHtml(ReaderPost post){
  if (post == null)   return ""String_Node_Str"";
  String content;
  if (post.hasText()) {
    content=post.getText();
    if (post.isVideoPress)     content=makeVideoDiv(post.getFeaturedVideo(),post.getFeaturedImage()) + content;
  }
 else   if (post.hasFeaturedImage()) {
    content=String.format(""String_Node_Str"",post.getFeaturedImage());
  }
 else {
    content=""String_Node_Str"";
  }
  int maxImageWidth=getMaxImageWidth();
  int marginLarge=getResources().getDimensionPixelSize(R.dimen.reader_margin_large);
  int marginMedium=getResources().getDimensionPixelSize(R.dimen.reader_margin_medium);
  final String linkColor=HtmlUtils.colorResToHtmlColor(this,R.color.reader_hyperlink);
  final String greyLight=HtmlUtils.colorResToHtmlColor(this,R.color.grey_light);
  StringBuilder sbHtml=new StringBuilder(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(marginMedium).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(greyLight).append(""String_Node_Str"").append(""String_Node_Str"").append(marginLarge).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(linkColor).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(maxImageWidth).append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"");
  sbHtml.append(""String_Node_Str"").append(processVideos(content)).append(""String_Node_Str"");
  return sbHtml.toString();
}",0.9447743467933492
14995,"private String processVideos(String text){
  if (text == null)   return ""String_Node_Str"";
  int iFrameStart=text.indexOf(""String_Node_Str"");
  if (iFrameStart == -1)   return text;
  boolean usesSingleQuotes=text.contains(""String_Node_Str"");
  final int overlaySz=getResources().getDimensionPixelSize(R.dimen.reader_video_overlay_size) / 2;
  final int thumbWidth=getMaxImageWidth();
  final int thumbHeight=(int)(thumbWidth * 0.65f);
  final int overlayLeft=(thumbWidth / 2) - (overlaySz / 2);
  final int overlayTop=(thumbHeight / 2) - (overlaySz / 2);
  while (iFrameStart > -1) {
    int iFrameEnd=text.indexOf(""String_Node_Str"",iFrameStart);
    if (iFrameEnd == -1)     return text;
    int srcStart=text.indexOf(usesSingleQuotes ? ""String_Node_Str"" : ""String_Node_Str"",iFrameStart);
    if (srcStart == -1 || srcStart > iFrameEnd)     return text;
    int srcEnd=text.indexOf(usesSingleQuotes ? ""String_Node_Str"" : ""String_Node_Str"",srcStart + 5);
    if (srcEnd == -1 || srcEnd > iFrameEnd)     return text;
    String src=text.substring(srcStart + 5,srcEnd);
    boolean isVideo=(src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"") || src.contains(""String_Node_Str""));
    final String link;
    if (isVideo) {
      String thumbnailUrl=ReaderThumbnailTable.getThumbnailUrl(src);
      if (TextUtils.isEmpty(thumbnailUrl)) {
        link=String.format(""String_Node_Str"",src,overlaySz,overlaySz,OVERLAY_IMG);
      }
 else {
        link=""String_Node_Str"" + String.format(""String_Node_Str"",src,thumbnailUrl,thumbWidth,thumbHeight) + String.format(""String_Node_Str"",src,OVERLAY_IMG,overlaySz,overlaySz,overlayLeft,overlayTop)+ ""String_Node_Str"";
        mVideoThumbnailUrls.add(thumbnailUrl);
      }
      text=text.substring(0,iFrameStart) + link + text.substring(iFrameStart);
    }
 else {
      link=""String_Node_Str"";
    }
    iFrameStart=text.indexOf(""String_Node_Str"",iFrameEnd + link.length());
  }
  return text;
}","private String processVideos(String text){
  if (text == null)   return ""String_Node_Str"";
  int iFrameStart=text.indexOf(""String_Node_Str"");
  if (iFrameStart == -1)   return text;
  boolean usesSingleQuotes=text.contains(""String_Node_Str"");
  while (iFrameStart > -1) {
    int iFrameEnd=text.indexOf(""String_Node_Str"",iFrameStart);
    if (iFrameEnd == -1)     return text;
    int srcStart=text.indexOf(usesSingleQuotes ? ""String_Node_Str"" : ""String_Node_Str"",iFrameStart);
    if (srcStart == -1 || srcStart > iFrameEnd)     return text;
    int srcEnd=text.indexOf(usesSingleQuotes ? ""String_Node_Str"" : ""String_Node_Str"",srcStart + 5);
    if (srcEnd == -1 || srcEnd > iFrameEnd)     return text;
    String src=text.substring(srcStart + 5,srcEnd);
    boolean isVideo=(src.contains(""String_Node_Str"") || src.contains(""String_Node_Str"") || src.contains(""String_Node_Str""));
    final String videoDiv;
    if (isVideo) {
      String thumbnailUrl=ReaderThumbnailTable.getThumbnailUrl(src);
      videoDiv=makeVideoDiv(src,thumbnailUrl);
      if (!TextUtils.isEmpty(thumbnailUrl))       mVideoThumbnailUrls.add(thumbnailUrl);
      text=text.substring(0,iFrameStart) + videoDiv + text.substring(iFrameStart);
    }
 else {
      videoDiv=""String_Node_Str"";
    }
    iFrameStart=text.indexOf(""String_Node_Str"",iFrameEnd + videoDiv.length());
  }
  return text;
}",0.7768395657418576
14996,"private void showFormatBar(){
  mFormatBar.setVisibility(View.VISIBLE);
  AlphaAnimation fadeInAnimation=new AlphaAnimation(0.0f,1.0f);
  fadeInAnimation.setDuration(500);
  mFormatBar.startAnimation(fadeInAnimation);
}","private void showFormatBar(){
  if (mKeyboardShown && mEditContentHasFocus) {
    mFormatBar.setVisibility(View.VISIBLE);
    AlphaAnimation fadeInAnimation=new AlphaAnimation(0.0f,1.0f);
    fadeInAnimation.setDuration(500);
    mFormatBar.startAnimation(fadeInAnimation);
  }
}",0.7028112449799196
14997,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  ActionBar actionBar=getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayHomeAsUpEnabled(true);
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mCategories=new ArrayList<String>();
  mAutoSaveHandler=new Handler();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    setupTitleForShareAction();
  }
 else {
    initBlog();
    if (extras != null) {
      mAccountName=StringUtils.unescapeHTML(extras.getString(""String_Node_Str""));
      mPostID=extras.getLong(""String_Node_Str"");
      mLocalDraft=extras.getBoolean(""String_Node_Str"",false);
      mIsPage=extras.getBoolean(""String_Node_Str"",false);
      mIsNew=extras.getBoolean(""String_Node_Str"",false);
      if (savedInstanceState != null) {
        mCurrentActivityRequest=savedInstanceState.getInt(""String_Node_Str"");
        if (savedInstanceState.getString(""String_Node_Str"") != null)         mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
      }
 else {
        mQuickMediaType=extras.getInt(""String_Node_Str"",-1);
      }
      if (extras.getBoolean(""String_Node_Str"")) {
        mBlogID=extras.getInt(""String_Node_Str"");
      }
 else {
        mBlogID=WordPress.currentBlog.getId();
      }
      try {
        mBlog=new Blog(mBlogID);
        WordPress.currentBlog=mBlog;
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return;
      }
      if (!mIsNew) {
        try {
          mPost=new Post(mBlogID,mPostID,mIsPage);
          if (mPost == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=mPost;
            mOriginalPost=new Post(mBlogID,mPostID,mIsPage);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          finish();
        }
      }
    }
    if (mIsNew) {
      mLocalDraft=true;
      setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  mContentEditText=(WPEditText)findViewById(R.id.postContent);
  mTitleEditText=(EditText)findViewById(R.id.title);
  mExcerptEditText=(EditText)findViewById(R.id.postExcerpt);
  mPasswordEditText=(EditText)findViewById(R.id.post_password);
  mLocationText=(TextView)findViewById(R.id.locationText);
  mBoldToggleButton=(ToggleButton)findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)findViewById(R.id.strike);
  mAddPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  mPubDateButton=(Button)findViewById(R.id.pubDateButton);
  mPubDateText=(TextView)findViewById(R.id.pubDate);
  mLinkButton=(Button)findViewById(R.id.link);
  mMoreButton=(Button)findViewById(R.id.more);
  mStatusSpinner=(Spinner)findViewById(R.id.status);
  mTagsEditText=(EditText)findViewById(R.id.tags);
  mFormatBar=(RelativeLayout)findViewById(R.id.formatBar);
  ((TextView)findViewById(R.id.categoryLabel)).setText(getResources().getString(R.string.categories).toUpperCase());
  ((TextView)findViewById(R.id.statusLabel)).setText(getResources().getString(R.string.status).toUpperCase());
  ((TextView)findViewById(R.id.postFormatLabel)).setText(getResources().getString(R.string.post_format).toUpperCase());
  ((TextView)findViewById(R.id.pubDateLabel)).setText(getResources().getString(R.string.publish_date).toUpperCase());
  if (mIsPage) {
    mExcerptEditText.setVisibility(View.GONE);
    (findViewById(R.id.sectionTags)).setVisibility(View.GONE);
    (findViewById(R.id.sectionCategories)).setVisibility(View.GONE);
    (findViewById(R.id.sectionLocation)).setVisibility(View.GONE);
    (findViewById(R.id.postFormatLabel)).setVisibility(View.GONE);
    (findViewById(R.id.postFormat)).setVisibility(View.GONE);
  }
 else {
    if (mBlog.getPostFormats().equals(""String_Node_Str"")) {
      List<Object> args=new Vector<Object>();
      args.add(mBlog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      mPostFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      mPostFormats=defaultPostFormatTitles;
    }
 else {
      try {
        Gson gson=new Gson();
        Type type=new TypeToken<Map<String,String>>(){
        }
.getType();
        Map<String,String> jsonPostFormats=gson.fromJson(mBlog.getPostFormats(),type);
        mPostFormats=new String[jsonPostFormats.size()];
        mPostFormatTitles=new String[jsonPostFormats.size()];
        int i=0;
        for (        Map.Entry<String,String> entry : jsonPostFormats.entrySet()) {
          String key=entry.getKey();
          String val=entry.getValue();
          mPostFormats[i]=key;
          mPostFormatTitles[i]=StringEscapeUtils.unescapeHtml(val);
          i++;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,mPostFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!mIsNew) {
      try {
        if (!mPost.getWP_post_format().equals(""String_Node_Str""))         activePostFormat=mPost.getWP_post_format();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int i=0; i < mPostFormats.length; i++) {
      if (mPostFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
 else     if (NEW_MEDIA_GALLERY.equals(action))     prepareMediaGallery();
 else     if (NEW_MEDIA_POST.equals(action))     prepareMediaPost();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mStatusSpinner.setAdapter(adapter);
  getLocationProvider();
  if (mIsNew) {
    if (mQuickMediaType >= 0) {
      if (mQuickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)       launchCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       launchPictureLibrary();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)       launchVideoCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       launchVideoLibrary();
      mLocalDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    mTitleEditText.setText(mPost.getTitle());
    mExcerptEditText.setText(mPost.getMt_excerpt());
    if (mPost.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      mStatusSpinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!mPost.getMt_text_more().equals(""String_Node_Str"")) {
      if (mPost.isLocalDraft())       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
 else       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
    }
 else     contentHTML=mPost.getDescription();
    try {
      if (mPost.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPostActivity.this,mPost));
 else       mContentEditText.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    long pubDate=mPost.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPostActivity.this,pubDate,flags);
        mPubDateText.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (mPost.getWP_password() != null)     mPasswordEditText.setText(mPost.getWP_password());
    if (mPost.getPost_status() != null) {
      String status=mPost.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
    }
    if (!mIsPage) {
      if (mPost.getJSONCategories() != null) {
        mCategories=JSONUtil.fromJSONArrayToStringList(mPost.getJSONCategories());
      }
      Double latitude=mPost.getLatitude();
      Double longitude=mPost.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=mPost.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      mTagsEditText.setText(tags);
    }
  }
  populateSelectedCategories();
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnEditTextImeBackListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnFocusChangeListener(this);
  mAddPictureButton.setOnClickListener(this);
  mPubDateButton.setOnClickListener(this);
  mBoldToggleButton.setOnClickListener(this);
  mLinkButton.setOnClickListener(this);
  mEmToggleButton.setOnClickListener(this);
  mUnderlineToggleButton.setOnClickListener(this);
  mStrikeToggleButton.setOnClickListener(this);
  mBquoteToggleButton.setOnClickListener(this);
  mMoreButton.setOnClickListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  ActionBar actionBar=getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayHomeAsUpEnabled(true);
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mCategories=new ArrayList<String>();
  mAutoSaveHandler=new Handler();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    setupTitleForShareAction();
  }
 else {
    initBlog();
    if (extras != null) {
      mAccountName=StringUtils.unescapeHTML(extras.getString(""String_Node_Str""));
      mPostID=extras.getLong(""String_Node_Str"");
      mLocalDraft=extras.getBoolean(""String_Node_Str"",false);
      mIsPage=extras.getBoolean(""String_Node_Str"",false);
      mIsNew=extras.getBoolean(""String_Node_Str"",false);
      if (savedInstanceState != null) {
        mCurrentActivityRequest=savedInstanceState.getInt(""String_Node_Str"");
        if (savedInstanceState.getString(""String_Node_Str"") != null)         mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
      }
 else {
        mQuickMediaType=extras.getInt(""String_Node_Str"",-1);
      }
      if (extras.getBoolean(""String_Node_Str"")) {
        mBlogID=extras.getInt(""String_Node_Str"");
      }
 else {
        mBlogID=WordPress.currentBlog.getId();
      }
      try {
        mBlog=new Blog(mBlogID);
        WordPress.currentBlog=mBlog;
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return;
      }
      if (!mIsNew) {
        try {
          mPost=new Post(mBlogID,mPostID,mIsPage);
          if (mPost == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=mPost;
            mOriginalPost=new Post(mBlogID,mPostID,mIsPage);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          finish();
        }
      }
    }
    if (mIsNew) {
      mLocalDraft=true;
      setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(StringUtils.unescapeHTML(WordPress.getCurrentBlog().getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  mContentEditText=(WPEditText)findViewById(R.id.postContent);
  mTitleEditText=(EditText)findViewById(R.id.title);
  mExcerptEditText=(EditText)findViewById(R.id.postExcerpt);
  mPasswordEditText=(EditText)findViewById(R.id.post_password);
  mLocationText=(TextView)findViewById(R.id.locationText);
  mBoldToggleButton=(ToggleButton)findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)findViewById(R.id.strike);
  mAddPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  mPubDateButton=(Button)findViewById(R.id.pubDateButton);
  mPubDateText=(TextView)findViewById(R.id.pubDate);
  mLinkButton=(Button)findViewById(R.id.link);
  mMoreButton=(Button)findViewById(R.id.more);
  mStatusSpinner=(Spinner)findViewById(R.id.status);
  mTagsEditText=(EditText)findViewById(R.id.tags);
  mFormatBar=(RelativeLayout)findViewById(R.id.formatBar);
  ((TextView)findViewById(R.id.categoryLabel)).setText(getResources().getString(R.string.categories).toUpperCase());
  ((TextView)findViewById(R.id.statusLabel)).setText(getResources().getString(R.string.status).toUpperCase());
  ((TextView)findViewById(R.id.postFormatLabel)).setText(getResources().getString(R.string.post_format).toUpperCase());
  ((TextView)findViewById(R.id.pubDateLabel)).setText(getResources().getString(R.string.publish_date).toUpperCase());
  if (mIsPage) {
    mExcerptEditText.setVisibility(View.GONE);
    (findViewById(R.id.sectionTags)).setVisibility(View.GONE);
    (findViewById(R.id.sectionCategories)).setVisibility(View.GONE);
    (findViewById(R.id.sectionLocation)).setVisibility(View.GONE);
    (findViewById(R.id.postFormatLabel)).setVisibility(View.GONE);
    (findViewById(R.id.postFormat)).setVisibility(View.GONE);
  }
 else {
    if (mBlog.getPostFormats().equals(""String_Node_Str"")) {
      List<Object> args=new Vector<Object>();
      args.add(mBlog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      mPostFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      mPostFormats=defaultPostFormatTitles;
    }
 else {
      try {
        Gson gson=new Gson();
        Type type=new TypeToken<Map<String,String>>(){
        }
.getType();
        Map<String,String> jsonPostFormats=gson.fromJson(mBlog.getPostFormats(),type);
        mPostFormats=new String[jsonPostFormats.size()];
        mPostFormatTitles=new String[jsonPostFormats.size()];
        int i=0;
        for (        Map.Entry<String,String> entry : jsonPostFormats.entrySet()) {
          String key=entry.getKey();
          String val=entry.getValue();
          mPostFormats[i]=key;
          mPostFormatTitles[i]=StringEscapeUtils.unescapeHtml(val);
          i++;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,mPostFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!mIsNew) {
      try {
        if (!mPost.getWP_post_format().equals(""String_Node_Str""))         activePostFormat=mPost.getWP_post_format();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int i=0; i < mPostFormats.length; i++) {
      if (mPostFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
 else     if (NEW_MEDIA_GALLERY.equals(action))     prepareMediaGallery();
 else     if (NEW_MEDIA_POST.equals(action))     prepareMediaPost();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mStatusSpinner.setAdapter(adapter);
  getLocationProvider();
  if (mIsNew) {
    if (mQuickMediaType >= 0) {
      if (mQuickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)       launchCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       launchPictureLibrary();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)       launchVideoCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       launchVideoLibrary();
      mLocalDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    mTitleEditText.setText(mPost.getTitle());
    mExcerptEditText.setText(mPost.getMt_excerpt());
    if (mPost.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      mStatusSpinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!mPost.getMt_text_more().equals(""String_Node_Str"")) {
      if (mPost.isLocalDraft())       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
 else       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
    }
 else     contentHTML=mPost.getDescription();
    try {
      if (mPost.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPostActivity.this,mPost));
 else       mContentEditText.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    long pubDate=mPost.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPostActivity.this,pubDate,flags);
        mPubDateText.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (mPost.getWP_password() != null)     mPasswordEditText.setText(mPost.getWP_password());
    if (mPost.getPost_status() != null) {
      String status=mPost.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
    }
    if (!mIsPage) {
      if (mPost.getJSONCategories() != null) {
        mCategories=JSONUtil.fromJSONArrayToStringList(mPost.getJSONCategories());
      }
      Double latitude=mPost.getLatitude();
      Double longitude=mPost.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=mPost.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      mTagsEditText.setText(tags);
    }
  }
  populateSelectedCategories();
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnEditTextImeBackListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnFocusChangeListener(this);
  mAddPictureButton.setOnClickListener(this);
  mPubDateButton.setOnClickListener(this);
  mBoldToggleButton.setOnClickListener(this);
  mLinkButton.setOnClickListener(this);
  mEmToggleButton.setOnClickListener(this);
  mUnderlineToggleButton.setOnClickListener(this);
  mStrikeToggleButton.setOnClickListener(this);
  mBquoteToggleButton.setOnClickListener(this);
  mMoreButton.setOnClickListener(this);
  softKeyboardHook();
}",0.9990476190476192
14998,"@Override public boolean onTouch(View v,MotionEvent event){
  if (mFormatBar.getVisibility() != View.VISIBLE)   showFormatBar();
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    if (((mLastYPos - pos) > 2.0f) || ((pos - mLastYPos) > 2.0f))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == 1 && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      final Spannable s=mContentEditText.getText();
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(EditPostActivity.this);
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditPostActivity.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          featuredCheckBox.setChecked(span.isFeatured());
          if (span.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(span.isFeaturedInPost());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          final int maxWidth=getMinimumImageWitdh(span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(EditPostActivity.this).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              span.setTitle(titleText.getText().toString());
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              span.setCaption(caption.getText().toString());
              span.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
                if (click_spans.length > 1) {
                  for (int i=0; i < click_spans.length; i++) {
                    WPImageSpan verifySpan=click_spans[i];
                    if (verifySpan != span) {
                      verifySpan.setFeatured(false);
                      verifySpan.setFeaturedInPost(false);
                    }
                  }
                }
              }
              span.setFeaturedInPost(featuredInPostCheckBox.isChecked());
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        mContentEditText.setSelection(mContentEditText.getSelectionStart());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  if (mFormatBar.getVisibility() != View.VISIBLE) {
    showFormatBar();
  }
  float pos=event.getY();
  if (event.getAction() == 0)   mLastYPos=pos;
  if (event.getAction() > 1) {
    if (((mLastYPos - pos) > 2.0f) || ((pos - mLastYPos) > 2.0f))     mScrollDetected=true;
  }
  mLastYPos=pos;
  if (event.getAction() == 1 && !mScrollDetected) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    x+=v.getScrollX();
    y+=v.getScrollY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      final Spannable s=mContentEditText.getText();
      WPImageSpan[] image_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (image_spans.length != 0) {
        final WPImageSpan span=image_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(EditPostActivity.this);
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          final EditText imageWidthText=(EditText)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final CheckBox featuredCheckBox=(CheckBox)alertView.findViewById(R.id.featuredImage);
          final CheckBox featuredInPostCheckBox=(CheckBox)alertView.findViewById(R.id.featuredInPost);
          if (WordPress.getCurrentBlog().isFeaturedImageCapable()) {
            featuredCheckBox.setVisibility(View.VISIBLE);
            featuredInPostCheckBox.setVisibility(View.VISIBLE);
          }
          featuredCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
            @Override public void onCheckedChanged(            CompoundButton buttonView,            boolean isChecked){
              if (isChecked) {
                featuredInPostCheckBox.setVisibility(View.VISIBLE);
              }
 else {
                featuredInPostCheckBox.setVisibility(View.GONE);
              }
            }
          }
);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditPostActivity.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          featuredCheckBox.setChecked(span.isFeatured());
          if (span.isFeatured())           featuredInPostCheckBox.setVisibility(View.VISIBLE);
 else           featuredInPostCheckBox.setVisibility(View.GONE);
          featuredInPostCheckBox.setChecked(span.isFeaturedInPost());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          final int maxWidth=getMinimumImageWitdh(span.getImageSource());
          seekBar.setMax(maxWidth / 10);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          imageWidthText.setOnFocusChangeListener(new OnFocusChangeListener(){
            @Override public void onFocusChange(            View v,            boolean hasFocus){
              if (hasFocus) {
                imageWidthText.setText(""String_Node_Str"");
              }
            }
          }
);
          imageWidthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
            @Override public boolean onEditorAction(            TextView v,            int actionId,            KeyEvent event){
              int width=getEditTextIntegerClamped(imageWidthText,10,maxWidth);
              seekBar.setProgress(width / 10);
              imageWidthText.setSelection((String.valueOf(width).length()));
              InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
              imm.hideSoftInputFromWindow(imageWidthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
              return true;
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(EditPostActivity.this).setTitle(getString(R.string.image_settings)).setView(alertView).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              span.setTitle(titleText.getText().toString());
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(getEditTextIntegerClamped(imageWidthText,10,maxWidth));
              span.setCaption(caption.getText().toString());
              span.setFeatured(featuredCheckBox.isChecked());
              if (featuredCheckBox.isChecked()) {
                WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
                if (click_spans.length > 1) {
                  for (int i=0; i < click_spans.length; i++) {
                    WPImageSpan verifySpan=click_spans[i];
                    if (verifySpan != span) {
                      verifySpan.setFeatured(false);
                      verifySpan.setFeaturedInPost(false);
                    }
                  }
                }
              }
              span.setFeaturedInPost(featuredInPostCheckBox.isChecked());
            }
          }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
).create();
          ad.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
          ad.show();
          mScrollDetected=false;
          return true;
        }
      }
 else {
        mContentEditText.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        mContentEditText.setSelection(mContentEditText.getSelectionStart());
      }
      MediaGalleryImageSpan[] gallerySpans=s.getSpans(charPosition,charPosition,MediaGalleryImageSpan.class);
      if (gallerySpans.length > 0) {
        final MediaGalleryImageSpan gallerySpan=gallerySpans[0];
        startMediaGalleryActivity(gallerySpan.getMediaGallery());
      }
    }
  }
 else   if (event.getAction() == 1) {
    mScrollDetected=false;
  }
  return false;
}",0.9994566693833198
14999,"@SuppressLint(""String_Node_Str"") private void selectTopicInActionBar(String topicName){
  if (!SysUtils.isGteAndroid4())   return;
  if (!hasActivity())   return;
  if (topicName == null)   return;
  ActionBar actionBar=getActivity().getActionBar();
  if (actionBar == null)   return;
  int position=getActionBarAdapter().getIndexOfTopicName(topicName);
  if (position == -1)   return;
  if (position == actionBar.getSelectedNavigationIndex())   return;
  actionBar.setSelectedNavigationItem(position);
}","@SuppressLint(""String_Node_Str"") private void selectTopicInActionBar(String topicName){
  if (!hasActivity())   return;
  if (topicName == null)   return;
  ActionBar actionBar=getActionBar();
  if (actionBar == null)   return;
  int position=getActionBarAdapter().getIndexOfTopicName(topicName);
  if (position == -1)   return;
  if (position == actionBar.getSelectedNavigationIndex())   return;
  actionBar.setSelectedNavigationItem(position);
}",0.94006309148265
15000,"@SuppressLint(""String_Node_Str"") private void setupActionBar(){
  if (!SysUtils.isGteAndroid4())   return;
  ActionBar actionBar=getActivity().getActionBar();
  if (actionBar == null)   return;
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  ActionBar.OnNavigationListener navigationListener=new ActionBar.OnNavigationListener(){
    @Override public boolean onNavigationItemSelected(    int itemPosition,    long itemId){
      ReaderTopic topic=(ReaderTopic)getActionBarAdapter().getItem(itemPosition);
      if (topic != null) {
        setCurrentTopic(topic.getTopicName());
        ReaderLog.d(""String_Node_Str"" + topic.getTopicName());
      }
      return true;
    }
  }
;
  actionBar.setListNavigationCallbacks(getActionBarAdapter(),navigationListener);
}","@SuppressLint(""String_Node_Str"") private void setupActionBar(){
  ActionBar actionBar=getActionBar();
  if (actionBar == null)   return;
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  ActionBar.OnNavigationListener navigationListener=new ActionBar.OnNavigationListener(){
    @Override public boolean onNavigationItemSelected(    int itemPosition,    long itemId){
      ReaderTopic topic=(ReaderTopic)getActionBarAdapter().getItem(itemPosition);
      if (topic != null) {
        setCurrentTopic(topic.getTopicName());
        ReaderLog.d(""String_Node_Str"" + topic.getTopicName());
      }
      return true;
    }
  }
;
  actionBar.setListNavigationCallbacks(getActionBarAdapter(),navigationListener);
}",0.9643527204502814
