record_number,buggy_code,fixed_code,code_similarity
152001,"@Override public void process(InputStream is) throws IOException, ParseException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(is));
  logger.debug(""String_Node_Str"",streamName);
  while (!Thread.interrupted()) {
    final String activity=rdr.readLine();
    handle(activity);
  }
}","@Override public void process(InputStream is) throws IOException, ParseException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(is));
  logger.debug(""String_Node_Str"",streamName);
  while (!Thread.interrupted()) {
    final String activity=rdr.readLine();
    if (activity.length() > 0) {
      handle(activity);
    }
  }
}",0.9173166926677068
152002,"@Override public final void process(final InputStream is) throws IOException, ParseException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
  String s=null;
  while ((s=reader.readLine()) != null) {
    if (!s.isEmpty()) {
      handle(unmarshaller.unmarshall(s));
    }
    if (Thread.interrupted()) {
      break;
    }
  }
}","@Override public final void process(final InputStream is,final ModifiableStreamStats stats) throws IOException, ParseException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
  String s=null;
  while ((s=reader.readLine()) != null) {
    if (!s.isEmpty()) {
      handle(unmarshaller.unmarshall(s));
      if (stats != null) {
        stats.incrementTransferedActivities();
      }
    }
    if (Thread.interrupted()) {
      break;
    }
  }
}",0.8666666666666667
152003,"/** 
 * process the content of a gnip feed. must be interrumplible 
 */
void process(final InputStream is) throws IOException, ParseException ;","/** 
 * process the content of a gnip feed. must be interrumplible 
 */
void process(final InputStream is,final ModifiableStreamStats stats) throws IOException, ParseException ;",0.89375
152004,"@Override public final void process(final InputStream is) throws IOException {
  final JsonParser parser=JsonActivityFeedProcessor.getObjectMapper().getJsonFactory().createJsonParser(is);
  logger.debug(""String_Node_Str"",streamName);
  while (!Thread.interrupted()) {
    final Activity activity=parser.readValueAs(Activity.class);
    handle(activity);
  }
}","@Override public final void process(final InputStream is,final ModifiableStreamStats stats) throws IOException {
  final JsonParser parser=JsonActivityFeedProcessor.getObjectMapper().getJsonFactory().createJsonParser(is);
  logger.info(""String_Node_Str"",streamName);
  while (!Thread.interrupted()) {
    final Activity activity=parser.readValueAs(Activity.class);
    handle(activity);
    if (activity != null && stats != null) {
      stats.incrementTransferedActivities();
    }
  }
}",0.8358913813459268
152005,"@Override public void process(InputStream is) throws IOException, ParseException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(is));
  logger.debug(""String_Node_Str"",streamName);
  while (!Thread.interrupted()) {
    final String activity=rdr.readLine();
    if (activity.length() > 0) {
      handle(activity);
    }
  }
}","@Override public void process(InputStream is,final ModifiableStreamStats stats) throws IOException, ParseException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(is));
  logger.debug(""String_Node_Str"",streamName);
  while (!Thread.interrupted()) {
    final String activity=rdr.readLine();
    if (activity.length() > 0) {
      handle(activity);
      if (stats != null) {
        stats.incrementTransferedActivities();
      }
    }
  }
}",0.8546365914786967
152006,"@Override public final void process(final InputStream is) throws IOException, ParseException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
  String s=null;
  StringBuilder sb=new StringBuilder(6 * 1024);
  while ((s=reader.readLine()) != null) {
    if (startPattern.matcher(s).matches()) {
      if (sb.length() != 0) {
        sb=new StringBuilder(6 * 1024);
      }
      sb.append(s);
    }
 else     if (endPattern.matcher(s).matches()) {
      sb.append(s);
      handle(unmarshaller.unmarshall(sb.toString()));
    }
 else {
      sb.append(s);
    }
  }
}","@Override public final void process(final InputStream is,final ModifiableStreamStats stats) throws IOException, ParseException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
  String s=null;
  StringBuilder sb=new StringBuilder(6 * 1024);
  while ((s=reader.readLine()) != null) {
    if (startPattern.matcher(s).matches()) {
      if (sb.length() != 0) {
        sb=new StringBuilder(6 * 1024);
      }
      sb.append(s);
    }
 else     if (endPattern.matcher(s).matches()) {
      sb.append(s);
      handle(unmarshaller.unmarshall(sb.toString()));
    }
 else {
      sb.append(s);
    }
    if (!s.isEmpty() && stats != null) {
      stats.incrementTransferedActivities();
    }
  }
}",0.9069423929098966
152007,"/** 
 * Creates the StreamStatsInputStream. 
 */
public StreamStatsInputStream(final ModifiableStreamStats stats,final InputStream target){
  super(target,new OutputStream(){
    @Override public void write(    final int b) throws IOException {
      stats.incrementTransferedBytes();
      if (b == '\n') {
        stats.incrementTransferedActivities();
      }
    }
  }
);
}","/** 
 * Creates the StreamStatsInputStream. 
 */
public StreamStatsInputStream(final ModifiableStreamStats stats,final InputStream target){
  super(target,new OutputStream(){
    @Override public void write(    final int b) throws IOException {
      stats.incrementTransferedBytes();
    }
  }
);
}",0.8668639053254438
152008,"@Override public void write(final int b) throws IOException {
  stats.incrementTransferedBytes();
  if (b == '\n') {
    stats.incrementTransferedActivities();
  }
}","@Override public void write(final int b) throws IOException {
  stats.incrementTransferedBytes();
}",0.75
152009,"/** 
 * test 
 */
@Test public final void test() throws IOException, ParseException {
  final InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  try {
    final AtomicInteger i=new AtomicInteger();
    final ObjectMapper mapper=JsonActivityFeedProcessor.getObjectMapper();
    final FeedProcessor p=new XMLActivityStreamFeedProcessor<Activity>(""String_Node_Str"",new DirectExecuteService(),new StreamNotificationAdapter<Activity>(){
      @Override public void notify(      final Activity activity,      final GnipStream stream){
        i.incrementAndGet();
        try {
          final byte[] data0=mapper.writeValueAsBytes(activity);
          final Activity e=mapper.reader(Activity.class).readValue(data0);
          final byte[] data1=mapper.writeValueAsBytes(e);
          assertArrayEquals(data0,data1);
          final ObjectOutputStream os=new ObjectOutputStream(new ByteArrayOutputStream());
          os.writeObject(activity);
          os.close();
        }
 catch (        final Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
,new ActivityUnmarshaller(""String_Node_Str""));
    p.process(is);
    assertEquals(23,i.get());
  }
  finally {
    IOUtils.closeQuietly(is);
  }
}","/** 
 * test 
 */
@Test public final void test() throws IOException, ParseException {
  final InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  try {
    final AtomicInteger i=new AtomicInteger();
    final ObjectMapper mapper=JsonActivityFeedProcessor.getObjectMapper();
    final FeedProcessor p=new XMLActivityStreamFeedProcessor<Activity>(""String_Node_Str"",new DirectExecuteService(),new StreamNotificationAdapter<Activity>(){
      @Override public void notify(      final Activity activity,      final GnipStream stream){
        i.incrementAndGet();
        try {
          final byte[] data0=mapper.writeValueAsBytes(activity);
          final Activity e=mapper.reader(Activity.class).readValue(data0);
          final byte[] data1=mapper.writeValueAsBytes(e);
          assertArrayEquals(data0,data1);
          final ObjectOutputStream os=new ObjectOutputStream(new ByteArrayOutputStream());
          os.writeObject(activity);
          os.close();
        }
 catch (        final Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
,new ActivityUnmarshaller(""String_Node_Str""));
    p.process(is,null);
    assertEquals(23,i.get());
  }
  finally {
    IOUtils.closeQuietly(is);
  }
}",0.9979830576845502
152010,"/** 
 * applies content enconding transformation 
 */
static InputStream getRealInputStream(final URLConnection uc,InputStream is) throws IOException {
  final String encoding=uc.getContentEncoding();
  if (encoding != null && encoding.equalsIgnoreCase(""String_Node_Str"")) {
    is=new GZIPInputStream(is);
  }
 else   if (encoding != null && encoding.equalsIgnoreCase(""String_Node_Str"")) {
    is=new InflaterInputStream(is,new Inflater(true));
  }
  return is;
}","/** 
 * applies content enconding transformation 
 */
static InputStream getRealInputStream(final URLConnection uc,InputStream is) throws IOException {
  final String encoding=uc.getContentEncoding();
  if (encoding != null && encoding.equalsIgnoreCase(""String_Node_Str"")) {
    is=new StreamingGZIPInputStream(is);
  }
 else   if (encoding != null && encoding.equalsIgnoreCase(""String_Node_Str"")) {
    is=new InflaterInputStream(is,new Inflater(true));
  }
  return is;
}",0.9903948772678762
152011,"@Override public final void postResource(final URI uri,final Object resource) throws AuthenticationGnipException, TransportGnipException {
  OutputStream outStream=null;
  try {
    final URLConnection uc=uri.toURL().openConnection();
    HttpURLConnection huc=null;
    if (uc instanceof HttpURLConnection) {
      huc=(HttpURLConnection)uc;
    }
    uc.setAllowUserInteraction(false);
    uc.setDefaultUseCaches(false);
    uc.setConnectTimeout(connectTimeout);
    uc.setReadTimeout(readTimeout);
    uc.setDoOutput(true);
    uc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    uc.setRequestProperty(""String_Node_Str"",USER_AGENT);
    uc.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + encoder.encode(authentication));
    uc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    doConfiguration(uc);
    outStream=uc.getOutputStream();
    outStream.write(new ObjectMapper().writeValueAsString(resource).getBytes());
    if (huc != null) {
      validateStatusLine(uri,huc.getResponseCode(),huc.getResponseMessage(),new DefaultErrorProvider(huc));
    }
  }
 catch (  final MalformedURLException e) {
    throw new TransportGnipException(e);
  }
catch (  final IOException e) {
    throw new TransportGnipException(e);
  }
 finally {
    try {
      if (outStream != null) {
        outStream.close();
      }
    }
 catch (    final IOException e) {
    }
  }
}","@Override public final void postResource(final URI uri,final Object resource) throws AuthenticationGnipException, TransportGnipException {
  OutputStream outStream=null;
  try {
    final URLConnection uc=uri.toURL().openConnection();
    HttpURLConnection huc=null;
    if (uc instanceof HttpURLConnection) {
      huc=(HttpURLConnection)uc;
    }
    uc.setAllowUserInteraction(false);
    uc.setDefaultUseCaches(false);
    uc.setConnectTimeout(connectTimeout);
    uc.setReadTimeout(readTimeout);
    uc.setDoOutput(true);
    uc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    uc.setRequestProperty(""String_Node_Str"",USER_AGENT);
    uc.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + encoder.encode(authentication));
    uc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    doConfiguration(uc);
    outStream=uc.getOutputStream();
    outStream.write(mapper.writeValueAsString(resource).getBytes(""String_Node_Str""));
    if (huc != null) {
      validateStatusLine(uri,huc.getResponseCode(),huc.getResponseMessage(),new DefaultErrorProvider(huc));
    }
  }
 catch (  final MalformedURLException e) {
    throw new TransportGnipException(e);
  }
catch (  final IOException e) {
    throw new TransportGnipException(e);
  }
 finally {
    try {
      if (outStream != null) {
        outStream.close();
      }
    }
 catch (    final IOException e) {
    }
  }
}",0.985341437254201
152012,"/** 
 * Re-connects the stream
 */
private void reconnect(){
  try {
    final int attempt=reConnectionAttempt.incrementAndGet();
    logger.debug(""String_Node_Str"",reConnectionWaitTime);
    reConnectionWaitTime=(long)(reConnectionWaitTime * 1.10);
    reConnectionWaitTime=(reConnectionWaitTime > MAX_RE_CONNECTION_WAIT_TIME) ? MAX_RE_CONNECTION_WAIT_TIME : reConnectionWaitTime;
    try {
      Thread.sleep(reConnectionWaitTime);
    }
 catch (    InterruptedException e) {
      throw new GnipException(e);
    }
    activityService.execute(new Runnable(){
      @Override public void run(){
        getNotification().notifyReConnection(attempt,0L);
      }
    }
);
    logger.debug(""String_Node_Str"");
    response=handshake();
    logger.debug(""String_Node_Str"");
    reConnectionAttempt.set(0);
  }
 catch (  final GnipException e) {
    logger.error(""String_Node_Str"",e);
    activityService.execute(new Runnable(){
      @Override public void run(){
        getNotification().notifyReConnectionError(e);
      }
    }
);
  }
}","/** 
 * Re-connects the stream
 */
private void reconnect(){
  try {
    final int attempt=reConnectionAttempt.incrementAndGet();
    logger.debug(""String_Node_Str"",reConnectionWaitTime);
    reConnectionWaitTime=(long)(reConnectionWaitTime * 1.10);
    reConnectionWaitTime=(reConnectionWaitTime > MAX_RE_CONNECTION_WAIT_TIME) ? MAX_RE_CONNECTION_WAIT_TIME : reConnectionWaitTime;
    try {
      Thread.sleep(reConnectionWaitTime);
    }
 catch (    InterruptedException e) {
      throw new GnipException(e);
    }
    activityService.execute(new Runnable(){
      @Override public void run(){
        getNotification().notifyReConnection(attempt,reConnectionWaitTime);
      }
    }
);
    logger.debug(""String_Node_Str"");
    response=handshake();
    logger.debug(""String_Node_Str"");
    reConnectionAttempt.set(0);
  }
 catch (  final GnipException e) {
    logger.error(""String_Node_Str"",e);
    activityService.execute(new Runnable(){
      @Override public void run(){
        getNotification().notifyReConnectionError(e);
      }
    }
);
  }
}",0.9894837476099426
152013,"@Test public void testname() throws Exception {
  final String username=System.getProperty(""String_Node_Str"");
  final String password=System.getProperty(""String_Node_Str"");
  final String domain=System.getProperty(""String_Node_Str"");
  if (username == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (password == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (domain == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    final GnipFacade gnip=new HttpGnipFacade();
    final GnipAuthentication auth=new InmutableGnipAuthentication(username,password);
    System.out.println(""String_Node_Str"");
    final GnipStream stream=gnip.createStream(domain,1,auth);
    final AtomicInteger counter=new AtomicInteger();
    stream.addObserver(new StreamNotification(){
      @Override public void notify(      final Activity activity,      final GnipStream stream){
        final int i=counter.getAndIncrement();
        if (i >= 10) {
          System.out.println(""String_Node_Str"");
          stream.close();
        }
        System.out.println(i + ""String_Node_Str"" + activity.getBody()+ ""String_Node_Str""+ activity.getGnip().getMatchingRules());
      }
    }
);
    System.out.println(""String_Node_Str"");
    stream.await();
    System.out.println(""String_Node_Str"");
  }
 catch (  Throwable t) {
    System.out.println(t.getMessage());
    t.printStackTrace();
  }
}","@Test public void testname() throws Exception {
  final String username=System.getProperty(""String_Node_Str"");
  final String password=System.getProperty(""String_Node_Str"");
  final String domain=System.getProperty(""String_Node_Str"");
  if (username == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (password == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (domain == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    final GnipFacade gnip=new HttpGnipFacade();
    final GnipAuthentication auth=new InmutableGnipAuthentication(username,password);
    System.out.println(""String_Node_Str"");
    final GnipStream stream=gnip.createStream(domain,1,auth);
    final AtomicInteger counter=new AtomicInteger();
    stream.addObserver(new StreamNotification(){
      @Override public void notify(      final Activity activity,      final GnipStream stream){
        final int i=counter.getAndIncrement();
        if (i >= 10) {
          System.out.println(""String_Node_Str"");
          stream.close();
        }
        System.out.println(i + ""String_Node_Str"" + activity.getBody()+ ""String_Node_Str""+ activity.getGnip().getMatchingRules());
      }
      @Override public void notifyConnectionError(      TransportGnipException e){
      }
      @Override public void notifyReConnectionError(      GnipException e){
      }
      @Override public void notifyReConnection(      int attempt,      long waitTime){
      }
    }
);
    System.out.println(""String_Node_Str"");
    stream.await();
    System.out.println(""String_Node_Str"");
  }
 catch (  Throwable t) {
    System.out.println(t.getMessage());
    t.printStackTrace();
  }
}",0.9149874055415615
152014,"/** 
 * Writes out an object of the specified class, after the replacement has been done.
 */
protected void writeNoReplace(Object value,Class<?> clazz) throws IOException {
  if (clazz.isPrimitive()) {
    writeValue(value,clazz);
    return;
  }
  if (value instanceof String) {
    value=((String)value).intern();
  }
  Integer objectId=_objectIds.get(value);
  if (objectId != null) {
    Streams.writeVarInt(_out,objectId);
    return;
  }
  Streams.writeVarInt(_out,++_lastObjectId);
  _objectIds.put(value,_lastObjectId);
  writeValue(value,clazz);
}","/** 
 * Writes out an object of the specified class, after the replacement has been done.
 */
protected void writeNoReplace(Object value,Class<?> clazz) throws IOException {
  if (clazz.isPrimitive()) {
    writeValue(value,clazz);
    return;
  }
  boolean track;
  if (value instanceof String) {
    value=((String)value).intern();
    track=true;
  }
 else {
    track=shouldTrackInstance(value);
  }
  if (track) {
    Integer objectId=_objectIds.get(value);
    if (objectId != null) {
      Streams.writeVarInt(_out,objectId);
      return;
    }
  }
  Streams.writeVarInt(_out,++_lastObjectId);
  if (track) {
    _objectIds.put(value,_lastObjectId);
  }
  writeValue(value,clazz);
}",0.8821170809943866
152015,"/** 
 * Updates direct paths that reference this location in the array.
 * @param idx The index being modified
 * @param newIdx The index being moved to, of -1 if idx is being removed.
 */
protected void updatePaths(int idx,int newIdx){
  String path=getPropertyPath();
  ParameterizedConfig pc=ObjectUtil.as(getRootObject(),ParameterizedConfig.class);
  if (pc == null) {
    return;
  }
  Map<String,String> replace;
  ImmutableMap.Builder<String,String> builder=ImmutableMap.<String,String>builder();
  if (newIdx == -1) {
    builder.put(pathIndex(path,idx),""String_Node_Str"");
    newIdx=_panels.getComponentCount() - 1;
  }
 else {
    builder.put(pathIndex(path,idx),pathIndex(path,newIdx));
  }
  int dir=Integer.signum(idx - newIdx);
  for (int ii=newIdx; ii != idx; ii+=dir) {
    builder.put(pathIndex(path,ii),pathIndex(path,ii + dir));
  }
  replace=builder.build();
  boolean updated=false;
  for (  Parameter param : pc.parameters) {
    if (param instanceof Parameter.Direct) {
      updated|=updateDirect((Parameter.Direct)param,replace);
    }
 else     if (param instanceof Parameter.Choice) {
      for (      Parameter.Direct direct : ((Parameter.Choice)param).directs) {
        updated|=updateDirect(direct,replace);
      }
    }
  }
  if (updated) {
    pc.wasUpdated();
  }
}","/** 
 * Updates direct paths that reference this location in the array.
 * @param idx The index being modified
 * @param newIdx The index being moved to, or -1 if idx is being removed.
 */
protected void updatePaths(int idx,int newIdx){
  String path=getPropertyPath();
  ParameterizedConfig pc=ObjectUtil.as(getRootObject(),ParameterizedConfig.class);
  if (pc == null) {
    return;
  }
  ImmutableMap.Builder<String,String> builder=ImmutableMap.<String,String>builder();
  if (newIdx == -1) {
    builder.put(pathIndex(path,idx),""String_Node_Str"");
    newIdx=_panels.getComponentCount();
  }
 else {
    builder.put(pathIndex(path,idx),pathIndex(path,newIdx));
  }
  int dir=Integer.signum(idx - newIdx);
  for (int ii=newIdx; ii != idx; ii+=dir) {
    builder.put(pathIndex(path,ii),pathIndex(path,ii + dir));
  }
  Map<String,String> replace=builder.build();
  boolean updated=false;
  for (  Parameter param : pc.parameters) {
    if (param instanceof Parameter.Direct) {
      updated|=updateDirect((Parameter.Direct)param,replace);
    }
 else     if (param instanceof Parameter.Choice) {
      for (      Parameter.Direct direct : ((Parameter.Choice)param).directs) {
        updated|=updateDirect(direct,replace);
      }
    }
  }
  if (updated) {
    pc.wasUpdated();
  }
}",0.3579435639737147
152016,"/** 
 * Attempts to merge a static model.
 * @return a reference to the merged model, or <code>null</code> if the model cannot be merged.
 */
public Model maybeMerge(int x,int y,ConfigReference<ModelConfig> ref,Transform3D transform,final int floorFlags){
  int granularity=getMergeGranularity();
  Coord key=new Coord(x >> granularity,y >> granularity);
  Sprite sprite=_mergedSprites.get(key);
  Model model;
  if (sprite == null) {
    final Model fmodel=model=new Model(_ctx){
      @Override protected void updateFromConfig(){
        if (!_suppressMergeUpdates) {
          super.updateFromConfig();
        }
      }
    }
;
    _mergedSprites.put(key,sprite=new Sprite(_ctx,this){
      @Override public int getFloorFlags(){
        return floorFlags;
      }
      @Override public Model getModel(){
        return fmodel;
      }
    }
);
    model.setUserObject(sprite);
    model.setConfig(new ModelConfig(new MergedStaticConfig(new ComponentModel[]{new ComponentModel(ref,transform)})){
{
        _cfgmgr=_configs=_ctx.getConfigManager();
      }
      @Override protected void maybeFireOnConfigManager(){
      }
    }
);
    _scene.add(model);
  }
 else {
    if (sprite.getFloorFlags() != floorFlags) {
      return null;
    }
    model=sprite.getModel();
    ModelConfig mconfig=model.getConfig();
    MergedStaticConfig impl=(MergedStaticConfig)mconfig.implementation;
    impl.models=ArrayUtil.append(impl.models,new ComponentModel(ref,transform));
    mconfig.wasUpdated();
  }
  return model;
}","/** 
 * Attempts to merge a static model.
 * @return a reference to the merged model, or <code>null</code> if the model cannot be merged.
 */
public Model maybeMerge(int x,int y,ConfigReference<ModelConfig> ref,Transform3D transform,final int floorFlags){
  int granularity=getMergeGranularity();
  Coord key=new Coord(x >> granularity,y >> granularity);
  Sprite sprite=_mergedSprites.get(key);
  Model model;
  if (sprite == null) {
    final Model fmodel=model=new Model(_ctx){
      @Override protected void updateFromConfig(){
        if (!_suppressMergeUpdates) {
          super.updateFromConfig();
        }
      }
    }
;
    _mergedSprites.put(key,sprite=new Sprite(_ctx,this){
      @Override public int getFloorFlags(){
        return floorFlags;
      }
      @Override public Model getModel(){
        return fmodel;
      }
    }
);
    model.setUserObject(sprite);
    model.setConfig(new ModelConfig(new MergedStaticConfig(new ComponentModel[]{new ComponentModel(ref,transform)})){
{
        _cfgmgr=_configs=_ctx.getConfigManager();
      }
      @Override protected void maybeFireOnConfigManager(){
      }
      @Override protected void addUpdateDependencies(){
      }
    }
);
    _scene.add(model);
  }
 else {
    if (sprite.getFloorFlags() != floorFlags) {
      return null;
    }
    model=sprite.getModel();
    ModelConfig mconfig=model.getConfig();
    MergedStaticConfig impl=(MergedStaticConfig)mconfig.implementation;
    impl.models=ArrayUtil.append(impl.models,new ComponentModel(ref,transform));
    mconfig.wasUpdated();
  }
  return model;
}",0.979328165374677
152017,"@Override public <T extends ManagedConfig>boolean add(Class<T> clazz,ConfigReference<T> ref){
  if (ref == null || ref.getArguments().isEmpty() || !_cfgClasses.contains(clazz)) {
    return false;
  }
  ConfigId id=new ConfigId(clazz,ref.getName());
  refs.put(id,ref);
  try {
    graph.addDependency(id,_current);
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"",""String_Node_Str"",id,""String_Node_Str"",_allSeen.contains(id),""String_Node_Str"",_current,""String_Node_Str"",_allSeen.contains(_current),e);
  }
  return true;
}","@Override public <T extends ManagedConfig>boolean add(Class<T> clazz,ConfigReference<T> ref){
  if (ref == null || ref.getArguments().isEmpty() || !_cfgClasses.contains(clazz)) {
    return false;
  }
  ConfigId id=new ConfigId(clazz,ref.getName());
  refs.put(id,ref);
  try {
    if (!graph.dependsOn(id,_current)) {
      graph.addDependency(id,_current);
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"",""String_Node_Str"",id,""String_Node_Str"",_allSeen.contains(id),""String_Node_Str"",_current,""String_Node_Str"",_allSeen.contains(_current),e);
  }
  return true;
}",0.9163822525597268
152018,"/** 
 * Finds all configs and resources referenced by the supplied property of the supplied object and places them in the given sets.  This is not without side effects: when it finds arguments in references that don't correspond to matching parameters, it strips them out.
 */
protected void getReferences(ConfigManager cfgmgr,Object object,Property property){
  Object value=property.get(object);
  if (value == null) {
    return;
  }
  Editable annotation=property.getAnnotation();
  String editor=annotation.editor();
  if (editor.equals(""String_Node_Str"")) {
    _resources.add((String)value);
    return;
  }
  if (editor.equals(""String_Node_Str"")) {
    @SuppressWarnings(""String_Node_Str"") ConfigGroup<ManagedConfig> group=(ConfigGroup<ManagedConfig>)cfgmgr.getGroup(annotation.mode());
    if (group != null) {
      _configs.add(new ConfigId(group.getConfigClass(),(String)value));
    }
    return;
  }
  Class<?> type=property.getType();
  if (ConfigReference.class.equals(type)) {
    Class<?> clazz=property.getArgumentType(ConfigReference.class);
    if (clazz == null && (object instanceof DerivedConfig)) {
      clazz=((DerivedConfig)object).cclass;
    }
    @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> cclass=(Class<ManagedConfig>)clazz;
    @SuppressWarnings(""String_Node_Str"") ConfigReference<ManagedConfig> ref=(ConfigReference<ManagedConfig>)value;
    _configs.add(new ConfigId(cclass,ref.getName()));
    ArgumentMap args=ref.getArguments();
    if (args.isEmpty()) {
      return;
    }
    ManagedConfig config=cfgmgr.getRawConfig(cclass,ref.getName());
    if (!(config instanceof ParameterizedConfig)) {
      return;
    }
    ParameterizedConfig pconfig=(ParameterizedConfig)config;
    for (Iterator<Map.Entry<String,Object>> it=args.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry<String,Object> entry=it.next();
      Parameter param=pconfig.getParameter(entry.getKey());
      if (param == null) {
        it.remove();
        continue;
      }
      Property prop=param.getArgumentProperty(pconfig);
      if (prop != null) {
        getReferences(cfgmgr,args,prop);
      }
    }
    return;
  }
  if ((type.isArray() || List.class.isAssignableFrom(type)) && (ConfigReference.class.equals(property.getComponentType()))) {
    @SuppressWarnings(""String_Node_Str"") List<ConfigReference> list=type.isArray() ? Arrays.asList((ConfigReference[])value) : (List<ConfigReference>)value;
    Type ctype=property.getGenericComponentType();
    if (!(ctype instanceof ParameterizedType)) {
      output(""String_Node_Str"");
      return;
    }
    @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> cclass=(Class<ManagedConfig>)((ParameterizedType)ctype).getActualTypeArguments()[0];
    for (    ConfigReference raw : list) {
      _configs.add(new ConfigId(cclass,raw.getName()));
    }
    return;
  }
  getReferences(cfgmgr,value);
}","/** 
 * Finds all configs and resources referenced by the supplied property of the supplied object and places them in the given sets.  This is not without side effects: when it finds arguments in references that don't correspond to matching parameters, it strips them out.
 */
protected void getReferences(ConfigManager cfgmgr,Object object,Property property){
  Object value=property.get(object);
  if (value == null) {
    return;
  }
  Editable annotation=property.getAnnotation();
  String editor=annotation.editor();
  if (editor.equals(""String_Node_Str"")) {
    _resources.add((String)value);
    return;
  }
  if (editor.equals(""String_Node_Str"")) {
    @SuppressWarnings(""String_Node_Str"") ConfigGroup<ManagedConfig> group=(ConfigGroup<ManagedConfig>)cfgmgr.getGroup(annotation.mode());
    if (group != null) {
      _configs.add(new ConfigId(group.getConfigClass(),(String)value));
    }
    return;
  }
  Class<?> type=property.getType();
  if (ConfigReference.class.equals(type)) {
    Class<?> clazz=property.getArgumentType(ConfigReference.class);
    if (clazz == null && (object instanceof DerivedConfig)) {
      clazz=((DerivedConfig)object).cclass;
    }
    @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> cclass=(Class<ManagedConfig>)clazz;
    @SuppressWarnings(""String_Node_Str"") ConfigReference<ManagedConfig> ref=(ConfigReference<ManagedConfig>)value;
    _configs.add(new ConfigId(cclass,ref.getName()));
    ArgumentMap args=ref.getArguments();
    if (args.isEmpty()) {
      return;
    }
    ManagedConfig config=cfgmgr.getRawConfig(cclass,ref.getName());
    if (!(config instanceof ParameterizedConfig)) {
      args.clear();
      return;
    }
    ParameterizedConfig pconfig=(ParameterizedConfig)config;
    for (Iterator<Map.Entry<String,Object>> it=args.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry<String,Object> entry=it.next();
      Parameter param=pconfig.getParameter(entry.getKey());
      if (param == null) {
        it.remove();
        continue;
      }
      Property prop=param.getArgumentProperty(pconfig);
      if (prop != null) {
        getReferences(cfgmgr,args,prop);
      }
    }
    return;
  }
  if ((type.isArray() || List.class.isAssignableFrom(type)) && (ConfigReference.class.equals(property.getComponentType()))) {
    @SuppressWarnings(""String_Node_Str"") List<ConfigReference> list=type.isArray() ? Arrays.asList((ConfigReference[])value) : (List<ConfigReference>)value;
    Type ctype=property.getGenericComponentType();
    if (!(ctype instanceof ParameterizedType)) {
      output(""String_Node_Str"");
      return;
    }
    @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> cclass=(Class<ManagedConfig>)((ParameterizedType)ctype).getActualTypeArguments()[0];
    for (    ConfigReference raw : list) {
      _configs.add(new ConfigId(cclass,raw.getName()));
    }
    return;
  }
  getReferences(cfgmgr,value);
}",0.9965552876334826
152019,"/** 
 * Similar to DeepUtil.transfer, but operating on properties. Attempt to transfer each property with the same name to the dest object, but recover on any and all errors. This is used in the editor when changing config types.
 */
public static void transferCompatibleProperties(Object source,Object dest){
  Property[] destProps=Introspector.getProperties(dest);
  for (  Property srcProp : Introspector.getProperties(source)) {
    String name=srcProp.getName();
    for (    Property destProp : destProps) {
      if (name.equals(destProp.getName())) {
        try {
          destProp.set(dest,srcProp.get(source));
        }
 catch (        Throwable t) {
        }
        break;
      }
    }
  }
}","/** 
 * Similar to DeepUtil.transfer, but operating on properties. Attempt to transfer each property with the same name to the dest object, but recover on any and all errors. This is used in the editor when changing config types.
 */
public static void transferCompatibleProperties(Object source,Object dest){
  Property[] destProps=Introspector.getProperties(dest);
  for (  Property srcProp : Introspector.getProperties(source)) {
    String name=srcProp.getName();
    for (    Property destProp : destProps) {
      if (name.equals(destProp.getName())) {
        if (srcProp.isCompatible(destProp)) {
          try {
            destProp.set(dest,srcProp.get(source));
          }
 catch (          Throwable t) {
            log.warning(""String_Node_Str"",t);
          }
        }
        break;
      }
    }
  }
}",0.9267015706806284
152020,"@Override protected JPanel createPanel(Object ignoredValue){
  Object val=_property.get(_object);
  Property prop;
  if (val instanceof List) {
    @SuppressWarnings(""String_Node_Str"") final List<Object> list=(List<Object>)val;
    prop=new IndexedProperty(){
      @Override protected Object getAtIndex(      int idx){
        return list.get(idx);
      }
      @Override protected void setAtIndex(      int idx,      Object value){
        list.set(idx,value);
      }
    }
;
  }
 else   if (val instanceof Object[]) {
    final Object[] array=(Object[])val;
    prop=new IndexedProperty(){
      @Override protected Object getAtIndex(      int idx){
        return array[idx];
      }
      @Override protected void setAtIndex(      int idx,      Object value){
        array[idx]=value;
      }
    }
;
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val);
  }
  _editor=PropertyEditor.createEditor(_ctx,prop,_lineage);
  return _editor.getContent();
}","@Override protected JPanel createPanel(Object ignoredValue){
  Object val=_property.get(_object);
  Property prop;
  if (val instanceof List) {
    prop=new IndexedProperty(){
      @Override protected Object getAtIndex(      int idx){
        return getList().get(idx);
      }
      @Override protected void setAtIndex(      int idx,      Object value){
        getList().set(idx,value);
      }
      protected List<Object> getList(){
        @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)_property.get(_object);
        return list;
      }
    }
;
  }
 else   if (val instanceof Object[]) {
    prop=new IndexedProperty(){
      @Override protected Object getAtIndex(      int idx){
        return getArray()[idx];
      }
      @Override protected void setAtIndex(      int idx,      Object value){
        getArray()[idx]=value;
      }
      protected Object[] getArray(){
        return (Object[])_property.get(_object);
      }
    }
;
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val);
  }
  _editor=PropertyEditor.createEditor(_ctx,prop,_lineage);
  return _editor.getContent();
}",0.4957264957264957
152021,"/** 
 * (Re)populates the specified node.
 */
protected void populateNode(DefaultMutableTreeNode node,String label,Object value,Class<?>[] subtypes,Property property,Object comp){
  if (value == null || value instanceof Boolean || value instanceof Number || value instanceof Color4f || value instanceof File || value instanceof Quaternion || value instanceof String || value instanceof Transform2D || value instanceof Transform3D || value instanceof Vector2f || value instanceof Vector3f || value instanceof Enum) {
    Object dval=value;
    if (value == null) {
      dval=_msgs.get(""String_Node_Str"");
    }
 else     if (value instanceof String) {
      dval=""String_Node_Str"" + value + ""String_Node_Str"";
    }
 else     if (value instanceof Enum) {
      Enum<?> eval=(Enum)value;
      dval=getLabel(eval,_msgmgr.getBundle(Introspector.getMessageBundle(eval.getDeclaringClass())));
    }
 else     if (value instanceof Integer && property.getAnnotation().editor().equals(""String_Node_Str"")) {
      int ival=(Integer)value;
      String mode=property.getAnnotation().mode();
      if (mode.equals(""String_Node_Str"")) {
        ClassRecord crec=_ctx.getColorPository().getClassRecord(ival);
        dval=(crec == null) ? dval : crec.name;
      }
 else       if (mode.length() > 0) {
        ColorRecord color=_ctx.getColorPository().getColorRecord(ival >> 8,ival & 0xFF);
      }
 else {
        ColorRecord crec=_ctx.getColorPository().getColorRecord(ival >> 8,ival & 0xFF);
        dval=(crec == null) ? dval : (mode.length() > 0 ? ""String_Node_Str"" : crec.cclass.name + ""String_Node_Str"") + crec.name;
      }
    }
    node.setUserObject(new NodeObject(label + ""String_Node_Str"" + dval,value,property,comp));
    node.setAllowsChildren(false);
  }
 else   if (value instanceof ConfigReference) {
    ConfigReference<?> ref=(ConfigReference)value;
    String name=ref.getName();
    node.setUserObject(new NodeObject(label + ""String_Node_Str"" + name,value,property,comp));
    node.setAllowsChildren(true);
    int ccount=node.getChildCount();
    int idx=0;
    if (property != null) {
      @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> clazz=(Class<ManagedConfig>)property.getArgumentType(ConfigReference.class);
      ManagedConfig config=_ctx.getConfigManager().getRawConfig(clazz,name);
      if (config instanceof ParameterizedConfig) {
        ParameterizedConfig pconfig=(ParameterizedConfig)config;
        if (pconfig.parameters.length > 0) {
          for (          Parameter param : pconfig.parameters) {
            Property aprop=param.getArgumentProperty(pconfig);
            if (aprop != null) {
              DefaultMutableTreeNode child=new DefaultMutableTreeNode();
              if (idx < ccount) {
                DefaultMutableTreeNode ochild=(DefaultMutableTreeNode)node.getChildAt(idx);
                NodeObject onobj=(NodeObject)ochild.getUserObject();
                if (onobj.property == aprop) {
                  child=ochild;
                }
                node.remove(idx);
              }
              node.insert(child,idx++);
              populateNode(child,param.name,aprop.get(ref.getArguments()),aprop.getSubtypes(),aprop,param.name);
            }
          }
        }
      }
    }
    for (int ii=idx; ii < ccount; ii++) {
      node.remove(idx);
    }
    if (node.getChildCount() == 0) {
      node.setAllowsChildren(false);
    }
  }
 else   if (value instanceof List || value.getClass().isArray()) {
    node.setUserObject(new NodeObject(label,value,property,comp));
    node.setAllowsChildren(true);
    Class<?>[] componentSubtypes=(property != null) ? property.getComponentSubtypes() : new Class[0];
    int ccount=node.getChildCount();
    int length=(value instanceof List) ? ((List)value).size() : Array.getLength(value);
    for (int ii=0; ii < length; ii++) {
      DefaultMutableTreeNode child;
      if (ii < ccount) {
        child=(DefaultMutableTreeNode)node.getChildAt(ii);
      }
 else {
        node.insert(child=new DefaultMutableTreeNode(),ii);
      }
      populateNode(child,String.valueOf(ii),(value instanceof List) ? ((List)value).get(ii) : Array.get(value,ii),componentSubtypes,null,ii);
    }
    for (int ii=length; ii < ccount; ii++) {
      node.remove(length);
    }
  }
 else {
    if (subtypes.length > 1) {
      label=label + ""String_Node_Str"" + getLabel(value.getClass());
    }
    node.setUserObject(new NodeObject(label,value,property,comp));
    updatePropertyNodes(node,value);
  }
}","/** 
 * (Re)populates the specified node.
 */
protected void populateNode(DefaultMutableTreeNode node,String label,Object value,Class<?>[] subtypes,Property property,Object comp){
  if (value == null || value instanceof Boolean || value instanceof Number || value instanceof Color4f || value instanceof File || value instanceof Quaternion || value instanceof String || value instanceof Transform2D || value instanceof Transform3D || value instanceof Vector2f || value instanceof Vector3f || value instanceof Enum) {
    Object dval=value;
    if (value == null) {
      dval=_msgs.get(""String_Node_Str"");
    }
 else     if (value instanceof String) {
      dval=""String_Node_Str"" + value + ""String_Node_Str"";
    }
 else     if (value instanceof Enum) {
      Enum<?> eval=(Enum)value;
      dval=getLabel(eval,_msgmgr.getBundle(Introspector.getMessageBundle(eval.getDeclaringClass())));
    }
 else     if (value instanceof Integer && property.getAnnotation().editor().equals(""String_Node_Str"")) {
      int ival=(Integer)value;
      String mode=property.getAnnotation().mode();
      if (mode.equals(""String_Node_Str"")) {
        ClassRecord crec=_ctx.getColorPository().getClassRecord(ival);
        dval=(crec == null) ? dval : crec.name;
      }
 else       if (mode.length() > 0) {
        ColorRecord color=_ctx.getColorPository().getColorRecord(ival >> 8,ival & 0xFF);
      }
 else {
        ColorRecord crec=_ctx.getColorPository().getColorRecord(ival >> 8,ival & 0xFF);
        dval=(crec == null) ? dval : (mode.length() > 0 ? ""String_Node_Str"" : crec.cclass.name + ""String_Node_Str"") + crec.name;
      }
    }
    node.setUserObject(new NodeObject(label + ""String_Node_Str"" + dval,value,property,comp));
    node.setAllowsChildren(false);
  }
 else   if (value instanceof ConfigReference) {
    ConfigReference<?> ref=(ConfigReference)value;
    String name=ref.getName();
    node.setUserObject(new NodeObject(label + ""String_Node_Str"" + name,value,property,comp));
    node.setAllowsChildren(true);
    int ccount=node.getChildCount();
    int idx=0;
    if (property != null) {
      Class<?> refTypeClass=property.getArgumentType(ConfigReference.class);
      if (refTypeClass == null) {
        if (_object instanceof DerivedConfig) {
          refTypeClass=((DerivedConfig)_object).cclass;
        }
        if (refTypeClass == null) {
          log.warning(""String_Node_Str"",""String_Node_Str"",ref);
        }
      }
      @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> clazz=(Class<ManagedConfig>)refTypeClass;
      ManagedConfig config=_ctx.getConfigManager().getRawConfig(clazz,name);
      if (config instanceof ParameterizedConfig) {
        ParameterizedConfig pconfig=(ParameterizedConfig)config;
        if (pconfig.parameters.length > 0) {
          for (          Parameter param : pconfig.parameters) {
            Property aprop=param.getArgumentProperty(pconfig);
            if (aprop != null) {
              DefaultMutableTreeNode child=new DefaultMutableTreeNode();
              if (idx < ccount) {
                DefaultMutableTreeNode ochild=(DefaultMutableTreeNode)node.getChildAt(idx);
                NodeObject onobj=(NodeObject)ochild.getUserObject();
                if (onobj.property == aprop) {
                  child=ochild;
                }
                node.remove(idx);
              }
              node.insert(child,idx++);
              populateNode(child,param.name,aprop.get(ref.getArguments()),aprop.getSubtypes(),aprop,param.name);
            }
          }
        }
      }
    }
    for (int ii=idx; ii < ccount; ii++) {
      node.remove(idx);
    }
    if (node.getChildCount() == 0) {
      node.setAllowsChildren(false);
    }
  }
 else   if (value instanceof List || value.getClass().isArray()) {
    node.setUserObject(new NodeObject(label,value,property,comp));
    node.setAllowsChildren(true);
    Class<?>[] componentSubtypes=(property != null) ? property.getComponentSubtypes() : new Class[0];
    int ccount=node.getChildCount();
    int length=(value instanceof List) ? ((List)value).size() : Array.getLength(value);
    for (int ii=0; ii < length; ii++) {
      DefaultMutableTreeNode child;
      if (ii < ccount) {
        child=(DefaultMutableTreeNode)node.getChildAt(ii);
      }
 else {
        node.insert(child=new DefaultMutableTreeNode(),ii);
      }
      populateNode(child,String.valueOf(ii),(value instanceof List) ? ((List)value).get(ii) : Array.get(value,ii),componentSubtypes,null,ii);
    }
    for (int ii=length; ii < ccount; ii++) {
      node.remove(length);
    }
  }
 else {
    if (subtypes.length > 1) {
      label=label + ""String_Node_Str"" + getLabel(value.getClass());
    }
    node.setUserObject(new NodeObject(label,value,property,comp));
    updatePropertyNodes(node,value);
  }
}",0.9576890034364262
152022,"/** 
 * Updates the state of the UI based on the selection.
 */
protected void updateSelection(){
  ConfigTreeNode node=_tree.getSelectedNode();
  _epanel.setObject(node == null ? null : node.getConfig());
  boolean enable=(node != null);
  _exportConfigs.setEnabled(enable);
  _cut.setEnabled(enable);
  _copy.setEnabled(enable);
  _delete.setEnabled(enable);
  _findUses.setEnabled(enable);
}","/** 
 * Updates the state of the UI based on the selection.
 */
protected void updateSelection(){
  ConfigTreeNode node=_tree.getSelectedNode();
  _epanel.setObject(node == null ? null : node.getRawConfig());
  boolean enable=(node != null);
  _exportConfigs.setEnabled(enable);
  _cut.setEnabled(enable);
  _copy.setEnabled(enable);
  _delete.setEnabled(enable);
  _findUses.setEnabled(enable);
}",0.9962073324905184
152023,"/** 
 * Read a varlong length off the stream, which may be up to 9 bytes to fully decode Long.MAX_VALUE. In all probability we'll just read one byte so just relax.
 */
public static long readLength(InputStream in) throws IOException {
  long ret=0;
  for (int count=0; count < 9; count++) {
    int bite=in.read();
    if (bite == -1) {
      throw new EOFException();
    }
    ret=(ret << 7) | (bite & 0x7f);
    if ((bite & 0x80) == 0) {
      if (count > 0 && ((bite & 0x7f) == 0)) {
        break;
      }
      return ret;
    }
  }
  throw new StreamCorruptedException();
}","/** 
 * Read a varlong length off the stream, which may be up to 9 bytes to fully decode Long.MAX_VALUE. In all probability we'll just read one byte so just relax.
 */
public static long readLength(InputStream in) throws IOException {
  long ret=0;
  for (int count=0; count < 9; count++) {
    int bite=in.read();
    if (bite == -1) {
      throw new EOFException();
    }
    ret|=(bite & 0x7f) << (count * 7);
    if ((bite & 0x80) == 0) {
      if (count > 0 && ((bite & 0x7f) == 0)) {
        break;
      }
      return ret;
    }
  }
  throw new StreamCorruptedException();
}",0.9613069647463456
152024,"/** 
 * Register a newly-seen descendant.
 */
protected void registerDescendant(Component c){
  if (!_comps.add(c)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (c instanceof Container) {
    ((Container)c).addContainerListener(_containerListener);
  }
  if (c instanceof BasePropertyEditor) {
    BasePropertyEditor pe=(BasePropertyEditor)c;
    String path=_editor.getComponentPath(pe,false);
    if (path.startsWith(""String_Node_Str"")) {
      path=path.substring(1);
    }
    if (_pathToEditor.containsKey(path)) {
      return;
    }
    _pathToEditor.put(path,pe);
    _editorToPath.put(pe,path);
    log.info(""String_Node_Str"",""String_Node_Str"",path,""String_Node_Str"",pe.getClass());
    if (pe instanceof PathTableArrayListEditor) {
      PathTableArrayListEditor paths=(PathTableArrayListEditor)pe;
      _params.put(paths,new ParameterWatcher(paths));
    }
  }
}","/** 
 * Register a newly-seen descendant.
 */
protected void registerDescendant(Component c){
  if (c instanceof Container) {
    ((Container)c).addContainerListener(_containerListener);
  }
  if (c instanceof BasePropertyEditor) {
    BasePropertyEditor pe=(BasePropertyEditor)c;
    String path=_editor.getComponentPath(pe,false);
    if (path.startsWith(""String_Node_Str"")) {
      path=path.substring(1);
    }
    if (_pathToEditor.containsKey(path)) {
      return;
    }
    _pathToEditor.put(path,pe);
    _editorToPath.put(pe,path);
    if (pe instanceof PathTableArrayListEditor) {
      PathTableArrayListEditor paths=(PathTableArrayListEditor)pe;
      _params.put(paths,new ParameterWatcher(paths));
    }
  }
}",0.5857585139318885
152025,"/** 
 * Construct a ParameterWatcher.
 */
public ParameterWatcher(PathTableArrayListEditor paths){
  PropertyEditor name=null;
  for (Container p=paths; p != null; p=p.getParent()) {
    if (p instanceof EditorPanel) {
      name=((EditorPanel)p).getPropertyEditor(""String_Node_Str"");
      break;
    }
  }
  _pathsEditor=paths;
  _nameEditor=name;
  _pathsEditor.addChangeListener(this);
  _nameEditor.addChangeListener(this);
  log.info(""String_Node_Str"" + _nameEditor.getProperty().get(_nameEditor.getObject()));
  update();
}","/** 
 * Construct a ParameterWatcher.
 */
public ParameterWatcher(PathTableArrayListEditor paths){
  PropertyEditor name=null;
  for (Container p=paths; p != null; p=p.getParent()) {
    if (p instanceof EditorPanel) {
      name=((EditorPanel)p).getPropertyEditor(""String_Node_Str"");
      break;
    }
  }
  _pathsEditor=paths;
  _nameEditor=name;
  _pathsEditor.addChangeListener(this);
  _nameEditor.addChangeListener(this);
  update();
}",0.9094650205761317
152026,"/** 
 * Unregister a removed descendant.
 */
protected void unregisterDescendant(Component c){
  if (!_comps.remove(c)) {
    log.warning(""String_Node_Str"",new Exception());
  }
  if (c instanceof Container) {
    ((Container)c).removeContainerListener(_containerListener);
  }
  if (c instanceof BasePropertyEditor) {
    BasePropertyEditor pe=(BasePropertyEditor)c;
    String path=_editorToPath.remove(pe);
    if (path != null) {
      _pathToEditor.remove(path);
      log.info(""String_Node_Str"",""String_Node_Str"",path);
    }
    if (pe instanceof PathTableArrayListEditor) {
      ParameterWatcher watcher=_params.remove(pe);
      if (watcher == null) {
        log.warning(""String_Node_Str"" + pe);
      }
 else {
        watcher.shutdown();
      }
    }
  }
}","/** 
 * Unregister a removed descendant.
 */
protected void unregisterDescendant(Component c){
  if (c instanceof Container) {
    ((Container)c).removeContainerListener(_containerListener);
  }
  if (c instanceof BasePropertyEditor) {
    BasePropertyEditor pe=(BasePropertyEditor)c;
    String path=_editorToPath.remove(pe);
    if (path != null) {
      _pathToEditor.remove(path);
    }
    if (pe instanceof PathTableArrayListEditor) {
      ParameterWatcher watcher=_params.remove(pe);
      if (watcher == null) {
        log.warning(""String_Node_Str"" + pe);
      }
 else {
        watcher.shutdown();
      }
    }
  }
}",0.2387419585418155
152027,"/** 
 * Update with the new set of targets.
 */
protected void update(Set<BasePropertyEditor> newTargets){
  for (  BasePropertyEditor pe : Sets.difference(_pathTargets,newTargets)) {
    pe.setParameterLabel(null);
  }
  _pathTargets=newTargets;
  String label=String.valueOf(_nameEditor.getProperty().get(_nameEditor.getObject()));
  log.info(""String_Node_Str"" + label);
  for (  BasePropertyEditor pe : newTargets) {
    pe.setParameterLabel(label);
  }
}","/** 
 * Update with the new set of targets.
 */
protected void update(Set<BasePropertyEditor> newTargets){
  for (  BasePropertyEditor pe : Sets.difference(_pathTargets,newTargets)) {
    pe.setParameterLabel(null);
  }
  _pathTargets=newTargets;
  String label=String.valueOf(_nameEditor.getProperty().get(_nameEditor.getObject()));
  for (  BasePropertyEditor pe : newTargets) {
    pe.setParameterLabel(label);
  }
}",0.9555302166476624
152028,"@Override public void setConfig(BaseParticleSystemConfig.Layer config){
  super.setConfig(config);
  Model[] omodels=_models;
  _models=new Model[config.particleCount];
  MetaParticleSystemConfig.Layer mconfig=(MetaParticleSystemConfig.Layer)config;
  _geometryRadius=0f;
  for (int ii=0; ii < _models.length; ii++) {
    Model model=(omodels == null || ii >= omodels.length) ? null : omodels[ii];
    if (model == null) {
      model=new Model(_ctx);
      model.setParentScope(this);
      model.setColorState(new ColorState());
    }
    model.setRenderScheme(config.alphaMode == AlphaMode.OPAQUE ? null : RenderScheme.TRANSLUCENT);
    model.setConfig(mconfig.model);
    model.setVisible(false);
    if (_geometryRadius == 0f) {
      model.setLocalTransform(new Transform3D());
      Box bounds=model.getBounds();
      if (!bounds.isEmpty()) {
        float length=bounds.getDiagonalLength();
        if (Float.isNaN(length)) {
          log.warning(""String_Node_Str"",""String_Node_Str"",mconfig.model,""String_Node_Str"",bounds);
        }
 else {
          _geometryRadius=length * 0.5f;
        }
      }
    }
    _models[ii]=model;
  }
  if (omodels != null) {
    for (int ii=_models.length; ii < omodels.length; ii++) {
      omodels[ii].dispose();
    }
  }
}","@Override public void setConfig(BaseParticleSystemConfig.Layer config){
  super.setConfig(config);
  Model[] omodels=_models;
  _models=new Model[config.particleCount];
  MetaParticleSystemConfig.Layer mconfig=(MetaParticleSystemConfig.Layer)config;
  _geometryRadius=0f;
  for (int ii=0; ii < _models.length; ii++) {
    Model model=(omodels == null || ii >= omodels.length) ? null : omodels[ii];
    if (model == null) {
      model=new Model(_ctx);
      model.setParentScope(this);
      model.setColorState(new ColorState());
    }
    model.setRenderScheme(config.alphaMode == AlphaMode.OPAQUE ? null : RenderScheme.TRANSLUCENT);
    model.setConfig(mconfig.model);
    model.setVisible(true);
    if (_geometryRadius == 0f) {
      model.setLocalTransform(new Transform3D());
      Box bounds=model.getBounds();
      if (!bounds.isEmpty()) {
        float length=bounds.getDiagonalLength();
        if (Float.isNaN(length)) {
          log.warning(""String_Node_Str"",""String_Node_Str"",mconfig.model,""String_Node_Str"",bounds);
        }
 else {
          _geometryRadius=length * 0.5f;
        }
      }
    }
    _models[ii]=model;
  }
  if (omodels != null) {
    for (int ii=_models.length; ii < omodels.length; ii++) {
      omodels[ii].setVisible(false);
      omodels[ii].dispose();
    }
  }
}",0.9829192546583853
152029,"@Override public void update(){
  int pcount=_panels.getComponentCount();
  int length=getLength();
  for (int ii=0; ii < length; ii++) {
    Object value=getValue(ii);
    if (ii < pcount) {
      updatePanel((EntryPanel)_panels.getComponent(ii),value);
    }
 else {
      addPanel(value);
    }
  }
  while (pcount > length) {
    _panels.remove(--pcount);
  }
  updatePanels();
}","@Override public void update(){
  int pcount=_panels.getComponentCount();
  int length=getLength();
  for (int ii=0; ii < length; ii++) {
    Object value=getValue(ii);
    if (ii < pcount) {
      updatePanel((EntryPanel)_panels.getComponent(ii),value);
    }
 else {
      addPanel(value);
    }
  }
  while (pcount > length) {
    _panels.remove(--pcount);
  }
  updatePanels();
  if (_add != null) {
    _add.setEnabled(getLength() < _max);
  }
}",0.9171668667466988
152030,"protected boolean intersects(int x,int y,Shape shape){
  Polygon rect=new Polygon();
  float length=1 / 3f;
  int intersectionCount=0;
  for (int ii=0; ii < SUB_DIVISION; ii++) {
    float xmin=x + (length * ii);
    float xmax=x + (length * (ii + 1));
    for (int jj=0; jj < SUB_DIVISION; jj++) {
      float ymin=y + (length * jj);
      float ymax=y + (length * (jj + 1));
      updateQuad(xmin,ymin,xmax,ymax);
      if (shape.intersects(_quad)) {
        intersectionCount++;
      }
    }
  }
  return intersectionCount > ((SUB_DIVISION * SUB_DIVISION) / 2);
}","protected boolean intersects(int x,int y,Shape shape){
  Polygon rect=new Polygon();
  float length=1f / SUB_DIVISION;
  int intersectionCount=0;
  int nonIntersectionCount=0;
  int intersectsThreshold=((SUB_DIVISION * SUB_DIVISION) / 2);
  for (int ii=0; ii < SUB_DIVISION; ii++) {
    float xmin=x + (length * ii);
    float xmax=x + (length * (ii + 1));
    for (int jj=0; jj < SUB_DIVISION; jj++) {
      float ymin=y + (length * jj);
      float ymax=y + (length * (jj + 1));
      updateQuad(xmin,ymin,xmax,ymax);
      if (shape.intersects(_quad)) {
        intersectionCount++;
      }
 else {
        nonIntersectionCount++;
      }
      if (intersectionCount > intersectsThreshold) {
        return true;
      }
      if (nonIntersectionCount > intersectsThreshold) {
        return false;
      }
    }
  }
  return intersectionCount > intersectsThreshold;
}",0.2239221140472879
152031,"/** 
 * Create an ActionInterval.
 */
public ActionInterval(int executionStamp,Logic activator){
  super(_scenemgr);
  this.executionStamp=executionStamp;
  this.activator=activator;
  _intervals.add(this);
  schedule(executionStamp - _scenemgr.getTimestamp());
}","/** 
 * Create an ActionInterval.
 */
public ActionInterval(int executionStamp,Logic activator){
  super(_scenemgr);
  this.executionStamp=executionStamp;
  this.activator=activator;
  _intervals.add(this);
  schedule(Math.max(0,executionStamp - _scenemgr.getTimestamp()));
}",0.9776951672862454
152032,"/** 
 * Returns a string describing the specified key.
 */
public static String getDesc(MessageBundle msgs,int key){
  int idx;
  String result;
  int baseKey=getBaseKey(key);
  List<String> modifiers=Lists.newArrayList();
  OUTER:   for (int ii=0; ii < KEY_MODIFIERS.length; ii++) {
    if (hasModifierKey(key,KEY_MODIFIERS[ii])) {
      List<Integer> keys=_modifierToKeys.get(KEY_MODIFIERS[ii]);
      if (keys.isEmpty()) {
        modifiers.add(""String_Node_Str"" + (ii + 1));
        continue;
      }
      boolean isController=isControllerKey(baseKey);
      boolean isMouse=isMouseKey(baseKey);
      boolean isKeyboard=isKeyboardKey(baseKey);
      for (      int k : keys) {
        if ((isController && isControllerKey(k)) || (isMouse && isMouseKey(k)) || (isKeyboard && isKeyboardKey(k))) {
          modifiers.add(MessageBundle.taint(getDesc(msgs,k)));
          continue OUTER;
        }
      }
      modifiers.add(MessageBundle.taint(getDesc(msgs,keys.iterator().next())));
    }
  }
switch (getType(baseKey)) {
case KEY_CONTROLLER_BUTTON:
    idx=getControllerIndex(baseKey);
  result=MessageBundle.tcompose(""String_Node_Str"",String.valueOf(idx),Controllers.getController(idx).getButtonName(getControlIndex(baseKey)));
break;
case KEY_CONTROLLER_AXIS_POSITIVE:
idx=getControllerIndex(baseKey);
result=MessageBundle.tcompose(""String_Node_Str"",String.valueOf(idx),Controllers.getController(idx).getAxisName(getControlIndex(baseKey)));
break;
case KEY_CONTROLLER_AXIS_NEGATIVE:
idx=getControllerIndex(baseKey);
result=MessageBundle.tcompose(""String_Node_Str"",String.valueOf(idx),Controllers.getController(idx).getAxisName(getControlIndex(baseKey)));
break;
case KEY_CONTROLLER_POV_X_POSITIVE:
result=MessageBundle.tcompose(""String_Node_Str"",String.valueOf(getControllerIndex(baseKey)));
break;
case KEY_CONTROLLER_POV_X_NEGATIVE:
result=MessageBundle.tcompose(""String_Node_Str"",String.valueOf(getControllerIndex(baseKey)));
break;
case KEY_CONTROLLER_POV_Y_POSITIVE:
result=MessageBundle.tcompose(""String_Node_Str"",String.valueOf(getControllerIndex(baseKey)));
break;
case KEY_CONTROLLER_POV_Y_NEGATIVE:
result=MessageBundle.tcompose(""String_Node_Str"",String.valueOf(getControllerIndex(baseKey)));
break;
default :
String name=getName(baseKey);
String mkey=""String_Node_Str"" + StringUtil.toUSLowerCase(name);
result=msgs.exists(mkey) ? mkey : MessageBundle.taint(name);
}
if (!modifiers.isEmpty()) {
modifiers.add(result);
result=MessageBundle.compose(""String_Node_Str"" + modifiers.size(),modifiers.toArray());
}
return msgs.xlate(result);
}","/** 
 * Returns a string describing the specified key.
 */
public static String getDesc(MessageBundle msgs,int key){
}",0.0883564208161737
152033,"/** 
 * Instructs this component to lay itself out and then mark itself as valid.
 */
public void validate(){
  if (!_valid) {
    if (isVisible()) {
      layout();
    }
    _valid=true;
  }
}","@Override public void validate(){
  if (!_valid) {
    if (isVisible()) {
      layout();
    }
    _valid=true;
  }
}",0.7243589743589743
152034,"/** 
 * Returns true if this component is added to a hierarchy of components that culminates in a top-level window.
 */
public boolean isAdded(){
  Window win=getWindow();
  return (win != null && win.isAdded());
}","@Override public boolean isAdded(){
  Window win=getWindow();
  return (win != null && win.isAdded());
}",0.6226415094339622
152035,"/** 
 * This is called by a window or a scroll pane when it has become invalid.  The root node should schedule a revalidation of this component on the next tick or the next time an event is processed.
 */
public void rootInvalidated(Component root){
  if (!_invalidRoots.contains(root)) {
    _invalidRoots.addLast(root);
  }
}","/** 
 * This is called by a window or a scroll pane when it has become invalid.  The root node should schedule a revalidation of this component on the next tick or the next time an event is processed.
 */
public void rootInvalidated(Validateable root){
  if (!_invalidRoots.contains(root)) {
    _invalidRoots.addLast(root);
  }
}",0.9680365296803652
152036,"public void tick(float elapsed){
  _tickStamp=System.currentTimeMillis();
  _tickParticipants.apply(_tickOp.init(elapsed));
  if (!_pressedKeys.isEmpty()) {
    for (    KeyRecord key : _pressedKeys.values()) {
      key.maybeRepeat();
    }
  }
  boolean updateHover=false;
  while (!_invalidRoots.isEmpty()) {
    Component root=_invalidRoots.removeFirst();
    if (root.isAdded()) {
      root.validate();
      updateHover=true;
    }
  }
  if (updateHover) {
    updateHoverComponent(_mouseX,_mouseY);
  }
  _lastMoveTime+=elapsed;
  _lastTipTime+=elapsed;
  String tiptext;
  if (_hcomponent == null || _tipwin != null || (_lastMoveTime < getTooltipTimeout() && _lastTipTime > TIP_MODE_RESET) || (tiptext=_hcomponent.getTooltipText()) == null) {
    if (_tipwin != null) {
      _lastTipTime=0;
    }
    return;
  }
  Window hwin=_hcomponent.getWindow();
  Component tcomp=_hcomponent.createTooltipComponent(tiptext);
  if (hwin == null || tcomp == null) {
    return;
  }
  _tipwin=new Window(_ctx,new BorderLayout()){
    public boolean isOverlay(){
      return true;
    }
  }
;
  _tipwin.setLayer(Integer.MAX_VALUE / 2);
  _tipwin.setStyleConfig(_hcomponent.getTooltipWindowStyle());
  _tipwin.add(tcomp,BorderLayout.CENTER);
  addWindow(_tipwin);
  if (_tipwin == null) {
    return;
  }
  int width=getDisplayWidth();
  int height=getDisplayHeight();
  _tipwin.pack(_tipWidth == -1 ? width - 10 : _tipWidth,height - 10);
  int tx=0, ty=0;
  if (_hcomponent.isTooltipRelativeToMouse()) {
    tx=_mouseX - _tipwin.getWidth() / 2;
    ty=_mouseY + 10;
  }
 else {
    tx=_hcomponent.getAbsoluteX() + (_hcomponent.getWidth() - _tipwin.getWidth()) / 2;
    ty=_hcomponent.getAbsoluteY() + _hcomponent.getHeight() + 10;
  }
  tx=Math.max(5,Math.min(tx,width - _tipwin.getWidth() - 5));
  ty=Math.min(ty,height - _tipwin.getHeight() - 5);
  _tipwin.setLocation(tx,ty);
  _tipwin.validate();
}","public void tick(float elapsed){
  _tickStamp=System.currentTimeMillis();
  _tickParticipants.apply(_tickOp.init(elapsed));
  if (!_pressedKeys.isEmpty()) {
    for (    KeyRecord key : _pressedKeys.values()) {
      key.maybeRepeat();
    }
  }
  boolean updateHover=false;
  while (!_invalidRoots.isEmpty()) {
    Validateable root=_invalidRoots.removeFirst();
    if (root.isAdded()) {
      root.validate();
      updateHover=true;
    }
  }
  if (updateHover) {
    updateHoverComponent(_mouseX,_mouseY);
  }
  _lastMoveTime+=elapsed;
  _lastTipTime+=elapsed;
  String tiptext;
  if (_hcomponent == null || _tipwin != null || (_lastMoveTime < getTooltipTimeout() && _lastTipTime > TIP_MODE_RESET) || (tiptext=_hcomponent.getTooltipText()) == null) {
    if (_tipwin != null) {
      _lastTipTime=0;
    }
    return;
  }
  Window hwin=_hcomponent.getWindow();
  Component tcomp=_hcomponent.createTooltipComponent(tiptext);
  if (hwin == null || tcomp == null) {
    return;
  }
  _tipwin=new Window(_ctx,new BorderLayout()){
    public boolean isOverlay(){
      return true;
    }
  }
;
  _tipwin.setLayer(Integer.MAX_VALUE / 2);
  _tipwin.setStyleConfig(_hcomponent.getTooltipWindowStyle());
  _tipwin.add(tcomp,BorderLayout.CENTER);
  addWindow(_tipwin);
  if (_tipwin == null) {
    return;
  }
  int width=getDisplayWidth();
  int height=getDisplayHeight();
  _tipwin.pack(_tipWidth == -1 ? width - 10 : _tipWidth,height - 10);
  int tx=0, ty=0;
  if (_hcomponent.isTooltipRelativeToMouse()) {
    tx=_mouseX - _tipwin.getWidth() / 2;
    ty=_mouseY + 10;
  }
 else {
    tx=_hcomponent.getAbsoluteX() + (_hcomponent.getWidth() - _tipwin.getWidth()) / 2;
    ty=_hcomponent.getAbsoluteY() + _hcomponent.getHeight() + 10;
  }
  tx=Math.max(5,Math.min(tx,width - _tipwin.getWidth() - 5));
  ty=Math.min(ty,height - _tipwin.getHeight() - 5);
  _tipwin.setLocation(tx,ty);
  _tipwin.validate();
}",0.994475138121547
152037,"/** 
 * Initializing constructor. 
 */
public ScrollPane(GlContext ctx,Component child,boolean vert,boolean horiz,int snap,boolean buttons){
  super(ctx,new BorderLayout(0,0));
  init(child,vert,horiz,snap,buttons);
}","/** 
 * Initializing constructor.
 */
public ScrollPane(GlContext ctx,Component child,boolean vert,boolean horiz,int snap,boolean buttons){
  super(ctx,new BorderLayout(0,0));
  init(child,vert,horiz,snap,buttons);
}",0.9976905311778292
152038,"/** 
 * Returns the path of the property under the mouse cursor relative to this property.
 * @param pt the location of the mouse cursor.
 */
public String getMousePath(Point pt){
  return ""String_Node_Str"";
}","/** 
 * Returns the path of the property under the mouse cursor relative to this property.
 */
public String getMousePath(){
  Point pt=getMousePosition();
  return (pt == null) ? ""String_Node_Str"" : getPointPath(pt);
}",0.6588785046728972
152039,"/** 
 * Get the property path for the array.
 */
protected String getPropertyPath(){
  BaseEditorPanel editor=findBaseEditor();
  if (editor == null) {
    return ""String_Node_Str"";
  }
  Point pt=SwingUtilities.convertPoint(this,1,1,editor);
  String path=editor.getMousePath(pt);
  if (path.startsWith(""String_Node_Str"")) {
    path=path.substring(1);
  }
  return path;
}","/** 
 * Get the property path for the array.
 */
protected String getPropertyPath(){
  BaseEditorPanel editor=findBaseEditor();
  if (editor == null) {
    return ""String_Node_Str"";
  }
  Point pt=SwingUtilities.convertPoint(this,1,1,editor);
  String path=editor.getPointPath(pt);
  if (path.startsWith(""String_Node_Str"")) {
    path=path.substring(1);
  }
  return path;
}",0.9866310160427808
152040,"/** 
 * Creates a new actor sprite.
 */
public ActorSprite(TudeyContext ctx,TudeySceneView view,int timestamp,Actor actor){
  super(ctx,view);
  _actor=(Actor)actor.clone();
  if ((_advancer=_actor.maybeCreateAdvancer(ctx,view,timestamp)) == null) {
    _history=new ActorHistory(timestamp,actor,view.getBufferDelay() * 4);
  }
  _model=new Model(ctx);
  _model.setUserObject(this);
  _attachedModels=Maps.newHashMap();
  _attachedModels.put(_model,false);
  _shape=new ShapeElement(_actor.getOriginal().shape);
  _shape.setUserObject(this);
  _view.addTickParticipant(this);
  updateActor();
  if (isCreated()) {
    _view.getScene().add(_model);
    _view.getActorSpace().add(_shape);
    _model.tick(0f);
    update();
    if (timestamp == _actor.getCreated()) {
      _impl.wasCreated();
    }
  }
 else {
    _impl=null;
  }
}","/** 
 * Creates a new actor sprite.
 */
public ActorSprite(TudeyContext ctx,TudeySceneView view,int timestamp,Actor actor){
  super(ctx,view);
  _actor=(Actor)actor.clone();
  if ((_advancer=_actor.maybeCreateAdvancer(ctx,view,timestamp)) == null) {
    _history=new ActorHistory(timestamp,actor,view.getBufferDelay() * 4);
  }
  _model=new Model(ctx);
  _model.setUserObject(this);
  _attachedModels=Maps.newHashMap();
  _attachedModels.put(_model,true);
  _shape=new ShapeElement(_actor.getOriginal().shape);
  _shape.setUserObject(this);
  _view.addTickParticipant(this);
  updateActor();
  if (isCreated()) {
    _view.getScene().add(_model);
    _view.getActorSpace().add(_shape);
    _model.tick(0f);
    update();
    if (timestamp == _actor.getCreated()) {
      _impl.wasCreated();
    }
  }
 else {
    _impl=null;
  }
}",0.99578567128236
152041,"/** 
 * Updates this animation based on the elapsed time in seconds. NOTE: This is DIFFERENT from the typical tickable interface! In our case, true = 'done animating', false = 'still animating'. (Default tickable, true = 'keep ticking', false = 'stop ticking'.)
 * @return true if the animation has completed.
 */
public boolean tick(float elapsed){
  long nnow=ScopeUtil.resolveTimestamp(this,Scope.NOW).value;
  elapsed=(nnow - _lastTickTimestamp) / 1000f;
  _lastTickTimestamp=nnow;
  return _impl.tick(elapsed);
}","/** 
 * Updates this animation based on the elapsed time in seconds. NOTE: This is DIFFERENT from the typical tickable interface! In our case, true = 'done animating', false = 'still animating'. (Default tickable, true = 'keep ticking', false = 'stop ticking'.)
 * @return true if the animation has completed.
 */
public boolean tick(float elapsed){
  long nnow=ScopeUtil.resolveTimestamp(this,Scope.NOW).value;
  float telapsed=(nnow - _lastTickTimestamp) / 1000f;
  _lastTickTimestamp=nnow;
  elapsed=_lastElapsed;
  _lastElapsed=telapsed;
  return _impl.tick(elapsed);
}",0.9486238532110092
152042,"/** 
 * Calculates the minimum distance to the origin for the A polygon edges in the convex hull of the Minkowski difference of the A and B polygons.
 */
protected static Vector2f getMinMinkowskyDifference(Vector2f[] A,Vector2f[] B,float radius,Vector2f minDistance){
  if (Vector2f.ZERO.equals(minDistance)) {
    return minDistance;
  }
  boolean flip=minDistance != null;
  for (int ii=0, nn=A.length; ii < nn; ii++) {
    Vector2f start=A[ii];
    Vector2f end=A[(ii + 1) % nn];
    Vector2f sprime=Vector2f.ZERO;
    Vector2f eprime=Vector2f.ZERO;
    Vector2f perp=new Vector2f(start.y - end.y,end.x - start.x);
    float dot=Float.NEGATIVE_INFINITY;
    int dj=0;
    for (int jj=0, mm=B.length; jj < mm; jj++) {
      float odot=perp.dot(B[jj]);
      if (odot > dot) {
        dot=odot;
        sprime=B[jj];
        eprime=sprime;
        dj=jj;
      }
 else       if (FloatMath.epsilonEquals(odot,dot)) {
        if (dj == (jj + 1) % mm) {
          sprime=B[jj];
        }
 else {
          eprime=B[jj];
        }
      }
    }
    if (flip) {
      sprime=sprime.subtract(start);
      eprime=eprime.subtract(end);
    }
 else {
      sprime=start.subtract(sprime);
      eprime=end.subtract(eprime);
    }
    Vector2f distance=new Vector2f();
    getOutsideLinePenetration(sprime,eprime,radius,Vector2f.ZERO,distance);
    if (minDistance == null || minDistance.distanceSquared(Vector2f.ZERO) > distance.distanceSquared(Vector2f.ZERO)) {
      minDistance=distance;
      if (minDistance.equals(Vector2f.ZERO)) {
        break;
      }
    }
  }
  return minDistance;
}","/** 
 * Calculates the minimum distance to the origin for the A polygon edges in the convex hull of the Minkowski difference of the A and B polygons.
 */
protected static Vector2f getMinMinkowskyDifference(Vector2f[] A,Vector2f[] B,float radius,Vector2f minDistance){
  if (Vector2f.ZERO.equals(minDistance)) {
    return minDistance;
  }
  boolean flip=minDistance != null;
  for (int ii=0, nn=A.length; ii < nn; ii++) {
    Vector2f start=A[ii];
    Vector2f end=A[(ii + 1) % nn];
    Vector2f sprime=Vector2f.ZERO;
    Vector2f eprime=Vector2f.ZERO;
    Vector2f perp=new Vector2f(start.y - end.y,end.x - start.x);
    float dot=Float.NEGATIVE_INFINITY;
    int dj=0;
    for (int jj=0, mm=B.length; jj < mm; jj++) {
      float odot=perp.dot(B[jj]);
      if (odot > dot) {
        dot=odot;
        sprime=B[jj];
        eprime=sprime;
        dj=jj;
      }
 else       if (FloatMath.epsilonEquals(odot,dot)) {
        Vector2f perp2=new Vector2f(B[jj].y - sprime.y,sprime.x - B[jj].x);
        if (perp.dot(perp2) < 0) {
          sprime=B[jj];
        }
 else {
          eprime=B[jj];
        }
      }
    }
    if (flip) {
      sprime=sprime.subtract(start);
      eprime=eprime.subtract(end);
    }
 else {
      sprime=start.subtract(sprime);
      eprime=end.subtract(eprime);
    }
    Vector2f distance=new Vector2f();
    getOutsideLinePenetration(sprime,eprime,radius,Vector2f.ZERO,distance);
    if (minDistance == null || minDistance.distanceSquared(Vector2f.ZERO) > distance.distanceSquared(Vector2f.ZERO)) {
      minDistance=distance;
      if (minDistance.equals(Vector2f.ZERO)) {
        break;
      }
    }
  }
  return minDistance;
}",0.9624384236453202
152043,"/** 
 * Replaces the specified run of text with the supplied new text.
 * @param offset a starting (cursor) position for the edit.
 * @param length the length of the area to replace with any new text. Can be negativeto ""edit leftwards"".
 * @param text text to insert at the offset, or """".
 * @param undoId an id used to group compound edits for undo (-1 if not undoable).
 * @return the new cursor position, or -1 if the edit was rejected.
 */
public int replace(final int offset,final int length,final String text,int undoId){
  int docLength=_text.length();
  int insLength=text.length();
  final int cutStart=Math.max(0,offset + Math.min(length,0));
  int cutEnd=Math.min(docLength,offset + Math.max(length,0));
  String ntext=new StringBuilder().append(_text,0,cutStart).append(text).append(_text,cutEnd,docLength).toString();
  if (!validateEdit(_text,ntext)) {
    return -1;
  }
  if (undoId > 0) {
    if (undoId != _lastUndoId) {
      _undosup.postEdit(_compoundEdit=new AbstractUndoableEdit(){
        public boolean addEdit(        UndoableEdit edit){
          return edit.isSignificant() ? false : _edits.add(edit);
        }
        public void undo(){
          super.undo();
          for (int ii=_edits.size() - 1; ii >= 0; ii--) {
            _edits.get(ii).undo();
          }
        }
        public void redo(){
          super.redo();
          for (int ii=0, nn=_edits.size(); ii < nn; ii++) {
            _edits.get(ii).redo();
          }
        }
        protected ArrayList<UndoableEdit> _edits=new ArrayList<UndoableEdit>();
      }
);
    }
    final String otext=_text.substring(cutStart,cutEnd);
    _compoundEdit.addEdit(new AbstractUndoableEdit(){
      public void undo(){
        super.undo();
        replace(cutStart,text.length(),otext,-1);
      }
      public void redo(){
        super.redo();
        replace(offset,length,text,-1);
      }
      public boolean isSignificant(){
        return false;
      }
    }
);
  }
  _lastUndoId=undoId;
  _text=ntext;
  int cutLength=cutEnd - cutStart;
  if (cutLength > 0) {
    notify(false,cutStart,cutLength);
  }
  if (insLength > 0) {
    notify(true,cutEnd,insLength);
  }
  return cutStart + insLength;
}","/** 
 * Replaces the specified run of text with the supplied new text.
 * @param offset a starting (cursor) position for the edit.
 * @param length the length of the area to replace with any new text. Can be negativeto ""edit leftwards"".
 * @param text text to insert at the offset, or """".
 * @param undoId an id used to group compound edits for undo (-1 if not undoable).
 * @return the new cursor position, or -1 if the edit was rejected.
 */
public int replace(final int offset,final int length,final String text,int undoId){
  int docLength=_text.length();
  int insLength=text.length();
  final int cutStart=Math.max(0,offset + Math.min(length,0));
  int cutEnd=Math.min(docLength,offset + Math.max(length,0));
  String ntext=new StringBuilder().append(_text,0,cutStart).append(text).append(_text,cutEnd,docLength).toString();
  if (!validateEdit(_text,ntext)) {
    return -1;
  }
  if (undoId > 0) {
    if (undoId != _lastUndoId) {
      _undosup.postEdit(_compoundEdit=new AbstractUndoableEdit(){
        public boolean addEdit(        UndoableEdit edit){
          return edit.isSignificant() ? false : _edits.add(edit);
        }
        public void undo(){
          super.undo();
          for (int ii=_edits.size() - 1; ii >= 0; ii--) {
            _edits.get(ii).undo();
          }
        }
        public void redo(){
          super.redo();
          for (int ii=0, nn=_edits.size(); ii < nn; ii++) {
            _edits.get(ii).redo();
          }
        }
        protected ArrayList<UndoableEdit> _edits=new ArrayList<UndoableEdit>();
      }
);
    }
    final String otext=_text.substring(cutStart,cutEnd);
    _compoundEdit.addEdit(new AbstractUndoableEdit(){
      public void undo(){
        super.undo();
        replace(cutStart,text.length(),otext,-1);
      }
      public void redo(){
        super.redo();
        replace(offset,length,text,-1);
      }
      public boolean isSignificant(){
        return false;
      }
    }
);
  }
  _lastUndoId=undoId;
  _text=ntext;
  int cutLength=cutEnd - cutStart;
  if (cutLength > 0) {
    notify(false,cutStart,cutLength);
  }
  if (insLength > 0) {
    notify(true,cutStart,insLength);
  }
  return cutStart + insLength;
}",0.998180991359709
152044,"/** 
 * Calculates the height of an entry.
 */
protected void computeHeight(Entry<V,C> entry,Container container){
  if (entry.height < 0) {
    if (entry.component == null) {
      entry.component=createComponent(entry.value);
    }
    boolean remove=false;
    if (!entry.component.isAdded()) {
      container.add(entry.component);
      remove=true;
    }
    int twidth=container.getWidth() - container.getInsets().getHorizontal();
    entry.height=entry.component.getPreferredSize(twidth,0).height;
    if (remove) {
      remove(entry.component);
    }
  }
}","/** 
 * Calculates the height of an entry.
 */
protected void computeHeight(Entry<V,C> entry,Container container){
  if (entry.height < 0) {
    if (entry.component == null) {
      entry.component=createComponent(entry.value);
    }
    boolean remove=false;
    if (!entry.component.isAdded()) {
      container.add(entry.component);
      remove=true;
    }
    int twidth=container.getWidth() - container.getInsets().getHorizontal();
    entry.height=entry.component.getPreferredSize(twidth,0).height;
    if (remove) {
      container.remove(entry.component);
    }
  }
}",0.9912434325744308
152045,"/** 
 * Warps the actor.
 * @param adjust if true, adjusts the location as when spawning to avoid intersecting otheractors.
 */
public void warp(float x,float y,float rotation,float tx,float ty,boolean adjust){
  _actor.set(Actor.WARP);
  float oldX=_actor.getTranslation().x;
  float oldY=_actor.getTranslation().y;
  float oldR=_actor.getRotation();
  if (tx != x || ty != y) {
    rotation=FloatMath.atan2(ty - y,tx - x);
  }
  move(x,y,rotation);
  if (adjust && _config.spawnMask != 0) {
    _scenemgr.getActorSpace().remove(_shape);
    if (_scenemgr.collides(_config.spawnMask,getShape(),_scenemgr.getTimestamp()) || _scenemgr.getPathfinder().getPath(this,MAX_ADJUSTMENT_PATH_LENGTH,tx,ty,false,false) == null) {
      adjustSpawnPoint(tx,ty);
      if (_scenemgr.getPathfinder().getPath(this,MAX_ADJUSTMENT_PATH_LENGTH,tx,ty,false,false) == null) {
        move(oldX,oldY,oldR);
      }
 else       if (tx != x || ty != y) {
        Vector2f trans=_actor.getTranslation();
        _actor.setRotation(FloatMath.atan2(ty - trans.y,tx - trans.x));
        updateShape();
      }
    }
    _scenemgr.getActorSpace().add(_shape);
  }
  _scenemgr.addTickParticipant(new TudeySceneManager.TickParticipant(){
    public boolean tick(    int timestamp){
      _actor.clear(Actor.WARP);
      wasUpdated();
      return false;
    }
  }
);
}","/** 
 * Warps the actor.
 * @param adjust if true, adjusts the location as when spawning to avoid intersecting otheractors.
 */
public void warp(float x,float y,float rotation,float tx,float ty,boolean adjust){
  _actor.set(Actor.WARP);
  float oldX=_actor.getTranslation().x;
  float oldY=_actor.getTranslation().y;
  float oldR=_actor.getRotation();
  if (tx != x || ty != y) {
    rotation=FloatMath.atan2(ty - y,tx - x);
  }
  move(x,y,rotation);
  if (adjust && _config.spawnMask != 0) {
    _scenemgr.getActorSpace().remove(_shape);
    boolean canPath=_scenemgr.getPathfinder().getPath(this,MAX_ADJUSTMENT_PATH_LENGTH,tx,ty,false,false) != null;
    if (!canPath || _scenemgr.collides(_config.spawnMask,getShape(),_scenemgr.getTimestamp())) {
      if (canPath) {
        adjustSpawnPoint(x,y);
      }
 else {
        adjustSpawnPoint(tx,ty);
      }
      if (_scenemgr.getPathfinder().getPath(this,MAX_ADJUSTMENT_PATH_LENGTH,tx,ty,false,false) == null) {
        move(oldX,oldY,oldR);
      }
 else       if (tx != x || ty != y) {
        Vector2f trans=_actor.getTranslation();
        _actor.setRotation(FloatMath.atan2(ty - trans.y,tx - trans.x));
        updateShape();
      }
    }
    _scenemgr.getActorSpace().add(_shape);
  }
  _scenemgr.addTickParticipant(new TudeySceneManager.TickParticipant(){
    public boolean tick(    int timestamp){
      _actor.clear(Actor.WARP);
      wasUpdated();
      return false;
    }
  }
);
}",0.8973438621679828
152046,"/** 
 * Updates the state of the interface based on the current value.
 * @param transfer if true, attempt to transfer values from the existing set of editors intothe current arguments.
 */
protected void update(ConfigReference value,boolean transfer){
  if (_listenee != null) {
    _listenee.removeListener(this);
    _listenee=null;
  }
  boolean enable=(value != null);
  if (_edit != null) {
    _edit.setEnabled(enable);
  }
  if (_clear != null) {
    _clear.setEnabled(enable);
  }
  if (!enable) {
    _config.setText(_msgs.get(""String_Node_Str""));
    _arguments.removeAll();
    return;
  }
  String name=value.getName();
  _config.setText(name.substring(name.lastIndexOf('/') + 1));
  @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> clazz=(Class<ManagedConfig>)_property.getArgumentType(ConfigReference.class);
  ManagedConfig config=_ctx.getConfigManager().getConfig(clazz,name);
  if (!(config instanceof ParameterizedConfig)) {
    _arguments.removeAll();
    value.getArguments().clear();
    if (config == null) {
      _config.setForeground(Color.red);
    }
    return;
  }
  _config.setForeground(_content.getForeground());
  int ocount=_arguments.getComponentCount();
  HashMap<String,PropertyEditor> oeditors=new HashMap<String,PropertyEditor>();
  if (transfer) {
    for (int ii=0; ii < ocount; ii++) {
      PropertyEditor editor=(PropertyEditor)_arguments.getComponent(ii);
      oeditors.put(editor.getProperty().getName(),editor);
    }
  }
  int idx=0;
  Object nargs=value.getArguments();
  ParameterizedConfig pconfig=(ParameterizedConfig)config;
  for (  Parameter parameter : pconfig.parameters) {
    Property property=parameter.getArgumentProperty(pconfig);
    if (property == null) {
      continue;
    }
    PropertyEditor editor=null;
    if (idx < ocount) {
      PropertyEditor oeditor=(PropertyEditor)_arguments.getComponent(idx);
      if (oeditor.getProperty().equals(property)) {
        if (transfer) {
          property.set(nargs,property.get(oeditor.getObject()));
        }
        editor=oeditor;
      }
 else {
        _arguments.remove(idx);
      }
    }
    if (editor == null) {
      editor=PropertyEditor.createEditor(_ctx,property,_lineage);
      editor.addChangeListener(this);
      _arguments.add(editor,idx);
      PropertyEditor oeditor=oeditors.get(parameter.name);
      if (oeditor != null) {
        Property oproperty=oeditor.getProperty();
        if (property.getGenericType().equals(oproperty.getGenericType())) {
          Object ovalue=oproperty.get(oeditor.getObject());
          if (property.isLegalValue(ovalue)) {
            property.set(nargs,ovalue);
          }
        }
      }
    }
    editor.setObject(nargs);
    idx++;
  }
  while (ocount > idx) {
    _arguments.remove(--ocount);
  }
  for (Iterator<String> it=value.getArguments().keySet().iterator(); it.hasNext(); ) {
    if (pconfig.getParameter(it.next()) == null) {
      it.remove();
    }
  }
  (_listenee=pconfig).addListener(this);
}","/** 
 * Updates the state of the interface based on the current value.
 * @param transfer if true, attempt to transfer values from the existing set of editors intothe current arguments.
 */
protected void update(ConfigReference value,boolean transfer){
  if (_listenee != null) {
    _listenee.removeListener(this);
    _listenee=null;
  }
  boolean enable=(value != null);
  if (_edit != null) {
    _edit.setEnabled(enable);
  }
  if (_clear != null) {
    _clear.setEnabled(enable);
  }
  if (!enable) {
    _config.setText(_msgs.get(""String_Node_Str""));
    _arguments.removeAll();
    return;
  }
  String name=value.getName();
  _config.setText(name.substring(name.lastIndexOf('/') + 1));
  @SuppressWarnings(""String_Node_Str"") Class<ManagedConfig> clazz=(Class<ManagedConfig>)_property.getArgumentType(ConfigReference.class);
  ManagedConfig config=_ctx.getConfigManager().getConfig(clazz,name);
  if (!(config instanceof ParameterizedConfig)) {
    _arguments.removeAll();
    value.getArguments().clear();
    if (config == null) {
      _config.setForeground(Color.red);
    }
    return;
  }
  _config.setForeground(_content.getForeground());
  int ocount=_arguments.getComponentCount();
  HashMap<String,PropertyEditor> oeditors=new HashMap<String,PropertyEditor>();
  if (transfer) {
    for (int ii=0; ii < ocount; ii++) {
      PropertyEditor editor=(PropertyEditor)_arguments.getComponent(ii);
      oeditors.put(editor.getProperty().getName(),editor);
    }
  }
  int idx=0;
  Object nargs=value.getArguments();
  ParameterizedConfig pconfig=(ParameterizedConfig)config;
  for (  Parameter parameter : pconfig.parameters) {
    Property property=parameter.getArgumentProperty(pconfig);
    if (property == null) {
      continue;
    }
    PropertyEditor editor=null;
    if (idx < ocount) {
      PropertyEditor oeditor=(PropertyEditor)_arguments.getComponent(idx);
      if (oeditor.getProperty().equals(property)) {
        if (transfer) {
          property.set(nargs,property.get(oeditor.getObject()));
        }
        editor=oeditor;
      }
 else {
        _arguments.remove(idx);
      }
    }
    if (editor == null) {
      editor=PropertyEditor.createEditor(_ctx,property,_lineage);
      editor.addChangeListener(this);
      _arguments.add(editor,idx);
      PropertyEditor oeditor=oeditors.get(parameter.name);
      if (oeditor != null) {
        Property oproperty=oeditor.getProperty();
        if (property.getGenericType().equals(oproperty.getGenericType())) {
          Object ovalue=oproperty.get(oeditor.getObject());
          if (property.isLegalValue(ovalue)) {
            property.set(nargs,ovalue);
          }
        }
      }
    }
    editor.setObject(nargs);
    idx++;
  }
  while (ocount > idx) {
    _arguments.remove(--ocount);
  }
  SwingUtil.refresh(_arguments);
  for (Iterator<String> it=value.getArguments().keySet().iterator(); it.hasNext(); ) {
    if (pconfig.getParameter(it.next()) == null) {
      it.remove();
    }
  }
  (_listenee=pconfig).addListener(this);
}",0.9945246391239424
152047,"@Override protected void renderComponent(Renderer renderer){
  super.renderComponent(renderer);
  Insets insets=getInsets();
  int lineHeight=getTextFactory().getHeight();
  if (_showCursor && (_cursp != _selp)) {
    Background bkg=getSelectionBackground();
    if (bkg != null) {
      int startP=Math.min(_cursp,_selp);
      int endP=Math.max(_cursp,_selp);
      Point startLoc=(startP == _cursp) ? _curs : _sel;
      Point endLoc=(startP == _cursp) ? _sel : _curs;
      if (startLoc.y == endLoc.y) {
        bkg.render(renderer,insets.left + startLoc.x,insets.bottom + startLoc.y,endLoc.x - startLoc.x + 1,lineHeight,_alpha);
      }
 else {
        int pos=0;
        boolean started=false;
        int y=_height - insets.top - lineHeight;
        for (        Text text : _glyphs) {
          int length=text.getLength();
          if (started) {
            if (endP < (pos + length)) {
              bkg.render(renderer,insets.left,insets.bottom + endLoc.y,endLoc.x + 1,lineHeight,_alpha);
              break;
            }
            bkg.render(renderer,insets.left,y,text.getSize().width + 1,lineHeight,_alpha);
          }
 else {
            if (startP < (pos + length)) {
              bkg.render(renderer,insets.left + startLoc.x,insets.bottom + startLoc.y,text.getSize().width - startLoc.x,lineHeight,_alpha);
              started=true;
            }
          }
          pos+=length;
          y-=lineHeight;
        }
      }
    }
  }
  if (_glyphs != null) {
    int x=insets.left;
    int y=_height - insets.top - lineHeight;
    for (    Text text : _glyphs) {
      text.render(renderer,x,y,_alpha);
      y-=lineHeight;
    }
  }
  if (_showCursor && (_cursp == _selp)) {
    renderCursor(renderer,insets.left + _curs.x,insets.bottom + _curs.y,lineHeight);
  }
}","@Override protected void renderComponent(Renderer renderer){
  super.renderComponent(renderer);
  Insets insets=getInsets();
  int lineHeight=getTextFactory().getHeight();
  if (_showCursor && (_cursp != _selp)) {
    Background bkg=getSelectionBackground();
    if (bkg != null) {
      int startP=Math.min(_cursp,_selp);
      int endP=Math.max(_cursp,_selp);
      Point startLoc=(startP == _cursp) ? _curs : _sel;
      Point endLoc=(startP == _cursp) ? _sel : _curs;
      if (startLoc.y == endLoc.y) {
        bkg.render(renderer,insets.left + startLoc.x,insets.bottom + startLoc.y,endLoc.x - startLoc.x + 1,lineHeight,_alpha);
      }
 else {
        int idx=((_height - insets.getVertical() - startLoc.y) / lineHeight) - 1;
        bkg.render(renderer,insets.left + startLoc.x,insets.bottom + startLoc.y,_glyphs[idx].getSize().width - startLoc.x + 1,lineHeight,_alpha);
        for (int y=startLoc.y - lineHeight; y > endLoc.y; y-=lineHeight) {
          bkg.render(renderer,insets.left,insets.bottom + y,_glyphs[++idx].getSize().width + 1,lineHeight,_alpha);
        }
        bkg.render(renderer,insets.left,insets.bottom + endLoc.y,endLoc.x + 1,lineHeight,_alpha);
      }
    }
  }
  if (_glyphs != null) {
    int x=insets.left;
    int y=_height - insets.top - lineHeight;
    for (    Text text : _glyphs) {
      text.render(renderer,x,y,_alpha);
      y-=lineHeight;
    }
  }
  if (_showCursor && (_cursp == _selp)) {
    renderCursor(renderer,insets.left + _curs.x,insets.bottom + _curs.y,lineHeight);
  }
}",0.7863814401928292
152048,"@Override protected void createGlyphs(){
  _glyphs=getTextFactory().wrapText(getDisplayText(),getColor(),UIConstants.PLAIN,UIConstants.DEFAULT_SIZE,null,_width - getInsets().getHorizontal());
  if (_glyphs.length != _lines) {
    _lines=_glyphs.length;
    invalidate();
  }
}","@Override protected void createGlyphs(){
  _glyphs=getTextFactory().wrapText(getDisplayText(),getColor(),UIConstants.PLAIN,UIConstants.DEFAULT_SIZE,null,_width - getInsets().getHorizontal());
}",0.8230277185501066
152049,"@Override protected Dimension computePreferredSize(int whint,int hhint){
  Insets insets=getInsets();
  int height=getTextFactory().getHeight();
  int width=(_prefWidth == -1) ? insets.getHorizontal() : _prefWidth;
  return (_glyphs == null) ? new Dimension(width,height) : new Dimension(width,(height * _glyphs.length) + insets.getVertical());
}","@Override protected Dimension computePreferredSize(int whint,int hhint){
  Insets insets=getInsets();
  int lineHeight=getTextFactory().getHeight();
  int width=(_prefWidth == -1) ? insets.getHorizontal() : _prefWidth;
  return new Dimension(width,(_lines * lineHeight) + insets.getVertical());
}",0.7694704049844237
152050,"@Override public void layout(){
  Insets insets=getInsets();
  int twidth=getWidth() - insets.getHorizontal();
  int theight=getHeight() - insets.getVertical();
  int gap=((GroupLayout)getLayoutManager()).getGap();
  int totheight=0;
  int snapheight=0;
  for (  Entry<V,C> entry : _values) {
    if (entry.height < 0) {
      if (entry.component == null) {
        entry.component=createComponent(entry.value);
      }
      boolean remove=false;
      if (!entry.component.isAdded()) {
        add(entry.component);
        remove=true;
      }
      entry.height=entry.component.getPreferredSize(twidth,0).height;
      if (remove) {
        remove(entry.component);
      }
    }
    if (entry.value == _snapValue) {
      snapheight=totheight;
    }
    totheight+=entry.height;
  }
  if (_values.size() > 1) {
    totheight+=(gap * _values.size() - 1);
  }
  int extent=Math.min(theight,totheight);
  int value=_model.getValue();
  if (_snap) {
    value=totheight - extent;
    _snap=false;
  }
 else   if (_snapValue != null) {
    _snapValue=null;
    value=Math.min(totheight - extent,snapheight);
  }
  if (extent != _model.getExtent() || totheight != _model.getMaximum()) {
    _model.setRange(0,value,extent,totheight);
  }
  _offset=_model.getValue();
  int compIx=0;
  for (int ii=0; ii < _values.size(); ii++) {
    Entry<V,C> entry=_values.get(ii);
    if (_offset < entry.height) {
      compIx=ii;
      break;
    }
    _offset-=(entry.height + gap);
    if (entry.component != null) {
      if (entry.component.isAdded()) {
        remove(entry.component);
      }
      entry.component=null;
    }
  }
  extent+=_offset;
  int topIx=compIx;
  while (compIx < _values.size() && extent > 0) {
    Entry<V,C> entry=_values.get(compIx);
    if (entry.component == null) {
      entry.component=createComponent(entry.value);
    }
    if (!entry.component.isAdded()) {
      add(compIx - topIx,entry.component);
    }
    extent-=(entry.height + gap);
    compIx++;
  }
  while (compIx < _values.size()) {
    Entry<V,C> entry=_values.get(compIx);
    if (entry.component != null) {
      if (entry.component.isAdded()) {
        remove(entry.component);
      }
      entry.component=null;
    }
    compIx++;
  }
  super.layout();
}","@Override public void layout(){
  Insets insets=getInsets();
  int twidth=getWidth() - insets.getHorizontal();
  int theight=getHeight() - insets.getVertical();
  int gap=((GroupLayout)getLayoutManager()).getGap();
  int totheight=0;
  int snapheight=0;
  for (int ii=0, nn=_values.size(); ii < nn; ii++) {
    Entry<V,C> entry=_values.get(ii);
    if (entry.height < 0) {
      if (entry.component == null) {
        entry.component=createComponent(entry.value);
      }
      boolean remove=false;
      if (!entry.component.isAdded()) {
        add(entry.component);
        remove=true;
      }
      entry.height=entry.component.getPreferredSize(twidth,0).height;
      if (remove) {
        remove(entry.component);
      }
    }
    if (entry.value == _snapValue) {
      snapheight=totheight + gap * ii;
    }
    totheight+=entry.height;
  }
  if (_values.size() > 1) {
    totheight+=(gap * _values.size() - 1);
  }
  int extent=Math.min(theight,totheight);
  int value=_model.getValue();
  if (_snap) {
    value=totheight - extent;
    _snap=false;
  }
 else   if (_snapValue != null) {
    _snapValue=null;
    value=Math.min(totheight - extent,snapheight);
    _model.setValue(value);
  }
  if (extent != _model.getExtent() || totheight != _model.getMaximum()) {
    _model.setRange(0,value,extent,totheight);
  }
  _offset=_model.getValue();
  int compIx=0;
  for (int ii=0; ii < _values.size(); ii++) {
    Entry<V,C> entry=_values.get(ii);
    if (_offset < entry.height) {
      compIx=ii;
      break;
    }
    _offset-=(entry.height + gap);
    if (entry.component != null) {
      if (entry.component.isAdded()) {
        remove(entry.component);
      }
      entry.component=null;
    }
  }
  extent+=_offset;
  int topIx=compIx;
  while (compIx < _values.size() && extent > 0) {
    Entry<V,C> entry=_values.get(compIx);
    if (entry.component == null) {
      entry.component=createComponent(entry.value);
    }
    if (!entry.component.isAdded()) {
      add(compIx - topIx,entry.component);
    }
    extent-=(entry.height + gap);
    compIx++;
  }
  while (compIx < _values.size()) {
    Entry<V,C> entry=_values.get(compIx);
    if (entry.component != null) {
      if (entry.component.isAdded()) {
        remove(entry.component);
      }
      entry.component=null;
    }
    compIx++;
  }
  super.layout();
}",0.9745264532984976
152051,"/** 
 * Creates a canvas using one of our supported pixel formats.
 */
protected Component createCanvas(){
  return new DisplayCanvas(){
    @Override protected void didInit(){
      GlCanvasApp.this.init();
    }
    @Override protected void updateView(){
      GlCanvasApp.this.updateView();
    }
    @Override protected void renderView(){
      GlCanvasApp.this.renderView();
    }
  }
;
}","/** 
 * Creates a canvas using one of our supported pixel formats.
 */
protected Component createCanvas(){
  if (RunAnywhere.isLinux()) {
    return new DisplayCanvas(){
      @Override protected void didInit(){
        GlCanvasApp.this.init();
      }
      @Override protected void updateView(){
        GlCanvasApp.this.updateView();
      }
      @Override protected void renderView(){
        GlCanvasApp.this.renderView();
      }
    }
;
  }
  for (  PixelFormat format : PIXEL_FORMATS) {
    try {
      return new AWTCanvas(format){
        @Override protected void didInit(){
          GlCanvasApp.this.init();
        }
        @Override protected void updateView(){
          GlCanvasApp.this.updateView();
        }
        @Override protected void renderView(){
          GlCanvasApp.this.renderView();
        }
      }
;
    }
 catch (    LWJGLException e) {
    }
  }
  log.warning(""String_Node_Str"");
  return null;
}",0.5813253012048193
152052,"protected void updateVisibility(int layer,boolean visible){
  TudeySceneView view=_editor.getView();
  for (  TudeySceneModel.Entry entry : _scene.getEntries()) {
    Object key=entry.getKey();
    if (layer == _scene.getLayer(key)) {
      EntrySprite sprite=view.getEntrySprite(key);
      if (sprite != null) {
        sprite.getModel().setVisible(visible);
      }
    }
  }
}","protected void updateVisibility(int layer,boolean visible){
  TudeySceneView view=_editor.getView();
  for (  TudeySceneModel.Entry entry : _scene.getEntries()) {
    Object key=entry.getKey();
    if (layer == _scene.getLayer(key)) {
      EntrySprite sprite=view.getEntrySprite(key);
      if (sprite != null) {
        Model model=sprite.getModel();
        if (model != null) {
          model.setVisible(visible);
        }
      }
    }
  }
}",0.8888888888888888
152053,"/** 
 * Sets the active tool.
 */
protected void setActiveTool(EditorTool tool){
  if (_activeTool == tool) {
    return;
  }
  if (_activeTool != null) {
    _activeTool.deactivate();
    _opanel.remove(_activeTool);
  }
  if ((_activeTool=tool) != null) {
    _opanel.add(_activeTool);
    _activeTool.activate();
  }
  boolean hideLayers=(tool instanceof GlobalEditor) || (tool instanceof Notepad);
  if (hideLayers) {
    _layerDividerPos=_layerSplit.getDividerLocation();
    _layers.setVisible(false);
  }
 else {
    _layers.setVisible(true);
    if (_layerDividerPos != 0) {
      _layerSplit.setDividerLocation(_layerDividerPos);
    }
  }
  boolean forceBase=(tool == _tileBrush) || (tool == _groundBrush) || (tool == _wallBrush);
  if (forceBase) {
    _layers.setSelectedLayer(0);
  }
  SwingUtil.refresh(_opanel);
}","/** 
 * Sets the active tool.
 */
protected void setActiveTool(EditorTool tool){
  if (_activeTool == tool) {
    return;
  }
  if (_activeTool != null) {
    _activeTool.deactivate();
    _opanel.remove(_activeTool);
  }
  if ((_activeTool=tool) != null) {
    _opanel.add(_activeTool);
    _activeTool.activate();
  }
  boolean hideLayers=(tool instanceof GlobalEditor) || (tool instanceof Notepad);
  if (hideLayers) {
    if (_layers.isVisible()) {
      _layerDividerPos=_layerSplit.getDividerLocation();
      _layers.setVisible(false);
    }
  }
 else {
    _layers.setVisible(true);
    if (_layerDividerPos != 0) {
      _layerSplit.setDividerLocation(_layerDividerPos);
    }
  }
  boolean forceBase=(tool == _tileBrush) || (tool == _groundBrush) || (tool == _wallBrush);
  if (forceBase) {
    _layers.setSelectedLayer(0);
  }
  SwingUtil.refresh(_opanel);
}",0.975839717147908
152054,"/** 
 * Sets the GLSL shader state.
 */
public void setShaderState(Program program,boolean vertexProgramTwoSide){
  if (_program != program) {
    int id=(program == null) ? 0 : program.getId();
    ARBShaderObjects.glUseProgramObjectARB(id);
    _program=program;
    _states[RenderState.SHADER_STATE]=null;
  }
  if (program != null && program.getVertexShader() != null && _vertexProgramTwoSide != Boolean.valueOf(vertexProgramTwoSide)) {
    setCapability(ARBVertexShader.GL_VERTEX_PROGRAM_TWO_SIDE_ARB,_vertexProgramTwoSide=vertexProgramTwoSide);
  }
}","/** 
 * Sets the GLSL shader state.
 */
public void setShaderState(Program program,boolean vertexProgramTwoSide){
  if (_program != program) {
    int id=(program == null) ? 0 : program.getId();
    ARBShaderObjects.glUseProgramObjectARB(id);
    _program=program;
    _states[RenderState.SHADER_STATE]=null;
  }
  if (program != null && program.getVertexShader() != null && _vertexProgramTwoSide != Boolean.valueOf(vertexProgramTwoSide)) {
    setCapability(ARBVertexShader.GL_VERTEX_PROGRAM_TWO_SIDE_ARB,_vertexProgramTwoSide=vertexProgramTwoSide);
  }
  updateFogEnabled();
}",0.980599647266314
152055,"/** 
 * Sets the linear fog state.  If <code>fogMode</code> is -1, fog will be disabled.
 */
public void setFogState(int fogMode,float fogStart,float fogEnd,Color4f fogColor){
  _states[RenderState.FOG_STATE]=null;
  boolean fogEnabled=(fogMode != -1);
  if (_fogEnabled != Boolean.valueOf(fogEnabled)) {
    setCapability(GL11.GL_FOG,_fogEnabled=fogEnabled);
  }
  if (!fogEnabled) {
    return;
  }
  if (_fogMode != fogMode) {
    GL11.glFogi(GL11.GL_FOG_MODE,_fogMode=fogMode);
  }
  if (_fogStart != fogStart) {
    GL11.glFogf(GL11.GL_FOG_START,_fogStart=fogStart);
  }
  if (_fogEnd != fogEnd) {
    GL11.glFogf(GL11.GL_FOG_END,_fogEnd=fogEnd);
  }
  if (!_fogColor.equals(fogColor)) {
    _fogColor.set(fogColor).get(_vbuf).rewind();
    GL11.glFog(GL11.GL_FOG_COLOR,_vbuf);
  }
}","/** 
 * Sets the linear fog state.  If <code>fogMode</code> is -1, fog will be disabled.
 */
public void setFogState(int fogMode,float fogStart,float fogEnd,Color4f fogColor){
  _states[RenderState.FOG_STATE]=null;
  _wouldEnableFog=(fogMode != -1);
  updateFogEnabled();
  if (!_wouldEnableFog) {
    return;
  }
  if (_fogMode != fogMode) {
    GL11.glFogi(GL11.GL_FOG_MODE,_fogMode=fogMode);
  }
  if (_fogStart != fogStart) {
    GL11.glFogf(GL11.GL_FOG_START,_fogStart=fogStart);
  }
  if (_fogEnd != fogEnd) {
    GL11.glFogf(GL11.GL_FOG_END,_fogEnd=fogEnd);
  }
  if (!_fogColor.equals(fogColor)) {
    _fogColor.set(fogColor).get(_vbuf).rewind();
    GL11.glFog(GL11.GL_FOG_COLOR,_vbuf);
  }
}",0.8609805238415044
152056,"/** 
 * Returns the configuration group with the specified name.  If the group is not found in this manager, the request will be forwarded to the parent, and so on.
 */
public ConfigGroup getGroup(String name){
  for (  ConfigGroup group : _groups.values()) {
    if (group.getName().equals(name)) {
      return group;
    }
  }
  return (_parent == null) ? null : _parent.getGroup(name);
}","/** 
 * Returns the configuration group with the specified name.
 * @param forward if true and there's no such group, forward the request to the parent.
 */
public ConfigGroup getGroup(String name,boolean forward){
  for (  ConfigGroup group : _groups.values()) {
    if (group.getName().equals(name)) {
      return group;
    }
  }
  return (forward && _parent != null) ? _parent.getGroup(name) : null;
}",0.7001254705144291
152057,"public boolean canTraverse(Object traverser,int x,int y){
  for (int yy=y - bottom, yymax=y + top; yy <= yymax; yy++) {
    for (int xx=x - left, xxmax=x + right; xx <= xxmax; xx++) {
      if (actor.canCollide(_entryFlags.get(xx / SUBDIVISION,yy / SUBDIVISION))) {
        return false;
      }
 else       if (collideActor && actor.canCollide(_actorFlags.get(x,y))) {
        return false;
      }
    }
  }
  return true;
}","public boolean canTraverse(Object traverser,int x,int y){
  for (int yy=y - bottom, yymax=y + top; yy <= yymax; yy++) {
    for (int xx=x - left, xxmax=x + right; xx <= xxmax; xx++) {
      if (actor.canCollide(_entryFlags.get(xx / SUBDIVISION,yy / SUBDIVISION))) {
        return false;
      }
 else       if (collideActor && actor.canCollide(_actorFlags.get(xx,yy))) {
        return false;
      }
    }
  }
  return true;
}",0.9953161592505856
152058,"/** 
 * Computes a path for the specified actor.
 * @param longest the maximum path length.
 * @param partial if true, return a partial path even if the destination is unreachable.
 * @param shortcut if true, use swept shapes to compute shortcuts in the path.
 * @return the computed path, or null if unreachable.
 */
protected Vector2f[] getPath(final boolean collideActor,ActorLogic logic,float longest,float ax,float ay,float bx,float by,boolean partial,boolean shortcut){
  Vector2f start=new Vector2f(ax,ay);
  if (ax == bx && ay == by) {
    return new Vector2f[]{start};
  }
  Vector2f end=new Vector2f(bx,by);
  if (!sweptShapeCollides(collideActor,logic,start,end)) {
    return new Vector2f[]{start,end};
  }
  Rect bounds=logic.getShape().getBounds();
  int width=Math.max(1,FloatMath.iceil(bounds.getWidth() * SUBDIVISION));
  int height=Math.max(1,FloatMath.iceil(bounds.getHeight() * SUBDIVISION));
  AStarPathUtil.TraversalPred pred;
  final Actor actor=logic.getActor();
  if (width == 1 && height == 1) {
    pred=new AStarPathUtil.TraversalPred(){
      public boolean canTraverse(      Object traverser,      int x,      int y){
        if (actor.canCollide(_entryFlags.get(x / SUBDIVISION,y / SUBDIVISION))) {
          return false;
        }
        return !collideActor || !actor.canCollide(_actorFlags.get(x,y));
      }
    }
;
  }
 else {
    final int left=width / 2, right=(width - 1) / 2;
    final int bottom=height / 2, top=(height - 1) / 2;
    pred=new AStarPathUtil.TraversalPred(){
      public boolean canTraverse(      Object traverser,      int x,      int y){
        for (int yy=y - bottom, yymax=y + top; yy <= yymax; yy++) {
          for (int xx=x - left, xxmax=x + right; xx <= xxmax; xx++) {
            if (actor.canCollide(_entryFlags.get(xx / SUBDIVISION,yy / SUBDIVISION))) {
              return false;
            }
 else             if (collideActor && actor.canCollide(_actorFlags.get(x,y))) {
              return false;
            }
          }
        }
        return true;
      }
    }
;
  }
  float xoff=(width % 2) * 0.5f / SUBDIVISION;
  float yoff=(height % 2) * 0.5f / SUBDIVISION;
  ax*=SUBDIVISION;
  ay*=SUBDIVISION;
  bx*=SUBDIVISION;
  by*=SUBDIVISION;
  boolean remove=(!logic.isRemoved() && collideActor && actor.canCollide(actor.getCollisionFlags()));
  if (remove) {
    removeFlags(logic);
  }
  List<Point> path=AStarPathUtil.getPath(pred,actor,(int)longest,Math.round(ax - xoff),Math.round(ay - yoff),Math.round(bx - xoff),Math.round(by - yoff),partial);
  if (remove) {
    addFlags(logic);
  }
  if (path == null) {
    return null;
  }
  Vector2f[] waypoints=new Vector2f[path.size()];
  for (int ii=0; ii < waypoints.length; ii++) {
    Point pt=path.get(ii);
    waypoints[ii]=new Vector2f((pt.x + xoff) / SUBDIVISION,(pt.y + yoff) / SUBDIVISION);
  }
  if (!shortcut) {
    return waypoints;
  }
  Vector2f current=start;
  for (int ii=0; ii < waypoints.length; ) {
    for (int jj=waypoints.length - 1; jj >= ii; jj--) {
      Vector2f waypoint=waypoints[jj];
      if (jj == ii || !sweptShapeCollides(collideActor,logic,current,waypoint)) {
        _waypoints.add(current=waypoint);
        ii=jj + 1;
        break;
      }
    }
  }
  waypoints=_waypoints.toArray(new Vector2f[_waypoints.size()]);
  _waypoints.clear();
  return waypoints;
}","/** 
 * Computes a path for the specified actor.
 * @param longest the maximum path length.
 * @param partial if true, return a partial path even if the destination is unreachable.
 * @param shortcut if true, use swept shapes to compute shortcuts in the path.
 * @return the computed path, or null if unreachable.
 */
protected Vector2f[] getPath(final boolean collideActor,ActorLogic logic,float longest,float ax,float ay,float bx,float by,boolean partial,boolean shortcut){
  Vector2f start=new Vector2f(ax,ay);
  if (ax == bx && ay == by) {
    return new Vector2f[]{start};
  }
  Vector2f end=new Vector2f(bx,by);
  if (!sweptShapeCollides(collideActor,logic,start,end)) {
    return new Vector2f[]{start,end};
  }
  Rect bounds=logic.getShape().getBounds();
  int width=Math.max(1,FloatMath.iceil(bounds.getWidth() * SUBDIVISION));
  int height=Math.max(1,FloatMath.iceil(bounds.getHeight() * SUBDIVISION));
  AStarPathUtil.TraversalPred pred;
  final Actor actor=logic.getActor();
  if (width == 1 && height == 1) {
    pred=new AStarPathUtil.TraversalPred(){
      public boolean canTraverse(      Object traverser,      int x,      int y){
        if (actor.canCollide(_entryFlags.get(x / SUBDIVISION,y / SUBDIVISION))) {
          return false;
        }
        return !collideActor || !actor.canCollide(_actorFlags.get(x,y));
      }
    }
;
  }
 else {
    final int left=width / 2, right=(width - 1) / 2;
    final int bottom=height / 2, top=(height - 1) / 2;
    pred=new AStarPathUtil.TraversalPred(){
      public boolean canTraverse(      Object traverser,      int x,      int y){
        for (int yy=y - bottom, yymax=y + top; yy <= yymax; yy++) {
          for (int xx=x - left, xxmax=x + right; xx <= xxmax; xx++) {
            if (actor.canCollide(_entryFlags.get(xx / SUBDIVISION,yy / SUBDIVISION))) {
              return false;
            }
 else             if (collideActor && actor.canCollide(_actorFlags.get(xx,yy))) {
              return false;
            }
          }
        }
        return true;
      }
    }
;
  }
  float xoff=(width % 2) * 0.5f / SUBDIVISION;
  float yoff=(height % 2) * 0.5f / SUBDIVISION;
  ax*=SUBDIVISION;
  ay*=SUBDIVISION;
  bx*=SUBDIVISION;
  by*=SUBDIVISION;
  boolean remove=(!logic.isRemoved() && collideActor && actor.canCollide(actor.getCollisionFlags()));
  if (remove) {
    removeFlags(logic);
  }
  List<Point> path=AStarPathUtil.getPath(pred,actor,(int)longest,Math.round(ax - xoff),Math.round(ay - yoff),Math.round(bx - xoff),Math.round(by - yoff),partial);
  if (remove) {
    addFlags(logic);
  }
  if (path == null) {
    return null;
  }
  Vector2f[] waypoints=new Vector2f[path.size()];
  for (int ii=0; ii < waypoints.length; ii++) {
    Point pt=path.get(ii);
    waypoints[ii]=new Vector2f((pt.x + xoff) / SUBDIVISION,(pt.y + yoff) / SUBDIVISION);
  }
  if (!shortcut) {
    return waypoints;
  }
  Vector2f current=start;
  for (int ii=0; ii < waypoints.length; ) {
    for (int jj=waypoints.length - 1; jj >= ii; jj--) {
      Vector2f waypoint=waypoints[jj];
      if (jj == ii || !sweptShapeCollides(collideActor,logic,current,waypoint)) {
        _waypoints.add(current=waypoint);
        ii=jj + 1;
        break;
      }
    }
  }
  waypoints=_waypoints.toArray(new Vector2f[_waypoints.size()]);
  _waypoints.clear();
  return waypoints;
}",0.99939921898468
152059,"/** 
 * Creates a canvas using one of our supported pixel formats.
 */
protected Canvas createCanvas(){
  if (RunAnywhere.isLinux()) {
    return new DisplayCanvas(){
      @Override protected void didInit(){
        GlCanvasApp.this.init();
      }
      @Override protected void updateView(){
        GlCanvasApp.this.updateView();
      }
      @Override protected void renderView(){
        GlCanvasApp.this.renderView();
      }
    }
;
  }
  for (  PixelFormat format : PIXEL_FORMATS) {
    try {
      return new AWTCanvas(format){
        @Override protected void didInit(){
          GlCanvasApp.this.init();
        }
        @Override protected void updateView(){
          GlCanvasApp.this.updateView();
        }
        @Override protected void renderView(){
          GlCanvasApp.this.renderView();
        }
      }
;
    }
 catch (    LWJGLException e) {
    }
  }
  log.warning(""String_Node_Str"");
  return null;
}","/** 
 * Creates a canvas using one of our supported pixel formats.
 */
protected Canvas createCanvas(){
  for (  PixelFormat format : PIXEL_FORMATS) {
    try {
      return new AWTCanvas(format){
        @Override protected void didInit(){
          GlCanvasApp.this.init();
        }
        @Override protected void updateView(){
          GlCanvasApp.this.updateView();
        }
        @Override protected void renderView(){
          GlCanvasApp.this.renderView();
        }
      }
;
    }
 catch (    LWJGLException e) {
    }
  }
  log.warning(""String_Node_Str"");
  return null;
}",0.7752956636005256
152060,"public int getState(){
  int state=super.getState();
  if (state == DISABLED) {
    return state;
  }
  if (_armed && _pressed) {
    return DOWN;
  }
 else {
    return state;
  }
}","public int getState(){
  int state=super.getState();
  if (state == DISABLED) {
    return state;
  }
  if (_pressed) {
    return DOWN;
  }
 else {
    return state;
  }
}",0.9717514124293786
152061,"public boolean dispatchEvent(Event event){
  if (isEnabled() && event instanceof MouseEvent) {
    int ostate=getState();
    MouseEvent mev=(MouseEvent)event;
switch (mev.getType()) {
case MouseEvent.MOUSE_DRAGGED:
      int mx=mev.getX(), my=mev.getY();
    int ax=getAbsoluteX(), ay=getAbsoluteY();
  if ((mx >= ax) && (my >= ay) && (mx < ax + _width)&& (my < ay + _height)) {
    _armed=_pressed=(mev.getModifiers() & MouseEvent.BUTTON1_DOWN_MASK) != 0;
  }
 else {
    _armed=_pressed=false;
  }
break;
case MouseEvent.MOUSE_ENTERED:
_armed=_pressed;
return super.dispatchEvent(event);
case MouseEvent.MOUSE_EXITED:
_armed=false;
return super.dispatchEvent(event);
case MouseEvent.MOUSE_PRESSED:
if (mev.getButton() == 0) {
_pressed=true;
_armed=true;
}
break;
case MouseEvent.MOUSE_RELEASED:
if (_armed && _pressed) {
fireAction(mev.getWhen(),mev.getModifiers());
_armed=false;
}
_pressed=false;
break;
default :
return super.dispatchEvent(event);
}
int state=getState();
if (state != ostate) {
stateDidChange();
}
if (_listeners != null) {
for (int ii=0, ll=_listeners.size(); ii < ll; ii++) {
event.dispatch(_listeners.get(ii));
}
}
return true;
}
return super.dispatchEvent(event);
}","public boolean dispatchEvent(Event event){
  if (isEnabled() && event instanceof MouseEvent) {
    int ostate=getState();
    MouseEvent mev=(MouseEvent)event;
switch (mev.getType()) {
case MouseEvent.MOUSE_DRAGGED:
      int mx=mev.getX(), my=mev.getY();
    int ax=getAbsoluteX(), ay=getAbsoluteY();
  if ((mx >= ax) && (my >= ay) && (mx < ax + _width)&& (my < ay + _height)) {
    _pressed=(mev.getModifiers() & MouseEvent.BUTTON1_DOWN_MASK) != 0;
  }
 else {
    _pressed=false;
  }
break;
case MouseEvent.MOUSE_ENTERED:
_pressed=false;
return super.dispatchEvent(event);
case MouseEvent.MOUSE_EXITED:
_pressed=false;
return super.dispatchEvent(event);
case MouseEvent.MOUSE_PRESSED:
if (mev.getButton() == 0) {
_pressed=true;
}
break;
case MouseEvent.MOUSE_RELEASED:
if (_pressed) {
fireAction(mev.getWhen(),mev.getModifiers());
_pressed=false;
}
break;
default :
return super.dispatchEvent(event);
}
int state=getState();
if (state != ostate) {
stateDidChange();
}
if (_listeners != null) {
for (int ii=0, ll=_listeners.size(); ii < ll; ii++) {
event.dispatch(_listeners.get(ii));
}
}
return true;
}
return super.dispatchEvent(event);
}",0.9588688946015425
152062,"/** 
 * Notes that an animation has started.
 * @param overrideBlendOut if non-negative, an interval over which to blend out allanimations currently playing at the same priority level as this one.
 */
protected void animationStarted(Animation animation,float overrideBlendOut){
  _playing.remove(animation);
  int priority=animation.getPriority();
  if (overrideBlendOut >= 0f) {
    ((Model)_parentScope).stopAnimations(priority,overrideBlendOut);
  }
  for (int ii=0, nn=_playing.size(); ii < nn; ii++) {
    if (priority >= _playing.get(ii).getPriority()) {
      _playing.add(ii,animation);
      return;
    }
  }
  _playing.add(animation);
  ((Model)_parentScope).animationStarted(animation);
}","/** 
 * Notes that an animation has started.
 * @param overrideBlendOut if non-negative, an interval over which to blend out allanimations currently playing at the same priority level as this one.
 */
protected void animationStarted(Animation animation,float overrideBlendOut){
  _playing.remove(animation);
  int priority=animation.getPriority();
  if (overrideBlendOut >= 0f) {
    ((Model)_parentScope).stopAnimations(priority,overrideBlendOut);
  }
  int ii=0;
  for (int nn=_playing.size(); ii < nn; ii++) {
    if (priority >= _playing.get(ii).getPriority()) {
      break;
    }
  }
  _playing.add(ii,animation);
  ((Model)_parentScope).animationStarted(animation);
}",0.935953420669578
152063,"protected void packAndFit(int x,int y,boolean above){
  int width=_root.getDisplayWidth();
  int height=_root.getDisplayHeight();
  if (_rows != 0) {
    ScrollPane pane=(ScrollPane)getComponent(0);
    Container cont=(Container)pane.getChild();
    if (cont.getComponentCount() > _rows) {
      int theight=0;
      for (int ii=0; ii < _rows; ii++) {
        theight+=cont.getComponent(ii).getPreferredSize(-1,-1).height;
      }
      pane.setPreferredSize(-1,theight);
    }
  }
  ArrayList<Component> children=null;
  int columns=_columns;
  do {
    Dimension d=getPreferredSize(-1,-1);
    if (d.height > height && _rows == 0) {
      if (children == null) {
        children=new ArrayList<Component>(_children);
      }
      removeAll();
      setLayoutManager(new TableLayout(++columns,0,5));
      for (int ii=0; ii < children.size(); ii++) {
        add(children.get(ii));
      }
    }
 else {
      break;
    }
  }
 while (columns < 4);
  pack();
  x=Math.min(width - getWidth(),x);
  y=above ? Math.min(height - getHeight(),y) : Math.max(0,y - getHeight());
  setLocation(x,y);
}","protected void packAndFit(int x,int y,boolean above){
  int width=_root.getDisplayWidth();
  int height=_root.getDisplayHeight();
  if (_rows != 0) {
    ScrollPane pane=(ScrollPane)getComponent(0);
    Container cont=(Container)pane.getChild();
    if (cont.getComponentCount() > _rows) {
      int theight=0;
      for (int ii=0; ii < _rows; ii++) {
        theight+=cont.getComponent(ii).getPreferredSize(-1,-1).height;
      }
      pane.setPreferredSize(-1,theight);
    }
  }
  ArrayList<Component> children=null;
  int columns=_columns;
  do {
    Dimension d=getPreferredSize(-1,-1);
    if (d.height > height && _rows == 0) {
      if (children == null) {
        children=new ArrayList<Component>(_children);
      }
      removeAll();
      setLayoutManager(new TableLayout(++columns,0,5));
      for (int ii=0; ii < children.size(); ii++) {
        add(children.get(ii));
      }
    }
 else {
      break;
    }
  }
 while (columns < 4);
  pack();
  x=Math.min(width - getWidth(),x);
  y=above ? Math.min(height - getHeight(),y) : Math.max(0,y - getHeight());
  setLocation(x,y);
  validate();
}",0.9936421435059036
152064,"/** 
 * Creates a new config tree to display the configurations in the specified group.
 * @param editable if true, the tree will allow editing the configurations (only allowed fortrees depicting a single group).
 */
protected ConfigTree(ConfigGroup[] groups,boolean editable){
  @SuppressWarnings(""String_Node_Str"") ConfigGroup<ManagedConfig>[] mgroups=(ConfigGroup<ManagedConfig>[])groups;
  _groups=mgroups;
  setModel(new DefaultTreeModel(new ConfigTreeNode(null,null),true){
    public void valueForPathChanged(    TreePath path,    Object newValue){
      TreePath selection=getSelectionPath();
      ConfigTreeNode node=(ConfigTreeNode)path.getLastPathComponent();
      ConfigTreeNode parent=(ConfigTreeNode)node.getParent();
      removeNodeFromParent(node);
      node.setUserObject(parent.findNameForChild((String)newValue));
      insertNodeInto(node,parent,parent.getInsertionIndex(node));
      node.expandPaths(ConfigTree.this);
      setSelectionPath(selection);
    }
    public void insertNodeInto(    MutableTreeNode child,    MutableTreeNode parent,    int index){
      super.insertNodeInto(child,parent,index);
      if (!_block.enter()) {
        return;
      }
      try {
        ((ConfigTreeNode)child).addConfigs(_groups[0]);
      }
  finally {
        _block.leave();
      }
    }
    public void removeNodeFromParent(    MutableTreeNode node){
      ConfigTreeNode ctnode=(ConfigTreeNode)node;
      if (removeExpanded(ctnode)) {
        writeExpanded();
      }
      super.removeNodeFromParent(node);
      if (!_block.enter()) {
        return;
      }
      try {
        ctnode.removeConfigs(_groups[0]);
      }
  finally {
        _block.leave();
      }
    }
  }
);
  setRootVisible(false);
  setEditable(editable);
  getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent event){
      ConfigTreeNode node=getSelectedNode();
      ManagedConfig config=(node == null) ? null : node.getConfig();
      if (_lconfig != null) {
        _lconfig.removeListener(ConfigTree.this);
      }
      if ((_lconfig=config) != null) {
        _lconfig.addListener(ConfigTree.this);
      }
    }
  }
);
  addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      ConfigTreeNode node=(ConfigTreeNode)event.getPath().getLastPathComponent();
      node.setExpanded(true);
      addExpanded(node.getName());
      node.expandPaths(ConfigTree.this);
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      ConfigTreeNode node=(ConfigTreeNode)event.getPath().getLastPathComponent();
      node.setExpanded(false);
      removeExpanded(node.getName());
    }
  }
);
  setDragEnabled(true);
  setTransferHandler(new TransferHandler(){
    public int getSourceActions(    JComponent comp){
      return MOVE;
    }
    public boolean canImport(    JComponent comp,    DataFlavor[] flavors){
      return isEditable() && ListUtil.contains(flavors,ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
    }
    public boolean importData(    JComponent comp,    Transferable t){
      boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
      Object data;
      try {
        data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"",e);
        return false;
      }
      ConfigTreeNode node, onode=null;
      if (local) {
        NodeTransfer transfer=(NodeTransfer)data;
        node=transfer.cnode;
        onode=transfer.onode;
      }
 else {
        data=((SerializableWrapper)data).getObject();
        if (!(data instanceof ConfigTreeNode)) {
          return false;
        }
        node=(ConfigTreeNode)data;
      }
      if (!node.verifyConfigClass(_groups[0].getConfigClass())) {
        return false;
      }
      ConfigTreeNode snode=getSelectedNode();
      ConfigTreeNode parent=(ConfigTreeNode)getModel().getRoot();
      if (snode != null && snode.getParent() != null) {
        parent=snode.getAllowsChildren() ? snode : (ConfigTreeNode)snode.getParent();
      }
      if (onode == parent || (onode != null && onode.getParent() == parent)) {
        return false;
      }
      node=(ConfigTreeNode)node.clone();
      String name=(String)node.getUserObject();
      node.setUserObject(parent.findNameForChild(name));
      if (onode != null && onode.getRoot() == parent.getRoot()) {
        ((DefaultTreeModel)getModel()).removeNodeFromParent(onode);
      }
      ((DefaultTreeModel)getModel()).insertNodeInto(node,parent,parent.getInsertionIndex(node));
      node.expandPaths(ConfigTree.this);
      setSelectionPath(new TreePath(node.getPath()));
      return true;
    }
    protected Transferable createTransferable(    JComponent c){
      ConfigTreeNode node=getSelectedNode();
      return (node == null) ? null : new NodeTransfer(node,false);
    }
    protected void exportDone(    JComponent source,    Transferable data,    int action){
      if (action == MOVE) {
        ConfigTreeNode onode=((NodeTransfer)data).onode;
        if (onode.getParent() != null) {
          ((DefaultTreeModel)getModel()).removeNodeFromParent(onode);
        }
      }
    }
  }
);
  ConfigTreeNode root=(ConfigTreeNode)getModel().getRoot();
  for (  ConfigGroup<ManagedConfig> group : _groups) {
    for (    ManagedConfig config : group.getConfigs()) {
      root.insertConfig(config,config.getName());
    }
    group.addListener(this);
  }
  ((DefaultTreeModel)getModel()).reload();
  root.setExpanded(true);
  String names=_prefs.get(_groups[0].getName() + ""String_Node_Str"",null);
  if (names == null) {
    root.expandPaths(this,1);
  }
 else {
    for (    String name : StringUtil.parseStringArray(names)) {
      ConfigTreeNode node=root.getNode(name);
      if (node != null) {
        _expanded.add(name);
        node.setExpanded(true);
      }
    }
    root.expandPaths(this);
  }
}","/** 
 * Creates a new config tree to display the configurations in the specified group.
 * @param editable if true, the tree will allow editing the configurations (only allowed fortrees depicting a single group).
 */
protected ConfigTree(ConfigGroup[] groups,boolean editable){
  @SuppressWarnings(""String_Node_Str"") ConfigGroup<ManagedConfig>[] mgroups=(ConfigGroup<ManagedConfig>[])groups;
  _groups=mgroups;
  setModel(new DefaultTreeModel(new ConfigTreeNode(null,null),true){
    public void valueForPathChanged(    TreePath path,    Object newValue){
      TreePath selection=getSelectionPath();
      ConfigTreeNode node=(ConfigTreeNode)path.getLastPathComponent();
      ConfigTreeNode parent=(ConfigTreeNode)node.getParent();
      removeNodeFromParent(node);
      node.setUserObject(parent.findNameForChild((String)newValue));
      insertNodeInto(node,parent,parent.getInsertionIndex(node));
      node.expandPaths(ConfigTree.this);
      setSelectionPath(selection);
    }
    public void insertNodeInto(    MutableTreeNode child,    MutableTreeNode parent,    int index){
      super.insertNodeInto(child,parent,index);
      if (!_block.enter()) {
        return;
      }
      try {
        ((ConfigTreeNode)child).addConfigs(_groups[0]);
      }
  finally {
        _block.leave();
      }
    }
    public void removeNodeFromParent(    MutableTreeNode node){
      ConfigTreeNode ctnode=(ConfigTreeNode)node;
      if (removeExpanded(ctnode)) {
        writeExpanded();
      }
      super.removeNodeFromParent(node);
      if (!_block.enter()) {
        return;
      }
      try {
        ctnode.removeConfigs(_groups[0]);
      }
  finally {
        _block.leave();
      }
    }
  }
);
  setRootVisible(false);
  setEditable(editable);
  getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent event){
      ConfigTreeNode node=getSelectedNode();
      ManagedConfig config=(node == null) ? null : node.getConfig();
      if (_lconfig != null) {
        _lconfig.removeListener(ConfigTree.this);
      }
      if ((_lconfig=config) != null) {
        _lconfig.addListener(ConfigTree.this);
      }
    }
  }
);
  addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      ConfigTreeNode node=(ConfigTreeNode)event.getPath().getLastPathComponent();
      node.setExpanded(true);
      addExpanded(node.getName());
      node.expandPaths(ConfigTree.this);
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      ConfigTreeNode node=(ConfigTreeNode)event.getPath().getLastPathComponent();
      node.setExpanded(false);
      removeExpanded(node.getName());
    }
  }
);
  setDragEnabled(true);
  setTransferHandler(new TransferHandler(){
    public int getSourceActions(    JComponent comp){
      return isEditable() ? MOVE : COPY;
    }
    public boolean canImport(    JComponent comp,    DataFlavor[] flavors){
      return isEditable() && ListUtil.contains(flavors,ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
    }
    public boolean importData(    JComponent comp,    Transferable t){
      if (!canImport(comp,t.getTransferDataFlavors())) {
        return false;
      }
      boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
      Object data;
      try {
        data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"",e);
        return false;
      }
      ConfigTreeNode node, onode=null;
      if (local) {
        NodeTransfer transfer=(NodeTransfer)data;
        node=transfer.cnode;
        onode=transfer.onode;
      }
 else {
        data=((SerializableWrapper)data).getObject();
        if (!(data instanceof ConfigTreeNode)) {
          return false;
        }
        node=(ConfigTreeNode)data;
      }
      if (!node.verifyConfigClass(_groups[0].getConfigClass())) {
        return false;
      }
      ConfigTreeNode snode=getSelectedNode();
      ConfigTreeNode parent=(ConfigTreeNode)getModel().getRoot();
      if (snode != null && snode.getParent() != null) {
        parent=snode.getAllowsChildren() ? snode : (ConfigTreeNode)snode.getParent();
      }
      if (onode == parent || (onode != null && onode.getParent() == parent)) {
        return false;
      }
      node=(ConfigTreeNode)node.clone();
      String name=(String)node.getUserObject();
      node.setUserObject(parent.findNameForChild(name));
      if (onode != null && onode.getRoot() == parent.getRoot()) {
        ((DefaultTreeModel)getModel()).removeNodeFromParent(onode);
      }
      ((DefaultTreeModel)getModel()).insertNodeInto(node,parent,parent.getInsertionIndex(node));
      node.expandPaths(ConfigTree.this);
      setSelectionPath(new TreePath(node.getPath()));
      return true;
    }
    protected Transferable createTransferable(    JComponent c){
      ConfigTreeNode node=getSelectedNode();
      return (node == null) ? null : new NodeTransfer(node,false);
    }
    protected void exportDone(    JComponent source,    Transferable data,    int action){
      if (action == MOVE) {
        ConfigTreeNode onode=((NodeTransfer)data).onode;
        if (onode.getParent() != null) {
          ((DefaultTreeModel)getModel()).removeNodeFromParent(onode);
        }
      }
    }
  }
);
  ConfigTreeNode root=(ConfigTreeNode)getModel().getRoot();
  for (  ConfigGroup<ManagedConfig> group : _groups) {
    for (    ManagedConfig config : group.getConfigs()) {
      root.insertConfig(config,config.getName());
    }
    group.addListener(this);
  }
  ((DefaultTreeModel)getModel()).reload();
  root.setExpanded(true);
  String names=_prefs.get(_groups[0].getName() + ""String_Node_Str"",null);
  if (names == null) {
    root.expandPaths(this,1);
  }
 else {
    for (    String name : StringUtil.parseStringArray(names)) {
      ConfigTreeNode node=root.getNode(name);
      if (node != null) {
        _expanded.add(name);
        node.setExpanded(true);
      }
    }
    root.expandPaths(this);
  }
}",0.9910867609780032
152065,"public boolean importData(JComponent comp,Transferable t){
  boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
  Object data;
  try {
    data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"",e);
    return false;
  }
  ConfigTreeNode node, onode=null;
  if (local) {
    NodeTransfer transfer=(NodeTransfer)data;
    node=transfer.cnode;
    onode=transfer.onode;
  }
 else {
    data=((SerializableWrapper)data).getObject();
    if (!(data instanceof ConfigTreeNode)) {
      return false;
    }
    node=(ConfigTreeNode)data;
  }
  if (!node.verifyConfigClass(_groups[0].getConfigClass())) {
    return false;
  }
  ConfigTreeNode snode=getSelectedNode();
  ConfigTreeNode parent=(ConfigTreeNode)getModel().getRoot();
  if (snode != null && snode.getParent() != null) {
    parent=snode.getAllowsChildren() ? snode : (ConfigTreeNode)snode.getParent();
  }
  if (onode == parent || (onode != null && onode.getParent() == parent)) {
    return false;
  }
  node=(ConfigTreeNode)node.clone();
  String name=(String)node.getUserObject();
  node.setUserObject(parent.findNameForChild(name));
  if (onode != null && onode.getRoot() == parent.getRoot()) {
    ((DefaultTreeModel)getModel()).removeNodeFromParent(onode);
  }
  ((DefaultTreeModel)getModel()).insertNodeInto(node,parent,parent.getInsertionIndex(node));
  node.expandPaths(ConfigTree.this);
  setSelectionPath(new TreePath(node.getPath()));
  return true;
}","public boolean importData(JComponent comp,Transferable t){
  if (!canImport(comp,t.getTransferDataFlavors())) {
    return false;
  }
  boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
  Object data;
  try {
    data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"",e);
    return false;
  }
  ConfigTreeNode node, onode=null;
  if (local) {
    NodeTransfer transfer=(NodeTransfer)data;
    node=transfer.cnode;
    onode=transfer.onode;
  }
 else {
    data=((SerializableWrapper)data).getObject();
    if (!(data instanceof ConfigTreeNode)) {
      return false;
    }
    node=(ConfigTreeNode)data;
  }
  if (!node.verifyConfigClass(_groups[0].getConfigClass())) {
    return false;
  }
  ConfigTreeNode snode=getSelectedNode();
  ConfigTreeNode parent=(ConfigTreeNode)getModel().getRoot();
  if (snode != null && snode.getParent() != null) {
    parent=snode.getAllowsChildren() ? snode : (ConfigTreeNode)snode.getParent();
  }
  if (onode == parent || (onode != null && onode.getParent() == parent)) {
    return false;
  }
  node=(ConfigTreeNode)node.clone();
  String name=(String)node.getUserObject();
  node.setUserObject(parent.findNameForChild(name));
  if (onode != null && onode.getRoot() == parent.getRoot()) {
    ((DefaultTreeModel)getModel()).removeNodeFromParent(onode);
  }
  ((DefaultTreeModel)getModel()).insertNodeInto(node,parent,parent.getInsertionIndex(node));
  node.expandPaths(ConfigTree.this);
  setSelectionPath(new TreePath(node.getPath()));
  return true;
}",0.9762131303520456
152066,"public int getSourceActions(JComponent comp){
  return MOVE;
}","public int getSourceActions(JComponent comp){
  return isEditable() ? MOVE : COPY;
}",0.8493150684931506
152067,"/** 
 * Returns an instance of the referenced model from the transient pool.
 */
protected Model getFromTransientPool(ConfigReference<ModelConfig> ref){
  ArrayList<SoftReference<Model>> list=_transientPool.get(ref);
  if (list != null) {
    for (int ii=list.size() - 1; ii >= 0; ii--) {
      Model model=list.remove(ii).get();
      if (model != null) {
        model.reset();
        return model;
      }
    }
    _transientPool.remove(ref);
  }
  Model model=new Model(_ctx);
  model.setParentScope(this);
  model.setConfig(ref);
  model.setUserObject(ref);
  model.addObserver(_transientObserver);
  return model;
}","/** 
 * Returns an instance of the referenced model from the transient pool.
 */
protected Model getFromTransientPool(ConfigReference<ModelConfig> ref){
  ArrayList<SoftReference<Model>> list=_transientPool.get(ref);
  if (list != null) {
    for (int ii=list.size() - 1; ii >= 0; ii--) {
      Model model=list.remove(ii).get();
      if (model != null) {
        model.reset();
        return model;
      }
    }
    _transientPool.remove(ref);
  }
  Model model=new Model(_ctx,ref);
  model.setParentScope(this);
  model.setUserObject(ref);
  model.addObserver(_transientObserver);
  return model;
}",0.9771615008156608
152068,"/** 
 * Spawns a transient model.
 */
@Scoped public void spawnTransient(ConfigReference<ModelConfig> ref,Transform3D transform){
  Model model=getFromTransientPool(ref);
  model.getLocalTransform().set(transform);
  add(model);
}","/** 
 * Spawns a transient model.
 */
@Scoped public void spawnTransient(ConfigReference<ModelConfig> ref,Transform3D transform){
  Model model=getFromTransientPool(ref);
  model.setLocalTransform(transform);
  add(model);
}",0.9823788546255506
152069,"@Override public void tick(float elapsed){
  if (_editor.isThirdButtonDown()) {
    _editor.deleteMouseObject();
  }
}","@Override public void tick(float elapsed){
  if (_editor.isThirdButtonDown() && !_editor.isControlDown()) {
    _editor.deleteMouseObject();
  }
}",0.8939393939393939
152070,"@Override public void mousePressed(MouseEvent event){
  if (event.getButton() == MouseEvent.BUTTON1) {
    _editor.editMouseObject();
  }
}","@Override public void mousePressed(MouseEvent event){
  if (event.getButton() == MouseEvent.BUTTON1 && !_editor.isControlDown()) {
    _editor.editMouseObject();
  }
}",0.9084967320261438
152071,"/** 
 * Recomputes the bounds of the roots.
 */
protected void recomputeBounds(){
  _bounds.setToEmpty();
  for (  Node root : _elements.values()) {
    _bounds.addLocal(root.getBounds());
  }
  for (  Node root : _influences.values()) {
    _bounds.addLocal(root.getBounds());
  }
  for (  Node root : _effects.values()) {
    _bounds.addLocal(root.getBounds());
  }
}","/** 
 * Recomputes the bounds of the roots.
 */
protected void recomputeBounds(){
  _bounds.setToEmpty();
  _minCoord.set(Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE);
  _maxCoord.set(Integer.MIN_VALUE,Integer.MIN_VALUE,Integer.MIN_VALUE);
  addBounds(_elements);
  addBounds(_influences);
  addBounds(_effects);
}",0.4444444444444444
152072,"/** 
 * Recomputes the bounds of the roots.
 */
protected void recomputeBounds(){
  _bounds.setToEmpty();
  for (  Node root : _elements.values()) {
    _bounds.addLocal(root.getBounds());
  }
}","/** 
 * Recomputes the bounds of the roots.
 */
protected void recomputeBounds(){
  _bounds.setToEmpty();
  _minCoord.set(Integer.MAX_VALUE,Integer.MAX_VALUE);
  _maxCoord.set(Integer.MIN_VALUE,Integer.MIN_VALUE);
  addBounds(_elements);
}",0.5496535796766744
152073,"public void setInfluences(SceneInfluenceSet influences){
  if (_influences.equals(influences)) {
    return;
  }
  _influences.clear();
  _influences.addAll(influences);
  Box bounds=getBounds();
  boolean updated=false;
  FogState fogState=_influences.getFogState(bounds,_fogState);
  if (_fogState != fogState) {
    _fogState=fogState;
    updated=true;
  }
  LightState lightState=_influences.getLightState(bounds,_lightState);
  if (_lightState != lightState) {
    _lightState=lightState;
    updated=true;
  }
  if (updated) {
    wasUpdated();
  }
}","public void setInfluences(SceneInfluenceSet influences){
  boolean influenceable=_impl.isInfluenceable();
  if (influenceable ? _influences.equals(influences) : _influences.isEmpty()) {
    return;
  }
  _influences.clear();
  if (influenceable) {
    _influences.addAll(influences);
  }
  Box bounds=getBounds();
  boolean updated=false;
  FogState fogState=_influences.getFogState(bounds,_fogState);
  if (_fogState != fogState) {
    _fogState=fogState;
    updated=true;
  }
  LightState lightState=_influences.getLightState(bounds,_lightState);
  if (_lightState != lightState) {
    _lightState=lightState;
    updated=true;
  }
  if (updated) {
    wasUpdated();
  }
}",0.8798701298701299
152074,"public void tick(float elapsed){
  for (int ii=_alwaysTick.size() - 1; ii >= 0; ii--) {
    _alwaysTick.get(ii).tick(elapsed);
  }
  if (!_visible.isEmpty()) {
    for (    SceneElement element : _visible) {
      element.tick(elapsed);
    }
    _visible.clear();
  }
  Vector3f location=_ctx.getCompositor().getCamera().getWorldTransform().getTranslation();
  getEffects(_viewer.set(location,location),_neffects);
  setEffects(_neffects);
  _neffects.clear();
  for (  ViewerEffect effect : _effects) {
    effect.update();
  }
  if (!_updateInfluences.isEmpty()) {
    for (    SceneElement element : _updateInfluences) {
      getInfluences(element.getBounds(),_influences);
      element.setInfluences(_influences);
      _influences.clear();
    }
    _updateInfluences.clear();
  }
}","public void tick(float elapsed){
  for (int ii=_alwaysTick.size() - 1; ii >= 0; ii--) {
    _alwaysTick.get(ii).tick(elapsed);
  }
  if (!_visible.isEmpty()) {
    for (    SceneElement element : _visible) {
      element.tick(elapsed);
    }
    _visible.clear();
  }
  Vector3f location=_ctx.getCompositor().getCamera().getWorldTransform().getTranslation();
  getEffects(_viewer.set(location,location),_neffects);
  setEffects(_neffects);
  _neffects.clear();
  for (  ViewerEffect effect : _effects) {
    effect.update();
  }
  int size=_updateInfluences.size();
  if (size > 0) {
    _updateArray=_updateInfluences.toArray(_updateArray);
    _updateInfluences.clear();
    for (int ii=0; ii < size; ii++) {
      SceneElement element=_updateArray[ii];
      getInfluences(element.getBounds(),_influences);
      element.setInfluences(_influences);
      _influences.clear();
    }
  }
}",0.7483640690065437
152075,"/** 
 * Reads the fields of an object from the specified importer.
 */
public void readFields(Object object,Importer importer,boolean useReader) throws IOException {
  if (_reader != null && useReader) {
    try {
      _reader.invoke(object,importer);
    }
 catch (    InvocationTargetException ite) {
      throw (IOException)ite.getTargetException();
    }
catch (    IllegalAccessException iae) {
      throw new IOException(""String_Node_Str"" + iae + ""String_Node_Str"");
    }
  }
 else {
    try {
      for (      FieldData field : _fields) {
        field.read(object,importer);
      }
    }
 catch (    IllegalAccessException iae) {
      throw new IOException(""String_Node_Str"" + iae + ""String_Node_Str"");
    }
  }
}","/** 
 * Reads the fields of an object from the specified importer.
 */
public void readFields(Object object,Importer importer,boolean useReader) throws IOException {
  if (_reader != null && useReader) {
    try {
      _reader.invoke(object,importer);
    }
 catch (    InvocationTargetException ite) {
      Throwable t=ite.getTargetException();
      if (t instanceof IOException) {
        throw (IOException)t;
      }
 else       if (t instanceof RuntimeException) {
        throw (RuntimeException)t;
      }
 else {
        throw new IOException(""String_Node_Str"" + t + ""String_Node_Str"");
      }
    }
catch (    IllegalAccessException iae) {
      throw new IOException(""String_Node_Str"" + iae + ""String_Node_Str"");
    }
  }
 else {
    try {
      for (      FieldData field : _fields) {
        field.read(object,importer);
      }
    }
 catch (    IllegalAccessException iae) {
      throw new IOException(""String_Node_Str"" + iae + ""String_Node_Str"");
    }
  }
}",0.7592267135325131
152076,"/** 
 * Performs the actual removal of the identified entry.
 * @return the removed entry.
 */
protected Entry remove(Object key){
  if (!(key instanceof Coord)) {
    return _entries.remove(key);
  }
  Coord coord=(Coord)key;
  int ovalue=_tiles.get(coord.x,coord.y);
  if (ovalue == -1) {
    return null;
  }
  TileEntry oentry=decodeTileEntry(coord,ovalue);
  removeTileConfig(getTileConfigIndex(ovalue));
  return oentry;
}","/** 
 * Performs the actual removal of the identified entry.
 * @return the removed entry.
 */
protected Entry remove(Object key){
  if (!(key instanceof Coord)) {
    return _entries.remove(key);
  }
  Coord coord=(Coord)key;
  int ovalue=_tiles.remove(coord.x,coord.y);
  if (ovalue == -1) {
    return null;
  }
  TileEntry oentry=decodeTileEntry(coord,ovalue);
  removeTileConfig(getTileConfigIndex(ovalue));
  return oentry;
}",0.989522700814901
152077,"/** 
 * Custom field read method.
 */
public void readFields(Importer in) throws IOException {
  in.defaultReadFields();
  for (  CoordIntEntry entry : _tiles.coordIntEntrySet()) {
    int idx=getTileConfigIndex(entry.getIntValue());
    _tileConfigs.get(idx).count++;
  }
  for (int ii=0, nn=_tileConfigs.size(); ii < nn; ii++) {
    _tileConfigIds.put(_tileConfigs.get(ii).tile,ii);
  }
  for (  Entry entry : in.read(""String_Node_Str"",new Entry[0],Entry[].class)) {
    _entries.put(entry.getKey(),entry);
    _references.put(entry.getReference(),entry.getReference());
    if (entry instanceof IdEntry) {
      _lastEntryId=Math.max(_lastEntryId,((IdEntry)entry).getId());
    }
  }
}","/** 
 * Custom field read method.
 */
public void readFields(Importer in) throws IOException {
  in.defaultReadFields();
  for (  CoordIntEntry entry : _tiles.coordIntEntrySet()) {
    int idx=getTileConfigIndex(entry.getIntValue());
    _tileConfigs.get(idx).count++;
  }
  for (int ii=0, nn=_tileConfigs.size(); ii < nn; ii++) {
    TileConfigMapping mapping=_tileConfigs.get(ii);
    if (mapping != null) {
      _tileConfigIds.put(mapping.tile,ii);
    }
  }
  for (  Entry entry : in.read(""String_Node_Str"",new Entry[0],Entry[].class)) {
    _entries.put(entry.getKey(),entry);
    _references.put(entry.getReference(),entry.getReference());
    if (entry instanceof IdEntry) {
      _lastEntryId=Math.max(_lastEntryId,((IdEntry)entry).getId());
    }
  }
}",0.9351724137931036
152078,"/** 
 * Places the current entry.
 */
protected void placeEntry(){
  if (_scene.getEntry(_entry.getLocation()) != null) {
    _scene.removeEntry(_entry.getLocation());
  }
  _scene.addEntry((TileEntry)_entry.clone());
  _lastPlacement.set(_entry.getLocation());
}","/** 
 * Places the current entry.
 */
protected void placeEntry(){
  Coord coord=_entry.getLocation();
  if (_scene.getEntry(coord) != null) {
    _scene.removeEntry(coord);
  }
  try {
    _scene.addEntry((TileEntry)_entry.clone());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  _lastPlacement.set(_entry.getLocation());
}",0.4966666666666666
152079,"/** 
 * Returns a reference to an inner object's outer class reference, or <code>null</code> if the object represents an instance of a static class.
 */
public static Object getOuter(Object object){
  Class clazz=object.getClass();
  if (!isInner(clazz)) {
    return null;
  }
  if (object instanceof Inner) {
    return ((Inner)object).getOuter();
  }
  Field field=_outers.get(clazz);
  if (field == null) {
    Class eclazz=clazz.getEnclosingClass();
    for (    Field ofield : clazz.getDeclaredFields()) {
      if (ofield.isSynthetic() && ofield.getType() == eclazz && ofield.getName().startsWith(""String_Node_Str"")) {
        field=ofield;
        break;
      }
    }
    field.setAccessible(true);
    _outers.put(clazz,field);
  }
  try {
    return field.get(object);
  }
 catch (  IllegalAccessException e) {
    return null;
  }
}","/** 
 * Returns a reference to an inner object's outer class reference, or <code>null</code> if the object represents an instance of a static class.
 */
public static Object getOuter(Object object){
  Class clazz=object.getClass();
  if (!isInner(clazz)) {
    return null;
  }
  if (object instanceof Inner) {
    return ((Inner)object).getOuter();
  }
  Field field=_outers.get(clazz);
  if (field == null) {
    Class dclazz=clazz.getDeclaringClass();
    for (    Field ofield : clazz.getDeclaredFields()) {
      if (ofield.isSynthetic() && ofield.getType() == dclazz && ofield.getName().startsWith(""String_Node_Str"")) {
        field=ofield;
        break;
      }
    }
    field.setAccessible(true);
    _outers.put(clazz,field);
  }
  try {
    return field.get(object);
  }
 catch (  IllegalAccessException e) {
    return null;
  }
}",0.990521327014218
152080,"/** 
 * Returns the outer class for the given inner class (or <code>null</code> if not an inner class).
 */
public static Class getOuterClass(Class clazz){
  if (!isInner(clazz)) {
    return null;
  }
  if (!Inner.class.isAssignableFrom(clazz)) {
    return clazz.getEnclosingClass();
  }
  Class outer=_oclasses.get(clazz);
  if (outer == null) {
    for (    Constructor ctor : clazz.getDeclaredConstructors()) {
      Class[] ptypes=ctor.getParameterTypes();
      if (ptypes.length > 0) {
        _oclasses.put(clazz,outer=ptypes[0]);
        break;
      }
    }
  }
  return outer;
}","/** 
 * Returns the outer class for the given inner class (or <code>null</code> if not an inner class).
 */
public static Class getOuterClass(Class clazz){
  if (!isInner(clazz)) {
    return null;
  }
  if (!Inner.class.isAssignableFrom(clazz)) {
    return clazz.getDeclaringClass();
  }
  Class outer=_oclasses.get(clazz);
  if (outer == null) {
    for (    Constructor ctor : clazz.getDeclaredConstructors()) {
      Class[] ptypes=ctor.getParameterTypes();
      if (ptypes.length > 0) {
        _oclasses.put(clazz,outer=ptypes[0]);
        break;
      }
    }
  }
  return outer;
}",0.9898305084745764
152081,"/** 
 * Determines whether the specified class is a non-static inner class.
 */
public static boolean isInner(Class clazz){
  return (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers())) || Inner.class.isAssignableFrom(clazz);
}","/** 
 * Determines whether the specified class is a non-static inner class.
 */
public static boolean isInner(Class clazz){
  return (clazz.getDeclaringClass() != null && !Modifier.isStatic(clazz.getModifiers())) || Inner.class.isAssignableFrom(clazz);
}",0.9435483870967742
152082,"/** 
 * Updates the batch's state key using the current set of states.
 */
public void updateKey(){
  TextureState tstate=(TextureState)_states[RenderState.TEXTURE_STATE];
  TextureUnit[] units=(tstate == null) ? null : tstate.getUnits();
  int textures=(units == null) ? 0 : units.length;
  int size=1 + 1 + textures+ 1+ 1;
  if (key == null || key.length != size) {
    key=new int[size];
  }
  ShaderState sstate=(ShaderState)_states[RenderState.SHADER_STATE];
  Program program=(sstate == null) ? null : sstate.getProgram();
  Shader vertexShader=(program == null) ? null : program.getVertexShader();
  Shader fragmentShader=(program == null) ? null : program.getFragmentShader();
  int idx=0;
  key[idx++]=(vertexShader == null) ? 0 : vertexShader.getId();
  key[idx++]=(fragmentShader == null) ? 0 : fragmentShader.getId();
  for (int ii=0; ii < textures; ii++) {
    key[idx++]=(units[ii] == null) ? 0 : units[ii].texture.getId();
  }
  key[idx++]=-1;
  ArrayState astate=(ArrayState)_states[RenderState.ARRAY_STATE];
  BufferObject buffer=(astate == null) ? null : astate.getElementArrayBuffer();
  if (buffer != null) {
    key[idx++]=buffer.getId();
  }
 else   if (_command instanceof CallList) {
    key[idx++]=((CallList)_command).getList().getId();
  }
 else {
    key[idx++]=0;
  }
}","/** 
 * Updates the batch's state key using the current set of states.
 */
public void updateKey(){
  TextureState tstate=(TextureState)_states[RenderState.TEXTURE_STATE];
  TextureUnit[] units=(tstate == null) ? null : tstate.getUnits();
  int textures=(units == null) ? 0 : units.length;
  int size=1 + 1 + textures+ 1+ 1;
  if (key == null || key.length != size) {
    key=new int[size];
  }
  ShaderState sstate=(ShaderState)_states[RenderState.SHADER_STATE];
  Program program=(sstate == null) ? null : sstate.getProgram();
  Shader vertexShader=(program == null) ? null : program.getVertexShader();
  Shader fragmentShader=(program == null) ? null : program.getFragmentShader();
  int idx=0;
  key[idx++]=(vertexShader == null) ? 0 : vertexShader.getId();
  key[idx++]=(fragmentShader == null) ? 0 : fragmentShader.getId();
  for (int ii=0; ii < textures; ii++) {
    Texture texture=(units[ii] == null) ? null : units[ii].texture;
    key[idx++]=(texture == null) ? 0 : texture.getId();
  }
  key[idx++]=-1;
  ArrayState astate=(ArrayState)_states[RenderState.ARRAY_STATE];
  BufferObject buffer=(astate == null) ? null : astate.getElementArrayBuffer();
  if (buffer != null) {
    key[idx++]=buffer.getId();
  }
 else   if (_command instanceof CallList) {
    key[idx++]=((CallList)_command).getList().getId();
  }
 else {
    key[idx++]=0;
  }
}",0.9645550527903468
152083,"public boolean importData(JComponent comp,Transferable t){
  boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
  DataFlavor flavor=local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR;
  Object data;
  try {
    data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"",e);
    return false;
  }
  ConfigTreeNode node, onode=null;
  if (local) {
    NodeTransfer transfer=(NodeTransfer)data;
    node=transfer.cnode;
    onode=transfer.onode;
  }
 else {
    data=((SerializableWrapper)data).getObject();
    if (!(data instanceof ConfigTreeNode)) {
      return false;
    }
    node=(ConfigTreeNode)data;
  }
  if (!node.verifyConfigClass(group.getConfigClass())) {
    return false;
  }
  ConfigTreeNode snode=getSelectedNode();
  if (onode != null && onode == snode) {
    return false;
  }
  ConfigTreeNode parent=(ConfigTreeNode)tree.getModel().getRoot();
  int index=parent.getChildCount();
  if (snode != null && snode.getParent() != null) {
    if (snode.getAllowsChildren()) {
      parent=snode;
      index=snode.getChildCount();
    }
 else {
      parent=(ConfigTreeNode)snode.getParent();
      int oidx=(onode == null) ? -1 : parent.getIndex(onode);
      int sidx=parent.getIndex(snode);
      index=sidx + ((oidx >= 0 && sidx > oidx) ? 1 : 0);
    }
  }
  node=(ConfigTreeNode)node.clone();
  ((DefaultTreeModel)tree.getModel()).insertNodeInto(node,parent,index);
  tree.setSelectionPath(new TreePath(node.getPath()));
  return true;
}","public boolean importData(JComponent comp,Transferable t){
  boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
  DataFlavor flavor=local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR;
  Object data;
  try {
    data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"",e);
    return false;
  }
  ConfigTreeNode node, onode=null;
  if (local) {
    NodeTransfer transfer=(NodeTransfer)data;
    node=transfer.cnode;
    onode=transfer.onode;
  }
 else {
    data=((SerializableWrapper)data).getObject();
    if (!(data instanceof ConfigTreeNode)) {
      return false;
    }
    node=(ConfigTreeNode)data;
  }
  if (!node.verifyConfigClass(group.getConfigClass())) {
    return false;
  }
  ConfigTreeNode snode=getSelectedNode();
  ConfigTreeNode parent=(ConfigTreeNode)tree.getModel().getRoot();
  if (snode != null) {
    parent=snode.getAllowsChildren() ? snode : (ConfigTreeNode)snode.getParent();
  }
  if (onode != null && onode.getParent() == parent) {
    return false;
  }
  node=(ConfigTreeNode)node.clone();
  ((DefaultTreeModel)tree.getModel()).insertNodeInto(node,parent,parent.getInsertionIndex(node));
  tree.setSelectionPath(new TreePath(node.getPath()));
  return true;
}",0.6433710174717369
152084,"@Override public Object getTransferData(DataFlavor flavor){
  return (flavor == LOCAL_NODE_TRANSFER_FLAVOR) ? this : new SerializableWrapper(cnode);
}","public Object getTransferData(DataFlavor flavor){
  return (flavor == LOCAL_NODE_TRANSFER_FLAVOR) ? this : new SerializableWrapper(cnode);
}",0.9655172413793104
152085,"@Override public boolean isDataFlavorSupported(DataFlavor flavor){
  return ListUtil.contains(NODE_TRANSFER_FLAVORS,flavor);
}","public boolean isDataFlavorSupported(DataFlavor flavor){
  return ListUtil.contains(NODE_TRANSFER_FLAVORS,flavor);
}",0.9586776859504132
152086,"/** 
 * Activates this group.
 */
public void activate(){
  if (tree == null) {
    tree=new JTree(new ConfigTreeNode(null,null),true);
    tree.setRootVisible(false);
    tree.setEditable(true);
    InputMap imap=tree.getInputMap().getParent();
    imap.remove(KeyStroke.getKeyStroke(KeyEvent.VK_X,KeyEvent.CTRL_MASK));
    imap.remove(KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.CTRL_MASK));
    imap.remove(KeyStroke.getKeyStroke(KeyEvent.VK_V,KeyEvent.CTRL_MASK));
    tree.setDragEnabled(true);
    tree.setTransferHandler(new TransferHandler(){
      public int getSourceActions(      JComponent comp){
        return COPY_OR_MOVE;
      }
      public boolean canImport(      JComponent comp,      DataFlavor[] flavors){
        return ListUtil.contains(flavors,ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
      }
      public boolean importData(      JComponent comp,      Transferable t){
        boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
        DataFlavor flavor=local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR;
        Object data;
        try {
          data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
        }
 catch (        Exception e) {
          log.warning(""String_Node_Str"",e);
          return false;
        }
        ConfigTreeNode node, onode=null;
        if (local) {
          NodeTransfer transfer=(NodeTransfer)data;
          node=transfer.cnode;
          onode=transfer.onode;
        }
 else {
          data=((SerializableWrapper)data).getObject();
          if (!(data instanceof ConfigTreeNode)) {
            return false;
          }
          node=(ConfigTreeNode)data;
        }
        if (!node.verifyConfigClass(group.getConfigClass())) {
          return false;
        }
        ConfigTreeNode snode=getSelectedNode();
        if (onode != null && onode == snode) {
          return false;
        }
        ConfigTreeNode parent=(ConfigTreeNode)tree.getModel().getRoot();
        int index=parent.getChildCount();
        if (snode != null && snode.getParent() != null) {
          if (snode.getAllowsChildren()) {
            parent=snode;
            index=snode.getChildCount();
          }
 else {
            parent=(ConfigTreeNode)snode.getParent();
            int oidx=(onode == null) ? -1 : parent.getIndex(onode);
            int sidx=parent.getIndex(snode);
            index=sidx + ((oidx >= 0 && sidx > oidx) ? 1 : 0);
          }
        }
        node=(ConfigTreeNode)node.clone();
        ((DefaultTreeModel)tree.getModel()).insertNodeInto(node,parent,index);
        tree.setSelectionPath(new TreePath(node.getPath()));
        return true;
      }
      protected Transferable createTransferable(      JComponent c){
        ConfigTreeNode node=getSelectedNode();
        return (node == null) ? null : new NodeTransfer(node,false);
      }
      protected void exportDone(      JComponent source,      Transferable data,      int action){
        if (action == MOVE) {
          ConfigTreeNode onode=((NodeTransfer)data).onode;
          ((DefaultTreeModel)tree.getModel()).removeNodeFromParent(onode);
        }
      }
    }
);
    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    tree.addTreeSelectionListener(this);
    tree.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  }
  _pane.setViewportView(tree);
  _paste.setEnabled(_clipgroup == this);
  updateSelection();
}","/** 
 * Activates this group.
 */
public void activate(){
  if (tree == null) {
    tree=new JTree(new DefaultTreeModel(new ConfigTreeNode(null,null),true){
      public void valueForPathChanged(      TreePath path,      Object newValue){
        super.valueForPathChanged(path,newValue);
        ConfigTreeNode node=(ConfigTreeNode)path.getLastPathComponent();
        ConfigTreeNode parent=(ConfigTreeNode)node.getParent();
        removeNodeFromParent(node);
        insertNodeInto(node,parent,parent.getInsertionIndex(node));
      }
    }
);
    tree.setRootVisible(false);
    tree.setEditable(true);
    InputMap imap=tree.getInputMap().getParent();
    imap.remove(KeyStroke.getKeyStroke(KeyEvent.VK_X,KeyEvent.CTRL_MASK));
    imap.remove(KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.CTRL_MASK));
    imap.remove(KeyStroke.getKeyStroke(KeyEvent.VK_V,KeyEvent.CTRL_MASK));
    tree.setDragEnabled(true);
    tree.setTransferHandler(new TransferHandler(){
      public int getSourceActions(      JComponent comp){
        return COPY_OR_MOVE;
      }
      public boolean canImport(      JComponent comp,      DataFlavor[] flavors){
        return ListUtil.contains(flavors,ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
      }
      public boolean importData(      JComponent comp,      Transferable t){
        boolean local=t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
        DataFlavor flavor=local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR;
        Object data;
        try {
          data=t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
        }
 catch (        Exception e) {
          log.warning(""String_Node_Str"",e);
          return false;
        }
        ConfigTreeNode node, onode=null;
        if (local) {
          NodeTransfer transfer=(NodeTransfer)data;
          node=transfer.cnode;
          onode=transfer.onode;
        }
 else {
          data=((SerializableWrapper)data).getObject();
          if (!(data instanceof ConfigTreeNode)) {
            return false;
          }
          node=(ConfigTreeNode)data;
        }
        if (!node.verifyConfigClass(group.getConfigClass())) {
          return false;
        }
        ConfigTreeNode snode=getSelectedNode();
        ConfigTreeNode parent=(ConfigTreeNode)tree.getModel().getRoot();
        if (snode != null) {
          parent=snode.getAllowsChildren() ? snode : (ConfigTreeNode)snode.getParent();
        }
        if (onode != null && onode.getParent() == parent) {
          return false;
        }
        node=(ConfigTreeNode)node.clone();
        ((DefaultTreeModel)tree.getModel()).insertNodeInto(node,parent,parent.getInsertionIndex(node));
        tree.setSelectionPath(new TreePath(node.getPath()));
        return true;
      }
      protected Transferable createTransferable(      JComponent c){
        ConfigTreeNode node=getSelectedNode();
        return (node == null) ? null : new NodeTransfer(node,false);
      }
      protected void exportDone(      JComponent source,      Transferable data,      int action){
        if (action == MOVE) {
          ConfigTreeNode onode=((NodeTransfer)data).onode;
          ((DefaultTreeModel)tree.getModel()).removeNodeFromParent(onode);
        }
      }
    }
);
    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    tree.addTreeSelectionListener(this);
    tree.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  }
  _pane.setViewportView(tree);
  _paste.setEnabled(_clipgroup == this);
  updateSelection();
}",0.8013038548752834
152087,"/** 
 * Creates a new node for the supplied configuration (or a folder node, if the configuration is <code>null</code>).
 */
protected void newNode(ManagedConfig config){
  ConfigTreeNode snode=getSelectedNode();
  ConfigTreeNode parent=(ConfigTreeNode)(snode == null ? tree.getModel().getRoot() : snode.getParent());
  String name=parent.findNameForChild(_msgs.get(config == null ? ""String_Node_Str"" : ""String_Node_Str""));
  ConfigTreeNode child=new ConfigTreeNode(name,config);
  ((DefaultTreeModel)tree.getModel()).insertNodeInto(child,parent,parent.getChildCount());
  tree.startEditingAtPath(new TreePath(child.getPath()));
}","/** 
 * Creates a new node for the supplied configuration (or a folder node, if the configuration is <code>null</code>).
 */
protected void newNode(ManagedConfig config){
  ConfigTreeNode snode=getSelectedNode();
  ConfigTreeNode parent=(ConfigTreeNode)(snode == null ? tree.getModel().getRoot() : snode.getParent());
  String name=parent.findNameForChild(_msgs.get(config == null ? ""String_Node_Str"" : ""String_Node_Str""));
  ConfigTreeNode child=new ConfigTreeNode(name,config);
  ((DefaultTreeModel)tree.getModel()).insertNodeInto(child,parent,parent.getInsertionIndex(child));
  tree.startEditingAtPath(new TreePath(child.getPath()));
}",0.975571315996848
152088,"@Override public DataFlavor[] getTransferDataFlavors(){
  return NODE_TRANSFER_FLAVORS;
}","public DataFlavor[] getTransferDataFlavors(){
  return NODE_TRANSFER_FLAVORS;
}",0.9404761904761904
152089,"@Override public Object readObject() throws IOException {
  Node first;
  if (_document == null) {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    try {
      DocumentBuilder builder=factory.newDocumentBuilder();
      _document=builder.parse(_in);
    }
 catch (    Exception e) {
      throw new IOException(""String_Node_Str"" + e + ""String_Node_Str"");
    }
    Element top=_document.getDocumentElement();
    if (!top.getTagName().equals(""String_Node_Str"")) {
      throw new IOException(""String_Node_Str"" + top.getTagName() + ""String_Node_Str"");
    }
    String vstr=top.getAttribute(""String_Node_Str"");
    if (!vstr.equals(XMLExporter.VERSION)) {
      throw new IOException(""String_Node_Str"" + vstr + ""String_Node_Str""+ XMLExporter.VERSION+ ""String_Node_Str"");
    }
    String cstr=top.getAttribute(""String_Node_Str"");
    if (!cstr.equals(getClass().getName())) {
      throw new IOException(""String_Node_Str"" + cstr + ""String_Node_Str""+ getClass().getName()+ ""String_Node_Str"");
    }
    first=top.getFirstChild();
  }
 else {
    first=(_element == null) ? null : _element.getNextSibling();
  }
  if ((_element=findElement(first,""String_Node_Str"")) == null) {
    return null;
  }
  return read(_element,Object.class);
}","@Override public Object readObject() throws IOException {
  Node first;
  if (_document == null) {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    try {
      DocumentBuilder builder=factory.newDocumentBuilder();
      _document=builder.parse(_in);
    }
 catch (    Exception e) {
      throw new IOException(""String_Node_Str"" + e + ""String_Node_Str"");
    }
    Element top=_document.getDocumentElement();
    if (!top.getTagName().equals(""String_Node_Str"")) {
      throw new IOException(""String_Node_Str"" + top.getTagName() + ""String_Node_Str"");
    }
    String vstr=top.getAttribute(""String_Node_Str"");
    if (!vstr.equals(XMLExporter.VERSION)) {
      throw new IOException(""String_Node_Str"" + vstr + ""String_Node_Str""+ XMLExporter.VERSION+ ""String_Node_Str"");
    }
    String cstr=top.getAttribute(""String_Node_Str"");
    if (!cstr.equals(getClass().getName())) {
      throw new IOException(""String_Node_Str"" + cstr + ""String_Node_Str""+ getClass().getName()+ ""String_Node_Str"");
    }
    first=top.getFirstChild();
  }
 else {
    first=(_element == null) ? null : _element.getNextSibling();
  }
  if ((_element=findElement(first,""String_Node_Str"")) == null) {
    throw new EOFException();
  }
  return read(_element,Object.class);
}",0.9862041781631848
152090,"/** 
 * Program entry point.
 */
public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    return;
  }
  BinaryImporter in=new BinaryImporter(new FileInputStream(args[0]));
  XMLExporter out=new XMLExporter(new FileOutputStream(args[1]));
  Object obj;
  while ((obj=in.readObject()) != null) {
    out.writeObject(obj);
  }
  in.close();
  out.close();
}","/** 
 * Program entry point.
 */
public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    return;
  }
  BinaryImporter in=new BinaryImporter(new FileInputStream(args[0]));
  XMLExporter out=new XMLExporter(new FileOutputStream(args[1]));
  try {
    while (true) {
      out.writeObject(in.readObject());
    }
  }
 catch (  EOFException e) {
  }
 finally {
    in.close();
    out.close();
  }
}",0.75
152091,"/** 
 * Program entry point.
 */
public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    return;
  }
  XMLImporter in=new XMLImporter(new FileInputStream(args[0]));
  BinaryExporter out=new BinaryExporter(new FileOutputStream(args[1]));
  Object obj;
  while ((obj=in.readObject()) != null) {
    out.writeObject(obj);
  }
  in.close();
  out.close();
}","/** 
 * Program entry point.
 */
public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    return;
  }
  XMLImporter in=new XMLImporter(new FileInputStream(args[0]));
  BinaryExporter out=new BinaryExporter(new FileOutputStream(args[1]));
  try {
    while (true) {
      out.writeObject(in.readObject());
    }
  }
 catch (  EOFException e) {
  }
 finally {
    in.close();
    out.close();
  }
}",0.75
152092,"/** 
 * Compares two program versions. Handles if some of them is marked as beta.
 * @param version1 first version. Null means lowest possible version.
 * @param version2 second version. Null means lowest possible version.
 * @return positive number if version1 > version2, zero if version1 == version2,negative number otherwise
 */
public static int compareProgramVersions(String version1,String version2){
  if (version1 == null) {
    return (version2 == null ? 0 : -1);
  }
  String v1=version1;
  String v2=version2;
  boolean beta1=version1.toLowerCase().contains(""String_Node_Str"");
  boolean beta2=version2.toLowerCase().contains(""String_Node_Str"");
  if (beta1) {
    v1=version1.substring(0,version1.toLowerCase().indexOf(""String_Node_Str"")).trim();
  }
  if (beta2) {
    v2=version2.substring(0,version2.toLowerCase().indexOf(""String_Node_Str"")).trim();
  }
  AlphanumComparator comparator=new AlphanumComparator();
  if (beta1 && beta2) {
    return comparator.compare(v1,v2) == 0 ? version1.compareTo(version2) : comparator.compare(v1,v2);
  }
 else   if (beta1) {
    return (comparator.compare(v1,v2) == 0 ? -1 : comparator.compare(v1,v2));
  }
 else   if (beta2) {
    return (comparator.compare(v1,v2) == 0 ? 1 : comparator.compare(v1,v2));
  }
 else {
    return comparator.compare(v1,v2);
  }
}","/** 
 * Compares two program versions. Handles if some of them is marked as beta.
 * @param version1 first version. Null means lowest possible version.
 * @param version2 second version. Null means lowest possible version.
 * @return positive number if version1 &gt; version2, zero if version1 == version2,negative number otherwise
 */
public static int compareProgramVersions(String version1,String version2){
  if (version1 == null) {
    return (version2 == null ? 0 : -1);
  }
  String v1=version1;
  String v2=version2;
  boolean beta1=version1.toLowerCase().contains(""String_Node_Str"");
  boolean beta2=version2.toLowerCase().contains(""String_Node_Str"");
  if (beta1) {
    v1=version1.substring(0,version1.toLowerCase().indexOf(""String_Node_Str"")).trim();
  }
  if (beta2) {
    v2=version2.substring(0,version2.toLowerCase().indexOf(""String_Node_Str"")).trim();
  }
  AlphanumComparator comparator=new AlphanumComparator();
  if (beta1 && beta2) {
    return comparator.compare(v1,v2) == 0 ? version1.compareTo(version2) : comparator.compare(v1,v2);
  }
 else   if (beta1) {
    return (comparator.compare(v1,v2) == 0 ? -1 : comparator.compare(v1,v2));
  }
 else   if (beta2) {
    return (comparator.compare(v1,v2) == 0 ? 1 : comparator.compare(v1,v2));
  }
 else {
    return comparator.compare(v1,v2);
  }
}",0.9980995819080196
152093,"/** 
 * Gateway name. This name will be visible in the list od available gateways. The name must be in the form ""[CC]Gateway"", where CC is country code as defined in <a href=""http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"">ISO 3166-1 alpha-2</a>  and Gateway is the very name of the gateway.<br/> Country code should denote which country is the main interest of the gateway, for example: <ul><li>The gateway is only available in the language of that country.</li> <li>The gateway sends messages only to customers of that country's operator.</li> <li>The gateway requires a SIM card bought from that country's operator.</li></ul> For international gateways, allowing to send SMS to multiple countries, use [INT]Gateway.<br/> This name must be unique amongst other gateway names.
 */
String getName();","/** 
 * Gateway name. This name will be visible in the list od available gateways. The name must be in the form ""[CC]Gateway"", where CC is country code as defined in <a href=""http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"">ISO 3166-1 alpha-2</a>  and Gateway is the very name of the gateway.<br> Country code should denote which country is the main interest of the gateway, for example: <ul><li>The gateway is only available in the language of that country.</li> <li>The gateway sends messages only to customers of that country's operator.</li> <li>The gateway requires a SIM card bought from that country's operator.</li></ul> For international gateways, allowing to send SMS to multiple countries, use [INT]Gateway.<br> This name must be unique amongst other gateway names.
 */
String getName();",0.9987484355444304
152094,"/** 
 * List of telephone prefixes that are supported by this gateway. All prefixes that are not mentioned here are *not supported* by this gateway. For example for a gateway that can send messages only to numbers originating from Czech Republic (country prefix: +420), and nowhere else, the value is [""+420""]. (The gateway doesn't have to support all numbers starting with +420, but it certainly doesn't support any other prefix.)<br/> The supported prefixes will usually map to country codes. The prefix always starts with ""+"" sign and is 1-3 digits long. List of country calling codes is on <a href=""http://en.wikipedia.org/wiki/Country_calling_codes"">Wikipedia</a>.<br/> If the gateway works internationally, allowing to send SMS to multiple countries, this will be an empty array.
 * @return list of supported prefixes; empty array if gateway sends anywhere in the world
 */
String[] getSupportedPrefixes();","/** 
 * List of telephone prefixes that are supported by this gateway. All prefixes that are not mentioned here are *not supported* by this gateway. For example for a gateway that can send messages only to numbers originating from Czech Republic (country prefix: +420), and nowhere else, the value is [""+420""]. (The gateway doesn't have to support all numbers starting with +420, but it certainly doesn't support any other prefix.)<br> The supported prefixes will usually map to country codes. The prefix always starts with ""+"" sign and is 1-3 digits long. List of country calling codes is on <a href=""http://en.wikipedia.org/wiki/Country_calling_codes"">Wikipedia</a>.<br> If the gateway works internationally, allowing to send SMS to multiple countries, this will be an empty array.
 * @return list of supported prefixes; empty array if gateway sends anywhere in the world
 */
String[] getSupportedPrefixes();",0.9989023051591658
152095,"/** 
 * List of telephone prefixes that are preferred by this gateway. Preferred prefixes means that there is really high probability that this gateway will be able to send message to a phone number with that prefix. Sometimes a gateway support just a certain set of customers (of a single cell operator for example) and this is a way how to mark them. It usually concerns just free gateway, paid ones usually send everywhere.<br/> If the gateway sends messages to any phone number within the supported prefixes (see   {@link #getSupportedPrefixes}) then this will be an empty array.<br/><br/> Example: When the supported prefix is [""+420""] and this gateway allows sending messages to an operator who owns prefixes ""606"" and ""777"", then the resulting array of preferred prefixes is [""+420606"", ""+420777""].
 * @return list of preferred prefixes; empty array if gateway sends to any phone numberin supported prefixes
 */
String[] getPreferredPrefixes();","/** 
 * List of telephone prefixes that are preferred by this gateway. Preferred prefixes means that there is really high probability that this gateway will be able to send message to a phone number with that prefix. Sometimes a gateway support just a certain set of customers (of a single cell operator for example) and this is a way how to mark them. It usually concerns just free gateway, paid ones usually send everywhere.<br> If the gateway sends messages to any phone number within the supported prefixes (see   {@link #getSupportedPrefixes}) then this will be an empty array.<br><br> Example: When the supported prefix is [""+420""] and this gateway allows sending messages to an operator who owns prefixes ""606"" and ""777"", then the resulting array of preferred prefixes is [""+420606"", ""+420777""].
 * @return list of preferred prefixes; empty array if gateway sends to any phone numberin supported prefixes
 */
String[] getPreferredPrefixes();",0.9984202211690364
152096,"/** 
 * Guess gateway according to phone number or phone number prefix. Searches through all visible (non-hidden) gateways and finds the best suited ones (one or many) supporting this phone number. <br/><br/> Algorithm: <ol> <li>Any fake gateway is disqualified.</li> <li>Any gateway that has some supported prefixes listed and yet is not matching the number is disqualified.</li> <li>If some gateways are marked as favorite: <ol type=a> <li>Discard gateways that have the number outside their preferred prefixes.</li> <li>If there are some remaining, return all of them, sorted by the number of contacts assigned. Selection ends here.</li> </ol> </li> <li>If user has some contacts defined, count their numbers for each gateway: <ol type=a> <li>Discard gateways that have the number outside their preferred prefixes.</li> <li>Gateway with the highest number of contacts win.</li> <li>If multiple gateways have the same (highest) score, return all of them.</li> <li>Selection ends here.</li> </ol> </li> <li>Do the last-resort algorithm: <ol type=a> <li>All gateways have 0 points by default.</li> <li>If a gateway requires login, but no credentials are filled in, subtract 1 point.</li> <li>If a gateway has preferred prefixes defined and they don't match the number, subtract 1 point.</li> <li>Return all gateways with the highest score. Selection ends here.</li> </ol> </li> </ol>
 * @param number phone number or its prefix. The minimum length is two characters,for shorter input (or null) the method does nothing.
 * @return tuple consisting of: 1. list of suggested gateways (may be empty); 2. boolean whether this suggestionis recommended (the decision was based on favorite gateways or the number of gateways users) or completely arbitrary (the last-resort algorithm was used).
 */
public Tuple<ArrayList<Gateway>,Boolean> suggestGateway(String number){
  if (number == null || number.length() < 2) {
    return new Tuple<ArrayList<Gateway>,Boolean>(new ArrayList<Gateway>(),false);
  }
  SortedSet<Gateway> selectedGateways=getVisible();
  ArrayList<Gateway> result=new ArrayList<Gateway>();
  final HashMap<String,Integer> usage=computeGatewayUsage();
  for (Iterator<Gateway> it=selectedGateways.iterator(); it.hasNext(); ) {
    Gateway gw=it.next();
    if (isFakeGateway(gw.getName())) {
      it.remove();
    }
 else     if (!isNumberSupported(gw,number)) {
      it.remove();
    }
 else {
    }
  }
  for (  Gateway gw : selectedGateways) {
    if (!gw.isFavorite()) {
      continue;
    }
    if (!isNumberPreferred(gw,number)) {
      continue;
    }
    result.add(gw);
  }
  if (!result.isEmpty()) {
    Collections.sort(result,new Comparator<Gateway>(){
      @Override public int compare(      Gateway o1,      Gateway o2){
        Integer popularity1=usage.get(o1.getName());
        Integer popularity2=usage.get(o2.getName());
        return popularity1.compareTo(popularity2);
      }
    }
);
    return new Tuple<ArrayList<Gateway>,Boolean>(result,true);
  }
  int max=1;
  for (  Gateway gw : selectedGateways) {
    if (!isNumberPreferred(gw,number)) {
      continue;
    }
    int popularity=usage.get(gw.getName());
    if (popularity > max) {
      max=popularity;
      result.clear();
      result.add(gw);
    }
 else     if (popularity == max) {
      result.add(gw);
    }
  }
  if (!result.isEmpty()) {
    return new Tuple<ArrayList<Gateway>,Boolean>(result,true);
  }
  HashMap<Gateway,Integer> scores=new HashMap<Gateway,Integer>();
  for (  Gateway gw : selectedGateways) {
    scores.put(gw,0);
    if (gw.hasFeature(Feature.LOGIN_ONLY) && keyring.getKey(gw.getName()) == null) {
      scores.put(gw,scores.get(gw) - 1);
    }
    if (!isNumberPreferred(gw,number)) {
      scores.put(gw,scores.get(gw) - 1);
    }
  }
  max=Integer.MIN_VALUE;
  for (  Gateway gw : selectedGateways) {
    int score=scores.get(gw);
    if (score > max) {
      max=score;
      result.clear();
      result.add(gw);
    }
 else     if (score == max) {
      result.add(gw);
    }
  }
  return new Tuple<ArrayList<Gateway>,Boolean>(result,false);
}","/** 
 * Guess gateway according to phone number or phone number prefix. Searches through all visible (non-hidden) gateways and finds the best suited ones (one or many) supporting this phone number. <br><br> Algorithm: <ol> <li>Any fake gateway is disqualified.</li> <li>Any gateway that has some supported prefixes listed and yet is not matching the number is disqualified.</li> <li>If some gateways are marked as favorite: <ol type=a> <li>Discard gateways that have the number outside their preferred prefixes.</li> <li>If there are some remaining, return all of them, sorted by the number of contacts assigned. Selection ends here.</li> </ol> </li> <li>If user has some contacts defined, count their numbers for each gateway: <ol type=a> <li>Discard gateways that have the number outside their preferred prefixes.</li> <li>Gateway with the highest number of contacts win.</li> <li>If multiple gateways have the same (highest) score, return all of them.</li> <li>Selection ends here.</li> </ol> </li> <li>Do the last-resort algorithm: <ol type=a> <li>All gateways have 0 points by default.</li> <li>If a gateway requires login, but no credentials are filled in, subtract 1 point.</li> <li>If a gateway has preferred prefixes defined and they don't match the number, subtract 1 point.</li> <li>Return all gateways with the highest score. Selection ends here.</li> </ol> </li> </ol>
 * @param number phone number or its prefix. The minimum length is two characters,for shorter input (or null) the method does nothing.
 * @return tuple consisting of: 1. list of suggested gateways (may be empty); 2. boolean whether this suggestionis recommended (the decision was based on favorite gateways or the number of gateways users) or completely arbitrary (the last-resort algorithm was used).
 */
public Tuple<ArrayList<Gateway>,Boolean> suggestGateway(String number){
  if (number == null || number.length() < 2) {
    return new Tuple<ArrayList<Gateway>,Boolean>(new ArrayList<Gateway>(),false);
  }
  SortedSet<Gateway> selectedGateways=getVisible();
  ArrayList<Gateway> result=new ArrayList<Gateway>();
  final HashMap<String,Integer> usage=computeGatewayUsage();
  for (Iterator<Gateway> it=selectedGateways.iterator(); it.hasNext(); ) {
    Gateway gw=it.next();
    if (isFakeGateway(gw.getName())) {
      it.remove();
    }
 else     if (!isNumberSupported(gw,number)) {
      it.remove();
    }
 else {
    }
  }
  for (  Gateway gw : selectedGateways) {
    if (!gw.isFavorite()) {
      continue;
    }
    if (!isNumberPreferred(gw,number)) {
      continue;
    }
    result.add(gw);
  }
  if (!result.isEmpty()) {
    Collections.sort(result,new Comparator<Gateway>(){
      @Override public int compare(      Gateway o1,      Gateway o2){
        Integer popularity1=usage.get(o1.getName());
        Integer popularity2=usage.get(o2.getName());
        return popularity1.compareTo(popularity2);
      }
    }
);
    return new Tuple<ArrayList<Gateway>,Boolean>(result,true);
  }
  int max=1;
  for (  Gateway gw : selectedGateways) {
    if (!isNumberPreferred(gw,number)) {
      continue;
    }
    int popularity=usage.get(gw.getName());
    if (popularity > max) {
      max=popularity;
      result.clear();
      result.add(gw);
    }
 else     if (popularity == max) {
      result.add(gw);
    }
  }
  if (!result.isEmpty()) {
    return new Tuple<ArrayList<Gateway>,Boolean>(result,true);
  }
  HashMap<Gateway,Integer> scores=new HashMap<Gateway,Integer>();
  for (  Gateway gw : selectedGateways) {
    scores.put(gw,0);
    if (gw.hasFeature(Feature.LOGIN_ONLY) && keyring.getKey(gw.getName()) == null) {
      scores.put(gw,scores.get(gw) - 1);
    }
    if (!isNumberPreferred(gw,number)) {
      scores.put(gw,scores.get(gw) - 1);
    }
  }
  max=Integer.MIN_VALUE;
  for (  Gateway gw : selectedGateways) {
    int score=scores.get(gw);
    if (score > max) {
      max=score;
      result.clear();
      result.add(gw);
    }
 else     if (score == max) {
      result.add(gw);
    }
  }
  return new Tuple<ArrayList<Gateway>,Boolean>(result,false);
}",0.9997547817557626
152097,"/** 
 * Install support for main frame. It will add unified l&f for toolbar, drag support for it and removes text from buttons.
 */
public static void installSupport(){
  Context.mainFrame.addWindowFocusListener(new UnifiedToolbarWindowAdapter());
  JToolBar toolbar=Context.mainFrame.getToolbar();
  toolbar.setDoubleBuffered(true);
  MouseDragSupport support=new MouseDragSupport();
  toolbar.addMouseListener(support);
  toolbar.addMouseMotionListener(support);
  for (  Component c : toolbar.getComponents()) {
    if (c instanceof JButton) {
      JButton button=(JButton)c;
      button.setBorderPainted(false);
      button.setText(null);
    }
  }
}","/** 
 * Install support for main frame. It will add unified L&amp;F for toolbar, drag support for it and removes text from buttons.
 */
public static void installSupport(){
  Context.mainFrame.addWindowFocusListener(new UnifiedToolbarWindowAdapter());
  JToolBar toolbar=Context.mainFrame.getToolbar();
  toolbar.setDoubleBuffered(true);
  MouseDragSupport support=new MouseDragSupport();
  toolbar.addMouseListener(support);
  toolbar.addMouseMotionListener(support);
  for (  Component c : toolbar.getComponents()) {
    if (c instanceof JButton) {
      JButton button=(JButton)c;
      button.setBorderPainted(false);
      button.setText(null);
    }
  }
}",0.9939301972685888
152098,"/** 
 * Escape text using html entities. Fixes bug in OpenJDK where scaron entity is not replaced by 'š' and euro by '€'.
 * @see ​StringEscapeUtils#escapeHtml(String)
 */
public static String escapeHtml(String input){
  if (input == null) {
    return input;
  }
  String output=StringEscapeUtils.escapeHtml(input);
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return output;
}","/** 
 * Escape text using html entities. Fixes bug in OpenJDK where scaron entity is not replaced by 'š' and euro by '€'.
 * @see StringEscapeUtils#escapeHtml(String)
 */
public static String escapeHtml(String input){
  if (input == null) {
    return input;
  }
  String output=StringEscapeUtils.escapeHtml(input);
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return output;
}",0.9990557129367328
152099,"/** 
 * Send a message
 * @param sms sms to be sent
 * @return whether the message was sent successfully
 */
public boolean sendMessage(SMS sms) throws Exception {
  Gateway gateway=Gateways.getInstance().get(sms.getGateway());
  logger.log(Level.FINE,""String_Node_Str"",gateway);
  init();
  executor=new GatewayExecutor(sms);
  if (gateway == null) {
    executor.setProblem(Problem.INTERNAL_MESSAGE,l10n.getString(""String_Node_Str""));
    return false;
  }
  this.variables=extractVariables(sms,gateway);
  Reader reader=null;
  boolean sentOk=false;
  try {
    reader=new InputStreamReader(gateway.getScript().openStream(),""String_Node_Str"");
    String language=getPreferredLanguage(gateway);
    executor.setPreferredLanguage(language);
    forwardVariables();
    engine.eval(reader);
    sentOk=(Boolean)invocable.invokeFunction(""String_Node_Str"",new Object[0]);
    logger.log(Level.FINE,""String_Node_Str"",sentOk);
  }
 catch (  ScriptException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + gateway,ex);
    executor.setProblem(Problem.UNKNOWN,null);
    return false;
  }
 finally {
    try {
      reader.close();
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"" + gateway,ex);
    }
  }
  return sentOk;
}","/** 
 * Send a message
 * @param sms sms to be sent
 * @return whether the message was sent successfully
 */
public boolean sendMessage(SMS sms) throws Exception {
  Gateway gateway=Gateways.getInstance().get(sms.getGateway());
  logger.log(Level.FINE,""String_Node_Str"",gateway);
  init();
  executor=new GatewayExecutor(sms);
  if (gateway == null) {
    executor.setProblem(Problem.INTERNAL_MESSAGE,l10n.getString(""String_Node_Str""));
    return false;
  }
  this.variables=extractVariables(sms,gateway);
  Reader reader=null;
  boolean sentOk=false;
  try {
    reader=new InputStreamReader(gateway.getScript().openStream(),""String_Node_Str"");
    String language=getPreferredLanguage(gateway);
    executor.setPreferredLanguage(language);
    forwardVariables();
    engine.eval(reader);
    sentOk=(Boolean)invocable.invokeFunction(""String_Node_Str"",new Object[0]);
    logger.log(Level.FINE,""String_Node_Str"",sentOk);
    if (!sentOk && sms.getProblem() == null) {
      executor.setProblem(Problem.UNKNOWN,null);
    }
  }
 catch (  ScriptException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + gateway,ex);
    executor.setProblem(Problem.UNKNOWN,null);
    return false;
  }
 finally {
    try {
      reader.close();
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"" + gateway,ex);
    }
  }
  return sentOk;
}",0.961038961038961
152100,"/** 
 * Get set of gateways from set of gateway URLs
 * @param gatewayURLs set of gateway URLs (file or jar URLs)
 * @return set of gateways
 * @throws java.beans.IntrospectionException When current JRE does not support JavaScript execution
 */
private static TreeSet<Gateway> importGateways(Set<URL> gatewayURLs) throws IntrospectionException {
  logger.finer(""String_Node_Str"" + gatewayURLs.size() + ""String_Node_Str"");
  TreeSet<Gateway> gateways=new TreeSet<Gateway>();
  for (  URL gatewayURL : gatewayURLs) {
    try {
      Gateway gateway=new Gateway(gatewayURL);
      if (Config.compareProgramVersions(Config.getLatestVersion(),gateway.getMinProgramVersion()) < 0) {
        logger.info(""String_Node_Str"" + gateway.getName() + ""String_Node_Str""+ gateway.getMinProgramVersion()+ ""String_Node_Str"");
        continue;
      }
      if (gateways.contains(gateway)) {
        for (Iterator<Gateway> it=gateways.iterator(); it.hasNext(); ) {
          Gateway op=it.next();
          if (op.equals(gateway) && op.getVersion().compareTo(gateway.getVersion()) < 0) {
            it.remove();
          }
        }
      }
      gateways.add(gateway);
    }
 catch (    IOException ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + gatewayURL.toExternalForm(),ex);
    }
catch (    IntrospectionException ex) {
      throw ex;
    }
catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + gatewayURL.toExternalForm(),ex);
    }
  }
  logger.finer(""String_Node_Str"" + gateways.size() + ""String_Node_Str"");
  return gateways;
}","/** 
 * Get set of gateways from set of gateway URLs
 * @param gatewayURLs set of gateway URLs (file or jar URLs)
 * @param deleteOnFail whether to delete gateway files that fail to be loaded
 * @return set of gateways
 * @throws java.beans.IntrospectionException When current JRE does not support JavaScript execution
 */
private static TreeSet<Gateway> importGateways(Set<URL> gatewayURLs,boolean deleteOnFail) throws IntrospectionException {
  logger.log(Level.FINER,""String_Node_Str"",gatewayURLs.size());
  TreeSet<Gateway> gateways=new TreeSet<Gateway>();
  for (  URL gatewayURL : gatewayURLs) {
    try {
      Gateway gateway=new Gateway(gatewayURL);
      if (Config.compareProgramVersions(Config.getLatestVersion(),gateway.getMinProgramVersion()) < 0) {
        logger.log(Level.INFO,""String_Node_Str"",new Object[]{gateway.getName(),gateway.getMinProgramVersion()});
        continue;
      }
      if (gateways.contains(gateway)) {
        for (Iterator<Gateway> it=gateways.iterator(); it.hasNext(); ) {
          Gateway op=it.next();
          if (op.equals(gateway) && op.getVersion().compareTo(gateway.getVersion()) < 0) {
            it.remove();
          }
        }
      }
      gateways.add(gateway);
    }
 catch (    IOException ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + gatewayURL.toExternalForm(),ex);
    }
catch (    IntrospectionException ex) {
      throw ex;
    }
catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + gatewayURL.toExternalForm(),ex);
      if (deleteOnFail) {
        try {
          logger.log(Level.FINE,""String_Node_Str"",gatewayURL);
          File gwFile=new File(gatewayURL.toURI());
          gwFile.delete();
        }
 catch (        Exception exc) {
          logger.log(Level.WARNING,""String_Node_Str"" + gatewayURL,exc);
        }
      }
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",gateways.size());
  return gateways;
}",0.6504018369690011
152101,"/** 
 * Load gateways
 * @throws IOException When there is problem accessing gateway directory or files
 * @throws IntrospectionException When current JRE does not support JavaScript execution
 * @throws SAXException When related XML files are not valid
 */
public void loadGateways() throws IOException, IntrospectionException, SAXException {
  logger.fine(""String_Node_Str"");
  ArrayList<Gateway> globalGateways=new ArrayList<Gateway>();
  TreeSet<Gateway> localGateways=new TreeSet<Gateway>();
  HashSet<DeprecatedGateway> deprecatedGateways=new HashSet<DeprecatedGateway>();
  if (!RuntimeUtils.isRunAsWebStart() && globalGatewayDir.exists()) {
    globalGateways=new ArrayList<Gateway>(ImportManager.importGateways(globalGatewayDir));
  }
 else   if (RuntimeUtils.isRunAsWebStart()) {
    globalGateways=new ArrayList<Gateway>(ImportManager.importGateways(GATEWAY_RESOURCE));
  }
 else {
    throw new IOException(""String_Node_Str"" + globalGatewayDir.getAbsolutePath() + ""String_Node_Str""+ GATEWAY_RESOURCE+ ""String_Node_Str"");
  }
  if (localGatewayDir.exists()) {
    localGateways=ImportManager.importGateways(localGatewayDir);
  }
  if (!RuntimeUtils.isRunAsWebStart() && deprecatedGWsFile.canRead()) {
    deprecatedGateways=ImportManager.importDeprecatedGateways(deprecatedGWsFile);
  }
 else   if (RuntimeUtils.isRunAsWebStart()) {
    deprecatedGateways=ImportManager.importDeprecatedGateways(DEPRECATED_GWS_RESOURCE);
  }
 else {
    logger.warning(""String_Node_Str"" + deprecatedGWsFile.getAbsolutePath() + ""String_Node_Str""+ DEPRECATED_GWS_RESOURCE+ ""String_Node_Str"");
  }
  for (  DeprecatedGateway deprecated : deprecatedGateways) {
    for (Iterator<Gateway> it=globalGateways.iterator(); it.hasNext(); ) {
      Gateway op=it.next();
      if (deprecated.getName().equals(op.getName()) && deprecated.getVersion().compareTo(op.getVersion()) >= 0) {
        logger.finer(""String_Node_Str"" + op.getName() + ""String_Node_Str"");
        it.remove();
      }
    }
    for (Iterator<Gateway> it=localGateways.iterator(); it.hasNext(); ) {
      Gateway op=it.next();
      if (deprecated.getName().equals(op.getName()) && deprecated.getVersion().compareTo(op.getVersion()) >= 0) {
        logger.finer(""String_Node_Str"" + op.getName() + ""String_Node_Str"");
        it.remove();
        File opFile=null;
        try {
          opFile=new File(op.getScript().toURI());
          File opIcon=new File(opFile.getAbsolutePath().replaceFirst(""String_Node_Str"",""String_Node_Str""));
          opFile.delete();
          FileUtils.deleteQuietly(opIcon);
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,""String_Node_Str"" + op.getName() + ""String_Node_Str""+ opFile+ ""String_Node_Str"",ex);
        }
      }
    }
  }
  for (  Gateway localOp : localGateways) {
    int index=globalGateways.indexOf(localOp);
    if (index >= 0) {
      Gateway globalOp=globalGateways.get(index);
      if (localOp.getVersion().compareTo(globalOp.getVersion()) > 0) {
        globalGateways.set(index,localOp);
        logger.finer(""String_Node_Str"" + localOp.getName() + ""String_Node_Str"");
      }
 else {
        logger.finer(""String_Node_Str"" + localOp.getName() + ""String_Node_Str"");
        File opFile=null;
        try {
          opFile=new File(localOp.getScript().toURI());
          File opIcon=new File(opFile.getAbsolutePath().replaceFirst(""String_Node_Str"",""String_Node_Str""));
          opFile.delete();
          FileUtils.deleteQuietly(opIcon);
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,""String_Node_Str"" + localOp.getName() + ""String_Node_Str""+ opFile+ ""String_Node_Str"",ex);
        }
      }
    }
 else {
      globalGateways.add(localOp);
      logger.finer(""String_Node_Str"" + localOp.getName() + ""String_Node_Str"");
    }
  }
  Gateways.getInstance().clear();
  Gateways.getInstance().addAll(globalGateways);
  Gateways.getInstance().setDeprecatedGateways(deprecatedGateways);
}","/** 
 * Load gateways
 * @throws IOException When there is problem accessing gateway directory or files
 * @throws IntrospectionException When current JRE does not support JavaScript execution
 * @throws SAXException When related XML files are not valid
 */
public void loadGateways() throws IOException, IntrospectionException, SAXException {
  logger.fine(""String_Node_Str"");
  ArrayList<Gateway> globalGateways=new ArrayList<Gateway>();
  TreeSet<Gateway> localGateways=new TreeSet<Gateway>();
  HashSet<DeprecatedGateway> deprecatedGateways=new HashSet<DeprecatedGateway>();
  if (!RuntimeUtils.isRunAsWebStart() && globalGatewayDir.exists()) {
    globalGateways=new ArrayList<Gateway>(ImportManager.importGateways(globalGatewayDir,false));
  }
 else   if (RuntimeUtils.isRunAsWebStart()) {
    globalGateways=new ArrayList<Gateway>(ImportManager.importGateways(GATEWAY_RESOURCE));
  }
 else {
    throw new IOException(""String_Node_Str"" + globalGatewayDir.getAbsolutePath() + ""String_Node_Str""+ GATEWAY_RESOURCE+ ""String_Node_Str"");
  }
  if (localGatewayDir.exists()) {
    localGateways=ImportManager.importGateways(localGatewayDir,true);
  }
  if (!RuntimeUtils.isRunAsWebStart() && deprecatedGWsFile.canRead()) {
    deprecatedGateways=ImportManager.importDeprecatedGateways(deprecatedGWsFile);
  }
 else   if (RuntimeUtils.isRunAsWebStart()) {
    deprecatedGateways=ImportManager.importDeprecatedGateways(DEPRECATED_GWS_RESOURCE);
  }
 else {
    logger.warning(""String_Node_Str"" + deprecatedGWsFile.getAbsolutePath() + ""String_Node_Str""+ DEPRECATED_GWS_RESOURCE+ ""String_Node_Str"");
  }
  for (  DeprecatedGateway deprecated : deprecatedGateways) {
    for (Iterator<Gateway> it=globalGateways.iterator(); it.hasNext(); ) {
      Gateway op=it.next();
      if (deprecated.getName().equals(op.getName()) && deprecated.getVersion().compareTo(op.getVersion()) >= 0) {
        logger.log(Level.FINER,""String_Node_Str"",op.getName());
        it.remove();
      }
    }
    for (Iterator<Gateway> it=localGateways.iterator(); it.hasNext(); ) {
      Gateway op=it.next();
      if (deprecated.getName().equals(op.getName()) && deprecated.getVersion().compareTo(op.getVersion()) >= 0) {
        logger.log(Level.FINER,""String_Node_Str"",op.getName());
        it.remove();
        File opFile=null;
        try {
          opFile=new File(op.getScript().toURI());
          File opIcon=new File(opFile.getAbsolutePath().replaceFirst(""String_Node_Str"",""String_Node_Str""));
          opFile.delete();
          FileUtils.deleteQuietly(opIcon);
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,""String_Node_Str"" + op.getName() + ""String_Node_Str""+ opFile+ ""String_Node_Str"",ex);
        }
      }
    }
  }
  for (  Gateway localOp : localGateways) {
    int index=globalGateways.indexOf(localOp);
    if (index >= 0) {
      Gateway globalOp=globalGateways.get(index);
      if (localOp.getVersion().compareTo(globalOp.getVersion()) > 0) {
        globalGateways.set(index,localOp);
        logger.log(Level.FINER,""String_Node_Str"",localOp.getName());
      }
 else {
        logger.log(Level.FINER,""String_Node_Str"",localOp.getName());
        File opFile=null;
        try {
          opFile=new File(localOp.getScript().toURI());
          File opIcon=new File(opFile.getAbsolutePath().replaceFirst(""String_Node_Str"",""String_Node_Str""));
          opFile.delete();
          FileUtils.deleteQuietly(opIcon);
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,""String_Node_Str"" + localOp.getName() + ""String_Node_Str""+ opFile+ ""String_Node_Str"",ex);
        }
      }
    }
 else {
      globalGateways.add(localOp);
      logger.log(Level.FINER,""String_Node_Str"",localOp.getName());
    }
  }
  Gateways.getInstance().clear();
  Gateways.getInstance().addAll(globalGateways);
  Gateways.getInstance().setDeprecatedGateways(deprecatedGateways);
}",0.9477165754993004
152102,"/** 
 * Test if it is possible to write to a certain file/directory. It doesn't have to exist. This method is available because of Java bug on Windows which does not check permissions in File.canWrite() but only read-only bit (<a href=""http://www.velocityreviews.com/forums/t303199-java-reporting-incorrect-directory-permission-under-windows-xp.html"">reference1</a>, <a href=""http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4939819>referece2</a>).
 * @param file File, existing or not existing; not null
 * @return true if file can be written, false if not
 */
public static boolean canWrite(File file){
  Validate.notNull(file);
  if (!RuntimeUtils.isWindows()) {
    return file.canWrite();
  }
  boolean success=false;
  try {
    if (file.exists()) {
      if (file.isDirectory()) {
        String name=""String_Node_Str"";
        File f=new File(file,name);
        while (f.exists()) {
          name=name + ""String_Node_Str"";
          f=new File(file,name);
        }
        f.createNewFile();
        success=f.delete();
      }
 else {
        FileOutputStream out=new FileOutputStream(file);
        out.close();
        success=true;
      }
    }
 else {
      FileUtils.touch(file);
      success=file.delete();
    }
  }
 catch (  Exception ex) {
    success=false;
  }
  return success;
}","/** 
 * Test if it is possible to write to a certain file/directory. It doesn't have to exist. This method is available because of Java bug on Windows which does not check permissions in File.canWrite() but only read-only bit (<a href=""http://www.velocityreviews.com/forums/t303199-java-reporting-incorrect-directory-permission-under-windows-xp.html"">reference1</a>, <a href=""http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4939819"">reference2</a>).
 * @param file File, existing or not existing; not null
 * @return true if file can be written, false if not
 */
public static boolean canWrite(File file){
  Validate.notNull(file);
  if (!RuntimeUtils.isWindows()) {
    return file.canWrite();
  }
  boolean success=false;
  try {
    if (file.exists()) {
      if (file.isDirectory()) {
        String name=""String_Node_Str"";
        File f=new File(file,name);
        while (f.exists()) {
          name=name + ""String_Node_Str"";
          f=new File(file,name);
        }
        f.createNewFile();
        success=f.delete();
      }
 else {
        FileOutputStream out=new FileOutputStream(file);
        out.close();
        success=true;
      }
    }
 else {
      FileUtils.touch(file);
      success=file.delete();
    }
  }
 catch (  Exception ex) {
    success=false;
  }
  return success;
}",0.9992354740061162
152103,"/** 
 * This method <b>must not</b> be called from EDT. For description see  {@link ImageCodeResolver#resolveImageCode(esmska.data.SMS)}
 */
@Override public boolean resolveImageCode(final SMS sms){
  if (SwingUtilities.isEventDispatchThread()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Validate.notNull(sms);
  if (sms.getImage() == null && StringUtils.isEmpty(sms.getImageHint())) {
    sms.setImageCode(null);
    return false;
  }
  final Semaphore semaphore=new Semaphore(0);
  try {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        GatewayMessageDialog gmd=GatewayMessageDialog.getInstance();
        gmd.addImageCodeMsg(sms,new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            semaphore.release();
          }
        }
);
      }
    }
);
    semaphore.acquire();
    return StringUtils.isNotEmpty(sms.getImageCode());
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return false;
  }
}","/** 
 * This method <b>must not</b> be called from EDT. For description see  {@link ImageCodeResolver#resolveImageCode(esmska.data.SMS)}
 */
@Override public boolean resolveImageCode(final SMS sms){
  if (SwingUtilities.isEventDispatchThread()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Validate.notNull(sms);
  if (sms.getImage() == null && StringUtils.isEmpty(sms.getImageHint())) {
    sms.setImageCode(null);
    return false;
  }
  final Semaphore semaphore=new Semaphore(0);
  try {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        GatewayMessageFrame gmf=GatewayMessageFrame.getInstance();
        gmf.addImageCodeMsg(sms,new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            semaphore.release();
          }
        }
);
      }
    }
);
    semaphore.acquire();
    return StringUtils.isNotEmpty(sms.getImageCode());
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return false;
  }
}",0.984747378455672
152104,"@Override public void run(){
  GatewayMessageDialog gmd=GatewayMessageDialog.getInstance();
  gmd.addImageCodeMsg(sms,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      semaphore.release();
    }
  }
);
}","@Override public void run(){
  GatewayMessageFrame gmf=GatewayMessageFrame.getInstance();
  gmf.addImageCodeMsg(sms,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      semaphore.release();
    }
  }
);
}",0.9338842975206612
152105,"/** 
 * set selected contacts in contact list or contact to display 
 */
public void setContacts(Collection<Contact> contacts){
  Validate.notNull(contacts);
  disableContactListeners=true;
  int count=contacts.size();
  if (count == 1) {
    Contact c=contacts.iterator().next();
    recipientField.setContact(c);
    gatewayComboBox.setSelectedGateway(c.getGateway());
  }
  boolean multiSendMode=(count > 1);
  if (multiSendMode) {
    recipientTextField.setText(l10n.getString(""String_Node_Str""));
  }
  recipientTextField.setEnabled(!multiSendMode);
  gatewayComboBox.setEnabled(!multiSendMode);
  Set<Contact> set=new HashSet<Contact>();
  set.addAll(contacts);
  if (count < 1) {
    Contact contact=recipientField.getContact();
    set.add(new Contact(contact != null ? contact.getName() : null,recipientField.getNumber(),gatewayComboBox.getSelectedGatewayName()));
  }
  envelope.setContacts(set);
  sendAction.updateStatus();
  smsTextPaneDocumentFilter.requestUpdate();
  updateNumberInfoLabel();
  disableContactListeners=false;
}","/** 
 * set selected contacts in contact list or contact to display 
 */
public void setContacts(Collection<Contact> contacts){
  Validate.notNull(contacts);
  disableContactListeners=true;
  int count=contacts.size();
  if (count == 1) {
    Contact c=contacts.iterator().next();
    recipientField.setContact(c);
    gatewayComboBox.setSelectedGateway(c.getGateway());
  }
  boolean multiSendMode=(count > 1);
  if (multiSendMode) {
    recipientTextField.setText(l10n.getString(""String_Node_Str""));
    gatewayComboBox.setSelectedGateway(null);
  }
  recipientTextField.setEnabled(!multiSendMode);
  gatewayComboBox.setEnabled(!multiSendMode);
  Set<Contact> set=new HashSet<Contact>();
  set.addAll(contacts);
  if (count < 1) {
    Contact contact=recipientField.getContact();
    set.add(new Contact(contact != null ? contact.getName() : null,recipientField.getNumber(),gatewayComboBox.getSelectedGatewayName()));
  }
  envelope.setContacts(set);
  sendAction.updateStatus();
  smsTextPaneDocumentFilter.requestUpdate();
  updateNumberInfoLabel();
  disableContactListeners=false;
}",0.9784037558685446
152106,"/** 
 * Mark the SMS as successfully sent.
 * @param sms sent SMS, not null
 */
public void setSMSSent(SMS sms){
  Validate.notNull(sms);
  logger.fine(""String_Node_Str"" + sms);
  sms.setStatus(SMS.Status.SENT);
  valuedSupport.fireEventOccured(Events.SMS_SENT,sms);
  updateGatewayDelay(sms.getGateway());
  remove(sms);
  timer.start();
}","/** 
 * Mark the SMS as successfully sent.
 * @param sms sent SMS, not null
 */
public void setSMSSent(SMS sms){
  Validate.notNull(sms);
  logger.log(Level.FINE,""String_Node_Str"",sms);
  sms.setStatus(SMS.Status.SENT);
  valuedSupport.fireEventOccured(Events.SMS_SENT,sms);
  updateGatewayDelay(sms.getGateway());
  remove(sms);
  timer.start();
}",0.9651162790697676
152107,"/** 
 * Move SMS in the queue to another position. Queue is always sorted by gateway, therefore SMS may be moved only within section of its gateway.
 * @param sms sms to be moved, not null
 * @param positionDelta direction and amount of movement. Positive number movesto the back of the queue, negative number moves to the front of the queue. The number corresponds to the number of positions to change. If the number is larger than current queue dimensions, the element will simply stop as the first or as the last element.
 */
public void movePosition(SMS sms,int positionDelta){
  Validate.notNull(sms,""String_Node_Str"");
  String gateway=sms.getGateway();
synchronized (queue) {
    if (positionDelta == 0 || !queue.containsKey(gateway) || !queue.get(gateway).contains(sms)) {
      return;
    }
    logger.fine(""String_Node_Str"" + sms + ""String_Node_Str""+ positionDelta);
    List<SMS> list=queue.get(gateway);
    int currentPos=list.indexOf(sms);
    int newPos=currentPos + positionDelta;
    if (newPos < 0) {
      newPos=0;
    }
    if (newPos > list.size() - 1) {
      newPos=list.size() - 1;
    }
    if (currentPos == newPos) {
      return;
    }
    list.remove(currentPos);
    list.add(newPos,sms);
  }
  valuedSupport.fireEventOccured(Events.SMS_POSITION_CHANGED,sms);
  if (sms.getStatus() == SMS.Status.READY) {
    sms.setStatus(SMS.Status.WAITING);
    markAllIfReady();
  }
}","/** 
 * Move SMS in the queue to another position. Queue is always sorted by gateway, therefore SMS may be moved only within section of its gateway.
 * @param sms sms to be moved, not null
 * @param positionDelta direction and amount of movement. Positive number movesto the back of the queue, negative number moves to the front of the queue. The number corresponds to the number of positions to change. If the number is larger than current queue dimensions, the element will simply stop as the first or as the last element.
 */
public void movePosition(SMS sms,int positionDelta){
  Validate.notNull(sms,""String_Node_Str"");
  String gateway=sms.getGateway();
synchronized (queue) {
    if (positionDelta == 0 || !queue.containsKey(gateway) || !queue.get(gateway).contains(sms)) {
      return;
    }
    logger.log(Level.FINE,""String_Node_Str"",new Object[]{sms,positionDelta});
    List<SMS> list=queue.get(gateway);
    int currentPos=list.indexOf(sms);
    int newPos=currentPos + positionDelta;
    if (newPos < 0) {
      newPos=0;
    }
    if (newPos > list.size() - 1) {
      newPos=list.size() - 1;
    }
    if (currentPos == newPos) {
      return;
    }
    list.remove(currentPos);
    list.add(newPos,sms);
  }
  valuedSupport.fireEventOccured(Events.SMS_POSITION_CHANGED,sms);
  if (sms.getStatus() == SMS.Status.READY) {
    sms.setStatus(SMS.Status.WAITING);
    markAllIfReady();
  }
}",0.97613110081938
152108,"/** 
 * Check if sms is ready and set status if it is 
 */
private void markIfReady(SMS sms){
  Validate.notNull(sms);
  long delay=getSMSDelay(sms);
  if (sms.getStatus() == SMS.Status.WAITING && delay <= 0) {
    logger.finer(""String_Node_Str"" + sms);
    sms.setStatus(SMS.Status.READY);
    valuedSupport.fireEventOccured(Events.NEW_SMS_READY,sms);
  }
}","/** 
 * Check if sms is ready and set status if it is 
 */
private void markIfReady(SMS sms){
  Validate.notNull(sms);
  long delay=getSMSDelay(sms);
  if (sms.getStatus() == SMS.Status.WAITING && delay <= 0) {
    logger.log(Level.FINER,""String_Node_Str"",sms);
    sms.setStatus(SMS.Status.READY);
    valuedSupport.fireEventOccured(Events.NEW_SMS_READY,sms);
  }
}",0.9640883977900552
152109,"/** 
 * Remove SMS from the queue. If the SMS is not present nothing happens.
 * @param sms SMS to be removed. Not null.
 * @return See {@link Collection#remove(java.lang.Object) }
 */
public boolean remove(SMS sms){
  Validate.notNull(sms);
  String gateway=sms.getGateway();
  boolean removed=false;
synchronized (queue) {
    if (queue.containsKey(gateway)) {
      removed=queue.get(gateway).remove(sms);
    }
    if (removed && queue.get(gateway).size() == 0) {
      queue.remove(gateway);
      gatewayDelay.remove(gateway);
    }
  }
  if (removed) {
    logger.fine(""String_Node_Str"" + sms);
    valuedSupport.fireEventOccured(Events.SMS_REMOVED,sms);
    markAllIfReady();
  }
  return removed;
}","/** 
 * Remove SMS from the queue. If the SMS is not present nothing happens.
 * @param sms SMS to be removed. Not null.
 * @return See {@link Collection#remove(java.lang.Object) }
 */
public boolean remove(SMS sms){
  Validate.notNull(sms);
  String gateway=sms.getGateway();
  boolean removed=false;
synchronized (queue) {
    if (queue.containsKey(gateway)) {
      removed=queue.get(gateway).remove(sms);
    }
    if (removed && queue.get(gateway).isEmpty()) {
      queue.remove(gateway);
      gatewayDelay.remove(gateway);
    }
  }
  if (removed) {
    logger.log(Level.FINE,""String_Node_Str"",sms);
    valuedSupport.fireEventOccured(Events.SMS_REMOVED,sms);
    markAllIfReady();
  }
  return removed;
}",0.9690140845070424
152110,"/** 
 * Add new SMS to the queue. May not be null.
 * @return See {@link Collection#add}.
 */
public boolean add(SMS sms){
  Validate.notNull(sms);
  sms.setStatus(SMS.Status.WAITING);
  String gateway=sms.getGateway();
  boolean added=false;
synchronized (queue) {
    if (queue.containsKey(gateway)) {
      if (!queue.get(gateway).contains(sms)) {
        added=queue.get(gateway).add(sms);
      }
    }
 else {
      List<SMS> list=new ArrayList<SMS>();
      list.add(sms);
      queue.put(gateway,list);
      added=true;
    }
  }
  if (added) {
    logger.fine(""String_Node_Str"" + sms);
    valuedSupport.fireEventOccured(Events.SMS_ADDED,sms);
    markIfReady(sms);
    timer.start();
  }
  return added;
}","/** 
 * Add new SMS to the queue. May not be null.
 * @return See {@link Collection#add}.
 */
public boolean add(SMS sms){
  Validate.notNull(sms);
  sms.setStatus(SMS.Status.WAITING);
  String gateway=sms.getGateway();
  boolean added=false;
synchronized (queue) {
    if (queue.containsKey(gateway)) {
      if (!queue.get(gateway).contains(sms)) {
        added=queue.get(gateway).add(sms);
      }
    }
 else {
      List<SMS> list=new ArrayList<SMS>();
      list.add(sms);
      queue.put(gateway,list);
      added=true;
    }
  }
  if (added) {
    logger.log(Level.FINE,""String_Node_Str"",sms);
    valuedSupport.fireEventOccured(Events.SMS_ADDED,sms);
    markIfReady(sms);
    timer.start();
  }
  return added;
}",0.9833333333333332
152111,"/** 
 * Check all sms for that which are ready and set their status 
 */
private void markAllIfReady(){
  ArrayList<SMS> ready=new ArrayList<SMS>();
synchronized (queue) {
    for (    String gateway : queue.keySet()) {
      long delay=getGatewayDelay(gateway);
      if (delay > 0) {
        continue;
      }
      for (      SMS sms : queue.get(gateway)) {
        long smsDelay=getSMSDelay(sms);
        if (smsDelay > 0) {
          break;
        }
        if (sms.getStatus() == SMS.Status.WAITING) {
          logger.finer(""String_Node_Str"" + sms);
          sms.setStatus(SMS.Status.READY);
          ready.add(sms);
        }
      }
    }
  }
  for (  SMS sms : ready) {
    valuedSupport.fireEventOccured(Events.NEW_SMS_READY,sms);
  }
}","/** 
 * Check all sms for that which are ready and set their status 
 */
private void markAllIfReady(){
  ArrayList<SMS> ready=new ArrayList<SMS>();
synchronized (queue) {
    for (    String gateway : queue.keySet()) {
      long delay=getGatewayDelay(gateway);
      if (delay > 0) {
        continue;
      }
      for (      SMS sms : queue.get(gateway)) {
        long smsDelay=getSMSDelay(sms);
        if (smsDelay > 0) {
          break;
        }
        if (sms.getStatus() == SMS.Status.WAITING) {
          logger.log(Level.FINER,""String_Node_Str"",sms);
          sms.setStatus(SMS.Status.READY);
          ready.add(sms);
        }
      }
    }
  }
  for (  SMS sms : ready) {
    valuedSupport.fireEventOccured(Events.NEW_SMS_READY,sms);
  }
}",0.9827586206896552
152112,"/** 
 * Mark SMS as failed during sending. Pauses the queue.
 * @param sms SMS that has failed, not null
 */
public void setSMSFailed(SMS sms){
  Validate.notNull(sms);
  logger.fine(""String_Node_Str"" + sms);
  setPaused(true);
  sms.setStatus(SMS.Status.WAITING);
  valuedSupport.fireEventOccured(Events.SMS_SENDING_FAILED,sms);
  updateGatewayDelay(sms.getGateway());
  timer.start();
  markIfReady(sms);
}","/** 
 * Mark SMS as failed during sending. Pauses the queue.
 * @param sms SMS that has failed, not null
 */
public void setSMSFailed(SMS sms){
  Validate.notNull(sms);
  logger.log(Level.FINE,""String_Node_Str"",sms);
  setPaused(true);
  sms.setStatus(SMS.Status.WAITING);
  valuedSupport.fireEventOccured(Events.SMS_SENDING_FAILED,sms);
  updateGatewayDelay(sms.getGateway());
  timer.start();
  markIfReady(sms);
}",0.970873786407767
152113,"/** 
 * Add collection of new SMS to the queue.
 * @param collection Collection of SMS. May not be null, may not contain null element.
 * @return See {@link Collection#addAll(java.util.Collection)}
 */
public boolean addAll(Collection<SMS> collection){
  Validate.notNull(collection,""String_Node_Str"");
  Validate.noNullElements(collection);
  logger.fine(""String_Node_Str"" + collection.size() + ""String_Node_Str"");
  boolean added=false;
  for (  SMS sms : collection) {
    if (add(sms)) {
      added=true;
    }
  }
  return added;
}","/** 
 * Add collection of new SMS to the queue.
 * @param collection Collection of SMS. May not be null, may not contain null element.
 * @return See {@link Collection#addAll(java.util.Collection)}
 */
public boolean addAll(Collection<SMS> collection){
  Validate.notNull(collection,""String_Node_Str"");
  Validate.noNullElements(collection);
  logger.log(Level.FINE,""String_Node_Str"",collection.size());
  boolean added=false;
  for (  SMS sms : collection) {
    if (add(sms)) {
      added=true;
    }
  }
  return added;
}",0.9585687382297552
152114,"/** 
 * Mark SMS as currently being sent.
 * @param sms SMS that is currently being sent, not null
 */
public void setSMSSending(SMS sms){
  Validate.notNull(sms);
  logger.fine(""String_Node_Str"" + sms);
  sms.setStatus(SMS.Status.SENDING);
  valuedSupport.fireEventOccured(Events.SENDING_SMS,sms);
}","/** 
 * Mark SMS as currently being sent.
 * @param sms SMS that is currently being sent, not null
 */
public void setSMSSending(SMS sms){
  Validate.notNull(sms);
  logger.log(Level.FINE,""String_Node_Str"",sms);
  sms.setStatus(SMS.Status.SENDING);
  valuedSupport.fireEventOccured(Events.SENDING_SMS,sms);
}",0.9605263157894736
152115,"private void smsFailed(SMS sms){
  logger.info(""String_Node_Str"" + sms);
  log.addRecord(new Log.Record(MessageFormat.format(l10n.getString(""String_Node_Str""),sms.getRecipient()),null,Icons.STATUS_WARNING));
  String cause=(sms.getErrMsg() != null ? sms.getErrMsg().trim() : ""String_Node_Str"");
  JHtmlLabel label=new JHtmlLabel(MessageFormat.format(l10n.getString(""String_Node_Str""),sms.getRecipient(),cause));
  label.addValuedListener(new ValuedListener<JHtmlLabel.Events,String>(){
    @Override public void eventOccured(    ValuedEvent<JHtmlLabel.Events,String> e){
switch (e.getEvent()) {
case LINK_CLICKED:
        Actions.getBrowseAction(e.getValue()).actionPerformed(null);
    }
  }
}
);
label.setVerticalAlignment(SwingConstants.TOP);
JPanel panel=new JPanel(new BorderLayout());
panel.add(label,BorderLayout.CENTER);
JOptionPane pane=new JOptionPane(panel,JOptionPane.WARNING_MESSAGE);
JDialog dialog=pane.createDialog(MainFrame.this,null);
Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
int width=panel.getWidth();
int height=panel.getHeight();
if (dialog.getWidth() > screenSize.getWidth()) {
  width=(int)screenSize.getWidth() * 2 / 3;
  height=height * (panel.getWidth() / width);
  panel.setPreferredSize(new Dimension(width,height));
  dialog=pane.createDialog(MainFrame.this,null);
}
logger.fine(""String_Node_Str"");
RuntimeUtils.setDocumentModalDialog(dialog);
dialog.setResizable(true);
dialog.pack();
dialog.setVisible(true);
finish(sms);
}","private void smsFailed(SMS sms){
  logger.log(Level.INFO,""String_Node_Str"",sms);
  log.addRecord(new Log.Record(MessageFormat.format(l10n.getString(""String_Node_Str""),sms.getRecipient()),null,Icons.STATUS_WARNING));
  String cause=(sms.getErrMsg() != null ? sms.getErrMsg().trim() : ""String_Node_Str"");
  JHtmlLabel label=new JHtmlLabel(MessageFormat.format(l10n.getString(""String_Node_Str""),sms.getRecipient(),cause));
  label.addValuedListener(new ValuedListener<JHtmlLabel.Events,String>(){
    @Override public void eventOccured(    ValuedEvent<JHtmlLabel.Events,String> e){
switch (e.getEvent()) {
case LINK_CLICKED:
        Actions.getBrowseAction(e.getValue()).actionPerformed(null);
    }
  }
}
);
label.setVerticalAlignment(SwingConstants.TOP);
JPanel panel=new JPanel(new BorderLayout());
panel.add(label,BorderLayout.CENTER);
JOptionPane pane=new JOptionPane(panel,JOptionPane.WARNING_MESSAGE);
JDialog dialog=pane.createDialog(MainFrame.this,null);
Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
int width=panel.getWidth();
int height=panel.getHeight();
if (dialog.getWidth() > screenSize.getWidth()) {
  width=(int)screenSize.getWidth() * 2 / 3;
  height=height * (panel.getWidth() / width);
  panel.setPreferredSize(new Dimension(width,height));
  dialog=pane.createDialog(MainFrame.this,null);
}
logger.fine(""String_Node_Str"");
RuntimeUtils.setDocumentModalDialog(dialog);
dialog.setResizable(true);
dialog.pack();
dialog.setVisible(true);
finish(sms);
}",0.9919137466307276
152116,"/** 
 * Quit the program 
 */
public void exit(){
  logger.fine(""String_Node_Str"");
  Runtime.getRuntime().removeShutdownHook(shutdownThread);
  boolean saveOk=saveAll();
  if (!saveOk) {
    JOptionPane.showMessageDialog(this,l10n.getString(""String_Node_Str""),null,JOptionPane.WARNING_MESSAGE);
  }
  int returnCode=saveOk ? 0 : 3;
  logger.fine(""String_Node_Str"" + returnCode);
  System.exit(returnCode);
}","/** 
 * Quit the program 
 */
public void exit(){
  logger.fine(""String_Node_Str"");
  Runtime.getRuntime().removeShutdownHook(shutdownThread);
  boolean saveOk=saveAll();
  if (!saveOk) {
    JOptionPane.showMessageDialog(this,l10n.getString(""String_Node_Str""),null,JOptionPane.WARNING_MESSAGE);
  }
  int returnCode=saveOk ? 0 : 3;
  logger.log(Level.FINE,""String_Node_Str"",returnCode);
  System.exit(returnCode);
}",0.9296116504854368
152117,"/** 
 * Move SMS in the queue to another position. Queue is always sorted by gateway, therefore SMS may be moved only within section of its gateway.
 * @param sms sms to be moved, not null
 * @param positionDelta direction and amount of movement. Positive number movesto the back of the queue, negative number moves to the front of the queue. The number corresponds to the number of positions to change. If the number is larger than current queue dimensions, the element will simply stop as the first or as the last element.
 */
public void movePosition(SMS sms,int positionDelta){
  Validate.notNull(sms,""String_Node_Str"");
  String gateway=sms.getGateway();
synchronized (queue) {
    if (positionDelta == 0 || !queue.containsKey(gateway) || !queue.get(gateway).contains(sms)) {
      return;
    }
    logger.log(Level.FINE,""String_Node_Str"",new Object[]{sms,positionDelta});
    List<SMS> list=queue.get(gateway);
    int currentPos=list.indexOf(sms);
    int newPos=currentPos + positionDelta;
    if (newPos < 0) {
      newPos=0;
    }
    if (newPos > list.size() - 1) {
      newPos=list.size() - 1;
    }
    if (currentPos == newPos) {
      return;
    }
    list.remove(currentPos);
    list.add(newPos,sms);
  }
  valuedSupport.fireEventOccured(Events.SMS_POSITION_CHANGED,sms);
  if (sms.getStatus() == SMS.Status.READY) {
    sms.setStatus(SMS.Status.WAITING);
    markAllIfReady();
  }
}","/** 
 * Move SMS in the queue to another position. Queue is always sorted by gateway, therefore SMS may be moved only within section of its gateway.
 * @param sms sms to be moved, not null
 * @param positionDelta direction and amount of movement. Positive number movesto the back of the queue, negative number moves to the front of the queue. The number corresponds to the number of positions to change. If the number is larger than current queue dimensions, the element will simply stop as the first or as the last element.
 */
public void movePosition(SMS sms,int positionDelta){
  Validate.notNull(sms,""String_Node_Str"");
  String gateway=sms.getGateway();
synchronized (queue) {
    if (positionDelta == 0 || !queue.containsKey(gateway) || !queue.get(gateway).contains(sms)) {
      return;
    }
    logger.log(Level.FINE,""String_Node_Str"",new Object[]{sms,positionDelta});
    List<SMS> list=queue.get(gateway);
    int currentPos=list.indexOf(sms);
    int newPos=currentPos + positionDelta;
    if (newPos < 0) {
      newPos=0;
    }
    if (newPos > list.size() - 1) {
      newPos=list.size() - 1;
    }
    if (currentPos == newPos) {
      return;
    }
    list.remove(currentPos);
    list.add(newPos,sms);
  }
  valuedSupport.fireEventOccured(Events.SMS_POSITION_CHANGED,sms);
  sms.setStatus(SMS.Status.WAITING);
  markAllIfReady();
}",0.9807622504537206
152118,"/** 
 * Move SMS in the queue to another position. Queue is always sorted by gateway, therefore SMS may be moved only within section of its gateway.
 * @param sms sms to be moved, not null
 * @param positionDelta direction and amount of movement. Positive number movesto the back of the queue, negative number moves to the front of the queue. The number corresponds to the number of positions to change. If the number is larger than current queue dimensions, the element will simply stop as the first or as the last element.
 */
public void movePosition(SMS sms,int positionDelta){
  Validate.notNull(sms,""String_Node_Str"");
  String gateway=sms.getGateway();
synchronized (queue) {
    if (positionDelta == 0 || !queue.containsKey(gateway) || !queue.get(gateway).contains(sms)) {
      return;
    }
    logger.log(Level.FINE,""String_Node_Str"",new Object[]{sms,positionDelta});
    List<SMS> list=queue.get(gateway);
    int currentPos=list.indexOf(sms);
    int newPos=currentPos + positionDelta;
    if (newPos < 0) {
      newPos=0;
    }
    if (newPos > list.size() - 1) {
      newPos=list.size() - 1;
    }
    if (currentPos == newPos) {
      return;
    }
    list.remove(currentPos);
    list.add(newPos,sms);
  }
  valuedSupport.fireEventOccured(Events.SMS_POSITION_CHANGED,sms);
  sms.setStatus(SMS.Status.WAITING);
  markAllIfReady();
}","/** 
 * Move SMS in the queue to another position. Queue is always sorted by gateway, therefore SMS may be moved only within section of its gateway.
 * @param sms sms to be moved, not null
 * @param positionDelta direction and amount of movement. Positive number movesto the back of the queue, negative number moves to the front of the queue. The number corresponds to the number of positions to change. If the number is larger than current queue dimensions, the element will simply stop as the first or as the last element.
 */
public void movePosition(SMS sms,int positionDelta){
  Validate.notNull(sms,""String_Node_Str"");
  String gateway=sms.getGateway();
synchronized (queue) {
    if (positionDelta == 0 || !queue.containsKey(gateway) || !queue.get(gateway).contains(sms)) {
      return;
    }
    logger.log(Level.FINE,""String_Node_Str"",new Object[]{sms,positionDelta});
    List<SMS> list=queue.get(gateway);
    int currentPos=list.indexOf(sms);
    int newPos=currentPos + positionDelta;
    if (newPos < 0) {
      newPos=0;
    }
    if (newPos > list.size() - 1) {
      newPos=list.size() - 1;
    }
    if (currentPos == newPos) {
      return;
    }
    list.remove(currentPos);
    list.add(newPos,sms);
  }
  valuedSupport.fireEventOccured(Events.SMS_POSITION_CHANGED,sms);
  List<SMS> messages=getAll(sms.getGateway());
  for (  SMS message : messages) {
    if (message.getStatus() == SMS.Status.READY) {
      message.setStatus(SMS.Status.WAITING);
    }
  }
  markAllIfReady();
}",0.9449702067998598
152119,"/** 
 * Proceed with a backup. Backs up today's configuration (if not backed up already). Preserves last 7 backups, older ones are deleted.
 */
public void backupConfigFiles() throws IOException {
  BackupManager bm=new BackupManager(backupDir);
  File[] list=new File[]{configFile,contactsFile,historyFile,keyringFile,queueFile,logFile};
  boolean backed=bm.backupFiles(Arrays.asList(list),false);
  if (backed) {
    logFile.delete();
  }
  bm.removeOldBackups(7);
}","/** 
 * Proceed with a backup. Backs up today's configuration (if not backed up already). Preserves last 7 backups, older ones are deleted.
 */
public void backupConfigFiles() throws IOException {
  BackupManager bm=new BackupManager(backupDir);
  File[] list=new File[]{configFile,contactsFile,historyFile,keyringFile,queueFile,logFile};
  boolean backed=bm.backupFiles(Arrays.asList(list),false);
  if (backed) {
    logFile.delete();
    File parent=logFile.getParentFile();
    final String logName=logFile.getName();
    File[] oldLogs=parent.listFiles(new FilenameFilter(){
      private final Pattern pattern=Pattern.compile(""String_Node_Str"" + Pattern.quote(logName) + ""String_Node_Str"");
      @Override public boolean accept(      File dir,      String name){
        return pattern.matcher(name).matches();
      }
    }
);
    if (oldLogs != null) {
      for (      File oldLog : oldLogs) {
        oldLog.delete();
      }
    }
  }
  bm.removeOldBackups(7);
}",0.6490984743411928
152120,"/** 
 * Get set of operators from set of operator URLs
 * @param operatorURLs set of operator URLs (file or jar URLs)
 * @return set of operators
 * @throws java.beans.IntrospectionException When current JRE does not support JavaScript execution
 */
private static TreeSet<Operator> importOperators(Set<URL> operatorURLs) throws IntrospectionException {
  logger.finer(""String_Node_Str"" + operatorURLs.size() + ""String_Node_Str"");
  TreeSet<Operator> operators=new TreeSet<Operator>();
  for (  URL operatorURL : operatorURLs) {
    try {
      DefaultOperator operator=new DefaultOperator(operatorURL);
      if (Config.compareProgramVersions(Config.getLatestVersion(),operator.getMinProgramVersion()) >= 0) {
        operators.add(operator);
      }
 else {
        logger.info(""String_Node_Str"" + operator.getName() + ""String_Node_Str""+ operator.getMinProgramVersion()+ ""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + operatorURL.toExternalForm(),ex);
    }
catch (    IntrospectionException ex) {
      throw ex;
    }
catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + operatorURL.toExternalForm(),ex);
    }
  }
  logger.finer(""String_Node_Str"" + operators.size() + ""String_Node_Str"");
  return operators;
}","/** 
 * Get set of operators from set of operator URLs
 * @param operatorURLs set of operator URLs (file or jar URLs)
 * @return set of operators
 * @throws java.beans.IntrospectionException When current JRE does not support JavaScript execution
 */
private static TreeSet<Operator> importOperators(Set<URL> operatorURLs) throws IntrospectionException {
  logger.finer(""String_Node_Str"" + operatorURLs.size() + ""String_Node_Str"");
  TreeSet<Operator> operators=new TreeSet<Operator>();
  for (  URL operatorURL : operatorURLs) {
    try {
      DefaultOperator operator=new DefaultOperator(operatorURL);
      if (Config.compareProgramVersions(Config.getLatestVersion(),operator.getMinProgramVersion()) < 0) {
        logger.info(""String_Node_Str"" + operator.getName() + ""String_Node_Str""+ operator.getMinProgramVersion()+ ""String_Node_Str"");
        continue;
      }
      if (operators.contains(operator)) {
        for (Iterator<Operator> it=operators.iterator(); it.hasNext(); ) {
          Operator op=it.next();
          if (op.equals(operator) && op.getVersion().compareTo(operator.getVersion()) < 0) {
            it.remove();
          }
        }
      }
      operators.add(operator);
    }
 catch (    IOException ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + operatorURL.toExternalForm(),ex);
    }
catch (    IntrospectionException ex) {
      throw ex;
    }
catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + operatorURL.toExternalForm(),ex);
    }
  }
  logger.finer(""String_Node_Str"" + operators.size() + ""String_Node_Str"");
  return operators;
}",0.790106492614222
152121,"/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  LogSupport.init();
  LogSupport.storeRecords(true);
  Thread.setDefaultUncaughtExceptionHandler(ExceptionDialog.getExceptionHandler());
  if (!RuntimeUtils.isSupportedJava()) {
    logger.severe(l10n.getString(""String_Node_Str""));
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  logger.fine(""String_Node_Str"" + Config.getLatestVersion() + ""String_Node_Str"");
  logger.finer(""String_Node_Str"" + RuntimeUtils.getSystemInfo());
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    logger.fine(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,""String_Node_Str"",ex);
          }
          JFileChooser chooser=new JFileChooser();
          chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          chooser.setApproveButtonText(l10n.getString(""String_Node_Str""));
          chooser.setDialogTitle(l10n.getString(""String_Node_Str""));
          chooser.setFileHidingEnabled(false);
          chooser.setMultiSelectionEnabled(false);
          int result=chooser.showOpenDialog(null);
          if (result == JFileChooser.APPROVE_OPTION) {
            configPath=chooser.getSelectedFile().getPath();
            logger.config(""String_Node_Str"" + configPath);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setCustomDirs(configPath,configPath);
    }
    PersistenceManager.instantiate();
    pm=Context.persistenceManager;
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,new JLabel(MessageFormat.format(l10n.getString(""String_Node_Str""),PersistenceManager.getConfigDir().getAbsolutePath(),PersistenceManager.getDataDir().getAbsolutePath())),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
 finally {
      System.exit(5);
    }
  }
  try {
    pm.backupConfigFiles();
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  File logFile=pm.getLogFile();
  try {
    LogSupport.initFileHandler(logFile);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + logFile.getAbsolutePath(),ex);
  }
 finally {
    LogSupport.storeRecords(false);
  }
  try {
    pm.loadConfig();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadOperators();
  }
 catch (  IntrospectionException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
    System.exit(2);
  }
catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  try {
    pm.loadContacts();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadQueue();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadHistory();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadKeyring();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  if (Config.getInstance().isDebugMode()) {
    LogSupport.enableHttpClientLogging();
    LogSupport.getEsmskaLogger().setLevel(Level.ALL);
  }
  if (!pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          options=RuntimeUtils.sortDialogOptions(options);
          int result=JOptionPane.showOptionDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != ArrayUtils.indexOf(options,runOption)) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  Config config=Config.getInstance();
  final String dataVersion=config.getVersion();
  final String programVersion=Config.getLatestVersion();
  if (Config.compareProgramVersions(dataVersion,programVersion) > 0) {
    logger.warning(""String_Node_Str"" + dataVersion + ""String_Node_Str""+ programVersion+ ""String_Node_Str""+ ""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          options=RuntimeUtils.sortDialogOptions(options);
          int result=JOptionPane.showOptionDialog(null,new JLabel(MessageFormat.format(l10n.getString(""String_Node_Str""),dataVersion,programVersion)),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != ArrayUtils.indexOf(options,runOption)) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (config.isFirstRun()) {
    logger.fine(""String_Node_Str"");
    config.setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    config.setLookAndFeel(ThemeManager.suggestBestLAF());
    if (Config.isRunAsWebStart()) {
      config.setCheckUpdatePolicy(Config.CheckUpdatePolicy.CHECK_NONE);
    }
  }
  if (!config.isFirstRun()) {
    LegacyUpdater.update();
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          ThemeManager.setLaF();
        }
 catch (        Throwable ex) {
          logger.log(Level.WARNING,""String_Node_Str"",ex);
        }
      }
    }
);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  if (config.isUseProxy()) {
    ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
  }
  if (!Config.isStableVersion()) {
    config.setCheckForUnstableUpdates(true);
  }
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      MainFrame.instantiate();
      Context.mainFrame.startAndShow();
    }
  }
);
}","/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  LogSupport.init();
  LogSupport.storeRecords(true);
  Thread.setDefaultUncaughtExceptionHandler(ExceptionDialog.getExceptionHandler());
  if (!RuntimeUtils.isSupportedJava()) {
    logger.severe(l10n.getString(""String_Node_Str""));
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  logger.fine(""String_Node_Str"" + Config.getLatestVersion() + ""String_Node_Str"");
  logger.finer(""String_Node_Str"" + RuntimeUtils.getSystemInfo());
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    logger.fine(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,""String_Node_Str"",ex);
          }
          JFileChooser chooser=new JFileChooser();
          chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          chooser.setApproveButtonText(l10n.getString(""String_Node_Str""));
          chooser.setDialogTitle(l10n.getString(""String_Node_Str""));
          chooser.setFileHidingEnabled(false);
          chooser.setMultiSelectionEnabled(false);
          int result=chooser.showOpenDialog(null);
          if (result == JFileChooser.APPROVE_OPTION) {
            configPath=chooser.getSelectedFile().getPath();
            logger.config(""String_Node_Str"" + configPath);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setCustomDirs(configPath,configPath);
    }
    PersistenceManager.instantiate();
    pm=Context.persistenceManager;
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,new JLabel(MessageFormat.format(l10n.getString(""String_Node_Str""),PersistenceManager.getConfigDir().getAbsolutePath(),PersistenceManager.getDataDir().getAbsolutePath())),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
 finally {
      System.exit(5);
    }
  }
  try {
    pm.backupConfigFiles();
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  File logFile=pm.getLogFile();
  try {
    LogSupport.initFileHandler(logFile);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + logFile.getAbsolutePath(),ex);
  }
 finally {
    LogSupport.storeRecords(false);
  }
  try {
    pm.loadConfig();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadOperators();
  }
 catch (  IntrospectionException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
    System.exit(2);
  }
catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  try {
    pm.loadContacts();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadQueue();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadHistory();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  try {
    pm.loadKeyring();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  if (Config.getInstance().isDebugMode()) {
    LogSupport.enableHttpClientLogging();
    LogSupport.getEsmskaLogger().setLevel(Level.ALL);
  }
  if (!pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          options=RuntimeUtils.sortDialogOptions(options);
          int result=JOptionPane.showOptionDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != ArrayUtils.indexOf(options,runOption)) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  Config config=Config.getInstance();
  final String dataVersion=config.getVersion();
  final String programVersion=Config.getLatestVersion();
  if (Config.compareProgramVersions(dataVersion,programVersion) > 0) {
    logger.warning(""String_Node_Str"" + dataVersion + ""String_Node_Str""+ programVersion+ ""String_Node_Str""+ ""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          options=RuntimeUtils.sortDialogOptions(options);
          int result=JOptionPane.showOptionDialog(null,new JLabel(MessageFormat.format(l10n.getString(""String_Node_Str""),dataVersion,programVersion)),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != ArrayUtils.indexOf(options,runOption)) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (config.isFirstRun()) {
    logger.fine(""String_Node_Str"");
    config.setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    config.setLookAndFeel(ThemeManager.suggestBestLAF());
    if (Config.isRunAsWebStart()) {
      config.setCheckUpdatePolicy(Config.CheckUpdatePolicy.CHECK_NONE);
    }
    InitWizardDialog dialog=new InitWizardDialog(null,true);
    dialog.setVisible(true);
  }
  if (!config.isFirstRun()) {
    LegacyUpdater.update();
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          ThemeManager.setLaF();
        }
 catch (        Throwable ex) {
          logger.log(Level.WARNING,""String_Node_Str"",ex);
        }
      }
    }
);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  if (config.isUseProxy()) {
    ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
  }
  if (!Config.isStableVersion()) {
    config.setCheckForUnstableUpdates(true);
  }
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      MainFrame.instantiate();
      Context.mainFrame.startAndShow();
    }
  }
);
}",0.9938432070050622
152122,"/** 
 * Go through all downloaded update information and only leave those operators which are new or updated compared to current ones. This can be used to reload update info after partial update. Also removes operators requiring more recent program version than available online (stable/unstable depending on config settings).
 */
public void refreshUpdatedOperators(){
  for (Iterator<OperatorUpdateInfo> it=operatorUpdates.iterator(); it.hasNext(); ) {
    OperatorUpdateInfo info=it.next();
    Operator op=Operators.getOperator(info.getName());
    if (op != null && info.getVersion().compareTo(op.getVersion()) <= 0) {
      it.remove();
      continue;
    }
    if (Config.compareProgramVersions(info.getMinProgramVersion(),getLatestProgramVersion()) > 0) {
      it.remove();
      continue;
    }
  }
}","/** 
 * Go through all downloaded update information and only leave those operators which are new or updated compared to current ones. This can be used to reload update info after partial update. Also removes operators requiring more recent program version than available online (stable/unstable depending on config settings) and operators hidden by the user (operator filter).
 */
public void refreshUpdatedOperators(){
  String[] patterns=config.getOperatorFilter().split(""String_Node_Str"");
  for (Iterator<OperatorUpdateInfo> it=operatorUpdates.iterator(); it.hasNext(); ) {
    OperatorUpdateInfo info=it.next();
    Operator op=Operators.getOperator(info.getName());
    if (op != null && info.getVersion().compareTo(op.getVersion()) <= 0) {
      it.remove();
      continue;
    }
    if (Config.compareProgramVersions(info.getMinProgramVersion(),getLatestProgramVersion()) > 0) {
      it.remove();
      continue;
    }
    boolean filtered=true;
    for (    String pattern : patterns) {
      if (info.getName().contains(pattern)) {
        filtered=false;
        continue;
      }
    }
    if (filtered) {
      it.remove();
      continue;
    }
  }
}",0.8200202224469161
152123,"/** 
 * Combine an old URL and a redirect to a new URL.
 * @param redirectURL new URL. May be absolute or relative. It if starts withslash (/) it is applied to domain root.
 * @param currentURI current URI. Absolute or relative.
 * @return new URL to get
 * @throws java.io.IOException Problem when computing redirect
 */
private String computeRedirect(String redirectURL,URI currentURI) throws IOException {
  if (redirectURL == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (currentURI == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (redirectURL.startsWith(""String_Node_Str"") || redirectURL.startsWith(""String_Node_Str"")) {
    try {
      redirectURL=convertRelativeRedirectToAbsolute(currentURI.toString(),redirectURL);
    }
 catch (    IOException ex) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + redirectURL + ""String_Node_Str"",ex);
    }
  }
  if (redirectURL.startsWith(""String_Node_Str"")) {
    if (!isAbsoluteURL(currentURI.getEscapedURI())) {
    }
 else {
      String uri=currentURI.getEscapedURI();
      int slash=uri.indexOf('/',""String_Node_Str"".length());
      if (slash > 0) {
        uri=uri.substring(0,slash);
      }
      redirectURL=uri + redirectURL;
    }
  }
 else   if (!isAbsoluteURL(redirectURL)) {
    if (!isAbsoluteURL(currentURI.getEscapedURI())) {
      String uri=currentURI.getEscapedURI();
      int slash=uri.lastIndexOf('/');
      if (slash > 0) {
        uri=uri.substring(0,slash + 1);
      }
 else {
        uri=""String_Node_Str"";
      }
      redirectURL=uri + redirectURL;
    }
 else {
      String uri=currentURI.getEscapedURI();
      int slash=uri.lastIndexOf('/');
      if (slash > ""String_Node_Str"".length()) {
        uri=uri.substring(0,slash);
      }
      redirectURL=uri + ""String_Node_Str"" + redirectURL;
    }
  }
 else {
  }
  if (url.equalsIgnoreCase(redirectURL)) {
    throw new IOException(""String_Node_Str"");
  }
  logger.fine(""String_Node_Str"" + redirectURL);
  return redirectURL;
}","/** 
 * Combine an old URL and a redirect to a new URL.
 * @param redirectURL new URL. May be absolute or relative. It if starts withslash (/) it is applied to domain root.
 * @param currentURI current URI. Absolute or relative.
 * @return new URL to get
 * @throws java.io.IOException Problem when computing redirect
 */
private String computeRedirect(String redirectURL,URI currentURI) throws IOException {
  if (redirectURL == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (currentURI == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (redirectURL.startsWith(""String_Node_Str"") || redirectURL.startsWith(""String_Node_Str"")) {
    try {
      redirectURL=convertRelativeRedirectToAbsolute(currentURI.toString(),redirectURL);
    }
 catch (    IOException ex) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + redirectURL + ""String_Node_Str"",ex);
    }
  }
  if (redirectURL.startsWith(""String_Node_Str"")) {
    if (!isAbsoluteURL(currentURI.getEscapedURI())) {
    }
 else {
      String uri=currentURI.getEscapedURI();
      int slash=uri.indexOf('/',""String_Node_Str"".length());
      if (slash > 0) {
        uri=uri.substring(0,slash);
      }
      redirectURL=uri + redirectURL;
    }
  }
 else   if (!isAbsoluteURL(redirectURL)) {
    if (!isAbsoluteURL(currentURI.getEscapedURI())) {
      String uri=currentURI.getEscapedURI();
      int slash=uri.lastIndexOf('/');
      if (slash > 0) {
        uri=uri.substring(0,slash + 1);
      }
 else {
        uri=""String_Node_Str"";
      }
      redirectURL=uri + redirectURL;
    }
 else {
      String uri=currentURI.getEscapedURI();
      int slash=uri.lastIndexOf('/');
      if (slash > ""String_Node_Str"".length()) {
        uri=uri.substring(0,slash);
      }
      redirectURL=uri + ""String_Node_Str"" + redirectURL;
    }
  }
 else {
  }
  if (ObjectUtils.equals(lastRedirect.get1(),redirectURL)) {
    lastRedirect.set2(lastRedirect.get2() + 1);
  }
 else {
    lastRedirect.set1(redirectURL);
    lastRedirect.set2(0);
  }
  if (lastRedirect.get2() > 5) {
    throw new IOException(""String_Node_Str"");
  }
  logger.fine(""String_Node_Str"" + redirectURL);
  return redirectURL;
}",0.9462819610602862
152124,"/** 
 * Perform POST request.
 * @param url URL where to connect
 * @param postData data which to send. In the form [key1, value1, key2, value2, ...].
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doPost(String url,String[] postData) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  PostMethod method=new PostMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  method.setRequestEntity(new StringRequestEntity(convertParamsToString(postData),""String_Node_Str"",""String_Node_Str""));
  int statuscode=client.executeMethod(method);
  if (statuscode >= 400) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    String charset=findContentCharset(response);
    setTextContent(new String(response,StringUtils.defaultIfEmpty(charset,method.getResponseCharSet())));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (statuscode >= 300 && statuscode < 400) {
    Header header=method.getResponseHeader(""String_Node_Str"");
    if (header == null) {
      throw new IOException(""String_Node_Str"");
    }
    String newURL=header.getValue();
    if (StringUtils.isEmpty(newURL)) {
      throw new IOException(""String_Node_Str"");
    }
    if (newURL.startsWith(""String_Node_Str"") || newURL.startsWith(""String_Node_Str"")) {
      try {
        newURL=convertRelativeRedirectToAbsolute(url,newURL);
      }
 catch (      IOException ex) {
        throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + newURL + ""String_Node_Str"",ex);
      }
    }
    if (!isAbsoluteURL(newURL) && !newURL.startsWith(""String_Node_Str"")) {
      newURL=""String_Node_Str"" + newURL;
    }
    logger.fine(""String_Node_Str"" + newURL);
    return doGet(newURL);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      return followMetaRedirect(redirect,method.getURI());
    }
  }
  return true;
}","/** 
 * Perform POST request.
 * @param url URL where to connect
 * @param postData data which to send. In the form [key1, value1, key2, value2, ...].
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doPost(String url,String[] postData) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  PostMethod method=new PostMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  method.setRequestEntity(new StringRequestEntity(convertParamsToString(postData),""String_Node_Str"",""String_Node_Str""));
  int statuscode=client.executeMethod(method);
  if (statuscode >= 400) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    String charset=findContentCharset(response);
    setTextContent(new String(response,StringUtils.defaultIfEmpty(charset,method.getResponseCharSet())));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (statuscode >= 300 && statuscode < 400) {
    Header header=method.getResponseHeader(""String_Node_Str"");
    if (header == null) {
      throw new IOException(""String_Node_Str"");
    }
    String newURL=header.getValue();
    if (StringUtils.isEmpty(newURL)) {
      throw new IOException(""String_Node_Str"");
    }
    if (!isAbsoluteURL(newURL) && !newURL.startsWith(""String_Node_Str"")) {
      newURL=computeRedirect(newURL,method.getURI());
    }
    logger.fine(""String_Node_Str"" + newURL);
    return doGet(newURL);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      String redir=computeRedirect(redirect,method.getURI());
      return doGet(redir);
    }
  }
  return true;
}",0.8940254652301665
152125,"/** 
 * Perform GET request.
 * @param url URL where to connect
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doGet(String url) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  GetMethod method=new GetMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  int statusCode=client.executeMethod(method);
  if (statusCode != HttpStatus.SC_OK) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    String charset=findContentCharset(response);
    setTextContent(new String(response,StringUtils.defaultIfEmpty(charset,method.getResponseCharSet())));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      return followMetaRedirect(redirect,method.getURI());
    }
  }
  return true;
}","/** 
 * Perform GET request.
 * @param url URL where to connect
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doGet(String url) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  GetMethod method=new GetMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  int statusCode=client.executeMethod(method);
  if (statusCode != HttpStatus.SC_OK) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    String charset=findContentCharset(response);
    setTextContent(new String(response,StringUtils.defaultIfEmpty(charset,method.getResponseCharSet())));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      String redir=computeRedirect(redirect,method.getURI());
      return doGet(redir);
    }
  }
  return true;
}",0.9806529625151148
152126,"public int compare(Object o1,Object o2){
  if (!(o1 instanceof String) || !(o2 instanceof String)) {
    return 0;
  }
  String s1=(String)o1;
  String s2=(String)o2;
  int thisMarker=0;
  int thisNumericChunk=0;
  int thatMarker=0;
  int thatNumericChunk=0;
  while ((thisMarker < s1.length()) && (thatMarker < s2.length())) {
    char thisCh=s1.charAt(thisMarker);
    char thatCh=s2.charAt(thatMarker);
    StringBuilder thisChunk=new StringBuilder();
    StringBuilder thatChunk=new StringBuilder();
    while ((thisMarker < s1.length()) && inChunk(thisCh,thisChunk.toString())) {
      thisChunk.append(thisCh);
      thisMarker++;
      if (thisMarker < s1.length())       thisCh=s1.charAt(thisMarker);
    }
    while ((thatMarker < s2.length()) && inChunk(thatCh,thatChunk.toString())) {
      thatChunk.append(thatCh);
      thatMarker++;
      if (thatMarker < s2.length())       thatCh=s2.charAt(thatMarker);
    }
    int thisChunkType=isIn(thisChunk.charAt(0),numbers) ? 1 : 0;
    int thatChunkType=isIn(thatChunk.charAt(0),numbers) ? 1 : 0;
    int result=0;
    if ((thisChunkType == 1) && (thatChunkType == 1)) {
      thisNumericChunk=Integer.parseInt(thisChunk.toString());
      thatNumericChunk=Integer.parseInt(thatChunk.toString());
      if (thisNumericChunk < thatNumericChunk)       result=-1;
      if (thisNumericChunk > thatNumericChunk)       result=1;
    }
 else {
      result=thisChunk.toString().compareTo(thatChunk.toString());
    }
    if (result != 0)     return result;
  }
  return 0;
}","public int compare(Object o1,Object o2){
  if (!(o1 instanceof String) || !(o2 instanceof String)) {
    return 0;
  }
  String s1=(String)o1;
  String s2=(String)o2;
  int thisMarker=0;
  int thisNumericChunk=0;
  int thatMarker=0;
  int thatNumericChunk=0;
  while ((thisMarker < s1.length()) && (thatMarker < s2.length())) {
    char thisCh=s1.charAt(thisMarker);
    char thatCh=s2.charAt(thatMarker);
    StringBuilder thisChunk=new StringBuilder();
    StringBuilder thatChunk=new StringBuilder();
    while ((thisMarker < s1.length()) && inChunk(thisCh,thisChunk.toString())) {
      thisChunk.append(thisCh);
      thisMarker++;
      if (thisMarker < s1.length())       thisCh=s1.charAt(thisMarker);
    }
    while ((thatMarker < s2.length()) && inChunk(thatCh,thatChunk.toString())) {
      thatChunk.append(thatCh);
      thatMarker++;
      if (thatMarker < s2.length())       thatCh=s2.charAt(thatMarker);
    }
    int thisChunkType=isIn(thisChunk.charAt(0),numbers) ? 1 : 0;
    int thatChunkType=isIn(thatChunk.charAt(0),numbers) ? 1 : 0;
    int result=0;
    if ((thisChunkType == 1) && (thatChunkType == 1)) {
      thisNumericChunk=Integer.parseInt(thisChunk.toString());
      thatNumericChunk=Integer.parseInt(thatChunk.toString());
      if (thisNumericChunk < thatNumericChunk)       result=-1;
      if (thisNumericChunk > thatNumericChunk)       result=1;
    }
 else {
      result=thisChunk.toString().compareTo(thatChunk.toString());
    }
    if (result != 0)     return result;
  }
  return new Integer(s1.length()).compareTo(s2.length());
}",0.984516129032258
152127,"/** 
 * Creates new instance and install support.
 * @param frame main frame
 */
public UnifiedToolbarSupport(){
  this.frame=MainFrame.getInstance();
  final JToolBar toolbar=frame.getToolbar();
  toolbar.addMouseListener(this);
  toolbar.addMouseMotionListener(this);
  for (  Component c : toolbar.getComponents()) {
    if (c instanceof JButton) {
      JButton button=(JButton)c;
      button.setBorderPainted(false);
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      toolbar.setUI(new UnifiedToolbarUI());
      toolbar.invalidate();
    }
  }
);
}","/** 
 * Creates new instance and install support.
 * @param frame main frame
 */
public UnifiedToolbarSupport(){
  this.frame=MainFrame.getInstance();
  frame.addWindowFocusListener(new WindowAdapter(){
    @Override public void windowGainedFocus(    WindowEvent e){
      frame.getToolbar().repaint();
    }
    @Override public void windowLostFocus(    WindowEvent e){
      frame.getToolbar().repaint();
    }
  }
);
  final JToolBar toolbar=frame.getToolbar();
  toolbar.setDoubleBuffered(true);
  toolbar.addMouseListener(this);
  toolbar.addMouseMotionListener(this);
  for (  Component c : toolbar.getComponents()) {
    if (c instanceof JButton) {
      JButton button=(JButton)c;
      button.setBorderPainted(false);
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      toolbar.setUI(new UnifiedToolbarUI());
      toolbar.invalidate();
    }
  }
);
}",0.3826666666666666
152128,"@Override public void activateGUI(){
  app.setEnabledAboutMenu(true);
  app.setEnabledPreferencesMenu(true);
  app.addApplicationListener(this);
  if (ThemeManager.isAquaCurrentLaF()) {
    MainFrame frame=MainFrame.getInstance();
    JMenuBar bar=frame.getJMenuBar();
    for (    Component menu : bar.getComponents()) {
      JMenu m=(JMenu)menu;
      m.setMnemonic(-1);
      m.setToolTipText(null);
      for (      Component c : m.getPopupMenu().getComponents()) {
        if (c instanceof JMenuItem) {
          JMenuItem i=(JMenuItem)c;
          i.setIcon(null);
          i.setMnemonic(-1);
          i.setToolTipText(null);
        }
 else         if (c instanceof JMenu) {
          JMenu jm=(JMenu)c;
          jm.setIcon(null);
          jm.setMnemonic(-1);
          jm.setToolTipText(null);
        }
      }
    }
    new UnifiedToolbarSupport();
    frame.getSMSPanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getContactPanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getQueuePanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getHorizontalSplitPane().setBackground(LEOPARD_PANEL_COLOR);
    frame.getVerticalSplitPane().setBackground(LEOPARD_PANEL_COLOR);
    frame.getStatusPanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getContentPane().setBackground(LEOPARD_PANEL_COLOR);
  }
}","@Override public void activateGUI(){
  app.setEnabledAboutMenu(true);
  app.setEnabledPreferencesMenu(true);
  app.addApplicationListener(this);
  if (ThemeManager.isAquaCurrentLaF()) {
    MainFrame frame=MainFrame.getInstance();
    JMenuBar bar=frame.getJMenuBar();
    for (    Component menu : bar.getComponents()) {
      JMenu m=(JMenu)menu;
      m.setMnemonic(-1);
      m.setToolTipText(null);
      for (      Component c : m.getPopupMenu().getComponents()) {
        if (c instanceof JMenuItem) {
          JMenuItem i=(JMenuItem)c;
          i.setIcon(null);
          i.setMnemonic(-1);
          i.setToolTipText(null);
        }
 else         if (c instanceof JMenu) {
          JMenu jm=(JMenu)c;
          jm.setIcon(null);
          jm.setMnemonic(-1);
          jm.setToolTipText(null);
        }
      }
    }
    new UnifiedToolbarSupport();
    frame.getSMSPanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getContactPanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getQueuePanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getHorizontalSplitPane().setBackground(LEOPARD_PANEL_COLOR);
    frame.getVerticalSplitPane().setBackground(LEOPARD_PANEL_COLOR);
    frame.getStatusPanel().setBackground(LEOPARD_PANEL_COLOR);
    frame.getContentPane().setBackground(LEOPARD_PANEL_COLOR);
    frame.getStatusPanel().setBorder(BorderFactory.createEmptyBorder(0,2,4,2));
  }
}",0.97060984570169
152129,"@Override public void windowLostFocus(WindowEvent e){
  frame.getToolbar().repaint();
}","@Override public void windowLostFocus(WindowEvent e){
  frame.getToolbar().setBorder(inactiveBorder);
}",0.8842105263157894
152130,"public void paint(Graphics2D graphics2D,Component component,int width,int height){
  boolean focused=MainFrame.getInstance().isFocused();
  Color topColor=focused ? ACTIVE_TOP_GRADIENT_COLOR : INACTIVE_TOP_GRADIENT_COLOR;
  Color bottomColor=focused ? ACTIVE_BOTTOM_GRADIENT_COLOR : INACTIVE_BOTTOM_GRADIENT_COLOR;
  GradientPaint paint=new GradientPaint(0,1,topColor,0,height,bottomColor);
  graphics2D.setPaint(paint);
  graphics2D.fillRect(0,0,width,height);
}","public void paint(Graphics2D graphics2D,int width,int height){
  boolean focused=MainFrame.getInstance().isFocused();
  Color topColor=focused ? ACTIVE_TOP_GRADIENT_COLOR : INACTIVE_TOP_GRADIENT_COLOR;
  Color bottomColor=focused ? ACTIVE_BOTTOM_GRADIENT_COLOR : INACTIVE_BOTTOM_GRADIENT_COLOR;
  GradientPaint paint=new GradientPaint(0,1,topColor,0,height,bottomColor);
  graphics2D.setPaint(paint);
  graphics2D.fillRect(0,0,width,height);
}",0.977924944812362
152131,"/** 
 * Creates new instance and install support.
 * @param frame main frame
 */
public UnifiedToolbarSupport(){
  this.frame=MainFrame.getInstance();
  frame.addWindowFocusListener(new WindowAdapter(){
    @Override public void windowGainedFocus(    WindowEvent e){
      frame.getToolbar().repaint();
    }
    @Override public void windowLostFocus(    WindowEvent e){
      frame.getToolbar().repaint();
    }
  }
);
  final JToolBar toolbar=frame.getToolbar();
  toolbar.setDoubleBuffered(true);
  toolbar.addMouseListener(this);
  toolbar.addMouseMotionListener(this);
  for (  Component c : toolbar.getComponents()) {
    if (c instanceof JButton) {
      JButton button=(JButton)c;
      button.setBorderPainted(false);
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      toolbar.setUI(new UnifiedToolbarUI());
      toolbar.invalidate();
    }
  }
);
}","/** 
 * Creates new instance and install support.
 * @param frame main frame
 */
public UnifiedToolbarSupport(){
  this.frame=MainFrame.getInstance();
  frame.addWindowFocusListener(new UnifiedToolbarWindowAdapter());
  final JToolBar toolbar=frame.getToolbar();
  toolbar.setDoubleBuffered(true);
  toolbar.addMouseListener(this);
  toolbar.addMouseMotionListener(this);
  for (  Component c : toolbar.getComponents()) {
    if (c instanceof JButton) {
      JButton button=(JButton)c;
      button.setBorderPainted(false);
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      toolbar.setUI(new UnifiedToolbarUI());
      toolbar.invalidate();
    }
  }
);
}",0.4032459425717852
152132,"@Override public void windowGainedFocus(WindowEvent e){
  frame.getToolbar().repaint();
}","@Override public void windowGainedFocus(WindowEvent e){
  frame.getToolbar().setBorder(activeBorder);
}",0.8854166666666666
152133,"/** 
 * Perform POST request.
 * @param url URL where to connect
 * @param postData data which to send. In the form [key1, value1, key2, value2, ...].
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doPost(String url,String[] postData) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  PostMethod method=new PostMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  method.setRequestEntity(new StringRequestEntity(convertParamsToString(postData),""String_Node_Str"",""String_Node_Str""));
  int statuscode=client.executeMethod(method);
  if (statuscode >= 400) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    setTextContent(new String(response,method.getResponseCharSet()));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (statuscode >= 300 && statuscode < 400) {
    Header header=method.getResponseHeader(""String_Node_Str"");
    if (header == null) {
      throw new IOException(""String_Node_Str"");
    }
    String newURL=header.getValue();
    if (StringUtils.isEmpty(newURL)) {
      throw new IOException(""String_Node_Str"");
    }
    if (newURL.startsWith(""String_Node_Str"") || newURL.startsWith(""String_Node_Str"")) {
      try {
        newURL=convertRelativeRedirectToAbsolute(url,newURL);
      }
 catch (      IOException ex) {
        throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + newURL + ""String_Node_Str"",ex);
      }
    }
    if (!isAbsoluteURL(newURL) && !newURL.startsWith(""String_Node_Str"")) {
      newURL=""String_Node_Str"" + newURL;
    }
    logger.fine(""String_Node_Str"" + newURL);
    return doGet(newURL);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      return followMetaRedirect(redirect,method.getURI());
    }
  }
  return true;
}","/** 
 * Perform POST request.
 * @param url URL where to connect
 * @param postData data which to send. In the form [key1, value1, key2, value2, ...].
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doPost(String url,String[] postData) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  PostMethod method=new PostMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  method.setRequestEntity(new StringRequestEntity(convertParamsToString(postData),""String_Node_Str"",""String_Node_Str""));
  int statuscode=client.executeMethod(method);
  if (statuscode >= 400) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    String charset=findContentCharset(response);
    setTextContent(new String(response,StringUtils.defaultIfEmpty(charset,method.getResponseCharSet())));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (statuscode >= 300 && statuscode < 400) {
    Header header=method.getResponseHeader(""String_Node_Str"");
    if (header == null) {
      throw new IOException(""String_Node_Str"");
    }
    String newURL=header.getValue();
    if (StringUtils.isEmpty(newURL)) {
      throw new IOException(""String_Node_Str"");
    }
    if (newURL.startsWith(""String_Node_Str"") || newURL.startsWith(""String_Node_Str"")) {
      try {
        newURL=convertRelativeRedirectToAbsolute(url,newURL);
      }
 catch (      IOException ex) {
        throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + newURL + ""String_Node_Str"",ex);
      }
    }
    if (!isAbsoluteURL(newURL) && !newURL.startsWith(""String_Node_Str"")) {
      newURL=""String_Node_Str"" + newURL;
    }
    logger.fine(""String_Node_Str"" + newURL);
    return doGet(newURL);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      return followMetaRedirect(redirect,method.getURI());
    }
  }
  return true;
}",0.983947119924457
152134,"/** 
 * Constructor for OperatorConnector. 
 */
public OperatorConnector(){
  client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  client.getParams().setParameter(HttpMethodParams.SINGLE_COOKIE_HEADER,true);
  client.getParams().setParameter(HttpMethodParams.USER_AGENT,USER_AGENT);
  client.getParams().setParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS,true);
  client.getParams().setParameter(HttpClientParams.REJECT_RELATIVE_REDIRECT,false);
  client.getParams().setParameter(HttpClientParams.MAX_REDIRECTS,50);
}","/** 
 * Constructor for OperatorConnector. 
 */
public OperatorConnector(){
  client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  client.getParams().setParameter(HttpMethodParams.SINGLE_COOKIE_HEADER,true);
  client.getParams().setParameter(HttpMethodParams.USER_AGENT,USER_AGENT);
  client.getParams().setParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS,true);
  client.getParams().setParameter(HttpClientParams.REJECT_RELATIVE_REDIRECT,false);
  client.getParams().setParameter(HttpClientParams.MAX_REDIRECTS,50);
  client.getParams().setParameter(HttpClientParams.HTTP_CONTENT_CHARSET,""String_Node_Str"");
}",0.9217687074829932
152135,"/** 
 * Perform GET request.
 * @param url URL where to connect
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doGet(String url) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  GetMethod method=new GetMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  int statusCode=client.executeMethod(method);
  if (statusCode != HttpStatus.SC_OK) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    setTextContent(new String(response,method.getResponseCharSet()));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      return followMetaRedirect(redirect,method.getURI());
    }
  }
  return true;
}","/** 
 * Perform GET request.
 * @param url URL where to connect
 * @return true if connection succeeded; false otherwise
 * @throws java.io.IOException When there is some problem with connection
 */
private boolean doGet(String url) throws IOException {
  logger.fine(""String_Node_Str"" + url);
  GetMethod method=new GetMethod(url);
  if (referer != null) {
    method.setRequestHeader(""String_Node_Str"",referer);
  }
  int statusCode=client.executeMethod(method);
  if (statusCode != HttpStatus.SC_OK) {
    logger.warning(""String_Node_Str"" + url + ""String_Node_Str""+ method.getStatusLine());
    return false;
  }
  Header contentType=method.getResponseHeader(""String_Node_Str"");
  boolean text=(contentType != null && contentType.getValue().startsWith(""String_Node_Str""));
  byte[] response=new byte[0];
  InputStream responseStream=method.getResponseBodyAsStream();
  if (responseStream != null) {
    response=IOUtils.toByteArray(responseStream);
    responseStream.close();
  }
  method.releaseConnection();
  if (text) {
    String charset=findContentCharset(response);
    setTextContent(new String(response,StringUtils.defaultIfEmpty(charset,method.getResponseCharSet())));
    logger.finest(""String_Node_Str"" + contentType + ""String_Node_Str""+ ""String_Node_Str""+ getTextContent()+ ""String_Node_Str"");
  }
 else {
    setBinaryContent(response);
    logger.finest(""String_Node_Str"" + contentType);
  }
  if (text) {
    String redirect=checkMetaRedirect(textContent);
    if (redirect != null) {
      logger.fine(""String_Node_Str"" + redirect);
      return followMetaRedirect(redirect,method.getURI());
    }
  }
  return true;
}",0.9733792671468838
152136,"/** 
 * create DOM of version file 
 */
private static Document createDocument() throws Exception {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.newDocument();
  Node root=doc.createElement(TAG_ROOT);
  doc.appendChild(root);
  Node lastVersion=doc.createElement(TAG_LAST_VERSION);
  lastVersion.setTextContent(stableProgramVersion);
  root.appendChild(lastVersion);
  Node lastUnstableVersion=doc.createElement(TAG_LAST_UNSTABLE_VERSION);
  lastUnstableVersion.setTextContent(unstableProgramVersion);
  root.appendChild(lastUnstableVersion);
  for (  Operator op : Operators.getInstance().getAll()) {
    Node operator=doc.createElement(TAG_OPERATOR);
    Node name=doc.createElement(TAG_NAME);
    name.setTextContent(op.getName());
    Node version=doc.createElement(TAG_VERSION);
    version.setTextContent(op.getVersion());
    Node download=doc.createElement(TAG_DOWNLOAD);
    URI dlUri=new URI(downloadProtocol,downloadHost,downloadPath + op.getName() + ""String_Node_Str"",null);
    download.setTextContent(dlUri.toURL().toString());
    Node minVersion=doc.createElement(TAG_MIN_VERSION);
    minVersion.setTextContent(op.getMinProgramVersion());
    Node icon=doc.createElement(TAG_ICON);
    if (op.getIcon() != Icons.OPERATOR_DEFAULT) {
      URI iconUri=new URI(downloadProtocol,downloadHost,downloadPath + op.getName() + ""String_Node_Str"",null);
      icon.setTextContent(iconUri.toURL().toString());
    }
    operator.appendChild(name);
    operator.appendChild(version);
    operator.appendChild(download);
    operator.appendChild(minVersion);
    operator.appendChild(icon);
    root.appendChild(operator);
  }
  return doc;
}","/** 
 * create DOM of version file 
 */
private static Document createDocument() throws Exception {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.newDocument();
  Node root=doc.createElement(TAG_ROOT);
  doc.appendChild(root);
  Node lastVersion=doc.createElement(TAG_LAST_VERSION);
  lastVersion.setTextContent(stableProgramVersion);
  root.appendChild(lastVersion);
  Node lastUnstableVersion=doc.createElement(TAG_LAST_UNSTABLE_VERSION);
  lastUnstableVersion.setTextContent(unstableProgramVersion);
  root.appendChild(lastUnstableVersion);
  for (  Operator op : Operators.getInstance().getAll()) {
    Node operator=doc.createElement(TAG_OPERATOR);
    Node name=doc.createElement(TAG_NAME);
    name.setTextContent(op.getName());
    Node version=doc.createElement(TAG_VERSION);
    version.setTextContent(op.getVersion());
    Node download=doc.createElement(TAG_DOWNLOAD);
    URI dlUri=new URI(downloadProtocol,downloadHost,downloadPath + op.getName() + ""String_Node_Str"",null);
    download.setTextContent(dlUri.toASCIIString());
    Node minVersion=doc.createElement(TAG_MIN_VERSION);
    minVersion.setTextContent(op.getMinProgramVersion());
    Node icon=doc.createElement(TAG_ICON);
    if (op.getIcon() != Icons.OPERATOR_DEFAULT) {
      URI iconUri=new URI(downloadProtocol,downloadHost,downloadPath + op.getName() + ""String_Node_Str"",null);
      icon.setTextContent(iconUri.toASCIIString());
    }
    operator.appendChild(name);
    operator.appendChild(version);
    operator.appendChild(download);
    operator.appendChild(minVersion);
    operator.appendChild(icon);
    root.appendChild(operator);
  }
  return doc;
}",0.9924812030075189
152137,"/** 
 * set sms to display and edit 
 */
public void setSMS(final SMS sms){
  recipientField.setNumber(sms.getNumber());
  smsTextPane.setText(sms.getText());
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      operatorComboBox.setSelectedOperator(sms.getOperator());
      smsTextPane.requestFocusInWindow();
    }
  }
);
}","/** 
 * set sms to display and edit 
 */
public void setSMS(final SMS sms){
  recipientField.setNumber(sms.getNumber());
  smsTextPane.setText(sms.getText());
  smsTextUndoManager.discardAllEdits();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      operatorComboBox.setSelectedOperator(sms.getOperator());
      smsTextPane.requestFocusInWindow();
    }
  }
);
}",0.946808510638298
152138,"/** 
 * Escape text using html entities. Fixes bug in OpenJDK where scaron entity is not replaced by 'š'.
 * @see ​StringEscapeUtils#escapeHtml(String)
 */
public static String escapeHtml(String input){
  if (input == null) {
    return input;
  }
  String output=StringEscapeUtils.escapeHtml(input);
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return output;
}","/** 
 * Escape text using html entities. Fixes bug in OpenJDK where scaron entity is not replaced by 'š'.
 * @see ​StringEscapeUtils#escapeHtml(String)
 */
public static String escapeHtml(String input){
  if (input == null) {
    return input;
  }
  String output=StringEscapeUtils.escapeHtml(input);
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  output=output.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return output;
}",0.9055036344755972
152139,"/** 
 * Constructor for OperatorConnector. 
 */
public OperatorConnector(){
  client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  client.getParams().setParameter(HttpMethodParams.SINGLE_COOKIE_HEADER,true);
  client.getParams().setParameter(HttpMethodParams.USER_AGENT,USER_AGENT);
}","/** 
 * Constructor for OperatorConnector. 
 */
public OperatorConnector(){
  client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  client.getParams().setParameter(HttpMethodParams.SINGLE_COOKIE_HEADER,true);
  client.getParams().setParameter(HttpMethodParams.USER_AGENT,USER_AGENT);
  client.getParams().setParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS,true);
  client.getParams().setParameter(HttpClientParams.REJECT_RELATIVE_REDIRECT,false);
  client.getParams().setParameter(HttpClientParams.MAX_REDIRECTS,100);
}",0.7193396226415094
152140,"/** 
 * save sms history
 * @return true if saved ok; false otherwise
 */
private boolean saveHistory(){
  if (config.isReducedHistory()) {
    List<Record> records=history.getRecords();
    Calendar limitCal=Calendar.getInstance();
    limitCal.add(Calendar.DAY_OF_MONTH,-config.getReducedHistoryCount());
    Date limit=limitCal.getTime();
    logger.fine(""String_Node_Str"" + limit);
    ListIterator<Record> iter=records.listIterator();
    while (iter.hasNext()) {
      Record record=iter.next();
      if (record.getDate().before(limit)) {
        iter.remove();
      }
 else {
        break;
      }
    }
  }
  try {
    persistenceManager.saveHistory();
    return true;
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return false;
  }
}","/** 
 * save sms history
 * @return true if saved ok; false otherwise
 */
private boolean saveHistory(){
  if (config.isReducedHistory()) {
    Calendar limitCal=Calendar.getInstance();
    limitCal.add(Calendar.DAY_OF_MONTH,-config.getReducedHistoryCount());
    Date limit=limitCal.getTime();
    history.removeRecordsOlderThan(limit);
  }
  try {
    persistenceManager.saveHistory();
    return true;
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return false;
  }
}",0.7391975308641975
152141,"/** 
 * Get currently edited contact 
 */
public Contact getContact(){
  String name=nameTextField.getText();
  String number=numberTextField.getText();
  String operator=operatorComboBox.getSelectedOperatorName();
  if (StringUtils.isEmpty(name) || StringUtils.isEmpty(number) || StringUtils.isEmpty(operator)) {
    return null;
  }
 else {
    return new Contact(name,number,operator);
  }
}","/** 
 * Get currently edited contact 
 */
public Contact getContact(){
  String name=nameTextField.getText();
  String number=numberTextField.getText();
  String operator=operatorComboBox.getSelectedOperatorName();
  if (!multiMode && (StringUtils.isEmpty(name) || StringUtils.isEmpty(number) || StringUtils.isEmpty(operator))) {
    return null;
  }
 else {
    return new Contact(name,number,operator);
  }
}",0.9800995024875622
152142,"/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  reallyRunning=true;
  if (!JavaType.isSupported()) {
    logger.severe(l10n.getString(""String_Node_Str""));
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  logger.fine(""String_Node_Str"" + Config.getLatestVersion() + ""String_Node_Str"");
  String macBarUI=UIManager.getString(""String_Node_Str"");
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    logger.fine(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,""String_Node_Str"",ex);
          }
          JFileChooser chooser=new JFileChooser();
          chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          chooser.setApproveButtonText(l10n.getString(""String_Node_Str""));
          chooser.setDialogTitle(l10n.getString(""String_Node_Str""));
          chooser.setFileHidingEnabled(false);
          chooser.setMultiSelectionEnabled(false);
          int result=chooser.showOpenDialog(null);
          if (result == JFileChooser.APPROVE_OPTION) {
            configPath=chooser.getSelectedFile().getPath();
            logger.config(""String_Node_Str"" + configPath);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setUserDir(configPath);
    }
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          @Override public void run(){
            JOptionPane.showMessageDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.ERROR_MESSAGE);
          }
        }
);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,MessageFormat.format(l10n.getString(""String_Node_Str""),PersistenceManager.getUserDir().getAbsolutePath()),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          int result=JOptionPane.showOptionDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != 0) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (StringUtils.isEmpty(Config.getInstance().getVersion())) {
    logger.fine(""String_Node_Str"");
    Config.getInstance().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    Config.getInstance().setLookAndFeel(ThemeManager.suggestBestLAF());
  }
  LegacyUpdater.update();
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          ThemeManager.setLaF();
        }
 catch (        Throwable ex) {
          logger.log(Level.WARNING,""String_Node_Str"",ex);
        }
      }
    }
);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Config config=Config.getInstance();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  if (macBarUI != null && OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    UIManager.put(""String_Node_Str"",macBarUI);
  }
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      MainFrame.getInstance().startAndShow();
    }
  }
);
}","/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  if (!JavaType.isSupported()) {
    logger.severe(l10n.getString(""String_Node_Str""));
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  logger.fine(""String_Node_Str"" + Config.getLatestVersion() + ""String_Node_Str"");
  String macBarUI=UIManager.getString(""String_Node_Str"");
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    logger.fine(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,""String_Node_Str"",ex);
          }
          JFileChooser chooser=new JFileChooser();
          chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          chooser.setApproveButtonText(l10n.getString(""String_Node_Str""));
          chooser.setDialogTitle(l10n.getString(""String_Node_Str""));
          chooser.setFileHidingEnabled(false);
          chooser.setMultiSelectionEnabled(false);
          int result=chooser.showOpenDialog(null);
          if (result == JFileChooser.APPROVE_OPTION) {
            configPath=chooser.getSelectedFile().getPath();
            logger.config(""String_Node_Str"" + configPath);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setUserDir(configPath);
    }
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          @Override public void run(){
            JOptionPane.showMessageDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.ERROR_MESSAGE);
          }
        }
);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,MessageFormat.format(l10n.getString(""String_Node_Str""),PersistenceManager.getUserDir().getAbsolutePath()),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          int result=JOptionPane.showOptionDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != 0) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (StringUtils.isEmpty(Config.getInstance().getVersion())) {
    logger.fine(""String_Node_Str"");
    Config.getInstance().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    Config.getInstance().setLookAndFeel(ThemeManager.suggestBestLAF());
  }
  LegacyUpdater.update();
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          ThemeManager.setLaF();
        }
 catch (        Throwable ex) {
          logger.log(Level.WARNING,""String_Node_Str"",ex);
        }
      }
    }
);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Config config=Config.getInstance();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  if (macBarUI != null && OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    UIManager.put(""String_Node_Str"",macBarUI);
  }
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      MainFrame.getInstance().startAndShow();
    }
  }
);
}",0.997967104047311
152143,"/** 
 * Creates new form MainFrame
 */
public MainFrame(){
  instance=this;
  initComponents();
  ArrayList<Image> images=new ArrayList<Image>();
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  setIconImages(images);
  String command=""String_Node_Str"";
  getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_W,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()),command);
  getRootPane().getActionMap().put(command,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (NotificationIcon.isInstalled() || OSType.isMac()) {
        formWindowClosing(new WindowEvent(MainFrame.this,0));
      }
    }
  }
);
  if (OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    try {
      ActionBean bean=new ActionBean();
      bean.setQuitAction(Actions.getQuitAction());
      bean.setAboutAction(Actions.getAboutAction());
      bean.setConfigAction(Actions.getConfigAction());
      IntegrationAdapter.getInstance().setActionBean(bean);
      programMenu.setVisible(false);
      aboutMenuItem.setVisible(false);
      helpMenu.remove(helpSeparator);
    }
 catch (    Throwable ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",ex);
    }
  }
  ToolTipManager.sharedInstance().setInitialDelay(750);
  ToolTipManager.sharedInstance().setDismissDelay(60000);
  smsSender=new SMSSender();
  log.addRecord(new Log.Record(l10n.getString(""String_Node_Str"")));
  try {
    persistenceManager=PersistenceManager.getInstance();
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    log.addRecord(new Log.Record(l10n.getString(""String_Node_Str""),null,Icons.STATUS_ERROR));
  }
  loadConfig();
  if (queue.size() > 0) {
    queue.setPaused(true);
  }
  contactPanel.requestFocusInWindow();
  contactPanel.ensureContactSelected();
  queue.addValuedListener(new QueueListener());
  if (Operators.getInstance().size() <= 0 && Main.reallyRunning) {
    logger.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,new JLabel(l10n.getString(""String_Node_Str"")),null,JOptionPane.ERROR_MESSAGE);
  }
  Binding bind=Bindings.createAutoBinding(UpdateStrategy.READ,config,BeanProperty.create(""String_Node_Str""),toolBar,BeanProperty.create(""String_Node_Str""));
  bindGroup.addBinding(bind);
  bindGroup.bind();
  if (config.isCheckForUpdates()) {
    UpdateChecker updateChecker=new UpdateChecker();
    updateChecker.addActionListener(new UpdateListener());
    updateChecker.checkForUpdates();
  }
  if (Main.reallyRunning) {
    Runtime.getRuntime().addShutdownHook(shutdownThread);
  }
}","/** 
 * Creates new form MainFrame
 */
public MainFrame(){
  instance=this;
  initComponents();
  ArrayList<Image> images=new ArrayList<Image>();
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  setIconImages(images);
  String command=""String_Node_Str"";
  getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_W,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()),command);
  getRootPane().getActionMap().put(command,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (NotificationIcon.isInstalled() || OSType.isMac()) {
        formWindowClosing(new WindowEvent(MainFrame.this,0));
      }
    }
  }
);
  if (OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    try {
      ActionBean bean=new ActionBean();
      bean.setQuitAction(Actions.getQuitAction());
      bean.setAboutAction(Actions.getAboutAction());
      bean.setConfigAction(Actions.getConfigAction());
      IntegrationAdapter.getInstance().setActionBean(bean);
      programMenu.setVisible(false);
      aboutMenuItem.setVisible(false);
      helpMenu.remove(helpSeparator);
    }
 catch (    Throwable ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",ex);
    }
  }
  ToolTipManager.sharedInstance().setInitialDelay(750);
  ToolTipManager.sharedInstance().setDismissDelay(60000);
  smsSender=new SMSSender();
  log.addRecord(new Log.Record(l10n.getString(""String_Node_Str"")));
  try {
    persistenceManager=PersistenceManager.getInstance();
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    log.addRecord(new Log.Record(l10n.getString(""String_Node_Str""),null,Icons.STATUS_ERROR));
  }
  loadConfig();
  if (queue.size() > 0) {
    queue.setPaused(true);
  }
  contactPanel.requestFocusInWindow();
  contactPanel.ensureContactSelected();
  queue.addValuedListener(new QueueListener());
  if (Operators.getInstance().size() <= 0 && !Beans.isDesignTime()) {
    logger.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,new JLabel(l10n.getString(""String_Node_Str"")),null,JOptionPane.ERROR_MESSAGE);
  }
  Binding bind=Bindings.createAutoBinding(UpdateStrategy.READ,config,BeanProperty.create(""String_Node_Str""),toolBar,BeanProperty.create(""String_Node_Str""));
  bindGroup.addBinding(bind);
  bindGroup.bind();
  if (config.isCheckForUpdates()) {
    UpdateChecker updateChecker=new UpdateChecker();
    updateChecker.addActionListener(new UpdateListener());
    updateChecker.checkForUpdates();
  }
  if (!Beans.isDesignTime()) {
    Runtime.getRuntime().addShutdownHook(shutdownThread);
  }
}",0.986734693877551
152144,"/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  if (!JavaType.isSupported()) {
    logger.severe(l10n.getString(""String_Node_Str""));
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  logger.fine(""String_Node_Str"" + Config.getLatestVersion() + ""String_Node_Str"");
  String macBarUI=UIManager.getString(""String_Node_Str"");
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    logger.fine(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,""String_Node_Str"",ex);
          }
          JFileChooser chooser=new JFileChooser();
          chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          chooser.setApproveButtonText(l10n.getString(""String_Node_Str""));
          chooser.setDialogTitle(l10n.getString(""String_Node_Str""));
          chooser.setFileHidingEnabled(false);
          chooser.setMultiSelectionEnabled(false);
          int result=chooser.showOpenDialog(null);
          if (result == JFileChooser.APPROVE_OPTION) {
            configPath=chooser.getSelectedFile().getPath();
            logger.config(""String_Node_Str"" + configPath);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setUserDir(configPath);
    }
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          @Override public void run(){
            JOptionPane.showMessageDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.ERROR_MESSAGE);
          }
        }
);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,MessageFormat.format(l10n.getString(""String_Node_Str""),PersistenceManager.getUserDir().getAbsolutePath()),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          int result=JOptionPane.showOptionDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != 0) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (StringUtils.isEmpty(Config.getInstance().getVersion())) {
    logger.fine(""String_Node_Str"");
    Config.getInstance().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    Config.getInstance().setLookAndFeel(ThemeManager.suggestBestLAF());
  }
  LegacyUpdater.update();
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          ThemeManager.setLaF();
        }
 catch (        Throwable ex) {
          logger.log(Level.WARNING,""String_Node_Str"",ex);
        }
      }
    }
);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Config config=Config.getInstance();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  if (macBarUI != null && OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    UIManager.put(""String_Node_Str"",macBarUI);
  }
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      MainFrame.getInstance().startAndShow();
    }
  }
);
}","/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  reallyRunning=true;
  if (!JavaType.isSupported()) {
    logger.severe(l10n.getString(""String_Node_Str""));
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  logger.fine(""String_Node_Str"" + Config.getLatestVersion() + ""String_Node_Str"");
  String macBarUI=UIManager.getString(""String_Node_Str"");
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    logger.fine(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,""String_Node_Str"",ex);
          }
          JFileChooser chooser=new JFileChooser();
          chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          chooser.setApproveButtonText(l10n.getString(""String_Node_Str""));
          chooser.setDialogTitle(l10n.getString(""String_Node_Str""));
          chooser.setFileHidingEnabled(false);
          chooser.setMultiSelectionEnabled(false);
          int result=chooser.showOpenDialog(null);
          if (result == JFileChooser.APPROVE_OPTION) {
            configPath=chooser.getSelectedFile().getPath();
            logger.config(""String_Node_Str"" + configPath);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setUserDir(configPath);
    }
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          @Override public void run(){
            JOptionPane.showMessageDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.ERROR_MESSAGE);
          }
        }
);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          JOptionPane.showMessageDialog(null,MessageFormat.format(l10n.getString(""String_Node_Str""),PersistenceManager.getUserDir().getAbsolutePath()),null,JOptionPane.ERROR_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          String runOption=l10n.getString(""String_Node_Str"");
          String quitOption=l10n.getString(""String_Node_Str"");
          String[] options=new String[]{runOption,quitOption};
          int result=JOptionPane.showOptionDialog(null,l10n.getString(""String_Node_Str""),null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
          if (result != 0) {
            System.exit(0);
          }
        }
      }
);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  if (StringUtils.isEmpty(Config.getInstance().getVersion())) {
    logger.fine(""String_Node_Str"");
    Config.getInstance().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    Config.getInstance().setLookAndFeel(ThemeManager.suggestBestLAF());
  }
  LegacyUpdater.update();
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          ThemeManager.setLaF();
        }
 catch (        Throwable ex) {
          logger.log(Level.WARNING,""String_Node_Str"",ex);
        }
      }
    }
);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  Config config=Config.getInstance();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  if (macBarUI != null && OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    UIManager.put(""String_Node_Str"",macBarUI);
  }
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      MainFrame.getInstance().startAndShow();
    }
  }
);
}",0.997967104047311
152145,"/** 
 * Creates new form MainFrame
 */
public MainFrame(){
  instance=this;
  initComponents();
  ArrayList<Image> images=new ArrayList<Image>();
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  setIconImages(images);
  String command=""String_Node_Str"";
  getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_W,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()),command);
  getRootPane().getActionMap().put(command,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (NotificationIcon.isInstalled() || OSType.isMac()) {
        formWindowClosing(new WindowEvent(MainFrame.this,0));
      }
    }
  }
);
  if (OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    try {
      ActionBean bean=new ActionBean();
      bean.setQuitAction(Actions.getQuitAction());
      bean.setAboutAction(Actions.getAboutAction());
      bean.setConfigAction(Actions.getConfigAction());
      IntegrationAdapter.getInstance().setActionBean(bean);
      programMenu.setVisible(false);
      aboutMenuItem.setVisible(false);
      helpMenu.remove(helpSeparator);
    }
 catch (    Throwable ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",ex);
    }
  }
  ToolTipManager.sharedInstance().setInitialDelay(750);
  ToolTipManager.sharedInstance().setDismissDelay(60000);
  smsSender=new SMSSender();
  log.addRecord(new Log.Record(l10n.getString(""String_Node_Str"")));
  try {
    persistenceManager=PersistenceManager.getInstance();
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    log.addRecord(new Log.Record(l10n.getString(""String_Node_Str""),null,Icons.STATUS_ERROR));
  }
  loadConfig();
  if (queue.size() > 0) {
    queue.setPaused(true);
  }
  contactPanel.requestFocusInWindow();
  contactPanel.ensureContactSelected();
  queue.addValuedListener(new QueueListener());
  if (Operators.getInstance().size() <= 0) {
    logger.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,new JLabel(l10n.getString(""String_Node_Str"")),null,JOptionPane.ERROR_MESSAGE);
  }
  Binding bind=Bindings.createAutoBinding(UpdateStrategy.READ,config,BeanProperty.create(""String_Node_Str""),toolBar,BeanProperty.create(""String_Node_Str""));
  bindGroup.addBinding(bind);
  bindGroup.bind();
  if (config.isCheckForUpdates()) {
    UpdateChecker updateChecker=new UpdateChecker();
    updateChecker.addActionListener(new UpdateListener());
    updateChecker.checkForUpdates();
  }
  Runtime.getRuntime().addShutdownHook(shutdownThread);
}","/** 
 * Creates new form MainFrame
 */
public MainFrame(){
  instance=this;
  initComponents();
  ArrayList<Image> images=new ArrayList<Image>();
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  images.add(new ImageIcon(getClass().getResource(RES + ""String_Node_Str"")).getImage());
  setIconImages(images);
  String command=""String_Node_Str"";
  getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_W,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()),command);
  getRootPane().getActionMap().put(command,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (NotificationIcon.isInstalled() || OSType.isMac()) {
        formWindowClosing(new WindowEvent(MainFrame.this,0));
      }
    }
  }
);
  if (OSType.isMac()) {
    logger.fine(""String_Node_Str"");
    try {
      ActionBean bean=new ActionBean();
      bean.setQuitAction(Actions.getQuitAction());
      bean.setAboutAction(Actions.getAboutAction());
      bean.setConfigAction(Actions.getConfigAction());
      IntegrationAdapter.getInstance().setActionBean(bean);
      programMenu.setVisible(false);
      aboutMenuItem.setVisible(false);
      helpMenu.remove(helpSeparator);
    }
 catch (    Throwable ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",ex);
    }
  }
  ToolTipManager.sharedInstance().setInitialDelay(750);
  ToolTipManager.sharedInstance().setDismissDelay(60000);
  smsSender=new SMSSender();
  log.addRecord(new Log.Record(l10n.getString(""String_Node_Str"")));
  try {
    persistenceManager=PersistenceManager.getInstance();
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    log.addRecord(new Log.Record(l10n.getString(""String_Node_Str""),null,Icons.STATUS_ERROR));
  }
  loadConfig();
  if (queue.size() > 0) {
    queue.setPaused(true);
  }
  contactPanel.requestFocusInWindow();
  contactPanel.ensureContactSelected();
  queue.addValuedListener(new QueueListener());
  if (Operators.getInstance().size() <= 0 && Main.reallyRunning) {
    logger.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,new JLabel(l10n.getString(""String_Node_Str"")),null,JOptionPane.ERROR_MESSAGE);
  }
  Binding bind=Bindings.createAutoBinding(UpdateStrategy.READ,config,BeanProperty.create(""String_Node_Str""),toolBar,BeanProperty.create(""String_Node_Str""));
  bindGroup.addBinding(bind);
  bindGroup.bind();
  if (config.isCheckForUpdates()) {
    UpdateChecker updateChecker=new UpdateChecker();
    updateChecker.addActionListener(new UpdateListener());
    updateChecker.checkForUpdates();
  }
  if (Main.reallyRunning) {
    Runtime.getRuntime().addShutdownHook(shutdownThread);
  }
}",0.9903746992093504
152146,"private void licenseButtonActionPerformed(ActionEvent evt){
  try {
    logger.fine(""String_Node_Str"");
    String license=IOUtils.toString(getClass().getResourceAsStream(RES + ""String_Node_Str""),""String_Node_Str"");
    final String agpl=IOUtils.toString(getClass().getResourceAsStream(RES + ""String_Node_Str""),""String_Node_Str"");
    license=StringEscapeUtils.escapeHtml(license);
    license=license.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final JTextPane tp=new JTextPane();
    tp.setContentType(""String_Node_Str"");
    tp.setText(""String_Node_Str"" + license + ""String_Node_Str"");
    tp.setEditable(false);
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    tp.setPreferredSize(new Dimension((int)d.getWidth() / 2,(int)d.getHeight() / 2));
    tp.setCaretPosition(0);
    tp.addHyperlinkListener(new HyperlinkListener(){
      @Override public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
          logger.fine(""String_Node_Str"");
          tp.setText(null);
          tp.setContentType(""String_Node_Str"");
          tp.setText(agpl);
          tp.setCaretPosition(0);
        }
      }
    }
);
    String option=l10n.getString(""String_Node_Str"");
    JOptionPane op=new JOptionPane(new JScrollPane(tp),JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,null,new Object[]{option},option);
    JDialog dialog=op.createDialog(this,l10n.getString(""String_Node_Str""));
    dialog.setResizable(true);
    dialog.pack();
    dialog.setVisible(true);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","private void licenseButtonActionPerformed(ActionEvent evt){
  try {
    logger.fine(""String_Node_Str"");
    String license=IOUtils.toString(getClass().getResourceAsStream(RES + ""String_Node_Str""),""String_Node_Str"");
    final String agpl=IOUtils.toString(getClass().getResourceAsStream(RES + ""String_Node_Str""),""String_Node_Str"");
    license=Workarounds.escapeHtml(license);
    license=license.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final JTextPane tp=new JTextPane();
    tp.setContentType(""String_Node_Str"");
    tp.setText(""String_Node_Str"" + license + ""String_Node_Str"");
    tp.setEditable(false);
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    tp.setPreferredSize(new Dimension((int)d.getWidth() / 2,(int)d.getHeight() / 2));
    tp.setCaretPosition(0);
    tp.addHyperlinkListener(new HyperlinkListener(){
      @Override public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
          logger.fine(""String_Node_Str"");
          tp.setText(null);
          tp.setContentType(""String_Node_Str"");
          tp.setText(agpl);
          tp.setCaretPosition(0);
        }
      }
    }
);
    String option=l10n.getString(""String_Node_Str"");
    JOptionPane op=new JOptionPane(new JScrollPane(tp),JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,null,new Object[]{option},option);
    JDialog dialog=op.createDialog(this,l10n.getString(""String_Node_Str""));
    dialog.setResizable(true);
    dialog.pack();
    dialog.setVisible(true);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}",0.9921116504854368
152147,"@Override public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  Component c=lafRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
  Contact contact=(Contact)value;
  JLabel label=((JLabel)c);
  Operator operator=OperatorUtil.getOperator(contact.getOperator());
  label.setIcon(operator != null ? operator.getIcon() : Icons.OPERATOR_BLANK);
  String tooltip=""String_Node_Str"" + contactIconURI + ""String_Node_Str""+ StringEscapeUtils.escapeHtml(contact.getName())+ ""String_Node_Str""+ OperatorUtil.stripCountryPrefix(contact.getNumber())+ ""String_Node_Str""+ StringEscapeUtils.escapeHtml(contact.getOperator())+ ""String_Node_Str"";
  label.setToolTipText(tooltip);
  if (!searchContactAction.getSearchString().equals(""String_Node_Str"") && !searchContactAction.isContactMatched(contact)) {
    label.setBackground(label.getBackground().darker());
    label.setForeground(label.getForeground().darker());
  }
  return label;
}","@Override public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  Component c=lafRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
  Contact contact=(Contact)value;
  JLabel label=((JLabel)c);
  Operator operator=OperatorUtil.getOperator(contact.getOperator());
  label.setIcon(operator != null ? operator.getIcon() : Icons.OPERATOR_BLANK);
  String tooltip=""String_Node_Str"" + contactIconURI + ""String_Node_Str""+ Workarounds.escapeHtml(contact.getName())+ ""String_Node_Str""+ OperatorUtil.stripCountryPrefix(contact.getNumber())+ ""String_Node_Str""+ Workarounds.escapeHtml(contact.getOperator())+ ""String_Node_Str"";
  label.setToolTipText(tooltip);
  if (!searchContactAction.getSearchString().equals(""String_Node_Str"") && !searchContactAction.isContactMatched(contact)) {
    label.setBackground(label.getBackground().darker());
    label.setForeground(label.getForeground().darker());
  }
  return label;
}",0.974308300395257
152148,"@Override public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  Component c=lafRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
  Log.Record record=(Log.Record)value;
  String text=""String_Node_Str"" + timeFormat.format(record.getTime()) + ""String_Node_Str""+ record.getMessage();
  ((JLabel)c).setText(""String_Node_Str"" + StringEscapeUtils.escapeHtml(text) + ""String_Node_Str"");
  ((JLabel)c).setIcon(record.getIcon() != null ? record.getIcon() : Icons.STATUS_BLANK);
  return c;
}","@Override public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  Component c=lafRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
  Log.Record record=(Log.Record)value;
  String text=""String_Node_Str"" + timeFormat.format(record.getTime()) + ""String_Node_Str""+ record.getMessage();
  ((JLabel)c).setText(""String_Node_Str"" + Workarounds.escapeHtml(text) + ""String_Node_Str"");
  ((JLabel)c).setIcon(record.getIcon() != null ? record.getIcon() : Icons.STATUS_BLANK);
  return c;
}",0.9775474956822108
152149,"@Override public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  Component c=lafRenderer.getListCellRendererComponent(list,value,index,isSelected,false);
  selected=isSelected;
  JLabel label=(JLabel)c;
  SMS sms=(SMS)value;
  label.setText(!Nullator.isEmpty(sms.getName()) ? sms.getName() : OperatorUtil.stripCountryPrefix(sms.getNumber()));
  if ((sms.getStatus() == SMS.Status.PROBLEMATIC) && !isSelected) {
    label.setBackground(Color.RED);
  }
  delayLabel.setForeground(label.getForeground());
  delayLabel.setBackground(label.getBackground());
  panel.setBackground(label.getBackground());
  Operator operator=OperatorUtil.getOperator(sms.getOperator());
  label.setIcon(operator != null ? operator.getIcon() : Icons.OPERATOR_BLANK);
  String text=WordUtils.wrap(sms.getText(),50,null,true);
  text=StringEscapeUtils.escapeHtml(text);
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String tooltip=""String_Node_Str"" + messageIconURI + ""String_Node_Str""+ label.getText()+ ""String_Node_Str""+ (Nullator.isEmpty(sms.getName()) ? ""String_Node_Str"" : OperatorUtil.stripCountryPrefix(sms.getNumber()) + ""String_Node_Str"")+ sms.getOperator()+ ""String_Node_Str""+ text+ ""String_Node_Str"";
  panel.setToolTipText(tooltip);
  if (sendingSMS.contains(sms)) {
    delayLabel.setIcon(sendIcon);
    delayLabel.setText(null);
  }
 else {
    delayLabel.setIcon(null);
    delayLabel.setText(convertDelayToHumanString(findCurrentDelay(sms)));
  }
  panel.add(label,BorderLayout.CENTER);
  return panel;
}","@Override public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  Component c=lafRenderer.getListCellRendererComponent(list,value,index,isSelected,false);
  selected=isSelected;
  JLabel label=(JLabel)c;
  SMS sms=(SMS)value;
  label.setText(!Nullator.isEmpty(sms.getName()) ? sms.getName() : OperatorUtil.stripCountryPrefix(sms.getNumber()));
  if ((sms.getStatus() == SMS.Status.PROBLEMATIC) && !isSelected) {
    label.setBackground(Color.RED);
  }
  delayLabel.setForeground(label.getForeground());
  delayLabel.setBackground(label.getBackground());
  panel.setBackground(label.getBackground());
  Operator operator=OperatorUtil.getOperator(sms.getOperator());
  label.setIcon(operator != null ? operator.getIcon() : Icons.OPERATOR_BLANK);
  String text=WordUtils.wrap(sms.getText(),50,null,true);
  text=Workarounds.escapeHtml(text);
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String tooltip=""String_Node_Str"" + messageIconURI + ""String_Node_Str""+ label.getText()+ ""String_Node_Str""+ (Nullator.isEmpty(sms.getName()) ? ""String_Node_Str"" : OperatorUtil.stripCountryPrefix(sms.getNumber()) + ""String_Node_Str"")+ sms.getOperator()+ ""String_Node_Str""+ text+ ""String_Node_Str"";
  panel.setToolTipText(tooltip);
  if (sendingSMS.contains(sms)) {
    delayLabel.setIcon(sendIcon);
    delayLabel.setText(null);
  }
 else {
    delayLabel.setIcon(null);
    delayLabel.setText(convertDelayToHumanString(findCurrentDelay(sms)));
  }
  panel.add(label,BorderLayout.CENTER);
  return panel;
}",0.9917564996829424
152150,"/** 
 * Prints message to status bar
 * @param message text
 * @param printTime show timestamp before text
 * @param icon show icon with text. Use null for no icon.
 * @param addToLog whether the message should be logged
 */
public void setStatusMessage(String message,boolean printTime,ImageIcon icon,boolean addToLog){
  String messageEsc=StringEscapeUtils.escapeHtml(message);
  Date time=new Date();
  if (printTime) {
    String timestamp=shortTimeFormat.format(new Date());
    statusMessageLabel.setText(""String_Node_Str"" + timestamp + ""String_Node_Str""+ messageEsc+ ""String_Node_Str"");
  }
 else {
    statusMessageLabel.setText(""String_Node_Str"" + messageEsc + ""String_Node_Str"");
  }
  statusMessageLabel.setIcon(icon);
  if (addToLog) {
    addToLog(message,time,icon);
  }
}","/** 
 * Prints message to status bar
 * @param message text
 * @param printTime show timestamp before text
 * @param icon show icon with text. Use null for no icon.
 * @param addToLog whether the message should be logged
 */
public void setStatusMessage(String message,boolean printTime,ImageIcon icon,boolean addToLog){
  String messageEsc=Workarounds.escapeHtml(message);
  Date time=new Date();
  if (printTime) {
    String timestamp=shortTimeFormat.format(new Date());
    statusMessageLabel.setText(""String_Node_Str"" + timestamp + ""String_Node_Str""+ messageEsc+ ""String_Node_Str"");
  }
 else {
    statusMessageLabel.setText(""String_Node_Str"" + messageEsc + ""String_Node_Str"");
  }
  statusMessageLabel.setIcon(icon);
  if (addToLog) {
    addToLog(message,time,icon);
  }
}",0.983397190293742
152151,"private void licenseButtonActionPerformed(java.awt.event.ActionEvent evt){
  try {
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    URL url=getClass().getResource(RES + ""String_Node_Str"");
    JTextPane tp=new JTextPane();
    tp.setPage(url);
    tp.setEditable(false);
    tp.setPreferredSize(new Dimension((int)d.getWidth() / 2,(int)d.getHeight() / 2));
    String option=""String_Node_Str"";
    JOptionPane op=new JOptionPane(new JScrollPane(tp),JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,null,new Object[]{option},option);
    JDialog dialog=op.createDialog(this,""String_Node_Str"");
    dialog.setResizable(true);
    dialog.setVisible(true);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","private void licenseButtonActionPerformed(java.awt.event.ActionEvent evt){
  try {
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    URL url=getClass().getResource(RES + ""String_Node_Str"");
    JTextPane tp=new JTextPane();
    tp.setPage(url);
    tp.setEditable(false);
    tp.setPreferredSize(new Dimension((int)d.getWidth() / 2,(int)d.getHeight() / 2));
    String option=""String_Node_Str"";
    JOptionPane op=new JOptionPane(new JScrollPane(tp),JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,null,new Object[]{option},option);
    JDialog dialog=op.createDialog(this,""String_Node_Str"");
    dialog.setResizable(true);
    dialog.pack();
    dialog.setVisible(true);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}",0.9877813504823152
152152,"private void creditsButtonActionPerformed(java.awt.event.ActionEvent evt){
  try {
    URL url=getClass().getResource(RES + ""String_Node_Str"");
    JTextPane tp=new JTextPane();
    tp.setContentType(""String_Node_Str"");
    tp.setPage(url);
    tp.setEditable(false);
    tp.setPreferredSize(new Dimension(450,400));
    tp.addHyperlinkListener(new HyperlinkListener(){
      @Override public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && Desktop.isDesktopSupported()) {
          try {
            Desktop.getDesktop().browse(e.getURL().toURI());
          }
 catch (          Exception ex) {
            logger.log(Level.SEVERE,""String_Node_Str"" + e.getURL(),ex);
          }
        }
      }
    }
);
    String option=""String_Node_Str"";
    JOptionPane op=new JOptionPane(new JScrollPane(tp),JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,null,new Object[]{option},option);
    JDialog dialog=op.createDialog(this,""String_Node_Str"");
    dialog.setResizable(true);
    dialog.setVisible(true);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}","private void creditsButtonActionPerformed(java.awt.event.ActionEvent evt){
  try {
    URL url=getClass().getResource(RES + ""String_Node_Str"");
    JTextPane tp=new JTextPane();
    tp.setContentType(""String_Node_Str"");
    tp.setPage(url);
    tp.setEditable(false);
    tp.setPreferredSize(new Dimension(450,400));
    tp.addHyperlinkListener(new HyperlinkListener(){
      @Override public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && Desktop.isDesktopSupported()) {
          try {
            Desktop.getDesktop().browse(e.getURL().toURI());
          }
 catch (          Exception ex) {
            logger.log(Level.SEVERE,""String_Node_Str"" + e.getURL(),ex);
          }
        }
      }
    }
);
    String option=""String_Node_Str"";
    JOptionPane op=new JOptionPane(new JScrollPane(tp),JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,null,new Object[]{option},option);
    JDialog dialog=op.createDialog(this,""String_Node_Str"");
    dialog.setResizable(true);
    dialog.pack();
    dialog.setVisible(true);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}",0.9919729615547106
152153,"/** 
 * Notifies about change in sms queue 
 */
public void smsProcessed(SMS sms){
  if (sms.getStatus() == SMS.Status.SENT_OK) {
    statusPanel.setStatusMessage(""String_Node_Str"" + sms + ""String_Node_Str"",true,Icons.STATUS_MESSAGE,true);
    createHistory(sms);
    if (smsPanel.getText().length() > 0) {
      smsPanel.requestFocusInWindow();
    }
 else {
      contactPanel.requestFocusInWindow();
    }
  }
 else   if (sms.getStatus() == SMS.Status.PROBLEMATIC) {
    logger.info(""String_Node_Str"" + sms + ""String_Node_Str"");
    queuePanel.setPaused(true);
    statusPanel.setStatusMessage(""String_Node_Str"" + sms + ""String_Node_Str"",true,Icons.STATUS_WARNING,true);
    JLabel label=new JLabel(""String_Node_Str"" + ""String_Node_Str"" + sms + ""String_Node_Str""+ (sms.getErrMsg() != null ? sms.getErrMsg().trim() : ""String_Node_Str"")+ ""String_Node_Str"");
    label.setVerticalAlignment(SwingConstants.TOP);
    JPanel panel=new JPanel(new BorderLayout());
    panel.add(label,BorderLayout.CENTER);
    JOptionPane pane=new JOptionPane(panel,JOptionPane.WARNING_MESSAGE);
    JDialog dialog=pane.createDialog(MainFrame.this,null);
    Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    int width=panel.getWidth();
    int height=panel.getHeight();
    if (dialog.getWidth() > screenSize.getWidth()) {
      width=(int)screenSize.getWidth() * 2 / 3;
      height=height * (panel.getWidth() / width);
      panel.setPreferredSize(new Dimension(width,height));
      dialog=pane.createDialog(MainFrame.this,null);
    }
    dialog.setResizable(true);
    dialog.setVisible(true);
    if (smsPanel.getText().length() > 0) {
      smsPanel.requestFocusInWindow();
    }
 else {
      queuePanel.requestFocusInWindow();
    }
  }
  if (!Nullator.isEmpty(sms.getOperatorMsg())) {
    statusPanel.setStatusMessage(sms.getOperator() + ""String_Node_Str"" + sms.getOperatorMsg(),true,Icons.STATUS_MESSAGE,true);
  }
  if (!smsSender.isRunning()) {
    statusPanel.setTaskRunning(false);
  }
  queuePanel.smsProcessed(sms);
}","/** 
 * Notifies about change in sms queue 
 */
public void smsProcessed(SMS sms){
  if (sms.getStatus() == SMS.Status.SENT_OK) {
    statusPanel.setStatusMessage(""String_Node_Str"" + sms + ""String_Node_Str"",true,Icons.STATUS_MESSAGE,true);
    createHistory(sms);
    if (smsPanel.getText().length() > 0) {
      smsPanel.requestFocusInWindow();
    }
 else {
      contactPanel.requestFocusInWindow();
    }
  }
 else   if (sms.getStatus() == SMS.Status.PROBLEMATIC) {
    logger.info(""String_Node_Str"" + sms + ""String_Node_Str"");
    queuePanel.setPaused(true);
    statusPanel.setStatusMessage(""String_Node_Str"" + sms + ""String_Node_Str"",true,Icons.STATUS_WARNING,true);
    JLabel label=new JLabel(""String_Node_Str"" + ""String_Node_Str"" + sms + ""String_Node_Str""+ (sms.getErrMsg() != null ? sms.getErrMsg().trim() : ""String_Node_Str"")+ ""String_Node_Str"");
    label.setVerticalAlignment(SwingConstants.TOP);
    JPanel panel=new JPanel(new BorderLayout());
    panel.add(label,BorderLayout.CENTER);
    JOptionPane pane=new JOptionPane(panel,JOptionPane.WARNING_MESSAGE);
    JDialog dialog=pane.createDialog(MainFrame.this,null);
    Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    int width=panel.getWidth();
    int height=panel.getHeight();
    if (dialog.getWidth() > screenSize.getWidth()) {
      width=(int)screenSize.getWidth() * 2 / 3;
      height=height * (panel.getWidth() / width);
      panel.setPreferredSize(new Dimension(width,height));
      dialog=pane.createDialog(MainFrame.this,null);
    }
    dialog.setResizable(true);
    dialog.pack();
    dialog.setVisible(true);
    if (smsPanel.getText().length() > 0) {
      smsPanel.requestFocusInWindow();
    }
 else {
      queuePanel.requestFocusInWindow();
    }
  }
  if (!Nullator.isEmpty(sms.getOperatorMsg())) {
    statusPanel.setStatusMessage(sms.getOperator() + ""String_Node_Str"" + sms.getOperatorMsg(),true,Icons.STATUS_MESSAGE,true);
  }
  if (!smsSender.isRunning()) {
    statusPanel.setTaskRunning(false);
  }
  queuePanel.smsProcessed(sms);
}",0.9953511132860288
152154,"/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  String vendor=System.getProperty(""String_Node_Str"");
  String vm=System.getProperty(""String_Node_Str"");
  if (vendor == null || vm == null || (!vendor.toLowerCase().contains(""String_Node_Str"") && !vendor.toLowerCase().contains(""String_Node_Str""))) {
    logger.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  configPath=clp.getConfigPath();
  String macBarUI=UIManager.getString(""String_Node_Str"");
  if (clp.isPortable() && configPath == null) {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    JFileChooser chooser=new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setApproveButtonText(""String_Node_Str"");
    chooser.setDialogTitle(""String_Node_Str"");
    chooser.setFileHidingEnabled(false);
    chooser.setMultiSelectionEnabled(false);
    int result=chooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION) {
      configPath=chooser.getSelectedFile().getPath();
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setUserDir(configPath);
    }
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    String runOption=""String_Node_Str"";
    String quitOption=""String_Node_Str"";
    String[] options=new String[]{runOption,quitOption};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
    if (result != 0) {
      System.exit(0);
    }
  }
  if (Nullator.isEmpty(PersistenceManager.getConfig().getVersion())) {
    PersistenceManager.getConfig().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    if (vm != null && vm.toLowerCase().contains(""String_Node_Str"")) {
      PersistenceManager.getConfig().setLookAndFeel(ThemeManager.LAF_SYSTEM);
    }
    if (vendor != null && vendor.toLowerCase().contains(""String_Node_Str"")) {
      PersistenceManager.getConfig().setLookAndFeel(ThemeManager.LAF_SYSTEM);
    }
  }
  LegacyUpdater.update();
  try {
    ThemeManager.setLaF();
  }
 catch (  Throwable ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  Config config=PersistenceManager.getConfig();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  UIManager.put(LafWidget.TEXT_EDIT_CONTEXT_MENU,Boolean.TRUE);
  if (macBarUI != null && OSType.isEqual(OSType.MAC_OS_X)) {
    UIManager.put(""String_Node_Str"",macBarUI);
  }
  java.awt.EventQueue.invokeLater(new java.lang.Runnable(){
    @Override public void run(){
      MainFrame.getInstance().setVisible(true);
    }
  }
);
}","/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  String vendor=System.getProperty(""String_Node_Str"");
  String vm=System.getProperty(""String_Node_Str"");
  if (vendor == null || vm == null || (!vendor.toLowerCase().contains(""String_Node_Str"") && !vendor.toLowerCase().contains(""String_Node_Str""))) {
    logger.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args)) {
    System.exit(1);
  }
  configPath=clp.getConfigPath();
  String macBarUI=UIManager.getString(""String_Node_Str"");
  if (clp.isPortable() && configPath == null) {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    JFileChooser chooser=new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setApproveButtonText(""String_Node_Str"");
    chooser.setDialogTitle(""String_Node_Str"");
    chooser.setFileHidingEnabled(false);
    chooser.setMultiSelectionEnabled(false);
    int result=chooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION) {
      configPath=chooser.getSelectedFile().getPath();
    }
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null) {
      PersistenceManager.setUserDir(configPath);
    }
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    String runOption=""String_Node_Str"";
    String quitOption=""String_Node_Str"";
    String[] options=new String[]{runOption,quitOption};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
    if (result != 0) {
      System.exit(0);
    }
  }
  if (Nullator.isEmpty(PersistenceManager.getConfig().getVersion())) {
    PersistenceManager.getConfig().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
    if (vm != null && vm.toLowerCase().contains(""String_Node_Str"")) {
      PersistenceManager.getConfig().setLookAndFeel(ThemeManager.LAF_SYSTEM);
    }
    if (vendor != null && vendor.toLowerCase().contains(""String_Node_Str"")) {
      PersistenceManager.getConfig().setLookAndFeel(ThemeManager.LAF_SYSTEM);
    }
  }
  LegacyUpdater.update();
  try {
    ThemeManager.setLaF();
  }
 catch (  Throwable ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  Config config=PersistenceManager.getConfig();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  UIManager.put(LafWidget.TEXT_EDIT_CONTEXT_MENU,Boolean.TRUE);
  if (macBarUI != null && OSType.isEqual(OSType.MAC_OS_X)) {
    UIManager.put(""String_Node_Str"",macBarUI);
  }
  java.awt.EventQueue.invokeLater(new java.lang.Runnable(){
    @Override public void run(){
      MainFrame.getInstance().startAndShow();
    }
  }
);
}",0.9970760233918128
152155,"@Override public void run(){
  MainFrame.getInstance().setVisible(true);
}","@Override public void run(){
  MainFrame.getInstance().startAndShow();
}",0.8493150684931506
152156,"/** 
 * get length of signature needed to be substracted from message length 
 */
private int getSignatureLength(Contact c){
  Operator operator=OperatorUtil.getOperator(c.getOperator());
  if (operator != null && config.isUseSenderID() && config.getSenderName() != null && config.getSenderName().length() != 0) {
    return operator.getSignatureExtraLength() + config.getSenderName().length();
  }
 else {
    return 0;
  }
}","/** 
 * get length of signature needed to be substracted from message length 
 */
private int getSignatureLength(Contact c){
  Operator operator=OperatorUtil.getOperator(c.getOperator());
  if (operator != null && config.isUseSenderID() && config.getSenderName() != null && config.getSenderName().length() > 0) {
    return operator.getSignatureExtraLength() + config.getSenderName().length();
  }
 else {
    return 0;
  }
}",0.9964747356051704
152157,"/** 
 * get number of sms from these characters 
 */
public int getSMSCount(int chars){
  int worstOperator=Integer.MAX_VALUE;
  for (  Contact c : contacts) {
    Operator operator=OperatorUtil.getOperator(c.getOperator());
    if (operator == null)     continue;
    worstOperator=Math.min(worstOperator,operator.getSMSLength() - getSignatureLength(c));
  }
  int count=chars / worstOperator;
  if (chars % worstOperator != 0)   count++;
  return count;
}","/** 
 * get number of sms from these characters 
 */
public int getSMSCount(int chars){
  int worstOperator=Integer.MAX_VALUE;
  for (  Contact c : contacts) {
    Operator operator=OperatorUtil.getOperator(c.getOperator());
    if (operator == null)     continue;
    worstOperator=Math.min(worstOperator,operator.getSMSLength());
  }
  chars+=getSignatureLength();
  int count=chars / worstOperator;
  if (chars % worstOperator != 0)   count++;
  return count;
}",0.968512486427796
152158,"/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  String vendor=System.getProperty(""String_Node_Str"");
  String vm=System.getProperty(""String_Node_Str"");
  if (vendor == null || !vendor.toLowerCase().contains(""String_Node_Str"") || vm == null || vm.toLowerCase().contains(""String_Node_Str"")) {
    logger.severe(""String_Node_Str"" + ""String_Node_Str"");
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args))   System.exit(1);
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    JFileChooser chooser=new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setApproveButtonText(""String_Node_Str"");
    chooser.setDialogTitle(""String_Node_Str"");
    chooser.setFileHidingEnabled(false);
    chooser.setMultiSelectionEnabled(false);
    int result=chooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION)     configPath=chooser.getSelectedFile().getPath();
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null)     PersistenceManager.setUserDir(configPath);
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    String runOption=""String_Node_Str"";
    String quitOption=""String_Node_Str"";
    String[] options=new String[]{quitOption,runOption};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
    if (result != 1)     System.exit(0);
  }
  if (Nullator.isEmpty(PersistenceManager.getConfig().getVersion())) {
    PersistenceManager.getConfig().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
  }
  LegacyUpdater.update();
  try {
    ThemeManager.setLaF();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  Config config=PersistenceManager.getConfig();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  UIManager.put(LafWidget.TEXT_EDIT_CONTEXT_MENU,Boolean.TRUE);
  java.awt.EventQueue.invokeLater(new java.lang.Runnable(){
    public void run(){
      MainFrame.getInstance().setVisible(true);
    }
  }
);
}","/** 
 * Program starter method
 * @param args the command line arguments
 */
public static void main(String[] args){
  String vendor=System.getProperty(""String_Node_Str"");
  String vm=System.getProperty(""String_Node_Str"");
  if (vendor == null || !vendor.toLowerCase().contains(""String_Node_Str"") || vm == null || vm.toLowerCase().contains(""String_Node_Str"")) {
    logger.severe(""String_Node_Str"" + ""String_Node_Str"");
  }
  CommandLineParser clp=new CommandLineParser();
  if (!clp.parseArgs(args))   System.exit(1);
  configPath=clp.getConfigPath();
  if (clp.isPortable() && configPath == null) {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    JFileChooser chooser=new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setApproveButtonText(""String_Node_Str"");
    chooser.setDialogTitle(""String_Node_Str"");
    chooser.setFileHidingEnabled(false);
    chooser.setMultiSelectionEnabled(false);
    int result=chooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION)     configPath=chooser.getSelectedFile().getPath();
  }
  PersistenceManager pm=null;
  try {
    if (configPath != null)     PersistenceManager.setUserDir(configPath);
    pm=PersistenceManager.getInstance();
    try {
      pm.loadConfig();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadOperators();
    }
 catch (    IntrospectionException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
      System.exit(1);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    try {
      pm.loadContacts();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadQueue();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadHistory();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    try {
      pm.loadKeyring();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.ERROR_MESSAGE);
  }
  if (pm != null && !pm.isFirstInstance()) {
    logger.warning(""String_Node_Str"");
    String runOption=""String_Node_Str"";
    String quitOption=""String_Node_Str"";
    String[] options=new String[]{quitOption,runOption};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",null,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,quitOption);
    if (result != 1)     System.exit(0);
  }
  if (Nullator.isEmpty(PersistenceManager.getConfig().getVersion())) {
    PersistenceManager.getConfig().setCountryPrefix(CountryPrefix.getCountryPrefix(Locale.getDefault().getCountry()));
  }
  LegacyUpdater.update();
  try {
    ThemeManager.setLaF();
  }
 catch (  Throwable ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  Config config=PersistenceManager.getConfig();
  if (config.isUseProxy()) {
    if (config.isSameProxy()) {
      ProxyManager.setProxy(config.getHttpProxy());
    }
 else {
      ProxyManager.setProxy(config.getHttpProxy(),config.getHttpsProxy(),config.getSocksProxy());
    }
  }
  UIManager.put(LafWidget.TEXT_EDIT_CONTEXT_MENU,Boolean.TRUE);
  java.awt.EventQueue.invokeLater(new java.lang.Runnable(){
    public void run(){
      MainFrame.getInstance().setVisible(true);
    }
  }
);
}",0.9976839938239837
152159,"public static void setLaF() throws Exception {
  Config config=PersistenceManager.getConfig();
  String laf=config.getLookAndFeel();
  JFrame.setDefaultLookAndFeelDecorated(config.isLafWindowDecorated());
  JDialog.setDefaultLookAndFeelDecorated(config.isLafWindowDecorated());
  if (laf.equals(LAF_SYSTEM)) {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 else   if (laf.equals(LAF_CROSSPLATFORM)) {
    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
  }
 else   if (laf.equals(LAF_GTK)) {
    UIManager.setLookAndFeel(GTKLookAndFeel.class.getName());
  }
 else   if (laf.equals(LAF_JGOODIES)) {
    String themeString=config.getLafJGoodiesTheme();
    PlasticTheme theme=null;
    for (    Object o : PlasticLookAndFeel.getInstalledThemes()) {
      PlasticTheme ptheme=(PlasticTheme)o;
      if (ptheme.getName().equals(themeString)) {
        theme=ptheme;
        break;
      }
    }
    PlasticLookAndFeel.setPlasticTheme(theme != null ? theme : new ExperienceBlue());
    UIManager.setLookAndFeel(new PlasticXPLookAndFeel());
  }
 else   if (laf.equals(LAF_SUBSTANCE)) {
    String skinString=config.getLafSubstanceSkin();
    String skin=null;
    new SubstanceLookAndFeel();
    for (    SkinInfo skinInfo : SubstanceLookAndFeel.getAllSkins().values()) {
      if (skinInfo.getDisplayName().equals(skinString)) {
        skin=skinInfo.getClassName();
        break;
      }
    }
    SubstanceLookAndFeel.setSkin(skin != null ? skin : new SaharaSkin().getClass().getName());
    UIManager.setLookAndFeel(new SubstanceLookAndFeel());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public static void setLaF() throws Throwable {
  Config config=PersistenceManager.getConfig();
  String laf=config.getLookAndFeel();
  JFrame.setDefaultLookAndFeelDecorated(config.isLafWindowDecorated());
  JDialog.setDefaultLookAndFeelDecorated(config.isLafWindowDecorated());
  if (laf.equals(LAF_SYSTEM)) {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 else   if (laf.equals(LAF_CROSSPLATFORM)) {
    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
  }
 else   if (laf.equals(LAF_GTK)) {
    UIManager.setLookAndFeel(GTKLookAndFeel.class.getName());
  }
 else   if (laf.equals(LAF_JGOODIES)) {
    String themeString=config.getLafJGoodiesTheme();
    PlasticTheme theme=null;
    for (    Object o : PlasticLookAndFeel.getInstalledThemes()) {
      PlasticTheme ptheme=(PlasticTheme)o;
      if (ptheme.getName().equals(themeString)) {
        theme=ptheme;
        break;
      }
    }
    PlasticLookAndFeel.setPlasticTheme(theme != null ? theme : new ExperienceBlue());
    UIManager.setLookAndFeel(new PlasticXPLookAndFeel());
  }
 else   if (laf.equals(LAF_SUBSTANCE)) {
    String skinString=config.getLafSubstanceSkin();
    String skin=null;
    new SubstanceLookAndFeel();
    for (    SkinInfo skinInfo : SubstanceLookAndFeel.getAllSkins().values()) {
      if (skinInfo.getDisplayName().equals(skinString)) {
        skin=skinInfo.getClassName();
        break;
      }
    }
    SubstanceLookAndFeel.setSkin(skin != null ? skin : new SaharaSkin().getClass().getName());
    UIManager.setLookAndFeel(new SubstanceLookAndFeel());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9946396664681358
152160,"private void themeComboBoxActionPerformed(java.awt.event.ActionEvent evt){
  String laf=(String)lafComboBox.getSelectedItem();
  if (laf.equals(LAF_JGOODIES)) {
    config.setLafJGoodiesTheme((String)themeComboBox.getSelectedItem());
  }
 else   if (laf.equals(LAF_SUBSTANCE)) {
    config.setLafSubstanceSkin((String)themeComboBox.getSelectedItem());
  }
  if (fullyInicialized && lafWhenLoaded.equals(lafComboBox.getSelectedItem())) {
    try {
      ThemeManager.setLaF();
      SwingUtilities.updateComponentTreeUI(MainFrame.getInstance());
      SwingUtilities.updateComponentTreeUI(this);
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","private void themeComboBoxActionPerformed(java.awt.event.ActionEvent evt){
  String laf=(String)lafComboBox.getSelectedItem();
  if (laf.equals(LAF_JGOODIES)) {
    config.setLafJGoodiesTheme((String)themeComboBox.getSelectedItem());
  }
 else   if (laf.equals(LAF_SUBSTANCE)) {
    config.setLafSubstanceSkin((String)themeComboBox.getSelectedItem());
  }
  if (fullyInicialized && lafWhenLoaded.equals(lafComboBox.getSelectedItem())) {
    try {
      ThemeManager.setLaF();
      SwingUtilities.updateComponentTreeUI(MainFrame.getInstance());
      SwingUtilities.updateComponentTreeUI(this);
    }
 catch (    Throwable ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.987012987012987
152161,"/** 
 * load program configuration 
 */
private void loadConfig(){
  if (config.isRememberLayout()) {
    Dimension mainDimension=config.getMainDimension();
    Integer horizontalSplitPaneLocation=config.getHorizontalSplitPaneLocation();
    Integer verticalSplitPaneLocation=config.getVerticalSplitPaneLocation();
    if (mainDimension != null)     this.setSize(mainDimension);
    if (horizontalSplitPaneLocation != null)     horizontalSplitPane.setDividerLocation(horizontalSplitPaneLocation);
    if (verticalSplitPaneLocation != null)     verticalSplitPane.setDividerLocation(verticalSplitPaneLocation);
  }
  if (config.isStartCentered()) {
    setLocationRelativeTo(null);
  }
  if (history.getRecords().size() > 0)   contactPanel.setSelectedContact(history.getRecord(0).getName());
}","/** 
 * load program configuration 
 */
private void loadConfig(){
  if (config.isRememberLayout()) {
    Dimension mainDimension=config.getMainDimension();
    Integer horizontalSplitPaneLocation=config.getHorizontalSplitPaneLocation();
    Integer verticalSplitPaneLocation=config.getVerticalSplitPaneLocation();
    if (mainDimension != null)     this.setSize(mainDimension);
    if (horizontalSplitPaneLocation != null)     horizontalSplitPane.setDividerLocation(horizontalSplitPaneLocation);
    if (verticalSplitPaneLocation != null)     verticalSplitPane.setDividerLocation(verticalSplitPaneLocation);
  }
  if (config.isStartCentered()) {
    setLocationRelativeTo(null);
  }
  if (history.getRecords().size() > 0) {
    contactPanel.setSelectedContact(history.getRecord(history.getRecords().size() - 1).getName());
  }
}",0.9753086419753086
152162,"/** 
 * Creates a new instance of PersistenceManager 
 */
private PersistenceManager() throws IOException {
  String path=System.getenv(""String_Node_Str"");
  if ((path == null || path.equals(""String_Node_Str"")) && System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str""))   path=System.getenv(""String_Node_Str"");
  if (path != null && !path.equals(""String_Node_Str"")) {
    setProgramDir(path + File.separator + PROGRAM_DIRNAME);
  }
  boolean ok=true;
  if (!PROGRAM_DIR.exists())   ok=PROGRAM_DIR.mkdirs();
  if (!ok)   throw new IOException(""String_Node_Str"");
  if (!(PROGRAM_DIR.canWrite() && PROGRAM_DIR.canExecute()))   throw new IOException(""String_Node_Str"");
}","/** 
 * Creates a new instance of PersistenceManager 
 */
private PersistenceManager() throws IOException {
  if (!customPathSet) {
    String path=System.getenv(""String_Node_Str"");
    if ((path == null || path.equals(""String_Node_Str"")) && System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str"")) {
      path=System.getenv(""String_Node_Str"");
    }
    if (path != null && !path.equals(""String_Node_Str"")) {
      setProgramDir(path + File.separator + PROGRAM_DIRNAME);
    }
  }
  boolean ok=true;
  if (!PROGRAM_DIR.exists())   ok=PROGRAM_DIR.mkdirs();
  if (!ok)   throw new IOException(""String_Node_Str"");
  if (!(PROGRAM_DIR.canWrite() && PROGRAM_DIR.canExecute()))   throw new IOException(""String_Node_Str"");
}",0.9651810584958216
152163,"public static void setProgramDir(String path){
  if (persistenceManager != null)   throw new IllegalStateException(""String_Node_Str"");
  PROGRAM_DIR=new File(path);
  CONFIG_FILE=new File(PROGRAM_DIR,CONFIG_FILENAME);
  CONTACTS_FILE=new File(PROGRAM_DIR,CONTACTS_FILENAME);
  QUEUE_FILE=new File(PROGRAM_DIR,QUEUE_FILENAME);
  HISTORY_FILE=new File(PROGRAM_DIR,HISTORY_FILENAME);
}","public static void setProgramDir(String path){
  if (persistenceManager != null)   throw new IllegalStateException(""String_Node_Str"");
  PROGRAM_DIR=new File(path);
  CONFIG_FILE=new File(PROGRAM_DIR,CONFIG_FILENAME);
  CONTACTS_FILE=new File(PROGRAM_DIR,CONTACTS_FILENAME);
  QUEUE_FILE=new File(PROGRAM_DIR,QUEUE_FILENAME);
  HISTORY_FILE=new File(PROGRAM_DIR,HISTORY_FILENAME);
  customPathSet=true;
}",0.9720101781170484
152164,"public static void main(String[] args) throws IOException {
  String configFile=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  String msg=""String_Node_Str"";
  if (args.length > 0) {
    File f=new File(args[0]);
    if (f.exists()) {
      configFile=f.getName();
    }
 else {
      msg+=""String_Node_Str"" + f.getCanonicalPath();
      msg+='\n' + displayConfigDefaulting(configFile);
    }
  }
 else {
    msg+=""String_Node_Str"";
    msg+='\n' + displayConfigDefaulting(configFile);
  }
  Config.initConfig(configFile);
  Logger.println(msg);
  if (Config.LS_PASS == null || Config.LS_PASS.equals(""String_Node_Str"")) {
    if (new File(""String_Node_Str"",""String_Node_Str"").exists()) {
      devMode=true;
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
  world=Instance.getWorld();
  Logger.println(Config.SERVER_NAME + ""String_Node_Str"" + (Config.members ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"");
  server=new Server();
  Instance.dataStore().dispose();
  try (Scanner scan=new Scanner(System.in)){
    CommandHandler handler=new CommandHandler();
    String command;
    while ((command=scan.nextLine()) != null) {
      handler.handle(new Command(command));
    }
  }
 }","public static void main(String[] args) throws IOException {
  String configFile=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  String msg=""String_Node_Str"";
  if (args.length > 0) {
    File f=new File(args[0]);
    if (f.exists()) {
      configFile=f.getName();
    }
 else {
      msg+=""String_Node_Str"" + f.getCanonicalPath();
      msg+='\n' + displayConfigDefaulting(configFile);
    }
  }
 else {
    msg+=""String_Node_Str"";
    msg+='\n' + displayConfigDefaulting(configFile);
  }
  Config.initConfig(configFile);
  Logger.println(msg);
  if (Config.LS_PASS == null || Config.LS_PASS.equals(""String_Node_Str"")) {
    if (new File(""String_Node_Str"",""String_Node_Str"").exists()) {
      devMode=true;
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
  world=Instance.getWorld();
  Logger.println(Config.SERVER_NAME + ""String_Node_Str"" + (Config.members ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"");
  server=new Server();
  Instance.dataStore().dispose();
  try (Scanner scan=new Scanner(System.in)){
    CommandHandler handler=new CommandHandler();
    String command;
    while ((command=scan.nextLine()) != null) {
      handler.handle(new Command(command));
    }
  }
 }",0.9825648973266176
152165,"public static void main(String[] args) throws IOException {
  String configFile=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  if (args.length > 0) {
    File f=new File(args[0]);
    if (f.exists()) {
      configFile=f.getName();
    }
 else {
      System.out.println(""String_Node_Str"" + f.getCanonicalPath());
      displayConfigDefaulting(configFile);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    displayConfigDefaulting(configFile);
  }
  Config.initConfig(configFile);
  if (Config.LS_CONNECT_PASS == null || Config.LS_CONNECT_PASS.equals(""String_Node_Str"")) {
    if (new File(""String_Node_Str"",""String_Node_Str"").exists()) {
      devMode=true;
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
  System.out.println(""String_Node_Str"");
  try {
    storage=StorageMediumFactory.create(Config.STORAGE_MEDIUM);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + storage.getClass().getSimpleName());
  Server.getServer();
  if (Config.USE_REDDIT) {
    RedditTasks.start();
  }
  try (Scanner scan=new Scanner(System.in)){
    CommandHandler handler=new CommandHandler();
    String command;
    while ((command=scan.nextLine()) != null) {
      handler.handle(new Command(command));
    }
  }
 }","public static void main(String[] args) throws IOException {
  String configFile=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  if (args.length > 0) {
    File f=new File(args[0]);
    if (f.exists()) {
      configFile=f.getName();
    }
 else {
      System.out.println(""String_Node_Str"" + f.getCanonicalPath());
      displayConfigDefaulting(configFile);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    displayConfigDefaulting(configFile);
  }
  Config.initConfig(configFile);
  if (Config.LS_CONNECT_PASS == null || Config.LS_CONNECT_PASS.equals(""String_Node_Str"")) {
    if (new File(""String_Node_Str"",""String_Node_Str"").exists()) {
      devMode=true;
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
  }
  System.out.println(""String_Node_Str"");
  try {
    storage=StorageMediumFactory.create(Config.STORAGE_MEDIUM);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + storage.getClass().getSimpleName());
  Server.getServer();
  if (Config.USE_REDDIT) {
    RedditTasks.start();
  }
  try (Scanner scan=new Scanner(System.in)){
    CommandHandler handler=new CommandHandler();
    String command;
    while ((command=scan.nextLine()) != null) {
      handler.handle(new Command(command));
    }
  }
 }",0.983400959055699
152166,"public void handlePacket(Packet p,IoSession session) throws Exception {
  final long uID=((LSPacket)p).getUID();
  builder.setUID(uID);
  builder.setSuccess(false);
  Server server=Server.getServer();
  if (((LSPacket)p).getID() == 1) {
    int id=p.readShort();
    if (server.getWorld(id) == null) {
      World world=server.getIdleWorld(id);
      if (world == null) {
        world=new World(id,session);
        if (!Server.devMode) {
          int passL=p.readInt();
          byte[] pass=p.readBytes(passL);
          if (!Arrays.equals(new Hash(Config.LS_CONNECT_PASS.getBytes()).value(),pass)) {
            System.out.println(""String_Node_Str"");
            LSPacket temp=builder.getPacket();
            if (temp != null) {
              session.write(temp);
            }
            return;
          }
        }
 else {
          int length=p.readInt();
          if (length != 0) {
            System.out.println(""String_Node_Str"");
          }
          LSPacket temp=builder.getPacket();
          if (temp != null) {
            session.write(temp);
          }
          return;
        }
        server.registerWorld(world);
        System.out.println(""String_Node_Str"" + id);
      }
 else {
        world.setSession(session);
        server.setIdle(world,false);
        System.out.println(""String_Node_Str"" + id);
      }
      int playerCount=p.readShort();
      for (int i=0; i < playerCount; i++) {
        world.registerPlayer(p.readLong(),DataConversions.IPToString(p.readLong()),p.readString(p.readInt()));
      }
      session.setAttachment(world);
      builder.setSuccess(true);
    }
  }
 else {
    World world=(World)session.getAttachment();
    server.unregisterWorld(world);
    System.out.println(""String_Node_Str"" + world.getID());
    session.setAttachment(null);
    builder.setSuccess(true);
  }
  LSPacket temp=builder.getPacket();
  if (temp != null) {
    session.write(temp);
  }
}","public void handlePacket(Packet p,IoSession session) throws Exception {
  final long uID=((LSPacket)p).getUID();
  builder.setUID(uID);
  builder.setSuccess(false);
  Server server=Server.getServer();
  if (((LSPacket)p).getID() == 1) {
    int id=p.readShort();
    if (server.getWorld(id) == null) {
      World world=server.getIdleWorld(id);
      if (world == null) {
        world=new World(id,session);
        if (!Server.devMode) {
          int passL=p.readInt();
          byte[] pass=p.readBytes(passL);
          if (!Arrays.equals(new Hash(Config.LS_CONNECT_PASS.getBytes()).value(),pass)) {
            System.out.println(""String_Node_Str"");
            LSPacket temp=builder.getPacket();
            if (temp != null) {
              session.write(temp);
            }
            return;
          }
        }
 else {
          int length=p.readInt();
          if (length != 0) {
            System.out.println(""String_Node_Str"");
            LSPacket temp=builder.getPacket();
            if (temp != null) {
              session.write(temp);
            }
            return;
          }
        }
        server.registerWorld(world);
        System.out.println(""String_Node_Str"" + id);
      }
 else {
        world.setSession(session);
        server.setIdle(world,false);
        System.out.println(""String_Node_Str"" + id);
      }
      int playerCount=p.readShort();
      for (int i=0; i < playerCount; i++) {
        world.registerPlayer(p.readLong(),DataConversions.IPToString(p.readLong()),p.readString(p.readInt()));
      }
      session.setAttachment(world);
      builder.setSuccess(true);
    }
  }
 else {
    World world=(World)session.getAttachment();
    server.unregisterWorld(world);
    System.out.println(""String_Node_Str"" + world.getID());
    session.setAttachment(null);
    builder.setSuccess(true);
  }
  LSPacket temp=builder.getPacket();
  if (temp != null) {
    session.write(temp);
  }
}",0.93846949327818
152167,"/** 
 * Increments and returns the current count.
 * @param hash - The hash of the player.
 */
private int incrementAndGet(long hash){
  final int count;
synchronized (playerToPacketCount) {
    Integer i=playerToPacketCount.get(hash);
    if (i == null) {
      count=1;
    }
 else {
      count=i + 1;
    }
    playerToPacketCount.put(hash,count);
  }
  return count;
}","/** 
 * Increments and returns the current count.
 * @param hash - The hash of the player.
 */
private int incrementAndGet(long hash){
  final int count;
  try {
    lock.lock();
    Integer i=playerToPacketCount.get(hash);
    if (i == null) {
      count=1;
    }
 else {
      count=i + 1;
    }
    playerToPacketCount.put(hash,count);
  }
  finally {
    lock.unlock();
  }
  return count;
}",0.5097529258777633
152168,"@Override public void run(){
  playerToPacketCount.clear();
}","@Override public void run(){
  try {
    lock.lock();
    playerToPacketCount.clear();
  }
  finally {
    lock.unlock();
  }
}",0.648936170212766
152169,"private PacketThrottler(){
  Instance.getDelayedEventHandler().add(new DelayedEvent(null,1000){
    @Override public void run(){
      playerToPacketCount.clear();
    }
  }
);
}","private PacketThrottler(){
  Instance.getDelayedEventHandler().add(new DelayedEvent(null,1000){
    @Override public void run(){
      try {
        lock.lock();
        playerToPacketCount.clear();
      }
  finally {
        lock.unlock();
      }
    }
  }
);
}",0.7601809954751131
152170,"/** 
 * Invoked whenever an exception is thrown by MINA or this IoHandler.
 * @param session The associated session
 * @param cause The exception thrown
 */
public void exceptionCaught(IoSession session,Throwable cause){
}","/** 
 * Invoked whenever an exception is thrown by MINA or this IoHandler.
 * @param session The associated session
 * @param cause The exception thrown
 */
public void exceptionCaught(IoSession session,Throwable cause){
  cause.printStackTrace();
}",0.9426751592356688
152171,"public void messageReceived(IoSession session,Object message){
  Player player=(Player)session.getAttachment();
  if (session.isClosing() || player.destroyed()) {
    return;
  }
  RSCPacket p=(RSCPacket)message;
  if (p.getID() == 55)   player.addInterval();
  System.out.println(""String_Node_Str"" + p.getID());
  packets.add(p);
}","public void messageReceived(IoSession session,Object message){
  Player player=(Player)session.getAttachment();
  if (session.isClosing() || player.destroyed()) {
    return;
  }
  RSCPacket p=(RSCPacket)message;
  if (p.getID() == 55)   player.addInterval();
  packets.add(p);
}",0.9132569558101472
152172,"/** 
 * Invoked whenever a packet is sent.
 * @param session The associated session
 * @param message The packet sent
 */
public void messageSent(IoSession session,Object message){
  RSCPacket p=(RSCPacket)message;
  System.out.println(p.getID());
}","/** 
 * Invoked whenever a packet is sent.
 * @param session The associated session
 * @param message The packet sent
 */
public void messageSent(IoSession session,Object message){
}",0.8445475638051044
152173,"public void updateViewedNpcs(){
  List<Npc> npcsInView=viewArea.getNpcsInView();
  for (  Npc n : npcsInView) {
    if ((!watchedNpcs.contains(n) || watchedNpcs.isRemoving(n)) && withinRange(n)) {
      if (n.inCombat()) {
        watchedNpcs.add(n);
      }
    }
  }
}","public void updateViewedNpcs(){
  List<Npc> npcsInView=viewArea.getNpcsInView();
  for (  Npc n : npcsInView) {
    if ((!watchedNpcs.contains(n) || watchedNpcs.isRemoving(n)) && withinRange(n)) {
      watchedNpcs.add(n);
    }
  }
}",0.9285714285714286
152174,"public int getRangePoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    if (item.wielded) {
      points+=EntityHandler.getItemWieldableDef(item.id).getRangePoints();
    }
  }
  return points < 1 ? 1 : points;
}","public int getRangePoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    ItemWieldableDef def=ItemAttributes.getWieldable(item.id);
    if (item.wielded && def != null) {
      points+=def.getRangePoints();
    }
  }
  return points < 1 ? 1 : points;
}",0.7602339181286549
152175,"public int getWeaponAimPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    if (item.wielded) {
      points+=EntityHandler.getItemWieldableDef(item.id).getWeaponAimPoints();
    }
  }
  points-=1;
  return points < 1 ? 1 : points;
}","public int getWeaponAimPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    ItemWieldableDef def=ItemAttributes.getWieldable(item.id);
    if (item.wielded && def != null) {
      points+=def.getWeaponAimPoints();
    }
  }
  points-=1;
  return points < 1 ? 1 : points;
}",0.7783783783783784
152176,"public int getMagicPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    if (item.wielded) {
      points+=EntityHandler.getItemWieldableDef(item.id).getMagicPoints();
    }
  }
  return points < 1 ? 1 : points;
}","public int getMagicPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    ItemWieldableDef def=ItemAttributes.getWieldable(item.id);
    if (item.wielded && def != null) {
      points+=def.getMagicPoints();
    }
  }
  return points < 1 ? 1 : points;
}",0.7602339181286549
152177,"public void updateWornItems(){
  List<InvItem> items=getInventory().getItems();
  for (  InvItem i : items) {
    ItemWieldableDef def=ItemAttributes.getWieldable(i.id);
    Logger.println(""String_Node_Str"" + getPlayerAppearance().getSprite(def.getWieldPos()));
    Logger.println(""String_Node_Str"" + def.getSprite());
    wornItems[def.getWieldPos()]=getPlayerAppearance().getSprite(def.getWieldPos());
  }
  super.ourAppearanceChanged=true;
}","public void updateWornItems(int index,int id){
  wornItems[index]=id;
  super.ourAppearanceChanged=true;
}",0.3163636363636363
152178,"public int getWeaponPowerPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    if (item.wielded) {
      points+=EntityHandler.getItemWieldableDef(item.id).getWeaponPowerPoints();
    }
  }
  points-=1;
  return points < 1 ? 1 : points;
}","public int getWeaponPowerPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    ItemWieldableDef def=ItemAttributes.getWieldable(item.id);
    if (item.wielded && def != null) {
      points+=def.getWeaponPowerPoints();
    }
  }
  points-=1;
  return points < 1 ? 1 : points;
}",0.7140319715808171
152179,"public int getArmourPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    if (item.wielded) {
      points+=EntityHandler.getItemWieldableDef(item.id).getArmourPoints();
    }
  }
  return points < 1 ? 1 : points;
}","public int getArmourPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    ItemWieldableDef def=ItemAttributes.getWieldable(item.id);
    if (item.wielded && def != null) {
      points+=def.getArmourPoints();
    }
  }
  return points < 1 ? 1 : points;
}",0.7620889748549323
152180,"public int getPrayerPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    if (item.wielded) {
      points+=EntityHandler.getItemWieldableDef(item.id).getPrayerPoints();
    }
  }
  return points < 1 ? 1 : points;
}","public int getPrayerPoints(){
  int points=1;
  for (  InvItem item : inventory.getItems()) {
    ItemWieldableDef def=ItemAttributes.getWieldable(item.id);
    if (item.wielded && def != null) {
      points+=def.getPrayerPoints();
    }
  }
  return points < 1 ? 1 : points;
}",0.7350096711798839
152181,"public void killedBy(Mob mob,boolean stake){
  if (mob instanceof Player) {
    Player player=(Player)mob;
    player.getActionSender().sendSound(""String_Node_Str"");
    if (this.isScripted()) {
      Instance.getPluginHandler().getNpcAIHandler(getID()).onNpcDeath(this,player);
    }
  }
  Mob opponent=super.getOpponent();
  if (opponent != null) {
    opponent.resetCombat(CombatState.WON);
  }
  resetCombat(CombatState.LOST);
  world.unregisterNpc(this);
  remove();
  Player owner=mob instanceof Player ? (Player)mob : null;
  ItemDropDef[] drops=def.getDrops();
  int total=0;
  for (  ItemDropDef drop : drops) {
    total+=drop.getWeight();
  }
  int hit=DataConversions.random(0,total);
  total=0;
  if (!this.getDef().name.equalsIgnoreCase(""String_Node_Str"")) {
    for (    ItemDropDef drop : drops) {
      if (drop == null) {
        continue;
      }
      if (drop.getWeight() == 0) {
        world.registerItem(new Item(drop.getID(),getX(),getY(),drop.getAmount(),owner));
        continue;
      }
      if (hit >= total && hit < (total + drop.getWeight())) {
        if (drop.getID() != -1) {
          if (EntityHandler.getItemDef(drop.getID()).members && World.isMembers()) {
            world.registerItem(new Item(drop.getID(),getX(),getY(),drop.getAmount(),owner));
            break;
          }
        }
      }
      total+=drop.getWeight();
    }
  }
  World.getQuestManager().handleNpcKilled(this,owner);
}","public void killedBy(Mob mob,boolean stake){
  if (mob instanceof Player) {
    Player player=(Player)mob;
    player.getActionSender().sendSound(""String_Node_Str"");
    if (this.isScripted()) {
      Instance.getPluginHandler().getNpcAIHandler(getID()).onNpcDeath(this,player);
    }
  }
  Mob opponent=super.getOpponent();
  if (opponent != null) {
    opponent.resetCombat(CombatState.WON);
  }
  resetCombat(CombatState.LOST);
  world.unregisterNpc(this);
  remove();
  Player owner=mob instanceof Player ? (Player)mob : null;
  ItemDropDef[] drops=def.getDrops();
  int total=0;
  for (  ItemDropDef drop : drops) {
    total+=drop.getWeight();
  }
  int hit=DataConversions.random(0,total);
  total=0;
  if (!this.getDef().name.equalsIgnoreCase(""String_Node_Str"")) {
    for (    ItemDropDef drop : drops) {
      if (drop == null) {
        continue;
      }
      if (drop.getWeight() == 0) {
        Item i=new Item(drop.getID(),getX(),getY(),drop.getAmount(),owner);
        if (i.getDef().members && !Server.isMembers())         continue;
        world.registerItem(i);
        continue;
      }
      if (hit >= total && hit < (total + drop.getWeight())) {
        if (drop.getID() != -1) {
          if (EntityHandler.getItemDef(drop.getID()).members && World.isMembers()) {
            world.registerItem(new Item(drop.getID(),getX(),getY(),drop.getAmount(),owner));
            break;
          }
        }
      }
      total+=drop.getWeight();
    }
  }
  World.getQuestManager().handleNpcKilled(this,owner);
}",0.8835639554505569
152182,"public double getCombatPortion(){
  return getCombatDamage() / getTotalDamage();
}","public double getCombatPortion(){
  if (getTotalDamage() == 0) {
    return 0;
  }
  return getCombatDamage() / getTotalDamage();
}",0.7699530516431925
152183,"public double getMagicPortion(){
  return getMagicDamage() / getTotalDamage();
}","public double getMagicPortion(){
  if (getTotalDamage() == 0) {
    return 0;
  }
  return getMagicDamage() / getTotalDamage();
}",0.7655502392344498
152184,"public double getRangePortion(){
  return getRangeDamage() / getTotalDamage();
}","public double getRangePortion(){
  if (getTotalDamage() == 0) {
    return 0;
  }
  return getRangeDamage() / getTotalDamage();
}",0.7655502392344498
152185,"public static void main(String[] args) throws IOException {
  String configFile=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  if (args.length > 0) {
    File f=new File(args[0]);
    if (f.exists()) {
      configFile=f.getName();
    }
 else {
      System.out.println(""String_Node_Str"" + f.getCanonicalPath());
      displayConfigDefaulting(configFile);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    displayConfigDefaulting(configFile);
  }
  Config.initConfig(configFile);
  world=Instance.getWorld();
  world.wl.loadObjects();
  World.initilizeDB();
  Logger.println(Config.SERVER_NAME + ""String_Node_Str"" + (Config.members ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"");
  server=new Server();
}","public static void main(String[] args) throws IOException {
  String configFile=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  if (args.length > 0) {
    File f=new File(args[0]);
    if (f.exists()) {
      configFile=f.getName();
    }
 else {
      System.out.println(""String_Node_Str"" + f.getCanonicalPath());
      displayConfigDefaulting(configFile);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    displayConfigDefaulting(configFile);
  }
  Config.initConfig(configFile);
  world=Instance.getWorld();
  try {
    world.wl.loadObjects();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  World.initilizeDB();
  Logger.println(Config.SERVER_NAME + ""String_Node_Str"" + (Config.members ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"");
  server=new Server();
}",0.9455445544554456
152186,"/** 
 * Constructs a new game engine with an empty packet queue.
 */
public GameEngine(){
  captcha=new Captcha();
  captcha.init();
  packetQueue=new PacketQueue<RSCPacket>();
  loadPacketHandlers();
  for (  Shop shop : world.getShops()) {
    shop.initRestock();
  }
  redirectSystemStreams();
}","/** 
 * Constructs a new game engine with an empty packet queue.
 */
public GameEngine(){
  captcha=new Captcha();
  captcha.init();
  packetQueue=new PacketQueue<RSCPacket>();
  try {
    loadPacketHandlers();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  for (  Shop shop : world.getShops()) {
    shop.initRestock();
  }
  redirectSystemStreams();
}",0.8713450292397661
152187,"/** 
 * Loads the packet handling classes from the persistence manager.
 */
protected void loadPacketHandlers(){
  PacketHandlerDef[] handlerDefs=Instance.getDataStore().loadPacketHandlerDefs();
  for (  PacketHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        PacketHandler handler=(PacketHandler)c.newInstance();
        for (        int packetID : handlerDef.getAssociatedPackets()) {
          packetHandlers.put(packetID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}","/** 
 * Loads the packet handling classes from the persistence manager.
 * @throws Exception 
 */
protected void loadPacketHandlers() throws Exception {
  PacketHandlerDef[] handlerDefs=Instance.getDataStore().loadPacketHandlerDefs();
  for (  PacketHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        PacketHandler handler=(PacketHandler)c.newInstance();
        for (        int packetID : handlerDef.getAssociatedPackets()) {
          packetHandlers.put(packetID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}",0.9698340874811464
152188,"public LoginConnector(){
  packetQueue=new PacketQueue<LSPacket>();
  loadPacketHandlers();
  reconnect();
}","public LoginConnector(){
  packetQueue=new PacketQueue<LSPacket>();
  try {
    loadPacketHandlers();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  reconnect();
}",0.7105263157894737
152189,"private void loadPacketHandlers(){
  PacketHandlerDef[] handlerDefs=Instance.getDataStore().loadLSPacketHandlerDefs();
  for (  PacketHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        PacketHandler handler=(PacketHandler)c.newInstance();
        for (        int packetID : handlerDef.getAssociatedPackets()) {
          packetHandlers.put(packetID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}","private void loadPacketHandlers() throws Exception {
  PacketHandlerDef[] handlerDefs=Instance.getDataStore().loadLSPacketHandlerDefs();
  for (  PacketHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        PacketHandler handler=(PacketHandler)c.newInstance();
        for (        int packetID : handlerDef.getAssociatedPackets()) {
          packetHandlers.put(packetID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}",0.984375
152190,"public void loadWorld(World world){
  try {
    tileArchive=new ZipFile(new File(Config.CONF_DIR,""String_Node_Str""));
  }
 catch (  Exception e) {
    Logger.error(e);
  }
  long now=System.currentTimeMillis();
  for (int lvl=0; lvl < 4; lvl++) {
    int wildX=2304;
    int wildY=1776 - (lvl * 944);
    for (int sx=0; sx < 1000; sx+=48) {
      for (int sy=0; sy < 1000; sy+=48) {
        int x=(sx + wildX) / 48;
        int y=(sy + (lvl * 944) + wildY) / 48;
        loadSection(x,y,lvl,world,sx,sy + (944 * lvl));
      }
    }
  }
  Logger.error((System.currentTimeMillis() - now) / 1000 + ""String_Node_Str"");
  for (  Shop shop : Instance.getDataStore().loadShops()) {
    world.registerShop(shop);
  }
  System.gc();
}","public void loadWorld(World world) throws Exception {
  try {
    tileArchive=new ZipFile(new File(Config.CONF_DIR,""String_Node_Str""));
  }
 catch (  Exception e) {
    Logger.error(e);
  }
  long now=System.currentTimeMillis();
  for (int lvl=0; lvl < 4; lvl++) {
    int wildX=2304;
    int wildY=1776 - (lvl * 944);
    for (int sx=0; sx < 1000; sx+=48) {
      for (int sy=0; sy < 1000; sy+=48) {
        int x=(sx + wildX) / 48;
        int y=(sy + (lvl * 944) + wildY) / 48;
        loadSection(x,y,lvl,world,sx,sy + (944 * lvl));
      }
    }
  }
  Logger.error((System.currentTimeMillis() - now) / 1000 + ""String_Node_Str"");
  for (  Shop shop : Instance.getDataStore().loadShops()) {
    world.registerShop(shop);
  }
  System.gc();
}",0.9877551020408164
152191,"public void loadObjects(){
  World world=Instance.getWorld();
  for (  GameObjectLoc gameObject : Instance.getDataStore().loadGameObjectLocs()) {
    if (Config.f2pWildy && Formulae.isP2P(true,gameObject))     continue;
    if (Formulae.isP2P(gameObject) && !World.isMembers())     continue;
    world.registerGameObject(new GameObject(gameObject));
  }
  for (  ItemLoc item : Instance.getDataStore().loadItemLocs()) {
    if (Config.f2pWildy && Formulae.isP2P(true,item))     continue;
    if (Formulae.isP2P(item) && !World.isMembers())     continue;
    world.registerItem(new Item(item));
  }
  for (  NPCLoc npc : Instance.getDataStore().loadNPCLocs()) {
    if (Config.f2pWildy && Formulae.isP2P(true,npc))     continue;
    if (Formulae.isP2P(npc) && !World.isMembers())     continue;
    world.registerNpc(new Npc(npc));
  }
}","public void loadObjects() throws Exception {
  World world=Instance.getWorld();
  for (  GameObjectLoc gameObject : Instance.getDataStore().loadGameObjectLocs()) {
    if (Config.f2pWildy && Formulae.isP2P(true,gameObject))     continue;
    if (Formulae.isP2P(gameObject) && !World.isMembers())     continue;
    world.registerGameObject(new GameObject(gameObject));
  }
  for (  ItemLoc item : Instance.getDataStore().loadItemLocs()) {
    if (Config.f2pWildy && Formulae.isP2P(true,item))     continue;
    if (Formulae.isP2P(item) && !World.isMembers())     continue;
    world.registerItem(new Item(item));
  }
  for (  NPCLoc npc : Instance.getDataStore().loadNPCLocs()) {
    if (Config.f2pWildy && Formulae.isP2P(true,npc))     continue;
    if (Formulae.isP2P(npc) && !World.isMembers())     continue;
    world.registerNpc(new Npc(npc));
  }
}",0.9893364928909952
152192,"/** 
 * Loads the npc handling classes
 */
private void loadNpcHandlers(){
  NpcHandlerDef[] handlerDefs=Instance.getDataStore().loadNpcHandlers();
  for (  NpcHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        NpcHandler handler=(NpcHandler)c.newInstance();
        for (        int npcID : handlerDef.getAssociatedNpcs()) {
          npcHandlers.put(npcID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}","/** 
 * Loads the npc handling classes
 * @throws Exception 
 */
private void loadNpcHandlers() throws Exception {
  NpcHandlerDef[] handlerDefs=Instance.getDataStore().loadNpcHandlers();
  for (  NpcHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        NpcHandler handler=(NpcHandler)c.newInstance();
        for (        int npcID : handlerDef.getAssociatedNpcs()) {
          npcHandlers.put(npcID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}",0.9663865546218487
152193,"public void handleMining(final GameObject object,Player owner,int click){
  if (owner.isBusy() && !owner.inCombat()) {
    return;
  }
  if (!owner.withinRange(object,1))   return;
  final GameObject newobject=Instance.getWorld().getTile(object.getX(),object.getY()).getGameObject();
  final ObjectMiningDef def=EntityHandler.getObjectMiningDef(newobject.getID());
  if (def == null || def.getRespawnTime() < 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final InvItem ore=new InvItem(def.getOreId());
  if (owner.getClick() == 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
    return;
  }
  if (owner.getCurStat(14) < def.getReqLevel()) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + def.getReqLevel() + ""String_Node_Str"");
    return;
  }
  int axeId=getAxe(owner);
  if (axeId < 0) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final int axeID=axeId;
  int retrytimes=-1;
  final int swings=owner.getSkillLoops();
  final int mineLvl=owner.getCurStat(14);
  int reqlvl=1;
switch (axeID) {
case 1258:
    retrytimes=2;
  break;
case 1259:
retrytimes=4;
reqlvl=6;
break;
case 1260:
retrytimes=6;
reqlvl=21;
break;
case 1261:
retrytimes=8;
reqlvl=31;
break;
case 1262:
retrytimes=12;
reqlvl=41;
break;
}
if (reqlvl > mineLvl) {
owner.getActionSender().sendMessage(""String_Node_Str"" + reqlvl + ""String_Node_Str"");
return;
}
owner.setBusy(true);
owner.getActionSender().sendSound(""String_Node_Str"");
Bubble bubble=new Bubble(owner,axeId);
for (Player p : owner.getViewArea().getPlayersInView()) {
p.informOfBubble(bubble);
}
final int retrytime=retrytimes;
owner.setLastMineTimer(GameEngine.getTime());
owner.getActionSender().sendMessage(""String_Node_Str"");
Instance.getDelayedEventHandler().add(new ShortEvent(owner){
public void action(){
if (Formulae.getOre(def,owner.getCurStat(14),axeID)) {
if (DataConversions.random(0,200) == 0) {
InvItem gem=new InvItem(Formulae.getGem(),1);
owner.incExp(14,100,true);
owner.getInventory().add(gem);
owner.getActionSender().sendMessage(""String_Node_Str"");
}
 else {
owner.getInventory().add(ore);
owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
owner.incExp(14,def.getExp(),true);
owner.getActionSender().sendStat(14);
world.registerGameObject(new GameObject(object.getLocation(),98,object.getDirection(),object.getType()));
world.delayedSpawnObject(newobject.getLoc(),def.getRespawnTime() * 1000);
}
owner.isMining(false);
owner.setSkillLoops(0);
owner.getActionSender().sendInventory();
}
 else {
boolean retry=false;
if (retrytime - swings > 0) retry=true;
owner.getActionSender().sendMessage(""String_Node_Str"");
if (retry) {
world.getDelayedEventHandler().add(new SingleEvent(owner,500){
public void action(){
if (!owner.isMining() || owner.inCombat()) {
return;
}
owner.setSkillLoops(swings + 1);
handleMining(object,owner,owner.getClick());
}
}
);
}
if (!retry) {
owner.isMining(false);
owner.setSkillLoops(0);
}
}
owner.setBusy(false);
}
}
);
}","public void handleMining(final GameObject object,Player owner,int click){
  if (owner.isBusy() && !owner.inCombat()) {
    return;
  }
  if (!owner.withinRange(object,1))   return;
  final GameObject newobject=Instance.getWorld().getTile(object.getX(),object.getY()).getGameObject();
  final ObjectMiningDef def=EntityHandler.getObjectMiningDef(newobject.getID());
  if (def == null || def.getRespawnTime() < 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final InvItem ore=new InvItem(def.getOreId());
  if (owner.getClick() == 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
    return;
  }
  if (owner.getCurStat(14) < def.getReqLevel()) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + def.getReqLevel() + ""String_Node_Str"");
    return;
  }
  int axeId=getAxe(owner);
  if (axeId < 0) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final int axeID=axeId;
  int retrytimes=-1;
  final int swings=owner.getSkillLoops();
  final int mineLvl=owner.getCurStat(14);
  int reqlvl=1;
switch (axeID) {
case 1258:
    retrytimes=2;
  break;
case 1259:
retrytimes=4;
reqlvl=6;
break;
case 1260:
retrytimes=6;
reqlvl=21;
break;
case 1261:
retrytimes=8;
reqlvl=31;
break;
case 1262:
retrytimes=12;
reqlvl=41;
break;
}
if (reqlvl > mineLvl) {
owner.getActionSender().sendMessage(""String_Node_Str"" + reqlvl + ""String_Node_Str"");
return;
}
owner.setBusy(true);
owner.isMining(true);
owner.getActionSender().sendSound(""String_Node_Str"");
Bubble bubble=new Bubble(owner,axeId);
for (Player p : owner.getViewArea().getPlayersInView()) {
p.informOfBubble(bubble);
}
final int retrytime=retrytimes;
owner.setLastMineTimer(GameEngine.getTime());
owner.getActionSender().sendMessage(""String_Node_Str"");
Instance.getDelayedEventHandler().add(new ShortEvent(owner){
public void action(){
if (!owner.isMining()) {
owner.setBusy(false);
return;
}
if (Formulae.getOre(def,owner.getCurStat(14),axeID)) {
if (DataConversions.random(0,200) == 0) {
InvItem gem=new InvItem(Formulae.getGem(),1);
owner.incExp(14,100,true);
owner.getInventory().add(gem);
owner.getActionSender().sendMessage(""String_Node_Str"");
}
 else {
owner.getInventory().add(ore);
owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
owner.incExp(14,def.getExp(),true);
owner.getActionSender().sendStat(14);
world.registerGameObject(new GameObject(object.getLocation(),98,object.getDirection(),object.getType()));
world.delayedSpawnObject(newobject.getLoc(),def.getRespawnTime() * 1000);
}
owner.isMining(false);
owner.setSkillLoops(0);
owner.getActionSender().sendInventory();
}
 else {
boolean retry=false;
if (retrytime - swings > 0) retry=true;
owner.getActionSender().sendMessage(""String_Node_Str"");
if (retry) {
world.getDelayedEventHandler().add(new SingleEvent(owner,500){
public void action(){
if (!owner.isMining() || owner.inCombat()) {
return;
}
owner.setSkillLoops(swings + 1);
handleMining(object,owner,owner.getClick());
}
}
);
}
if (!retry) {
owner.isMining(false);
owner.setSkillLoops(0);
}
}
owner.setBusy(false);
}
}
);
}",0.9873983091402138
152194,"/** 
 * Increments and returns the current count.
 * @param hash - The hash of the player.
 */
private int incrementAndGet(long hash){
  final int count;
synchronized (playerToPacketCount) {
    count=playerToPacketCount.get(hash) + 1;
    playerToPacketCount.put(hash,count);
  }
  return count;
}","/** 
 * Increments and returns the current count.
 * @param hash - The hash of the player.
 */
private int incrementAndGet(long hash){
  final int count;
synchronized (playerToPacketCount) {
    Integer i=playerToPacketCount.get(hash);
    if (i == null) {
      count=1;
    }
 else {
      count=i + 1;
    }
    playerToPacketCount.put(hash,count);
  }
  return count;
}",0.8733233979135618
152195,"private void loadSection(int sectionX,int sectionY,int height,World world,int bigX,int bigY){
  Sector s=null;
  try {
    String filename=""String_Node_Str"" + height + ""String_Node_Str""+ sectionX+ ""String_Node_Str""+ sectionY;
    ZipEntry e=tileArchive.getEntry(filename);
    if (e == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    ByteBuffer data=DataConversions.streamToBuffer(new BufferedInputStream(tileArchive.getInputStream(e)));
    s=Sector.unpack(data);
  }
 catch (  Exception e) {
    Logger.error(e);
  }
  for (int y=0; y < Sector.HEIGHT; y++) {
    for (int x=0; x < Sector.WIDTH; x++) {
      int bx=bigX + x;
      int by=bigY + y;
      if (!world.withinWorld(bx,by)) {
        continue;
      }
      world.getTileValue(bx,by).overlay=s.getTile(x,y).groundOverlay;
      world.getTileValue(bx,by).diagWallVal=s.getTile(x,y).diagonalWalls;
      world.getTileValue(bx,by).horizontalWallVal=s.getTile(x,y).horizontalWall;
      world.getTileValue(bx,by).verticalWallVal=s.getTile(x,y).verticalWall;
      world.getTileValue(bx,by).elevation=s.getTile(x,y).groundElevation;
      if ((s.getTile(x,y).groundOverlay & 0xff) == 250) {
        s.getTile(x,y).groundOverlay=(byte)2;
      }
      int groundOverlay=s.getTile(x,y).groundOverlay & 0xFF;
      if (groundOverlay > 0 && EntityHandler.getTileDef(groundOverlay - 1).getObjectType() != 0) {
        world.getTileValue(bx,by).mapValue|=0x40;
      }
      int verticalWall=s.getTile(x,y).verticalWall & 0xFF;
      if (verticalWall > 0 && EntityHandler.getDoorDef(verticalWall - 1).getUnknown() == 0 && EntityHandler.getDoorDef(verticalWall - 1).getDoorType() != 0) {
        world.getTileValue(bx,by).mapValue|=1;
        world.getTileValue(bx,by - 1).mapValue|=4;
      }
      int horizontalWall=s.getTile(x,y).horizontalWall & 0xFF;
      if (horizontalWall > 0 && EntityHandler.getDoorDef(horizontalWall - 1).getUnknown() == 0 && EntityHandler.getDoorDef(horizontalWall - 1).getDoorType() != 0) {
        world.getTileValue(bx,by).mapValue|=2;
        world.getTileValue(bx - 1,by).mapValue|=8;
      }
      int diagonalWalls=s.getTile(x,y).diagonalWalls;
      if (diagonalWalls > 0 && diagonalWalls < 12000 && EntityHandler.getDoorDef(diagonalWalls - 1).getUnknown() == 0 && EntityHandler.getDoorDef(diagonalWalls - 1).getDoorType() != 0) {
        world.getTileValue(bx,by).mapValue|=0x20;
      }
      if (diagonalWalls > 12000 && diagonalWalls < 24000 && EntityHandler.getDoorDef(diagonalWalls - 12001).getUnknown() == 0 && EntityHandler.getDoorDef(diagonalWalls - 12001).getDoorType() != 0) {
        world.getTileValue(bx,by).mapValue|=0x10;
      }
    }
  }
}","private void loadSection(int sectionX,int sectionY,int height,World world,int bigX,int bigY){
  Sector s=null;
  try {
    String filename=""String_Node_Str"" + height + ""String_Node_Str""+ sectionX+ ""String_Node_Str""+ sectionY;
    ZipEntry e=tileArchive.getEntry(filename);
    if (e == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    ByteBuffer data=DataConversions.streamToBuffer(new BufferedInputStream(tileArchive.getInputStream(e)));
    s=Sector.unpack(data);
  }
 catch (  Exception e) {
    Logger.error(e);
  }
  for (int y=0; y < Sector.HEIGHT; y++) {
    for (int x=0; x < Sector.WIDTH; x++) {
      int bx=bigX + x;
      int by=bigY + y;
      if (!world.withinWorld(bx,by)) {
        continue;
      }
      MutableTileValue t=new MutableTileValue(world.getTileValue(bx,by));
      t.overlay=s.getTile(x,y).groundOverlay;
      t.diagWallVal=s.getTile(x,y).diagonalWalls;
      t.horizontalWallVal=s.getTile(x,y).horizontalWall;
      t.verticalWallVal=s.getTile(x,y).verticalWall;
      t.elevation=s.getTile(x,y).groundElevation;
      if ((s.getTile(x,y).groundOverlay & 0xff) == 250) {
        s.getTile(x,y).groundOverlay=(byte)2;
      }
      int groundOverlay=s.getTile(x,y).groundOverlay & 0xFF;
      if (groundOverlay > 0 && EntityHandler.getTileDef(groundOverlay - 1).getObjectType() != 0) {
        t.mapValue|=0x40;
      }
      int verticalWall=s.getTile(x,y).verticalWall & 0xFF;
      if (verticalWall > 0 && EntityHandler.getDoorDef(verticalWall - 1).getUnknown() == 0 && EntityHandler.getDoorDef(verticalWall - 1).getDoorType() != 0) {
        t.mapValue|=1;
        MutableTileValue t1=new MutableTileValue(world.getTileValue(bx,by - 1));
        t1.mapValue|=4;
        world.setTileValue(bx,by - 1,t1.toTileValue());
      }
      int horizontalWall=s.getTile(x,y).horizontalWall & 0xFF;
      if (horizontalWall > 0 && EntityHandler.getDoorDef(horizontalWall - 1).getUnknown() == 0 && EntityHandler.getDoorDef(horizontalWall - 1).getDoorType() != 0) {
        t.mapValue|=2;
        MutableTileValue t1=new MutableTileValue(world.getTileValue(bx - 1,by));
        t1.mapValue|=8;
        world.setTileValue(bx - 1,by,t1.toTileValue());
      }
      int diagonalWalls=s.getTile(x,y).diagonalWalls;
      if (diagonalWalls > 0 && diagonalWalls < 12000 && EntityHandler.getDoorDef(diagonalWalls - 1).getUnknown() == 0 && EntityHandler.getDoorDef(diagonalWalls - 1).getDoorType() != 0) {
        t.mapValue|=0x20;
      }
      if (diagonalWalls > 12000 && diagonalWalls < 24000 && EntityHandler.getDoorDef(diagonalWalls - 12001).getUnknown() == 0 && EntityHandler.getDoorDef(diagonalWalls - 12001).getDoorType() != 0) {
        t.mapValue|=0x10;
      }
      world.setTileValue(bx,by,t.toTileValue());
    }
  }
}",0.6562672049917416
152196,"/** 
 * Gets the tile value as point x, y
 */
public TileValue getTileValue(int x,int y){
  if (!withinWorld(x,y)) {
    return null;
  }
  TileValue t=tileType[x][y];
  if (t == null) {
    t=new TileValue();
    tileType[x][y]=t;
  }
  return t;
}","/** 
 * Gets the tile value as point x, y
 */
public TileValue getTileValue(int x,int y){
  if (!withinWorld(x,y)) {
    return null;
  }
  TileValue t=tileType[x][y];
  if (t == null) {
    t=TileValue.create(0,new byte[6]);
    tileType[x][y]=t;
  }
  return t;
}",0.9299610894941636
152197,"/** 
 * Loads the npc handling classes
 * @throws Exception 
 */
private void loadNpcHandlers() throws Exception {
  NpcHandlerDef[] handlerDefs=Instance.getDataStore().loadNpcHandlers();
  for (  NpcHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        NpcHandler handler=(NpcHandler)c.newInstance();
        for (        int npcID : handlerDef.getAssociatedNpcs()) {
          npcHandlers.put(npcID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}","/** 
 * Loads the npc handling classes
 * @throws Exception
 */
private void loadNpcHandlers() throws Exception {
  NpcHandlerDef[] handlerDefs=Instance.getDataStore().loadNpcHandlers();
  for (  NpcHandlerDef handlerDef : handlerDefs) {
    try {
      String className=handlerDef.getClassName();
      Class<?> c=Class.forName(className);
      if (c != null) {
        NpcHandler handler=(NpcHandler)c.newInstance();
        for (        int npcID : handlerDef.getAssociatedNpcs()) {
          npcHandlers.put(npcID,handler);
        }
      }
    }
 catch (    Exception e) {
      Logger.error(e);
    }
  }
}",0.999186330349878
152198,"/** 
 * Updates the map to include a new object
 */
public void registerObject(GameObject o){
  if (o.getGameObjectDef().getType() != 1 && o.getGameObjectDef().getType() != 2) {
    return;
  }
  int dir=o.getDirection();
  int width, height;
  if (dir == 0 || dir == 4) {
    width=o.getGameObjectDef().getWidth();
    height=o.getGameObjectDef().getHeight();
  }
 else {
    height=o.getGameObjectDef().getWidth();
    width=o.getGameObjectDef().getHeight();
  }
  for (int x=o.getX(); x < o.getX() + width; x++) {
    for (int y=o.getY(); y < o.getY() + height; y++) {
      if (o.getGameObjectDef().getType() == 1) {
        getTileValue(x,y).objectValue|=0x40;
      }
 else       if (dir == 0) {
        getTileValue(x,y).objectValue|=2;
        getTileValue(x - 1,y).objectValue|=8;
      }
 else       if (dir == 2) {
        getTileValue(x,y).objectValue|=4;
        getTileValue(x,y + 1).objectValue|=1;
      }
 else       if (dir == 4) {
        getTileValue(x,y).objectValue|=8;
        getTileValue(x + 1,y).objectValue|=2;
      }
 else       if (dir == 6) {
        getTileValue(x,y).objectValue|=1;
        getTileValue(x,y - 1).objectValue|=4;
      }
    }
  }
}","/** 
 * Updates the map to include a new object
 */
public void registerObject(GameObject o){
  if (o.getGameObjectDef().getType() != 1 && o.getGameObjectDef().getType() != 2) {
    return;
  }
  int dir=o.getDirection();
  int width, height;
  if (dir == 0 || dir == 4) {
    width=o.getGameObjectDef().getWidth();
    height=o.getGameObjectDef().getHeight();
  }
 else {
    height=o.getGameObjectDef().getWidth();
    width=o.getGameObjectDef().getHeight();
  }
  for (int x=o.getX(); x < o.getX() + width; x++) {
    for (int y=o.getY(); y < o.getY() + height; y++) {
      MutableTileValue t=new MutableTileValue(getTileValue(x,y));
      if (o.getGameObjectDef().getType() == 1) {
        t.objectValue|=0x40;
      }
 else       if (dir == 0) {
        t.objectValue|=2;
        MutableTileValue t1=new MutableTileValue(getTileValue(x - 1,y));
        t1.objectValue|=8;
        setTileValue(x - 1,y,t1.toTileValue());
      }
 else       if (dir == 2) {
        t.objectValue|=4;
        MutableTileValue t1=new MutableTileValue(getTileValue(x,y + 1));
        t1.objectValue|=1;
        setTileValue(x,y + 1,t1.toTileValue());
      }
 else       if (dir == 4) {
        t.objectValue|=8;
        MutableTileValue t1=new MutableTileValue(getTileValue(x + 1,y));
        t1.objectValue|=2;
        setTileValue(x + 1,y,t1.toTileValue());
      }
 else       if (dir == 6) {
        t.objectValue|=1;
        MutableTileValue t1=new MutableTileValue(getTileValue(x,y - 1));
        t1.objectValue|=4;
        setTileValue(x,y - 1,t1.toTileValue());
      }
      setTileValue(x,y,t.toTileValue());
    }
  }
}",0.5777618877368609
152199,"/** 
 * Removes a door from the map
 */
public void unregisterDoor(GameObject o){
  if (o.getDoorDef().getDoorType() != 1) {
    return;
  }
  int dir=o.getDirection();
  int x=o.getX(), y=o.getY();
  if (dir == 0) {
    getTileValue(x,y).objectValue&=0xfffe;
    getTileValue(x,y - 1).objectValue&=65535 - 4;
  }
 else   if (dir == 1) {
    getTileValue(x,y).objectValue&=0xfffd;
    getTileValue(x - 1,y).objectValue&=65535 - 8;
  }
 else   if (dir == 2) {
    getTileValue(x,y).objectValue&=0xffef;
  }
 else   if (dir == 3) {
    getTileValue(x,y).objectValue&=0xffdf;
  }
}","/** 
 * Removes a door from the map
 */
public void unregisterDoor(GameObject o){
  if (o.getDoorDef().getDoorType() != 1) {
    return;
  }
  int dir=o.getDirection();
  int x=o.getX(), y=o.getY();
  MutableTileValue t=new MutableTileValue(getTileValue(x,y));
  if (dir == 0) {
    t.objectValue&=0xfffe;
    MutableTileValue t1=new MutableTileValue(getTileValue(x,y - 1));
    t1.objectValue&=65535 - 4;
    setTileValue(x,y - 1,t1.toTileValue());
  }
 else   if (dir == 1) {
    t.objectValue&=0xfffd;
    MutableTileValue t1=new MutableTileValue(getTileValue(x - 1,y));
    t1.objectValue&=65535 - 8;
    setTileValue(x - 1,y,t1.toTileValue());
  }
 else   if (dir == 2) {
    t.objectValue&=0xffef;
  }
 else   if (dir == 3) {
    t.objectValue&=0xffdf;
  }
  setTileValue(x,y,t.toTileValue());
}",0.5641769398114576
152200,"/** 
 * Updates the map to include a new door
 */
public void registerDoor(GameObject o){
  if (o.getDoorDef().getDoorType() != 1) {
    return;
  }
  int dir=o.getDirection();
  int x=o.getX(), y=o.getY();
  if (dir == 0) {
    getTileValue(x,y).objectValue|=1;
    getTileValue(x,y - 1).objectValue|=4;
  }
 else   if (dir == 1) {
    getTileValue(x,y).objectValue|=2;
    getTileValue(x - 1,y).objectValue|=8;
  }
 else   if (dir == 2) {
    getTileValue(x,y).objectValue|=0x10;
  }
 else   if (dir == 3) {
    getTileValue(x,y).objectValue|=0x20;
  }
}","/** 
 * Updates the map to include a new door
 */
public void registerDoor(GameObject o){
  if (o.getDoorDef().getDoorType() != 1) {
    return;
  }
  int dir=o.getDirection();
  int x=o.getX(), y=o.getY();
  MutableTileValue t=new MutableTileValue(getTileValue(x,y));
  if (dir == 0) {
    t.objectValue|=1;
    MutableTileValue t1=new MutableTileValue(getTileValue(x,y - 1));
    t1.objectValue|=4;
    setTileValue(x,y - 1,t1.toTileValue());
  }
 else   if (dir == 1) {
    t.objectValue|=2;
    MutableTileValue t1=new MutableTileValue(getTileValue(x - 1,y));
    t1.objectValue|=8;
    setTileValue(x - 1,y,t1.toTileValue());
  }
 else   if (dir == 2) {
    t.objectValue|=0x10;
  }
 else   if (dir == 3) {
    t.objectValue|=0x20;
  }
  setTileValue(x,y,t.toTileValue());
}",0.5947565543071162
152201,"/** 
 * Removes an object from the map
 */
public void unregisterObject(GameObject o){
  if (o.getGameObjectDef().getType() != 1 && o.getGameObjectDef().getType() != 2) {
    return;
  }
  int dir=o.getDirection();
  int width, height;
  if (dir == 0 || dir == 4) {
    width=o.getGameObjectDef().getWidth();
    height=o.getGameObjectDef().getHeight();
  }
 else {
    height=o.getGameObjectDef().getWidth();
    width=o.getGameObjectDef().getHeight();
  }
  for (int x=o.getX(); x < o.getX() + width; x++) {
    for (int y=o.getY(); y < o.getY() + height; y++) {
      if (o.getGameObjectDef().getType() == 1) {
        getTileValue(x,y).objectValue&=0xffbf;
      }
 else       if (dir == 0) {
        getTileValue(x,y).objectValue&=0xfffd;
        getTileValue(x - 1,y).objectValue&=65535 - 8;
      }
 else       if (dir == 2) {
        getTileValue(x,y).objectValue&=0xfffb;
        getTileValue(x,y + 1).objectValue&=65535 - 1;
      }
 else       if (dir == 4) {
        getTileValue(x,y).objectValue&=0xfff7;
        getTileValue(x + 1,y).objectValue&=65535 - 2;
      }
 else       if (dir == 6) {
        getTileValue(x,y).objectValue&=0xfffe;
        getTileValue(x,y - 1).objectValue&=65535 - 4;
      }
    }
  }
}","/** 
 * Removes an object from the map
 */
public void unregisterObject(GameObject o){
  if (o.getGameObjectDef().getType() != 1 && o.getGameObjectDef().getType() != 2) {
    return;
  }
  int dir=o.getDirection();
  int width, height;
  if (dir == 0 || dir == 4) {
    width=o.getGameObjectDef().getWidth();
    height=o.getGameObjectDef().getHeight();
  }
 else {
    height=o.getGameObjectDef().getWidth();
    width=o.getGameObjectDef().getHeight();
  }
  for (int x=o.getX(); x < o.getX() + width; x++) {
    for (int y=o.getY(); y < o.getY() + height; y++) {
      MutableTileValue t=new MutableTileValue(getTileValue(x,y));
      if (o.getGameObjectDef().getType() == 1) {
        t.objectValue&=0xffbf;
      }
 else       if (dir == 0) {
        t.objectValue&=0xfffd;
        MutableTileValue t1=new MutableTileValue(getTileValue(x - 1,y));
        t1.objectValue&=65535 - 8;
        setTileValue(x - 1,y,t1.toTileValue());
      }
 else       if (dir == 2) {
        t.objectValue&=0xfffb;
        MutableTileValue t1=new MutableTileValue(getTileValue(x,y + 1));
        t1.objectValue&=65535 - 1;
        setTileValue(x,y + 1,t1.toTileValue());
      }
 else       if (dir == 4) {
        t.objectValue&=0xfff7;
        MutableTileValue t1=new MutableTileValue(getTileValue(x + 1,y));
        t1.objectValue&=65535 - 2;
        setTileValue(x + 1,y,t1.toTileValue());
      }
 else       if (dir == 6) {
        t.objectValue&=0xfffe;
        MutableTileValue t1=new MutableTileValue(getTileValue(x,y - 1));
        t1.objectValue&=65535 - 4;
        setTileValue(x,y - 1,t1.toTileValue());
      }
      setTileValue(x,y,t.toTileValue());
    }
  }
}",0.6496022137668627
152202,"public void handleMining(final GameObject object,Player owner,int click){
  if (owner.isBusy() && !owner.inCombat()) {
    return;
  }
  if (!owner.withinRange(object,1))   return;
  final GameObject newobject=Instance.getWorld().getTile(object.getX(),object.getY()).getGameObject();
  final ObjectMiningDef def=EntityHandler.getObjectMiningDef(newobject.getID());
  if (def == null || def.getRespawnTime() < 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final InvItem ore=new InvItem(def.getOreId());
  if (owner.getClick() == 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
    return;
  }
  if (owner.getCurStat(14) < def.getReqLevel()) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + def.getReqLevel() + ""String_Node_Str"");
    return;
  }
  int axeId=getAxe(owner);
  if (axeId < 0) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final int axeID=axeId;
  int retrytimes=-1;
  final int swings=owner.getSkillLoops();
  final int mineLvl=owner.getCurStat(14);
  int reqlvl=1;
switch (axeID) {
case 1258:
    retrytimes=2;
  break;
case 1259:
retrytimes=4;
reqlvl=6;
break;
case 1260:
retrytimes=6;
reqlvl=21;
break;
case 1261:
retrytimes=8;
reqlvl=31;
break;
case 1262:
retrytimes=12;
reqlvl=41;
break;
}
if (reqlvl > mineLvl) {
owner.getActionSender().sendMessage(""String_Node_Str"" + reqlvl + ""String_Node_Str"");
return;
}
owner.setBusy(true);
owner.getActionSender().sendSound(""String_Node_Str"");
Bubble bubble=new Bubble(owner,axeId);
for (Player p : owner.getViewArea().getPlayersInView()) {
p.informOfBubble(bubble);
}
final int retrytime=retrytimes;
owner.setLastMineTimer(GameEngine.getTime());
owner.getActionSender().sendMessage(""String_Node_Str"");
Instance.getDelayedEventHandler().add(new ShortEvent(owner){
public void action(){
if (Formulae.getOre(def,owner.getCurStat(14),axeID)) {
if (DataConversions.random(0,200) == 0) {
InvItem gem=new InvItem(Formulae.getGem(),1);
owner.incExp(14,100,true);
owner.getInventory().add(gem);
owner.getActionSender().sendMessage(""String_Node_Str"");
}
 else {
owner.getInventory().add(ore);
owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
owner.setSkillLoops(0);
owner.incExp(14,def.getExp(),true);
owner.getActionSender().sendStat(14);
world.registerGameObject(new GameObject(object.getLocation(),98,object.getDirection(),object.getType()));
world.delayedSpawnObject(newobject.getLoc(),def.getRespawnTime() * 1000);
}
owner.getActionSender().sendInventory();
}
 else {
boolean retry=false;
if (retrytime >= swings) retry=true;
owner.getActionSender().sendMessage(""String_Node_Str"");
if (retry) {
world.getDelayedEventHandler().add(new SingleEvent(owner,500){
public void action(){
owner.setSkillLoops(swings + 1);
handleMining(object,owner,owner.getClick());
}
}
);
}
if (!retry) {
owner.isMining(false);
owner.setSkillLoops(0);
}
}
owner.setBusy(false);
}
}
);
}","public void handleMining(final GameObject object,Player owner,int click){
  if (owner.isBusy() && !owner.inCombat()) {
    return;
  }
  if (!owner.withinRange(object,1))   return;
  final GameObject newobject=Instance.getWorld().getTile(object.getX(),object.getY()).getGameObject();
  final ObjectMiningDef def=EntityHandler.getObjectMiningDef(newobject.getID());
  if (def == null || def.getRespawnTime() < 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final InvItem ore=new InvItem(def.getOreId());
  if (owner.getClick() == 1) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
    return;
  }
  if (owner.getCurStat(14) < def.getReqLevel()) {
    owner.getActionSender().sendMessage(""String_Node_Str"" + def.getReqLevel() + ""String_Node_Str"");
    return;
  }
  int axeId=getAxe(owner);
  if (axeId < 0) {
    owner.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  final int axeID=axeId;
  int retrytimes=-1;
  final int swings=owner.getSkillLoops();
  final int mineLvl=owner.getCurStat(14);
  int reqlvl=1;
switch (axeID) {
case 1258:
    retrytimes=2;
  break;
case 1259:
retrytimes=4;
reqlvl=6;
break;
case 1260:
retrytimes=6;
reqlvl=21;
break;
case 1261:
retrytimes=8;
reqlvl=31;
break;
case 1262:
retrytimes=12;
reqlvl=41;
break;
}
if (reqlvl > mineLvl) {
owner.getActionSender().sendMessage(""String_Node_Str"" + reqlvl + ""String_Node_Str"");
return;
}
owner.setBusy(true);
owner.getActionSender().sendSound(""String_Node_Str"");
Bubble bubble=new Bubble(owner,axeId);
for (Player p : owner.getViewArea().getPlayersInView()) {
p.informOfBubble(bubble);
}
final int retrytime=retrytimes;
owner.setLastMineTimer(GameEngine.getTime());
owner.getActionSender().sendMessage(""String_Node_Str"");
Instance.getDelayedEventHandler().add(new ShortEvent(owner){
public void action(){
if (Formulae.getOre(def,owner.getCurStat(14),axeID)) {
if (DataConversions.random(0,200) == 0) {
InvItem gem=new InvItem(Formulae.getGem(),1);
owner.incExp(14,100,true);
owner.getInventory().add(gem);
owner.getActionSender().sendMessage(""String_Node_Str"");
}
 else {
owner.getInventory().add(ore);
owner.getActionSender().sendMessage(""String_Node_Str"" + ore.getDef().getName() + ""String_Node_Str"");
owner.incExp(14,def.getExp(),true);
owner.getActionSender().sendStat(14);
world.registerGameObject(new GameObject(object.getLocation(),98,object.getDirection(),object.getType()));
world.delayedSpawnObject(newobject.getLoc(),def.getRespawnTime() * 1000);
}
owner.isMining(false);
owner.setSkillLoops(0);
owner.getActionSender().sendInventory();
}
 else {
boolean retry=false;
if (retrytime - swings > 0) retry=true;
owner.getActionSender().sendMessage(""String_Node_Str"");
if (retry) {
world.getDelayedEventHandler().add(new SingleEvent(owner,500){
public void action(){
owner.setSkillLoops(swings + 1);
handleMining(object,owner,owner.getClick());
}
}
);
}
if (!retry) {
owner.isMining(false);
owner.setSkillLoops(0);
}
}
owner.setBusy(false);
}
}
);
}",0.9851337958374627
152203,"@Override public PlayerSave loadPlayer(long user){
  PlayerSave save=new PlayerSave(user);
  save.setLocation(213,452);
  save.setAppearance((byte)2,(byte)8,(byte)14,(byte)0,(byte)1,(byte)2,true,0l);
  int[] arrayOfOnes=new int[Config.statArray.length];
  Arrays.fill(arrayOfOnes,1);
  save.setExp(arrayOfOnes.clone());
  save.setCurStats(arrayOfOnes.clone());
  return save;
}","@Override public PlayerSave loadPlayer(long user){
  PlayerSave save=new PlayerSave(user);
  save.setLocation(213,452);
  save.setAppearance((byte)2,(byte)8,(byte)14,(byte)0,(byte)1,(byte)2,true,0l);
  int[] exp=new int[Config.statArray.length];
  Arrays.fill(exp,1);
  int[] stats=exp.clone();
  exp[3]=1200;
  save.setExp(exp);
  stats[3]=10;
  save.setCurStats(stats);
  return save;
}",0.6196078431372549
152204,"public void handlePacket(Packet p,IoSession session) throws Exception {
  Player player=(Player)session.getAttachment();
  if (!player.canReport()) {
    player.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  long temp=-121;
  byte b=1;
  try {
    temp=p.readLong();
    b=p.readByte();
  }
 catch (  Exception e) {
    return;
  }
 finally {
    if (temp == player.getUsernameHash()) {
      player.getActionSender().sendMessage(""String_Node_Str"");
      return;
    }
    AlertHandler.sendAlert(player.getUsername() + ""String_Node_Str"" + DataConversions.hashToUsername(temp),1);
    Instance.getReport().submitRepot(player.getUsernameHash(),temp,b,player);
    player.setLastReport();
    world.addEntryToSnapshots(new Activity(player.getUsername(),player.getUsername() + ""String_Node_Str"" + DataConversions.hashToUsername(temp)));
    player.getActionSender().sendMessage(""String_Node_Str"");
  }
}","public void handlePacket(Packet p,IoSession session) throws Exception {
  Player player=(Player)session.getAttachment();
  if (!player.canReport()) {
    player.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  long temp=-121;
  byte b=1;
  try {
    temp=p.readLong();
    b=p.readByte();
  }
 catch (  Exception e) {
    return;
  }
 finally {
    if (temp == player.getUsernameHash()) {
      player.getActionSender().sendMessage(""String_Node_Str"");
      return;
    }
    AlertHandler.sendAlert(player.getUsername() + ""String_Node_Str"" + DataConversions.hashToUsername(temp),1);
    Instance.getReport().submitReport(player.getUsernameHash(),temp,b,player);
    player.setLastReport();
    world.addEntryToSnapshots(new Activity(player.getUsername(),player.getUsername() + ""String_Node_Str"" + DataConversions.hashToUsername(temp)));
    player.getActionSender().sendMessage(""String_Node_Str"");
  }
}",0.9994574064026044
152205,"public final void run(){
  if (stop && owner.withinRange(location,radius)) {
    owner.resetPath();
    arrived();
  }
 else   if (owner.hasMoved()) {
    return;
  }
 else   if (owner.withinRange(location,radius)) {
    arrived();
  }
  super.matchRunning=false;
}","public final void run(){
  if (stop && owner.withinRange(location,radius)) {
    arrived();
    owner.resetPath();
  }
 else   if (owner.hasMoved()) {
    return;
  }
 else   if (owner.withinRange(location,radius)) {
    arrived();
  }
  super.matchRunning=false;
}",0.9433962264150944
152206,"public void handlePacket(Packet p,IoSession session) throws Exception {
  Player player=(Player)session.getAttachment();
  if (player.isBusy()) {
    player.resetPath();
    return;
  }
  player.resetAll();
  Point location=Point.location(p.readShort(),p.readShort());
  int id=p.readShort();
  final ActiveTile tile=world.getTile(location);
  final Item item=getItem(id,tile,player);
  if (item == null) {
    player.resetPath();
    return;
  }
  if (!item.getDef().canTrade()) {
    if (item.droppedby() != 0 && org.moparscape.msc.gs.tools.DataConversions.usernameToHash(player.getUsername()) != item.droppedby()) {
      player.getActionSender().sendMessage(""String_Node_Str"");
      return;
    }
  }
  if (player.isPMod() && !player.isMod())   return;
  if (item.getDef().isMembers() && !World.isMembers()) {
    player.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  player.setStatus(Action.TAKING_GITEM);
  Instance.getDelayedEventHandler().add(new WalkToPointEvent(player,location,0,true){
    public void arrived(){
      if (owner.isBusy() || owner.isRanging() || !tile.hasItem(item)|| !owner.nextTo(item)|| owner.getStatus() != Action.TAKING_GITEM) {
        return;
      }
      if (item.getID() == 23) {
        owner.getActionSender().sendMessage(""String_Node_Str"");
        owner.getActionSender().sendMessage(""String_Node_Str"");
        return;
      }
      int[] Rares={576,577,578,579,580,581,828,831,832,1278,593,594,795};
      boolean pickedUpRare=false;
      if (item.getAmount() > 99999)       pickedUpRare=true;
      for (int i=0; i < Rares.length; i++) {
        if (item.getID() == Rares[i]) {
          pickedUpRare=true;
          break;
        }
      }
      owner.resetAll();
      InvItem invItem=new InvItem(item.getID(),item.getAmount());
      if (!owner.getInventory().canHold(invItem)) {
        owner.getActionSender().sendMessage(""String_Node_Str"");
        return;
      }
      try {
        if (item.getID() == 59 && item.getX() == 106 && item.getY() == 1476) {
          Npc n=world.getNpc(37,103,107,1476,1479);
          if (n != null && !n.inCombat()) {
            owner.informOfNpcMessage(new ChatMessage(n,""String_Node_Str"",owner));
            fight(owner,n);
          }
        }
 else         if (item.getID() == 501 && item.getX() == 333 && item.getY() == 434) {
          Npc zam=world.getNpc(140,328,333,433,438,true);
          if (zam != null && !zam.inCombat()) {
            owner.informOfNpcMessage(new ChatMessage(zam,""String_Node_Str"",owner));
            for (int i=0; i < 3; i++) {
              int stat=owner.getCurStat(i);
              if (stat < 3)               owner.setCurStat(i,0);
 else               owner.setCurStat(i,stat - 3);
            }
            owner.getActionSender().sendStats();
            fight(owner,zam);
            return;
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (pickedUpRare) {
        MiscPacketBuilder loginServer=Instance.getServer().getLoginConnector().getActionSender();
        final long droppedby=item.droppedby();
        final long playerLong=org.moparscape.msc.gs.tools.DataConversions.usernameToHash(owner.getUsername());
        loginServer.tradeLog(droppedby,playerLong,item.getID(),item.getAmount(),owner.getX(),owner.getY(),3);
      }
      world.addEntryToSnapshots(new Activity(owner.getUsername(),owner.getUsername() + ""String_Node_Str"" + item.getDef().getName()+ ""String_Node_Str""+ item.getID()+ ""String_Node_Str""+ item.getAmount()+ ""String_Node_Str""+ owner.getX()+ ""String_Node_Str""+ owner.getY()+ ""String_Node_Str""+ item.getX()+ ""String_Node_Str""+ item.getY()));
      if (item.getAmount() > 10000000 || Formulae.isRareItem(item.getID()))       DBConnection.getReport().submitDupeData(owner.getUsername(),owner.getUsernameHash());
      world.unregisterItem(item);
      owner.getActionSender().sendSound(""String_Node_Str"");
      owner.getInventory().add(invItem);
      owner.getActionSender().sendInventory();
    }
  }
);
}","public void handlePacket(Packet p,IoSession session) throws Exception {
  Player player=(Player)session.getAttachment();
  if (player.isBusy()) {
    player.resetPath();
    return;
  }
  player.resetAll();
  Point location=Point.location(p.readShort(),p.readShort());
  int id=p.readShort();
  final ActiveTile tile=world.getTile(location);
  final Item item=getItem(id,tile,player);
  if (item == null) {
    player.resetPath();
    return;
  }
  if (!item.getDef().canTrade()) {
    if (item.droppedby() != 0 && org.moparscape.msc.gs.tools.DataConversions.usernameToHash(player.getUsername()) != item.droppedby()) {
      player.getActionSender().sendMessage(""String_Node_Str"");
      return;
    }
  }
  if (player.isPMod() && !player.isMod())   return;
  if (item.getDef().isMembers() && !World.isMembers()) {
    player.getActionSender().sendMessage(""String_Node_Str"");
    return;
  }
  player.setStatus(Action.TAKING_GITEM);
  int distance=tile.hasGameObject() ? 1 : 0;
  Instance.getDelayedEventHandler().add(new WalkToPointEvent(player,location,distance,true){
    public void arrived(){
      if (owner.isBusy() || owner.isRanging() || !tile.hasItem(item)|| !owner.nextTo(item)|| owner.getStatus() != Action.TAKING_GITEM) {
        return;
      }
      if (item.getID() == 23) {
        owner.getActionSender().sendMessage(""String_Node_Str"");
        owner.getActionSender().sendMessage(""String_Node_Str"");
        return;
      }
      int[] Rares={576,577,578,579,580,581,828,831,832,1278,593,594,795};
      boolean pickedUpRare=false;
      if (item.getAmount() > 99999)       pickedUpRare=true;
      for (int i=0; i < Rares.length; i++) {
        if (item.getID() == Rares[i]) {
          pickedUpRare=true;
          break;
        }
      }
      owner.resetAll();
      InvItem invItem=new InvItem(item.getID(),item.getAmount());
      if (!owner.getInventory().canHold(invItem)) {
        owner.getActionSender().sendMessage(""String_Node_Str"");
        return;
      }
      try {
        if (item.getID() == 59 && item.getX() == 106 && item.getY() == 1476) {
          Npc n=world.getNpc(37,103,107,1476,1479);
          if (n != null && !n.inCombat()) {
            owner.informOfNpcMessage(new ChatMessage(n,""String_Node_Str"",owner));
            fight(owner,n);
          }
        }
 else         if (item.getID() == 501 && item.getX() == 333 && item.getY() == 434) {
          Npc zam=world.getNpc(140,328,333,433,438,true);
          if (zam != null && !zam.inCombat()) {
            owner.informOfNpcMessage(new ChatMessage(zam,""String_Node_Str"",owner));
            for (int i=0; i < 3; i++) {
              int stat=owner.getCurStat(i);
              if (stat < 3)               owner.setCurStat(i,0);
 else               owner.setCurStat(i,stat - 3);
            }
            owner.getActionSender().sendStats();
            fight(owner,zam);
            return;
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (pickedUpRare) {
        MiscPacketBuilder loginServer=Instance.getServer().getLoginConnector().getActionSender();
        final long droppedby=item.droppedby();
        final long playerLong=org.moparscape.msc.gs.tools.DataConversions.usernameToHash(owner.getUsername());
        loginServer.tradeLog(droppedby,playerLong,item.getID(),item.getAmount(),owner.getX(),owner.getY(),3);
      }
      world.addEntryToSnapshots(new Activity(owner.getUsername(),owner.getUsername() + ""String_Node_Str"" + item.getDef().getName()+ ""String_Node_Str""+ item.getID()+ ""String_Node_Str""+ item.getAmount()+ ""String_Node_Str""+ owner.getX()+ ""String_Node_Str""+ owner.getY()+ ""String_Node_Str""+ item.getX()+ ""String_Node_Str""+ item.getY()));
      if (item.getAmount() > 10000000 || Formulae.isRareItem(item.getID()))       DBConnection.getReport().submitDupeData(owner.getUsername(),owner.getUsernameHash());
      world.unregisterItem(item);
      owner.getActionSender().sendSound(""String_Node_Str"");
      owner.getInventory().add(invItem);
      owner.getActionSender().sendInventory();
    }
  }
);
}",0.9933579335793358
152207,"/** 
 * Performs coordinate checks on the locations in the P2P_LOCS array to decide whether items/object/npc's/general x,y coordinates are in P2P area
 * @param objs - ItemLoc, GameObjectLoc, NPCLoc or an Integer.
 * @return - true if inside P2P area, otherwise false.
 */
public static boolean isP2P(boolean f2pwildy,Object... objs){
  int x=-1;
  int y=-1;
  if (objs.length == 1) {
    Object obj=objs[0];
    if (obj instanceof GameObjectLoc) {
      x=((GameObjectLoc)obj).x;
      y=((GameObjectLoc)obj).y;
    }
 else     if ((obj instanceof ItemLoc)) {
      x=((ItemLoc)obj).x;
      y=((ItemLoc)obj).y;
    }
 else     if (obj instanceof NPCLoc) {
      x=((NPCLoc)obj).startX;
      y=((NPCLoc)obj).startY;
    }
  }
 else {
    if (objs[0] instanceof Integer && objs[1] instanceof Integer) {
      x=(Integer)objs[0];
      y=(Integer)objs[1];
    }
  }
  if (x == -1)   return false;
  if (!f2pwildy) {
    for (int i=0; i < P2P_LOCS.length; i++) {
      for (int ele=0; ele < 4; ele++) {
        if (x >= P2P_LOCS[i][0].getX() && x <= P2P_LOCS[i][1].getX() && y >= P2P_LOCS[i][0].getY() + ((ele) * 944) && y <= P2P_LOCS[i][1].getY() + ((ele) * 944))         return true;
      }
    }
  }
 else {
    for (int i=0; i < F2PWILD_LOCS.length; i++) {
      for (int ele=0; ele < 4; ele++) {
        if (x >= F2PWILD_LOCS[i][0].getX() && x <= F2PWILD_LOCS[i][1].getX() && y >= F2PWILD_LOCS[i][0].getY() + ((ele) * 944) && y <= F2PWILD_LOCS[i][1].getY() + ((ele) * 944))         return true;
      }
    }
  }
  return false;
}","/** 
 * Performs coordinate checks on the locations in the P2P_LOCS array to decide whether items/object/npc's/general x,y coordinates are in P2P area
 * @param objs - ItemLoc, GameObjectLoc, NPCLoc or an Integer.
 * @return - true if inside P2P area, otherwise false.
 */
public static boolean isP2P(Boolean f2pwildy,Object... objs){
  int x=-1;
  int y=-1;
  if (objs.length == 1) {
    Object obj=objs[0];
    if (obj instanceof GameObjectLoc) {
      x=((GameObjectLoc)obj).x;
      y=((GameObjectLoc)obj).y;
    }
 else     if ((obj instanceof ItemLoc)) {
      x=((ItemLoc)obj).x;
      y=((ItemLoc)obj).y;
    }
 else     if (obj instanceof NPCLoc) {
      x=((NPCLoc)obj).startX;
      y=((NPCLoc)obj).startY;
    }
  }
 else {
    if (objs[0] instanceof Integer && objs[1] instanceof Integer) {
      x=(Integer)objs[0];
      y=(Integer)objs[1];
    }
  }
  if (x == -1)   return false;
  if (!f2pwildy) {
    for (int i=0; i < P2P_LOCS.length; i++) {
      for (int ele=0; ele < 4; ele++) {
        if (x >= P2P_LOCS[i][0].getX() && x <= P2P_LOCS[i][1].getX() && y >= P2P_LOCS[i][0].getY() + ((ele) * 944) && y <= P2P_LOCS[i][1].getY() + ((ele) * 944))         return true;
      }
    }
  }
 else {
    for (int i=0; i < F2PWILD_LOCS.length; i++) {
      for (int ele=0; ele < 4; ele++) {
        if (x >= F2PWILD_LOCS[i][0].getX() && x <= F2PWILD_LOCS[i][1].getX() && y >= F2PWILD_LOCS[i][0].getY() + ((ele) * 944) && y <= F2PWILD_LOCS[i][1].getY() + ((ele) * 944))         return true;
      }
    }
  }
  return false;
}",0.9993485342019544
152208,"@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      tile=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).g == Type.BASIC)     player.b(StatisticList.ac);
 else     if (((BlockChest)block).g == Type.TRAP) {
      player.b(StatisticList.W);
    }
  }
  boolean returnValue=false;
  if (!silentchest) {
    player.openContainer((IInventory)tile);
    returnValue=true;
  }
 else {
    try {
      SilentContainerChest silentContainerChest=new SilentContainerChest(player.inventory,((IInventory)tile),player);
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,""String_Node_Str"",((IInventory)tile).getScoreboardDisplayName(),((IInventory)tile).getSize()));
      player.activeContainer=silentContainerChest;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}","@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).g == Type.BASIC) {
      player.b(StatisticList.ac);
    }
 else     if (((BlockChest)block).g == Type.TRAP) {
      player.b(StatisticList.W);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}",0.7969252770825885
152209,"@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  final World world=player.world;
  final BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    BlockChest blockChest=(BlockChest)block;
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (blockChest.g == Type.BASIC)     player.b(StatisticList.ac);
 else     if (blockChest.g == Type.TRAP) {
      player.b(StatisticList.W);
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
  }
  if (block instanceof BlockShulkerBox) {
    player.b(StatisticList.ae);
    if (silentchest && tile instanceof TileEntityShulkerBox) {
      SilentContainerShulkerBox.setOpenValue((TileEntityShulkerBox)tile,SilentContainerShulkerBox.getOpenValue((TileEntityShulkerBox)tile) + 1);
      container=new SilentContainerShulkerBox(player.inventory,(IInventory)tile,player);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
      if (tile instanceof TileEntityShulkerBox) {
        new BukkitRunnable(){
          @Override public void run(){
            Object tile=world.getTileEntity(blockPosition);
            if (!(tile instanceof TileEntityShulkerBox)) {
              return;
            }
            TileEntityShulkerBox box=(TileEntityShulkerBox)tile;
            SilentContainerShulkerBox.setOpenValue(box,SilentContainerShulkerBox.getOpenValue((TileEntityShulkerBox)tile) - 2);
          }
        }
.runTaskLater(Bukkit.getPluginManager().getPlugin(""String_Node_Str""),2);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}","@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  final World world=player.world;
  final BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    BlockChest blockChest=(BlockChest)block;
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (blockChest.g == Type.BASIC) {
      player.b(StatisticList.ac);
    }
 else     if (blockChest.g == Type.TRAP) {
      player.b(StatisticList.W);
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
  }
  if (block instanceof BlockShulkerBox) {
    player.b(StatisticList.ae);
    if (silentchest && tile instanceof TileEntityShulkerBox) {
      SilentContainerShulkerBox.setOpenValue((TileEntityShulkerBox)tile,SilentContainerShulkerBox.getOpenValue((TileEntityShulkerBox)tile) + 1);
      container=new SilentContainerShulkerBox(player.inventory,(IInventory)tile,player);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
      if (tile instanceof TileEntityShulkerBox) {
        new BukkitRunnable(){
          @Override public void run(){
            Object tile=world.getTileEntity(blockPosition);
            if (!(tile instanceof TileEntityShulkerBox)) {
              return;
            }
            TileEntityShulkerBox box=(TileEntityShulkerBox)tile;
            SilentContainerShulkerBox.setOpenValue(box,SilentContainerShulkerBox.getOpenValue((TileEntityShulkerBox)tile) - 2);
          }
        }
.runTaskLater(Bukkit.getPluginManager().getPlugin(""String_Node_Str""),2);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}",0.9986716259298618
152210,"@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.values()) {
      if (!localEnumDirection.k().c()) {
        continue;
      }
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      tile=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
  }
  boolean returnValue=false;
  if (!silentchest) {
    player.openContainer((IInventory)tile);
    returnValue=true;
  }
 else {
    try {
      SilentContainerChest silentContainerChest=new SilentContainerChest(player.inventory,((IInventory)tile),player);
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,""String_Node_Str"",((IInventory)tile).getScoreboardDisplayName(),((IInventory)tile).getSize()));
      player.activeContainer=silentContainerChest;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}","@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.values()) {
      if (!localEnumDirection.k().c()) {
        continue;
      }
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}",0.7841257668711656
152211,"@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.V);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.V);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      tile=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).b == 0)     player.b(StatisticList.aa);
 else     if (((BlockChest)block).b == 1) {
      player.b(StatisticList.U);
    }
  }
  boolean returnValue=false;
  if (!silentchest) {
    player.openContainer((IInventory)tile);
    returnValue=true;
  }
 else {
    try {
      SilentContainerChest silentContainerChest=new SilentContainerChest(player.inventory,((IInventory)tile),player);
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,""String_Node_Str"",((IInventory)tile).getScoreboardDisplayName(),((IInventory)tile).getSize()));
      player.activeContainer=silentContainerChest;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}","@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.V);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.V);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).b == 0) {
      player.b(StatisticList.aa);
    }
 else     if (((BlockChest)block).b == 1) {
      player.b(StatisticList.U);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}",0.7956834532374101
152212,"@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.V);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.V);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      tile=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).b == 0)     player.b(StatisticList.aa);
 else     if (((BlockChest)block).b == 1) {
      player.b(StatisticList.U);
    }
  }
  boolean returnValue=false;
  if (!silentchest) {
    player.openContainer((IInventory)tile);
    returnValue=true;
  }
 else {
    try {
      SilentContainerChest silentContainerChest=new SilentContainerChest(player.inventory,((IInventory)tile),player);
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,""String_Node_Str"",((IInventory)tile).getScoreboardDisplayName(),((IInventory)tile).getSize()));
      player.activeContainer=silentContainerChest;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}","@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.V);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.V);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).b == 0) {
      player.b(StatisticList.aa);
    }
 else     if (((BlockChest)block).b == 1) {
      player.b(StatisticList.U);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}",0.7956834532374101
152213,"@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      tile=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).g == BlockChest.Type.BASIC)     player.b(StatisticList.ac);
 else     if (((BlockChest)block).g == BlockChest.Type.TRAP) {
      player.b(StatisticList.W);
    }
  }
  boolean returnValue=false;
  if (!silentchest) {
    player.openContainer((IInventory)tile);
    returnValue=true;
  }
 else {
    try {
      SilentContainerChest silentContainerChest=new SilentContainerChest(player.inventory,((IInventory)tile),player);
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,""String_Node_Str"",((IInventory)tile).getScoreboardDisplayName(),((IInventory)tile).getSize()));
      player.activeContainer=silentContainerChest;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}","@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).g == BlockChest.Type.BASIC)     player.b(StatisticList.ac);
 else     if (((BlockChest)block).g == BlockChest.Type.TRAP) {
      player.b(StatisticList.W);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}",0.7999289267945985
152214,"@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      tile=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).g == BlockChest.Type.BASIC)     player.b(StatisticList.ac);
 else     if (((BlockChest)block).g == BlockChest.Type.TRAP) {
      player.b(StatisticList.W);
    }
  }
  boolean returnValue=false;
  if (!silentchest) {
    player.openContainer((IInventory)tile);
    returnValue=true;
  }
 else {
    try {
      SilentContainerChest silentContainerChest=new SilentContainerChest(player.inventory,((IInventory)tile),player);
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,""String_Node_Str"",((IInventory)tile).getScoreboardDisplayName(),((IInventory)tile).getSize()));
      player.activeContainer=silentContainerChest;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}","@Override public boolean activateContainer(Player p,boolean silentchest,org.bukkit.block.Block b){
  EntityPlayer player=((CraftPlayer)p).getHandle();
  if (silentchest && b.getType() == Material.ENDER_CHEST) {
    p.openInventory(p.getEnderChest());
    player.b(StatisticList.X);
    return true;
  }
  World world=player.world;
  BlockPosition blockPosition=new BlockPosition(b.getX(),b.getY(),b.getZ());
  Object tile=world.getTileEntity(blockPosition);
  if (tile == null) {
    return false;
  }
  if (tile instanceof TileEntityEnderChest) {
    InventoryEnderChest enderChest=player.getEnderChest();
    enderChest.a((TileEntityEnderChest)tile);
    player.openContainer(enderChest);
    player.b(StatisticList.X);
    return true;
  }
  if (!(tile instanceof IInventory)) {
    return false;
  }
  Block block=world.getType(blockPosition).getBlock();
  Container container=null;
  if (block instanceof BlockChest) {
    for (    EnumDirection localEnumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
      BlockPosition localBlockPosition=blockPosition.shift(localEnumDirection);
      Block localBlock=world.getType(localBlockPosition).getBlock();
      if (localBlock != block) {
        continue;
      }
      TileEntity localTileEntity=world.getTileEntity(localBlockPosition);
      if (!(localTileEntity instanceof TileEntityChest)) {
        continue;
      }
      if ((localEnumDirection == EnumDirection.WEST) || (localEnumDirection == EnumDirection.NORTH)) {
        tile=new InventoryLargeChest(""String_Node_Str"",(TileEntityChest)localTileEntity,(ITileInventory)tile);
      }
 else {
        tile=new InventoryLargeChest(""String_Node_Str"",(ITileInventory)tile,(TileEntityChest)localTileEntity);
      }
      break;
    }
    if (silentchest) {
      container=new SilentContainerChest(player.inventory,((IInventory)tile),player);
    }
    if (((BlockChest)block).g == BlockChest.Type.BASIC) {
      player.b(StatisticList.ac);
    }
 else     if (((BlockChest)block).g == BlockChest.Type.TRAP) {
      player.b(StatisticList.W);
    }
  }
  boolean returnValue=false;
  final IInventory iInventory=(IInventory)tile;
  if (!silentchest || container == null) {
    player.openContainer(iInventory);
    returnValue=true;
  }
 else {
    try {
      int windowId=player.nextContainerCounter();
      player.playerConnection.sendPacket(new PacketPlayOutOpenWindow(windowId,iInventory.getName(),iInventory.getScoreboardDisplayName(),iInventory.getSize()));
      player.activeContainer=container;
      player.activeContainer.windowId=windowId;
      player.activeContainer.addSlotListener(player);
      returnValue=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  return returnValue;
}",0.7985101099680738
152215,"private boolean isBlockedShulkerBox(World world,BlockPosition blockPosition,IBlockData blockData){
  TileEntity tile=world.getTileEntity(blockPosition);
  if (!(tile instanceof TileEntityShulkerBox)) {
    return false;
  }
  EnumDirection enumDirection=blockData.get(BlockShulkerBox.a);
  if (((TileEntityShulkerBox)tile).p() == TileEntityShulkerBox.AnimationPhase.CLOSED) {
    AxisAlignedBB axisAlignedBB=Block.j.b(0.5F * enumDirection.getAdjacentX(),0.5F * enumDirection.getAdjacentY(),0.5F * enumDirection.getAdjacentZ()).a(enumDirection.getAdjacentX(),enumDirection.getAdjacentY(),enumDirection.getAdjacentZ());
    try {
      return world.a(axisAlignedBB.a(blockPosition.shift(enumDirection)));
    }
 catch (    Exception e) {
      return world.b(axisAlignedBB.a(blockPosition.shift(enumDirection)));
    }
  }
  return false;
}","private boolean isBlockedShulkerBox(World world,BlockPosition blockPosition,IBlockData blockData){
  TileEntity tile=world.getTileEntity(blockPosition);
  if (!(tile instanceof TileEntityShulkerBox)) {
    return false;
  }
  EnumDirection enumDirection=blockData.get(BlockShulkerBox.a);
  if (((TileEntityShulkerBox)tile).p() == TileEntityShulkerBox.AnimationPhase.CLOSED) {
    AxisAlignedBB axisAlignedBB=Block.j.b(0.5F * enumDirection.getAdjacentX(),0.5F * enumDirection.getAdjacentY(),0.5F * enumDirection.getAdjacentZ()).a(enumDirection.getAdjacentX(),enumDirection.getAdjacentY(),enumDirection.getAdjacentZ());
    try {
      return world.a(axisAlignedBB.a(blockPosition.shift(enumDirection)));
    }
 catch (    NoSuchMethodError e) {
      return world.b(axisAlignedBB.a(blockPosition.shift(enumDirection)));
    }
  }
  return false;
}",0.9358669833729216
152216,"private void updateConfig(){
  int itemOpenInvItemId=plugin.getConfig().getInt(""String_Node_Str"",280);
  boolean checkForUpdates=plugin.getConfig().getBoolean(""String_Node_Str"",true);
  boolean notifySilentChest=plugin.getConfig().getBoolean(""String_Node_Str"",true);
  boolean notifyAnyChest=plugin.getConfig().getBoolean(""String_Node_Str"",true);
  Map<UUID,Boolean> anyChestToggles=null;
  Map<UUID,Boolean> itemOpenInvToggles=null;
  Map<UUID,Boolean> silentChestToggles=null;
  if (plugin.getConfig().isSet(""String_Node_Str"")) {
    anyChestToggles=updateAnyChestToggles();
  }
  if (plugin.getConfig().isSet(""String_Node_Str"")) {
    itemOpenInvToggles=updateItemOpenInvToggles();
  }
  if (plugin.getConfig().isSet(""String_Node_Str"")) {
    silentChestToggles=updateSilentChestToggles();
  }
  for (  String key : plugin.getConfig().getKeys(false)) {
    plugin.getConfig().set(key,null);
  }
  plugin.getConfig().set(""String_Node_Str"",LATEST_CONFIG_VERSION);
  plugin.getConfig().set(""String_Node_Str"",checkForUpdates);
  plugin.getConfig().set(""String_Node_Str"",getMaterialById(itemOpenInvItemId).toString());
  plugin.getConfig().set(""String_Node_Str"",notifyAnyChest);
  plugin.getConfig().set(""String_Node_Str"",notifySilentChest);
  if (anyChestToggles != null && !anyChestToggles.isEmpty()) {
    for (    Map.Entry<UUID,Boolean> entry : anyChestToggles.entrySet()) {
      plugin.getConfig().set(""String_Node_Str"" + entry.getKey(),entry.getValue());
    }
  }
  if (itemOpenInvToggles != null && !itemOpenInvToggles.isEmpty()) {
    for (    Map.Entry<UUID,Boolean> entry : itemOpenInvToggles.entrySet()) {
      plugin.getConfig().set(""String_Node_Str"" + entry.getKey(),entry.getValue());
    }
  }
  if (silentChestToggles != null && !silentChestToggles.isEmpty()) {
    for (    Map.Entry<UUID,Boolean> entry : silentChestToggles.entrySet()) {
      plugin.getConfig().set(""String_Node_Str"" + entry.getKey(),entry.getValue());
    }
  }
  plugin.saveConfig();
  plugin.getLogger().info(""String_Node_Str"");
}","private void updateConfig(){
  int itemOpenInvItemId=plugin.getConfig().getInt(""String_Node_Str"",280);
  boolean checkForUpdates=plugin.getConfig().getBoolean(""String_Node_Str"",true);
  boolean notifySilentChest=plugin.getConfig().getBoolean(""String_Node_Str"",true);
  boolean notifyAnyChest=plugin.getConfig().getBoolean(""String_Node_Str"",true);
  Map<UUID,Boolean> anyChestToggles=null;
  Map<UUID,Boolean> itemOpenInvToggles=null;
  Map<UUID,Boolean> silentChestToggles=null;
  if (plugin.getConfig().isSet(""String_Node_Str"")) {
    anyChestToggles=updateAnyChestToggles();
  }
  if (plugin.getConfig().isSet(""String_Node_Str"")) {
    itemOpenInvToggles=updateItemOpenInvToggles();
  }
  if (plugin.getConfig().isSet(""String_Node_Str"")) {
    silentChestToggles=updateSilentChestToggles();
  }
  for (  String key : plugin.getConfig().getKeys(false)) {
    plugin.getConfig().set(key,null);
  }
  plugin.getConfig().set(""String_Node_Str"",CONFIG_VERSION);
  plugin.getConfig().set(""String_Node_Str"",checkForUpdates);
  plugin.getConfig().set(""String_Node_Str"",getMaterialById(itemOpenInvItemId).toString());
  plugin.getConfig().set(""String_Node_Str"",notifyAnyChest);
  plugin.getConfig().set(""String_Node_Str"",notifySilentChest);
  if (anyChestToggles != null && !anyChestToggles.isEmpty()) {
    for (    Map.Entry<UUID,Boolean> entry : anyChestToggles.entrySet()) {
      plugin.getConfig().set(""String_Node_Str"" + entry.getKey(),entry.getValue());
    }
  }
  if (itemOpenInvToggles != null && !itemOpenInvToggles.isEmpty()) {
    for (    Map.Entry<UUID,Boolean> entry : itemOpenInvToggles.entrySet()) {
      plugin.getConfig().set(""String_Node_Str"" + entry.getKey(),entry.getValue());
    }
  }
  if (silentChestToggles != null && !silentChestToggles.isEmpty()) {
    for (    Map.Entry<UUID,Boolean> entry : silentChestToggles.entrySet()) {
      plugin.getConfig().set(""String_Node_Str"" + entry.getKey(),entry.getValue());
    }
  }
  plugin.saveConfig();
  plugin.getLogger().info(""String_Node_Str"");
}",0.9982651796778192
152217,"private boolean isConfigOutdated(){
  return getConfigVersion() < LATEST_CONFIG_VERSION;
}","private boolean isConfigOutdated(){
  return getConfigVersion() < CONFIG_VERSION;
}",0.9595375722543352
152218,"public SpecialPlayerInventory(Player p,boolean online){
  super(((CraftPlayer)p).getHandle());
  this.owner=(CraftPlayer)p;
  this.items=player.inventory.items;
  this.armor=player.inventory.armor;
  this.playerOnline=online;
  OpenInv.inventories.put(owner.getName().toLowerCase(),this);
}","public SpecialPlayerInventory(Player p,Boolean online){
  super(((CraftPlayer)p).getHandle());
  this.owner=(CraftPlayer)p;
  this.items=player.inventory.items;
  this.armor=player.inventory.armor;
  this.playerOnline=online;
  OpenInv.inventories.put(owner.getName().toLowerCase(),this);
}",0.996551724137931
152219,"/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  boolean success=false;
  ServerFtpStatistics stat=(ServerFtpStatistics)context.getFtpStatistics();
  try {
    session.resetState();
    String password=request.getArgument();
    String userName=session.getUserArgument();
    if (userName == null && session.getUser() == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str"",null));
      return;
    }
    if (session.isLoggedIn()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_202_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
      return;
    }
    boolean anonymous=userName != null && userName.equals(""String_Node_Str"");
    if (anonymous) {
      int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
      int maxAnonLogin=context.getConnectionConfig().getMaxAnonymousLogins();
      if (maxAnonLogin == 0) {
        LOG.debug(""String_Node_Str"",currAnonLogin);
      }
 else {
        LOG.debug(""String_Node_Str"",currAnonLogin,maxAnonLogin);
      }
      if (currAnonLogin >= maxAnonLogin) {
        LOG.debug(""String_Node_Str"");
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
        return;
      }
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=context.getConnectionConfig().getMaxLogins();
    if (maxLogin == 0) {
      LOG.debug(""String_Node_Str"",currLogin);
    }
 else {
      LOG.debug(""String_Node_Str"",currLogin,maxLogin);
    }
    if (maxLogin != 0 && currLogin >= maxLogin) {
      LOG.debug(""String_Node_Str"");
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    UserManager userManager=context.getUserManager();
    User authenticatedUser=null;
    try {
      UserMetadata userMetadata=new UserMetadata();
      if (session.getRemoteAddress() instanceof InetSocketAddress) {
        userMetadata.setInetAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress());
      }
      userMetadata.setCertificateChain(session.getClientCertificates());
      Authentication auth;
      if (anonymous) {
        auth=new AnonymousAuthentication(userMetadata);
      }
 else {
        auth=new UsernamePasswordAuthentication(userName,password,userMetadata);
      }
      authenticatedUser=userManager.authenticate(auth);
    }
 catch (    AuthenticationFailedException e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"");
    }
catch (    Exception e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"",e);
    }
    User oldUser=session.getUser();
    String oldUserArgument=session.getUserArgument();
    int oldMaxIdleTime=session.getMaxIdleTime();
    if (authenticatedUser != null) {
      session.setUser(authenticatedUser);
      session.setUserArgument(null);
      session.setMaxIdleTime(authenticatedUser.getMaxIdleTime());
      success=true;
    }
 else {
      session.setUser(null);
    }
    if (!success) {
      session.setUser(oldUser);
      session.setUserArgument(oldUserArgument);
      session.setMaxIdleTime(oldMaxIdleTime);
      delayAfterLoginFailure(context.getConnectionConfig().getLoginFailureDelay());
      LOG.warn(""String_Node_Str"" + userName);
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",userName));
      stat.setLoginFail(session);
      session.increaseFailedLogins();
      int maxAllowedLoginFailues=context.getConnectionConfig().getMaxLoginFailures();
      if (maxAllowedLoginFailues != 0 && session.getFailedLogins() >= maxAllowedLoginFailues) {
        LOG.warn(""String_Node_Str"");
        session.close(false).awaitUninterruptibly(10000);
      }
      return;
    }
    FileSystemFactory fmanager=context.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(authenticatedUser);
    session.setLogin(fsview);
    stat.setLogin(session);
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_230_USER_LOGGED_IN,""String_Node_Str"",userName));
    if (anonymous) {
      LOG.info(""String_Node_Str"" + password);
    }
 else {
      LOG.info(""String_Node_Str"" + userName);
    }
  }
  finally {
    if (!success) {
      session.reinitialize();
    }
  }
}","/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  boolean success=false;
  ServerFtpStatistics stat=(ServerFtpStatistics)context.getFtpStatistics();
  try {
    session.resetState();
    String password=request.getArgument();
    String userName=session.getUserArgument();
    if (userName == null && session.getUser() == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str"",null));
      return;
    }
    if (session.isLoggedIn()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_202_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
      return;
    }
    boolean anonymous=userName != null && userName.equals(""String_Node_Str"");
    if (anonymous) {
      int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
      int maxAnonLogin=context.getConnectionConfig().getMaxAnonymousLogins();
      if (maxAnonLogin == 0) {
        LOG.debug(""String_Node_Str"",currAnonLogin);
      }
 else {
        LOG.debug(""String_Node_Str"",currAnonLogin,maxAnonLogin);
      }
      if (currAnonLogin >= maxAnonLogin) {
        LOG.debug(""String_Node_Str"");
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
        return;
      }
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=context.getConnectionConfig().getMaxLogins();
    if (maxLogin == 0) {
      LOG.debug(""String_Node_Str"",currLogin);
    }
 else {
      LOG.debug(""String_Node_Str"",currLogin,maxLogin);
    }
    if (maxLogin != 0 && currLogin >= maxLogin) {
      LOG.debug(""String_Node_Str"");
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    UserManager userManager=context.getUserManager();
    User authenticatedUser=null;
    try {
      UserMetadata userMetadata=new UserMetadata();
      if (session.getRemoteAddress() instanceof InetSocketAddress) {
        userMetadata.setInetAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress());
      }
      userMetadata.setCertificateChain(session.getClientCertificates());
      Authentication auth;
      if (anonymous) {
        auth=new AnonymousAuthentication(userMetadata);
      }
 else {
        auth=new UsernamePasswordAuthentication(userName,password,userMetadata);
      }
      authenticatedUser=userManager.authenticate(auth);
    }
 catch (    AuthenticationFailedException e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"");
    }
catch (    Exception e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"",e);
    }
    User oldUser=session.getUser();
    String oldUserArgument=session.getUserArgument();
    int oldMaxIdleTime=session.getMaxIdleTime();
    if (authenticatedUser != null) {
      if (!authenticatedUser.getEnabled()) {
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",null));
        return;
      }
      session.setUser(authenticatedUser);
      session.setUserArgument(null);
      session.setMaxIdleTime(authenticatedUser.getMaxIdleTime());
      success=true;
    }
 else {
      session.setUser(null);
    }
    if (!success) {
      session.setUser(oldUser);
      session.setUserArgument(oldUserArgument);
      session.setMaxIdleTime(oldMaxIdleTime);
      delayAfterLoginFailure(context.getConnectionConfig().getLoginFailureDelay());
      LOG.warn(""String_Node_Str"" + userName);
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",userName));
      stat.setLoginFail(session);
      session.increaseFailedLogins();
      int maxAllowedLoginFailues=context.getConnectionConfig().getMaxLoginFailures();
      if (maxAllowedLoginFailues != 0 && session.getFailedLogins() >= maxAllowedLoginFailues) {
        LOG.warn(""String_Node_Str"");
        session.close(false).awaitUninterruptibly(10000);
      }
      return;
    }
    FileSystemFactory fmanager=context.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(authenticatedUser);
    session.setLogin(fsview);
    stat.setLogin(session);
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_230_USER_LOGGED_IN,""String_Node_Str"",userName));
    if (anonymous) {
      LOG.info(""String_Node_Str"" + password);
    }
 else {
      LOG.info(""String_Node_Str"" + userName);
    }
  }
  finally {
    if (!success) {
      session.reinitialize();
    }
  }
}",0.8783012888231566
152220,"/** 
 * @see Listener#resume()
 */
public synchronized void resume(){
  if (acceptor != null && suspended) {
    try {
      LOG.debug(""String_Node_Str"");
      acceptor.bind(address);
      LOG.debug(""String_Node_Str"");
      updatePort();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * @see Listener#resume()
 */
public synchronized void resume(){
  if (acceptor != null && suspended) {
    try {
      LOG.debug(""String_Node_Str"");
      acceptor.bind(address);
      LOG.debug(""String_Node_Str"");
      updatePort();
      suspended=false;
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9658246656760772
152221,"private String[] validateSelectedTypes(final String types[]){
  if (types == null) {
    return null;
  }
  for (int i=0; i < types.length; ++i) {
    boolean bMatch=false;
    for (int j=0; j < AVAILABLE_TYPES.length; ++j) {
      if (AVAILABLE_TYPES[j].equalsIgnoreCase(types[i])) {
        bMatch=true;
        break;
      }
    }
    if (!bMatch) {
      return null;
    }
  }
  String[] selectedTypes=new String[types.length];
  System.arraycopy(types,0,selectedTypes,0,types.length);
  return selectedTypes;
}","private String[] validateSelectedTypes(final String types[]){
  if (types == null) {
    return new String[0];
  }
  List<String> selectedTypes=new ArrayList<String>();
  for (int i=0; i < types.length; ++i) {
    for (int j=0; j < AVAILABLE_TYPES.length; ++j) {
      if (AVAILABLE_TYPES[j].equalsIgnoreCase(types[i])) {
        selectedTypes.add(AVAILABLE_TYPES[j]);
        break;
      }
    }
  }
  return selectedTypes.toArray(new String[0]);
}",0.5522233712512926
152222,"/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  session.resetState();
  String argument=request.getArgument();
  int spIndex=argument.indexOf(' ');
  if (spIndex == -1) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str"",null));
    return;
  }
  String listTypes=argument.substring(spIndex + 1);
  StringTokenizer st=new StringTokenizer(listTypes,""String_Node_Str"");
  String types[]=new String[st.countTokens()];
  for (int i=0; i < types.length; ++i) {
    types[i]=st.nextToken();
  }
  String[] validatedTypes=validateSelectedTypes(types);
  if (validatedTypes != null) {
    session.setAttribute(""String_Node_Str"",validatedTypes);
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_200_COMMAND_OKAY,""String_Node_Str"",listTypes));
  }
 else {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",listTypes));
  }
}","/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  session.resetState();
  String argument=request.getArgument();
  String listTypes;
  String types[];
  int spIndex=argument.indexOf(' ');
  if (spIndex == -1) {
    types=new String[0];
    listTypes=""String_Node_Str"";
  }
 else {
    listTypes=argument.substring(spIndex + 1);
    StringTokenizer st=new StringTokenizer(listTypes,""String_Node_Str"");
    types=new String[st.countTokens()];
    for (int i=0; i < types.length; ++i) {
      types[i]=st.nextToken();
    }
  }
  String[] validatedTypes=validateSelectedTypes(types);
  if (validatedTypes != null) {
    session.setAttribute(""String_Node_Str"",validatedTypes);
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_200_COMMAND_OKAY,""String_Node_Str"",listTypes));
  }
 else {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",listTypes));
  }
}",0.5332741792369121
152223,"/** 
 * Get ISO 8601 timestamp.
 */
public final static String getISO8601Date(long millis){
  StringBuffer sb=new StringBuffer(19);
  Calendar cal=new GregorianCalendar();
  cal.setTimeInMillis(millis);
  sb.append(cal.get(Calendar.YEAR));
  sb.append('-');
  int month=cal.get(Calendar.MONTH) + 1;
  if (month < 10) {
    sb.append('0');
  }
  sb.append(month);
  sb.append('-');
  int date=cal.get(Calendar.DATE);
  if (date < 10) {
    sb.append('0');
  }
  sb.append(date);
  sb.append('T');
  int hour=cal.get(Calendar.HOUR_OF_DAY);
  if (hour < 10) {
    sb.append('0');
  }
  sb.append(hour);
  sb.append(':');
  int min=cal.get(Calendar.MINUTE);
  if (min < 10) {
    sb.append('0');
  }
  sb.append(min);
  sb.append(':');
  int sec=cal.get(Calendar.SECOND);
  if (sec < 10) {
    sb.append('0');
  }
  sb.append(sec);
  return sb.toString();
}","/** 
 * Get ISO 8601 timestamp.
 */
public final static String getISO8601Date(long millis){
  StringBuffer sb=new StringBuffer(19);
  Calendar cal=new GregorianCalendar(TIME_ZONE_UTC);
  cal.setTimeInMillis(millis);
  sb.append(cal.get(Calendar.YEAR));
  sb.append('-');
  int month=cal.get(Calendar.MONTH) + 1;
  if (month < 10) {
    sb.append('0');
  }
  sb.append(month);
  sb.append('-');
  int date=cal.get(Calendar.DATE);
  if (date < 10) {
    sb.append('0');
  }
  sb.append(date);
  sb.append('T');
  int hour=cal.get(Calendar.HOUR_OF_DAY);
  if (hour < 10) {
    sb.append('0');
  }
  sb.append(hour);
  sb.append(':');
  int min=cal.get(Calendar.MINUTE);
  if (min < 10) {
    sb.append('0');
  }
  sb.append(min);
  sb.append(':');
  int sec=cal.get(Calendar.SECOND);
  if (sec < 10) {
    sb.append('0');
  }
  sb.append(sec);
  return sb.toString();
}",0.992437463641652
152224,"/** 
 * Get unix style date string.
 */
public final static String getUnixDate(long millis){
  if (millis < 0) {
    return ""String_Node_Str"";
  }
  StringBuffer sb=new StringBuffer(16);
  Calendar cal=new GregorianCalendar();
  cal.setTimeInMillis(millis);
  sb.append(MONTHS[cal.get(Calendar.MONTH)]);
  sb.append(' ');
  int day=cal.get(Calendar.DATE);
  if (day < 10) {
    sb.append(' ');
  }
  sb.append(day);
  sb.append(' ');
  long sixMonth=15811200000L;
  long nowTime=System.currentTimeMillis();
  if (Math.abs(nowTime - millis) > sixMonth) {
    int year=cal.get(Calendar.YEAR);
    sb.append(' ');
    sb.append(year);
  }
 else {
    int hh=cal.get(Calendar.HOUR_OF_DAY);
    if (hh < 10) {
      sb.append('0');
    }
    sb.append(hh);
    sb.append(':');
    int mm=cal.get(Calendar.MINUTE);
    if (mm < 10) {
      sb.append('0');
    }
    sb.append(mm);
  }
  return sb.toString();
}","/** 
 * Get unix style date string.
 */
public final static String getUnixDate(long millis){
  if (millis < 0) {
    return ""String_Node_Str"";
  }
  StringBuffer sb=new StringBuffer(16);
  Calendar cal=new GregorianCalendar(TIME_ZONE_UTC);
  cal.setTimeInMillis(millis);
  sb.append(MONTHS[cal.get(Calendar.MONTH)]);
  sb.append(' ');
  int day=cal.get(Calendar.DATE);
  if (day < 10) {
    sb.append(' ');
  }
  sb.append(day);
  sb.append(' ');
  long sixMonth=15811200000L;
  long nowTime=System.currentTimeMillis();
  if (Math.abs(nowTime - millis) > sixMonth) {
    int year=cal.get(Calendar.YEAR);
    sb.append(' ');
    sb.append(year);
  }
 else {
    int hh=cal.get(Calendar.HOUR_OF_DAY);
    if (hh < 10) {
      sb.append('0');
    }
    sb.append(hh);
    sb.append(':');
    int mm=cal.get(Calendar.MINUTE);
    if (mm < 10) {
      sb.append('0');
    }
    sb.append(mm);
  }
  return sb.toString();
}",0.9928610653487095
152225,"/** 
 * Get FTP date.
 */
public final static String getFtpDate(long millis){
  StringBuffer sb=new StringBuffer(20);
  Calendar cal=new GregorianCalendar();
  cal.setTimeInMillis(millis);
  sb.append(cal.get(Calendar.YEAR));
  int month=cal.get(Calendar.MONTH) + 1;
  if (month < 10) {
    sb.append('0');
  }
  sb.append(month);
  int date=cal.get(Calendar.DATE);
  if (date < 10) {
    sb.append('0');
  }
  sb.append(date);
  int hour=cal.get(Calendar.HOUR_OF_DAY);
  if (hour < 10) {
    sb.append('0');
  }
  sb.append(hour);
  int min=cal.get(Calendar.MINUTE);
  if (min < 10) {
    sb.append('0');
  }
  sb.append(min);
  int sec=cal.get(Calendar.SECOND);
  if (sec < 10) {
    sb.append('0');
  }
  sb.append(sec);
  sb.append('.');
  int milli=cal.get(Calendar.MILLISECOND);
  if (milli < 100) {
    sb.append('0');
  }
  if (milli < 10) {
    sb.append('0');
  }
  sb.append(milli);
  return sb.toString();
}","/** 
 * Get FTP date.
 */
public final static String getFtpDate(long millis){
  StringBuffer sb=new StringBuffer(20);
  Calendar cal=new GregorianCalendar(TIME_ZONE_UTC);
  cal.setTimeInMillis(millis);
  sb.append(cal.get(Calendar.YEAR));
  int month=cal.get(Calendar.MONTH) + 1;
  if (month < 10) {
    sb.append('0');
  }
  sb.append(month);
  int date=cal.get(Calendar.DATE);
  if (date < 10) {
    sb.append('0');
  }
  sb.append(date);
  int hour=cal.get(Calendar.HOUR_OF_DAY);
  if (hour < 10) {
    sb.append('0');
  }
  sb.append(hour);
  int min=cal.get(Calendar.MINUTE);
  if (min < 10) {
    sb.append('0');
  }
  sb.append(min);
  int sec=cal.get(Calendar.SECOND);
  if (sec < 10) {
    sb.append('0');
  }
  sb.append(sec);
  sb.append('.');
  int milli=cal.get(Calendar.MILLISECOND);
  if (milli < 100) {
    sb.append('0');
  }
  if (milli < 10) {
    sb.append('0');
  }
  sb.append(milli);
  return sb.toString();
}",0.9929767693138845
152226,"public void testMDTMForFile() throws Exception {
  assertFalse(TEST_FILE1.exists());
  assertTrue(TEST_FILE1.createNewFile());
  Date expected=new Date(TEST_FILE1.lastModified());
  assertEquals(213,client.sendCommand(""String_Node_Str"" + TEST_FILE1.getName()));
  Date actual=FTP_DATE_FORMAT.parse(client.getReplyString().substring(4).trim());
  assertEquals(expected,actual);
}","public void testMDTMForFile() throws Exception {
  assertFalse(TEST_FILE1.exists());
  assertTrue(TEST_FILE1.createNewFile());
  Calendar expected=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  expected.clear();
  expected.setTimeInMillis(TEST_FILE1.lastModified());
  assertEquals(213,client.sendCommand(""String_Node_Str"" + TEST_FILE1.getName()));
  Calendar actual=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  actual.clear();
  actual.setTime(FTP_DATE_FORMAT.parse(client.getReplyString().substring(4).trim()));
  assertEquals(expected,actual);
}",0.7510373443983402
152227,"public long getLastModified(){
  return LAST_MODIFIED_IN_2005.getTime();
}","public long getLastModified(){
  return LAST_MODIFIED_IN_2005.getTimeInMillis();
}",0.9487179487179488
152228,"/** 
 * Get last modified time.
 * @return The timestamp of the last modified time for the {@link FtpFile}
 */
long getLastModified();","/** 
 * Get last modified time in UTC.
 * @return The timestamp of the last modified time for the {@link FtpFile}
 */
long getLastModified();",0.9745454545454544
152229,"/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  boolean isMMD5=false;
  if (""String_Node_Str"".equals(request.getCommand())) {
    isMMD5=true;
  }
  String argument=request.getArgument();
  if (argument == null || argument.trim().length() == 0) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_504_COMMAND_NOT_IMPLEMENTED_FOR_THAT_PARAMETER,""String_Node_Str"",null));
    return;
  }
  String[] fileNames=null;
  if (isMMD5) {
    fileNames=argument.split(""String_Node_Str"");
  }
 else {
    fileNames=new String[]{argument};
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < fileNames.length; i++) {
    String fileName=fileNames[i].trim();
    FtpFile file=null;
    try {
      file=session.getFileSystemView().getFile(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"" + fileName,ex);
    }
    if (file == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_504_COMMAND_NOT_IMPLEMENTED_FOR_THAT_PARAMETER,""String_Node_Str"",fileName));
      return;
    }
    if (!file.isFile()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_504_COMMAND_NOT_IMPLEMENTED_FOR_THAT_PARAMETER,""String_Node_Str"",fileName));
      return;
    }
    InputStream is=null;
    try {
      is=file.createInputStream(0);
      String md5Hash=md5(is);
      if (i > 0) {
        sb.append(""String_Node_Str"");
      }
      sb.append(fileName);
      sb.append(' ');
      sb.append(md5Hash);
    }
 catch (    NoSuchAlgorithmException e) {
      LOG.debug(""String_Node_Str"",e);
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_502_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
    }
 finally {
      IoUtils.close(is);
    }
  }
  if (isMMD5) {
    session.write(LocalizedFtpReply.translate(session,request,context,252,""String_Node_Str"",sb.toString()));
  }
 else {
    session.write(LocalizedFtpReply.translate(session,request,context,251,""String_Node_Str"",sb.toString()));
  }
}","/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  boolean isMMD5=false;
  if (""String_Node_Str"".equals(request.getCommand())) {
    isMMD5=true;
  }
  String argument=request.getArgument();
  if (argument == null || argument.trim().length() == 0) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_504_COMMAND_NOT_IMPLEMENTED_FOR_THAT_PARAMETER,""String_Node_Str"",null));
    return;
  }
  String[] fileNames=null;
  if (isMMD5) {
    fileNames=argument.split(""String_Node_Str"");
  }
 else {
    fileNames=new String[]{argument};
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < fileNames.length; i++) {
    String fileName=fileNames[i].trim();
    FtpFile file=null;
    try {
      file=session.getFileSystemView().getFile(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"" + fileName,ex);
    }
    if (file == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_504_COMMAND_NOT_IMPLEMENTED_FOR_THAT_PARAMETER,""String_Node_Str"",fileName));
      return;
    }
    if (!file.isFile()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_504_COMMAND_NOT_IMPLEMENTED_FOR_THAT_PARAMETER,""String_Node_Str"",fileName));
      return;
    }
    InputStream is=null;
    try {
      is=file.createInputStream(0);
      String md5Hash=md5(is);
      if (i > 0) {
        sb.append(""String_Node_Str"");
      }
      boolean nameHasSpaces=fileName.indexOf(' ') >= 0;
      if (nameHasSpaces) {
        sb.append('""');
      }
      sb.append(fileName);
      if (nameHasSpaces) {
        sb.append('""');
      }
      sb.append(' ');
      sb.append(md5Hash);
    }
 catch (    NoSuchAlgorithmException e) {
      LOG.debug(""String_Node_Str"",e);
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_502_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
    }
 finally {
      IoUtils.close(is);
    }
  }
  if (isMMD5) {
    session.write(LocalizedFtpReply.translate(session,request,context,252,""String_Node_Str"",sb.toString()));
  }
 else {
    session.write(LocalizedFtpReply.translate(session,request,context,251,""String_Node_Str"",sb.toString()));
  }
}",0.9535087719298244
152230,"public String toString(){
  int code=getCode();
  String notNullMessage=getMessage();
  if (notNullMessage == null) {
    notNullMessage=""String_Node_Str"";
  }
  StringBuffer sb=new StringBuffer();
  if (notNullMessage.indexOf('\n') == -1) {
    sb.append(code);
    sb.append(""String_Node_Str"");
    sb.append(notNullMessage);
    sb.append(CRLF);
  }
 else {
    String[] lines=notNullMessage.split(""String_Node_Str"");
    sb.append(code);
    sb.append(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      String line=lines[i];
      if (i + 1 == lines.length) {
        sb.append(code);
        sb.append(""String_Node_Str"");
      }
      sb.append(line);
      sb.append(CRLF);
    }
  }
  return sb.toString();
}","public String toString(){
  int code=getCode();
  String notNullMessage=getMessage();
  if (notNullMessage == null) {
    notNullMessage=""String_Node_Str"";
  }
  StringBuffer sb=new StringBuffer();
  if (notNullMessage.indexOf('\n') == -1) {
    sb.append(code);
    sb.append(""String_Node_Str"");
    sb.append(notNullMessage);
    sb.append(CRLF);
  }
 else {
    String[] lines=notNullMessage.split(""String_Node_Str"");
    sb.append(code);
    sb.append(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      String line=lines[i];
      if (i + 1 == lines.length) {
        sb.append(code);
        sb.append(""String_Node_Str"");
      }
      if (line.length() > 0 && Character.isDigit(line.charAt(0))) {
        sb.append(""String_Node_Str"");
      }
      sb.append(line);
      sb.append(CRLF);
    }
  }
  return sb.toString();
}",0.9279393173198482
152231,"/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  boolean success=false;
  ServerFtpStatistics stat=(ServerFtpStatistics)context.getFtpStatistics();
  try {
    session.resetState();
    String password=request.getArgument();
    String userName=session.getUserArgument();
    if (userName == null && session.getUser() == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str"",null));
      return;
    }
    if (session.isLoggedIn()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_202_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
      return;
    }
    boolean anonymous=userName != null && userName.equals(""String_Node_Str"");
    if (anonymous) {
      int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
      int maxAnonLogin=context.getConnectionConfig().getMaxAnonymousLogins();
      if (currAnonLogin >= maxAnonLogin) {
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
        return;
      }
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=context.getConnectionConfig().getMaxLogins();
    if (maxLogin != 0 && currLogin >= maxLogin) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    UserManager userManager=context.getUserManager();
    User authenticatedUser=null;
    try {
      UserMetadata userMetadata=new UserMetadata();
      if (session.getRemoteAddress() instanceof InetSocketAddress) {
        userMetadata.setInetAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress());
      }
      userMetadata.setCertificateChain(session.getClientCertificates());
      Authentication auth;
      if (anonymous) {
        auth=new AnonymousAuthentication(userMetadata);
      }
 else {
        auth=new UsernamePasswordAuthentication(userName,password,userMetadata);
      }
      authenticatedUser=userManager.authenticate(auth);
    }
 catch (    AuthenticationFailedException e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"");
    }
catch (    Exception e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"",e);
    }
    User oldUser=session.getUser();
    String oldUserArgument=session.getUserArgument();
    int oldMaxIdleTime=session.getMaxIdleTime();
    if (authenticatedUser != null) {
      session.setUser(authenticatedUser);
      session.setUserArgument(null);
      session.setMaxIdleTime(authenticatedUser.getMaxIdleTime());
      success=true;
    }
 else {
      session.setUser(null);
    }
    if (!success) {
      session.setUser(oldUser);
      session.setUserArgument(oldUserArgument);
      session.setMaxIdleTime(oldMaxIdleTime);
      delayAfterLoginFailure(context.getConnectionConfig().getLoginFailureDelay());
      LOG.warn(""String_Node_Str"" + userName);
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",userName));
      stat.setLoginFail(session);
      session.increaseFailedLogins();
      int maxAllowedLoginFailues=context.getConnectionConfig().getMaxLoginFailures();
      if (maxAllowedLoginFailues != 0 && session.getFailedLogins() >= maxAllowedLoginFailues) {
        session.close(false).awaitUninterruptibly(10000);
      }
      return;
    }
    FileSystemFactory fmanager=context.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(authenticatedUser);
    session.setLogin(fsview);
    stat.setLogin(session);
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_230_USER_LOGGED_IN,""String_Node_Str"",userName));
    if (anonymous) {
      LOG.info(""String_Node_Str"" + password);
    }
 else {
      LOG.info(""String_Node_Str"" + userName);
    }
  }
  finally {
    if (!success) {
      session.reinitialize();
    }
  }
}","/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  boolean success=false;
  ServerFtpStatistics stat=(ServerFtpStatistics)context.getFtpStatistics();
  try {
    session.resetState();
    String password=request.getArgument();
    String userName=session.getUserArgument();
    if (userName == null && session.getUser() == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str"",null));
      return;
    }
    if (session.isLoggedIn()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_202_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
      return;
    }
    boolean anonymous=userName != null && userName.equals(""String_Node_Str"");
    if (anonymous) {
      int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
      int maxAnonLogin=context.getConnectionConfig().getMaxAnonymousLogins();
      if (maxAnonLogin == 0) {
        LOG.debug(""String_Node_Str"",currAnonLogin);
      }
 else {
        LOG.debug(""String_Node_Str"",currAnonLogin,maxAnonLogin);
      }
      if (currAnonLogin >= maxAnonLogin) {
        LOG.debug(""String_Node_Str"");
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
        return;
      }
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=context.getConnectionConfig().getMaxLogins();
    if (maxLogin == 0) {
      LOG.debug(""String_Node_Str"",currLogin);
    }
 else {
      LOG.debug(""String_Node_Str"",currLogin,maxLogin);
    }
    if (maxLogin != 0 && currLogin >= maxLogin) {
      LOG.debug(""String_Node_Str"");
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    UserManager userManager=context.getUserManager();
    User authenticatedUser=null;
    try {
      UserMetadata userMetadata=new UserMetadata();
      if (session.getRemoteAddress() instanceof InetSocketAddress) {
        userMetadata.setInetAddress(((InetSocketAddress)session.getRemoteAddress()).getAddress());
      }
      userMetadata.setCertificateChain(session.getClientCertificates());
      Authentication auth;
      if (anonymous) {
        auth=new AnonymousAuthentication(userMetadata);
      }
 else {
        auth=new UsernamePasswordAuthentication(userName,password,userMetadata);
      }
      authenticatedUser=userManager.authenticate(auth);
    }
 catch (    AuthenticationFailedException e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"");
    }
catch (    Exception e) {
      authenticatedUser=null;
      LOG.warn(""String_Node_Str"",e);
    }
    User oldUser=session.getUser();
    String oldUserArgument=session.getUserArgument();
    int oldMaxIdleTime=session.getMaxIdleTime();
    if (authenticatedUser != null) {
      session.setUser(authenticatedUser);
      session.setUserArgument(null);
      session.setMaxIdleTime(authenticatedUser.getMaxIdleTime());
      success=true;
    }
 else {
      session.setUser(null);
    }
    if (!success) {
      session.setUser(oldUser);
      session.setUserArgument(oldUserArgument);
      session.setMaxIdleTime(oldMaxIdleTime);
      delayAfterLoginFailure(context.getConnectionConfig().getLoginFailureDelay());
      LOG.warn(""String_Node_Str"" + userName);
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",userName));
      stat.setLoginFail(session);
      session.increaseFailedLogins();
      int maxAllowedLoginFailues=context.getConnectionConfig().getMaxLoginFailures();
      if (maxAllowedLoginFailues != 0 && session.getFailedLogins() >= maxAllowedLoginFailues) {
        LOG.warn(""String_Node_Str"");
        session.close(false).awaitUninterruptibly(10000);
      }
      return;
    }
    FileSystemFactory fmanager=context.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(authenticatedUser);
    session.setLogin(fsview);
    stat.setLogin(session);
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_230_USER_LOGGED_IN,""String_Node_Str"",userName));
    if (anonymous) {
      LOG.info(""String_Node_Str"" + password);
    }
 else {
      LOG.info(""String_Node_Str"" + userName);
    }
  }
  finally {
    if (!success) {
      session.reinitialize();
    }
  }
}",0.9514431239388794
152232,"/** 
 * Execute command
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_221_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
  session.close(false).awaitUninterruptibly(10000);
  session.getDataConnection().closeDataConnection();
}","/** 
 * Execute command
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_221_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
  LOG.debug(""String_Node_Str"");
  session.close(false).awaitUninterruptibly(10000);
  session.getDataConnection().closeDataConnection();
}",0.9635535307517084
152233,"/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  boolean success=false;
  ServerFtpStatistics stat=(ServerFtpStatistics)context.getFtpStatistics();
  try {
    session.resetState();
    String userName=request.getArgument();
    if (userName == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    MdcInjectionFilter.setProperty(session,""String_Node_Str"",userName);
    User user=session.getUser();
    if (session.isLoggedIn()) {
      if (userName.equals(user.getName())) {
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_230_USER_LOGGED_IN,""String_Node_Str"",null));
        success=true;
      }
 else {
        session.write(LocalizedFtpReply.translate(session,request,context,530,""String_Node_Str"",null));
      }
      return;
    }
    boolean anonymous=userName.equals(""String_Node_Str"");
    if (anonymous && (!context.getConnectionConfig().isAnonymousLoginEnabled())) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",null));
      return;
    }
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=context.getConnectionConfig().getMaxAnonymousLogins();
    if (anonymous && (currAnonLogin >= maxAnonLogin)) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=context.getConnectionConfig().getMaxLogins();
    if (maxLogin != 0 && currLogin >= maxLogin) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    User configUser=context.getUserManager().getUserByName(userName);
    if (configUser != null) {
      InetAddress address=null;
      if (session.getRemoteAddress() instanceof InetSocketAddress) {
        address=((InetSocketAddress)session.getRemoteAddress()).getAddress();
      }
      ConcurrentLoginRequest loginRequest=new ConcurrentLoginRequest(stat.getCurrentUserLoginNumber(configUser) + 1,stat.getCurrentUserLoginNumber(configUser,address) + 1);
      if (configUser.authorize(loginRequest) == null) {
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
        return;
      }
    }
    success=true;
    session.setUserArgument(userName);
    if (anonymous) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_331_USER_NAME_OKAY_NEED_PASSWORD,""String_Node_Str"",userName));
    }
 else {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_331_USER_NAME_OKAY_NEED_PASSWORD,""String_Node_Str"",userName));
    }
  }
  finally {
    if (!success) {
      session.close(false).awaitUninterruptibly(10000);
    }
  }
}","/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException, FtpException {
  boolean success=false;
  ServerFtpStatistics stat=(ServerFtpStatistics)context.getFtpStatistics();
  try {
    session.resetState();
    String userName=request.getArgument();
    if (userName == null) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    MdcInjectionFilter.setProperty(session,""String_Node_Str"",userName);
    User user=session.getUser();
    if (session.isLoggedIn()) {
      if (userName.equals(user.getName())) {
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_230_USER_LOGGED_IN,""String_Node_Str"",null));
        success=true;
      }
 else {
        session.write(LocalizedFtpReply.translate(session,request,context,530,""String_Node_Str"",null));
      }
      return;
    }
    boolean anonymous=userName.equals(""String_Node_Str"");
    if (anonymous && (!context.getConnectionConfig().isAnonymousLoginEnabled())) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",null));
      return;
    }
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=context.getConnectionConfig().getMaxAnonymousLogins();
    if (maxAnonLogin == 0) {
      LOG.debug(""String_Node_Str"",currAnonLogin);
    }
 else {
      LOG.debug(""String_Node_Str"",currAnonLogin,maxAnonLogin);
    }
    if (anonymous && (currAnonLogin >= maxAnonLogin)) {
      LOG.debug(""String_Node_Str"");
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=context.getConnectionConfig().getMaxLogins();
    if (maxLogin == 0) {
      LOG.debug(""String_Node_Str"",currLogin);
    }
 else {
      LOG.debug(""String_Node_Str"",currLogin,maxLogin);
    }
    if (maxLogin != 0 && currLogin >= maxLogin) {
      LOG.debug(""String_Node_Str"");
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
      return;
    }
    User configUser=context.getUserManager().getUserByName(userName);
    if (configUser != null) {
      InetAddress address=null;
      if (session.getRemoteAddress() instanceof InetSocketAddress) {
        address=((InetSocketAddress)session.getRemoteAddress()).getAddress();
      }
      ConcurrentLoginRequest loginRequest=new ConcurrentLoginRequest(stat.getCurrentUserLoginNumber(configUser) + 1,stat.getCurrentUserLoginNumber(configUser,address) + 1);
      if (configUser.authorize(loginRequest) == null) {
        LOG.debug(""String_Node_Str"");
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
        return;
      }
    }
    success=true;
    session.setUserArgument(userName);
    if (anonymous) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_331_USER_NAME_OKAY_NEED_PASSWORD,""String_Node_Str"",userName));
    }
 else {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_331_USER_NAME_OKAY_NEED_PASSWORD,""String_Node_Str"",userName));
    }
  }
  finally {
    if (!success) {
      LOG.debug(""String_Node_Str"");
      session.close(false).awaitUninterruptibly(10000);
    }
  }
}",0.9350872176150986
152234,"public void messageReceived(final FtpIoSession session,final FtpRequest request) throws Exception {
  try {
    session.updateLastAccessTime();
    String commandName=request.getCommand();
    CommandFactory commandFactory=context.getCommandFactory();
    Command command=commandFactory.getCommand(commandName);
    if (!session.isLoggedIn() && !isCommandOkWithoutAuthentication(commandName)) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",null));
      return;
    }
    FtpletContainer ftplets=context.getFtpletContainer();
    FtpletResult ftpletRet;
    try {
      ftpletRet=ftplets.beforeCommand(session.getFtpletSession(),request);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletResult.DISCONNECT;
    }
    if (ftpletRet == FtpletResult.DISCONNECT) {
      session.close(false).awaitUninterruptibly(10000);
      return;
    }
 else     if (ftpletRet != FtpletResult.SKIP) {
      if (command != null) {
synchronized (session) {
          command.execute(session,context,request);
        }
      }
 else {
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_502_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
      }
      try {
        ftpletRet=ftplets.afterCommand(session.getFtpletSession(),request,session.getLastReply());
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletResult.DISCONNECT;
      }
      if (ftpletRet == FtpletResult.DISCONNECT) {
        session.close(false).awaitUninterruptibly(10000);
        return;
      }
    }
  }
 catch (  Exception ex) {
    try {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,null,null));
    }
 catch (    Exception ex1) {
    }
    if (ex instanceof java.io.IOException) {
      throw (IOException)ex;
    }
 else {
      LOG.warn(""String_Node_Str"",ex);
    }
  }
}","public void messageReceived(final FtpIoSession session,final FtpRequest request) throws Exception {
  try {
    session.updateLastAccessTime();
    String commandName=request.getCommand();
    CommandFactory commandFactory=context.getCommandFactory();
    Command command=commandFactory.getCommand(commandName);
    if (!session.isLoggedIn() && !isCommandOkWithoutAuthentication(commandName)) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_530_NOT_LOGGED_IN,""String_Node_Str"",null));
      return;
    }
    FtpletContainer ftplets=context.getFtpletContainer();
    FtpletResult ftpletRet;
    try {
      ftpletRet=ftplets.beforeCommand(session.getFtpletSession(),request);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletResult.DISCONNECT;
    }
    if (ftpletRet == FtpletResult.DISCONNECT) {
      LOG.debug(""String_Node_Str"");
      session.close(false).awaitUninterruptibly(10000);
      return;
    }
 else     if (ftpletRet != FtpletResult.SKIP) {
      if (command != null) {
synchronized (session) {
          command.execute(session,context,request);
        }
      }
 else {
        session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_502_COMMAND_NOT_IMPLEMENTED,""String_Node_Str"",null));
      }
      try {
        ftpletRet=ftplets.afterCommand(session.getFtpletSession(),request,session.getLastReply());
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletResult.DISCONNECT;
      }
      if (ftpletRet == FtpletResult.DISCONNECT) {
        LOG.debug(""String_Node_Str"");
        session.close(false).awaitUninterruptibly(10000);
        return;
      }
    }
  }
 catch (  Exception ex) {
    try {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,null,null));
    }
 catch (    Exception ex1) {
    }
    if (ex instanceof java.io.IOException) {
      throw (IOException)ex;
    }
 else {
      LOG.warn(""String_Node_Str"",ex);
    }
  }
}",0.9819775937652216
152235,"public void sessionOpened(final FtpIoSession session) throws Exception {
  context.getFtpletContainer().onConnect(session.getFtpletSession());
  session.updateLastAccessTime();
  session.write(LocalizedFtpReply.translate(session,null,context,FtpReply.REPLY_220_SERVICE_READY,null,null));
}","public void sessionOpened(final FtpIoSession session) throws Exception {
  FtpletContainer ftplets=context.getFtpletContainer();
  FtpletResult ftpletRet;
  try {
    ftpletRet=ftplets.onConnect(session.getFtpletSession());
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"",e);
    ftpletRet=FtpletResult.DISCONNECT;
  }
  if (ftpletRet == FtpletResult.DISCONNECT) {
    LOG.debug(""String_Node_Str"");
    session.close(false).awaitUninterruptibly(10000);
  }
 else {
    session.updateLastAccessTime();
    session.write(LocalizedFtpReply.translate(session,null,context,FtpReply.REPLY_220_SERVICE_READY,null,null));
  }
}",0.5971769815418024
152236,"public void sessionClosed(final FtpIoSession session) throws Exception {
  try {
    context.getFtpletContainer().onDisconnect(session.getFtpletSession());
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
  }
  FileSystemView fs=session.getFileSystemView();
  if (fs != null) {
    try {
      fs.dispose();
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"",e);
    }
  }
  ServerFtpStatistics stats=((ServerFtpStatistics)context.getFtpStatistics());
  if (stats != null) {
    stats.setLogout(session);
    stats.setCloseConnection(session);
  }
}","public void sessionClosed(final FtpIoSession session) throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    context.getFtpletContainer().onDisconnect(session.getFtpletSession());
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
  }
  try {
    ServerDataConnectionFactory dc=session.getDataConnection();
    if (dc != null) {
      dc.closeDataConnection();
    }
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
  }
  FileSystemView fs=session.getFileSystemView();
  if (fs != null) {
    try {
      fs.dispose();
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"",e);
    }
  }
  ServerFtpStatistics stats=((ServerFtpStatistics)context.getFtpStatistics());
  if (stats != null) {
    stats.setLogout(session);
    stats.setCloseConnection(session);
    LOG.debug(""String_Node_Str"");
  }
 else {
    LOG.warn(""String_Node_Str"");
  }
  LOG.debug(""String_Node_Str"");
}",0.3504330446369087
152237,"/** 
 * Close data socket.
 */
public synchronized void closeDataConnection(){
  if (dataSoc != null) {
    try {
      dataSoc.close();
    }
 catch (    Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
    }
    dataSoc=null;
  }
  if (servSoc != null) {
    try {
      servSoc.close();
    }
 catch (    Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
    }
    FtpServerContext ctx=serverContext;
    if (ctx != null) {
      DataConnectionConfiguration dcc=session.getListener().getDataConnectionConfiguration();
      if (dcc != null) {
        dcc.releasePassivePort(port);
      }
    }
    servSoc=null;
  }
  requestTime=0L;
}","/** 
 * Close data socket. This method must be idempotent as we might call it multiple times during disconnect.
 */
public synchronized void closeDataConnection(){
  if (dataSoc != null) {
    try {
      dataSoc.close();
    }
 catch (    Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
    }
    dataSoc=null;
  }
  if (servSoc != null) {
    try {
      servSoc.close();
    }
 catch (    Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
    }
    if (session != null) {
      DataConnectionConfiguration dcc=session.getListener().getDataConnectionConfiguration();
      if (dcc != null) {
        dcc.releasePassivePort(port);
      }
    }
    servSoc=null;
  }
  requestTime=0L;
}",0.8996282527881041
152238,"/** 
 * Creates a new instance of <code>LocalizedFileTransferReply</code>.
 * @param code the reply code
 * @param message the detailed message
 * @param file the file or directory the data transfer is related to
 * @param bytesTransferred the number of bytes transferred
 */
protected LocalizedDataTransferFtpReply(int code,String message,FtpFile file,long bytesTransferred){
  super(code,message);
  this.file=file;
  this.bytesTransferred=bytesTransferred;
}","/** 
 * Creates a new instance of <code>LocalizedFileTransferReply</code>.
 * @param code the reply code
 * @param message the detailed message
 * @param file the file or directory the data transfer is related to
 * @param bytesTransferred the number of bytes transferred
 */
public LocalizedDataTransferFtpReply(int code,String message,FtpFile file,long bytesTransferred){
  super(code,message);
  this.file=file;
  this.bytesTransferred=bytesTransferred;
}",0.985854189336235
152239,"/** 
 * Creates a new instance of <code>LocalizedFileTransferReply</code>.
 * @param code the reply code
 * @param message the detailed message
 * @param file the file or directory the data transfer is related to
 */
protected LocalizedFileActionFtpReply(int code,String message,FtpFile file){
  super(code,message);
  this.file=file;
}","/** 
 * Creates a new instance of <code>LocalizedFileTransferReply</code>.
 * @param code the reply code
 * @param message the detailed message
 * @param file the file or directory the data transfer is related to
 */
public LocalizedFileActionFtpReply(int code,String message,FtpFile file){
  super(code,message);
  this.file=file;
}",0.9805680119581464
152240,"/** 
 * Private constructor, only allow creating through factory method
 */
protected LocalizedFtpReply(int code,String message){
  super(code,message);
}","/** 
 * Creates a new instance of <code>LocalizedFtpReply</code>.
 * @param code the reply code
 * @param message the reply text
 */
public LocalizedFtpReply(int code,String message){
  super(code,message);
}",0.430939226519337
152241,"/** 
 * Creates a new instance of <code>LocalizedRenameFtpReply</code>.
 * @param code the reply code
 * @param message the detailed message
 * @param from the old file
 * @param to the new file
 */
protected LocalizedRenameFtpReply(int code,String message,FtpFile from,FtpFile to){
  super(code,message);
  this.from=from;
  this.to=to;
}","/** 
 * Creates a new instance of <code>LocalizedRenameFtpReply</code>.
 * @param code the reply code
 * @param message the detailed message
 * @param from the old file
 * @param to the new file
 */
public LocalizedRenameFtpReply(int code,String message,FtpFile from,FtpFile to){
  super(code,message);
  this.from=from;
  this.to=to;
}",0.9807407407407408
152242,"/** 
 * Get the data socket. In case of error returns null.
 */
private synchronized Socket createDataSocket() throws Exception {
  dataSoc=null;
  DataConnectionConfiguration dataConfig=session.getListener().getDataConnectionConfiguration();
  try {
    if (!passive) {
      if (secure) {
        LOG.debug(""String_Node_Str"");
        SslConfiguration ssl=getSslConfiguration();
        if (ssl == null) {
          throw new FtpException(""String_Node_Str"");
        }
        SSLContext ctx=ssl.getSSLContext();
        SSLSocketFactory socFactory=ctx.getSocketFactory();
        SSLSocket ssoc=(SSLSocket)socFactory.createSocket();
        ssoc.setUseClientMode(false);
        if (ssl.getEnabledCipherSuites() != null) {
          ssoc.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
        }
        dataSoc=ssoc;
      }
 else {
        LOG.debug(""String_Node_Str"");
        dataSoc=new Socket();
      }
      dataSoc.setReuseAddress(true);
      InetAddress localAddr=resolveAddress(dataConfig.getActiveLocalAddress());
      if (localAddr == null) {
        localAddr=((InetSocketAddress)session.getLocalAddress()).getAddress();
      }
      SocketAddress localSocketAddress=new InetSocketAddress(localAddr,dataConfig.getActiveLocalPort());
      LOG.debug(""String_Node_Str"",localSocketAddress);
      dataSoc.bind(localSocketAddress);
      dataSoc.connect(new InetSocketAddress(address,port));
    }
 else {
      if (secure) {
        LOG.debug(""String_Node_Str"");
        SslConfiguration ssl=getSslConfiguration();
        if (ssl == null) {
          throw new FtpException(""String_Node_Str"");
        }
        SSLContext ctx=ssl.getSSLContext();
        SSLSocketFactory ssocketFactory=ctx.getSocketFactory();
        Socket serverSocket=servSoc.accept();
        SSLSocket sslSocket=(SSLSocket)ssocketFactory.createSocket(serverSocket,serverSocket.getInetAddress().getHostName(),serverSocket.getPort(),true);
        sslSocket.setUseClientMode(false);
        if (ssl.getClientAuth() == ClientAuth.NEED) {
          sslSocket.setNeedClientAuth(true);
        }
 else         if (ssl.getClientAuth() == ClientAuth.WANT) {
          sslSocket.setWantClientAuth(true);
        }
        if (ssl.getEnabledCipherSuites() != null) {
          sslSocket.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
        }
        dataSoc=sslSocket;
      }
 else {
        LOG.debug(""String_Node_Str"");
        dataSoc=servSoc.accept();
      }
      DataConnectionConfiguration dataCfg=session.getListener().getDataConnectionConfiguration();
      dataSoc.setSoTimeout(dataCfg.getIdleTime() * 1000);
      LOG.debug(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    closeDataConnection();
    LOG.warn(""String_Node_Str"",ex);
    throw ex;
  }
  dataSoc.setSoTimeout(dataConfig.getIdleTime() * 1000);
  if (dataSoc instanceof SSLSocket) {
    ((SSLSocket)dataSoc).startHandshake();
  }
  return dataSoc;
}","/** 
 * Get the data socket. In case of error returns null.
 */
private synchronized Socket createDataSocket() throws Exception {
  dataSoc=null;
  DataConnectionConfiguration dataConfig=session.getListener().getDataConnectionConfiguration();
  try {
    if (!passive) {
      if (secure) {
        LOG.debug(""String_Node_Str"");
        SslConfiguration ssl=getSslConfiguration();
        if (ssl == null) {
          throw new FtpException(""String_Node_Str"");
        }
        SSLContext ctx=ssl.getSSLContext();
        SSLSocketFactory socFactory=ctx.getSocketFactory();
        SSLSocket ssoc=(SSLSocket)socFactory.createSocket();
        ssoc.setUseClientMode(false);
        if (ssl.getEnabledCipherSuites() != null) {
          ssoc.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
        }
        dataSoc=ssoc;
      }
 else {
        LOG.debug(""String_Node_Str"");
        dataSoc=new Socket();
      }
      dataSoc.setReuseAddress(true);
      InetAddress localAddr=resolveAddress(dataConfig.getActiveLocalAddress());
      if (localAddr == null) {
        localAddr=((InetSocketAddress)session.getLocalAddress()).getAddress();
      }
      SocketAddress localSocketAddress=new InetSocketAddress(localAddr,dataConfig.getActiveLocalPort());
      LOG.debug(""String_Node_Str"",localSocketAddress);
      dataSoc.bind(localSocketAddress);
      dataSoc.connect(new InetSocketAddress(address,port));
    }
 else {
      if (secure) {
        LOG.debug(""String_Node_Str"");
        SslConfiguration ssl=getSslConfiguration();
        if (ssl == null) {
          throw new FtpException(""String_Node_Str"");
        }
        SSLContext ctx=ssl.getSSLContext();
        SSLSocketFactory ssocketFactory=ctx.getSocketFactory();
        Socket serverSocket=servSoc.accept();
        SSLSocket sslSocket=(SSLSocket)ssocketFactory.createSocket(serverSocket,serverSocket.getInetAddress().getHostAddress(),serverSocket.getPort(),true);
        sslSocket.setUseClientMode(false);
        if (ssl.getClientAuth() == ClientAuth.NEED) {
          sslSocket.setNeedClientAuth(true);
        }
 else         if (ssl.getClientAuth() == ClientAuth.WANT) {
          sslSocket.setWantClientAuth(true);
        }
        if (ssl.getEnabledCipherSuites() != null) {
          sslSocket.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
        }
        dataSoc=sslSocket;
      }
 else {
        LOG.debug(""String_Node_Str"");
        dataSoc=servSoc.accept();
      }
      DataConnectionConfiguration dataCfg=session.getListener().getDataConnectionConfiguration();
      dataSoc.setSoTimeout(dataCfg.getIdleTime() * 1000);
      LOG.debug(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    closeDataConnection();
    LOG.warn(""String_Node_Str"",ex);
    throw ex;
  }
  dataSoc.setSoTimeout(dataConfig.getIdleTime() * 1000);
  if (dataSoc instanceof SSLSocket) {
    ((SSLSocket)dataSoc).startHandshake();
  }
  return dataSoc;
}",0.9981251065280382
152243,"@Override public boolean equals(Object obj){
  if (obj != null && obj instanceof NativeFtpFile) {
    return this.file.equals(((NativeFtpFile)obj).file);
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj != null && obj instanceof NativeFtpFile) {
    File thisCanonicalFile;
    File otherCanonicalFile;
    try {
      thisCanonicalFile=this.file.getCanonicalFile();
      otherCanonicalFile=((NativeFtpFile)obj).file.getCanonicalFile();
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    return thisCanonicalFile.equals(otherCanonicalFile);
  }
  return false;
}",0.4945226917057903
152244,"/** 
 * @see Listener#resume()
 */
public synchronized void resume(){
  if (acceptor != null && suspended) {
    try {
      LOG.debug(""String_Node_Str"");
      acceptor.bind(address);
      LOG.debug(""String_Node_Str"");
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * @see Listener#resume()
 */
public synchronized void resume(){
  if (acceptor != null && suspended) {
    try {
      LOG.debug(""String_Node_Str"");
      acceptor.bind(address);
      LOG.debug(""String_Node_Str"");
      updatePort();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9682539682539684
152245,"/** 
 * @see Listener#start(FtpServerContext)
 */
public synchronized void start(FtpServerContext context){
  try {
    this.context=context;
    acceptor=new NioSocketAcceptor(Runtime.getRuntime().availableProcessors());
    if (getServerAddress() != null) {
      address=new InetSocketAddress(getServerAddress(),getPort());
    }
 else {
      address=new InetSocketAddress(getPort());
    }
    acceptor.setReuseAddress(true);
    acceptor.getSessionConfig().setReadBufferSize(2048);
    acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,getIdleTimeout());
    ((SocketSessionConfig)acceptor.getSessionConfig()).setReceiveBufferSize(512);
    MdcInjectionFilter mdcFilter=new MdcInjectionFilter();
    acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
    acceptor.getFilterChain().addLast(""String_Node_Str"",new BlacklistFilter());
    updateBlacklistFilter();
    acceptor.getFilterChain().addLast(""String_Node_Str"",new ExecutorFilter(filterExecutor));
    acceptor.getFilterChain().addLast(""String_Node_Str"",new ProtocolCodecFilter(new FtpServerProtocolCodecFactory()));
    acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
    acceptor.getFilterChain().addLast(""String_Node_Str"",new FtpLoggingFilter());
    if (isImplicitSsl()) {
      SslConfiguration ssl=getSslConfiguration();
      SslFilter sslFilter;
      try {
        sslFilter=new SslFilter(ssl.getSSLContext());
      }
 catch (      GeneralSecurityException e) {
        throw new FtpServerConfigurationException(""String_Node_Str"");
      }
      if (ssl.getClientAuth() == ClientAuth.NEED) {
        sslFilter.setNeedClientAuth(true);
      }
 else       if (ssl.getClientAuth() == ClientAuth.WANT) {
        sslFilter.setWantClientAuth(true);
      }
      if (ssl.getEnabledCipherSuites() != null) {
        sslFilter.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
      }
      acceptor.getFilterChain().addFirst(""String_Node_Str"",sslFilter);
    }
    handler.init(context,this);
    acceptor.setHandler(new FtpHandlerAdapter(context,handler));
    try {
      acceptor.bind(address);
    }
 catch (    IOException e) {
      throw new FtpServerConfigurationException(""String_Node_Str"" + address + ""String_Node_Str"",e);
    }
    setPort(acceptor.getLocalAddress().getPort());
  }
 catch (  RuntimeException e) {
    stop();
    throw e;
  }
}","/** 
 * @see Listener#start(FtpServerContext)
 */
public synchronized void start(FtpServerContext context){
  try {
    this.context=context;
    acceptor=new NioSocketAcceptor(Runtime.getRuntime().availableProcessors());
    if (getServerAddress() != null) {
      address=new InetSocketAddress(getServerAddress(),getPort());
    }
 else {
      address=new InetSocketAddress(getPort());
    }
    acceptor.setReuseAddress(true);
    acceptor.getSessionConfig().setReadBufferSize(2048);
    acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,getIdleTimeout());
    ((SocketSessionConfig)acceptor.getSessionConfig()).setReceiveBufferSize(512);
    MdcInjectionFilter mdcFilter=new MdcInjectionFilter();
    acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
    acceptor.getFilterChain().addLast(""String_Node_Str"",new BlacklistFilter());
    updateBlacklistFilter();
    acceptor.getFilterChain().addLast(""String_Node_Str"",new ExecutorFilter(filterExecutor));
    acceptor.getFilterChain().addLast(""String_Node_Str"",new ProtocolCodecFilter(new FtpServerProtocolCodecFactory()));
    acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
    acceptor.getFilterChain().addLast(""String_Node_Str"",new FtpLoggingFilter());
    if (isImplicitSsl()) {
      SslConfiguration ssl=getSslConfiguration();
      SslFilter sslFilter;
      try {
        sslFilter=new SslFilter(ssl.getSSLContext());
      }
 catch (      GeneralSecurityException e) {
        throw new FtpServerConfigurationException(""String_Node_Str"");
      }
      if (ssl.getClientAuth() == ClientAuth.NEED) {
        sslFilter.setNeedClientAuth(true);
      }
 else       if (ssl.getClientAuth() == ClientAuth.WANT) {
        sslFilter.setWantClientAuth(true);
      }
      if (ssl.getEnabledCipherSuites() != null) {
        sslFilter.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
      }
      acceptor.getFilterChain().addFirst(""String_Node_Str"",sslFilter);
    }
    handler.init(context,this);
    acceptor.setHandler(new FtpHandlerAdapter(context,handler));
    try {
      acceptor.bind(address);
    }
 catch (    IOException e) {
      throw new FtpServerConfigurationException(""String_Node_Str"" + address + ""String_Node_Str"",e);
    }
    updatePort();
  }
 catch (  RuntimeException e) {
    stop();
    throw e;
  }
}",0.9904194166489249
152246,"protected FtpServerFactory createServer() throws Exception {
  assertTrue(USERS_FILE.getAbsolutePath() + ""String_Node_Str"",USERS_FILE.exists());
  FtpServerFactory serverFactory=new FtpServerFactory();
  serverFactory.setConnectionConfig(createConnectionConfigFactory().createConnectionConfig());
  ListenerFactory listenerFactory=new ListenerFactory();
  listenerFactory.setPort(port);
  listenerFactory.setDataConnectionConfiguration(createDataConnectionConfigurationFactory().createDataConnectionConfiguration());
  serverFactory.addListener(""String_Node_Str"",listenerFactory.createListener());
  PropertiesUserManagerFactory umFactory=new PropertiesUserManagerFactory();
  umFactory.setAdminName(""String_Node_Str"");
  umFactory.setPasswordEncryptor(new ClearTextPasswordEncryptor());
  umFactory.setFile(USERS_FILE);
  serverFactory.setUserManager(umFactory.createUserManager());
  return serverFactory;
}","protected FtpServerFactory createServer() throws Exception {
  assertTrue(USERS_FILE.getAbsolutePath() + ""String_Node_Str"",USERS_FILE.exists());
  FtpServerFactory serverFactory=new FtpServerFactory();
  serverFactory.setConnectionConfig(createConnectionConfigFactory().createConnectionConfig());
  ListenerFactory listenerFactory=new ListenerFactory();
  listenerFactory.setPort(0);
  listenerFactory.setDataConnectionConfiguration(createDataConnectionConfigurationFactory().createDataConnectionConfiguration());
  serverFactory.addListener(""String_Node_Str"",listenerFactory.createListener());
  PropertiesUserManagerFactory umFactory=new PropertiesUserManagerFactory();
  umFactory.setAdminName(""String_Node_Str"");
  umFactory.setPasswordEncryptor(new ClearTextPasswordEncryptor());
  umFactory.setFile(USERS_FILE);
  serverFactory.setUserManager(umFactory.createUserManager());
  return serverFactory;
}",0.9972451790633609
152247,"/** 
 * @throws IOException
 * @throws Exception
 */
protected void initServer() throws IOException, Exception {
  initPort();
  server=(DefaultFtpServer)createServer().createServer();
  if (isStartServer()) {
    server.start();
  }
}","/** 
 * @throws IOException
 * @throws Exception
 */
protected void initServer() throws IOException, Exception {
  server=(DefaultFtpServer)createServer().createServer();
  if (isStartServer()) {
    server.start();
  }
}",0.9692982456140352
152248,"protected void doConnect() throws Exception {
  try {
    client.connect(""String_Node_Str"",port);
  }
 catch (  FTPConnectionClosedException e) {
    Thread.sleep(200);
    client.connect(""String_Node_Str"",port);
  }
}","protected void doConnect() throws Exception {
  try {
    client.connect(""String_Node_Str"",getListenerPort());
  }
 catch (  FTPConnectionClosedException e) {
    Thread.sleep(200);
    client.connect(""String_Node_Str"",getListenerPort());
  }
}",0.9090909090909092
152249,"public void testPort() throws Exception {
  assertEquals(port,((NioListener)server.getServerContext().getListener(""String_Node_Str"")).getPort());
  server.start();
  assertEquals(port,((NioListener)server.getServerContext().getListener(""String_Node_Str"")).getPort());
}","public void testPort() throws Exception {
  assertEquals(0,((NioListener)server.getListener(""String_Node_Str"")).getPort());
  server.start();
  assertTrue(((NioListener)server.getListener(""String_Node_Str"")).getPort() > 0);
}",0.7935222672064778
152250,"public void testConnect() throws Exception {
  try {
    client.connect(""String_Node_Str"",port);
    fail(""String_Node_Str"");
  }
 catch (  FTPConnectionClosedException e) {
  }
}","public void testConnect() throws Exception {
  try {
    client.connect(""String_Node_Str"",getListenerPort());
    fail(""String_Node_Str"");
  }
 catch (  FTPConnectionClosedException e) {
  }
}",0.9595687331536388
152251,"public void testLoginWithMaxConnections() throws Exception {
  FTPClient client1=new FTPClient();
  FTPClient client2=new FTPClient();
  FTPClient client3=new FTPClient();
  FTPClient client4=new FTPClient();
  try {
    client1.connect(""String_Node_Str"",port);
    client2.connect(""String_Node_Str"",port);
    client3.connect(""String_Node_Str"",port);
    client4.connect(""String_Node_Str"",port);
    assertTrue(client1.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
    assertTrue(client2.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
    assertTrue(client3.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
    try {
      assertTrue(client4.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
      assertEquals(421,client.getReplyCode());
      fail(""String_Node_Str"");
    }
 catch (    FTPConnectionClosedException e) {
    }
  }
  finally {
    closeQuitely(client1);
    closeQuitely(client2);
    closeQuitely(client3);
    closeQuitely(client4);
  }
}","public void testLoginWithMaxConnections() throws Exception {
  FTPClient client1=new FTPClient();
  FTPClient client2=new FTPClient();
  FTPClient client3=new FTPClient();
  FTPClient client4=new FTPClient();
  try {
    client1.connect(""String_Node_Str"",getListenerPort());
    client2.connect(""String_Node_Str"",getListenerPort());
    client3.connect(""String_Node_Str"",getListenerPort());
    client4.connect(""String_Node_Str"",getListenerPort());
    assertTrue(client1.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
    assertTrue(client2.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
    assertTrue(client3.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
    try {
      assertTrue(client4.login(TESTUSER1_USERNAME,TESTUSER_PASSWORD));
      assertEquals(421,client.getReplyCode());
      fail(""String_Node_Str"");
    }
 catch (    FTPConnectionClosedException e) {
    }
  }
  finally {
    closeQuitely(client1);
    closeQuitely(client2);
    closeQuitely(client3);
    closeQuitely(client4);
  }
}",0.956967213114754
152252,"public void testMultiplePasv() throws Exception {
  for (int i=0; i < 5; i++) {
    client.connect(""String_Node_Str"",port);
    client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
    client.pasv();
    client.quit();
    client.disconnect();
  }
}","public void testMultiplePasv() throws Exception {
  for (int i=0; i < 5; i++) {
    client.connect(""String_Node_Str"",getListenerPort());
    client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
    client.pasv();
    client.quit();
    client.disconnect();
  }
}",0.9575757575757576
152253,"/** 
 * This tests that the correct IP is returned, that is the IP that the client has connected to. Note that this test will only work if you got more than one NIC and the server is allowed to listen an all NICs
 */
public void testPasvIp() throws Exception {
  String[] ips=TestUtil.getHostAddresses();
  for (int i=0; i < ips.length; i++) {
    String ip=ips[i];
    String ftpIp=ip.replace('.',',');
    if (!ip.startsWith(""String_Node_Str"")) {
      try {
        client.connect(ip,port);
      }
 catch (      FTPConnectionClosedException e) {
        Thread.sleep(200);
        client.connect(ip,port);
      }
      client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
      client.pasv();
      assertTrue(client.getReplyString().indexOf(ftpIp) > -1);
      client.quit();
      client.disconnect();
    }
  }
}","/** 
 * This tests that the correct IP is returned, that is the IP that the client has connected to. Note that this test will only work if you got more than one NIC and the server is allowed to listen an all NICs
 */
public void testPasvIp() throws Exception {
  String[] ips=TestUtil.getHostAddresses();
  for (int i=0; i < ips.length; i++) {
    String ip=ips[i];
    String ftpIp=ip.replace('.',',');
    if (!ip.startsWith(""String_Node_Str"")) {
      try {
        client.connect(ip,getListenerPort());
      }
 catch (      FTPConnectionClosedException e) {
        Thread.sleep(200);
        client.connect(ip,getListenerPort());
      }
      client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
      client.pasv();
      assertTrue(client.getReplyString().indexOf(ftpIp) > -1);
      client.quit();
      client.disconnect();
    }
  }
}",0.9745454545454544
152254,"public void testSiteStat() throws Exception {
  server.stop();
  initServer();
  FTPClient client1=new FTPClient();
  client1.connect(""String_Node_Str"",port);
  assertTrue(client1.login(ADMIN_USERNAME,ADMIN_PASSWORD));
  assertTrue(client1.makeDirectory(""String_Node_Str""));
  assertTrue(client1.makeDirectory(""String_Node_Str""));
  assertTrue(client1.removeDirectory(""String_Node_Str""));
  assertTrue(client1.storeFile(TEST_FILENAME,new ByteArrayInputStream(TESTDATA)));
  assertTrue(client1.storeFile(TEST_FILENAME,new ByteArrayInputStream(TESTDATA)));
  assertTrue(client1.retrieveFile(TEST_FILENAME,new ByteArrayOutputStream()));
  assertTrue(client1.deleteFile(TEST_FILENAME));
  assertTrue(client1.logout());
  client1.disconnect();
  FTPClient client2=new FTPClient();
  client2.connect(""String_Node_Str"",port);
  assertTrue(client2.login(ANONYMOUS_USERNAME,ANONYMOUS_PASSWORD));
  client.connect(""String_Node_Str"",port);
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
  client.sendCommand(""String_Node_Str"");
  String[] siteReplies=client.getReplyString().split(""String_Node_Str"");
  assertEquals(""String_Node_Str"",siteReplies[0]);
  String pattern=""String_Node_Str"" + TIMESTAMP_PATTERN;
  assertTrue(Pattern.matches(pattern,siteReplies[1]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[2]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[3]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[4]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[5]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[6]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[7]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[8]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[9]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[10]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[11]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[12]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[13]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[14]));
}","public void testSiteStat() throws Exception {
  server.stop();
  initServer();
  FTPClient client1=new FTPClient();
  client1.connect(""String_Node_Str"",getListenerPort());
  assertTrue(client1.login(ADMIN_USERNAME,ADMIN_PASSWORD));
  assertTrue(client1.makeDirectory(""String_Node_Str""));
  assertTrue(client1.makeDirectory(""String_Node_Str""));
  assertTrue(client1.removeDirectory(""String_Node_Str""));
  assertTrue(client1.storeFile(TEST_FILENAME,new ByteArrayInputStream(TESTDATA)));
  assertTrue(client1.storeFile(TEST_FILENAME,new ByteArrayInputStream(TESTDATA)));
  assertTrue(client1.retrieveFile(TEST_FILENAME,new ByteArrayOutputStream()));
  assertTrue(client1.deleteFile(TEST_FILENAME));
  assertTrue(client1.logout());
  client1.disconnect();
  FTPClient client2=new FTPClient();
  client2.connect(""String_Node_Str"",getListenerPort());
  assertTrue(client2.login(ANONYMOUS_USERNAME,ANONYMOUS_PASSWORD));
  client.connect(""String_Node_Str"",getListenerPort());
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
  client.sendCommand(""String_Node_Str"");
  String[] siteReplies=client.getReplyString().split(""String_Node_Str"");
  assertEquals(""String_Node_Str"",siteReplies[0]);
  String pattern=""String_Node_Str"" + TIMESTAMP_PATTERN;
  assertTrue(Pattern.matches(pattern,siteReplies[1]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[2]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[3]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[4]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[5]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[6]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[7]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[8]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[9]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[10]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[11]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[12]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[13]));
  assertTrue(Pattern.matches(""String_Node_Str"",siteReplies[14]));
}",0.9851520150836672
152255,"public void testConnect() throws Exception {
  try {
    client.connect(""String_Node_Str"",port);
    fail(""String_Node_Str"");
  }
 catch (  FTPConnectionClosedException e) {
  }
}","public void testConnect() throws Exception {
  try {
    client.connect(""String_Node_Str"",getListenerPort());
    fail(""String_Node_Str"");
  }
 catch (  FTPConnectionClosedException e) {
  }
}",0.9595687331536388
152256,"public void testSuspendResumeListener() throws Exception {
  client.connect(""String_Node_Str"",port);
  client.disconnect();
  server.getListener(""String_Node_Str"").suspend();
  try {
    client.connect(""String_Node_Str"",port);
    fail(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
 finally {
    client.disconnect();
  }
  server.getListener(""String_Node_Str"").resume();
  client.connect(""String_Node_Str"",port);
  client.disconnect();
}","public void testSuspendResumeListener() throws Exception {
  client.connect(""String_Node_Str"",getListenerPort());
  client.disconnect();
  server.getListener(""String_Node_Str"").suspend();
  try {
    client.connect(""String_Node_Str"",getListenerPort());
    fail(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
 finally {
    client.disconnect();
  }
  server.getListener(""String_Node_Str"").resume();
  client.connect(""String_Node_Str"",getListenerPort());
  client.disconnect();
}",0.7845659163987139
152257,"public void testSuspendResumeServer() throws Exception {
  client.connect(""String_Node_Str"",port);
  client.disconnect();
  server.suspend();
  try {
    client.connect(""String_Node_Str"",port);
    fail(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
 finally {
    client.disconnect();
  }
  server.resume();
  client.connect(""String_Node_Str"",port);
  client.disconnect();
}","public void testSuspendResumeServer() throws Exception {
  client.connect(""String_Node_Str"",getListenerPort());
  client.disconnect();
  server.suspend();
  try {
    client.connect(""String_Node_Str"",getListenerPort());
    fail(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
 finally {
    client.disconnect();
  }
  server.resume();
  client.connect(""String_Node_Str"",getListenerPort());
  client.disconnect();
}",0.8273291925465839
152258,"public void testFailStartingSecondListener() throws Exception {
  FtpServerFactory serverFactory=new FtpServerFactory();
  ListenerFactory listenerFactory=new ListenerFactory();
  listenerFactory.setPort(TestUtil.findFreePort());
  Listener defaultListener=listenerFactory.createListener();
  Listener secondListener=listenerFactory.createListener();
  serverFactory.addListener(""String_Node_Str"",defaultListener);
  serverFactory.addListener(""String_Node_Str"",secondListener);
  FtpServer server=serverFactory.createServer();
  try {
    server.start();
  }
 catch (  FtpServerConfigurationException e) {
    if (e.getCause() instanceof BindException) {
      assertTrue(defaultListener.isStopped());
      assertTrue(secondListener.isStopped());
      assertTrue(server.isStopped());
    }
 else {
      throw e;
    }
  }
}","public void testFailStartingSecondListener() throws Exception {
  FtpServerFactory serverFactory=new FtpServerFactory();
  ListenerFactory listenerFactory=new ListenerFactory();
  listenerFactory.setPort(0);
  Listener defaultListener=listenerFactory.createListener();
  Listener secondListener=listenerFactory.createListener();
  serverFactory.addListener(""String_Node_Str"",defaultListener);
  serverFactory.addListener(""String_Node_Str"",secondListener);
  FtpServer server=serverFactory.createServer();
  try {
    server.start();
  }
 catch (  FtpServerConfigurationException e) {
    if (e.getCause() instanceof BindException) {
      assertTrue(defaultListener.isStopped());
      assertTrue(secondListener.isStopped());
      assertTrue(server.isStopped());
    }
 else {
      throw e;
    }
  }
}",0.985276073619632
152259,"/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  String argument=request.getArgument();
  if (argument == null || argument.trim().length() == 0) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
  String[] arguments=argument.split(""String_Node_Str"",2);
  if (arguments.length != 2) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
  String timestamp=arguments[0].trim();
  try {
    Date time=DateUtils.parseFTPDate(timestamp);
    String fileName=arguments[1].trim();
    FtpFile file=null;
    try {
      file=session.getFileSystemView().getFile(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"" + fileName,ex);
    }
    if (file == null || !file.doesExist()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.isFile()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    if (file.setLastModified(time.getTime())) {
    }
 else {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_450_REQUESTED_FILE_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
    }
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_213_FILE_STATUS,""String_Node_Str"",""String_Node_Str"" + timestamp + ""String_Node_Str""+ fileName));
    return;
  }
 catch (  ParseException e) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
}","/** 
 * Execute command.
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  String argument=request.getArgument();
  if (argument == null || argument.trim().length() == 0) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
  String[] arguments=argument.split(""String_Node_Str"",2);
  if (arguments.length != 2) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
  String timestamp=arguments[0].trim();
  try {
    Date time=DateUtils.parseFTPDate(timestamp);
    String fileName=arguments[1].trim();
    FtpFile file=null;
    try {
      file=session.getFileSystemView().getFile(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"" + fileName,ex);
    }
    if (file == null || !file.doesExist()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.isFile()) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    if (!file.setLastModified(time.getTime())) {
      session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_450_REQUESTED_FILE_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_213_FILE_STATUS,""String_Node_Str"",""String_Node_Str"" + timestamp + ""String_Node_Str""+ fileName));
    return;
  }
 catch (  ParseException e) {
    session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
}",0.9929799080125876
152260,"/** 
 * Save user. If new insert a new row, else update the existing row.
 */
public void save(User user) throws FtpException {
  if (user.getName() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Statement stmt=null;
  try {
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(ATTR_LOGIN,escapeString(user.getName()));
    String password=null;
    if (user.getPassword() != null) {
      password=getPasswordEncryptor().encrypt(user.getPassword());
    }
 else {
      ResultSet rs=null;
      try {
        rs=selectUserByName(user.getName());
        if (rs.next()) {
          password=rs.getString(ATTR_PASSWORD);
        }
      }
  finally {
        closeQuitely(rs);
      }
    }
    map.put(ATTR_PASSWORD,escapeString(password));
    String home=user.getHomeDirectory();
    if (home == null) {
      home=""String_Node_Str"";
    }
    map.put(ATTR_HOME,escapeString(home));
    map.put(ATTR_ENABLE,String.valueOf(user.getEnabled()));
    map.put(ATTR_WRITE_PERM,String.valueOf(user.authorize(new WriteRequest()) != null));
    map.put(ATTR_MAX_IDLE_TIME,user.getMaxIdleTime());
    TransferRateRequest transferRateRequest=new TransferRateRequest();
    transferRateRequest=(TransferRateRequest)user.authorize(transferRateRequest);
    if (transferRateRequest != null) {
      map.put(ATTR_MAX_UPLOAD_RATE,transferRateRequest.getMaxUploadRate());
      map.put(ATTR_MAX_DOWNLOAD_RATE,transferRateRequest.getMaxDownloadRate());
    }
 else {
      map.put(ATTR_MAX_UPLOAD_RATE,0);
      map.put(ATTR_MAX_DOWNLOAD_RATE,0);
    }
    ConcurrentLoginRequest concurrentLoginRequest=new ConcurrentLoginRequest(0,0);
    concurrentLoginRequest=(ConcurrentLoginRequest)user.authorize(concurrentLoginRequest);
    if (concurrentLoginRequest != null) {
      map.put(ATTR_MAX_LOGIN_NUMBER,concurrentLoginRequest.getMaxConcurrentLogins());
      map.put(ATTR_MAX_LOGIN_PER_IP,concurrentLoginRequest.getMaxConcurrentLoginsPerIP());
    }
 else {
      map.put(ATTR_MAX_LOGIN_NUMBER,0);
      map.put(ATTR_MAX_LOGIN_PER_IP,0);
    }
    String sql=null;
    if (!doesExist(user.getName())) {
      sql=StringUtils.replaceString(insertUserStmt,map);
    }
 else {
      sql=StringUtils.replaceString(updateUserStmt,map);
    }
    LOG.info(sql);
    stmt=createConnection().createStatement();
    stmt.executeUpdate(sql);
  }
 catch (  SQLException ex) {
    LOG.error(""String_Node_Str"",ex);
    throw new FtpException(""String_Node_Str"",ex);
  }
 finally {
    closeQuitely(stmt);
  }
}","/** 
 * Save user. If new insert a new row, else update the existing row.
 */
public void save(User user) throws FtpException {
  if (user.getName() == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Statement stmt=null;
  try {
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(ATTR_LOGIN,escapeString(user.getName()));
    String password=null;
    if (user.getPassword() != null) {
      password=getPasswordEncryptor().encrypt(user.getPassword());
    }
 else {
      ResultSet rs=null;
      try {
        User userWithPassword=selectUserByName(user.getName());
        if (userWithPassword != null) {
          password=userWithPassword.getPassword();
        }
      }
  finally {
        closeQuitely(rs);
      }
    }
    map.put(ATTR_PASSWORD,escapeString(password));
    String home=user.getHomeDirectory();
    if (home == null) {
      home=""String_Node_Str"";
    }
    map.put(ATTR_HOME,escapeString(home));
    map.put(ATTR_ENABLE,String.valueOf(user.getEnabled()));
    map.put(ATTR_WRITE_PERM,String.valueOf(user.authorize(new WriteRequest()) != null));
    map.put(ATTR_MAX_IDLE_TIME,user.getMaxIdleTime());
    TransferRateRequest transferRateRequest=new TransferRateRequest();
    transferRateRequest=(TransferRateRequest)user.authorize(transferRateRequest);
    if (transferRateRequest != null) {
      map.put(ATTR_MAX_UPLOAD_RATE,transferRateRequest.getMaxUploadRate());
      map.put(ATTR_MAX_DOWNLOAD_RATE,transferRateRequest.getMaxDownloadRate());
    }
 else {
      map.put(ATTR_MAX_UPLOAD_RATE,0);
      map.put(ATTR_MAX_DOWNLOAD_RATE,0);
    }
    ConcurrentLoginRequest concurrentLoginRequest=new ConcurrentLoginRequest(0,0);
    concurrentLoginRequest=(ConcurrentLoginRequest)user.authorize(concurrentLoginRequest);
    if (concurrentLoginRequest != null) {
      map.put(ATTR_MAX_LOGIN_NUMBER,concurrentLoginRequest.getMaxConcurrentLogins());
      map.put(ATTR_MAX_LOGIN_PER_IP,concurrentLoginRequest.getMaxConcurrentLoginsPerIP());
    }
 else {
      map.put(ATTR_MAX_LOGIN_NUMBER,0);
      map.put(ATTR_MAX_LOGIN_PER_IP,0);
    }
    String sql=null;
    if (!doesExist(user.getName())) {
      sql=StringUtils.replaceString(insertUserStmt,map);
    }
 else {
      sql=StringUtils.replaceString(updateUserStmt,map);
    }
    LOG.info(sql);
    stmt=createConnection().createStatement();
    stmt.executeUpdate(sql);
  }
 catch (  SQLException ex) {
    LOG.error(""String_Node_Str"",ex);
    throw new FtpException(""String_Node_Str"",ex);
  }
 finally {
    closeQuitely(stmt);
  }
}",0.9785896680416422
152261,"private ResultSet selectUserByName(String name) throws SQLException {
  HashMap<String,Object> map=new HashMap<String,Object>();
  map.put(ATTR_LOGIN,escapeString(name));
  String sql=StringUtils.replaceString(selectUserStmt,map);
  LOG.info(sql);
  Statement stmt=null;
  try {
    stmt=createConnection().createStatement();
    return stmt.executeQuery(sql);
  }
  finally {
    closeQuitely(stmt);
  }
}","private BaseUser selectUserByName(String name) throws SQLException {
  HashMap<String,Object> map=new HashMap<String,Object>();
  map.put(ATTR_LOGIN,escapeString(name));
  String sql=StringUtils.replaceString(selectUserStmt,map);
  LOG.info(sql);
  Statement stmt=null;
  ResultSet rs=null;
  try {
    stmt=createConnection().createStatement();
    rs=stmt.executeQuery(sql);
    BaseUser thisUser=null;
    if (rs.next()) {
      thisUser=new BaseUser();
      thisUser.setName(rs.getString(ATTR_LOGIN));
      thisUser.setPassword(rs.getString(ATTR_PASSWORD));
      thisUser.setHomeDirectory(rs.getString(ATTR_HOME));
      thisUser.setEnabled(rs.getBoolean(ATTR_ENABLE));
      thisUser.setMaxIdleTime(rs.getInt(ATTR_MAX_IDLE_TIME));
      List<Authority> authorities=new ArrayList<Authority>();
      if (rs.getBoolean(ATTR_WRITE_PERM)) {
        authorities.add(new WritePermission());
      }
      authorities.add(new ConcurrentLoginPermission(rs.getInt(ATTR_MAX_LOGIN_NUMBER),rs.getInt(ATTR_MAX_LOGIN_PER_IP)));
      authorities.add(new TransferRatePermission(rs.getInt(ATTR_MAX_DOWNLOAD_RATE),rs.getInt(ATTR_MAX_UPLOAD_RATE)));
      thisUser.setAuthorities(authorities);
    }
    return thisUser;
  }
  finally {
    closeQuitely(rs);
    closeQuitely(stmt);
  }
}",0.4643705463182898
152262,"/** 
 * Get the user object. Fetch the row from the table.
 */
public User getUserByName(String name) throws FtpException {
  Statement stmt=null;
  ResultSet rs=null;
  try {
    rs=selectUserByName(name);
    BaseUser thisUser=null;
    if (rs.next()) {
      thisUser=new BaseUser();
      thisUser.setName(rs.getString(ATTR_LOGIN));
      thisUser.setHomeDirectory(rs.getString(ATTR_HOME));
      thisUser.setEnabled(rs.getBoolean(ATTR_ENABLE));
      thisUser.setMaxIdleTime(rs.getInt(ATTR_MAX_IDLE_TIME));
      List<Authority> authorities=new ArrayList<Authority>();
      if (rs.getBoolean(ATTR_WRITE_PERM)) {
        authorities.add(new WritePermission());
      }
      authorities.add(new ConcurrentLoginPermission(rs.getInt(ATTR_MAX_LOGIN_NUMBER),rs.getInt(ATTR_MAX_LOGIN_PER_IP)));
      authorities.add(new TransferRatePermission(rs.getInt(ATTR_MAX_DOWNLOAD_RATE),rs.getInt(ATTR_MAX_UPLOAD_RATE)));
      thisUser.setAuthorities(authorities);
    }
    return thisUser;
  }
 catch (  SQLException ex) {
    LOG.error(""String_Node_Str"",ex);
    throw new FtpException(""String_Node_Str"",ex);
  }
 finally {
    closeQuitely(rs);
    closeQuitely(stmt);
  }
}","/** 
 * Get the user object. Fetch the row from the table.
 */
public User getUserByName(String name) throws FtpException {
  Statement stmt=null;
  ResultSet rs=null;
  try {
    BaseUser user=selectUserByName(name);
    if (user != null) {
      user.setPassword(null);
    }
    return user;
  }
 catch (  SQLException ex) {
    LOG.error(""String_Node_Str"",ex);
    throw new FtpException(""String_Node_Str"",ex);
  }
 finally {
    closeQuitely(rs);
    closeQuitely(stmt);
  }
}",0.502725620835857
152263,"void init(FtpServerContext context,Listener listener) throws Exception ;","void init(FtpServerContext context,Listener listener);",0.8571428571428571
152264,"/** 
 * Start the listener, will initiate the listener waiting on the socket. The method should not return until the listener has started accepting socket requests.
 * @throws Exception On error during start up
 */
void start(FtpServerContext serverContext) throws Exception ;","/** 
 * Start the listener, will initiate the listener waiting on the socket. The method should not return until the listener has started accepting socket requests.
 * @throws Exception On error during start up
 */
void start(FtpServerContext serverContext);",0.9662921348314608
152265,"/** 
 * Start the server. Open a new listener thread.
 */
public void start() throws Exception {
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.start(serverContext);
  }
  serverContext.getFtpletContainer().init(serverContext);
  started=true;
  LOG.info(""String_Node_Str"");
}","/** 
 * Start the server. Open a new listener thread.
 * @throws FtpException 
 */
public void start() throws FtpException {
  List<Listener> startedListeners=new ArrayList<Listener>();
  try {
    Map<String,Listener> listeners=serverContext.getListeners();
    for (    Listener listener : listeners.values()) {
      listener.start(serverContext);
      startedListeners.add(listener);
    }
    serverContext.getFtpletContainer().init(serverContext);
    started=true;
    LOG.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    for (    Listener listener : startedListeners) {
      listener.stop();
    }
    if (e instanceof FtpException) {
      throw (FtpException)e;
    }
 else {
      throw (RuntimeException)e;
    }
  }
}",0.6490428441203282
152266,"/** 
 * Stop the server. Stop the listener thread.
 */
public void stop(){
  if (!started || serverContext == null) {
    return;
  }
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.stop();
  }
  if (serverContext != null) {
    serverContext.dispose();
    serverContext=null;
  }
  started=false;
}","/** 
 * Stop the server. Stop the listener thread.
 */
public void stop(){
  if (serverContext == null) {
    return;
  }
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.stop();
  }
  if (serverContext != null) {
    serverContext.dispose();
    serverContext=null;
  }
  started=false;
}",0.9839142091152816
152267,"/** 
 * @see Listener#stop()
 */
public synchronized void stop(){
  if (acceptor != null) {
    acceptor.unbind();
    acceptor.dispose();
    acceptor=null;
  }
  if (filterExecutor != null) {
    filterExecutor.shutdown();
    try {
      filterExecutor.awaitTermination(5000,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
    }
 finally {
    }
  }
}","/** 
 * @see Listener#stop()
 */
public synchronized void stop(){
  if (acceptor != null) {
    acceptor.unbind();
    acceptor.dispose();
    acceptor=null;
  }
  if (filterExecutor != null) {
    filterExecutor.shutdown();
    try {
      filterExecutor.awaitTermination(5000,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
    }
 finally {
    }
  }
  context=null;
}",0.9764397905759162
152268,"/** 
 * @see Listener#start(FtpServerContext)
 */
public synchronized void start(FtpServerContext context) throws Exception {
  this.context=context;
  acceptor=new NioSocketAcceptor(Runtime.getRuntime().availableProcessors());
  if (getServerAddress() != null) {
    address=new InetSocketAddress(getServerAddress(),getPort());
  }
 else {
    address=new InetSocketAddress(getPort());
  }
  acceptor.setReuseAddress(true);
  acceptor.getSessionConfig().setReadBufferSize(2048);
  acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,getIdleTimeout());
  ((SocketSessionConfig)acceptor.getSessionConfig()).setReceiveBufferSize(512);
  MdcInjectionFilter mdcFilter=new MdcInjectionFilter();
  acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
  acceptor.getFilterChain().addLast(""String_Node_Str"",new BlacklistFilter());
  updateBlacklistFilter();
  acceptor.getFilterChain().addLast(""String_Node_Str"",new ExecutorFilter(filterExecutor));
  acceptor.getFilterChain().addLast(""String_Node_Str"",new ProtocolCodecFilter(new FtpServerProtocolCodecFactory()));
  acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
  acceptor.getFilterChain().addLast(""String_Node_Str"",new FtpLoggingFilter());
  if (isImplicitSsl()) {
    SslConfiguration ssl=getSslConfiguration();
    SslFilter sslFilter=new SslFilter(ssl.getSSLContext());
    if (ssl.getClientAuth() == ClientAuth.NEED) {
      sslFilter.setNeedClientAuth(true);
    }
 else     if (ssl.getClientAuth() == ClientAuth.WANT) {
      sslFilter.setWantClientAuth(true);
    }
    if (ssl.getEnabledCipherSuites() != null) {
      sslFilter.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
    }
    acceptor.getFilterChain().addFirst(""String_Node_Str"",sslFilter);
  }
  handler.init(context,this);
  acceptor.setHandler(new FtpHandlerAdapter(context,handler));
  acceptor.bind(address);
  setPort(acceptor.getLocalAddress().getPort());
}","/** 
 * @see Listener#start(FtpServerContext)
 */
public synchronized void start(FtpServerContext context){
  try {
    this.context=context;
    acceptor=new NioSocketAcceptor(Runtime.getRuntime().availableProcessors());
    if (getServerAddress() != null) {
      address=new InetSocketAddress(getServerAddress(),getPort());
    }
 else {
      address=new InetSocketAddress(getPort());
    }
    acceptor.setReuseAddress(true);
    acceptor.getSessionConfig().setReadBufferSize(2048);
    acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,getIdleTimeout());
    ((SocketSessionConfig)acceptor.getSessionConfig()).setReceiveBufferSize(512);
    MdcInjectionFilter mdcFilter=new MdcInjectionFilter();
    acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
    acceptor.getFilterChain().addLast(""String_Node_Str"",new BlacklistFilter());
    updateBlacklistFilter();
    acceptor.getFilterChain().addLast(""String_Node_Str"",new ExecutorFilter(filterExecutor));
    acceptor.getFilterChain().addLast(""String_Node_Str"",new ProtocolCodecFilter(new FtpServerProtocolCodecFactory()));
    acceptor.getFilterChain().addLast(""String_Node_Str"",mdcFilter);
    acceptor.getFilterChain().addLast(""String_Node_Str"",new FtpLoggingFilter());
    if (isImplicitSsl()) {
      SslConfiguration ssl=getSslConfiguration();
      SslFilter sslFilter;
      try {
        sslFilter=new SslFilter(ssl.getSSLContext());
      }
 catch (      GeneralSecurityException e) {
        throw new FtpServerConfigurationException(""String_Node_Str"");
      }
      if (ssl.getClientAuth() == ClientAuth.NEED) {
        sslFilter.setNeedClientAuth(true);
      }
 else       if (ssl.getClientAuth() == ClientAuth.WANT) {
        sslFilter.setWantClientAuth(true);
      }
      if (ssl.getEnabledCipherSuites() != null) {
        sslFilter.setEnabledCipherSuites(ssl.getEnabledCipherSuites());
      }
      acceptor.getFilterChain().addFirst(""String_Node_Str"",sslFilter);
    }
    handler.init(context,this);
    acceptor.setHandler(new FtpHandlerAdapter(context,handler));
    try {
      acceptor.bind(address);
    }
 catch (    IOException e) {
      throw new FtpServerConfigurationException(""String_Node_Str"" + address + ""String_Node_Str"",e);
    }
    setPort(acceptor.getLocalAddress().getPort());
  }
 catch (  RuntimeException e) {
    stop();
    throw e;
  }
}",0.8658735712619547
152269,"/** 
 * Suspend further requests
 */
public void suspend(){
  if (!started) {
    return;
  }
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.suspend();
  }
  suspended=true;
}","/** 
 * Suspend further requests
 */
public void suspend(){
  if (!started) {
    return;
  }
  LOG.debug(""String_Node_Str"");
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.suspend();
  }
  suspended=true;
  LOG.debug(""String_Node_Str"");
}",0.8885017421602788
152270,"/** 
 * Resume the server handler
 */
public void resume(){
  if (!suspended) {
    return;
  }
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.resume();
  }
  suspended=false;
}","/** 
 * Resume the server handler
 */
public void resume(){
  if (!suspended) {
    return;
  }
  LOG.debug(""String_Node_Str"");
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.resume();
  }
  suspended=false;
  LOG.debug(""String_Node_Str"");
}",0.889273356401384
152271,"/** 
 * @see Listener#resume()
 */
public synchronized void resume(){
  if (acceptor != null && suspended) {
    try {
      acceptor.bind(address);
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * @see Listener#resume()
 */
public synchronized void resume(){
  if (acceptor != null && suspended) {
    try {
      LOG.debug(""String_Node_Str"");
      acceptor.bind(address);
      LOG.debug(""String_Node_Str"");
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.8661710037174721
152272,"/** 
 * @see Listener#suspend()
 */
public synchronized void suspend(){
  if (acceptor != null && !suspended) {
    acceptor.unbind(address);
  }
}","/** 
 * @see Listener#suspend()
 */
public synchronized void suspend(){
  if (acceptor != null && !suspended) {
    LOG.debug(""String_Node_Str"");
    acceptor.unbind();
    suspended=true;
    LOG.debug(""String_Node_Str"");
  }
}",0.7466666666666667
152273,"/** 
 * Get the user object. Fetch the row from the table.
 */
public synchronized User getUserByName(String name) throws FtpException {
  lazyInit();
  Statement stmt=null;
  ResultSet rs=null;
  try {
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(ATTR_LOGIN,escapeString(name));
    String sql=StringUtils.replaceString(selectUserStmt,map);
    LOG.info(sql);
    stmt=createConnection().createStatement();
    rs=stmt.executeQuery(sql);
    BaseUser thisUser=null;
    String trueStr=Boolean.TRUE.toString();
    if (rs.next()) {
      thisUser=new BaseUser();
      thisUser.setName(rs.getString(ATTR_LOGIN));
      thisUser.setHomeDirectory(rs.getString(ATTR_HOME));
      thisUser.setEnabled(trueStr.equalsIgnoreCase(rs.getString(ATTR_ENABLE)));
      thisUser.setMaxIdleTime(rs.getInt(ATTR_MAX_IDLE_TIME));
      List<Authority> authorities=new ArrayList<Authority>();
      if (trueStr.equalsIgnoreCase(rs.getString(ATTR_WRITE_PERM))) {
        authorities.add(new WritePermission());
      }
      authorities.add(new ConcurrentLoginPermission(rs.getInt(ATTR_MAX_LOGIN_NUMBER),rs.getInt(ATTR_MAX_LOGIN_PER_IP)));
      authorities.add(new TransferRatePermission(rs.getInt(ATTR_MAX_DOWNLOAD_RATE),rs.getInt(ATTR_MAX_UPLOAD_RATE)));
      thisUser.setAuthorities(authorities.toArray(new Authority[0]));
    }
    return thisUser;
  }
 catch (  SQLException ex) {
    LOG.error(""String_Node_Str"",ex);
    throw new FtpException(""String_Node_Str"",ex);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
      }
    }
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
      }
    }
  }
}","/** 
 * Get the user object. Fetch the row from the table.
 */
public synchronized User getUserByName(String name) throws FtpException {
  lazyInit();
  Statement stmt=null;
  ResultSet rs=null;
  try {
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(ATTR_LOGIN,escapeString(name));
    String sql=StringUtils.replaceString(selectUserStmt,map);
    LOG.info(sql);
    stmt=createConnection().createStatement();
    rs=stmt.executeQuery(sql);
    BaseUser thisUser=null;
    if (rs.next()) {
      thisUser=new BaseUser();
      thisUser.setName(rs.getString(ATTR_LOGIN));
      thisUser.setHomeDirectory(rs.getString(ATTR_HOME));
      thisUser.setEnabled(isTrue(rs.getString(ATTR_ENABLE)));
      thisUser.setMaxIdleTime(rs.getInt(ATTR_MAX_IDLE_TIME));
      List<Authority> authorities=new ArrayList<Authority>();
      if (isTrue(rs.getString(ATTR_WRITE_PERM))) {
        authorities.add(new WritePermission());
      }
      authorities.add(new ConcurrentLoginPermission(rs.getInt(ATTR_MAX_LOGIN_NUMBER),rs.getInt(ATTR_MAX_LOGIN_PER_IP)));
      authorities.add(new TransferRatePermission(rs.getInt(ATTR_MAX_DOWNLOAD_RATE),rs.getInt(ATTR_MAX_UPLOAD_RATE)));
      thisUser.setAuthorities(authorities.toArray(new Authority[0]));
    }
    return thisUser;
  }
 catch (  SQLException ex) {
    LOG.error(""String_Node_Str"",ex);
    throw new FtpException(""String_Node_Str"",ex);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
      }
    }
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
      }
    }
  }
}",0.9716231555051078
152274,"/** 
 * Start the server. Open a new listener thread.
 */
public void start() throws Exception {
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.start(serverContext);
  }
  started=true;
  LOG.info(""String_Node_Str"");
}","/** 
 * Start the server. Open a new listener thread.
 */
public void start() throws Exception {
  Map<String,Listener> listeners=serverContext.getListeners();
  for (  Listener listener : listeners.values()) {
    listener.start(serverContext);
  }
  serverContext.getFtpletContainer().init(serverContext);
  started=true;
  LOG.info(""String_Node_Str"");
}",0.91131498470948
152275,"public void init(FtpletContext ftpletContext) throws FtpException {
}","public synchronized void init(FtpletContext ftpletContext) throws FtpException {
  this.ftpletContext=ftpletContext;
  for (  Entry<String,Ftplet> entry : ftplets.entrySet()) {
    entry.getValue().init(ftpletContext);
  }
}",0.4709897610921502
152276,"/** 
 * @see FtpletContainer#setFtplets(Map)
 */
public void setFtplets(Map<String,Ftplet> ftplets){
  this.ftplets=ftplets;
}","/** 
 * @see FtpletContainer#setFtplets(Map)
 */
public synchronized void setFtplets(Map<String,Ftplet> ftplets){
  this.ftplets=ftplets;
}",0.9509433962264152
152277,"/** 
 * Get Ftplet for the given name.
 */
public Ftplet getFtplet(String name){
  if (name == null) {
    return null;
  }
  return ftplets.get(name);
}","/** 
 * Get Ftplet for the given name.
 */
public synchronized Ftplet getFtplet(String name){
  if (name == null) {
    return null;
  }
  return ftplets.get(name);
}",0.9592476489028212
152278,"/** 
 * @see FtpletContainer#getFtplets()
 */
public Map<String,Ftplet> getFtplets(){
  return ftplets;
}","/** 
 * @see FtpletContainer#getFtplets()
 */
public synchronized Map<String,Ftplet> getFtplets(){
  return ftplets;
}",0.9417040358744396
152279,"public void addFtplet(String name,Ftplet ftplet){
  if (getFtplet(name) != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  ftplets.put(name,ftplet);
}","public synchronized void addFtplet(String name,Ftplet ftplet) throws FtpException {
  if (getFtplet(name) != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  ftplets.put(name,ftplet);
  if (ftpletContext != null) {
    ftplet.init(ftpletContext);
  }
}",0.5584158415841585
152280,"public void dispose(){
  for (  Entry<String,Ftplet> entry : ftplets.entrySet()) {
    try {
      entry.getValue().destroy();
    }
 catch (    Exception ex) {
      LOG.error(entry.getKey() + ""String_Node_Str"",ex);
    }
  }
  ftplets.clear();
}","public synchronized void dispose(){
  for (  Entry<String,Ftplet> entry : ftplets.entrySet()) {
    try {
      entry.getValue().destroy();
    }
 catch (    Exception ex) {
      LOG.error(entry.getKey() + ""String_Node_Str"",ex);
    }
  }
  ftplets.clear();
}",0.9743589743589745
152281,"public Ftplet removeFtplet(String name){
  Ftplet ftplet=ftplets.get(name);
  if (ftplet != null) {
    ftplets.remove(name);
    return ftplet;
  }
 else {
    return null;
  }
}","public synchronized Ftplet removeFtplet(String name){
  Ftplet ftplet=ftplets.get(name);
  if (ftplet != null) {
    ftplets.remove(name);
    return ftplet;
  }
 else {
    return null;
  }
}",0.9649595687331536
152282,"/** 
 * Add an   {@link Ftplet} to the container.
 * @param name The name of the Ftplet to be added
 * @param ftplet The Ftplet
 * @throws IllegalArgumentException If an Ftplet with the same name already exist within the container
 */
void addFtplet(String name,Ftplet ftplet);","/** 
 * Add an   {@link Ftplet} to the container.
 * @param name The name of the Ftplet to be added
 * @param ftplet The Ftplet
 * @throws FtpException 
 * @throws IllegalArgumentException If an Ftplet with the same name already exist within the container
 */
void addFtplet(String name,Ftplet ftplet) throws FtpException ;",0.9233333333333332
152283,"public void testAddAndGetFtplet(){
  MockFtplet ftplet1=new MockFtplet();
  MockFtplet ftplet2=new MockFtplet();
  assertNull(container.getFtplet(""String_Node_Str""));
  assertNull(container.getFtplet(""String_Node_Str""));
  container.addFtplet(""String_Node_Str"",ftplet1);
  container.addFtplet(""String_Node_Str"",ftplet2);
  assertSame(ftplet1,container.getFtplet(""String_Node_Str""));
  assertSame(ftplet2,container.getFtplet(""String_Node_Str""));
}","public void testAddAndGetFtplet() throws FtpException {
  MockFtplet ftplet1=new MockFtplet();
  MockFtplet ftplet2=new MockFtplet();
  assertNull(container.getFtplet(""String_Node_Str""));
  assertNull(container.getFtplet(""String_Node_Str""));
  container.addFtplet(""String_Node_Str"",ftplet1);
  container.addFtplet(""String_Node_Str"",ftplet2);
  assertSame(ftplet1,container.getFtplet(""String_Node_Str""));
  assertSame(ftplet2,container.getFtplet(""String_Node_Str""));
}",0.976998904709748
152284,"public void testRemoveFtplet(){
  MockFtplet ftplet1=new MockFtplet();
  MockFtplet ftplet2=new MockFtplet();
  container.addFtplet(""String_Node_Str"",ftplet1);
  container.addFtplet(""String_Node_Str"",ftplet2);
  assertSame(ftplet1,container.getFtplet(""String_Node_Str""));
  assertSame(ftplet2,container.getFtplet(""String_Node_Str""));
  assertSame(ftplet1,container.removeFtplet(""String_Node_Str""));
  assertNull(container.getFtplet(""String_Node_Str""));
  assertSame(ftplet2,container.getFtplet(""String_Node_Str""));
  assertNull(container.removeFtplet(""String_Node_Str""));
}","public void testRemoveFtplet() throws FtpException {
  MockFtplet ftplet1=new MockFtplet();
  MockFtplet ftplet2=new MockFtplet();
  container.addFtplet(""String_Node_Str"",ftplet1);
  container.addFtplet(""String_Node_Str"",ftplet2);
  assertSame(ftplet1,container.getFtplet(""String_Node_Str""));
  assertSame(ftplet2,container.getFtplet(""String_Node_Str""));
  assertSame(ftplet1,container.removeFtplet(""String_Node_Str""));
  assertNull(container.getFtplet(""String_Node_Str""));
  assertSame(ftplet2,container.getFtplet(""String_Node_Str""));
  assertNull(container.removeFtplet(""String_Node_Str""));
}",0.9820051413881749
152285,"public void testAddFtpletWithDuplicateName(){
  MockFtplet ftplet1=new MockFtplet();
  MockFtplet ftplet2=new MockFtplet();
  assertNull(container.getFtplet(""String_Node_Str""));
  container.addFtplet(""String_Node_Str"",ftplet1);
  try {
    container.addFtplet(""String_Node_Str"",ftplet2);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  assertSame(ftplet1,container.getFtplet(""String_Node_Str""));
}","public void testAddFtpletWithDuplicateName() throws FtpException {
  MockFtplet ftplet1=new MockFtplet();
  MockFtplet ftplet2=new MockFtplet();
  assertNull(container.getFtplet(""String_Node_Str""));
  container.addFtplet(""String_Node_Str"",ftplet1);
  try {
    container.addFtplet(""String_Node_Str"",ftplet2);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  assertSame(ftplet1,container.getFtplet(""String_Node_Str""));
}",0.976054732041049
152286,"public void init(FtpletContext ftpletContext) throws FtpException {
  callback.init(ftpletContext);
}","public void init(FtpletContext ftpletContext) throws FtpException {
  this.context=ftpletContext;
  callback.init(ftpletContext);
}",0.8706896551724138
152287,"public void destroy(){
  callback.destroy();
}","public void destroy(){
  destroyed=true;
  callback.destroy();
}",0.8363636363636363
152288,"/** 
 * Execute command
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_221_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
  session.closeOnFlush().awaitUninterruptibly(10000);
}","/** 
 * Execute command
 */
public void execute(final FtpIoSession session,final FtpServerContext context,final FtpRequest request) throws IOException {
  session.resetState();
  session.write(LocalizedFtpReply.translate(session,request,context,FtpReply.REPLY_221_CLOSING_CONTROL_CONNECTION,""String_Node_Str"",null));
  session.closeOnFlush().awaitUninterruptibly(10000);
  session.getDataConnection().closeDataConnection();
}",0.933500627352572
152289,"/** 
 * Attempts to find a free port or fallback to a default
 * @throws IOException
 * @throws IOException
 */
public static int findFreePort() throws IOException {
  int port=-1;
  ServerSocket tmpSocket=null;
  try {
    tmpSocket=new ServerSocket(DEFAULT_PORT);
    port=DEFAULT_PORT;
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    try {
      int attempts=0;
      while (port < 1024 && attempts < 1000) {
        attempts++;
        tmpSocket=new ServerSocket(0);
        port=tmpSocket.getLocalPort();
      }
    }
 catch (    IOException e1) {
      throw new IOException(""String_Node_Str"" + e1.getMessage());
    }
  }
 finally {
    if (tmpSocket != null) {
      try {
        tmpSocket.close();
      }
 catch (      IOException e) {
      }
      tmpSocket=null;
    }
  }
  return port;
}","/** 
 * Attempts to find a free port
 * @param initPort The first port to try, before resolving to brute force searching
 * @throws IOException
 * @throws IOException
 */
public static int findFreePort(int initPort) throws IOException {
  int port=-1;
  ServerSocket tmpSocket=null;
  try {
    tmpSocket=new ServerSocket(initPort);
    port=initPort;
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    try {
      int attempts=0;
      while (port < 1024 && attempts < 1000) {
        attempts++;
        tmpSocket=new ServerSocket(0);
        port=tmpSocket.getLocalPort();
      }
    }
 catch (    IOException e1) {
      throw new IOException(""String_Node_Str"" + e1.getMessage());
    }
  }
 finally {
    if (tmpSocket != null) {
      try {
        tmpSocket.close();
      }
 catch (      IOException e) {
      }
      tmpSocket=null;
    }
  }
  return port;
}",0.9162333911034084
152290,"/** 
 * Close data socket.
 */
void closeDataConnection();","/** 
 * Close data socket. If no open data connection exists, this will silently ignore the call.
 */
void closeDataConnection();",0.6203208556149733
152291,"/** 
 * Get the SQL SELECT statement used to find whether an user is admin or not.
 * @return The SQL statement
 */
public String getSqlUserAdmin(){
  return selectAllStmt;
}","/** 
 * Get the SQL SELECT statement used to find whether an user is admin or not.
 * @return The SQL statement
 */
public String getSqlUserAdmin(){
  return isAdminStmt;
}",0.9653179190751444
152292,"/** 
 * Get the SQL DELETE statement used to delete an existing user.
 * @return The SQL statement
 */
public String getSqlUserDelete(){
  return insertUserStmt;
}","/** 
 * Get the SQL DELETE statement used to delete an existing user.
 * @return The SQL statement
 */
public String getSqlUserDelete(){
  return deleteUserStmt;
}",0.9754601226993864
152293,"/** 
 * Get the SQL SELECT statement used to authenticate user.
 * @return The SQL statement
 */
public String getSqlUserAuthenticate(){
  return selectAllStmt;
}","/** 
 * Get the SQL SELECT statement used to authenticate user.
 * @return The SQL statement
 */
public String getSqlUserAuthenticate(){
  return authenticateStmt;
}",0.9480122324159022
152294,"/** 
 * Initiate a data connection in passive mode (server listening).  It returns the success flag.
 */
public synchronized InetSocketAddress initPassiveDataConnection() throws DataConnectionException {
  closeDataConnection();
  int passivePort=session.getListener().getDataConnectionConfiguration().requestPassivePort();
  if (passivePort == -1) {
    servSoc=null;
    throw new DataConnectionException(""String_Node_Str"");
  }
  try {
    DataConnectionConfiguration dataCfg=session.getListener().getDataConnectionConfiguration();
    address=dataCfg.getPassiveAddress();
    if (address == null) {
      address=serverControlAddress;
    }
    if (secure) {
      SslConfiguration ssl=dataCfg.getSSLConfiguration();
      if (ssl == null) {
        throw new DataConnectionException(""String_Node_Str"");
      }
      servSoc=createServerSocket(ssl,address,passivePort);
      port=servSoc.getLocalPort();
      LOG.debug(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    }
 else {
      servSoc=new ServerSocket(passivePort,1,address);
      port=servSoc.getLocalPort();
      LOG.debug(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    }
    servSoc.setSoTimeout(dataCfg.getMaxIdleTimeMillis());
    passive=true;
    requestTime=System.currentTimeMillis();
    return new InetSocketAddress(address,port);
  }
 catch (  Exception ex) {
    servSoc=null;
    closeDataConnection();
    throw new DataConnectionException(""String_Node_Str"",ex);
  }
}","/** 
 * Initiate a data connection in passive mode (server listening).  It returns the success flag.
 */
public synchronized InetSocketAddress initPassiveDataConnection() throws DataConnectionException {
  LOG.debug(""String_Node_Str"");
  closeDataConnection();
  int passivePort=session.getListener().getDataConnectionConfiguration().requestPassivePort();
  if (passivePort == -1) {
    servSoc=null;
    throw new DataConnectionException(""String_Node_Str"");
  }
  try {
    DataConnectionConfiguration dataCfg=session.getListener().getDataConnectionConfiguration();
    address=dataCfg.getPassiveAddress();
    if (address == null) {
      address=serverControlAddress;
    }
    if (secure) {
      LOG.debug(""String_Node_Str"",address,passivePort);
      SslConfiguration ssl=dataCfg.getSSLConfiguration();
      if (ssl == null) {
        throw new DataConnectionException(""String_Node_Str"");
      }
      servSoc=createServerSocket(ssl,address,passivePort);
      port=servSoc.getLocalPort();
      LOG.debug(""String_Node_Str"",address,passivePort);
    }
 else {
      LOG.debug(""String_Node_Str"",address,passivePort);
      servSoc=new ServerSocket(passivePort,0,address);
      port=servSoc.getLocalPort();
      LOG.debug(""String_Node_Str"",address,passivePort);
    }
    servSoc.setSoTimeout(dataCfg.getMaxIdleTimeMillis());
    passive=true;
    requestTime=System.currentTimeMillis();
    return new InetSocketAddress(address,port);
  }
 catch (  Exception ex) {
    servSoc=null;
    closeDataConnection();
    throw new DataConnectionException(""String_Node_Str"" + ex.getMessage(),ex);
  }
}",0.4128738621586476
152295,"public void sessionOpened(FtpIoSession session) throws Exception {
  session.write(FtpReplyUtil.translate(session,null,context,FtpReply.REPLY_220_SERVICE_READY,null,null));
}","public void sessionOpened(FtpIoSession session) throws Exception {
  context.getFtpletContainer().onConnect(session.getFtpletSession());
  session.write(FtpReplyUtil.translate(session,null,context,FtpReply.REPLY_220_SERVICE_READY,null,null));
}",0.8325358851674641
152296,"public void sessionClosed(FtpIoSession session) throws Exception {
  ServerFtpStatistics stats=((ServerFtpStatistics)context.getFtpStatistics());
  if (stats != null) {
    stats.setLogout(session);
  }
}","public void sessionClosed(FtpIoSession session) throws Exception {
  context.getFtpletContainer().onDisconnect(session.getFtpletSession());
  ServerFtpStatistics stats=((ServerFtpStatistics)context.getFtpStatistics());
  if (stats != null) {
    stats.setLogout(session);
  }
}",0.8482328482328483
152297,"public void sessionClosed(FtpIoSession session) throws Exception {
  context.getFtpletContainer().onDisconnect(session.getFtpletSession());
  ServerFtpStatistics stats=((ServerFtpStatistics)context.getFtpStatistics());
  if (stats != null) {
    stats.setLogout(session);
  }
}","public void sessionClosed(FtpIoSession session) throws Exception {
  try {
    context.getFtpletContainer().onDisconnect(session.getFtpletSession());
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
  }
  ServerFtpStatistics stats=((ServerFtpStatistics)context.getFtpStatistics());
  if (stats != null) {
    stats.setLogout(session);
  }
}",0.8765822784810127
152298,Authority[] getAuthorities(Class<Authority> clazz);,Authority[] getAuthorities(Class<? extends Authority> clazz);,0.9107142857142856
152299,"public Authority[] getAuthorities(Class<Authority> clazz){
  List<Authority> selected=new ArrayList<Authority>();
  for (int i=0; i < authorities.length; i++) {
    if (authorities[i].getClass().equals(clazz)) {
      selected.add(authorities[i]);
    }
  }
  return selected.toArray(new Authority[0]);
}","/** 
 * {@inheritDoc}
 */
public Authority[] getAuthorities(Class<? extends Authority> clazz){
  List<Authority> selected=new ArrayList<Authority>();
  for (int i=0; i < authorities.length; i++) {
    if (authorities[i].getClass().equals(clazz)) {
      selected.add(authorities[i]);
    }
  }
  return selected.toArray(new Authority[0]);
}",0.9440993788819876
152300,"/** 
 * @see User#authorize(AuthorizationRequest)
 */
public AuthorizationRequest authorize(AuthorizationRequest request){
  Authority[] authorities=getAuthorities();
  boolean someoneCouldAuthorize=false;
  for (int i=0; i < authorities.length; i++) {
    Authority authority=authorities[i];
    if (authority.canAuthorize(request)) {
      someoneCouldAuthorize=true;
      request=authority.authorize(request);
      if (request == null) {
        return null;
      }
    }
  }
  if (someoneCouldAuthorize) {
    return request;
  }
 else {
    return null;
  }
}","/** 
 * {@inheritDoc}
 */
public AuthorizationRequest authorize(AuthorizationRequest request){
  Authority[] authorities=getAuthorities();
  boolean someoneCouldAuthorize=false;
  for (int i=0; i < authorities.length; i++) {
    Authority authority=authorities[i];
    if (authority.canAuthorize(request)) {
      someoneCouldAuthorize=true;
      request=authority.authorize(request);
      if (request == null) {
        return null;
      }
    }
  }
  if (someoneCouldAuthorize) {
    return request;
  }
 else {
    return null;
  }
}",0.952983725135624
152301,"public final static String getPhysicalName(String rootDir,String currDir,String fileName,boolean caseInsensitive){
  rootDir=rootDir.trim();
  fileName=fileName.trim();
  rootDir=normalizeSeparateChar(rootDir);
  if (rootDir.charAt(rootDir.length() - 1) != '/') {
    rootDir+='/';
  }
  fileName=normalizeSeparateChar(fileName);
  String resArg;
  if (fileName.charAt(0) != '/') {
    if (currDir == null) {
      currDir=""String_Node_Str"";
    }
    currDir=currDir.trim();
    if (currDir.length() == 0) {
      currDir=""String_Node_Str"";
    }
    currDir=normalizeSeparateChar(currDir);
    if (currDir.charAt(0) != '/') {
      currDir='/' + currDir;
    }
    if (currDir.charAt(currDir.length() - 1) != '/') {
      currDir+='/';
    }
    resArg=rootDir + currDir.substring(1);
  }
 else {
    resArg=rootDir;
  }
  if (resArg.charAt(resArg.length() - 1) == '/') {
    resArg=resArg.substring(0,resArg.length() - 1);
  }
  StringTokenizer st=new StringTokenizer(fileName,""String_Node_Str"");
  while (st.hasMoreTokens()) {
    String tok=st.nextToken().trim();
    if (tok.equals(""String_Node_Str"")) {
      continue;
    }
    if (tok.equals(""String_Node_Str"")) {
      if (resArg.startsWith(rootDir)) {
        int slashIndex=resArg.lastIndexOf('/');
        if (slashIndex != -1) {
          resArg=resArg.substring(0,slashIndex);
        }
      }
      continue;
    }
    if (tok.equals(""String_Node_Str"")) {
      resArg=rootDir.substring(0,rootDir.length() - 1);
      continue;
    }
    if (caseInsensitive) {
      File[] matches=new File(resArg).listFiles(new NameEqualsFileFilter(tok,true));
      if (matches.length > 0) {
        tok=matches[0].getName();
      }
    }
    resArg=resArg + '/' + tok;
  }
  if ((resArg.length()) + 1 == rootDir.length()) {
    resArg+='/';
  }
  if (!resArg.regionMatches(0,rootDir,0,rootDir.length())) {
    resArg=rootDir;
  }
  return resArg;
}","public final static String getPhysicalName(String rootDir,String currDir,String fileName,boolean caseInsensitive){
  rootDir=normalizeSeparateChar(rootDir);
  if (rootDir.charAt(rootDir.length() - 1) != '/') {
    rootDir+='/';
  }
  fileName=normalizeSeparateChar(fileName);
  String resArg;
  if (fileName.charAt(0) != '/') {
    if (currDir == null) {
      currDir=""String_Node_Str"";
    }
    if (currDir.length() == 0) {
      currDir=""String_Node_Str"";
    }
    currDir=normalizeSeparateChar(currDir);
    if (currDir.charAt(0) != '/') {
      currDir='/' + currDir;
    }
    if (currDir.charAt(currDir.length() - 1) != '/') {
      currDir+='/';
    }
    resArg=rootDir + currDir.substring(1);
  }
 else {
    resArg=rootDir;
  }
  if (resArg.charAt(resArg.length() - 1) == '/') {
    resArg=resArg.substring(0,resArg.length() - 1);
  }
  StringTokenizer st=new StringTokenizer(fileName,""String_Node_Str"");
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (tok.equals(""String_Node_Str"")) {
      continue;
    }
    if (tok.equals(""String_Node_Str"")) {
      if (resArg.startsWith(rootDir)) {
        int slashIndex=resArg.lastIndexOf('/');
        if (slashIndex != -1) {
          resArg=resArg.substring(0,slashIndex);
        }
      }
      continue;
    }
    if (tok.equals(""String_Node_Str"")) {
      resArg=rootDir.substring(0,rootDir.length() - 1);
      continue;
    }
    if (caseInsensitive) {
      File[] matches=new File(resArg).listFiles(new NameEqualsFileFilter(tok,true));
      if (matches.length > 0) {
        tok=matches[0].getName();
      }
    }
    resArg=resArg + '/' + tok;
  }
  if ((resArg.length()) + 1 == rootDir.length()) {
    resArg+='/';
  }
  if (!resArg.regionMatches(0,rootDir,0,rootDir.length())) {
    resArg=rootDir;
  }
  return resArg;
}",0.9760559591068064
152302,"/** 
 * Constructor.
 */
protected NativeFileObject(String fileName,File file,User user){
  if (fileName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (file == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  fileName=fileName.trim();
  if (fileName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (fileName.charAt(0) != '/') {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.fileName=fileName;
  this.file=file;
  this.user=user;
}","/** 
 * Constructor.
 */
protected NativeFileObject(String fileName,File file,User user){
  if (fileName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (file == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (fileName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (fileName.charAt(0) != '/') {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.fileName=fileName;
  this.file=file;
  this.user=user;
}",0.974074074074074
152303,"public void testCWD() throws Exception {
  assertTrue(client.changeWorkingDirectory(TEST_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(TEST_DIR_IN_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory('/' + TEST_DIR2.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(""String_Node_Str""));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(TEST_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(""String_Node_Str""));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(""String_Node_Str""));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(TEST_DIR1.getName() + '/' + TEST_DIR_IN_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
}","public void testCWD() throws Exception {
  assertTrue(client.changeWorkingDirectory(TEST_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(TEST_DIR_IN_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory('/' + TEST_DIR2.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(""String_Node_Str""));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(""String_Node_Str""));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(TEST_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(""String_Node_Str""));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(""String_Node_Str""));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
  assertTrue(client.changeWorkingDirectory(TEST_DIR1.getName() + '/' + TEST_DIR_IN_DIR1.getName()));
  assertEquals(""String_Node_Str"",client.printWorkingDirectory());
}",0.946058091286307
152304,"protected void setUp() throws Exception {
  super.setUp();
  TEST_DIR1.mkdirs();
  TEST_DIR2.mkdirs();
  TEST_DIR_IN_DIR1.mkdirs();
  assertTrue(TEST_DIR1.exists());
  assertTrue(TEST_DIR2.exists());
  assertTrue(TEST_DIR_IN_DIR1.exists());
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
}","protected void setUp() throws Exception {
  super.setUp();
  TEST_DIR1.mkdirs();
  TEST_DIR2.mkdirs();
  TEST_DIR_WITH_LEADING_SPACE.mkdirs();
  TEST_DIR_IN_DIR1.mkdirs();
  assertTrue(TEST_DIR1.exists());
  assertTrue(TEST_DIR2.exists());
  assertTrue(TEST_DIR_WITH_LEADING_SPACE.exists());
  assertTrue(TEST_DIR_IN_DIR1.exists());
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
}",0.8417910447761194
152305,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    FtpServerContext serverContext=connection.getServerContext();
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onUploadUniqueStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    String pathName=request.getArgument();
    FileObject file=null;
    try {
      String filePrefix;
      if (pathName == null) {
        filePrefix=""String_Node_Str"";
      }
 else {
        FileObject dir=session.getFileSystemView().getFileObject(pathName);
        if (dir.isDirectory()) {
          filePrefix=pathName + ""String_Node_Str"";
        }
 else {
          filePrefix=pathName;
        }
      }
      file=session.getFileSystemView().getFileObject(filePrefix);
      if (file != null) {
        file=getUniqueFile(connection,session,file);
      }
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",null));
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    boolean failure=false;
    OutputStream os=null;
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_250_REQUESTED_FILE_ACTION_OKAY,""String_Node_Str"",fileName));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    try {
      os=file.createOutputStream(0L);
      long transSz=dataConnection.transferFromClient(os);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      if (ftpStat != null) {
        ftpStat.setUpload(connection,file,transSz);
      }
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(os);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onUploadUniqueEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    FtpServerContext serverContext=connection.getServerContext();
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onUploadUniqueStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    String pathName=request.getArgument();
    FileObject file=null;
    try {
      String filePrefix;
      if (pathName == null) {
        filePrefix=""String_Node_Str"";
      }
 else {
        FileObject dir=session.getFileSystemView().getFileObject(pathName);
        if (dir.isDirectory()) {
          filePrefix=pathName + ""String_Node_Str"";
        }
 else {
          filePrefix=pathName;
        }
      }
      file=session.getFileSystemView().getFileObject(filePrefix);
      if (file != null) {
        file=getUniqueFile(connection,session,file);
      }
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",null));
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(new DefaultFtpReply(FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"" + fileName));
    boolean failure=false;
    OutputStream os=null;
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    try {
      os=file.createOutputStream(0L);
      long transSz=dataConnection.transferFromClient(os);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      if (ftpStat != null) {
        ftpStat.setUpload(connection,file,transSz);
      }
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(os);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onUploadUniqueEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}",0.977702877884366
152306,"/** 
 * @throws Exception
 */
private void doAssertOfUniqueFile(FTPClient client,File dir) throws Exception {
  assertTrue(client.completePendingCommand());
  String reply=client.getReplyString();
  String generatedFileName=reply.substring(5,reply.indexOf(':'));
  File testFile=new File(dir,generatedFileName);
  assertTrue(testFile.exists());
  TestUtil.assertFileEqual(testData,testFile);
}","/** 
 * @throws Exception
 */
private void doAssertOfUniqueFile(FTPClient client,File dir) throws Exception {
  String reply=client.getReplyString();
  String generatedFileName=reply.substring(5,reply.indexOf(':'));
  File testFile=new File(dir,generatedFileName);
  assertTrue(testFile.exists());
  TestUtil.assertFileEqual(testData,testFile);
}",0.9364005412719892
152307,"public void testUploadUnique() throws Exception {
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
  client.storeUniqueFile(new ByteArrayInputStream(TESTDATA));
  client.completePendingCommand();
  TestUtil.assertFileEqual(TESTDATA,ROOT_DIR.listFiles()[0]);
}","public void testUploadUnique() throws Exception {
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
  client.storeUniqueFile(new ByteArrayInputStream(TESTDATA));
  TestUtil.assertFileEqual(TESTDATA,ROOT_DIR.listFiles()[0]);
}",0.9269311064718164
152308,"public void testExceptionDuringUploadUniqueEnd() throws Exception {
  MockFtplet.callback=new MockFtpletCallback(){
    public FtpletEnum onUploadUniqueEnd(    FtpSession session,    FtpRequest request,    FtpReplyOutput response) throws FtpException, IOException {
      throwException();
      return mockReturnValue;
    }
  }
;
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
  assertTrue(client.storeUniqueFile(new ByteArrayInputStream(TESTDATA)));
  assertTrue(client.completePendingCommand());
  try {
    client.noop();
    fail(""String_Node_Str"");
  }
 catch (  FTPConnectionClosedException e) {
  }
  TestUtil.assertFileEqual(TESTDATA,ROOT_DIR.listFiles()[0]);
}","public void testExceptionDuringUploadUniqueEnd() throws Exception {
  MockFtplet.callback=new MockFtpletCallback(){
    public FtpletEnum onUploadUniqueEnd(    FtpSession session,    FtpRequest request,    FtpReplyOutput response) throws FtpException, IOException {
      throwException();
      return mockReturnValue;
    }
  }
;
  client.login(ADMIN_USERNAME,ADMIN_PASSWORD);
  assertTrue(client.storeUniqueFile(new ByteArrayInputStream(TESTDATA)));
  try {
    client.noop();
    fail(""String_Node_Str"");
  }
 catch (  FTPConnectionClosedException e) {
  }
  TestUtil.assertFileEqual(TESTDATA,ROOT_DIR.listFiles()[0]);
}",0.9637065637065636
152309,"public void testImplementsInterface(){
  X509KeyManager km=new AliasKeyManager(null,null);
  assertTrue(ClassUtils.implementsInterface(km.getClass(),""String_Node_Str""));
  assertFalse(ClassUtils.implementsInterface(km.getClass(),""String_Node_Str""));
}","public void testImplementsInterface(){
  assertTrue(ClassUtils.extendsClass(MySubBean.class,MyBean.class.getName()));
  assertFalse(ClassUtils.extendsClass(MySubBean.class,""String_Node_Str""));
}",0.6112359550561798
152310,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  session.resetState();
  FtpServerContext serverContext=connection.getServerContext();
  String fileName=request.getArgument();
  if (fileName == null || fileName.indexOf(File.pathSeparatorChar) > -1) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
  Ftplet ftpletContainer=serverContext.getFtpletContainer();
  FtpletEnum ftpletRet;
  try {
    ftpletRet=ftpletContainer.onMkdirStart(session,request,out);
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"",e);
    ftpletRet=FtpletEnum.RET_DISCONNECT;
  }
  if (ftpletRet == FtpletEnum.RET_SKIP) {
    return;
  }
 else   if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
    serverContext.getConnectionManager().closeConnection(connection);
    return;
  }
  FileObject file=null;
  try {
    file=session.getFileSystemView().getFileObject(fileName);
  }
 catch (  Exception ex) {
    LOG.debug(""String_Node_Str"",ex);
  }
  if (file == null) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
    return;
  }
  fileName=file.getFullName();
  if (!file.hasWritePermission()) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
    return;
  }
  if (file.doesExist()) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
    return;
  }
  if (file.mkdir()) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_250_REQUESTED_FILE_ACTION_OKAY,""String_Node_Str"",fileName));
    String userName=session.getUser().getName();
    LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
    ServerFtpStatistics ftpStat=(ServerFtpStatistics)connection.getServerContext().getFtpStatistics();
    ftpStat.setMkdir(connection,file);
    try {
      ftpletRet=ftpletContainer.onMkdirEnd(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
  }
 else {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  session.resetState();
  FtpServerContext serverContext=connection.getServerContext();
  String fileName=request.getArgument();
  if (fileName == null || fileName.indexOf(File.pathSeparatorChar) > -1) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    return;
  }
  Ftplet ftpletContainer=serverContext.getFtpletContainer();
  FtpletEnum ftpletRet;
  try {
    ftpletRet=ftpletContainer.onMkdirStart(session,request,out);
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"",e);
    ftpletRet=FtpletEnum.RET_DISCONNECT;
  }
  if (ftpletRet == FtpletEnum.RET_SKIP) {
    return;
  }
 else   if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
    serverContext.getConnectionManager().closeConnection(connection);
    return;
  }
  FileObject file=null;
  try {
    file=session.getFileSystemView().getFileObject(fileName);
  }
 catch (  Exception ex) {
    LOG.debug(""String_Node_Str"",ex);
  }
  if (file == null) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
    return;
  }
  fileName=file.getFullName();
  if (!file.hasWritePermission()) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
    return;
  }
  if (file.doesExist()) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
    return;
  }
  if (file.mkdir()) {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_257_PATHNAME_CREATED,""String_Node_Str"",fileName));
    String userName=session.getUser().getName();
    LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
    ServerFtpStatistics ftpStat=(ServerFtpStatistics)connection.getServerContext().getFtpStatistics();
    ftpStat.setMkdir(connection,file);
    try {
      ftpletRet=ftpletContainer.onMkdirEnd(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
  }
 else {
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
  }
}",0.9921660791226008
152311,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    FtpServerContext serverContext=connection.getServerContext();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onAppendStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    FileObject file=null;
    try {
      file=session.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    fileName=file.getFullName();
    if (file.doesExist() && !file.isFile()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",fileName));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    boolean failure=false;
    OutputStream os=null;
    try {
      long offset=0L;
      if (file.doesExist()) {
        offset=file.getSize();
      }
      os=file.createOutputStream(offset);
      long transSz=dataConnection.transferFromClient(os);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      ftpStat.setUpload(connection,file,transSz);
    }
 catch (    SocketException e) {
      LOG.debug(""String_Node_Str"",e);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException e) {
      LOG.debug(""String_Node_Str"",e);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(os);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onAppendEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    FtpServerContext serverContext=connection.getServerContext();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    DataConnectionFactory connFactory=session.getDataConnection();
    if (connFactory instanceof IODataConnectionFactory) {
      InetAddress address=((IODataConnectionFactory)connFactory).getInetAddress();
      if (address == null) {
        out.write(new DefaultFtpReply(FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str""));
        return;
      }
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onAppendStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    FileObject file=null;
    try {
      file=session.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    fileName=file.getFullName();
    if (file.doesExist() && !file.isFile()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",fileName));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    boolean failure=false;
    OutputStream os=null;
    try {
      long offset=0L;
      if (file.doesExist()) {
        offset=file.getSize();
      }
      os=file.createOutputStream(offset);
      long transSz=dataConnection.transferFromClient(os);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      ftpStat.setUpload(connection,file,transSz);
    }
 catch (    SocketException e) {
      LOG.debug(""String_Node_Str"",e);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException e) {
      LOG.debug(""String_Node_Str"",e);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(os);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onAppendEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}",0.9533652634232418
152312,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    boolean failure=false;
    try {
      ListArgument parsedArg=ListArgumentParser.parse(request.getArgument());
      dataConnection.transferToClient(directoryLister.listFiles(parsedArg,session.getFileSystemView(),LIST_FILE_FORMATER));
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",null));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",null));
    }
catch (    IllegalArgumentException e) {
      LOG.debug(""String_Node_Str"" + request.getArgument(),e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",null));
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    DataConnectionFactory connFactory=session.getDataConnection();
    if (connFactory instanceof IODataConnectionFactory) {
      InetAddress address=((IODataConnectionFactory)connFactory).getInetAddress();
      if (address == null) {
        out.write(new DefaultFtpReply(FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str""));
        return;
      }
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    boolean failure=false;
    try {
      ListArgument parsedArg=ListArgumentParser.parse(request.getArgument());
      dataConnection.transferToClient(directoryLister.listFiles(parsedArg,session.getFileSystemView(),LIST_FILE_FORMATER));
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",null));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",null));
    }
catch (    IllegalArgumentException e) {
      LOG.debug(""String_Node_Str"" + request.getArgument(),e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",null));
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}",0.8905775075987842
152313,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    boolean failure=false;
    try {
      ListArgument parsedArg=ListArgumentParser.parse(request.getArgument());
      FileFormater formater=new MLSTFileFormater((String[])session.getAttribute(""String_Node_Str""));
      dataConnection.transferToClient(directoryLister.listFiles(parsedArg,session.getFileSystemView(),formater));
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",null));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",null));
    }
catch (    IllegalArgumentException e) {
      LOG.debug(""String_Node_Str"" + request.getArgument(),e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",null));
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    DataConnectionFactory connFactory=session.getDataConnection();
    if (connFactory instanceof IODataConnectionFactory) {
      InetAddress address=((IODataConnectionFactory)connFactory).getInetAddress();
      if (address == null) {
        out.write(new DefaultFtpReply(FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str""));
        return;
      }
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    boolean failure=false;
    try {
      ListArgument parsedArg=ListArgumentParser.parse(request.getArgument());
      FileFormater formater=new MLSTFileFormater((String[])session.getAttribute(""String_Node_Str""));
      dataConnection.transferToClient(directoryLister.listFiles(parsedArg,session.getFileSystemView(),formater));
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",null));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",null));
    }
catch (    IllegalArgumentException e) {
      LOG.debug(""String_Node_Str"" + request.getArgument(),e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",null));
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}",0.8953995157384987
152314,"/** 
 * Execute command
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    boolean failure=false;
    try {
      ListArgument parsedArg=ListArgumentParser.parse(request.getArgument());
      FileFormater formater;
      if (parsedArg.hasOption('l')) {
        formater=LIST_FILE_FORMATER;
      }
 else {
        formater=NLST_FILE_FORMATER;
      }
      dataConnection.transferToClient(directoryLister.listFiles(parsedArg,session.getFileSystemView(),formater));
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",null));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",null));
    }
catch (    IllegalArgumentException e) {
      LOG.debug(""String_Node_Str"" + request.getArgument(),e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",null));
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    DataConnectionFactory connFactory=session.getDataConnection();
    if (connFactory instanceof IODataConnectionFactory) {
      InetAddress address=((IODataConnectionFactory)connFactory).getInetAddress();
      if (address == null) {
        out.write(new DefaultFtpReply(FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str""));
        return;
      }
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    boolean failure=false;
    try {
      ListArgument parsedArg=ListArgumentParser.parse(request.getArgument());
      FileFormater formater;
      if (parsedArg.hasOption('l')) {
        formater=LIST_FILE_FORMATER;
      }
 else {
        formater=NLST_FILE_FORMATER;
      }
      dataConnection.transferToClient(directoryLister.listFiles(parsedArg,session.getFileSystemView(),formater));
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",null));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",null));
    }
catch (    IllegalArgumentException e) {
      LOG.debug(""String_Node_Str"" + request.getArgument(),e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",null));
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}",0.8984962406015038
152315,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    long skipLen=session.getFileOffset();
    FtpServerContext serverContext=connection.getServerContext();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onDownloadStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    FileObject file=null;
    try {
      file=session.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    fileName=file.getFullName();
    if (!file.doesExist()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.isFile()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.hasReadPermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    boolean failure=false;
    InputStream is=null;
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    try {
      is=openInputStream(connection,session,file,skipLen);
      long transSz=dataConnection.transferToClient(is);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      if (ftpStat != null) {
        ftpStat.setDownload(connection,file,transSz);
      }
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(is);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onDownloadEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.resetState();
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    long skipLen=session.getFileOffset();
    FtpServerContext serverContext=connection.getServerContext();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onDownloadStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    FileObject file=null;
    try {
      file=session.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    fileName=file.getFullName();
    if (!file.doesExist()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.isFile()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    if (!file.hasReadPermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    DataConnectionFactory connFactory=session.getDataConnection();
    if (connFactory instanceof IODataConnectionFactory) {
      InetAddress address=((IODataConnectionFactory)connFactory).getInetAddress();
      if (address == null) {
        out.write(new DefaultFtpReply(FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str""));
        return;
      }
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",null));
    boolean failure=false;
    InputStream is=null;
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",null));
      return;
    }
    try {
      is=openInputStream(connection,session,file,skipLen);
      long transSz=dataConnection.transferToClient(is);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      if (ftpStat != null) {
        ftpStat.setDownload(connection,file,transSz);
      }
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(is);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onDownloadEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.resetState();
    session.getDataConnection().closeDataConnection();
  }
}",0.9551623848763936
152316,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    long skipLen=session.getFileOffset();
    FtpServerContext serverContext=connection.getServerContext();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onUploadStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    FileObject file=null;
    try {
      file=session.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",fileName));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    boolean failure=false;
    OutputStream outStream=null;
    try {
      outStream=file.createOutputStream(skipLen);
      long transSz=dataConnection.transferFromClient(outStream);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      ftpStat.setUpload(connection,file,transSz);
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(outStream);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onUploadEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.resetState();
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    long skipLen=session.getFileOffset();
    FtpServerContext serverContext=connection.getServerContext();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,""String_Node_Str"",null));
      return;
    }
    DataConnectionFactory connFactory=session.getDataConnection();
    if (connFactory instanceof IODataConnectionFactory) {
      InetAddress address=((IODataConnectionFactory)connFactory).getInetAddress();
      if (address == null) {
        out.write(new DefaultFtpReply(FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str""));
        return;
      }
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onUploadStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    FileObject file=null;
    try {
      file=session.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"",fileName));
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    boolean failure=false;
    OutputStream outStream=null;
    try {
      outStream=file.createOutputStream(skipLen);
      long transSz=dataConnection.transferFromClient(outStream);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      ftpStat.setUpload(connection,file,transSz);
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(outStream);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onUploadEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.resetState();
    session.getDataConnection().closeDataConnection();
  }
}",0.9508501594048884
152317,"/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    session.resetState();
    FtpServerContext serverContext=connection.getServerContext();
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onUploadUniqueStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    String pathName=request.getArgument();
    FileObject file=null;
    try {
      String filePrefix;
      if (pathName == null) {
        filePrefix=""String_Node_Str"";
      }
 else {
        FileObject dir=session.getFileSystemView().getFileObject(pathName);
        if (dir.isDirectory()) {
          filePrefix=pathName + ""String_Node_Str"";
        }
 else {
          filePrefix=pathName;
        }
      }
      file=session.getFileSystemView().getFileObject(filePrefix);
      if (file != null) {
        file=getUniqueFile(connection,session,file);
      }
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",null));
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(new DefaultFtpReply(FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"" + fileName));
    boolean failure=false;
    OutputStream os=null;
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    try {
      os=file.createOutputStream(0L);
      long transSz=dataConnection.transferFromClient(os);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      if (ftpStat != null) {
        ftpStat.setUpload(connection,file,transSz);
      }
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(os);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onUploadUniqueEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}","/** 
 * Execute command.
 */
public void execute(Connection connection,FtpRequest request,FtpSessionImpl session,FtpReplyOutput out) throws IOException, FtpException {
  try {
    DataConnectionFactory connFactory=session.getDataConnection();
    if (connFactory instanceof IODataConnectionFactory) {
      InetAddress address=((IODataConnectionFactory)connFactory).getInetAddress();
      if (address == null) {
        out.write(new DefaultFtpReply(FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS,""String_Node_Str""));
        return;
      }
    }
    session.resetState();
    FtpServerContext serverContext=connection.getServerContext();
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    FtpletEnum ftpletRet;
    try {
      ftpletRet=ftpletContainer.onUploadUniqueStart(session,request,out);
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      ftpletRet=FtpletEnum.RET_DISCONNECT;
    }
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      serverContext.getConnectionManager().closeConnection(connection);
      return;
    }
    String pathName=request.getArgument();
    FileObject file=null;
    try {
      String filePrefix;
      if (pathName == null) {
        filePrefix=""String_Node_Str"";
      }
 else {
        FileObject dir=session.getFileSystemView().getFileObject(pathName);
        if (dir.isDirectory()) {
          filePrefix=pathName + ""String_Node_Str"";
        }
 else {
          filePrefix=pathName;
        }
      }
      file=session.getFileSystemView().getFileObject(filePrefix);
      if (file != null) {
        file=getUniqueFile(connection,session,file);
      }
    }
 catch (    Exception ex) {
      LOG.debug(""String_Node_Str"",ex);
    }
    if (file == null) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",null));
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,""String_Node_Str"",fileName));
      return;
    }
    out.write(new DefaultFtpReply(FtpReply.REPLY_150_FILE_STATUS_OKAY,""String_Node_Str"" + fileName));
    boolean failure=false;
    OutputStream os=null;
    DataConnection dataConnection;
    try {
      dataConnection=session.getDataConnection().openConnection();
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_425_CANT_OPEN_DATA_CONNECTION,""String_Node_Str"",fileName));
      return;
    }
    try {
      os=file.createOutputStream(0L);
      long transSz=dataConnection.transferFromClient(os);
      String userName=session.getUser().getName();
      LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
      if (ftpStat != null) {
        ftpStat.setUpload(connection,file,transSz);
      }
    }
 catch (    SocketException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_426_CONNECTION_CLOSED_TRANSFER_ABORTED,""String_Node_Str"",fileName));
    }
catch (    IOException ex) {
      LOG.debug(""String_Node_Str"",ex);
      failure=true;
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,""String_Node_Str"",fileName));
    }
 finally {
      IoUtils.close(os);
    }
    if (!failure) {
      out.write(FtpReplyUtil.translate(session,FtpReply.REPLY_226_CLOSING_DATA_CONNECTION,""String_Node_Str"",fileName));
      try {
        ftpletRet=ftpletContainer.onUploadUniqueEnd(session,request,out);
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"",e);
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(connection);
        return;
      }
    }
  }
  finally {
    session.getDataConnection().closeDataConnection();
  }
}",0.9535059060065344
152318,"public void messageReceived(IoSession session,Object message) throws IOException, FtpException {
  FtpRequest request=new FtpRequestImpl(message.toString());
  ConnectionObserver observer=(ConnectionObserver)session.getAttribute(""String_Node_Str"");
  if (observer != null) {
    observer.request(request.toString());
  }
  MinaConnection connection=(MinaConnection)session.getAttribute(CONNECTION_KEY);
  MinaFtpResponseOutput output=(MinaFtpResponseOutput)session.getAttribute(OUTPUT_KEY);
  protocolHandler.onRequestReceived(connection,(FtpSessionImpl)connection.getSession(),output,request);
}","public void messageReceived(IoSession session,Object message) throws IOException, FtpException {
  FtpRequest request=new FtpRequestImpl(message.toString());
  ConnectionObserver observer=(ConnectionObserver)session.getAttribute(""String_Node_Str"");
  if (observer != null) {
    observer.request(request.toString());
  }
  MinaConnection connection=(MinaConnection)session.getAttribute(CONNECTION_KEY);
  MinaFtpResponseOutput output=(MinaFtpResponseOutput)session.getAttribute(OUTPUT_KEY);
  FtpSessionImpl ftpSession=(FtpSessionImpl)connection.getSession();
  ftpSession.updateLastAccessTime();
  protocolHandler.onRequestReceived(connection,ftpSession,output,request);
}",0.8195429472025216
152319,"public void encode(IoSession session,Object message,ProtocolEncoderOutput out) throws Exception {
  FtpReply ftpResponse=(FtpReply)message;
  ByteBuffer buf=ByteBuffer.allocate(256);
  buf.putString(ftpResponse.toString(),ENCODER);
  buf.flip();
  out.write(buf);
}","public void encode(IoSession session,Object message,ProtocolEncoderOutput out) throws Exception {
  String value=message.toString();
  ByteBuffer buf=ByteBuffer.allocate(value.length()).setAutoExpand(true);
  buf.putString(value,ENCODER);
  buf.flip();
  out.write(buf);
}",0.547486033519553
152320,"public void messageReceived(IoSession session,Object message) throws IOException, FtpException {
  FtpRequest request=(FtpRequest)message;
  ConnectionObserver observer=(ConnectionObserver)session.getAttribute(""String_Node_Str"");
  if (observer != null) {
    observer.request(request.toString());
  }
  MinaConnection connection=(MinaConnection)session.getAttribute(CONNECTION_KEY);
  MinaFtpResponseOutput output=(MinaFtpResponseOutput)session.getAttribute(OUTPUT_KEY);
  protocolHandler.onRequestReceived(connection,(FtpSessionImpl)connection.getSession(),output,request);
}","public void messageReceived(IoSession session,Object message) throws IOException, FtpException {
  FtpRequest request=new FtpRequestImpl(message.toString());
  ConnectionObserver observer=(ConnectionObserver)session.getAttribute(""String_Node_Str"");
  if (observer != null) {
    observer.request(request.toString());
  }
  MinaConnection connection=(MinaConnection)session.getAttribute(CONNECTION_KEY);
  MinaFtpResponseOutput output=(MinaFtpResponseOutput)session.getAttribute(OUTPUT_KEY);
  protocolHandler.onRequestReceived(connection,(FtpSessionImpl)connection.getSession(),output,request);
}",0.970161977834612
152321,"public void sessionCreated(IoSession session) throws Exception {
  MinaConnection connection=new MinaConnection(serverContext,session,listener);
  session.setAttribute(CONNECTION_KEY,connection);
  MinaFtpResponseOutput output=new MinaFtpResponseOutput(session);
  session.setAttribute(OUTPUT_KEY,output);
}","public void sessionCreated(IoSession session) throws Exception {
  MinaConnection connection=new MinaConnection(serverContext,session,listener);
  ConnectionManager conManager=serverContext.getConnectionManager();
  conManager.newConnection(connection);
  session.setAttribute(CONNECTION_KEY,connection);
  MinaFtpResponseOutput output=new MinaFtpResponseOutput(session);
  session.setAttribute(OUTPUT_KEY,output);
}",0.8492392807745505
152322,"public void onConnectionClosed(Connection connection,FtpSessionImpl session,FtpWriter writer){
  try {
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    ftpletContainer.onDisconnect(session,writer);
  }
 catch (  Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
  }
  ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
  if (session != null) {
    User user=session.getUser();
    String userName=user != null ? user.getName() : ""String_Node_Str"";
    InetAddress clientAddr=session.getClientAddress();
    LOG.info(""String_Node_Str"" + clientAddr.getHostAddress() + ""String_Node_Str""+ userName);
    if (session.isLoggedIn()) {
      session.setLogout();
      ftpStat.setLogout(connection);
    }
    ftpStat.setCloseConnection(connection);
    session.clear();
    session.getFtpDataConnection().dispose();
    FileSystemView fview=session.getFileSystemView();
    if (fview != null) {
      fview.dispose();
    }
    session=null;
  }
  if (writer != null) {
    writer.setObserver(null);
    writer.close();
    writer=null;
  }
}","public void onConnectionClosed(Connection connection,FtpSessionImpl session,FtpWriter writer){
  try {
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    if (ftpletContainer != null) {
      ftpletContainer.onDisconnect(session,writer);
    }
  }
 catch (  Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
  }
  ServerFtpStatistics ftpStat=(ServerFtpStatistics)serverContext.getFtpStatistics();
  if (session != null) {
    User user=session.getUser();
    String userName=user != null ? user.getName() : ""String_Node_Str"";
    InetAddress clientAddr=session.getClientAddress();
    LOG.info(""String_Node_Str"" + clientAddr.getHostAddress() + ""String_Node_Str""+ userName);
    if (session.isLoggedIn()) {
      session.setLogout();
      if (ftpStat != null) {
        ftpStat.setLogout(connection);
      }
    }
    if (ftpStat != null) {
      ftpStat.setCloseConnection(connection);
    }
    session.clear();
    session.getFtpDataConnection().dispose();
    FileSystemView fview=session.getFileSystemView();
    if (fview != null) {
      fview.dispose();
    }
    session=null;
  }
  if (writer != null) {
    writer.setObserver(null);
    writer.close();
    writer=null;
  }
}",0.9489305979921432
152323,"public String toString(){
  int code=getCode();
  String notNullMessage=getMessage();
  if (notNullMessage == null) {
    notNullMessage=""String_Node_Str"";
  }
  StringBuffer sb=new StringBuffer();
  if (notNullMessage.indexOf('\n') == -1) {
    sb.append(code);
    sb.append(""String_Node_Str"");
    sb.append(notNullMessage);
    sb.append(CRLF);
  }
 else {
    String[] lines=notNullMessage.split(""String_Node_Str"");
    sb.append(code);
    sb.append(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      String line=lines[i].trim();
      if (i + 1 == lines.length) {
        sb.append(code);
        sb.append(""String_Node_Str"");
      }
      sb.append(line);
      sb.append(CRLF);
    }
  }
  return sb.toString();
}","public String toString(){
  int code=getCode();
  String notNullMessage=getMessage();
  if (notNullMessage == null) {
    notNullMessage=""String_Node_Str"";
  }
  StringBuffer sb=new StringBuffer();
  if (notNullMessage.indexOf('\n') == -1) {
    sb.append(code);
    sb.append(""String_Node_Str"");
    sb.append(notNullMessage);
    sb.append(CRLF);
  }
 else {
    String[] lines=notNullMessage.split(""String_Node_Str"");
    sb.append(code);
    sb.append(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      String line=lines[i];
      if (i + 1 == lines.length) {
        sb.append(code);
        sb.append(""String_Node_Str"");
      }
      sb.append(line);
      sb.append(CRLF);
    }
  }
  return sb.toString();
}",0.9952542372881356
152324,"/** 
 * User logout
 */
public void setLogout(Connection connection){
  --currLogins;
  User user=connection.getSession().getUser();
  if (""String_Node_Str"".equals(user.getName())) {
    --currAnonLogins;
  }
synchronized (user) {
    Hashtable statisticsTable=(Hashtable)userLoginTable.get(user.getName());
    Integer loginNumber=(Integer)statisticsTable.get(LOGIN_NUMBER);
    statisticsTable.put(LOGIN_NUMBER,new Integer(loginNumber.intValue() - 1));
    Integer loginNumberPerIP=(Integer)statisticsTable.get(connection.getSession().getClientAddress().getHostAddress());
    if (loginNumberPerIP != null) {
      if (loginNumberPerIP.intValue() <= 1) {
        statisticsTable.remove(connection.getSession().getClientAddress().getHostAddress());
      }
    }
 else {
      statisticsTable.put(connection.getSession().getClientAddress().getHostAddress(),new Integer(loginNumberPerIP.intValue() - 1));
    }
  }
  notifyLogout(connection);
}","/** 
 * User logout
 */
public void setLogout(Connection connection){
  --currLogins;
  User user=connection.getSession().getUser();
  if (""String_Node_Str"".equals(user.getName())) {
    --currAnonLogins;
  }
synchronized (user) {
    Hashtable statisticsTable=(Hashtable)userLoginTable.get(user.getName());
    Integer loginNumber=(Integer)statisticsTable.get(LOGIN_NUMBER);
    statisticsTable.put(LOGIN_NUMBER,new Integer(loginNumber.intValue() - 1));
    Integer loginNumberPerIP=(Integer)statisticsTable.get(connection.getSession().getClientAddress().getHostAddress());
    if (loginNumberPerIP != null) {
      if (loginNumberPerIP.intValue() <= 1) {
        statisticsTable.remove(connection.getSession().getClientAddress().getHostAddress());
      }
 else {
        statisticsTable.put(connection.getSession().getClientAddress().getHostAddress(),new Integer(loginNumberPerIP.intValue() - 1));
      }
    }
  }
  notifyLogout(connection);
}",0.8488372093023255
152325,"private final long transfer(InputStream in,OutputStream out,int maxRate) throws IOException {
  long transferredSize=0L;
  boolean isAscii=session.getDataType() == DataType.ASCII;
  long startTime=System.currentTimeMillis();
  byte[] buff=new byte[4096];
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  try {
    bis=IoUtils.getBufferedInputStream(in);
    bos=IoUtils.getBufferedOutputStream(out);
    while (true) {
      if (maxRate > 0) {
        long interval=System.currentTimeMillis() - startTime;
        if (interval == 0) {
          interval=1;
        }
        long currRate=(transferredSize * 1000L) / interval;
        if (currRate > maxRate) {
          try {
            Thread.sleep(50);
          }
 catch (          InterruptedException ex) {
            break;
          }
          continue;
        }
      }
      int count=bis.read(buff);
      if (count == -1) {
        break;
      }
      if (isAscii) {
        for (int i=0; i < count; ++i) {
          byte b=buff[i];
          if (b == '\n') {
            bos.write('\r');
          }
          bos.write(b);
        }
      }
 else {
        bos.write(buff,0,count);
      }
      transferredSize+=count;
      notifyObserver();
    }
  }
  finally {
    if (bos != null) {
      bos.flush();
    }
  }
  return transferredSize;
}","private final long transfer(InputStream in,OutputStream out,int maxRate) throws IOException {
  long transferredSize=0L;
  boolean isAscii=session.getDataType() == DataType.ASCII;
  long startTime=System.currentTimeMillis();
  byte[] buff=new byte[4096];
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  try {
    bis=IoUtils.getBufferedInputStream(in);
    bos=IoUtils.getBufferedOutputStream(out);
    boolean lastWasCR=false;
    while (true) {
      if (maxRate > 0) {
        long interval=System.currentTimeMillis() - startTime;
        if (interval == 0) {
          interval=1;
        }
        long currRate=(transferredSize * 1000L) / interval;
        if (currRate > maxRate) {
          try {
            Thread.sleep(50);
          }
 catch (          InterruptedException ex) {
            break;
          }
          continue;
        }
      }
      int count=bis.read(buff);
      if (count == -1) {
        break;
      }
      if (isAscii) {
        for (int i=0; i < count; ++i) {
          byte b=buff[i];
          if (b == '\n' && !lastWasCR) {
            bos.write('\r');
          }
          if (b == '\r') {
            lastWasCR=true;
          }
 else {
            lastWasCR=false;
          }
          bos.write(b);
        }
      }
 else {
        bos.write(buff,0,count);
      }
      transferredSize+=count;
      notifyObserver();
    }
  }
  finally {
    if (bos != null) {
      bos.flush();
    }
  }
  return transferredSize;
}",0.9436769394261424
152326,"public void write(FtpReply response) throws IOException {
  session.write(response).join();
}","public void write(FtpReply response) throws IOException {
  session.write(response);
}",0.9608938547486032
152327,"protected Properties createConfig(){
  assertTrue(FTPSERVER_KEYSTORE.exists());
  Properties configProps=new Properties();
  configProps.setProperty(""String_Node_Str"",IOListener.class.getName());
  configProps.setProperty(""String_Node_Str"",Integer.toString(port));
  configProps.setProperty(""String_Node_Str"",DefaultSsl.class.getName());
  configProps.setProperty(""String_Node_Str"",FTPSERVER_KEYSTORE.getAbsolutePath());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",getAuthValue());
  configProps.setProperty(""String_Node_Str"",getClientAuth());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",DefaultDataConnectionConfig.class.getName());
  configProps.setProperty(""String_Node_Str"",DefaultSsl.class.getName());
  configProps.setProperty(""String_Node_Str"",FTPSERVER_KEYSTORE.getAbsolutePath());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",getAuthValue());
  configProps.setProperty(""String_Node_Str"",getClientAuth());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",USERS_FILE.getAbsolutePath());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  return configProps;
}","protected Properties createConfig(){
  assertTrue(FTPSERVER_KEYSTORE.exists());
  Properties configProps=new Properties();
  configProps.setProperty(""String_Node_Str"",MinaListener.class.getName());
  configProps.setProperty(""String_Node_Str"",Integer.toString(port));
  configProps.setProperty(""String_Node_Str"",DefaultSsl.class.getName());
  configProps.setProperty(""String_Node_Str"",FTPSERVER_KEYSTORE.getAbsolutePath());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",getAuthValue());
  configProps.setProperty(""String_Node_Str"",getClientAuth());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",DefaultDataConnectionConfig.class.getName());
  configProps.setProperty(""String_Node_Str"",DefaultSsl.class.getName());
  configProps.setProperty(""String_Node_Str"",FTPSERVER_KEYSTORE.getAbsolutePath());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",getAuthValue());
  configProps.setProperty(""String_Node_Str"",getClientAuth());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  configProps.setProperty(""String_Node_Str"",USERS_FILE.getAbsolutePath());
  configProps.setProperty(""String_Node_Str"",""String_Node_Str"");
  return configProps;
}",0.998031496062992
152328,"/** 
 * Get the data socket. In case of error returns null.
 */
private synchronized Socket getDataSocket() throws Exception {
  dataSoc=null;
  DataConnectionConfig dataConfig=serverContext.getDataConnectionConfig();
  try {
    if (isPort) {
      int localPort=dataConfig.getActiveLocalPort();
      if (secure) {
        Ssl ssl=dataConfig.getSSL();
        if (ssl == null) {
          throw new FtpException(""String_Node_Str"");
        }
        if (localPort == 0) {
          dataSoc=ssl.createSocket(null,address,port,false);
        }
 else {
          InetAddress localAddr=dataConfig.getActiveLocalAddress();
          dataSoc=ssl.createSocket(null,address,port,localAddr,localPort,false);
        }
      }
 else {
        if (localPort == 0) {
          dataSoc=new Socket(address,port);
        }
 else {
          InetAddress localAddr=dataConfig.getActiveLocalAddress();
          dataSoc=new Socket(address,port,localAddr,localPort);
        }
      }
    }
 else     if (isPasv) {
      dataSoc=servSoc.accept();
    }
  }
 catch (  Exception ex) {
    closeDataSocket();
    log.warn(""String_Node_Str"",ex);
    throw ex;
  }
  return dataSoc;
}","/** 
 * Get the data socket. In case of error returns null.
 */
private synchronized Socket getDataSocket() throws Exception {
  dataSoc=null;
  DataConnectionConfig dataConfig=serverContext.getDataConnectionConfig();
  try {
    if (isPort) {
      int localPort=dataConfig.getActiveLocalPort();
      if (secure) {
        Ssl ssl=dataConfig.getSSL();
        if (ssl == null) {
          throw new FtpException(""String_Node_Str"");
        }
        if (localPort == 0) {
          dataSoc=ssl.createSocket(null,address,port,false);
        }
 else {
          InetAddress localAddr=dataConfig.getActiveLocalAddress();
          dataSoc=ssl.createSocket(null,address,port,localAddr,localPort,false);
        }
      }
 else {
        if (localPort == 0) {
          dataSoc=new Socket(address,port);
        }
 else {
          InetAddress localAddr=dataConfig.getActiveLocalAddress();
          dataSoc=new Socket(address,port,localAddr,localPort);
        }
      }
    }
 else     if (isPasv) {
      dataSoc=servSoc.accept();
    }
  }
 catch (  Exception ex) {
    closeDataSocket();
    log.warn(""String_Node_Str"",ex);
    throw ex;
  }
  if (dataSoc instanceof SSLSocket) {
    ((SSLSocket)dataSoc).startHandshake();
  }
  return dataSoc;
}",0.964774140074596
152329,"/** 
 * @throws Exception
 */
protected void connectClient() throws Exception {
  client=createFTPClient();
  client.addProtocolCommandListener(new ProtocolCommandListener(){
    public void protocolCommandSent(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
    public void protocolReplyReceived(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
  }
);
  int attempts=0;
  while (attempts < 5) {
    try {
      client.connect(""String_Node_Str"",port);
      break;
    }
 catch (    SSLException e) {
    }
catch (    FTPConnectionClosedException e) {
    }
    Thread.sleep(500);
    attempts++;
  }
}","/** 
 * @throws Exception
 */
protected void connectClient() throws Exception {
  client=createFTPClient();
  client.addProtocolCommandListener(new ProtocolCommandListener(){
    public void protocolCommandSent(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
    public void protocolReplyReceived(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
  }
);
  int attempts=0;
  while (attempts < 5) {
    try {
      client.connect(""String_Node_Str"",port);
      break;
    }
 catch (    SSLException e) {
    }
catch (    FTPConnectionClosedException e) {
    }
    System.out.println(""String_Node_Str"");
    Thread.sleep(500);
    attempts++;
  }
}",0.9706484641638226
152330,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean success=false;
  FtpServerContext serverContext=handler.getServerContext();
  Log log=serverContext.getLogFactory().getInstance(getClass());
  ConnectionManager conManager=serverContext.getConnectionManager();
  ServerFtpStatistics stat=(ServerFtpStatistics)serverContext.getFtpStatistics();
  try {
    request.resetState();
    String password=request.getArgument();
    if (password == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    String userName=request.getUserArgument();
    User user=request.getUser();
    if (userName == null && user == null) {
      out.send(503,""String_Node_Str"",null);
      return;
    }
    if (request.isLoggedIn()) {
      out.send(202,""String_Node_Str"",null);
      success=true;
      return;
    }
    boolean anonymous=userName.equals(""String_Node_Str"");
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (anonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (maxLogin != 0 && currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    UserManager userManager=serverContext.getUserManager();
    user=null;
    try {
      Authentication auth;
      if (anonymous) {
        auth=new AnonymousAuthentication();
      }
 else {
        auth=new UsernamePasswordAuthentication(userName,password);
      }
      user=userManager.authenticate(auth);
    }
 catch (    Exception ex) {
      success=false;
      log.warn(""String_Node_Str"",ex);
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    if (ftpletContainer != null) {
      FtpletEnum ftpletRet;
      try {
        ftpletRet=ftpletContainer.onLogin(request,out);
      }
 catch (      Exception e) {
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(handler);
        return;
      }
 else       if (ftpletRet == FtpletEnum.RET_SKIP) {
        success=false;
      }
    }
    if (success) {
      request.setUser(user);
      request.setUserArgument(null);
      request.setMaxIdleTime(user.getMaxIdleTime());
    }
 else {
      log.warn(""String_Node_Str"" + userName);
      out.send(530,""String_Node_Str"",userName);
      stat.setLoginFail(handler);
      return;
    }
    FileSystemManager fmanager=serverContext.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(user);
    request.setLogin(fsview);
    stat.setLogin(handler);
    out.send(230,""String_Node_Str"",userName);
    if (anonymous) {
      log.info(""String_Node_Str"" + password);
    }
 else {
      log.info(""String_Node_Str"" + userName);
    }
  }
  finally {
    if (!success) {
      request.reinitialize();
    }
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean success=false;
  FtpServerContext serverContext=handler.getServerContext();
  Log log=serverContext.getLogFactory().getInstance(getClass());
  ConnectionManager conManager=serverContext.getConnectionManager();
  ServerFtpStatistics stat=(ServerFtpStatistics)serverContext.getFtpStatistics();
  try {
    request.resetState();
    String password=request.getArgument();
    if (password == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    String userName=request.getUserArgument();
    User user=request.getUser();
    if (userName == null && user == null) {
      out.send(503,""String_Node_Str"",null);
      return;
    }
    if (request.isLoggedIn()) {
      out.send(202,""String_Node_Str"",null);
      success=true;
      return;
    }
    boolean anonymous=userName.equals(""String_Node_Str"");
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (anonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (maxLogin != 0 && currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    UserManager userManager=serverContext.getUserManager();
    user=null;
    try {
      Authentication auth;
      if (anonymous) {
        auth=new AnonymousAuthentication();
      }
 else {
        auth=new UsernamePasswordAuthentication(userName,password);
      }
      user=userManager.authenticate(auth);
      success=true;
    }
 catch (    Exception ex) {
      success=false;
      log.warn(""String_Node_Str"",ex);
    }
    Ftplet ftpletContainer=serverContext.getFtpletContainer();
    if (ftpletContainer != null) {
      FtpletEnum ftpletRet;
      try {
        ftpletRet=ftpletContainer.onLogin(request,out);
      }
 catch (      Exception e) {
        ftpletRet=FtpletEnum.RET_DISCONNECT;
      }
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        serverContext.getConnectionManager().closeConnection(handler);
        return;
      }
 else       if (ftpletRet == FtpletEnum.RET_SKIP) {
        success=false;
      }
    }
    if (success) {
      request.setUser(user);
      request.setUserArgument(null);
      request.setMaxIdleTime(user.getMaxIdleTime());
    }
 else {
      log.warn(""String_Node_Str"" + userName);
      out.send(530,""String_Node_Str"",userName);
      stat.setLoginFail(handler);
      return;
    }
    FileSystemManager fmanager=serverContext.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(user);
    request.setLogin(fsview);
    stat.setLogin(handler);
    out.send(230,""String_Node_Str"",userName);
    if (anonymous) {
      log.info(""String_Node_Str"" + password);
    }
 else {
      log.info(""String_Node_Str"" + userName);
    }
  }
  finally {
    if (!success) {
      request.reinitialize();
    }
  }
}",0.996785599485696
152331,"protected void setUp() throws Exception {
}","protected void setUp() throws Exception {
  MockFtplet.callback=new MockFtpletCallback();
  MockFtplet.callback.returnValue=FtpletEnum.RET_DEFAULT;
}",0.4479166666666667
152332,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean bSuccess=false;
  IFtpConfig fconfig=handler.getConfig();
  IConnectionManager conManager=fconfig.getConnectionManager();
  IFtpStatistics stat=(IFtpStatistics)fconfig.getFtpStatistics();
  try {
    request.resetState();
    String userName=request.getArgument();
    if (userName == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    BaseUser user=(BaseUser)request.getUser();
    if (request.isLoggedIn()) {
      if (userName.equals(user.getName())) {
        out.send(230,""String_Node_Str"",null);
        bSuccess=true;
      }
 else {
        out.send(530,""String_Node_Str"",null);
      }
      return;
    }
    boolean bAnonymous=userName.equals(""String_Node_Str"");
    if (bAnonymous && (!conManager.isAnonymousLoginEnabled())) {
      out.send(530,""String_Node_Str"",null);
      return;
    }
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (bAnonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    User configUser=handler.getConfig().getUserManager().getUserByName(userName);
    if (configUser != null) {
      int maxUserLoginNumber=configUser.getMaxLoginNumber();
      if (maxUserLoginNumber > 0) {
        int currUserLogin=stat.getCurrentUserLoginNumber(configUser);
        if (currUserLogin >= maxUserLoginNumber) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
      int maxUserLoginPerIP=configUser.getMaxLoginPerIP();
      if (maxUserLoginPerIP > 0) {
        int currUserLoginPerIP=stat.getCurrentUserLoginNumber(configUser,request.getRemoteAddress());
        if (currUserLoginPerIP >= maxUserLoginPerIP) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
    }
    bSuccess=true;
    user.setName(userName);
    if (bAnonymous) {
      out.send(331,""String_Node_Str"",userName);
    }
 else {
      out.send(331,""String_Node_Str"",userName);
    }
  }
  finally {
    if (!bSuccess) {
      conManager.closeConnection(handler);
    }
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean bSuccess=false;
  IFtpConfig fconfig=handler.getConfig();
  IConnectionManager conManager=fconfig.getConnectionManager();
  IFtpStatistics stat=(IFtpStatistics)fconfig.getFtpStatistics();
  try {
    request.resetState();
    String userName=request.getArgument();
    if (userName == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    BaseUser user=(BaseUser)request.getUser();
    if (request.isLoggedIn()) {
      if (userName.equals(user.getName())) {
        out.send(230,""String_Node_Str"",null);
        bSuccess=true;
      }
 else {
        out.send(530,""String_Node_Str"",null);
      }
      return;
    }
    boolean bAnonymous=userName.equals(""String_Node_Str"");
    if (bAnonymous && (!conManager.isAnonymousLoginEnabled())) {
      out.send(530,""String_Node_Str"",null);
      return;
    }
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (bAnonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    User configUser=handler.getConfig().getUserManager().getUserByName(userName);
    if (configUser != null) {
      int maxUserLoginNumber=configUser.getMaxLoginNumber();
      if (maxUserLoginNumber > 0) {
        int currUserLogin=stat.getCurrentUserLoginNumber(configUser);
        if (currUserLogin >= maxUserLoginNumber) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
      int maxUserLoginPerIP=configUser.getMaxLoginPerIP();
      if (maxUserLoginPerIP > 0) {
        int currUserLoginPerIP=stat.getCurrentUserLoginNumber(configUser,request.getRemoteAddress());
        if (currUserLoginPerIP >= maxUserLoginPerIP) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
    }
    bSuccess=true;
    request.setUserArgument(userName);
    if (bAnonymous) {
      out.send(331,""String_Node_Str"",userName);
    }
 else {
      out.send(331,""String_Node_Str"",userName);
    }
  }
  finally {
    if (!bSuccess) {
      conManager.closeConnection(handler);
    }
  }
}",0.992849846782431
152333,"/** 
 * Save entered properties 
 */
private void save(){
  int selIdx=comboBox.getSelectedIndex();
  if (selIdx == -1) {
    return;
  }
  String language=null;
  if (selIdx >= 1) {
    language=languages[selIdx - 1];
  }
  String key=(String)comboBox.getSelectedItem();
  String val=txtArea.getText();
  messageProps.setProperty(key,val);
  try {
    fconfig.getMessageResource().save(messageProps,language);
  }
 catch (  FtpException ex) {
    GuiUtils.showErrorMessage(this,""String_Node_Str"");
  }
}","/** 
 * Save entered properties 
 */
private void save(){
  int selIdx=comboBox.getSelectedIndex();
  if (selIdx == -1) {
    return;
  }
  String language=null;
  if (selIdx >= 1) {
    language=languages[selIdx - 1];
  }
  String key=list.getSelectedValue().toString();
  String val=txtArea.getText();
  messageProps.setProperty(key,val);
  try {
    fconfig.getMessageResource().save(messageProps,language);
  }
 catch (  FtpException ex) {
    GuiUtils.showErrorMessage(this,""String_Node_Str"");
  }
}",0.9365079365079364
152334,"/** 
 * Print file list. Detail listing. <pre> -a : display all (including hidden files) </pre>
 * @return true if success
 */
public boolean doLIST(String argument,Writer out) throws IOException {
  if (!parse(argument)) {
    return false;
  }
  FileObject[] files=null;
  try {
    files=fileSystemView.listFiles(file);
  }
 catch (  FtpException ex) {
  }
  if (files == null) {
    return false;
  }
  RegularExpr regexp=null;
  if (pattern != null) {
    regexp=new RegularExpr(pattern);
  }
  for (int i=0; i < files.length; i++) {
    if (files[i] == null) {
      continue;
    }
    if ((!isAllOption) && files[i].isHidden()) {
      continue;
    }
    if ((regexp != null) && (!regexp.isMatch(files[i].getShortName()))) {
      continue;
    }
    printLine(files[i],out);
    out.write(NEWLINE);
  }
  out.flush();
  return true;
}","/** 
 * Print file list. Detail listing. <pre> -a : display all (including hidden files) </pre>
 * @return true if success
 */
public boolean doLIST(String argument,Writer out) throws IOException {
  if (!parse(argument)) {
    return false;
  }
  FileObject[] files=listFiles();
  if (files == null) {
    return false;
  }
  RegularExpr regexp=null;
  if (pattern != null) {
    regexp=new RegularExpr(pattern);
  }
  for (int i=0; i < files.length; i++) {
    if (files[i] == null) {
      continue;
    }
    if ((!isAllOption) && files[i].isHidden()) {
      continue;
    }
    if ((regexp != null) && (!regexp.isMatch(files[i].getShortName()))) {
      continue;
    }
    printLine(files[i],out);
    out.write(NEWLINE);
  }
  out.flush();
  return true;
}",0.9477611940298508
152335,"/** 
 * Print file list. The server will return a stream of names of  files and no other information if detail listing flag is false. <pre> -l : detail listing -a : display all (including hidden files) </pre>
 */
public boolean doNLST(String argument,Writer out) throws IOException {
  if (!parse(argument)) {
    return false;
  }
  FileObject[] files=null;
  try {
    files=fileSystemView.listFiles(file);
  }
 catch (  FtpException ex) {
  }
  if (files == null) {
    return false;
  }
  RegularExpr regexp=null;
  if (pattern != null) {
    regexp=new RegularExpr(pattern);
  }
  for (int i=0; i < files.length; i++) {
    if (files[i] == null) {
      continue;
    }
    if ((!isAllOption) && files[i].isHidden()) {
      continue;
    }
    if ((regexp != null) && (!regexp.isMatch(files[i].getShortName()))) {
      continue;
    }
    if (isDetailOption) {
      printLine(files[i],out);
    }
 else {
      out.write(files[i].getShortName());
    }
    out.write(NEWLINE);
  }
  out.flush();
  return true;
}","/** 
 * Print file list. The server will return a stream of names of  files and no other information if detail listing flag is false. <pre> -l : detail listing -a : display all (including hidden files) </pre>
 */
public boolean doNLST(String argument,Writer out) throws IOException {
  if (!parse(argument)) {
    return false;
  }
  FileObject[] files=listFiles();
  if (files == null) {
    return false;
  }
  RegularExpr regexp=null;
  if (pattern != null) {
    regexp=new RegularExpr(pattern);
  }
  for (int i=0; i < files.length; i++) {
    if (files[i] == null) {
      continue;
    }
    if ((!isAllOption) && files[i].isHidden()) {
      continue;
    }
    if ((regexp != null) && (!regexp.isMatch(files[i].getShortName()))) {
      continue;
    }
    if (isDetailOption) {
      printLine(files[i],out);
    }
 else {
      out.write(files[i].getShortName());
    }
    out.write(NEWLINE);
  }
  out.flush();
  return true;
}",0.9571428571428572
152336,"/** 
 * Print directory contents. Machine listing. <pre> -a : display all (including hidden files) </pre>
 * @return true if success
 */
public boolean doMLSD(String argument,Writer out) throws IOException {
  if (!parse(argument)) {
    return false;
  }
  FileObject[] files=null;
  try {
    files=fileSystemView.listFiles(file);
  }
 catch (  FtpException ex) {
  }
  if (files == null) {
    return false;
  }
  RegularExpr regexp=null;
  if (pattern != null) {
    regexp=new RegularExpr(pattern);
  }
  for (int i=0; i < files.length; i++) {
    if (files[i] == null) {
      continue;
    }
    if ((!isAllOption) && files[i].isHidden()) {
      continue;
    }
    if ((regexp != null) && (!regexp.isMatch(files[i].getShortName()))) {
      continue;
    }
    printMLine(files[i],out);
    out.write(NEWLINE);
  }
  out.flush();
  return true;
}","/** 
 * Print directory contents. Machine listing. <pre> -a : display all (including hidden files) </pre>
 * @return true if success
 */
public boolean doMLSD(String argument,Writer out) throws IOException {
  if (!parse(argument)) {
    return false;
  }
  FileObject[] files=listFiles();
  if (files == null) {
    return false;
  }
  RegularExpr regexp=null;
  if (pattern != null) {
    regexp=new RegularExpr(pattern);
  }
  for (int i=0; i < files.length; i++) {
    if (files[i] == null) {
      continue;
    }
    if ((!isAllOption) && files[i].isHidden()) {
      continue;
    }
    if ((regexp != null) && (!regexp.isMatch(files[i].getShortName()))) {
      continue;
    }
    printMLine(files[i],out);
    out.write(NEWLINE);
  }
  out.flush();
  return true;
}",0.9484662576687116
152337,"/** 
 * Port command.
 */
public synchronized void setPortCommand(InetAddress addr,int port){
  closeDataSocket();
  isPort=true;
  isPasv=false;
  address=addr;
  this.port=port;
  requestTime=System.currentTimeMillis();
}","/** 
 * Port command.
 */
public synchronized void setPortCommand(InetAddress addr,int activePort){
  closeDataSocket();
  isPort=true;
  isPasv=false;
  address=addr;
  port=activePort;
  requestTime=System.currentTimeMillis();
}",0.9536423841059604
152338,"/** 
 * Passive command. It returns the success flag.
 */
public synchronized boolean setPasvCommand(){
  closeDataSocket();
  int port=fconfig.getDataConnectionConfig().getPassivePort();
  if (port == -1) {
    log.warn(""String_Node_Str"");
    servSoc=null;
    return false;
  }
  boolean bRet=false;
  try {
    IDataConnectionConfig dataCfg=fconfig.getDataConnectionConfig();
    address=dataCfg.getPassiveAddress();
    if (secure) {
      ISsl ssl=dataCfg.getSSL();
      if (ssl == null) {
        throw new FtpException(""String_Node_Str"");
      }
      servSoc=ssl.createServerSocket(null,address,this.port);
    }
 else {
      servSoc=new ServerSocket(port,1,address);
    }
    servSoc.setSoTimeout(dataCfg.getMaxIdleTimeMillis());
    this.port=servSoc.getLocalPort();
    isPort=false;
    isPasv=true;
    bRet=true;
    requestTime=System.currentTimeMillis();
  }
 catch (  Exception ex) {
    servSoc=null;
    closeDataSocket();
    log.warn(""String_Node_Str"",ex);
  }
  return bRet;
}","/** 
 * Passive command. It returns the success flag.
 */
public synchronized boolean setPasvCommand(){
  closeDataSocket();
  int passivePort=fconfig.getDataConnectionConfig().getPassivePort();
  if (passivePort == -1) {
    log.warn(""String_Node_Str"");
    servSoc=null;
    return false;
  }
  boolean bRet=false;
  try {
    IDataConnectionConfig dataCfg=fconfig.getDataConnectionConfig();
    address=dataCfg.getPassiveAddress();
    if (secure) {
      ISsl ssl=dataCfg.getSSL();
      if (ssl == null) {
        throw new FtpException(""String_Node_Str"");
      }
      servSoc=ssl.createServerSocket(null,address,passivePort);
    }
 else {
      servSoc=new ServerSocket(passivePort,1,address);
    }
    servSoc.setSoTimeout(dataCfg.getMaxIdleTimeMillis());
    port=servSoc.getLocalPort();
    isPort=false;
    isPasv=true;
    bRet=true;
    requestTime=System.currentTimeMillis();
  }
 catch (  Exception ex) {
    servSoc=null;
    closeDataSocket();
    log.warn(""String_Node_Str"",ex);
  }
  return bRet;
}",0.9812252964426876
152339,"/** 
 * Check user permission to execute ftp command. 
 */
protected boolean hasPermission(){
  String cmd=request.getCommand();
  if (cmd == null) {
    return false;
  }
  return request.isLoggedIn() || cmd.equals(""String_Node_Str"") || cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"");
}","/** 
 * Check user permission to execute ftp command. 
 */
protected boolean hasPermission(){
  String cmd=request.getCommand();
  if (cmd == null) {
    return false;
  }
  return request.isLoggedIn() || cmd.equals(""String_Node_Str"") || cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"")|| cmd.equals(""String_Node_Str"");
}",0.970479704797048
152340,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onAppendStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    fileName=file.getFullName();
    if (!(file.doesExist() && file.isFile())) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",fileName);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    try {
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(true));
      int maxRate=handler.getRequest().getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onAppendEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    String fileName=request.getArgument();
    if (fileName == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onAppendStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(fileName);
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    fileName=file.getFullName();
    if (!(file.doesExist() && file.isFile())) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",fileName);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    try {
      long offset=0L;
      if (file.doesExist()) {
        offset=file.getSize();
      }
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(offset));
      int maxRate=handler.getRequest().getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onAppendEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}",0.9815525114155252
152341,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onUploadUniqueStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(""String_Node_Str"");
      if (file != null) {
        file=getUniqueFile(handler,file);
      }
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",null);
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",null);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    out.send(250,""String_Node_Str"",fileName);
    try {
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(false));
      int maxRate=handler.getRequest().getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onUploadUniqueEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onUploadUniqueStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(""String_Node_Str"");
      if (file != null) {
        file=getUniqueFile(handler,file);
      }
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",null);
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",null);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    out.send(250,""String_Node_Str"",fileName);
    try {
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(0L));
      int maxRate=handler.getRequest().getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onUploadUniqueEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}",0.9986441991090452
152342,"/** 
 * Generate and send ftp server response.
 */
public void send(int code,String subId,String basicMsg) throws IOException {
  IMessageResource resource=fconfig.getMessageResource();
  String lang=request.getLanguage();
  String msg=resource.getMessage(code,subId,lang);
  if (msg == null) {
    log.error(""String_Node_Str"" + code + ','+ subId+ ','+ lang);
    msg=""String_Node_Str"";
  }
  msg=replaceVariables(code,basicMsg,msg);
  write(code,msg);
}","/** 
 * Generate and send ftp server response.
 */
public void send(int code,String subId,String basicMsg) throws IOException {
  IMessageResource resource=fconfig.getMessageResource();
  String lang=request.getLanguage();
  String msg=null;
  if (resource != null) {
    msg=resource.getMessage(code,subId,lang);
  }
  if (msg == null) {
    log.error(""String_Node_Str"" + code + ','+ subId+ ','+ lang);
    msg=""String_Node_Str"";
  }
  msg=replaceVariables(code,basicMsg,msg);
  write(code,msg);
}",0.953781512605042
152343,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onUploadUniqueStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(""String_Node_Str"");
      if (file != null) {
        file=getUniqueFile(handler,file);
      }
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",null);
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",null);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    out.send(250,""String_Node_Str"",fileName);
    try {
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(0L));
      int maxRate=handler.getRequest().getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onUploadUniqueEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onUploadUniqueStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    String dirName=request.getArgument();
    String filePrefix;
    if (dirName == null) {
      filePrefix=""String_Node_Str"";
    }
 else {
      filePrefix=dirName + ""String_Node_Str"";
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(filePrefix);
      if (file != null) {
        file=getUniqueFile(handler,file);
      }
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",null);
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",null);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    out.send(250,""String_Node_Str"",fileName);
    try {
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(0L));
      int maxRate=request.getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onUploadUniqueEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}",0.95575553055868
152344,"public final static void delete(File file) throws IOException {
  if (file.isDirectory()) {
    deleteDir(file);
  }
 else {
    deleteFile(file);
  }
}","public final static void delete(File file) throws IOException {
  if (!file.exists()) {
    return;
  }
 else   if (file.isDirectory()) {
    deleteDir(file);
  }
 else {
    deleteFile(file);
  }
}",0.8685714285714285
152345,"protected void setUp() throws Exception {
  testTmpDir.mkdirs();
  initPort();
  config=new FtpConfigImpl(new PropertiesConfiguration(createConfig()));
  server=new FtpServer(config);
  server.start();
  client=new FTPClient();
  client.addProtocolCommandListener(new ProtocolCommandListener(){
    public void protocolCommandSent(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
    public void protocolReplyReceived(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
  }
);
  try {
    client.connect(""String_Node_Str"",port);
  }
 catch (  FTPConnectionClosedException e) {
    client.connect(""String_Node_Str"",port);
  }
}","protected void setUp() throws Exception {
  cleanTmpDirs();
  testTmpDir.mkdirs();
  rootDir.mkdirs();
  initPort();
  config=new FtpConfigImpl(new PropertiesConfiguration(createConfig()));
  server=new FtpServer(config);
  server.start();
  client=new FTPClient();
  client.addProtocolCommandListener(new ProtocolCommandListener(){
    public void protocolCommandSent(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
    public void protocolReplyReceived(    ProtocolCommandEvent event){
      log.debug(""String_Node_Str"" + event.getMessage().trim());
    }
  }
);
  try {
    client.connect(""String_Node_Str"",port);
  }
 catch (  FTPConnectionClosedException e) {
    client.connect(""String_Node_Str"",port);
  }
}",0.9693333333333334
152346,"protected void tearDown() throws Exception {
  server.stop();
  IoUtils.delete(testTmpDir);
}","protected void tearDown() throws Exception {
  server.stop();
  cleanTmpDirs();
}",0.8735632183908046
152347,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean bSuccess=false;
  IFtpConfig fconfig=handler.getConfig();
  Log log=fconfig.getLogFactory().getInstance(getClass());
  IConnectionManager conManager=fconfig.getConnectionManager();
  IFtpStatistics stat=(IFtpStatistics)fconfig.getFtpStatistics();
  try {
    request.resetState();
    String password=request.getArgument();
    if (password == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    String userName=request.getUserArgument();
    if (userName == null) {
      out.send(503,""String_Node_Str"",null);
      return;
    }
    if (request.isLoggedIn()) {
      out.send(202,""String_Node_Str"",null);
      bSuccess=true;
      return;
    }
    boolean bAnonymous=userName.equals(""String_Node_Str"");
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (bAnonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    UserManager userManager=fconfig.getUserManager();
    User user=null;
    try {
      if (bAnonymous) {
        bSuccess=userManager.doesExist(""String_Node_Str"");
        if (bSuccess)         user=userManager.getUserByName(""String_Node_Str"");
      }
 else {
        bSuccess=userManager.authenticate(userName,password);
        if (bSuccess)         user=userManager.getUserByName(userName);
      }
    }
 catch (    Exception ex) {
      bSuccess=false;
      log.warn(""String_Node_Str"",ex);
    }
    if (bSuccess) {
      request.setUser(user);
      request.setUserArgument(null);
      request.setMaxIdleTime(user.getMaxIdleTime());
    }
 else {
      log.warn(""String_Node_Str"" + userName);
      out.send(530,""String_Node_Str"",userName);
      return;
    }
    FileSystemManager fmanager=fconfig.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(user);
    handler.setDirectoryLister(new DirectoryLister(fsview));
    request.setLogin(fsview);
    stat.setLogin(handler);
    out.send(230,""String_Node_Str"",userName);
    if (bAnonymous) {
      log.info(""String_Node_Str"" + password);
    }
 else {
      log.info(""String_Node_Str"" + userName);
    }
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onLogin(request,out);
    if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
  }
  finally {
    if (!bSuccess) {
      request.setUserArgument(null);
    }
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean success=false;
  IFtpConfig fconfig=handler.getConfig();
  Log log=fconfig.getLogFactory().getInstance(getClass());
  IConnectionManager conManager=fconfig.getConnectionManager();
  IFtpStatistics stat=(IFtpStatistics)fconfig.getFtpStatistics();
  try {
    request.resetState();
    String password=request.getArgument();
    if (password == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    String userName=request.getUserArgument();
    User user=request.getUser();
    if (userName == null && user == null) {
      out.send(503,""String_Node_Str"",null);
      return;
    }
    if (request.isLoggedIn()) {
      out.send(202,""String_Node_Str"",null);
      success=true;
      return;
    }
    boolean anonymous=userName.equals(""String_Node_Str"");
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (anonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    UserManager userManager=fconfig.getUserManager();
    user=null;
    try {
      if (anonymous) {
        success=userManager.doesExist(""String_Node_Str"");
        if (success) {
          user=userManager.getUserByName(""String_Node_Str"");
        }
      }
 else {
        success=userManager.authenticate(userName,password);
        if (success) {
          user=userManager.getUserByName(userName);
        }
      }
    }
 catch (    Exception ex) {
      success=false;
      log.warn(""String_Node_Str"",ex);
    }
    if (success) {
      request.setUser(user);
      request.setUserArgument(null);
      request.setMaxIdleTime(user.getMaxIdleTime());
    }
 else {
      log.warn(""String_Node_Str"" + userName);
      out.send(530,""String_Node_Str"",userName);
      return;
    }
    FileSystemManager fmanager=fconfig.getFileSystemManager();
    FileSystemView fsview=fmanager.createFileSystemView(user);
    handler.setDirectoryLister(new DirectoryLister(fsview));
    request.setLogin(fsview);
    stat.setLogin(handler);
    out.send(230,""String_Node_Str"",userName);
    if (anonymous) {
      log.info(""String_Node_Str"" + password);
    }
 else {
      log.info(""String_Node_Str"" + userName);
    }
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    if (ftpletContainer != null) {
      FtpletEnum ftpletRet=ftpletContainer.onLogin(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    if (!success) {
      request.reinitialize();
    }
  }
}",0.9419265896949852
152348,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean bSuccess=false;
  IFtpConfig fconfig=handler.getConfig();
  IConnectionManager conManager=fconfig.getConnectionManager();
  IFtpStatistics stat=(IFtpStatistics)fconfig.getFtpStatistics();
  try {
    request.resetState();
    String userName=request.getArgument();
    if (userName == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    BaseUser user=(BaseUser)request.getUser();
    if (request.isLoggedIn()) {
      if (userName.equals(user.getName())) {
        out.send(230,""String_Node_Str"",null);
        bSuccess=true;
      }
 else {
        out.send(530,""String_Node_Str"",null);
      }
      return;
    }
    boolean bAnonymous=userName.equals(""String_Node_Str"");
    if (bAnonymous && (!conManager.isAnonymousLoginEnabled())) {
      out.send(530,""String_Node_Str"",null);
      return;
    }
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (bAnonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    User configUser=handler.getConfig().getUserManager().getUserByName(userName);
    if (configUser != null) {
      int maxUserLoginNumber=configUser.getMaxLoginNumber();
      if (maxUserLoginNumber > 0) {
        int currUserLogin=stat.getCurrentUserLoginNumber(configUser);
        if (currUserLogin >= maxUserLoginNumber) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
      int maxUserLoginPerIP=configUser.getMaxLoginPerIP();
      if (maxUserLoginPerIP > 0) {
        int currUserLoginPerIP=stat.getCurrentUserLoginNumber(configUser,request.getRemoteAddress());
        if (currUserLoginPerIP >= maxUserLoginPerIP) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
    }
    bSuccess=true;
    request.setUserArgument(userName);
    if (bAnonymous) {
      out.send(331,""String_Node_Str"",userName);
    }
 else {
      out.send(331,""String_Node_Str"",userName);
    }
  }
  finally {
    if (!bSuccess) {
      conManager.closeConnection(handler);
    }
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  boolean success=false;
  IFtpConfig fconfig=handler.getConfig();
  IConnectionManager conManager=fconfig.getConnectionManager();
  IFtpStatistics stat=(IFtpStatistics)fconfig.getFtpStatistics();
  try {
    request.resetState();
    String userName=request.getArgument();
    if (userName == null) {
      out.send(501,""String_Node_Str"",null);
      return;
    }
    BaseUser user=(BaseUser)request.getUser();
    if (request.isLoggedIn()) {
      if (userName.equals(user.getName())) {
        out.send(230,""String_Node_Str"",null);
        success=true;
      }
 else {
        out.send(530,""String_Node_Str"",null);
      }
      return;
    }
    boolean anonymous=userName.equals(""String_Node_Str"");
    if (anonymous && (!conManager.isAnonymousLoginEnabled())) {
      out.send(530,""String_Node_Str"",null);
      return;
    }
    int currAnonLogin=stat.getCurrentAnonymousLoginNumber();
    int maxAnonLogin=conManager.getMaxAnonymousLogins();
    if (anonymous && (currAnonLogin >= maxAnonLogin)) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    int currLogin=stat.getCurrentLoginNumber();
    int maxLogin=conManager.getMaxLogins();
    if (currLogin >= maxLogin) {
      out.send(421,""String_Node_Str"",null);
      return;
    }
    User configUser=handler.getConfig().getUserManager().getUserByName(userName);
    if (configUser != null) {
      int maxUserLoginNumber=configUser.getMaxLoginNumber();
      if (maxUserLoginNumber > 0) {
        int currUserLogin=stat.getCurrentUserLoginNumber(configUser);
        if (currUserLogin >= maxUserLoginNumber) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
      int maxUserLoginPerIP=configUser.getMaxLoginPerIP();
      if (maxUserLoginPerIP > 0) {
        int currUserLoginPerIP=stat.getCurrentUserLoginNumber(configUser,request.getRemoteAddress());
        if (currUserLoginPerIP >= maxUserLoginPerIP) {
          out.send(421,""String_Node_Str"",null);
          return;
        }
      }
    }
    success=true;
    request.setUserArgument(userName);
    if (anonymous) {
      out.send(331,""String_Node_Str"",userName);
    }
 else {
      out.send(331,""String_Node_Str"",userName);
    }
  }
  finally {
    if (!success) {
      conManager.closeConnection(handler);
    }
  }
}",0.9951000408329932
152349,"/** 
 * Transfer data.
 */
public final long transfer(BufferedInputStream in,BufferedOutputStream out,int maxRate) throws IOException {
  boolean isAscii=dataType == DataType.ASCII;
  long startTime=System.currentTimeMillis();
  long transferredSize=0L;
  byte[] buff=new byte[4096];
  while (true) {
    if (maxRate > 0) {
      long interval=System.currentTimeMillis() - startTime;
      if (interval == 0) {
        interval=1;
      }
      long currRate=(transferredSize * 1000L) / interval;
      if (currRate > maxRate) {
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException ex) {
          break;
        }
      }
    }
    int count=in.read(buff);
    if (count == -1) {
      break;
    }
    if (isAscii) {
      for (int i=0; i < count; ++i) {
        byte b=buff[i];
        if (b == '\n') {
          out.write('\r');
        }
        out.write(b);
      }
    }
 else {
      out.write(buff,0,count);
    }
    transferredSize+=count;
    notifyObserver();
  }
  return transferredSize;
}","/** 
 * Transfer data.
 */
public final long transfer(BufferedInputStream in,BufferedOutputStream out,int maxRate) throws IOException {
  boolean isAscii=dataType == DataType.ASCII;
  long startTime=System.currentTimeMillis();
  long transferredSize=0L;
  byte[] buff=new byte[4096];
  while (true) {
    if (maxRate > 0) {
      long interval=System.currentTimeMillis() - startTime;
      if (interval == 0) {
        interval=1;
      }
      long currRate=(transferredSize * 1000L) / interval;
      if (currRate > maxRate) {
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException ex) {
          break;
        }
        continue;
      }
    }
    int count=in.read(buff);
    if (count == -1) {
      break;
    }
    if (isAscii) {
      for (int i=0; i < count; ++i) {
        byte b=buff[i];
        if (b == '\n') {
          out.write('\r');
        }
        out.write(b);
      }
    }
 else {
      out.write(buff,0,count);
    }
    transferredSize+=count;
    notifyObserver();
  }
  return transferredSize;
}",0.9914285714285714
152350,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  request.resetState();
  IFtpConfig fconfig=handler.getConfig();
  String fileName=request.getArgument();
  if (fileName == null) {
    out.send(501,""String_Node_Str"",null);
    return;
  }
  Ftplet ftpletContainer=fconfig.getFtpletContainer();
  FtpletEnum ftpletRet=ftpletContainer.onDeleteStart(request,out);
  if (ftpletRet == FtpletEnum.RET_SKIP) {
    return;
  }
 else   if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
    fconfig.getConnectionManager().closeConnection(handler);
    return;
  }
  FileObject file=request.getFileSystemView().getFileObject(fileName);
  fileName=file.getFullName();
  if (!file.isFile()) {
    out.send(550,""String_Node_Str"",fileName);
    return;
  }
  if (!file.hasDeletePermission()) {
    out.send(450,""String_Node_Str"",fileName);
    return;
  }
  if (file.delete()) {
    out.send(250,""String_Node_Str"",fileName);
    String userName=request.getUser().getName();
    Log log=fconfig.getLogFactory().getInstance(getClass());
    log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
    IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
    ftpStat.setDelete(handler,file);
    ftpletRet=ftpletContainer.onDeleteEnd(request,out);
    if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
  }
 else {
    out.send(450,""String_Node_Str"",fileName);
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  request.resetState();
  IFtpConfig fconfig=handler.getConfig();
  String fileName=request.getArgument();
  if (fileName == null) {
    out.send(501,""String_Node_Str"",null);
    return;
  }
  Ftplet ftpletContainer=fconfig.getFtpletContainer();
  FtpletEnum ftpletRet=ftpletContainer.onDeleteStart(request,out);
  if (ftpletRet == FtpletEnum.RET_SKIP) {
    return;
  }
 else   if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
    fconfig.getConnectionManager().closeConnection(handler);
    return;
  }
  FileObject file=null;
  try {
    file=request.getFileSystemView().getFileObject(fileName);
  }
 catch (  Exception ex) {
  }
  if (file == null) {
    out.send(550,""String_Node_Str"",fileName);
    return;
  }
  fileName=file.getFullName();
  if (!file.isFile()) {
    out.send(550,""String_Node_Str"",fileName);
    return;
  }
  if (!file.hasDeletePermission()) {
    out.send(450,""String_Node_Str"",fileName);
    return;
  }
  if (file.delete()) {
    out.send(250,""String_Node_Str"",fileName);
    String userName=request.getUser().getName();
    Log log=fconfig.getLogFactory().getInstance(getClass());
    log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
    IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
    ftpStat.setDelete(handler,file);
    ftpletRet=ftpletContainer.onDeleteEnd(request,out);
    if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
  }
 else {
    out.send(450,""String_Node_Str"",fileName);
  }
}",0.9261205564142194
152351,"/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onUploadUniqueStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(""String_Node_Str"");
      file=getUniqueFile(handler,file);
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",null);
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",null);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    out.send(250,""String_Node_Str"",fileName);
    try {
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(false));
      int maxRate=handler.getRequest().getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onUploadUniqueEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}","/** 
 * Execute command.
 */
public void execute(RequestHandler handler,FtpRequestImpl request,FtpWriter out) throws IOException, FtpException {
  try {
    request.resetState();
    IFtpConfig fconfig=handler.getConfig();
    Ftplet ftpletContainer=fconfig.getFtpletContainer();
    FtpletEnum ftpletRet=ftpletContainer.onUploadUniqueStart(request,out);
    if (ftpletRet == FtpletEnum.RET_SKIP) {
      return;
    }
 else     if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
      fconfig.getConnectionManager().closeConnection(handler);
      return;
    }
    FileObject file=null;
    try {
      file=request.getFileSystemView().getFileObject(""String_Node_Str"");
      if (file != null) {
        file=getUniqueFile(handler,file);
      }
    }
 catch (    Exception ex) {
    }
    if (file == null) {
      out.send(550,""String_Node_Str"",null);
      return;
    }
    String fileName=file.getFullName();
    if (!file.hasWritePermission()) {
      out.send(550,""String_Node_Str"",fileName);
      return;
    }
    out.send(150,""String_Node_Str"",null);
    InputStream is=null;
    try {
      is=request.getDataInputStream();
    }
 catch (    IOException ex) {
      out.send(425,""String_Node_Str"",fileName);
      return;
    }
    boolean failure=false;
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    out.send(250,""String_Node_Str"",fileName);
    try {
      bis=IoUtils.getBufferedInputStream(is);
      bos=IoUtils.getBufferedOutputStream(file.createOutputStream(false));
      int maxRate=handler.getRequest().getUser().getMaxUploadRate();
      long transSz=handler.transfer(bis,bos,maxRate);
      String userName=request.getUser().getName();
      Log log=fconfig.getLogFactory().getInstance(getClass());
      log.info(""String_Node_Str"" + userName + ""String_Node_Str""+ fileName);
      IFtpStatistics ftpStat=(IFtpStatistics)fconfig.getFtpStatistics();
      ftpStat.setUpload(handler,file,transSz);
    }
 catch (    SocketException ex) {
      failure=true;
      out.send(426,""String_Node_Str"",fileName);
    }
catch (    IOException ex) {
      failure=true;
      out.send(551,""String_Node_Str"",fileName);
    }
 finally {
      IoUtils.close(bis);
      IoUtils.close(bos);
    }
    if (!failure) {
      out.send(226,""String_Node_Str"",fileName);
      ftpletRet=ftpletContainer.onUploadUniqueEnd(request,out);
      if (ftpletRet == FtpletEnum.RET_DISCONNECT) {
        fconfig.getConnectionManager().closeConnection(handler);
        return;
      }
    }
  }
  finally {
    request.getFtpDataConnection().closeDataSocket();
  }
}",0.9929824561403509
152352,"/** 
 * Get unique file object.
 */
protected FileObject getUniqueFile(RequestHandler handler,FileObject oldFile) throws FtpException {
  FileObject newFile=oldFile;
  FileSystemView fsView=handler.getRequest().getFileSystemView();
  String fileName=newFile.getFullName();
  while (newFile.doesExist()) {
    newFile=fsView.getFileObject(fileName + '.' + System.currentTimeMillis());
  }
  return newFile;
}","/** 
 * Get unique file object.
 */
protected FileObject getUniqueFile(RequestHandler handler,FileObject oldFile) throws FtpException {
  FileObject newFile=oldFile;
  FileSystemView fsView=handler.getRequest().getFileSystemView();
  String fileName=newFile.getFullName();
  while (newFile.doesExist()) {
    newFile=fsView.getFileObject(fileName + '.' + System.currentTimeMillis());
    if (newFile == null) {
      break;
    }
  }
  return newFile;
}",0.9093023255813952
152353,"/** 
 * Parse argument.
 */
private boolean parse(String argument){
  String lsFileName=""String_Node_Str"";
  String options=""String_Node_Str"";
  String pattern=""String_Node_Str"";
  if (argument != null) {
    argument=argument.trim();
    StringBuffer optionsSb=new StringBuffer(4);
    StringTokenizer st=new StringTokenizer(argument,""String_Node_Str"");
    while (st.hasMoreTokens()) {
      String token=st.nextToken();
      if (token.charAt(0) == '-') {
        if (token.length() > 1) {
          optionsSb.append(token.substring(1));
        }
      }
 else {
        lsFileName=token;
      }
    }
    options=optionsSb.toString();
  }
  m_isAllOption=options.indexOf('a') != -1;
  m_isDetailOption=options.indexOf('l') != -1;
  if ((lsFileName.indexOf('*') == -1) && (lsFileName.indexOf('?') == -1) && (lsFileName.indexOf('[') == -1)) {
    m_pattern=null;
    m_file=lsFileName;
    return true;
  }
  try {
    int slashIndex=lsFileName.lastIndexOf('/');
    if (slashIndex == -1) {
      pattern=lsFileName;
      lsFileName=""String_Node_Str"";
    }
 else     if (slashIndex != (lsFileName.length() - 1)) {
      pattern=lsFileName.substring(slashIndex + 1);
      lsFileName=lsFileName.substring(0,slashIndex + 1);
    }
 else {
      return false;
    }
    FileObject file=m_fileSystemView.getFileObject(lsFileName);
    if (file == null) {
      return false;
    }
    if (!file.isDirectory()) {
      return false;
    }
  }
 catch (  FtpException ex) {
    ex.printStackTrace();
    return false;
  }
  m_file=lsFileName;
  if (""String_Node_Str"".equals(pattern) || ""String_Node_Str"".equals(pattern)) {
    m_pattern=null;
  }
 else {
    m_pattern=pattern;
  }
  return true;
}","/** 
 * Parse argument.
 */
private boolean parse(String argument){
  String lsFileName=""String_Node_Str"";
  String options=""String_Node_Str"";
  String pattern=""String_Node_Str"";
  if (argument != null) {
    argument=argument.trim();
    StringBuffer optionsSb=new StringBuffer(4);
    StringBuffer lsFileNameSb=new StringBuffer(16);
    StringTokenizer st=new StringTokenizer(argument,""String_Node_Str"",true);
    while (st.hasMoreTokens()) {
      String token=st.nextToken();
      if (lsFileNameSb.length() != 0) {
        lsFileNameSb.append(token);
      }
 else       if (token.equals(""String_Node_Str"")) {
        continue;
      }
 else       if (token.charAt(0) == '-') {
        if (token.length() > 1) {
          optionsSb.append(token.substring(1));
        }
      }
 else {
        lsFileNameSb.append(token);
      }
    }
    if (lsFileNameSb.length() != 0) {
      lsFileName=lsFileNameSb.toString();
    }
    options=optionsSb.toString();
  }
  m_isAllOption=options.indexOf('a') != -1;
  m_isDetailOption=options.indexOf('l') != -1;
  if ((lsFileName.indexOf('*') == -1) && (lsFileName.indexOf('?') == -1) && (lsFileName.indexOf('[') == -1)) {
    m_pattern=null;
    m_file=lsFileName;
    return true;
  }
  try {
    int slashIndex=lsFileName.lastIndexOf('/');
    if (slashIndex == -1) {
      pattern=lsFileName;
      lsFileName=""String_Node_Str"";
    }
 else     if (slashIndex != (lsFileName.length() - 1)) {
      pattern=lsFileName.substring(slashIndex + 1);
      lsFileName=lsFileName.substring(0,slashIndex + 1);
    }
 else {
      return false;
    }
    FileObject file=m_fileSystemView.getFileObject(lsFileName);
    if (file == null) {
      return false;
    }
    if (!file.isDirectory()) {
      return false;
    }
  }
 catch (  FtpException ex) {
    ex.printStackTrace();
    return false;
  }
  m_file=lsFileName;
  if (""String_Node_Str"".equals(pattern) || ""String_Node_Str"".equals(pattern)) {
    m_pattern=null;
  }
 else {
    m_pattern=pattern;
  }
  return true;
}",0.9133010231556272
152354,"/** 
 * Equality check
 */
public boolean equals(Object obj){
  if (obj instanceof Ftplet) {
    return m_type == ((FtpletEnum)obj).m_type;
  }
  return false;
}","/** 
 * Equality check
 */
public boolean equals(Object obj){
  if (obj instanceof FtpletEnum) {
    return m_type == ((FtpletEnum)obj).m_type;
  }
  return false;
}",0.9877300613496932
152355,"/** 
 * Save user.
 */
private void save(){
  String userName=nameTxt.getText().trim();
  if (userName.equals(""String_Node_Str"")) {
    GuiUtils.showErrorMessage(this,""String_Node_Str"");
    return;
  }
  try {
    BaseUser user=new BaseUser();
    user.setName(userName);
    if (setPassword(user)) {
      user.setHomeDirectory(new File(directoryTxt.getText()).getCanonicalPath());
      user.setEnabled(enabledChkBox.isSelected());
      user.setWritePermission(writeChkBox.isSelected());
      user.setMaxIdleTime(getMaxIdleTime(uploadLst));
      user.setMaxUploadRate(getBytesTransferRate(uploadLst));
      user.setMaxDownloadRate(getBytesTransferRate(downloadLst));
      fconfig.getUserManager().save(user);
      refresh(fconfig);
      GuiUtils.showInformationMessage(this,""String_Node_Str"" + user.getName());
    }
  }
 catch (  Exception ex) {
    GuiUtils.showErrorMessage(this,ex.getMessage());
  }
}","/** 
 * Save user.
 */
private void save(){
  String userName=nameTxt.getText().trim();
  if (userName.equals(""String_Node_Str"")) {
    GuiUtils.showErrorMessage(this,""String_Node_Str"");
    return;
  }
  try {
    BaseUser user=new BaseUser();
    user.setName(userName);
    if (setPassword(user)) {
      user.setHomeDirectory(directoryTxt.getText());
      user.setEnabled(enabledChkBox.isSelected());
      user.setWritePermission(writeChkBox.isSelected());
      user.setMaxIdleTime(getMaxIdleTime(idleLst));
      user.setMaxUploadRate(getBytesTransferRate(uploadLst));
      user.setMaxDownloadRate(getBytesTransferRate(downloadLst));
      fconfig.getUserManager().save(user);
      refresh(fconfig);
      GuiUtils.showInformationMessage(this,""String_Node_Str"" + user.getName());
    }
  }
 catch (  Exception ex) {
    GuiUtils.showErrorMessage(this,ex.getMessage());
  }
}",0.9783212896053364
152356,"/** 
 * Refresh the ftp configuration
 */
public void refresh(IFtpConfig ftpConfig){
  fconfig=ftpConfig;
  int tabCount=tabbedPane.getTabCount();
  for (int i=0; i < tabCount; i++) {
    Component tabComp=tabbedPane.getComponentAt(i);
    if ((tabComp != null) && (tabComp != defaultComp)) {
      ((SpyPanel)tabComp).closePane();
      tabbedPane.remove(tabComp);
    }
  }
  tabbedPane.addTab(""String_Node_Str"",defaultComp);
}","/** 
 * Refresh the ftp configuration
 */
public void refresh(IFtpConfig ftpConfig){
  fconfig=ftpConfig;
  int tabCount=tabbedPane.getTabCount();
  for (int i=tabCount; --i >= 0; ) {
    Component tabComp=tabbedPane.getComponentAt(i);
    if ((tabComp != null) && (tabComp != defaultComp)) {
      ((SpyPanel)tabComp).closePane();
    }
  }
}",0.844559585492228
152357,"/** 
 * <code>ABOR &lt;CRLF&gt;</code><br> This command tells the server to abort the previous FTP service command and any associated transfer of data. No action is to be taken if the previous command has been completed (including data transfer).  The control connection is not to be closed by the server, but the data connection must be closed. Current implementation does not do anything. As here data transfers are not multi-threaded.
 */
public void doABOR(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  mDataConnection.closeDataSocket();
  out.write(mFtpStatus.getResponse(226,request,mUser,null));
}","/** 
 * <code>ABOR &lt;CRLF&gt;</code><br> This command tells the server to abort the previous FTP service command and any associated transfer of data. No action is to be taken if the previous command has been completed (including data transfer).  The control connection is not to be closed by the server, but the data connection must be closed. Current implementation does not do anything. As here data transfers are not multi-threaded.
 */
public void doABOR(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  mDataConnection.closeDataSocket();
  out.write(mFtpStatus.getResponse(225,request,mUser,null));
}",0.9984152139461172
152358,"/** 
 * <code>CWD  &lt;SP&gt; &lt;pathname&gt; &lt;CRLF&gt;</code><br> This command allows the user to work with a different directory for file storage or retrieval without altering his login or accounting information.  Transfer parameters are similarly unchanged.  The argument is a pathname specifying a directory.
 */
public void doCWD(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  String dirName=""String_Node_Str"";
  if (request.hasArgument()) {
    dirName=request.getArgument();
  }
  if (mUser.getVirtualDirectory().changeDirectory(dirName)) {
    String args[]={mUser.getVirtualDirectory().getCurrentDirectory()};
    out.write(mFtpStatus.getResponse(200,request,mUser,args));
  }
 else {
    out.write(mFtpStatus.getResponse(431,request,mUser,null));
  }
}","/** 
 * <code>CWD  &lt;SP&gt; &lt;pathname&gt; &lt;CRLF&gt;</code><br> This command allows the user to work with a different directory for file storage or retrieval without altering his login or accounting information.  Transfer parameters are similarly unchanged.  The argument is a pathname specifying a directory.
 */
public void doCWD(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  String dirName=""String_Node_Str"";
  if (request.hasArgument()) {
    dirName=request.getArgument();
  }
  if (mUser.getVirtualDirectory().changeDirectory(dirName)) {
    String args[]={mUser.getVirtualDirectory().getCurrentDirectory()};
    out.write(mFtpStatus.getResponse(250,request,mUser,args));
  }
 else {
    out.write(mFtpStatus.getResponse(550,request,mUser,null));
  }
}",0.9949494949494948
152359,"/** 
 * <code>DELE &lt;SP&gt; &lt;pathname&gt; &lt;CRLF&gt;</code><br> This command causes the file specified in the pathname to be deleted at the server site.
 */
public void doDELE(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  if (!request.hasArgument()) {
    out.write(mFtpStatus.getResponse(501,request,mUser,null));
    return;
  }
  String fileName=request.getArgument();
  fileName=mUser.getVirtualDirectory().getAbsoluteName(fileName);
  String physicalName=mUser.getVirtualDirectory().getPhysicalName(fileName);
  File requestedFile=new File(physicalName);
  String[] args={fileName};
  if (!mUser.getVirtualDirectory().hasWritePermission(physicalName,true)) {
    out.write(mFtpStatus.getResponse(450,request,mUser,args));
    return;
  }
  if (requestedFile.delete()) {
    out.write(mFtpStatus.getResponse(250,request,mUser,args));
    mConfig.getStatistics().setDelete(requestedFile,mUser);
  }
 else {
    out.write(mFtpStatus.getResponse(450,request,mUser,args));
  }
}","/** 
 * <code>DELE &lt;SP&gt; &lt;pathname&gt; &lt;CRLF&gt;</code><br> This command causes the file specified in the pathname to be deleted at the server site.
 */
public void doDELE(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  if (!request.hasArgument()) {
    out.write(mFtpStatus.getResponse(501,request,mUser,null));
    return;
  }
  String fileName=request.getArgument();
  fileName=mUser.getVirtualDirectory().getAbsoluteName(fileName);
  String physicalName=mUser.getVirtualDirectory().getPhysicalName(fileName);
  File requestedFile=new File(physicalName);
  String[] args={fileName};
  if (!(requestedFile.exists() && requestedFile.isFile())) {
    out.write(mFtpStatus.getResponse(550,request,mUser,args));
    return;
  }
  if (!mUser.getVirtualDirectory().hasWritePermission(physicalName,true)) {
    out.write(mFtpStatus.getResponse(450,request,mUser,args));
    return;
  }
  if (requestedFile.delete()) {
    out.write(mFtpStatus.getResponse(250,request,mUser,args));
    mConfig.getStatistics().setDelete(requestedFile,mUser);
  }
 else {
    out.write(mFtpStatus.getResponse(450,request,mUser,args));
  }
}",0.9353049907578558
152360,"/** 
 * <code>CDUP &lt;CRLF&gt;</code><br> This command is a special case of CWD, and is included to simplify the implementation of programs for transferring directory trees between operating systems having different syntaxes for naming the parent directory.  The reply codes shall be identical to the reply codes of CWD.
 */
public void doCDUP(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  if (mUser.getVirtualDirectory().changeDirectory(""String_Node_Str"")) {
    String args[]={mUser.getVirtualDirectory().getCurrentDirectory()};
    out.write(mFtpStatus.getResponse(200,request,mUser,args));
  }
 else {
    out.write(mFtpStatus.getResponse(431,request,mUser,null));
  }
}","/** 
 * <code>CDUP &lt;CRLF&gt;</code><br> This command is a special case of CWD, and is included to simplify the implementation of programs for transferring directory trees between operating systems having different syntaxes for naming the parent directory.  The reply codes shall be identical to the reply codes of CWD.
 */
public void doCDUP(FtpRequest request,FtpWriter out) throws IOException {
  resetState();
  if (mUser.getVirtualDirectory().changeDirectory(""String_Node_Str"")) {
    String args[]={mUser.getVirtualDirectory().getCurrentDirectory()};
    out.write(mFtpStatus.getResponse(250,request,mUser,args));
  }
 else {
    out.write(mFtpStatus.getResponse(550,request,mUser,null));
  }
}",0.9943019943019944
152361,"/** 
 * Get <code>BufferedReader</code>.
 */
public static BufferedReader getBufferedReader(Reader rd){
  BufferedReader br=null;
  if (br instanceof java.io.BufferedReader) {
    br=(BufferedReader)rd;
  }
 else {
    br=new BufferedReader(rd);
  }
  return br;
}","/** 
 * Get <code>BufferedReader</code>.
 */
public static BufferedReader getBufferedReader(Reader rd){
  BufferedReader br=null;
  if (rd instanceof java.io.BufferedReader) {
    br=(BufferedReader)rd;
  }
 else {
    br=new BufferedReader(rd);
  }
  return br;
}",0.9924242424242424
152362,"@Override public void afterCompletion(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex) throws Exception {
  getSpringFacesContext().release();
}","@Override public void afterCompletion(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex) throws Exception {
  SpringFacesContextImpl context=getSpringFacesContext(false);
  if (context != null) {
    context.release();
  }
}",0.7990867579908676
152363,"/** 
 * Returns the   {@link SpringFacesContextImpl}.
 * @return the {@link SpringFacesContextImpl}
 */
private SpringFacesContextImpl getSpringFacesContext(){
  SpringFacesContext springFacesContext=SpringFacesContext.getCurrentInstance(true);
  Assert.isInstanceOf(SpringFacesContextImpl.class,springFacesContext,""String_Node_Str"");
  return (SpringFacesContextImpl)springFacesContext;
}","/** 
 * Returns the   {@link SpringFacesContextImpl}.
 * @return the {@link SpringFacesContextImpl}
 */
private SpringFacesContextImpl getSpringFacesContext(boolean required){
  SpringFacesContext springFacesContext=SpringFacesContext.getCurrentInstance(required);
  if (springFacesContext == null) {
    return null;
  }
  Assert.isInstanceOf(SpringFacesContextImpl.class,springFacesContext,""String_Node_Str"");
  return (SpringFacesContextImpl)springFacesContext;
}",0.9005847953216374
152364,"public ContactLocaleUtilsBase(LocaleSet locales){
  mUsePinyinTransliterator=locales.shouldPreferSimplifiedChinese();
  final ArraySet<Locale> addedLocales=new ArraySet<>();
  AlphabeticIndex ai=new AlphabeticIndex(locales.getPrimaryLocale()).setMaxLabelCount(300);
  addedLocales.add(locales.getPrimaryLocale());
  final LocaleList localeList=locales.getAllLocales();
  for (int i=0; i < localeList.size(); i++) {
    addLabels(ai,localeList.get(i),addedLocales);
  }
  for (int i=0; i < sDefaultLabelLocales.length; i++) {
    addLabels(ai,sDefaultLabelLocales[i],addedLocales);
  }
  mAlphabeticIndex=ai.buildImmutableIndex();
  mAlphabeticIndexBucketCount=mAlphabeticIndex.getBucketCount();
  mNumberBucketIndex=mAlphabeticIndexBucketCount - 1;
}","public ContactLocaleUtilsBase(LocaleSet systemLocales){
  mUsePinyinTransliterator=systemLocales.shouldPreferSimplifiedChinese();
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  final List<Locale> locales=getLocalesForBuckets(systemLocales);
  AlphabeticIndex ai=new AlphabeticIndex(locales.get(0)).setMaxLabelCount(300);
  for (int i=1; i < locales.size(); i++) {
    ai.addLabels(locales.get(i));
  }
  mAlphabeticIndex=ai.buildImmutableIndex();
  mAlphabeticIndexBucketCount=mAlphabeticIndex.getBucketCount();
  mNumberBucketIndex=mAlphabeticIndexBucketCount - 1;
  if (DEBUG) {
    final StringBuilder labels=new StringBuilder();
    String sep=""String_Node_Str"";
    for (int i=0; i < mAlphabeticIndexBucketCount; i++) {
      labels.append(sep);
      labels.append(mAlphabeticIndex.getBucket(i).getLabel());
      sep=""String_Node_Str"";
    }
    Log.d(TAG,""String_Node_Str"" + labels + ""String_Node_Str"");
  }
}",0.3020895522388059
152365,"public static synchronized void setLocales(LocaleSet locales){
  if (sSingleton == null || !sSingleton.isLocale(locales)) {
    sSingleton=new ContactLocaleUtils(locales);
  }
}","public static synchronized void setLocales(LocaleSet locales){
  if (sSingleton == null || !sSingleton.isLocale(locales)) {
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + locales);
    }
    sSingleton=new ContactLocaleUtils(locales);
  }
}",0.8368794326241135
152366,"/** 
 * Verifies that the contacts database is properly configured for the current locale. If not, changes the database locale to the current locale using an asynchronous task. This needs to be done asynchronously because the process involves rebuilding large data structures (name lookup, sort keys), which can take minutes on a large set of contacts.
 */
protected void updateLocaleInBackground(){
  if (mProviderStatus == STATUS_CHANGING_LOCALE) {
    return;
  }
  final LocaleSet currentLocales=mCurrentLocales;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getContext());
  if (!needsToUpdateLocaleData(prefs,currentLocales,mContactsHelper,mProfileHelper)) {
    return;
  }
  int providerStatus=mProviderStatus;
  setProviderStatus(STATUS_CHANGING_LOCALE);
  mContactsHelper.setLocale(currentLocales);
  mProfileHelper.setLocale(currentLocales);
  mSearchIndexManager.updateIndex(true);
  prefs.edit().putString(PREF_LOCALE,currentLocales.toString()).commit();
  setProviderStatus(providerStatus);
}","/** 
 * Verifies that the contacts database is properly configured for the current locale. If not, changes the database locale to the current locale using an asynchronous task. This needs to be done asynchronously because the process involves rebuilding large data structures (name lookup, sort keys), which can take minutes on a large set of contacts.
 */
protected void updateLocaleInBackground(){
  if (mProviderStatus == STATUS_CHANGING_LOCALE) {
    return;
  }
  final LocaleSet currentLocales=mCurrentLocales;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getContext());
  if (!needsToUpdateLocaleData(prefs,currentLocales,mContactsHelper,mProfileHelper)) {
    return;
  }
  int providerStatus=mProviderStatus;
  setProviderStatus(STATUS_CHANGING_LOCALE);
  mContactsHelper.setLocale(currentLocales);
  mProfileHelper.setLocale(currentLocales);
  mSearchIndexManager.updateIndex(true);
  prefs.edit().putString(PREF_LOCALE,currentLocales.toString()).commit();
  setProviderStatus(providerStatus);
  if (!mCurrentLocales.isCurrent()) {
    scheduleBackgroundTask(BACKGROUND_TASK_CHANGE_LOCALE);
  }
}",0.9536058796508956
152367,"public ContactLocaleUtilsBase(LocaleSet systemLocales){
  mUsePinyinTransliterator=systemLocales.shouldPreferSimplifiedChinese();
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  final List<Locale> locales=getLocalesForBuckets(systemLocales);
  AlphabeticIndex ai=new AlphabeticIndex(locales.get(0)).setMaxLabelCount(300);
  for (int i=1; i < locales.size(); i++) {
    ai.addLabels(locales.get(i));
  }
  mAlphabeticIndex=ai.buildImmutableIndex();
  mAlphabeticIndexBucketCount=mAlphabeticIndex.getBucketCount();
  mNumberBucketIndex=mAlphabeticIndexBucketCount - 1;
  if (DEBUG) {
    final StringBuilder labels=new StringBuilder();
    String sep=""String_Node_Str"";
    for (int i=0; i < mAlphabeticIndexBucketCount; i++) {
      labels.append(sep);
      labels.append(mAlphabeticIndex.getBucket(i).getLabel());
      sep=""String_Node_Str"";
    }
    Log.d(TAG,""String_Node_Str"" + labels + ""String_Node_Str"");
  }
}","public ContactLocaleUtilsBase(LocaleSet systemLocales){
  mUsePinyinTransliterator=systemLocales.shouldPreferSimplifiedChinese();
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  final List<Locale> locales=getLocalesForBuckets(systemLocales);
  AlphabeticIndex ai=new AlphabeticIndex(locales.get(0)).setMaxLabelCount(300);
  for (int i=1; i < locales.size(); i++) {
    ai.addLabels(locales.get(i));
  }
  mAlphabeticIndex=ai.buildImmutableIndex();
  mAlphabeticIndexBucketCount=mAlphabeticIndex.getBucketCount();
  mNumberBucketIndex=mAlphabeticIndexBucketCount - 1;
  if (DEBUG) {
    dumpIndex(mAlphabeticIndex);
  }
}",0.770618556701031
152368,"static List<Locale> getLocalesForBuckets(LocaleSet systemLocales){
  final LocaleList localeList=systemLocales.getAllLocales();
  final List<Locale> locales=new ArrayList<>(localeList.size() + sDefaultLabelLocales.length);
  for (int i=0; i < localeList.size(); i++) {
    locales.add(localeList.get(i));
  }
  for (int i=0; i < sDefaultLabelLocales.length; i++) {
    locales.add(sDefaultLabelLocales[i]);
  }
  final List<Locale> ret=new ArrayList<>(locales.size());
  boolean allowChinese=true;
  for (int i=0; i < locales.size(); i++) {
    final Locale locale=locales.get(i);
    if (ret.contains(locale)) {
      continue;
    }
    if (LocaleSet.isLanguageChinese(locale)) {
      if (!allowChinese) {
        continue;
      }
      allowChinese=false;
    }
    if (LocaleSet.isLanguageJapanese(locale)) {
      allowChinese=false;
    }
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + locale);
    }
    ret.add(locale);
  }
  return ret;
}","static List<Locale> getLocalesForBuckets(LocaleSet systemLocales){
  final LocaleList localeList=systemLocales.getAllLocales();
  final List<Locale> locales=new ArrayList<>(localeList.size() + sDefaultLabelLocales.length);
  for (int i=0; i < localeList.size(); i++) {
    locales.add(localeList.get(i));
  }
  for (int i=0; i < sDefaultLabelLocales.length; i++) {
    locales.add(sDefaultLabelLocales[i]);
  }
  final List<Locale> ret=new ArrayList<>(locales.size());
  boolean allowChinese=true;
  for (int i=0; i < locales.size(); i++) {
    final Locale locale=locales.get(i);
    if (ret.contains(locale)) {
      continue;
    }
    if (LocaleSet.isLanguageChinese(locale)) {
      if (!allowChinese) {
        continue;
      }
      allowChinese=false;
    }
    if (LocaleSet.isLanguageJapanese(locale)) {
      allowChinese=false;
    }
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + locale.toLanguageTag());
    }
    ret.add(locale);
  }
  return ret;
}",0.991692627206646
152369,"/** 
 * @return true if Japanese is found in the list before simplified Chinese.
 */
public boolean shouldPreferJapanese(){
  if (isLanguageJapanese(getPrimaryLocale())) {
    return true;
  }
  for (int i=0; i < mLocaleList.size(); i++) {
    final Locale l=mLocaleList.get(i);
    if (isLanguageJapanese(l)) {
      return true;
    }
    if (isLocaleSimplifiedChinese(l)) {
      return false;
    }
  }
  return false;
}","/** 
 * @return true if Japanese is found in the list before simplified Chinese.
 */
public boolean shouldPreferJapanese(){
  if (isLanguageJapanese(getPrimaryLocale())) {
    return true;
  }
  for (int i=0; i < mLocaleList.size(); i++) {
    final Locale l=mLocaleList.get(i);
    if (isLanguageJapanese(l)) {
      return true;
    }
    if (isLanguageChinese(l)) {
      return false;
    }
  }
  return false;
}",0.9738095238095238
152370,"public void testShouldPreferJapanese(){
  assertFalse(LocaleSet.newForTest(Locale.ENGLISH).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.JAPAN).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.ENGLISH,Locale.KOREAN,Locale.JAPAN).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.JAPAN,Locale.TRADITIONAL_CHINESE).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.JAPAN,Locale.SIMPLIFIED_CHINESE).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.TRADITIONAL_CHINESE,Locale.JAPAN).shouldPreferJapanese());
  assertFalse(LocaleSet.newForTest(Locale.SIMPLIFIED_CHINESE,Locale.JAPAN).shouldPreferJapanese());
  assertFalse(LocaleSet.newForTest(Locale.ENGLISH,Locale.SIMPLIFIED_CHINESE,Locale.JAPAN).shouldPreferJapanese());
}","public void testShouldPreferJapanese(){
  assertFalse(LocaleSet.newForTest(Locale.ENGLISH).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.JAPAN).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.ENGLISH,Locale.KOREAN,Locale.JAPAN).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.JAPAN,Locale.TRADITIONAL_CHINESE).shouldPreferJapanese());
  assertTrue(LocaleSet.newForTest(Locale.JAPAN,Locale.SIMPLIFIED_CHINESE).shouldPreferJapanese());
  assertFalse(LocaleSet.newForTest(Locale.TRADITIONAL_CHINESE,Locale.JAPAN).shouldPreferJapanese());
  assertFalse(LocaleSet.newForTest(Locale.SIMPLIFIED_CHINESE,Locale.JAPAN).shouldPreferJapanese());
  assertFalse(LocaleSet.newForTest(Locale.ENGLISH,Locale.SIMPLIFIED_CHINESE,Locale.JAPAN).shouldPreferJapanese());
}",0.9956602603843768
152371,"private int updateRawContact(SQLiteDatabase db,long rawContactId,ContentValues values,boolean callerIsSyncAdapter,boolean callerIsMetadataSyncAdapter){
  final String selection=RawContactsColumns.CONCRETE_ID + ""String_Node_Str"";
  mSelectionArgs1[0]=Long.toString(rawContactId);
  final ContactsDatabaseHelper dbHelper=mDbHelper.get();
  final boolean requestUndoDelete=flagIsClear(values,RawContacts.DELETED);
  final boolean isAccountNameChanging=values.containsKey(RawContacts.ACCOUNT_NAME);
  final boolean isAccountTypeChanging=values.containsKey(RawContacts.ACCOUNT_TYPE);
  final boolean isDataSetChanging=values.containsKey(RawContacts.DATA_SET);
  final boolean isAccountChanging=isAccountNameChanging || isAccountTypeChanging || isDataSetChanging;
  int previousDeleted=0;
  long accountId=0;
  String oldAccountType=null;
  String oldAccountName=null;
  String oldDataSet=null;
  if (requestUndoDelete || isAccountChanging) {
    Cursor cursor=db.query(RawContactsQuery.TABLE,RawContactsQuery.COLUMNS,selection,mSelectionArgs1,null,null,null);
    try {
      if (cursor.moveToFirst()) {
        previousDeleted=cursor.getInt(RawContactsQuery.DELETED);
        accountId=cursor.getLong(RawContactsQuery.ACCOUNT_ID);
        oldAccountType=cursor.getString(RawContactsQuery.ACCOUNT_TYPE);
        oldAccountName=cursor.getString(RawContactsQuery.ACCOUNT_NAME);
        oldDataSet=cursor.getString(RawContactsQuery.DATA_SET);
      }
    }
  finally {
      cursor.close();
    }
    if (isAccountChanging) {
      final ContentValues originalValues=values;
      values=new ContentValues();
      values.clear();
      values.putAll(originalValues);
      final AccountWithDataSet newAccountWithDataSet=AccountWithDataSet.get(isAccountNameChanging ? values.getAsString(RawContacts.ACCOUNT_NAME) : oldAccountName,isAccountTypeChanging ? values.getAsString(RawContacts.ACCOUNT_TYPE) : oldAccountType,isDataSetChanging ? values.getAsString(RawContacts.DATA_SET) : oldDataSet);
      accountId=dbHelper.getOrCreateAccountIdInTransaction(newAccountWithDataSet);
      values.put(RawContactsColumns.ACCOUNT_ID,accountId);
      values.remove(RawContacts.ACCOUNT_NAME);
      values.remove(RawContacts.ACCOUNT_TYPE);
      values.remove(RawContacts.DATA_SET);
    }
  }
  if (requestUndoDelete) {
    values.put(ContactsContract.RawContacts.AGGREGATION_MODE,ContactsContract.RawContacts.AGGREGATION_MODE_DEFAULT);
  }
  int count=db.update(Tables.RAW_CONTACTS,values,selection,mSelectionArgs1);
  if (count != 0) {
    final AbstractContactAggregator aggregator=mAggregator.get();
    int aggregationMode=getIntValue(values,RawContacts.AGGREGATION_MODE,RawContacts.AGGREGATION_MODE_DEFAULT);
    if (aggregationMode != RawContacts.AGGREGATION_MODE_DEFAULT) {
      aggregator.markForAggregation(rawContactId,aggregationMode,false);
    }
    if (shouldMarkMetadataDirtyForRawContact(values)) {
      mTransactionContext.get().markRawContactMetadataDirty(rawContactId,callerIsMetadataSyncAdapter);
    }
    if (flagExists(values,RawContacts.STARRED)) {
      if (!callerIsSyncAdapter) {
        updateFavoritesMembership(rawContactId,flagIsSet(values,RawContacts.STARRED));
      }
      aggregator.updateStarred(rawContactId);
      aggregator.updatePinned(rawContactId);
    }
 else {
      if (!callerIsSyncAdapter && isAccountChanging) {
        boolean starred=0 != DatabaseUtils.longForQuery(db,SELECTION_STARRED_FROM_RAW_CONTACTS,new String[]{Long.toString(rawContactId)});
        updateFavoritesMembership(rawContactId,starred);
      }
    }
    if (!callerIsSyncAdapter && isAccountChanging) {
      addAutoAddMembership(rawContactId);
    }
    if (values.containsKey(RawContacts.SOURCE_ID)) {
      aggregator.updateLookupKeyForRawContact(db,rawContactId);
    }
    if (requestUndoDelete && previousDeleted == 1) {
      mTransactionContext.get().rawContactInserted(rawContactId,accountId);
    }
    mTransactionContext.get().markRawContactChangedOrDeletedOrInserted(rawContactId);
  }
  return count;
}","private int updateRawContact(SQLiteDatabase db,long rawContactId,ContentValues values,boolean callerIsSyncAdapter,boolean callerIsMetadataSyncAdapter){
  final String selection=RawContactsColumns.CONCRETE_ID + ""String_Node_Str"";
  mSelectionArgs1[0]=Long.toString(rawContactId);
  final ContactsDatabaseHelper dbHelper=mDbHelper.get();
  final boolean requestUndoDelete=flagIsClear(values,RawContacts.DELETED);
  final boolean isAccountNameChanging=values.containsKey(RawContacts.ACCOUNT_NAME);
  final boolean isAccountTypeChanging=values.containsKey(RawContacts.ACCOUNT_TYPE);
  final boolean isDataSetChanging=values.containsKey(RawContacts.DATA_SET);
  final boolean isAccountChanging=isAccountNameChanging || isAccountTypeChanging || isDataSetChanging;
  final boolean isBackupIdChanging=values.containsKey(RawContacts.BACKUP_ID);
  int previousDeleted=0;
  long accountId=0;
  String oldAccountType=null;
  String oldAccountName=null;
  String oldDataSet=null;
  if (requestUndoDelete || isAccountChanging) {
    Cursor cursor=db.query(RawContactsQuery.TABLE,RawContactsQuery.COLUMNS,selection,mSelectionArgs1,null,null,null);
    try {
      if (cursor.moveToFirst()) {
        previousDeleted=cursor.getInt(RawContactsQuery.DELETED);
        accountId=cursor.getLong(RawContactsQuery.ACCOUNT_ID);
        oldAccountType=cursor.getString(RawContactsQuery.ACCOUNT_TYPE);
        oldAccountName=cursor.getString(RawContactsQuery.ACCOUNT_NAME);
        oldDataSet=cursor.getString(RawContactsQuery.DATA_SET);
      }
    }
  finally {
      cursor.close();
    }
    if (isAccountChanging) {
      final ContentValues originalValues=values;
      values=new ContentValues();
      values.clear();
      values.putAll(originalValues);
      final AccountWithDataSet newAccountWithDataSet=AccountWithDataSet.get(isAccountNameChanging ? values.getAsString(RawContacts.ACCOUNT_NAME) : oldAccountName,isAccountTypeChanging ? values.getAsString(RawContacts.ACCOUNT_TYPE) : oldAccountType,isDataSetChanging ? values.getAsString(RawContacts.DATA_SET) : oldDataSet);
      accountId=dbHelper.getOrCreateAccountIdInTransaction(newAccountWithDataSet);
      values.put(RawContactsColumns.ACCOUNT_ID,accountId);
      values.remove(RawContacts.ACCOUNT_NAME);
      values.remove(RawContacts.ACCOUNT_TYPE);
      values.remove(RawContacts.DATA_SET);
    }
  }
  if (requestUndoDelete) {
    values.put(ContactsContract.RawContacts.AGGREGATION_MODE,ContactsContract.RawContacts.AGGREGATION_MODE_DEFAULT);
  }
  int count=db.update(Tables.RAW_CONTACTS,values,selection,mSelectionArgs1);
  if (count != 0) {
    final AbstractContactAggregator aggregator=mAggregator.get();
    int aggregationMode=getIntValue(values,RawContacts.AGGREGATION_MODE,RawContacts.AGGREGATION_MODE_DEFAULT);
    if (aggregationMode != RawContacts.AGGREGATION_MODE_DEFAULT) {
      aggregator.markForAggregation(rawContactId,aggregationMode,false);
    }
    if (shouldMarkMetadataDirtyForRawContact(values)) {
      mTransactionContext.get().markRawContactMetadataDirty(rawContactId,callerIsMetadataSyncAdapter);
    }
    if (isBackupIdChanging) {
      Cursor cursor=db.query(Tables.RAW_CONTACTS,new String[]{RawContactsColumns.CONCRETE_METADATA_DIRTY},selection,mSelectionArgs1,null,null,null);
      int metadataDirty=0;
      try {
        if (cursor.moveToFirst()) {
          metadataDirty=cursor.getInt(0);
        }
      }
  finally {
        cursor.close();
      }
      if (metadataDirty == 1) {
        mTransactionContext.get().markRawContactMetadataDirty(rawContactId,callerIsMetadataSyncAdapter);
      }
 else {
        mTransactionContext.get().markBackupIdChangedRawContact(rawContactId);
      }
    }
    if (flagExists(values,RawContacts.STARRED)) {
      if (!callerIsSyncAdapter) {
        updateFavoritesMembership(rawContactId,flagIsSet(values,RawContacts.STARRED));
      }
      aggregator.updateStarred(rawContactId);
      aggregator.updatePinned(rawContactId);
    }
 else {
      if (!callerIsSyncAdapter && isAccountChanging) {
        boolean starred=0 != DatabaseUtils.longForQuery(db,SELECTION_STARRED_FROM_RAW_CONTACTS,new String[]{Long.toString(rawContactId)});
        updateFavoritesMembership(rawContactId,starred);
      }
    }
    if (!callerIsSyncAdapter && isAccountChanging) {
      addAutoAddMembership(rawContactId);
    }
    if (values.containsKey(RawContacts.SOURCE_ID)) {
      aggregator.updateLookupKeyForRawContact(db,rawContactId);
    }
    if (requestUndoDelete && previousDeleted == 1) {
      mTransactionContext.get().rawContactInserted(rawContactId,accountId);
    }
    mTransactionContext.get().markRawContactChangedOrDeletedOrInserted(rawContactId);
  }
  return count;
}",0.9218248509857864
152372,"private void flushTransactionalChanges(){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + (inProfileMode() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  for (  long rawContactId : mTransactionContext.get().getInsertedRawContactIds()) {
    mDbHelper.get().updateRawContactDisplayName(db,rawContactId);
    mAggregator.get().onRawContactInsert(mTransactionContext.get(),db,rawContactId);
    if (mMetadataSyncEnabled) {
      updateMetadataOnRawContactInsert(db,rawContactId);
    }
  }
  final Set<Long> dirtyRawContacts=mTransactionContext.get().getDirtyRawContactIds();
  if (!dirtyRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_DIRTY_SQL);
    appendIds(mSb,dirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> updatedRawContacts=mTransactionContext.get().getUpdatedRawContactIds();
  if (!updatedRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_VERSION_SQL);
    appendIds(mSb,updatedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> metadataDirtyRawContacts=mTransactionContext.get().getMetadataDirtyRawContactIds();
  if (!metadataDirtyRawContacts.isEmpty() && mMetadataSyncEnabled) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_METADATA_DIRTY_SQL);
    appendIds(mSb,metadataDirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
    mSyncToMetadataNetWork=true;
  }
  final Set<Long> changedRawContacts=mTransactionContext.get().getChangedRawContactIds();
  ContactsTableUtil.updateContactLastUpdateByRawContactId(db,changedRawContacts);
  if (!changedRawContacts.isEmpty() && mMetadataSyncEnabled) {
    mSb.setLength(0);
    mSb.append(UPDATE_METADATASYNC_SET_DELETED_SQL);
    appendIds(mSb,changedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
    mSyncToMetadataNetWork=true;
  }
  for (  Map.Entry<Long,Object> entry : mTransactionContext.get().getUpdatedSyncStates()) {
    long id=entry.getKey();
    if (mDbHelper.get().getSyncState().update(db,id,entry.getValue()) <= 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  mTransactionContext.get().clearExceptSearchIndexUpdates();
}","private void flushTransactionalChanges(){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + (inProfileMode() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  for (  long rawContactId : mTransactionContext.get().getInsertedRawContactIds()) {
    mDbHelper.get().updateRawContactDisplayName(db,rawContactId);
    mAggregator.get().onRawContactInsert(mTransactionContext.get(),db,rawContactId);
    if (mMetadataSyncEnabled) {
      updateMetadataOnRawContactInsert(db,rawContactId);
    }
  }
  if (mMetadataSyncEnabled) {
    for (    long rawContactId : mTransactionContext.get().getBackupIdChangedRawContacts()) {
      updateMetadataOnRawContactInsert(db,rawContactId);
    }
  }
  final Set<Long> dirtyRawContacts=mTransactionContext.get().getDirtyRawContactIds();
  if (!dirtyRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_DIRTY_SQL);
    appendIds(mSb,dirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> updatedRawContacts=mTransactionContext.get().getUpdatedRawContactIds();
  if (!updatedRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_VERSION_SQL);
    appendIds(mSb,updatedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> metadataDirtyRawContacts=mTransactionContext.get().getMetadataDirtyRawContactIds();
  if (!metadataDirtyRawContacts.isEmpty() && mMetadataSyncEnabled) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_METADATA_DIRTY_SQL);
    appendIds(mSb,metadataDirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
    mSyncToMetadataNetWork=true;
  }
  final Set<Long> changedRawContacts=mTransactionContext.get().getChangedRawContactIds();
  ContactsTableUtil.updateContactLastUpdateByRawContactId(db,changedRawContacts);
  if (!changedRawContacts.isEmpty() && mMetadataSyncEnabled) {
    mSb.setLength(0);
    mSb.append(UPDATE_METADATASYNC_SET_DELETED_SQL);
    appendIds(mSb,changedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
    mSyncToMetadataNetWork=true;
  }
  for (  Map.Entry<Long,Object> entry : mTransactionContext.get().getUpdatedSyncStates()) {
    long id=entry.getKey();
    if (mDbHelper.get().getSyncState().update(db,id,entry.getValue()) <= 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  mTransactionContext.get().clearExceptSearchIndexUpdates();
}",0.9611551759202764
152373,"public void clearExceptSearchIndexUpdates(){
  mInsertedRawContactsAccounts=null;
  mUpdatedRawContacts=null;
  mUpdatedSyncStates=null;
  mDirtyRawContacts=null;
  mMetadataDirtyRawContacts=null;
  mChangedRawContacts=null;
}","public void clearExceptSearchIndexUpdates(){
  mInsertedRawContactsAccounts=null;
  mUpdatedRawContacts=null;
  mUpdatedSyncStates=null;
  mDirtyRawContacts=null;
  mMetadataDirtyRawContacts=null;
  mChangedRawContacts=null;
  mBackupIdChangedRawContacts=null;
}",0.9262295081967212
152374,"private void upgradeToVersion1101(SQLiteDatabase db){
  final SQLiteStatement update=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.HASH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
  final String selection=Data.HASH_ID + ""String_Node_Str"";
  final Cursor c=db.query(Tables.DATA,new String[]{Data._ID,Data.DATA1,Data.DATA2,Data.DATA15},selection,null,null,null,null);
  try {
    while (c.moveToNext()) {
      final long dataId=c.getLong(0);
      final String data1=c.getString(1);
      final String data2=c.getString(2);
      final byte[] data15=c.getBlob(3);
      final String hashId=generateHashId(data1,data2,data15);
      if (!TextUtils.isEmpty(hashId)) {
        update.bindString(1,hashId);
        update.bindLong(2,dataId);
        update.execute();
      }
    }
  }
  finally {
    c.close();
  }
}","public void upgradeToVersion1101(SQLiteDatabase db){
  final SQLiteStatement update=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.HASH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
  final Cursor c=db.query(Tables.DATA,new String[]{Data._ID,Data.DATA1,Data.DATA2,Data.DATA15},null,null,null,null,Data._ID);
  try {
    while (c.moveToNext()) {
      final long dataId=c.getLong(0);
      final String data1=c.getString(1);
      final String data2=c.getString(2);
      final byte[] data15=c.getBlob(3);
      final String hashId=generateHashId(data1,data2,data15);
      if (!TextUtils.isEmpty(hashId)) {
        update.bindString(1,hashId);
        update.bindLong(2,dataId);
        update.execute();
      }
    }
  }
  finally {
    c.close();
  }
}",0.9246290801186944
152375,"@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  final SQLiteDatabase db=mDbHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    final int matchedUriId=sURIMatcher.match(uri);
switch (matchedUriId) {
case SYNC_STATE:
      final long accountId=replaceAccountInfoByAccountId(uri,values);
    values.remove(MetadataSyncColumns.ACCOUNT_ID);
  final String selectionByAccountId=MetadataSyncStateColumns.ACCOUNT_ID + ""String_Node_Str"";
final String[] args=new String[1];
args[0]=String.valueOf(accountId);
db.update(Tables.METADATA_SYNC_STATE,values,selectionByAccountId,args);
db.setTransactionSuccessful();
return 1;
default :
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
}
  finally {
db.endTransaction();
}
}","@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  final SQLiteDatabase db=mDbHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    final int matchedUriId=sURIMatcher.match(uri);
switch (matchedUriId) {
case SYNC_STATE:
      final Long accountId=replaceAccountInfoByAccountId(uri,values);
    if (accountId == null) {
      throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
    }
  values.put(MetadataSyncColumns.ACCOUNT_ID,accountId);
db.replace(Tables.METADATA_SYNC_STATE,null,values);
db.setTransactionSuccessful();
return 1;
default :
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
}
  finally {
db.endTransaction();
}
}",0.7702020202020202
152376,"/** 
 * Insert or update a non-deleted entry to MetadataSync table, and also parse the data column to update related tables for the raw contact. Returns new upserted metadataSyncId.
 */
private long updateOrInsertDataToMetadataSync(SQLiteDatabase db,Uri uri,ContentValues values){
  final int matchUri=sURIMatcher.match(uri);
  if (matchUri != METADATA_SYNC) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
  }
  Integer deleted=values.getAsInteger(MetadataSync.DELETED);
  if (deleted != null && deleted != 0) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"" + values.toString(),uri));
  }
  final String data=values.getAsString(MetadataSync.DATA);
  if (TextUtils.isEmpty(data)) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
  }
  final Long accountId=replaceAccountInfoByAccountId(uri,values);
  final String rawContactBackupId=values.getAsString(MetadataSync.RAW_CONTACT_BACKUP_ID);
  deleted=0;
  if (accountId == null || rawContactBackupId == null) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"" + accountId + ""String_Node_Str""+ ""String_Node_Str""+ rawContactBackupId,uri));
  }
  final long metadataSyncId=mDbHelper.upsertMetadataSync(rawContactBackupId,accountId,data,deleted);
  if (metadataSyncId <= 0) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"" + values.toString(),uri));
  }
  final MetadataEntry metadataEntry=MetadataEntryParser.parseDataToMetaDataEntry(data);
  mContactsProvider.updateFromMetaDataEntry(db,metadataEntry);
  return metadataSyncId;
}","/** 
 * Insert or update a non-deleted entry to MetadataSync table, and also parse the data column to update related tables for the raw contact. Returns new upserted metadataSyncId.
 */
private long updateOrInsertDataToMetadataSync(SQLiteDatabase db,Uri uri,ContentValues values){
  final int matchUri=sURIMatcher.match(uri);
  if (matchUri != METADATA_SYNC) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
  }
  Integer deleted=values.getAsInteger(MetadataSync.DELETED);
  if (deleted != null && deleted != 0) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"" + values.toString(),uri));
  }
  final String data=values.getAsString(MetadataSync.DATA);
  if (TextUtils.isEmpty(data)) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
  }
  final Long accountId=replaceAccountInfoByAccountId(uri,values);
  final String rawContactBackupId=values.getAsString(MetadataSync.RAW_CONTACT_BACKUP_ID);
  deleted=0;
  if (accountId == null) {
    return 0;
  }
  if (rawContactBackupId == null) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"" + accountId + ""String_Node_Str""+ ""String_Node_Str""+ rawContactBackupId,uri));
  }
  final long metadataSyncId=mDbHelper.upsertMetadataSync(rawContactBackupId,accountId,data,deleted);
  if (metadataSyncId <= 0) {
    throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"" + values.toString(),uri));
  }
  final MetadataEntry metadataEntry=MetadataEntryParser.parseDataToMetaDataEntry(data);
  mContactsProvider.updateFromMetaDataEntry(db,metadataEntry);
  return metadataSyncId;
}",0.9905100830367736
152377,"private void upgradeToVersion1101(SQLiteDatabase db){
  final SQLiteStatement update=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.HASH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
  final String selection=Data.HASH_ID + ""String_Node_Str"";
  final Cursor c=db.query(Tables.DATA,new String[]{Data._ID,Data.DATA1,Data.DATA2,Data.DATA15},selection,null,null,null,null);
  try {
    while (c.moveToNext()) {
      final long dataId=c.getLong(0);
      final String data1=c.getString(1);
      final String data2=c.getString(2);
      final byte[] data15=c.getBlob(3);
      final String hashId=generateHashId(data1,data2,data15);
      if (!TextUtils.isEmpty(hashId)) {
        update.bindString(1,hashId);
        update.bindLong(2,dataId);
        update.execute();
      }
    }
  }
  finally {
    c.close();
  }
}","public void upgradeToVersion1101(SQLiteDatabase db){
  final SQLiteStatement update=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.HASH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
  final Cursor c=db.query(Tables.DATA,new String[]{Data._ID,Data.DATA1,Data.DATA2,Data.DATA15},null,null,null,null,Data._ID);
  try {
    while (c.moveToNext()) {
      final long dataId=c.getLong(0);
      final String data1=c.getString(1);
      final String data2=c.getString(2);
      final byte[] data15=c.getBlob(3);
      final String hashId=generateHashId(data1,data2,data15);
      if (!TextUtils.isEmpty(hashId)) {
        update.bindString(1,hashId);
        update.bindLong(2,dataId);
        update.execute();
      }
    }
  }
  finally {
    c.close();
  }
}",0.9246290801186944
152378,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    List<MatchScore> bestMatchesWithoutDuplicateContactIds=new ArrayList<>();
    Set<Long> contactIds=new HashSet<>();
    for (    MatchScore bestMatch : bestMatches) {
      long cid=bestMatch.getContactId();
      if (!contactIds.contains(cid)) {
        bestMatchesWithoutDuplicateContactIds.add(bestMatch);
        contactIds.add(cid);
      }
    }
    return queryMatchingContacts(qb,db,projection,bestMatchesWithoutDuplicateContactIds,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.7470198675496689
152379,"public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertSuggestions(contactId1,contactId2,contactId3);
}","public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId1,""String_Node_Str"");
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId2,""String_Node_Str"");
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long rawContactId5=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId5,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertEquals(contactId1,contactId2);
  assertSuggestions(queryContactId(rawContactId5),contactId1,contactId3);
}",0.8128291048348492
152380,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    List<MatchScore> bestMatchesWithoutDuplicateContactIds=new ArrayList<>();
    Set<Long> contactIds=new HashSet<>();
    for (    MatchScore bestMatch : bestMatches) {
      long cid=bestMatch.getContactId();
      if (!contactIds.contains(cid)) {
        bestMatchesWithoutDuplicateContactIds.add(bestMatch);
        contactIds.add(cid);
      }
    }
    return queryMatchingContacts(qb,db,projection,bestMatchesWithoutDuplicateContactIds,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.7470198675496689
152381,"public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertSuggestions(contactId1,contactId2,contactId3);
}","public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId1,""String_Node_Str"");
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId2,""String_Node_Str"");
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long rawContactId5=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId5,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertEquals(contactId1,contactId2);
  assertSuggestions(queryContactId(rawContactId5),contactId1,contactId3);
}",0.8128291048348492
152382,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    List<MatchScore> bestMatchesWithoutDuplicateContactIds=new ArrayList<>();
    Set<Long> contactIds=new HashSet<>();
    for (    MatchScore bestMatch : bestMatches) {
      long cid=bestMatch.getContactId();
      if (!contactIds.contains(cid)) {
        bestMatchesWithoutDuplicateContactIds.add(bestMatch);
        contactIds.add(cid);
      }
    }
    return queryMatchingContacts(qb,db,projection,bestMatchesWithoutDuplicateContactIds,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.7470198675496689
152383,"public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertSuggestions(contactId1,contactId2,contactId3);
}","public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId1,""String_Node_Str"");
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId2,""String_Node_Str"");
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long rawContactId5=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId5,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertEquals(contactId1,contactId2);
  assertSuggestions(queryContactId(rawContactId5),contactId1,contactId3);
}",0.8128291048348492
152384,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    List<MatchScore> bestMatchesWithoutDuplicateContactIds=new ArrayList<>();
    Set<Long> contactIds=new HashSet<>();
    for (    MatchScore bestMatch : bestMatches) {
      long cid=bestMatch.getContactId();
      if (!contactIds.contains(cid)) {
        bestMatchesWithoutDuplicateContactIds.add(bestMatch);
        contactIds.add(cid);
      }
    }
    return queryMatchingContacts(qb,db,projection,bestMatchesWithoutDuplicateContactIds,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.7470198675496689
152385,"public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertSuggestions(contactId1,contactId2,contactId3);
}","public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId1,""String_Node_Str"");
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId2,""String_Node_Str"");
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long rawContactId5=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId5,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertEquals(contactId1,contactId2);
  assertSuggestions(queryContactId(rawContactId5),contactId1,contactId3);
}",0.8128291048348492
152386,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public final Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    List<MatchScore> bestMatchesWithoutDuplicateContactIds=new ArrayList<>();
    Set<Long> contactIds=new HashSet<>();
    for (    MatchScore bestMatch : bestMatches) {
      long cid=bestMatch.getContactId();
      if (!contactIds.contains(cid)) {
        bestMatchesWithoutDuplicateContactIds.add(bestMatch);
        contactIds.add(cid);
      }
    }
    return queryMatchingContacts(qb,db,projection,bestMatchesWithoutDuplicateContactIds,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.7470198675496689
152387,"public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertSuggestions(contactId1,contactId2,contactId3);
}","public void testAggregationSuggestionsBasedOnName(){
  long rawContactId1=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId1,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId1,""String_Node_Str"");
  long rawContactId2=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId2,""String_Node_Str"",null);
  insertPhoneNumber(rawContactId2,""String_Node_Str"");
  long rawContactId3=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId3,""String_Node_Str"",null);
  long rawContactId4=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId4,""String_Node_Str"",null);
  long rawContactId5=RawContactUtil.createRawContact(mResolver);
  DataUtil.insertStructuredName(mResolver,rawContactId5,""String_Node_Str"",null);
  long contactId1=queryContactId(rawContactId1);
  long contactId2=queryContactId(rawContactId2);
  long contactId3=queryContactId(rawContactId3);
  assertEquals(contactId1,contactId2);
  assertSuggestions(queryContactId(rawContactId5),contactId1,contactId3);
}",0.8128291048348492
152388,"/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScoresForSuggestionsBasedOnDataMatches(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST));
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScoresForSuggestionsBasedOnDataMatches(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST);
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}","/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScores(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches());
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScores(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches();
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}",0.9620951068228808
152389,"/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}","/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
        for (        Long connectedRawContactId : connectedRawContactIds) {
          Long cid=matchingCandidates.getContactId(connectedRawContactId);
          if (cid != null && cid != contactId) {
            cidsNeedToBeUpdated.add(cid);
          }
        }
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}",0.9176164115923152
152390,"/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}","/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
      matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}",0.9625209770650756
152391,"/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql,null);
}","/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql);
}",0.9034974093264247
152392,"/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScoresForSuggestionsBasedOnDataMatches(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST));
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScoresForSuggestionsBasedOnDataMatches(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST);
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}","/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScores(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches());
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScores(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches();
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}",0.9620951068228808
152393,"/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}","/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
        for (        Long connectedRawContactId : connectedRawContactIds) {
          Long cid=matchingCandidates.getContactId(connectedRawContactId);
          if (cid != null && cid != contactId) {
            cidsNeedToBeUpdated.add(cid);
          }
        }
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}",0.9176164115923152
152394,"/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}","/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
      matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}",0.9625209770650756
152395,"/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql,null);
}","/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql);
}",0.9034974093264247
152396,"/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScoresForSuggestionsBasedOnDataMatches(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST));
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScoresForSuggestionsBasedOnDataMatches(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST);
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}","/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScores(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches());
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScores(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches();
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}",0.9620951068228808
152397,"/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}","/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
        for (        Long connectedRawContactId : connectedRawContactIds) {
          Long cid=matchingCandidates.getContactId(connectedRawContactId);
          if (cid != null && cid != contactId) {
            cidsNeedToBeUpdated.add(cid);
          }
        }
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}",0.9176164115923152
152398,"/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}","/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
      matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}",0.9625209770650756
152399,"/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql,null);
}","/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql);
}",0.9034974093264247
152400,"/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScoresForSuggestionsBasedOnDataMatches(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST));
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScoresForSuggestionsBasedOnDataMatches(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST);
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}","/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScores(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches());
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScores(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches();
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}",0.9620951068228808
152401,"/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}","/** 
 * Re-aggregate rawContact of   {@code rawContactId} and all the raw contacts of{@code matchingCandidates} into connected components. This only happens when a givenraw contacts cannot be joined with its best matching contacts directly. Two raw contacts are considered connected if they share at least one email address, phone number or identity. Create new contact for each connected component except the very first one that doesn't contain rawContactId of  {@code rawContactId}.
 */
private void reAggregateRawContacts(TransactionContext txContext,SQLiteDatabase db,long currentCidForRawContact,long rawContactId,long accountId,long currentContactContentsCount,RawContactMatchingCandidates matchingCandidates){
  final Set<Long> allIds=new HashSet<>();
  allIds.add(rawContactId);
  allIds.addAll(matchingCandidates.getRawContactIdSet());
  final Set<Set<Long>> connectedRawContactSets=findConnectedRawContacts(db,allIds);
  final Map<Long,Long> rawContactsToAccounts=matchingCandidates.getRawContactToAccount();
  rawContactsToAccounts.put(rawContactId,accountId);
  ContactAggregatorHelper.mergeComponentsWithDisjointAccounts(connectedRawContactSets,rawContactsToAccounts);
  breakComponentsByExceptions(db,connectedRawContactSets);
  for (  Set<Long> connectedRawContactIds : connectedRawContactSets) {
    Long contactId=null;
    Set<Long> cidsNeedToBeUpdated=new HashSet<>();
    if (connectedRawContactIds.contains(rawContactId)) {
      if (currentCidForRawContact != 0 && (currentContactContentsCount == 0) || canBeReused(db,currentCidForRawContact,connectedRawContactIds)) {
        contactId=currentCidForRawContact;
        for (        Long connectedRawContactId : connectedRawContactIds) {
          Long cid=matchingCandidates.getContactId(connectedRawContactId);
          if (cid != null && cid != contactId) {
            cidsNeedToBeUpdated.add(cid);
          }
        }
      }
 else       if (currentCidForRawContact != 0) {
        cidsNeedToBeUpdated.add(currentCidForRawContact);
      }
    }
 else {
      boolean foundContactId=false;
      for (      Long connectedRawContactId : connectedRawContactIds) {
        Long currentContactId=matchingCandidates.getContactId(connectedRawContactId);
        if (!foundContactId && currentContactId != null && canBeReused(db,currentContactId,connectedRawContactIds)) {
          contactId=currentContactId;
          foundContactId=true;
        }
 else {
          cidsNeedToBeUpdated.add(currentContactId);
        }
      }
    }
    clearSuperPrimarySetting(db,TextUtils.join(""String_Node_Str"",connectedRawContactIds));
    createContactForRawContacts(db,txContext,connectedRawContactIds,contactId);
    for (    Long cid : cidsNeedToBeUpdated) {
      long currentRcCount=0;
      if (cid != 0) {
        mRawContactCountQuery.bindLong(1,cid);
        mRawContactCountQuery.bindLong(2,0);
        currentRcCount=mRawContactCountQuery.simpleQueryForLong();
      }
      if (currentRcCount == 0) {
        ContactsTableUtil.deleteContact(db,cid);
        mAggregatedPresenceDelete.bindLong(1,cid);
        mAggregatedPresenceDelete.execute();
      }
 else {
        updateAggregateData(txContext,cid);
      }
    }
  }
}",0.9176164115923152
152402,"/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}","/** 
 * Given a specific raw contact, finds all matching raw contacts and re-aggregate them based on the matching connectivity.
 */
synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  RawContactMatcher matcher=new RawContactMatcher();
  RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates();
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
      matchingCandidates=findRawContactMatchingCandidates(db,rawContactId,candidates,matcher);
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  final int operation;
  final int candidatesCount=matchingCandidates.getCount();
  if (candidatesCount >= AGGREGATION_CONTACT_SIZE_LIMIT) {
    operation=KEEP_INTACT;
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + candidatesCount + ""String_Node_Str"");
    }
  }
 else   if (candidatesCount > 0) {
    operation=RE_AGGREGATE;
  }
 else {
    if (currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
      operation=KEEP_INTACT;
    }
 else {
      operation=CREATE_NEW_CONTACT;
    }
  }
  if (operation == KEEP_INTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"");
    }
    markAggregated(rawContactId);
  }
 else   if (operation == CREATE_NEW_CONTACT) {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId);
    }
    createContactForRawContacts(db,txContext,Sets.newHashSet(rawContactId),null);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (VERBOSE_LOGGING) {
      Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",matchingCandidates.getRawContactIdSet()));
    }
    reAggregateRawContacts(txContext,db,currentContactId,rawContactId,accountId,currentContactContentsCount,matchingCandidates);
  }
}",0.9625209770650756
152403,"/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql,null);
}","/** 
 * Find out which mime-types are shared by more than one contacts for   {@code rawContactIds}. Clear the is_super_primary settings for these mime-types.  {@code rawContactIds} should be a comma separated ID list.
 */
private void clearSuperPrimarySetting(SQLiteDatabase db,String rawContactIds){
  final String sql=""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"";
  int index=0;
  final StringBuilder mimeTypeCondition=new StringBuilder();
  mimeTypeCondition.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
  final Cursor c=db.rawQuery(sql,null);
  try {
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (index > 0) {
        mimeTypeCondition.append(',');
      }
      mimeTypeCondition.append(c.getLong((0)));
      index++;
    }
  }
  finally {
    c.close();
  }
  if (index == 0) {
    return;
  }
  String superPrimaryUpdateSql=""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ rawContactIds+ ""String_Node_Str"";
  mimeTypeCondition.append(')');
  superPrimaryUpdateSql+=mimeTypeCondition.toString();
  db.execSQL(superPrimaryUpdateSql);
}",0.9034974093264247
152404,"/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScoresForSuggestionsBasedOnDataMatches(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST));
  Set<Long> newIds=matchingCandidates.getRawContactIdSet();
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScoresForSuggestionsBasedOnDataMatches(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST);
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds=tmpIdSet;
  }
  return matchingCandidates;
}","/** 
 * Find the set of matching raw contacts for given rawContactId. Add all the raw contact candidates with matching scores > threshold to RawContactMatchingCandidates. Keep doing this for every raw contact in RawContactMatchingCandidates until is it not changing.
 */
private RawContactMatchingCandidates findRawContactMatchingCandidates(SQLiteDatabase db,long rawContactId,MatchCandidateList candidates,RawContactMatcher matcher){
  updateMatchScoresForSuggestionsBasedOnDataMatches(db,rawContactId,candidates,matcher);
  final RawContactMatchingCandidates matchingCandidates=new RawContactMatchingCandidates(matcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST));
  Set<Long> newIds=new HashSet<>();
  newIds.addAll(matchingCandidates.getRawContactIdSet());
  while (!newIds.isEmpty()) {
    final Set<Long> tmpIdSet=new HashSet<>();
    for (    long rId : newIds) {
      final RawContactMatcher rMatcher=new RawContactMatcher();
      updateMatchScoresForSuggestionsBasedOnDataMatches(db,rId,new MatchCandidateList(),rMatcher);
      List<MatchScore> newMatches=rMatcher.pickBestMatches(SCORE_THRESHOLD_SUGGEST);
      for (      MatchScore newMatch : newMatches) {
        final long newRawContactId=newMatch.getRawContactId();
        if (!matchingCandidates.getRawContactIdSet().contains(newRawContactId)) {
          tmpIdSet.add(newRawContactId);
          matchingCandidates.add(newMatch);
        }
      }
    }
    newIds.clear();
    newIds.addAll(tmpIdSet);
  }
  return matchingCandidates;
}",0.9783050847457628
152405,"/** 
 * Compute hash_id column and add it to values. If both of data1 and data2 changed, using new values to compute hash_id. If one of data1 and data2 changed, read another one from DB and compute hash_id. If both data1 and data2 are null, use data15 to compute hash_id.
 */
private void handleHashIdForUpdate(ContentValues values,long dataId){
  String data1=values.getAsString(Data.DATA1);
  String data2=values.getAsString(Data.DATA2);
  byte[] data15=values.getAsByteArray(Data.DATA15);
  if (values.containsKey(Data.DATA1) || values.containsKey(Data.DATA2) || values.containsKey(Data.DATA15)) {
    mSelectionArgs1[0]=String.valueOf(dataId);
    final Cursor c=mDbHelper.getReadableDatabase().query(Tables.DATA,HASH_INPUT_COLUMNS,Data._ID + ""String_Node_Str"",mSelectionArgs1,null,null,null);
    try {
      if (c.moveToFirst()) {
        data1=values.containsKey(Data.DATA1) ? data1 : c.getString(0);
        data2=values.containsKey(Data.DATA2) ? data2 : c.getString(1);
        data15=values.containsKey(Data.DATA15) ? data15 : c.getBlob(2);
      }
    }
  finally {
      c.close();
    }
  }
  final String hashId=mDbHelper.generateHashId(data1,data2,data15);
  if (TextUtils.isEmpty(hashId)) {
    values.putNull(Data.HASH_ID);
  }
 else {
    values.put(Data.HASH_ID,hashId);
  }
}","/** 
 * Compute hash_id column and add it to values. If both of data1 and data2 changed, using new values to compute hash_id. If one of data1 and data2 changed, read another one from DB and compute hash_id. If both data1 and data2 are null, use data15 to compute hash_id.
 */
private void handleHashIdForUpdate(ContentValues values,long dataId){
  if (values.containsKey(Data.DATA1) || values.containsKey(Data.DATA2) || values.containsKey(Data.DATA15)) {
    String data1=values.getAsString(Data.DATA1);
    String data2=values.getAsString(Data.DATA2);
    byte[] data15=values.getAsByteArray(Data.DATA15);
    mSelectionArgs1[0]=String.valueOf(dataId);
    final Cursor c=mDbHelper.getReadableDatabase().query(Tables.DATA,HASH_INPUT_COLUMNS,Data._ID + ""String_Node_Str"",mSelectionArgs1,null,null,null);
    try {
      if (c.moveToFirst()) {
        data1=values.containsKey(Data.DATA1) ? data1 : c.getString(0);
        data2=values.containsKey(Data.DATA2) ? data2 : c.getString(1);
        data15=values.containsKey(Data.DATA15) ? data15 : c.getBlob(2);
      }
    }
  finally {
      c.close();
    }
    final String hashId=mDbHelper.generateHashId(data1,data2,data15);
    if (TextUtils.isEmpty(hashId)) {
      values.putNull(Data.HASH_ID);
    }
 else {
      values.put(Data.HASH_ID,hashId);
    }
  }
}",0.9079754601226994
152406,"public void testDataInsertAndUpdate_WithHashId(){
  long rawContactId=RawContactUtil.createRawContactWithName(mResolver,""String_Node_Str"",""String_Node_Str"");
  ContentValues values=new ContentValues();
  putDataValues(values,rawContactId);
  Uri dataUri=mResolver.insert(Data.CONTENT_URI,values);
  final ContactsProvider2 cp=(ContactsProvider2)getProvider();
  final ContactsDatabaseHelper helper=cp.getDatabaseHelper(mContext);
  String data1=values.getAsString(Data.DATA1);
  String data2=values.getAsString(Data.DATA2);
  String combineString=data1 + data2;
  String hashId=helper.generateHashIdForData(combineString.getBytes());
  assertStoredValue(dataUri,Data.HASH_ID,hashId);
  String newData1=""String_Node_Str"";
  values.put(Data.DATA1,newData1);
  mResolver.update(dataUri,values,null,null);
  combineString=newData1 + data2;
  String newHashId=helper.generateHashIdForData(combineString.getBytes());
  assertStoredValue(dataUri,Data.HASH_ID,newHashId);
  values.remove(Data.DATA1);
  values.put(Data.DATA2,""String_Node_Str"");
  combineString=""String_Node_Str"";
  String testHashId=helper.generateHashIdForData(combineString.getBytes());
  mResolver.update(dataUri,values,null,null);
  assertStoredValue(dataUri,Data.HASH_ID,testHashId);
  values.put(Data.DATA1,""String_Node_Str"");
  combineString=""String_Node_Str"";
  testHashId=helper.generateHashIdForData(combineString.getBytes());
  mResolver.update(dataUri,values,null,null);
  assertStoredValue(dataUri,Data.HASH_ID,testHashId);
  values.putNull(Data.DATA1);
  values.putNull(Data.DATA2);
  byte[] data15=values.getAsByteArray(Data.DATA15);
  testHashId=helper.generateHashIdForData(data15);
  mResolver.update(dataUri,values,null,null);
  assertStoredValue(dataUri,Data.HASH_ID,testHashId);
  putDataValues(values,rawContactId);
  values.remove(Data.DATA1);
  values.remove(Data.DATA2);
  values.remove(Data.DATA15);
  Uri dataUri2=mResolver.insert(Data.CONTENT_URI,values);
  assertStoredValue(dataUri2,Data.HASH_ID,null);
}","public void testDataInsertAndUpdate_WithHashId(){
  long rawContactId=RawContactUtil.createRawContactWithName(mResolver,""String_Node_Str"",""String_Node_Str"");
  ContentValues values=new ContentValues();
  putDataValues(values,rawContactId);
  Uri dataUri=mResolver.insert(Data.CONTENT_URI,values);
  final ContactsProvider2 cp=(ContactsProvider2)getProvider();
  final ContactsDatabaseHelper helper=cp.getDatabaseHelper(mContext);
  String data1=values.getAsString(Data.DATA1);
  String data2=values.getAsString(Data.DATA2);
  String combineString=data1 + data2;
  String hashId=helper.generateHashIdForData(combineString.getBytes());
  assertStoredValue(dataUri,Data.HASH_ID,hashId);
  values.remove(Data.DATA1);
  values.remove(Data.DATA2);
  values.remove(Data.DATA15);
  values.put(Data.IS_PRIMARY,""String_Node_Str"");
  mResolver.update(dataUri,values,null,null);
  assertStoredValue(dataUri,Data.IS_PRIMARY,""String_Node_Str"");
  assertStoredValue(dataUri,Data.HASH_ID,hashId);
  values=new ContentValues();
  putDataValues(values,rawContactId);
  String newData1=""String_Node_Str"";
  values.put(Data.DATA1,newData1);
  mResolver.update(dataUri,values,null,null);
  combineString=newData1 + data2;
  String newHashId=helper.generateHashIdForData(combineString.getBytes());
  assertStoredValue(dataUri,Data.HASH_ID,newHashId);
  values.remove(Data.DATA1);
  values.put(Data.DATA2,""String_Node_Str"");
  combineString=""String_Node_Str"";
  String testHashId=helper.generateHashIdForData(combineString.getBytes());
  mResolver.update(dataUri,values,null,null);
  assertStoredValue(dataUri,Data.HASH_ID,testHashId);
  values.put(Data.DATA1,""String_Node_Str"");
  combineString=""String_Node_Str"";
  testHashId=helper.generateHashIdForData(combineString.getBytes());
  mResolver.update(dataUri,values,null,null);
  assertStoredValue(dataUri,Data.HASH_ID,testHashId);
  values.putNull(Data.DATA1);
  values.putNull(Data.DATA2);
  byte[] data15=values.getAsByteArray(Data.DATA15);
  testHashId=helper.generateHashIdForData(data15);
  mResolver.update(dataUri,values,null,null);
  assertStoredValue(dataUri,Data.HASH_ID,testHashId);
  putDataValues(values,rawContactId);
  values.remove(Data.DATA1);
  values.remove(Data.DATA2);
  values.remove(Data.DATA15);
  Uri dataUri2=mResolver.insert(Data.CONTENT_URI,values);
  assertStoredValue(dataUri2,Data.HASH_ID,null);
}",0.9161112387956792
152407,"/** 
 * Build a sql to update the last updated timestamp for contacts.
 * @param rawContactIds The raw contact ids that contacts should be updated for.
 * @return The update sql statement.
 */
private static String buildUpdateLastUpdateSql(Set<Long> rawContactIds){
  final String bindSql=MoreDatabaseUtils.buildBindArgString(rawContactIds.size());
  final String sql=""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str""+ Contacts.CONTACT_LAST_UPDATED_TIMESTAMP+ ""String_Node_Str""+ Clock.getInstance().currentTimeMillis()+ ""String_Node_Str""+ Contacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ ContactsContract.RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ContactsContract.RawContacts._ID+ ""String_Node_Str""+ bindSql+ ""String_Node_Str""+ ""String_Node_Str"";
  return sql;
}","/** 
 * Build a sql to update the last updated timestamp for contacts.
 * @param rawContactIds The raw contact ids that contacts should be updated for.
 * @return The update sql statement.
 */
private static String buildUpdateLastUpdateSql(Set<Long> rawContactIds){
  final String sql=""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str""+ Contacts.CONTACT_LAST_UPDATED_TIMESTAMP+ ""String_Node_Str""+ Clock.getInstance().currentTimeMillis()+ ""String_Node_Str""+ Contacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ ContactsContract.RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ContactsContract.RawContacts._ID+ ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",rawContactIds)+ ""String_Node_Str""+ ""String_Node_Str"";
  return sql;
}",0.9133459835547122
152408,"/** 
 * Refreshes the last updated timestamp of the contact with the current time.
 * @param db The sqlite database instance.
 * @param rawContactIds A set of raw contacts ids to refresh the contact for.
 */
public static void updateContactLastUpdate(SQLiteDatabase db,Set<Long> rawContactIds){
  if (rawContactIds.isEmpty()) {
    return;
  }
  final Long[] bindArgs=rawContactIds.toArray(new Long[rawContactIds.size()]);
  db.execSQL(buildUpdateLastUpdateSql(rawContactIds),bindArgs);
}","/** 
 * Refreshes the last updated timestamp of the contact with the current time.
 * @param db The sqlite database instance.
 * @param rawContactIds A set of raw contacts ids to refresh the contact for.
 */
public static void updateContactLastUpdate(SQLiteDatabase db,Set<Long> rawContactIds){
  if (rawContactIds.isEmpty()) {
    return;
  }
  db.execSQL(buildUpdateLastUpdateSql(rawContactIds));
}",0.9009009009009008
152409,"/** 
 * Build a bind arg where clause. <p> e.g. Calling this method with value of 4 results in: <p> ""?,?,?,?""
 * @param numArgs The number of arguments.
 * @return A string that can be used for bind args in a sql where clause.
 */
public static String buildBindArgString(int numArgs){
  final StringBuilder sb=new StringBuilder();
  String delimiter=""String_Node_Str"";
  for (int i=0; i < numArgs; i++) {
    sb.append(delimiter).append(""String_Node_Str"");
    delimiter=""String_Node_Str"";
  }
  return sb.toString();
}","/** 
 * Build a bind arg where clause. <p> e.g. Calling this method with value of 4 results in: <p> ""?,?,?,?""
 * @param numArgs The number of arguments.
 * @return A string that can be used for bind args in a sql where clause.
 */
@NeededForTesting public static String buildBindArgString(int numArgs){
  final StringBuilder sb=new StringBuilder();
  String delimiter=""String_Node_Str"";
  for (int i=0; i < numArgs; i++) {
    sb.append(delimiter).append(""String_Node_Str"");
    delimiter=""String_Node_Str"";
  }
  return sb.toString();
}",0.9829545454545454
152410,"/** 
 * Builds a DROP INDEX ddl statement for a given table and field.
 * @param table The table name that was originally used to create the index.
 * @param field The field that was originally used to create the index.
 * @return The drop index sql statement.
 */
public static String buildDropIndexSql(String table,String field){
  return ""String_Node_Str"" + buildIndexName(table,field);
}","/** 
 * Builds a DROP INDEX ddl statement for a given table and field.
 * @param table The table name that was originally used to create the index.
 * @param field The field that was originally used to create the index.
 * @return The drop index sql statement.
 */
@NeededForTesting public static String buildDropIndexSql(String table,String field){
  return ""String_Node_Str"" + buildIndexName(table,field);
}",0.9775
152411,"private boolean updateAccountsInBackground(Account[] systemAccounts){
  if (!haveAccountsChanged(systemAccounts)) {
    return false;
  }
  if (""String_Node_Str"".equals(SystemProperties.get(DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA))) {
    Log.w(TAG,""String_Node_Str"" + DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA);
    return true;
  }
  Log.i(TAG,""String_Node_Str"");
  invalidateFastScrollingIndexCache();
  final ContactsDatabaseHelper dbHelper=mDbHelper.get();
  final SQLiteDatabase db=dbHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    final Set<AccountWithDataSet> knownAccountsWithDataSets=dbHelper.getAllAccountsWithDataSets();
    final List<AccountWithDataSet> accountsWithDataSetsToDelete=Lists.newArrayList();
    for (    AccountWithDataSet knownAccountWithDataSet : knownAccountsWithDataSets) {
      if (knownAccountWithDataSet.isLocalAccount() || knownAccountWithDataSet.inSystemAccounts(systemAccounts)) {
        continue;
      }
      accountsWithDataSetsToDelete.add(knownAccountWithDataSet);
    }
    if (!accountsWithDataSetsToDelete.isEmpty()) {
      for (      AccountWithDataSet accountWithDataSet : accountsWithDataSetsToDelete) {
        Log.d(TAG,""String_Node_Str"" + accountWithDataSet);
        final Long accountIdOrNull=dbHelper.getAccountIdOrNull(accountWithDataSet);
        if (accountIdOrNull != null) {
          final String[] accountIdParams=new String[]{Long.toString(accountIdOrNull)};
          db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ GroupsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.PRESENCE + ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEM_PHOTOS + ""String_Node_Str""+ StreamItemPhotos.STREAM_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StreamItems._ID+ ""String_Node_Str""+ Tables.STREAM_ITEMS+ ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEMS + ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          if (!inProfileMode()) {
            HashSet<Long> rawContactIds=Sets.newHashSet();
            final Cursor cursor=db.rawQuery(""String_Node_Str"" + RawContactsColumns.CONCRETE_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
            try {
              while (cursor.moveToNext()) {
                final long rawContactId=cursor.getLong(0);
                rawContactIds.add(rawContactId);
                ContactsTableUtil.deleteContactIfSingleton(db,rawContactId);
              }
            }
  finally {
              MoreCloseables.closeQuietly(cursor);
            }
            ContactsTableUtil.updateContactLastUpdate(db,rawContactIds);
          }
          db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.ACCOUNTS + ""String_Node_Str""+ AccountsColumns._ID+ ""String_Node_Str"",accountIdParams);
        }
      }
      HashSet<Long> orphanContactIds=Sets.newHashSet();
      Cursor cursor=db.rawQuery(""String_Node_Str"" + Contacts._ID + ""String_Node_Str""+ Tables.CONTACTS+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str"",null);
      try {
        while (cursor.moveToNext()) {
          orphanContactIds.add(cursor.getLong(0));
        }
      }
  finally {
        cursor.close();
      }
      for (      Long contactId : orphanContactIds) {
        mAggregator.get().updateAggregateData(mTransactionContext.get(),contactId);
      }
      dbHelper.updateAllVisible();
      if (!inProfileMode()) {
        updateSearchIndexInTransaction();
      }
    }
    removeStaleAccountRows(Tables.SETTINGS,Settings.ACCOUNT_NAME,Settings.ACCOUNT_TYPE,systemAccounts);
    removeStaleAccountRows(Tables.DIRECTORIES,Directory.ACCOUNT_NAME,Directory.ACCOUNT_TYPE,systemAccounts);
    dbHelper.getSyncState().onAccountsChanged(db,systemAccounts);
    saveAccounts(systemAccounts);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  mAccountWritability.clear();
  updateContactsAccountCount(systemAccounts);
  updateProviderStatus();
  return true;
}","private boolean updateAccountsInBackground(Account[] systemAccounts){
  if (!haveAccountsChanged(systemAccounts)) {
    return false;
  }
  if (""String_Node_Str"".equals(SystemProperties.get(DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA))) {
    Log.w(TAG,""String_Node_Str"" + DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA);
    return true;
  }
  Log.i(TAG,""String_Node_Str"");
  invalidateFastScrollingIndexCache();
  final ContactsDatabaseHelper dbHelper=mDbHelper.get();
  final SQLiteDatabase db=dbHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    final Set<AccountWithDataSet> knownAccountsWithDataSets=dbHelper.getAllAccountsWithDataSets();
    final List<AccountWithDataSet> accountsWithDataSetsToDelete=Lists.newArrayList();
    for (    AccountWithDataSet knownAccountWithDataSet : knownAccountsWithDataSets) {
      if (knownAccountWithDataSet.isLocalAccount() || knownAccountWithDataSet.inSystemAccounts(systemAccounts)) {
        continue;
      }
      accountsWithDataSetsToDelete.add(knownAccountWithDataSet);
    }
    if (!accountsWithDataSetsToDelete.isEmpty()) {
      for (      AccountWithDataSet accountWithDataSet : accountsWithDataSetsToDelete) {
        Log.d(TAG,""String_Node_Str"" + accountWithDataSet);
        final Long accountIdOrNull=dbHelper.getAccountIdOrNull(accountWithDataSet);
        if (accountIdOrNull != null) {
          final String accountId=Long.toString(accountIdOrNull);
          final String[] accountIdParams=new String[]{accountId};
          db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ GroupsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.PRESENCE + ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEM_PHOTOS + ""String_Node_Str""+ StreamItemPhotos.STREAM_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StreamItems._ID+ ""String_Node_Str""+ Tables.STREAM_ITEMS+ ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEMS + ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          if (!inProfileMode()) {
            Cursor cursor=db.rawQuery(""String_Node_Str"" + RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str"",accountIdParams);
            try {
              while (cursor.moveToNext()) {
                final long contactId=cursor.getLong(0);
                ContactsTableUtil.deleteContact(db,contactId);
              }
            }
  finally {
              MoreCloseables.closeQuietly(cursor);
            }
            cursor=db.rawQuery(""String_Node_Str"" + RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str"",accountIdParams);
            try {
              while (cursor.moveToNext()) {
                final long contactId=cursor.getLong(0);
                ContactsTableUtil.updateContactLastUpdateByContactId(db,contactId);
              }
            }
  finally {
              MoreCloseables.closeQuietly(cursor);
            }
          }
          db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.ACCOUNTS + ""String_Node_Str""+ AccountsColumns._ID+ ""String_Node_Str"",accountIdParams);
        }
      }
      HashSet<Long> orphanContactIds=Sets.newHashSet();
      Cursor cursor=db.rawQuery(""String_Node_Str"" + Contacts._ID + ""String_Node_Str""+ Tables.CONTACTS+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str"",null);
      try {
        while (cursor.moveToNext()) {
          orphanContactIds.add(cursor.getLong(0));
        }
      }
  finally {
        cursor.close();
      }
      for (      Long contactId : orphanContactIds) {
        mAggregator.get().updateAggregateData(mTransactionContext.get(),contactId);
      }
      dbHelper.updateAllVisible();
      if (!inProfileMode()) {
        updateSearchIndexInTransaction();
      }
    }
    removeStaleAccountRows(Tables.SETTINGS,Settings.ACCOUNT_NAME,Settings.ACCOUNT_TYPE,systemAccounts);
    removeStaleAccountRows(Tables.DIRECTORIES,Directory.ACCOUNT_NAME,Directory.ACCOUNT_TYPE,systemAccounts);
    dbHelper.getSyncState().onAccountsChanged(db,systemAccounts);
    saveAccounts(systemAccounts);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  mAccountWritability.clear();
  updateContactsAccountCount(systemAccounts);
  updateProviderStatus();
  return true;
}",0.8726040830881697
152412,"private void flushTransactionalChanges(){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + (inProfileMode() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  for (  long rawContactId : mTransactionContext.get().getInsertedRawContactIds()) {
    mDbHelper.get().updateRawContactDisplayName(db,rawContactId);
    mAggregator.get().onRawContactInsert(mTransactionContext.get(),db,rawContactId);
  }
  Set<Long> dirtyRawContacts=mTransactionContext.get().getDirtyRawContactIds();
  if (!dirtyRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_DIRTY_SQL);
    appendIds(mSb,dirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  Set<Long> updatedRawContacts=mTransactionContext.get().getUpdatedRawContactIds();
  if (!updatedRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_VERSION_SQL);
    appendIds(mSb,updatedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> changedRawContacts=mTransactionContext.get().getChangedRawContactIds();
  ContactsTableUtil.updateContactLastUpdate(db,changedRawContacts);
  for (  Map.Entry<Long,Object> entry : mTransactionContext.get().getUpdatedSyncStates()) {
    long id=entry.getKey();
    if (mDbHelper.get().getSyncState().update(db,id,entry.getValue()) <= 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  mTransactionContext.get().clearExceptSearchIndexUpdates();
}","private void flushTransactionalChanges(){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + (inProfileMode() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  for (  long rawContactId : mTransactionContext.get().getInsertedRawContactIds()) {
    mDbHelper.get().updateRawContactDisplayName(db,rawContactId);
    mAggregator.get().onRawContactInsert(mTransactionContext.get(),db,rawContactId);
  }
  Set<Long> dirtyRawContacts=mTransactionContext.get().getDirtyRawContactIds();
  if (!dirtyRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_DIRTY_SQL);
    appendIds(mSb,dirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  Set<Long> updatedRawContacts=mTransactionContext.get().getUpdatedRawContactIds();
  if (!updatedRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_VERSION_SQL);
    appendIds(mSb,updatedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> changedRawContacts=mTransactionContext.get().getChangedRawContactIds();
  ContactsTableUtil.updateContactLastUpdateByRawContactId(db,changedRawContacts);
  for (  Map.Entry<Long,Object> entry : mTransactionContext.get().getUpdatedSyncStates()) {
    long id=entry.getKey();
    if (mDbHelper.get().getSyncState().update(db,id,entry.getValue()) <= 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  mTransactionContext.get().clearExceptSearchIndexUpdates();
}",0.9955328653477984
152413,"/** 
 * Build a bind arg where clause. <p> e.g. Calling this method with value of 4 results in: <p> ""?,?,?,?""
 * @param numArgs The number of arguments.
 * @return A string that can be used for bind args in a sql where clause.
 */
public static String buildBindArgString(int numArgs){
  final StringBuilder sb=new StringBuilder();
  String delimiter=""String_Node_Str"";
  for (int i=0; i < numArgs; i++) {
    sb.append(delimiter).append(""String_Node_Str"");
    delimiter=""String_Node_Str"";
  }
  return sb.toString();
}","/** 
 * Build a bind arg where clause. <p> e.g. Calling this method with value of 4 results in: <p> ""?,?,?,?""
 * @param numArgs The number of arguments.
 * @return A string that can be used for bind args in a sql where clause.
 */
@NeededForTesting public static String buildBindArgString(int numArgs){
  final StringBuilder sb=new StringBuilder();
  String delimiter=""String_Node_Str"";
  for (int i=0; i < numArgs; i++) {
    sb.append(delimiter).append(""String_Node_Str"");
    delimiter=""String_Node_Str"";
  }
  return sb.toString();
}",0.9829545454545454
152414,"/** 
 * Builds a DROP INDEX ddl statement for a given table and field.
 * @param table The table name that was originally used to create the index.
 * @param field The field that was originally used to create the index.
 * @return The drop index sql statement.
 */
public static String buildDropIndexSql(String table,String field){
  return ""String_Node_Str"" + buildIndexName(table,field);
}","/** 
 * Builds a DROP INDEX ddl statement for a given table and field.
 * @param table The table name that was originally used to create the index.
 * @param field The field that was originally used to create the index.
 * @return The drop index sql statement.
 */
@NeededForTesting public static String buildDropIndexSql(String table,String field){
  return ""String_Node_Str"" + buildIndexName(table,field);
}",0.9775
152415,"/** 
 * Build a sql to update the last updated timestamp for contacts.
 * @param rawContactIds The raw contact ids that contacts should be updated for.
 * @return The update sql statement.
 */
private static String buildUpdateLastUpdateSql(Set<Long> rawContactIds){
  final String bindSql=MoreDatabaseUtils.buildBindArgString(rawContactIds.size());
  final String sql=""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str""+ Contacts.CONTACT_LAST_UPDATED_TIMESTAMP+ ""String_Node_Str""+ Clock.getInstance().currentTimeMillis()+ ""String_Node_Str""+ Contacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ ContactsContract.RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ContactsContract.RawContacts._ID+ ""String_Node_Str""+ bindSql+ ""String_Node_Str""+ ""String_Node_Str"";
  return sql;
}","/** 
 * Build a sql to update the last updated timestamp for contacts.
 * @param rawContactIds The raw contact ids that contacts should be updated for.
 * @return The update sql statement.
 */
private static String buildUpdateLastUpdateSql(Set<Long> rawContactIds){
  final String sql=""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str""+ Contacts.CONTACT_LAST_UPDATED_TIMESTAMP+ ""String_Node_Str""+ Clock.getInstance().currentTimeMillis()+ ""String_Node_Str""+ Contacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ ContactsContract.RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ContactsContract.RawContacts._ID+ ""String_Node_Str""+ TextUtils.join(""String_Node_Str"",rawContactIds)+ ""String_Node_Str""+ ""String_Node_Str"";
  return sql;
}",0.9133459835547122
152416,"/** 
 * Refreshes the last updated timestamp of the contact with the current time.
 * @param db The sqlite database instance.
 * @param rawContactIds A set of raw contacts ids to refresh the contact for.
 */
public static void updateContactLastUpdate(SQLiteDatabase db,Set<Long> rawContactIds){
  if (rawContactIds.isEmpty()) {
    return;
  }
  final Long[] bindArgs=rawContactIds.toArray(new Long[rawContactIds.size()]);
  db.execSQL(buildUpdateLastUpdateSql(rawContactIds),bindArgs);
}","/** 
 * Refreshes the last updated timestamp of the contact with the current time.
 * @param db The sqlite database instance.
 * @param rawContactIds A set of raw contacts ids to refresh the contact for.
 */
public static void updateContactLastUpdate(SQLiteDatabase db,Set<Long> rawContactIds){
  if (rawContactIds.isEmpty()) {
    return;
  }
  db.execSQL(buildUpdateLastUpdateSql(rawContactIds));
}",0.9009009009009008
152417,"/** 
 * Build a bind arg where clause. <p> e.g. Calling this method with value of 4 results in: <p> ""?,?,?,?""
 * @param numArgs The number of arguments.
 * @return A string that can be used for bind args in a sql where clause.
 */
public static String buildBindArgString(int numArgs){
  final StringBuilder sb=new StringBuilder();
  String delimiter=""String_Node_Str"";
  for (int i=0; i < numArgs; i++) {
    sb.append(delimiter).append(""String_Node_Str"");
    delimiter=""String_Node_Str"";
  }
  return sb.toString();
}","/** 
 * Build a bind arg where clause. <p> e.g. Calling this method with value of 4 results in: <p> ""?,?,?,?""
 * @param numArgs The number of arguments.
 * @return A string that can be used for bind args in a sql where clause.
 */
@NeededForTesting public static String buildBindArgString(int numArgs){
  final StringBuilder sb=new StringBuilder();
  String delimiter=""String_Node_Str"";
  for (int i=0; i < numArgs; i++) {
    sb.append(delimiter).append(""String_Node_Str"");
    delimiter=""String_Node_Str"";
  }
  return sb.toString();
}",0.9829545454545454
152418,"/** 
 * Builds a DROP INDEX ddl statement for a given table and field.
 * @param table The table name that was originally used to create the index.
 * @param field The field that was originally used to create the index.
 * @return The drop index sql statement.
 */
public static String buildDropIndexSql(String table,String field){
  return ""String_Node_Str"" + buildIndexName(table,field);
}","/** 
 * Builds a DROP INDEX ddl statement for a given table and field.
 * @param table The table name that was originally used to create the index.
 * @param field The field that was originally used to create the index.
 * @return The drop index sql statement.
 */
@NeededForTesting public static String buildDropIndexSql(String table,String field){
  return ""String_Node_Str"" + buildIndexName(table,field);
}",0.9775
152419,"private boolean updateAccountsInBackground(Account[] systemAccounts){
  if (!haveAccountsChanged(systemAccounts)) {
    return false;
  }
  if (""String_Node_Str"".equals(SystemProperties.get(DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA))) {
    Log.w(TAG,""String_Node_Str"" + DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA);
    return true;
  }
  Log.i(TAG,""String_Node_Str"");
  invalidateFastScrollingIndexCache();
  final ContactsDatabaseHelper dbHelper=mDbHelper.get();
  final SQLiteDatabase db=dbHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    final Set<AccountWithDataSet> knownAccountsWithDataSets=dbHelper.getAllAccountsWithDataSets();
    final List<AccountWithDataSet> accountsWithDataSetsToDelete=Lists.newArrayList();
    for (    AccountWithDataSet knownAccountWithDataSet : knownAccountsWithDataSets) {
      if (knownAccountWithDataSet.isLocalAccount() || knownAccountWithDataSet.inSystemAccounts(systemAccounts)) {
        continue;
      }
      accountsWithDataSetsToDelete.add(knownAccountWithDataSet);
    }
    if (!accountsWithDataSetsToDelete.isEmpty()) {
      for (      AccountWithDataSet accountWithDataSet : accountsWithDataSetsToDelete) {
        Log.d(TAG,""String_Node_Str"" + accountWithDataSet);
        final Long accountIdOrNull=dbHelper.getAccountIdOrNull(accountWithDataSet);
        if (accountIdOrNull != null) {
          final String[] accountIdParams=new String[]{Long.toString(accountIdOrNull)};
          db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ GroupsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.PRESENCE + ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEM_PHOTOS + ""String_Node_Str""+ StreamItemPhotos.STREAM_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StreamItems._ID+ ""String_Node_Str""+ Tables.STREAM_ITEMS+ ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEMS + ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          if (!inProfileMode()) {
            HashSet<Long> rawContactIds=Sets.newHashSet();
            final Cursor cursor=db.rawQuery(""String_Node_Str"" + RawContactsColumns.CONCRETE_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
            try {
              while (cursor.moveToNext()) {
                final long rawContactId=cursor.getLong(0);
                rawContactIds.add(rawContactId);
                ContactsTableUtil.deleteContactIfSingleton(db,rawContactId);
              }
            }
  finally {
              MoreCloseables.closeQuietly(cursor);
            }
            ContactsTableUtil.updateContactLastUpdate(db,rawContactIds);
          }
          db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.ACCOUNTS + ""String_Node_Str""+ AccountsColumns._ID+ ""String_Node_Str"",accountIdParams);
        }
      }
      HashSet<Long> orphanContactIds=Sets.newHashSet();
      Cursor cursor=db.rawQuery(""String_Node_Str"" + Contacts._ID + ""String_Node_Str""+ Tables.CONTACTS+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str"",null);
      try {
        while (cursor.moveToNext()) {
          orphanContactIds.add(cursor.getLong(0));
        }
      }
  finally {
        cursor.close();
      }
      for (      Long contactId : orphanContactIds) {
        mAggregator.get().updateAggregateData(mTransactionContext.get(),contactId);
      }
      dbHelper.updateAllVisible();
      if (!inProfileMode()) {
        updateSearchIndexInTransaction();
      }
    }
    removeStaleAccountRows(Tables.SETTINGS,Settings.ACCOUNT_NAME,Settings.ACCOUNT_TYPE,systemAccounts);
    removeStaleAccountRows(Tables.DIRECTORIES,Directory.ACCOUNT_NAME,Directory.ACCOUNT_TYPE,systemAccounts);
    dbHelper.getSyncState().onAccountsChanged(db,systemAccounts);
    saveAccounts(systemAccounts);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  mAccountWritability.clear();
  updateContactsAccountCount(systemAccounts);
  updateProviderStatus();
  return true;
}","private boolean updateAccountsInBackground(Account[] systemAccounts){
  if (!haveAccountsChanged(systemAccounts)) {
    return false;
  }
  if (""String_Node_Str"".equals(SystemProperties.get(DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA))) {
    Log.w(TAG,""String_Node_Str"" + DEBUG_PROPERTY_KEEP_STALE_ACCOUNT_DATA);
    return true;
  }
  Log.i(TAG,""String_Node_Str"");
  invalidateFastScrollingIndexCache();
  final ContactsDatabaseHelper dbHelper=mDbHelper.get();
  final SQLiteDatabase db=dbHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    final Set<AccountWithDataSet> knownAccountsWithDataSets=dbHelper.getAllAccountsWithDataSets();
    final List<AccountWithDataSet> accountsWithDataSetsToDelete=Lists.newArrayList();
    for (    AccountWithDataSet knownAccountWithDataSet : knownAccountsWithDataSets) {
      if (knownAccountWithDataSet.isLocalAccount() || knownAccountWithDataSet.inSystemAccounts(systemAccounts)) {
        continue;
      }
      accountsWithDataSetsToDelete.add(knownAccountWithDataSet);
    }
    if (!accountsWithDataSetsToDelete.isEmpty()) {
      for (      AccountWithDataSet accountWithDataSet : accountsWithDataSetsToDelete) {
        Log.d(TAG,""String_Node_Str"" + accountWithDataSet);
        final Long accountIdOrNull=dbHelper.getAccountIdOrNull(accountWithDataSet);
        if (accountIdOrNull != null) {
          final String accountId=Long.toString(accountIdOrNull);
          final String[] accountIdParams=new String[]{accountId};
          db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ GroupsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.PRESENCE + ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEM_PHOTOS + ""String_Node_Str""+ StreamItemPhotos.STREAM_ITEM_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StreamItems._ID+ ""String_Node_Str""+ Tables.STREAM_ITEMS+ ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.STREAM_ITEMS + ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          if (!inProfileMode()) {
            Cursor cursor=db.rawQuery(""String_Node_Str"" + RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str"",accountIdParams);
            try {
              while (cursor.moveToNext()) {
                final long contactId=cursor.getLong(0);
                ContactsTableUtil.deleteContact(db,contactId);
              }
            }
  finally {
              MoreCloseables.closeQuietly(cursor);
            }
            cursor=db.rawQuery(""String_Node_Str"" + RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str""+ ""String_Node_Str"",accountIdParams);
            try {
              while (cursor.moveToNext()) {
                final long contactId=cursor.getLong(0);
                ContactsTableUtil.updateContactLastUpdateByContactId(db,contactId);
              }
            }
  finally {
              MoreCloseables.closeQuietly(cursor);
            }
          }
          db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.ACCOUNT_ID+ ""String_Node_Str"",accountIdParams);
          db.execSQL(""String_Node_Str"" + Tables.ACCOUNTS + ""String_Node_Str""+ AccountsColumns._ID+ ""String_Node_Str"",accountIdParams);
        }
      }
      HashSet<Long> orphanContactIds=Sets.newHashSet();
      Cursor cursor=db.rawQuery(""String_Node_Str"" + Contacts._ID + ""String_Node_Str""+ Tables.CONTACTS+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ Contacts.NAME_RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ Contacts.PHOTO_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str"",null);
      try {
        while (cursor.moveToNext()) {
          orphanContactIds.add(cursor.getLong(0));
        }
      }
  finally {
        cursor.close();
      }
      for (      Long contactId : orphanContactIds) {
        mAggregator.get().updateAggregateData(mTransactionContext.get(),contactId);
      }
      dbHelper.updateAllVisible();
      if (!inProfileMode()) {
        updateSearchIndexInTransaction();
      }
    }
    removeStaleAccountRows(Tables.SETTINGS,Settings.ACCOUNT_NAME,Settings.ACCOUNT_TYPE,systemAccounts);
    removeStaleAccountRows(Tables.DIRECTORIES,Directory.ACCOUNT_NAME,Directory.ACCOUNT_TYPE,systemAccounts);
    dbHelper.getSyncState().onAccountsChanged(db,systemAccounts);
    saveAccounts(systemAccounts);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  mAccountWritability.clear();
  updateContactsAccountCount(systemAccounts);
  updateProviderStatus();
  return true;
}",0.8726040830881697
152420,"private void flushTransactionalChanges(){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + (inProfileMode() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  for (  long rawContactId : mTransactionContext.get().getInsertedRawContactIds()) {
    mDbHelper.get().updateRawContactDisplayName(db,rawContactId);
    mAggregator.get().onRawContactInsert(mTransactionContext.get(),db,rawContactId);
  }
  Set<Long> dirtyRawContacts=mTransactionContext.get().getDirtyRawContactIds();
  if (!dirtyRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_DIRTY_SQL);
    appendIds(mSb,dirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  Set<Long> updatedRawContacts=mTransactionContext.get().getUpdatedRawContactIds();
  if (!updatedRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_VERSION_SQL);
    appendIds(mSb,updatedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> changedRawContacts=mTransactionContext.get().getChangedRawContactIds();
  ContactsTableUtil.updateContactLastUpdate(db,changedRawContacts);
  for (  Map.Entry<Long,Object> entry : mTransactionContext.get().getUpdatedSyncStates()) {
    long id=entry.getKey();
    if (mDbHelper.get().getSyncState().update(db,id,entry.getValue()) <= 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  mTransactionContext.get().clearExceptSearchIndexUpdates();
}","private void flushTransactionalChanges(){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + (inProfileMode() ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  for (  long rawContactId : mTransactionContext.get().getInsertedRawContactIds()) {
    mDbHelper.get().updateRawContactDisplayName(db,rawContactId);
    mAggregator.get().onRawContactInsert(mTransactionContext.get(),db,rawContactId);
  }
  Set<Long> dirtyRawContacts=mTransactionContext.get().getDirtyRawContactIds();
  if (!dirtyRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_DIRTY_SQL);
    appendIds(mSb,dirtyRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  Set<Long> updatedRawContacts=mTransactionContext.get().getUpdatedRawContactIds();
  if (!updatedRawContacts.isEmpty()) {
    mSb.setLength(0);
    mSb.append(UPDATE_RAW_CONTACT_SET_VERSION_SQL);
    appendIds(mSb,updatedRawContacts);
    mSb.append(""String_Node_Str"");
    db.execSQL(mSb.toString());
  }
  final Set<Long> changedRawContacts=mTransactionContext.get().getChangedRawContactIds();
  ContactsTableUtil.updateContactLastUpdateByRawContactId(db,changedRawContacts);
  for (  Map.Entry<Long,Object> entry : mTransactionContext.get().getUpdatedSyncStates()) {
    long id=entry.getKey();
    if (mDbHelper.get().getSyncState().update(db,id,entry.getValue()) <= 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  mTransactionContext.get().clearExceptSearchIndexUpdates();
}",0.9955328653477984
152421,"public AssetFileDescriptor openAssetFileLocal(Uri uri,String mode) throws FileNotFoundException {
  final boolean writing=mode.contains(""String_Node_Str"");
  final SQLiteDatabase db=mDbHelper.get().getDatabase(writing);
  int match=sUriMatcher.match(uri);
switch (match) {
case CONTACTS_ID_PHOTO:
{
      long contactId=Long.parseLong(uri.getPathSegments().get(1));
      return openPhotoAssetFile(db,uri,mode,Data._ID + ""String_Node_Str"" + Contacts.PHOTO_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"",new String[]{String.valueOf(contactId)});
    }
case CONTACTS_ID_DISPLAY_PHOTO:
{
    if (!mode.equals(""String_Node_Str"")) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    long contactId=Long.parseLong(uri.getPathSegments().get(1));
    Cursor c=db.query(Tables.CONTACTS,new String[]{Contacts.PHOTO_FILE_ID},Contacts._ID + ""String_Node_Str"",new String[]{String.valueOf(contactId)},null,null,null);
    try {
      if (c.moveToFirst()) {
        long photoFileId=c.getLong(0);
        return openDisplayPhotoForRead(photoFileId);
      }
 else {
        throw new FileNotFoundException(uri.toString());
      }
    }
  finally {
      c.close();
    }
  }
case PROFILE_DISPLAY_PHOTO:
{
  if (!mode.equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Cursor c=db.query(Tables.CONTACTS,new String[]{Contacts.PHOTO_FILE_ID},null,null,null,null,null);
  try {
    if (c.moveToFirst()) {
      long photoFileId=c.getLong(0);
      return openDisplayPhotoForRead(photoFileId);
    }
 else {
      throw new FileNotFoundException(uri.toString());
    }
  }
  finally {
    c.close();
  }
}
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
case CONTACTS_LOOKUP_DISPLAY_PHOTO:
case CONTACTS_LOOKUP_ID_DISPLAY_PHOTO:
{
if (!mode.equals(""String_Node_Str"")) {
  throw new IllegalArgumentException(""String_Node_Str"");
}
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
boolean forDisplayPhoto=(match == CONTACTS_LOOKUP_ID_DISPLAY_PHOTO || match == CONTACTS_LOOKUP_DISPLAY_PHOTO);
String lookupKey=pathSegments.get(2);
String[] projection=new String[]{Contacts.PHOTO_ID,Contacts.PHOTO_FILE_ID};
if (segmentCount == 5) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,null,null,null,null,null,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey,null);
  if (c != null) {
    try {
      c.moveToFirst();
      if (forDisplayPhoto) {
        long photoFileId=c.getLong(c.getColumnIndex(Contacts.PHOTO_FILE_ID));
        return openDisplayPhotoForRead(photoFileId);
      }
 else {
        long photoId=c.getLong(c.getColumnIndex(Contacts.PHOTO_ID));
        return openPhotoAssetFile(db,uri,mode,Data._ID + ""String_Node_Str"",new String[]{String.valueOf(photoId)});
      }
    }
  finally {
      c.close();
    }
  }
}
SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForContacts(qb,uri,projection);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
Cursor c=qb.query(db,projection,Contacts._ID + ""String_Node_Str"",new String[]{String.valueOf(contactId)},null,null,null);
try {
  c.moveToFirst();
  if (forDisplayPhoto) {
    long photoFileId=c.getLong(c.getColumnIndex(Contacts.PHOTO_FILE_ID));
    return openDisplayPhotoForRead(photoFileId);
  }
 else {
    long photoId=c.getLong(c.getColumnIndex(Contacts.PHOTO_ID));
    return openPhotoAssetFile(db,uri,mode,Data._ID + ""String_Node_Str"",new String[]{String.valueOf(photoId)});
  }
}
  finally {
  c.close();
}
}
case RAW_CONTACTS_ID_DISPLAY_PHOTO:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
boolean writeable=!mode.equals(""String_Node_Str"");
SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
String[] projection=new String[]{Data._ID,Photo.PHOTO_FILE_ID};
setTablesAndProjectionMapForData(qb,uri,projection,false);
long photoMimetypeId=mDbHelper.get().getMimeTypeId(Photo.CONTENT_ITEM_TYPE);
Cursor c=qb.query(db,projection,Data.RAW_CONTACT_ID + ""String_Node_Str"" + DataColumns.MIMETYPE_ID+ ""String_Node_Str"",new String[]{String.valueOf(rawContactId),String.valueOf(photoMimetypeId)},null,null,Data.IS_PRIMARY + ""String_Node_Str"");
long dataId=0;
long photoFileId=0;
try {
if (c.getCount() >= 1) {
  c.moveToFirst();
  dataId=c.getLong(0);
  photoFileId=c.getLong(1);
}
}
  finally {
c.close();
}
if (writeable) {
return openDisplayPhotoForWrite(rawContactId,dataId,uri,mode);
}
 else {
return openDisplayPhotoForRead(photoFileId);
}
}
case DISPLAY_PHOTO_ID:
{
long photoFileId=ContentUris.parseId(uri);
if (!mode.equals(""String_Node_Str"")) {
throw new IllegalArgumentException(""String_Node_Str"");
}
return openDisplayPhotoForRead(photoFileId);
}
case DATA_ID:
{
long dataId=Long.parseLong(uri.getPathSegments().get(1));
long photoMimetypeId=mDbHelper.get().getMimeTypeId(Photo.CONTENT_ITEM_TYPE);
return openPhotoAssetFile(db,uri,mode,Data._ID + ""String_Node_Str"" + DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ photoMimetypeId,new String[]{String.valueOf(dataId)});
}
case PROFILE_AS_VCARD:
{
final ByteArrayOutputStream localStream=new ByteArrayOutputStream();
outputRawContactsAsVCard(uri,localStream,null,null);
return buildAssetFileDescriptor(localStream);
}
case CONTACTS_AS_VCARD:
{
final ByteArrayOutputStream localStream=new ByteArrayOutputStream();
outputRawContactsAsVCard(uri,localStream,null,null);
return buildAssetFileDescriptor(localStream);
}
case CONTACTS_AS_MULTI_VCARD:
{
final String lookupKeys=uri.getPathSegments().get(2);
final String[] loopupKeyList=lookupKeys.split(""String_Node_Str"");
final StringBuilder inBuilder=new StringBuilder();
Uri queryUri=Contacts.CONTENT_URI;
int index=0;
for (String lookupKey : loopupKeyList) {
if (index == 0) {
inBuilder.append(""String_Node_Str"");
}
 else {
inBuilder.append(""String_Node_Str"");
}
long contactId=lookupContactIdByLookupKey(db,lookupKey);
inBuilder.append(contactId);
index++;
}
inBuilder.append(')');
final String selection=Contacts._ID + ""String_Node_Str"" + inBuilder.toString();
final ByteArrayOutputStream localStream=new ByteArrayOutputStream();
outputRawContactsAsVCard(queryUri,localStream,selection,null);
return buildAssetFileDescriptor(localStream);
}
default :
throw new FileNotFoundException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
}","public AssetFileDescriptor openAssetFileLocal(Uri uri,String mode) throws FileNotFoundException {
  final long ident=Binder.clearCallingIdentity();
  try {
    return openAssetFileInner(uri,mode);
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.0382817066043249
152422,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,String accountType,String accountName,String dataSet,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && containsRawContactsFromAccount(db,contactId,accountType,accountName,dataSet)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,String accountType,String accountName,String dataSet,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && containsRawContactsFromAccount(db,contactId,accountType,accountName,dataSet)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
    if (currentContactId != 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}",0.9834039548022598
152423,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,String accountType,String accountName,String dataSet,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && containsRawContactsFromAccount(db,contactId,accountType,accountName,dataSet)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,String accountType,String accountName,String dataSet,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && containsRawContactsFromAccount(db,contactId,accountType,accountName,dataSet)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
    if (currentContactId != 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}",0.9834039548022598
152424,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && !canJoinIntoContact(db,contactId,rawContactId,accountId)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && !canJoinIntoContact(db,contactId,rawContactId,accountId)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
    if (currentContactId != 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}",0.9837370242214531
152425,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && !canJoinIntoContact(db,contactId,rawContactId,accountId)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(TransactionContext txContext,SQLiteDatabase db,long rawContactId,long accountId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + rawContactId + ""String_Node_Str""+ currentContactId);
  }
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      if (currentContactId == 0 || mDbHelper.isContactInDefaultDirectory(db,currentContactId)) {
        contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      }
      if (contactId != -1 && contactId != currentContactId && !canJoinIntoContact(db,contactId,rawContactId,accountId)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(txContext,db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(txContext,contactId);
    updateAggregatedStatusUpdate(contactId);
    if (currentContactId != 0) {
      updateAggregateData(txContext,currentContactId);
    }
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(txContext,db,contactIdToSplit);
  }
}",0.9837370242214531
152426,"private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      if (!hasNumberE164) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        DatabaseUtils.appendEscapedSQLString(sb,number);
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(')');
  }
}","private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(""String_Node_Str"");
    }
    sb.append(')');
  }
}",0.8003369839932604
152427,"protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=""String_Node_Str"" + PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str""+ PhoneColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
final boolean returnGroupCountPerAccount=readBooleanQueryParameter(uri,Groups.PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT,false);
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (hasColumn(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
qb.setTables(tables);
qb.setProjectionMap(returnGroupCountPerAccount ? sGroupsSummaryProjectionMapWithGroupCountPerAccount : sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}","protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=""String_Node_Str"" + PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str""+ PhoneColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
qb.setStrict(true);
boolean foundResult=false;
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
try {
if (cursor.getCount() > 0) {
foundResult=true;
return cursor;
}
 else {
qb=new SQLiteQueryBuilder();
mDbHelper.get().buildMinimalPhoneLookupAndContactQuery(qb,normalizedNumber);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
}
  finally {
if (!foundResult) {
cursor.close();
}
}
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
final boolean returnGroupCountPerAccount=readBooleanQueryParameter(uri,Groups.PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT,false);
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (hasColumn(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
qb.setTables(tables);
qb.setProjectionMap(returnGroupCountPerAccount ? sGroupsSummaryProjectionMapWithGroupCountPerAccount : sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}",0.9928280546716568
152428,"protected void assertCursorValues(Cursor cursor,ContentValues[] expectedValues){
  StringBuilder message=new StringBuilder();
  for (  ContentValues v : expectedValues) {
    boolean found=false;
    cursor.moveToPosition(-1);
    while (cursor.moveToNext()) {
      found=equalsWithExpectedValues(cursor,v,message);
      if (found) {
        break;
      }
    }
    assertTrue(""String_Node_Str"" + v + message.toString(),found);
  }
}","protected void assertCursorValues(Cursor cursor,ContentValues[] expectedValues){
  StringBuilder message=new StringBuilder();
  final BitSet used=new BitSet(cursor.getCount());
  for (  ContentValues v : expectedValues) {
    boolean found=false;
    cursor.moveToPosition(-1);
    while (cursor.moveToNext()) {
      final int pos=cursor.getPosition();
      if (used.get(pos))       continue;
      found=equalsWithExpectedValues(cursor,v,message);
      if (found) {
        used.set(pos);
        break;
      }
    }
    assertTrue(""String_Node_Str"" + v + message.toString(),found);
  }
}",0.847424684159378
152429,"public void testPhoneUpdate(){
  ContentValues values=new ContentValues();
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  Uri phoneUri=insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertStoredValue(lookupUri1,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertStoredValue(lookupUri2,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.clear();
  values.putNull(Phone.NUMBER);
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertStoredValue(lookupUri2,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  assertNetworkNotified(true);
}","public void testPhoneUpdate(){
  ContentValues values=new ContentValues();
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  Uri phoneUri=insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri1,null,null));
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(2,getCount(lookupUri2,null,null));
  values.clear();
  values.putNull(Phone.NUMBER);
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(2,getCount(lookupUri2,null,null));
  assertNetworkNotified(true);
}",0.6972704714640199
152430,"public void testPhoneLookup(){
  ContentValues values=new ContentValues();
  values.put(RawContacts.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(RawContacts.SEND_TO_VOICEMAIL,1);
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  values.clear();
  values.put(PhoneLookup._ID,queryContactId(rawContactId));
  values.put(PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.put(PhoneLookup.NUMBER,""String_Node_Str"");
  values.put(PhoneLookup.TYPE,Phone.TYPE_HOME);
  values.putNull(PhoneLookup.LABEL);
  values.put(PhoneLookup.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(PhoneLookup.SEND_TO_VOICEMAIL,1);
  assertStoredValues(lookupUri1,values);
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri2,null,null));
}","public void testPhoneLookup(){
  ContentValues values=new ContentValues();
  values.put(RawContacts.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(RawContacts.SEND_TO_VOICEMAIL,1);
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  values.clear();
  values.put(PhoneLookup._ID,queryContactId(rawContactId));
  values.put(PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.put(PhoneLookup.NUMBER,""String_Node_Str"");
  values.put(PhoneLookup.TYPE,Phone.TYPE_HOME);
  values.putNull(PhoneLookup.LABEL);
  values.put(PhoneLookup.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(PhoneLookup.SEND_TO_VOICEMAIL,1);
  assertStoredValues(lookupUri1,null,null,new ContentValues[]{values,values});
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri2,null,null));
}",0.9773960216998192
152431,"private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      if (!hasNumberE164) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        DatabaseUtils.appendEscapedSQLString(sb,number);
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(')');
  }
}","private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(""String_Node_Str"");
    }
    sb.append(')');
  }
}",0.8003369839932604
152432,"protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=""String_Node_Str"" + PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str""+ PhoneColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
final boolean returnGroupCountPerAccount=readBooleanQueryParameter(uri,Groups.PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT,false);
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (hasColumn(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
qb.setTables(tables);
qb.setProjectionMap(returnGroupCountPerAccount ? sGroupsSummaryProjectionMapWithGroupCountPerAccount : sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}","protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=""String_Node_Str"" + PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str""+ PhoneColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
qb.setStrict(true);
boolean foundResult=false;
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
try {
if (cursor.getCount() > 0) {
foundResult=true;
return cursor;
}
 else {
qb=new SQLiteQueryBuilder();
mDbHelper.get().buildMinimalPhoneLookupAndContactQuery(qb,normalizedNumber);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
}
  finally {
if (!foundResult) {
cursor.close();
}
}
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
final boolean returnGroupCountPerAccount=readBooleanQueryParameter(uri,Groups.PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT,false);
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (hasColumn(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
qb.setTables(tables);
qb.setProjectionMap(returnGroupCountPerAccount ? sGroupsSummaryProjectionMapWithGroupCountPerAccount : sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}",0.9928280546716568
152433,"protected void assertCursorValues(Cursor cursor,ContentValues[] expectedValues){
  StringBuilder message=new StringBuilder();
  for (  ContentValues v : expectedValues) {
    boolean found=false;
    cursor.moveToPosition(-1);
    while (cursor.moveToNext()) {
      found=equalsWithExpectedValues(cursor,v,message);
      if (found) {
        break;
      }
    }
    assertTrue(""String_Node_Str"" + v + message.toString(),found);
  }
}","protected void assertCursorValues(Cursor cursor,ContentValues[] expectedValues){
  StringBuilder message=new StringBuilder();
  final BitSet used=new BitSet(cursor.getCount());
  for (  ContentValues v : expectedValues) {
    boolean found=false;
    cursor.moveToPosition(-1);
    while (cursor.moveToNext()) {
      final int pos=cursor.getPosition();
      if (used.get(pos))       continue;
      found=equalsWithExpectedValues(cursor,v,message);
      if (found) {
        used.set(pos);
        break;
      }
    }
    assertTrue(""String_Node_Str"" + v + message.toString(),found);
  }
}",0.847424684159378
152434,"public void testPhoneUpdate(){
  ContentValues values=new ContentValues();
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  Uri phoneUri=insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertStoredValue(lookupUri1,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertStoredValue(lookupUri2,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.clear();
  values.putNull(Phone.NUMBER);
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertStoredValue(lookupUri2,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  assertNetworkNotified(true);
}","public void testPhoneUpdate(){
  ContentValues values=new ContentValues();
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  Uri phoneUri=insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri1,null,null));
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(2,getCount(lookupUri2,null,null));
  values.clear();
  values.putNull(Phone.NUMBER);
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(2,getCount(lookupUri2,null,null));
  assertNetworkNotified(true);
}",0.6972704714640199
152435,"public void testPhoneLookup(){
  ContentValues values=new ContentValues();
  values.put(RawContacts.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(RawContacts.SEND_TO_VOICEMAIL,1);
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  values.clear();
  values.put(PhoneLookup._ID,queryContactId(rawContactId));
  values.put(PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.put(PhoneLookup.NUMBER,""String_Node_Str"");
  values.put(PhoneLookup.TYPE,Phone.TYPE_HOME);
  values.putNull(PhoneLookup.LABEL);
  values.put(PhoneLookup.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(PhoneLookup.SEND_TO_VOICEMAIL,1);
  assertStoredValues(lookupUri1,values);
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri2,null,null));
}","public void testPhoneLookup(){
  ContentValues values=new ContentValues();
  values.put(RawContacts.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(RawContacts.SEND_TO_VOICEMAIL,1);
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  values.clear();
  values.put(PhoneLookup._ID,queryContactId(rawContactId));
  values.put(PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.put(PhoneLookup.NUMBER,""String_Node_Str"");
  values.put(PhoneLookup.TYPE,Phone.TYPE_HOME);
  values.putNull(PhoneLookup.LABEL);
  values.put(PhoneLookup.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(PhoneLookup.SEND_TO_VOICEMAIL,1);
  assertStoredValues(lookupUri1,null,null,new ContentValues[]{values,values});
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri2,null,null));
}",0.9773960216998192
152436,"protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
case CALLABLES:
{
final String mimeTypeIsPhoneExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForPhone();
final String mimeTypeIsSipExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForSip();
setTablesAndProjectionMapForData(qb,uri,projection,false);
if (match == CALLABLES) {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ mimeTypeIsSipExpression+ ""String_Node_Str"");
}
 else {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression);
}
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
case CALLABLES_ID:
{
final String mimeTypeIsPhoneExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForPhone();
final String mimeTypeIsSipExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForSip();
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
if (match == CALLABLES_ID) {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ mimeTypeIsSipExpression+ ""String_Node_Str"");
}
 else {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression);
}
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
case CALLABLES_FILTER:
{
final String mimeTypeIsPhoneExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForPhone();
final String mimeTypeIsSipExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForSip();
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
if (match == CALLABLES_FILTER) {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ mimeTypeIsSipExpression+ ""String_Node_Str"");
}
 else {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression);
}
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!TextUtils.isEmpty(filterParam) && match == CALLABLES_FILTER) {
if (hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
sb.append(mimeTypeIsSipExpression);
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,""String_Node_Str"" + filterParam + '%');
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
if (match == CALLABLES_FILTER) {
String isPhoneAndHasNormalized=""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ Phone.NORMALIZED_NUMBER+ ""String_Node_Str"";
groupBy=""String_Node_Str"" + isPhoneAndHasNormalized + ""String_Node_Str""+ Phone.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
}
 else {
groupBy=""String_Node_Str"" + Phone.NORMALIZED_NUMBER + ""String_Node_Str""+ Phone.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
}
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_ID_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (ContactsDatabaseHelper.isInProjection(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
if (ContactsDatabaseHelper.isInProjection(projection,Groups.SUMMARY_GROUP_COUNT_PER_ACCOUNT)) {
Log.w(TAG,Groups.SUMMARY_GROUP_COUNT_PER_ACCOUNT + ""String_Node_Str"");
}
qb.setTables(tables);
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ID_ENTITY:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}","protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
case CALLABLES:
{
final String mimeTypeIsPhoneExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForPhone();
final String mimeTypeIsSipExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForSip();
setTablesAndProjectionMapForData(qb,uri,projection,false);
if (match == CALLABLES) {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ mimeTypeIsSipExpression+ ""String_Node_Str"");
}
 else {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression);
}
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
case CALLABLES_ID:
{
final String mimeTypeIsPhoneExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForPhone();
final String mimeTypeIsSipExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForSip();
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
if (match == CALLABLES_ID) {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ mimeTypeIsSipExpression+ ""String_Node_Str"");
}
 else {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression);
}
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
case CALLABLES_FILTER:
{
final String mimeTypeIsPhoneExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForPhone();
final String mimeTypeIsSipExpression=DataColumns.MIMETYPE_ID + ""String_Node_Str"" + mDbHelper.get().getMimeTypeIdForSip();
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
if (match == CALLABLES_FILTER) {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ mimeTypeIsSipExpression+ ""String_Node_Str"");
}
 else {
qb.appendWhere(""String_Node_Str"" + mimeTypeIsPhoneExpression);
}
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!TextUtils.isEmpty(filterParam) && match == CALLABLES_FILTER) {
if (hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
sb.append(mimeTypeIsSipExpression);
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,""String_Node_Str"" + filterParam + '%');
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
if (match == CALLABLES_FILTER) {
String isPhoneAndHasNormalized=""String_Node_Str"" + mimeTypeIsPhoneExpression + ""String_Node_Str""+ Phone.NORMALIZED_NUMBER+ ""String_Node_Str"";
groupBy=""String_Node_Str"" + isPhoneAndHasNormalized + ""String_Node_Str""+ Phone.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
}
 else {
groupBy=""String_Node_Str"" + Phone.NORMALIZED_NUMBER + ""String_Node_Str""+ Phone.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
}
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_ID_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
qb.setStrict(true);
boolean foundResult=false;
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
try {
if (cursor.getCount() > 0) {
foundResult=true;
return cursor;
}
 else {
qb=new SQLiteQueryBuilder();
mDbHelper.get().buildMinimalPhoneLookupAndContactQuery(qb,normalizedNumber);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
}
  finally {
if (!foundResult) {
cursor.close();
}
}
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (ContactsDatabaseHelper.isInProjection(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
if (ContactsDatabaseHelper.isInProjection(projection,Groups.SUMMARY_GROUP_COUNT_PER_ACCOUNT)) {
Log.w(TAG,Groups.SUMMARY_GROUP_COUNT_PER_ACCOUNT + ""String_Node_Str"");
}
qb.setTables(tables);
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ID_ENTITY:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}",0.9932596804933604
152437,"private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      if (!hasNumberE164) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        DatabaseUtils.appendEscapedSQLString(sb,number);
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(')');
  }
}","private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(""String_Node_Str"");
    }
    sb.append(')');
  }
}",0.8003369839932604
152438,"protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=""String_Node_Str"" + PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str""+ PhoneColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
final boolean returnGroupCountPerAccount=readBooleanQueryParameter(uri,Groups.PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT,false);
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (hasColumn(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
qb.setTables(tables);
qb.setProjectionMap(returnGroupCountPerAccount ? sGroupsSummaryProjectionMapWithGroupCountPerAccount : sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}","protected Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  if (mActiveDb.get() == null) {
    mActiveDb.set(mContactsHelper.getReadableDatabase());
  }
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  boolean snippetDeferred=false;
  String addressBookIndexerCountExpression=null;
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
case PROFILE_SYNCSTATE:
    return mDbHelper.get().getSyncState().query(mActiveDb.get(),projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
case CONTACTS_LOOKUP_PHOTO:
case CONTACTS_LOOKUP_ID_PHOTO:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
  qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
}
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(StreamItems.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,StreamItems.CONTACT_ID,contactId,StreamItems.CONTACT_LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(mActiveDb.get(),lookupKey);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return mActiveDb.get().rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
boolean deferredSnipRequested=deferredSnippetingRequested(uri);
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId,deferredSnipRequested);
snippetDeferred=isSingleWordQuery(filterParam) && deferredSnipRequested && snippetNeeded(projection);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false);
qb.setProjectionMap(phoneOnly ? sStrequentPhoneOnlyStarredProjectionMap : sStrequentStarredProjectionMap);
if (phoneOnly) {
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.HAS_PHONE_NUMBER + ""String_Node_Str""));
}
qb.setStrict(true);
final String starredInnerQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,Contacts.DISPLAY_NAME + ""String_Node_Str"",null);
qb=new SQLiteQueryBuilder();
qb.setStrict(true);
final String frequentInnerQuery;
if (phoneOnly) {
final StringBuilder tableBuilder=new StringBuilder();
tableBuilder.append(Tables.DATA_USAGE_STAT + ""String_Node_Str"" + Views.DATA+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ DataUsageStatColumns.CONCRETE_USAGE_TYPE+ ""String_Node_Str""+ DataUsageStatColumns.USAGE_TYPE_INT_CALL+ ""String_Node_Str"");
appendContactPresenceJoin(tableBuilder,projection,RawContacts.CONTACT_ID);
appendContactStatusUpdateJoin(tableBuilder,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
qb.setTables(tableBuilder.toString());
qb.setProjectionMap(sStrequentPhoneOnlyFrequentProjectionMap);
final long phoneMimeTypeId=mDbHelper.get().getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
final long sipMimeTypeId=mDbHelper.get().getMimeTypeId(SipAddress.CONTENT_ITEM_TYPE);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.STARRED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str"",DataColumns.MIMETYPE_ID + ""String_Node_Str"" + phoneMimeTypeId+ ""String_Node_Str""+ sipMimeTypeId+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,null,null,TIMES_USED_SORT_COLUMN + ""String_Node_Str"",""String_Node_Str"");
}
 else {
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str""));
frequentInnerQuery=qb.buildQuery(subProjection,null,Contacts._ID,null,null,""String_Node_Str"");
}
final String frequentQuery=""String_Node_Str"" + frequentInnerQuery + ""String_Node_Str"";
final String starredQuery=""String_Node_Str"" + starredInnerQuery + ""String_Node_Str"";
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},null,null);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=mActiveDb.get().rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_FREQUENT:
{
setTablesAndProjectionMapForContacts(qb,uri,projection,true);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
groupBy=Contacts._ID;
if (!TextUtils.isEmpty(sortOrder)) {
sortOrder=FREQUENT_ORDER_BY + ""String_Node_Str"" + sortOrder;
}
 else {
sortOrder=FREQUENT_ORDER_BY;
}
break;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
String groupMimeTypeId=String.valueOf(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
selectionArgs=insertSelectionArg(selectionArgs,groupMimeTypeId);
}
break;
}
case PROFILE:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
break;
}
case PROFILE_ENTITIES:
{
setTablesAndProjectionMapForEntities(qb,uri,projection);
break;
}
case PROFILE_AS_VCARD:
{
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.get().exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,mActiveDb.get(),uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(),lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItems._ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForPhone());
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
if (ftsMatchQuery.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=""String_Node_Str"" + PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str""+ PhoneColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail()+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForEmail());
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.get().extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
if (sortOrder == null) {
sortOrder=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.DEFAULT_DIRECTORY+ ""String_Node_Str"";
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.get().getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
final String ftsMatchQuery=SearchIndexManager.getFtsMatchQuery(filterParam,FtsQueryBuilder.UNSCOPED_NORMALIZING);
sb.append(ftsMatchQuery);
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
final boolean removeDuplicates=readBooleanQueryParameter(uri,ContactsContract.REMOVE_DUPLICATE_ENTRIES,false);
if (removeDuplicates) {
groupBy=RawContacts.CONTACT_ID + ""String_Node_Str"" + Data.DATA1;
addressBookIndexerCountExpression=""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Data.DATA1;
}
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str""+ mDbHelper.get().getMimeTypeIdForStructuredPostal());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
case PROFILE_RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
case PROFILE_RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
case PROFILE_RAW_CONTACTS_ID_DATA:
{
int segment=match == RAW_CONTACTS_DATA ? 1 : 2;
long rawContactId=Long.parseLong(uri.getPathSegments().get(segment));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
long streamItemId=Long.parseLong(uri.getPathSegments().get(3));
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(streamItemId));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"" + StreamItems._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case DATA:
case PROFILE_DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
case PROFILE_DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PROFILE_PHOTO:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONE_LOOKUP:
{
selection=null;
selectionArgs=null;
if (uri.getBooleanQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS,false)) {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=Contacts.DISPLAY_NAME + ""String_Node_Str"";
}
String sipAddress=uri.getPathSegments().size() > 1 ? Uri.decode(uri.getLastPathSegment()) : ""String_Node_Str"";
setTablesAndProjectionMapForData(qb,uri,null,false,true);
StringBuilder sb=new StringBuilder();
selectionArgs=mDbHelper.get().buildSipContactQuery(sb,sipAddress);
selection=sb.toString();
}
 else {
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.get().getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.get().buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
qb.setStrict(true);
boolean foundResult=false;
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
try {
if (cursor.getCount() > 0) {
foundResult=true;
return cursor;
}
 else {
qb=new SQLiteQueryBuilder();
mDbHelper.get().buildMinimalPhoneLookupAndContactQuery(qb,normalizedNumber);
qb.setProjectionMap(sPhoneLookupProjectionMap);
}
}
  finally {
if (!foundResult) {
cursor.close();
}
}
}
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
final boolean returnGroupCountPerAccount=readBooleanQueryParameter(uri,Groups.PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT,false);
String tables=Views.GROUPS + ""String_Node_Str"" + Tables.GROUPS;
if (hasColumn(projection,Groups.SUMMARY_COUNT)) {
tables=tables + Joins.GROUP_MEMBER_COUNT;
}
qb.setTables(tables);
qb.setProjectionMap(returnGroupCountPerAccount ? sGroupsSummaryProjectionMapWithGroupCountPerAccount : sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=GroupsColumns.CONCRETE_ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mAggregator.get().queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.get().isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
case PROFILE_STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(mActiveDb.get(),uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(mActiveDb.get(),projection,lookupKey,filter);
}
case RAW_CONTACT_ENTITIES:
case PROFILE_RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(mActiveDb.get(),qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,mActiveDb.get(),qb,selection,selectionArgs,sortOrder,addressBookIndexerCountExpression);
}
if (snippetDeferred) {
cursor=addDeferredSnippetingExtra(cursor);
}
return cursor;
}",0.9928280546716568
152439,"protected void assertCursorValues(Cursor cursor,ContentValues[] expectedValues){
  StringBuilder message=new StringBuilder();
  for (  ContentValues v : expectedValues) {
    boolean found=false;
    cursor.moveToPosition(-1);
    while (cursor.moveToNext()) {
      found=equalsWithExpectedValues(cursor,v,message);
      if (found) {
        break;
      }
    }
    assertTrue(""String_Node_Str"" + v + message.toString(),found);
  }
}","protected void assertCursorValues(Cursor cursor,ContentValues[] expectedValues){
  StringBuilder message=new StringBuilder();
  final BitSet used=new BitSet(cursor.getCount());
  for (  ContentValues v : expectedValues) {
    boolean found=false;
    cursor.moveToPosition(-1);
    while (cursor.moveToNext()) {
      final int pos=cursor.getPosition();
      if (used.get(pos))       continue;
      found=equalsWithExpectedValues(cursor,v,message);
      if (found) {
        used.set(pos);
        break;
      }
    }
    assertTrue(""String_Node_Str"" + v + message.toString(),found);
  }
}",0.847424684159378
152440,"public void testPhoneUpdate(){
  ContentValues values=new ContentValues();
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  Uri phoneUri=insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertStoredValue(lookupUri1,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertStoredValue(lookupUri2,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.clear();
  values.putNull(Phone.NUMBER);
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertStoredValue(lookupUri2,PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  assertNetworkNotified(true);
}","public void testPhoneUpdate(){
  ContentValues values=new ContentValues();
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  Uri phoneUri=insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri1,null,null));
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(2,getCount(lookupUri2,null,null));
  values.clear();
  values.putNull(Phone.NUMBER);
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(0,getCount(lookupUri2,null,null));
  values.clear();
  values.put(Phone.NUMBER,""String_Node_Str"");
  mResolver.update(phoneUri,values,null,null);
  assertEquals(0,getCount(lookupUri1,null,null));
  assertEquals(2,getCount(lookupUri2,null,null));
  assertNetworkNotified(true);
}",0.6972704714640199
152441,"public void testPhoneLookup(){
  ContentValues values=new ContentValues();
  values.put(RawContacts.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(RawContacts.SEND_TO_VOICEMAIL,1);
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  values.clear();
  values.put(PhoneLookup._ID,queryContactId(rawContactId));
  values.put(PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.put(PhoneLookup.NUMBER,""String_Node_Str"");
  values.put(PhoneLookup.TYPE,Phone.TYPE_HOME);
  values.putNull(PhoneLookup.LABEL);
  values.put(PhoneLookup.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(PhoneLookup.SEND_TO_VOICEMAIL,1);
  assertStoredValues(lookupUri1,values);
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri2,null,null));
}","public void testPhoneLookup(){
  ContentValues values=new ContentValues();
  values.put(RawContacts.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(RawContacts.SEND_TO_VOICEMAIL,1);
  Uri rawContactUri=mResolver.insert(RawContacts.CONTENT_URI,values);
  long rawContactId=ContentUris.parseId(rawContactUri);
  insertStructuredName(rawContactId,""String_Node_Str"",""String_Node_Str"");
  insertPhoneNumber(rawContactId,""String_Node_Str"");
  Uri lookupUri1=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  values.clear();
  values.put(PhoneLookup._ID,queryContactId(rawContactId));
  values.put(PhoneLookup.DISPLAY_NAME,""String_Node_Str"");
  values.put(PhoneLookup.NUMBER,""String_Node_Str"");
  values.put(PhoneLookup.TYPE,Phone.TYPE_HOME);
  values.putNull(PhoneLookup.LABEL);
  values.put(PhoneLookup.CUSTOM_RINGTONE,""String_Node_Str"");
  values.put(PhoneLookup.SEND_TO_VOICEMAIL,1);
  assertStoredValues(lookupUri1,null,null,new ContentValues[]{values,values});
  Uri lookupUri2=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,""String_Node_Str"");
  assertEquals(2,getCount(lookupUri2,null,null));
}",0.9773960216998192
152442,"private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      if (!hasNumberE164) {
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(numberLen);
        sb.append(""String_Node_Str"");
        DatabaseUtils.appendEscapedSQLString(sb,number);
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(')');
  }
}","private void appendPhoneLookupSelection(StringBuilder sb,String number,String numberE164){
  sb.append(""String_Node_Str"");
  boolean hasNumberE164=!TextUtils.isEmpty(numberE164);
  boolean hasNumber=!TextUtils.isEmpty(number);
  if (hasNumberE164 || hasNumber) {
    sb.append(""String_Node_Str"");
    if (hasNumberE164) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,numberE164);
    }
    if (hasNumberE164 && hasNumber) {
      sb.append(""String_Node_Str"");
    }
    if (hasNumber) {
      int numberLen=number.length();
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(',');
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(numberLen);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,number);
      sb.append(""String_Node_Str"");
    }
    sb.append(')');
  }
}",0.8003369839932604
152443,"/** 
 * Finds all distinct account types and data sets present in the specified table.
 */
private Set<AccountWithDataSet> findValidAccountsWithDataSets(String table){
  Set<AccountWithDataSet> accountsWithDataSets=new HashSet<AccountWithDataSet>();
  Cursor c=mActiveDb.get().rawQuery(""String_Node_Str"" + RawContacts.ACCOUNT_NAME + ""String_Node_Str""+ RawContacts.ACCOUNT_TYPE+ ""String_Node_Str""+ RawContacts.DATA_SET+ ""String_Node_Str""+ table,null);
  try {
    while (c.moveToNext()) {
      if (!c.isNull(0) || !c.isNull(1)) {
        accountsWithDataSets.add(new AccountWithDataSet(c.getString(0),c.getString(1),c.getString(2)));
      }
    }
  }
  finally {
    c.close();
  }
  return accountsWithDataSets;
}","/** 
 * Finds all distinct account types and data sets present in the specified table.
 */
private Set<AccountWithDataSet> findValidAccountsWithDataSets(String table){
  Set<AccountWithDataSet> accountsWithDataSets=new HashSet<AccountWithDataSet>();
  Cursor c=mActiveDb.get().rawQuery(""String_Node_Str"" + RawContacts.ACCOUNT_NAME + ""String_Node_Str""+ RawContacts.ACCOUNT_TYPE+ ""String_Node_Str""+ RawContacts.DATA_SET+ ""String_Node_Str""+ table,null);
  try {
    while (c.moveToNext()) {
      if (!c.isNull(0) && !c.isNull(1)) {
        accountsWithDataSets.add(new AccountWithDataSet(c.getString(0),c.getString(1),c.getString(2)));
      }
    }
  }
  finally {
    c.close();
  }
  return accountsWithDataSets;
}",0.9972027972027973
152444,"/** 
 * Finds all distinct account types and data sets present in the specified table.
 */
private Set<AccountWithDataSet> findValidAccountsWithDataSets(String table){
  Set<AccountWithDataSet> accountsWithDataSets=new HashSet<AccountWithDataSet>();
  Cursor c=mActiveDb.get().rawQuery(""String_Node_Str"" + RawContacts.ACCOUNT_NAME + ""String_Node_Str""+ RawContacts.ACCOUNT_TYPE+ ""String_Node_Str""+ RawContacts.DATA_SET+ ""String_Node_Str""+ table,null);
  try {
    while (c.moveToNext()) {
      if (!c.isNull(0) || !c.isNull(1)) {
        accountsWithDataSets.add(new AccountWithDataSet(c.getString(0),c.getString(1),c.getString(2)));
      }
    }
  }
  finally {
    c.close();
  }
  return accountsWithDataSets;
}","/** 
 * Finds all distinct account types and data sets present in the specified table.
 */
private Set<AccountWithDataSet> findValidAccountsWithDataSets(String table){
  Set<AccountWithDataSet> accountsWithDataSets=new HashSet<AccountWithDataSet>();
  Cursor c=mActiveDb.get().rawQuery(""String_Node_Str"" + RawContacts.ACCOUNT_NAME + ""String_Node_Str""+ RawContacts.ACCOUNT_TYPE+ ""String_Node_Str""+ RawContacts.DATA_SET+ ""String_Node_Str""+ table,null);
  try {
    while (c.moveToNext()) {
      if (!c.isNull(0) && !c.isNull(1)) {
        accountsWithDataSets.add(new AccountWithDataSet(c.getString(0),c.getString(1),c.getString(2)));
      }
    }
  }
  finally {
    c.close();
  }
  return accountsWithDataSets;
}",0.9972027972027973
152445,"protected void cleanupPhotoStore(){
  SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  Cursor c=db.query(Views.DATA,new String[]{Data._ID,Photo.PHOTO_FILE_ID},Data.MIMETYPE + ""String_Node_Str"" + Photo.MIMETYPE+ ""String_Node_Str""+ Photo.PHOTO_FILE_ID+ ""String_Node_Str"",null,null,null,null);
  Set<Long> usedPhotoFileIds=Sets.newHashSet();
  Map<Long,Long> photoFileIdToDataId=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long dataId=c.getLong(0);
      long photoFileId=c.getLong(1);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToDataId.put(photoFileId,dataId);
    }
  }
  finally {
    c.close();
  }
  c=db.query(Tables.STREAM_ITEM_PHOTOS,new String[]{StreamItemPhotos._ID,StreamItemPhotos.STREAM_ITEM_ID,StreamItemPhotos.PHOTO_FILE_ID},null,null,null,null,null);
  Map<Long,Long> photoFileIdToStreamItemPhotoId=Maps.newHashMap();
  Map<Long,Long> streamItemPhotoIdToStreamItemId=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long streamItemPhotoId=c.getLong(0);
      long streamItemId=c.getLong(1);
      long photoFileId=c.getLong(2);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToStreamItemPhotoId.put(photoFileId,streamItemPhotoId);
      streamItemPhotoIdToStreamItemId.put(streamItemPhotoId,streamItemId);
    }
  }
  finally {
    c.close();
  }
  Set<Long> missingPhotoIds=mPhotoStore.get().cleanup(usedPhotoFileIds);
  if (!missingPhotoIds.isEmpty()) {
    ArrayList<ContentProviderOperation> ops=Lists.newArrayList();
    for (    long missingPhotoId : missingPhotoIds) {
      if (photoFileIdToDataId.containsKey(missingPhotoId)) {
        long dataId=photoFileIdToDataId.get(missingPhotoId);
        ContentValues updateValues=new ContentValues();
        updateValues.putNull(Photo.PHOTO_FILE_ID);
        ops.add(ContentProviderOperation.newUpdate(ContentUris.withAppendedId(Data.CONTENT_URI,dataId)).withValues(updateValues).build());
      }
      if (photoFileIdToStreamItemPhotoId.containsKey(missingPhotoId)) {
        long streamItemPhotoId=photoFileIdToStreamItemPhotoId.get(missingPhotoId);
        long streamItemId=streamItemPhotoIdToStreamItemId.get(streamItemPhotoId);
        ops.add(ContentProviderOperation.newDelete(StreamItems.CONTENT_URI.buildUpon().appendPath(String.valueOf(streamItemId)).appendPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY).appendPath(String.valueOf(streamItemPhotoId)).build()).build());
      }
    }
    try {
      applyBatch(ops);
    }
 catch (    OperationApplicationException oae) {
      Log.e(TAG,""String_Node_Str"",oae);
    }
  }
}","protected void cleanupPhotoStore(){
  SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  Cursor c=db.query(Views.DATA,new String[]{Data._ID,Photo.PHOTO_FILE_ID},Data.MIMETYPE + ""String_Node_Str"" + Photo.MIMETYPE+ ""String_Node_Str""+ Photo.PHOTO_FILE_ID+ ""String_Node_Str"",null,null,null,null);
  Set<Long> usedPhotoFileIds=Sets.newHashSet();
  Map<Long,Long> photoFileIdToDataId=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long dataId=c.getLong(0);
      long photoFileId=c.getLong(1);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToDataId.put(photoFileId,dataId);
    }
  }
  finally {
    c.close();
  }
  c=db.query(Tables.STREAM_ITEM_PHOTOS + ""String_Node_Str"" + Tables.STREAM_ITEMS+ ""String_Node_Str""+ StreamItemPhotos.STREAM_ITEM_ID+ ""String_Node_Str""+ StreamItemsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID,new String[]{StreamItemPhotosColumns.CONCRETE_ID,StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID,StreamItemPhotos.PHOTO_FILE_ID,RawContacts.ACCOUNT_TYPE,RawContacts.ACCOUNT_NAME},null,null,null,null,null);
  Map<Long,Long> photoFileIdToStreamItemPhotoId=Maps.newHashMap();
  Map<Long,Long> streamItemPhotoIdToStreamItemId=Maps.newHashMap();
  Map<Long,Account> streamItemPhotoIdToAccount=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long streamItemPhotoId=c.getLong(0);
      long streamItemId=c.getLong(1);
      long photoFileId=c.getLong(2);
      String accountType=c.getString(3);
      String accountName=c.getString(4);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToStreamItemPhotoId.put(photoFileId,streamItemPhotoId);
      streamItemPhotoIdToStreamItemId.put(streamItemPhotoId,streamItemId);
      Account account=new Account(accountName,accountType);
      streamItemPhotoIdToAccount.put(photoFileId,account);
    }
  }
  finally {
    c.close();
  }
  Set<Long> missingPhotoIds=mPhotoStore.get().cleanup(usedPhotoFileIds);
  if (!missingPhotoIds.isEmpty()) {
    ArrayList<ContentProviderOperation> ops=Lists.newArrayList();
    for (    long missingPhotoId : missingPhotoIds) {
      if (photoFileIdToDataId.containsKey(missingPhotoId)) {
        long dataId=photoFileIdToDataId.get(missingPhotoId);
        ContentValues updateValues=new ContentValues();
        updateValues.putNull(Photo.PHOTO_FILE_ID);
        ops.add(ContentProviderOperation.newUpdate(ContentUris.withAppendedId(Data.CONTENT_URI,dataId)).withValues(updateValues).build());
      }
      if (photoFileIdToStreamItemPhotoId.containsKey(missingPhotoId)) {
        long streamItemPhotoId=photoFileIdToStreamItemPhotoId.get(missingPhotoId);
        long streamItemId=streamItemPhotoIdToStreamItemId.get(streamItemPhotoId);
        Account account=streamItemPhotoIdToAccount.get(missingPhotoId);
        ops.add(ContentProviderOperation.newDelete(StreamItems.CONTENT_URI.buildUpon().appendPath(String.valueOf(streamItemId)).appendPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY).appendPath(String.valueOf(streamItemPhotoId)).appendQueryParameter(RawContacts.ACCOUNT_NAME,account.name).appendQueryParameter(RawContacts.ACCOUNT_TYPE,account.type).build()).build());
      }
    }
    try {
      applyBatch(ops);
    }
 catch (    OperationApplicationException oae) {
      Log.e(TAG,""String_Node_Str"",oae);
    }
  }
}",0.7155533232881299
152446,"public void testPhotoStoreCleanup() throws IOException {
  SynchronousContactsProvider2 provider=(SynchronousContactsProvider2)mActor.provider;
  provider.cleanupPhotoStore();
  long rawContactId1=createRawContactWithName();
  long contactId1=queryContactId(rawContactId1);
  long dataId1=ContentUris.parseId(insertPhoto(rawContactId1,R.drawable.earth_normal));
  long photoFileId1=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId1),Photo.PHOTO_FILE_ID);
  long rawContactId2=createRawContactWithName();
  long contactId2=queryContactId(rawContactId2);
  long dataId2=ContentUris.parseId(insertPhoto(rawContactId2,R.drawable.earth_normal));
  long photoFileId2=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  ContentValues values=new ContentValues();
  values.put(Data.RAW_CONTACT_ID,rawContactId2);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL));
  assertEquals(1,mResolver.update(Data.CONTENT_URI,values,Data._ID + ""String_Node_Str"",new String[]{String.valueOf(dataId2)}));
  long replacementPhotoFileId=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  long bogusFileId=1234567;
  long rawContactId3=createRawContactWithName();
  long contactId3=queryContactId(rawContactId3);
  values.clear();
  values.put(Data.RAW_CONTACT_ID,rawContactId3);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_normal,PhotoSize.THUMBNAIL));
  values.put(Photo.PHOTO_FILE_ID,bogusFileId);
  values.put(DataRowHandlerForPhoto.SKIP_PROCESSING_KEY,true);
  mResolver.insert(Data.CONTENT_URI,values);
  PhotoStore photoStore=provider.getPhotoStore();
  long bogusPhotoId=photoStore.insert(new PhotoProcessor(loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL),256,96));
  provider.cleanupPhotoStore();
  assertEquals(photoFileId1,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId1),Contacts.PHOTO_FILE_ID));
  assertEquals(replacementPhotoFileId,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId2),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(photoFileId2));
  assertNull(getStoredValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId3),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(bogusPhotoId));
}","public void testPhotoStoreCleanup() throws IOException {
  SynchronousContactsProvider2 provider=(SynchronousContactsProvider2)mActor.provider;
  PhotoStore photoStore=provider.getPhotoStore();
  provider.cleanupPhotoStore();
  long rawContactId1=createRawContactWithName();
  long contactId1=queryContactId(rawContactId1);
  long dataId1=ContentUris.parseId(insertPhoto(rawContactId1,R.drawable.earth_normal));
  long photoFileId1=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId1),Photo.PHOTO_FILE_ID);
  long rawContactId2=createRawContactWithName();
  long contactId2=queryContactId(rawContactId2);
  long dataId2=ContentUris.parseId(insertPhoto(rawContactId2,R.drawable.earth_normal));
  long photoFileId2=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  ContentValues values=new ContentValues();
  values.put(Data.RAW_CONTACT_ID,rawContactId2);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL));
  assertEquals(1,mResolver.update(Data.CONTENT_URI,values,Data._ID + ""String_Node_Str"",new String[]{String.valueOf(dataId2)}));
  long replacementPhotoFileId=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  long bogusFileId=1234567;
  long rawContactId3=createRawContactWithName();
  long contactId3=queryContactId(rawContactId3);
  values.clear();
  values.put(Data.RAW_CONTACT_ID,rawContactId3);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_normal,PhotoSize.THUMBNAIL));
  values.put(Photo.PHOTO_FILE_ID,bogusFileId);
  values.put(DataRowHandlerForPhoto.SKIP_PROCESSING_KEY,true);
  mResolver.insert(Data.CONTENT_URI,values);
  Account socialAccount=new Account(""String_Node_Str"",""String_Node_Str"");
  long rawContactId4=createRawContactWithName(socialAccount);
  Uri streamItemUri=insertStreamItem(rawContactId4,buildGenericStreamItemValues(),socialAccount);
  long streamItemId=ContentUris.parseId(streamItemUri);
  Uri streamItemPhotoUri=insertStreamItemPhoto(streamItemId,buildGenericStreamItemPhotoValues(0),socialAccount);
  long streamItemPhotoFileId=getStoredLongValue(streamItemPhotoUri,StreamItemPhotos.PHOTO_FILE_ID);
  photoStore.remove(streamItemPhotoFileId);
  long bogusPhotoId=photoStore.insert(new PhotoProcessor(loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL),256,96));
  provider.cleanupPhotoStore();
  assertEquals(photoFileId1,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId1),Contacts.PHOTO_FILE_ID));
  assertEquals(replacementPhotoFileId,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId2),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(photoFileId2));
  assertNull(getStoredValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId3),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(bogusPhotoId));
  assertStoredValues(Uri.withAppendedPath(ContentUris.withAppendedId(StreamItems.CONTENT_URI,streamItemId),StreamItems.StreamItemPhotos.CONTENT_DIRECTORY),new ContentValues[0]);
}",0.8568901468246949
152447,"@Override public int bulkInsert(Uri uri,ContentValues[] values){
  waitForAccess(mWriteAccessLatch);
  int numValues=values.length;
  boolean notifyChange=false;
  SQLiteDatabase profileDb=null;
  SQLiteDatabase contactsDb=mContactsHelper.getWritableDatabase();
  contactsDb.beginTransactionWithListener(this);
  try {
    for (int i=0; i < numValues; i++) {
      Uri result;
      if (mapsToProfileDbWithInsertedValues(uri,values[i])) {
        switchToProfileMode();
        if (profileDb == null) {
          profileDb=mProfileHelper.getWritableDatabase();
          profileDb.beginTransactionWithListener(this);
        }
        result=mProfileProvider.insertInTransaction(uri,values[i]);
      }
 else {
        switchToContactMode();
        result=insertInTransaction(uri,values[i]);
      }
      if (result != null) {
        notifyChange=true;
      }
      boolean savedNotifyChange=notifyChange;
      mActiveDb.get().yieldIfContendedSafely();
      notifyChange=savedNotifyChange;
    }
    contactsDb.setTransactionSuccessful();
    if (profileDb != null) {
      profileDb.setTransactionSuccessful();
    }
  }
  finally {
    contactsDb.endTransaction();
    if (profileDb != null) {
      profileDb.endTransaction();
    }
  }
  if (notifyChange) {
    notifyChange();
  }
  return numValues;
}","@Override public int bulkInsert(Uri uri,ContentValues[] values){
  waitForAccess(mWriteAccessLatch);
  int numValues=values.length;
  boolean notifyChange=false;
  SQLiteDatabase profileDb=null;
  mDb=mContactsHelper.getWritableDatabase();
  mDb.beginTransactionWithListener(this);
  try {
    for (int i=0; i < numValues; i++) {
      Uri result;
      if (mapsToProfileDbWithInsertedValues(uri,values[i])) {
        switchToProfileMode();
        if (profileDb == null) {
          profileDb=mProfileHelper.getWritableDatabase();
          profileDb.beginTransactionWithListener(this);
        }
        result=mProfileProvider.insertInTransaction(uri,values[i]);
      }
 else {
        switchToContactMode();
        result=insertInTransaction(uri,values[i]);
      }
      if (result != null) {
        notifyChange=true;
      }
      boolean savedNotifyChange=notifyChange;
      mActiveDb.get().yieldIfContendedSafely();
      notifyChange=savedNotifyChange;
    }
    mDb.setTransactionSuccessful();
    if (profileDb != null) {
      profileDb.setTransactionSuccessful();
    }
  }
  finally {
    mDb.endTransaction();
    if (profileDb != null) {
      profileDb.endTransaction();
    }
  }
  if (notifyChange) {
    notifyChange();
  }
  return numValues;
}",0.9802555168408827
152448,"protected void cleanupPhotoStore(){
  SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  Cursor c=db.query(Views.DATA,new String[]{Data._ID,Photo.PHOTO_FILE_ID},Data.MIMETYPE + ""String_Node_Str"" + Photo.MIMETYPE+ ""String_Node_Str""+ Photo.PHOTO_FILE_ID+ ""String_Node_Str"",null,null,null,null);
  Set<Long> usedPhotoFileIds=Sets.newHashSet();
  Map<Long,Long> photoFileIdToDataId=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long dataId=c.getLong(0);
      long photoFileId=c.getLong(1);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToDataId.put(photoFileId,dataId);
    }
  }
  finally {
    c.close();
  }
  c=db.query(Tables.STREAM_ITEM_PHOTOS,new String[]{StreamItemPhotos._ID,StreamItemPhotos.STREAM_ITEM_ID,StreamItemPhotos.PHOTO_FILE_ID},null,null,null,null,null);
  Map<Long,Long> photoFileIdToStreamItemPhotoId=Maps.newHashMap();
  Map<Long,Long> streamItemPhotoIdToStreamItemId=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long streamItemPhotoId=c.getLong(0);
      long streamItemId=c.getLong(1);
      long photoFileId=c.getLong(2);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToStreamItemPhotoId.put(photoFileId,streamItemPhotoId);
      streamItemPhotoIdToStreamItemId.put(streamItemPhotoId,streamItemId);
    }
  }
  finally {
    c.close();
  }
  Set<Long> missingPhotoIds=mPhotoStore.get().cleanup(usedPhotoFileIds);
  if (!missingPhotoIds.isEmpty()) {
    ArrayList<ContentProviderOperation> ops=Lists.newArrayList();
    for (    long missingPhotoId : missingPhotoIds) {
      if (photoFileIdToDataId.containsKey(missingPhotoId)) {
        long dataId=photoFileIdToDataId.get(missingPhotoId);
        ContentValues updateValues=new ContentValues();
        updateValues.putNull(Photo.PHOTO_FILE_ID);
        ops.add(ContentProviderOperation.newUpdate(ContentUris.withAppendedId(Data.CONTENT_URI,dataId)).withValues(updateValues).build());
      }
      if (photoFileIdToStreamItemPhotoId.containsKey(missingPhotoId)) {
        long streamItemPhotoId=photoFileIdToStreamItemPhotoId.get(missingPhotoId);
        long streamItemId=streamItemPhotoIdToStreamItemId.get(streamItemPhotoId);
        ops.add(ContentProviderOperation.newDelete(StreamItems.CONTENT_URI.buildUpon().appendPath(String.valueOf(streamItemId)).appendPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY).appendPath(String.valueOf(streamItemPhotoId)).build()).build());
      }
    }
    try {
      applyBatch(ops);
    }
 catch (    OperationApplicationException oae) {
      Log.e(TAG,""String_Node_Str"",oae);
    }
  }
}","protected void cleanupPhotoStore(){
  SQLiteDatabase db=mDbHelper.get().getWritableDatabase();
  Cursor c=db.query(Views.DATA,new String[]{Data._ID,Photo.PHOTO_FILE_ID},Data.MIMETYPE + ""String_Node_Str"" + Photo.MIMETYPE+ ""String_Node_Str""+ Photo.PHOTO_FILE_ID+ ""String_Node_Str"",null,null,null,null);
  Set<Long> usedPhotoFileIds=Sets.newHashSet();
  Map<Long,Long> photoFileIdToDataId=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long dataId=c.getLong(0);
      long photoFileId=c.getLong(1);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToDataId.put(photoFileId,dataId);
    }
  }
  finally {
    c.close();
  }
  c=db.query(Tables.STREAM_ITEM_PHOTOS + ""String_Node_Str"" + Tables.STREAM_ITEMS+ ""String_Node_Str""+ StreamItemPhotos.STREAM_ITEM_ID+ ""String_Node_Str""+ StreamItemsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ StreamItems.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID,new String[]{StreamItemPhotosColumns.CONCRETE_ID,StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID,StreamItemPhotos.PHOTO_FILE_ID,RawContacts.ACCOUNT_TYPE,RawContacts.ACCOUNT_NAME},null,null,null,null,null);
  Map<Long,Long> photoFileIdToStreamItemPhotoId=Maps.newHashMap();
  Map<Long,Long> streamItemPhotoIdToStreamItemId=Maps.newHashMap();
  Map<Long,Account> streamItemPhotoIdToAccount=Maps.newHashMap();
  try {
    while (c.moveToNext()) {
      long streamItemPhotoId=c.getLong(0);
      long streamItemId=c.getLong(1);
      long photoFileId=c.getLong(2);
      String accountType=c.getString(3);
      String accountName=c.getString(4);
      usedPhotoFileIds.add(photoFileId);
      photoFileIdToStreamItemPhotoId.put(photoFileId,streamItemPhotoId);
      streamItemPhotoIdToStreamItemId.put(streamItemPhotoId,streamItemId);
      Account account=new Account(accountName,accountType);
      streamItemPhotoIdToAccount.put(photoFileId,account);
    }
  }
  finally {
    c.close();
  }
  Set<Long> missingPhotoIds=mPhotoStore.get().cleanup(usedPhotoFileIds);
  if (!missingPhotoIds.isEmpty()) {
    ArrayList<ContentProviderOperation> ops=Lists.newArrayList();
    for (    long missingPhotoId : missingPhotoIds) {
      if (photoFileIdToDataId.containsKey(missingPhotoId)) {
        long dataId=photoFileIdToDataId.get(missingPhotoId);
        ContentValues updateValues=new ContentValues();
        updateValues.putNull(Photo.PHOTO_FILE_ID);
        ops.add(ContentProviderOperation.newUpdate(ContentUris.withAppendedId(Data.CONTENT_URI,dataId)).withValues(updateValues).build());
      }
      if (photoFileIdToStreamItemPhotoId.containsKey(missingPhotoId)) {
        long streamItemPhotoId=photoFileIdToStreamItemPhotoId.get(missingPhotoId);
        long streamItemId=streamItemPhotoIdToStreamItemId.get(streamItemPhotoId);
        Account account=streamItemPhotoIdToAccount.get(missingPhotoId);
        ops.add(ContentProviderOperation.newDelete(StreamItems.CONTENT_URI.buildUpon().appendPath(String.valueOf(streamItemId)).appendPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY).appendPath(String.valueOf(streamItemPhotoId)).appendQueryParameter(RawContacts.ACCOUNT_NAME,account.name).appendQueryParameter(RawContacts.ACCOUNT_TYPE,account.type).build()).build());
      }
    }
    try {
      applyBatch(ops);
    }
 catch (    OperationApplicationException oae) {
      Log.e(TAG,""String_Node_Str"",oae);
    }
  }
}",0.7155533232881299
152449,"public void testPhotoStoreCleanup() throws IOException {
  SynchronousContactsProvider2 provider=(SynchronousContactsProvider2)mActor.provider;
  provider.cleanupPhotoStore();
  long rawContactId1=createRawContactWithName();
  long contactId1=queryContactId(rawContactId1);
  long dataId1=ContentUris.parseId(insertPhoto(rawContactId1,R.drawable.earth_normal));
  long photoFileId1=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId1),Photo.PHOTO_FILE_ID);
  long rawContactId2=createRawContactWithName();
  long contactId2=queryContactId(rawContactId2);
  long dataId2=ContentUris.parseId(insertPhoto(rawContactId2,R.drawable.earth_normal));
  long photoFileId2=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  ContentValues values=new ContentValues();
  values.put(Data.RAW_CONTACT_ID,rawContactId2);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL));
  assertEquals(1,mResolver.update(Data.CONTENT_URI,values,Data._ID + ""String_Node_Str"",new String[]{String.valueOf(dataId2)}));
  long replacementPhotoFileId=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  long bogusFileId=1234567;
  long rawContactId3=createRawContactWithName();
  long contactId3=queryContactId(rawContactId3);
  values.clear();
  values.put(Data.RAW_CONTACT_ID,rawContactId3);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_normal,PhotoSize.THUMBNAIL));
  values.put(Photo.PHOTO_FILE_ID,bogusFileId);
  values.put(DataRowHandlerForPhoto.SKIP_PROCESSING_KEY,true);
  mResolver.insert(Data.CONTENT_URI,values);
  PhotoStore photoStore=provider.getPhotoStore();
  long bogusPhotoId=photoStore.insert(new PhotoProcessor(loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL),256,96));
  provider.cleanupPhotoStore();
  assertEquals(photoFileId1,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId1),Contacts.PHOTO_FILE_ID));
  assertEquals(replacementPhotoFileId,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId2),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(photoFileId2));
  assertNull(getStoredValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId3),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(bogusPhotoId));
}","public void testPhotoStoreCleanup() throws IOException {
  SynchronousContactsProvider2 provider=(SynchronousContactsProvider2)mActor.provider;
  PhotoStore photoStore=provider.getPhotoStore();
  provider.cleanupPhotoStore();
  long rawContactId1=createRawContactWithName();
  long contactId1=queryContactId(rawContactId1);
  long dataId1=ContentUris.parseId(insertPhoto(rawContactId1,R.drawable.earth_normal));
  long photoFileId1=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId1),Photo.PHOTO_FILE_ID);
  long rawContactId2=createRawContactWithName();
  long contactId2=queryContactId(rawContactId2);
  long dataId2=ContentUris.parseId(insertPhoto(rawContactId2,R.drawable.earth_normal));
  long photoFileId2=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  ContentValues values=new ContentValues();
  values.put(Data.RAW_CONTACT_ID,rawContactId2);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL));
  assertEquals(1,mResolver.update(Data.CONTENT_URI,values,Data._ID + ""String_Node_Str"",new String[]{String.valueOf(dataId2)}));
  long replacementPhotoFileId=getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI,dataId2),Photo.PHOTO_FILE_ID);
  long bogusFileId=1234567;
  long rawContactId3=createRawContactWithName();
  long contactId3=queryContactId(rawContactId3);
  values.clear();
  values.put(Data.RAW_CONTACT_ID,rawContactId3);
  values.put(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
  values.put(Photo.PHOTO,loadPhotoFromResource(R.drawable.earth_normal,PhotoSize.THUMBNAIL));
  values.put(Photo.PHOTO_FILE_ID,bogusFileId);
  values.put(DataRowHandlerForPhoto.SKIP_PROCESSING_KEY,true);
  mResolver.insert(Data.CONTENT_URI,values);
  Account socialAccount=new Account(""String_Node_Str"",""String_Node_Str"");
  long rawContactId4=createRawContactWithName(socialAccount);
  Uri streamItemUri=insertStreamItem(rawContactId4,buildGenericStreamItemValues(),socialAccount);
  long streamItemId=ContentUris.parseId(streamItemUri);
  Uri streamItemPhotoUri=insertStreamItemPhoto(streamItemId,buildGenericStreamItemPhotoValues(0),socialAccount);
  long streamItemPhotoFileId=getStoredLongValue(streamItemPhotoUri,StreamItemPhotos.PHOTO_FILE_ID);
  photoStore.remove(streamItemPhotoFileId);
  long bogusPhotoId=photoStore.insert(new PhotoProcessor(loadPhotoFromResource(R.drawable.earth_huge,PhotoSize.ORIGINAL),256,96));
  provider.cleanupPhotoStore();
  assertEquals(photoFileId1,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId1),Contacts.PHOTO_FILE_ID));
  assertEquals(replacementPhotoFileId,(long)getStoredLongValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId2),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(photoFileId2));
  assertNull(getStoredValue(ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId3),Contacts.PHOTO_FILE_ID));
  assertNull(photoStore.get(bogusPhotoId));
  assertStoredValues(Uri.withAppendedPath(ContentUris.withAppendedId(StreamItems.CONTENT_URI,streamItemId),StreamItems.StreamItemPhotos.CONTENT_DIRECTORY),new ContentValues[0]);
}",0.8568901468246949
152450,"@Override public int bulkInsert(Uri uri,ContentValues[] values){
  waitForAccess(mWriteAccessLatch);
  int numValues=values.length;
  boolean notifyChange=false;
  SQLiteDatabase profileDb=null;
  SQLiteDatabase contactsDb=mContactsHelper.getWritableDatabase();
  contactsDb.beginTransactionWithListener(this);
  try {
    for (int i=0; i < numValues; i++) {
      Uri result;
      if (mapsToProfileDbWithInsertedValues(uri,values[i])) {
        switchToProfileMode();
        if (profileDb == null) {
          profileDb=mProfileHelper.getWritableDatabase();
          profileDb.beginTransactionWithListener(this);
        }
        result=mProfileProvider.insertInTransaction(uri,values[i]);
      }
 else {
        switchToContactMode();
        result=insertInTransaction(uri,values[i]);
      }
      if (result != null) {
        notifyChange=true;
      }
      boolean savedNotifyChange=notifyChange;
      mActiveDb.get().yieldIfContendedSafely();
      notifyChange=savedNotifyChange;
    }
    contactsDb.setTransactionSuccessful();
    if (profileDb != null) {
      profileDb.setTransactionSuccessful();
    }
  }
  finally {
    contactsDb.endTransaction();
    if (profileDb != null) {
      profileDb.endTransaction();
    }
  }
  if (notifyChange) {
    notifyChange();
  }
  return numValues;
}","@Override public int bulkInsert(Uri uri,ContentValues[] values){
  waitForAccess(mWriteAccessLatch);
  int numValues=values.length;
  boolean notifyChange=false;
  SQLiteDatabase profileDb=null;
  mDb=mContactsHelper.getWritableDatabase();
  mDb.beginTransactionWithListener(this);
  try {
    for (int i=0; i < numValues; i++) {
      Uri result;
      if (mapsToProfileDbWithInsertedValues(uri,values[i])) {
        switchToProfileMode();
        if (profileDb == null) {
          profileDb=mProfileHelper.getWritableDatabase();
          profileDb.beginTransactionWithListener(this);
        }
        result=mProfileProvider.insertInTransaction(uri,values[i]);
      }
 else {
        switchToContactMode();
        result=insertInTransaction(uri,values[i]);
      }
      if (result != null) {
        notifyChange=true;
      }
      boolean savedNotifyChange=notifyChange;
      mActiveDb.get().yieldIfContendedSafely();
      notifyChange=savedNotifyChange;
    }
    mDb.setTransactionSuccessful();
    if (profileDb != null) {
      profileDb.setTransactionSuccessful();
    }
  }
  finally {
    mDb.endTransaction();
    if (profileDb != null) {
      profileDb.endTransaction();
    }
  }
  if (notifyChange) {
    notifyChange();
  }
  return numValues;
}",0.9802555168408827
152451,"public Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
    return mDbHelper.getSyncState().query(db,projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    boolean existingWhere=appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,existingWhere);
    sortOrder=prependProfileSortIfNeeded(uri,sortOrder);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  enforceProfilePermissionForContact(contactId,false);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  enforceProfilePermissionForContact(contactId,false);
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,RawContacts.CONTACT_ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId);
appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,false);
sortOrder=prependProfileSortIfNeeded(uri,sortOrder);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false,phoneOnly);
qb.setProjectionMap(sStrequentStarredProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String starredQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,null,null);
qb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForContacts(qb,uri,projection,true,phoneOnly);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String frequentQuery=qb.buildQuery(subProjection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str"",Contacts._ID,null,null,null);
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},STREQUENT_ORDER_BY,STREQUENT_LIMIT);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=db.rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
}
break;
}
case PROFILE:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForContacts(qb,uri,projection);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_ENTITIES:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForEntities(qb,uri,projection);
qb.appendWhere(""String_Node_Str"" + Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA_ID:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ RawContacts.RAW_CONTACT_IS_USER_PROFILE+ ""String_Node_Str"");
break;
}
case PROFILE_AS_VCARD:
{
enforceProfilePermission(false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItemsColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS,StreamItems.PHOTO_MAX_BYTES},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT,mMaxStreamItemPhotoSizeBytes});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true);
break;
}
case RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true);
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID:
{
enforceProfilePermission(false);
long rawContactId=ContentUris.parseId(uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_DATA:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true);
break;
}
case DATA_ID:
{
long dataId=ContentUris.parseId(uri);
enforceProfilePermissionForData(dataId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONE_LOOKUP:
{
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
selection=null;
selectionArgs=null;
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
qb.setTables(Views.GROUPS + ""String_Node_Str"");
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=Groups._ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mContactAggregator.queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(db,uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(db,projection,lookupKey,filter);
}
case LIVE_FOLDERS_CONTACTS:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
break;
case LIVE_FOLDERS_CONTACTS_WITH_PHONES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.HAS_PHONE_NUMBER + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_FAVORITES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.STARRED + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_GROUP_NAME:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
break;
case RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(db,qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,db,qb,selection,selectionArgs,sortOrder);
}
return cursor;
}","private Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId,boolean suppressProfileCheck){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
    return mDbHelper.getSyncState().query(db,projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    boolean existingWhere=appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,existingWhere,suppressProfileCheck);
    sortOrder=prependProfileSortIfNeeded(uri,sortOrder,suppressProfileCheck);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  enforceProfilePermissionForContact(contactId,false);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  enforceProfilePermissionForContact(contactId,false);
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,RawContacts.CONTACT_ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId);
appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,false,suppressProfileCheck);
sortOrder=prependProfileSortIfNeeded(uri,sortOrder,suppressProfileCheck);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false,phoneOnly);
qb.setProjectionMap(sStrequentStarredProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String starredQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,null,null);
qb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForContacts(qb,uri,projection,true,phoneOnly);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String frequentQuery=qb.buildQuery(subProjection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str"",Contacts._ID,null,null,null);
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},STREQUENT_ORDER_BY,STREQUENT_LIMIT);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=db.rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
}
break;
}
case PROFILE:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForContacts(qb,uri,projection);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_ENTITIES:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForEntities(qb,uri,projection);
qb.appendWhere(""String_Node_Str"" + Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA_ID:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ RawContacts.RAW_CONTACT_IS_USER_PROFILE+ ""String_Node_Str"");
break;
}
case PROFILE_AS_VCARD:
{
enforceProfilePermission(false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItemsColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS,StreamItems.PHOTO_MAX_BYTES},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT,mMaxStreamItemPhotoSizeBytes});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true,suppressProfileCheck);
break;
}
case RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true,suppressProfileCheck);
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID:
{
enforceProfilePermission(false);
long rawContactId=ContentUris.parseId(uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_DATA:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true,suppressProfileCheck);
break;
}
case DATA_ID:
{
long dataId=ContentUris.parseId(uri);
enforceProfilePermissionForData(dataId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONE_LOOKUP:
{
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
selection=null;
selectionArgs=null;
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
qb.setTables(Views.GROUPS + ""String_Node_Str"");
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=Groups._ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mContactAggregator.queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(db,uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(db,projection,lookupKey,filter);
}
case LIVE_FOLDERS_CONTACTS:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
break;
case LIVE_FOLDERS_CONTACTS_WITH_PHONES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.HAS_PHONE_NUMBER + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_FAVORITES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.STARRED + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_GROUP_NAME:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
break;
case RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(db,qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,db,qb,selection,selectionArgs,sortOrder);
}
return cursor;
}",0.9966652994989031
152452,"private boolean shouldIncludeProfile(Uri uri){
  boolean profileRequested=readBooleanQueryParameter(uri,ContactsContract.ALLOW_PROFILE,false);
  if (profileRequested) {
    enforceProfilePermission(false);
  }
  return profileRequested;
}","private boolean shouldIncludeProfile(Uri uri,boolean suppressProfileCheck){
  boolean profileRequested=readBooleanQueryParameter(uri,ContactsContract.ALLOW_PROFILE,false);
  if (profileRequested && !suppressProfileCheck) {
    enforceProfilePermission(false);
  }
  return profileRequested;
}",0.8981132075471698
152453,"private void appendProfileRestriction(SQLiteQueryBuilder qb,Uri uri,String profileColumn,boolean andRequired){
  if (!shouldIncludeProfile(uri)) {
    qb.appendWhere((andRequired ? ""String_Node_Str"" : ""String_Node_Str"") + profileColumn + ""String_Node_Str""+ profileColumn+ ""String_Node_Str""+ (andRequired ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","private void appendProfileRestriction(SQLiteQueryBuilder qb,Uri uri,String profileColumn,boolean andRequired,boolean suppressProfileCheck){
  if (!shouldIncludeProfile(uri,suppressProfileCheck)) {
    qb.appendWhere((andRequired ? ""String_Node_Str"" : ""String_Node_Str"") + profileColumn + ""String_Node_Str""+ profileColumn+ ""String_Node_Str""+ (andRequired ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.93368700265252
152454,"private String prependProfileSortIfNeeded(Uri uri,String sortOrder){
  if (shouldIncludeProfile(uri)) {
    if (TextUtils.isEmpty(sortOrder)) {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"";
    }
 else {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"" + sortOrder;
    }
  }
  return sortOrder;
}","private String prependProfileSortIfNeeded(Uri uri,String sortOrder,boolean suppressProfileCheck){
  if (shouldIncludeProfile(uri,suppressProfileCheck)) {
    if (TextUtils.isEmpty(sortOrder)) {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"";
    }
 else {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"" + sortOrder;
    }
  }
  return sortOrder;
}",0.9273255813953488
152455,"public Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
    return mDbHelper.getSyncState().query(db,projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    boolean existingWhere=appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,existingWhere);
    sortOrder=prependProfileSortIfNeeded(uri,sortOrder);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  enforceProfilePermissionForContact(contactId,false);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  enforceProfilePermissionForContact(contactId,false);
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,RawContacts.CONTACT_ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId);
appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,false);
sortOrder=prependProfileSortIfNeeded(uri,sortOrder);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false,phoneOnly);
qb.setProjectionMap(sStrequentStarredProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String starredQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,null,null);
qb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForContacts(qb,uri,projection,true,phoneOnly);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String frequentQuery=qb.buildQuery(subProjection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str"",Contacts._ID,null,null,null);
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},STREQUENT_ORDER_BY,STREQUENT_LIMIT);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=db.rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
}
break;
}
case PROFILE:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForContacts(qb,uri,projection);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_ENTITIES:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForEntities(qb,uri,projection);
qb.appendWhere(""String_Node_Str"" + Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA_ID:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ RawContacts.RAW_CONTACT_IS_USER_PROFILE+ ""String_Node_Str"");
break;
}
case PROFILE_AS_VCARD:
{
enforceProfilePermission(false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItemsColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS,StreamItems.PHOTO_MAX_BYTES},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT,mMaxStreamItemPhotoSizeBytes});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true);
break;
}
case RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true);
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID:
{
enforceProfilePermission(false);
long rawContactId=ContentUris.parseId(uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_DATA:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true);
break;
}
case DATA_ID:
{
long dataId=ContentUris.parseId(uri);
enforceProfilePermissionForData(dataId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONE_LOOKUP:
{
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
selection=null;
selectionArgs=null;
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
qb.setTables(Views.GROUPS + ""String_Node_Str"");
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=Groups._ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mContactAggregator.queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(db,uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(db,projection,lookupKey,filter);
}
case LIVE_FOLDERS_CONTACTS:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
break;
case LIVE_FOLDERS_CONTACTS_WITH_PHONES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.HAS_PHONE_NUMBER + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_FAVORITES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.STARRED + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_GROUP_NAME:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
break;
case RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(db,qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,db,qb,selection,selectionArgs,sortOrder);
}
return cursor;
}","private Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,long directoryId,boolean suppressProfileCheck){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
    return mDbHelper.getSyncState().query(db,projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    boolean existingWhere=appendLocalDirectorySelectionIfNeeded(qb,directoryId);
    appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,existingWhere,suppressProfileCheck);
    sortOrder=prependProfileSortIfNeeded(uri,sortOrder,suppressProfileCheck);
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  enforceProfilePermissionForContact(contactId,false);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  enforceProfilePermissionForContact(contactId,false);
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts._ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
  if (c != null) {
    return c;
  }
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Data.CONTACT_ID,contactId,Data.LOOKUP_KEY,lookupKey);
if (c != null) {
  return c;
}
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_STREAM_ITEMS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContactsColumns.CONCRETE_CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_STREAM_ITEMS:
case CONTACTS_LOOKUP_ID_STREAM_ITEMS:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
enforceProfilePermissionForContact(contactId,false);
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForStreamItems(lookupQb);
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,RawContacts.CONTACT_ID,contactId,Contacts.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForStreamItems(qb);
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
long contactId=lookupContactIdByLookupKey(db,lookupKey);
enforceProfilePermissionForContact(contactId,false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam,directoryId);
appendProfileRestriction(qb,uri,Contacts.IS_USER_PROFILE,false,suppressProfileCheck);
sortOrder=prependProfileSortIfNeeded(uri,sortOrder,suppressProfileCheck);
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
final boolean phoneOnly=readBooleanQueryParameter(uri,ContactsContract.STREQUENT_PHONE_ONLY,false);
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
selection=DbQueryUtils.concatenateClauses(selection,sb.toString());
}
String[] subProjection=null;
if (projection != null) {
subProjection=appendProjectionArg(projection,TIMES_USED_SORT_COLUMN);
}
setTablesAndProjectionMapForContacts(qb,uri,projection,false,phoneOnly);
qb.setProjectionMap(sStrequentStarredProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String starredQuery=qb.buildQuery(subProjection,Contacts.STARRED + ""String_Node_Str"",Contacts._ID,null,null,null);
qb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForContacts(qb,uri,projection,true,phoneOnly);
qb.setProjectionMap(sStrequentFrequentProjectionMap);
qb.appendWhere(DbQueryUtils.concatenateClauses(selection,Contacts.IS_USER_PROFILE + ""String_Node_Str""));
qb.setStrict(true);
final String frequentQuery=qb.buildQuery(subProjection,""String_Node_Str"" + Contacts.STARRED + ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str"",Contacts._ID,null,null,null);
final String unionQuery=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},STREQUENT_ORDER_BY,STREQUENT_LIMIT);
String[] doubledSelectionArgs=null;
if (selectionArgs != null) {
final int length=selectionArgs.length;
doubledSelectionArgs=new String[length * 2];
System.arraycopy(selectionArgs,0,doubledSelectionArgs,0,length);
System.arraycopy(selectionArgs,0,doubledSelectionArgs,length,length);
}
Cursor cursor=db.rawQuery(unionQuery,doubledSelectionArgs);
if (cursor != null) {
cursor.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return cursor;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
}
break;
}
case PROFILE:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForContacts(qb,uri,projection);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_ENTITIES:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForEntities(qb,uri,projection);
qb.appendWhere(""String_Node_Str"" + Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_DATA_ID:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ RawContacts.RAW_CONTACT_IS_USER_PROFILE+ ""String_Node_Str"");
break;
}
case PROFILE_AS_VCARD:
{
enforceProfilePermission(false);
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sContactsVCardProjectionMap);
qb.appendWhere(Contacts.IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case CONTACTS_ID_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_ID_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForContact(contactId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case CONTACTS_ID_ENTITIES:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_ENTITIES:
case CONTACTS_LOOKUP_ID_ENTITIES:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForEntities(lookupQb,uri,projection);
lookupQb.appendWhere(""String_Node_Str"");
Cursor c=queryWithContactIdAndLookupKey(lookupQb,db,uri,projection,selection,selectionArgs,sortOrder,groupBy,limit,Contacts.Entity.CONTACT_ID,contactId,Contacts.Entity.LOOKUP_KEY,lookupKey);
if (c != null) {
return c;
}
}
setTablesAndProjectionMapForEntities(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(""String_Node_Str"" + Contacts.Entity.CONTACT_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS:
{
setTablesAndProjectionMapForStreamItems(qb);
break;
}
case STREAM_ITEMS_ID:
{
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(StreamItemsColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_LIMIT:
{
MatrixCursor cursor=new MatrixCursor(new String[]{StreamItems.MAX_ITEMS,StreamItems.PHOTO_MAX_BYTES},1);
cursor.addRow(new Object[]{MAX_STREAM_ITEMS_PER_RAW_CONTACT,mMaxStreamItemPhotoSizeBytes});
return cursor;
}
case STREAM_ITEMS_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
break;
}
case STREAM_ITEMS_ID_PHOTOS:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"");
break;
}
case STREAM_ITEMS_ID_PHOTOS_ID:
{
setTablesAndProjectionMapForStreamItemPhotos(qb);
String streamItemId=uri.getPathSegments().get(1);
String streamItemPhotoId=uri.getPathSegments().get(3);
selectionArgs=insertSelectionArg(selectionArgs,streamItemPhotoId);
selectionArgs=insertSelectionArg(selectionArgs,streamItemId);
qb.appendWhere(StreamItemPhotosColumns.CONCRETE_STREAM_ITEM_ID + ""String_Node_Str"" + StreamItemPhotosColumns.CONCRETE_ID+ ""String_Node_Str"");
break;
}
case PHOTO_DIMENSIONS:
{
MatrixCursor cursor=new MatrixCursor(new String[]{DisplayPhoto.DISPLAY_MAX_DIM,DisplayPhoto.THUMBNAIL_MAX_DIM},1);
cursor.addRow(new Object[]{mMaxDisplayPhotoDim,mMaxThumbnailPhotoDim});
return cursor;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_CALL;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"" + ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
orNeeded=true;
hasCondition=true;
}
String number=PhoneNumberUtils.normalizeNumber(filterParam);
if (!TextUtils.isEmpty(number)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(number);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + PHONE_FILTER_SORT_ORDER;
}
 else {
sortOrder=PHONE_FILTER_SORT_ORDER;
}
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
break;
}
case EMAILS_FILTER:
{
String typeParam=uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
Integer typeInt=sDataUsageTypeMap.get(typeParam);
if (typeInt == null) {
typeInt=DataUsageStatColumns.USAGE_TYPE_INT_LONG_TEXT;
}
setTablesAndProjectionMapForData(qb,uri,projection,true,typeInt);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.DATA1 + ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str"");
sb.append(mDbHelper.getMimeTypeIdForEmail());
sb.append(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.SEARCH_INDEX+ ""String_Node_Str""+ SearchIndexColumns.CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ SearchIndexColumns.NAME+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,sanitizeMatch(filterParam) + ""String_Node_Str"");
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
final String accountPromotionSortOrder=getAccountPromotionSortOrder(uri);
if (!TextUtils.isEmpty(accountPromotionSortOrder)) {
sortOrder=accountPromotionSortOrder + ""String_Node_Str"" + EMAIL_FILTER_SORT_ORDER;
}
 else {
sortOrder=EMAIL_FILTER_SORT_ORDER;
}
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true,suppressProfileCheck);
break;
}
case RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true,suppressProfileCheck);
break;
}
case RAW_CONTACTS_ID_STREAM_ITEMS:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
enforceProfilePermissionForRawContact(rawContactId,false);
setTablesAndProjectionMapForStreamItems(qb);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(StreamItems.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS:
{
enforceProfilePermission(false);
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID:
{
enforceProfilePermission(false);
long rawContactId=ContentUris.parseId(uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawContacts(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_DATA:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
break;
}
case PROFILE_RAW_CONTACTS_ID_ENTITIES:
{
enforceProfilePermission(false);
long rawContactId=Long.parseLong(uri.getPathSegments().get(2));
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
setTablesAndProjectionMapForRawEntities(qb,uri);
qb.appendWhere(""String_Node_Str"" + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
break;
}
case DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
appendProfileRestriction(qb,uri,RawContacts.RAW_CONTACT_IS_USER_PROFILE,true,suppressProfileCheck);
break;
}
case DATA_ID:
{
long dataId=ContentUris.parseId(uri);
enforceProfilePermissionForData(dataId,false);
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONE_LOOKUP:
{
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=""String_Node_Str"";
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.getCurrentCountryIso());
String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
mDbHelper.buildPhoneLookupAndContactQuery(qb,normalizedNumber,numberE164);
qb.setProjectionMap(sPhoneLookupProjectionMap);
selection=null;
selectionArgs=null;
break;
}
case GROUPS:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(Views.GROUPS);
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
qb.setTables(Views.GROUPS + ""String_Node_Str"");
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=Groups._ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
ArrayList<AggregationSuggestionParameter> parameters=null;
List<String> query=uri.getQueryParameters(""String_Node_Str"");
if (query != null && !query.isEmpty()) {
parameters=new ArrayList<AggregationSuggestionParameter>(query.size());
for (String parameter : query) {
int offset=parameter.indexOf(':');
parameters.add(offset == -1 ? new AggregationSuggestionParameter(AggregationSuggestions.PARAMETER_MATCH_NAME,parameter) : new AggregationSuggestionParameter(parameter.substring(0,offset),parameter.substring(offset + 1)));
}
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mContactAggregator.queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter,parameters);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(db,uri,projection,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
String filter=getQueryParameter(uri,SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
return mGlobalSearchSupport.handleSearchShortcutRefresh(db,projection,lookupKey,filter);
}
case LIVE_FOLDERS_CONTACTS:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
break;
case LIVE_FOLDERS_CONTACTS_WITH_PHONES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.HAS_PHONE_NUMBER + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_FAVORITES:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.STARRED + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_GROUP_NAME:
qb.setTables(Views.CONTACTS);
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
break;
case RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long id=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(id));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
case COMPLETE_NAME:
{
return completeName(uri,projection);
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrict(true);
Cursor cursor=query(db,qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,db,qb,selection,selectionArgs,sortOrder);
}
return cursor;
}",0.9966652994989031
152456,"private boolean shouldIncludeProfile(Uri uri){
  boolean profileRequested=readBooleanQueryParameter(uri,ContactsContract.ALLOW_PROFILE,false);
  if (profileRequested) {
    enforceProfilePermission(false);
  }
  return profileRequested;
}","private boolean shouldIncludeProfile(Uri uri,boolean suppressProfileCheck){
  boolean profileRequested=readBooleanQueryParameter(uri,ContactsContract.ALLOW_PROFILE,false);
  if (profileRequested && !suppressProfileCheck) {
    enforceProfilePermission(false);
  }
  return profileRequested;
}",0.8981132075471698
152457,"private void appendProfileRestriction(SQLiteQueryBuilder qb,Uri uri,String profileColumn,boolean andRequired){
  if (!shouldIncludeProfile(uri)) {
    qb.appendWhere((andRequired ? ""String_Node_Str"" : ""String_Node_Str"") + profileColumn + ""String_Node_Str""+ profileColumn+ ""String_Node_Str""+ (andRequired ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","private void appendProfileRestriction(SQLiteQueryBuilder qb,Uri uri,String profileColumn,boolean andRequired,boolean suppressProfileCheck){
  if (!shouldIncludeProfile(uri,suppressProfileCheck)) {
    qb.appendWhere((andRequired ? ""String_Node_Str"" : ""String_Node_Str"") + profileColumn + ""String_Node_Str""+ profileColumn+ ""String_Node_Str""+ (andRequired ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}",0.93368700265252
152458,"private String prependProfileSortIfNeeded(Uri uri,String sortOrder){
  if (shouldIncludeProfile(uri)) {
    if (TextUtils.isEmpty(sortOrder)) {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"";
    }
 else {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"" + sortOrder;
    }
  }
  return sortOrder;
}","private String prependProfileSortIfNeeded(Uri uri,String sortOrder,boolean suppressProfileCheck){
  if (shouldIncludeProfile(uri,suppressProfileCheck)) {
    if (TextUtils.isEmpty(sortOrder)) {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"";
    }
 else {
      return Contacts.IS_USER_PROFILE + ""String_Node_Str"" + sortOrder;
    }
  }
  return sortOrder;
}",0.9273255813953488
152459,"private CursorWrapper wrapCursor(Uri uri,Cursor cursor){
  String[] args=null;
  String snippetArgs=getQueryParameter(uri,SearchSnippetColumns.SNIPPET_ARGS_PARAM_KEY);
  if (snippetArgs != null) {
    args=snippetArgs.split(""String_Node_Str"");
  }
  String query=uri.getLastPathSegment();
  String startMatch=args != null && args.length > 0 ? args[0] : DEFAULT_SNIPPET_ARG_START_MATCH;
  String endMatch=args != null && args.length > 1 ? args[1] : DEFAULT_SNIPPET_ARG_END_MATCH;
  String ellipsis=args != null && args.length > 2 ? args[2] : DEFAULT_SNIPPET_ARG_ELLIPSIS;
  int maxTokens=args != null && args.length > 3 ? Integer.parseInt(args[3]) : DEFAULT_SNIPPET_ARG_MAX_TOKENS;
  CrossProcessCursor crossProcessCursor=getCrossProcessCursor(cursor);
  if (crossProcessCursor != null) {
    return new SnippetizingCursorWrapper(cursor,query,startMatch,endMatch,ellipsis,maxTokens);
  }
 else {
    return new SnippetizingCursorWrapper(matrixCursorFromCursor(cursor),query,startMatch,endMatch,ellipsis,maxTokens);
  }
}","private Cursor wrapCursor(Uri uri,Cursor cursor){
  if (cursor.getColumnIndex(SearchSnippetColumns.SNIPPET) < 0) {
    return cursor;
  }
  String[] args=null;
  String snippetArgs=getQueryParameter(uri,SearchSnippetColumns.SNIPPET_ARGS_PARAM_KEY);
  if (snippetArgs != null) {
    args=snippetArgs.split(""String_Node_Str"");
  }
  String query=uri.getLastPathSegment();
  String startMatch=args != null && args.length > 0 ? args[0] : DEFAULT_SNIPPET_ARG_START_MATCH;
  String endMatch=args != null && args.length > 1 ? args[1] : DEFAULT_SNIPPET_ARG_END_MATCH;
  String ellipsis=args != null && args.length > 2 ? args[2] : DEFAULT_SNIPPET_ARG_ELLIPSIS;
  int maxTokens=args != null && args.length > 3 ? Integer.parseInt(args[3]) : DEFAULT_SNIPPET_ARG_MAX_TOKENS;
  return new SnippetizingCursorWrapper(cursor,query,startMatch,endMatch,ellipsis,maxTokens);
}",0.8192
152460,"private CursorWrapper wrapCursor(Uri uri,Cursor cursor){
  String[] args=null;
  String snippetArgs=getQueryParameter(uri,SearchSnippetColumns.SNIPPET_ARGS_PARAM_KEY);
  if (snippetArgs != null) {
    args=snippetArgs.split(""String_Node_Str"");
  }
  String query=uri.getLastPathSegment();
  String startMatch=args != null && args.length > 0 ? args[0] : DEFAULT_SNIPPET_ARG_START_MATCH;
  String endMatch=args != null && args.length > 1 ? args[1] : DEFAULT_SNIPPET_ARG_END_MATCH;
  String ellipsis=args != null && args.length > 2 ? args[2] : DEFAULT_SNIPPET_ARG_ELLIPSIS;
  int maxTokens=args != null && args.length > 3 ? Integer.parseInt(args[3]) : DEFAULT_SNIPPET_ARG_MAX_TOKENS;
  CrossProcessCursor crossProcessCursor=getCrossProcessCursor(cursor);
  if (crossProcessCursor != null) {
    return new SnippetizingCursorWrapper(cursor,query,startMatch,endMatch,ellipsis,maxTokens);
  }
 else {
    return new SnippetizingCursorWrapper(matrixCursorFromCursor(cursor),query,startMatch,endMatch,ellipsis,maxTokens);
  }
}","private Cursor wrapCursor(Uri uri,Cursor cursor){
  if (cursor.getColumnIndex(SearchSnippetColumns.SNIPPET) < 0) {
    return cursor;
  }
  String[] args=null;
  String snippetArgs=getQueryParameter(uri,SearchSnippetColumns.SNIPPET_ARGS_PARAM_KEY);
  if (snippetArgs != null) {
    args=snippetArgs.split(""String_Node_Str"");
  }
  String query=uri.getLastPathSegment();
  String startMatch=args != null && args.length > 0 ? args[0] : DEFAULT_SNIPPET_ARG_START_MATCH;
  String endMatch=args != null && args.length > 1 ? args[1] : DEFAULT_SNIPPET_ARG_END_MATCH;
  String ellipsis=args != null && args.length > 2 ? args[2] : DEFAULT_SNIPPET_ARG_ELLIPSIS;
  int maxTokens=args != null && args.length > 3 ? Integer.parseInt(args[3]) : DEFAULT_SNIPPET_ARG_MAX_TOKENS;
  return new SnippetizingCursorWrapper(cursor,query,startMatch,endMatch,ellipsis,maxTokens);
}",0.8192
152461,"private void appendSearchIndexJoin(StringBuilder sb,Uri uri,String[] projection,String filter){
  sb.append(""String_Node_Str"" + SearchIndexColumns.CONTACT_ID + ""String_Node_Str"");
  boolean snippetNeeded=mDbHelper.isInProjection(projection,SearchSnippetColumns.SNIPPET);
  boolean isEmailAddress=false;
  String emailAddress=null;
  boolean isPhoneNumber=false;
  String phoneNumber=null;
  if (snippetNeeded) {
    if (filter.indexOf('@') != -1) {
      emailAddress=mDbHelper.extractAddressFromEmailAddress(filter);
      isEmailAddress=!TextUtils.isEmpty(emailAddress);
    }
 else {
      isPhoneNumber=isPhoneNumber(filter);
    }
    String[] args=null;
    String snippetArgs=getQueryParameter(uri,SearchSnippetColumns.SNIPPET_ARGS_PARAM_KEY);
    if (snippetArgs != null) {
      args=snippetArgs.split(""String_Node_Str"");
    }
    String startMatch=args != null && args.length > 0 ? args[0] : DEFAULT_SNIPPET_ARG_START_MATCH;
    String endMatch=args != null && args.length > 1 ? args[1] : DEFAULT_SNIPPET_ARG_END_MATCH;
    String ellipsis=args != null && args.length > 2 ? args[2] : DEFAULT_SNIPPET_ARG_ELLIPSIS;
    int maxTokens=args != null && args.length > 3 ? Integer.parseInt(args[3]) : DEFAULT_SNIPPET_ARG_MAX_TOKENS;
    sb.append(""String_Node_Str"");
    if (isEmailAddress) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,startMatch);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,endMatch);
      sb.append(""String_Node_Str"");
      appendSnippetFunction(sb,startMatch,endMatch,ellipsis,maxTokens);
      sb.append(""String_Node_Str"");
    }
 else     if (isPhoneNumber) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,startMatch);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,endMatch);
      sb.append(""String_Node_Str"");
      appendSnippetFunction(sb,startMatch,endMatch,ellipsis,maxTokens);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      appendSnippetFunction(sb,startMatch,endMatch,ellipsis,maxTokens);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"" + SearchSnippetColumns.SNIPPET);
  }
  sb.append(""String_Node_Str"" + Tables.SEARCH_INDEX);
  if (isEmailAddress) {
    sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Email.ADDRESS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA_JOIN_RAW_CONTACTS+ ""String_Node_Str""+ Email.ADDRESS+ ""String_Node_Str"");
    DatabaseUtils.appendEscapedSQLString(sb,filter + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else   if (isPhoneNumber) {
    phoneNumber=PhoneNumberUtils.normalizeNumber(filter);
    sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA_JOIN_RAW_CONTACTS+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
    sb.append(phoneNumber);
    sb.append(""String_Node_Str"");
    String numberE164=PhoneNumberUtils.formatNumberToE164(phoneNumber,mDbHelper.getCountryIso());
    if (!TextUtils.isEmpty(numberE164)) {
      sb.append(""String_Node_Str"" + PhoneLookupColumns.NORMALIZED_NUMBER + ""String_Node_Str"");
      sb.append(numberE164);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str"");
    String normalizedFilter=NameNormalizer.normalize(filter);
    if (!TextUtils.isEmpty(normalizedFilter)) {
      sb.append(""String_Node_Str"");
      sb.append(normalizedFilter);
      sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY);
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(Tables.SEARCH_INDEX + ""String_Node_Str"");
  if (isEmailAddress) {
    DatabaseUtils.appendEscapedSQLString(sb,""String_Node_Str"" + filter + ""String_Node_Str"");
  }
 else   if (isPhoneNumber) {
    DatabaseUtils.appendEscapedSQLString(sb,""String_Node_Str"" + filter + ""String_Node_Str""+ phoneNumber+ ""String_Node_Str"");
  }
 else {
    DatabaseUtils.appendEscapedSQLString(sb,filter + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
}","private void appendSearchIndexJoin(StringBuilder sb,Uri uri,String[] projection,String filter){
  sb.append(""String_Node_Str"" + SearchIndexColumns.CONTACT_ID + ""String_Node_Str"");
  boolean snippetNeeded=mDbHelper.isInProjection(projection,SearchSnippetColumns.SNIPPET);
  boolean isEmailAddress=false;
  String emailAddress=null;
  boolean isPhoneNumber=false;
  String phoneNumber=null;
  String numberE164=null;
  if (filter.indexOf('@') != -1) {
    emailAddress=mDbHelper.extractAddressFromEmailAddress(filter);
    isEmailAddress=!TextUtils.isEmpty(emailAddress);
  }
 else {
    isPhoneNumber=isPhoneNumber(filter);
  }
  if (snippetNeeded) {
    String[] args=null;
    String snippetArgs=getQueryParameter(uri,SearchSnippetColumns.SNIPPET_ARGS_PARAM_KEY);
    if (snippetArgs != null) {
      args=snippetArgs.split(""String_Node_Str"");
    }
    String startMatch=args != null && args.length > 0 ? args[0] : DEFAULT_SNIPPET_ARG_START_MATCH;
    String endMatch=args != null && args.length > 1 ? args[1] : DEFAULT_SNIPPET_ARG_END_MATCH;
    String ellipsis=args != null && args.length > 2 ? args[2] : DEFAULT_SNIPPET_ARG_ELLIPSIS;
    int maxTokens=args != null && args.length > 3 ? Integer.parseInt(args[3]) : DEFAULT_SNIPPET_ARG_MAX_TOKENS;
    sb.append(""String_Node_Str"");
    if (isEmailAddress) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,startMatch);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,endMatch);
      sb.append(""String_Node_Str"");
      appendSnippetFunction(sb,startMatch,endMatch,ellipsis,maxTokens);
      sb.append(""String_Node_Str"");
    }
 else     if (isPhoneNumber) {
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,startMatch);
      sb.append(""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(sb,endMatch);
      sb.append(""String_Node_Str"");
      appendSnippetFunction(sb,startMatch,endMatch,ellipsis,maxTokens);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      appendSnippetFunction(sb,startMatch,endMatch,ellipsis,maxTokens);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"" + SearchSnippetColumns.SNIPPET);
  }
  sb.append(""String_Node_Str"" + Tables.SEARCH_INDEX);
  if (isEmailAddress) {
    sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Email.ADDRESS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA_JOIN_RAW_CONTACTS+ ""String_Node_Str""+ Email.ADDRESS+ ""String_Node_Str"");
    DatabaseUtils.appendEscapedSQLString(sb,filter + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else   if (isPhoneNumber) {
    phoneNumber=PhoneNumberUtils.normalizeNumber(filter);
    sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Phone.NUMBER+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA_JOIN_RAW_CONTACTS+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
    sb.append(phoneNumber);
    sb.append(""String_Node_Str"");
    numberE164=PhoneNumberUtils.formatNumberToE164(phoneNumber,mDbHelper.getCountryIso());
    if (!TextUtils.isEmpty(numberE164)) {
      sb.append(""String_Node_Str"" + PhoneLookupColumns.NORMALIZED_NUMBER + ""String_Node_Str"");
      sb.append(numberE164);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str"");
    String normalizedFilter=NameNormalizer.normalize(filter);
    if (!TextUtils.isEmpty(normalizedFilter)) {
      sb.append(""String_Node_Str"");
      sb.append(normalizedFilter);
      sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY);
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(Tables.SEARCH_INDEX + ""String_Node_Str"");
  if (isEmailAddress) {
    DatabaseUtils.appendEscapedSQLString(sb,""String_Node_Str"" + filter + ""String_Node_Str"");
  }
 else   if (isPhoneNumber) {
    DatabaseUtils.appendEscapedSQLString(sb,""String_Node_Str"" + filter + ""String_Node_Str""+ phoneNumber+ ""String_Node_Str""+ (numberE164 != null ? ""String_Node_Str"" + numberE164 + ""String_Node_Str"" : ""String_Node_Str""));
  }
 else {
    DatabaseUtils.appendEscapedSQLString(sb,filter + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
}",0.9815901274529638
152462,"/** 
 * Finds name lookup records matching the supplied filter, picks one arbitrary match per contact and joins that with other contacts tables.
 */
private void setTablesAndProjectionMapForContactsWithSnippet(SQLiteQueryBuilder qb,Uri uri,String[] projection,String filter,long directoryId){
  StringBuilder sb=new StringBuilder();
  sb.append(mDbHelper.getContactView(shouldExcludeRestrictedData(uri)));
  if (filter != null) {
    filter=filter.trim();
  }
  if (TextUtils.isEmpty(filter) || directoryId != Directory.DEFAULT) {
    sb.append(""String_Node_Str"" + SearchSnippetColumns.SNIPPET + ""String_Node_Str"");
  }
 else {
    appendSearchIndexJoin(sb,uri,projection,filter);
  }
  appendContactPresenceJoin(sb,projection,Contacts._ID);
  appendContactStatusUpdateJoin(sb,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
  qb.setTables(sb.toString());
  qb.setProjectionMap(sContactsProjectionWithSnippetMap);
}","/** 
 * Finds name lookup records matching the supplied filter, picks one arbitrary match per contact and joins that with other contacts tables.
 */
private void setTablesAndProjectionMapForContactsWithSnippet(SQLiteQueryBuilder qb,Uri uri,String[] projection,String filter,long directoryId){
  StringBuilder sb=new StringBuilder();
  sb.append(mDbHelper.getContactView(shouldExcludeRestrictedData(uri)));
  if (filter != null) {
    filter=filter.trim();
  }
  if (TextUtils.isEmpty(filter) || (directoryId != -1 && directoryId != Directory.DEFAULT)) {
    sb.append(""String_Node_Str"" + SearchSnippetColumns.SNIPPET + ""String_Node_Str"");
  }
 else {
    appendSearchIndexJoin(sb,uri,projection,filter);
  }
  appendContactPresenceJoin(sb,projection,Contacts._ID);
  appendContactStatusUpdateJoin(sb,projection,ContactsColumns.LAST_STATUS_UPDATE_ID);
  qb.setTables(sb.toString());
  qb.setProjectionMap(sContactsProjectionWithSnippetMap);
}",0.987627756858526
152463,"@Override public void appendSearchableData(IndexBuilder builder){
  String number=builder.getString(Phone.NUMBER);
  String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
  if (TextUtils.isEmpty(normalizedNumber)) {
    return;
  }
  builder.appendToken(normalizedNumber);
  String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.getCurrentCountryIso());
  if (numberE164 != null && !numberE164.equals(normalizedNumber)) {
    builder.appendToken(numberE164);
  }
}","@Override public void appendSearchableData(IndexBuilder builder){
  String number=builder.getString(Phone.NUMBER);
  if (TextUtils.isEmpty(number)) {
    return;
  }
  String normalizedNumber=PhoneNumberUtils.normalizeNumber(number);
  if (TextUtils.isEmpty(normalizedNumber)) {
    return;
  }
  builder.appendToken(normalizedNumber);
  String numberE164=PhoneNumberUtils.formatNumberToE164(number,mDbHelper.getCurrentCountryIso());
  if (numberE164 != null && !numberE164.equals(normalizedNumber)) {
    builder.appendToken(numberE164);
  }
}",0.9508196721311476
152464,"@Override public void appendSearchableData(IndexBuilder builder){
  builder.appendTokenFromColumn(StructuredName.PREFIX);
  builder.appendTokenFromColumn(StructuredName.FAMILY_NAME);
  builder.appendTokenFromColumn(StructuredName.GIVEN_NAME);
  builder.appendTokenFromColumn(StructuredName.MIDDLE_NAME);
  builder.appendTokenFromColumn(StructuredName.SUFFIX);
  builder.appendTokenFromColumn(StructuredName.PHONETIC_FAMILY_NAME);
  builder.appendTokenFromColumn(StructuredName.PHONETIC_MIDDLE_NAME);
  builder.appendTokenFromColumn(StructuredName.PHONETIC_GIVEN_NAME);
}","@Override public void appendSearchableData(IndexBuilder builder){
  builder.appendTokenFromColumn(StructuredName.PREFIX);
  builder.appendTokenFromColumn(StructuredName.FAMILY_NAME);
  builder.appendTokenFromColumn(StructuredName.GIVEN_NAME);
  builder.appendTokenFromColumn(StructuredName.MIDDLE_NAME);
  builder.appendTokenFromColumn(StructuredName.SUFFIX);
  String phoneticFamily=builder.getString(StructuredName.PHONETIC_FAMILY_NAME);
  String phoneticMiddle=builder.getString(StructuredName.PHONETIC_MIDDLE_NAME);
  String phoneticGiven=builder.getString(StructuredName.PHONETIC_GIVEN_NAME);
  if (!TextUtils.isEmpty(phoneticFamily) || !TextUtils.isEmpty(phoneticMiddle) || !TextUtils.isEmpty(phoneticGiven)) {
    mSb.setLength(0);
    if (!TextUtils.isEmpty(phoneticFamily)) {
      builder.appendToken(phoneticFamily);
      mSb.append(phoneticFamily);
    }
    if (!TextUtils.isEmpty(phoneticMiddle)) {
      builder.appendToken(phoneticMiddle);
      mSb.append(phoneticMiddle);
    }
    if (!TextUtils.isEmpty(phoneticGiven)) {
      builder.appendToken(phoneticGiven);
      mSb.append(phoneticGiven);
    }
    builder.appendToken(mSb.toString().trim());
  }
}",0.5532646048109966
152465,"public void testSearchSnippetEmail() throws Exception {
  long rawContactId=createRawContact();
  long contactId=queryContactId(rawContactId);
  ContentValues values=new ContentValues();
  Uri dataUri=insertEmail(rawContactId,""String_Node_Str"",true,Email.TYPE_CUSTOM,""String_Node_Str"");
  Uri filterUri=Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,Uri.encode(""String_Node_Str""));
  values.clear();
  values.put(Contacts._ID,contactId);
  values.put(SearchSnippetColumns.SNIPPET_DATA1,""String_Node_Str"");
  values.put(SearchSnippetColumns.SNIPPET_DATA_ID,ContentUris.parseId(dataUri));
  values.put(SearchSnippetColumns.SNIPPET_MIMETYPE,Email.CONTENT_ITEM_TYPE);
  values.put(SearchSnippetColumns.SNIPPET_DATA2,Email.TYPE_CUSTOM);
  values.put(SearchSnippetColumns.SNIPPET_DATA3,""String_Node_Str"");
  assertStoredValues(filterUri,values);
}","public void testSearchSnippetEmail() throws Exception {
  long rawContactId=createRawContact();
  long contactId=queryContactId(rawContactId);
  ContentValues values=new ContentValues();
  Uri dataUri=insertEmail(rawContactId,""String_Node_Str"",true,Email.TYPE_CUSTOM,""String_Node_Str"");
  Uri filterUri=Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,Uri.encode(""String_Node_Str""));
  values.clear();
  values.put(Contacts._ID,contactId);
  values.put(SearchSnippetColumns.SNIPPET,""String_Node_Str"");
  assertStoredValues(filterUri,values);
}",0.7417027417027418
152466,"public void testSearchSnippetNickname() throws Exception {
  long rawContactId=createRawContactWithName();
  long contactId=queryContactId(rawContactId);
  ContentValues values=new ContentValues();
  Uri dataUri=insertNickname(rawContactId,""String_Node_Str"");
  Uri filterUri=Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,Uri.encode(""String_Node_Str""));
  values.clear();
  values.put(Contacts._ID,contactId);
  values.put(SearchSnippetColumns.SNIPPET_DATA1,""String_Node_Str"");
  values.put(SearchSnippetColumns.SNIPPET_DATA_ID,ContentUris.parseId(dataUri));
  values.put(SearchSnippetColumns.SNIPPET_MIMETYPE,Nickname.CONTENT_ITEM_TYPE);
  assertStoredValues(filterUri,values);
}","public void testSearchSnippetNickname() throws Exception {
  long rawContactId=createRawContactWithName();
  long contactId=queryContactId(rawContactId);
  ContentValues values=new ContentValues();
  Uri dataUri=insertNickname(rawContactId,""String_Node_Str"");
  Uri filterUri=Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,Uri.encode(""String_Node_Str""));
  values.clear();
  values.put(Contacts._ID,contactId);
  values.put(SearchSnippetColumns.SNIPPET,""String_Node_Str"");
  assertStoredValues(filterUri,values);
}",0.8607172643869891
152467,"public void testContactsWithSnippetProjection(){
  assertProjection(Contacts.CONTENT_FILTER_URI.buildUpon().appendPath(""String_Node_Str"").build(),new String[]{Contacts._ID,Contacts.DISPLAY_NAME_PRIMARY,Contacts.DISPLAY_NAME_ALTERNATIVE,Contacts.DISPLAY_NAME_SOURCE,Contacts.PHONETIC_NAME,Contacts.PHONETIC_NAME_STYLE,Contacts.SORT_KEY_PRIMARY,Contacts.SORT_KEY_ALTERNATIVE,Contacts.LAST_TIME_CONTACTED,Contacts.TIMES_CONTACTED,Contacts.STARRED,Contacts.IN_VISIBLE_GROUP,Contacts.PHOTO_ID,Contacts.PHOTO_URI,Contacts.PHOTO_THUMBNAIL_URI,Contacts.CUSTOM_RINGTONE,Contacts.HAS_PHONE_NUMBER,Contacts.SEND_TO_VOICEMAIL,Contacts.LOOKUP_KEY,Contacts.NAME_RAW_CONTACT_ID,Contacts.CONTACT_PRESENCE,Contacts.CONTACT_CHAT_CAPABILITY,Contacts.CONTACT_STATUS,Contacts.CONTACT_STATUS_TIMESTAMP,Contacts.CONTACT_STATUS_RES_PACKAGE,Contacts.CONTACT_STATUS_LABEL,Contacts.CONTACT_STATUS_ICON,SearchSnippetColumns.SNIPPET_MIMETYPE,SearchSnippetColumns.SNIPPET_DATA_ID,SearchSnippetColumns.SNIPPET_DATA1,SearchSnippetColumns.SNIPPET_DATA2,SearchSnippetColumns.SNIPPET_DATA3,SearchSnippetColumns.SNIPPET_DATA4});
}","public void testContactsWithSnippetProjection(){
  assertProjection(Contacts.CONTENT_FILTER_URI.buildUpon().appendPath(""String_Node_Str"").build(),new String[]{Contacts._ID,Contacts.DISPLAY_NAME_PRIMARY,Contacts.DISPLAY_NAME_ALTERNATIVE,Contacts.DISPLAY_NAME_SOURCE,Contacts.PHONETIC_NAME,Contacts.PHONETIC_NAME_STYLE,Contacts.SORT_KEY_PRIMARY,Contacts.SORT_KEY_ALTERNATIVE,Contacts.LAST_TIME_CONTACTED,Contacts.TIMES_CONTACTED,Contacts.STARRED,Contacts.IN_VISIBLE_GROUP,Contacts.PHOTO_ID,Contacts.PHOTO_URI,Contacts.PHOTO_THUMBNAIL_URI,Contacts.CUSTOM_RINGTONE,Contacts.HAS_PHONE_NUMBER,Contacts.SEND_TO_VOICEMAIL,Contacts.LOOKUP_KEY,Contacts.NAME_RAW_CONTACT_ID,Contacts.CONTACT_PRESENCE,Contacts.CONTACT_CHAT_CAPABILITY,Contacts.CONTACT_STATUS,Contacts.CONTACT_STATUS_TIMESTAMP,Contacts.CONTACT_STATUS_RES_PACKAGE,Contacts.CONTACT_STATUS_LABEL,Contacts.CONTACT_STATUS_ICON,SearchSnippetColumns.SNIPPET});
}",0.9070929070929072
152468,"public void testSearchSnippetOrganization() throws Exception {
  long rawContactId=createRawContactWithName();
  long contactId=queryContactId(rawContactId);
  insertEmail(rawContactId,""String_Node_Str"");
  ContentValues values=new ContentValues();
  values.clear();
  values.put(Organization.COMPANY,""String_Node_Str"");
  values.put(Organization.TITLE,""String_Node_Str"");
  Uri organizationUri=insertOrganization(rawContactId,values);
  values.put(Organization.COMPANY,""String_Node_Str"");
  insertOrganization(rawContactId,values);
  values.put(Organization.COMPANY,""String_Node_Str"");
  insertOrganization(rawContactId,values);
  insertEmail(rawContactId,""String_Node_Str"",true,Email.TYPE_CUSTOM,""String_Node_Str"");
  Uri filterUri=Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,Uri.encode(""String_Node_Str""));
  values.clear();
  values.put(Contacts._ID,contactId);
  values.put(SearchSnippetColumns.SNIPPET_DATA_ID,ContentUris.parseId(organizationUri));
  values.put(SearchSnippetColumns.SNIPPET_DATA1,""String_Node_Str"");
  values.put(SearchSnippetColumns.SNIPPET_DATA4,""String_Node_Str"");
  values.put(SearchSnippetColumns.SNIPPET_MIMETYPE,Organization.CONTENT_ITEM_TYPE);
  assertStoredValues(filterUri,values);
}","public void testSearchSnippetOrganization() throws Exception {
  long rawContactId=createRawContactWithName();
  long contactId=queryContactId(rawContactId);
  insertEmail(rawContactId,""String_Node_Str"");
  ContentValues values=new ContentValues();
  values.clear();
  values.put(Organization.COMPANY,""String_Node_Str"");
  values.put(Organization.TITLE,""String_Node_Str"");
  Uri organizationUri=insertOrganization(rawContactId,values);
  values.put(Organization.COMPANY,""String_Node_Str"");
  insertOrganization(rawContactId,values);
  values.put(Organization.COMPANY,""String_Node_Str"");
  insertOrganization(rawContactId,values);
  insertEmail(rawContactId,""String_Node_Str"",true,Email.TYPE_CUSTOM,""String_Node_Str"");
  Uri filterUri=Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,Uri.encode(""String_Node_Str""));
  values.clear();
  values.put(Contacts._ID,contactId);
  values.put(SearchSnippetColumns.SNIPPET,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  assertStoredValues(filterUri,values);
}",0.8147822261328641
152469,"public void testForwardingToLocalInvisibleContacts(){
  long contactId1=queryContactId(createRawContactWithName(""String_Node_Str"",""String_Node_Str""));
  Account account=new Account(""String_Node_Str"",""String_Node_Str"");
  long groupId=createGroup(account,""String_Node_Str"",""String_Node_Str"",0,true,false);
  long contactId2=queryContactId(createRawContactWithName(""String_Node_Str"",""String_Node_Str"",account));
  Uri contentUri=Contacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,String.valueOf(Directory.LOCAL_INVISIBLE)).build();
  Cursor cursor=mResolver.query(contentUri,new String[]{Contacts._ID,Contacts.DISPLAY_NAME},null,null,null);
  assertEquals(0,cursor.getCount());
  cursor.close();
  mResolver.delete(Data.CONTENT_URI,Data.MIMETYPE + ""String_Node_Str"" + GroupMembership.GROUP_ROW_ID+ ""String_Node_Str"",new String[]{GroupMembership.CONTENT_ITEM_TYPE,String.valueOf(groupId)});
  cursor=mResolver.query(contentUri,new String[]{Contacts._ID,Contacts.DISPLAY_NAME},null,null,null);
  assertNotNull(cursor);
  assertEquals(1,cursor.getCount());
  cursor.moveToFirst();
  assertEquals(contactId2,cursor.getLong(0));
  assertEquals(""String_Node_Str"",cursor.getString(1));
  cursor.close();
  Uri filterUri=Contacts.CONTENT_FILTER_URI.buildUpon().appendEncodedPath(""String_Node_Str"").appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,String.valueOf(Directory.LOCAL_INVISIBLE)).build();
  cursor=mResolver.query(filterUri,new String[]{Contacts._ID,Contacts.DISPLAY_NAME},null,null,null);
  assertNotNull(cursor);
  assertEquals(1,cursor.getCount());
  cursor.moveToFirst();
  assertEquals(contactId2,cursor.getLong(0));
  assertEquals(""String_Node_Str"",cursor.getString(1));
  cursor.close();
}","public void testForwardingToLocalInvisibleContacts(){
  long contactId1=queryContactId(createRawContactWithName(""String_Node_Str"",""String_Node_Str""));
  Account account=new Account(""String_Node_Str"",""String_Node_Str"");
  long groupId=createGroup(account,""String_Node_Str"",""String_Node_Str"",0,true,false);
  long contactId2=queryContactId(createRawContactWithName(""String_Node_Str"",""String_Node_Str"",account));
  Uri contentUri=Contacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,String.valueOf(Directory.LOCAL_INVISIBLE)).build();
  Cursor cursor=mResolver.query(contentUri,new String[]{Contacts._ID,Contacts.DISPLAY_NAME},null,null,null);
  assertEquals(0,cursor.getCount());
  cursor.close();
  mResolver.delete(Data.CONTENT_URI,Data.MIMETYPE + ""String_Node_Str"" + GroupMembership.GROUP_ROW_ID+ ""String_Node_Str"",new String[]{GroupMembership.CONTENT_ITEM_TYPE,String.valueOf(groupId)});
  cursor=mResolver.query(contentUri,new String[]{Contacts._ID,Contacts.DISPLAY_NAME},null,null,null);
  assertNotNull(cursor);
  assertEquals(1,cursor.getCount());
  cursor.moveToFirst();
  assertEquals(contactId2,cursor.getLong(0));
  assertEquals(""String_Node_Str"",cursor.getString(1));
  cursor.close();
}",0.8292519288829252
152470,"/** 
 * Loads contacts with specified IDs and returns them in the order of IDs in the supplied list.
 */
private Cursor queryMatchingContacts(SQLiteQueryBuilder qb,SQLiteDatabase db,long contactId,String[] projection,List<MatchScore> bestMatches,int maxSuggestions,String filter){
  StringBuilder sb=new StringBuilder();
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  if (!TextUtils.isEmpty(filter)) {
    sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
    mContactsProvider.appendContactFilterAsNestedQuery(sb,filter);
  }
  HashSet<Long> foundIds=new HashSet<Long>();
  Cursor cursor=db.query(qb.getTables(),ContactIdQuery.COLUMNS,sb.toString(),null,null,null,null);
  try {
    while (cursor.moveToNext()) {
      foundIds.add(cursor.getLong(ContactIdQuery._ID));
    }
  }
  finally {
    cursor.close();
  }
  Iterator<MatchScore> iter=bestMatches.iterator();
  while (iter.hasNext()) {
    long id=iter.next().getContactId();
    if (!foundIds.contains(id)) {
      iter.remove();
    }
  }
  if (bestMatches.size() > maxSuggestions) {
    bestMatches=bestMatches.subList(0,maxSuggestions);
  }
  sb.setLength(0);
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  cursor=qb.query(db,projection,sb.toString(),null,null,null,Contacts._ID);
  ArrayList<Long> sortedContactIds=new ArrayList<Long>(bestMatches.size());
  for (  MatchScore matchScore : bestMatches) {
    sortedContactIds.add(matchScore.getContactId());
  }
  Collections.sort(sortedContactIds);
  int[] positionMap=new int[bestMatches.size()];
  for (int i=0; i < positionMap.length; i++) {
    long id=bestMatches.get(i).getContactId();
    positionMap[i]=sortedContactIds.indexOf(id);
  }
  return new ReorderingCursorWrapper(cursor,positionMap);
}","/** 
 * Loads contacts with specified IDs and returns them in the order of IDs in the supplied list.
 */
private Cursor queryMatchingContacts(SQLiteQueryBuilder qb,SQLiteDatabase db,String[] projection,List<MatchScore> bestMatches,int maxSuggestions,String filter){
  StringBuilder sb=new StringBuilder();
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  if (!TextUtils.isEmpty(filter)) {
    sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
    mContactsProvider.appendContactFilterAsNestedQuery(sb,filter);
  }
  HashSet<Long> foundIds=new HashSet<Long>();
  Cursor cursor=db.query(qb.getTables(),ContactIdQuery.COLUMNS,sb.toString(),null,null,null,null);
  try {
    while (cursor.moveToNext()) {
      foundIds.add(cursor.getLong(ContactIdQuery._ID));
    }
  }
  finally {
    cursor.close();
  }
  Iterator<MatchScore> iter=bestMatches.iterator();
  while (iter.hasNext()) {
    long id=iter.next().getContactId();
    if (!foundIds.contains(id)) {
      iter.remove();
    }
  }
  if (bestMatches.size() > maxSuggestions) {
    bestMatches=bestMatches.subList(0,maxSuggestions);
  }
  sb.setLength(0);
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  cursor=qb.query(db,projection,sb.toString(),null,null,null,Contacts._ID);
  ArrayList<Long> sortedContactIds=new ArrayList<Long>(bestMatches.size());
  for (  MatchScore matchScore : bestMatches) {
    sortedContactIds.add(matchScore.getContactId());
  }
  Collections.sort(sortedContactIds);
  int[] positionMap=new int[bestMatches.size()];
  for (int i=0; i < positionMap.length; i++) {
    long id=bestMatches.get(i).getContactId();
    positionMap[i]=sortedContactIds.indexOf(id);
  }
  return new ReorderingCursorWrapper(cursor,positionMap);
}",0.996614759647935
152471,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
  return queryMatchingContacts(qb,db,contactId,projection,bestMatches,maxSuggestions,filter);
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.9118773946360154
152472,"/** 
 * Loads contacts with specified IDs and returns them in the order of IDs in the supplied list.
 */
private Cursor queryMatchingContacts(SQLiteQueryBuilder qb,SQLiteDatabase db,long contactId,String[] projection,List<MatchScore> bestMatches,int maxSuggestions,String filter){
  StringBuilder sb=new StringBuilder();
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  if (!TextUtils.isEmpty(filter)) {
    sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
    mContactsProvider.appendContactFilterAsNestedQuery(sb,filter);
  }
  HashSet<Long> foundIds=new HashSet<Long>();
  Cursor cursor=db.query(qb.getTables(),ContactIdQuery.COLUMNS,sb.toString(),null,null,null,null);
  try {
    while (cursor.moveToNext()) {
      foundIds.add(cursor.getLong(ContactIdQuery._ID));
    }
  }
  finally {
    cursor.close();
  }
  Iterator<MatchScore> iter=bestMatches.iterator();
  while (iter.hasNext()) {
    long id=iter.next().getContactId();
    if (!foundIds.contains(id)) {
      iter.remove();
    }
  }
  if (bestMatches.size() > maxSuggestions) {
    bestMatches=bestMatches.subList(0,maxSuggestions);
  }
  sb.setLength(0);
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  cursor=qb.query(db,projection,sb.toString(),null,null,null,Contacts._ID);
  ArrayList<Long> sortedContactIds=new ArrayList<Long>(bestMatches.size());
  for (  MatchScore matchScore : bestMatches) {
    sortedContactIds.add(matchScore.getContactId());
  }
  Collections.sort(sortedContactIds);
  int[] positionMap=new int[bestMatches.size()];
  for (int i=0; i < positionMap.length; i++) {
    long id=bestMatches.get(i).getContactId();
    positionMap[i]=sortedContactIds.indexOf(id);
  }
  return new ReorderingCursorWrapper(cursor,positionMap);
}","/** 
 * Loads contacts with specified IDs and returns them in the order of IDs in the supplied list.
 */
private Cursor queryMatchingContacts(SQLiteQueryBuilder qb,SQLiteDatabase db,String[] projection,List<MatchScore> bestMatches,int maxSuggestions,String filter){
  StringBuilder sb=new StringBuilder();
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  if (!TextUtils.isEmpty(filter)) {
    sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
    mContactsProvider.appendContactFilterAsNestedQuery(sb,filter);
  }
  HashSet<Long> foundIds=new HashSet<Long>();
  Cursor cursor=db.query(qb.getTables(),ContactIdQuery.COLUMNS,sb.toString(),null,null,null,null);
  try {
    while (cursor.moveToNext()) {
      foundIds.add(cursor.getLong(ContactIdQuery._ID));
    }
  }
  finally {
    cursor.close();
  }
  Iterator<MatchScore> iter=bestMatches.iterator();
  while (iter.hasNext()) {
    long id=iter.next().getContactId();
    if (!foundIds.contains(id)) {
      iter.remove();
    }
  }
  if (bestMatches.size() > maxSuggestions) {
    bestMatches=bestMatches.subList(0,maxSuggestions);
  }
  sb.setLength(0);
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  cursor=qb.query(db,projection,sb.toString(),null,null,null,Contacts._ID);
  ArrayList<Long> sortedContactIds=new ArrayList<Long>(bestMatches.size());
  for (  MatchScore matchScore : bestMatches) {
    sortedContactIds.add(matchScore.getContactId());
  }
  Collections.sort(sortedContactIds);
  int[] positionMap=new int[bestMatches.size()];
  for (int i=0; i < positionMap.length; i++) {
    long id=bestMatches.get(i).getContactId();
    positionMap[i]=sortedContactIds.indexOf(id);
  }
  return new ReorderingCursorWrapper(cursor,positionMap);
}",0.996614759647935
152473,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
  return queryMatchingContacts(qb,db,contactId,projection,bestMatches,maxSuggestions,filter);
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.9118773946360154
152474,"/** 
 * Loads contacts with specified IDs and returns them in the order of IDs in the supplied list.
 */
private Cursor queryMatchingContacts(SQLiteQueryBuilder qb,SQLiteDatabase db,long contactId,String[] projection,List<MatchScore> bestMatches,int maxSuggestions,String filter){
  StringBuilder sb=new StringBuilder();
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  if (!TextUtils.isEmpty(filter)) {
    sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
    mContactsProvider.appendContactFilterAsNestedQuery(sb,filter);
  }
  HashSet<Long> foundIds=new HashSet<Long>();
  Cursor cursor=db.query(qb.getTables(),ContactIdQuery.COLUMNS,sb.toString(),null,null,null,null);
  try {
    while (cursor.moveToNext()) {
      foundIds.add(cursor.getLong(ContactIdQuery._ID));
    }
  }
  finally {
    cursor.close();
  }
  Iterator<MatchScore> iter=bestMatches.iterator();
  while (iter.hasNext()) {
    long id=iter.next().getContactId();
    if (!foundIds.contains(id)) {
      iter.remove();
    }
  }
  if (bestMatches.size() > maxSuggestions) {
    bestMatches=bestMatches.subList(0,maxSuggestions);
  }
  sb.setLength(0);
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  cursor=qb.query(db,projection,sb.toString(),null,null,null,Contacts._ID);
  ArrayList<Long> sortedContactIds=new ArrayList<Long>(bestMatches.size());
  for (  MatchScore matchScore : bestMatches) {
    sortedContactIds.add(matchScore.getContactId());
  }
  Collections.sort(sortedContactIds);
  int[] positionMap=new int[bestMatches.size()];
  for (int i=0; i < positionMap.length; i++) {
    long id=bestMatches.get(i).getContactId();
    positionMap[i]=sortedContactIds.indexOf(id);
  }
  return new ReorderingCursorWrapper(cursor,positionMap);
}","/** 
 * Loads contacts with specified IDs and returns them in the order of IDs in the supplied list.
 */
private Cursor queryMatchingContacts(SQLiteQueryBuilder qb,SQLiteDatabase db,String[] projection,List<MatchScore> bestMatches,int maxSuggestions,String filter){
  StringBuilder sb=new StringBuilder();
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  if (!TextUtils.isEmpty(filter)) {
    sb.append(""String_Node_Str"" + Contacts._ID + ""String_Node_Str"");
    mContactsProvider.appendContactFilterAsNestedQuery(sb,filter);
  }
  HashSet<Long> foundIds=new HashSet<Long>();
  Cursor cursor=db.query(qb.getTables(),ContactIdQuery.COLUMNS,sb.toString(),null,null,null,null);
  try {
    while (cursor.moveToNext()) {
      foundIds.add(cursor.getLong(ContactIdQuery._ID));
    }
  }
  finally {
    cursor.close();
  }
  Iterator<MatchScore> iter=bestMatches.iterator();
  while (iter.hasNext()) {
    long id=iter.next().getContactId();
    if (!foundIds.contains(id)) {
      iter.remove();
    }
  }
  if (bestMatches.size() > maxSuggestions) {
    bestMatches=bestMatches.subList(0,maxSuggestions);
  }
  sb.setLength(0);
  sb.append(Contacts._ID);
  sb.append(""String_Node_Str"");
  for (int i=0; i < bestMatches.size(); i++) {
    MatchScore matchScore=bestMatches.get(i);
    if (i != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(matchScore.getContactId());
  }
  sb.append(""String_Node_Str"");
  cursor=qb.query(db,projection,sb.toString(),null,null,null,Contacts._ID);
  ArrayList<Long> sortedContactIds=new ArrayList<Long>(bestMatches.size());
  for (  MatchScore matchScore : bestMatches) {
    sortedContactIds.add(matchScore.getContactId());
  }
  Collections.sort(sortedContactIds);
  int[] positionMap=new int[bestMatches.size()];
  for (int i=0; i < positionMap.length; i++) {
    long id=bestMatches.get(i).getContactId();
    positionMap[i]=sortedContactIds.indexOf(id);
  }
  return new ReorderingCursorWrapper(cursor,positionMap);
}",0.996614759647935
152475,"/** 
 * Finds matching contacts and returns a cursor on those.
 */
public Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
  return queryMatchingContacts(qb,db,contactId,projection,bestMatches,maxSuggestions,filter);
}","/** 
 * Finds matching contacts and returns a cursor on those.
 */
public Cursor queryAggregationSuggestions(SQLiteQueryBuilder qb,String[] projection,long contactId,int maxSuggestions,String filter,ArrayList<AggregationSuggestionParameter> parameters){
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  db.beginTransaction();
  try {
    List<MatchScore> bestMatches=findMatchingContacts(db,contactId,parameters);
    return queryMatchingContacts(qb,db,projection,bestMatches,maxSuggestions,filter);
  }
  finally {
    db.endTransaction();
  }
}",0.9118773946360154
152476,"@Override public void setUp() throws Exception {
  super.setUp();
  mProvider=(ContactsProvider2)getProvider();
  mDirectoryManager=mProvider.getContactDirectoryManager();
  mPackageManager=(ContactsMockPackageManager)getProvider().getContext().getPackageManager();
}","@Override public void setUp() throws Exception {
  super.setUp();
  mProvider=(ContactsProvider2)getProvider();
  mDirectoryManager=mProvider.getContactDirectoryManagerForTest();
  mPackageManager=(ContactsMockPackageManager)getProvider().getContext().getPackageManager();
}",0.9870609981515712
152477,"@Override public void wipeData(){
  super.wipeData();
  SQLiteDatabase db=getDatabaseHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  getContactDirectoryManager().scanAllPackages();
}","@Override public void wipeData(){
  super.wipeData();
  SQLiteDatabase db=getDatabaseHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  getContactDirectoryManagerForTest().scanAllPackages();
}",0.9870609981515712
152478,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,String accountType,String accountName,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      if (contactId != -1 && contactId != currentContactId && containsRawContactsFromAccount(db,contactId,accountType,accountName)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(contactId);
    updateAggregatedPresence(contactId);
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(db,contactIdToSplit);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,String accountType,String accountName,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DEFAULT;
  Integer aggModeObject=mRawContactsMarkedForAggregation.remove(rawContactId);
  if (aggModeObject != null) {
    aggregationMode=aggModeObject;
  }
  long contactId=-1;
  long contactIdToSplit=-1;
  if (aggregationMode == RawContacts.AGGREGATION_MODE_DEFAULT) {
    candidates.clear();
    matcher.clear();
    contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
    if (contactId == -1) {
      contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
      if (contactId != -1 && contactId != currentContactId && containsRawContactsFromAccount(db,contactId,accountType,accountName)) {
        contactIdToSplit=contactId;
        contactId=-1;
      }
    }
  }
 else   if (aggregationMode == RawContacts.AGGREGATION_MODE_DISABLED) {
    return;
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && (currentContactContentsCount == 0 || aggregationMode == RawContacts.AGGREGATION_MODE_SUSPENDED)) {
    contactId=currentContactId;
  }
  if (contactId == currentContactId) {
    markAggregated(rawContactId);
  }
 else   if (contactId == -1) {
    createNewContactForRawContact(db,rawContactId);
    if (currentContactContentsCount > 0) {
      updateAggregateData(currentContactId);
    }
  }
 else {
    if (currentContactContentsCount == 0) {
      mContactDelete.bindLong(1,currentContactId);
      mContactDelete.execute();
      mAggregatedPresenceDelete.bindLong(1,currentContactId);
      mAggregatedPresenceDelete.execute();
    }
    setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,mContactUpdate);
    mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
    mContactUpdate.execute();
    mDbHelper.updateContactVisible(contactId);
    updateAggregatedStatusUpdate(contactId);
  }
  if (contactIdToSplit != -1) {
    splitAutomaticallyAggregatedRawContacts(db,contactIdToSplit);
  }
}",0.9965451055662188
152479,"/** 
 * Creates a stand-alone Contact for the given raw contact ID.
 */
private void createNewContactForRawContact(SQLiteDatabase db,long rawContactId){
  mSelectionArgs1[0]=String.valueOf(rawContactId);
  computeAggregateData(db,mRawContactsQueryByRawContactId,mSelectionArgs1,mContactInsert);
  long contactId=mContactInsert.executeInsert();
  setContactIdAndMarkAggregated(rawContactId,contactId);
  mDbHelper.updateContactVisible(contactId);
  setPresenceContactId(rawContactId,contactId);
  updateAggregatedPresence(contactId);
}","/** 
 * Creates a stand-alone Contact for the given raw contact ID.
 */
private void createNewContactForRawContact(SQLiteDatabase db,long rawContactId){
  mSelectionArgs1[0]=String.valueOf(rawContactId);
  computeAggregateData(db,mRawContactsQueryByRawContactId,mSelectionArgs1,mContactInsert);
  long contactId=mContactInsert.executeInsert();
  setContactIdAndMarkAggregated(rawContactId,contactId);
  mDbHelper.updateContactVisible(contactId);
  setPresenceContactId(rawContactId,contactId);
  updateAggregatedStatusUpdate(contactId);
}",0.9832089552238806
152480,"public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mDbHelper.getWritableDatabase();
  computeAggregateData(db,contactId,mContactUpdate);
  mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
  mContactUpdate.execute();
  mDbHelper.updateContactVisible(contactId);
  updateAggregatedPresence(contactId);
}","public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mDbHelper.getWritableDatabase();
  computeAggregateData(db,contactId,mContactUpdate);
  mContactUpdate.bindLong(ContactReplaceSqlStatement.CONTACT_ID,contactId);
  mContactUpdate.execute();
  mDbHelper.updateContactVisible(contactId);
  updateAggregatedStatusUpdate(contactId);
}",0.979328165374677
152481,"/** 
 * Inserts a status update.
 */
public long insertStatusUpdate(ContentValues values){
  final String handle=values.getAsString(StatusUpdates.IM_HANDLE);
  final Integer protocol=values.getAsInteger(StatusUpdates.PROTOCOL);
  String customProtocol=null;
  if (protocol != null && protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(StatusUpdates.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  long rawContactId=-1;
  long contactId=-1;
  Long dataId=values.getAsLong(StatusUpdates.DATA_ID);
  mSb.setLength(0);
  mSelectionArgs.clear();
  if (dataId != null) {
    mSb.append(Tables.DATA + ""String_Node_Str"" + Data._ID+ ""String_Node_Str"");
    mSelectionArgs.add(String.valueOf(dataId));
  }
 else {
    if (TextUtils.isEmpty(handle) || protocol == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
    String mimeTypeIdIm=String.valueOf(mMimeTypeIdIm);
    if (matchEmail) {
      String mimeTypeIdEmail=String.valueOf(mMimeTypeIdEmail);
      mSb.append(DataColumns.MIMETYPE_ID + ""String_Node_Str"" + ""String_Node_Str""+ Data.DATA1+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str"");
      mSelectionArgs.add(mimeTypeIdEmail);
      mSelectionArgs.add(mimeTypeIdIm);
      mSelectionArgs.add(handle);
      mSelectionArgs.add(mimeTypeIdIm);
      mSelectionArgs.add(String.valueOf(protocol));
      if (customProtocol != null) {
        mSb.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
        mSelectionArgs.add(customProtocol);
      }
      mSb.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
      mSelectionArgs.add(mimeTypeIdEmail);
    }
 else {
      mSb.append(DataColumns.MIMETYPE_ID + ""String_Node_Str"" + ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
      mSelectionArgs.add(mimeTypeIdIm);
      mSelectionArgs.add(String.valueOf(protocol));
      mSelectionArgs.add(handle);
      if (customProtocol != null) {
        mSb.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
        mSelectionArgs.add(customProtocol);
      }
    }
    if (values.containsKey(StatusUpdates.DATA_ID)) {
      mSb.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"");
      mSelectionArgs.add(values.getAsString(StatusUpdates.DATA_ID));
    }
  }
  mSb.append(""String_Node_Str"").append(getContactsRestrictions());
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,mSb.toString(),mSelectionArgs.toArray(EMPTY_STRING_ARRAY),null,null,Clauses.CONTACT_VISIBLE + ""String_Node_Str"" + Data.RAW_CONTACT_ID);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  if (values.containsKey(StatusUpdates.PRESENCE)) {
    if (customProtocol == null) {
      customProtocol=""String_Node_Str"";
    }
    mValues.clear();
    mValues.put(StatusUpdates.DATA_ID,dataId);
    mValues.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
    mValues.put(PresenceColumns.CONTACT_ID,contactId);
    mValues.put(StatusUpdates.PROTOCOL,protocol);
    mValues.put(StatusUpdates.CUSTOM_PROTOCOL,customProtocol);
    mValues.put(StatusUpdates.IM_HANDLE,handle);
    if (values.containsKey(StatusUpdates.IM_ACCOUNT)) {
      mValues.put(StatusUpdates.IM_ACCOUNT,values.getAsString(StatusUpdates.IM_ACCOUNT));
    }
    mValues.put(StatusUpdates.PRESENCE,values.getAsString(StatusUpdates.PRESENCE));
    mValues.put(StatusUpdates.CHAT_CAPABILITY,values.getAsString(StatusUpdates.CHAT_CAPABILITY));
    mDb.replace(Tables.PRESENCE,null,mValues);
  }
  if (values.containsKey(StatusUpdates.STATUS)) {
    String status=values.getAsString(StatusUpdates.STATUS);
    String resPackage=values.getAsString(StatusUpdates.STATUS_RES_PACKAGE);
    Integer labelResource=values.getAsInteger(StatusUpdates.STATUS_LABEL);
    if (TextUtils.isEmpty(resPackage) && (labelResource == null || labelResource == 0) && protocol != null) {
      labelResource=Im.getProtocolLabelResource(protocol);
    }
    Long iconResource=values.getAsLong(StatusUpdates.STATUS_ICON);
    if (TextUtils.isEmpty(status)) {
      mStatusUpdateDelete.bindLong(1,dataId);
      mStatusUpdateDelete.execute();
    }
 else     if (values.containsKey(StatusUpdates.STATUS_TIMESTAMP)) {
      long timestamp=values.getAsLong(StatusUpdates.STATUS_TIMESTAMP);
      mStatusUpdateReplace.bindLong(1,dataId);
      mStatusUpdateReplace.bindLong(2,timestamp);
      bindString(mStatusUpdateReplace,3,status);
      bindString(mStatusUpdateReplace,4,resPackage);
      bindLong(mStatusUpdateReplace,5,iconResource);
      bindLong(mStatusUpdateReplace,6,labelResource);
      mStatusUpdateReplace.execute();
    }
 else {
      try {
        mStatusUpdateInsert.bindLong(1,dataId);
        bindString(mStatusUpdateInsert,2,status);
        bindString(mStatusUpdateInsert,3,resPackage);
        bindLong(mStatusUpdateInsert,4,iconResource);
        bindLong(mStatusUpdateInsert,5,labelResource);
        mStatusUpdateInsert.executeInsert();
      }
 catch (      SQLiteConstraintException e) {
        long timestamp=System.currentTimeMillis();
        mStatusUpdateAutoTimestamp.bindLong(1,timestamp);
        bindString(mStatusUpdateAutoTimestamp,2,status);
        mStatusUpdateAutoTimestamp.bindLong(3,dataId);
        bindString(mStatusUpdateAutoTimestamp,4,status);
        mStatusUpdateAutoTimestamp.execute();
        bindString(mStatusAttributionUpdate,1,resPackage);
        bindLong(mStatusAttributionUpdate,2,iconResource);
        bindLong(mStatusAttributionUpdate,3,labelResource);
        mStatusAttributionUpdate.bindLong(4,dataId);
        mStatusAttributionUpdate.execute();
      }
    }
  }
  if (contactId != -1) {
    mLastStatusUpdate.bindLong(1,contactId);
    mLastStatusUpdate.bindLong(2,contactId);
    mLastStatusUpdate.execute();
  }
  return dataId;
}","/** 
 * Inserts a status update.
 */
public long insertStatusUpdate(ContentValues values){
  final String handle=values.getAsString(StatusUpdates.IM_HANDLE);
  final Integer protocol=values.getAsInteger(StatusUpdates.PROTOCOL);
  String customProtocol=null;
  if (protocol != null && protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(StatusUpdates.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  long rawContactId=-1;
  long contactId=-1;
  Long dataId=values.getAsLong(StatusUpdates.DATA_ID);
  mSb.setLength(0);
  mSelectionArgs.clear();
  if (dataId != null) {
    mSb.append(Tables.DATA + ""String_Node_Str"" + Data._ID+ ""String_Node_Str"");
    mSelectionArgs.add(String.valueOf(dataId));
  }
 else {
    if (TextUtils.isEmpty(handle) || protocol == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
    String mimeTypeIdIm=String.valueOf(mMimeTypeIdIm);
    if (matchEmail) {
      String mimeTypeIdEmail=String.valueOf(mMimeTypeIdEmail);
      mSb.append(DataColumns.MIMETYPE_ID + ""String_Node_Str"" + ""String_Node_Str""+ Data.DATA1+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str"");
      mSelectionArgs.add(mimeTypeIdEmail);
      mSelectionArgs.add(mimeTypeIdIm);
      mSelectionArgs.add(handle);
      mSelectionArgs.add(mimeTypeIdIm);
      mSelectionArgs.add(String.valueOf(protocol));
      if (customProtocol != null) {
        mSb.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
        mSelectionArgs.add(customProtocol);
      }
      mSb.append(""String_Node_Str"" + DataColumns.MIMETYPE_ID + ""String_Node_Str"");
      mSelectionArgs.add(mimeTypeIdEmail);
    }
 else {
      mSb.append(DataColumns.MIMETYPE_ID + ""String_Node_Str"" + ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
      mSelectionArgs.add(mimeTypeIdIm);
      mSelectionArgs.add(String.valueOf(protocol));
      mSelectionArgs.add(handle);
      if (customProtocol != null) {
        mSb.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
        mSelectionArgs.add(customProtocol);
      }
    }
    if (values.containsKey(StatusUpdates.DATA_ID)) {
      mSb.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"");
      mSelectionArgs.add(values.getAsString(StatusUpdates.DATA_ID));
    }
  }
  mSb.append(""String_Node_Str"").append(getContactsRestrictions());
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,mSb.toString(),mSelectionArgs.toArray(EMPTY_STRING_ARRAY),null,null,Clauses.CONTACT_VISIBLE + ""String_Node_Str"" + Data.RAW_CONTACT_ID);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  if (values.containsKey(StatusUpdates.PRESENCE)) {
    if (customProtocol == null) {
      customProtocol=""String_Node_Str"";
    }
    mValues.clear();
    mValues.put(StatusUpdates.DATA_ID,dataId);
    mValues.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
    mValues.put(PresenceColumns.CONTACT_ID,contactId);
    mValues.put(StatusUpdates.PROTOCOL,protocol);
    mValues.put(StatusUpdates.CUSTOM_PROTOCOL,customProtocol);
    mValues.put(StatusUpdates.IM_HANDLE,handle);
    if (values.containsKey(StatusUpdates.IM_ACCOUNT)) {
      mValues.put(StatusUpdates.IM_ACCOUNT,values.getAsString(StatusUpdates.IM_ACCOUNT));
    }
    mValues.put(StatusUpdates.PRESENCE,values.getAsString(StatusUpdates.PRESENCE));
    mValues.put(StatusUpdates.CHAT_CAPABILITY,values.getAsString(StatusUpdates.CHAT_CAPABILITY));
    mDb.replace(Tables.PRESENCE,null,mValues);
  }
  if (values.containsKey(StatusUpdates.STATUS)) {
    String status=values.getAsString(StatusUpdates.STATUS);
    String resPackage=values.getAsString(StatusUpdates.STATUS_RES_PACKAGE);
    Integer labelResource=values.getAsInteger(StatusUpdates.STATUS_LABEL);
    if (TextUtils.isEmpty(resPackage) && (labelResource == null || labelResource == 0) && protocol != null) {
      labelResource=Im.getProtocolLabelResource(protocol);
    }
    Long iconResource=values.getAsLong(StatusUpdates.STATUS_ICON);
    if (TextUtils.isEmpty(status)) {
      mStatusUpdateDelete.bindLong(1,dataId);
      mStatusUpdateDelete.execute();
    }
 else     if (values.containsKey(StatusUpdates.STATUS_TIMESTAMP)) {
      long timestamp=values.getAsLong(StatusUpdates.STATUS_TIMESTAMP);
      mStatusUpdateReplace.bindLong(1,dataId);
      mStatusUpdateReplace.bindLong(2,timestamp);
      bindString(mStatusUpdateReplace,3,status);
      bindString(mStatusUpdateReplace,4,resPackage);
      bindLong(mStatusUpdateReplace,5,iconResource);
      bindLong(mStatusUpdateReplace,6,labelResource);
      mStatusUpdateReplace.execute();
    }
 else {
      try {
        mStatusUpdateInsert.bindLong(1,dataId);
        bindString(mStatusUpdateInsert,2,status);
        bindString(mStatusUpdateInsert,3,resPackage);
        bindLong(mStatusUpdateInsert,4,iconResource);
        bindLong(mStatusUpdateInsert,5,labelResource);
        mStatusUpdateInsert.executeInsert();
      }
 catch (      SQLiteConstraintException e) {
        long timestamp=System.currentTimeMillis();
        mStatusUpdateAutoTimestamp.bindLong(1,timestamp);
        bindString(mStatusUpdateAutoTimestamp,2,status);
        mStatusUpdateAutoTimestamp.bindLong(3,dataId);
        bindString(mStatusUpdateAutoTimestamp,4,status);
        mStatusUpdateAutoTimestamp.execute();
        bindString(mStatusAttributionUpdate,1,resPackage);
        bindLong(mStatusAttributionUpdate,2,iconResource);
        bindLong(mStatusAttributionUpdate,3,labelResource);
        mStatusAttributionUpdate.bindLong(4,dataId);
        mStatusAttributionUpdate.execute();
      }
    }
  }
  if (contactId != -1) {
    mContactAggregator.updateLastStatusUpdateId(contactId);
  }
  return dataId;
}",0.9892746484468102
152482,"private boolean initialize(){
  final Context context=getContext();
  mCountryMonitor=CountryMonitor.getInstance(context);
  mDbHelper=(ContactsDatabaseHelper)getDatabaseHelper();
  mContactDirectoryManager=new ContactDirectoryManager(this);
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mDbHelper,this,mGlobalSearchSupport);
  mDb=mDbHelper.getWritableDatabase();
  initForDefaultLocale();
  mSetPrimaryStatement=mDb.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=mDb.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=mDb.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_PRIMARY+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_ALTERNATIVE+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME_STYLE+ ""String_Node_Str""+ RawContacts.SORT_KEY_PRIMARY+ ""String_Node_Str""+ RawContacts.SORT_KEY_ALTERNATIVE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastStatusUpdate=mDb.compileStatement(""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str""+ ContactsColumns.LAST_STATUS_UPDATE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.STATUS_UPDATES+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ DataColumns.CONCRETE_RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ ContactsColumns.CONCRETE_ID+ ""String_Node_Str"");
  mNameLookupInsert=mDb.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  mNameLookupDelete=mDb.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateInsert=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateReplace=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateAutoTimestamp=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str"");
  mStatusAttributionUpdate=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateDelete=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mResetNameVerifiedForOtherRawContacts=mDb.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.NAME_VERIFIED+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mMimeTypeIdEmail=mDbHelper.getMimeTypeId(Email.CONTENT_ITEM_TYPE);
  mMimeTypeIdIm=mDbHelper.getMimeTypeId(Im.CONTENT_ITEM_TYPE);
  mMimeTypeIdStructuredName=mDbHelper.getMimeTypeId(StructuredName.CONTENT_ITEM_TYPE);
  mMimeTypeIdOrganization=mDbHelper.getMimeTypeId(Organization.CONTENT_ITEM_TYPE);
  mMimeTypeIdNickname=mDbHelper.getMimeTypeId(Nickname.CONTENT_ITEM_TYPE);
  mMimeTypeIdPhone=mDbHelper.getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
  verifyAccounts();
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
 else {
    verifyLocale();
  }
  startContactDirectoryManager();
  if (isAggregationUpgradeNeeded()) {
    upgradeAggregationAlgorithm();
  }
  return (mDb != null);
}","private boolean initialize(){
  final Context context=getContext();
  mCountryMonitor=CountryMonitor.getInstance(context);
  mDbHelper=(ContactsDatabaseHelper)getDatabaseHelper();
  mContactDirectoryManager=new ContactDirectoryManager(this);
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mDbHelper,this,mGlobalSearchSupport);
  mDb=mDbHelper.getWritableDatabase();
  initForDefaultLocale();
  mSetPrimaryStatement=mDb.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=mDb.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=mDb.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_PRIMARY+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_ALTERNATIVE+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME_STYLE+ ""String_Node_Str""+ RawContacts.SORT_KEY_PRIMARY+ ""String_Node_Str""+ RawContacts.SORT_KEY_ALTERNATIVE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mNameLookupInsert=mDb.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  mNameLookupDelete=mDb.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateInsert=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateReplace=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateAutoTimestamp=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str"");
  mStatusAttributionUpdate=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateDelete=mDb.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mResetNameVerifiedForOtherRawContacts=mDb.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.NAME_VERIFIED+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mMimeTypeIdEmail=mDbHelper.getMimeTypeId(Email.CONTENT_ITEM_TYPE);
  mMimeTypeIdIm=mDbHelper.getMimeTypeId(Im.CONTENT_ITEM_TYPE);
  mMimeTypeIdStructuredName=mDbHelper.getMimeTypeId(StructuredName.CONTENT_ITEM_TYPE);
  mMimeTypeIdOrganization=mDbHelper.getMimeTypeId(Organization.CONTENT_ITEM_TYPE);
  mMimeTypeIdNickname=mDbHelper.getMimeTypeId(Nickname.CONTENT_ITEM_TYPE);
  mMimeTypeIdPhone=mDbHelper.getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
  verifyAccounts();
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
 else {
    verifyLocale();
  }
  startContactDirectoryManager();
  if (isAggregationUpgradeNeeded()) {
    upgradeAggregationAlgorithm();
  }
  return (mDb != null);
}",0.9263079639438714
152483,"protected Uri insertStatusUpdate(int protocol,String customProtocol,String handle,int presence,String status,long timestamp,int chatMode){
  ContentValues values=new ContentValues();
  values.put(StatusUpdates.PROTOCOL,protocol);
  values.put(StatusUpdates.CUSTOM_PROTOCOL,customProtocol);
  values.put(StatusUpdates.IM_HANDLE,handle);
  if (presence != 0) {
    values.put(StatusUpdates.PRESENCE,presence);
    values.put(StatusUpdates.CHAT_CAPABILITY,chatMode);
  }
  if (status != null) {
    values.put(StatusUpdates.STATUS,status);
  }
  if (timestamp != 0) {
    values.put(StatusUpdates.STATUS_TIMESTAMP,timestamp);
  }
  Uri resultUri=mResolver.insert(StatusUpdates.CONTENT_URI,values);
  return resultUri;
}","private Uri insertStatusUpdate(ContentValues values,int presence,String status,long timestamp,int chatMode){
  if (presence != 0) {
    values.put(StatusUpdates.PRESENCE,presence);
    values.put(StatusUpdates.CHAT_CAPABILITY,chatMode);
  }
  if (status != null) {
    values.put(StatusUpdates.STATUS,status);
  }
  if (timestamp != 0) {
    values.put(StatusUpdates.STATUS_TIMESTAMP,timestamp);
  }
  Uri resultUri=mResolver.insert(StatusUpdates.CONTENT_URI,values);
  return resultUri;
}",0.7319502074688796
152484,"public Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,boolean hiddenOnly){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
    return mDbHelper.getSyncState().query(db,projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    if (hiddenOnly) {
      qb.appendWhere(Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"");
    }
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  String[] args;
  if (selectionArgs == null) {
    args=new String[2];
  }
 else {
    args=new String[selectionArgs.length + 2];
    System.arraycopy(selectionArgs,0,args,2,selectionArgs.length);
  }
  args[0]=String.valueOf(contactId);
  args[1]=Uri.encode(lookupKey);
  lookupQb.appendWhere(Contacts._ID + ""String_Node_Str"" + Contacts.LOOKUP_KEY+ ""String_Node_Str"");
  Cursor c=query(db,lookupQb,projection,selection,args,sortOrder,groupBy,limit);
  if (c.getCount() != 0) {
    return c;
  }
  c.close();
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
String[] args;
if (selectionArgs == null) {
  args=new String[2];
}
 else {
  args=new String[selectionArgs.length + 2];
  System.arraycopy(selectionArgs,0,args,2,selectionArgs.length);
}
args[0]=String.valueOf(contactId);
args[1]=Uri.encode(lookupKey);
lookupQb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Data.LOOKUP_KEY+ ""String_Node_Str"");
Cursor c=query(db,lookupQb,projection,selection,args,sortOrder,groupBy,limit);
if (c.getCount() != 0) {
  return c;
}
c.close();
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
qb.setTables(mDbHelper.getContactView(true));
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam);
if (hiddenOnly) {
qb.appendWhere(Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"");
}
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
String filterSql=null;
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
filterSql=sb.toString();
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
String[] starredProjection=null;
String[] frequentProjection=null;
if (projection != null) {
starredProjection=appendProjectionArg(projection,TIMES_CONTACED_SORT_COLUMN);
frequentProjection=appendProjectionArg(projection,TIMES_CONTACED_SORT_COLUMN);
}
if (filterSql != null) {
qb.appendWhere(filterSql);
}
qb.setProjectionMap(sStrequentStarredProjectionMap);
final String starredQuery=qb.buildQuery(starredProjection,Contacts.STARRED + ""String_Node_Str"",null,Contacts._ID,null,null,null);
qb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (filterSql != null) {
qb.appendWhere(filterSql);
}
qb.setProjectionMap(sStrequentFrequentProjectionMap);
final String frequentQuery=qb.buildQuery(frequentProjection,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str"",null,Contacts._ID,null,null,null);
final String query=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},STREQUENT_ORDER_BY,STREQUENT_LIMIT);
Cursor c=db.rawQuery(query,null);
if (c != null) {
c.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return c;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
}
break;
}
case CONTACTS_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
setTablesAndProjectionMapForData(qb,uri,projection,true);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"");
appendRawContactsByNormalizedNameFilter(sb,normalizedName,false);
orNeeded=true;
hasCondition=true;
}
if (isPhoneNumber(filterParam)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
String number=PhoneNumberUtils.convertKeypadLettersToDigits(filterParam);
String reversed=PhoneNumberUtils.getStrippedReversed(number);
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(reversed);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
sortOrder=Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"" + RawContacts.CONTACT_ID;
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
break;
}
case EMAILS_FILTER:
{
setTablesAndProjectionMapForData(qb,uri,projection,true);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ mMimeTypeIdEmail+ ""String_Node_Str""+ Data.DATA1+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ mMimeTypeIdEmail+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
appendRawContactsByNormalizedNameFilter(sb,normalizedName,false);
}
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
sortOrder=Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"" + RawContacts.CONTACT_ID;
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONE_LOOKUP:
{
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=RawContactsColumns.CONCRETE_ID;
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
mDbHelper.buildPhoneLookupAndContactQuery(qb,number);
qb.setProjectionMap(sPhoneLookupProjectionMap);
selection=null;
selectionArgs=null;
break;
}
case GROUPS:
{
qb.setTables(mDbHelper.getGroupView());
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(mDbHelper.getGroupView());
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
qb.setTables(mDbHelper.getGroupView() + ""String_Node_Str"");
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=Groups._ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mContactAggregator.queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(db,uri,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
return mGlobalSearchSupport.handleSearchShortcutRefresh(db,lookupKey,projection);
}
case LIVE_FOLDERS_CONTACTS:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
break;
case LIVE_FOLDERS_CONTACTS_WITH_PHONES:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.HAS_PHONE_NUMBER + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_FAVORITES:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.STARRED + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_GROUP_NAME:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
break;
case RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawContactsEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawContactsEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long directoryId=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(directoryId));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrictProjectionMap(true);
Cursor cursor=query(db,qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,db,qb,selection,selectionArgs,sortOrder);
}
return cursor;
}","public Cursor queryLocal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder,boolean hiddenOnly){
  if (VERBOSE_LOGGING) {
    Log.v(TAG,""String_Node_Str"" + uri);
  }
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String groupBy=null;
  String limit=getLimit(uri);
  final int match=sUriMatcher.match(uri);
switch (match) {
case SYNCSTATE:
    return mDbHelper.getSyncState().query(db,projection,selection,selectionArgs,sortOrder);
case CONTACTS:
{
    setTablesAndProjectionMapForContacts(qb,uri,projection);
    if (hiddenOnly) {
      qb.appendWhere(Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"");
    }
    break;
  }
case CONTACTS_ID:
{
  long contactId=ContentUris.parseId(uri);
  setTablesAndProjectionMapForContacts(qb,uri,projection);
  selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
  qb.appendWhere(Contacts._ID + ""String_Node_Str"");
  break;
}
case CONTACTS_LOOKUP:
case CONTACTS_LOOKUP_ID:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 3) {
  throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 4) {
  long contactId=Long.parseLong(pathSegments.get(3));
  SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
  setTablesAndProjectionMapForContacts(lookupQb,uri,projection);
  String[] args;
  if (selectionArgs == null) {
    args=new String[2];
  }
 else {
    args=new String[selectionArgs.length + 2];
    System.arraycopy(selectionArgs,0,args,2,selectionArgs.length);
  }
  args[0]=String.valueOf(contactId);
  args[1]=Uri.encode(lookupKey);
  lookupQb.appendWhere(Contacts._ID + ""String_Node_Str"" + Contacts.LOOKUP_KEY+ ""String_Node_Str"");
  Cursor c=query(db,lookupQb,projection,selection,args,sortOrder,groupBy,limit);
  if (c.getCount() != 0) {
    return c;
  }
  c.close();
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_LOOKUP_DATA:
case CONTACTS_LOOKUP_ID_DATA:
{
List<String> pathSegments=uri.getPathSegments();
int segmentCount=pathSegments.size();
if (segmentCount < 4) {
throw new IllegalArgumentException(mDbHelper.exceptionMessage(""String_Node_Str"",uri));
}
String lookupKey=pathSegments.get(2);
if (segmentCount == 5) {
long contactId=Long.parseLong(pathSegments.get(3));
SQLiteQueryBuilder lookupQb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForData(lookupQb,uri,projection,false);
String[] args;
if (selectionArgs == null) {
  args=new String[2];
}
 else {
  args=new String[selectionArgs.length + 2];
  System.arraycopy(selectionArgs,0,args,2,selectionArgs.length);
}
args[0]=String.valueOf(contactId);
args[1]=Uri.encode(lookupKey);
lookupQb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str""+ ""String_Node_Str""+ Data.LOOKUP_KEY+ ""String_Node_Str"");
Cursor c=query(db,lookupQb,projection,selection,args,sortOrder,groupBy,limit);
if (c.getCount() != 0) {
  return c;
}
c.close();
}
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(""String_Node_Str"" + Data.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_VCARD:
{
final String lookupKey=Uri.encode(uri.getPathSegments().get(2));
qb.setTables(mDbHelper.getContactView(true));
qb.setProjectionMap(sContactsVCardProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(lookupContactIdByLookupKey(db,lookupKey)));
qb.appendWhere(Contacts._ID + ""String_Node_Str"");
break;
}
case CONTACTS_AS_MULTI_VCARD:
{
SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
String currentDateString=dateFormat.format(new Date()).toString();
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + OpenableColumns.DISPLAY_NAME + ""String_Node_Str""+ ""String_Node_Str""+ OpenableColumns.SIZE,new String[]{currentDateString});
}
case CONTACTS_FILTER:
{
String filterParam=""String_Node_Str"";
if (uri.getPathSegments().size() > 2) {
filterParam=uri.getLastPathSegment();
}
setTablesAndProjectionMapForContactsWithSnippet(qb,uri,projection,filterParam);
if (hiddenOnly) {
qb.appendWhere(Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"");
}
break;
}
case CONTACTS_STREQUENT_FILTER:
case CONTACTS_STREQUENT:
{
String filterSql=null;
if (match == CONTACTS_STREQUENT_FILTER && uri.getPathSegments().size() > 3) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(Contacts._ID + ""String_Node_Str"");
appendContactFilterAsNestedQuery(sb,filterParam);
filterSql=sb.toString();
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
String[] starredProjection=null;
String[] frequentProjection=null;
if (projection != null) {
starredProjection=appendProjectionArg(projection,TIMES_CONTACTED_SORT_COLUMN);
frequentProjection=appendProjectionArg(projection,TIMES_CONTACTED_SORT_COLUMN);
}
if (filterSql != null) {
qb.appendWhere(filterSql);
}
qb.setProjectionMap(sStrequentStarredProjectionMap);
final String starredQuery=qb.buildQuery(starredProjection,Contacts.STARRED + ""String_Node_Str"",null,Contacts._ID,null,null,null);
qb=new SQLiteQueryBuilder();
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (filterSql != null) {
qb.appendWhere(filterSql);
}
qb.setProjectionMap(sStrequentFrequentProjectionMap);
final String frequentQuery=qb.buildQuery(frequentProjection,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + Contacts.STARRED+ ""String_Node_Str""+ Contacts.STARRED+ ""String_Node_Str"",null,Contacts._ID,null,null,null);
final String query=qb.buildUnionQuery(new String[]{starredQuery,frequentQuery},STREQUENT_ORDER_BY,STREQUENT_LIMIT);
Cursor c=db.rawQuery(query,null);
if (c != null) {
c.setNotificationUri(getContext().getContentResolver(),ContactsContract.AUTHORITY_URI);
}
return c;
}
case CONTACTS_GROUP:
{
setTablesAndProjectionMapForContacts(qb,uri,projection);
if (uri.getPathSegments().size() > 2) {
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
}
break;
}
case CONTACTS_DATA:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
break;
}
case CONTACTS_PHOTO:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(contactId));
qb.appendWhere(""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Contacts.PHOTO_ID);
break;
}
case PHONES:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case PHONES_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONES_FILTER:
{
setTablesAndProjectionMapForData(qb,uri,projection,true);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Phone.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String filterParam=uri.getLastPathSegment();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
boolean hasCondition=false;
boolean orNeeded=false;
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(Data.RAW_CONTACT_ID + ""String_Node_Str"");
appendRawContactsByNormalizedNameFilter(sb,normalizedName,false);
orNeeded=true;
hasCondition=true;
}
if (isPhoneNumber(filterParam)) {
if (orNeeded) {
sb.append(""String_Node_Str"");
}
String number=PhoneNumberUtils.convertKeypadLettersToDigits(filterParam);
String reversed=PhoneNumberUtils.getStrippedReversed(number);
sb.append(Data._ID + ""String_Node_Str"" + PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str"");
sb.append(reversed);
sb.append(""String_Node_Str"");
hasCondition=true;
}
if (!hasCondition) {
sb.append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=PhoneColumns.NORMALIZED_NUMBER + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
sortOrder=Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"" + RawContacts.CONTACT_ID;
}
break;
}
case EMAILS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case EMAILS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
break;
}
case EMAILS_LOOKUP:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
if (uri.getPathSegments().size() > 2) {
String email=uri.getLastPathSegment();
String address=mDbHelper.extractAddressFromEmailAddress(email);
selectionArgs=insertSelectionArg(selectionArgs,address);
qb.appendWhere(""String_Node_Str"" + Email.DATA + ""String_Node_Str"");
}
break;
}
case EMAILS_FILTER:
{
setTablesAndProjectionMapForData(qb,uri,projection,true);
String filterParam=null;
if (uri.getPathSegments().size() > 3) {
filterParam=uri.getLastPathSegment();
if (TextUtils.isEmpty(filterParam)) {
filterParam=null;
}
}
if (filterParam == null) {
qb.appendWhere(""String_Node_Str"");
}
 else {
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ mMimeTypeIdEmail+ ""String_Node_Str""+ Data.DATA1+ ""String_Node_Str"");
DatabaseUtils.appendEscapedSQLString(sb,filterParam + '%');
if (!filterParam.contains(""String_Node_Str"")) {
String normalizedName=NameNormalizer.normalize(filterParam);
if (normalizedName.length() > 0) {
sb.append(""String_Node_Str"" + Data._ID + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ mMimeTypeIdEmail+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
appendRawContactsByNormalizedNameFilter(sb,normalizedName,false);
}
}
sb.append(""String_Node_Str"");
qb.appendWhere(sb);
}
groupBy=Email.DATA + ""String_Node_Str"" + RawContacts.CONTACT_ID;
if (sortOrder == null) {
sortOrder=Contacts.IN_VISIBLE_GROUP + ""String_Node_Str"" + RawContacts.CONTACT_ID;
}
break;
}
case POSTALS:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
break;
}
case POSTALS_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data.MIMETYPE + ""String_Node_Str""+ StructuredPostal.CONTENT_ITEM_TYPE+ ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS:
{
setTablesAndProjectionMapForRawContacts(qb,uri);
break;
}
case RAW_CONTACTS_ID:
{
long rawContactId=ContentUris.parseId(uri);
setTablesAndProjectionMapForRawContacts(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case RAW_CONTACTS_DATA:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + Data.RAW_CONTACT_ID + ""String_Node_Str"");
break;
}
case DATA:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
break;
}
case DATA_ID:
{
setTablesAndProjectionMapForData(qb,uri,projection,false);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(""String_Node_Str"" + Data._ID + ""String_Node_Str"");
break;
}
case PHONE_LOOKUP:
{
if (TextUtils.isEmpty(sortOrder)) {
sortOrder=RawContactsColumns.CONCRETE_ID;
}
String number=uri.getPathSegments().size() > 1 ? uri.getLastPathSegment() : ""String_Node_Str"";
mDbHelper.buildPhoneLookupAndContactQuery(qb,number);
qb.setProjectionMap(sPhoneLookupProjectionMap);
selection=null;
selectionArgs=null;
break;
}
case GROUPS:
{
qb.setTables(mDbHelper.getGroupView());
qb.setProjectionMap(sGroupsProjectionMap);
appendAccountFromParameter(qb,uri);
break;
}
case GROUPS_ID:
{
qb.setTables(mDbHelper.getGroupView());
qb.setProjectionMap(sGroupsProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(Groups._ID + ""String_Node_Str"");
break;
}
case GROUPS_SUMMARY:
{
qb.setTables(mDbHelper.getGroupView() + ""String_Node_Str"");
qb.setProjectionMap(sGroupsSummaryProjectionMap);
appendAccountFromParameter(qb,uri);
groupBy=Groups._ID;
break;
}
case AGGREGATION_EXCEPTIONS:
{
qb.setTables(Tables.AGGREGATION_EXCEPTIONS);
qb.setProjectionMap(sAggregationExceptionsProjectionMap);
break;
}
case AGGREGATION_SUGGESTIONS:
{
long contactId=Long.parseLong(uri.getPathSegments().get(1));
String filter=null;
if (uri.getPathSegments().size() > 3) {
filter=uri.getPathSegments().get(3);
}
final int maxSuggestions;
if (limit != null) {
maxSuggestions=Integer.parseInt(limit);
}
 else {
maxSuggestions=DEFAULT_MAX_SUGGESTIONS;
}
setTablesAndProjectionMapForContacts(qb,uri,projection);
return mContactAggregator.queryAggregationSuggestions(qb,projection,contactId,maxSuggestions,filter);
}
case SETTINGS:
{
qb.setTables(Tables.SETTINGS);
qb.setProjectionMap(sSettingsProjectionMap);
appendAccountFromParameter(qb,uri);
final String groupMembershipMimetypeId=Long.toString(mDbHelper.getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_COUNT)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
if (projection != null && projection.length != 0 && mDbHelper.isInProjection(projection,Settings.UNGROUPED_WITH_PHONES)) {
selectionArgs=insertSelectionArg(selectionArgs,groupMembershipMimetypeId);
}
break;
}
case STATUS_UPDATES:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
break;
}
case STATUS_UPDATES_ID:
{
setTableAndProjectionMapForStatusUpdates(qb,projection);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
qb.appendWhere(DataColumns.CONCRETE_ID + ""String_Node_Str"");
break;
}
case SEARCH_SUGGESTIONS:
{
return mGlobalSearchSupport.handleSearchSuggestionsQuery(db,uri,limit);
}
case SEARCH_SHORTCUT:
{
String lookupKey=uri.getLastPathSegment();
return mGlobalSearchSupport.handleSearchShortcutRefresh(db,lookupKey,projection);
}
case LIVE_FOLDERS_CONTACTS:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
break;
case LIVE_FOLDERS_CONTACTS_WITH_PHONES:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.HAS_PHONE_NUMBER + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_FAVORITES:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(Contacts.STARRED + ""String_Node_Str"");
break;
case LIVE_FOLDERS_CONTACTS_GROUP_NAME:
qb.setTables(mDbHelper.getContactView());
qb.setProjectionMap(sLiveFoldersProjectionMap);
qb.appendWhere(CONTACTS_IN_GROUP_SELECT);
selectionArgs=insertSelectionArg(selectionArgs,uri.getLastPathSegment());
break;
case RAW_CONTACT_ENTITIES:
{
setTablesAndProjectionMapForRawContactsEntities(qb,uri);
break;
}
case RAW_CONTACT_ENTITY_ID:
{
long rawContactId=Long.parseLong(uri.getPathSegments().get(1));
setTablesAndProjectionMapForRawContactsEntities(qb,uri);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(rawContactId));
qb.appendWhere(""String_Node_Str"" + RawContacts._ID + ""String_Node_Str"");
break;
}
case PROVIDER_STATUS:
{
return queryProviderStatus(uri,projection);
}
case DIRECTORIES:
{
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
break;
}
case DIRECTORIES_ID:
{
long directoryId=ContentUris.parseId(uri);
qb.setTables(Tables.DIRECTORIES);
qb.setProjectionMap(sDirectoryProjectionMap);
selectionArgs=insertSelectionArg(selectionArgs,String.valueOf(directoryId));
qb.appendWhere(Directory._ID + ""String_Node_Str"");
break;
}
default :
return mLegacyApiSupport.query(uri,projection,selection,selectionArgs,sortOrder,limit);
}
qb.setStrictProjectionMap(true);
Cursor cursor=query(db,qb,projection,selection,selectionArgs,sortOrder,groupBy,limit);
if (readBooleanQueryParameter(uri,ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS,false)) {
cursor=bundleLetterCountExtras(cursor,db,qb,selection,selectionArgs,sortOrder);
}
return cursor;
}",0.999943394090343
152485,"private void insertEmail(Cursor c,SQLiteStatement insert){
  long personId=c.getLong(ContactMethodsQuery.PERSON);
  String email=c.getString(ContactMethodsQuery.DATA);
  insert.bindLong(EmailInsert.RAW_CONTACT_ID,personId);
  insert.bindLong(EmailInsert.MIMETYPE_ID,mEmailMimetypeId);
  bindString(insert,EmailInsert.IS_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,EmailInsert.DATA,email);
  bindString(insert,EmailInsert.AUX_DATA,c.getString(ContactMethodsQuery.AUX_DATA));
  bindString(insert,EmailInsert.TYPE,c.getString(ContactMethodsQuery.TYPE));
  bindString(insert,EmailInsert.LABEL,c.getString(ContactMethodsQuery.LABEL));
  long dataId=insert(insert);
  mContactsProvider.insertNameLookupForEmail(personId,dataId,email);
}","private void insertEmail(Cursor c,SQLiteStatement insert){
  long personId=c.getLong(ContactMethodsQuery.PERSON);
  String email=c.getString(ContactMethodsQuery.DATA);
  insert.bindLong(EmailInsert.RAW_CONTACT_ID,personId);
  insert.bindLong(EmailInsert.MIMETYPE_ID,mEmailMimetypeId);
  bindString(insert,EmailInsert.IS_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,EmailInsert.IS_SUPER_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,EmailInsert.DATA,email);
  bindString(insert,EmailInsert.AUX_DATA,c.getString(ContactMethodsQuery.AUX_DATA));
  bindString(insert,EmailInsert.TYPE,c.getString(ContactMethodsQuery.TYPE));
  bindString(insert,EmailInsert.LABEL,c.getString(ContactMethodsQuery.LABEL));
  long dataId=insert(insert);
  mContactsProvider.insertNameLookupForEmail(personId,dataId,email);
}",0.9416873449131512
152486,"private void insertOrganization(Cursor c,SQLiteStatement insert){
  long id=c.getLong(OrganizationsQuery.PERSON);
  insert.bindLong(OrganizationInsert.RAW_CONTACT_ID,id);
  insert.bindLong(OrganizationInsert.MIMETYPE_ID,mOrganizationMimetypeId);
  bindString(insert,OrganizationInsert.IS_PRIMARY,c.getString(OrganizationsQuery.ISPRIMARY));
  bindString(insert,OrganizationInsert.COMPANY,c.getString(OrganizationsQuery.COMPANY));
  bindString(insert,OrganizationInsert.TITLE,c.getString(OrganizationsQuery.TITLE));
  bindString(insert,OrganizationInsert.TYPE,c.getString(OrganizationsQuery.TYPE));
  bindString(insert,OrganizationInsert.LABEL,c.getString(OrganizationsQuery.LABEL));
  insert(insert);
}","private void insertOrganization(Cursor c,SQLiteStatement insert){
  long id=c.getLong(OrganizationsQuery.PERSON);
  insert.bindLong(OrganizationInsert.RAW_CONTACT_ID,id);
  insert.bindLong(OrganizationInsert.MIMETYPE_ID,mOrganizationMimetypeId);
  bindString(insert,OrganizationInsert.IS_PRIMARY,c.getString(OrganizationsQuery.ISPRIMARY));
  bindString(insert,OrganizationInsert.IS_SUPER_PRIMARY,c.getString(OrganizationsQuery.ISPRIMARY));
  bindString(insert,OrganizationInsert.COMPANY,c.getString(OrganizationsQuery.COMPANY));
  bindString(insert,OrganizationInsert.TITLE,c.getString(OrganizationsQuery.TITLE));
  bindString(insert,OrganizationInsert.TYPE,c.getString(OrganizationsQuery.TYPE));
  bindString(insert,OrganizationInsert.LABEL,c.getString(OrganizationsQuery.LABEL));
  insert(insert);
}",0.933422103861518
152487,"private void insertPostal(Cursor c,SQLiteStatement insert){
  long personId=c.getLong(ContactMethodsQuery.PERSON);
  insert.bindLong(PostalInsert.RAW_CONTACT_ID,personId);
  insert.bindLong(PostalInsert.MIMETYPE_ID,mPostalMimetypeId);
  bindString(insert,PostalInsert.IS_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,PostalInsert.DATA,c.getString(ContactMethodsQuery.DATA));
  bindString(insert,PostalInsert.AUX_DATA,c.getString(ContactMethodsQuery.AUX_DATA));
  bindString(insert,PostalInsert.TYPE,c.getString(ContactMethodsQuery.TYPE));
  bindString(insert,PostalInsert.LABEL,c.getString(ContactMethodsQuery.LABEL));
  insert(insert);
}","private void insertPostal(Cursor c,SQLiteStatement insert){
  long personId=c.getLong(ContactMethodsQuery.PERSON);
  insert.bindLong(PostalInsert.RAW_CONTACT_ID,personId);
  insert.bindLong(PostalInsert.MIMETYPE_ID,mPostalMimetypeId);
  bindString(insert,PostalInsert.IS_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,PostalInsert.IS_SUPER_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,PostalInsert.DATA,c.getString(ContactMethodsQuery.DATA));
  bindString(insert,PostalInsert.AUX_DATA,c.getString(ContactMethodsQuery.AUX_DATA));
  bindString(insert,PostalInsert.TYPE,c.getString(ContactMethodsQuery.TYPE));
  bindString(insert,PostalInsert.LABEL,c.getString(ContactMethodsQuery.LABEL));
  insert(insert);
}",0.9333333333333332
152488,"private void insertPhone(Cursor c,SQLiteStatement phoneInsert,SQLiteStatement phoneLookupInsert,SQLiteStatement hasPhoneUpdate){
  long lastUpdatedContact=-1;
  long id=c.getLong(PhonesQuery.PERSON);
  String number=c.getString(PhonesQuery.NUMBER);
  String normalizedNumber=null;
  if (number != null) {
    normalizedNumber=PhoneNumberUtils.getStrippedReversed(number);
  }
  phoneInsert.bindLong(PhoneInsert.RAW_CONTACT_ID,id);
  phoneInsert.bindLong(PhoneInsert.MIMETYPE_ID,mPhoneMimetypeId);
  bindString(phoneInsert,PhoneInsert.IS_PRIMARY,c.getString(PhonesQuery.ISPRIMARY));
  bindString(phoneInsert,PhoneInsert.NUMBER,number);
  bindString(phoneInsert,PhoneInsert.TYPE,c.getString(PhonesQuery.TYPE));
  bindString(phoneInsert,PhoneInsert.LABEL,c.getString(PhonesQuery.LABEL));
  bindString(phoneInsert,PhoneInsert.NORMALIZED_NUMBER,normalizedNumber);
  long dataId=insert(phoneInsert);
  if (normalizedNumber != null) {
    phoneLookupInsert.bindLong(PhoneLookupInsert.RAW_CONTACT_ID,id);
    phoneLookupInsert.bindLong(PhoneLookupInsert.DATA_ID,dataId);
    phoneLookupInsert.bindString(PhoneLookupInsert.NORMALIZED_NUMBER,normalizedNumber);
    phoneLookupInsert.bindString(PhoneLookupInsert.MIN_MATCH,PhoneNumberUtils.toCallerIDMinMatch(number));
    insert(phoneLookupInsert);
    if (lastUpdatedContact != id) {
      lastUpdatedContact=id;
      hasPhoneUpdate.bindLong(HasPhoneNumberUpdate.CONTACT_ID,id);
      hasPhoneUpdate.execute();
    }
  }
}","private void insertPhone(Cursor c,SQLiteStatement phoneInsert,SQLiteStatement phoneLookupInsert,SQLiteStatement hasPhoneUpdate){
  long lastUpdatedContact=-1;
  long id=c.getLong(PhonesQuery.PERSON);
  String number=c.getString(PhonesQuery.NUMBER);
  String normalizedNumber=null;
  if (number != null) {
    normalizedNumber=PhoneNumberUtils.getStrippedReversed(number);
  }
  phoneInsert.bindLong(PhoneInsert.RAW_CONTACT_ID,id);
  phoneInsert.bindLong(PhoneInsert.MIMETYPE_ID,mPhoneMimetypeId);
  bindString(phoneInsert,PhoneInsert.IS_PRIMARY,c.getString(PhonesQuery.ISPRIMARY));
  bindString(phoneInsert,PhoneInsert.IS_SUPER_PRIMARY,c.getString(PhonesQuery.ISPRIMARY));
  bindString(phoneInsert,PhoneInsert.NUMBER,number);
  bindString(phoneInsert,PhoneInsert.TYPE,c.getString(PhonesQuery.TYPE));
  bindString(phoneInsert,PhoneInsert.LABEL,c.getString(PhonesQuery.LABEL));
  bindString(phoneInsert,PhoneInsert.NORMALIZED_NUMBER,normalizedNumber);
  long dataId=insert(phoneInsert);
  if (normalizedNumber != null) {
    phoneLookupInsert.bindLong(PhoneLookupInsert.RAW_CONTACT_ID,id);
    phoneLookupInsert.bindLong(PhoneLookupInsert.DATA_ID,dataId);
    phoneLookupInsert.bindString(PhoneLookupInsert.NORMALIZED_NUMBER,normalizedNumber);
    phoneLookupInsert.bindString(PhoneLookupInsert.MIN_MATCH,PhoneNumberUtils.toCallerIDMinMatch(number));
    insert(phoneLookupInsert);
    if (lastUpdatedContact != id) {
      lastUpdatedContact=id;
      hasPhoneUpdate.bindLong(HasPhoneNumberUpdate.CONTACT_ID,id);
      hasPhoneUpdate.execute();
    }
  }
}",0.969857568731368
152489,"private void insertIm(Cursor c,SQLiteStatement insert){
  long personId=c.getLong(ContactMethodsQuery.PERSON);
  insert.bindLong(ImInsert.RAW_CONTACT_ID,personId);
  insert.bindLong(ImInsert.MIMETYPE_ID,mImMimetypeId);
  bindString(insert,ImInsert.IS_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,ImInsert.DATA,c.getString(ContactMethodsQuery.DATA));
  bindString(insert,ImInsert.AUX_DATA,c.getString(ContactMethodsQuery.AUX_DATA));
  bindString(insert,ImInsert.TYPE,c.getString(ContactMethodsQuery.TYPE));
  bindString(insert,ImInsert.LABEL,c.getString(ContactMethodsQuery.LABEL));
  insert(insert);
}","private void insertIm(Cursor c,SQLiteStatement insert){
  long personId=c.getLong(ContactMethodsQuery.PERSON);
  insert.bindLong(ImInsert.RAW_CONTACT_ID,personId);
  insert.bindLong(ImInsert.MIMETYPE_ID,mImMimetypeId);
  bindString(insert,ImInsert.IS_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,ImInsert.IS_SUPER_PRIMARY,c.getString(ContactMethodsQuery.ISPRIMARY));
  bindString(insert,ImInsert.DATA,c.getString(ContactMethodsQuery.DATA));
  bindString(insert,ImInsert.AUX_DATA,c.getString(ContactMethodsQuery.AUX_DATA));
  bindString(insert,ImInsert.TYPE,c.getString(ContactMethodsQuery.TYPE));
  bindString(insert,ImInsert.LABEL,c.getString(ContactMethodsQuery.LABEL));
  insert(insert);
}",0.9325426241660488
152490,"private void appendRawContactsByNormalizedNameFilter(StringBuilder sb,String normalizedName,boolean allowEmailMatch){
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + NameLookupColumns.RAW_CONTACT_ID + ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  sb.append(normalizedName);
  sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY+ ""String_Node_Str""+ NameLookupType.NICKNAME+ ""String_Node_Str""+ NameLookupType.NAME_SHORTHAND+ ""String_Node_Str""+ NameLookupType.ORGANIZATION+ ""String_Node_Str""+ NameLookupType.NAME_CONSONANTS+ ""String_Node_Str"");
  if (allowEmailMatch) {
    sb.append(""String_Node_Str"" + NameLookupType.EMAIL_BASED_NICKNAME);
  }
  sb.append(""String_Node_Str"");
}","private void appendRawContactsByNormalizedNameFilter(StringBuilder sb,String normalizedName,boolean allowEmailMatch){
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + NameLookupColumns.RAW_CONTACT_ID + ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  sb.append(normalizedName);
  sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY+ ""String_Node_Str""+ NameLookupType.NICKNAME+ ""String_Node_Str""+ NameLookupType.NAME_SHORTHAND+ ""String_Node_Str""+ NameLookupType.ORGANIZATION+ ""String_Node_Str""+ NameLookupType.NAME_CONSONANTS);
  if (allowEmailMatch) {
    sb.append(""String_Node_Str"" + NameLookupType.EMAIL_BASED_NICKNAME);
  }
  sb.append(""String_Node_Str"");
}",0.9881324172392256
152491,"private void createContactsTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.AGGREGATION_EXCEPTIONS+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID1+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.CONTACTS+ ""String_Node_Str""+ Contacts._ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts.DELETED+ ""String_Node_Str""+ RawContacts.DELETED+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.STATUS_UPDATES+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ ""String_Node_Str"");
}","private void createContactsTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.AGGREGATION_EXCEPTIONS+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID1+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.CONTACTS+ ""String_Node_Str""+ Contacts._ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts.DELETED+ ""String_Node_Str""+ RawContacts.DELETED+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.STATUS_UPDATES+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.99511328298534
152492,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 99) {
    Log.i(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.PACKAGES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.MIMETYPES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.PHONE_LOOKUP + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.NICKNAME_LOOKUP + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.ACTIVITIES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.CALLS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.SETTINGS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str"");
    onCreate(db);
    return;
  }
  Log.i(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  boolean upgradeViewsAndTriggers=false;
  if (oldVersion == 99) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 100) {
    db.execSQL(""String_Node_Str"" + Tables.MIMETYPES + ""String_Node_Str""+ MimetypesColumns.MIMETYPE+ ""String_Node_Str""+ MimetypesColumns._ID+ ""String_Node_Str"");
    updateIndexStats(db,Tables.MIMETYPES,""String_Node_Str"",""String_Node_Str"");
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 101) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 102) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 103) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 104 || oldVersion == 201) {
    LegacyApiSupport.createSettingsTable(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 105) {
    upgradeToVersion202(db);
    oldVersion=202;
  }
  if (oldVersion == 202) {
    upgradeToVersion203(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 203) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 204) {
    upgradeToVersion205(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 205) {
    upgrateToVersion206(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 206) {
    upgrateToVersion300(db);
    oldVersion=300;
  }
  if (upgradeViewsAndTriggers) {
    createContactsViews(db);
    createGroupsView(db);
    createContactEntitiesView(db);
    createContactsTriggers(db);
    LegacyApiSupport.createViews(db);
  }
  if (oldVersion != newVersion) {
    throw new IllegalStateException(""String_Node_Str"" + newVersion);
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 99) {
    Log.i(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.PACKAGES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.MIMETYPES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.PHONE_LOOKUP + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.NICKNAME_LOOKUP + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.ACTIVITIES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.CALLS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.SETTINGS + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str"");
    onCreate(db);
    return;
  }
  Log.i(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  boolean upgradeViewsAndTriggers=false;
  if (oldVersion == 99) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 100) {
    db.execSQL(""String_Node_Str"" + Tables.MIMETYPES + ""String_Node_Str""+ MimetypesColumns.MIMETYPE+ ""String_Node_Str""+ MimetypesColumns._ID+ ""String_Node_Str"");
    updateIndexStats(db,Tables.MIMETYPES,""String_Node_Str"",""String_Node_Str"");
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 101) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 102) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 103) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 104 || oldVersion == 201) {
    LegacyApiSupport.createSettingsTable(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 105) {
    upgradeToVersion202(db);
    oldVersion=202;
  }
  if (oldVersion == 202) {
    upgradeToVersion203(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 203) {
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 204) {
    upgradeToVersion205(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 205) {
    upgrateToVersion206(db);
    upgradeViewsAndTriggers=true;
    oldVersion++;
  }
  if (oldVersion == 206) {
    upgrateToVersion300(db);
    oldVersion=300;
  }
  if (oldVersion == 300) {
    upgradeViewsAndTriggers=true;
    oldVersion=301;
  }
  if (upgradeViewsAndTriggers) {
    createContactsViews(db);
    createGroupsView(db);
    createContactEntitiesView(db);
    createContactsTriggers(db);
    LegacyApiSupport.createViews(db);
  }
  if (oldVersion != newVersion) {
    throw new IllegalStateException(""String_Node_Str"" + newVersion);
  }
}",0.9864714308451376
152493,"/** 
 * Updates a raw contact display name based on data rows, e.g. structured name, organization, email etc.
 */
private void updateRawContactDisplayName(SQLiteDatabase db,long rawContactId){
  int bestDisplayNameSource=DisplayNameSources.UNDEFINED;
  NameSplitter.Name bestName=null;
  String bestDisplayName=null;
  String bestPhoneticName=null;
  int bestPhoneticNameStyle=PhoneticNameStyle.UNDEFINED;
  mSelectionArgs1[0]=String.valueOf(rawContactId);
  Cursor c=db.rawQuery(DisplayNameQuery.RAW_SQL,mSelectionArgs1);
  try {
    while (c.moveToNext()) {
      int mimeType=c.getInt(DisplayNameQuery.MIMETYPE);
      int source=getDisplayNameSource(mimeType);
      if (source < bestDisplayNameSource || source == DisplayNameSources.UNDEFINED) {
        continue;
      }
      if (source == bestDisplayNameSource && c.getInt(DisplayNameQuery.IS_PRIMARY) == 0) {
        continue;
      }
      if (mimeType == mMimeTypeIdStructuredName) {
        NameSplitter.Name name;
        if (bestName != null) {
          name=new NameSplitter.Name();
        }
 else {
          name=mName;
          name.clear();
        }
        name.prefix=c.getString(DisplayNameQuery.PREFIX);
        name.givenNames=c.getString(DisplayNameQuery.GIVEN_NAME);
        name.middleName=c.getString(DisplayNameQuery.MIDDLE_NAME);
        name.familyName=c.getString(DisplayNameQuery.FAMILY_NAME);
        name.suffix=c.getString(DisplayNameQuery.SUFFIX);
        name.fullNameStyle=c.isNull(DisplayNameQuery.FULL_NAME_STYLE) ? FullNameStyle.UNDEFINED : c.getInt(DisplayNameQuery.FULL_NAME_STYLE);
        name.phoneticFamilyName=c.getString(DisplayNameQuery.PHONETIC_FAMILY_NAME);
        name.phoneticMiddleName=c.getString(DisplayNameQuery.PHONETIC_MIDDLE_NAME);
        name.phoneticGivenName=c.getString(DisplayNameQuery.PHONETIC_GIVEN_NAME);
        name.phoneticNameStyle=c.isNull(DisplayNameQuery.PHONETIC_NAME_STYLE) ? PhoneticNameStyle.UNDEFINED : c.getInt(DisplayNameQuery.PHONETIC_NAME_STYLE);
        if (!name.isEmpty()) {
          bestDisplayNameSource=source;
          bestName=name;
        }
      }
 else       if (mimeType == mMimeTypeIdOrganization) {
        mCharArrayBuffer.sizeCopied=0;
        c.copyStringToBuffer(DisplayNameQuery.DATA1,mCharArrayBuffer);
        if (mCharArrayBuffer.sizeCopied != 0) {
          bestDisplayNameSource=source;
          bestDisplayName=new String(mCharArrayBuffer.data,0,mCharArrayBuffer.sizeCopied);
          bestPhoneticName=c.getString(DisplayNameQuery.ORGANIZATION_PHONETIC_NAME);
          bestPhoneticNameStyle=c.isNull(DisplayNameQuery.ORGANIZATION_PHONETIC_NAME_STYLE) ? PhoneticNameStyle.UNDEFINED : c.getInt(DisplayNameQuery.ORGANIZATION_PHONETIC_NAME_STYLE);
        }
 else {
          c.copyStringToBuffer(DisplayNameQuery.TITLE,mCharArrayBuffer);
          if (mCharArrayBuffer.sizeCopied != 0) {
            bestDisplayNameSource=source;
            bestDisplayName=new String(mCharArrayBuffer.data,0,mCharArrayBuffer.sizeCopied);
            bestPhoneticName=null;
            bestPhoneticNameStyle=PhoneticNameStyle.UNDEFINED;
          }
        }
      }
 else {
        mCharArrayBuffer.sizeCopied=0;
        c.copyStringToBuffer(DisplayNameQuery.DATA1,mCharArrayBuffer);
        if (mCharArrayBuffer.sizeCopied != 0) {
          bestDisplayNameSource=source;
          bestDisplayName=new String(mCharArrayBuffer.data,0,mCharArrayBuffer.sizeCopied);
          bestPhoneticName=null;
          bestPhoneticNameStyle=PhoneticNameStyle.UNDEFINED;
        }
      }
    }
  }
  finally {
    c.close();
  }
  String displayNamePrimary;
  String displayNameAlternative;
  String sortKeyPrimary=null;
  String sortKeyAlternative=null;
  int displayNameStyle=FullNameStyle.UNDEFINED;
  if (bestDisplayNameSource == DisplayNameSources.STRUCTURED_NAME) {
    displayNameStyle=bestName.fullNameStyle;
    if (displayNameStyle == FullNameStyle.CJK || displayNameStyle == FullNameStyle.UNDEFINED) {
      displayNameStyle=mNameSplitter.getAdjustedFullNameStyle(displayNameStyle);
      bestName.fullNameStyle=displayNameStyle;
    }
    displayNamePrimary=mNameSplitter.join(bestName,true);
    displayNameAlternative=mNameSplitter.join(bestName,false);
    bestPhoneticName=mNameSplitter.joinPhoneticName(bestName);
    bestPhoneticNameStyle=bestName.phoneticNameStyle;
  }
 else {
    displayNamePrimary=displayNameAlternative=bestDisplayName;
  }
  if (bestPhoneticName != null) {
    sortKeyPrimary=sortKeyAlternative=bestPhoneticName;
    if (bestPhoneticNameStyle == PhoneticNameStyle.UNDEFINED) {
      bestPhoneticNameStyle=mNameSplitter.guessPhoneticNameStyle(bestPhoneticName);
    }
  }
 else {
    if (displayNameStyle == FullNameStyle.UNDEFINED) {
      displayNameStyle=mNameSplitter.guessFullNameStyle(bestDisplayName);
      if (displayNameStyle == FullNameStyle.UNDEFINED || displayNameStyle == FullNameStyle.CJK) {
        displayNameStyle=mNameSplitter.getAdjustedNameStyleBasedOnPhoneticNameStyle(displayNameStyle,bestPhoneticNameStyle);
      }
      displayNameStyle=mNameSplitter.getAdjustedFullNameStyle(displayNameStyle);
    }
    if (displayNameStyle == FullNameStyle.CHINESE) {
      sortKeyPrimary=sortKeyAlternative=mNameSplitter.convertHanziToPinyin(displayNamePrimary);
    }
  }
  if (sortKeyPrimary == null) {
    sortKeyPrimary=displayNamePrimary;
    sortKeyAlternative=displayNameAlternative;
  }
  setDisplayName(rawContactId,bestDisplayNameSource,displayNamePrimary,displayNameAlternative,bestPhoneticName,bestPhoneticNameStyle,sortKeyPrimary,sortKeyAlternative);
}","/** 
 * Updates a raw contact display name based on data rows, e.g. structured name, organization, email etc.
 */
private void updateRawContactDisplayName(SQLiteDatabase db,long rawContactId){
  int bestDisplayNameSource=DisplayNameSources.UNDEFINED;
  NameSplitter.Name bestName=null;
  String bestDisplayName=null;
  String bestPhoneticName=null;
  int bestPhoneticNameStyle=PhoneticNameStyle.UNDEFINED;
  mSelectionArgs1[0]=String.valueOf(rawContactId);
  Cursor c=db.rawQuery(DisplayNameQuery.RAW_SQL,mSelectionArgs1);
  try {
    while (c.moveToNext()) {
      int mimeType=c.getInt(DisplayNameQuery.MIMETYPE);
      int source=getDisplayNameSource(mimeType);
      if (source < bestDisplayNameSource || source == DisplayNameSources.UNDEFINED) {
        continue;
      }
      if (source == bestDisplayNameSource && c.getInt(DisplayNameQuery.IS_PRIMARY) == 0) {
        continue;
      }
      if (mimeType == mMimeTypeIdStructuredName) {
        NameSplitter.Name name;
        if (bestName != null) {
          name=new NameSplitter.Name();
        }
 else {
          name=mName;
          name.clear();
        }
        name.prefix=c.getString(DisplayNameQuery.PREFIX);
        name.givenNames=c.getString(DisplayNameQuery.GIVEN_NAME);
        name.middleName=c.getString(DisplayNameQuery.MIDDLE_NAME);
        name.familyName=c.getString(DisplayNameQuery.FAMILY_NAME);
        name.suffix=c.getString(DisplayNameQuery.SUFFIX);
        name.fullNameStyle=c.isNull(DisplayNameQuery.FULL_NAME_STYLE) ? FullNameStyle.UNDEFINED : c.getInt(DisplayNameQuery.FULL_NAME_STYLE);
        name.phoneticFamilyName=c.getString(DisplayNameQuery.PHONETIC_FAMILY_NAME);
        name.phoneticMiddleName=c.getString(DisplayNameQuery.PHONETIC_MIDDLE_NAME);
        name.phoneticGivenName=c.getString(DisplayNameQuery.PHONETIC_GIVEN_NAME);
        name.phoneticNameStyle=c.isNull(DisplayNameQuery.PHONETIC_NAME_STYLE) ? PhoneticNameStyle.UNDEFINED : c.getInt(DisplayNameQuery.PHONETIC_NAME_STYLE);
        if (!name.isEmpty()) {
          bestDisplayNameSource=source;
          bestName=name;
        }
      }
 else       if (mimeType == mMimeTypeIdOrganization) {
        mCharArrayBuffer.sizeCopied=0;
        c.copyStringToBuffer(DisplayNameQuery.DATA1,mCharArrayBuffer);
        if (mCharArrayBuffer.sizeCopied != 0) {
          bestDisplayNameSource=source;
          bestDisplayName=new String(mCharArrayBuffer.data,0,mCharArrayBuffer.sizeCopied);
          bestPhoneticName=c.getString(DisplayNameQuery.ORGANIZATION_PHONETIC_NAME);
          bestPhoneticNameStyle=c.isNull(DisplayNameQuery.ORGANIZATION_PHONETIC_NAME_STYLE) ? PhoneticNameStyle.UNDEFINED : c.getInt(DisplayNameQuery.ORGANIZATION_PHONETIC_NAME_STYLE);
        }
 else {
          c.copyStringToBuffer(DisplayNameQuery.TITLE,mCharArrayBuffer);
          if (mCharArrayBuffer.sizeCopied != 0) {
            bestDisplayNameSource=source;
            bestDisplayName=new String(mCharArrayBuffer.data,0,mCharArrayBuffer.sizeCopied);
            bestPhoneticName=null;
            bestPhoneticNameStyle=PhoneticNameStyle.UNDEFINED;
          }
        }
      }
 else {
        mCharArrayBuffer.sizeCopied=0;
        c.copyStringToBuffer(DisplayNameQuery.DATA1,mCharArrayBuffer);
        if (mCharArrayBuffer.sizeCopied != 0) {
          bestDisplayNameSource=source;
          bestDisplayName=new String(mCharArrayBuffer.data,0,mCharArrayBuffer.sizeCopied);
          bestPhoneticName=null;
          bestPhoneticNameStyle=PhoneticNameStyle.UNDEFINED;
        }
      }
    }
  }
  finally {
    c.close();
  }
  String displayNamePrimary;
  String displayNameAlternative;
  String sortKeyPrimary=null;
  String sortKeyAlternative=null;
  int displayNameStyle=FullNameStyle.UNDEFINED;
  if (bestDisplayNameSource == DisplayNameSources.STRUCTURED_NAME) {
    displayNameStyle=bestName.fullNameStyle;
    if (displayNameStyle == FullNameStyle.CJK || displayNameStyle == FullNameStyle.UNDEFINED) {
      displayNameStyle=mNameSplitter.getAdjustedFullNameStyle(displayNameStyle);
      bestName.fullNameStyle=displayNameStyle;
    }
    displayNamePrimary=mNameSplitter.join(bestName,true);
    displayNameAlternative=mNameSplitter.join(bestName,false);
    bestPhoneticName=mNameSplitter.joinPhoneticName(bestName);
    bestPhoneticNameStyle=bestName.phoneticNameStyle;
  }
 else {
    displayNamePrimary=displayNameAlternative=bestDisplayName;
  }
  if (bestPhoneticName != null) {
    sortKeyPrimary=sortKeyAlternative=bestPhoneticName;
    if (bestPhoneticNameStyle == PhoneticNameStyle.UNDEFINED) {
      bestPhoneticNameStyle=mNameSplitter.guessPhoneticNameStyle(bestPhoneticName);
    }
  }
 else {
    if (displayNameStyle == FullNameStyle.UNDEFINED) {
      displayNameStyle=mNameSplitter.guessFullNameStyle(bestDisplayName);
      if (displayNameStyle == FullNameStyle.UNDEFINED || displayNameStyle == FullNameStyle.CJK) {
        displayNameStyle=mNameSplitter.getAdjustedNameStyleBasedOnPhoneticNameStyle(displayNameStyle,bestPhoneticNameStyle);
      }
      displayNameStyle=mNameSplitter.getAdjustedFullNameStyle(displayNameStyle);
    }
    if (displayNameStyle == FullNameStyle.CHINESE) {
      sortKeyPrimary=sortKeyAlternative=ContactLocaleUtils.getSortKey(displayNamePrimary,FullNameStyle.CHINESE);
    }
  }
  if (sortKeyPrimary == null) {
    sortKeyPrimary=displayNamePrimary;
    sortKeyAlternative=displayNameAlternative;
  }
  setDisplayName(rawContactId,bestDisplayNameSource,displayNamePrimary,displayNameAlternative,bestPhoneticName,bestPhoneticNameStyle,sortKeyPrimary,sortKeyAlternative);
}",0.98913531471671
152494,"public void insertNameLookupForStructuredName(long rawContactId,long dataId,String name){
  mNameLookupBuilder.insertNameLookup(rawContactId,dataId,name);
}","public void insertNameLookupForStructuredName(long rawContactId,long dataId,String name){
  mNameLookupBuilder.insertNameLookup(rawContactId,dataId,name);
  if (!TextUtils.isEmpty(name)) {
    Iterator<String> it=ContactLocaleUtils.getNameLookupKeys(name,FullNameStyle.CHINESE);
    if (it != null) {
      while (it.hasNext()) {
        String key=it.next();
        mNameLookupBuilder.insertNameLookup(rawContactId,dataId,NameLookupType.NAME_SHORTHAND,mNameLookupBuilder.normalizeName(key));
      }
    }
  }
}",0.4663677130044843
152495,"private void appendRawContactsByNormalizedNameFilter(StringBuilder sb,String normalizedName,boolean allowEmailMatch){
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + NameLookupColumns.RAW_CONTACT_ID + ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  sb.append(normalizedName);
  sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY+ ""String_Node_Str""+ NameLookupType.NICKNAME+ ""String_Node_Str""+ NameLookupType.ORGANIZATION);
  if (allowEmailMatch) {
    sb.append(""String_Node_Str"" + NameLookupType.EMAIL_BASED_NICKNAME);
  }
  sb.append(""String_Node_Str"");
}","private void appendRawContactsByNormalizedNameFilter(StringBuilder sb,String normalizedName,boolean allowEmailMatch){
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + NameLookupColumns.RAW_CONTACT_ID + ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  sb.append(normalizedName);
  sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY+ ""String_Node_Str""+ NameLookupType.NICKNAME+ ""String_Node_Str""+ NameLookupType.NAME_SHORTHAND+ ""String_Node_Str""+ NameLookupType.ORGANIZATION);
  if (allowEmailMatch) {
    sb.append(""String_Node_Str"" + NameLookupType.EMAIL_BASED_NICKNAME);
  }
  sb.append(""String_Node_Str"");
}",0.965034965034965
152496,"private boolean initialize(){
  final Context context=getContext();
  mDbHelper=(ContactsDatabaseHelper)getDatabaseHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mDbHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mDbHelper);
  mContactAggregator.setEnabled(SystemProperties.getBoolean(AGGREGATE_CONTACTS,true));
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_PRIMARY+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_ALTERNATIVE+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME_STYLE+ ""String_Node_Str""+ RawContacts.SORT_KEY_PRIMARY+ ""String_Node_Str""+ RawContacts.SORT_KEY_ALTERNATIVE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str""+ ContactsColumns.LAST_STATUS_UPDATE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.STATUS_UPDATES+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ DataColumns.CONCRETE_RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ ContactsColumns.CONCRETE_ID+ ""String_Node_Str"");
  final Locale locale=getLocale();
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions),locale);
  mNameLookupBuilder=new StructuredNameLookupBuilder(mNameSplitter);
  mPostalSplitter=new PostalSplitter(locale);
  mNameLookupInsert=db.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  mNameLookupDelete=db.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateInsert=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateReplace=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateAutoTimestamp=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str"");
  mStatusAttributionUpdate=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateDelete=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mResetNameVerifiedForOtherRawContacts=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.NAME_VERIFIED+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  verifyAccounts();
  mMimeTypeIdEmail=mDbHelper.getMimeTypeId(Email.CONTENT_ITEM_TYPE);
  mMimeTypeIdIm=mDbHelper.getMimeTypeId(Im.CONTENT_ITEM_TYPE);
  mMimeTypeIdStructuredName=mDbHelper.getMimeTypeId(StructuredName.CONTENT_ITEM_TYPE);
  mMimeTypeIdOrganization=mDbHelper.getMimeTypeId(Organization.CONTENT_ITEM_TYPE);
  mMimeTypeIdNickname=mDbHelper.getMimeTypeId(Nickname.CONTENT_ITEM_TYPE);
  mMimeTypeIdPhone=mDbHelper.getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
  preloadNicknameBloomFilter();
  return (db != null);
}","private boolean initialize(){
  final Context context=getContext();
  mDbHelper=(ContactsDatabaseHelper)getDatabaseHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mDbHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mDbHelper);
  mContactAggregator.setEnabled(SystemProperties.getBoolean(AGGREGATE_CONTACTS,true));
  final SQLiteDatabase db=mDbHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_PRIMARY+ ""String_Node_Str""+ RawContacts.DISPLAY_NAME_ALTERNATIVE+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME+ ""String_Node_Str""+ RawContacts.PHONETIC_NAME_STYLE+ ""String_Node_Str""+ RawContacts.SORT_KEY_PRIMARY+ ""String_Node_Str""+ RawContacts.SORT_KEY_ALTERNATIVE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.CONTACTS + ""String_Node_Str""+ ContactsColumns.LAST_STATUS_UPDATE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ Tables.STATUS_UPDATES+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ DataColumns.CONCRETE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ DataColumns.CONCRETE_RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ ContactsColumns.CONCRETE_ID+ ""String_Node_Str"");
  initByLocale(context);
  mNameLookupInsert=db.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str"");
  mNameLookupDelete=db.compileStatement(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateInsert=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateReplace=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str"");
  mStatusUpdateAutoTimestamp=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_TIMESTAMP+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdates.STATUS+ ""String_Node_Str"");
  mStatusAttributionUpdate=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdates.STATUS_RES_PACKAGE+ ""String_Node_Str""+ StatusUpdates.STATUS_ICON+ ""String_Node_Str""+ StatusUpdates.STATUS_LABEL+ ""String_Node_Str""+ ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mStatusUpdateDelete=db.compileStatement(""String_Node_Str"" + Tables.STATUS_UPDATES + ""String_Node_Str""+ StatusUpdatesColumns.DATA_ID+ ""String_Node_Str"");
  mResetNameVerifiedForOtherRawContacts=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.NAME_VERIFIED+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  verifyAccounts();
  mMimeTypeIdEmail=mDbHelper.getMimeTypeId(Email.CONTENT_ITEM_TYPE);
  mMimeTypeIdIm=mDbHelper.getMimeTypeId(Im.CONTENT_ITEM_TYPE);
  mMimeTypeIdStructuredName=mDbHelper.getMimeTypeId(StructuredName.CONTENT_ITEM_TYPE);
  mMimeTypeIdOrganization=mDbHelper.getMimeTypeId(Organization.CONTENT_ITEM_TYPE);
  mMimeTypeIdNickname=mDbHelper.getMimeTypeId(Nickname.CONTENT_ITEM_TYPE);
  mMimeTypeIdPhone=mDbHelper.getMimeTypeId(Phone.CONTENT_ITEM_TYPE);
  preloadNicknameBloomFilter();
  return (db != null);
}",0.9663357790246008
152497,"public void appendContactFilterAsNestedQuery(StringBuilder sb,String filterParam){
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  sb.append(NameNormalizer.normalize(filterParam));
  sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY+ ""String_Node_Str""+ NameLookupType.EMAIL_BASED_NICKNAME+ ""String_Node_Str""+ NameLookupType.NICKNAME+ ""String_Node_Str""+ NameLookupType.ORGANIZATION+ ""String_Node_Str"");
}","public void appendContactFilterAsNestedQuery(StringBuilder sb,String filterParam){
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + RawContacts.CONTACT_ID + ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ Tables.NAME_LOOKUP+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  sb.append(NameNormalizer.normalize(filterParam));
  sb.append(""String_Node_Str"" + NameLookupColumns.NAME_TYPE + ""String_Node_Str""+ NameLookupType.NAME_COLLATION_KEY+ ""String_Node_Str""+ NameLookupType.EMAIL_BASED_NICKNAME+ ""String_Node_Str""+ NameLookupType.NICKNAME+ ""String_Node_Str""+ NameLookupType.NAME_SHORTHAND+ ""String_Node_Str""+ NameLookupType.ORGANIZATION+ ""String_Node_Str"");
}",0.9663978494623656
152498,"/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && (touchedStruct || areAnySpecified(update,STRUCTURED_FIELDS))) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    if (name.fullNameStyle == FullNameStyle.UNDEFINED) {
      mSplitter.guessNameStyle(name);
    }
    final String joined=mSplitter.join(name,true);
    update.put(StructuredName.DISPLAY_NAME,joined);
    update.put(StructuredName.FULL_NAME_STYLE,name.fullNameStyle);
    update.put(StructuredName.PHONETIC_NAME_STYLE,name.phoneticNameStyle);
  }
}","/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && (touchedStruct || areAnySpecified(update,STRUCTURED_FIELDS))) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    name.fullNameStyle=FullNameStyle.UNDEFINED;
    mSplitter.guessNameStyle(name);
    final String joined=mSplitter.join(name,true);
    update.put(StructuredName.DISPLAY_NAME,joined);
    update.put(StructuredName.FULL_NAME_STYLE,name.fullNameStyle);
    update.put(StructuredName.PHONETIC_NAME_STYLE,name.phoneticNameStyle);
  }
 else   if (touchedUnstruct && touchedStruct) {
    if (TextUtils.isEmpty(update.getAsString(StructuredName.FULL_NAME_STYLE))) {
      update.put(StructuredName.FULL_NAME_STYLE,mSplitter.guessFullNameStyle(unstruct));
    }
    if (TextUtils.isEmpty(update.getAsString(StructuredName.PHONETIC_NAME_STYLE))) {
      update.put(StructuredName.PHONETIC_NAME_STYLE,mSplitter.guessPhoneticNameStyle(unstruct));
    }
  }
}",0.8413205537806177
152499,"/** 
 * Makes the best guess at the expected full name style based on the character set used in the supplied name.  If the phonetic name is also supplied, tries to differentiate between Chinese, Japanese and Korean based on the alphabet used for the phonetic name.
 */
public void guessNameStyle(Name name){
  guessFullNameStyle(name);
  guessPhoneticNameStyle(name);
  name.fullNameStyle=getAdjustedNameStyleBasedOnPhoneticNameStyle(name.fullNameStyle,name.phoneticNameStyle);
}","/** 
 * Makes the best guess at the expected full name style based on the character set used in the supplied name.  If the phonetic name is also supplied, tries to differentiate between Chinese, Japanese and Korean based on the alphabet used for the phonetic name.
 */
public void guessNameStyle(Name name){
  guessFullNameStyle(name);
  if (FullNameStyle.CJK == name.fullNameStyle) {
    name.fullNameStyle=getAdjustedFullNameStyle(name.fullNameStyle);
  }
  guessPhoneticNameStyle(name);
  name.fullNameStyle=getAdjustedNameStyleBasedOnPhoneticNameStyle(name.fullNameStyle,name.phoneticNameStyle);
}",0.8648148148148148
152500,"public int guessFullNameStyle(String name){
  if (name == null) {
    return FullNameStyle.UNDEFINED;
  }
  int nameStyle=FullNameStyle.UNDEFINED;
  int length=name.length();
  int offset=0;
  while (offset < length) {
    int codePoint=Character.codePointAt(name,offset);
    if (Character.isLetter(codePoint)) {
      UnicodeBlock unicodeBlock=UnicodeBlock.of(codePoint);
      if (isLatinUnicodeBlock(unicodeBlock)) {
        return FullNameStyle.WESTERN;
      }
      if (isCJKUnicodeBlock(unicodeBlock)) {
        return guessCJKNameStyle(name,offset + Character.charCount(codePoint));
      }
      if (isJapanesePhoneticUnicodeBlock(unicodeBlock)) {
        return FullNameStyle.JAPANESE;
      }
      if (isKoreanUnicodeBlock(unicodeBlock)) {
        return FullNameStyle.KOREAN;
      }
      return FullNameStyle.WESTERN;
    }
    offset+=Character.charCount(codePoint);
  }
  return nameStyle;
}","public int guessFullNameStyle(String name){
  if (name == null) {
    return FullNameStyle.UNDEFINED;
  }
  int nameStyle=FullNameStyle.UNDEFINED;
  int length=name.length();
  int offset=0;
  while (offset < length) {
    int codePoint=Character.codePointAt(name,offset);
    if (Character.isLetter(codePoint)) {
      UnicodeBlock unicodeBlock=UnicodeBlock.of(codePoint);
      if (!isLatinUnicodeBlock(unicodeBlock)) {
        if (isCJKUnicodeBlock(unicodeBlock)) {
          return guessCJKNameStyle(name,offset + Character.charCount(codePoint));
        }
        if (isJapanesePhoneticUnicodeBlock(unicodeBlock)) {
          return FullNameStyle.JAPANESE;
        }
        if (isKoreanUnicodeBlock(unicodeBlock)) {
          return FullNameStyle.KOREAN;
        }
      }
      nameStyle=FullNameStyle.WESTERN;
    }
    offset+=Character.charCount(codePoint);
  }
  return nameStyle;
}",0.9522752497225304
152501,"/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}","/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}",0.8893506493506493
152502,"/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}","/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredName.DISPLAY_NAME);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}",0.562634989200864
152503,"/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}","/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && (touchedStruct || areAnySpecified(update,STRUCTURED_FIELDS))) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}",0.6572008113590264
152504,"/** 
 * Test all against   {@link TextUtils#isEmpty(CharSequence)}.
 */
private static boolean areAnySpecified(ContentValues values,String[] keys){
  for (  String key : keys) {
    if (values.containsKey(key)) {
      return true;
    }
  }
  return false;
}","/** 
 * Returns true if a value (possibly null) is specified for at least one of the supplied keys.
 */
private static boolean areAnySpecified(ContentValues values,String[] keys){
  for (  String key : keys) {
    if (values.containsKey(key)) {
      return true;
    }
  }
  return false;
}",0.7345454545454545
152505,"/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredName.DISPLAY_NAME);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}","/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && (touchedStruct || areAnySpecified(update,STRUCTURED_FIELDS))) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}",0.5466034755134281
152506,"public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}","public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
    @Override public String getPackageName(){
      return ""String_Node_Str"";
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}",0.9725669497060744
152507,"public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}","public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
    @Override public String getPackageName(){
      return ""String_Node_Str"";
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}",0.9725669497060744
152508,"public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}","public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
    @Override public String getPackageName(){
      return ""String_Node_Str"";
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}",0.9725669497060744
152509,"/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}","/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}",0.8893506493506493
152510,"/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}","/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredName.DISPLAY_NAME);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}",0.562634989200864
152511,"/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}","/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}",0.8893506493506493
152512,"/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}","/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredName.DISPLAY_NAME);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}",0.562634989200864
152513,"/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}","/** 
 * Prepares the given   {@link StructuredPostal} row, building{@link StructuredPostal#FORMATTED_ADDRESS} to match the structuredvalues when missing. When structured components are missing, the unstructured value is assigned to  {@link StructuredPostal#STREET}.
 */
private void fixStructuredPostalComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredPostal.FORMATTED_ADDRESS);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  final PostalSplitter.Postal postal=new PostalSplitter.Postal();
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredPostal.FORMATTED_ADDRESS);
    mSplitter.split(postal,unstruct);
    postal.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    postal.fromValues(augmented);
    final String joined=mSplitter.join(postal);
    update.put(StructuredPostal.FORMATTED_ADDRESS,joined);
  }
}",0.8893506493506493
152514,"/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
  final boolean touchedUnstruct=!TextUtils.isEmpty(unstruct);
  final boolean touchedStruct=!areAllEmpty(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}","/** 
 * Parses the supplied display name, but only if the incoming values do not already contain structured name parts. Also, if the display name is not provided, generate one by concatenating first name and last name.
 */
private void fixStructuredNameComponents(ContentValues augmented,ContentValues update){
  final boolean touchedUnstruct=update.containsKey(StructuredName.DISPLAY_NAME);
  final boolean touchedStruct=areAnySpecified(update,STRUCTURED_FIELDS);
  if (touchedUnstruct && !touchedStruct) {
    final String unstruct=update.getAsString(StructuredName.DISPLAY_NAME);
    NameSplitter.Name name=new NameSplitter.Name();
    mSplitter.split(name,unstruct);
    name.toValues(update);
  }
 else   if (!touchedUnstruct && touchedStruct) {
    NameSplitter.Name name=new NameSplitter.Name();
    name.fromValues(augmented);
    final String joined=mSplitter.join(name);
    update.put(StructuredName.DISPLAY_NAME,joined);
  }
}",0.562634989200864
152515,"/** 
 * Execute   {@link SQLiteStatement} that will update the{@link Contacts#STARRED} flag for the given {@link Contacts#_ID}.
 */
protected void updateStarred(long contactId){
  mStarredUpdate.bindLong(1,contactId);
  mStarredUpdate.execute();
}","/** 
 * Execute   {@link SQLiteStatement} that will update the{@link Contacts#STARRED} flag for the given {@link RawContacts#_ID}.
 */
protected void updateStarred(long rawContactId){
  long contactId=mDbHelper.getContactId(rawContactId);
  if (contactId == 0) {
    return;
  }
  mStarredUpdate.bindLong(1,contactId);
  mStarredUpdate.execute();
}",0.7932773109243697
152516,"/** 
 * Execute   {@link SQLiteStatement} that will update the{@link Contacts#STARRED} flag for the given {@link Contacts#_ID}.
 */
protected void updateStarred(long contactId){
  mStarredUpdate.bindLong(1,contactId);
  mStarredUpdate.execute();
}","/** 
 * Execute   {@link SQLiteStatement} that will update the{@link Contacts#STARRED} flag for the given {@link RawContacts#_ID}.
 */
protected void updateStarred(long rawContactId){
  long contactId=mDbHelper.getContactId(rawContactId);
  if (contactId == 0) {
    return;
  }
  mStarredUpdate.bindLong(1,contactId);
  mStarredUpdate.execute();
}",0.7932773109243697
152517,"/** 
 * Execute   {@link SQLiteStatement} that will update the{@link Contacts#STARRED} flag for the given {@link Contacts#_ID}.
 */
protected void updateStarred(long contactId){
  mStarredUpdate.bindLong(1,contactId);
  mStarredUpdate.execute();
}","/** 
 * Execute   {@link SQLiteStatement} that will update the{@link Contacts#STARRED} flag for the given {@link RawContacts#_ID}.
 */
protected void updateStarred(long rawContactId){
  long contactId=mDbHelper.getContactId(rawContactId);
  if (contactId == 0) {
    return;
  }
  mStarredUpdate.bindLong(1,contactId);
  mStarredUpdate.execute();
}",0.7932773109243697
152518,"/** 
 * Inserts a presence update.
 */
public long insertPresence(ContentValues values){
  final String handle=values.getAsString(Presence.IM_HANDLE);
  if (TextUtils.isEmpty(handle) || !values.containsKey(Presence.PROTOCOL)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long protocol=values.getAsLong(Presence.PROTOCOL);
  String customProtocol=null;
  if (protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(Presence.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
  StringBuilder selection=new StringBuilder();
  String[] selectionArgs;
  if (matchEmail) {
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Email.DATA+ ""String_Node_Str""+ ""String_Node_Str"");
    selectionArgs=new String[]{String.valueOf(protocol),handle,handle};
  }
 else {
    selection.append(MimetypesColumns.MIMETYPE + ""String_Node_Str"" + Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selectionArgs=new String[]{String.valueOf(protocol),handle};
  }
  if (values.containsKey(Presence.DATA_ID)) {
    selection.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"").append(values.getAsLong(Presence.DATA_ID));
  }
  selection.append(""String_Node_Str"").append(getContactsRestrictions());
  long dataId=-1;
  long rawContactId=-1;
  long contactId=-1;
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,selection.toString(),selectionArgs,null,null,null);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  values.put(Presence.DATA_ID,dataId);
  values.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
  long presenceId=mDb.replace(Tables.PRESENCE,null,values);
  if (contactId != -1) {
    if (values.containsKey(Presence.PRESENCE_STATUS)) {
      mAggregatedPresenceReplace.bindLong(1,contactId);
      mAggregatedPresenceReplace.bindLong(2,contactId);
      mAggregatedPresenceReplace.execute();
    }
    String status=values.getAsString(Presence.PRESENCE_CUSTOM_STATUS);
    if (status != null) {
      mAggregatedPresenceStatusUpdate.bindString(1,status);
      mAggregatedPresenceStatusUpdate.bindLong(2,contactId);
      mAggregatedPresenceStatusUpdate.execute();
    }
  }
  return presenceId;
}","/** 
 * Inserts a presence update.
 */
public long insertPresence(ContentValues values){
  final String handle=values.getAsString(Presence.IM_HANDLE);
  if (TextUtils.isEmpty(handle) || !values.containsKey(Presence.PROTOCOL)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long protocol=values.getAsLong(Presence.PROTOCOL);
  String customProtocol=null;
  if (protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(Presence.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
  StringBuilder selection=new StringBuilder();
  String[] selectionArgs;
  if (matchEmail) {
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Email.DATA+ ""String_Node_Str""+ ""String_Node_Str"");
    selectionArgs=new String[]{String.valueOf(protocol),handle,handle};
  }
 else {
    selection.append(MimetypesColumns.MIMETYPE + ""String_Node_Str"" + Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selectionArgs=new String[]{String.valueOf(protocol),handle};
  }
  if (values.containsKey(Presence.DATA_ID)) {
    selection.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"").append(values.getAsLong(Presence.DATA_ID));
  }
  selection.append(""String_Node_Str"").append(getContactsRestrictions());
  long dataId=-1;
  long rawContactId=-1;
  long contactId=-1;
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,selection.toString(),selectionArgs,null,null,null);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  values.put(Presence.DATA_ID,dataId);
  values.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
  if (customProtocol == null) {
    values.put(Presence.CUSTOM_PROTOCOL,""String_Node_Str"");
  }
  long presenceId=mDb.replace(Tables.PRESENCE,null,values);
  if (contactId != -1) {
    if (values.containsKey(Presence.PRESENCE_STATUS)) {
      mAggregatedPresenceReplace.bindLong(1,contactId);
      mAggregatedPresenceReplace.bindLong(2,contactId);
      mAggregatedPresenceReplace.execute();
    }
    String status=values.getAsString(Presence.PRESENCE_CUSTOM_STATUS);
    if (status != null) {
      mAggregatedPresenceStatusUpdate.bindString(1,status);
      mAggregatedPresenceStatusUpdate.bindLong(2,contactId);
      mAggregatedPresenceStatusUpdate.execute();
    }
  }
  return presenceId;
}",0.9862148190695004
152519,"/** 
 * Inserts a presence update.
 */
public long insertPresence(ContentValues values){
  final String handle=values.getAsString(Presence.IM_HANDLE);
  if (TextUtils.isEmpty(handle) || !values.containsKey(Presence.PROTOCOL)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long protocol=values.getAsLong(Presence.PROTOCOL);
  String customProtocol=null;
  if (protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(Presence.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
  StringBuilder selection=new StringBuilder();
  String[] selectionArgs;
  if (matchEmail) {
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Email.DATA+ ""String_Node_Str""+ ""String_Node_Str"");
    selectionArgs=new String[]{String.valueOf(protocol),handle,handle};
  }
 else {
    selection.append(MimetypesColumns.MIMETYPE + ""String_Node_Str"" + Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selectionArgs=new String[]{String.valueOf(protocol),handle};
  }
  if (values.containsKey(Presence.DATA_ID)) {
    selection.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"").append(values.getAsLong(Presence.DATA_ID));
  }
  selection.append(""String_Node_Str"").append(getContactsRestrictions());
  long dataId=-1;
  long rawContactId=-1;
  long contactId=-1;
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,selection.toString(),selectionArgs,null,null,null);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  values.put(Presence.DATA_ID,dataId);
  values.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
  long presenceId=mDb.replace(Tables.PRESENCE,null,values);
  if (contactId != -1) {
    if (values.containsKey(Presence.PRESENCE_STATUS)) {
      mAggregatedPresenceReplace.bindLong(1,contactId);
      mAggregatedPresenceReplace.bindLong(2,contactId);
      mAggregatedPresenceReplace.execute();
    }
    String status=values.getAsString(Presence.PRESENCE_CUSTOM_STATUS);
    if (status != null) {
      mAggregatedPresenceStatusUpdate.bindString(1,status);
      mAggregatedPresenceStatusUpdate.bindLong(2,contactId);
      mAggregatedPresenceStatusUpdate.execute();
    }
  }
  return presenceId;
}","/** 
 * Inserts a presence update.
 */
public long insertPresence(ContentValues values){
  final String handle=values.getAsString(Presence.IM_HANDLE);
  if (TextUtils.isEmpty(handle) || !values.containsKey(Presence.PROTOCOL)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long protocol=values.getAsLong(Presence.PROTOCOL);
  String customProtocol=null;
  if (protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(Presence.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
  StringBuilder selection=new StringBuilder();
  String[] selectionArgs;
  if (matchEmail) {
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Email.DATA+ ""String_Node_Str""+ ""String_Node_Str"");
    selectionArgs=new String[]{String.valueOf(protocol),handle,handle};
  }
 else {
    selection.append(MimetypesColumns.MIMETYPE + ""String_Node_Str"" + Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selectionArgs=new String[]{String.valueOf(protocol),handle};
  }
  if (values.containsKey(Presence.DATA_ID)) {
    selection.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"").append(values.getAsLong(Presence.DATA_ID));
  }
  selection.append(""String_Node_Str"").append(getContactsRestrictions());
  long dataId=-1;
  long rawContactId=-1;
  long contactId=-1;
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,selection.toString(),selectionArgs,null,null,null);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  values.put(Presence.DATA_ID,dataId);
  values.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
  if (customProtocol == null) {
    values.put(Presence.CUSTOM_PROTOCOL,""String_Node_Str"");
  }
  long presenceId=mDb.replace(Tables.PRESENCE,null,values);
  if (contactId != -1) {
    if (values.containsKey(Presence.PRESENCE_STATUS)) {
      mAggregatedPresenceReplace.bindLong(1,contactId);
      mAggregatedPresenceReplace.bindLong(2,contactId);
      mAggregatedPresenceReplace.execute();
    }
    String status=values.getAsString(Presence.PRESENCE_CUSTOM_STATUS);
    if (status != null) {
      mAggregatedPresenceStatusUpdate.bindString(1,status);
      mAggregatedPresenceStatusUpdate.bindLong(2,contactId);
      mAggregatedPresenceStatusUpdate.execute();
    }
  }
  return presenceId;
}",0.9862148190695004
152520,"/** 
 * Adds index stats into the SQLite database to force it to always use the lookup indexes.
 */
private void updateSqliteStats(SQLiteDatabase db){
  try {
    updateIndexStats(db,Tables.RAW_CONTACTS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.RAW_CONTACTS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.NAME_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.NAME_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.NAME_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.PHONE_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.DATA,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.DATA,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.GROUPS,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SQLException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","/** 
 * Adds index stats into the SQLite database to force it to always use the lookup indexes.
 */
private void updateSqliteStats(SQLiteDatabase db){
  try {
    updateIndexStats(db,Tables.CONTACTS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.CONTACTS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.CONTACTS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.RAW_CONTACTS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.RAW_CONTACTS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.NAME_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.NAME_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.NAME_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.PHONE_LOOKUP,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.DATA,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.DATA,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.GROUPS,""String_Node_Str"",""String_Node_Str"");
    updateIndexStats(db,Tables.NICKNAME_LOOKUP,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SQLException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.8555907650520598
152521,"/** 
 * Inserts a presence update.
 */
public long insertPresence(ContentValues values){
  final String handle=values.getAsString(Presence.IM_HANDLE);
  if (TextUtils.isEmpty(handle) || !values.containsKey(Presence.PROTOCOL)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long protocol=values.getAsLong(Presence.PROTOCOL);
  String customProtocol=null;
  if (protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(Presence.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
  StringBuilder selection=new StringBuilder();
  String[] selectionArgs;
  if (matchEmail) {
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Email.DATA+ ""String_Node_Str""+ ""String_Node_Str"");
    selectionArgs=new String[]{String.valueOf(protocol),handle,handle};
  }
 else {
    selection.append(MimetypesColumns.MIMETYPE + ""String_Node_Str"" + Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selectionArgs=new String[]{String.valueOf(protocol),handle};
  }
  if (values.containsKey(Presence.DATA_ID)) {
    selection.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"").append(values.getAsLong(Presence.DATA_ID));
  }
  selection.append(""String_Node_Str"").append(getContactsRestrictions());
  long dataId=-1;
  long rawContactId=-1;
  long contactId=-1;
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,selection.toString(),selectionArgs,null,null,null);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  values.put(Presence.DATA_ID,dataId);
  values.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
  long presenceId=mDb.replace(Tables.PRESENCE,null,values);
  if (contactId != -1) {
    if (values.containsKey(Presence.PRESENCE_STATUS)) {
      mAggregatedPresenceReplace.bindLong(1,contactId);
      mAggregatedPresenceReplace.bindLong(2,contactId);
      mAggregatedPresenceReplace.execute();
    }
    String status=values.getAsString(Presence.PRESENCE_CUSTOM_STATUS);
    if (status != null) {
      mAggregatedPresenceStatusUpdate.bindString(1,status);
      mAggregatedPresenceStatusUpdate.bindLong(2,contactId);
      mAggregatedPresenceStatusUpdate.execute();
    }
  }
  return presenceId;
}","/** 
 * Inserts a presence update.
 */
public long insertPresence(ContentValues values){
  final String handle=values.getAsString(Presence.IM_HANDLE);
  if (TextUtils.isEmpty(handle) || !values.containsKey(Presence.PROTOCOL)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final long protocol=values.getAsLong(Presence.PROTOCOL);
  String customProtocol=null;
  if (protocol == Im.PROTOCOL_CUSTOM) {
    customProtocol=values.getAsString(Presence.CUSTOM_PROTOCOL);
    if (TextUtils.isEmpty(customProtocol)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  boolean matchEmail=Im.PROTOCOL_GOOGLE_TALK == protocol;
  StringBuilder selection=new StringBuilder();
  String[] selectionArgs;
  if (matchEmail) {
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selection.append(""String_Node_Str"" + MimetypesColumns.MIMETYPE + ""String_Node_Str""+ Email.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Email.DATA+ ""String_Node_Str""+ ""String_Node_Str"");
    selectionArgs=new String[]{String.valueOf(protocol),handle,handle};
  }
 else {
    selection.append(MimetypesColumns.MIMETYPE + ""String_Node_Str"" + Im.CONTENT_ITEM_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ Im.PROTOCOL+ ""String_Node_Str""+ ""String_Node_Str""+ Im.DATA+ ""String_Node_Str"");
    if (customProtocol != null) {
      selection.append(""String_Node_Str"" + Im.CUSTOM_PROTOCOL + ""String_Node_Str"");
      DatabaseUtils.appendEscapedSQLString(selection,customProtocol);
    }
    selectionArgs=new String[]{String.valueOf(protocol),handle};
  }
  if (values.containsKey(Presence.DATA_ID)) {
    selection.append(""String_Node_Str"" + DataColumns.CONCRETE_ID + ""String_Node_Str"").append(values.getAsLong(Presence.DATA_ID));
  }
  selection.append(""String_Node_Str"").append(getContactsRestrictions());
  long dataId=-1;
  long rawContactId=-1;
  long contactId=-1;
  Cursor cursor=null;
  try {
    cursor=mDb.query(DataContactsQuery.TABLE,DataContactsQuery.PROJECTION,selection.toString(),selectionArgs,null,null,null);
    if (cursor.moveToFirst()) {
      dataId=cursor.getLong(DataContactsQuery.DATA_ID);
      rawContactId=cursor.getLong(DataContactsQuery.RAW_CONTACT_ID);
      contactId=cursor.getLong(DataContactsQuery.CONTACT_ID);
    }
 else {
      return -1;
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  values.put(Presence.DATA_ID,dataId);
  values.put(PresenceColumns.RAW_CONTACT_ID,rawContactId);
  if (customProtocol == null) {
    values.put(Presence.CUSTOM_PROTOCOL,""String_Node_Str"");
  }
  long presenceId=mDb.replace(Tables.PRESENCE,null,values);
  if (contactId != -1) {
    if (values.containsKey(Presence.PRESENCE_STATUS)) {
      mAggregatedPresenceReplace.bindLong(1,contactId);
      mAggregatedPresenceReplace.bindLong(2,contactId);
      mAggregatedPresenceReplace.execute();
    }
    String status=values.getAsString(Presence.PRESENCE_CUSTOM_STATUS);
    if (status != null) {
      mAggregatedPresenceStatusUpdate.bindString(1,status);
      mAggregatedPresenceStatusUpdate.bindLong(2,contactId);
      mAggregatedPresenceStatusUpdate.execute();
    }
  }
  return presenceId;
}",0.9862148190695004
152522,"/** 
 * Find all contacts that require aggregation and pass them through aggregation one by one. Do not call directly.  It is invoked by the scheduler.
 */
public void run(){
  if (!mEnabled) {
    return;
  }
  mCancel=false;
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  MatchCandidateList candidates=new MatchCandidateList();
  ContactMatcher matcher=new ContactMatcher();
  ContentValues values=new ContentValues();
  long rawContactIds[]=new long[MAX_TRANSACTION_SIZE];
  long contactIds[]=new long[MAX_TRANSACTION_SIZE];
  aggregateBatch(db,candidates,matcher,values,rawContactIds,contactIds);
}","/** 
 * Find all contacts that require aggregation and pass them through aggregation one by one. Do not call directly.  It is invoked by the scheduler.
 */
public void run(){
  if (!mEnabled) {
    return;
  }
  mCancel=false;
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  MatchCandidateList candidates=new MatchCandidateList();
  ContactMatcher matcher=new ContactMatcher();
  ContentValues values=new ContentValues();
  long rawContactIds[]=new long[MAX_TRANSACTION_SIZE];
  long contactIds[]=new long[MAX_TRANSACTION_SIZE];
  while (!mCancel) {
    if (!aggregateBatch(db,candidates,matcher,values,rawContactIds,contactIds)) {
      break;
    }
  }
}",0.9553641346906812
152523,"/** 
 * Takes a batch of contacts and aggregates them. Returns the number of successfully processed raw contacts.
 */
private int aggregateBatch(SQLiteDatabase db,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values,long[] rawContactIds,long[] contactIds){
  long elapsedTime=0;
  int aggregatedCount=0;
  while (!mCancel && aggregatedCount < MAX_TRANSACTION_SIZE) {
    db.beginTransaction();
    try {
      long start=System.currentTimeMillis();
      int count=findContactsToAggregate(db,rawContactIds,contactIds,MAX_TRANSACTION_SIZE - aggregatedCount);
      if (mCancel || count == 0) {
        break;
      }
      Log.i(TAG,""String_Node_Str"" + count);
      EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,System.currentTimeMillis() - start,-count);
      for (int i=0; i < count; i++) {
        start=System.currentTimeMillis();
        aggregateContact(db,rawContactIds[i],contactIds[i],candidates,matcher,values);
        long end=System.currentTimeMillis();
        elapsedTime+=(end - start);
        aggregatedCount++;
        if (db.yieldIfContendedSafely(SLEEP_AFTER_YIELD_DELAY)) {
          break;
        }
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
  }
  EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,elapsedTime,aggregatedCount);
  String performance=aggregatedCount == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + (elapsedTime / aggregatedCount) + ""String_Node_Str"";
  if (aggregatedCount != 0) {
    Log.i(TAG,""String_Node_Str"" + aggregatedCount + performance);
  }
  if (aggregatedCount > 0) {
    mContactsProvider.notifyChange();
  }
  return aggregatedCount;
}","/** 
 * Takes a batch of contacts and aggregates them. Returns the number of successfully processed raw contacts.
 * @return true if there are possibly more contacts to aggregate
 */
private boolean aggregateBatch(SQLiteDatabase db,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values,long[] rawContactIds,long[] contactIds){
  boolean lastBatch=false;
  long elapsedTime=0;
  int aggregatedCount=0;
  while (!mCancel && aggregatedCount < MAX_TRANSACTION_SIZE) {
    db.beginTransaction();
    try {
      long start=System.currentTimeMillis();
      int count=findContactsToAggregate(db,rawContactIds,contactIds,MAX_TRANSACTION_SIZE - aggregatedCount);
      if (mCancel || count == 0) {
        lastBatch=true;
        break;
      }
      Log.i(TAG,""String_Node_Str"" + count);
      EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,System.currentTimeMillis() - start,-count);
      for (int i=0; i < count; i++) {
        start=System.currentTimeMillis();
        aggregateContact(db,rawContactIds[i],contactIds[i],candidates,matcher,values);
        long end=System.currentTimeMillis();
        elapsedTime+=(end - start);
        aggregatedCount++;
        if (db.yieldIfContendedSafely(SLEEP_AFTER_YIELD_DELAY)) {
          break;
        }
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
  }
  EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,elapsedTime,aggregatedCount);
  String performance=aggregatedCount == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + (elapsedTime / aggregatedCount) + ""String_Node_Str"";
  if (aggregatedCount != 0) {
    Log.i(TAG,""String_Node_Str"" + aggregatedCount + performance);
  }
  if (aggregatedCount > 0) {
    mContactsProvider.notifyChange();
  }
  return !lastBatch;
}",0.95619379170293
152524,"/** 
 * Find all contacts that require aggregation and pass them through aggregation one by one. Do not call directly.  It is invoked by the scheduler.
 */
public void run(){
  if (!mEnabled) {
    return;
  }
  mCancel=false;
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  MatchCandidateList candidates=new MatchCandidateList();
  ContactMatcher matcher=new ContactMatcher();
  ContentValues values=new ContentValues();
  long rawContactIds[]=new long[MAX_TRANSACTION_SIZE];
  long contactIds[]=new long[MAX_TRANSACTION_SIZE];
  aggregateBatch(db,candidates,matcher,values,rawContactIds,contactIds);
}","/** 
 * Find all contacts that require aggregation and pass them through aggregation one by one. Do not call directly.  It is invoked by the scheduler.
 */
public void run(){
  if (!mEnabled) {
    return;
  }
  mCancel=false;
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  MatchCandidateList candidates=new MatchCandidateList();
  ContactMatcher matcher=new ContactMatcher();
  ContentValues values=new ContentValues();
  long rawContactIds[]=new long[MAX_TRANSACTION_SIZE];
  long contactIds[]=new long[MAX_TRANSACTION_SIZE];
  while (!mCancel) {
    if (!aggregateBatch(db,candidates,matcher,values,rawContactIds,contactIds)) {
      break;
    }
  }
}",0.9553641346906812
152525,"/** 
 * Takes a batch of contacts and aggregates them. Returns the number of successfully processed raw contacts.
 */
private int aggregateBatch(SQLiteDatabase db,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values,long[] rawContactIds,long[] contactIds){
  long elapsedTime=0;
  int aggregatedCount=0;
  while (!mCancel && aggregatedCount < MAX_TRANSACTION_SIZE) {
    db.beginTransaction();
    try {
      long start=System.currentTimeMillis();
      int count=findContactsToAggregate(db,rawContactIds,contactIds,MAX_TRANSACTION_SIZE - aggregatedCount);
      if (mCancel || count == 0) {
        break;
      }
      Log.i(TAG,""String_Node_Str"" + count);
      EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,System.currentTimeMillis() - start,-count);
      for (int i=0; i < count; i++) {
        start=System.currentTimeMillis();
        aggregateContact(db,rawContactIds[i],contactIds[i],candidates,matcher,values);
        long end=System.currentTimeMillis();
        elapsedTime+=(end - start);
        aggregatedCount++;
        if (db.yieldIfContendedSafely(SLEEP_AFTER_YIELD_DELAY)) {
          break;
        }
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
  }
  EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,elapsedTime,aggregatedCount);
  String performance=aggregatedCount == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + (elapsedTime / aggregatedCount) + ""String_Node_Str"";
  if (aggregatedCount != 0) {
    Log.i(TAG,""String_Node_Str"" + aggregatedCount + performance);
  }
  if (aggregatedCount > 0) {
    mContactsProvider.notifyChange();
  }
  return aggregatedCount;
}","/** 
 * Takes a batch of contacts and aggregates them. Returns the number of successfully processed raw contacts.
 * @return true if there are possibly more contacts to aggregate
 */
private boolean aggregateBatch(SQLiteDatabase db,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values,long[] rawContactIds,long[] contactIds){
  boolean lastBatch=false;
  long elapsedTime=0;
  int aggregatedCount=0;
  while (!mCancel && aggregatedCount < MAX_TRANSACTION_SIZE) {
    db.beginTransaction();
    try {
      long start=System.currentTimeMillis();
      int count=findContactsToAggregate(db,rawContactIds,contactIds,MAX_TRANSACTION_SIZE - aggregatedCount);
      if (mCancel || count == 0) {
        lastBatch=true;
        break;
      }
      Log.i(TAG,""String_Node_Str"" + count);
      EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,System.currentTimeMillis() - start,-count);
      for (int i=0; i < count; i++) {
        start=System.currentTimeMillis();
        aggregateContact(db,rawContactIds[i],contactIds[i],candidates,matcher,values);
        long end=System.currentTimeMillis();
        elapsedTime+=(end - start);
        aggregatedCount++;
        if (db.yieldIfContendedSafely(SLEEP_AFTER_YIELD_DELAY)) {
          break;
        }
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
  }
  EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,elapsedTime,aggregatedCount);
  String performance=aggregatedCount == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + (elapsedTime / aggregatedCount) + ""String_Node_Str"";
  if (aggregatedCount != 0) {
    Log.i(TAG,""String_Node_Str"" + aggregatedCount + performance);
  }
  if (aggregatedCount > 0) {
    mContactsProvider.notifyChange();
  }
  return !lastBatch;
}",0.95619379170293
152526,"/** 
 * Find all contacts that require aggregation and pass them through aggregation one by one. Do not call directly.  It is invoked by the scheduler.
 */
public void run(){
  if (!mEnabled) {
    return;
  }
  mCancel=false;
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  MatchCandidateList candidates=new MatchCandidateList();
  ContactMatcher matcher=new ContactMatcher();
  ContentValues values=new ContentValues();
  long rawContactIds[]=new long[MAX_TRANSACTION_SIZE];
  long contactIds[]=new long[MAX_TRANSACTION_SIZE];
  aggregateBatch(db,candidates,matcher,values,rawContactIds,contactIds);
}","/** 
 * Find all contacts that require aggregation and pass them through aggregation one by one. Do not call directly.  It is invoked by the scheduler.
 */
public void run(){
  if (!mEnabled) {
    return;
  }
  mCancel=false;
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  MatchCandidateList candidates=new MatchCandidateList();
  ContactMatcher matcher=new ContactMatcher();
  ContentValues values=new ContentValues();
  long rawContactIds[]=new long[MAX_TRANSACTION_SIZE];
  long contactIds[]=new long[MAX_TRANSACTION_SIZE];
  while (!mCancel) {
    if (!aggregateBatch(db,candidates,matcher,values,rawContactIds,contactIds)) {
      break;
    }
  }
}",0.9553641346906812
152527,"/** 
 * Takes a batch of contacts and aggregates them. Returns the number of successfully processed raw contacts.
 */
private int aggregateBatch(SQLiteDatabase db,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values,long[] rawContactIds,long[] contactIds){
  long elapsedTime=0;
  int aggregatedCount=0;
  while (!mCancel && aggregatedCount < MAX_TRANSACTION_SIZE) {
    db.beginTransaction();
    try {
      long start=System.currentTimeMillis();
      int count=findContactsToAggregate(db,rawContactIds,contactIds,MAX_TRANSACTION_SIZE - aggregatedCount);
      if (mCancel || count == 0) {
        break;
      }
      Log.i(TAG,""String_Node_Str"" + count);
      EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,System.currentTimeMillis() - start,-count);
      for (int i=0; i < count; i++) {
        start=System.currentTimeMillis();
        aggregateContact(db,rawContactIds[i],contactIds[i],candidates,matcher,values);
        long end=System.currentTimeMillis();
        elapsedTime+=(end - start);
        aggregatedCount++;
        if (db.yieldIfContendedSafely(SLEEP_AFTER_YIELD_DELAY)) {
          break;
        }
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
  }
  EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,elapsedTime,aggregatedCount);
  String performance=aggregatedCount == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + (elapsedTime / aggregatedCount) + ""String_Node_Str"";
  if (aggregatedCount != 0) {
    Log.i(TAG,""String_Node_Str"" + aggregatedCount + performance);
  }
  if (aggregatedCount > 0) {
    mContactsProvider.notifyChange();
  }
  return aggregatedCount;
}","/** 
 * Takes a batch of contacts and aggregates them. Returns the number of successfully processed raw contacts.
 * @return true if there are possibly more contacts to aggregate
 */
private boolean aggregateBatch(SQLiteDatabase db,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values,long[] rawContactIds,long[] contactIds){
  boolean lastBatch=false;
  long elapsedTime=0;
  int aggregatedCount=0;
  while (!mCancel && aggregatedCount < MAX_TRANSACTION_SIZE) {
    db.beginTransaction();
    try {
      long start=System.currentTimeMillis();
      int count=findContactsToAggregate(db,rawContactIds,contactIds,MAX_TRANSACTION_SIZE - aggregatedCount);
      if (mCancel || count == 0) {
        lastBatch=true;
        break;
      }
      Log.i(TAG,""String_Node_Str"" + count);
      EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,System.currentTimeMillis() - start,-count);
      for (int i=0; i < count; i++) {
        start=System.currentTimeMillis();
        aggregateContact(db,rawContactIds[i],contactIds[i],candidates,matcher,values);
        long end=System.currentTimeMillis();
        elapsedTime+=(end - start);
        aggregatedCount++;
        if (db.yieldIfContendedSafely(SLEEP_AFTER_YIELD_DELAY)) {
          break;
        }
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
  }
  EventLog.writeEvent(LOG_SYNC_CONTACTS_AGGREGATION,elapsedTime,aggregatedCount);
  String performance=aggregatedCount == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + (elapsedTime / aggregatedCount) + ""String_Node_Str"";
  if (aggregatedCount != 0) {
    Log.i(TAG,""String_Node_Str"" + aggregatedCount + performance);
  }
  if (aggregatedCount > 0) {
    mContactsProvider.notifyChange();
  }
  return !lastBatch;
}",0.95619379170293
152528,"public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  final ContentValues values=new ContentValues();
  computeAggregateData(db,RawContacts.CONTACT_ID + ""String_Node_Str"" + contactId,values);
  db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
  mAggregatedPresenceReplace.bindLong(1,contactId);
  mAggregatedPresenceReplace.bindLong(2,contactId);
  mAggregatedPresenceReplace.execute();
}","public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  final ContentValues values=new ContentValues();
  computeAggregateData(db,contactId,values);
  db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
  mAggregatedPresenceReplace.bindLong(1,contactId);
  mAggregatedPresenceReplace.bindLong(2,contactId);
  mAggregatedPresenceReplace.execute();
}",0.8452982810920121
152529,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  mRawContactsMarkedForAggregation.remove(rawContactId);
  candidates.clear();
  matcher.clear();
  long contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
  if (contactId == -1) {
    contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && currentContactContentsCount == 0) {
    contactId=currentContactId;
  }
  if (contactId != currentContactId && currentContactContentsCount == 0) {
    mContactDelete.bindLong(1,currentContactId);
    mContactDelete.execute();
  }
  if (contactId == -1) {
    ContentValues contactValues=new ContentValues();
    contactValues.put(RawContactsColumns.DISPLAY_NAME,""String_Node_Str"");
    computeAggregateData(db,RawContactsColumns.CONCRETE_ID + ""String_Node_Str"" + rawContactId,contactValues);
    contactId=db.insert(Tables.CONTACTS,Contacts.DISPLAY_NAME,contactValues);
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    mOpenHelper.updateContactVisible(contactId);
  }
 else {
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,RawContacts.CONTACT_ID + ""String_Node_Str"" + contactId,values);
    db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
    mOpenHelper.updateContactVisible(contactId);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  mRawContactsMarkedForAggregation.remove(rawContactId);
  candidates.clear();
  matcher.clear();
  long contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
  if (contactId == -1) {
    contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && currentContactContentsCount == 0) {
    contactId=currentContactId;
  }
  if (contactId != currentContactId && currentContactContentsCount == 0) {
    mContactDelete.bindLong(1,currentContactId);
    mContactDelete.execute();
  }
  if (contactId == -1) {
    ContentValues contactValues=new ContentValues();
    contactValues.put(RawContactsColumns.DISPLAY_NAME,""String_Node_Str"");
    computeAggregateData(db,RawContactsColumns.CONCRETE_ID + ""String_Node_Str"" + rawContactId,contactValues);
    contactId=db.insert(Tables.CONTACTS,Contacts.DISPLAY_NAME,contactValues);
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    mOpenHelper.updateContactVisible(contactId);
  }
 else {
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,values);
    db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
    mOpenHelper.updateContactVisible(contactId);
  }
}",0.959315884944286
152530,"private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long rcId1=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID1);
  long rcId2=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID2);
  long rawContactId1, rawContactId2;
  if (rcId1 < rcId2) {
    rawContactId1=rcId1;
    rawContactId2=rcId2;
  }
 else {
    rawContactId2=rcId1;
    rawContactId1=rcId2;
  }
  if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
    db.delete(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions.RAW_CONTACT_ID1 + ""String_Node_Str"" + rawContactId1+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ rawContactId2,null);
  }
 else {
    ContentValues exceptionValues=new ContentValues(3);
    exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID1,rawContactId1);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID2,rawContactId2);
    db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
  }
  long contactId1=mOpenHelper.getContactId(rawContactId1);
  mContactAggregator.aggregateContact(db,rawContactId1,contactId1);
  long contactId2=mOpenHelper.getContactId(rawContactId2);
  mContactAggregator.aggregateContact(db,rawContactId2,contactId2);
  return 1;
}","private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long rcId1=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID1);
  long rcId2=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID2);
  long rawContactId1, rawContactId2;
  if (rcId1 < rcId2) {
    rawContactId1=rcId1;
    rawContactId2=rcId2;
  }
 else {
    rawContactId2=rcId1;
    rawContactId1=rcId2;
  }
  if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
    db.delete(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions.RAW_CONTACT_ID1 + ""String_Node_Str"" + rawContactId1+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ rawContactId2,null);
  }
 else {
    ContentValues exceptionValues=new ContentValues(3);
    exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID1,rawContactId1);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID2,rawContactId2);
    db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
  }
  mContactAggregator.markForAggregation(rawContactId1);
  mContactAggregator.markForAggregation(rawContactId2);
  long contactId1=mOpenHelper.getContactId(rawContactId1);
  mContactAggregator.aggregateContact(db,rawContactId1,contactId1);
  long contactId2=mOpenHelper.getContactId(rawContactId2);
  mContactAggregator.aggregateContact(db,rawContactId2,contactId2);
  return 1;
}",0.96159122085048
152531,"public void testAggregationExceptionKeepOutCheckUpdatesDisplayName(){
  long rawContactId1=createRawContact();
  insertStructuredName(rawContactId1,""String_Node_Str"",""String_Node_Str"");
  long rawContactId2=createRawContact();
  insertStructuredName(rawContactId2,""String_Node_Str"",""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId2);
  assertAggregated(rawContactId1,rawContactId2,""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId2);
  String displayName1=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName1);
  String displayName2=queryDisplayName(queryContactId(rawContactId2));
  assertEquals(""String_Node_Str"",displayName2);
}","public void testAggregationExceptionKeepOutCheckUpdatesDisplayName(){
  long rawContactId1=createRawContact();
  insertStructuredName(rawContactId1,""String_Node_Str"",""String_Node_Str"");
  long rawContactId2=createRawContact();
  insertStructuredName(rawContactId2,""String_Node_Str"",""String_Node_Str"");
  long rawContactId3=createRawContact();
  insertStructuredName(rawContactId3,""String_Node_Str"",""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId2);
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId3);
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId2,rawContactId3);
  assertAggregated(rawContactId1,rawContactId2,""String_Node_Str"");
  assertAggregated(rawContactId1,rawContactId3);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId3);
  assertNotAggregated(rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId3);
  String displayName1=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName1);
  assertAggregated(rawContactId2,rawContactId3,""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId2,rawContactId3);
  assertNotAggregated(rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId3);
  assertNotAggregated(rawContactId2,rawContactId3);
  String displayName2=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName2);
  String displayName3=queryDisplayName(queryContactId(rawContactId2));
  assertEquals(""String_Node_Str"",displayName3);
  String displayName4=queryDisplayName(queryContactId(rawContactId3));
  assertEquals(""String_Node_Str"",displayName4);
}",0.5493871665465032
152532,"public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  final ContentValues values=new ContentValues();
  computeAggregateData(db,RawContacts.CONTACT_ID + ""String_Node_Str"" + contactId,values);
  db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
  mAggregatedPresenceReplace.bindLong(1,contactId);
  mAggregatedPresenceReplace.bindLong(2,contactId);
  mAggregatedPresenceReplace.execute();
}","public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  final ContentValues values=new ContentValues();
  computeAggregateData(db,contactId,values);
  db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
  mAggregatedPresenceReplace.bindLong(1,contactId);
  mAggregatedPresenceReplace.bindLong(2,contactId);
  mAggregatedPresenceReplace.execute();
}",0.8452982810920121
152533,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  mRawContactsMarkedForAggregation.remove(rawContactId);
  candidates.clear();
  matcher.clear();
  long contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
  if (contactId == -1) {
    contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && currentContactContentsCount == 0) {
    contactId=currentContactId;
  }
  if (contactId != currentContactId && currentContactContentsCount == 0) {
    mContactDelete.bindLong(1,currentContactId);
    mContactDelete.execute();
  }
  if (contactId == -1) {
    ContentValues contactValues=new ContentValues();
    contactValues.put(RawContactsColumns.DISPLAY_NAME,""String_Node_Str"");
    computeAggregateData(db,RawContactsColumns.CONCRETE_ID + ""String_Node_Str"" + rawContactId,contactValues);
    contactId=db.insert(Tables.CONTACTS,Contacts.DISPLAY_NAME,contactValues);
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    mOpenHelper.updateContactVisible(contactId);
  }
 else {
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,RawContacts.CONTACT_ID + ""String_Node_Str"" + contactId,values);
    db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
    mOpenHelper.updateContactVisible(contactId);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  mRawContactsMarkedForAggregation.remove(rawContactId);
  candidates.clear();
  matcher.clear();
  long contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
  if (contactId == -1) {
    contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && currentContactContentsCount == 0) {
    contactId=currentContactId;
  }
  if (contactId != currentContactId && currentContactContentsCount == 0) {
    mContactDelete.bindLong(1,currentContactId);
    mContactDelete.execute();
  }
  if (contactId == -1) {
    ContentValues contactValues=new ContentValues();
    contactValues.put(RawContactsColumns.DISPLAY_NAME,""String_Node_Str"");
    computeAggregateData(db,RawContactsColumns.CONCRETE_ID + ""String_Node_Str"" + rawContactId,contactValues);
    contactId=db.insert(Tables.CONTACTS,Contacts.DISPLAY_NAME,contactValues);
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    mOpenHelper.updateContactVisible(contactId);
  }
 else {
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,values);
    db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
    mOpenHelper.updateContactVisible(contactId);
  }
}",0.959315884944286
152534,"private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long rcId1=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID1);
  long rcId2=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID2);
  long rawContactId1, rawContactId2;
  if (rcId1 < rcId2) {
    rawContactId1=rcId1;
    rawContactId2=rcId2;
  }
 else {
    rawContactId2=rcId1;
    rawContactId1=rcId2;
  }
  if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
    db.delete(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions.RAW_CONTACT_ID1 + ""String_Node_Str"" + rawContactId1+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ rawContactId2,null);
  }
 else {
    ContentValues exceptionValues=new ContentValues(3);
    exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID1,rawContactId1);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID2,rawContactId2);
    db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
  }
  long contactId1=mOpenHelper.getContactId(rawContactId1);
  mContactAggregator.aggregateContact(db,rawContactId1,contactId1);
  long contactId2=mOpenHelper.getContactId(rawContactId2);
  mContactAggregator.aggregateContact(db,rawContactId2,contactId2);
  return 1;
}","private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long rcId1=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID1);
  long rcId2=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID2);
  long rawContactId1, rawContactId2;
  if (rcId1 < rcId2) {
    rawContactId1=rcId1;
    rawContactId2=rcId2;
  }
 else {
    rawContactId2=rcId1;
    rawContactId1=rcId2;
  }
  if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
    db.delete(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions.RAW_CONTACT_ID1 + ""String_Node_Str"" + rawContactId1+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ rawContactId2,null);
  }
 else {
    ContentValues exceptionValues=new ContentValues(3);
    exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID1,rawContactId1);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID2,rawContactId2);
    db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
  }
  mContactAggregator.markForAggregation(rawContactId1);
  mContactAggregator.markForAggregation(rawContactId2);
  long contactId1=mOpenHelper.getContactId(rawContactId1);
  mContactAggregator.aggregateContact(db,rawContactId1,contactId1);
  long contactId2=mOpenHelper.getContactId(rawContactId2);
  mContactAggregator.aggregateContact(db,rawContactId2,contactId2);
  return 1;
}",0.96159122085048
152535,"public void testAggregationExceptionKeepOutCheckUpdatesDisplayName(){
  long rawContactId1=createRawContact();
  insertStructuredName(rawContactId1,""String_Node_Str"",""String_Node_Str"");
  long rawContactId2=createRawContact();
  insertStructuredName(rawContactId2,""String_Node_Str"",""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId2);
  assertAggregated(rawContactId1,rawContactId2,""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId2);
  String displayName1=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName1);
  String displayName2=queryDisplayName(queryContactId(rawContactId2));
  assertEquals(""String_Node_Str"",displayName2);
}","public void testAggregationExceptionKeepOutCheckUpdatesDisplayName(){
  long rawContactId1=createRawContact();
  insertStructuredName(rawContactId1,""String_Node_Str"",""String_Node_Str"");
  long rawContactId2=createRawContact();
  insertStructuredName(rawContactId2,""String_Node_Str"",""String_Node_Str"");
  long rawContactId3=createRawContact();
  insertStructuredName(rawContactId3,""String_Node_Str"",""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId2);
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId3);
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId2,rawContactId3);
  assertAggregated(rawContactId1,rawContactId2,""String_Node_Str"");
  assertAggregated(rawContactId1,rawContactId3);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId3);
  assertNotAggregated(rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId3);
  String displayName1=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName1);
  assertAggregated(rawContactId2,rawContactId3,""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId2,rawContactId3);
  assertNotAggregated(rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId3);
  assertNotAggregated(rawContactId2,rawContactId3);
  String displayName2=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName2);
  String displayName3=queryDisplayName(queryContactId(rawContactId2));
  assertEquals(""String_Node_Str"",displayName3);
  String displayName4=queryDisplayName(queryContactId(rawContactId3));
  assertEquals(""String_Node_Str"",displayName4);
}",0.5493871665465032
152536,"public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  final ContentValues values=new ContentValues();
  computeAggregateData(db,RawContacts.CONTACT_ID + ""String_Node_Str"" + contactId,values);
  db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
  mAggregatedPresenceReplace.bindLong(1,contactId);
  mAggregatedPresenceReplace.bindLong(2,contactId);
  mAggregatedPresenceReplace.execute();
}","public void updateAggregateData(long contactId){
  if (!mEnabled) {
    return;
  }
  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  final ContentValues values=new ContentValues();
  computeAggregateData(db,contactId,values);
  db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
  mAggregatedPresenceReplace.bindLong(1,contactId);
  mAggregatedPresenceReplace.bindLong(2,contactId);
  mAggregatedPresenceReplace.execute();
}",0.8452982810920121
152537,"/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  mRawContactsMarkedForAggregation.remove(rawContactId);
  candidates.clear();
  matcher.clear();
  long contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
  if (contactId == -1) {
    contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && currentContactContentsCount == 0) {
    contactId=currentContactId;
  }
  if (contactId != currentContactId && currentContactContentsCount == 0) {
    mContactDelete.bindLong(1,currentContactId);
    mContactDelete.execute();
  }
  if (contactId == -1) {
    ContentValues contactValues=new ContentValues();
    contactValues.put(RawContactsColumns.DISPLAY_NAME,""String_Node_Str"");
    computeAggregateData(db,RawContactsColumns.CONCRETE_ID + ""String_Node_Str"" + rawContactId,contactValues);
    contactId=db.insert(Tables.CONTACTS,Contacts.DISPLAY_NAME,contactValues);
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    mOpenHelper.updateContactVisible(contactId);
  }
 else {
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,RawContacts.CONTACT_ID + ""String_Node_Str"" + contactId,values);
    db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
    mOpenHelper.updateContactVisible(contactId);
  }
}","/** 
 * Given a specific raw contact, finds all matching aggregate contacts and chooses the one with the highest match score.  If no such contact is found, creates a new contact.
 */
private synchronized void aggregateContact(SQLiteDatabase db,long rawContactId,long currentContactId,MatchCandidateList candidates,ContactMatcher matcher,ContentValues values){
  mRawContactsMarkedForAggregation.remove(rawContactId);
  candidates.clear();
  matcher.clear();
  long contactId=pickBestMatchBasedOnExceptions(db,rawContactId,matcher);
  if (contactId == -1) {
    contactId=pickBestMatchBasedOnData(db,rawContactId,candidates,matcher);
  }
  long currentContactContentsCount=0;
  if (currentContactId != 0) {
    mRawContactCountQuery.bindLong(1,currentContactId);
    mRawContactCountQuery.bindLong(2,rawContactId);
    currentContactContentsCount=mRawContactCountQuery.simpleQueryForLong();
  }
  if (contactId == -1 && currentContactId != 0 && currentContactContentsCount == 0) {
    contactId=currentContactId;
  }
  if (contactId != currentContactId && currentContactContentsCount == 0) {
    mContactDelete.bindLong(1,currentContactId);
    mContactDelete.execute();
  }
  if (contactId == -1) {
    ContentValues contactValues=new ContentValues();
    contactValues.put(RawContactsColumns.DISPLAY_NAME,""String_Node_Str"");
    computeAggregateData(db,RawContactsColumns.CONCRETE_ID + ""String_Node_Str"" + rawContactId,contactValues);
    contactId=db.insert(Tables.CONTACTS,Contacts.DISPLAY_NAME,contactValues);
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    mOpenHelper.updateContactVisible(contactId);
  }
 else {
    mOpenHelper.setContactIdAndMarkAggregated(rawContactId,contactId);
    computeAggregateData(db,contactId,values);
    db.update(Tables.CONTACTS,values,Contacts._ID + ""String_Node_Str"" + contactId,null);
    mOpenHelper.updateContactVisible(contactId);
  }
}",0.959315884944286
152538,"private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long rcId1=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID1);
  long rcId2=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID2);
  long rawContactId1, rawContactId2;
  if (rcId1 < rcId2) {
    rawContactId1=rcId1;
    rawContactId2=rcId2;
  }
 else {
    rawContactId2=rcId1;
    rawContactId1=rcId2;
  }
  if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
    db.delete(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions.RAW_CONTACT_ID1 + ""String_Node_Str"" + rawContactId1+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ rawContactId2,null);
  }
 else {
    ContentValues exceptionValues=new ContentValues(3);
    exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID1,rawContactId1);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID2,rawContactId2);
    db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
  }
  long contactId1=mOpenHelper.getContactId(rawContactId1);
  mContactAggregator.aggregateContact(db,rawContactId1,contactId1);
  long contactId2=mOpenHelper.getContactId(rawContactId2);
  mContactAggregator.aggregateContact(db,rawContactId2,contactId2);
  return 1;
}","private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long rcId1=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID1);
  long rcId2=values.getAsInteger(AggregationExceptions.RAW_CONTACT_ID2);
  long rawContactId1, rawContactId2;
  if (rcId1 < rcId2) {
    rawContactId1=rcId1;
    rawContactId2=rcId2;
  }
 else {
    rawContactId2=rcId1;
    rawContactId1=rcId2;
  }
  if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
    db.delete(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions.RAW_CONTACT_ID1 + ""String_Node_Str"" + rawContactId1+ ""String_Node_Str""+ AggregationExceptions.RAW_CONTACT_ID2+ ""String_Node_Str""+ rawContactId2,null);
  }
 else {
    ContentValues exceptionValues=new ContentValues(3);
    exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID1,rawContactId1);
    exceptionValues.put(AggregationExceptions.RAW_CONTACT_ID2,rawContactId2);
    db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
  }
  mContactAggregator.markForAggregation(rawContactId1);
  mContactAggregator.markForAggregation(rawContactId2);
  long contactId1=mOpenHelper.getContactId(rawContactId1);
  mContactAggregator.aggregateContact(db,rawContactId1,contactId1);
  long contactId2=mOpenHelper.getContactId(rawContactId2);
  mContactAggregator.aggregateContact(db,rawContactId2,contactId2);
  return 1;
}",0.96159122085048
152539,"public void testAggregationExceptionKeepOutCheckUpdatesDisplayName(){
  long rawContactId1=createRawContact();
  insertStructuredName(rawContactId1,""String_Node_Str"",""String_Node_Str"");
  long rawContactId2=createRawContact();
  insertStructuredName(rawContactId2,""String_Node_Str"",""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId2);
  assertAggregated(rawContactId1,rawContactId2,""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId2);
  String displayName1=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName1);
  String displayName2=queryDisplayName(queryContactId(rawContactId2));
  assertEquals(""String_Node_Str"",displayName2);
}","public void testAggregationExceptionKeepOutCheckUpdatesDisplayName(){
  long rawContactId1=createRawContact();
  insertStructuredName(rawContactId1,""String_Node_Str"",""String_Node_Str"");
  long rawContactId2=createRawContact();
  insertStructuredName(rawContactId2,""String_Node_Str"",""String_Node_Str"");
  long rawContactId3=createRawContact();
  insertStructuredName(rawContactId3,""String_Node_Str"",""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId2);
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId1,rawContactId3);
  setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,rawContactId2,rawContactId3);
  assertAggregated(rawContactId1,rawContactId2,""String_Node_Str"");
  assertAggregated(rawContactId1,rawContactId3);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId2);
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId1,rawContactId3);
  assertNotAggregated(rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId3);
  String displayName1=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName1);
  assertAggregated(rawContactId2,rawContactId3,""String_Node_Str"");
  setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,rawContactId2,rawContactId3);
  assertNotAggregated(rawContactId1,rawContactId2);
  assertNotAggregated(rawContactId1,rawContactId3);
  assertNotAggregated(rawContactId2,rawContactId3);
  String displayName2=queryDisplayName(queryContactId(rawContactId1));
  assertEquals(""String_Node_Str"",displayName2);
  String displayName3=queryDisplayName(queryContactId(rawContactId2));
  assertEquals(""String_Node_Str"",displayName3);
  String displayName4=queryDisplayName(queryContactId(rawContactId3));
  assertEquals(""String_Node_Str"",displayName4);
}",0.5493871665465032
152540,"/** 
 * Returns a list of IDs for contacts that are matched on secondary data elements (phone number, email address, nickname). We still need to obtain the approximate primary score for those contacts to determine if any of them should be aggregated. <p> May return null.
 */
public List<Long> prepareSecondaryMatchCandidates(int threshold){
  ArrayList<Long> contactIds=null;
  for (int i=0; i < mScoreCount; i++) {
    MatchScore score=mScoreList.get(i);
    if (score.mKeepOut) {
      continue;
    }
    int s=score.mSecondaryScore;
    if (s >= threshold) {
      if (contactIds == null) {
        contactIds=new ArrayList<Long>();
      }
      contactIds.add(score.mContactId);
      score.mPrimaryScore=NO_DATA_SCORE;
    }
  }
  return contactIds;
}","/** 
 * Returns a list of IDs for contacts that are matched on secondary data elements (phone number, email address, nickname). We still need to obtain the approximate primary score for those contacts to determine if any of them should be aggregated. <p> May return null.
 */
public List<Long> prepareSecondaryMatchCandidates(int threshold){
  ArrayList<Long> contactIds=null;
  for (int i=0; i < mScoreCount; i++) {
    MatchScore score=mScoreList.get(i);
    if (score.mKeepOut) {
      continue;
    }
    int s=score.mSecondaryScore;
    if (s >= threshold) {
      if (contactIds == null) {
        contactIds=new ArrayList<Long>();
      }
      contactIds.add(score.mContactId);
    }
    score.mPrimaryScore=NO_DATA_SCORE;
  }
  return contactIds;
}",0.9683377308707124
152541,"@Override public boolean onCreate(){
  super.onCreate();
  final Context context=getContext();
  mOpenHelper=(OpenHelper)getOpenHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mAggregatedPresenceReplace=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PRESENCE+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mAggregatedPresenceStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str"");
  final Locale locale=Locale.getDefault();
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions),locale);
  mPostalSplitter=new PostalSplitter(locale);
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  AccountManager.get(context).addOnAccountsUpdatedListener(this,null,false);
  onAccountsUpdated(AccountManager.get(context).getAccounts());
  return (db != null);
}","@Override public boolean onCreate(){
  super.onCreate();
  final Context context=getContext();
  mOpenHelper=(OpenHelper)getOpenHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mAggregatedPresenceReplace=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PRESENCE+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mAggregatedPresenceStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str"");
  final Locale locale=Locale.getDefault();
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions),locale);
  mPostalSplitter=new PostalSplitter(locale);
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  verifyAccounts();
  return (db != null);
}",0.9830276796901696
152542,"public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  TestAggregationScheduler scheduler=new TestAggregationScheduler();
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2(scheduler);
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  scheduler.trigger();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}","public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}",0.9342062193126024
152543,"public void prepareForFullAggregation(int maxContact){
  SQLiteDatabase db=getOpenHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  long rowId=db.compileStatement(""String_Node_Str"" + maxContact).simpleQueryForLong();
  db.execSQL(""String_Node_Str"" + rowId + ""String_Node_Str"");
}","public void prepareForFullAggregation(int maxContact){
  SQLiteDatabase db=getOpenHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"");
  long rowId=db.compileStatement(""String_Node_Str"" + maxContact).simpleQueryForLong();
  db.execSQL(""String_Node_Str"" + rowId + ""String_Node_Str"");
}",0.8731563421828908
152544,"/** 
 * Returns a list of IDs for contacts that are matched on secondary data elements (phone number, email address, nickname). We still need to obtain the approximate primary score for those contacts to determine if any of them should be aggregated. <p> May return null.
 */
public List<Long> prepareSecondaryMatchCandidates(int threshold){
  ArrayList<Long> contactIds=null;
  for (int i=0; i < mScoreCount; i++) {
    MatchScore score=mScoreList.get(i);
    if (score.mKeepOut) {
      continue;
    }
    int s=score.mSecondaryScore;
    if (s >= threshold) {
      if (contactIds == null) {
        contactIds=new ArrayList<Long>();
      }
      contactIds.add(score.mContactId);
      score.mPrimaryScore=NO_DATA_SCORE;
    }
  }
  return contactIds;
}","/** 
 * Returns a list of IDs for contacts that are matched on secondary data elements (phone number, email address, nickname). We still need to obtain the approximate primary score for those contacts to determine if any of them should be aggregated. <p> May return null.
 */
public List<Long> prepareSecondaryMatchCandidates(int threshold){
  ArrayList<Long> contactIds=null;
  for (int i=0; i < mScoreCount; i++) {
    MatchScore score=mScoreList.get(i);
    if (score.mKeepOut) {
      continue;
    }
    int s=score.mSecondaryScore;
    if (s >= threshold) {
      if (contactIds == null) {
        contactIds=new ArrayList<Long>();
      }
      contactIds.add(score.mContactId);
    }
    score.mPrimaryScore=NO_DATA_SCORE;
  }
  return contactIds;
}",0.9683377308707124
152545,"@Override public boolean onCreate(){
  super.onCreate();
  final Context context=getContext();
  mOpenHelper=(OpenHelper)getOpenHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mAggregatedPresenceReplace=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PRESENCE+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mAggregatedPresenceStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str"");
  final Locale locale=Locale.getDefault();
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions),locale);
  mPostalSplitter=new PostalSplitter(locale);
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  AccountManager.get(context).addOnAccountsUpdatedListener(this,null,false);
  onAccountsUpdated(AccountManager.get(context).getAccounts());
  return (db != null);
}","@Override public boolean onCreate(){
  super.onCreate();
  final Context context=getContext();
  mOpenHelper=(OpenHelper)getOpenHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mAggregatedPresenceReplace=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PRESENCE+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mAggregatedPresenceStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str"");
  final Locale locale=Locale.getDefault();
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions),locale);
  mPostalSplitter=new PostalSplitter(locale);
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  verifyAccounts();
  return (db != null);
}",0.9830276796901696
152546,"public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  TestAggregationScheduler scheduler=new TestAggregationScheduler();
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2(scheduler);
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  scheduler.trigger();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}","public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}",0.9342062193126024
152547,"public void prepareForFullAggregation(int maxContact){
  SQLiteDatabase db=getOpenHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  long rowId=db.compileStatement(""String_Node_Str"" + maxContact).simpleQueryForLong();
  db.execSQL(""String_Node_Str"" + rowId + ""String_Node_Str"");
}","public void prepareForFullAggregation(int maxContact){
  SQLiteDatabase db=getOpenHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"");
  long rowId=db.compileStatement(""String_Node_Str"" + maxContact).simpleQueryForLong();
  db.execSQL(""String_Node_Str"" + rowId + ""String_Node_Str"");
}",0.8731563421828908
152548,"/** 
 * Returns a list of IDs for contacts that are matched on secondary data elements (phone number, email address, nickname). We still need to obtain the approximate primary score for those contacts to determine if any of them should be aggregated. <p> May return null.
 */
public List<Long> prepareSecondaryMatchCandidates(int threshold){
  ArrayList<Long> contactIds=null;
  for (int i=0; i < mScoreCount; i++) {
    MatchScore score=mScoreList.get(i);
    if (score.mKeepOut) {
      continue;
    }
    int s=score.mSecondaryScore;
    if (s >= threshold) {
      if (contactIds == null) {
        contactIds=new ArrayList<Long>();
      }
      contactIds.add(score.mContactId);
      score.mPrimaryScore=NO_DATA_SCORE;
    }
  }
  return contactIds;
}","/** 
 * Returns a list of IDs for contacts that are matched on secondary data elements (phone number, email address, nickname). We still need to obtain the approximate primary score for those contacts to determine if any of them should be aggregated. <p> May return null.
 */
public List<Long> prepareSecondaryMatchCandidates(int threshold){
  ArrayList<Long> contactIds=null;
  for (int i=0; i < mScoreCount; i++) {
    MatchScore score=mScoreList.get(i);
    if (score.mKeepOut) {
      continue;
    }
    int s=score.mSecondaryScore;
    if (s >= threshold) {
      if (contactIds == null) {
        contactIds=new ArrayList<Long>();
      }
      contactIds.add(score.mContactId);
    }
    score.mPrimaryScore=NO_DATA_SCORE;
  }
  return contactIds;
}",0.9683377308707124
152549,"@Override public boolean onCreate(){
  super.onCreate();
  final Context context=getContext();
  mOpenHelper=(OpenHelper)getOpenHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mAggregatedPresenceReplace=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PRESENCE+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mAggregatedPresenceStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str"");
  final Locale locale=Locale.getDefault();
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions),locale);
  mPostalSplitter=new PostalSplitter(locale);
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  AccountManager.get(context).addOnAccountsUpdatedListener(this,null,false);
  onAccountsUpdated(AccountManager.get(context).getAccounts());
  return (db != null);
}","@Override public boolean onCreate(){
  super.onCreate();
  final Context context=getContext();
  mOpenHelper=(OpenHelper)getOpenHelper();
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(this,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str"");
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mRawContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME_SOURCE+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mAggregatedPresenceReplace=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PRESENCE+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ PresenceColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContactsColumns.CONCRETE_ID+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mAggregatedPresenceStatusUpdate=db.compileStatement(""String_Node_Str"" + Tables.AGGREGATED_PRESENCE + ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ AggregatedPresenceColumns.CONTACT_ID+ ""String_Node_Str"");
  final Locale locale=Locale.getDefault();
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions),locale);
  mPostalSplitter=new PostalSplitter(locale);
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new NicknameDataRowHandler());
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  mDataRowHandlers.put(StructuredPostal.CONTENT_ITEM_TYPE,new StructuredPostalRowHandler(mPostalSplitter));
  mDataRowHandlers.put(GroupMembership.CONTENT_ITEM_TYPE,new GroupMembershipRowHandler());
  mDataRowHandlers.put(Photo.CONTENT_ITEM_TYPE,new PhotoDataRowHandler());
  if (isLegacyContactImportNeeded()) {
    importLegacyContactsAsync();
  }
  verifyAccounts();
  return (db != null);
}",0.9830276796901696
152550,"public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  TestAggregationScheduler scheduler=new TestAggregationScheduler();
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2(scheduler);
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  scheduler.trigger();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}","public void testPerformance(){
  final Context targetContext=getContext();
  MockContentResolver resolver=new MockContentResolver();
  MockContext context=new MockContext(){
    @Override public Resources getResources(){
      return targetContext.getResources();
    }
  }
;
  RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(context,targetContext,""String_Node_Str"");
  targetContextWrapper.makeExistingFilesAndDbsAccessible();
  IsolatedContext providerContext=new IsolatedContext(resolver,targetContextWrapper);
  SynchronousContactsProvider2 provider=new SynchronousContactsProvider2();
  provider.setDataWipeEnabled(false);
  provider.attachInfo(providerContext,null);
  resolver.addProvider(ContactsContract.AUTHORITY,provider);
  long rawContactCount=provider.getRawContactCount();
  if (rawContactCount == 0) {
    Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  provider.prepareForFullAggregation(500);
  rawContactCount=provider.getRawContactCount();
  long start=System.currentTimeMillis();
  if (TRACE) {
    Debug.startMethodTracing(""String_Node_Str"");
  }
  provider.aggregate();
  if (TRACE) {
    Debug.stopMethodTracing();
  }
  long end=System.currentTimeMillis();
  long contactCount=provider.getContactCount();
  Log.i(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",end - start,rawContactCount,contactCount,((double)(end - start) / rawContactCount)));
}",0.9342062193126024
152551,"public void prepareForFullAggregation(int maxContact){
  SQLiteDatabase db=getOpenHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  long rowId=db.compileStatement(""String_Node_Str"" + maxContact).simpleQueryForLong();
  db.execSQL(""String_Node_Str"" + rowId + ""String_Node_Str"");
}","public void prepareForFullAggregation(int maxContact){
  SQLiteDatabase db=getOpenHelper().getWritableDatabase();
  db.execSQL(""String_Node_Str"");
  long rowId=db.compileStatement(""String_Node_Str"" + maxContact).simpleQueryForLong();
  db.execSQL(""String_Node_Str"" + rowId + ""String_Node_Str"");
}",0.8731563421828908
152552,"/** 
 * Inserts an item in the data table
 * @param values the values for the new row
 * @return the row ID of the newly created row
 */
private long insertData(ContentValues values,boolean markRawContactAsDirty){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DISABLED;
  long id=0;
  mValues.clear();
  mValues.putAll(values);
  long rawContactId=mValues.getAsLong(Data.RAW_CONTACT_ID);
  final String packageName=mValues.getAsString(Data.RES_PACKAGE);
  if (packageName != null) {
    mValues.put(DataColumns.PACKAGE_ID,mOpenHelper.getPackageId(packageName));
  }
  mValues.remove(Data.RES_PACKAGE);
  final String mimeType=mValues.getAsString(Data.MIMETYPE);
  if (TextUtils.isEmpty(mimeType)) {
    throw new IllegalArgumentException(Data.MIMETYPE + ""String_Node_Str"");
  }
  mValues.put(DataColumns.MIMETYPE_ID,mOpenHelper.getMimeTypeId(mimeType));
  mValues.remove(Data.MIMETYPE);
  id=getDataRowHandler(mimeType).insert(mDb,rawContactId,mValues);
  if (markRawContactAsDirty) {
    setRawContactDirty(rawContactId);
  }
  triggerAggregation(rawContactId);
  return id;
}","/** 
 * Inserts an item in the data table
 * @param values the values for the new row
 * @return the row ID of the newly created row
 */
private long insertData(ContentValues values,boolean markRawContactAsDirty){
  long id=0;
  mValues.clear();
  mValues.putAll(values);
  long rawContactId=mValues.getAsLong(Data.RAW_CONTACT_ID);
  final String packageName=mValues.getAsString(Data.RES_PACKAGE);
  if (packageName != null) {
    mValues.put(DataColumns.PACKAGE_ID,mOpenHelper.getPackageId(packageName));
  }
  mValues.remove(Data.RES_PACKAGE);
  final String mimeType=mValues.getAsString(Data.MIMETYPE);
  if (TextUtils.isEmpty(mimeType)) {
    throw new IllegalArgumentException(Data.MIMETYPE + ""String_Node_Str"");
  }
  mValues.put(DataColumns.MIMETYPE_ID,mOpenHelper.getMimeTypeId(mimeType));
  mValues.remove(Data.MIMETYPE);
  id=getDataRowHandler(mimeType).insert(mDb,rawContactId,mValues);
  if (markRawContactAsDirty) {
    setRawContactDirty(rawContactId);
  }
  triggerAggregation(rawContactId);
  return id;
}",0.9709938183547312
152553,"/** 
 * Inserts an item in the data table
 * @param values the values for the new row
 * @return the row ID of the newly created row
 */
private long insertData(ContentValues values,boolean markRawContactAsDirty){
  int aggregationMode=RawContacts.AGGREGATION_MODE_DISABLED;
  long id=0;
  mValues.clear();
  mValues.putAll(values);
  long rawContactId=mValues.getAsLong(Data.RAW_CONTACT_ID);
  final String packageName=mValues.getAsString(Data.RES_PACKAGE);
  if (packageName != null) {
    mValues.put(DataColumns.PACKAGE_ID,mOpenHelper.getPackageId(packageName));
  }
  mValues.remove(Data.RES_PACKAGE);
  final String mimeType=mValues.getAsString(Data.MIMETYPE);
  if (TextUtils.isEmpty(mimeType)) {
    throw new IllegalArgumentException(Data.MIMETYPE + ""String_Node_Str"");
  }
  mValues.put(DataColumns.MIMETYPE_ID,mOpenHelper.getMimeTypeId(mimeType));
  mValues.remove(Data.MIMETYPE);
  id=getDataRowHandler(mimeType).insert(mDb,rawContactId,mValues);
  if (markRawContactAsDirty) {
    setRawContactDirty(rawContactId);
  }
  triggerAggregation(rawContactId);
  return id;
}","/** 
 * Inserts an item in the data table
 * @param values the values for the new row
 * @return the row ID of the newly created row
 */
private long insertData(ContentValues values,boolean markRawContactAsDirty){
  long id=0;
  mValues.clear();
  mValues.putAll(values);
  long rawContactId=mValues.getAsLong(Data.RAW_CONTACT_ID);
  final String packageName=mValues.getAsString(Data.RES_PACKAGE);
  if (packageName != null) {
    mValues.put(DataColumns.PACKAGE_ID,mOpenHelper.getPackageId(packageName));
  }
  mValues.remove(Data.RES_PACKAGE);
  final String mimeType=mValues.getAsString(Data.MIMETYPE);
  if (TextUtils.isEmpty(mimeType)) {
    throw new IllegalArgumentException(Data.MIMETYPE + ""String_Node_Str"");
  }
  mValues.put(DataColumns.MIMETYPE_ID,mOpenHelper.getMimeTypeId(mimeType));
  mValues.remove(Data.MIMETYPE);
  id=getDataRowHandler(mimeType).insert(mDb,rawContactId,mValues);
  if (markRawContactAsDirty) {
    setRawContactDirty(rawContactId);
  }
  triggerAggregation(rawContactId);
  return id;
}",0.9709938183547312
152554,"@Override public boolean onCreate(){
  final Context context=getContext();
  mOpenHelper=getOpenHelper(context);
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(context,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ sSetPrimaryWhere);
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ sSetSuperPrimaryWhere);
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mGroupDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ Groups.DIRTY+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str"");
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions));
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Nickname.CONTENT_ITEM_TYPE,Nickname.TYPE,Nickname.LABEL));
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  if (isLegacyContactImportNeeded()) {
    if (!importLegacyContacts()) {
      return false;
    }
  }
  return (db != null);
}","@Override public boolean onCreate(){
  final Context context=getContext();
  mOpenHelper=getOpenHelper(context);
  mGlobalSearchSupport=new GlobalSearchSupport(this);
  mLegacyApiSupport=new LegacyApiSupport(context,mOpenHelper,this,mGlobalSearchSupport);
  mContactAggregator=new ContactAggregator(context,mOpenHelper,mAggregationScheduler);
  final SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  mSetPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ sSetPrimaryWhere);
  mSetSuperPrimaryStatement=db.compileStatement(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ sSetSuperPrimaryWhere);
  mLastTimeContactedUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.CONTACT_ID+ ""String_Node_Str"");
  mContactDisplayNameUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mRawContactDirtyUpdate=db.compileStatement(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str"");
  mNameSplitter=new NameSplitter(context.getString(com.android.internal.R.string.common_name_prefixes),context.getString(com.android.internal.R.string.common_last_name_prefixes),context.getString(com.android.internal.R.string.common_name_suffixes),context.getString(com.android.internal.R.string.common_name_conjunctions));
  mDataRowHandlers=new HashMap<String,DataRowHandler>();
  mDataRowHandlers.put(Email.CONTENT_ITEM_TYPE,new EmailDataRowHandler());
  mDataRowHandlers.put(Im.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Im.CONTENT_ITEM_TYPE,Im.TYPE,Im.LABEL));
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(StructuredPostal.CONTENT_ITEM_TYPE,StructuredPostal.TYPE,StructuredPostal.LABEL));
  mDataRowHandlers.put(Organization.CONTENT_ITEM_TYPE,new OrganizationDataRowHandler());
  mDataRowHandlers.put(Phone.CONTENT_ITEM_TYPE,new PhoneDataRowHandler());
  mDataRowHandlers.put(Nickname.CONTENT_ITEM_TYPE,new CommonDataRowHandler(Nickname.CONTENT_ITEM_TYPE,Nickname.TYPE,Nickname.LABEL));
  mDataRowHandlers.put(StructuredName.CONTENT_ITEM_TYPE,new StructuredNameRowHandler(mNameSplitter));
  if (isLegacyContactImportNeeded()) {
    if (!importLegacyContacts()) {
      return false;
    }
  }
  return (db != null);
}",0.9707281375777532
152555,"/** 
 * Schedules an aggregation pass after a short delay.
 */
public synchronized void schedule(){
switch (mStatus) {
case STATUS_STAND_BY:
{
      mInitialRequestTimestamp=currentTime();
      mStatus=STATUS_SCHEDULED;
      runDelayed();
      break;
    }
case STATUS_SCHEDULED:
{
    if (currentTime() - mInitialRequestTimestamp < MAX_AGGREGATION_DELAY) {
      runDelayed();
    }
    break;
  }
case STATUS_RUNNING:
{
  if (currentTime() - mInitialRequestTimestamp < MAX_AGGREGATION_DELAY) {
    mAggregator.interrupt();
  }
  mRescheduleWhenComplete=true;
  break;
}
}
}","/** 
 * Schedules an aggregation pass after a short delay.
 */
public synchronized void schedule(){
switch (mStatus) {
case STATUS_STAND_BY:
{
      mInitialRequestTimestamp=currentTime();
      mStatus=STATUS_SCHEDULED;
      runDelayed();
      break;
    }
case STATUS_INTERRUPTED:
{
    mStatus=STATUS_SCHEDULED;
    runDelayed();
    break;
  }
case STATUS_SCHEDULED:
{
  if (currentTime() - mInitialRequestTimestamp < MAX_AGGREGATION_DELAY) {
    runDelayed();
  }
  break;
}
case STATUS_RUNNING:
{
if (currentTime() - mInitialRequestTimestamp < MAX_AGGREGATION_DELAY) {
  mAggregator.interrupt();
  mStatus=STATUS_INTERRUPTED;
}
mRescheduleWhenComplete=true;
break;
}
}
}",0.8853503184713376
152556,"/** 
 * Called just before an aggregation pass begins.
 */
public void run(){
synchronized (this) {
    mStatus=STATUS_RUNNING;
    mRescheduleWhenComplete=false;
  }
  try {
    mAggregator.run();
  }
  finally {
synchronized (this) {
      mStatus=STATUS_STAND_BY;
      mInitialRequestTimestamp=0;
      if (mRescheduleWhenComplete) {
        mRescheduleWhenComplete=false;
        schedule();
      }
    }
  }
}","/** 
 * Called just before an aggregation pass begins.
 */
public void run(){
synchronized (this) {
    mStatus=STATUS_RUNNING;
    mRescheduleWhenComplete=false;
  }
  try {
    mAggregator.run();
  }
  finally {
synchronized (this) {
      if (mStatus == STATUS_RUNNING) {
        mStatus=STATUS_STAND_BY;
      }
      if (mRescheduleWhenComplete) {
        mRescheduleWhenComplete=false;
        schedule();
      }
    }
  }
}",0.7083825265643447
152557,"public void importContacts() throws Exception {
  SQLiteDatabase sourceDb=null;
  try {
    String path=mContext.getDatabasePath(DATABASE_NAME).getPath();
    sourceDb=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);
    int version=sourceDb.getVersion();
    if (version < 78) {
      return;
    }
    Log.w(TAG,""String_Node_Str"" + path);
    if (version < 80) {
      mPhoneticNameAvailable=false;
    }
    mContactsProvider.wipeData();
    importGroups(sourceDb);
    importPeople(sourceDb);
    importOrganizations(sourceDb);
    importPhones(sourceDb);
    importContactMethods(sourceDb);
    importPhotos(sourceDb);
    importGroupMemberships(sourceDb);
    importCalls(sourceDb);
    importDeletedPeople(sourceDb);
    Log.w(TAG,""String_Node_Str"");
  }
  finally {
    if (sourceDb != null)     sourceDb.close();
  }
}","public void importContacts() throws Exception {
  SQLiteDatabase sourceDb=null;
  try {
    String path=mContext.getDatabasePath(DATABASE_NAME).getPath();
    try {
      sourceDb=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);
    }
 catch (    SQLiteException e) {
      return;
    }
    int version=sourceDb.getVersion();
    if (version < 78) {
      return;
    }
    Log.w(TAG,""String_Node_Str"" + path);
    if (version < 80) {
      mPhoneticNameAvailable=false;
    }
    mContactsProvider.wipeData();
    importGroups(sourceDb);
    importPeople(sourceDb);
    importOrganizations(sourceDb);
    importPhones(sourceDb);
    importContactMethods(sourceDb);
    importPhotos(sourceDb);
    importGroupMemberships(sourceDb);
    importCalls(sourceDb);
    importDeletedPeople(sourceDb);
    Log.w(TAG,""String_Node_Str"");
  }
  finally {
    if (sourceDb != null)     sourceDb.close();
  }
}",0.959773371104816
152558,"/** 
 * Computes scores for contacts that have matching data rows.
 */
private void updateMatchScoresBasedOnDataMatches(SQLiteDatabase db,long rawContactId,int mode,MatchCandidateList candidates,ContactMatcher matcher){
  final Cursor c=db.query(Tables.DATA_JOIN_MIMETYPE_RAW_CONTACTS,DATA_JOIN_MIMETYPE_COLUMNS,Data.RAW_CONTACT_ID + ""String_Node_Str"" + rawContactId+ ""String_Node_Str""+ MIMETYPE_SELECTION_IN_CLAUSE+ ""String_Node_Str"",null,null,null,null);
  try {
    while (c.moveToNext()) {
      String mimeType=c.getString(COL_MIMETYPE);
      String data1=c.getString(COL_DATA1);
      String data2=c.getString(COL_DATA2);
      if (mimeType.equals(CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)) {
        addMatchCandidatesStructuredName(data1,data2,mode,candidates);
      }
 else       if (mimeType.equals(CommonDataKinds.Email.CONTENT_ITEM_TYPE)) {
        addMatchCandidatesEmail(data2,mode,candidates);
        lookupEmailMatches(db,data2,matcher);
      }
 else       if (mimeType.equals(CommonDataKinds.Phone.CONTENT_ITEM_TYPE)) {
        lookupPhoneMatches(db,data2,matcher);
      }
 else       if (mimeType.equals(CommonDataKinds.Nickname.CONTENT_ITEM_TYPE)) {
        addMatchCandidatesNickname(data2,mode,candidates);
        lookupNicknameMatches(db,data2,matcher);
      }
    }
  }
  finally {
    c.close();
  }
  lookupNameMatches(db,candidates,matcher);
  if (mode == MODE_SUGGESTIONS) {
    lookupApproximateNameMatches(db,candidates,matcher);
  }
}","/** 
 * Computes scores for contacts that have matching data rows.
 */
private void updateMatchScoresBasedOnDataMatches(SQLiteDatabase db,long rawContactId,int mode,MatchCandidateList candidates,ContactMatcher matcher){
  final Cursor c=db.query(Tables.DATA_JOIN_MIMETYPE_RAW_CONTACTS,DATA_JOIN_MIMETYPE_COLUMNS,Data.RAW_CONTACT_ID + ""String_Node_Str"" + rawContactId+ ""String_Node_Str""+ MIMETYPE_SELECTION_IN_CLAUSE+ ""String_Node_Str"",null,null,null,null);
  try {
    while (c.moveToNext()) {
      String mimeType=c.getString(COL_MIMETYPE);
      String data1=c.getString(COL_DATA1);
      String data2=c.getString(COL_DATA2);
      if (mimeType.equals(CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)) {
        addMatchCandidatesStructuredName(data1,data2,mode,candidates);
      }
 else       if (mimeType.equals(CommonDataKinds.Email.CONTENT_ITEM_TYPE)) {
        if (!TextUtils.isEmpty(data2)) {
          addMatchCandidatesEmail(data2,mode,candidates);
          lookupEmailMatches(db,data2,matcher);
        }
      }
 else       if (mimeType.equals(CommonDataKinds.Phone.CONTENT_ITEM_TYPE)) {
        if (!TextUtils.isEmpty(data2)) {
          lookupPhoneMatches(db,data2,matcher);
        }
      }
 else       if (mimeType.equals(CommonDataKinds.Nickname.CONTENT_ITEM_TYPE)) {
        if (!TextUtils.isEmpty(data2)) {
          addMatchCandidatesNickname(data2,mode,candidates);
          lookupNicknameMatches(db,data2,matcher);
        }
      }
    }
  }
  finally {
    c.close();
  }
  lookupNameMatches(db,candidates,matcher);
  if (mode == MODE_SUGGESTIONS) {
    lookupApproximateNameMatches(db,candidates,matcher);
  }
}",0.9330342838833708
152559,"@Override public void onCreate(SQLiteDatabase db){
  Log.i(TAG,""String_Node_Str"");
  mSyncState.createDatabase(db);
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATES + ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ Aggregates.DISPLAY_NAME+ ""String_Node_Str""+ Aggregates.PHOTO_ID+ ""String_Node_Str""+ Aggregates.CUSTOM_RINGTONE+ ""String_Node_Str""+ Aggregates.SEND_TO_VOICEMAIL+ ""String_Node_Str""+ Aggregates.TIMES_CONTACTED+ ""String_Node_Str""+ Aggregates.LAST_TIME_CONTACTED+ ""String_Node_Str""+ Aggregates.STARRED+ ""String_Node_Str""+ Aggregates.IN_VISIBLE_GROUP+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_PHONE_ID+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_PHONE_IS_RESTRICTED+ ""String_Node_Str""+ AggregatesColumns.FALLBACK_PRIMARY_PHONE_ID+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_EMAIL_ID+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_EMAIL_IS_RESTRICTED+ ""String_Node_Str""+ AggregatesColumns.FALLBACK_PRIMARY_EMAIL_ID+ ""String_Node_Str""+ AggregatesColumns.SINGLE_IS_RESTRICTED+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts.IS_RESTRICTED+ ""String_Node_Str""+ RawContacts.ACCOUNT_NAME+ ""String_Node_Str""+ RawContacts.ACCOUNT_TYPE+ ""String_Node_Str""+ RawContacts.SOURCE_ID+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts.DELETED+ ""String_Node_Str""+ RawContacts.AGGREGATE_ID+ ""String_Node_Str""+ RawContacts.AGGREGATION_MODE+ ""String_Node_Str""+ RawContacts.AGGREGATION_MODE_DEFAULT+ ""String_Node_Str""+ RawContacts.CUSTOM_RINGTONE+ ""String_Node_Str""+ RawContacts.SEND_TO_VOICEMAIL+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.STARRED+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.PACKAGES + ""String_Node_Str""+ PackagesColumns._ID+ ""String_Node_Str""+ PackagesColumns.PACKAGE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.MIMETYPES + ""String_Node_Str""+ MimetypesColumns._ID+ ""String_Node_Str""+ MimetypesColumns.MIMETYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ DataColumns.PACKAGE_ID+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ Data.DATA1+ ""String_Node_Str""+ Data.DATA2+ ""String_Node_Str""+ Data.DATA3+ ""String_Node_Str""+ Data.DATA4+ ""String_Node_Str""+ Data.DATA5+ ""String_Node_Str""+ Data.DATA6+ ""String_Node_Str""+ Data.DATA7+ ""String_Node_Str""+ Data.DATA8+ ""String_Node_Str""+ Data.DATA9+ ""String_Node_Str""+ Data.DATA10+ ""String_Node_Str""+ Data.DATA11+ ""String_Node_Str""+ Data.DATA12+ ""String_Node_Str""+ Data.DATA13+ ""String_Node_Str""+ Data.DATA14+ ""String_Node_Str""+ Data.DATA15+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.CONTACTS+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.PHONE_LOOKUP + ""String_Node_Str""+ PhoneLookupColumns._ID+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ PhoneLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.PHONE_LOOKUP + ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ PhoneLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns._ID+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NICKNAME_LOOKUP + ""String_Node_Str""+ NicknameLookupColumns.NAME+ ""String_Node_Str""+ NicknameLookupColumns.CLUSTER+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NICKNAME_LOOKUP + ""String_Node_Str""+ NicknameLookupColumns.NAME+ ""String_Node_Str""+ NicknameLookupColumns.CLUSTER+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ GroupsColumns.PACKAGE_ID+ ""String_Node_Str""+ Groups.ACCOUNT_NAME+ ""String_Node_Str""+ Groups.ACCOUNT_TYPE+ ""String_Node_Str""+ Groups.SOURCE_ID+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.DIRTY+ ""String_Node_Str""+ Groups.TITLE+ ""String_Node_Str""+ Groups.TITLE_RES+ ""String_Node_Str""+ Groups.NOTES+ ""String_Node_Str""+ Groups.SYSTEM_ID+ ""String_Node_Str""+ Groups.GROUP_VISIBLE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str""+ AggregationExceptionColumns._ID+ ""String_Node_Str""+ AggregationExceptions.TYPE+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID1+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID2+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID1+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID2+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID2+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID1+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.ACTIVITIES + ""String_Node_Str""+ Activities._ID+ ""String_Node_Str""+ ActivitiesColumns.PACKAGE_ID+ ""String_Node_Str""+ ActivitiesColumns.MIMETYPE_ID+ ""String_Node_Str""+ Activities.RAW_ID+ ""String_Node_Str""+ Activities.IN_REPLY_TO+ ""String_Node_Str""+ Activities.AUTHOR_CONTACT_ID+ ""String_Node_Str""+ Activities.TARGET_CONTACT_ID+ ""String_Node_Str""+ Activities.PUBLISHED+ ""String_Node_Str""+ Activities.THREAD_PUBLISHED+ ""String_Node_Str""+ Activities.TITLE+ ""String_Node_Str""+ Activities.SUMMARY+ ""String_Node_Str""+ Activities.LINK+ ""String_Node_Str""+ Activities.THUMBNAIL+ ""String_Node_Str""+ ""String_Node_Str"");
  loadNicknameLookupTable(db);
  if (mDelegate != null) {
    mDelegate.createDatabase(db);
  }
}","@Override public void onCreate(SQLiteDatabase db){
  Log.i(TAG,""String_Node_Str"");
  mSyncState.createDatabase(db);
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATES + ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ Aggregates.DISPLAY_NAME+ ""String_Node_Str""+ Aggregates.PHOTO_ID+ ""String_Node_Str""+ Aggregates.CUSTOM_RINGTONE+ ""String_Node_Str""+ Aggregates.SEND_TO_VOICEMAIL+ ""String_Node_Str""+ Aggregates.TIMES_CONTACTED+ ""String_Node_Str""+ Aggregates.LAST_TIME_CONTACTED+ ""String_Node_Str""+ Aggregates.STARRED+ ""String_Node_Str""+ Aggregates.IN_VISIBLE_GROUP+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_PHONE_ID+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_PHONE_IS_RESTRICTED+ ""String_Node_Str""+ AggregatesColumns.FALLBACK_PRIMARY_PHONE_ID+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_EMAIL_ID+ ""String_Node_Str""+ AggregatesColumns.OPTIMAL_PRIMARY_EMAIL_IS_RESTRICTED+ ""String_Node_Str""+ AggregatesColumns.FALLBACK_PRIMARY_EMAIL_ID+ ""String_Node_Str""+ AggregatesColumns.SINGLE_IS_RESTRICTED+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts.IS_RESTRICTED+ ""String_Node_Str""+ RawContacts.ACCOUNT_NAME+ ""String_Node_Str""+ RawContacts.ACCOUNT_TYPE+ ""String_Node_Str""+ RawContacts.SOURCE_ID+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ RawContacts.DELETED+ ""String_Node_Str""+ RawContacts.AGGREGATE_ID+ ""String_Node_Str""+ RawContacts.AGGREGATION_MODE+ ""String_Node_Str""+ RawContacts.AGGREGATION_MODE_DEFAULT+ ""String_Node_Str""+ RawContacts.CUSTOM_RINGTONE+ ""String_Node_Str""+ RawContacts.SEND_TO_VOICEMAIL+ ""String_Node_Str""+ RawContacts.TIMES_CONTACTED+ ""String_Node_Str""+ RawContacts.LAST_TIME_CONTACTED+ ""String_Node_Str""+ RawContacts.STARRED+ ""String_Node_Str""+ RawContactsColumns.DISPLAY_NAME+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.PACKAGES + ""String_Node_Str""+ PackagesColumns._ID+ ""String_Node_Str""+ PackagesColumns.PACKAGE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.MIMETYPES + ""String_Node_Str""+ MimetypesColumns._ID+ ""String_Node_Str""+ MimetypesColumns.MIMETYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ DataColumns.PACKAGE_ID+ ""String_Node_Str""+ DataColumns.MIMETYPE_ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ Data.IS_PRIMARY+ ""String_Node_Str""+ Data.IS_SUPER_PRIMARY+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ Data.DATA1+ ""String_Node_Str""+ Data.DATA2+ ""String_Node_Str""+ Data.DATA3+ ""String_Node_Str""+ Data.DATA4+ ""String_Node_Str""+ Data.DATA5+ ""String_Node_Str""+ Data.DATA6+ ""String_Node_Str""+ Data.DATA7+ ""String_Node_Str""+ Data.DATA8+ ""String_Node_Str""+ Data.DATA9+ ""String_Node_Str""+ Data.DATA10+ ""String_Node_Str""+ Data.DATA11+ ""String_Node_Str""+ Data.DATA12+ ""String_Node_Str""+ Data.DATA13+ ""String_Node_Str""+ Data.DATA14+ ""String_Node_Str""+ Data.DATA15+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.VERSION+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.RAW_CONTACTS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ Data.DATA_VERSION+ ""String_Node_Str""+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.DATA + ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.RAW_CONTACTS+ ""String_Node_Str""+ RawContacts.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ RawContacts._ID+ ""String_Node_Str""+ Data.RAW_CONTACT_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.PHONE_LOOKUP+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.PHONE_LOOKUP + ""String_Node_Str""+ PhoneLookupColumns._ID+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str""+ PhoneLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.PHONE_LOOKUP + ""String_Node_Str""+ PhoneLookupColumns.NORMALIZED_NUMBER+ ""String_Node_Str""+ PhoneLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ PhoneLookupColumns.DATA_ID+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns._ID+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NAME_LOOKUP + ""String_Node_Str""+ NameLookupColumns.NORMALIZED_NAME+ ""String_Node_Str""+ NameLookupColumns.NAME_TYPE+ ""String_Node_Str""+ NameLookupColumns.RAW_CONTACT_ID+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NICKNAME_LOOKUP + ""String_Node_Str""+ NicknameLookupColumns.NAME+ ""String_Node_Str""+ NicknameLookupColumns.CLUSTER+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.NICKNAME_LOOKUP + ""String_Node_Str""+ NicknameLookupColumns.NAME+ ""String_Node_Str""+ NicknameLookupColumns.CLUSTER+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ GroupsColumns.PACKAGE_ID+ ""String_Node_Str""+ Groups.ACCOUNT_NAME+ ""String_Node_Str""+ Groups.ACCOUNT_TYPE+ ""String_Node_Str""+ Groups.SOURCE_ID+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.DIRTY+ ""String_Node_Str""+ Groups.TITLE+ ""String_Node_Str""+ Groups.TITLE_RES+ ""String_Node_Str""+ Groups.NOTES+ ""String_Node_Str""+ Groups.SYSTEM_ID+ ""String_Node_Str""+ Groups.GROUP_VISIBLE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.GROUPS + ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ ""String_Node_Str""+ Tables.GROUPS+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.VERSION+ ""String_Node_Str""+ Groups.DIRTY+ ""String_Node_Str""+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ Groups._ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str""+ AggregationExceptionColumns._ID+ ""String_Node_Str""+ AggregationExceptions.TYPE+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID1+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID2+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID1+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID2+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.AGGREGATION_EXCEPTIONS + ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID2+ ""String_Node_Str""+ AggregationExceptionColumns.RAW_CONTACT_ID1+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + Tables.ACTIVITIES + ""String_Node_Str""+ Activities._ID+ ""String_Node_Str""+ ActivitiesColumns.PACKAGE_ID+ ""String_Node_Str""+ ActivitiesColumns.MIMETYPE_ID+ ""String_Node_Str""+ Activities.RAW_ID+ ""String_Node_Str""+ Activities.IN_REPLY_TO+ ""String_Node_Str""+ Activities.AUTHOR_CONTACT_ID+ ""String_Node_Str""+ Activities.TARGET_CONTACT_ID+ ""String_Node_Str""+ Activities.PUBLISHED+ ""String_Node_Str""+ Activities.THREAD_PUBLISHED+ ""String_Node_Str""+ Activities.TITLE+ ""String_Node_Str""+ Activities.SUMMARY+ ""String_Node_Str""+ Activities.LINK+ ""String_Node_Str""+ Activities.THUMBNAIL+ ""String_Node_Str""+ ""String_Node_Str"");
  loadNicknameLookupTable(db);
  if (mDelegate != null) {
    mDelegate.createDatabase(db);
  }
}",0.9995584014131156
152560,"private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long aggregateId=values.getAsInteger(AggregationExceptions.AGGREGATE_ID);
  long contactId=values.getAsInteger(AggregationExceptions.CONTACT_ID);
  ArrayList<ContactPair> pairs=new ArrayList<ContactPair>();
  Cursor c=db.query(Tables.CONTACTS,CONTACT_PROJECTION,Contacts.AGGREGATE_ID + ""String_Node_Str"" + aggregateId,null,null,null,null);
  try {
    while (c.moveToNext()) {
      long aggregatedContactId=c.getLong(CONTACT_COLUMN_CONTACT_ID);
      if (aggregatedContactId != contactId) {
        pairs.add(new ContactPair(aggregatedContactId,contactId));
      }
    }
  }
  finally {
    c.close();
  }
  ContentValues exceptionValues=new ContentValues(3);
  exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
  for (  ContactPair pair : pairs) {
    final String whereClause=AggregationExceptionColumns.CONTACT_ID1 + ""String_Node_Str"" + pair.contactId1+ ""String_Node_Str""+ AggregationExceptionColumns.CONTACT_ID2+ ""String_Node_Str""+ pair.contactId2;
    if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
      db.delete(Tables.AGGREGATION_EXCEPTIONS,whereClause,null);
    }
 else {
      exceptionValues.put(AggregationExceptionColumns.CONTACT_ID1,pair.contactId1);
      exceptionValues.put(AggregationExceptionColumns.CONTACT_ID2,pair.contactId2);
      db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
    }
  }
  mContactAggregator.markContactForAggregation(contactId);
  mContactAggregator.aggregateContact(contactId);
  return 1;
}","private int updateAggregationException(SQLiteDatabase db,ContentValues values){
  int exceptionType=values.getAsInteger(AggregationExceptions.TYPE);
  long aggregateId=values.getAsInteger(AggregationExceptions.AGGREGATE_ID);
  long contactId=values.getAsInteger(AggregationExceptions.CONTACT_ID);
  ArrayList<ContactPair> pairs=new ArrayList<ContactPair>();
  Cursor c=db.query(Tables.CONTACTS,CONTACT_PROJECTION,Contacts.AGGREGATE_ID + ""String_Node_Str"" + aggregateId,null,null,null,null);
  try {
    while (c.moveToNext()) {
      long aggregatedContactId=c.getLong(CONTACT_COLUMN_CONTACT_ID);
      if (aggregatedContactId != contactId) {
        pairs.add(new ContactPair(aggregatedContactId,contactId));
      }
    }
  }
  finally {
    c.close();
  }
  ContentValues exceptionValues=new ContentValues(3);
  exceptionValues.put(AggregationExceptions.TYPE,exceptionType);
  for (  ContactPair pair : pairs) {
    final String whereClause=AggregationExceptionColumns.CONTACT_ID1 + ""String_Node_Str"" + pair.contactId1+ ""String_Node_Str""+ AggregationExceptionColumns.CONTACT_ID2+ ""String_Node_Str""+ pair.contactId2;
    if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC) {
      db.delete(Tables.AGGREGATION_EXCEPTIONS,whereClause,null);
    }
 else {
      exceptionValues.put(AggregationExceptionColumns.CONTACT_ID1,pair.contactId1);
      exceptionValues.put(AggregationExceptionColumns.CONTACT_ID2,pair.contactId2);
      db.replace(Tables.AGGREGATION_EXCEPTIONS,AggregationExceptions._ID,exceptionValues);
    }
  }
  mContactAggregator.markContactForAggregation(contactId);
  mContactAggregator.aggregateContact(contactId);
  if (exceptionType == AggregationExceptions.TYPE_AUTOMATIC || exceptionType == AggregationExceptions.TYPE_KEEP_OUT) {
    mContactAggregator.updateAggregateData(aggregateId);
  }
  return 1;
}",0.948394495412844
152561,"@Override public String getType(Uri url){
  int match=sURIMatcher.match(url);
switch (match) {
case EXTENSIONS:
case PEOPLE_EXTENSIONS:
    return Extensions.CONTENT_TYPE;
case EXTENSIONS_ID:
case PEOPLE_EXTENSIONS_ID:
  return Extensions.CONTENT_ITEM_TYPE;
case PEOPLE:
return ""String_Node_Str"";
case PEOPLE_ID:
return ""String_Node_Str"";
case PEOPLE_PHONES:
return ""String_Node_Str"";
case PEOPLE_PHONES_ID:
return ""String_Node_Str"";
case PEOPLE_CONTACTMETHODS:
return ""String_Node_Str"";
case PEOPLE_CONTACTMETHODS_ID:
return getContactMethodType(url);
case PHONES:
return ""String_Node_Str"";
case PHONES_ID:
return ""String_Node_Str"";
case PHONES_FILTER:
case PHONES_FILTER_NAME:
case PHONES_MOBILE_FILTER_NAME:
return ""String_Node_Str"";
case PHOTOS_ID:
return ""String_Node_Str"";
case PHOTOS:
return ""String_Node_Str"";
case PEOPLE_PHOTO:
return ""String_Node_Str"";
case CONTACTMETHODS:
return ""String_Node_Str"";
case CONTACTMETHODS_ID:
return getContactMethodType(url);
case CONTACTMETHODS_EMAIL:
case CONTACTMETHODS_EMAIL_FILTER:
return ""String_Node_Str"";
case CALLS:
return ""String_Node_Str"";
case CALLS_ID:
return ""String_Node_Str"";
case ORGANIZATIONS:
return ""String_Node_Str"";
case ORGANIZATIONS_ID:
return ""String_Node_Str"";
case CALLS_FILTER:
return ""String_Node_Str"";
case SEARCH_SUGGESTIONS:
return SearchManager.SUGGEST_MIME_TYPE;
case SEARCH_SHORTCUT:
return SearchManager.SHORTCUT_MIME_TYPE;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public String getType(Uri url){
  int match=sURIMatcher.match(url);
switch (match) {
case EXTENSIONS:
case PEOPLE_EXTENSIONS:
    return Extensions.CONTENT_TYPE;
case EXTENSIONS_ID:
case PEOPLE_EXTENSIONS_ID:
  return Extensions.CONTENT_ITEM_TYPE;
case PEOPLE:
return ""String_Node_Str"";
case PEOPLE_ID:
return ""String_Node_Str"";
case PEOPLE_PHONES:
return ""String_Node_Str"";
case PEOPLE_PHONES_ID:
return ""String_Node_Str"";
case PEOPLE_CONTACTMETHODS:
return ""String_Node_Str"";
case PEOPLE_CONTACTMETHODS_ID:
return getContactMethodType(url);
case PHONES:
return ""String_Node_Str"";
case PHONES_ID:
return ""String_Node_Str"";
case PHONES_FILTER:
case PHONES_FILTER_NAME:
case PHONES_MOBILE_FILTER_NAME:
return ""String_Node_Str"";
case PHOTOS_ID:
return ""String_Node_Str"";
case PHOTOS:
return ""String_Node_Str"";
case PEOPLE_PHOTO:
return ""String_Node_Str"";
case PEOPLE_PHOTO_DATA:
return ""String_Node_Str"";
case CONTACTMETHODS:
return ""String_Node_Str"";
case CONTACTMETHODS_ID:
return getContactMethodType(url);
case CONTACTMETHODS_EMAIL:
case CONTACTMETHODS_EMAIL_FILTER:
return ""String_Node_Str"";
case CALLS:
return ""String_Node_Str"";
case CALLS_ID:
return ""String_Node_Str"";
case ORGANIZATIONS:
return ""String_Node_Str"";
case ORGANIZATIONS_ID:
return ""String_Node_Str"";
case CALLS_FILTER:
return ""String_Node_Str"";
case SEARCH_SUGGESTIONS:
return SearchManager.SUGGEST_MIME_TYPE;
case SEARCH_SHORTCUT:
return SearchManager.SHORTCUT_MIME_TYPE;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}",0.9832775919732442
152562,"public ContactsProvider(){
  super(DATABASE_NAME,DATABASE_VERSION,Contacts.CONTENT_URI);
}","public ContactsProvider(){
  super(DATABASE_NAME,DATABASE_VERSION,Contacts.CONTENT_URI);
  mSearchSuggestionLanguage=Locale.getDefault().getLanguage();
  mSearchSuggestionsProjectionMap=new HashMap<String,String>();
  updateSuggestColumnTexts();
  mSearchSuggestionsProjectionMap.put(SearchManager.SUGGEST_COLUMN_ICON_1,""String_Node_Str"" + Photos.DATA + ""String_Node_Str""+ ""String_Node_Str""+ People.CONTENT_URI+ ""String_Node_Str""+ ""String_Node_Str""+ Photos.CONTENT_DIRECTORY+ ""String_Node_Str""+ ""String_Node_Str""+ com.android.internal.R.drawable.ic_contact_picture+ ""String_Node_Str""+ SearchManager.SUGGEST_COLUMN_ICON_1);
  mSearchSuggestionsProjectionMap.put(SearchManager.SUGGEST_COLUMN_ICON_2,PRESENCE_ICON_SQL + ""String_Node_Str"" + SearchManager.SUGGEST_COLUMN_ICON_2);
  mSearchSuggestionsProjectionMap.put(SearchManager.SUGGEST_COLUMN_INTENT_DATA_ID,""String_Node_Str"" + SearchManager.SUGGEST_COLUMN_INTENT_DATA_ID);
  mSearchSuggestionsProjectionMap.put(SearchManager.SUGGEST_COLUMN_SHORTCUT_ID,""String_Node_Str"" + SearchManager.SUGGEST_COLUMN_SHORTCUT_ID);
  mSearchSuggestionsProjectionMap.put(People._ID,""String_Node_Str"" + People._ID);
}",0.1453957996768982
152563,"@Override public void onOpen(SQLiteDatabase db){
  mMimetypeQuery=db.compileStatement(""String_Node_Str"" + MimetypeColumns._ID + ""String_Node_Str""+ Tables.MIMETYPE+ ""String_Node_Str""+ MimetypeColumns.MIMETYPE+ ""String_Node_Str"");
  mPackageQuery=db.compileStatement(""String_Node_Str"" + PackageColumns._ID + ""String_Node_Str""+ Tables.PACKAGE+ ""String_Node_Str""+ PackageColumns.PACKAGE+ ""String_Node_Str"");
  mMimetypeInsert=db.compileStatement(""String_Node_Str"" + Tables.MIMETYPE + ""String_Node_Str""+ MimetypeColumns.MIMETYPE+ ""String_Node_Str"");
  mPackageInsert=db.compileStatement(""String_Node_Str"" + Tables.PACKAGE + ""String_Node_Str""+ PackageColumns.PACKAGE+ ""String_Node_Str"");
  mDataMimetypeQuery=db.compileStatement(""String_Node_Str"" + MimetypeColumns.MIMETYPE + ""String_Node_Str""+ Tables.DATA_JOIN_MIMETYPE+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
  mActivitiesMimetypeQuery=db.compileStatement(""String_Node_Str"" + MimetypeColumns.MIMETYPE + ""String_Node_Str""+ Tables.ACTIVITIES_JOIN_MIMETYPE+ ""String_Node_Str""+ Tables.ACTIVITIES+ ""String_Node_Str""+ Activities._ID+ ""String_Node_Str"");
  final String tableName=DATABASE_PRESENCE + ""String_Node_Str"" + Tables.PRESENCE;
  final String indexName=DATABASE_PRESENCE + ""String_Node_Str"";
  db.execSQL(""String_Node_Str"" + DATABASE_PRESENCE + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + tableName + ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ Presence.AGGREGATE_ID+ ""String_Node_Str""+ Presence.DATA_ID+ ""String_Node_Str""+ Presence.IM_PROTOCOL+ ""String_Node_Str""+ Presence.IM_HANDLE+ ""String_Node_Str""+ Presence.IM_ACCOUNT+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Presence.IM_PROTOCOL+ ""String_Node_Str""+ Presence.IM_HANDLE+ ""String_Node_Str""+ Presence.IM_ACCOUNT+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + indexName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ Presence.AGGREGATE_ID+ ""String_Node_Str"");
}","@Override public void onOpen(SQLiteDatabase db){
  mMimetypeQuery=db.compileStatement(""String_Node_Str"" + MimetypeColumns._ID + ""String_Node_Str""+ Tables.MIMETYPE+ ""String_Node_Str""+ MimetypeColumns.MIMETYPE+ ""String_Node_Str"");
  mPackageQuery=db.compileStatement(""String_Node_Str"" + PackageColumns._ID + ""String_Node_Str""+ Tables.PACKAGE+ ""String_Node_Str""+ PackageColumns.PACKAGE+ ""String_Node_Str"");
  mMimetypeInsert=db.compileStatement(""String_Node_Str"" + Tables.MIMETYPE + ""String_Node_Str""+ MimetypeColumns.MIMETYPE+ ""String_Node_Str"");
  mPackageInsert=db.compileStatement(""String_Node_Str"" + Tables.PACKAGE + ""String_Node_Str""+ PackageColumns.PACKAGE+ ""String_Node_Str"");
  mDataMimetypeQuery=db.compileStatement(""String_Node_Str"" + MimetypeColumns.MIMETYPE + ""String_Node_Str""+ Tables.DATA_JOIN_MIMETYPE+ ""String_Node_Str""+ Tables.DATA+ ""String_Node_Str""+ Data._ID+ ""String_Node_Str"");
  mActivitiesMimetypeQuery=db.compileStatement(""String_Node_Str"" + MimetypeColumns.MIMETYPE + ""String_Node_Str""+ Tables.ACTIVITIES_JOIN_MIMETYPE+ ""String_Node_Str""+ Tables.ACTIVITIES+ ""String_Node_Str""+ Activities._ID+ ""String_Node_Str"");
  final String tableName=DATABASE_PRESENCE + ""String_Node_Str"" + Tables.PRESENCE;
  final String indexName=DATABASE_PRESENCE + ""String_Node_Str"";
  db.execSQL(""String_Node_Str"" + DATABASE_PRESENCE + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + tableName + ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ Presence.AGGREGATE_ID+ ""String_Node_Str""+ Presence.DATA_ID+ ""String_Node_Str""+ Presence.IM_PROTOCOL+ ""String_Node_Str""+ Presence.IM_HANDLE+ ""String_Node_Str""+ Presence.IM_ACCOUNT+ ""String_Node_Str""+ Presence.PRESENCE_STATUS+ ""String_Node_Str""+ Presence.PRESENCE_CUSTOM_STATUS+ ""String_Node_Str""+ ""String_Node_Str""+ Presence.IM_PROTOCOL+ ""String_Node_Str""+ Presence.IM_HANDLE+ ""String_Node_Str""+ Presence.IM_ACCOUNT+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + indexName + ""String_Node_Str""+ Tables.PRESENCE+ ""String_Node_Str""+ Presence.AGGREGATE_ID+ ""String_Node_Str"");
}",0.9941491955143832
152564,"/** 
 * Prepare the walk action <p> This can be used to load required data for the walk action, e.g. all tags.
 */
public void prepare() throws GitRepositoryException {
}","/** 
 * Prepare the walk action <p> This can be used to load required data for the walk action, e.g. all tags.
 * @throws GitRepositoryException if an error occurs during the preparation
 */
public void prepare() throws GitRepositoryException {
}",0.7019230769230769
152565,"/** 
 * Runs the given action for all commits reachable from the current  {@code HEAD} commit
 * @param action The action to execute for each commit found
 * @throws GitRepositoryException if an error occurs during walking throughthe commits
 */
<T extends CommitWalkAction>T walkCommits(T action) throws GitRepositoryException ;","/** 
 * Runs the given action for all commits reachable from the current  {@code HEAD} commit
 * @param action The action to execute for each commit found
 * @param < T > The action’s type
 * @return The action itself
 * @throws GitRepositoryException if an error occurs during walking throughthe commits
 */
<T extends CommitWalkAction>T walkCommits(T action) throws GitRepositoryException ;",0.912621359223301
152566,"/** 
 * Load tag meta data
 */
void load(GitRepository repository) throws GitRepositoryException ;","/** 
 * Load tag meta data
 * @param repository The repository to load information from
 * @throws GitRepositoryException if tags cannot be loaded
 */
void load(GitRepository repository) throws GitRepositoryException ;",0.4113924050632911
152567,"/** 
 * Initializes a JGit Repository object for further reference
 * @see GitRepository
 * @throws GitRepositoryException if retrieving information from the Gitrepository fails
 */
protected GitRepository initRepository() throws GitRepositoryException {
  GitRepository repository=new JGitRepository(baseDir,gitDir);
  repository.check();
  repository.setHeadRef(head);
  return repository;
}","/** 
 * Initializes a JGit Repository object for further reference
 * @return The repository instance
 * @throws GitRepositoryException if retrieving information from the Gitrepository fails
 */
protected GitRepository initRepository() throws GitRepositoryException {
  GitRepository repository=new JGitRepository(baseDir,gitDir);
  repository.check();
  repository.setHeadRef(head);
  return repository;
}",0.9411764705882352
152568,"/** 
 * The actual implementation of the mojo <p> This is called internally by   {@link #init}.
 * @throws MavanagaiataMojoException if there is an error during execution
 */
protected abstract void run(GitRepository repository) throws MavanagaiataMojoException ;","/** 
 * The actual implementation of the mojo
 * @param repository The repository instance to use
 * @throws MavanagaiataMojoException if there is an error during execution
 */
protected abstract void run(GitRepository repository) throws MavanagaiataMojoException ;",0.8181818181818182
152569,"/** 
 * Creates a new print stream for the configured outputfile and encoding
 * @return A new print stream
 */
PrintStream createPrintStream() throws FileNotFoundException, UnsupportedEncodingException {
  return new PrintStream(getOutputFile(),encoding);
}","/** 
 * Creates a new print stream for the configured output file and encoding
 * @return A new print stream
 * @throws FileNotFoundException if the output file could not be found
 * @throws UnsupportedEncodingException if the encoding is not supported
 */
PrintStream createPrintStream() throws FileNotFoundException, UnsupportedEncodingException {
  return new PrintStream(getOutputFile(),encoding);
}",0.7806354009077155
152570,"/** 
 * Writes the (optional) footer and flushes the   {@code PrintStream} aftercalling the main mojo implementation
 * @see #writeOutput
 * @throws MavanagaiataMojoException if the output cannot be generated
 */
protected void generateOutput(GitRepository repository,PrintStream printStream) throws MavanagaiataMojoException {
  writeOutput(repository,printStream);
  if (footer.length() > 0) {
    SimpleDateFormat baseDateFormat=new SimpleDateFormat(dateFormat);
    printStream.println(String.format(footer,VersionHelper.getVersion(),baseDateFormat.format(new Date())));
  }
  printStream.flush();
}","/** 
 * Writes the (optional) footer and flushes the   {@code PrintStream} aftercalling the main mojo implementation
 * @param repository The repository the mojo is running in
 * @param printStream The stream the output should be printed to
 * @see #writeOutput
 * @throws MavanagaiataMojoException if the output cannot be generated
 */
protected void generateOutput(GitRepository repository,PrintStream printStream) throws MavanagaiataMojoException {
  writeOutput(repository,printStream);
  if (footer.length() > 0) {
    SimpleDateFormat baseDateFormat=new SimpleDateFormat(dateFormat);
    printStream.println(String.format(footer,VersionHelper.getVersion(),baseDateFormat.format(new Date())));
  }
  printStream.flush();
}",0.9067669172932332
152571,"/** 
 * Generates a link to the GitHub compare / commits view and inserts it into the changelog <p> If no current ref is provided, the generated text will link to the commits view, listing all commits of the latest tag or the whole branch. Otherwise the text will link to the compare view, listing all commits that are in the current ref, but not in the last one.
 * @param lastRef The last tag or branch in the changelog
 * @param currentRef The current tag or branch in the changelog
 * @param isBranch Whether the link is points to a branch
 */
protected void insertGitHubLink(PrintStream printStream,String lastRef,String currentRef,boolean isBranch){
  String url=String.format(""String_Node_Str"",this.gitHubUser,this.gitHubProject);
  if (currentRef == null) {
    url+=String.format(""String_Node_Str"",lastRef);
  }
 else {
    url+=String.format(""String_Node_Str"",lastRef,currentRef);
  }
  String linkText;
  if (isBranch) {
    if (currentRef == null) {
      linkText=String.format(this.gitHubBranchOnlyLinkFormat,lastRef,url);
    }
 else {
      linkText=String.format(this.gitHubBranchLinkFormat,currentRef,lastRef,url);
    }
  }
 else {
    String tagName=(currentRef == null) ? lastRef : currentRef;
    linkText=String.format(this.gitHubTagLinkFormat,tagName,url);
  }
  printStream.println(linkText);
}","/** 
 * Generates a link to the GitHub compare / commits view and inserts it into the changelog <p> If no current ref is provided, the generated text will link to the commits view, listing all commits of the latest tag or the whole branch. Otherwise the text will link to the compare view, listing all commits that are in the current ref, but not in the last one.
 * @param printStream The stream the output should be printed to
 * @param lastRef The last tag or branch in the changelog
 * @param currentRef The current tag or branch in the changelog
 * @param isBranch Whether the link is points to a branch
 */
protected void insertGitHubLink(PrintStream printStream,String lastRef,String currentRef,boolean isBranch){
  String url=String.format(""String_Node_Str"",this.gitHubUser,this.gitHubProject);
  if (currentRef == null) {
    url+=String.format(""String_Node_Str"",lastRef);
  }
 else {
    url+=String.format(""String_Node_Str"",lastRef,currentRef);
  }
  String linkText;
  if (isBranch) {
    if (currentRef == null) {
      linkText=String.format(this.gitHubBranchOnlyLinkFormat,lastRef,url);
    }
 else {
      linkText=String.format(this.gitHubBranchLinkFormat,currentRef,lastRef,url);
    }
  }
 else {
    String tagName=(currentRef == null) ? lastRef : currentRef;
    linkText=String.format(this.gitHubTagLinkFormat,tagName,url);
  }
  printStream.println(linkText);
}",0.975952645209027
152572,"/** 
 * Creates a new exception for the given check failure type
 * @param type The type of failure
 */
CheckMojoException(Type type,String... args){
  super(getMessageForType(type,args),null);
  this.type=type;
}","/** 
 * Creates a new exception for the given check failure type
 * @param type The type of failure
 * @param args The arguments to integrate into the error message
 */
CheckMojoException(Type type,String... args){
  super(getMessageForType(type,args),null);
  this.type=type;
}",0.8676171079429735
152573,"@Test public void testErrors(){
  this.mojo.gitDir=null;
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(FileNotFoundException.class,e.getClass());
    assertEquals(""String_Node_Str"",e.getMessage());
  }
  this.mojo.gitDir=new File(System.getenv().get(""String_Node_Str"")).getAbsoluteFile();
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(FileNotFoundException.class,e.getClass());
    assertEquals(this.mojo.gitDir + ""String_Node_Str"",e.getMessage());
  }
  this.mojo.gitDir=new File(""String_Node_Str"");
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(FileNotFoundException.class,e.getClass());
    assertEquals(this.mojo.gitDir + ""String_Node_Str"",e.getMessage());
  }
  this.mojo.gitDir=new File(""String_Node_Str"");
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(IOException.class,e.getClass());
    assertEquals(""String_Node_Str"",e.getMessage());
  }
}","@Test public void testErrors(){
  this.mojo.gitDir=null;
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(FileNotFoundException.class,e.getClass());
    assertEquals(""String_Node_Str"",e.getMessage());
  }
  String home=System.getenv().get(""String_Node_Str"");
  if (home == null) {
    home=System.getenv().get(""String_Node_Str"") + System.getenv(""String_Node_Str"");
  }
  this.mojo.gitDir=new File(home).getAbsoluteFile();
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(FileNotFoundException.class,e.getClass());
    assertEquals(this.mojo.gitDir + ""String_Node_Str"",e.getMessage());
  }
  this.mojo.gitDir=new File(""String_Node_Str"");
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(FileNotFoundException.class,e.getClass());
    assertEquals(this.mojo.gitDir + ""String_Node_Str"",e.getMessage());
  }
  this.mojo.gitDir=new File(""String_Node_Str"");
  try {
    this.mojo.initRepository();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(IOException.class,e.getClass());
    assertEquals(""String_Node_Str"",e.getMessage());
  }
}",0.9134453781512604
152574,"/** 
 * Walks through the history of the currently checked out branch of the Git repository and builds a changelog from the commits contained in that branch.
 * @throws MojoExecutionException if retrieving information from the Gitrepository fails
 */
public void execute() throws MojoExecutionException {
  this.commitPrefix=this.commitPrefix.replaceAll(""String_Node_Str"",""String_Node_Str"");
  this.header=this.header.replaceAll(""String_Node_Str"",""String_Node_Str"");
  this.tagPrefix=this.tagPrefix.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    this.initRepository();
    RevWalk revWalk=new RevWalk(this.repository);
    Map<String,Ref> tagRefs=this.repository.getTags();
    Map<String,RevTag> tags=new HashMap<String,RevTag>();
    for (    Map.Entry<String,Ref> tag : tagRefs.entrySet()) {
      try {
        RevTag revTag=revWalk.parseTag(tag.getValue().getObjectId());
        RevObject object=revWalk.peel(revTag);
        if (!(object instanceof RevCommit)) {
          continue;
        }
        tags.put(object.getName(),revTag);
      }
 catch (      IncorrectObjectTypeException e) {
        continue;
      }
    }
    revWalk.markStart(this.getHead());
    PrintStream outputStream;
    if (this.outputFile == null) {
      outputStream=System.out;
    }
 else {
      outputStream=new PrintStream(this.outputFile);
    }
    outputStream.println(this.header);
    SimpleDateFormat dateFormat=new SimpleDateFormat(this.dateFormat);
    RevCommit commit;
    while ((commit=revWalk.next()) != null) {
      if (tags.containsKey(commit.getName())) {
        RevTag tag=tags.get(commit.getName());
        PersonIdent taggerIdent=tag.getTaggerIdent();
        Calendar calendar=Calendar.getInstance(taggerIdent.getTimeZone());
        calendar.setTimeInMillis(taggerIdent.getWhen().getTime() + taggerIdent.getTimeZone().getRawOffset());
        String dateString=dateFormat.format(calendar.getTime());
        outputStream.println(this.tagPrefix + tag.getTagName() + ""String_Node_Str""+ dateString+ ""String_Node_Str"");
        if (this.skipTagged) {
          continue;
        }
      }
      outputStream.println(this.commitPrefix + commit.getShortMessage());
    }
    outputStream.flush();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}","/** 
 * Walks through the history of the currently checked out branch of the Git repository and builds a changelog from the commits contained in that branch.
 * @throws MojoExecutionException if retrieving information from the Gitrepository fails
 */
public void execute() throws MojoExecutionException {
  this.commitPrefix=this.commitPrefix.replaceAll(""String_Node_Str"",""String_Node_Str"");
  this.header=this.header.replaceAll(""String_Node_Str"",""String_Node_Str"");
  this.tagPrefix=this.tagPrefix.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    this.initRepository();
    RevWalk revWalk=new RevWalk(this.repository);
    Map<String,Ref> tagRefs=this.repository.getTags();
    Map<String,RevTag> tags=new HashMap<String,RevTag>();
    for (    Map.Entry<String,Ref> tag : tagRefs.entrySet()) {
      try {
        RevTag revTag=revWalk.parseTag(tag.getValue().getObjectId());
        RevObject object=revWalk.peel(revTag);
        if (!(object instanceof RevCommit)) {
          continue;
        }
        tags.put(object.getName(),revTag);
      }
 catch (      IncorrectObjectTypeException e) {
        continue;
      }
    }
    revWalk.markStart(this.getHead());
    PrintStream outputStream;
    if (this.outputFile == null) {
      outputStream=System.out;
    }
 else {
      outputStream=new PrintStream(this.outputFile);
    }
    outputStream.println(this.header);
    SimpleDateFormat dateFormat=new SimpleDateFormat(this.dateFormat);
    RevCommit commit;
    while ((commit=revWalk.next()) != null) {
      if (tags.containsKey(commit.getName())) {
        RevTag tag=tags.get(commit.getName());
        PersonIdent taggerIdent=tag.getTaggerIdent();
        dateFormat.setTimeZone(taggerIdent.getTimeZone());
        String dateString=dateFormat.format(taggerIdent.getWhen());
        outputStream.println(this.tagPrefix + tag.getTagName() + ""String_Node_Str""+ dateString+ ""String_Node_Str"");
        if (this.skipTagged) {
          continue;
        }
      }
      outputStream.println(this.commitPrefix + commit.getShortMessage());
    }
    outputStream.flush();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}",0.9283654912397428
152575,"public int compare(BufferedImage image1,BufferedImage image2){
  int area1=image1.getWidth() * image1.getHeight();
  int area2=image2.getWidth() * image2.getHeight();
  return area2 - area1;
}","public int compare(ImageName image1,ImageName image2){
  int area1=image1.image.getWidth() * image1.image.getHeight();
  int area2=image2.image.getWidth() * image2.image.getHeight();
  if (area1 != area2) {
    return area2 - area1;
  }
 else {
    return image1.name.compareTo(image2.name);
  }
}",0.0899795501022494
152576,"public void Run(String name,int width,int height,File file){
  if (!file.exists() || !file.isDirectory()) {
    System.out.println(""String_Node_Str"" + file.getPath() + ""String_Node_Str"");
    return;
  }
  List<File> imageFiles=new ArrayList<File>();
  GetImageFiles(file,imageFiles);
  Map<BufferedImage,String> imageMap=new TreeMap<BufferedImage,String>(new BufferedImageComparator());
  for (  File f : imageFiles) {
    try {
      BufferedImage image=ImageIO.read(f);
      if (image.getWidth() > width || image.getHeight() > height) {
        System.out.println(""String_Node_Str"" + f.getPath() + ""String_Node_Str""+ image.getWidth()+ ""String_Node_Str""+ image.getHeight()+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
        return;
      }
      String path=f.getPath().substring(0,f.getPath().lastIndexOf(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
      imageMap.put(image,path);
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + f.getAbsoluteFile() + ""String_Node_Str"");
    }
  }
  List<Texture> textures=new ArrayList<Texture>();
  textures.add(new Texture(width,height));
  for (  Map.Entry<BufferedImage,String> e : imageMap.entrySet()) {
    boolean added=false;
    for (    Texture texture : textures) {
      if (texture.AddImage(e.getKey(),e.getValue())) {
        added=true;
        break;
      }
    }
    if (!added) {
      Texture texture=new Texture(width,height);
      texture.AddImage(e.getKey(),e.getValue());
      textures.add(texture);
    }
  }
  int count=0;
  for (  Texture texture : textures) {
    texture.Write(name + (++count));
  }
}","public void Run(String name,int width,int height,File file){
  if (!file.exists() || !file.isDirectory()) {
    System.out.println(""String_Node_Str"" + file.getPath() + ""String_Node_Str"");
    return;
  }
  List<File> imageFiles=new ArrayList<File>();
  GetImageFiles(file,imageFiles);
  System.out.println(""String_Node_Str"" + imageFiles.size() + ""String_Node_Str"");
  Set<ImageName> imageNameSet=new TreeSet<ImageName>(new ImageNameComparator());
  for (  File f : imageFiles) {
    try {
      BufferedImage image=ImageIO.read(f);
      if (image.getWidth() > width || image.getHeight() > height) {
        System.out.println(""String_Node_Str"" + f.getPath() + ""String_Node_Str""+ image.getWidth()+ ""String_Node_Str""+ image.getHeight()+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
        return;
      }
      String path=f.getPath().substring(0,f.getPath().lastIndexOf(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
      imageNameSet.add(new ImageName(image,path));
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + f.getAbsoluteFile() + ""String_Node_Str"");
    }
  }
  List<Texture> textures=new ArrayList<Texture>();
  textures.add(new Texture(width,height));
  int count=0;
  for (  ImageName imageName : imageNameSet) {
    boolean added=false;
    System.out.println(""String_Node_Str"" + imageName.name + ""String_Node_Str""+ (++count)+ ""String_Node_Str"");
    for (    Texture texture : textures) {
      if (texture.AddImage(imageName.image,imageName.name)) {
        added=true;
        break;
      }
    }
    if (!added) {
      Texture texture=new Texture(width,height);
      texture.AddImage(imageName.image,imageName.name);
      textures.add(texture);
    }
  }
  count=0;
  for (  Texture texture : textures) {
    System.out.println(""String_Node_Str"" + name + (++count));
    texture.Write(name + count);
  }
}",0.6758426966292135
152577,"/** 
 * Instantiates a new psd descriptor.
 * @param stream the stream
 * @throws IOException Signals that an I/O exception has occurred.
 */
public PsdDescriptor(PsdInputStream stream) throws IOException {
  int nameLen=stream.readInt() * 2;
  stream.skipBytes(nameLen);
  classId=stream.readPsdString();
  int itemsCount=stream.readInt();
  logger.finest(""String_Node_Str"" + itemsCount);
  for (int i=0; i < itemsCount; i++) {
    String key=stream.readPsdString();
    logger.finest(""String_Node_Str"" + key);
    objects.put(key,PsdObjectBase.loadPsdObject(stream));
  }
}","/** 
 * Instantiates a new psd descriptor.
 * @param stream the stream
 * @throws IOException Signals that an I/O exception has occurred.
 */
public PsdDescriptor(PsdInputStream stream) throws IOException {
  int nameLen=stream.readInt() * 2;
  stream.skipBytes(nameLen);
  classId=stream.readPsdString();
  int itemsCount=stream.readInt();
  logger.finest(""String_Node_Str"" + itemsCount);
  for (int i=0; i < itemsCount; i++) {
    String key=stream.readPsdString().trim();
    logger.finest(""String_Node_Str"" + key);
    objects.put(key,PsdObjectBase.loadPsdObject(stream));
  }
}",0.9939498703543648
152578,"/** 
 * Read value.
 * @param stream the stream
 * @param level the level
 * @return the object
 * @throws IOException Signals that an I/O exception has occurred.
 */
private Object readValue(PsdInputStream stream,int level) throws IOException {
}","private Object readValue(PsdInputStream stream) throws IOException {
}",0.4416403785488959
152579,"/** 
 * Read map.
 * @param stream the stream
 * @param level the level
 * @return the map
 * @throws IOException Signals that an I/O exception has occurred.
 */
private Map<String,Object> readMap(PsdInputStream stream,int level) throws IOException {
}","private Map<String,Object> readMap(PsdInputStream stream) throws IOException {
}",0.4819277108433735
152580,"/** 
 * Skip string.
 * @param stream the stream
 * @param string the string
 * @throws IOException Signals that an I/O exception has occurred.
 */
private void skipString(PsdInputStream stream,String string) throws IOException {
}","private void skipString(PsdInputStream stream,String string) throws IOException {
}",0.5286624203821656
152581,"/** 
 * Instantiates a new psd text data.
 * @param stream the stream
 * @throws IOException Signals that an I/O exception has occurred.
 */
public PsdTextData(PsdInputStream stream) throws IOException {
}","/** 
 * Instantiates a new psd text data.
 * @param stream the stream
 * @throws IOException Signals that an I/O exception has occurred.
 */
public PsdTextData(PsdInputStream stream) throws IOException {
  int size=stream.readInt();
  int startPos=stream.getPos();
  if (true) {
    byte[] array=new byte[size];
    stream.read(array,0,size);
    ByteArrayInputStream byteStream=new ByteArrayInputStream(array);
    stream=new PsdInputStream(byteStream);
    for (int i=0; i < size; i++) {
      int b=array[i];
      if (b == 13 || b == 10) {
        System.out.println();
      }
 else       if (b == ' ') {
        System.out.print(""String_Node_Str"");
      }
 else       if (b == 9) {
        System.out.print('\t');
      }
 else       if (b < 32) {
        System.out.print(b);
      }
 else {
        System.out.print((char)b);
      }
    }
    System.out.println();
  }
  properties=readMap(stream);
}",0.3677130044843049
152582,"private static void battleSim(){
  RandomForPokemon gen=new RandomForPokemon();
  Trainer trainer1=new Trainer();
  trainer1.setLeadingPokemon(PokemonFactory.getPokemonAtLevel(mSpeciesArray[512],20));
  Trainer trainer2=new Trainer();
  trainer2.setLeadingPokemon(gen.randomPokemon(20));
  Battle battle=new Battle(trainer1,trainer2);
  battle.battleThread();
  retryQuestion();
}","private static void battleSim(){
  RandomForPokemon gen=new RandomForPokemon();
  Trainer trainer1=new Trainer();
  trainer1.setLeadingPokemon(gen.randomPokemon(20));
  Trainer trainer2=new Trainer();
  trainer2.setLeadingPokemon(gen.randomPokemon(20));
  Battle battle=new Battle(trainer1,trainer2);
  battle.battleThread();
  retryQuestion();
}",0.9035812672176308
152583,"public void dealDamage(boolean bool){
  if (!bool) {
    System.out.println(mAttackerPokemon.getNickName() + ""String_Node_Str"");
    if (mMove.getMoveId() == 46) {
      int attackerHp=mAttackerPokemon.getCurrentHP();
      int d=GameFields.damageCalc(mAttacker,mTarget,mMove,mBattle);
      int total=attackerHp - d;
      if (total > 0) {
        mAttackerPokemon.setCurrentHP(total);
      }
 else {
        mAttackerPokemon.setCurrentHP(0);
        mAttackerPokemon.setStatus(NonVolatileStatusAilment.FAINTED);
      }
    }
  }
 else {
    int targetHp=mTargetPokemon.getCurrentHP();
    int attackerHp=mAttackerPokemon.getCurrentHP();
    mDamageDealt=GameFields.damageCalc(mAttacker,mTarget,mMove,mBattle);
    if (mDamageDealt == 0) {
      return;
    }
    targetHp=targetHp - mDamageDealt;
    System.out.println(mTargetPokemon.getNickName() + ""String_Node_Str"" + mDamageDealt+ ""String_Node_Str"");
    if (targetHp > 0) {
      mTargetPokemon.setCurrentHP(targetHp);
      angerPointCheck();
    }
 else {
      mTargetPokemon.setCurrentHP(0);
      mTargetPokemon.setStatus(NonVolatileStatusAilment.FAINTED);
      System.out.println(mTargetPokemon.getNickName() + ""String_Node_Str"");
    }
    int recoil=mMove.getRecoilPercentage();
    if (recoil < 0) {
      int recoilDamage=(mDamageDealt * recoil) / 100;
      attackerHp=attackerHp + recoilDamage;
      mAttackerPokemon.setCurrentHP(attackerHp);
      System.out.println(mAttackerPokemon.getNickName() + ""String_Node_Str"" + recoilDamage+ ""String_Node_Str"");
    }
    applyAttackerStatusAilments();
  }
}","/** 
 */
private void dealDamage(boolean bool){
  if (!bool) {
    System.out.println(mAttackerPokemon.getNickName() + ""String_Node_Str"");
    if (mMove.getMoveId() == 46) {
      int attackerHp=mAttackerPokemon.getCurrentHP();
      int d=GameFields.damageCalc(mAttacker,mTarget,mMove,mBattle);
      int total=attackerHp - d;
      if (total > 0) {
        mAttackerPokemon.setCurrentHP(total);
      }
 else {
        mAttackerPokemon.setCurrentHP(0);
        mAttackerPokemon.setStatus(NonVolatileStatusAilment.FAINTED);
      }
    }
  }
 else {
    int targetHp=mTargetPokemon.getCurrentHP();
    int attackerHp=mAttackerPokemon.getCurrentHP();
    mDamageDealt=GameFields.damageCalc(mAttacker,mTarget,mMove,mBattle);
    if (mDamageDealt == 0) {
      return;
    }
    targetHp=targetHp - mDamageDealt;
    System.out.println(mTargetPokemon.getNickName() + ""String_Node_Str"" + mDamageDealt+ ""String_Node_Str"");
    if (targetHp > 0) {
      mTargetPokemon.setCurrentHP(targetHp);
      angerPointCheck();
    }
 else {
      mTargetPokemon.setCurrentHP(0);
      mTargetPokemon.setStatus(NonVolatileStatusAilment.FAINTED);
      System.out.println(mTargetPokemon.getNickName() + ""String_Node_Str"");
    }
    int recoil=mMove.getRecoilPercentage();
    if (recoil < 0) {
      int recoilDamage=(mDamageDealt * recoil) / 100;
      attackerHp=attackerHp + recoilDamage;
      mAttackerPokemon.setCurrentHP(attackerHp);
      System.out.println(mAttackerPokemon.getNickName() + ""String_Node_Str"" + (recoilDamage * -1)+ ""String_Node_Str"");
    }
    applyAttackerStatusAilments();
  }
}",0.9908372827804108
152584,"public MoveExecutionThread(BattlePlayer attacker,BattlePlayer target,Move move,Battle battle){
  this.mAttacker=attacker;
  this.mTarget=target;
  this.mMove=move;
  this.mBattle=battle;
  this.mAttackerPokemon=mAttacker.getPokemon();
  this.mTargetPokemon=mTarget.getPokemon();
}","/** 
 */
public MoveExecutionThread(BattlePlayer attacker,BattlePlayer target,Move move,Battle battle){
  this.mAttacker=attacker;
  this.mTarget=target;
  this.mMove=move;
  this.mBattle=battle;
  this.mAttackerPokemon=mAttacker.getPokemon();
  this.mTargetPokemon=mTarget.getPokemon();
}",0.984182776801406
152585,"public BattlePlayer getAttacker(){
  return mAttacker;
}","/** 
 */
public BattlePlayer getAttacker(){
  return mAttacker;
}",0.9256198347107438
152586,"public void standardMove(){
  dealDamage(accuracyCheck());
}","/** 
 */
public void standardMove(){
  dealDamage(accuracyCheck());
}",0.9302325581395348
152587,"public Ability getBattleAbility(){
  if (mAlteredAbility != Ability.NONE) {
    return mAlteredAbility;
  }
 else {
    return mAbility;
  }
}","public Ability getBattleAbility(){
  if (mAbilityIsActive) {
    if (mAlteredAbility != Ability.NONE) {
      return mAlteredAbility;
    }
 else {
      return mAbility;
    }
  }
 else {
    return Ability.NONE;
  }
}",0.7700831024930748
152588,"public AbilityClass(Pokemon pokemon){
  mAbility=pokemon.getAbility();
}","public AbilityClass(Pokemon pokemon){
  mAbility=pokemon.getTrueAbility();
}",0.972972972972973
152589,"protected double getSpeedAbilityMod(BattlePlayer player){
  double sm=1;
  Pokemon pokemon=player.getPokemon();
  if (player.isGastroAcid()) {
    return sm;
  }
switch (pokemon.getAbility()) {
case CHLOROPHYLL:
    if (mWeather == Weather.SUNNY_DAY) {
      sm=2;
    }
  break;
case QUICK_FEET:
if (pokemon.getStatus() != NonVolatileStatusAilment.NONE) {
  sm=1.5;
}
break;
case SAND_RUSH:
if (mWeather == Weather.SANDSTORM) {
sm=2;
}
break;
case SLOW_START:
if (pokemon.getTurnsInBattle() <= 5) {
sm=0.5;
}
break;
case SWIFT_SWIM:
if (mWeather == Weather.RAIN_DANCE) {
sm=2;
}
break;
case UNBURDEN:
break;
}
return sm;
}","protected double getSpeedAbilityMod(BattlePlayer player){
  double sm=1;
  Pokemon pokemon=player.getPokemon();
  if (player.isGastroAcid()) {
    return sm;
  }
switch (pokemon.getBattleAbility()) {
case CHLOROPHYLL:
    if (mWeather == Weather.SUNNY_DAY) {
      sm=2;
    }
  break;
case QUICK_FEET:
if (pokemon.getStatus() != NonVolatileStatusAilment.NONE) {
  sm=1.5;
}
break;
case SAND_RUSH:
if (mWeather == Weather.SANDSTORM) {
sm=2;
}
break;
case SLOW_START:
if (pokemon.getTurnsInBattle() <= 5) {
sm=0.5;
}
break;
case SWIFT_SWIM:
if (mWeather == Weather.RAIN_DANCE) {
sm=2;
}
break;
case UNBURDEN:
break;
}
return sm;
}",0.9952076677316294
152590,"protected double getPayalyzeMod(Pokemon pokemon){
  if (pokemon.getStatus() == NonVolatileStatusAilment.PARALYZE && pokemon.getAbility() != Ability.QUICK_FEET) {
    return 0.25;
  }
 else {
    return 1;
  }
}","protected double getPayalyzeMod(Pokemon pokemon){
  if (pokemon.getStatus() == NonVolatileStatusAilment.PARALYZE && pokemon.getBattleAbility() != Ability.QUICK_FEET) {
    return 0.25;
  }
 else {
    return 1;
  }
}",0.9859154929577464
152591,"public BattlePlayer(Trainer trainer){
  this.mTrainer=trainer;
  mPokemon=mTrainer.getLeadingPokemon();
}","public BattlePlayer(Trainer trainer){
  this.mTrainer=trainer;
  mPokemon=mTrainer.getLeadingPokemon();
  mPokemon.initBattleAbility();
}",0.8677685950413223
152592,"private void MoveTargetId(int i){
  this.id=i;
}","private void MoveTargetId(int i){
  this.fId=i;
}",0.9690721649484536
152593,"private static int calcAttackOrSpAttack(BattlePlayer playerAttacker,BattlePlayer playerDefender,Move move,Battle stats){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  int attack=1;
  int stat=1;
  long sm=1;
  long am=1;
  long im=1;
  if (move.getKind() == MoveKinds.PHYSICAL) {
    stat=attacker.getStat(Stats.ATTACK);
    if (attacker.getStatStageChange(ModdableBattleStats.ATTACK) > 0) {
      sm=(attacker.getStatStageChange(ModdableBattleStats.ATTACK) + 2) / 2;
    }
 else     if (attacker.getStatStageChange(ModdableBattleStats.ATTACK) < 0) {
      sm=2 / (attacker.getStatStageChange(ModdableBattleStats.ATTACK) + 2);
    }
    if (defender.getAbility() == Ability.UNAWARE && attacker.getStatStageChange(ModdableBattleStats.ATTACK) > 0) {
      sm=1;
    }
switch (attacker.getAbility()) {
case PURE_POWER:
case HUGE_POWER:
      am=2;
    break;
case FLOWER_GIFT:
  if (stats.getWeather() == Weather.SUNNY_DAY) {
    am=(long)1.5;
  }
break;
case GUTS:
if (attacker.isAffectedByStatusAilment()) {
am=(long)1.5;
}
break;
case HUSTLE:
am=(long)1.5;
break;
case SLOW_START:
if (attacker.getTurnsInBattle() < 5) {
am=(long)0.5;
}
break;
}
switch (attacker.getHeldItem()) {
case Items.CHOICE_BAND:
im=(long)1.5;
break;
case Items.LIGHT_BALL:
if (attacker.getSpecies().getDexNumber() == 25) {
im=2;
}
break;
case Items.THICK_CLUB:
if (attacker.getSpecies().getDexNumber() == 104 || attacker.getSpecies().getDexNumber() == 105) {
im=2;
}
break;
}
}
 else if (move.getKind() == MoveKinds.SPECIAL) {
stat=attacker.getStat(Stats.SPECIAL_ATTACK);
if (attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) > 0) {
sm=(attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) + 2) / 2;
}
 else if (attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) < 0) {
sm=2 / (attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) + 2);
}
if (defender.getAbility() == Ability.UNAWARE && attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) > 0) {
sm=1;
}
switch (attacker.getAbility()) {
case SOLAR_POWER:
if (stats.getWeather() == Weather.SUNNY_DAY) {
am=(long)1.5;
}
}
switch (attacker.getHeldItem()) {
case Items.CHOICE_SPECS:
im=(long)1.5;
break;
case Items.LIGHT_BALL:
if (attacker.getSpecies().getDexNumber() == 25) {
im=2;
}
break;
case Items.SOUL_DEW:
if (attacker.getSpecies().getDexNumber() == 380 || attacker.getSpecies().getDexNumber() == 381) {
im=(long)1.5;
}
break;
case Items.DEEPSEATOOTH:
if (attacker.getSpecies().getDexNumber() == 366) {
im=2;
}
break;
}
}
attack=(int)(stat * sm * am* im);
return attack;
}","private static int calcAttackOrSpAttack(BattlePlayer playerAttacker,BattlePlayer playerDefender,Move move,Battle stats){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  int attack=1;
  int stat=1;
  long sm=1;
  long am=1;
  long im=1;
  if (move.getKind() == MoveKinds.PHYSICAL) {
    stat=attacker.getStat(Stats.ATTACK);
    if (attacker.getStatStageChange(ModdableBattleStats.ATTACK) > 0) {
      sm=(attacker.getStatStageChange(ModdableBattleStats.ATTACK) + 2) / 2;
    }
 else     if (attacker.getStatStageChange(ModdableBattleStats.ATTACK) < 0) {
      sm=2 / (attacker.getStatStageChange(ModdableBattleStats.ATTACK) + 2);
    }
    if (defender.getBattleAbility() == Ability.UNAWARE && attacker.getStatStageChange(ModdableBattleStats.ATTACK) > 0) {
      sm=1;
    }
switch (attacker.getBattleAbility()) {
case PURE_POWER:
case HUGE_POWER:
      am=2;
    break;
case FLOWER_GIFT:
  if (stats.getWeather() == Weather.SUNNY_DAY) {
    am=(long)1.5;
  }
break;
case GUTS:
if (attacker.isAffectedByStatusAilment()) {
am=(long)1.5;
}
break;
case HUSTLE:
am=(long)1.5;
break;
case SLOW_START:
if (attacker.getTurnsInBattle() < 5) {
am=(long)0.5;
}
break;
}
switch (attacker.getHeldItem()) {
case Items.CHOICE_BAND:
im=(long)1.5;
break;
case Items.LIGHT_BALL:
if (attacker.getSpecies().getDexNumber() == 25) {
im=2;
}
break;
case Items.THICK_CLUB:
if (attacker.getSpecies().getDexNumber() == 104 || attacker.getSpecies().getDexNumber() == 105) {
im=2;
}
break;
}
}
 else if (move.getKind() == MoveKinds.SPECIAL) {
stat=attacker.getStat(Stats.SPECIAL_ATTACK);
if (attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) > 0) {
sm=(attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) + 2) / 2;
}
 else if (attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) < 0) {
sm=2 / (attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) + 2);
}
if (defender.hasAbility(Ability.UNAWARE) && attacker.getStatStageChange(ModdableBattleStats.SPECIAL_ATTACK) > 0) {
sm=1;
}
switch (attacker.getBattleAbility()) {
case SOLAR_POWER:
if (stats.getWeather() == Weather.SUNNY_DAY) {
am=(long)1.5;
}
}
switch (attacker.getHeldItem()) {
case Items.CHOICE_SPECS:
im=(long)1.5;
break;
case Items.LIGHT_BALL:
if (attacker.getSpecies().getDexNumber() == 25) {
im=2;
}
break;
case Items.SOUL_DEW:
if (attacker.getSpecies().getDexNumber() == 380 || attacker.getSpecies().getDexNumber() == 381) {
im=(long)1.5;
}
break;
case Items.DEEPSEATOOTH:
if (attacker.getSpecies().getDexNumber() == 366) {
im=2;
}
break;
}
}
attack=(int)(stat * sm * am* im);
return attack;
}",0.9942726231386024
152594,"private static int calcDefenseOrSpecialDefense(BattlePlayer playerDefender,BattlePlayer playerAttacker,Move move,Battle stats){
  Pokemon defender=playerDefender.getPokemon();
  Pokemon attacker=playerAttacker.getPokemon();
  int defense=1;
  int stat=1;
  double sm=1;
  double mod=1;
switch (move.getKind()) {
case PHYSICAL:
    stat=defender.getStat(Stats.DEFENSE);
  if (defender.getStatStageChange(ModdableBattleStats.DEFENSE) > 0) {
    sm=(defender.getStatStageChange(ModdableBattleStats.DEFENSE) + 2) / 2;
  }
 else   if (defender.getStatStageChange(ModdableBattleStats.DEFENSE) < 0) {
    sm=2 / (defender.getStatStageChange(ModdableBattleStats.DEFENSE) + 2);
  }
if (attacker.getAbility() == Ability.UNAWARE && defender.getStatStageChange(ModdableBattleStats.DEFENSE) > 0) {
  sm=1;
}
if (defender.getAbility() == Ability.FLOWER_GIFT && stats.getWeather() == Weather.SUNNY_DAY) {
mod=1.5;
}
switch (defender.getHeldItem()) {
case Items.METAL_POWDER:
if (defender.getSpecies().getDexNumber() == 132) {
mod=(mod * 1.5);
}
break;
case Items.MARVEL_SCALE:
if (defender.isAffectedByStatusAilment()) {
mod=(mod * 1.5);
}
break;
}
break;
case SPECIAL:
stat=defender.getStat(Stats.SPECIAL_DEFENSE);
if (defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) > 0) {
sm=(defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) + 2) / 2;
}
 else if (defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) < 0) {
sm=2 / (defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) + 2);
}
if (attacker.getAbility() == Ability.UNAWARE && defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) > 0) {
sm=1;
}
if (defender.getAbility() == Ability.FLOWER_GIFT && stats.getWeather() == Weather.SUNNY_DAY) {
mod=1.5;
}
switch (defender.getHeldItem()) {
case Items.METAL_POWDER:
if (defender.getSpecies().getDexNumber() == 132) {
mod=(mod * 1.5);
}
break;
case Items.SOUL_DEW:
if (defender.getSpecies().getDexNumber() == 380 || defender.getSpecies().getDexNumber() == 381) {
mod=(mod * 1.5);
}
break;
case Items.DEEPSEASCALE:
if (defender.getSpecies().getDexNumber() == 366) {
mod=(mod * 1.5);
}
break;
}
if (stats.getWeather() == Weather.SANDSTORM && (defender.getType(1) == Types.ROCK || defender.getType(2) == Types.ROCK)) {
mod=(mod * 1.5);
}
}
defense=(int)(stat * sm * mod);
return defense;
}","private static int calcDefenseOrSpecialDefense(BattlePlayer playerDefender,BattlePlayer playerAttacker,Move move,Battle stats){
  Pokemon defender=playerDefender.getPokemon();
  Pokemon attacker=playerAttacker.getPokemon();
  int defense=1;
  int stat=1;
  double sm=1;
  double mod=1;
switch (move.getKind()) {
case PHYSICAL:
    stat=defender.getStat(Stats.DEFENSE);
  if (defender.getStatStageChange(ModdableBattleStats.DEFENSE) > 0) {
    sm=(defender.getStatStageChange(ModdableBattleStats.DEFENSE) + 2) / 2;
  }
 else   if (defender.getStatStageChange(ModdableBattleStats.DEFENSE) < 0) {
    sm=2 / (defender.getStatStageChange(ModdableBattleStats.DEFENSE) + 2);
  }
if (attacker.hasAbility(Ability.UNAWARE) && defender.getStatStageChange(ModdableBattleStats.DEFENSE) > 0) {
  sm=1;
}
if (defender.hasAbility(Ability.FLOWER_GIFT) && stats.getWeather() == Weather.SUNNY_DAY) {
mod=1.5;
}
switch (defender.getHeldItem()) {
case Items.METAL_POWDER:
if (defender.getSpecies().getDexNumber() == 132) {
mod=(mod * 1.5);
}
break;
case Items.MARVEL_SCALE:
if (defender.isAffectedByStatusAilment()) {
mod=(mod * 1.5);
}
break;
}
break;
case SPECIAL:
stat=defender.getStat(Stats.SPECIAL_DEFENSE);
if (defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) > 0) {
sm=(defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) + 2) / 2;
}
 else if (defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) < 0) {
sm=2 / (defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) + 2);
}
if (attacker.hasAbility(Ability.UNAWARE) && defender.getStatStageChange(ModdableBattleStats.SPECIAL_DEFENSE) > 0) {
sm=1;
}
if (defender.hasAbility(Ability.FLOWER_GIFT) && stats.getWeather() == Weather.SUNNY_DAY) {
mod=1.5;
}
switch (defender.getHeldItem()) {
case Items.METAL_POWDER:
if (defender.getSpecies().getDexNumber() == 132) {
mod=(mod * 1.5);
}
break;
case Items.SOUL_DEW:
if (defender.getSpecies().getDexNumber() == 380 || defender.getSpecies().getDexNumber() == 381) {
mod=(mod * 1.5);
}
break;
case Items.DEEPSEASCALE:
if (defender.getSpecies().getDexNumber() == 366) {
mod=(mod * 1.5);
}
break;
}
if (stats.getWeather() == Weather.SANDSTORM && (defender.getType(1) == Types.ROCK || defender.getType(2) == Types.ROCK)) {
mod=(mod * 1.5);
}
}
defense=(int)(stat * sm * mod);
return defense;
}",0.9896774193548388
152595,"private static int calcMod3(BattlePlayer playerAttacker,BattlePlayer playerDefender,double effectiveness){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  double mod3=1;
  double srf=1;
  double eb=1;
  double tl=1;
  double trb=1;
  if (defender.getAbility() == Ability.SOLID_ROCK || defender.getAbility() == Ability.FILTER) {
    srf=0.75;
  }
  if (attacker.getHeldItem() == Items.EXPERT_BELT && (effectiveness >= 2)) {
    eb=1.2;
  }
  if (effectiveness > 1 && attacker.getAbility() == Ability.TINTED_LENS) {
    tl=2;
  }
  if (defender.getHeldItem() <= 200 && defender.getHeldItem() >= 217) {
    trb=0.5;
  }
  mod3=srf * eb * tl* trb;
  return (int)mod3;
}","private static int calcMod3(BattlePlayer playerAttacker,BattlePlayer playerDefender,double effectiveness){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  double mod3=1;
  double srf=1;
  double eb=1;
  double tl=1;
  double trb=1;
  if (defender.hasAbility(Ability.SOLID_ROCK) || defender.hasAbility(Ability.FILTER)) {
    srf=0.75;
  }
  if (attacker.getHeldItem() == Items.EXPERT_BELT && (effectiveness >= 2)) {
    eb=1.2;
  }
  if (effectiveness > 1 && attacker.hasAbility(Ability.TINTED_LENS)) {
    tl=2;
  }
  if (defender.getHeldItem() <= 200 && defender.getHeldItem() >= 217) {
    trb=0.5;
  }
  mod3=srf * eb * tl* trb;
  return (int)mod3;
}",0.9746121297602256
152596,"private static int calcBasePower(BattlePlayer playerAttacker,BattlePlayer playerDefender,Move move,Battle stats){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  double hh=1;
  double bp=move.getBasePower();
  double it=1;
  double chg=1;
  double ms=1;
  double ws=1;
  double ua=1;
  double fa=1;
switch (attacker.getHeldItem()) {
case Items.MUSCLE_BAND:
    if (move.getKind() == MoveKinds.PHYSICAL) {
      it=1.1;
    }
  break;
case Items.WISE_GLASSES:
if (move.getKind() == MoveKinds.SPECIAL) {
  it=1.1;
}
break;
case Items.ADAMANT_ORB:
if (attacker.getSpecies().getDexNumber() == 483) {
if (move.getType() == Types.STEEL || move.getType() == Types.DRAGON) {
it=(long)1.2;
}
}
break;
case Items.LUSTROUS_ORB:
if (attacker.getSpecies().getDexNumber() == 484 && (move.getType() == Types.WATER || move.getType() == Types.DRAGON)) {
it=(long)1.2;
}
break;
case Items.GRISEOUS_ORB:
if (attacker.getSpecies().getDexNumber() == 480 && (move.getType() == Types.GHOST || move.getType() == Types.DRAGON)) {
it=(long)1.2;
}
break;
}
if (stats.getSport() == Sport.MUD_SPORT && move.getType() == Types.ELECTRIC) {
ms=(long)0.5;
}
if (stats.getSport() == Sport.WATER_SPORT && move.getType() == Types.FIRE) {
ws=(long)0.5;
}
switch (attacker.getAbility()) {
case RIVALRY:
if (attacker.getGender() == defender.getGender()) {
ua=(long)1.25;
}
 else if (attacker.getGender() != defender.getGender()) {
ua=(long)0.75;
}
 else {
ua=1;
}
break;
case RECKLESS:
if (move.isRecoil()) {
ua=(long)1.2;
}
break;
case IRON_FIST:
if (move.isPunching()) {
ua=(long)1.2;
}
break;
case BLAZE:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.FIRE) {
ua=(long)1.5;
}
break;
case TORRENT:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.WATER) {
ua=(long)1.5;
}
break;
case OVERGROW:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.GRASS) {
ua=(long)1.5;
}
break;
case SWARM:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.BUG) {
ua=(long)1.5;
}
break;
case TECHNICIAN:
if (move.getBasePower() <= 60) {
ua=(long)1.5;
}
break;
}
switch (defender.getAbility()) {
case THICK_FAT:
if (move.getType() == Types.FIRE || move.getType() == Types.ICE) {
fa=(long)0.5;
}
break;
case HEATPROOF:
if (move.getType() == Types.FIRE) {
fa=(long)0.5;
}
break;
case DRY_SKIN:
if (move.getType() == Types.FIRE) {
fa=(long)1.25;
}
break;
}
int basePower=(int)(hh * bp * it* chg* ms* ws* ua* fa);
return basePower;
}","private static int calcBasePower(BattlePlayer playerAttacker,BattlePlayer playerDefender,Move move,Battle stats){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  double hh=1;
  double bp=move.getBasePower();
  double it=1;
  double chg=1;
  double ms=1;
  double ws=1;
  double ua=1;
  double fa=1;
switch (attacker.getHeldItem()) {
case Items.MUSCLE_BAND:
    if (move.getKind() == MoveKinds.PHYSICAL) {
      it=1.1;
    }
  break;
case Items.WISE_GLASSES:
if (move.getKind() == MoveKinds.SPECIAL) {
  it=1.1;
}
break;
case Items.ADAMANT_ORB:
if (attacker.getSpecies().getDexNumber() == 483) {
if (move.getType() == Types.STEEL || move.getType() == Types.DRAGON) {
it=(long)1.2;
}
}
break;
case Items.LUSTROUS_ORB:
if (attacker.getSpecies().getDexNumber() == 484 && (move.getType() == Types.WATER || move.getType() == Types.DRAGON)) {
it=(long)1.2;
}
break;
case Items.GRISEOUS_ORB:
if (attacker.getSpecies().getDexNumber() == 480 && (move.getType() == Types.GHOST || move.getType() == Types.DRAGON)) {
it=(long)1.2;
}
break;
}
if (stats.getSport() == Sport.MUD_SPORT && move.getType() == Types.ELECTRIC) {
ms=(long)0.5;
}
if (stats.getSport() == Sport.WATER_SPORT && move.getType() == Types.FIRE) {
ws=(long)0.5;
}
switch (attacker.getBattleAbility()) {
case RIVALRY:
if (attacker.getGender() == defender.getGender()) {
ua=(long)1.25;
}
 else if (attacker.getGender() != defender.getGender()) {
ua=(long)0.75;
}
 else {
ua=1;
}
break;
case RECKLESS:
if (move.isRecoil()) {
ua=(long)1.2;
}
break;
case IRON_FIST:
if (move.isPunching()) {
ua=(long)1.2;
}
break;
case BLAZE:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.FIRE) {
ua=(long)1.5;
}
break;
case TORRENT:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.WATER) {
ua=(long)1.5;
}
break;
case OVERGROW:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.GRASS) {
ua=(long)1.5;
}
break;
case SWARM:
if (attacker.getCurrentHealthRatio() < 0.3 && move.getType() == Types.BUG) {
ua=(long)1.5;
}
break;
case TECHNICIAN:
if (move.getBasePower() <= 60) {
ua=(long)1.5;
}
break;
}
switch (defender.getBattleAbility()) {
case THICK_FAT:
if (move.getType() == Types.FIRE || move.getType() == Types.ICE) {
fa=(long)0.5;
}
break;
case HEATPROOF:
if (move.getType() == Types.FIRE) {
fa=(long)0.5;
}
break;
case DRY_SKIN:
if (move.getType() == Types.FIRE) {
fa=(long)1.25;
}
break;
}
int basePower=(int)(hh * bp * it* chg* ms* ws* ua* fa);
return basePower;
}",0.9976114649681528
152597,"private static int calcCritHit(BattlePlayer playerAttacker,BattlePlayer playerDefender){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  int critMult=1;
  if (defender.getAbility() == Ability.BATTLE_ARMOR) {
    return critMult;
  }
  Random generator=new Random();
  double ran=(double)generator.nextDouble() * 100;
  double chance=6.25;
  if (attacker.getAbility() == Ability.SUPER_LUCK) {
    chance=chance * 2;
  }
  if (defender.getAbility() == Ability.BATTLE_ARMOR || defender.getAbility() == Ability.SHELL_ARMOR) {
    ran=100;
  }
  if (ran <= chance) {
    critMult=2;
    if (attacker.getAbility() == Ability.SNIPER) {
      critMult=3;
    }
    playerDefender.setTookACrit(true);
  }
  return critMult;
}","private static int calcCritHit(BattlePlayer playerAttacker,BattlePlayer playerDefender){
  Pokemon attacker=playerAttacker.getPokemon();
  Pokemon defender=playerDefender.getPokemon();
  int critMult=1;
  if (defender.hasAbility(Ability.BATTLE_ARMOR)) {
    return critMult;
  }
  Random generator=new Random();
  double ran=(double)generator.nextDouble() * 100;
  double chance=6.25;
  if (attacker.hasAbility(Ability.SUPER_LUCK)) {
    chance=chance * 2;
  }
  if (defender.hasAbility(Ability.BATTLE_ARMOR) || defender.hasAbility(Ability.SHELL_ARMOR)) {
    ran=100;
  }
  if (ran <= chance) {
    critMult=2;
    if (attacker.hasAbility(Ability.SNIPER)) {
      critMult=3;
    }
    playerDefender.setTookACrit(true);
  }
  return critMult;
}",0.9074074074074074
152598,"private static void battleSim(){
  RandomForPokemon gen=new RandomForPokemon();
  Trainer trainer1=new Trainer();
  trainer1.setLeadingPokemon(gen.randomPokemon(10));
  Trainer trainer2=new Trainer();
  trainer2.setLeadingPokemon(gen.randomPokemon(10));
  Battle battle=new Battle(trainer1,trainer2);
  battle.battleThread();
  System.out.println(""String_Node_Str"");
  Scanner scan=new Scanner(System.in);
  String input=scan.nextLine();
  if (input.equals(""String_Node_Str"") || input.equals(""String_Node_Str"")) {
    battleSim();
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","private static void battleSim(){
  RandomForPokemon gen=new RandomForPokemon();
  Trainer trainer1=new Trainer();
  trainer1.setLeadingPokemon(gen.randomPokemon(20));
  Trainer trainer2=new Trainer();
  trainer2.setLeadingPokemon(gen.randomPokemon(20));
  Battle battle=new Battle(trainer1,trainer2);
  battle.battleThread();
  retryQuestion();
}",0.7043756670224119
152599,"private void applyAttackerStatChanges(){
}","private void applyAttackerStatChanges(){
  int[] statChanges=mMove.getMoveStatChanges();
  mAttackerPokemon.addStatChangeArray(statChanges);
}",0.4565217391304347
152600,"public static Move[] createMoveArray(){
  Move[] moveArray=new Move[560];
  moveArray[0]=new Move();
  DbAdapter adapter;
  ResultSet rs;
  try {
    adapter=new DbAdapter();
    for (int i=1; i < moveArray.length; i++) {
      Move move=new Move();
      rs=adapter.makeQuery(""String_Node_Str"" + String.valueOf(i) + ""String_Node_Str"");
      while (rs.next()) {
        move.setMoveName(rs.getString(""String_Node_Str""));
        move.setBasePower(rs.getInt(""String_Node_Str""));
        move.setAccuracy(rs.getInt(""String_Node_Str""));
        move.setMoveId(rs.getInt(""String_Node_Str""));
        move.setPP(rs.getInt(""String_Node_Str""));
        move.setPriority(rs.getInt(""String_Node_Str""));
        move.setKind(MoveKinds.getMoveKind(rs.getInt(""String_Node_Str"")));
        move.setType(Types.getType(rs.getInt(""String_Node_Str"")));
        move.setMoveMetaCategory(MoveMetaCategory.getCategory(rs.getInt(""String_Node_Str"")));
        move.setStatusAilment(MetaStatusAilment.getAilment(rs.getInt(""String_Node_Str"")));
        move.setMoveEffect(rs.getInt(""String_Node_Str""));
        move.setMaxHits(rs.getInt(""String_Node_Str""));
        move.setMinHits(rs.getInt(""String_Node_Str""));
        move.setMaxTurns(rs.getInt(""String_Node_Str""));
        move.setMinTurns(rs.getInt(""String_Node_Str""));
        move.setRecoilPercentage(rs.getInt(""String_Node_Str""));
        int[] stats=new int[7];
        stats[0]=rs.getInt(""String_Node_Str"");
        stats[1]=rs.getInt(""String_Node_Str"");
        stats[2]=rs.getInt(""String_Node_Str"");
        stats[3]=rs.getInt(""String_Node_Str"");
        stats[4]=rs.getInt(""String_Node_Str"");
        stats[5]=rs.getInt(""String_Node_Str"");
        stats[6]=rs.getInt(""String_Node_Str"");
        move.setMoveStatChangesArray(stats);
      }
      int effect=move.getMoveEffect();
      if (effect == 30 || effect == 45 || effect == 78 || effect == 105) {
        move.setMoveMetaCategory(MoveMetaCategory.MULTI_HIT);
      }
      if (move.getMoveId() == 251) {
        move.setMoveMetaCategory(MoveMetaCategory.UNIQUE_EFFECT);
      }
      moveArray[i]=move;
    }
    adapter.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  return moveArray;
}","public static Move[] createMoveArray(){
  Move[] moveArray=new Move[560];
  moveArray[0]=new Move();
  DbAdapter adapter;
  ResultSet rs;
  try {
    adapter=new DbAdapter();
    for (int i=1; i < moveArray.length; i++) {
      Move move=new Move();
      rs=adapter.makeQuery(""String_Node_Str"" + String.valueOf(i) + ""String_Node_Str"");
      while (rs.next()) {
        move.setMoveName(rs.getString(""String_Node_Str""));
        move.setBasePower(rs.getInt(""String_Node_Str""));
        move.setAccuracy(rs.getInt(""String_Node_Str""));
        move.setMoveId(rs.getInt(""String_Node_Str""));
        move.setPP(rs.getInt(""String_Node_Str""));
        move.setPriority(rs.getInt(""String_Node_Str""));
        move.setKind(MoveKinds.getMoveKind(rs.getInt(""String_Node_Str"")));
        move.setType(Types.getType(rs.getInt(""String_Node_Str"")));
        move.setMoveMetaCategory(MoveMetaCategory.getCategory(rs.getInt(""String_Node_Str"")));
        move.setStatusAilment(MetaStatusAilment.getAilment(rs.getInt(""String_Node_Str"")));
        move.setMoveEffect(rs.getInt(""String_Node_Str""));
        move.setMoveTarget(MoveTargetId.getTarget(rs.getInt(""String_Node_Str"")));
        move.setMaxHits(rs.getInt(""String_Node_Str""));
        move.setMinHits(rs.getInt(""String_Node_Str""));
        move.setMaxTurns(rs.getInt(""String_Node_Str""));
        move.setMinTurns(rs.getInt(""String_Node_Str""));
        move.setRecoilPercentage(rs.getInt(""String_Node_Str""));
        int[] stats=new int[7];
        stats[0]=rs.getInt(""String_Node_Str"");
        stats[1]=rs.getInt(""String_Node_Str"");
        stats[2]=rs.getInt(""String_Node_Str"");
        stats[3]=rs.getInt(""String_Node_Str"");
        stats[4]=rs.getInt(""String_Node_Str"");
        stats[5]=rs.getInt(""String_Node_Str"");
        stats[6]=rs.getInt(""String_Node_Str"");
        move.setMoveStatChangesArray(stats);
      }
      int effect=move.getMoveEffect();
      if (effect == 30 || effect == 45 || effect == 78 || effect == 105) {
        move.setMoveMetaCategory(MoveMetaCategory.MULTI_HIT);
      }
switch (move.getMoveId()) {
case 251:
        move.setMoveMetaCategory(MoveMetaCategory.UNIQUE_EFFECT);
      break;
case 91:
    move.setMoveMetaCategory(MoveMetaCategory.UNIQUE_EFFECT);
  break;
case 19:
move.setMoveMetaCategory(MoveMetaCategory.UNIQUE_EFFECT);
break;
case 291:
move.setMoveMetaCategory(MoveMetaCategory.UNIQUE_EFFECT);
break;
case 507:
move.setMoveMetaCategory(MoveMetaCategory.UNIQUE_EFFECT);
break;
}
moveArray[i]=move;
}
adapter.close();
}
 catch (Exception e) {
e.printStackTrace();
}
System.out.println(""String_Node_Str"");
return moveArray;
}",0.9
152601,"public void initBattleAbility(){
  if (mAbility != Ability.NONE) {
    mBattleAbility=new AbilityClass(this);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public void initBattleAbility(){
  if (mAbility != Ability.NONE) {
    mBattleAbility=new AbilityClass(this);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + mNickName + ""String_Node_Str"");
  }
}",0.9207920792079208
152602,"public boolean hasAbility(Ability ability){
  if (mAbility == ability) {
    return true;
  }
 else {
    return false;
  }
}","public boolean hasAbility(Ability ability){
  if (mBattleAbility.getBattleAbility() == ability) {
    return true;
  }
 else {
    return false;
  }
}",0.9090909090909092
152603,"public static double typeMath(Types moveType,Types defenderType1,Types defenderType2){
  if (defenderType1 == Types.NONE && defenderType2 == Types.NONE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  double retValue=0.0;
  if (defenderType2 == Types.NONE) {
    retValue=typeMatrix[moveType.getId()][defenderType1.getId()];
  }
 else   if (defenderType1 == Types.NONE) {
    retValue=typeMatrix[moveType.getId()][defenderType2.getId()];
  }
 else {
    retValue=typeMatrix[moveType.getId()][defenderType1.getId()] * typeMatrix[moveType.getId()][defenderType2.getId()];
  }
  if (retValue > 1) {
    System.out.println(""String_Node_Str"");
  }
 else   if (retValue < 1) {
    System.out.println(""String_Node_Str"");
  }
  return retValue;
}","public static double typeMath(Types moveType,Types defenderType1,Types defenderType2){
  if (defenderType1 == Types.NONE && defenderType2 == Types.NONE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  double retValue=0.0;
  if (defenderType2 == Types.NONE) {
    retValue=typeMatrix[moveType.getId() - 1][defenderType1.getId() - 1];
  }
 else   if (defenderType1 == Types.NONE) {
    retValue=typeMatrix[moveType.getId() - 1][defenderType2.getId() - 1];
  }
 else {
    retValue=typeMatrix[moveType.getId() - 1][defenderType1.getId() - 1] * typeMatrix[moveType.getId() - 1][defenderType2.getId() - 1];
  }
  if (retValue > 1) {
    System.out.println(""String_Node_Str"");
  }
 else   if (retValue < 1) {
    System.out.println(""String_Node_Str"");
  }
  return retValue;
}",0.9793014230271668
152604,"@Override private boolean round(){
  Move trainerMove=getTrainerMove(mActivePokemonTrainer);
  Move wildMove=getWildMove();
  int wildPriority=wildMove.getPriority(trainerMove);
  int trainerPriority=trainerMove.getPriority(wildMove);
  if (wildPriority > trainerPriority) {
    return executeMoves(mWildPokemon,wildMove,mActivePokemonTrainer,trainerMove);
  }
 else   if (trainerPriority > wildPriority) {
    return executeMoves(mActivePokemonTrainer,trainerMove,mWildPokemon,wildMove);
  }
 else   if (mActivePokemonTrainer == determineOrder(mActivePokemonTrainer,mWildPokemon)) {
    return executeMoves(mActivePokemonTrainer,trainerMove,mWildPokemon,wildMove);
  }
 else {
    return executeMoves(mWildPokemon,wildMove,mActivePokemonTrainer,trainerMove);
  }
}","@Override protected boolean round(){
  Move trainerMove=getTrainerMove(mActivePokemonTrainer);
  Move wildMove=getWildMove();
  int wildPriority=wildMove.getPriority(trainerMove);
  int trainerPriority=trainerMove.getPriority(wildMove);
  if (wildPriority > trainerPriority) {
    return executeMoves(mWildPokemon,wildMove,mActivePokemonTrainer,trainerMove);
  }
 else   if (trainerPriority > wildPriority) {
    return executeMoves(mActivePokemonTrainer,trainerMove,mWildPokemon,wildMove);
  }
 else   if (mActivePokemonTrainer == determineOrder(mActivePokemonTrainer,mWildPokemon)) {
    return executeMoves(mActivePokemonTrainer,trainerMove,mWildPokemon,wildMove);
  }
 else {
    return executeMoves(mWildPokemon,wildMove,mActivePokemonTrainer,trainerMove);
  }
}",0.9921671018276762
152605,"public static Stats getStat(int i){
  for (  Stats stat : Stats.values()) {
    if (i == stat.ordinal()) {
      return stat;
    }
  }
  return null;
}","public static ModdableBattleStats getStat(int i){
  for (  ModdableBattleStats stat : ModdableBattleStats.values()) {
    if (i == stat.ordinal()) {
      return stat;
    }
  }
  return ATTACK;
}",0.8505747126436781
152606,"private static void setMoveNonVolatileEffect(ResultSet rs,Move move){
  int effectId=0;
  try {
    effectId=rs.getInt(""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
switch (effectId) {
case 2:
    move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.SLEEPS);
  break;
case 3:
case 67:
case 78:
case 210:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.POISONS);
break;
case 34:
case 203:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.BADLY_POISONS);
break;
case 5:
case 126:
case 168:
case 201:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.BURNS);
break;
case 6:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.FREEZES);
break;
case 7:
case 68:
case 153:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.PARALYZES);
break;
case 37:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.TRI_ATTACK);
break;
case 11:
case 140:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,1);
break;
case 12:
case 139:
case 146:
case 157:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,1);
break;
case 14:
case 167:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,1);
break;
case 17:
move.setMoveStatChanges(ModdableBattleStats.EVASION,1);
break;
case 51:
case 119:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,2);
break;
case 52:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,2);
break;
case 53:
move.setMoveStatChanges(ModdableBattleStats.SPEED,2);
break;
case 54:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,2);
break;
case 55:
case 175:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,2);
break;
case 109:
move.setMoveStatChanges(ModdableBattleStats.EVASION,2);
break;
case 141:
int[] ancientPower={1,1,1,1,1,0,0};
move.setMoveStatChangesArray(ancientPower);
break;
case 143:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,6);
break;
case 207:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,1);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,1);
break;
case 209:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,1);
break;
case 212:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,1);
break;
case 213:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.SPEED,1);
break;
case 19:
case 69:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-1);
break;
case 20:
case 70:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,-1);
break;
case 72:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,-1);
break;
case 73:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,-1);
break;
case 21:
case 71:
move.setMoveStatChanges(ModdableBattleStats.SPEED,-1);
break;
case 24:
case 74:
move.setMoveStatChanges(ModdableBattleStats.ACCURACY,-1);
break;
case 25:
move.setMoveStatChanges(ModdableBattleStats.EVASION,-1);
break;
case 59:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-2);
break;
case 60:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,-2);
break;
case 61:
move.setMoveStatChanges(ModdableBattleStats.SPEED,-2);
break;
case 63:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,-2);
break;
case 169:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-2);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,-2);
break;
case 206:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-1);
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,-1);
break;
case 32:
case 76:
case 93:
case 147:
case 151:
case 159:
move.setVolatileEffect(MoveSecondaryVolatileEffect.FLINCHES);
break;
case 50:
case 77:
case 119:
case 200:
move.setVolatileEffect(MoveSecondaryVolatileEffect.CONFUSES);
break;
case 85:
move.setVolatileEffect(MoveSecondaryVolatileEffect.LEECH_SEEDS);
case 108:
move.setVolatileEffect(MoveSecondaryVolatileEffect.NIGHTMARES);
break;
case 110:
move.setVolatileEffect(MoveSecondaryVolatileEffect.CURSES);
break;
case 114:
move.setVolatileEffect(MoveSecondaryVolatileEffect.IDENTIFIES);
break;
case 115:
move.setVolatileEffect(MoveSecondaryVolatileEffect.PERISH_SONG);
break;
case 121:
move.setVolatileEffect(MoveSecondaryVolatileEffect.ATTRACTS);
break;
case 176:
move.setVolatileEffect(MoveSecondaryVolatileEffect.TAUNTS);
break;
case 188:
move.setVolatileEffect(MoveSecondaryVolatileEffect.YAWNS);
}
}","private static void setMoveNonVolatileEffect(ResultSet rs,Move move){
  int effectId=0;
  try {
    effectId=rs.getInt(""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
switch (effectId) {
case 2:
    move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.SLEEPS);
  break;
case 3:
case 67:
case 78:
case 210:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.POISONS);
break;
case 34:
case 203:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.BADLY_POISONS);
break;
case 5:
case 126:
case 168:
case 201:
case 254:
case 274:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.BURNS);
break;
case 6:
case 261:
case 275:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.FREEZES);
break;
case 7:
case 68:
case 153:
case 263:
case 276:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.PARALYZES);
break;
case 37:
move.setNonVolatileEffect(MoveSecondaryNonVolatileEffect.TRI_ATTACK);
break;
case 11:
case 140:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,1);
break;
case 12:
case 139:
case 146:
case 157:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,1);
break;
case 14:
case 167:
case 277:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,1);
break;
case 175:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,1);
case 17:
move.setMoveStatChanges(ModdableBattleStats.EVASION,1);
break;
case 51:
case 119:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,2);
break;
case 52:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,2);
break;
case 53:
case 285:
move.setMoveStatChanges(ModdableBattleStats.SPEED,2);
break;
case 54:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,2);
break;
case 55:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,2);
break;
case 109:
move.setMoveStatChanges(ModdableBattleStats.EVASION,2);
break;
case 141:
int[] ancientPower={1,1,1,1,1,0,0};
move.setMoveStatChangesArray(ancientPower);
break;
case 143:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,6);
break;
case 207:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,1);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,1);
break;
case 209:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,1);
break;
case 212:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,1);
break;
case 213:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.SPEED,1);
break;
case 227:
Random generator=new Random();
int i=generator.nextInt(7);
ModdableBattleStats stat=ModdableBattleStats.getStat(i);
move.setMoveStatChanges(stat,2);
break;
case 278:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.ACCURACY,1);
break;
case 291:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,1);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,1);
move.setMoveStatChanges(ModdableBattleStats.SPEED,1);
break;
case 296:
move.setMoveStatChanges(ModdableBattleStats.SPEED,1);
case 19:
case 69:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-1);
break;
case 20:
case 70:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,-1);
break;
case 72:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,-1);
break;
case 73:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,-1);
break;
case 21:
case 71:
case 219:
move.setMoveStatChanges(ModdableBattleStats.SPEED,-1);
break;
case 24:
case 74:
move.setMoveStatChanges(ModdableBattleStats.ACCURACY,-1);
break;
case 25:
move.setMoveStatChanges(ModdableBattleStats.EVASION,-1);
break;
case 59:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-2);
break;
case 60:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,-2);
break;
case 61:
move.setMoveStatChanges(ModdableBattleStats.SPEED,-2);
break;
case 63:
case 272:
case 297:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,-2);
break;
case 169:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-2);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,-2);
break;
case 206:
move.setMoveStatChanges(ModdableBattleStats.ATTACK,-1);
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,-1);
break;
case 217:
move.setMoveStatChanges(ModdableBattleStats.EVASION,-6);
break;
case 230:
move.setMoveStatChanges(ModdableBattleStats.DEFENSE,-1);
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_DEFENSE,-1);
break;
case 259:
move.setMoveStatChanges(ModdableBattleStats.EVASION,-1);
break;
case 266:
move.setMoveStatChanges(ModdableBattleStats.SPECIAL_ATTACK,-2);
break;
case 32:
case 76:
case 93:
case 147:
case 151:
case 159:
case 274:
case 275:
case 276:
move.setVolatileEffect(MoveSecondaryVolatileEffect.FLINCHES);
break;
case 50:
case 77:
case 119:
case 200:
move.setVolatileEffect(MoveSecondaryVolatileEffect.CONFUSES);
break;
case 85:
move.setVolatileEffect(MoveSecondaryVolatileEffect.LEECH_SEEDS);
case 108:
move.setVolatileEffect(MoveSecondaryVolatileEffect.NIGHTMARES);
break;
case 110:
move.setVolatileEffect(MoveSecondaryVolatileEffect.CURSES);
break;
case 114:
move.setVolatileEffect(MoveSecondaryVolatileEffect.IDENTIFIES);
break;
case 115:
move.setVolatileEffect(MoveSecondaryVolatileEffect.PERISH_SONG);
break;
case 121:
move.setVolatileEffect(MoveSecondaryVolatileEffect.ATTRACTS);
break;
case 176:
move.setVolatileEffect(MoveSecondaryVolatileEffect.TAUNTS);
break;
case 188:
move.setVolatileEffect(MoveSecondaryVolatileEffect.YAWNS);
break;
case 262:
move.setVolatileEffect(MoveSecondaryVolatileEffect.PARTIALLY_TRAPS);
break;
case 286:
move.setVolatileEffect(MoveSecondaryVolatileEffect.TELEKINESIS);
break;
case 288:
move.setVolatileEffect(MoveSecondaryVolatileEffect.KNOCKED_DOWN);
}
}",0.8622047244094488
152607,"public Pokemon(PokemonSpecies species){
  this.mNickName=species.getSpeciesName();
  this.mSpecies=species;
  this.mGender=Gender.GENDERLESS;
  mTypes[0]=species.getType(1);
  mTypes[1]=species.getType(2);
  Random generator=new Random();
  for (int i=0; i < mIVs.length; i++) {
    mIVs[i]=generator.nextInt(32);
  }
  for (int i=0; i < mEVs.length; i++) {
    mEVs[i]=0;
  }
  for (int i=0; i < mMoves.length; i++) {
    mMoves[i]=Main.mMoveArray[0];
  }
  this.mTurnsInBattle=0;
}","public Pokemon(PokemonSpecies species){
  this.mNickName=species.getSpeciesName();
  this.mSpecies=species;
  this.mGender=Gender.GENDERLESS;
  mTypes[0]=species.getType(1);
  mTypes[1]=species.getType(2);
  Random generator=new Random();
  int natureInt=generator.nextInt(25) + 1;
  mNature=Nature.getNature(natureInt);
  for (int i=0; i < mIVs.length; i++) {
    mIVs[i]=generator.nextInt(32);
  }
  for (int i=0; i < mEVs.length; i++) {
    mEVs[i]=0;
  }
  for (int i=0; i < mMoves.length; i++) {
    mMoves[i]=Main.mMoveArray[0];
  }
  this.mTurnsInBattle=0;
}",0.9217557251908396
152608,"private void Types(int id){
  this.id=id;
}","private void Types(int id,String name){
  this.id=id;
  this.name=name;
}",0.7413793103448276
152609,"public static double typeMath(Types moveType,Types defenderType1,Types defenderType2){
  return typeMatrix[moveType.id][defenderType1.id] * typeMatrix[moveType.id][defenderType2.id];
}","public static double typeMath(Types moveType,Types defenderType1,Types defenderType2){
  if (defenderType1 == Types.NONE && defenderType2 == Types.NONE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  double retValue=0.0;
  if (defenderType2 == Types.NONE) {
    retValue=typeMatrix[moveType.id][defenderType1.id];
  }
 else   if (defenderType1 == Types.NONE) {
    retValue=typeMatrix[moveType.id][defenderType2.id];
  }
 else {
    retValue=typeMatrix[moveType.id][defenderType1.id] * typeMatrix[moveType.id][defenderType2.id];
  }
  return retValue;
}",0.4676354029062087
152610,"public static void main(String[] args){
  mSpeciesArray=PokemonSpeciesFactory.createSpeciesArray();
  mMoveArray=MoveFactory.createMoveArray();
  Random generator=new Random();
  int val=generator.nextInt(559) + 1;
  PokemonSpecies species=Main.mSpeciesArray[6];
  Pokemon wildPokemon=PokemonFactory.getPokemon(species);
  wildPokemon.setLevel(50);
  Move move=mMoveArray[53];
  move.setType(Types.FIRE);
  System.out.println(""String_Node_Str"" + wildPokemon.getNickName() + ""String_Node_Str"");
  System.out.println(move.getMoveName() + ""String_Node_Str"" + move.getBasePower()+ ""String_Node_Str""+ move.getAccuracy());
  System.out.println(move.getMoveName() + ""String_Node_Str"" + move.getType()+ ""String_Node_Str"");
  PokemonSpecies mewtwo=mSpeciesArray[150];
  Pokemon otherPoke=PokemonFactory.getPokemon(mewtwo);
  otherPoke.setLevel(50);
  Trainer trainer=new Trainer();
  trainer.setPokemon1(wildPokemon);
  wildPokemon.setType1(Types.FIRE);
  wildPokemon.setType2(Types.FLYING);
  otherPoke.setType1(Types.PSYCHIC);
  WildBattle wildBattle=new WildBattle(trainer);
  wildBattle.executeMoves(wildPokemon,move,otherPoke,mMoveArray[1]);
}","public static void main(String[] args){
  mSpeciesArray=PokemonSpeciesFactory.createSpeciesArray();
  mMoveArray=MoveFactory.createMoveArray();
  Random generator=new Random();
  int val=generator.nextInt(559) + 1;
  PokemonSpecies species=Main.mSpeciesArray[6];
  Pokemon wildPokemon=PokemonFactory.getPokemon(species);
  wildPokemon.setLevel(50);
  Move move=mMoveArray[53];
  move.setType(Types.FIRE);
  System.out.println(""String_Node_Str"" + wildPokemon.getNickName() + ""String_Node_Str"");
  System.out.println(move.getMoveName() + ""String_Node_Str"" + move.getBasePower()+ ""String_Node_Str""+ move.getAccuracy());
  System.out.println(move.getMoveName() + ""String_Node_Str"" + move.getType()+ ""String_Node_Str"");
  PokemonSpecies mewtwo=mSpeciesArray[150];
  Pokemon otherPoke=PokemonFactory.getPokemon(mewtwo);
  otherPoke.setLevel(50);
  Trainer trainer=new Trainer();
  trainer.setPokemon1(wildPokemon);
  wildPokemon.setType1(Types.FIRE);
  wildPokemon.setType2(Types.FLYING);
  otherPoke.setType1(Types.PSYCHIC);
  WildBattle wildBattle=new WildBattle(trainer);
  System.out.println(""String_Node_Str"" + otherPoke.getHPStat() + ""String_Node_Str""+ otherPoke.getCurrentHP());
  wildBattle.executeMoves(wildPokemon,move,otherPoke,mMoveArray[1]);
}",0.9535370447886145
152611,"public void setLevel(int level){
  this.mLevel=level;
}","public void setLevel(int level){
  this.mLevel=level;
  PokemonFactory.respecStats(this,mSpecies);
}",0.7096774193548387
152612,"public void setAbility(Abilities ability){
  this.mAbility=ability;
}","public void setAbility(Abilities ability){
  this.mAbility=ability;
  PokemonFactory.respecStats(this,mSpecies);
}",0.7540983606557377
152613,"public void setSpecies(PokemonSpecies mSpecies){
  this.mSpecies=mSpecies;
}","public void setSpecies(PokemonSpecies species){
  this.mSpecies=species;
  PokemonFactory.respecStats(this,mSpecies);
}",0.7589743589743589
152614,"public static Pokemon getPokemon(PokemonSpecies species){
  Pokemon pokemon=new Pokemon(species);
  pokemon.setLevel(8);
  pokemon.setGender(Gender.MALE);
  pokemon.setAbility(Abilities.OVERGROW);
  pokemon.setSlot1(Main.mMoveArray[1]);
  pokemon.setHPStat(setHPStat(pokemon,species));
  for (  Stats stat : Stats.values()) {
    pokemon.setStats(setStat(pokemon,species,stat),stat);
  }
  pokemon.setCurrentHP(pokemon.getHPStat());
  return pokemon;
}","public static Pokemon getPokemon(PokemonSpecies species){
  Pokemon pokemon=new Pokemon(species);
  pokemon.setLevel(1);
  pokemon.setGender(Gender.MALE);
  pokemon.setAbility(Abilities.OVERGROW);
  pokemon.setSlot1(Main.mMoveArray[1]);
  pokemon.setHPStat(setHPStat(pokemon,species));
  for (  Stats stat : Stats.values()) {
    pokemon.setStats(setStat(pokemon,species,stat),stat);
  }
  pokemon.setCurrentHP(pokemon.getHPStat());
  return pokemon;
}",0.9977876106194692
152615,"private static int setHPStat(Pokemon pokemon,PokemonSpecies species){
  int maxHP=1;
  maxHP=(((pokemon.getHPIV() + (2 * species.getSpecificStat(0)) + pokemon.getHPEVs() / 4 + 100) * pokemon.getLevel()) / 100) + 10;
  return maxHP;
}","private static int setHPStat(Pokemon pokemon,PokemonSpecies species){
  int maxHP=1;
  maxHP=(((pokemon.getHPIV() + (2 * species.getSpecificStat(0)) + (pokemon.getHPEVs() / 4)+ 100) * pokemon.getLevel()) / 100) + 10;
  return maxHP;
}",0.9935760171306208
152616,"public static double typeMath(Types moveType,Types defenderType1,Types defenderType2){
  if (defenderType1 == Types.NONE && defenderType2 == Types.NONE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  double retValue=0.0;
  if (defenderType2 == Types.NONE) {
    retValue=typeMatrix[moveType.id][defenderType1];
  }
 else   if (defenderType1 == Types.NONE) {
    retValue=typeMatrix[moveType.id][defenderType2];
  }
 else {
    retValue=typeMatrix[moveType.id][defenderType1] * typeMatrix[moveType][defenderType2];
  }
  return retValue;
}","public static double typeMath(Types moveType,Types defenderType1,Types defenderType2){
  if (defenderType1 == Types.NONE && defenderType2 == Types.NONE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  double retValue=0.0;
  if (defenderType2 == Types.NONE) {
    retValue=typeMatrix[moveType.id][defenderType1.id];
  }
 else   if (defenderType1 == Types.NONE) {
    retValue=typeMatrix[moveType.id][defenderType2.id];
  }
 else {
    retValue=typeMatrix[moveType.id][defenderType1.id] * typeMatrix[moveType.id][defenderType2.id];
  }
  return retValue;
}",0.986737400530504
152617,"Species(){
  mName=""String_Node_Str"";
  mDexNum=999;
  mType1=-1;
  mType2=-1;
  mBaseStats[0]=10;
  for (int i=0; i < 20; i++) {
    levelMoves[i][0]=0;
    levelMoves[i][1]=0;
  }
  for (int i=0; i < 110; i++) {
    tmMoves[i]=0;
  }
  for (int i=0; i < 30; i++) {
    eggMoves[i]=0;
  }
  for (int i=0; i < 30; i++) {
    tutorMoves[i]=0;
  }
  catchRate=0;
  eggSteps=0;
  growthRate=0;
  eggType=0;
  genderRatio=-1;
  weight=0.00;
  backSprite=""String_Node_Str"";
  frontSprite=""String_Node_Str"";
  backSpriteSh=""String_Node_Str"";
  frontSpriteSh=""String_Node_Str"";
  overworldSprites=null;
  inventorySprite=null;
  crySound=null;
}","Species(){
  mName=""String_Node_Str"";
  mDexNum=999;
  mType1=-1;
  mType2=-1;
  mBaseStats[0]=10;
  for (int i=0; i < 20; i++) {
    mLevelMoves[i][0]=0;
    mLevelMoves[i][1]=0;
  }
  for (int i=0; i < 110; i++) {
    mTmMoves[i]=0;
  }
  for (int i=0; i < 30; i++) {
    mEggMoves[i]=0;
  }
  for (int i=0; i < 30; i++) {
    mTutorMoves[i]=0;
  }
  catchRate=0;
  eggSteps=0;
  growthRate=0;
  eggType=0;
  genderRatio=-1;
  weight=0.00f;
  backSprite=""String_Node_Str"";
  frontSprite=""String_Node_Str"";
  backSpriteSh=""String_Node_Str"";
  frontSpriteSh=""String_Node_Str"";
  overworldSprites=null;
  inventorySprite=null;
  crySound=null;
}",0.9875195007800311
152618,"/** 
 * Trigger.
 * @param jobClass the job class
 */
public void triggerJob(String jobClass,Integer instances){
  Play.plugin(JobsPlugin.class);
  if (StringUtils.isBlank(jobClass)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (instances == null) {
    instances=1;
  }
  if (instances < 1) {
    instances=1;
  }
  Logger.info(""String_Node_Str"",jobClass,instances);
  try {
    Class clazz=Class.forName(jobClass);
    if (clazz == null) {
      throw new RuntimeException(""String_Node_Str"" + jobClass);
    }
    ExecutorService executor=Executors.newFixedThreadPool(instances);
    int count=0;
    for (int i=0; i < instances; i++) {
      count=count + 1;
      Object o=clazz.newInstance();
      if ((o instanceof Job) == false) {
        throw new RuntimeException(""String_Node_Str"" + o);
      }
      Logger.info(""String_Node_Str"",o);
      Job job=(Job)o;
      executor.submit((Callable)job);
      Logger.info(""String_Node_Str"",count,job);
    }
  }
 catch (  Throwable t) {
    logError(t);
    throw new UnexpectedException(String.format(""String_Node_Str"",jobClass));
  }
}","/** 
 * Trigger.
 * @param jobClass the job class
 */
public void triggerJob(String jobClass,Integer instances){
  Play.plugin(JobsPlugin.class);
  if (StringUtils.isBlank(jobClass)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (instances == null) {
    instances=1;
  }
  if (instances < 1) {
    instances=1;
  }
  Logger.info(""String_Node_Str"",jobClass,instances);
  try {
    Class clazz=Play.classloader.getClassIgnoreCase(jobClass);
    if (clazz == null) {
      throw new RuntimeException(""String_Node_Str"" + jobClass);
    }
    ExecutorService executor=Executors.newFixedThreadPool(instances);
    int count=0;
    for (int i=0; i < instances; i++) {
      count=count + 1;
      Object o=clazz.newInstance();
      if ((o instanceof Job) == false) {
        throw new RuntimeException(""String_Node_Str"" + o);
      }
      Logger.info(""String_Node_Str"",o);
      Job job=(Job)o;
      executor.submit((Callable)job);
      Logger.info(""String_Node_Str"",count,job);
    }
  }
 catch (  Throwable t) {
    logError(t);
    throw new UnexpectedException(String.format(""String_Node_Str"",jobClass));
  }
}",0.9838854073410922
152619,"@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Cursor c=context.getContentResolver().query(StatusProvider.CONTENT_URI,null,null,null,null);
  try {
    if (c.moveToFirst()) {
      CharSequence user=c.getString(c.getColumnIndex(StatusData.C_USER));
      CharSequence createdAt=DateUtils.getRelativeTimeSpanString(context,c.getLong(c.getColumnIndex(StatusData.C_CREATED_AT)));
      CharSequence message=c.getString(c.getColumnIndex(StatusData.C_TEXT));
      for (      int appWidgetId : appWidgetIds) {
        Log.d(TAG,""String_Node_Str"" + appWidgetId);
        RemoteViews views=new RemoteViews(context.getPackageName(),R.layout.yamba_widget);
        views.setTextViewText(R.id.textUser,user);
        views.setTextViewText(R.id.textCreatedAt,createdAt);
        views.setTextViewText(R.id.textText,message);
        views.setOnClickPendingIntent(R.id.yamba_icon,PendingIntent.getActivity(context,0,new Intent(context,TimelineActivity.class),0));
        appWidgetManager.updateAppWidget(appWidgetId,views);
      }
    }
 else {
      Log.d(TAG,""String_Node_Str"");
    }
  }
  finally {
    c.close();
  }
  Log.d(TAG,""String_Node_Str"");
}","@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  Cursor c=context.getContentResolver().query(StatusProvider.CONTENT_URI,null,null,null,StatusData.C_CREATED_AT + ""String_Node_Str"");
  try {
    if (c.moveToFirst()) {
      CharSequence user=c.getString(c.getColumnIndex(StatusData.C_USER));
      CharSequence createdAt=DateUtils.getRelativeTimeSpanString(context,c.getLong(c.getColumnIndex(StatusData.C_CREATED_AT)));
      CharSequence message=c.getString(c.getColumnIndex(StatusData.C_TEXT));
      for (      int appWidgetId : appWidgetIds) {
        Log.d(TAG,""String_Node_Str"" + appWidgetId);
        RemoteViews views=new RemoteViews(context.getPackageName(),R.layout.yamba_widget);
        views.setTextViewText(R.id.textUser,user);
        views.setTextViewText(R.id.textCreatedAt,createdAt);
        views.setTextViewText(R.id.textText,message);
        views.setOnClickPendingIntent(R.id.yamba_icon,PendingIntent.getActivity(context,0,new Intent(context,TimelineActivity.class),0));
        appWidgetManager.updateAppWidget(appWidgetId,views);
      }
    }
 else {
      Log.d(TAG,""String_Node_Str"");
    }
  }
  finally {
    c.close();
  }
  Log.d(TAG,""String_Node_Str"");
}",0.9807613589848548
152620,"private Stanza getSessionCreationResponse(BoshBackedSessionContext session){
  StanzaBuilder body=new StanzaBuilder(""String_Node_Str"",NamespaceURIs.XEP0124_BOSH);
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getWait()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getInactivity()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getPolling()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getRequests()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getHold()));
  body.addAttribute(""String_Node_Str"",session.getSessionId());
  body.addAttribute(""String_Node_Str"",session.getBoshVersion());
  body.addAttribute(""String_Node_Str"",session.getServerJID().getFullQualifiedName());
  body.addAttribute(""String_Node_Str"",""String_Node_Str"");
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getMaxPause()));
  body.addAttribute(""String_Node_Str"",Long.toString(session.getHighestReadRid()));
  Stanza features=new ServerResponses().getFeaturesForAuthentication(serverRuntimeContext.getServerFeatures().getAuthenticationMethods());
  body.addPreparedElement(features);
  return body.build();
}","private Stanza getSessionCreationResponse(BoshBackedSessionContext session){
  StanzaBuilder body=new StanzaBuilder(""String_Node_Str"",NamespaceURIs.XEP0124_BOSH);
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getWait()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getInactivity()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getPolling()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getRequests()));
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getHold()));
  body.addAttribute(""String_Node_Str"",session.getSessionId());
  body.addAttribute(""String_Node_Str"",session.getBoshVersion());
  body.addAttribute(""String_Node_Str"",session.getServerJID().getFullQualifiedName());
  body.addAttribute(""String_Node_Str"",""String_Node_Str"");
  body.addAttribute(""String_Node_Str"",Integer.toString(session.getMaxPause()));
  body.addAttribute(""String_Node_Str"",Long.toString(session.getHighestReadRid()));
  Stanza features=new ServerResponses().getFeaturesForAuthentication(serverRuntimeContext.getServerFeatures().getAuthenticationMethods(),session);
  body.addPreparedElement(features);
  return body.build();
}",0.996652719665272
152621,"@Test public void testProcess() throws IOException, SAXException {
  HttpServletRequest httpServletRequest=mocksControl.createMock(HttpServletRequest.class);
  expect(serverRuntimeContext.getNextSessionId()).andReturn(""String_Node_Str"");
  expect(serverRuntimeContext.getServerEnitity()).andReturn(new EntityImpl(null,""String_Node_Str"",null));
  expect(serverRuntimeContext.getDefaultXMLLang()).andReturn(""String_Node_Str"");
  Continuation continuation=mocksControl.createMock(Continuation.class);
  expect(httpServletRequest.getAttribute(Continuation.ATTRIBUTE)).andReturn(continuation);
  expectLastCall().atLeastOnce();
  continuation.setTimeout(anyLong());
  Capture<BoshRequest> br=new Capture<BoshRequest>();
  continuation.setAttribute(eq(""String_Node_Str""),EasyMock.<BoshRequest>capture(br));
  continuation.addContinuationListener(EasyMock.<ContinuationListener>anyObject());
  continuation.suspend();
  ServerFeatures serverFeatures=mocksControl.createMock(ServerFeatures.class);
  expect(serverRuntimeContext.getServerFeatures()).andReturn(serverFeatures);
  expect(serverFeatures.getAuthenticationMethods()).andReturn(Collections.<SASLMechanism>emptyList());
  Capture<BoshResponse> captured=new Capture<BoshResponse>();
  continuation.setAttribute(eq(""String_Node_Str""),EasyMock.<BoshResponse>capture(captured));
  continuation.resume();
  mocksControl.replay();
  Stanza boshRequest=createSessionRequest();
  boshHandler.process(httpServletRequest,boshRequest);
  mocksControl.verify();
  assertEquals(httpServletRequest,br.getValue().getHttpServletRequest());
  assertEquals(boshRequest,br.getValue().getBody());
  Stanza response=new XMLUtil(new String(captured.getValue().getContent())).parse();
  assertNotNull(response);
  assertEquals(""String_Node_Str"",response.getName());
  assertEquals(NamespaceURIs.XEP0124_BOSH,response.getNamespaceURI());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(1,response.getInnerElements().size());
  XMLElement streamFeatures=response.getInnerElements().get(0);
  assertEquals(""String_Node_Str"",streamFeatures.getName());
  assertEquals(NamespaceURIs.HTTP_ETHERX_JABBER_ORG_STREAMS,streamFeatures.getNamespaceURI());
  assertEquals(1,streamFeatures.getInnerElements().size());
  XMLElement saslMechanisms=streamFeatures.getInnerElements().get(0);
  assertEquals(""String_Node_Str"",saslMechanisms.getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL,saslMechanisms.getNamespaceURI());
  mocksControl.reset();
  expect(httpServletRequest.getAttribute(Continuation.ATTRIBUTE)).andReturn(continuation);
  expectLastCall().atLeastOnce();
  continuation.setTimeout(anyLong());
  continuation.suspend();
  continuation.setAttribute(eq(""String_Node_Str""),EasyMock.<BoshRequest>capture(br));
  continuation.addContinuationListener(EasyMock.<ContinuationListener>anyObject());
  StanzaProcessor stanzaProcessor=mocksControl.createMock(StanzaProcessor.class);
  expect(serverRuntimeContext.getStanzaProcessor()).andReturn(stanzaProcessor);
  Capture<Stanza> stanzaCaptured=new Capture<Stanza>();
  stanzaProcessor.processStanza(eq(serverRuntimeContext),EasyMock.<SessionContext>anyObject(),EasyMock.<Stanza>capture(stanzaCaptured),EasyMock.<SessionStateHolder>anyObject());
  mocksControl.replay();
  boshRequest=createSaslRequest();
  boshHandler.process(httpServletRequest,boshRequest);
  mocksControl.verify();
  assertEquals(httpServletRequest,br.getValue().getHttpServletRequest());
  assertEquals(boshRequest,br.getValue().getBody());
  Stanza stanza=stanzaCaptured.getValue();
  assertNotNull(stanza);
  assertEquals(""String_Node_Str"",stanza.getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL,stanza.getNamespaceURI());
  assertEquals(""String_Node_Str"",stanza.getAttributeValue(""String_Node_Str""));
}","@Test public void testProcess() throws IOException, SAXException {
  HttpServletRequest httpServletRequest=mocksControl.createMock(HttpServletRequest.class);
  expect(serverRuntimeContext.getNextSessionId()).andReturn(""String_Node_Str"");
  expect(serverRuntimeContext.getServerEnitity()).andReturn(new EntityImpl(null,""String_Node_Str"",null));
  expect(serverRuntimeContext.getDefaultXMLLang()).andReturn(""String_Node_Str"");
  Continuation continuation=mocksControl.createMock(Continuation.class);
  expect(httpServletRequest.getAttribute(Continuation.ATTRIBUTE)).andReturn(continuation);
  expectLastCall().atLeastOnce();
  continuation.setTimeout(anyLong());
  Capture<BoshRequest> br=new Capture<BoshRequest>();
  continuation.setAttribute(eq(""String_Node_Str""),EasyMock.<BoshRequest>capture(br));
  continuation.addContinuationListener(EasyMock.<ContinuationListener>anyObject());
  continuation.suspend();
  ServerFeatures serverFeatures=mocksControl.createMock(ServerFeatures.class);
  expect(serverRuntimeContext.getServerFeatures()).andReturn(serverFeatures);
  expect(serverFeatures.getAuthenticationMethods()).andReturn(Collections.<SASLMechanism>emptyList());
  expect(serverRuntimeContext.getModule(InBandRegistrationModule.class)).andReturn(null);
  Capture<BoshResponse> captured=new Capture<BoshResponse>();
  continuation.setAttribute(eq(""String_Node_Str""),EasyMock.<BoshResponse>capture(captured));
  continuation.resume();
  mocksControl.replay();
  Stanza boshRequest=createSessionRequest();
  boshHandler.process(httpServletRequest,boshRequest);
  mocksControl.verify();
  assertEquals(httpServletRequest,br.getValue().getHttpServletRequest());
  assertEquals(boshRequest,br.getValue().getBody());
  Stanza response=new XMLUtil(new String(captured.getValue().getContent())).parse();
  assertNotNull(response);
  assertEquals(""String_Node_Str"",response.getName());
  assertEquals(NamespaceURIs.XEP0124_BOSH,response.getNamespaceURI());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  assertEquals(1,response.getInnerElements().size());
  XMLElement streamFeatures=response.getInnerElements().get(0);
  assertEquals(""String_Node_Str"",streamFeatures.getName());
  assertEquals(NamespaceURIs.HTTP_ETHERX_JABBER_ORG_STREAMS,streamFeatures.getNamespaceURI());
  assertEquals(1,streamFeatures.getInnerElements().size());
  XMLElement saslMechanisms=streamFeatures.getInnerElements().get(0);
  assertEquals(""String_Node_Str"",saslMechanisms.getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL,saslMechanisms.getNamespaceURI());
  mocksControl.reset();
  expect(httpServletRequest.getAttribute(Continuation.ATTRIBUTE)).andReturn(continuation);
  expectLastCall().atLeastOnce();
  continuation.setTimeout(anyLong());
  continuation.suspend();
  continuation.setAttribute(eq(""String_Node_Str""),EasyMock.<BoshRequest>capture(br));
  continuation.addContinuationListener(EasyMock.<ContinuationListener>anyObject());
  StanzaProcessor stanzaProcessor=mocksControl.createMock(StanzaProcessor.class);
  expect(serverRuntimeContext.getStanzaProcessor()).andReturn(stanzaProcessor);
  Capture<Stanza> stanzaCaptured=new Capture<Stanza>();
  stanzaProcessor.processStanza(eq(serverRuntimeContext),EasyMock.<SessionContext>anyObject(),EasyMock.<Stanza>capture(stanzaCaptured),EasyMock.<SessionStateHolder>anyObject());
  mocksControl.replay();
  boshRequest=createSaslRequest();
  boshHandler.process(httpServletRequest,boshRequest);
  mocksControl.verify();
  assertEquals(httpServletRequest,br.getValue().getHttpServletRequest());
  assertEquals(boshRequest,br.getValue().getBody());
  Stanza stanza=stanzaCaptured.getValue();
  assertNotNull(stanza);
  assertEquals(""String_Node_Str"",stanza.getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL,stanza.getNamespaceURI());
  assertEquals(""String_Node_Str"",stanza.getAttributeValue(""String_Node_Str""));
}",0.9893111638954868
152622,"@Override protected Stanza handleGet(IQStanza stanza,ServerRuntimeContext serverRuntimeContext,SessionContext sessionContext){
  return StanzaBuilder.createIQStanza(stanza.getTo(),stanza.getFrom(),IQStanzaType.RESULT,stanza.getID()).startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS).startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS).addAttribute(""String_Node_Str"",proxyAddress.getHostName()).addAttribute(""String_Node_Str"",jid.getFullQualifiedName()).addAttribute(""String_Node_Str"",Integer.toString(proxyAddress.getPort())).build();
}","@Override protected Stanza handleGet(IQStanza stanza,ServerRuntimeContext serverRuntimeContext,SessionContext sessionContext){
  StanzaBuilder builder=StanzaBuilder.createIQStanza(stanza.getTo(),stanza.getFrom(),IQStanzaType.RESULT,stanza.getID()).startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS).startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS);
  if (DEFAULT_ADDRESS.equals(proxyAddress.getAddress())) {
    builder.addAttribute(""String_Node_Str"",jid.getFullQualifiedName());
  }
 else {
    builder.addAttribute(""String_Node_Str"",proxyAddress.getHostName());
  }
  builder.addAttribute(""String_Node_Str"",jid.getFullQualifiedName()).addAttribute(""String_Node_Str"",Integer.toString(proxyAddress.getPort()));
  return builder.build();
}",0.6979768786127167
152623,"private void startProxy(int port) throws Exception {
  acceptor=new NioSocketAcceptor();
  acceptor.setHandler(new Socks5AcceptorHandler(connectionsRegistry));
  acceptor.getSessionConfig().setBothIdleTime(idleTimeInSeconds);
  acceptor.bind(proxyAddress);
}","private void startProxy() throws Exception {
  acceptor=new NioSocketAcceptor();
  acceptor.setHandler(new Socks5AcceptorHandler(connectionsRegistry));
  acceptor.getSessionConfig().setBothIdleTime(idleTimeInSeconds);
  System.out.println(proxyAddress);
  acceptor.bind(proxyAddress);
}",0.9191176470588236
152624,"/** 
 * Constructs a SOCK5 module with the proxy listening on the default address
 * @param subdomain The subdomain for this component, must be only the subdomain, e.g. ""socks""
 */
public Socks5Module(String subdomain){
  this(subdomain,null);
}","/** 
 * Constructs a SOCK5 module with the default subdomain ""socks"" and the proxy listening on the default address
 */
public Socks5Module(){
  this(DEFAULT_SUBDOMAIN,null);
}",0.5938242280285035
152625,"/** 
 * {@inheritDoc}
 */
@Override public void initialize(ServerRuntimeContext serverRuntimeContext){
  super.initialize(serverRuntimeContext);
  fullDomain=EntityUtils.createComponentDomain(subdomain,serverRuntimeContext);
  if (proxyAddress == null) {
    proxyAddress=new InetSocketAddress(fullDomain.getFullQualifiedName(),port);
  }
  stanzaProcessor=new ComponentStanzaProcessor(serverRuntimeContext);
  stanzaProcessor.addHandler(new Socks5IqHandler(fullDomain,proxyAddress,connectionsRegistry));
  try {
    startProxy(port);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void initialize(ServerRuntimeContext serverRuntimeContext){
  super.initialize(serverRuntimeContext);
  fullDomain=EntityUtils.createComponentDomain(subdomain,serverRuntimeContext);
  stanzaProcessor=new ComponentStanzaProcessor(serverRuntimeContext);
  stanzaProcessor.addHandler(new Socks5IqHandler(fullDomain,proxyAddress,connectionsRegistry));
  try {
    startProxy();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.8952042628774423
152626,"@Override protected Stanza executeIQLogic(IQStanza stanza,ServerRuntimeContext serverRuntimeContext,boolean outboundStanza,SessionContext sessionContext){
switch (stanza.getIQType()) {
case SET:
    return StanzaBuilder.createIQStanza(null,null,IQStanzaType.RESULT,stanza.getID()).addAttribute(""String_Node_Str"",sessionContext.getServerJID().getFullQualifiedName()).build();
case GET:
case ERROR:
default :
  new RuntimeException(""String_Node_Str"" + stanza.getIQType());
}
return null;
}","@Override protected Stanza executeIQLogic(IQStanza stanza,ServerRuntimeContext serverRuntimeContext,boolean outboundStanza,SessionContext sessionContext){
switch (stanza.getIQType()) {
case SET:
    return StanzaBuilder.createIQStanza(null,null,IQStanzaType.RESULT,stanza.getID()).addAttribute(""String_Node_Str"",sessionContext.getServerJID().getFullQualifiedName()).build();
case GET:
case ERROR:
default :
  throw new RuntimeException(""String_Node_Str"" + stanza.getIQType());
}
}",0.9803516028955532
152627,"public void testAbort() throws XMLSemanticError, AuthorizationFailedException {
  executeAbortAuthorization_3Times();
  StanzaBuilder stanzaBuilder=createAbort();
  Stanza abortPlainStanza=stanzaBuilder.build();
  stanzaBuilder=new StanzaBuilder(""String_Node_Str"",NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL);
  stanzaBuilder.addAttribute(""String_Node_Str"",""String_Node_Str"");
  stanzaBuilder.addText(new String(Base64.encodeBase64(""String_Node_Str"".getBytes())));
  Stanza authPlainStanza=stanzaBuilder.build();
  AuthHandler authHandler=new AuthHandler();
  try {
    ResponseStanzaContainer responseContainer=authHandler.execute(authPlainStanza,sessionContext.getServerRuntimeContext(),true,sessionContext,sessionStateHolder);
    fail(""String_Node_Str"");
  }
 catch (  AuthorizationFailedException e) {
  }
}","public void testAbort() throws XMLSemanticError, AuthorizationFailedException {
  executeAbortAuthorization_3Times();
  StanzaBuilder stanzaBuilder=createAbort();
  stanzaBuilder=new StanzaBuilder(""String_Node_Str"",NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL);
  stanzaBuilder.addAttribute(""String_Node_Str"",""String_Node_Str"");
  stanzaBuilder.addText(new String(Base64.encodeBase64(""String_Node_Str"".getBytes())));
  Stanza authPlainStanza=stanzaBuilder.build();
  AuthHandler authHandler=new AuthHandler();
  try {
    ResponseStanzaContainer responseContainer=authHandler.execute(authPlainStanza,sessionContext.getServerRuntimeContext(),true,sessionContext,sessionStateHolder);
    fail(""String_Node_Str"");
  }
 catch (  AuthorizationFailedException e) {
  }
}",0.9690069576217584
152628,"private void restart(){
  log.trace(""String_Node_Str"");
  elements.clear();
  nsResolver=new ParserNamespaceResolver();
  sentStartDocument=false;
}","private void restart(){
  log.trace(""String_Node_Str"");
  elements.clear();
  nsResolver=new ParserNamespaceResolver();
  sentStartDocument=false;
  tokenizer.restart();
}",0.927899686520376
152629,"/** 
 * @param byteBuffer
 * @param charsetDecoder
 * @return the new particle or NULL, if the buffer was exhausted before the particle was completed
 * @throws Exception
 */
public void parse(IoBuffer byteBuffer,CharsetDecoder decoder) throws SAXException {
  lastPosition=byteBuffer.position();
  while (byteBuffer.hasRemaining() && state != State.CLOSED) {
    char c=(char)byteBuffer.get();
    if (state == State.START) {
      if (c == '<') {
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
 else {
        state=State.IN_TEXT;
      }
    }
 else     if (state == State.IN_TEXT) {
      if (c == '<') {
        emit(byteBuffer,decoder);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
    }
 else     if (state == State.IN_TAG) {
      if (c == '>') {
        emit(c,byteBuffer);
        state=State.START;
      }
 else       if (c == '""') {
        emit(c,byteBuffer);
        state=State.IN_DOUBLE_ATTRIBUTE_VALUE;
      }
 else       if (c == '\'') {
        emit(c,byteBuffer);
        state=State.IN_SINGLE_ATTRIBUTE_VALUE;
      }
 else       if (c == '-') {
        emit(c,byteBuffer);
      }
 else       if (isControlChar(c)) {
        emit(c,byteBuffer);
      }
 else       if (Character.isWhitespace(c)) {
        lastPosition=byteBuffer.position();
      }
 else {
        state=State.IN_STRING;
      }
    }
 else     if (state == State.IN_STRING) {
      if (c == '>') {
        emit(byteBuffer,CharsetUtil.UTF8_DECODER);
        emit(c,byteBuffer);
        state=State.START;
      }
 else       if (isControlChar(c)) {
        emit(byteBuffer,CharsetUtil.UTF8_DECODER);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
 else       if (Character.isWhitespace(c)) {
        emit(byteBuffer,CharsetUtil.UTF8_DECODER);
        state=State.IN_TAG;
      }
 else {
      }
    }
 else     if (state == State.IN_DOUBLE_ATTRIBUTE_VALUE) {
      if (c == '""') {
        emit(byteBuffer,decoder);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
    }
 else     if (state == State.IN_SINGLE_ATTRIBUTE_VALUE) {
      if (c == '\'') {
        emit(byteBuffer,decoder);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
    }
  }
  byteBuffer.position(lastPosition);
}","/** 
 * @param byteBuffer
 * @param charsetDecoder
 * @return the new particle or NULL, if the buffer was exhausted before the particle was completed
 * @throws Exception
 */
public void parse(IoBuffer byteBuffer,CharsetDecoder decoder) throws SAXException {
  while (byteBuffer.hasRemaining() && state != State.CLOSED) {
    char c=(char)byteBuffer.get();
    if (state == State.START) {
      if (c == '<') {
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
 else {
        state=State.IN_TEXT;
        buffer.put((byte)c);
      }
    }
 else     if (state == State.IN_TEXT) {
      if (c == '<') {
        emit(byteBuffer,decoder);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
 else {
        buffer.put((byte)c);
      }
    }
 else     if (state == State.IN_TAG) {
      if (c == '>') {
        emit(c,byteBuffer);
        state=State.START;
      }
 else       if (c == '""') {
        emit(c,byteBuffer);
        state=State.IN_DOUBLE_ATTRIBUTE_VALUE;
      }
 else       if (c == '\'') {
        emit(c,byteBuffer);
        state=State.IN_SINGLE_ATTRIBUTE_VALUE;
      }
 else       if (c == '-') {
        emit(c,byteBuffer);
      }
 else       if (isControlChar(c)) {
        emit(c,byteBuffer);
      }
 else       if (Character.isWhitespace(c)) {
        buffer.clear();
      }
 else {
        state=State.IN_STRING;
        buffer.put((byte)c);
      }
    }
 else     if (state == State.IN_STRING) {
      if (c == '>') {
        emit(byteBuffer,CharsetUtil.UTF8_DECODER);
        emit(c,byteBuffer);
        state=State.START;
      }
 else       if (isControlChar(c)) {
        emit(byteBuffer,CharsetUtil.UTF8_DECODER);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
 else       if (Character.isWhitespace(c)) {
        emit(byteBuffer,CharsetUtil.UTF8_DECODER);
        state=State.IN_TAG;
      }
 else {
        buffer.put((byte)c);
      }
    }
 else     if (state == State.IN_DOUBLE_ATTRIBUTE_VALUE) {
      if (c == '""') {
        emit(byteBuffer,decoder);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
 else {
        buffer.put((byte)c);
      }
    }
 else     if (state == State.IN_SINGLE_ATTRIBUTE_VALUE) {
      if (c == '\'') {
        emit(byteBuffer,decoder);
        emit(c,byteBuffer);
        state=State.IN_TAG;
      }
 else {
        buffer.put((byte)c);
      }
    }
  }
}",0.925231631113984
152630,"private void emit(IoBuffer byteBuffer,CharsetDecoder decoder) throws SAXException {
  int endPosition=byteBuffer.position();
  int oldLimit=byteBuffer.limit();
  byteBuffer.position(lastPosition);
  byteBuffer.limit(endPosition - 1);
  try {
    listener.token(NO_CHAR,byteBuffer.getString(decoder));
  }
 catch (  CharacterCodingException e) {
    throw new SAXException(e);
  }
  byteBuffer.limit(oldLimit);
  byteBuffer.position(endPosition);
  lastPosition=byteBuffer.position();
}","private void emit(IoBuffer byteBuffer,CharsetDecoder decoder) throws SAXException {
  try {
    buffer.flip();
    listener.token(NO_CHAR,buffer.getString(decoder));
    buffer.clear();
  }
 catch (  CharacterCodingException e) {
    throw new SAXException(e);
  }
}",0.596537949400799
152631,"public void close(){
  state=State.CLOSED;
}","public void close(){
  state=State.CLOSED;
  buffer.clear();
}",0.8301886792452831
152632,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || !(o instanceof XMLElement))   return false;
  final XMLElement that=(XMLElement)o;
  if (attributes != null ? !attributes.equals(that.attributes) : that.attributes != null)   return false;
  if (innerFragments != null ? !innerFragments.equals(that.innerFragments) : that.innerFragments != null) {
    return false;
  }
  if (name != null ? !name.equals(that.name) : that.name != null)   return false;
  if (namespacePrefix != null ? !namespacePrefix.equals(that.namespacePrefix) : that.namespacePrefix != null)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || !(o instanceof XMLElement))   return false;
  final XMLElement that=(XMLElement)o;
  if (attributes != null && that.attributes != null) {
    if (attributes.size() != that.attributes.size())     return false;
    for (    Attribute attribute : attributes) {
      boolean found=false;
      for (      Attribute thatAttribute : that.attributes) {
        if (thatAttribute.equals(attribute)) {
          found=true;
          break;
        }
      }
      if (!found)       return false;
    }
  }
 else   if (attributes == null && that.attributes == null) {
  }
 else {
    return false;
  }
  if (innerFragments != null ? !innerFragments.equals(that.innerFragments) : that.innerFragments != null) {
    return false;
  }
  if (name != null ? !name.equals(that.name) : that.name != null)   return false;
  if (namespacePrefix != null ? !namespacePrefix.equals(that.namespacePrefix) : that.namespacePrefix != null)   return false;
  return true;
}",0.3311494937462775
152633,"public boolean verifyCredentials(String username,String passwordCleartext,Object credentials){
  return verify(username,passwordCleartext);
}","public boolean verifyCredentials(String username,String passwordCleartext,Object credentials){
  return verify(EntityImpl.parseUnchecked(username).getBareJID(),passwordCleartext);
}",0.8757763975155279
152634,"public boolean verifyAccountExists(Entity jid){
  return userPasswordMap.get(jid.getBareJID().getFullQualifiedName()) != null;
}","public boolean verifyAccountExists(Entity jid){
  return userPasswordMap.get(jid.getBareJID()) != null;
}",0.9012875536480688
152635,"private boolean verify(String username,String passwordCleartext){
  return passwordCleartext.equals(userPasswordMap.get(username));
}","private boolean verify(Entity username,String passwordCleartext){
  return passwordCleartext.equals(userPasswordMap.get(username));
}",0.9699248120300752
152636,"public AdhocCommandHandler getCommandHandler(String commandNode,Entity executingUser){
  if (executingUser == null)   return null;
  final AccountManagement accountManagement=(AccountManagement)serverRuntimeContext.getStorageProvider(AccountManagement.class);
  final ResourceRegistry resourceRegistry=serverRuntimeContext.getResourceRegistry();
  if (!admins.contains(executingUser)) {
    if (commandNode.equals(COMMAND_CHANGE_USER_PASSWORD)) {
      return new ChangeUserPasswordCommandHandler(accountManagement,executingUser);
    }
    return null;
  }
  if (commandNode.equals(COMMAND_NODE_ADD_USER)) {
    if (accountManagement == null)     return null;
    return new AddUserCommandHandler(accountManagement,Arrays.asList(serverRuntimeContext.getServerEnitity().getDomain()));
  }
 else   if (commandNode.equals(COMMAND_CHANGE_USER_PASSWORD)) {
    return new ChangeUserPasswordCommandHandler(accountManagement,null);
  }
 else   if (commandNode.equals(COMMAND_GET_ONLINE_USERS_NUM)) {
    return new GetOnlineUsersCommandHandler(resourceRegistry);
  }
  return null;
}","public AdhocCommandHandler getCommandHandler(String commandNode,Entity executingUser){
  if (executingUser == null)   return null;
  final AccountManagement accountManagement=(AccountManagement)serverRuntimeContext.getStorageProvider(AccountManagement.class);
  final ResourceRegistry resourceRegistry=serverRuntimeContext.getResourceRegistry();
  if (!admins.contains(executingUser.getBareJID())) {
    if (commandNode.equals(COMMAND_CHANGE_USER_PASSWORD)) {
      return new ChangeUserPasswordCommandHandler(accountManagement,executingUser);
    }
    return null;
  }
  if (commandNode.equals(COMMAND_NODE_ADD_USER)) {
    if (accountManagement == null)     return null;
    return new AddUserCommandHandler(accountManagement,Arrays.asList(serverRuntimeContext.getServerEnitity().getDomain()));
  }
 else   if (commandNode.equals(COMMAND_CHANGE_USER_PASSWORD)) {
    return new ChangeUserPasswordCommandHandler(accountManagement,null);
  }
 else   if (commandNode.equals(COMMAND_GET_ONLINE_USERS_NUM)) {
    return new GetOnlineUsersCommandHandler(resourceRegistry);
  }
  return null;
}",0.9940009229349333
152637,"public void messageSent(NextFilter nextFilter,IoSession session,WriteRequest request) throws Exception {
  Object message=request.getMessage();
  if (message instanceof StanzaWriteInfo) {
    StanzaWriteInfo stanzaWriteInfo=(StanzaWriteInfo)message;
    if (serverLogger.isDebugEnabled()) {
      String xml=toXml(stanzaWriteInfo.getStanza(),stanzaWriteInfo.isWriteOpeningElement(),stanzaWriteInfo.isWriteClosingElement());
      serverLogger.info(""String_Node_Str"" + xml);
    }
 else     if (serverLogger.isInfoEnabled()) {
      serverLogger.info(DenseStanzaLogRenderer.render(stanzaWriteInfo.getStanza()));
    }
  }
  nextFilter.messageSent(session,request);
}","public void messageSent(NextFilter nextFilter,IoSession session,WriteRequest request) throws Exception {
  Object message=request.getMessage();
  if (message instanceof StanzaWriteInfo) {
    StanzaWriteInfo stanzaWriteInfo=(StanzaWriteInfo)message;
    if (serverLogger.isDebugEnabled()) {
      String xml=toXml(stanzaWriteInfo.getStanza(),stanzaWriteInfo.isWriteOpeningElement(),stanzaWriteInfo.isWriteClosingElement());
      serverLogger.debug(""String_Node_Str"" + xml);
    }
 else     if (serverLogger.isInfoEnabled()) {
      serverLogger.info(DenseStanzaLogRenderer.render(stanzaWriteInfo.getStanza()));
    }
  }
  nextFilter.messageSent(session,request);
}",0.9932381667918858
152638,"/** 
 * @throws IOException 
 * @throws RuntimeException a wrapper of the possible{@link java.lang.Exception} that Jetty can throw at start-up
 */
public void start() throws IOException {
  Server server=createJettyServer();
  Handler handler=createHandler();
  server.setHandler(handler);
  try {
    server.start();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * @throws IOException 
 * @throws RuntimeException a wrapper of the possible{@link java.lang.Exception} that Jetty can throw at start-up
 */
public void start() throws IOException {
  server=createJettyServer();
  Handler handler=createHandler();
  server.setHandler(handler);
  try {
    server.start();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9908735332464146
152639,"public void write(Stanza stanza){
  Renderer renderer=new Renderer(stanza);
  String xml;
  if (""String_Node_Str"".equals(stanza.getName()) && NamespaceURIs.HTTP_ETHERX_JABBER_ORG_STREAMS.equals(stanza.getNamespaceURI())) {
    xml=renderer.getOpeningElement() + renderer.getElementContent();
  }
 else {
    xml=renderer.getComplete();
  }
  try {
    LOG.info(""String_Node_Str"" + xml);
    outbound.sendMessage(xml);
  }
 catch (  IOException e) {
    endSession(SessionTerminationCause.CONNECTION_ABORT);
  }
}","public void write(Stanza stanza){
  Renderer renderer=new Renderer(stanza);
  if (""String_Node_Str"".equals(stanza.getName()) && NamespaceURIs.HTTP_ETHERX_JABBER_ORG_STREAMS.equals(stanza.getNamespaceURI())) {
    send(renderer.getOpeningElement());
    send(renderer.getElementContent());
  }
 else {
    send(renderer.getComplete());
  }
}",0.7417840375586855
152640,"public void relay(Entity receiver,Stanza stanza,DeliveryFailureStrategy deliveryFailureStrategy) throws DeliveryException {
  boolean toServerTLD=receiver == null || (!receiver.isNodeSet() && EntityUtils.isAddressingServer(receiver,serverRuntimeContext.getServerEnitity()));
  boolean toComponent=!toServerTLD && !receiver.isNodeSet();
  if (toServerTLD) {
    throw new RuntimeException(""String_Node_Str"");
  }
  boolean relayToExternal=serverRuntimeContext.getServerFeatures().isRelayingToFederationServers();
  if (EntityUtils.isAddressingServerComponent(receiver,serverRuntimeContext.getServerEnitity()) || toComponent) {
    internalRelay.relay(receiver,stanza,deliveryFailureStrategy);
  }
 else {
    if (!relayToExternal)     throw new IllegalStateException(""String_Node_Str"");
    externalRelay.relay(receiver,stanza,deliveryFailureStrategy);
  }
}","public void relay(Entity receiver,Stanza stanza,DeliveryFailureStrategy deliveryFailureStrategy) throws DeliveryException {
  boolean toServerTLD=receiver == null || (!receiver.isNodeSet() && EntityUtils.isAddressingServer(receiver,serverRuntimeContext.getServerEnitity()));
  boolean toComponent=EntityUtils.isAddressingServerComponent(receiver,serverRuntimeContext.getServerEnitity());
  if (toServerTLD) {
    throw new RuntimeException(""String_Node_Str"");
  }
  boolean relayToExternal=serverRuntimeContext.getServerFeatures().isRelayingToFederationServers();
  if (EntityUtils.isAddressingServer(receiver,serverRuntimeContext.getServerEnitity()) || toComponent) {
    internalRelay.relay(receiver,stanza,deliveryFailureStrategy);
  }
 else {
    if (!relayToExternal)     throw new IllegalStateException(""String_Node_Str"");
    externalRelay.relay(receiver,stanza,deliveryFailureStrategy);
  }
}",0.8503130335799659
152641,"/** 
 * Creates the stanza for notifying the subscriber including payload.
 * @param from the node JID which sends the notification
 * @param to the receiver of the notification (subscriber)
 * @param lang the language of the stanza text-content.
 * @param item the payload as XMLElement
 * @return the prepared Stanza object.
 */
private Stanza createMessageEventStanza(String nodeName,Entity to,String lang,XMLElement item){
  StanzaBuilder stanzaBuilder=new StanzaBuilder(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB_EVENT);
  stanzaBuilder.addAttribute(""String_Node_Str"",serverJID.getFullQualifiedName());
  stanzaBuilder.addAttribute(""String_Node_Str"",to.getFullQualifiedName());
  stanzaBuilder.addAttribute(NamespaceURIs.XML,""String_Node_Str"",lang);
  stanzaBuilder.startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB_EVENT);
  stanzaBuilder.startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB_EVENT);
  stanzaBuilder.addAttribute(""String_Node_Str"",nodeName);
  stanzaBuilder.addPreparedElement(item);
  stanzaBuilder.endInnerElement();
  stanzaBuilder.endInnerElement();
  return stanzaBuilder.build();
}","/** 
 * Creates the stanza for notifying the subscriber including payload.
 * @param from the node JID which sends the notification
 * @param to the receiver of the notification (subscriber)
 * @param lang the language of the stanza text-content.
 * @param item the payload as XMLElement
 * @return the prepared Stanza object.
 */
private Stanza createMessageEventStanza(String nodeName,Entity to,String lang,XMLElement item){
  StanzaBuilder stanzaBuilder=new StanzaBuilder(""String_Node_Str"",NamespaceURIs.JABBER_CLIENT);
  stanzaBuilder.addAttribute(""String_Node_Str"",serverJID.getFullQualifiedName());
  stanzaBuilder.addAttribute(""String_Node_Str"",to.getFullQualifiedName());
  stanzaBuilder.addAttribute(NamespaceURIs.XML,""String_Node_Str"",lang);
  stanzaBuilder.startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB_EVENT);
  stanzaBuilder.startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB_EVENT);
  stanzaBuilder.addAttribute(""String_Node_Str"",nodeName);
  stanzaBuilder.addPreparedElement(item);
  stanzaBuilder.endInnerElement();
  stanzaBuilder.endInnerElement();
  return stanzaBuilder.build();
}",0.5807303123625165
152642,"/** 
 * This method takes care of handling the ""publish"" use-case including all (relevant) error conditions.
 * @return the appropriate response stanza (either success or some error condition).
 */
@Override @SpecCompliance(compliant={@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED)}) protected Stanza handleSet(IQStanza stanza,ServerRuntimeContext serverRuntimeContext,SessionContext sessionContext){
  Entity serverJID=serviceConfiguration.getServerJID();
  CollectionNode root=serviceConfiguration.getRootNode();
  Entity sender=extractSenderJID(stanza,sessionContext);
  StanzaBuilder sb=StanzaBuilder.createDirectReply(stanza,false,IQStanzaType.RESULT);
  sb.startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB);
  XMLElement publish=stanza.getFirstInnerElement().getFirstInnerElement();
  String nodeName=publish.getAttributeValue(""String_Node_Str"");
  XMLElement item=publish.getFirstInnerElement();
  String strID=item.getAttributeValue(""String_Node_Str"");
  LeafNode node=root.find(nodeName);
  if (node == null) {
    return errorStanzaGenerator.generateNoNodeErrorStanza(sender,serverJID,stanza);
  }
  if (!node.isAuthorized(sender,PubSubPrivilege.PUBLISH)) {
    return errorStanzaGenerator.generateInsufficientPrivilegesErrorStanza(sender,serverJID,stanza);
  }
  if (strID == null) {
    strID=idGenerator.create();
    StanzaBuilder itemBuilder=new StanzaBuilder(""String_Node_Str"");
    itemBuilder.addAttribute(""String_Node_Str"",strID);
    itemBuilder.addPreparedElement(item.getFirstInnerElement());
    item=itemBuilder.build();
  }
  StanzaRelay relay=serverRuntimeContext.getStanzaRelay();
  node.publish(sender,relay,strID,item);
  buildSuccessStanza(sb,nodeName,strID);
  sb.endInnerElement();
  return new IQStanza(sb.build());
}","/** 
 * This method takes care of handling the ""publish"" use-case including all (relevant) error conditions.
 * @return the appropriate response stanza (either success or some error condition).
 */
@Override @SpecCompliance(compliant={@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.FINISHED,coverage=SpecCompliant.ComplianceCoverage.COMPLETE),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED),@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.NOT_STARTED,coverage=SpecCompliant.ComplianceCoverage.UNSUPPORTED)}) protected Stanza handleSet(IQStanza stanza,ServerRuntimeContext serverRuntimeContext,SessionContext sessionContext){
  Entity serverJID=serviceConfiguration.getServerJID();
  CollectionNode root=serviceConfiguration.getRootNode();
  Entity sender=extractSenderJID(stanza,sessionContext);
  StanzaBuilder sb=StanzaBuilder.createDirectReply(stanza,false,IQStanzaType.RESULT);
  sb.startInnerElement(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB);
  XMLElement publish=stanza.getFirstInnerElement().getFirstInnerElement();
  String nodeName=publish.getAttributeValue(""String_Node_Str"");
  XMLElement item=publish.getFirstInnerElement();
  String strID=item.getAttributeValue(""String_Node_Str"");
  LeafNode node=root.find(nodeName);
  if (node == null) {
    return errorStanzaGenerator.generateNoNodeErrorStanza(sender,serverJID,stanza);
  }
  if (!node.isAuthorized(sender,PubSubPrivilege.PUBLISH)) {
    return errorStanzaGenerator.generateInsufficientPrivilegesErrorStanza(sender,serverJID,stanza);
  }
  StanzaRelay relay=serverRuntimeContext.getStanzaRelay();
  XMLElementBuilder eventItemBuilder=new XMLElementBuilder(""String_Node_Str"",NamespaceURIs.XEP0060_PUBSUB_EVENT);
  if (strID == null) {
    strID=idGenerator.create();
  }
  eventItemBuilder.addAttribute(""String_Node_Str"",strID);
  for (  XMLFragment fragment : item.getInnerFragments()) {
    if (fragment instanceof XMLElement) {
      eventItemBuilder.addPreparedElement((XMLElement)fragment);
    }
 else {
      eventItemBuilder.addText(((XMLText)fragment).getText());
    }
  }
  node.publish(sender,relay,strID,eventItemBuilder.build());
  buildSuccessStanza(sb,nodeName,strID);
  sb.endInnerElement();
  return new IQStanza(sb.build());
}",0.8453453453453453
152643,"private void characters(String s) throws SAXException {
  if (!elements.isEmpty()) {
    String unescaped=unescape(s);
    log.trace(""String_Node_Str"",unescaped);
    contentHandler.characters(unescaped.toCharArray(),0,unescaped.length());
  }
 else {
    startDocument();
    fatalError(""String_Node_Str"");
  }
}","private void characters(String s) throws SAXException {
  if (!elements.isEmpty()) {
    String unescaped=unescape(s);
    log.trace(""String_Node_Str"",unescaped);
    contentHandler.characters(unescaped.toCharArray(),0,unescaped.length());
  }
 else   if (s.trim().length() > 0) {
    startDocument();
    fatalError(""String_Node_Str"");
  }
 else {
    startDocument();
  }
}",0.9098837209302324
152644,"protected void assertStartDocument(TestEvent actual){
  if (!(actual instanceof StartDocumentEvent))   fail(""String_Node_Str"" + actual.getClass());
}","protected void assertStartDocument(TestEvent actual){
  printIfFatal(actual);
  if (!(actual instanceof StartDocumentEvent))   fail(""String_Node_Str"" + actual.getClass());
}",0.9254658385093169
152645,"protected void assertEndDocument(TestEvent actual){
  if (!(actual instanceof EndDocumentEvent))   fail(""String_Node_Str"");
}","protected void assertEndDocument(TestEvent actual){
  printIfFatal(actual);
  if (!(actual instanceof EndDocumentEvent))   fail(""String_Node_Str"");
}",0.9124087591240876
152646,"protected void assertText(String expected,TestEvent actual){
  if (!(actual instanceof CharacterEvent))   fail(""String_Node_Str"");
  assertEquals(expected,((CharacterEvent)actual).getCharacters());
}","protected void assertText(String expected,TestEvent actual){
  printIfFatal(actual);
  if (!(actual instanceof CharacterEvent))   fail(""String_Node_Str"");
  assertEquals(expected,((CharacterEvent)actual).getCharacters());
}",0.943127962085308
152647,"protected void assertStartElement(String expectedUri,String expectedLocalName,String expectedQName,Attributes expectedAttributes,TestEvent actual){
  if (!(actual instanceof StartElementEvent))   fail(""String_Node_Str"" + actual.getClass());
  StartElementEvent startElementEvent=(StartElementEvent)actual;
  assertEquals(""String_Node_Str"",expectedUri,startElementEvent.getURI());
  assertEquals(""String_Node_Str"",expectedLocalName,startElementEvent.getLocalName());
  assertEquals(""String_Node_Str"",expectedQName,startElementEvent.getQName());
  assertAttributes(expectedAttributes,startElementEvent.getAtts());
}","protected void assertStartElement(String expectedUri,String expectedLocalName,String expectedQName,Attributes expectedAttributes,TestEvent actual){
  printIfFatal(actual);
  if (!(actual instanceof StartElementEvent))   fail(""String_Node_Str"" + actual.getClass());
  StartElementEvent startElementEvent=(StartElementEvent)actual;
  assertEquals(""String_Node_Str"",expectedUri,startElementEvent.getURI());
  assertEquals(""String_Node_Str"",expectedLocalName,startElementEvent.getLocalName());
  assertEquals(""String_Node_Str"",expectedQName,startElementEvent.getQName());
  assertAttributes(expectedAttributes,startElementEvent.getAtts());
}",0.9808
152648,"protected void assertEndElement(String expectedUri,String expectedLocalName,String expectedQName,TestEvent actual){
  if (!(actual instanceof EndElementEvent))   fail(""String_Node_Str"");
  EndElementEvent endElementEvent=(EndElementEvent)actual;
  assertEquals(""String_Node_Str"",expectedUri,endElementEvent.getURI());
  assertEquals(""String_Node_Str"",expectedLocalName,endElementEvent.getLocalName());
  assertEquals(""String_Node_Str"",expectedQName,endElementEvent.getQName());
}","protected void assertEndElement(String expectedUri,String expectedLocalName,String expectedQName,TestEvent actual){
  printIfFatal(actual);
  if (!(actual instanceof EndElementEvent))   fail(""String_Node_Str"");
  EndElementEvent endElementEvent=(EndElementEvent)actual;
  assertEquals(""String_Node_Str"",expectedUri,endElementEvent.getURI());
  assertEquals(""String_Node_Str"",expectedLocalName,endElementEvent.getLocalName());
  assertEquals(""String_Node_Str"",expectedQName,endElementEvent.getQName());
}",0.9755600814663952
152649,"public Map<String,String> getNamespaceDeclarations(){
  Map<String,String> ns=new HashMap<String,String>();
  if (!elements.isEmpty()) {
    XMLElement topElm=elements.peek();
    for (    Attribute attribute : topElm.getAttributes()) {
      if (attribute instanceof NamespaceAttribute) {
        NamespaceAttribute nsAttr=(NamespaceAttribute)attribute;
        ns.put(nsAttr.getPrefix(),nsAttr.getValue());
      }
    }
    for (    Attribute attribute : topElm.getAttributes()) {
      if (!(attribute instanceof NamespaceAttribute)) {
        String attrNs=attribute.getNamespaceUri();
        if (attrNs.length() > 0 && resolvePrefix(attrNs,false) == null) {
          ns.put(resolvePrefix(attrNs),attrNs);
        }
      }
    }
    if (topElm.getNamespaceURI().length() > 0) {
      if (!ns.containsValue(topElm.getNamespaceURI())) {
        pop();
        if (resolvePrefix(topElm.getNamespaceURI(),false) == null) {
          ns.put(topElm.getNamespacePrefix(),topElm.getNamespaceURI());
        }
        push(topElm);
      }
    }
  }
  return ns;
}","public Map<String,String> getNamespaceDeclarations(){
  Map<String,String> ns=new HashMap<String,String>();
  if (!elements.isEmpty()) {
    XMLElement topElm=elements.peek();
    for (    Attribute attribute : topElm.getAttributes()) {
      if (attribute instanceof NamespaceAttribute) {
        NamespaceAttribute nsAttr=(NamespaceAttribute)attribute;
        ns.put(nsAttr.getPrefix(),nsAttr.getValue());
      }
    }
    for (    Attribute attribute : topElm.getAttributes()) {
      if (!(attribute instanceof NamespaceAttribute)) {
        String attrNs=attribute.getNamespaceUri();
        if (attrNs.length() > 0 && resolvePrefix(attrNs,false) == null) {
          ns.put(resolvePrefix(attrNs),attrNs);
        }
      }
    }
    if (topElm.getNamespaceURI().length() > 0) {
      if (!ns.containsValue(topElm.getNamespaceURI())) {
        pop();
        if (resolvePrefix(topElm.getNamespaceURI(),false) == null) {
          ns.put(topElm.getNamespacePrefix(),topElm.getNamespaceURI());
        }
        push(topElm);
      }
    }
 else {
      if (elements.size() > 1 && elements.get(elements.size() - 2).getNamespaceURI().length() > 0 && !ns.containsKey(""String_Node_Str"")) {
        ns.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  return ns;
}",0.9085470085470084
152650,"private void renderAttribute(StringBuilder buffer,Attribute attribute){
  buffer.append(attribute.getName()).append(""String_Node_Str"").append(attribute.getValue()).append(""String_Node_Str"");
}","private void renderAttribute(StringBuilder buffer,Attribute attribute){
  buffer.append(attribute.getName()).append(""String_Node_Str"").append(escapeAttributeValue(attribute.getValue())).append(""String_Node_Str"");
}",0.8817733990147784
152651,"/** 
 * @return
 */
@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.IN_PROGRESS,coverage=SpecCompliant.ComplianceCoverage.COMPLETE) protected RelayResult deliver(){
  try {
    String receiverDomain=receiver.getDomain();
    if (receiverDomain != null && !receiverDomain.equals(serverEntity.getDomain())) {
      if (serverRuntimeContext == null) {
        return new RelayResult(new ServiceNotAvailableException(""String_Node_Str""));
      }
      if (!receiverDomain.endsWith(""String_Node_Str"" + serverEntity.getDomain())) {
        return new RelayResult(new ServiceNotAvailableException(""String_Node_Str"" + receiverDomain));
      }
      StanzaProcessor processor=serverRuntimeContext.getComponentStanzaProcessor(receiverDomain);
      if (processor == null) {
        return new RelayResult(new ServiceNotAvailableException(""String_Node_Str"" + receiverDomain));
      }
      processor.processStanza(serverRuntimeContext,null,stanza,null);
    }
    if (receiver.isResourceSet()) {
      return deliverToFullJID();
    }
 else {
      return deliverToBareJID();
    }
  }
 catch (  RuntimeException e) {
    return new RelayResult(new DeliveryException(e));
  }
}","/** 
 * @return
 */
@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.IN_PROGRESS,coverage=SpecCompliant.ComplianceCoverage.COMPLETE) protected RelayResult deliver(){
  try {
    String receiverDomain=receiver.getDomain();
    if (receiverDomain != null && !receiverDomain.equals(serverEntity.getDomain())) {
      if (serverRuntimeContext == null) {
        return new RelayResult(new ServiceNotAvailableException(""String_Node_Str""));
      }
      if (!receiverDomain.endsWith(""String_Node_Str"" + serverEntity.getDomain())) {
        return new RelayResult(new ServiceNotAvailableException(""String_Node_Str"" + receiverDomain));
      }
      StanzaProcessor processor=serverRuntimeContext.getComponentStanzaProcessor(receiverDomain);
      if (processor == null) {
        return new RelayResult(new ServiceNotAvailableException(""String_Node_Str"" + receiverDomain));
      }
      processor.processStanza(serverRuntimeContext,null,stanza,null);
      return new RelayResult();
    }
    if (receiver.isResourceSet()) {
      return deliverToFullJID();
    }
 else {
      return deliverToBareJID();
    }
  }
 catch (  RuntimeException e) {
    return new RelayResult(new DeliveryException(e));
  }
}",0.9870759289176092
152652,"@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.IN_PROGRESS,coverage=SpecCompliant.ComplianceCoverage.COMPLETE) private RelayResult deliverToBareJID(){
  XMPPCoreStanza xmppStanza=XMPPCoreStanza.getWrapper(stanza);
  if (xmppStanza == null)   new RelayResult(new DeliveryException(""String_Node_Str""));
  if (PresenceStanza.isOfType(stanza)) {
    return relayToAllSessions();
  }
 else   if (MessageStanza.isOfType(stanza)) {
    MessageStanza messageStanza=(MessageStanza)xmppStanza;
    MessageStanzaType messageStanzaType=messageStanza.getMessageType();
switch (messageStanzaType) {
case CHAT:
case NORMAL:
      return relayToBestSession(false);
case ERROR:
    return null;
case GROUPCHAT:
  return new RelayResult(new ServiceNotAvailableException());
case HEADLINE:
return relayToAllSessions();
default :
throw new RuntimeException(""String_Node_Str"" + messageStanzaType.value());
}
}
 else if (IQStanza.isOfType(stanza)) {
throw new RuntimeException(""String_Node_Str"");
}
return relayNotPossible();
}","@SpecCompliant(spec=""String_Node_Str"",section=""String_Node_Str"",status=SpecCompliant.ComplianceStatus.IN_PROGRESS,coverage=SpecCompliant.ComplianceCoverage.COMPLETE) private RelayResult deliverToBareJID(){
  XMPPCoreStanza xmppStanza=XMPPCoreStanza.getWrapper(stanza);
  if (xmppStanza == null)   return new RelayResult(new DeliveryException(""String_Node_Str""));
  if (PresenceStanza.isOfType(stanza)) {
    return relayToAllSessions();
  }
 else   if (MessageStanza.isOfType(stanza)) {
    MessageStanza messageStanza=(MessageStanza)xmppStanza;
    MessageStanzaType messageStanzaType=messageStanza.getMessageType();
switch (messageStanzaType) {
case CHAT:
case NORMAL:
      return relayToBestSession(false);
case ERROR:
    return null;
case GROUPCHAT:
  return new RelayResult(new ServiceNotAvailableException());
case HEADLINE:
return relayToAllSessions();
default :
throw new RuntimeException(""String_Node_Str"" + messageStanzaType.value());
}
}
 else if (IQStanza.isOfType(stanza)) {
throw new RuntimeException(""String_Node_Str"");
}
return relayNotPossible();
}",0.996708979783733
152653,"public boolean onlySubelementEquals(String name,String namespaceURI){
  List<XMLFragment> innerFragments=element.getInnerFragments();
  if (innerFragments == null || innerFragments.size() != 1)   return false;
  XMLFragment onlySubelement=innerFragments.get(0);
  if (!(onlySubelement instanceof XMLElement))   return false;
  XMLElement xmlElement=((XMLElement)onlySubelement);
  boolean nameEquals=name == null ? xmlElement.getName() == null : name.equals(xmlElement.getName());
  if (namespaceURI == null)   namespaceURI=NamespaceAttribute.DEFAULT_NAMESPACE;
  return nameEquals && namespaceURI.equals(xmlElement.getNamespacePrefix());
}","public boolean onlySubelementEquals(String name,String namespaceURI){
  List<XMLFragment> innerFragments=element.getInnerFragments();
  if (innerFragments == null || innerFragments.size() != 1)   return false;
  XMLFragment onlySubelement=innerFragments.get(0);
  if (!(onlySubelement instanceof XMLElement))   return false;
  XMLElement xmlElement=((XMLElement)onlySubelement);
  boolean nameEquals=name == null ? xmlElement.getName() == null : name.equals(xmlElement.getName());
  if (namespaceURI == null)   namespaceURI=NamespaceAttribute.DEFAULT_NAMESPACE;
  return nameEquals && namespaceURI.equals(xmlElement.getNamespaceURI());
}",0.9929522317932654
152654,"/** 
 * blocking operation until next stanza is ready
 * @return
 * @throws ParsingException
 */
public Stanza getNextStanza() throws ParsingException {
  if (parser == null)   open();
  XMLEvent event=null;
  while (true) {
    event=getNextXMLEvent();
    if (event == null)     return null;
    if (event.type == XMLEvent.DOCUMENT && !((DocumentEvent)event).start)     return null;
    if (event.type == XMLEvent.PREFIX_MAPPING) {
      PrefixMappingEvent prefixMappingEvent=(PrefixMappingEvent)event;
      String prefix=prefixMappingEvent.prefix;
      if (prefixesToNamespace.containsKey(prefix)) {
        throw new IllegalStateException(""String_Node_Str"" + prefix);
      }
      prefixesToNamespace.put(prefix,prefixMappingEvent.uri);
    }
    if (event.type == XMLEvent.ELEMENT)     break;
  }
  ElementEvent startElementEvent=(ElementEvent)event;
  if (!startElementEvent.start)   throw new ParsingException(""String_Node_Str"" + startElementEvent.element.rawname);
  String namespaceURI=resolveNamespace(startElementEvent);
  String name=startElementEvent.element.localpart;
  if (DEFAULT_OPENING_XML_ELEMENT_NAME.equals(name))   return getNextStanza();
  List<Attribute> stanzaAttributes=fillAttributesFromXML(startElementEvent);
  List<XMLFragment> xmlFragments=new ArrayList<XMLFragment>();
  if (!""String_Node_Str"".equals(name)) {
    if (!fillDeep(startElementEvent.element.rawname,xmlFragments))     throw new ParsingException(""String_Node_Str"");
  }
  return new Stanza(name,namespaceURI,stanzaAttributes,xmlFragments);
}","/** 
 * blocking operation until next stanza is ready
 * @return
 * @throws ParsingException
 */
public Stanza getNextStanza() throws ParsingException {
  if (parser == null)   open();
  XMLEvent event=null;
  while (true) {
    event=getNextXMLEvent();
    if (event == null)     return null;
    if (event.type == XMLEvent.DOCUMENT && !((DocumentEvent)event).start)     return null;
    if (event.type == XMLEvent.PREFIX_MAPPING) {
      PrefixMappingEvent prefixMappingEvent=(PrefixMappingEvent)event;
      String prefix=prefixMappingEvent.prefix;
      if (prefixesToNamespace.containsKey(prefix)) {
        throw new IllegalStateException(""String_Node_Str"" + prefix);
      }
      prefixesToNamespace.put(prefix,prefixMappingEvent.uri);
    }
    if (event.type == XMLEvent.ELEMENT)     break;
  }
  ElementEvent startElementEvent=(ElementEvent)event;
  if (!startElementEvent.start)   throw new ParsingException(""String_Node_Str"" + startElementEvent.element.rawname);
  String namespaceURI=resolveNamespace(startElementEvent);
  String name=startElementEvent.element.localpart;
  if (DEFAULT_OPENING_XML_ELEMENT_NAME.equals(name))   return getNextStanza();
  List<Attribute> stanzaAttributes=fillAttributesFromXML(startElementEvent);
  List<XMLFragment> xmlFragments=new ArrayList<XMLFragment>();
  if (!""String_Node_Str"".equals(name)) {
    if (!fillDeep(startElementEvent.element.rawname,xmlFragments))     throw new ParsingException(""String_Node_Str"");
  }
  return new Stanza(name,null,stanzaAttributes,xmlFragments);
}",0.9954397394136808
152655,"private void fillErrorStanza(XMPPCoreStanza stanza,StanzaErrorType type,StanzaErrorCondition errorCondition,String errorText,String errorLang,XMLElement errorConditionElement,StanzaBuilder responseBuilder){
  responseBuilder.addPreparedElement(stanza);
  responseBuilder.startInnerElement(""String_Node_Str"").addAttribute(""String_Node_Str"",type.value());
  responseBuilder.startInnerElement(errorCondition.value());
  responseBuilder.addNamespaceAttribute(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS);
  responseBuilder.endInnerElement();
  if (errorText != null && errorLang != null) {
    responseBuilder.startInnerElement(""String_Node_Str"").addNamespaceAttribute(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS).addAttribute(""String_Node_Str"",errorLang).addText(errorText);
  }
  if (errorConditionElement != null)   responseBuilder.addPreparedElement(errorConditionElement);
  responseBuilder.endInnerElement();
}","private void fillErrorStanza(XMPPCoreStanza stanza,StanzaErrorType type,StanzaErrorCondition errorCondition,String errorText,String errorLang,XMLElement errorConditionElement,StanzaBuilder responseBuilder){
  for (  XMLElement innerElement : stanza.getInnerElements()) {
    responseBuilder.addPreparedElement(innerElement);
  }
  responseBuilder.startInnerElement(""String_Node_Str"").addAttribute(""String_Node_Str"",type.value());
  responseBuilder.startInnerElement(errorCondition.value());
  responseBuilder.addNamespaceAttribute(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS);
  responseBuilder.endInnerElement();
  if (errorText != null && errorLang != null) {
    responseBuilder.startInnerElement(""String_Node_Str"").addNamespaceAttribute(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS).addAttribute(""String_Node_Str"",errorLang).addText(errorText);
  }
  if (errorConditionElement != null)   responseBuilder.addPreparedElement(errorConditionElement);
  responseBuilder.endInnerElement();
}",0.9542619542619544
152656,"public void testSubscribeNoFrom() throws Exception {
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Stanza stanza=sg.getStanza(null,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.RESULT.value(),response.getType());
  assertTrue(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement sub=response.getFirstInnerElement().getFirstInnerElement();
  assertEquals(""String_Node_Str"",sub.getName());
  assertEquals(testNode,sub.getAttributeValue(""String_Node_Str""));
  assertEquals(client.getFullQualifiedName(),sub.getAttributeValue(""String_Node_Str""));
  assertNotNull(sub.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",sub.getAttributeValue(""String_Node_Str""));
}","public void testSubscribeNoFrom() throws Exception {
  DefaultSubscribeStanzaGenerator sg=(DefaultSubscribeStanzaGenerator)getDefaultStanzaGenerator();
  sg.overrideSubscriberJID(client.getFullQualifiedName());
  Stanza stanza=sg.getStanza(null,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.RESULT.value(),response.getType());
  assertTrue(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement sub=response.getFirstInnerElement().getFirstInnerElement();
  assertEquals(""String_Node_Str"",sub.getName());
  assertEquals(testNode,sub.getAttributeValue(""String_Node_Str""));
  assertEquals(client.getFullQualifiedName(),sub.getAttributeValue(""String_Node_Str""));
  assertNotNull(sub.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",sub.getAttributeValue(""String_Node_Str""));
}",0.9385699899295066
152657,"/** 
 * tries to find the handler by trying 1. value of xmlElement's XMLNS attribute, if unique 2. xmlElements namespace, if the element name has a namespace prefix
 */
private StanzaHandler getHandlerForElement(Stanza stanza,XMLElement xmlElement){
  String namespace=xmlElement.getVerifier().getUniqueXMLNSValue();
  NamespaceHandlerDictionary namespaceHandlerDictionary=dictionaries.get(namespace);
  if (namespaceHandlerDictionary == null) {
    namespace=xmlElement.getNamespacePrefix();
    namespaceHandlerDictionary=dictionaries.get(namespace);
  }
  if (namespaceHandlerDictionary != null)   return namespaceHandlerDictionary.get(stanza);
  if (XMPPCoreStanza.getWrapper(stanza) != null)   return SERVICE_UNAVAILABLE_STANZA_ERROR_HANDLER;
  return null;
}","/** 
 * tries to find the handler by trying 1. value of xmlElement's XMLNS attribute, if unique 2. xmlElements namespace, if the element name has a namespace prefix
 */
private StanzaHandler getHandlerForElement(Stanza stanza,XMLElement xmlElement){
  String namespace=xmlElement.getNamespaceURI();
  NamespaceHandlerDictionary namespaceHandlerDictionary=dictionaries.get(namespace);
  if (namespaceHandlerDictionary == null) {
    namespace=xmlElement.getNamespacePrefix();
    namespaceHandlerDictionary=dictionaries.get(namespace);
  }
  if (namespaceHandlerDictionary != null)   return namespaceHandlerDictionary.get(stanza);
  if (XMPPCoreStanza.getWrapper(stanza) != null)   return SERVICE_UNAVAILABLE_STANZA_ERROR_HANDLER;
  return null;
}",0.9735099337748344
152658,"private XMLElement createElementOrStanza(String elementName,List<Attribute> attributes,String namespace,List<XMLFragment> innerFragments,boolean createStanza) throws DecodingException {
  int i=elementName.indexOf(""String_Node_Str"");
  if (i >= 1) {
    namespace=elementName.substring(i + 1);
    elementName=elementName.substring(0,i);
    if (""String_Node_Str"".equals(namespace) || ""String_Node_Str"".equals(elementName))     throw new DecodingException(""String_Node_Str"" + namespace + ""String_Node_Str""+ elementName);
  }
 else   if (i == 0) {
    throw new DecodingException(""String_Node_Str"");
  }
  if (createStanza)   return new Stanza(elementName,namespace,attributes,innerFragments);
 else   return new XMLElement(elementName,namespace,attributes,innerFragments);
}","private XMLElement createElementOrStanza(String elementName,List<Attribute> attributes,String namespacePrefix,List<XMLFragment> innerFragments,boolean createStanza) throws DecodingException {
  int i=elementName.indexOf(""String_Node_Str"");
  if (i >= 1) {
    namespacePrefix=elementName.substring(0,i);
    elementName=elementName.substring(i + 1);
    if (""String_Node_Str"".equals(namespacePrefix) || ""String_Node_Str"".equals(elementName))     throw new DecodingException(""String_Node_Str"" + namespacePrefix + ""String_Node_Str""+ elementName);
  }
 else   if (i == 0) {
    throw new DecodingException(""String_Node_Str"");
  }
  if (createStanza)   return new Stanza(elementName,namespacePrefix,attributes,innerFragments);
 else   return new XMLElement(elementName,namespacePrefix,attributes,innerFragments);
}",0.8952020202020202
152659,"public void testCreateDuplicate() throws Exception {
  String testNode=""String_Node_Str"";
  root.createNode(pubsubService,testNode);
  assertNotNull(root.find(testNode));
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Stanza stanza=sg.getStanza(client,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElements().get(1);
  XMLElement conflict=error.getFirstInnerElement();
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",conflict.getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,conflict.getVerifier().getUniqueXMLNSValue());
}","public void testCreateDuplicate() throws Exception {
  String testNode=""String_Node_Str"";
  root.createNode(pubsubService,testNode);
  assertNotNull(root.find(testNode));
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Stanza stanza=sg.getStanza(client,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElements().get(1);
  XMLElement conflict=error.getFirstInnerElement();
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  assertEquals(""String_Node_Str"",conflict.getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,conflict.getNamespaceURI());
}",0.9800399201596808
152660,"public void testPublishNoSuchNode() throws Exception {
  DefaultPublishStanzaGenerator sg=new DefaultPublishStanzaGenerator();
  Entity pubsubWrongNode=EntityImpl.parse(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubWrongNode,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testPublishNoSuchNode() throws Exception {
  DefaultPublishStanzaGenerator sg=new DefaultPublishStanzaGenerator();
  Entity pubsubWrongNode=EntityImpl.parse(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubWrongNode,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.9814814814814816
152661,"public void testPublishForbidden() throws Exception {
  DefaultPublishStanzaGenerator sg=new DefaultPublishStanzaGenerator();
  Entity yodaNotSubscribed=new EntityImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(yodaNotSubscribed,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(0,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testPublishForbidden() throws Exception {
  DefaultPublishStanzaGenerator sg=new DefaultPublishStanzaGenerator();
  Entity yodaNotSubscribed=new EntityImpl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(yodaNotSubscribed,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(0,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.9829787234042552
152662,"public void testPublishWithSubscriber() throws BindException {
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Entity francisco=createUser(""String_Node_Str"");
  Entity bernardo=createUser(""String_Node_Str"");
  node.subscribe(""String_Node_Str"",francisco);
  node.subscribe(""String_Node_Str"",bernardo);
  node.subscribe(""String_Node_Str"",client);
  assertEquals(3,node.countSubscriptions());
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.RESULT.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement pubsub=response.getFirstInnerElement();
  XMLElement publish=pubsub.getFirstInnerElement();
  XMLElement item=publish.getFirstInnerElement();
  assertEquals(""String_Node_Str"",pubsub.getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB,pubsub.getVerifier().getUniqueXMLNSValue());
  assertEquals(""String_Node_Str"",publish.getName());
  assertEquals(""String_Node_Str"",item.getName());
  assertNotNull(item.getAttributeValue(""String_Node_Str""));
  assertEquals(3,relay.getCountRelayed());
}","public void testPublishWithSubscriber() throws BindException {
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Entity francisco=createUser(""String_Node_Str"");
  Entity bernardo=createUser(""String_Node_Str"");
  node.subscribe(""String_Node_Str"",francisco);
  node.subscribe(""String_Node_Str"",bernardo);
  node.subscribe(""String_Node_Str"",client);
  assertEquals(3,node.countSubscriptions());
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.RESULT.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement pubsub=response.getFirstInnerElement();
  XMLElement publish=pubsub.getFirstInnerElement();
  XMLElement item=publish.getFirstInnerElement();
  assertEquals(""String_Node_Str"",pubsub.getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB,pubsub.getNamespaceURI());
  assertEquals(""String_Node_Str"",publish.getName());
  assertEquals(""String_Node_Str"",item.getName());
  assertNotNull(item.getAttributeValue(""String_Node_Str""));
  assertEquals(3,relay.getCountRelayed());
}",0.8437747819191118
152663,"public void testSubscribeJIDMalformed(){
  DefaultSubscribeStanzaGenerator sg=new DefaultSubscribeStanzaGenerator();
  sg.overrideSubscriberJID(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",testNode),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testSubscribeJIDMalformed(){
  DefaultSubscribeStanzaGenerator sg=new DefaultSubscribeStanzaGenerator();
  sg.overrideSubscriberJID(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",testNode),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.9808429118773946
152664,"public void testSubscribeNoSuchNode() throws Exception {
  DefaultSubscribeStanzaGenerator sg=new DefaultSubscribeStanzaGenerator();
  Entity pubsubWrongNode=EntityImpl.parse(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubWrongNode,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testSubscribeNoSuchNode() throws Exception {
  DefaultSubscribeStanzaGenerator sg=new DefaultSubscribeStanzaGenerator();
  Entity pubsubWrongNode=EntityImpl.parse(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubWrongNode,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.98158379373849
152665,"public void testSubscribeNonMatchingJIDs(){
  DefaultSubscribeStanzaGenerator sg=new DefaultSubscribeStanzaGenerator();
  sg.overrideSubscriberJID(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",testNode),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getVerifier().getUniqueXMLNSValue());
}","public void testSubscribeNonMatchingJIDs(){
  DefaultSubscribeStanzaGenerator sg=new DefaultSubscribeStanzaGenerator();
  sg.overrideSubscriberJID(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",testNode),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getNamespaceURI());
}",0.966996699669967
152666,"public void testUnsubscribeJIDMalformed(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  sg.overrideSubscriberJID(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testUnsubscribeJIDMalformed(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  sg.overrideSubscriberJID(""String_Node_Str"");
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.9811142587346552
152667,"public void testUnsubscribeForbidden() throws Exception {
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  String yoda=""String_Node_Str"";
  sg.overrideSubscriberJID(yoda);
  node.subscribe(""String_Node_Str"",EntityImpl.parse(yoda));
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(0,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testUnsubscribeForbidden() throws Exception {
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  String yoda=""String_Node_Str"";
  sg.overrideSubscriberJID(yoda);
  node.subscribe(""String_Node_Str"",EntityImpl.parse(yoda));
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(0,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.983402489626556
152668,"public void testUnsubscribeNoSuchSubscriber(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  assertFalse(node.isSubscribed(client));
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(0,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getVerifier().getUniqueXMLNSValue());
}","public void testUnsubscribeNoSuchSubscriber(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  assertFalse(node.isSubscribed(client));
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(0,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getNamespaceURI());
}",0.9686028257456828
152669,"public void testUnsubscribeNoSuchNode(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  Entity pubsubWrongNode=new EntityImpl(null,""String_Node_Str"",null);
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubWrongNode,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testUnsubscribeNoSuchNode(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  Entity pubsubWrongNode=new EntityImpl(null,""String_Node_Str"",null);
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubWrongNode,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertFalse(node.isSubscribed(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.9815157116451017
152670,"public void testUnsubscribeMultipleNoSubID(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  node.subscribe(""String_Node_Str"",client);
  node.subscribe(""String_Node_Str"",client);
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertTrue(node.isSubscribed(client));
  assertEquals(2,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getVerifier().getUniqueXMLNSValue());
}","public void testUnsubscribeMultipleNoSubID(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  node.subscribe(""String_Node_Str"",client);
  node.subscribe(""String_Node_Str"",client);
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertTrue(node.isSubscribed(client));
  assertEquals(2,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getNamespaceURI());
}",0.969650986342944
152671,"public void testUnsubscribeBadSubID(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  sg.setSubID(""String_Node_Str"");
  node.subscribe(""String_Node_Str"",client);
  node.subscribe(""String_Node_Str"",client);
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertTrue(node.isSubscribed(client));
  assertEquals(2,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getVerifier().getUniqueXMLNSValue());
}","public void testUnsubscribeBadSubID(){
  DefaultUnsubscribeStanzaGenerator sg=new DefaultUnsubscribeStanzaGenerator();
  sg.setSubID(""String_Node_Str"");
  node.subscribe(""String_Node_Str"",client);
  node.subscribe(""String_Node_Str"",client);
  ResponseStanzaContainer result=sendStanza(sg.getStanza(client,pubsubService,""String_Node_Str"",""String_Node_Str""),true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertTrue(node.isSubscribed(client));
  assertEquals(2,node.countSubscriptions(client));
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(2,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
  assertEquals(""String_Node_Str"",errorContent.get(1).getName());
  assertEquals(NamespaceURIs.XEP0060_PUBSUB_ERRORS,errorContent.get(1).getNamespaceURI());
}",0.9702602230483272
152672,"public void testDeleteNotAuth() throws Exception {
  String testNode=""String_Node_Str"";
  root.createNode(pubsubService,testNode);
  assertNotNull(root.find(testNode));
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Stanza stanza=sg.getStanza(client,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
  LeafNode n=root.find(testNode);
  assertNotNull(n);
}","public void testDeleteNotAuth() throws Exception {
  String testNode=""String_Node_Str"";
  root.createNode(pubsubService,testNode);
  assertNotNull(root.find(testNode));
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Stanza stanza=sg.getStanza(client,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
  LeafNode n=root.find(testNode);
  assertNotNull(n);
}",0.9623797025371827
152673,"public void testDeleteNoSuchNode() throws Exception {
  String testNode=""String_Node_Str"";
  assertNull(root.find(testNode));
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Stanza stanza=sg.getStanza(client,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getVerifier().getUniqueXMLNSValue());
}","public void testDeleteNoSuchNode() throws Exception {
  String testNode=""String_Node_Str"";
  assertNull(root.find(testNode));
  AbstractStanzaGenerator sg=getDefaultStanzaGenerator();
  Stanza stanza=sg.getStanza(client,pubsubService,""String_Node_Str"",testNode);
  ResponseStanzaContainer result=sendStanza(stanza,true);
  assertTrue(result.hasResponse());
  IQStanza response=new IQStanza(result.getResponseStanza());
  assertEquals(IQStanzaType.ERROR.value(),response.getType());
  assertEquals(""String_Node_Str"",response.getAttributeValue(""String_Node_Str""));
  XMLElement error=response.getInnerElementsNamed(""String_Node_Str"").get(0);
  assertEquals(""String_Node_Str"",error.getName());
  assertEquals(""String_Node_Str"",error.getAttributeValue(""String_Node_Str""));
  List<XMLElement> errorContent=error.getInnerElements();
  assertEquals(1,errorContent.size());
  assertEquals(""String_Node_Str"",errorContent.get(0).getName());
  assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_STANZAS,errorContent.get(0).getNamespaceURI());
}",0.9808795411089866
152674,"public boolean verify(Stanza stanza){
  verifyCalled=true;
  if (name != null && !name.equals(stanza.getName()))   return false;
  if (namespaceURI == null)   return true;
  boolean elementNamespaceMatches=false;
  if (namespaceURI != null && namespaceURI.equals(stanza.getNamespacePrefix()))   elementNamespaceMatches=true;
  boolean outerNamespaceMatches=false;
  boolean innerNamespaceMatches=false;
  if (namespaceURI != null && namespaceURI.equals(stanza.getVerifier().getUniqueXMLNSValue()))   outerNamespaceMatches=true;
  XMLElement firstInnerElement=stanza.getFirstInnerElement();
  if (firstInnerElement != null) {
    if (namespaceURI != null && namespaceURI.equals(firstInnerElement.getVerifier().getUniqueXMLNSValue()))     innerNamespaceMatches=true;
  }
  return elementNamespaceMatches || outerNamespaceMatches || innerNamespaceMatches;
}","public boolean verify(Stanza stanza){
  verifyCalled=true;
  if (name != null && !name.equals(stanza.getName()))   return false;
  if (namespaceURI == null)   return true;
  boolean elementNamespaceMatches=false;
  if (namespaceURI != null && namespaceURI.equals(stanza.getNamespacePrefix()))   elementNamespaceMatches=true;
  boolean outerNamespaceMatches=false;
  boolean innerNamespaceMatches=false;
  if (namespaceURI != null && namespaceURI.equals(stanza.getNamespaceURI()))   outerNamespaceMatches=true;
  XMLElement firstInnerElement=stanza.getFirstInnerElement();
  if (firstInnerElement != null) {
    if (namespaceURI != null && namespaceURI.equals(firstInnerElement.getNamespaceURI()))     innerNamespaceMatches=true;
  }
  return elementNamespaceMatches || outerNamespaceMatches || innerNamespaceMatches;
}",0.7392344497607656
152675,"@Override protected void processElement(IIOPMetaData metaData,XMLStreamReader reader,final PropertyReplacer propertyReplacer) throws XMLStreamException {
  Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
switch (namespace) {
case EJB3_IIOP:
{
      Element element=Element.forName(reader.getLocalName());
switch (element) {
case BINDING_NAME:
{
          metaData.setBindingName(getElementText(reader,propertyReplacer));
          break;
        }
case IOR_SECURITY_CONFIG:
{
        IORSecurityConfigMetaData iorSecurityMetaData=this.processIORSecurityConfig(reader,propertyReplacer);
        metaData.setIorSecurityConfigMetaData(iorSecurityMetaData);
        break;
      }
  }
  return;
}
}
super.processElement(metaData,reader,propertyReplacer);
}","@Override protected void processElement(IIOPMetaData metaData,XMLStreamReader reader,final PropertyReplacer propertyReplacer) throws XMLStreamException {
  Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
switch (namespace) {
case EJB3_IIOP:
{
      Element element=Element.forName(reader.getLocalName());
switch (element) {
case EJB_NAME:
        final String ejbName=getElementText(reader,propertyReplacer);
      break;
case BINDING_NAME:
{
      metaData.setBindingName(getElementText(reader,propertyReplacer));
      break;
    }
case IOR_SECURITY_CONFIG:
{
    IORSecurityConfigMetaData iorSecurityMetaData=this.processIORSecurityConfig(reader,propertyReplacer);
    metaData.setIorSecurityConfigMetaData(iorSecurityMetaData);
    break;
  }
}
return;
}
}
super.processElement(metaData,reader,propertyReplacer);
}",0.9188514357053684
152676,"public static void merge(JBossWebMetaData dest,JBossWebMetaData override,WebMetaData original,String overrideFile,String overridenFile,boolean mustOverride){
  NamedModuleImplMerger.merge(dest,override,original);
  if (override != null && override.getServletVersion() != null)   dest.setServletVersion(override.getServletVersion());
 else   if (original != null && original.getVersion() != null)   dest.setServletVersion(original.getVersion());
  if (override != null && override.getDistributable() != null)   dest.setDistributable(override.getDistributable());
 else   if (original != null && original.getDistributable() != null)   dest.setDistributable(original.getDistributable());
  if (override != null && override.isMetadataComplete() != false)   dest.setMetadataComplete(override.isMetadataComplete());
  if (original instanceof Web25MetaData) {
    Web25MetaData web25MD=(Web25MetaData)original;
    dest.setMetadataComplete(web25MD.isMetadataComplete());
  }
 else   if (original instanceof Web30MetaData) {
    Web30MetaData web30MetaData=(Web30MetaData)original;
    dest.setMetadataComplete(web30MetaData.isMetadataComplete());
  }
  if (override != null && override.isDisableCrossContext())   dest.setDisableCrossContext(override.isDisableCrossContext());
  if (override != null && override.getModuleName() != null)   dest.setModuleName(override.getModuleName());
 else   if (original instanceof NamedModule && ((NamedModule)original).getModuleName() != null)   dest.setModuleName(((NamedModule)original).getModuleName());
  if (override != null && override.getContextParams() != null)   dest.setContextParams(override.getContextParams());
 else   if (original != null && original.getContextParams() != null)   dest.setContextParams(original.getContextParams());
  if (override != null && override.getSessionConfig() != null)   dest.setSessionConfig(override.getSessionConfig());
 else   if (original != null && original.getSessionConfig() != null)   dest.setSessionConfig(original.getSessionConfig());
  if (override != null && override.getFilters() != null)   dest.setFilters(override.getFilters());
 else   if (original != null && original.getFilters() != null)   dest.setFilters(original.getFilters());
  if (override != null && override.getFilterMappings() != null)   dest.setFilterMappings(override.getFilterMappings());
 else   if (original != null && original.getFilterMappings() != null)   dest.setFilterMappings(original.getFilterMappings());
  if (override != null && override.getErrorPages() != null)   dest.setErrorPages(override.getErrorPages());
 else   if (original != null && original.getErrorPages() != null)   dest.setErrorPages(original.getErrorPages());
  if (override != null && override.getJspConfig() != null)   dest.setJspConfig(override.getJspConfig());
 else   if (original != null && original.getJspConfig() != null)   dest.setJspConfig(original.getJspConfig());
  if (override != null && override.getListeners() != null)   dest.setListeners(override.getListeners());
 else   if (original != null && original.getListeners() != null)   dest.setListeners(original.getListeners());
  if (override != null && override.getLoginConfig() != null)   dest.setLoginConfig(override.getLoginConfig());
 else   if (original != null && original.getLoginConfig() != null)   dest.setLoginConfig(original.getLoginConfig());
  if (override != null && override.getMimeMappings() != null)   dest.setMimeMappings(override.getMimeMappings());
 else   if (original != null && original.getMimeMappings() != null)   dest.setMimeMappings(original.getMimeMappings());
  if (override != null && override.getServletMappings() != null)   dest.setServletMappings(override.getServletMappings());
 else   if (original != null && original.getServletMappings() != null)   dest.setServletMappings(original.getServletMappings());
  if (override != null && override.getSecurityConstraints() != null)   dest.setSecurityConstraints(override.getSecurityConstraints());
 else   if (original != null && original.getSecurityConstraints() != null)   dest.setSecurityConstraints(original.getSecurityConstraints());
  if (override != null && override.getWelcomeFileList() != null)   dest.setWelcomeFileList(override.getWelcomeFileList());
 else   if (original != null && original.getWelcomeFileList() != null)   dest.setWelcomeFileList(original.getWelcomeFileList());
  if (override != null && override.getLocalEncodings() != null)   dest.setLocalEncodings(override.getLocalEncodings());
 else   if (original != null && original.getLocalEncodings() != null)   dest.setLocalEncodings(original.getLocalEncodings());
  if (override != null && override.getJaccAllStoreRole() != null)   dest.setJaccAllStoreRole(override.isJaccAllStoreRole());
  if (override != null && override.getDtdPublicId() != null)   dest.setDtdPublicId(override.getDtdPublicId());
  if (override != null && override.getDtdSystemId() != null)   dest.setDtdSystemId(override.getDtdSystemId());
  if (override != null && override.getVersion() != null)   dest.setVersion(override.getVersion());
 else   if (original != null && original.getVersion() != null)   dest.setVersion(original.getVersion());
  if (override != null && override.getContextRoot() != null)   dest.setContextRoot(override.getContextRoot());
  if (override != null && override.getAlternativeDD() != null)   dest.setAlternativeDD(override.getAlternativeDD());
  if (override != null && override.getSecurityDomain() != null)   dest.setSecurityDomain(override.getSecurityDomain());
  if (override != null && override.getJaccContextID() != null)   dest.setJaccContextID(override.getJaccContextID());
  if (override != null && override.getClassLoading() != null)   dest.setClassLoading(override.getClassLoading());
  if (override != null && override.getDepends() != null)   dest.setDepends(override.getDepends());
  if (override != null && override.getRunAsIdentity() != null)   dest.setRunAsIdentity(override.getRunAsIdentity());
  if (dest.getSecurityRoles() == null)   dest.setSecurityRoles(new SecurityRolesMetaData());
  SecurityRolesMetaData overrideRoles=null;
  SecurityRolesMetaData originalRoles=null;
  if (override != null)   overrideRoles=override.getSecurityRoles();
  if (original != null)   originalRoles=original.getSecurityRoles();
  SecurityRolesMetaDataMerger.merge(dest.getSecurityRoles(),overrideRoles,originalRoles);
  JBossServletsMetaData soverride=null;
  ServletsMetaData soriginal=null;
  if (override != null)   soverride=override.getServlets();
  if (original != null)   soriginal=original.getServlets();
  dest.setServlets(JBossServletsMetaDataMerger.merge(soverride,soriginal));
  MessageDestinationsMetaData overrideMsgDests=null;
  MessageDestinationsMetaData originalMsgDests=null;
  if (override != null && override.getMessageDestinations() != null)   overrideMsgDests=override.getMessageDestinations();
  if (original != null && original.getMessageDestinations() != null)   originalMsgDests=original.getMessageDestinations();
  dest.setMessageDestinations(MessageDestinationsMetaDataMerger.merge(overrideMsgDests,originalMsgDests,overridenFile,overrideFile));
  if (dest.getJndiEnvironmentRefsGroup() == null)   dest.setJndiEnvironmentRefsGroup(new EnvironmentRefsGroupMetaData());
  Environment env=null;
  EnvironmentRefsGroupMetaData jenv=null;
  if (override != null)   jenv=(EnvironmentRefsGroupMetaData)override.getJndiEnvironmentRefsGroup();
  if (original != null)   env=original.getJndiEnvironmentRefsGroup();
  EnvironmentRefsGroupMetaDataMerger.merge((EnvironmentRefsGroupMetaData)dest.getJndiEnvironmentRefsGroup(),jenv,env,overrideFile,overridenFile,mustOverride);
  if (override != null && override.getVirtualHosts() != null)   dest.setVirtualHosts(override.getVirtualHosts());
  if (override != null && override.isFlushOnSessionInvalidation())   dest.setFlushOnSessionInvalidation(override.isFlushOnSessionInvalidation());
  if (override != null && override.getReplicationConfig() != null)   dest.setReplicationConfig(override.getReplicationConfig());
  if (override != null && override.getPassivationConfig() != null)   dest.setPassivationConfig(override.getPassivationConfig());
  if (override != null && override.getWebserviceDescriptions() != null)   dest.setWebserviceDescriptions(override.getWebserviceDescriptions());
  if (override != null && override.getArbitraryMetadata() != null)   dest.setArbitraryMetadata(override.getArbitraryMetadata());
  if (override != null && override.getMaxActiveSessions() != null)   dest.setMaxActiveSessions(override.getMaxActiveSessions());
  if (override != null && override.getSessionCookies() != -1)   dest.setSessionCookies(override.getSessionCookies());
  JBossAnnotationsMetaData aoverride=null;
  AnnotationsMetaData aoriginal=null;
  if (override != null)   aoverride=override.getAnnotations();
  if (original != null)   aoriginal=original.getAnnotations();
  dest.setAnnotations(JBossAnnotationsMetaDataMerger.merge(aoverride,aoriginal));
  if (override != null && override.getContainerListeners() != null)   dest.setContainerListeners(override.getContainerListeners());
  if (override != null && override.getValves() != null)   dest.setValves(override.getValves());
  if (override != null && override.getOverlays() != null)   dest.setOverlays(override.getOverlays());
  if (override != null && override.isUseJBossAuthorization())   dest.setUseJBossAuthorization(override.isUseJBossAuthorization());
  if (override != null && !override.isDisableAudit())   dest.setDisableAudit(override.isDisableAudit());
}","public static void merge(JBossWebMetaData dest,JBossWebMetaData override,WebMetaData original,String overrideFile,String overridenFile,boolean mustOverride){
  NamedModuleImplMerger.merge(dest,override,original);
  if (override != null && override.getServletVersion() != null)   dest.setServletVersion(override.getServletVersion());
 else   if (original != null && original.getVersion() != null)   dest.setServletVersion(original.getVersion());
  if (override != null && override.getDistributable() != null)   dest.setDistributable(override.getDistributable());
 else   if (original != null && original.getDistributable() != null)   dest.setDistributable(original.getDistributable());
  if (override != null && override.isMetadataComplete() != false)   dest.setMetadataComplete(override.isMetadataComplete());
  if (original instanceof Web25MetaData) {
    Web25MetaData web25MD=(Web25MetaData)original;
    dest.setMetadataComplete(web25MD.isMetadataComplete());
  }
 else   if (original instanceof Web30MetaData) {
    Web30MetaData web30MetaData=(Web30MetaData)original;
    dest.setMetadataComplete(web30MetaData.isMetadataComplete());
  }
  if (override != null && override.isDisableCrossContext())   dest.setDisableCrossContext(override.isDisableCrossContext());
  if (override != null && override.getModuleName() != null)   dest.setModuleName(override.getModuleName());
 else   if (original instanceof NamedModule && ((NamedModule)original).getModuleName() != null)   dest.setModuleName(((NamedModule)original).getModuleName());
  if (override != null && override.getContextParams() != null)   dest.setContextParams(override.getContextParams());
 else   if (original != null && original.getContextParams() != null)   dest.setContextParams(original.getContextParams());
  if (override != null && override.getSessionConfig() != null)   dest.setSessionConfig(override.getSessionConfig());
 else   if (original != null && original.getSessionConfig() != null)   dest.setSessionConfig(original.getSessionConfig());
  if (override != null && override.getFilters() != null)   dest.setFilters(override.getFilters());
 else   if (original != null && original.getFilters() != null)   dest.setFilters(original.getFilters());
  if (override != null && override.getFilterMappings() != null)   dest.setFilterMappings(override.getFilterMappings());
 else   if (original != null && original.getFilterMappings() != null)   dest.setFilterMappings(original.getFilterMappings());
  if (override != null && override.getErrorPages() != null)   dest.setErrorPages(override.getErrorPages());
 else   if (original != null && original.getErrorPages() != null)   dest.setErrorPages(original.getErrorPages());
  if (override != null && override.getJspConfig() != null)   dest.setJspConfig(override.getJspConfig());
 else   if (original != null && original.getJspConfig() != null)   dest.setJspConfig(original.getJspConfig());
  if (override != null && override.getListeners() != null)   dest.setListeners(override.getListeners());
 else   if (original != null && original.getListeners() != null)   dest.setListeners(original.getListeners());
  if (override != null && override.getLoginConfig() != null)   dest.setLoginConfig(override.getLoginConfig());
 else   if (original != null && original.getLoginConfig() != null)   dest.setLoginConfig(original.getLoginConfig());
  if (override != null && override.getMimeMappings() != null)   dest.setMimeMappings(override.getMimeMappings());
 else   if (original != null && original.getMimeMappings() != null)   dest.setMimeMappings(original.getMimeMappings());
  if (override != null && override.getServletMappings() != null)   dest.setServletMappings(override.getServletMappings());
 else   if (original != null && original.getServletMappings() != null)   dest.setServletMappings(original.getServletMappings());
  if (override != null && override.getSecurityConstraints() != null)   dest.setSecurityConstraints(override.getSecurityConstraints());
 else   if (original != null && original.getSecurityConstraints() != null)   dest.setSecurityConstraints(original.getSecurityConstraints());
  if (override != null && override.getWelcomeFileList() != null)   dest.setWelcomeFileList(override.getWelcomeFileList());
 else   if (original != null && original.getWelcomeFileList() != null)   dest.setWelcomeFileList(original.getWelcomeFileList());
  if (override != null && override.getLocalEncodings() != null)   dest.setLocalEncodings(override.getLocalEncodings());
 else   if (original != null && original.getLocalEncodings() != null)   dest.setLocalEncodings(original.getLocalEncodings());
  if (override != null && override.getJaccAllStoreRole() != null)   dest.setJaccAllStoreRole(override.isJaccAllStoreRole());
  if (override != null && override.getDtdPublicId() != null)   dest.setDtdPublicId(override.getDtdPublicId());
  if (override != null && override.getDtdSystemId() != null)   dest.setDtdSystemId(override.getDtdSystemId());
  if (override != null && override.getVersion() != null)   dest.setVersion(override.getVersion());
 else   if (original != null && original.getVersion() != null)   dest.setVersion(original.getVersion());
  if (override != null && override.getContextRoot() != null)   dest.setContextRoot(override.getContextRoot());
  if (override != null && override.getAlternativeDD() != null)   dest.setAlternativeDD(override.getAlternativeDD());
  if (override != null && override.getSecurityDomain() != null)   dest.setSecurityDomain(override.getSecurityDomain());
  if (override != null && override.getJaccContextID() != null)   dest.setJaccContextID(override.getJaccContextID());
  if (override != null && override.getClassLoading() != null)   dest.setClassLoading(override.getClassLoading());
  if (override != null && override.getDepends() != null)   dest.setDepends(override.getDepends());
  if (override != null && override.getRunAsIdentity() != null)   dest.setRunAsIdentity(override.getRunAsIdentity());
  if (dest.getSecurityRoles() == null)   dest.setSecurityRoles(new SecurityRolesMetaData());
  SecurityRolesMetaData overrideRoles=null;
  SecurityRolesMetaData originalRoles=null;
  if (override != null)   overrideRoles=override.getSecurityRoles();
  if (original != null)   originalRoles=original.getSecurityRoles();
  SecurityRolesMetaDataMerger.merge(dest.getSecurityRoles(),overrideRoles,originalRoles);
  JBossServletsMetaData soverride=null;
  ServletsMetaData soriginal=null;
  if (override != null)   soverride=override.getServlets();
  if (original != null)   soriginal=original.getServlets();
  dest.setServlets(JBossServletsMetaDataMerger.merge(soverride,soriginal));
  MessageDestinationsMetaData overrideMsgDests=null;
  MessageDestinationsMetaData originalMsgDests=null;
  if (override != null && override.getMessageDestinations() != null)   overrideMsgDests=override.getMessageDestinations();
  if (original != null && original.getMessageDestinations() != null)   originalMsgDests=original.getMessageDestinations();
  dest.setMessageDestinations(MessageDestinationsMetaDataMerger.merge(overrideMsgDests,originalMsgDests,overridenFile,overrideFile));
  if (dest.getJndiEnvironmentRefsGroup() == null)   dest.setJndiEnvironmentRefsGroup(new EnvironmentRefsGroupMetaData());
  Environment env=null;
  EnvironmentRefsGroupMetaData jenv=null;
  if (override != null)   jenv=(EnvironmentRefsGroupMetaData)override.getJndiEnvironmentRefsGroup();
  if (original != null)   env=original.getJndiEnvironmentRefsGroup();
  EnvironmentRefsGroupMetaDataMerger.merge((EnvironmentRefsGroupMetaData)dest.getJndiEnvironmentRefsGroup(),jenv,env,overrideFile,overridenFile,mustOverride);
  if (override != null && override.getVirtualHosts() != null)   dest.setVirtualHosts(override.getVirtualHosts());
  if (override != null && override.isFlushOnSessionInvalidation())   dest.setFlushOnSessionInvalidation(override.isFlushOnSessionInvalidation());
  if (override != null && override.getReplicationConfig() != null)   dest.setReplicationConfig(override.getReplicationConfig());
  if (override != null && override.getPassivationConfig() != null)   dest.setPassivationConfig(override.getPassivationConfig());
  if (override != null && override.getWebserviceDescriptions() != null)   dest.setWebserviceDescriptions(override.getWebserviceDescriptions());
  if (override != null && override.getArbitraryMetadata() != null)   dest.setArbitraryMetadata(override.getArbitraryMetadata());
  if (override != null && override.getMaxActiveSessions() != null)   dest.setMaxActiveSessions(override.getMaxActiveSessions());
  if (override != null && override.getSessionCookies() != -1)   dest.setSessionCookies(override.getSessionCookies());
  JBossAnnotationsMetaData aoverride=null;
  AnnotationsMetaData aoriginal=null;
  if (override != null)   aoverride=override.getAnnotations();
  if (original != null)   aoriginal=original.getAnnotations();
  dest.setAnnotations(JBossAnnotationsMetaDataMerger.merge(aoverride,aoriginal));
  if (override != null && override.getContainerListeners() != null)   dest.setContainerListeners(override.getContainerListeners());
  if (override != null && override.getValves() != null)   dest.setValves(override.getValves());
  if (override != null && override.getOverlays() != null)   dest.setOverlays(override.getOverlays());
  if (override != null && override.isUseJBossAuthorization())   dest.setUseJBossAuthorization(override.isUseJBossAuthorization());
  if (override != null && !override.isDisableAudit())   dest.setDisableAudit(override.isDisableAudit());
  if (override != null && override.isSymbolicLinkingEnabled())   dest.setSymbolicLinkingEnabled(override.isSymbolicLinkingEnabled());
}",0.9930201062610688
152677,"public static JBossWebMetaData parse(XMLStreamReader reader,PropertyReplacer propertyReplacer) throws XMLStreamException {
  reader.require(START_DOCUMENT,null,null);
  Version version=null;
  while (reader.hasNext() && reader.next() != START_ELEMENT) {
    if (reader.getEventType() == DTD) {
      String dtdLocation=readDTDLocation(reader);
      if (dtdLocation != null) {
        version=Location.getVersion(dtdLocation);
      }
      if (version == null) {
        version=Version.JBOSS_WEB_5_0;
      }
    }
  }
  String schemaLocation=readSchemaLocation(reader);
  if (schemaLocation != null) {
    version=Location.getVersion(schemaLocation);
  }
  if (version == null) {
    version=Version.JBOSS_WEB_6_0;
  }
  JBossWebMetaData wmd=null;
switch (version) {
case JBOSS_WEB_3_0:
    wmd=new JBoss4xDTDWebMetaData();
  break;
case JBOSS_WEB_3_2:
wmd=new JBoss4xDTDWebMetaData();
break;
case JBOSS_WEB_4_0:
wmd=new JBoss4xDTDWebMetaData();
break;
case JBOSS_WEB_4_2:
wmd=new JBoss4xDTDWebMetaData();
break;
case JBOSS_WEB_5_0:
wmd=new JBoss50DTDWebMetaData();
break;
case JBOSS_WEB_5_1:
wmd=new JBoss50WebMetaData();
break;
case JBOSS_WEB_6_0:
wmd=new JBoss60WebMetaData();
break;
case JBOSS_WEB_7_0:
wmd=new JBoss70WebMetaData();
break;
}
final int count=reader.getAttributeCount();
for (int i=0; i < count; i++) {
final String value=reader.getAttributeValue(i);
if (attributeHasNamespace(reader,i)) {
continue;
}
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case VERSION:
{
wmd.setVersion(value);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
EnvironmentRefsGroupMetaData env=new EnvironmentRefsGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (EnvironmentRefsGroupMetaDataParser.parse(reader,env,propertyReplacer)) {
if (wmd.getJndiEnvironmentRefsGroup() == null) {
wmd.setJndiEnvironmentRefsGroup(env);
}
continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONTEXT_ROOT:
wmd.setContextRoot(getElementText(reader,propertyReplacer));
break;
case VIRTUAL_HOST:
List<String> virtualHosts=wmd.getVirtualHosts();
if (virtualHosts == null) {
virtualHosts=new ArrayList<String>();
wmd.setVirtualHosts(virtualHosts);
virtualHosts.add(getElementText(reader,propertyReplacer));
}
 else {
throw duplicateNamedElement(reader,Element.VIRTUAL_HOST.toString());
}
break;
case ANNOTATION:
JBossAnnotationsMetaData annotations=wmd.getAnnotations();
if (annotations == null) {
annotations=new JBossAnnotationsMetaData();
wmd.setAnnotations(annotations);
}
annotations.add(JBossAnnotationMetaDataParser.parse(reader,propertyReplacer));
break;
case LISTENER:
List<ContainerListenerMetaData> listeners=wmd.getContainerListeners();
if (listeners == null) {
listeners=new ArrayList<ContainerListenerMetaData>();
wmd.setContainerListeners(listeners);
}
listeners.add(ContainerListenerMetaDataParser.parse(reader,propertyReplacer));
break;
case SESSION_CONFIG:
wmd.setSessionConfig(SessionConfigMetaDataParser.parse(reader,propertyReplacer));
break;
case VALVE:
List<ValveMetaData> valves=wmd.getValves();
if (valves == null) {
valves=new ArrayList<ValveMetaData>();
wmd.setValves(valves);
}
valves.add(ValveMetaDataParser.parse(reader,propertyReplacer));
break;
case OVERLAY:
List<String> overlays=wmd.getOverlays();
if (overlays == null) {
overlays=new ArrayList<String>();
wmd.setOverlays(overlays);
}
overlays.add(getElementText(reader,propertyReplacer));
break;
case SECURITY_DOMAIN:
wmd.setSecurityDomain(getElementText(reader,propertyReplacer));
break;
case SECURITY_ROLE:
SecurityRolesMetaData securityRoles=wmd.getSecurityRoles();
if (securityRoles == null) {
securityRoles=new SecurityRolesMetaData();
wmd.setSecurityRoles(securityRoles);
}
securityRoles.add(SecurityRoleMetaDataParser.parse(reader,propertyReplacer));
break;
case JACC_STAR_ROLE_ALLOW:
wmd.setJaccAllStoreRole(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case DISABLE_CROSS_CONTEXT:
wmd.setDisableCrossContext(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case USE_JBOSS_AUTHORIZATION:
wmd.setUseJBossAuthorization(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case DISABLE_AUDIT:
wmd.setDisableAudit(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case SERVLET:
JBossServletsMetaData servlets=wmd.getServlets();
if (servlets == null) {
servlets=new JBossServletsMetaData();
wmd.setServlets(servlets);
}
servlets.add(JBossServletMetaDataParser.parse(reader,propertyReplacer));
break;
case MAX_ACTIVE_SESSIONS:
wmd.setMaxActiveSessions(Integer.valueOf(getElementText(reader,propertyReplacer)));
break;
case REPLICATION_CONFIG:
wmd.setReplicationConfig(ReplicationConfigParser.parse(reader,propertyReplacer));
break;
case PASSIVATION_CONFIG:
wmd.setPassivationConfig(PassivationConfigParser.parse(reader,propertyReplacer));
break;
case DISTINCT_NAME:
final String val=getElementText(reader,propertyReplacer);
wmd.setDistinctName(val);
break;
case SYMBOLIC_ENABLED:
wmd.setSymbolicLinking(Boolean.parseBoolean(getElementText(reader)));
break;
default :
throw unexpectedElement(reader);
}
}
return wmd;
}","public static JBossWebMetaData parse(XMLStreamReader reader,PropertyReplacer propertyReplacer) throws XMLStreamException {
  reader.require(START_DOCUMENT,null,null);
  Version version=null;
  while (reader.hasNext() && reader.next() != START_ELEMENT) {
    if (reader.getEventType() == DTD) {
      String dtdLocation=readDTDLocation(reader);
      if (dtdLocation != null) {
        version=Location.getVersion(dtdLocation);
      }
      if (version == null) {
        version=Version.JBOSS_WEB_5_0;
      }
    }
  }
  String schemaLocation=readSchemaLocation(reader);
  if (schemaLocation != null) {
    version=Location.getVersion(schemaLocation);
  }
  if (version == null) {
    version=Version.JBOSS_WEB_6_0;
  }
  JBossWebMetaData wmd=null;
switch (version) {
case JBOSS_WEB_3_0:
    wmd=new JBoss4xDTDWebMetaData();
  break;
case JBOSS_WEB_3_2:
wmd=new JBoss4xDTDWebMetaData();
break;
case JBOSS_WEB_4_0:
wmd=new JBoss4xDTDWebMetaData();
break;
case JBOSS_WEB_4_2:
wmd=new JBoss4xDTDWebMetaData();
break;
case JBOSS_WEB_5_0:
wmd=new JBoss50DTDWebMetaData();
break;
case JBOSS_WEB_5_1:
wmd=new JBoss50WebMetaData();
break;
case JBOSS_WEB_6_0:
wmd=new JBoss60WebMetaData();
break;
case JBOSS_WEB_7_0:
wmd=new JBoss70WebMetaData();
break;
case JBOSS_WEB_7_1:
wmd=new JBoss70WebMetaData();
break;
}
final int count=reader.getAttributeCount();
for (int i=0; i < count; i++) {
final String value=reader.getAttributeValue(i);
if (attributeHasNamespace(reader,i)) {
continue;
}
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case VERSION:
{
wmd.setVersion(value);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
EnvironmentRefsGroupMetaData env=new EnvironmentRefsGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (EnvironmentRefsGroupMetaDataParser.parse(reader,env,propertyReplacer)) {
if (wmd.getJndiEnvironmentRefsGroup() == null) {
wmd.setJndiEnvironmentRefsGroup(env);
}
continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONTEXT_ROOT:
wmd.setContextRoot(getElementText(reader,propertyReplacer));
break;
case VIRTUAL_HOST:
List<String> virtualHosts=wmd.getVirtualHosts();
if (virtualHosts == null) {
virtualHosts=new ArrayList<String>();
wmd.setVirtualHosts(virtualHosts);
virtualHosts.add(getElementText(reader,propertyReplacer));
}
 else {
throw duplicateNamedElement(reader,Element.VIRTUAL_HOST.toString());
}
break;
case ANNOTATION:
JBossAnnotationsMetaData annotations=wmd.getAnnotations();
if (annotations == null) {
annotations=new JBossAnnotationsMetaData();
wmd.setAnnotations(annotations);
}
annotations.add(JBossAnnotationMetaDataParser.parse(reader,propertyReplacer));
break;
case LISTENER:
List<ContainerListenerMetaData> listeners=wmd.getContainerListeners();
if (listeners == null) {
listeners=new ArrayList<ContainerListenerMetaData>();
wmd.setContainerListeners(listeners);
}
listeners.add(ContainerListenerMetaDataParser.parse(reader,propertyReplacer));
break;
case SESSION_CONFIG:
wmd.setSessionConfig(SessionConfigMetaDataParser.parse(reader,propertyReplacer));
break;
case VALVE:
List<ValveMetaData> valves=wmd.getValves();
if (valves == null) {
valves=new ArrayList<ValveMetaData>();
wmd.setValves(valves);
}
valves.add(ValveMetaDataParser.parse(reader,propertyReplacer));
break;
case OVERLAY:
List<String> overlays=wmd.getOverlays();
if (overlays == null) {
overlays=new ArrayList<String>();
wmd.setOverlays(overlays);
}
overlays.add(getElementText(reader,propertyReplacer));
break;
case SECURITY_DOMAIN:
wmd.setSecurityDomain(getElementText(reader,propertyReplacer));
break;
case SECURITY_ROLE:
SecurityRolesMetaData securityRoles=wmd.getSecurityRoles();
if (securityRoles == null) {
securityRoles=new SecurityRolesMetaData();
wmd.setSecurityRoles(securityRoles);
}
securityRoles.add(SecurityRoleMetaDataParser.parse(reader,propertyReplacer));
break;
case JACC_STAR_ROLE_ALLOW:
wmd.setJaccAllStoreRole(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case DISABLE_CROSS_CONTEXT:
wmd.setDisableCrossContext(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case USE_JBOSS_AUTHORIZATION:
wmd.setUseJBossAuthorization(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case DISABLE_AUDIT:
wmd.setDisableAudit(Boolean.valueOf(getElementText(reader,propertyReplacer)));
break;
case SERVLET:
JBossServletsMetaData servlets=wmd.getServlets();
if (servlets == null) {
servlets=new JBossServletsMetaData();
wmd.setServlets(servlets);
}
servlets.add(JBossServletMetaDataParser.parse(reader,propertyReplacer));
break;
case MAX_ACTIVE_SESSIONS:
wmd.setMaxActiveSessions(Integer.valueOf(getElementText(reader,propertyReplacer)));
break;
case REPLICATION_CONFIG:
wmd.setReplicationConfig(ReplicationConfigParser.parse(reader,propertyReplacer));
break;
case PASSIVATION_CONFIG:
wmd.setPassivationConfig(PassivationConfigParser.parse(reader,propertyReplacer));
break;
case DISTINCT_NAME:
final String val=getElementText(reader,propertyReplacer);
wmd.setDistinctName(val);
break;
case SYMBOLIC_ENABLED:
wmd.setSymbolicLinkingEnabled(Boolean.parseBoolean(getElementText(reader,propertyReplacer)));
break;
default :
throw unexpectedElement(reader);
}
}
return wmd;
}",0.9922569544020649
152678,"public static ContainerListenerMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  ContainerListenerMetaData containerListener=new ContainerListenerMetaData();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CLASS_NAME:
      containerListener.setListenerClass(getElementText(reader));
    break;
case MODULE:
  containerListener.setModule(getElementText(reader));
break;
case LISTENER_TYPE:
containerListener.setListenerType(ContainerListenerType.valueOf(getElementText(reader)));
break;
case PARAM:
List<ParamValueMetaData> params=containerListener.getParams();
if (params == null) {
params=new ArrayList<ParamValueMetaData>();
containerListener.setParams(params);
}
params.add(ParamValueMetaDataParser.parse(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return containerListener;
}","public static ContainerListenerMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  ContainerListenerMetaData containerListener=new ContainerListenerMetaData();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CLASS_NAME:
      containerListener.setListenerClass(getElementText(reader));
    break;
case MODULE:
  containerListener.setModule(getElementText(reader));
break;
case LISTENER_TYPE:
try {
containerListener.setListenerType(ContainerListenerType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
break;
case PARAM:
List<ParamValueMetaData> params=containerListener.getParams();
if (params == null) {
params=new ArrayList<ParamValueMetaData>();
containerListener.setParams(params);
}
params.add(ParamValueMetaDataParser.parse(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return containerListener;
}",0.958052822371828
152679,"public static ServletSecurityMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  ServletSecurityMetaData servletSecurity=new ServletSecurityMetaData();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HTTP_METHOD_CONSTRAINT:
      List<HttpMethodConstraintMetaData> httpMethodConstraints=servletSecurity.getHttpMethodConstraints();
    if (httpMethodConstraints == null) {
      httpMethodConstraints=new ArrayList<HttpMethodConstraintMetaData>();
      servletSecurity.setHttpMethodConstraints(httpMethodConstraints);
    }
  httpMethodConstraints.add(HttpMethodConstraintMetaDataParser.parse(reader));
break;
case EMPTY_ROLE_SEMANTIC:
servletSecurity.setEmptyRoleSemantic(EmptyRoleSemanticType.valueOf(getElementText(reader)));
break;
case TRANSPORT_GUARANTEE:
servletSecurity.setTransportGuarantee(TransportGuaranteeType.valueOf(getElementText(reader)));
break;
case ROLE_ALLOWED:
List<String> rolesAllowed=servletSecurity.getRolesAllowed();
if (rolesAllowed == null) {
rolesAllowed=new ArrayList<String>();
servletSecurity.setRolesAllowed(rolesAllowed);
}
rolesAllowed.add(getElementText(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return servletSecurity;
}","public static ServletSecurityMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  ServletSecurityMetaData servletSecurity=new ServletSecurityMetaData();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HTTP_METHOD_CONSTRAINT:
      List<HttpMethodConstraintMetaData> httpMethodConstraints=servletSecurity.getHttpMethodConstraints();
    if (httpMethodConstraints == null) {
      httpMethodConstraints=new ArrayList<HttpMethodConstraintMetaData>();
      servletSecurity.setHttpMethodConstraints(httpMethodConstraints);
    }
  httpMethodConstraints.add(HttpMethodConstraintMetaDataParser.parse(reader));
break;
case EMPTY_ROLE_SEMANTIC:
try {
servletSecurity.setEmptyRoleSemantic(EmptyRoleSemanticType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
break;
case TRANSPORT_GUARANTEE:
try {
servletSecurity.setTransportGuarantee(TransportGuaranteeType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
break;
case ROLE_ALLOWED:
List<String> rolesAllowed=servletSecurity.getRolesAllowed();
if (rolesAllowed == null) {
rolesAllowed=new ArrayList<String>();
servletSecurity.setRolesAllowed(rolesAllowed);
}
rolesAllowed.add(getElementText(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return servletSecurity;
}",0.9414739884393064
152680,"public static TagMetaData parse(XMLStreamReader reader,Version version) throws XMLStreamException {
  TagMetaData tag=null;
switch (version) {
case TLD_1_1:
    tag=new Tag11MetaData();
  break;
case TLD_1_2:
tag=new Tag12MetaData();
break;
default :
tag=new TagMetaData();
}
final int count=reader.getAttributeCount();
for (int i=0; i < count; i++) {
final String value=reader.getAttributeValue(i);
if (attributeHasNamespace(reader,i)) {
continue;
}
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
tag.setId(value);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
DescriptionGroupMetaData descriptionGroup=new DescriptionGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionGroupMetaDataParser.parse(reader,descriptionGroup)) {
if (tag.getDescriptionGroup() == null) {
tag.setDescriptionGroup(descriptionGroup);
}
continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case NAME:
tag.setName(getElementText(reader));
break;
case TAG_CLASS:
tag.setTagClass(getElementText(reader));
break;
case TAGCLASS:
if (version == Version.TLD_1_1) {
tag.setTagClass(getElementText(reader));
}
 else if (version == Version.TLD_1_2) {
tag.setTagClass(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case TEI_CLASS:
tag.setTeiClass(getElementText(reader));
break;
case TEICLASS:
if (version == Version.TLD_1_1) {
tag.setTeiClass(getElementText(reader));
}
 else if (version == Version.TLD_1_2) {
tag.setTeiClass(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case BODY_CONTENT:
tag.setBodyContent(BodyContentType.valueOf(getElementText(reader)));
break;
case BODYCONTENT:
if (version == Version.TLD_1_1) {
tag.setBodyContent(BodyContentType.valueOf(getElementText(reader)));
}
 else if (version == Version.TLD_1_2) {
tag.setBodyContent(BodyContentType.valueOf(getElementText(reader)));
}
 else {
throw unexpectedElement(reader);
}
break;
case INFO:
if (version == Version.TLD_1_1) {
((Tag11MetaData)tag).setInfo(getElementText(reader));
}
 else if (version == Version.TLD_1_2) {
getElementText(reader);
}
 else {
throw unexpectedElement(reader);
}
break;
case SMALL_ICON:
if (version == Version.TLD_1_2) {
((Tag12MetaData)tag).setSmallIcon(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case LARGE_ICON:
if (version == Version.TLD_1_2) {
((Tag12MetaData)tag).setLargeIcon(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case VARIABLE:
List<VariableMetaData> variables=tag.getVariables();
if (variables == null) {
variables=new ArrayList<VariableMetaData>();
tag.setVariables(variables);
}
variables.add(VariableMetaDataParser.parse(reader));
break;
case ATTRIBUTE:
List<AttributeMetaData> attributes=tag.getAttributes();
if (attributes == null) {
attributes=new ArrayList<AttributeMetaData>();
tag.setAttributes(attributes);
}
attributes.add(AttributeMetaDataParser.parse(reader));
break;
case DYNAMIC_ATTRIBUTES:
tag.setDynamicAttributes(getElementText(reader));
break;
case EXAMPLE:
List<String> examples=tag.getExamples();
if (examples == null) {
examples=new ArrayList<String>();
tag.setExamples(examples);
}
examples.add(getElementText(reader));
break;
case TAG_EXTENSION:
List<TldExtensionMetaData> extensions=tag.getTagExtensions();
if (extensions == null) {
extensions=new ArrayList<TldExtensionMetaData>();
tag.setTagExtensions(extensions);
}
extensions.add(TldExtensionMetaDataParser.parse(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return tag;
}","public static TagMetaData parse(XMLStreamReader reader,Version version) throws XMLStreamException {
  TagMetaData tag=null;
switch (version) {
case TLD_1_1:
    tag=new Tag11MetaData();
  break;
case TLD_1_2:
tag=new Tag12MetaData();
break;
default :
tag=new TagMetaData();
}
final int count=reader.getAttributeCount();
for (int i=0; i < count; i++) {
final String value=reader.getAttributeValue(i);
if (attributeHasNamespace(reader,i)) {
continue;
}
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
tag.setId(value);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
DescriptionGroupMetaData descriptionGroup=new DescriptionGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionGroupMetaDataParser.parse(reader,descriptionGroup)) {
if (tag.getDescriptionGroup() == null) {
tag.setDescriptionGroup(descriptionGroup);
}
continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case NAME:
tag.setName(getElementText(reader));
break;
case TAG_CLASS:
tag.setTagClass(getElementText(reader));
break;
case TAGCLASS:
if (version == Version.TLD_1_1) {
tag.setTagClass(getElementText(reader));
}
 else if (version == Version.TLD_1_2) {
tag.setTagClass(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case TEI_CLASS:
tag.setTeiClass(getElementText(reader));
break;
case TEICLASS:
if (version == Version.TLD_1_1) {
tag.setTeiClass(getElementText(reader));
}
 else if (version == Version.TLD_1_2) {
tag.setTeiClass(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case BODY_CONTENT:
try {
tag.setBodyContent(BodyContentType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
break;
case BODYCONTENT:
if (version == Version.TLD_1_1) {
try {
tag.setBodyContent(BodyContentType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
}
 else if (version == Version.TLD_1_2) {
try {
tag.setBodyContent(BodyContentType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
}
 else {
throw unexpectedElement(reader);
}
break;
case INFO:
if (version == Version.TLD_1_1) {
((Tag11MetaData)tag).setInfo(getElementText(reader));
}
 else if (version == Version.TLD_1_2) {
getElementText(reader);
}
 else {
throw unexpectedElement(reader);
}
break;
case SMALL_ICON:
if (version == Version.TLD_1_2) {
((Tag12MetaData)tag).setSmallIcon(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case LARGE_ICON:
if (version == Version.TLD_1_2) {
((Tag12MetaData)tag).setLargeIcon(getElementText(reader));
}
 else {
throw unexpectedElement(reader);
}
break;
case VARIABLE:
List<VariableMetaData> variables=tag.getVariables();
if (variables == null) {
variables=new ArrayList<VariableMetaData>();
tag.setVariables(variables);
}
variables.add(VariableMetaDataParser.parse(reader));
break;
case ATTRIBUTE:
List<AttributeMetaData> attributes=tag.getAttributes();
if (attributes == null) {
attributes=new ArrayList<AttributeMetaData>();
tag.setAttributes(attributes);
}
attributes.add(AttributeMetaDataParser.parse(reader));
break;
case DYNAMIC_ATTRIBUTES:
tag.setDynamicAttributes(getElementText(reader));
break;
case EXAMPLE:
List<String> examples=tag.getExamples();
if (examples == null) {
examples=new ArrayList<String>();
tag.setExamples(examples);
}
examples.add(getElementText(reader));
break;
case TAG_EXTENSION:
List<TldExtensionMetaData> extensions=tag.getTagExtensions();
if (extensions == null) {
extensions=new ArrayList<TldExtensionMetaData>();
tag.setTagExtensions(extensions);
}
extensions.add(TldExtensionMetaDataParser.parse(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return tag;
}",0.96763883339992
152681,"public static VariableMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  VariableMetaData variable=new VariableMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        variable.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionsImpl descriptions=new DescriptionsImpl();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionsMetaDataParser.parse(reader,descriptions)) {
  if (variable.getDescriptions() == null) {
    variable.setDescriptions(descriptions);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case NAME_GIVEN:
  variable.setNameGiven(getElementText(reader));
break;
case NAME_FROM_ATTRIBUTE:
variable.setNameFromAttribute(getElementText(reader));
break;
case VARIABLE_CLASS:
variable.setVariableClass(getElementText(reader));
break;
case DECLARE:
variable.setDeclare(getElementText(reader));
break;
case SCOPE:
variable.setScope(VariableScopeType.valueOf(getElementText(reader)));
break;
default :
throw unexpectedElement(reader);
}
}
return variable;
}","public static VariableMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  VariableMetaData variable=new VariableMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        variable.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionsImpl descriptions=new DescriptionsImpl();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionsMetaDataParser.parse(reader,descriptions)) {
  if (variable.getDescriptions() == null) {
    variable.setDescriptions(descriptions);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case NAME_GIVEN:
  variable.setNameGiven(getElementText(reader));
break;
case NAME_FROM_ATTRIBUTE:
variable.setNameFromAttribute(getElementText(reader));
break;
case VARIABLE_CLASS:
variable.setVariableClass(getElementText(reader));
break;
case DECLARE:
variable.setDeclare(getElementText(reader));
break;
case SCOPE:
try {
variable.setScope(VariableScopeType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
break;
default :
throw unexpectedElement(reader);
}
}
return variable;
}",0.971588916169765
152682,"public static FilterMappingMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  FilterMappingMetaData filterMapping=new FilterMappingMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        filterMapping.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case FILTER_NAME:
  filterMapping.setFilterName(getElementText(reader));
break;
case URL_PATTERN:
List<String> urlPatterns=filterMapping.getUrlPatterns();
if (urlPatterns == null) {
urlPatterns=new ArrayList<String>();
filterMapping.setUrlPatterns(urlPatterns);
}
urlPatterns.add(getElementText(reader));
break;
case SERVLET_NAME:
List<String> servletNames=filterMapping.getServletNames();
if (servletNames == null) {
servletNames=new ArrayList<String>();
filterMapping.setServletNames(servletNames);
}
servletNames.add(getElementText(reader));
break;
case DISPATCHER:
List<DispatcherType> dispatchers=filterMapping.getDispatchers();
if (dispatchers == null) {
dispatchers=new ArrayList<DispatcherType>();
filterMapping.setDispatchers(dispatchers);
}
dispatchers.add(DispatcherType.valueOf(getElementText(reader)));
break;
default :
throw unexpectedElement(reader);
}
}
return filterMapping;
}","public static FilterMappingMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  FilterMappingMetaData filterMapping=new FilterMappingMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        filterMapping.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case FILTER_NAME:
  filterMapping.setFilterName(getElementText(reader));
break;
case URL_PATTERN:
List<String> urlPatterns=filterMapping.getUrlPatterns();
if (urlPatterns == null) {
urlPatterns=new ArrayList<String>();
filterMapping.setUrlPatterns(urlPatterns);
}
urlPatterns.add(getElementText(reader));
break;
case SERVLET_NAME:
List<String> servletNames=filterMapping.getServletNames();
if (servletNames == null) {
servletNames=new ArrayList<String>();
filterMapping.setServletNames(servletNames);
}
servletNames.add(getElementText(reader));
break;
case DISPATCHER:
List<DispatcherType> dispatchers=filterMapping.getDispatchers();
if (dispatchers == null) {
dispatchers=new ArrayList<DispatcherType>();
filterMapping.setDispatchers(dispatchers);
}
try {
dispatchers.add(DispatcherType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
break;
default :
throw unexpectedElement(reader);
}
}
return filterMapping;
}",0.9443609022556392
152683,"public static SessionConfigMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  SessionConfigMetaData sessionConfig=new SessionConfigMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        sessionConfig.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SESSION_TIMEOUT:
  try {
    sessionConfig.setSessionTimeout(Integer.valueOf(getElementText(reader)));
  }
 catch (  NumberFormatException e) {
    throw unexpectedValue(reader,e);
  }
break;
case COOKIE_CONFIG:
sessionConfig.setCookieConfig(CookieConfigMetaDataParser.parse(reader));
break;
case TRACKING_MODE:
List<SessionTrackingModeType> trackingModes=sessionConfig.getSessionTrackingModes();
if (trackingModes == null) {
trackingModes=new ArrayList<SessionTrackingModeType>();
sessionConfig.setSessionTrackingModes(trackingModes);
}
trackingModes.add(SessionTrackingModeType.valueOf(getElementText(reader)));
break;
default :
throw unexpectedElement(reader);
}
}
return sessionConfig;
}","public static SessionConfigMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  SessionConfigMetaData sessionConfig=new SessionConfigMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        sessionConfig.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SESSION_TIMEOUT:
  try {
    sessionConfig.setSessionTimeout(Integer.valueOf(getElementText(reader)));
  }
 catch (  NumberFormatException e) {
    throw unexpectedValue(reader,e);
  }
break;
case COOKIE_CONFIG:
sessionConfig.setCookieConfig(CookieConfigMetaDataParser.parse(reader));
break;
case TRACKING_MODE:
List<SessionTrackingModeType> trackingModes=sessionConfig.getSessionTrackingModes();
if (trackingModes == null) {
trackingModes=new ArrayList<SessionTrackingModeType>();
sessionConfig.setSessionTrackingModes(trackingModes);
}
try {
trackingModes.add(SessionTrackingModeType.valueOf(getElementText(reader)));
}
 catch (IllegalArgumentException e) {
throw unexpectedValue(reader,e);
}
break;
default :
throw unexpectedElement(reader);
}
}
return sessionConfig;
}",0.9614466052541796
152684,"public static UserDataConstraintMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  UserDataConstraintMetaData userDataConstraint=new UserDataConstraintMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        userDataConstraint.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionsImpl descriptions=new DescriptionsImpl();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionsMetaDataParser.parse(reader,descriptions)) {
  if (userDataConstraint.getDescriptions() == null) {
    userDataConstraint.setDescriptions(descriptions);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case TRANSPORT_GUARANTEE:
  userDataConstraint.setTransportGuarantee(TransportGuaranteeType.valueOf(getElementText(reader)));
break;
default :
throw unexpectedElement(reader);
}
}
return userDataConstraint;
}","public static UserDataConstraintMetaData parse(XMLStreamReader reader) throws XMLStreamException {
  UserDataConstraintMetaData userDataConstraint=new UserDataConstraintMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (attributeHasNamespace(reader,i)) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        userDataConstraint.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionsImpl descriptions=new DescriptionsImpl();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionsMetaDataParser.parse(reader,descriptions)) {
  if (userDataConstraint.getDescriptions() == null) {
    userDataConstraint.setDescriptions(descriptions);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case TRANSPORT_GUARANTEE:
  try {
    userDataConstraint.setTransportGuarantee(TransportGuaranteeType.valueOf(getElementText(reader)));
  }
 catch (  IllegalArgumentException e) {
    throw unexpectedValue(reader,e);
  }
break;
default :
throw unexpectedElement(reader);
}
}
return userDataConstraint;
}",0.9620151939224312
152685,"public void merge(final ApplicationClientMetaData override,final ApplicationClientMetaData original){
  IdMetaDataImplWithDescriptionGroupMerger.merge(this,override,original);
  if (override != null) {
    this.metadataComplete=override.isMetadataComplete();
  }
  if (override != null && override.getEnvironmentRefsGroupMetaData() != null) {
    this.environmentRefsGroupMetaData.merge(override.getEnvironmentRefsGroupMetaData(),original.getEnvironmentRefsGroupMetaData());
  }
 else   if (original != null && original.getEnvironmentRefsGroupMetaData() != null) {
    this.environmentRefsGroupMetaData=original.getEnvironmentRefsGroupMetaData();
  }
  if (override != null && override.getCallbackHandler() != null) {
    this.callbackHandler=override.getCallbackHandler();
  }
 else   if (original != null && original.getCallbackHandler() != null) {
    this.callbackHandler=original.getCallbackHandler();
  }
  if (override != null && override.getVersion() != null) {
    version=override.getVersion();
  }
 else   if (original != null && original.getVersion() != null) {
    version=original.getVersion();
  }
}","public void merge(final ApplicationClientMetaData override,final ApplicationClientMetaData original){
  IdMetaDataImplWithDescriptionGroupMerger.merge(this,override,original);
  if (override != null) {
    this.metadataComplete=override.isMetadataComplete();
  }
 else   if (original != null) {
    this.metadataComplete=original.isMetadataComplete();
  }
  if (override != null && override.getEnvironmentRefsGroupMetaData() != null) {
    this.environmentRefsGroupMetaData.merge(override.getEnvironmentRefsGroupMetaData(),original.getEnvironmentRefsGroupMetaData());
  }
 else   if (original != null && original.getEnvironmentRefsGroupMetaData() != null) {
    this.environmentRefsGroupMetaData=original.getEnvironmentRefsGroupMetaData();
  }
  if (override != null && override.getCallbackHandler() != null) {
    this.callbackHandler=override.getCallbackHandler();
  }
 else   if (original != null && original.getCallbackHandler() != null) {
    this.callbackHandler=original.getCallbackHandler();
  }
  if (override != null && override.getVersion() != null) {
    version=override.getVersion();
  }
 else   if (original != null && original.getVersion() != null) {
    version=original.getVersion();
  }
}",0.959931064196467
152686,"private final void assertUnknownOrMessageDrivenBean(){
  throw new RuntimeException(""String_Node_Str"");
}","private final void assertUnknownOrMessageDrivenBean(){
  if (getEjbType() != null && getEjbType() != EjbType.MESSAGE_DRIVEN)   throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ getEjbType());
}",0.6073619631901841
152687,"/** 
 * {@inheritDoc}
 */
@Override public void merge(MessageDrivenBeanMetaData override,MessageDrivenBeanMetaData original){
  super.merge(override,original);
  MessageDrivenBean31MetaData overrideMetaData=(MessageDrivenBean31MetaData)override;
  MessageDrivenBean31MetaData originalMetaData=(MessageDrivenBean31MetaData)original;
  Collection<TimerMetaData> originalTimers=original == null ? null : originalMetaData.timers;
  Collection<TimerMetaData> overrideTimers=override == null ? null : overrideMetaData.timers;
  if (originalTimers != null || overrideTimers != null) {
    if (this.timers == null) {
      this.timers=new ArrayList<TimerMetaData>();
    }
    MergeUtil.merge(this.timers,overrideTimers,originalTimers);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void merge(JBossGenericBeanMetaData override,MessageDrivenBeanMetaData original){
  super.merge(override,original);
  MessageDrivenBean31MetaData originalMetaData=(MessageDrivenBean31MetaData)original;
  Collection<TimerMetaData> originalTimers=original == null ? null : originalMetaData.timers;
  Collection<TimerMetaData> overrideTimers=override == null ? null : override.getTimers();
  if (originalTimers != null || overrideTimers != null) {
    if (this.timers == null) {
      this.timers=new ArrayList<TimerMetaData>();
    }
    MergeUtil.merge(this.timers,overrideTimers,originalTimers);
  }
}",0.7082728592162555
152688,"public void merge(MessageDrivenBeanMetaData override,MessageDrivenBeanMetaData original){
  super.merge(override,original);
  if (override != null && override.acknowledgeMode != null)   this.acknowledgeMode=override.acknowledgeMode;
 else   if (original != null)   this.acknowledgeMode=original.acknowledgeMode;
  if ((override != null && override.activationConfig != null) || (original != null && original.activationConfig != null)) {
    activationConfig=new ActivationConfigMetaData();
    activationConfig.merge(override != null ? override.activationConfig : null,original != null ? original.activationConfig : null);
  }
  if ((override != null && override.aroundInvokes != null) || (original != null && original.aroundInvokes != null)) {
    aroundInvokes=new AroundInvokesMetaData();
    aroundInvokes.merge(override != null ? override.aroundInvokes : null,original != null ? original.aroundInvokes : null);
  }
  if (override != null && override.messageDestinationLink != null)   this.messageDestinationLink=override.messageDestinationLink;
 else   if (original != null)   this.messageDestinationLink=original.messageDestinationLink;
  if (override != null && override.messageDestinationType != null)   this.messageDestinationType=override.messageDestinationType;
 else   if (original != null)   this.messageDestinationType=original.messageDestinationType;
  if (override != null && override.messageSelector != null)   this.messageSelector=override.messageSelector;
 else   if (original != null)   this.messageSelector=original.messageSelector;
  if (override != null && override.messagingType != null)   this.messagingType=override.messagingType;
 else   if (original != null)   this.messagingType=original.messagingType;
  if (override != null && override.subscriptionDurability != null)   this.subscriptionDurability=override.subscriptionDurability;
 else   if (original != null)   this.subscriptionDurability=original.subscriptionDurability;
  if (override != null && override.timeoutMethod != null)   this.timeoutMethod=override.timeoutMethod;
 else   if (original != null)   this.timeoutMethod=original.timeoutMethod;
  if (override != null && override.transactionType != null)   this.transactionType=override.transactionType;
 else   if (original != null)   this.transactionType=original.transactionType;
}","public void merge(JBossGenericBeanMetaData override,MessageDrivenBeanMetaData original){
  super.merge(override,original);
  if (override != null && override.getAcknowledgeMode() != null)   this.acknowledgeMode=override.getAcknowledgeMode();
 else   if (original != null)   this.acknowledgeMode=original.acknowledgeMode;
  if ((override != null && override.getActivationConfig() != null) || (original != null && original.activationConfig != null)) {
    activationConfig=new ActivationConfigMetaData();
    activationConfig.merge(override != null ? override.getActivationConfig() : null,original != null ? original.activationConfig : null);
  }
  if (override != null && override.getDestinationJndiName() != null) {
    if (activationConfig == null) {
      activationConfig=new ActivationConfigMetaData();
    }
    ActivationConfigPropertyMetaData destination=null;
    if (activationConfig.getActivationConfigProperties() == null) {
      activationConfig.setActivationConfigProperties(new ActivationConfigPropertiesMetaData());
    }
    for (    ActivationConfigPropertyMetaData prop : activationConfig.getActivationConfigProperties()) {
      if (prop.getActivationConfigPropertyName().equals(""String_Node_Str"")) {
        destination=prop;
        break;
      }
    }
    if (destination == null) {
      destination=new ActivationConfigPropertyMetaData();
      destination.setActivationConfigPropertyName(""String_Node_Str"");
      activationConfig.getActivationConfigProperties().add(destination);
    }
    destination.setValue(override.getDestinationJndiName());
  }
  if ((override != null && override.getAroundInvokes() != null) || (original != null && original.aroundInvokes != null)) {
    aroundInvokes=new AroundInvokesMetaData();
    aroundInvokes.merge(override != null ? override.getAroundInvokes() : null,original != null ? original.aroundInvokes : null);
  }
  if (override != null && override.getMessageDestinationLink() != null)   this.messageDestinationLink=override.getMessageDestinationLink();
 else   if (original != null)   this.messageDestinationLink=original.messageDestinationLink;
  if (override != null && override.getMessageDestinationType() != null)   this.messageDestinationType=override.getMessageDestinationType();
 else   if (original != null)   this.messageDestinationType=original.messageDestinationType;
  if (override != null && override.getMessageSelector() != null)   this.messageSelector=override.getMessageSelector();
 else   if (original != null)   this.messageSelector=original.messageSelector;
  if (override != null && override.getMessagingType() != null)   this.messagingType=override.getMessagingType();
 else   if (original != null)   this.messagingType=original.messagingType;
  if (override != null && override.getSubscriptionDurability() != null)   this.subscriptionDurability=override.getSubscriptionDurability();
 else   if (original != null)   this.subscriptionDurability=original.subscriptionDurability;
  if (override != null && override.getTimeoutMethod() != null)   this.timeoutMethod=override.getTimeoutMethod();
 else   if (original != null)   this.timeoutMethod=original.timeoutMethod;
  if (override != null && override.getTransactionType() != null)   this.transactionType=override.getTransactionType();
 else   if (original != null)   this.transactionType=original.transactionType;
}",0.7245814977973568
152689,"/** 
 * Tests that only valid session-type values (stateless, stateful, singleton) for session beans are allowed in ejb-jar.xml
 * @throws Exception
 */
@Test public void testInvalidSessionTypeInEjbJarXml() throws Exception {
  try {
    EjbJarMetaData ejb31=unmarshal(EjbJarMetaData.class,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  JBossXBException jbxbe) {
    logger.debug(""String_Node_Str"",jbxbe);
  }
}","/** 
 * Tests that only valid session-type values (stateless, stateful, singleton) for session beans are allowed in ejb-jar.xml
 * @throws Exception
 */
@Test public void testInvalidSessionTypeInEjbJarXml() throws Exception {
  try {
    EjbJarMetaData ejb31=unmarshal(EjbJarMetaData.class,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  XMLStreamException e) {
    logger.debug(""String_Node_Str"",e);
    String message=e.getMessage();
    assertTrue(message.contains(""String_Node_Str""));
  }
}",0.8824786324786325
152690,"public int getBlockTint(fb world,int original,int x,int y,int z,TintType ttype){
  double temperature=0.0;
  double humidity=0.0;
switch (ttype) {
case GRASS:
    world.a().a(x,z,1,1);
  temperature=world.a().a[0];
humidity=world.a().b[0];
try {
return colorMult(original,hx.a(temperature,humidity));
}
 catch (Throwable t) {
System.err.println(""String_Node_Str"" + temperature + ""String_Node_Str""+ humidity);
t.printStackTrace();
}
case FOLIAGE:
world.a().a(x,z,1,1);
temperature=world.a().a[0];
humidity=world.a().b[0];
try {
return colorMult(original,je.a(temperature,humidity));
}
 catch (Throwable t) {
System.err.println(""String_Node_Str"" + temperature + ""String_Node_Str""+ humidity);
t.printStackTrace();
}
case PINE:
return colorMult(original,je.a());
case BIRCH:
return colorMult(original,je.b());
case REDSTONE:
int blockmeta=world.e(x,y,z);
float floatmeta=(float)blockmeta / 15F;
float r=floatmeta * 0.6F + 0.4F;
if (blockmeta == 0) {
r=0.0F;
}
float g=floatmeta * floatmeta * 0.7F - 0.5F;
float b=floatmeta * floatmeta * 0.6F - 0.7F;
if (g < 0.0F) {
g=0.0F;
}
if (b < 0.0F) {
b=0.0F;
}
int tint=((int)(b * 0xff)) + (((int)(g * 0xff)) << 8) + (((int)(r * 0xff)) << 16);
return colorMult(original,tint);
default :
return original;
}
}","public int getBlockTint(fb world,int original,int x,int y,int z,TintType ttype){
  if (true)   return original;
  double temperature=0.0;
  double humidity=0.0;
switch (ttype) {
case GRASS:
synchronized (world) {
      world.a().a(x,z,1,1);
      temperature=world.a().a[0];
      humidity=world.a().b[0];
    }
  try {
    return colorMult(original,hx.a(temperature,humidity));
  }
 catch (  Throwable t) {
    System.err.println(""String_Node_Str"" + temperature + ""String_Node_Str""+ humidity);
    t.printStackTrace();
  }
case FOLIAGE:
synchronized (world) {
  world.a().a(x,z,1,1);
  temperature=world.a().a[0];
  humidity=world.a().b[0];
}
try {
return colorMult(original,je.a(temperature,humidity));
}
 catch (Throwable t) {
System.err.println(""String_Node_Str"" + temperature + ""String_Node_Str""+ humidity);
t.printStackTrace();
}
case PINE:
return colorMult(original,je.a());
case BIRCH:
return colorMult(original,je.b());
case REDSTONE:
int blockmeta=world.e(x,y,z);
float floatmeta=(float)blockmeta / 15F;
float r=floatmeta * 0.6F + 0.4F;
if (blockmeta == 0) {
r=0.0F;
}
float g=floatmeta * floatmeta * 0.7F - 0.5F;
float b=floatmeta * floatmeta * 0.6F - 0.7F;
if (g < 0.0F) {
g=0.0F;
}
if (b < 0.0F) {
b=0.0F;
}
int tint=((int)(b * 0xff)) + (((int)(g * 0xff)) << 8) + (((int)(r * 0xff)) << 16);
return colorMult(original,tint);
default :
return original;
}
}",0.9498276522405208
152691,"private void restoreDefaultAPN(int subId){
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  try {
    db.delete(CARRIERS_TABLE,null,null);
  }
 catch (  SQLException e) {
    loge(""String_Node_Str"" + e);
  }
  setPreferredApnId((long)INVALID_APN_ID,subId);
  mOpenHelper.initDatabase(db);
}","private void restoreDefaultAPN(int subId){
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  TelephonyManager mTm=(TelephonyManager)getContext().getSystemService(Context.TELEPHONY_SERVICE);
  SubscriptionManager sm=SubscriptionManager.from(getContext());
  String selSubOperatorNumeric=mTm.getSimOperator(subId);
  String otherSubOperatorNumeric=null;
  String where=null;
  List<SubscriptionInfo> subInfoList=sm.getActiveSubscriptionInfoList();
  int simCountWithSameNumeric=0;
  if (subInfoList != null && subInfoList.size() > 1) {
    where=""String_Node_Str"";
    for (    SubscriptionInfo subInfo : subInfoList) {
      if (subId != subInfo.getSubscriptionId()) {
        otherSubOperatorNumeric=mTm.getSimOperator(subInfo.getSubscriptionId());
        if (!otherSubOperatorNumeric.equalsIgnoreCase(selSubOperatorNumeric)) {
          where=where + ""String_Node_Str"" + otherSubOperatorNumeric+ ""String_Node_Str"";
        }
 else {
          simCountWithSameNumeric++;
        }
      }
    }
    where=where + ""String_Node_Str"" + USER_EDITED+ ""String_Node_Str"";
  }
  if (simCountWithSameNumeric == subInfoList.size() - 1) {
    where=null;
  }
  log(""String_Node_Str"" + where);
  try {
    db.delete(CARRIERS_TABLE,where,null);
  }
 catch (  SQLException e) {
    loge(""String_Node_Str"" + e);
  }
  setPreferredApnId((long)INVALID_APN_ID,subId);
  mOpenHelper.initDatabase(db);
}",0.3481349911190053
152692,"private void createSimInfoTable(SQLiteDatabase db){
  if (DBG)   log(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID+ ""String_Node_Str""+ SubscriptionManager.ICC_ID+ ""String_Node_Str""+ SubscriptionManager.SIM_SLOT_INDEX+ ""String_Node_Str""+ SubscriptionManager.SIM_NOT_INSERTED+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NAME+ ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE_DEFAULT_SOURCE+ ""String_Node_Str""+ SubscriptionManager.COLOR+ ""String_Node_Str""+ SubscriptionManager.COLOR_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.NUMBER+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_FORMAT+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str""+ ""String_Node_Str"");
  if (DBG)   log(""String_Node_Str"");
}","private void createSimInfoTable(SQLiteDatabase db){
  if (DBG)   log(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID+ ""String_Node_Str""+ SubscriptionManager.ICC_ID+ ""String_Node_Str""+ SubscriptionManager.SIM_SLOT_INDEX+ ""String_Node_Str""+ SubscriptionManager.SIM_NOT_INSERTED+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NAME+ ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE_DEFAULT_SOURCE+ ""String_Node_Str""+ SubscriptionManager.COLOR+ ""String_Node_Str""+ SubscriptionManager.COLOR_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.NUMBER+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_FORMAT+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONING_STATUS+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONED+ ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str""+ ""String_Node_Str"");
  if (DBG)   log(""String_Node_Str"");
}",0.9687662675689744
152693,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
  if (oldVersion < (5 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=5 << 16 | 6;
  }
  if (oldVersion < (6 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=6 << 16 | 6;
  }
  if (oldVersion < (7 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=7 << 16 | 6;
  }
  if (oldVersion < (8 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=8 << 16 | 6;
  }
  if (oldVersion < (9 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ SubscriptionManager.INVALID_SUBSCRIPTION_ID+ ""String_Node_Str"");
    oldVersion=9 << 16 | 6;
  }
  if (oldVersion < (10 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=10 << 16 | 6;
  }
  if (oldVersion < (11 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=11 << 16 | 6;
  }
  if (oldVersion < (12 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=12 << 16 | 6;
  }
  if (oldVersion < (13 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=13 << 16 | 6;
  }
  if (oldVersion < (14 << 16 | 6)) {
  }
  if (oldVersion < (15 << 16 | 6)) {
    Cursor c;
    String[] proj={""String_Node_Str""};
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
    }
    preserveUserAndCarrierApns(db);
    c=db.query(CARRIERS_TABLE,null,null,null,null,null,null);
    if (VDBG) {
      log(""String_Node_Str"" + ""String_Node_Str"" + ((c == null) ? 0 : c.getCount()));
    }
    createCarriersTable(db,CARRIERS_TABLE_TMP);
    copyPreservedApnsToNewTable(db,c);
    c.close();
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE);
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE_TMP + ""String_Node_Str""+ CARRIERS_TABLE+ ""String_Node_Str"");
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_UNEDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_UNEDITED + ""String_Node_Str""+ c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_EDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_EDITED + ""String_Node_Str""+ c.getCount());
      c.close();
    }
    oldVersion=15 << 16 | 6;
  }
  if (oldVersion < (16 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=16 << 16 | 6;
  }
  if (oldVersion < (17 << 16 | 6)) {
    Cursor c=null;
    try {
      c=db.query(CARRIERS_TABLE,null,null,null,null,null,null,String.valueOf(1));
      if (c == null || c.getColumnIndex(USER_VISIBLE) == -1) {
        db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
      }
 else {
        if (DBG) {
          log(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
        }
      }
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    oldVersion=17 << 16 | 6;
  }
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
  if (oldVersion < (5 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=5 << 16 | 6;
  }
  if (oldVersion < (6 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=6 << 16 | 6;
  }
  if (oldVersion < (7 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=7 << 16 | 6;
  }
  if (oldVersion < (8 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=8 << 16 | 6;
  }
  if (oldVersion < (9 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ SubscriptionManager.INVALID_SUBSCRIPTION_ID+ ""String_Node_Str"");
    oldVersion=9 << 16 | 6;
  }
  if (oldVersion < (10 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=10 << 16 | 6;
  }
  if (oldVersion < (11 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=11 << 16 | 6;
  }
  if (oldVersion < (12 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=12 << 16 | 6;
  }
  if (oldVersion < (13 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=13 << 16 | 6;
  }
  if (oldVersion < (14 << 16 | 6)) {
  }
  if (oldVersion < (15 << 16 | 6)) {
    Cursor c;
    String[] proj={""String_Node_Str""};
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
    }
    preserveUserAndCarrierApns(db);
    c=db.query(CARRIERS_TABLE,null,null,null,null,null,null);
    if (VDBG) {
      log(""String_Node_Str"" + ""String_Node_Str"" + ((c == null) ? 0 : c.getCount()));
    }
    createCarriersTable(db,CARRIERS_TABLE_TMP);
    copyPreservedApnsToNewTable(db,c);
    c.close();
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE);
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE_TMP + ""String_Node_Str""+ CARRIERS_TABLE+ ""String_Node_Str"");
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_UNEDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_UNEDITED + ""String_Node_Str""+ c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_EDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_EDITED + ""String_Node_Str""+ c.getCount());
      c.close();
    }
    oldVersion=15 << 16 | 6;
  }
  if (oldVersion < (16 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=16 << 16 | 6;
  }
  if (oldVersion < (17 << 16 | 6)) {
    Cursor c=null;
    try {
      c=db.query(CARRIERS_TABLE,null,null,null,null,null,null,String.valueOf(1));
      if (c == null || c.getColumnIndex(USER_VISIBLE) == -1) {
        db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
      }
 else {
        if (DBG) {
          log(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
        }
      }
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    oldVersion=17 << 16 | 6;
  }
  if (oldVersion < (18 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONING_STATUS+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONED+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=18 << 16 | 6;
  }
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
}",0.9672705130156796
152694,"private void createSimInfoTable(SQLiteDatabase db){
  if (DBG)   log(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID+ ""String_Node_Str""+ SubscriptionManager.ICC_ID+ ""String_Node_Str""+ SubscriptionManager.SIM_SLOT_INDEX+ ""String_Node_Str""+ SubscriptionManager.SIM_NOT_INSERTED+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NAME+ ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE_DEFAULT_SOURCE+ ""String_Node_Str""+ SubscriptionManager.COLOR+ ""String_Node_Str""+ SubscriptionManager.COLOR_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.NUMBER+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_FORMAT+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str""+ ""String_Node_Str"");
  if (DBG)   log(""String_Node_Str"");
}","private void createSimInfoTable(SQLiteDatabase db){
  if (DBG)   log(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID+ ""String_Node_Str""+ SubscriptionManager.ICC_ID+ ""String_Node_Str""+ SubscriptionManager.SIM_SLOT_INDEX+ ""String_Node_Str""+ SubscriptionManager.SIM_NOT_INSERTED+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NAME+ ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE_DEFAULT_SOURCE+ ""String_Node_Str""+ SubscriptionManager.COLOR+ ""String_Node_Str""+ SubscriptionManager.COLOR_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.NUMBER+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_FORMAT+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONING_STATUS+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONED+ ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str""+ ""String_Node_Str"");
  if (DBG)   log(""String_Node_Str"");
}",0.9687662675689744
152695,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
  if (oldVersion < (5 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=5 << 16 | 6;
  }
  if (oldVersion < (6 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=6 << 16 | 6;
  }
  if (oldVersion < (7 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=7 << 16 | 6;
  }
  if (oldVersion < (8 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=8 << 16 | 6;
  }
  if (oldVersion < (9 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ SubscriptionManager.INVALID_SUBSCRIPTION_ID+ ""String_Node_Str"");
    oldVersion=9 << 16 | 6;
  }
  if (oldVersion < (10 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=10 << 16 | 6;
  }
  if (oldVersion < (11 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=11 << 16 | 6;
  }
  if (oldVersion < (12 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=12 << 16 | 6;
  }
  if (oldVersion < (13 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=13 << 16 | 6;
  }
  if (oldVersion < (14 << 16 | 6)) {
  }
  if (oldVersion < (15 << 16 | 6)) {
    Cursor c;
    String[] proj={""String_Node_Str""};
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
    }
    preserveUserAndCarrierApns(db);
    c=db.query(CARRIERS_TABLE,null,null,null,null,null,null);
    if (VDBG) {
      log(""String_Node_Str"" + ""String_Node_Str"" + ((c == null) ? 0 : c.getCount()));
    }
    createCarriersTable(db,CARRIERS_TABLE_TMP);
    copyPreservedApnsToNewTable(db,c);
    c.close();
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE);
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE_TMP + ""String_Node_Str""+ CARRIERS_TABLE+ ""String_Node_Str"");
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_UNEDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_UNEDITED + ""String_Node_Str""+ c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_EDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_EDITED + ""String_Node_Str""+ c.getCount());
      c.close();
    }
    oldVersion=15 << 16 | 6;
  }
  if (oldVersion < (16 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=16 << 16 | 6;
  }
  if (oldVersion < (17 << 16 | 6)) {
    Cursor c=null;
    try {
      c=db.query(CARRIERS_TABLE,null,null,null,null,null,null,String.valueOf(1));
      if (c == null || c.getColumnIndex(USER_VISIBLE) == -1) {
        db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
      }
 else {
        if (DBG) {
          log(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
        }
      }
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    oldVersion=17 << 16 | 6;
  }
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
  if (oldVersion < (5 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=5 << 16 | 6;
  }
  if (oldVersion < (6 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=6 << 16 | 6;
  }
  if (oldVersion < (7 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=7 << 16 | 6;
  }
  if (oldVersion < (8 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=8 << 16 | 6;
  }
  if (oldVersion < (9 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ SubscriptionManager.INVALID_SUBSCRIPTION_ID+ ""String_Node_Str"");
    oldVersion=9 << 16 | 6;
  }
  if (oldVersion < (10 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=10 << 16 | 6;
  }
  if (oldVersion < (11 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=11 << 16 | 6;
  }
  if (oldVersion < (12 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=12 << 16 | 6;
  }
  if (oldVersion < (13 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=13 << 16 | 6;
  }
  if (oldVersion < (14 << 16 | 6)) {
  }
  if (oldVersion < (15 << 16 | 6)) {
    Cursor c;
    String[] proj={""String_Node_Str""};
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
    }
    preserveUserAndCarrierApns(db);
    c=db.query(CARRIERS_TABLE,null,null,null,null,null,null);
    if (VDBG) {
      log(""String_Node_Str"" + ""String_Node_Str"" + ((c == null) ? 0 : c.getCount()));
    }
    createCarriersTable(db,CARRIERS_TABLE_TMP);
    copyPreservedApnsToNewTable(db,c);
    c.close();
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE);
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE_TMP + ""String_Node_Str""+ CARRIERS_TABLE+ ""String_Node_Str"");
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_UNEDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_UNEDITED + ""String_Node_Str""+ c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_EDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_EDITED + ""String_Node_Str""+ c.getCount());
      c.close();
    }
    oldVersion=15 << 16 | 6;
  }
  if (oldVersion < (16 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=16 << 16 | 6;
  }
  if (oldVersion < (17 << 16 | 6)) {
    Cursor c=null;
    try {
      c=db.query(CARRIERS_TABLE,null,null,null,null,null,null,String.valueOf(1));
      if (c == null || c.getColumnIndex(USER_VISIBLE) == -1) {
        db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
      }
 else {
        if (DBG) {
          log(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
        }
      }
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    oldVersion=17 << 16 | 6;
  }
  if (oldVersion < (18 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONING_STATUS+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONED+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=18 << 16 | 6;
  }
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
}",0.9672705130156796
152696,"private void createSimInfoTable(SQLiteDatabase db){
  if (DBG)   log(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID+ ""String_Node_Str""+ SubscriptionManager.ICC_ID+ ""String_Node_Str""+ SubscriptionManager.SIM_SLOT_INDEX+ ""String_Node_Str""+ SubscriptionManager.SIM_NOT_INSERTED+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NAME+ ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE_DEFAULT_SOURCE+ ""String_Node_Str""+ SubscriptionManager.COLOR+ ""String_Node_Str""+ SubscriptionManager.COLOR_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.NUMBER+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_FORMAT+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str""+ ""String_Node_Str"");
  if (DBG)   log(""String_Node_Str"");
}","private void createSimInfoTable(SQLiteDatabase db){
  if (DBG)   log(""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID+ ""String_Node_Str""+ SubscriptionManager.ICC_ID+ ""String_Node_Str""+ SubscriptionManager.SIM_SLOT_INDEX+ ""String_Node_Str""+ SubscriptionManager.SIM_NOT_INSERTED+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NAME+ ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE+ ""String_Node_Str""+ SubscriptionManager.NAME_SOURCE_DEFAULT_SOURCE+ ""String_Node_Str""+ SubscriptionManager.COLOR+ ""String_Node_Str""+ SubscriptionManager.COLOR_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.NUMBER+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_FORMAT+ ""String_Node_Str""+ SubscriptionManager.DISPLAY_NUMBER_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING+ ""String_Node_Str""+ SubscriptionManager.DATA_ROAMING_DEFAULT+ ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONING_STATUS+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONED+ ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str""+ ""String_Node_Str"");
  if (DBG)   log(""String_Node_Str"");
}",0.9687662675689744
152697,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
  if (oldVersion < (5 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=5 << 16 | 6;
  }
  if (oldVersion < (6 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=6 << 16 | 6;
  }
  if (oldVersion < (7 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=7 << 16 | 6;
  }
  if (oldVersion < (8 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=8 << 16 | 6;
  }
  if (oldVersion < (9 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ SubscriptionManager.INVALID_SUBSCRIPTION_ID+ ""String_Node_Str"");
    oldVersion=9 << 16 | 6;
  }
  if (oldVersion < (10 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=10 << 16 | 6;
  }
  if (oldVersion < (11 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=11 << 16 | 6;
  }
  if (oldVersion < (12 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=12 << 16 | 6;
  }
  if (oldVersion < (13 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=13 << 16 | 6;
  }
  if (oldVersion < (14 << 16 | 6)) {
  }
  if (oldVersion < (15 << 16 | 6)) {
    Cursor c;
    String[] proj={""String_Node_Str""};
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
    }
    preserveUserAndCarrierApns(db);
    c=db.query(CARRIERS_TABLE,null,null,null,null,null,null);
    if (VDBG) {
      log(""String_Node_Str"" + ""String_Node_Str"" + ((c == null) ? 0 : c.getCount()));
    }
    createCarriersTable(db,CARRIERS_TABLE_TMP);
    copyPreservedApnsToNewTable(db,c);
    c.close();
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE);
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE_TMP + ""String_Node_Str""+ CARRIERS_TABLE+ ""String_Node_Str"");
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_UNEDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_UNEDITED + ""String_Node_Str""+ c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_EDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_EDITED + ""String_Node_Str""+ c.getCount());
      c.close();
    }
    oldVersion=15 << 16 | 6;
  }
  if (oldVersion < (16 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=16 << 16 | 6;
  }
  if (oldVersion < (17 << 16 | 6)) {
    Cursor c=null;
    try {
      c=db.query(CARRIERS_TABLE,null,null,null,null,null,null,String.valueOf(1));
      if (c == null || c.getColumnIndex(USER_VISIBLE) == -1) {
        db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
      }
 else {
        if (DBG) {
          log(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
        }
      }
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    oldVersion=17 << 16 | 6;
  }
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
  if (oldVersion < (5 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=5 << 16 | 6;
  }
  if (oldVersion < (6 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=6 << 16 | 6;
  }
  if (oldVersion < (7 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=7 << 16 | 6;
  }
  if (oldVersion < (8 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=8 << 16 | 6;
  }
  if (oldVersion < (9 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ SubscriptionManager.INVALID_SUBSCRIPTION_ID+ ""String_Node_Str"");
    oldVersion=9 << 16 | 6;
  }
  if (oldVersion < (10 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=10 << 16 | 6;
  }
  if (oldVersion < (11 << 16 | 6)) {
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str"");
    oldVersion=11 << 16 | 6;
  }
  if (oldVersion < (12 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MCC+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.MNC+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=12 << 16 | 6;
  }
  if (oldVersion < (13 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CARRIER_NAME+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=13 << 16 | 6;
  }
  if (oldVersion < (14 << 16 | 6)) {
  }
  if (oldVersion < (15 << 16 | 6)) {
    Cursor c;
    String[] proj={""String_Node_Str""};
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
    }
    preserveUserAndCarrierApns(db);
    c=db.query(CARRIERS_TABLE,null,null,null,null,null,null);
    if (VDBG) {
      log(""String_Node_Str"" + ""String_Node_Str"" + ((c == null) ? 0 : c.getCount()));
    }
    createCarriersTable(db,CARRIERS_TABLE_TMP);
    copyPreservedApnsToNewTable(db,c);
    c.close();
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE);
    db.execSQL(""String_Node_Str"" + CARRIERS_TABLE_TMP + ""String_Node_Str""+ CARRIERS_TABLE+ ""String_Node_Str"");
    if (VDBG) {
      c=db.query(CARRIERS_TABLE,proj,null,null,null,null,null);
      log(""String_Node_Str"" + c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_UNEDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_UNEDITED + ""String_Node_Str""+ c.getCount());
      c.close();
      c=db.query(CARRIERS_TABLE,proj,IS_EDITED,null,null,null,null);
      log(""String_Node_Str"" + IS_EDITED + ""String_Node_Str""+ c.getCount());
      c.close();
    }
    oldVersion=15 << 16 | 6;
  }
  if (oldVersion < (16 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EXTREME_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_SEVERE_THREAT_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_AMBER_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_EMERGENCY_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SOUND_DURATION+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_REMINDER_INTERVAL+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_VIBRATE+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ALERT_SPEECH+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_ETWS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CHANNEL_50_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_CMAS_TEST_ALERT+ ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.CB_OPT_OUT_DIALOG+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=16 << 16 | 6;
  }
  if (oldVersion < (17 << 16 | 6)) {
    Cursor c=null;
    try {
      c=db.query(CARRIERS_TABLE,null,null,null,null,null,null,String.valueOf(1));
      if (c == null || c.getColumnIndex(USER_VISIBLE) == -1) {
        db.execSQL(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
      }
 else {
        if (DBG) {
          log(""String_Node_Str"" + CARRIERS_TABLE + ""String_Node_Str""+ USER_VISIBLE+ ""String_Node_Str"");
        }
      }
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    oldVersion=17 << 16 | 6;
  }
  if (oldVersion < (18 << 16 | 6)) {
    try {
      db.execSQL(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONING_STATUS+ ""String_Node_Str""+ SubscriptionManager.SIM_PROVISIONED+ ""String_Node_Str"");
    }
 catch (    SQLiteException e) {
      if (DBG) {
        log(""String_Node_Str"" + SIMINFO_TABLE + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    oldVersion=18 << 16 | 6;
  }
  if (DBG) {
    log(""String_Node_Str"" + db + ""String_Node_Str""+ oldVersion+ ""String_Node_Str""+ newVersion);
  }
}",0.9672705130156796
152698,"/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}","/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (modemCognitive != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}",0.9967548676984525
152699,"/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}","/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (modemCognitive != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}",0.9967548676984525
152700,"/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}","/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (modemCognitive != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}",0.9967548676984525
152701,"/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}","/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (modemCognitive != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}",0.9967548676984525
152702,"/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}","/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (modemCognitive != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}",0.9967548676984525
152703,"/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}","/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (modemCognitive != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}",0.9967548676984525
152704,"/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}","/** 
 * Gets the next row of apn values.
 * @param parser the parser
 * @return the row or null if it's not an apn
 */
private ContentValues getRow(XmlPullParser parser){
  if (!""String_Node_Str"".equals(parser.getName())) {
    return null;
  }
  ContentValues map=new ContentValues();
  String mcc=parser.getAttributeValue(null,""String_Node_Str"");
  String mnc=parser.getAttributeValue(null,""String_Node_Str"");
  String numeric=mcc + mnc;
  map.put(Telephony.Carriers.NUMERIC,numeric);
  map.put(Telephony.Carriers.MCC,mcc);
  map.put(Telephony.Carriers.MNC,mnc);
  map.put(Telephony.Carriers.NAME,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.APN,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.USER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.SERVER,parser.getAttributeValue(null,""String_Node_Str""));
  map.put(Telephony.Carriers.PASSWORD,parser.getAttributeValue(null,""String_Node_Str""));
  String proxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (proxy != null) {
    map.put(Telephony.Carriers.PROXY,proxy);
  }
  String port=parser.getAttributeValue(null,""String_Node_Str"");
  if (port != null) {
    map.put(Telephony.Carriers.PORT,port);
  }
  String mmsproxy=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsproxy != null) {
    map.put(Telephony.Carriers.MMSPROXY,mmsproxy);
  }
  String mmsport=parser.getAttributeValue(null,""String_Node_Str"");
  if (mmsport != null) {
    map.put(Telephony.Carriers.MMSPORT,mmsport);
  }
  map.put(Telephony.Carriers.MMSC,parser.getAttributeValue(null,""String_Node_Str""));
  String type=parser.getAttributeValue(null,""String_Node_Str"");
  if (type != null) {
    map.put(Telephony.Carriers.TYPE,type);
  }
  String auth=parser.getAttributeValue(null,""String_Node_Str"");
  if (auth != null) {
    map.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(auth));
  }
  String protocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (protocol != null) {
    map.put(Telephony.Carriers.PROTOCOL,protocol);
  }
  String roamingProtocol=parser.getAttributeValue(null,""String_Node_Str"");
  if (roamingProtocol != null) {
    map.put(Telephony.Carriers.ROAMING_PROTOCOL,roamingProtocol);
  }
  String carrierEnabled=parser.getAttributeValue(null,""String_Node_Str"");
  if (carrierEnabled != null) {
    map.put(Telephony.Carriers.CARRIER_ENABLED,Boolean.parseBoolean(carrierEnabled));
  }
  String bearer=parser.getAttributeValue(null,""String_Node_Str"");
  if (bearer != null) {
    map.put(Telephony.Carriers.BEARER,Integer.parseInt(bearer));
  }
  String mvno_type=parser.getAttributeValue(null,""String_Node_Str"");
  if (mvno_type != null) {
    String mvno_match_data=parser.getAttributeValue(null,""String_Node_Str"");
    if (mvno_match_data != null) {
      map.put(Telephony.Carriers.MVNO_TYPE,mvno_type);
      map.put(Telephony.Carriers.MVNO_MATCH_DATA,mvno_match_data);
    }
  }
  String profileId=parser.getAttributeValue(null,""String_Node_Str"");
  if (profileId != null) {
    map.put(Telephony.Carriers.PROFILE_ID,Integer.parseInt(profileId));
  }
  String modemCognitive=parser.getAttributeValue(null,""String_Node_Str"");
  if (modemCognitive != null) {
    map.put(Telephony.Carriers.MODEM_COGNITIVE,Boolean.parseBoolean(modemCognitive));
  }
  String maxConns=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConns != null) {
    map.put(Telephony.Carriers.MAX_CONNS,Integer.parseInt(maxConns));
  }
  String waitTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (waitTime != null) {
    map.put(Telephony.Carriers.WAIT_TIME,Integer.parseInt(waitTime));
  }
  String maxConnsTime=parser.getAttributeValue(null,""String_Node_Str"");
  if (maxConnsTime != null) {
    map.put(Telephony.Carriers.MAX_CONNS_TIME,Integer.parseInt(maxConnsTime));
  }
  String mtu=parser.getAttributeValue(null,""String_Node_Str"");
  if (mtu != null) {
    map.put(Telephony.Carriers.MTU,Integer.parseInt(mtu));
  }
  return map;
}",0.9967548676984525
152705,"@Override public ParcelFileDescriptor openFile(Uri uri,String mode) throws FileNotFoundException {
  ParcelFileDescriptor fd;
  int match=sURLMatcher.match(uri);
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ mode);
  }
switch (match) {
case MMS_SCRAP_SPACE:
    fd=getTempStoreFd();
  break;
default :
fd=openFileHelper(uri,mode);
}
return fd;
}","@Override public ParcelFileDescriptor openFile(Uri uri,String mode) throws FileNotFoundException {
  ParcelFileDescriptor fd;
  int match=sURLMatcher.match(uri);
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ mode);
  }
switch (match) {
default :
    fd=openFileHelper(uri,mode);
}
return fd;
}",0.9088471849865952
152706,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int currentVersion){
  Log.w(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ currentVersion+ ""String_Node_Str"");
switch (oldVersion) {
case 40:
    if (currentVersion <= 40) {
      return;
    }
  db.beginTransaction();
try {
  upgradeDatabaseToVersion41(db);
  db.setTransactionSuccessful();
}
 catch (Throwable ex) {
  Log.e(TAG,ex.getMessage(),ex);
  break;
}
 finally {
  db.endTransaction();
}
case 41:
if (currentVersion <= 41) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion42(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 42:
if (currentVersion <= 42) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion43(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 43:
if (currentVersion <= 43) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion44(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 44:
if (currentVersion <= 44) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion45(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 45:
if (currentVersion <= 45) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion46(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 46:
if (currentVersion <= 46) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion47(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 47:
if (currentVersion <= 47) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion48(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 48:
if (currentVersion <= 48) {
return;
}
db.beginTransaction();
try {
createWordsTables(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 49:
if (currentVersion <= 49) {
return;
}
db.beginTransaction();
try {
createThreadIdIndex(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 50:
if (currentVersion <= 50) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion51(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 51:
if (currentVersion <= 51) {
return;
}
case 52:
if (currentVersion <= 52) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion53(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 53:
if (currentVersion <= 53) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion54(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
return;
}
Log.e(TAG,""String_Node_Str"");
dropAll(db);
onCreate(db);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int currentVersion){
  Log.w(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ currentVersion+ ""String_Node_Str"");
switch (oldVersion) {
case 40:
    if (currentVersion <= 40) {
      return;
    }
  db.beginTransaction();
try {
  upgradeDatabaseToVersion41(db);
  db.setTransactionSuccessful();
}
 catch (Throwable ex) {
  Log.e(TAG,ex.getMessage(),ex);
  break;
}
 finally {
  db.endTransaction();
}
case 41:
if (currentVersion <= 41) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion42(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 42:
if (currentVersion <= 42) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion43(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 43:
if (currentVersion <= 43) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion44(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 44:
if (currentVersion <= 44) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion45(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 45:
if (currentVersion <= 45) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion46(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 46:
if (currentVersion <= 46) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion47(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 47:
if (currentVersion <= 47) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion48(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 48:
if (currentVersion <= 48) {
return;
}
db.beginTransaction();
try {
createWordsTables(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 49:
if (currentVersion <= 49) {
return;
}
db.beginTransaction();
try {
createThreadIdIndex(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 50:
if (currentVersion <= 50) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion51(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 51:
if (currentVersion <= 51) {
return;
}
case 52:
if (currentVersion <= 52) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion53(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 53:
if (currentVersion <= 53) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion54(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 54:
if (currentVersion <= 54) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion55(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
return;
}
Log.e(TAG,""String_Node_Str"");
dropAll(db);
onCreate(db);
}",0.9664278690827364
152707,"private void createCommonTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.DATE + ""String_Node_Str""+ Mms.SUBJECT+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.DATE + ""String_Node_Str""+ Sms.BODY+ ""String_Node_Str""+ Sms.TYPE+ ""String_Node_Str""+ SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.READ + ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ ""String_Node_Str""+ PDU_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.READ + ""String_Node_Str""+ ""String_Node_Str""+ SMS_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ UPDATE_THREAD_COUNT_ON_OLD+ UPDATE_THREAD_SNIPPET_SNIPPET_CS_ON_DELETE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ ""String_Node_Str""+ Mms.THREAD_ID+ ""String_Node_Str""+ Mms.THREAD_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_READ_REC_IND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_SEND_REQ+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","private void createCommonTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.DATE + ""String_Node_Str""+ Mms.SUBJECT+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.DATE + ""String_Node_Str""+ Sms.BODY+ ""String_Node_Str""+ Sms.TYPE+ ""String_Node_Str""+ SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.READ + ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ ""String_Node_Str""+ PDU_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.READ + ""String_Node_Str""+ ""String_Node_Str""+ SMS_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ UPDATE_THREAD_COUNT_ON_OLD+ UPDATE_THREAD_SNIPPET_SNIPPET_CS_ON_DELETE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_READ_REC_IND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_SEND_REQ+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9498497370398196
152708,"@Override public ParcelFileDescriptor openFile(Uri uri,String mode) throws FileNotFoundException {
  ParcelFileDescriptor fd;
  int match=sURLMatcher.match(uri);
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ mode);
  }
switch (match) {
case MMS_SCRAP_SPACE:
    fd=getTempStoreFd();
  break;
default :
fd=openFileHelper(uri,mode);
}
return fd;
}","@Override public ParcelFileDescriptor openFile(Uri uri,String mode) throws FileNotFoundException {
  ParcelFileDescriptor fd;
  int match=sURLMatcher.match(uri);
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ mode);
  }
switch (match) {
default :
    fd=openFileHelper(uri,mode);
}
return fd;
}",0.9088471849865952
152709,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int currentVersion){
  Log.w(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ currentVersion+ ""String_Node_Str"");
switch (oldVersion) {
case 40:
    if (currentVersion <= 40) {
      return;
    }
  db.beginTransaction();
try {
  upgradeDatabaseToVersion41(db);
  db.setTransactionSuccessful();
}
 catch (Throwable ex) {
  Log.e(TAG,ex.getMessage(),ex);
  break;
}
 finally {
  db.endTransaction();
}
case 41:
if (currentVersion <= 41) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion42(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 42:
if (currentVersion <= 42) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion43(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 43:
if (currentVersion <= 43) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion44(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 44:
if (currentVersion <= 44) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion45(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 45:
if (currentVersion <= 45) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion46(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 46:
if (currentVersion <= 46) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion47(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 47:
if (currentVersion <= 47) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion48(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 48:
if (currentVersion <= 48) {
return;
}
db.beginTransaction();
try {
createWordsTables(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 49:
if (currentVersion <= 49) {
return;
}
db.beginTransaction();
try {
createThreadIdIndex(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 50:
if (currentVersion <= 50) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion51(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 51:
if (currentVersion <= 51) {
return;
}
case 52:
if (currentVersion <= 52) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion53(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 53:
if (currentVersion <= 53) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion54(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
return;
}
Log.e(TAG,""String_Node_Str"");
dropAll(db);
onCreate(db);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int currentVersion){
  Log.w(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ currentVersion+ ""String_Node_Str"");
switch (oldVersion) {
case 40:
    if (currentVersion <= 40) {
      return;
    }
  db.beginTransaction();
try {
  upgradeDatabaseToVersion41(db);
  db.setTransactionSuccessful();
}
 catch (Throwable ex) {
  Log.e(TAG,ex.getMessage(),ex);
  break;
}
 finally {
  db.endTransaction();
}
case 41:
if (currentVersion <= 41) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion42(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 42:
if (currentVersion <= 42) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion43(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 43:
if (currentVersion <= 43) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion44(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 44:
if (currentVersion <= 44) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion45(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 45:
if (currentVersion <= 45) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion46(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 46:
if (currentVersion <= 46) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion47(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 47:
if (currentVersion <= 47) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion48(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 48:
if (currentVersion <= 48) {
return;
}
db.beginTransaction();
try {
createWordsTables(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 49:
if (currentVersion <= 49) {
return;
}
db.beginTransaction();
try {
createThreadIdIndex(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 50:
if (currentVersion <= 50) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion51(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 51:
if (currentVersion <= 51) {
return;
}
case 52:
if (currentVersion <= 52) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion53(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 53:
if (currentVersion <= 53) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion54(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 54:
if (currentVersion <= 54) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion55(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
return;
}
Log.e(TAG,""String_Node_Str"");
dropAll(db);
onCreate(db);
}",0.9664278690827364
152710,"private void createCommonTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.DATE + ""String_Node_Str""+ Mms.SUBJECT+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.DATE + ""String_Node_Str""+ Sms.BODY+ ""String_Node_Str""+ Sms.TYPE+ ""String_Node_Str""+ SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.READ + ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ ""String_Node_Str""+ PDU_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.READ + ""String_Node_Str""+ ""String_Node_Str""+ SMS_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ UPDATE_THREAD_COUNT_ON_OLD+ UPDATE_THREAD_SNIPPET_SNIPPET_CS_ON_DELETE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ ""String_Node_Str""+ Mms.THREAD_ID+ ""String_Node_Str""+ Mms.THREAD_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_READ_REC_IND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_SEND_REQ+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","private void createCommonTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.DATE + ""String_Node_Str""+ Mms.SUBJECT+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.DATE + ""String_Node_Str""+ Sms.BODY+ ""String_Node_Str""+ Sms.TYPE+ ""String_Node_Str""+ SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.READ + ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ ""String_Node_Str""+ PDU_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.READ + ""String_Node_Str""+ ""String_Node_Str""+ SMS_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ UPDATE_THREAD_COUNT_ON_OLD+ UPDATE_THREAD_SNIPPET_SNIPPET_CS_ON_DELETE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_READ_REC_IND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_SEND_REQ+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9498497370398196
152711,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int currentVersion){
  Log.w(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ currentVersion+ ""String_Node_Str"");
switch (oldVersion) {
case 40:
    if (currentVersion <= 40) {
      return;
    }
  db.beginTransaction();
try {
  upgradeDatabaseToVersion41(db);
  db.setTransactionSuccessful();
}
 catch (Throwable ex) {
  Log.e(TAG,ex.getMessage(),ex);
  break;
}
 finally {
  db.endTransaction();
}
case 41:
if (currentVersion <= 41) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion42(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 42:
if (currentVersion <= 42) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion43(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 43:
if (currentVersion <= 43) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion44(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 44:
if (currentVersion <= 44) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion45(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 45:
if (currentVersion <= 45) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion46(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 46:
if (currentVersion <= 46) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion47(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 47:
if (currentVersion <= 47) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion48(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 48:
if (currentVersion <= 48) {
return;
}
db.beginTransaction();
try {
createWordsTables(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 49:
if (currentVersion <= 49) {
return;
}
db.beginTransaction();
try {
createThreadIdIndex(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 50:
if (currentVersion <= 50) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion51(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 51:
if (currentVersion <= 51) {
return;
}
case 52:
if (currentVersion <= 52) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion53(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 53:
if (currentVersion <= 53) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion54(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
return;
}
Log.e(TAG,""String_Node_Str"");
dropAll(db);
onCreate(db);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int currentVersion){
  Log.w(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ currentVersion+ ""String_Node_Str"");
switch (oldVersion) {
case 40:
    if (currentVersion <= 40) {
      return;
    }
  db.beginTransaction();
try {
  upgradeDatabaseToVersion41(db);
  db.setTransactionSuccessful();
}
 catch (Throwable ex) {
  Log.e(TAG,ex.getMessage(),ex);
  break;
}
 finally {
  db.endTransaction();
}
case 41:
if (currentVersion <= 41) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion42(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 42:
if (currentVersion <= 42) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion43(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 43:
if (currentVersion <= 43) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion44(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 44:
if (currentVersion <= 44) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion45(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 45:
if (currentVersion <= 45) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion46(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 46:
if (currentVersion <= 46) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion47(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 47:
if (currentVersion <= 47) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion48(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 48:
if (currentVersion <= 48) {
return;
}
db.beginTransaction();
try {
createWordsTables(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 49:
if (currentVersion <= 49) {
return;
}
db.beginTransaction();
try {
createThreadIdIndex(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 50:
if (currentVersion <= 50) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion51(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 51:
if (currentVersion <= 51) {
return;
}
case 52:
if (currentVersion <= 52) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion53(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 53:
if (currentVersion <= 53) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion54(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
case 54:
if (currentVersion <= 54) {
return;
}
db.beginTransaction();
try {
upgradeDatabaseToVersion55(db);
db.setTransactionSuccessful();
}
 catch (Throwable ex) {
Log.e(TAG,ex.getMessage(),ex);
break;
}
 finally {
db.endTransaction();
}
return;
}
Log.e(TAG,""String_Node_Str"");
dropAll(db);
onCreate(db);
}",0.9664278690827364
152712,"private void createCommonTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.DATE + ""String_Node_Str""+ Mms.SUBJECT+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.DATE + ""String_Node_Str""+ Sms.BODY+ ""String_Node_Str""+ Sms.TYPE+ ""String_Node_Str""+ SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.READ + ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ ""String_Node_Str""+ PDU_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.READ + ""String_Node_Str""+ ""String_Node_Str""+ SMS_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ UPDATE_THREAD_COUNT_ON_OLD+ UPDATE_THREAD_SNIPPET_SNIPPET_CS_ON_DELETE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ ""String_Node_Str""+ Mms.THREAD_ID+ ""String_Node_Str""+ Mms.THREAD_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_READ_REC_IND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_SEND_REQ+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","private void createCommonTriggers(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.DATE + ""String_Node_Str""+ Mms.SUBJECT+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ PDU_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.DATE + ""String_Node_Str""+ Sms.BODY+ ""String_Node_Str""+ Sms.TYPE+ ""String_Node_Str""+ SMS_UPDATE_THREAD_DATE_SNIPPET_COUNT_ON_UPDATE);
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Mms.READ + ""String_Node_Str""+ MmsProvider.TABLE_PDU+ ""String_Node_Str""+ PDU_UPDATE_THREAD_CONSTRAINTS+ ""String_Node_Str""+ PDU_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + Sms.READ + ""String_Node_Str""+ ""String_Node_Str""+ SMS_UPDATE_THREAD_READ_BODY+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Mms.THREAD_ID + ""String_Node_Str""+ UPDATE_THREAD_COUNT_ON_OLD+ UPDATE_THREAD_SNIPPET_SNIPPET_CS_ON_DELETE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_READ_REC_IND+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Mms.MESSAGE_TYPE + ""String_Node_Str""+ PduHeaders.MESSAGE_TYPE_SEND_REQ+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.PROTO_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.MSG_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_TYPE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.ERROR_CODE+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.RETRY_INDEX+ ""String_Node_Str""+ ""String_Node_Str""+ PendingMessages.DUE_TIME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSms.MMS_PROTO+ ""String_Node_Str""+ ""String_Node_Str""+ BaseColumns._ID+ ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_TYPE+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX+ ""String_Node_Str""+ Mms.MESSAGE_BOX_OUTBOX+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + MmsProvider.TABLE_PDU + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ MmsSmsProvider.TABLE_PENDING_MSG+ ""String_Node_Str""+ PendingMessages.MSG_ID+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9498497370398196
152713,"@Override public Uri insert(Uri uri,ContentValues values){
  int msgBox=Mms.MESSAGE_BOX_ALL;
  boolean notify=true;
  int match=sURLMatcher.match(uri);
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ match);
  }
  String table=TABLE_PDU;
switch (match) {
case MMS_ALL:
    Object msgBoxObj=values.getAsInteger(Mms.MESSAGE_BOX);
  if (msgBoxObj != null) {
    msgBox=(Integer)msgBoxObj;
  }
 else {
    msgBox=Mms.MESSAGE_BOX_INBOX;
  }
break;
case MMS_INBOX:
msgBox=Mms.MESSAGE_BOX_INBOX;
break;
case MMS_SENT:
msgBox=Mms.MESSAGE_BOX_SENT;
break;
case MMS_DRAFTS:
msgBox=Mms.MESSAGE_BOX_DRAFTS;
break;
case MMS_OUTBOX:
msgBox=Mms.MESSAGE_BOX_OUTBOX;
break;
case MMS_MSG_PART:
notify=false;
table=TABLE_PART;
break;
case MMS_MSG_ADDR:
notify=false;
table=TABLE_ADDR;
break;
case MMS_SENDING_RATE:
notify=false;
table=TABLE_RATE;
break;
case MMS_DRM_STORAGE:
notify=false;
table=TABLE_DRM;
break;
default :
Log.e(TAG,""String_Node_Str"" + uri);
return null;
}
SQLiteDatabase db=mOpenHelper.getWritableDatabase();
ContentValues finalValues;
Uri res=Mms.CONTENT_URI;
long rowId;
if (table.equals(TABLE_PDU)) {
boolean addDate=!values.containsKey(Mms.DATE);
boolean addMsgBox=!values.containsKey(Mms.MESSAGE_BOX);
filterUnsupportedKeys(values);
finalValues=new ContentValues(values);
long timeInMillis=System.currentTimeMillis();
if (addDate) {
finalValues.put(Mms.DATE,timeInMillis / 1000L);
}
if (addMsgBox && (msgBox != Mms.MESSAGE_BOX_ALL)) {
finalValues.put(Mms.MESSAGE_BOX,msgBox);
}
if (msgBox != Mms.MESSAGE_BOX_INBOX) {
finalValues.put(Mms.READ,1);
}
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else if (table.equals(TABLE_ADDR)) {
finalValues=new ContentValues(values);
finalValues.put(Addr.MSG_ID,uri.getPathSegments().get(0));
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else if (table.equals(TABLE_PART)) {
finalValues=new ContentValues(values);
if (match == MMS_MSG_PART) {
finalValues.put(Part.MSG_ID,uri.getPathSegments().get(0));
}
String contentType=values.getAsString(""String_Node_Str"");
if (!""String_Node_Str"".equals(contentType) && !""String_Node_Str"".equals(contentType)) {
String path=getContext().getDir(""String_Node_Str"",0).getPath() + ""String_Node_Str"" + System.currentTimeMillis();
finalValues.put(Part._DATA,path);
File partFile=new File(path);
if (!partFile.exists()) {
try {
if (!partFile.createNewFile()) {
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
 catch (IOException e) {
Log.e(TAG,""String_Node_Str"",e);
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
}
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else if (table.equals(TABLE_RATE)) {
long now=values.getAsLong(Rate.SENT_TIME);
long oneHourAgo=now - 1000 * 60 * 60;
db.delete(table,Rate.SENT_TIME + ""String_Node_Str"" + oneHourAgo,null);
db.insert(table,null,values);
}
 else if (table.equals(TABLE_DRM)) {
String path=getContext().getDir(""String_Node_Str"",0).getPath() + ""String_Node_Str"" + System.currentTimeMillis();
finalValues=new ContentValues(1);
finalValues.put(""String_Node_Str"",path);
File partFile=new File(path);
if (!partFile.exists()) {
try {
if (!partFile.createNewFile()) {
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
 catch (IOException e) {
Log.e(TAG,""String_Node_Str"",e);
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else {
throw new AssertionError(""String_Node_Str"" + table);
}
if (notify) {
notifyChange();
}
return res;
}","@Override public Uri insert(Uri uri,ContentValues values){
  int msgBox=Mms.MESSAGE_BOX_ALL;
  boolean notify=true;
  int match=sURLMatcher.match(uri);
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ match);
  }
  String table=TABLE_PDU;
switch (match) {
case MMS_ALL:
    Object msgBoxObj=values.getAsInteger(Mms.MESSAGE_BOX);
  if (msgBoxObj != null) {
    msgBox=(Integer)msgBoxObj;
  }
 else {
    msgBox=Mms.MESSAGE_BOX_INBOX;
  }
break;
case MMS_INBOX:
msgBox=Mms.MESSAGE_BOX_INBOX;
break;
case MMS_SENT:
msgBox=Mms.MESSAGE_BOX_SENT;
break;
case MMS_DRAFTS:
msgBox=Mms.MESSAGE_BOX_DRAFTS;
break;
case MMS_OUTBOX:
msgBox=Mms.MESSAGE_BOX_OUTBOX;
break;
case MMS_MSG_PART:
notify=false;
table=TABLE_PART;
break;
case MMS_MSG_ADDR:
notify=false;
table=TABLE_ADDR;
break;
case MMS_SENDING_RATE:
notify=false;
table=TABLE_RATE;
break;
case MMS_DRM_STORAGE:
notify=false;
table=TABLE_DRM;
break;
default :
Log.e(TAG,""String_Node_Str"" + uri);
return null;
}
SQLiteDatabase db=mOpenHelper.getWritableDatabase();
ContentValues finalValues;
Uri res=Mms.CONTENT_URI;
long rowId;
if (table.equals(TABLE_PDU)) {
boolean addDate=!values.containsKey(Mms.DATE);
boolean addMsgBox=!values.containsKey(Mms.MESSAGE_BOX);
filterUnsupportedKeys(values);
finalValues=new ContentValues(values);
long timeInMillis=System.currentTimeMillis();
if (addDate) {
finalValues.put(Mms.DATE,timeInMillis / 1000L);
}
if (addMsgBox && (msgBox != Mms.MESSAGE_BOX_ALL)) {
finalValues.put(Mms.MESSAGE_BOX,msgBox);
}
if (msgBox != Mms.MESSAGE_BOX_INBOX) {
finalValues.put(Mms.READ,1);
}
Long threadId=values.getAsLong(Mms.THREAD_ID);
String address=values.getAsString(CanonicalAddressesColumns.ADDRESS);
if (((threadId == null) || (threadId == 0)) && (address != null)) {
finalValues.put(Mms.THREAD_ID,Threads.getOrCreateThreadId(getContext(),address));
}
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else if (table.equals(TABLE_ADDR)) {
finalValues=new ContentValues(values);
finalValues.put(Addr.MSG_ID,uri.getPathSegments().get(0));
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else if (table.equals(TABLE_PART)) {
finalValues=new ContentValues(values);
if (match == MMS_MSG_PART) {
finalValues.put(Part.MSG_ID,uri.getPathSegments().get(0));
}
String contentType=values.getAsString(""String_Node_Str"");
if (!""String_Node_Str"".equals(contentType) && !""String_Node_Str"".equals(contentType)) {
String path=getContext().getDir(""String_Node_Str"",0).getPath() + ""String_Node_Str"" + System.currentTimeMillis();
finalValues.put(Part._DATA,path);
File partFile=new File(path);
if (!partFile.exists()) {
try {
if (!partFile.createNewFile()) {
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
 catch (IOException e) {
Log.e(TAG,""String_Node_Str"",e);
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
}
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else if (table.equals(TABLE_RATE)) {
long now=values.getAsLong(Rate.SENT_TIME);
long oneHourAgo=now - 1000 * 60 * 60;
db.delete(table,Rate.SENT_TIME + ""String_Node_Str"" + oneHourAgo,null);
db.insert(table,null,values);
}
 else if (table.equals(TABLE_DRM)) {
String path=getContext().getDir(""String_Node_Str"",0).getPath() + ""String_Node_Str"" + System.currentTimeMillis();
finalValues=new ContentValues(1);
finalValues.put(""String_Node_Str"",path);
File partFile=new File(path);
if (!partFile.exists()) {
try {
if (!partFile.createNewFile()) {
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
 catch (IOException e) {
Log.e(TAG,""String_Node_Str"",e);
throw new IllegalStateException(""String_Node_Str"" + path);
}
}
if ((rowId=db.insert(table,null,finalValues)) <= 0) {
Log.e(TAG,""String_Node_Str"" + finalValues);
return null;
}
res=Uri.parse(res + ""String_Node_Str"" + rowId);
}
 else {
throw new AssertionError(""String_Node_Str"" + table);
}
if (notify) {
notifyChange();
}
return res;
}",0.9670302733178086
152714,"/** 
 * Return the thread ID for this list of recipients IDs.  If no thread exists with this ID, create one and return it.  Callers should always use Threads.getThreadId to access this information.
 */
private synchronized Cursor getThreadId(List<String> recipients){
  String recipientIds=getSpaceSeparatedNumbers(getSortedSet(getAddressIds(recipients)));
  String THREAD_QUERY=""String_Node_Str"" + ""String_Node_Str"";
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + THREAD_QUERY);
  }
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  if (cursor.getCount() == 0) {
    cursor.close();
    if (DEBUG) {
      Log.v(LOG_TAG,""String_Node_Str"");
    }
    insertThread(recipientIds,recipients.size());
    db=mOpenHelper.getReadableDatabase();
    cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  }
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + cursor.getCount());
  }
  return cursor;
}","/** 
 * Return the thread ID for this list of recipients IDs.  If no thread exists with this ID, create one and return it.  Callers should always use Threads.getThreadId to access this information.
 */
private synchronized Cursor getThreadId(List<String> recipients){
  String recipientIds=getSpaceSeparatedNumbers(getSortedSet(getAddressIds(recipients)));
  String THREAD_QUERY=""String_Node_Str"" + ""String_Node_Str"";
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + THREAD_QUERY + ""String_Node_Str""+ recipientIds);
  }
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  if (cursor.getCount() == 0) {
    cursor.close();
    if (DEBUG) {
      Log.v(LOG_TAG,""String_Node_Str"");
    }
    insertThread(recipientIds,recipients.size());
    db=mOpenHelper.getReadableDatabase();
    cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  }
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + cursor.getCount());
  }
  return cursor;
}",0.9830508474576272
152715,"/** 
 * Return the union of MMS and SMS messages whose recipients included this phone number. Use this query: SELECT ... FROM pdu, (SELECT _id AS address_id FROM addr WHERE PHONE_NUMBERS_EQUAL(addr.address, '<phoneNumber>')) AS matching_addresses WHERE pdu._id = matching_addresses.address_id UNION SELECT ... FROM sms WHERE PHONE_NUMBERS_EQUAL(sms.address, '<phoneNumber>');
 */
private Cursor getMessagesByPhoneNumber(String phoneNumber,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  String escapedPhoneNumber=DatabaseUtils.sqlEscapeString(phoneNumber);
  String finalMmsSelection=concatSelections(selection,""String_Node_Str"");
  String finalSmsSelection=concatSelections(selection,""String_Node_Str"" + escapedPhoneNumber + (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str""));
  SQLiteQueryBuilder mmsQueryBuilder=new SQLiteQueryBuilder();
  SQLiteQueryBuilder smsQueryBuilder=new SQLiteQueryBuilder();
  mmsQueryBuilder.setDistinct(true);
  smsQueryBuilder.setDistinct(true);
  mmsQueryBuilder.setTables(MmsProvider.TABLE_PDU + ""String_Node_Str"" + ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  smsQueryBuilder.setTables(SmsProvider.TABLE_SMS);
  String[] columns=handleNullMessageProjection(projection);
  String mmsSubQuery=mmsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,MMS_COLUMNS,0,""String_Node_Str"",finalMmsSelection,selectionArgs,null,null);
  String smsSubQuery=smsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,SMS_COLUMNS,0,""String_Node_Str"",finalSmsSelection,selectionArgs,null,null);
  SQLiteQueryBuilder unionQueryBuilder=new SQLiteQueryBuilder();
  unionQueryBuilder.setDistinct(true);
  String unionQuery=unionQueryBuilder.buildUnionQuery(new String[]{mmsSubQuery,smsSubQuery},sortOrder,null);
  return mOpenHelper.getReadableDatabase().rawQuery(unionQuery,EMPTY_STRING_ARRAY);
}","/** 
 * Return the union of MMS and SMS messages whose recipients included this phone number. Use this query: SELECT ... FROM pdu, (SELECT _id AS address_id FROM addr WHERE (address='<phoneNumber>' OR PHONE_NUMBERS_EQUAL(addr.address, '<phoneNumber>', 1/0))) AS matching_addresses WHERE pdu._id = matching_addresses.address_id UNION SELECT ... FROM sms WHERE (address='<phoneNumber>' OR PHONE_NUMBERS_EQUAL(sms.address, '<phoneNumber>', 1/0));
 */
private Cursor getMessagesByPhoneNumber(String phoneNumber,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  String escapedPhoneNumber=DatabaseUtils.sqlEscapeString(phoneNumber);
  String finalMmsSelection=concatSelections(selection,""String_Node_Str"");
  String finalSmsSelection=concatSelections(selection,""String_Node_Str"" + escapedPhoneNumber + ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str""));
  SQLiteQueryBuilder mmsQueryBuilder=new SQLiteQueryBuilder();
  SQLiteQueryBuilder smsQueryBuilder=new SQLiteQueryBuilder();
  mmsQueryBuilder.setDistinct(true);
  smsQueryBuilder.setDistinct(true);
  mmsQueryBuilder.setTables(MmsProvider.TABLE_PDU + ""String_Node_Str"" + ""String_Node_Str""+ escapedPhoneNumber+ ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  smsQueryBuilder.setTables(SmsProvider.TABLE_SMS);
  String[] columns=handleNullMessageProjection(projection);
  String mmsSubQuery=mmsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,MMS_COLUMNS,0,""String_Node_Str"",finalMmsSelection,selectionArgs,null,null);
  String smsSubQuery=smsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,SMS_COLUMNS,0,""String_Node_Str"",finalSmsSelection,selectionArgs,null,null);
  SQLiteQueryBuilder unionQueryBuilder=new SQLiteQueryBuilder();
  unionQueryBuilder.setDistinct(true);
  String unionQuery=unionQueryBuilder.buildUnionQuery(new String[]{mmsSubQuery,smsSubQuery},sortOrder,null);
  return mOpenHelper.getReadableDatabase().rawQuery(unionQuery,EMPTY_STRING_ARRAY);
}",0.9647683397683398
152716,"/** 
 * Return the canonical address ID for this address.
 */
private long getSingleAddressId(String address){
  boolean isEmail=Mms.isEmailAddress(address);
  String refinedAddress=isEmail ? address.toLowerCase() : address;
  String selection=isEmail ? ""String_Node_Str"" : String.format(""String_Node_Str"",(mUseStrictPhoneNumberComparation ? 1 : 0));
  String[] selectionArgs=new String[]{refinedAddress};
  Cursor cursor=null;
  try {
    SQLiteDatabase db=mOpenHelper.getReadableDatabase();
    cursor=db.query(""String_Node_Str"",ID_PROJECTION,selection,selectionArgs,null,null,null);
    if (cursor.getCount() == 0) {
      ContentValues contentValues=new ContentValues(1);
      contentValues.put(CanonicalAddressesColumns.ADDRESS,refinedAddress);
      db=mOpenHelper.getWritableDatabase();
      return db.insert(""String_Node_Str"",CanonicalAddressesColumns.ADDRESS,contentValues);
    }
    if (cursor.moveToFirst()) {
      return cursor.getLong(cursor.getColumnIndexOrThrow(BaseColumns._ID));
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return -1L;
}","/** 
 * Return the canonical address ID for this address.
 */
private long getSingleAddressId(String address){
  boolean isEmail=Mms.isEmailAddress(address);
  String refinedAddress=isEmail ? address.toLowerCase() : address;
  String selection=""String_Node_Str"";
  String[] selectionArgs;
  if (isEmail) {
    selectionArgs=new String[]{refinedAddress};
  }
 else {
    selection+=""String_Node_Str"" + String.format(""String_Node_Str"",(mUseStrictPhoneNumberComparation ? 1 : 0));
    selectionArgs=new String[]{refinedAddress,refinedAddress};
  }
  Cursor cursor=null;
  try {
    SQLiteDatabase db=mOpenHelper.getReadableDatabase();
    cursor=db.query(""String_Node_Str"",ID_PROJECTION,selection,selectionArgs,null,null,null);
    if (cursor.getCount() == 0) {
      ContentValues contentValues=new ContentValues(1);
      contentValues.put(CanonicalAddressesColumns.ADDRESS,refinedAddress);
      db=mOpenHelper.getWritableDatabase();
      return db.insert(""String_Node_Str"",CanonicalAddressesColumns.ADDRESS,contentValues);
    }
    if (cursor.moveToFirst()) {
      return cursor.getLong(cursor.getColumnIndexOrThrow(BaseColumns._ID));
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return -1L;
}",0.8647488192357234
152717,"/** 
 * Return the thread ID for this list of recipients IDs.  If no thread exists with this ID, create one and return it.  Callers should always use Threads.getThreadId to access this information.
 */
private synchronized Cursor getThreadId(List<String> recipients){
  String recipientIds=getSpaceSeparatedNumbers(getSortedSet(getAddressIds(recipients)));
  String THREAD_QUERY=""String_Node_Str"" + ""String_Node_Str"";
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + THREAD_QUERY);
  }
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  if (cursor.getCount() == 0) {
    cursor.close();
    if (DEBUG) {
      Log.v(LOG_TAG,""String_Node_Str"");
    }
    insertThread(recipientIds,recipients.size());
    db=mOpenHelper.getReadableDatabase();
    cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  }
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + cursor.getCount());
  }
  return cursor;
}","/** 
 * Return the thread ID for this list of recipients IDs.  If no thread exists with this ID, create one and return it.  Callers should always use Threads.getThreadId to access this information.
 */
private synchronized Cursor getThreadId(List<String> recipients){
  String recipientIds=getSpaceSeparatedNumbers(getSortedSet(getAddressIds(recipients)));
  String THREAD_QUERY=""String_Node_Str"" + ""String_Node_Str"";
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + THREAD_QUERY + ""String_Node_Str""+ recipientIds);
  }
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  if (cursor.getCount() == 0) {
    cursor.close();
    if (DEBUG) {
      Log.v(LOG_TAG,""String_Node_Str"");
    }
    insertThread(recipientIds,recipients.size());
    db=mOpenHelper.getReadableDatabase();
    cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  }
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + cursor.getCount());
  }
  return cursor;
}",0.9830508474576272
152718,"/** 
 * Return the union of MMS and SMS messages whose recipients included this phone number. Use this query: SELECT ... FROM pdu, (SELECT _id AS address_id FROM addr WHERE PHONE_NUMBERS_EQUAL(addr.address, '<phoneNumber>')) AS matching_addresses WHERE pdu._id = matching_addresses.address_id UNION SELECT ... FROM sms WHERE PHONE_NUMBERS_EQUAL(sms.address, '<phoneNumber>');
 */
private Cursor getMessagesByPhoneNumber(String phoneNumber,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  String escapedPhoneNumber=DatabaseUtils.sqlEscapeString(phoneNumber);
  String finalMmsSelection=concatSelections(selection,""String_Node_Str"");
  String finalSmsSelection=concatSelections(selection,""String_Node_Str"" + escapedPhoneNumber + (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str""));
  SQLiteQueryBuilder mmsQueryBuilder=new SQLiteQueryBuilder();
  SQLiteQueryBuilder smsQueryBuilder=new SQLiteQueryBuilder();
  mmsQueryBuilder.setDistinct(true);
  smsQueryBuilder.setDistinct(true);
  mmsQueryBuilder.setTables(MmsProvider.TABLE_PDU + ""String_Node_Str"" + ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  smsQueryBuilder.setTables(SmsProvider.TABLE_SMS);
  String[] columns=handleNullMessageProjection(projection);
  String mmsSubQuery=mmsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,MMS_COLUMNS,0,""String_Node_Str"",finalMmsSelection,selectionArgs,null,null);
  String smsSubQuery=smsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,SMS_COLUMNS,0,""String_Node_Str"",finalSmsSelection,selectionArgs,null,null);
  SQLiteQueryBuilder unionQueryBuilder=new SQLiteQueryBuilder();
  unionQueryBuilder.setDistinct(true);
  String unionQuery=unionQueryBuilder.buildUnionQuery(new String[]{mmsSubQuery,smsSubQuery},sortOrder,null);
  return mOpenHelper.getReadableDatabase().rawQuery(unionQuery,EMPTY_STRING_ARRAY);
}","/** 
 * Return the union of MMS and SMS messages whose recipients included this phone number. Use this query: SELECT ... FROM pdu, (SELECT _id AS address_id FROM addr WHERE (address='<phoneNumber>' OR PHONE_NUMBERS_EQUAL(addr.address, '<phoneNumber>', 1/0))) AS matching_addresses WHERE pdu._id = matching_addresses.address_id UNION SELECT ... FROM sms WHERE (address='<phoneNumber>' OR PHONE_NUMBERS_EQUAL(sms.address, '<phoneNumber>', 1/0));
 */
private Cursor getMessagesByPhoneNumber(String phoneNumber,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  String escapedPhoneNumber=DatabaseUtils.sqlEscapeString(phoneNumber);
  String finalMmsSelection=concatSelections(selection,""String_Node_Str"");
  String finalSmsSelection=concatSelections(selection,""String_Node_Str"" + escapedPhoneNumber + ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str""));
  SQLiteQueryBuilder mmsQueryBuilder=new SQLiteQueryBuilder();
  SQLiteQueryBuilder smsQueryBuilder=new SQLiteQueryBuilder();
  mmsQueryBuilder.setDistinct(true);
  smsQueryBuilder.setDistinct(true);
  mmsQueryBuilder.setTables(MmsProvider.TABLE_PDU + ""String_Node_Str"" + ""String_Node_Str""+ escapedPhoneNumber+ ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  smsQueryBuilder.setTables(SmsProvider.TABLE_SMS);
  String[] columns=handleNullMessageProjection(projection);
  String mmsSubQuery=mmsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,MMS_COLUMNS,0,""String_Node_Str"",finalMmsSelection,selectionArgs,null,null);
  String smsSubQuery=smsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,SMS_COLUMNS,0,""String_Node_Str"",finalSmsSelection,selectionArgs,null,null);
  SQLiteQueryBuilder unionQueryBuilder=new SQLiteQueryBuilder();
  unionQueryBuilder.setDistinct(true);
  String unionQuery=unionQueryBuilder.buildUnionQuery(new String[]{mmsSubQuery,smsSubQuery},sortOrder,null);
  return mOpenHelper.getReadableDatabase().rawQuery(unionQuery,EMPTY_STRING_ARRAY);
}",0.9647683397683398
152719,"/** 
 * Return the canonical address ID for this address.
 */
private long getSingleAddressId(String address){
  boolean isEmail=Mms.isEmailAddress(address);
  String refinedAddress=isEmail ? address.toLowerCase() : address;
  String selection=isEmail ? ""String_Node_Str"" : String.format(""String_Node_Str"",(mUseStrictPhoneNumberComparation ? 1 : 0));
  String[] selectionArgs=new String[]{refinedAddress};
  Cursor cursor=null;
  try {
    SQLiteDatabase db=mOpenHelper.getReadableDatabase();
    cursor=db.query(""String_Node_Str"",ID_PROJECTION,selection,selectionArgs,null,null,null);
    if (cursor.getCount() == 0) {
      ContentValues contentValues=new ContentValues(1);
      contentValues.put(CanonicalAddressesColumns.ADDRESS,refinedAddress);
      db=mOpenHelper.getWritableDatabase();
      return db.insert(""String_Node_Str"",CanonicalAddressesColumns.ADDRESS,contentValues);
    }
    if (cursor.moveToFirst()) {
      return cursor.getLong(cursor.getColumnIndexOrThrow(BaseColumns._ID));
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return -1L;
}","/** 
 * Return the canonical address ID for this address.
 */
private long getSingleAddressId(String address){
  boolean isEmail=Mms.isEmailAddress(address);
  String refinedAddress=isEmail ? address.toLowerCase() : address;
  String selection=""String_Node_Str"";
  String[] selectionArgs;
  if (isEmail) {
    selectionArgs=new String[]{refinedAddress};
  }
 else {
    selection+=""String_Node_Str"" + String.format(""String_Node_Str"",(mUseStrictPhoneNumberComparation ? 1 : 0));
    selectionArgs=new String[]{refinedAddress,refinedAddress};
  }
  Cursor cursor=null;
  try {
    SQLiteDatabase db=mOpenHelper.getReadableDatabase();
    cursor=db.query(""String_Node_Str"",ID_PROJECTION,selection,selectionArgs,null,null,null);
    if (cursor.getCount() == 0) {
      ContentValues contentValues=new ContentValues(1);
      contentValues.put(CanonicalAddressesColumns.ADDRESS,refinedAddress);
      db=mOpenHelper.getWritableDatabase();
      return db.insert(""String_Node_Str"",CanonicalAddressesColumns.ADDRESS,contentValues);
    }
    if (cursor.moveToFirst()) {
      return cursor.getLong(cursor.getColumnIndexOrThrow(BaseColumns._ID));
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return -1L;
}",0.8647488192357234
152720,"/** 
 * Return the thread ID for this list of recipients IDs.  If no thread exists with this ID, create one and return it.  Callers should always use Threads.getThreadId to access this information.
 */
private synchronized Cursor getThreadId(List<String> recipients){
  String recipientIds=getSpaceSeparatedNumbers(getSortedSet(getAddressIds(recipients)));
  String THREAD_QUERY=""String_Node_Str"" + ""String_Node_Str"";
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + THREAD_QUERY);
  }
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  if (cursor.getCount() == 0) {
    cursor.close();
    if (DEBUG) {
      Log.v(LOG_TAG,""String_Node_Str"");
    }
    insertThread(recipientIds,recipients.size());
    db=mOpenHelper.getReadableDatabase();
    cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  }
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + cursor.getCount());
  }
  return cursor;
}","/** 
 * Return the thread ID for this list of recipients IDs.  If no thread exists with this ID, create one and return it.  Callers should always use Threads.getThreadId to access this information.
 */
private synchronized Cursor getThreadId(List<String> recipients){
  String recipientIds=getSpaceSeparatedNumbers(getSortedSet(getAddressIds(recipients)));
  String THREAD_QUERY=""String_Node_Str"" + ""String_Node_Str"";
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + THREAD_QUERY + ""String_Node_Str""+ recipientIds);
  }
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  if (cursor.getCount() == 0) {
    cursor.close();
    if (DEBUG) {
      Log.v(LOG_TAG,""String_Node_Str"");
    }
    insertThread(recipientIds,recipients.size());
    db=mOpenHelper.getReadableDatabase();
    cursor=db.rawQuery(THREAD_QUERY,new String[]{recipientIds});
  }
  if (DEBUG) {
    Log.v(LOG_TAG,""String_Node_Str"" + cursor.getCount());
  }
  return cursor;
}",0.9830508474576272
152721,"/** 
 * Return the union of MMS and SMS messages whose recipients included this phone number. Use this query: SELECT ... FROM pdu, (SELECT _id AS address_id FROM addr WHERE PHONE_NUMBERS_EQUAL(addr.address, '<phoneNumber>')) AS matching_addresses WHERE pdu._id = matching_addresses.address_id UNION SELECT ... FROM sms WHERE PHONE_NUMBERS_EQUAL(sms.address, '<phoneNumber>');
 */
private Cursor getMessagesByPhoneNumber(String phoneNumber,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  String escapedPhoneNumber=DatabaseUtils.sqlEscapeString(phoneNumber);
  String finalMmsSelection=concatSelections(selection,""String_Node_Str"");
  String finalSmsSelection=concatSelections(selection,""String_Node_Str"" + escapedPhoneNumber + (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str""));
  SQLiteQueryBuilder mmsQueryBuilder=new SQLiteQueryBuilder();
  SQLiteQueryBuilder smsQueryBuilder=new SQLiteQueryBuilder();
  mmsQueryBuilder.setDistinct(true);
  smsQueryBuilder.setDistinct(true);
  mmsQueryBuilder.setTables(MmsProvider.TABLE_PDU + ""String_Node_Str"" + ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  smsQueryBuilder.setTables(SmsProvider.TABLE_SMS);
  String[] columns=handleNullMessageProjection(projection);
  String mmsSubQuery=mmsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,MMS_COLUMNS,0,""String_Node_Str"",finalMmsSelection,selectionArgs,null,null);
  String smsSubQuery=smsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,SMS_COLUMNS,0,""String_Node_Str"",finalSmsSelection,selectionArgs,null,null);
  SQLiteQueryBuilder unionQueryBuilder=new SQLiteQueryBuilder();
  unionQueryBuilder.setDistinct(true);
  String unionQuery=unionQueryBuilder.buildUnionQuery(new String[]{mmsSubQuery,smsSubQuery},sortOrder,null);
  return mOpenHelper.getReadableDatabase().rawQuery(unionQuery,EMPTY_STRING_ARRAY);
}","/** 
 * Return the union of MMS and SMS messages whose recipients included this phone number. Use this query: SELECT ... FROM pdu, (SELECT _id AS address_id FROM addr WHERE (address='<phoneNumber>' OR PHONE_NUMBERS_EQUAL(addr.address, '<phoneNumber>', 1/0))) AS matching_addresses WHERE pdu._id = matching_addresses.address_id UNION SELECT ... FROM sms WHERE (address='<phoneNumber>' OR PHONE_NUMBERS_EQUAL(sms.address, '<phoneNumber>', 1/0));
 */
private Cursor getMessagesByPhoneNumber(String phoneNumber,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  String escapedPhoneNumber=DatabaseUtils.sqlEscapeString(phoneNumber);
  String finalMmsSelection=concatSelections(selection,""String_Node_Str"");
  String finalSmsSelection=concatSelections(selection,""String_Node_Str"" + escapedPhoneNumber + ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str""));
  SQLiteQueryBuilder mmsQueryBuilder=new SQLiteQueryBuilder();
  SQLiteQueryBuilder smsQueryBuilder=new SQLiteQueryBuilder();
  mmsQueryBuilder.setDistinct(true);
  smsQueryBuilder.setDistinct(true);
  mmsQueryBuilder.setTables(MmsProvider.TABLE_PDU + ""String_Node_Str"" + ""String_Node_Str""+ escapedPhoneNumber+ ""String_Node_Str""+ escapedPhoneNumber+ (mUseStrictPhoneNumberComparation ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  smsQueryBuilder.setTables(SmsProvider.TABLE_SMS);
  String[] columns=handleNullMessageProjection(projection);
  String mmsSubQuery=mmsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,MMS_COLUMNS,0,""String_Node_Str"",finalMmsSelection,selectionArgs,null,null);
  String smsSubQuery=smsQueryBuilder.buildUnionSubQuery(MmsSms.TYPE_DISCRIMINATOR_COLUMN,columns,SMS_COLUMNS,0,""String_Node_Str"",finalSmsSelection,selectionArgs,null,null);
  SQLiteQueryBuilder unionQueryBuilder=new SQLiteQueryBuilder();
  unionQueryBuilder.setDistinct(true);
  String unionQuery=unionQueryBuilder.buildUnionQuery(new String[]{mmsSubQuery,smsSubQuery},sortOrder,null);
  return mOpenHelper.getReadableDatabase().rawQuery(unionQuery,EMPTY_STRING_ARRAY);
}",0.9647683397683398
152722,"/** 
 * Return the canonical address ID for this address.
 */
private long getSingleAddressId(String address){
  boolean isEmail=Mms.isEmailAddress(address);
  String refinedAddress=isEmail ? address.toLowerCase() : address;
  String selection=isEmail ? ""String_Node_Str"" : String.format(""String_Node_Str"",(mUseStrictPhoneNumberComparation ? 1 : 0));
  String[] selectionArgs=new String[]{refinedAddress};
  Cursor cursor=null;
  try {
    SQLiteDatabase db=mOpenHelper.getReadableDatabase();
    cursor=db.query(""String_Node_Str"",ID_PROJECTION,selection,selectionArgs,null,null,null);
    if (cursor.getCount() == 0) {
      ContentValues contentValues=new ContentValues(1);
      contentValues.put(CanonicalAddressesColumns.ADDRESS,refinedAddress);
      db=mOpenHelper.getWritableDatabase();
      return db.insert(""String_Node_Str"",CanonicalAddressesColumns.ADDRESS,contentValues);
    }
    if (cursor.moveToFirst()) {
      return cursor.getLong(cursor.getColumnIndexOrThrow(BaseColumns._ID));
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return -1L;
}","/** 
 * Return the canonical address ID for this address.
 */
private long getSingleAddressId(String address){
  boolean isEmail=Mms.isEmailAddress(address);
  String refinedAddress=isEmail ? address.toLowerCase() : address;
  String selection=""String_Node_Str"";
  String[] selectionArgs;
  if (isEmail) {
    selectionArgs=new String[]{refinedAddress};
  }
 else {
    selection+=""String_Node_Str"" + String.format(""String_Node_Str"",(mUseStrictPhoneNumberComparation ? 1 : 0));
    selectionArgs=new String[]{refinedAddress,refinedAddress};
  }
  Cursor cursor=null;
  try {
    SQLiteDatabase db=mOpenHelper.getReadableDatabase();
    cursor=db.query(""String_Node_Str"",ID_PROJECTION,selection,selectionArgs,null,null,null);
    if (cursor.getCount() == 0) {
      ContentValues contentValues=new ContentValues(1);
      contentValues.put(CanonicalAddressesColumns.ADDRESS,refinedAddress);
      db=mOpenHelper.getWritableDatabase();
      return db.insert(""String_Node_Str"",CanonicalAddressesColumns.ADDRESS,contentValues);
    }
    if (cursor.moveToFirst()) {
      return cursor.getLong(cursor.getColumnIndexOrThrow(BaseColumns._ID));
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return -1L;
}",0.8647488192357234
152723,"@Override public Uri insert(Uri url,ContentValues initialValues){
  ContentValues values;
  long rowID;
  int type=Sms.MESSAGE_TYPE_ALL;
  int match=sURLMatcher.match(url);
  String table=TABLE_SMS;
switch (match) {
case SMS_ALL:
    Integer typeObj=initialValues.getAsInteger(Sms.TYPE);
  if (typeObj != null) {
    type=typeObj.intValue();
  }
 else {
    type=Sms.MESSAGE_TYPE_INBOX;
  }
break;
case SMS_INBOX:
type=Sms.MESSAGE_TYPE_INBOX;
break;
case SMS_FAILED:
type=Sms.MESSAGE_TYPE_FAILED;
break;
case SMS_QUEUED:
type=Sms.MESSAGE_TYPE_QUEUED;
break;
case SMS_SENT:
type=Sms.MESSAGE_TYPE_SENT;
break;
case SMS_DRAFT:
type=Sms.MESSAGE_TYPE_DRAFT;
break;
case SMS_OUTBOX:
type=Sms.MESSAGE_TYPE_OUTBOX;
break;
case SMS_RAW_MESSAGE:
table=""String_Node_Str"";
break;
case SMS_STATUS_PENDING:
table=""String_Node_Str"";
break;
case SMS_ATTACHMENT:
table=""String_Node_Str"";
break;
case SMS_NEW_THREAD_ID:
table=""String_Node_Str"";
break;
default :
Log.e(TAG,""String_Node_Str"" + url);
return null;
}
SQLiteDatabase db=mOpenHelper.getWritableDatabase();
if (table.equals(TABLE_SMS)) {
boolean addDate=false;
boolean addType=false;
if (initialValues == null) {
values=new ContentValues(1);
addDate=true;
addType=true;
}
 else {
values=new ContentValues(initialValues);
if (!initialValues.containsKey(Sms.DATE)) {
addDate=true;
}
if (!initialValues.containsKey(Sms.TYPE)) {
addType=true;
}
}
if (addDate) {
values.put(Sms.DATE,new Long(System.currentTimeMillis()));
}
if (addType && (type != Sms.MESSAGE_TYPE_ALL)) {
values.put(Sms.TYPE,Integer.valueOf(type));
}
Long threadId=values.getAsLong(Sms.THREAD_ID);
String address=values.getAsString(Sms.ADDRESS);
if (((threadId == null) || (threadId == 0)) && (address != null)) {
values.put(Sms.THREAD_ID,Threads.getOrCreateThreadId(getContext(),address));
}
if (values.getAsInteger(Sms.TYPE) == Sms.MESSAGE_TYPE_DRAFT) {
db.delete(TABLE_SMS,""String_Node_Str"",new String[]{values.getAsString(Sms.THREAD_ID),Integer.toString(Sms.MESSAGE_TYPE_DRAFT)});
}
if (type == Sms.MESSAGE_TYPE_INBOX) {
if ((values.getAsLong(Sms.PERSON) == null) && (!TextUtils.isEmpty(address))) {
Cursor cursor=getContext().getContentResolver().query(Uri.withAppendedPath(Contacts.Phones.CONTENT_FILTER_URL,address),new String[]{Contacts.Phones.PERSON_ID},null,null,null);
if (cursor != null) {
if (cursor.getCount() > 0) {
cursor.moveToFirst();
Long id=Long.valueOf(cursor.getLong(0));
values.put(Sms.PERSON,id);
}
cursor.deactivate();
}
}
}
 else {
values.put(Sms.READ,ONE);
}
}
 else {
if (initialValues == null) {
values=new ContentValues(1);
}
 else {
values=initialValues;
}
}
rowID=db.insert(table,""String_Node_Str"",values);
if (rowID > 0) {
Uri uri=Uri.parse(""String_Node_Str"" + table + ""String_Node_Str""+ rowID);
if (Log.isLoggable(TAG,Log.VERBOSE)) {
Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str"");
}
notifyChange(uri);
return uri;
}
 else {
Log.e(TAG,""String_Node_Str"" + values.toString());
}
return null;
}","@Override public Uri insert(Uri url,ContentValues initialValues){
  ContentValues values;
  long rowID;
  int type=Sms.MESSAGE_TYPE_ALL;
  int match=sURLMatcher.match(url);
  String table=TABLE_SMS;
switch (match) {
case SMS_ALL:
    Integer typeObj=initialValues.getAsInteger(Sms.TYPE);
  if (typeObj != null) {
    type=typeObj.intValue();
  }
 else {
    type=Sms.MESSAGE_TYPE_INBOX;
  }
break;
case SMS_INBOX:
type=Sms.MESSAGE_TYPE_INBOX;
break;
case SMS_FAILED:
type=Sms.MESSAGE_TYPE_FAILED;
break;
case SMS_QUEUED:
type=Sms.MESSAGE_TYPE_QUEUED;
break;
case SMS_SENT:
type=Sms.MESSAGE_TYPE_SENT;
break;
case SMS_DRAFT:
type=Sms.MESSAGE_TYPE_DRAFT;
break;
case SMS_OUTBOX:
type=Sms.MESSAGE_TYPE_OUTBOX;
break;
case SMS_RAW_MESSAGE:
table=""String_Node_Str"";
break;
case SMS_STATUS_PENDING:
table=""String_Node_Str"";
break;
case SMS_ATTACHMENT:
table=""String_Node_Str"";
break;
case SMS_NEW_THREAD_ID:
table=""String_Node_Str"";
break;
default :
Log.e(TAG,""String_Node_Str"" + url);
return null;
}
SQLiteDatabase db=mOpenHelper.getWritableDatabase();
if (table.equals(TABLE_SMS)) {
boolean addDate=false;
boolean addType=false;
if (initialValues == null) {
values=new ContentValues(1);
addDate=true;
addType=true;
}
 else {
values=new ContentValues(initialValues);
if (!initialValues.containsKey(Sms.DATE)) {
addDate=true;
}
if (!initialValues.containsKey(Sms.TYPE)) {
addType=true;
}
}
if (addDate) {
values.put(Sms.DATE,new Long(System.currentTimeMillis()));
}
if (addType && (type != Sms.MESSAGE_TYPE_ALL)) {
values.put(Sms.TYPE,Integer.valueOf(type));
}
Long threadId=values.getAsLong(Sms.THREAD_ID);
String address=values.getAsString(Sms.ADDRESS);
if (((threadId == null) || (threadId == 0)) && (address != null)) {
values.put(Sms.THREAD_ID,Threads.getOrCreateThreadId(getContext(),address));
}
if (values.getAsInteger(Sms.TYPE) == Sms.MESSAGE_TYPE_DRAFT) {
db.delete(TABLE_SMS,""String_Node_Str"",new String[]{values.getAsString(Sms.THREAD_ID),Integer.toString(Sms.MESSAGE_TYPE_DRAFT)});
}
if (type == Sms.MESSAGE_TYPE_INBOX) {
if ((values.getAsLong(Sms.PERSON) == null) && (!TextUtils.isEmpty(address))) {
Cursor cursor=null;
Uri uri=Uri.withAppendedPath(Contacts.Phones.CONTENT_FILTER_URL,Uri.encode(address));
try {
cursor=getContext().getContentResolver().query(uri,CONTACT_QUERY_PROJECTION,null,null,null);
if (cursor.moveToFirst()) {
Long id=Long.valueOf(cursor.getLong(PERSON_ID_COLUMN));
values.put(Sms.PERSON,id);
}
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"" + uri + ""String_Node_Str"",ex);
}
 finally {
if (cursor != null) {
cursor.close();
}
}
}
}
 else {
values.put(Sms.READ,ONE);
}
}
 else {
if (initialValues == null) {
values=new ContentValues(1);
}
 else {
values=initialValues;
}
}
rowID=db.insert(table,""String_Node_Str"",values);
if (rowID > 0) {
Uri uri=Uri.parse(""String_Node_Str"" + table + ""String_Node_Str""+ rowID);
if (Log.isLoggable(TAG,Log.VERBOSE)) {
Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str"");
}
notifyChange(uri);
return uri;
}
 else {
Log.e(TAG,""String_Node_Str"" + values.toString());
}
return null;
}",0.9148580968280468
152724,"@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  Intent intent=getIntent();
  if (Intent.ACTION_VIEW.equals(intent.getAction())) {
    QRCodeUrlAnalyser qrCodeUrlAnalyser=new QRCodeUrlAnalyser();
    qrCodeUrlAnalyser.startWizardCauseOfUriInput(intent.getData(),this);
  }
 else   if (loginmanager.getAllLoginSets().size() < 1) {
    showStartupWizard();
  }
  Settings settings=((SchoolPlannerApp)getApplication()).getSettings();
  String autoLoginSetString=settings.getAutoLoginSet();
  if (settings.isAutoLogin() && !autoLoginSetString.equals(""String_Node_Str"")) {
    LoginSet loginSet=loginmanager.getLoginSet(autoLoginSetString);
    if (loginSet != null) {
      loginListener.performLogin(loginSet);
    }
  }
}","@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  Intent intent=getIntent();
  if (Intent.ACTION_VIEW.equals(intent.getAction())) {
    QRCodeUrlAnalyser qrCodeUrlAnalyser=new QRCodeUrlAnalyser();
    qrCodeUrlAnalyser.startWizardCauseOfUriInput(intent.getDataString(),this);
  }
 else   if (loginmanager.getAllLoginSets().size() < 1) {
    showStartupWizard();
  }
  Settings settings=((SchoolPlannerApp)getApplication()).getSettings();
  String autoLoginSetString=settings.getAutoLoginSet();
  if (settings.isAutoLogin() && !autoLoginSetString.equals(""String_Node_Str"")) {
    LoginSet loginSet=loginmanager.getLoginSet(autoLoginSetString);
    if (loginSet != null) {
      loginListener.performLogin(loginSet);
    }
  }
}",0.9961685823754788
152725,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.startup_wizard_introduction);
  initTitle(getResources().getString(R.string.startup_wizard_header));
  expert=(RadioButton)findViewById(R.id.swi_radio_expert);
  easy=(RadioButton)findViewById(R.id.swi_radio_easy);
  qrcode=(RadioButton)findViewById(R.id.swi_radio_qrcode);
  nextButton=(Button)findViewById(R.id.startup_wizard_introduction_next_button);
  nextButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      if (expert.isChecked())       startActivity(new Intent(thisActivity,StartupWizardLoginInformationExpert.class));
      if (easy.isChecked())       startActivity(new Intent(thisActivity,StartupWizardLoginInformationEasyServerUrl.class));
      if (qrcode.isChecked())       startQRCodeReader();
    }
  }
);
  backButton=(Button)findViewById(R.id.startup_wizard_introduction_back_button);
  backButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      finish();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.startup_wizard_introduction);
  initTitle(getResources().getString(R.string.startup_wizard_header));
  expert=(RadioButton)findViewById(R.id.swi_radio_expert);
  easy=(RadioButton)findViewById(R.id.swi_radio_easy);
  qrcode=(RadioButton)findViewById(R.id.swi_radio_qrcode);
  nextButton=(Button)findViewById(R.id.startup_wizard_introduction_next_button);
  nextButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      if (expert.isChecked())       startActivity(new Intent(thisActivity,StartupWizardLoginInformationExpert.class));
      if (easy.isChecked())       startActivity(new Intent(thisActivity,StartupWizardLoginInformationEasyServerUrl.class));
      if (qrcode.isChecked())       startQRCodeReader();
    }
  }
);
  backButton=(Button)findViewById(R.id.startup_wizard_introduction_back_button);
  backButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
}",0.991566799822459
152726,"@Override public void onClick(View v){
  finish();
}","@Override public void onClick(View v){
  onBackPressed();
}",0.8648648648648649
152727,"public void onActivityResult(int requestCode,int resultCode,Intent intent){
  IntentResult scanResult=IntentIntegrator.parseActivityResult(requestCode,resultCode,intent);
  String data=scanResult.getContents();
  if (scanResult != null && data.startsWith(""String_Node_Str"")) {
    Uri uri=Uri.parse(scanResult.getContents());
    QRCodeUrlAnalyser qrCodeUrlAnalyser=new QRCodeUrlAnalyser();
    qrCodeUrlAnalyser.startWizardCauseOfUriInput(uri,this);
    Log.d(""String_Node_Str"",scanResult.toString());
  }
 else {
    Toast.makeText(getApplicationContext(),getResources().getString(R.string.startup_wizard_introduction_qrcode_error),Toast.LENGTH_SHORT).show();
  }
}","public void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (resultCode == RESULT_OK) {
    IntentResult scanResult=IntentIntegrator.parseActivityResult(requestCode,resultCode,intent);
    String data=scanResult.getContents();
    if (scanResult != null && data.startsWith(""String_Node_Str"")) {
      QRCodeUrlAnalyser qrCodeUrlAnalyser=new QRCodeUrlAnalyser();
      qrCodeUrlAnalyser.startWizardCauseOfUriInput(scanResult.getContents(),this);
    }
 else {
      Toast.makeText(getApplicationContext(),getResources().getString(R.string.startup_wizard_introduction_qrcode_error),Toast.LENGTH_SHORT).show();
    }
  }
}",0.7865340474368784
152728,"public void startWizardCauseOfUriInput(Uri uri,Activity activity){
  String school_url=uri.getQueryParameter(LoginSetConstants.serverUrlKey);
  String school=uri.getQueryParameter(LoginSetConstants.schoolKey);
  String user=uri.getQueryParameter(LoginSetConstants.usernameKey);
  String pass=uri.getQueryParameter(LoginSetConstants.passwordKey);
  String name=uri.getQueryParameter(LoginSetConstants.nameKey);
  boolean ssl=Boolean.parseBoolean(uri.getQueryParameter(LoginSetConstants.sslOnlyKey));
  Log.d(""String_Node_Str"",uri.toString());
  Log.d(""String_Node_Str"",""String_Node_Str"" + school_url + ""String_Node_Str""+ school+ ""String_Node_Str""+ user+ ""String_Node_Str""+ pass+ ""String_Node_Str""+ name+ ""String_Node_Str""+ ssl);
  Intent loginSetEditor=new Intent(activity,StartupWizardLoginInformationExpert.class);
  loginSetEditor.putExtra(LoginSetConstants.nameKey,name);
  loginSetEditor.putExtra(LoginSetConstants.serverUrlKey,school_url);
  loginSetEditor.putExtra(LoginSetConstants.schoolKey,school);
  loginSetEditor.putExtra(LoginSetConstants.usernameKey,user);
  loginSetEditor.putExtra(LoginSetConstants.passwordKey,pass);
  loginSetEditor.putExtra(LoginSetConstants.sslOnlyKey,ssl);
  activity.startActivityForResult(loginSetEditor,STARTUP_WIZARD_INTRODUCTION_REQUEST_CODE);
}","public void startWizardCauseOfUriInput(String url,Activity activity){
  Uri uri=Uri.parse(Uri.decode(Uri.decode(url)));
  Log.d(""String_Node_Str"",uri.toString());
  String school_url=uri.getQueryParameter(LoginSetConstants.serverUrlKey);
  String school=uri.getQueryParameter(LoginSetConstants.schoolKey);
  String user=uri.getQueryParameter(LoginSetConstants.usernameKey);
  String pass=uri.getQueryParameter(LoginSetConstants.passwordKey);
  String name=uri.getQueryParameter(LoginSetConstants.nameKey);
  boolean ssl=Boolean.parseBoolean(uri.getQueryParameter(LoginSetConstants.sslOnlyKey));
  Intent loginSetEditor=new Intent(activity,StartupWizardLoginInformationExpert.class);
  loginSetEditor.putExtra(LoginSetConstants.nameKey,name);
  loginSetEditor.putExtra(LoginSetConstants.serverUrlKey,school_url);
  loginSetEditor.putExtra(LoginSetConstants.schoolKey,school);
  loginSetEditor.putExtra(LoginSetConstants.usernameKey,user);
  loginSetEditor.putExtra(LoginSetConstants.passwordKey,pass);
  loginSetEditor.putExtra(LoginSetConstants.sslOnlyKey,ssl);
  activity.startActivityForResult(loginSetEditor,STARTUP_WIZARD_INTRODUCTION_REQUEST_CODE);
}",0.86123618501842
152729,"public GUIWeek analyse(){
  Set<String> keySet=weekdata.keySet();
  TreeSet<DateTime> dates=new TreeSet<DateTime>();
  for (  Object element : keySet) {
    String string=(String)element;
    dates.add(DateTimeUtils.iso8601StringToDateTime(string));
  }
  for (int i=0; i < 4; i++) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + timegridRaw.getTimegridForDateTimeDay(2 + i));
  }
  HashMap<DateTime,List<TimegridUnit>> timegrid=initTimeGrid(timegridRaw,dates);
  GUIWeek week=new GUIWeek();
  for (  Object element : dates) {
    DateTime dateTime=(DateTime)element;
    List<Lesson> lessons=weekdata.get(DateTimeUtils.toISO8601Date(dateTime));
    GUIDay d=analyseDay(dateTime,lessons,timegrid.get(dateTime));
    week.setGUIDay(dateTime,d);
  }
  week.setViewType(viewtype);
  week.setTimegrid(getMondayTimeGrid(timegrid));
  week.setHolidays(holidays);
  return week;
}","public GUIWeek analyse(){
  Set<String> keySet=weekdata.keySet();
  TreeSet<DateTime> dates=new TreeSet<DateTime>();
  for (  Object element : keySet) {
    String string=(String)element;
    dates.add(DateTimeUtils.iso8601StringToDateTime(string));
  }
  HashMap<DateTime,List<TimegridUnit>> timegrid=initTimeGrid(timegridRaw,dates);
  GUIWeek week=new GUIWeek();
  for (  Object element : dates) {
    DateTime dateTime=(DateTime)element;
    List<Lesson> lessons=weekdata.get(DateTimeUtils.toISO8601Date(dateTime));
    GUIDay d=analyseDay(dateTime,lessons,timegrid.get(dateTime));
    week.setGUIDay(dateTime,d);
  }
  week.setViewType(viewtype);
  week.setTimegrid(getMondayTimeGrid(timegrid));
  week.setHolidays(holidays);
  return week;
}",0.92041949413942
152730,"private int setBackgroundColor(){
  List<Lesson> lessons=giveMeTheCorrectList();
  List<? extends ViewType> vt=null;
  if (lessons.size() != 0) {
    if (viewtype instanceof SchoolClass) {
      vt=lessons.get(0).getSchoolSubjects();
    }
 else     if (viewtype instanceof SchoolTeacher) {
      vt=lessons.get(0).getSchoolSubjects();
    }
 else     if (viewtype instanceof SchoolRoom) {
      vt=lessons.get(0).getSchoolClasses();
    }
 else     if (viewtype instanceof SchoolSubject) {
      vt=lessons.get(0).getSchoolTeachers();
    }
    if (vt.size() != 0) {
      String bcolor=vt.get(0).getBackColor();
      if (!bcolor.equalsIgnoreCase(""String_Node_Str"")) {
        setBackgroundColor(Color.parseColor(""String_Node_Str"" + bcolor));
        return Color.parseColor(""String_Node_Str"" + bcolor);
      }
    }
  }
  return Color.WHITE;
}","private int setBackgroundColor(){
  List<Lesson> lessons=giveMeTheCorrectList();
  List<? extends ViewType> vt=null;
  if (lessons.size() != 0) {
    if (viewtype instanceof SchoolClass) {
      vt=lessons.get(0).getSchoolSubjects();
    }
 else     if (viewtype instanceof SchoolTeacher) {
      vt=lessons.get(0).getSchoolSubjects();
    }
 else     if (viewtype instanceof SchoolRoom) {
      vt=lessons.get(0).getSchoolClasses();
    }
 else     if (viewtype instanceof SchoolSubject) {
      vt=lessons.get(0).getSchoolTeachers();
    }
    if (vt.size() != 0) {
      String bcolor=vt.get(0).getBackColor();
      if (!bcolor.equalsIgnoreCase(""String_Node_Str"")) {
        if (bcolor.length() == 6) {
          setBackgroundColor(Color.parseColor(""String_Node_Str"" + bcolor));
          return Color.parseColor(""String_Node_Str"" + bcolor);
        }
        if (bcolor.length() == 8) {
          bcolor=bcolor.substring(2);
          setBackgroundColor(Color.parseColor(""String_Node_Str"" + bcolor));
          return Color.parseColor(""String_Node_Str"" + bcolor);
        }
      }
    }
  }
  return Color.WHITE;
}",0.8612099644128114
152731,"private int getBackgroundColor(){
  List<? extends ViewType> vt=null;
  if (viewtype instanceof SchoolClass) {
    vt=lesson.getSchoolSubjects();
  }
 else   if (viewtype instanceof SchoolTeacher) {
    vt=lesson.getSchoolSubjects();
  }
 else   if (viewtype instanceof SchoolRoom) {
    vt=lesson.getSchoolClasses();
  }
 else   if (viewtype instanceof SchoolSubject) {
    vt=lesson.getSchoolTeachers();
  }
  if (vt.size() != 0) {
    String bcolor=vt.get(0).getBackColor();
    if (!bcolor.equalsIgnoreCase(""String_Node_Str"")) {
      return Color.parseColor(""String_Node_Str"" + bcolor);
    }
  }
  return Color.WHITE;
}","private int getBackgroundColor(){
  List<? extends ViewType> vt=null;
  if (viewtype instanceof SchoolClass) {
    vt=lesson.getSchoolSubjects();
  }
 else   if (viewtype instanceof SchoolTeacher) {
    vt=lesson.getSchoolSubjects();
  }
 else   if (viewtype instanceof SchoolRoom) {
    vt=lesson.getSchoolClasses();
  }
 else   if (viewtype instanceof SchoolSubject) {
    vt=lesson.getSchoolTeachers();
  }
  if (vt.size() != 0) {
    String bcolor=vt.get(0).getBackColor();
    bcolor=""String_Node_Str"" + bcolor;
    if (!bcolor.equalsIgnoreCase(""String_Node_Str"")) {
      if (bcolor.length() == 6) {
        setBackgroundColor(Color.parseColor(""String_Node_Str"" + bcolor));
        return Color.parseColor(""String_Node_Str"" + bcolor);
      }
      if (bcolor.length() == 8) {
        bcolor=bcolor.substring(2);
        setBackgroundColor(Color.parseColor(""String_Node_Str"" + bcolor));
        return Color.parseColor(""String_Node_Str"" + bcolor);
      }
    }
  }
  return Color.WHITE;
}",0.7617283950617284
152732,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  LoginSet loginSet=new LoginSet(extras.getString(LoginSetConstants.nameKey),extras.getString(LoginSetConstants.serverUrlKey),extras.getString(LoginSetConstants.schoolKey),extras.getString(LoginSetConstants.usernameKey),extras.getString(LoginSetConstants.passwordKey),extras.getBoolean(LoginSetConstants.sslOnlyKey));
  oldName=new String(loginSet.getName());
  oldServerUrl=new String(loginSet.getServerUrl());
  oldSchool=new String(loginSet.getSchool());
  initInputFields(loginSet.getName(),loginSet.getServerUrl(),loginSet.getSchool(),loginSet.getPassword(),loginSet.getPassword(),loginSet.isSslOnly());
  setOnButtonClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      if (requiredDataEntered()) {
        Intent intent=new Intent();
        intent.putExtra(LOGIN_SET_EDIT_NAME_KEY,getNameInput());
        intent.putExtra(LOGIN_SET_EDIT_SERVER_URL_KEY,getServerUrlInput());
        intent.putExtra(LOGIN_SET_EDIT_SCHOOL_KEY,getSchoolInput());
        intent.putExtra(LOGIN_SET_EDIT_USERNAME_KEY,getUsernameInput());
        intent.putExtra(LOGIN_SET_EDIT_PASSWORD_KEY,getPasswordInput());
        intent.putExtra(LOGIN_SET_EDIT_SSL_ONLY_KEY,isSslOnly());
        intent.putExtra(LOGIN_SET_EDIT_OLD_NAME_KEY,getOldName());
        intent.putExtra(LOGIN_SET_EDIT_OLD_SERVER_URL_KEY,getOldServerUrl());
        intent.putExtra(LOGIN_SET_EDIT_OLD_SCHOOL_KEY,getOldSchool());
        setResult(RESULT_OK,intent);
        finish();
      }
 else {
        showToastMessage(getString(R.string.error_login_set_information_missing));
      }
    }
  }
);
  setBackButtonText(getString(R.string.login_set_edit_exit));
  setNextButtonText(getString(R.string.login_set_edit_save));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  LoginSet loginSet=new LoginSet(extras.getString(LoginSetConstants.nameKey),extras.getString(LoginSetConstants.serverUrlKey),extras.getString(LoginSetConstants.schoolKey),extras.getString(LoginSetConstants.usernameKey),extras.getString(LoginSetConstants.passwordKey),extras.getBoolean(LoginSetConstants.sslOnlyKey));
  oldName=new String(loginSet.getName());
  oldServerUrl=new String(loginSet.getServerUrl());
  oldSchool=new String(loginSet.getSchool());
  initInputFields(loginSet.getName(),loginSet.getServerUrl(),loginSet.getSchool(),loginSet.getUsername(),loginSet.getPassword(),loginSet.isSslOnly());
  setOnButtonClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      if (requiredDataEntered()) {
        Intent intent=new Intent();
        intent.putExtra(LOGIN_SET_EDIT_NAME_KEY,getNameInput());
        intent.putExtra(LOGIN_SET_EDIT_SERVER_URL_KEY,getServerUrlInput());
        intent.putExtra(LOGIN_SET_EDIT_SCHOOL_KEY,getSchoolInput());
        intent.putExtra(LOGIN_SET_EDIT_USERNAME_KEY,getUsernameInput());
        intent.putExtra(LOGIN_SET_EDIT_PASSWORD_KEY,getPasswordInput());
        intent.putExtra(LOGIN_SET_EDIT_SSL_ONLY_KEY,isSslOnly());
        intent.putExtra(LOGIN_SET_EDIT_OLD_NAME_KEY,getOldName());
        intent.putExtra(LOGIN_SET_EDIT_OLD_SERVER_URL_KEY,getOldServerUrl());
        intent.putExtra(LOGIN_SET_EDIT_OLD_SCHOOL_KEY,getOldSchool());
        setResult(RESULT_OK,intent);
        finish();
      }
 else {
        showToastMessage(getString(R.string.error_login_set_information_missing));
      }
    }
  }
);
  setBackButtonText(getString(R.string.login_set_edit_exit));
  setNextButtonText(getString(R.string.login_set_edit_save));
}",0.9957058507783144
152733,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.startup_wizard_login_information_check);
  loginText=(TextView)findViewById(R.id.startup_wizard_login_information_check_login_text);
  loginImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_login_image);
  classListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_classlist_text);
  classListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_classlist_image);
  teacherListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_teacherlist_text);
  teacherListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_teacherlist_image);
  roomListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_roomlist_text);
  roomListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_roomlist_image);
  subjectListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_subjectlist_text);
  subjectListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_subjectlist_image);
  progressWheel=(ProgressBar)findViewById(R.id.startup_wizard_login_information_check_progress);
  infoText=(TextView)findViewById(R.id.startup_wizard_login_information_check_info_text);
  finishButton=(Button)findViewById(R.id.startup_wizard_login_information_check_finish_button);
  finishButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),WelcomeScreen.class);
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      startActivity(intent);
    }
  }
);
  backButton=(Button)findViewById(R.id.startup_wizard_login_information_check_back_button);
  backButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  loginListener=new LoginTask(this);
  Bundle extras=getIntent().getExtras();
  activeSet=new LoginSet(extras.getString(LoginSetConstants.nameKey),extras.getString(LoginSetConstants.serverUrlKey),extras.getString(LoginSetConstants.schoolKey),extras.getString(LoginSetConstants.usernameKey),extras.getString(LoginSetConstants.passwordKey),extras.getBoolean(LoginSetConstants.sslOnlyKey));
  loginListener.performLogin(activeSet);
  loginText.setTextColor(R.color.text);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.startup_wizard_login_information_check);
  loginText=(TextView)findViewById(R.id.startup_wizard_login_information_check_login_text);
  loginImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_login_image);
  classListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_classlist_text);
  classListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_classlist_image);
  teacherListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_teacherlist_text);
  teacherListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_teacherlist_image);
  roomListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_roomlist_text);
  roomListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_roomlist_image);
  subjectListText=(TextView)findViewById(R.id.startup_wizard_login_information_check_subjectlist_text);
  subjectListImage=(ImageView)findViewById(R.id.startup_wizard_login_information_check_subjectlist_image);
  progressWheel=(ProgressBar)findViewById(R.id.startup_wizard_login_information_check_progress);
  infoText=(TextView)findViewById(R.id.startup_wizard_login_information_check_info_text);
  finishButton=(Button)findViewById(R.id.startup_wizard_login_information_check_finish_button);
  finishButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      ((SchoolPlannerApp)getApplication()).getLoginSetManager().addLoginSet(activeSet);
      Intent intent=new Intent(getApplicationContext(),WelcomeScreen.class);
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      startActivity(intent);
    }
  }
);
  backButton=(Button)findViewById(R.id.startup_wizard_login_information_check_back_button);
  backButton.setOnClickListener(new Button.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  loginListener=new LoginTask(this);
  Bundle extras=getIntent().getExtras();
  activeSet=new LoginSet(extras.getString(LoginSetConstants.nameKey),extras.getString(LoginSetConstants.serverUrlKey),extras.getString(LoginSetConstants.schoolKey),extras.getString(LoginSetConstants.usernameKey),extras.getString(LoginSetConstants.passwordKey),extras.getBoolean(LoginSetConstants.sslOnlyKey));
  loginListener.performLogin(activeSet);
  loginText.setTextColor(R.color.text);
}",0.9823788546255506
152734,"@Override public void statusChanged(String status){
  if (status.equals(LoginTaskStatus.LOGIN_SUCCESS)) {
    loginImage.setImageResource(R.drawable.btn_check_buttonless_on);
    classListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.CLASSLIST_SUCCESS)) {
    classListImage.setImageResource(R.drawable.btn_check_buttonless_on);
    teacherListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.TEACHERLIST_SUCCESS)) {
    teacherListImage.setImageResource(R.drawable.btn_check_buttonless_on);
    roomListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.ROOMLIST_SUCCESS)) {
    roomListImage.setImageResource(R.drawable.btn_check_buttonless_on);
    subjectListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.SUBJECTLIST_SUCCESS)) {
    subjectListImage.setImageResource(R.drawable.btn_check_buttonless_on);
  }
 else   if (status.equals(LoginTaskStatus.MASTERDATA_SUCCESS)) {
    progressWheel.setVisibility(View.INVISIBLE);
    finishButton.setVisibility(View.VISIBLE);
    ((SchoolPlannerApp)getApplication()).getLoginSetManager().addLoginSet(activeSet);
  }
 else   if (status.equals(LoginTaskStatus.LOGIN_BAD_CREDENTIALS)) {
    loginImage.setImageResource(R.drawable.ic_delete);
  }
}","@Override public void statusChanged(String status){
  if (status.equals(LoginTaskStatus.LOGIN_SUCCESS)) {
    loginImage.setImageResource(R.drawable.btn_check_buttonless_on);
    classListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.CLASSLIST_SUCCESS)) {
    classListImage.setImageResource(R.drawable.btn_check_buttonless_on);
    teacherListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.TEACHERLIST_SUCCESS)) {
    teacherListImage.setImageResource(R.drawable.btn_check_buttonless_on);
    roomListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.ROOMLIST_SUCCESS)) {
    roomListImage.setImageResource(R.drawable.btn_check_buttonless_on);
    subjectListText.setTextColor(R.color.text);
  }
 else   if (status.equals(LoginTaskStatus.SUBJECTLIST_SUCCESS)) {
    subjectListImage.setImageResource(R.drawable.btn_check_buttonless_on);
  }
 else   if (status.equals(LoginTaskStatus.MASTERDATA_SUCCESS)) {
    progressWheel.setVisibility(View.INVISIBLE);
    finishButton.setVisibility(View.VISIBLE);
  }
 else   if (status.equals(LoginTaskStatus.LOGIN_BAD_CREDENTIALS)) {
    loginImage.setImageResource(R.drawable.ic_delete);
  }
}",0.966168371361133
152735,"@Override public void onBackPressed(){
  AsyncTask<Void,AsyncTaskProgress,Boolean> loginTask=loginListener.getAsyncTask();
  if (loginTask != null && !loginTask.isCancelled() && !(loginTask.getStatus() == Status.FINISHED)) {
    loginTask.cancel(true);
  }
 else   super.onBackPressed();
}","@Override public void onBackPressed(){
  AsyncTask<Void,AsyncTaskProgress,Boolean> loginTask=loginListener.getAsyncTask();
  if (loginTask != null && !loginTask.isCancelled() && !(loginTask.getStatus() == Status.FINISHED)) {
    loginTask.cancel(true);
  }
  super.onBackPressed();
}",0.9895104895104896
152736,"private GUIDay analyseDay(DateTime date,List<Lesson> lessons){
  GUIDay day=new GUIDay();
  day.setDate(date);
  boolean dispZerolesson=settings.isDisplayZerothLesson();
  timegridForDateTimeDay=new ArrayList<TimegridUnit>();
  if (timegrid.getTimegridForDateTimeDay(date.getWeekDay()) != null) {
    timegridForDay=timegrid.getTimegridForDateTimeDay(date.getWeekDay());
  }
  for (  TimegridUnit timegridUnit : timegridForDay) {
    if (!dispZerolesson) {
      if (timegridUnit.getName().equals(""String_Node_Str"") && timegridUnit.getEnd().getHour() <= 8 && timegridUnit.getEnd().getMinute() == 0) {
        zerolesson=timegridUnit;
      }
 else {
        timegridForDateTimeDay.add(timegridUnit);
      }
    }
 else {
      timegridForDateTimeDay.add(timegridUnit);
    }
  }
  if (lessons.size() == 0) {
    for (    TimegridUnit timegridUnit : timegridForDateTimeDay) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  webuntisOnlyZeroTimegridUnitsHack(timegridForDateTimeDay);
  if (zerolesson != null)   Log.d(""String_Node_Str"",""String_Node_Str"" + zerolesson.getStart() + ""String_Node_Str""+ zerolesson.getEnd()+ ""String_Node_Str""+ date.toString());
  for (int i=0; i < timegridForDateTimeDay.size(); i++) {
    TimegridUnit timegridUnit=timegridForDateTimeDay.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (!dispZerolesson && zerolesson != null && lessonsSameStartTime(lesson,zerolesson) && lessonSameEndTime(lesson,zerolesson)) {
        lessons.remove(j);
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        if (i != timegridForDateTimeDay.size() - 1) {
          Lesson tmp2=new Lesson();
          tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
          tmp2.setStartTime(timegridForDateTimeDay.get(i + 1).getStart().getHour(),timegridForDateTimeDay.get(i + 1).getStart().getMinute());
          tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
          tmp2.setId(lesson.getId());
          tmp2.setLessonCode(lesson.getLessonCode());
          tmp2.setLessonType(lesson.getLessonType());
          tmp2.setSchoolClasses(lesson.getSchoolClasses());
          tmp2.setSchoolRooms(lesson.getSchoolRooms());
          tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
          tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
          lessons.add(tmp2);
        }
        lessons.add(tmp1);
      }
 else       if ((lesson.getStartTime().getHour() < timegridForDateTimeDay.get(0).getStart().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(timegridForDateTimeDay.get(0).getStart().getHour(),timegridForDateTimeDay.get(0).getStart().getMinute());
        tmp1.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp1);
      }
 else       if (lesson.getStartTime().getMinute() >= timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() >= timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() <= timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() <= timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}","private GUIDay analyseDay(DateTime date,List<Lesson> lessons,List<TimegridUnit> filteredTimegrid){
  GUIDay day=new GUIDay();
  day.setDate(date);
  boolean dispZerolesson=settings.isDisplayZerothLesson();
  if (lessons.size() == 0) {
    for (    TimegridUnit timegridUnit : filteredTimegrid) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  if (zerolesson != null)   Log.d(""String_Node_Str"",""String_Node_Str"" + zerolesson.getStart() + ""String_Node_Str""+ zerolesson.getEnd()+ ""String_Node_Str""+ date.toString());
  for (int i=0; i < filteredTimegrid.size(); i++) {
    TimegridUnit timegridUnit=filteredTimegrid.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (!dispZerolesson && zerolesson != null && lessonsSameStartTime(lesson,zerolesson) && lessonSameEndTime(lesson,zerolesson)) {
        lessons.remove(j);
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        if (i != filteredTimegrid.size() - 1) {
          Lesson tmp2=new Lesson();
          tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
          tmp2.setStartTime(filteredTimegrid.get(i + 1).getStart().getHour(),filteredTimegrid.get(i + 1).getStart().getMinute());
          tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
          tmp2.setId(lesson.getId());
          tmp2.setLessonCode(lesson.getLessonCode());
          tmp2.setLessonType(lesson.getLessonType());
          tmp2.setSchoolClasses(lesson.getSchoolClasses());
          tmp2.setSchoolRooms(lesson.getSchoolRooms());
          tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
          tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
          lessons.add(tmp2);
        }
        lessons.add(tmp1);
      }
 else       if ((lesson.getStartTime().getHour() < filteredTimegrid.get(0).getStart().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(filteredTimegrid.get(0).getStart().getHour(),filteredTimegrid.get(0).getStart().getMinute());
        tmp1.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp1);
      }
 else       if (lesson.getStartTime().getMinute() >= timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() >= timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() <= timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() <= timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}",0.9035095434954702
152737,"public GUIWeek analyse(){
  Set<String> keySet=weekdata.keySet();
  TreeSet<DateTime> dates=new TreeSet<DateTime>();
  for (  Object element : keySet) {
    String string=(String)element;
    dates.add(DateTimeUtils.iso8601StringToDateTime(string));
  }
  GUIWeek week=new GUIWeek();
  for (  Object element : dates) {
    DateTime dateTime=(DateTime)element;
    List<Lesson> lessons=weekdata.get(DateTimeUtils.toISO8601Date(dateTime));
    GUIDay d=analyseDay(dateTime,lessons);
    week.setGUIDay(dateTime,d);
  }
  week.setViewType(viewtype);
  week.setTimegrid(timegridForDateTimeDay);
  week.setHolidays(holidays);
  return week;
}","public GUIWeek analyse(){
  Set<String> keySet=weekdata.keySet();
  TreeSet<DateTime> dates=new TreeSet<DateTime>();
  for (  Object element : keySet) {
    String string=(String)element;
    dates.add(DateTimeUtils.iso8601StringToDateTime(string));
  }
  HashMap<DateTime,List<TimegridUnit>> timegrid=initTimeGrid(timegridRaw,dates);
  GUIWeek week=new GUIWeek();
  for (  Object element : dates) {
    DateTime dateTime=(DateTime)element;
    List<Lesson> lessons=weekdata.get(DateTimeUtils.toISO8601Date(dateTime));
    GUIDay d=analyseDay(dateTime,lessons,timegrid.get(dateTime));
    week.setGUIDay(dateTime,d);
  }
  week.setViewType(viewtype);
  week.setTimegrid(getMondayTimeGrid(timegrid));
  week.setHolidays(holidays);
  return week;
}",0.8893709327548807
152738,"public void setTimeGrid(Timegrid t){
  timegrid=t;
}","public void setTimeGrid(Timegrid t){
  timegridRaw=t;
}",0.97196261682243
152739,"private boolean searchForSearchResults(Spinner spinner,String query){
  ArrayAdapter<String> spinneradapter=(ArrayAdapter<String>)spinner.getAdapter();
  ViewTypeSpinnerOnItemSelectedListener onItemClickListener=(ViewTypeSpinnerOnItemSelectedListener)spinner.getOnItemSelectedListener();
  for (int i=0; i < spinneradapter.getCount(); i++) {
    String sname=onItemClickListener.getViewType(i).getName();
    String lname=onItemClickListener.getViewType(i).getLongName();
    if (sname.equalsIgnoreCase(query)) {
      onItemClickListener.fireEvent(i);
      return true;
    }
    if (lname.length() > 4 && lname.toLowerCase().contains(query.toLowerCase())) {
      onItemClickListener.fireEvent(i);
      return true;
    }
  }
  return false;
}","private boolean searchForSearchResults(Spinner spinner,String query){
  ArrayAdapter<String> spinneradapter=(ArrayAdapter<String>)spinner.getAdapter();
  ViewTypeSpinnerOnItemSelectedListener onItemClickListener=(ViewTypeSpinnerOnItemSelectedListener)spinner.getOnItemSelectedListener();
  for (int i=0; i < spinneradapter.getCount(); i++) {
    String sname=onItemClickListener.getViewType(i).getName();
    String lname=onItemClickListener.getViewType(i).getLongName();
    if (sname.equalsIgnoreCase(query)) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + sname);
      onItemClickListener.fireEvent(i);
      return true;
    }
    if (query.length() > 4 && lname.toLowerCase().contains(query.toLowerCase())) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + lname);
      onItemClickListener.fireEvent(i);
      return true;
    }
  }
  return false;
}",0.9217391304347826
152740,"private GUIDay analyseDay(DateTime date,List<Lesson> lessons){
  GUIDay day=new GUIDay();
  day.setDate(date);
  boolean dispZerolesson=settings.isDisplayZerothLesson();
  timegridForDateTimeDay=new ArrayList<TimegridUnit>();
  List<TimegridUnit> timegridForDay=timegrid.getTimegridForDateTimeDay(date.getWeekDay());
  if (lessons.size() == 0 || timegridForDay == null) {
    for (    TimegridUnit timegridUnit : timegridForDateTimeDay) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  webuntisOnlyZeroTimegridUnitsHack(timegridForDay);
  for (  TimegridUnit timegridUnit : timegridForDay) {
    if (!dispZerolesson) {
      if (timegridUnit.getName().equals(""String_Node_Str"") && timegridUnit.getEnd().getHour() <= 8 && timegridUnit.getEnd().getMinute() == 0) {
        zerolesson=timegridUnit;
      }
 else {
        timegridForDateTimeDay.add(timegridUnit);
      }
    }
 else {
      timegridForDateTimeDay.add(timegridUnit);
    }
  }
  if (zerolesson != null)   Log.d(""String_Node_Str"",""String_Node_Str"" + zerolesson.getStart() + ""String_Node_Str""+ zerolesson.getEnd()+ ""String_Node_Str""+ date.toString());
  for (int i=0; i < timegridForDateTimeDay.size(); i++) {
    TimegridUnit timegridUnit=timegridForDateTimeDay.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (!dispZerolesson && zerolesson != null && lessonsSameStartTime(lesson,zerolesson) && lessonSameEndTime(lesson,zerolesson)) {
        lessons.remove(j);
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        if (i != timegridForDateTimeDay.size() - 1) {
          Lesson tmp2=new Lesson();
          tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
          tmp2.setStartTime(timegridForDateTimeDay.get(i + 1).getStart().getHour(),timegridForDateTimeDay.get(i + 1).getStart().getMinute());
          tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
          tmp2.setId(lesson.getId());
          tmp2.setLessonCode(lesson.getLessonCode());
          tmp2.setLessonType(lesson.getLessonType());
          tmp2.setSchoolClasses(lesson.getSchoolClasses());
          tmp2.setSchoolRooms(lesson.getSchoolRooms());
          tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
          tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
          lessons.add(tmp2);
        }
        lessons.add(tmp1);
      }
 else       if ((lesson.getStartTime().getHour() < timegridForDateTimeDay.get(0).getStart().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(timegridForDateTimeDay.get(0).getStart().getHour(),timegridForDateTimeDay.get(0).getStart().getMinute());
        tmp1.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp1);
      }
 else       if (lesson.getStartTime().getMinute() >= timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() >= timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() <= timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() <= timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}","private GUIDay analyseDay(DateTime date,List<Lesson> lessons){
  GUIDay day=new GUIDay();
  day.setDate(date);
  boolean dispZerolesson=settings.isDisplayZerothLesson();
  timegridForDateTimeDay=new ArrayList<TimegridUnit>();
  if (timegrid.getTimegridForDateTimeDay(date.getWeekDay()) != null) {
    timegridForDay=timegrid.getTimegridForDateTimeDay(date.getWeekDay());
  }
  for (  TimegridUnit timegridUnit : timegridForDay) {
    if (!dispZerolesson) {
      if (timegridUnit.getName().equals(""String_Node_Str"") && timegridUnit.getEnd().getHour() <= 8 && timegridUnit.getEnd().getMinute() == 0) {
        zerolesson=timegridUnit;
      }
 else {
        timegridForDateTimeDay.add(timegridUnit);
      }
    }
 else {
      timegridForDateTimeDay.add(timegridUnit);
    }
  }
  if (lessons.size() == 0) {
    for (    TimegridUnit timegridUnit : timegridForDateTimeDay) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  webuntisOnlyZeroTimegridUnitsHack(timegridForDay);
  if (zerolesson != null)   Log.d(""String_Node_Str"",""String_Node_Str"" + zerolesson.getStart() + ""String_Node_Str""+ zerolesson.getEnd()+ ""String_Node_Str""+ date.toString());
  for (int i=0; i < timegridForDateTimeDay.size(); i++) {
    TimegridUnit timegridUnit=timegridForDateTimeDay.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (!dispZerolesson && zerolesson != null && lessonsSameStartTime(lesson,zerolesson) && lessonSameEndTime(lesson,zerolesson)) {
        lessons.remove(j);
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        if (i != timegridForDateTimeDay.size() - 1) {
          Lesson tmp2=new Lesson();
          tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
          tmp2.setStartTime(timegridForDateTimeDay.get(i + 1).getStart().getHour(),timegridForDateTimeDay.get(i + 1).getStart().getMinute());
          tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
          tmp2.setId(lesson.getId());
          tmp2.setLessonCode(lesson.getLessonCode());
          tmp2.setLessonType(lesson.getLessonType());
          tmp2.setSchoolClasses(lesson.getSchoolClasses());
          tmp2.setSchoolRooms(lesson.getSchoolRooms());
          tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
          tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
          lessons.add(tmp2);
        }
        lessons.add(tmp1);
      }
 else       if ((lesson.getStartTime().getHour() < timegridForDateTimeDay.get(0).getStart().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(timegridForDateTimeDay.get(0).getStart().getHour(),timegridForDateTimeDay.get(0).getStart().getMinute());
        tmp1.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp1);
      }
 else       if (lesson.getStartTime().getMinute() >= timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() >= timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() <= timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() <= timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}",0.9233971690258118
152741,"private GUIDay analyseDay(DateTime date,List<Lesson> lessons){
  GUIDay day=new GUIDay();
  day.setDate(date);
  boolean dispZerolesson=settings.isDisplayZerothLesson();
  timegridForDateTimeDay=new ArrayList<TimegridUnit>();
  List<TimegridUnit> timegridForDay=timegrid.getTimegridForDateTimeDay(date.getWeekDay());
  webuntisOnlyZeroTimegridUnitsHack(timegridForDay);
  for (  TimegridUnit timegridUnit : timegridForDay) {
    if (!dispZerolesson) {
      if (timegridUnit.getName().equals(""String_Node_Str"") && timegridUnit.getEnd().getHour() <= 8 && timegridUnit.getEnd().getMinute() == 0) {
        zerolesson=timegridUnit;
      }
 else {
        timegridForDateTimeDay.add(timegridUnit);
      }
    }
 else {
      timegridForDateTimeDay.add(timegridUnit);
    }
  }
  if (zerolesson != null)   Log.d(""String_Node_Str"",""String_Node_Str"" + zerolesson.getStart() + ""String_Node_Str""+ zerolesson.getEnd()+ ""String_Node_Str""+ date.toString());
  if (lessons.size() == 0) {
    for (    TimegridUnit timegridUnit : timegridForDateTimeDay) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  for (int i=0; i < timegridForDateTimeDay.size(); i++) {
    TimegridUnit timegridUnit=timegridForDateTimeDay.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (!dispZerolesson && zerolesson != null && lessonsSameStartTime(lesson,zerolesson) && lessonSameEndTime(lesson,zerolesson)) {
        lessons.remove(j);
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        if (i != timegridForDateTimeDay.size() - 1) {
          Lesson tmp2=new Lesson();
          tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
          tmp2.setStartTime(timegridForDateTimeDay.get(i + 1).getStart().getHour(),timegridForDateTimeDay.get(i + 1).getStart().getMinute());
          tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
          tmp2.setId(lesson.getId());
          tmp2.setLessonCode(lesson.getLessonCode());
          tmp2.setLessonType(lesson.getLessonType());
          tmp2.setSchoolClasses(lesson.getSchoolClasses());
          tmp2.setSchoolRooms(lesson.getSchoolRooms());
          tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
          tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
          lessons.add(tmp2);
        }
        lessons.add(tmp1);
      }
 else       if ((lesson.getStartTime().getHour() < timegridForDateTimeDay.get(0).getStart().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(timegridForDateTimeDay.get(0).getStart().getHour(),timegridForDateTimeDay.get(0).getStart().getMinute());
        tmp1.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp1);
      }
 else       if (lesson.getStartTime().getMinute() >= timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() >= timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() <= timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() <= timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}","private GUIDay analyseDay(DateTime date,List<Lesson> lessons){
  GUIDay day=new GUIDay();
  day.setDate(date);
  boolean dispZerolesson=settings.isDisplayZerothLesson();
  timegridForDateTimeDay=new ArrayList<TimegridUnit>();
  List<TimegridUnit> timegridForDay=timegrid.getTimegridForDateTimeDay(date.getWeekDay());
  if (lessons.size() == 0 || timegridForDay == null) {
    for (    TimegridUnit timegridUnit : timegridForDateTimeDay) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  webuntisOnlyZeroTimegridUnitsHack(timegridForDay);
  for (  TimegridUnit timegridUnit : timegridForDay) {
    if (!dispZerolesson) {
      if (timegridUnit.getName().equals(""String_Node_Str"") && timegridUnit.getEnd().getHour() <= 8 && timegridUnit.getEnd().getMinute() == 0) {
        zerolesson=timegridUnit;
      }
 else {
        timegridForDateTimeDay.add(timegridUnit);
      }
    }
 else {
      timegridForDateTimeDay.add(timegridUnit);
    }
  }
  if (zerolesson != null)   Log.d(""String_Node_Str"",""String_Node_Str"" + zerolesson.getStart() + ""String_Node_Str""+ zerolesson.getEnd()+ ""String_Node_Str""+ date.toString());
  for (int i=0; i < timegridForDateTimeDay.size(); i++) {
    TimegridUnit timegridUnit=timegridForDateTimeDay.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (!dispZerolesson && zerolesson != null && lessonsSameStartTime(lesson,zerolesson) && lessonSameEndTime(lesson,zerolesson)) {
        lessons.remove(j);
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        if (i != timegridForDateTimeDay.size() - 1) {
          Lesson tmp2=new Lesson();
          tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
          tmp2.setStartTime(timegridForDateTimeDay.get(i + 1).getStart().getHour(),timegridForDateTimeDay.get(i + 1).getStart().getMinute());
          tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
          tmp2.setId(lesson.getId());
          tmp2.setLessonCode(lesson.getLessonCode());
          tmp2.setLessonType(lesson.getLessonType());
          tmp2.setSchoolClasses(lesson.getSchoolClasses());
          tmp2.setSchoolRooms(lesson.getSchoolRooms());
          tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
          tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
          lessons.add(tmp2);
        }
        lessons.add(tmp1);
      }
 else       if ((lesson.getStartTime().getHour() < timegridForDateTimeDay.get(0).getStart().getHour())) {
        lessons.remove(j);
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(timegridForDateTimeDay.get(0).getStart().getHour(),timegridForDateTimeDay.get(0).getStart().getMinute());
        tmp1.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp1);
      }
 else       if (lesson.getStartTime().getMinute() >= timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() >= timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() <= timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() <= timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}",0.8930722891566265
152742,"private GUIDay analyseDay(DateTime date,List<Lesson> lessons){
  GUIDay day=new GUIDay();
  day.setDate(date);
  if (timegridForDateTimeDay == null) {
    timegridForDateTimeDay=timegrid.getTimegridForDay(WebUntis.MONDAY);
  }
  if (lessons.size() == 0) {
    for (    TimegridUnit timegridUnit : timegridForDateTimeDay) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  for (int i=0; i < timegridForDateTimeDay.size(); i++) {
    TimegridUnit timegridUnit=timegridForDateTimeDay.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        Log.d(""String_Node_Str"",lesson.toString());
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        Lesson tmp2=new Lesson();
        tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp2.setStartTime(timegridForDateTimeDay.get(i + 1).getStart().getHour(),timegridForDateTimeDay.get(i + 1).getStart().getMinute());
        tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp2.setId(lesson.getId());
        tmp2.setLessonCode(lesson.getLessonCode());
        tmp2.setLessonType(lesson.getLessonType());
        tmp2.setSchoolClasses(lesson.getSchoolClasses());
        tmp2.setSchoolRooms(lesson.getSchoolRooms());
        tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp2);
        if (tmp1.getLessonCode() instanceof LessonCodeIrregular || tmp1.getLessonCode() instanceof LessonCodeCancelled || tmp1.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(tmp1);
        }
 else {
          lessoncon.addStandardLesson(tmp1);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}","private GUIDay analyseDay(DateTime date,List<Lesson> lessons){
  GUIDay day=new GUIDay();
  day.setDate(date);
  if (timegridForDateTimeDay == null) {
    timegridForDateTimeDay=timegrid.getTimegridForDay(WebUntis.MONDAY);
  }
  if (lessons.size() == 0) {
    for (    TimegridUnit timegridUnit : timegridForDateTimeDay) {
      GUILessonContainer lessoncon=new GUILessonContainer();
      lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
      lessoncon.setDate(date);
      day.addLessonContainer(timegridUnit.getStart(),lessoncon);
    }
    return day;
  }
  for (int i=0; i < timegridForDateTimeDay.size(); i++) {
    TimegridUnit timegridUnit=timegridForDateTimeDay.get(i);
    GUILessonContainer lessoncon=new GUILessonContainer();
    lessoncon.setTime(timegridUnit.getStart(),timegridUnit.getEnd());
    lessoncon.setDate(date);
    for (int j=0; j < lessons.size(); j++) {
      Lesson lesson=lessons.get(j);
      if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && lesson.getEndTime().getMinute() == timegridUnit.getEnd().getMinute() && lesson.getEndTime().getHour() == timegridUnit.getEnd().getHour()) {
        if (lesson.getLessonCode() instanceof LessonCodeIrregular || lesson.getLessonCode() instanceof LessonCodeCancelled || lesson.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(lesson);
        }
 else {
          lessoncon.addStandardLesson(lesson);
        }
      }
 else       if (lesson.getStartTime().getMinute() == timegridUnit.getStart().getMinute() && lesson.getStartTime().getHour() == timegridUnit.getStart().getHour() && (lesson.getEndTime().getMinute() != timegridUnit.getEnd().getMinute() || lesson.getEndTime().getHour() != timegridUnit.getEnd().getHour())) {
        lessons.remove(i);
        Log.d(""String_Node_Str"",lesson.toString());
        Lesson tmp1=new Lesson();
        tmp1.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp1.setStartTime(lesson.getStartTime().getHour(),lesson.getStartTime().getMinute());
        tmp1.setEndTime(timegridUnit.getEnd().getHour(),timegridUnit.getEnd().getMinute());
        tmp1.setId(lesson.getId());
        tmp1.setLessonCode(lesson.getLessonCode());
        tmp1.setLessonType(lesson.getLessonType());
        tmp1.setSchoolClasses(lesson.getSchoolClasses());
        tmp1.setSchoolRooms(lesson.getSchoolRooms());
        tmp1.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp1.setSchoolTeachers(lesson.getSchoolTeachers());
        Lesson tmp2=new Lesson();
        tmp2.setDate(lesson.getDate().getYear(),lesson.getDate().getMonth(),lesson.getDate().getDay());
        tmp2.setStartTime(timegridForDateTimeDay.get(i + 1).getStart().getHour(),timegridForDateTimeDay.get(i + 1).getStart().getMinute());
        tmp2.setEndTime(lesson.getEndTime().getHour(),lesson.getEndTime().getMinute());
        tmp2.setId(lesson.getId());
        tmp2.setLessonCode(lesson.getLessonCode());
        tmp2.setLessonType(lesson.getLessonType());
        tmp2.setSchoolClasses(lesson.getSchoolClasses());
        tmp2.setSchoolRooms(lesson.getSchoolRooms());
        tmp2.setSchoolSubjects(lesson.getSchoolSubjects());
        tmp2.setSchoolTeachers(lesson.getSchoolTeachers());
        lessons.add(tmp2);
        if (tmp1.getLessonCode() instanceof LessonCodeIrregular || tmp1.getLessonCode() instanceof LessonCodeCancelled || tmp1.getLessonCode() instanceof LessonCodeSubstitute) {
          lessoncon.addSpecialLesson(tmp1);
        }
 else {
          lessoncon.addStandardLesson(tmp1);
        }
      }
    }
    day.addLessonContainer(timegridUnit.getStart(),lessoncon);
  }
  return day;
}",0.9964195730009282
152743,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (lessoncontainer.istSomethinStrange())   __paintRedBorder(canvas);
  List<Lesson> lessons=lessoncontainer.getStandardLessons();
  ArrayList<String> firstline=new ArrayList<String>();
  ArrayList<String> secondline=new ArrayList<String>();
  List<? extends ViewType> vtfirstline=null;
  List<? extends ViewType> vtsecondline=null;
  for (  Lesson l : lessons) {
    if (viewtype instanceof SchoolClass) {
      vtfirstline=l.getSchoolSubjects();
      vtsecondline=l.getSchoolTeachers();
    }
 else     if (viewtype instanceof SchoolTeacher) {
      vtfirstline=l.getSchoolClasses();
      vtsecondline=l.getSchoolSubjects();
    }
 else     if (viewtype instanceof SchoolRoom) {
      vtfirstline=l.getSchoolClasses();
      vtsecondline=l.getSchoolTeachers();
    }
 else     if (viewtype instanceof SchoolSubject) {
      vtfirstline=l.getSchoolTeachers();
      vtsecondline=l.getSchoolClasses();
    }
    for (    ViewType s : vtfirstline) {
      if (!firstline.contains(s.getName()))       firstline.add(s.getName());
    }
    for (    ViewType s : vtsecondline) {
      if (!secondline.contains(s.getName()))       secondline.add(s.getName());
    }
  }
  int left=getResources().getDimensionPixelSize(R.dimen.gui_lesson_padding_left);
  int top=getResources().getDimensionPixelSize(R.dimen.gui_lesson_padding_top);
  int l1l2p=getResources().getDimensionPixelSize(R.dimen.gui_lesson_line1_line1_padding);
  TextPaint tp=new TextPaint(paint);
  tp.setTypeface(Typeface.DEFAULT_BOLD);
  tp.setTextSize(getResources().getDimension(R.dimen.gui_lesson_line1_size));
  String line1=prepareListForDisplay(firstline,tp);
  canvas.drawText(line1,left,top,tp);
  tp.setTextSize(getResources().getDimension(R.dimen.gui_lesson_line2_size));
  tp.setTypeface(Typeface.DEFAULT);
  String line2=prepareListForDisplay(secondline,tp);
  canvas.drawText(line2,left,l1l2p + top,tp);
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (lessoncontainer.isSomethinStrange())   __paintRedBorder(canvas);
  List<Lesson> lessons=lessoncontainer.getStandardLessons();
  ArrayList<String> firstline=new ArrayList<String>();
  ArrayList<String> secondline=new ArrayList<String>();
  List<? extends ViewType> vtfirstline=null;
  List<? extends ViewType> vtsecondline=null;
  for (  Lesson l : lessons) {
    if (viewtype instanceof SchoolClass) {
      vtfirstline=l.getSchoolSubjects();
      vtsecondline=l.getSchoolTeachers();
    }
 else     if (viewtype instanceof SchoolTeacher) {
      vtfirstline=l.getSchoolClasses();
      vtsecondline=l.getSchoolSubjects();
    }
 else     if (viewtype instanceof SchoolRoom) {
      vtfirstline=l.getSchoolClasses();
      vtsecondline=l.getSchoolTeachers();
    }
 else     if (viewtype instanceof SchoolSubject) {
      vtfirstline=l.getSchoolTeachers();
      vtsecondline=l.getSchoolClasses();
    }
    for (    ViewType s : vtfirstline) {
      if (!firstline.contains(s.getName()))       firstline.add(s.getName());
    }
    for (    ViewType s : vtsecondline) {
      if (!secondline.contains(s.getName()))       secondline.add(s.getName());
    }
  }
  int left=getResources().getDimensionPixelSize(R.dimen.gui_lesson_padding_left);
  int top=getResources().getDimensionPixelSize(R.dimen.gui_lesson_padding_top);
  int l1l2p=getResources().getDimensionPixelSize(R.dimen.gui_lesson_line1_line1_padding);
  TextPaint tp=new TextPaint(paint);
  tp.setTypeface(Typeface.DEFAULT_BOLD);
  tp.setTextSize(getResources().getDimension(R.dimen.gui_lesson_line1_size));
  String line1=prepareListForDisplay(firstline,tp);
  canvas.drawText(line1,left,top,tp);
  tp.setTextSize(getResources().getDimension(R.dimen.gui_lesson_line2_size));
  tp.setTypeface(Typeface.DEFAULT);
  String line2=prepareListForDisplay(secondline,tp);
  canvas.drawText(line2,left,l1l2p + top,tp);
}",0.9997439180537772
152744,"private void paintText(Canvas canvas){
  List<SchoolClass> schoolClasses=lesson.getSchoolClasses();
  List<SchoolRoom> schoolRooms=lesson.getSchoolRooms();
  List<SchoolSubject> schoolSubjects=lesson.getSchoolSubjects();
  List<SchoolTeacher> schoolTeachers=lesson.getSchoolTeachers();
  TextPaint tp=new TextPaint();
  tp.setColor(Color.BLACK);
  tp.setAntiAlias(true);
  tp.setTextSize(30);
  StringBuilder classes=new StringBuilder();
  StringBuilder rooms=new StringBuilder();
  StringBuilder subjects=new StringBuilder();
  StringBuilder teacher=new StringBuilder();
  for (  SchoolClass s : schoolClasses) {
    classes.append(s.getName() + ""String_Node_Str"");
  }
  for (  SchoolRoom s : schoolRooms) {
    rooms.append(s.getName() + ""String_Node_Str"");
  }
  for (  SchoolSubject s : schoolSubjects) {
    subjects.append(s.getName() + ""String_Node_Str"");
  }
  for (  SchoolTeacher s : schoolTeachers) {
    teacher.append(s.getName() + ""String_Node_Str"");
  }
  if (lcode instanceof LessonCodeSubstitute) {
    LessonCodeSubstitute lcs=(LessonCodeSubstitute)lcode;
    SchoolRoom originSchoolRoom=lcs.getOriginSchoolRoom();
    SchoolTeacher originSchoolTeacher=lcs.getOriginSchoolTeacher();
    if (originSchoolRoom != null)     rooms.append(""String_Node_Str"" + originSchoolRoom.getName() + ""String_Node_Str"");
    if (originSchoolTeacher != null)     teacher.append(""String_Node_Str"" + originSchoolTeacher.getName() + ""String_Node_Str"");
  }
  StaticLayout sl=new StaticLayout(classes.toString(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
  canvas.translate(0,40);
  sl.draw(canvas);
  sl=new StaticLayout(teacher.toString(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
  canvas.translate(0,40);
  sl.draw(canvas);
  sl=new StaticLayout(subjects.toString(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
  canvas.translate(0,40);
  sl.draw(canvas);
  sl=new StaticLayout(rooms.toString(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
  canvas.translate(0,40);
  sl.draw(canvas);
}","private void paintText(Canvas canvas){
  List<SchoolClass> schoolClasses=lesson.getSchoolClasses();
  List<SchoolRoom> schoolRooms=lesson.getSchoolRooms();
  List<SchoolSubject> schoolSubjects=lesson.getSchoolSubjects();
  List<SchoolTeacher> schoolTeachers=lesson.getSchoolTeachers();
  TextPaint tp=new TextPaint();
  tp.setColor(Color.BLACK);
  tp.setAntiAlias(true);
  tp.setTextSize(30);
  StringBuilder classes=new StringBuilder();
  StringBuilder rooms=new StringBuilder();
  StringBuilder subjects=new StringBuilder();
  StringBuilder teacher=new StringBuilder();
  for (  SchoolClass s : schoolClasses) {
    classes.append(s.getName().trim() + ""String_Node_Str"");
  }
  for (  SchoolRoom s : schoolRooms) {
    rooms.append(s.getName().trim() + ""String_Node_Str"");
  }
  for (  SchoolSubject s : schoolSubjects) {
    subjects.append(s.getName().trim() + ""String_Node_Str"");
  }
  for (  SchoolTeacher s : schoolTeachers) {
    teacher.append(s.getName().trim() + ""String_Node_Str"");
  }
  if (lcode instanceof LessonCodeSubstitute) {
    LessonCodeSubstitute lcs=(LessonCodeSubstitute)lcode;
    SchoolRoom originSchoolRoom=lcs.getOriginSchoolRoom();
    SchoolTeacher originSchoolTeacher=lcs.getOriginSchoolTeacher();
    if (originSchoolRoom != null)     rooms.append(""String_Node_Str"" + originSchoolRoom.getName() + ""String_Node_Str"");
    if (originSchoolTeacher != null)     teacher.append(""String_Node_Str"" + originSchoolTeacher.getName() + ""String_Node_Str"");
  }
  ArrayList<String> splitString=splitString(classes.toString(),tp);
  StaticLayout sl=null;
  for (  String line : splitString) {
    canvas.translate(0,40);
    sl=new StaticLayout(line.trim(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
    sl.draw(canvas);
  }
  sl=new StaticLayout(teacher.toString(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
  canvas.translate(0,50);
  sl.draw(canvas);
  sl=new StaticLayout(subjects.toString(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
  canvas.translate(0,50);
  sl.draw(canvas);
  sl=new StaticLayout(rooms.toString(),tp,width,Layout.Alignment.ALIGN_CENTER,0,0,false);
  canvas.translate(0,50);
  sl.draw(canvas);
}",0.935375777884155
152745,"@Override public DataFacade<Map<String,List<Lesson>>> getLessons(ViewType view,DateTime startDate,DateTime endDate){
  final String id=getNextID();
  final String method=JSONGetMethods.getTimetable;
  final JSONObject request=new JSONObject();
  final JSONObject params=new JSONObject();
  DataFacade<Map<String,List<Lesson>>> data=new DataFacade<Map<String,List<Lesson>>>();
  Map<String,List<Lesson>> lessonMap=new HashMap<String,List<Lesson>>();
  try {
    params.put(""String_Node_Str"",view.getId());
    params.put(""String_Node_Str"",viewTypeMapping.get(view.getClass()));
    String startYear=""String_Node_Str"" + startDate.getYear();
    String startMonth=""String_Node_Str"" + startDate.getMonth();
    String startDay=""String_Node_Str"" + startDate.getDay();
    if (startMonth.length() < 2) {
      startMonth=""String_Node_Str"" + startMonth;
    }
    if (startDay.length() < 2) {
      startDay=""String_Node_Str"" + startDay;
    }
    String endYear=""String_Node_Str"" + endDate.getYear();
    String endMonth=""String_Node_Str"" + endDate.getMonth();
    String endDay=""String_Node_Str"" + startDate.getDay();
    if (endMonth.length() < 2) {
      endMonth=""String_Node_Str"" + endMonth;
    }
    if (endDay.length() < 2) {
      endDay=""String_Node_Str"" + endDay;
    }
    params.put(""String_Node_Str"",startYear + startMonth + startDay);
    params.put(""String_Node_Str"",endYear + endMonth + endDay);
    request.put(""String_Node_Str"",jsonrpcVersion);
    request.put(""String_Node_Str"",method);
    request.put(""String_Node_Str"",id);
    request.put(""String_Node_Str"",params);
    JSONObject response=getJSONData(request);
    JSONArray result=response.getJSONArray(""String_Node_Str"");
    lessonMap=jsonParser.jsonToLessonMap(result);
    lessonProcessor.addEmptyDaysToLessonMap(lessonMap,startDate,endDate);
    data.setData(lessonMap);
  }
 catch (  JSONException e) {
    ErrorMessage errorMessage=new ErrorMessage();
    errorMessage.setErrorCode(ErrorCodes.JSON_EXCEPTION);
    errorMessage.setException(e);
    data.setErrorMessage(errorMessage);
  }
catch (  IOException e) {
    ErrorMessage errorMessage=new ErrorMessage();
    errorMessage.setErrorCode(ErrorCodes.IO_EXCEPTION);
    errorMessage.setException(e);
    data.setErrorMessage(errorMessage);
  }
  return data;
}","@Override public DataFacade<Map<String,List<Lesson>>> getLessons(ViewType view,DateTime startDate,DateTime endDate){
  final String id=getNextID();
  final String method=JSONGetMethods.getTimetable;
  final JSONObject request=new JSONObject();
  final JSONObject params=new JSONObject();
  DataFacade<Map<String,List<Lesson>>> data=new DataFacade<Map<String,List<Lesson>>>();
  Map<String,List<Lesson>> lessonMap=new HashMap<String,List<Lesson>>();
  try {
    params.put(""String_Node_Str"",view.getId());
    params.put(""String_Node_Str"",viewTypeMapping.get(view.getClass()));
    String startYear=""String_Node_Str"" + startDate.getYear();
    String startMonth=""String_Node_Str"" + startDate.getMonth();
    String startDay=""String_Node_Str"" + startDate.getDay();
    if (startMonth.length() < 2) {
      startMonth=""String_Node_Str"" + startMonth;
    }
    if (startDay.length() < 2) {
      startDay=""String_Node_Str"" + startDay;
    }
    String endYear=""String_Node_Str"" + endDate.getYear();
    String endMonth=""String_Node_Str"" + endDate.getMonth();
    String endDay=""String_Node_Str"" + endDate.getDay();
    if (endMonth.length() < 2) {
      endMonth=""String_Node_Str"" + endMonth;
    }
    if (endDay.length() < 2) {
      endDay=""String_Node_Str"" + endDay;
    }
    params.put(""String_Node_Str"",startYear + startMonth + startDay);
    params.put(""String_Node_Str"",endYear + endMonth + endDay);
    request.put(""String_Node_Str"",jsonrpcVersion);
    request.put(""String_Node_Str"",method);
    request.put(""String_Node_Str"",id);
    request.put(""String_Node_Str"",params);
    JSONObject response=getJSONData(request);
    JSONArray result=response.getJSONArray(""String_Node_Str"");
    lessonMap=jsonParser.jsonToLessonMap(result);
    lessonProcessor.addEmptyDaysToLessonMap(lessonMap,startDate,endDate);
    data.setData(lessonMap);
  }
 catch (  JSONException e) {
    ErrorMessage errorMessage=new ErrorMessage();
    errorMessage.setErrorCode(ErrorCodes.JSON_EXCEPTION);
    errorMessage.setException(e);
    data.setErrorMessage(errorMessage);
  }
catch (  IOException e) {
    ErrorMessage errorMessage=new ErrorMessage();
    errorMessage.setErrorCode(ErrorCodes.IO_EXCEPTION);
    errorMessage.setException(e);
    data.setErrorMessage(errorMessage);
  }
  return data;
}",0.99825251201398
152746,"@Override public String getResponse(String request) throws IOException {
  String response=null;
  try {
    response=executeRequest(request);
  }
 catch (  SocketTimeoutException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"",e);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    httpsUrl=url;
    response=executeRequest(request);
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
catch (  SSLException e) {
    if (e.getMessage().equals(""String_Node_Str"")) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().unregister(""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().register(new Scheme(""String_Node_Str"",caCertSSLSocketFactory(),httpsUrl != null && httpsUrl.getPort() != -1 ? httpsUrl.getPort() : 443));
      try {
        response=executeRequest(request);
      }
 catch (      SSLException e2) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        httpsUrl=url;
        response=executeRequest(request);
      }
    }
 else {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      httpsUrl=url;
      response=executeRequest(request);
    }
  }
catch (  UnknownHostException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + url + ""String_Node_Str""+ url.getHost());
    throw new UnknownHostException(""String_Node_Str"" + url.getHost());
  }
  if (response == null) {
    throw new IOException(""String_Node_Str"");
  }
  return response;
}","@Override public String getResponse(String request) throws IOException {
  String response=null;
  try {
    response=executeRequest(request);
  }
 catch (  SocketTimeoutException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"",e);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    httpsUrl=url;
    response=executeRequest(request);
  }
catch (  IllegalArgumentException e) {
    new IOException(e.getMessage());
  }
catch (  SSLException e) {
    if (e.getMessage().equals(""String_Node_Str"")) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().unregister(""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().register(new Scheme(""String_Node_Str"",caCertSSLSocketFactory(),httpsUrl != null && httpsUrl.getPort() != -1 ? httpsUrl.getPort() : 443));
      try {
        response=executeRequest(request);
      }
 catch (      SSLException e2) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        httpsUrl=url;
        response=executeRequest(request);
      }
    }
 else {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      httpsUrl=url;
      response=executeRequest(request);
    }
  }
catch (  UnknownHostException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + url + ""String_Node_Str""+ url.getHost());
    throw new UnknownHostException(""String_Node_Str"" + url.getHost());
  }
  if (response == null) {
    throw new IOException(""String_Node_Str"");
  }
  return response;
}",0.2750754780275075
152747,"private String executeRequest(String request) throws ClientProtocolException, UnknownHostException, IOException {
  HttpPost httpRequest=new HttpPost(httpsUrl);
  if (jsessionid != null) {
    httpRequest.addHeader(""String_Node_Str"",""String_Node_Str"" + jsessionid);
    Log.d(""String_Node_Str"",""String_Node_Str"" + httpRequest.getHeaders(""String_Node_Str"")[0].toString());
  }
  StringEntity entity=new StringEntity(request,""String_Node_Str"");
  httpRequest.setEntity(entity);
  HttpResponse httpResponse=null;
  String response;
  httpResponse=client.execute(httpRequest);
  Log.d(""String_Node_Str"",""String_Node_Str"" + request);
  ByteArrayOutputStream body=new ByteArrayOutputStream();
  httpResponse.getEntity().writeTo(body);
  response=body.toString();
  Log.d(""String_Node_Str"",""String_Node_Str"" + httpResponse.getStatusLine());
  Log.d(""String_Node_Str"",""String_Node_Str"" + response);
  return response;
}","private String executeRequest(String request) throws ClientProtocolException, UnknownHostException, IOException {
  HttpPost httpRequest=new HttpPost(httpsUrl);
  if (jsessionid != null) {
    httpRequest.addHeader(""String_Node_Str"",""String_Node_Str"" + jsessionid);
    Log.d(""String_Node_Str"",""String_Node_Str"" + httpRequest.getHeaders(""String_Node_Str"")[0].toString());
  }
  StringEntity entity=new StringEntity(request,""String_Node_Str"");
  httpRequest.setEntity(entity);
  HttpResponse httpResponse=client.execute(httpRequest);
  Log.d(""String_Node_Str"",""String_Node_Str"" + request);
  ByteArrayOutputStream body=new ByteArrayOutputStream();
  httpResponse.getEntity().writeTo(body);
  String response=body.toString();
  Log.d(""String_Node_Str"",""String_Node_Str"" + httpResponse.getStatusLine());
  Log.d(""String_Node_Str"",""String_Node_Str"" + response);
  return response;
}",0.9737283398546674
152748,"@Override public String getResponse(String request) throws IOException {
  String response=null;
  try {
    response=executeRequest(request);
  }
 catch (  SocketTimeoutException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"",e);
    throw new SocketTimeoutException(""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
catch (  SSLException e) {
    if (e.getMessage().equals(""String_Node_Str"")) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().unregister(""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().register(new Scheme(""String_Node_Str"",newSslSocketFactory(),httpsUrl != null && httpsUrl.getPort() != -1 ? httpsUrl.getPort() : 443));
      try {
        response=executeRequest(request);
      }
 catch (      SSLException e2) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        httpsUrl=url;
        response=executeRequest(request);
      }
    }
  }
catch (  UnknownHostException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + url + ""String_Node_Str""+ url.getHost());
    throw new UnknownHostException(""String_Node_Str"" + url.getHost());
  }
  if (response == null) {
    throw new IOException(""String_Node_Str"");
  }
  return response;
}","@Override public String getResponse(String request) throws IOException {
  String response=null;
  try {
    response=executeRequest(request);
  }
 catch (  SocketTimeoutException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"",e);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    httpsUrl=url;
    try {
      response=executeRequest(request);
    }
 catch (    SocketTimeoutException e2) {
      throw new SocketTimeoutException(""String_Node_Str"");
    }
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
catch (  SSLException e) {
    if (e.getMessage().equals(""String_Node_Str"")) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().unregister(""String_Node_Str"");
      client.getConnectionManager().getSchemeRegistry().register(new Scheme(""String_Node_Str"",newSslSocketFactory(),httpsUrl != null && httpsUrl.getPort() != -1 ? httpsUrl.getPort() : 443));
      try {
        response=executeRequest(request);
      }
 catch (      SSLException e2) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        httpsUrl=url;
        response=executeRequest(request);
      }
    }
 else {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      httpsUrl=url;
      response=executeRequest(request);
    }
  }
catch (  UnknownHostException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + url + ""String_Node_Str""+ url.getHost());
    throw new UnknownHostException(""String_Node_Str"" + url.getHost());
  }
  if (response == null) {
    throw new IOException(""String_Node_Str"");
  }
  return response;
}",0.8802171700033933
152749,"public static void close(Statement statement){
  try {
    Connection connection=statement.getConnection();
    statement.close();
    connection.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public static void close(Statement statement){
  if (statement == null) {
    return;
  }
  try {
    Connection connection=statement.getConnection();
    statement.close();
    connection.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.909853249475891
152750,"/** 
 * @throws SQLException 
 */
private void insertServers() throws SQLException {
  String serversToCrawlStr=configuration.getProperty(""String_Node_Str"");
  String[] serversToCrawl=serversToCrawlStr.split(""String_Node_Str"");
  for (  String server : serversToCrawl) {
    PreparedStatement statement=dataSource.prepareStatement(""String_Node_Str"",server);
    try {
      statement.execute();
    }
 catch (    SQLException e) {
      LOGGER.warn(""String_Node_Str"" + server);
    }
 finally {
      ChannelDirectoryDataSource.close(statement);
    }
  }
}","/** 
 * @throws SQLException 
 */
private void insertServers() throws SQLException {
  String serversToCrawlStr=configuration.getProperty(""String_Node_Str"");
  String[] serversToCrawl=serversToCrawlStr.split(""String_Node_Str"");
  for (  String server : serversToCrawl) {
    CrawlerHelper.insertServer(server,dataSource);
  }
}",0.6628959276018099
152751,"private void crawl(List<NodeCrawler> nodeCrawlers,String server,PubSubManager manager,Item item){
  Node node=null;
  try {
    node=manager.getNode(item.getNode());
  }
 catch (  Exception e) {
    LOGGER.warn(""String_Node_Str"" + item.getNode() + ""String_Node_Str""+ ""String_Node_Str""+ server+ ""String_Node_Str"",e);
    return;
  }
  try {
    insertNode(node,server);
  }
 catch (  Exception e) {
    LOGGER.warn(""String_Node_Str"" + item.getNode() + ""String_Node_Str""+ ""String_Node_Str""+ server+ ""String_Node_Str"",e);
  }
  for (  NodeCrawler nodeCrawler : nodeCrawlers) {
    try {
      if (nodeCrawler.accept(node)) {
        nodeCrawler.crawl(node,server);
      }
    }
 catch (    Exception e) {
      LOGGER.warn(""String_Node_Str"" + item.getNode() + ""String_Node_Str""+ ""String_Node_Str""+ server+ ""String_Node_Str"",e);
    }
  }
}","private void crawl(List<NodeCrawler> nodeCrawlers,String server,PubSubManager manager,Item item){
  Node node=null;
  try {
    node=manager.getNode(item.getNode());
  }
 catch (  Exception e) {
    LOGGER.warn(""String_Node_Str"" + item.getNode() + ""String_Node_Str""+ ""String_Node_Str""+ server+ ""String_Node_Str"",e);
    return;
  }
  CrawlerHelper.insertNode(node,server,dataSource);
  for (  NodeCrawler nodeCrawler : nodeCrawlers) {
    try {
      if (nodeCrawler.accept(node)) {
        nodeCrawler.crawl(node,server);
      }
    }
 catch (    Exception e) {
      LOGGER.warn(""String_Node_Str"" + item.getNode() + ""String_Node_Str""+ ""String_Node_Str""+ server+ ""String_Node_Str"",e);
    }
  }
}",0.6749185667752443
152752,"/** 
 * @param user
 * @throws SQLException 
 */
public static void enqueueNewServer(String user,ChannelDirectoryDataSource dataSource){
  String server=user.substring(user.indexOf('@') + 1);
  PreparedStatement statement=null;
  try {
    statement=dataSource.prepareStatement(""String_Node_Str"",server);
    statement.execute();
  }
 catch (  SQLException e) {
    LOGGER.warn(""String_Node_Str"" + server);
  }
 finally {
    if (statement != null) {
      ChannelDirectoryDataSource.close(statement);
    }
  }
}","/** 
 * @param user
 * @throws SQLException 
 */
public static void enqueueNewServer(String user,ChannelDirectoryDataSource dataSource){
  String server=user.substring(user.indexOf('@') + 1);
  insertServer(server,dataSource);
}",0.5317139001349528
152753,"@Override public long toChannelId(String channelJid){
  try {
    Connection connection=dataSource.getConnection();
    PreparedStatement selectItemSt=connection.prepareStatement(""String_Node_Str"");
    selectItemSt.setString(1,channelJid);
    ResultSet resultSet=selectItemSt.executeQuery();
    resultSet.next();
    long itemId=resultSet.getLong(""String_Node_Str"");
    selectItemSt.close();
    connection.close();
    return itemId;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","@Override public long toChannelId(String channelJid){
  PreparedStatement statement=null;
  try {
    Connection connection=dataSource.getConnection();
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setString(1,channelJid);
    ResultSet resultSet=statement.executeQuery();
    resultSet.next();
    long itemId=resultSet.getLong(""String_Node_Str"");
    return itemId;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    close(statement);
  }
}",0.8094302554027505
152754,"@Override public ChannelData toChannelData(long itemID){
  try {
    Connection connection=dataSource.getConnection();
    PreparedStatement selectItemSt=connection.prepareStatement(""String_Node_Str"");
    selectItemSt.setLong(1,itemID);
    ResultSet resultSet=selectItemSt.executeQuery();
    resultSet.next();
    String jid=resultSet.getString(""String_Node_Str"");
    String title=resultSet.getString(""String_Node_Str"");
    String desc=resultSet.getString(""String_Node_Str"");
    selectItemSt.close();
    ChannelData channelData=new ChannelData();
    channelData.setId(jid);
    channelData.setTitle(title);
    channelData.setDescription(desc);
    connection.close();
    return channelData;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","@Override public ChannelData toChannelData(long itemID){
  PreparedStatement statement=null;
  try {
    Connection connection=dataSource.getConnection();
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setLong(1,itemID);
    ResultSet resultSet=statement.executeQuery();
    resultSet.next();
    String jid=resultSet.getString(""String_Node_Str"");
    String title=resultSet.getString(""String_Node_Str"");
    String desc=resultSet.getString(""String_Node_Str"");
    ChannelData channelData=new ChannelData();
    channelData.setId(jid);
    channelData.setTitle(title);
    channelData.setDescription(desc);
    return channelData;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    close(statement);
  }
}",0.795071335927367
152755,"@Override public long toUserId(String userJid){
  try {
    Connection connection=dataSource.getConnection();
    PreparedStatement selectUserSt=connection.prepareStatement(""String_Node_Str"");
    selectUserSt.setString(1,userJid);
    ResultSet resultSet=selectUserSt.executeQuery();
    resultSet.next();
    long userId=resultSet.getLong(""String_Node_Str"");
    selectUserSt.close();
    connection.close();
    return userId;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","@Override public long toUserId(String userJid){
  PreparedStatement statement=null;
  try {
    Connection connection=dataSource.getConnection();
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setString(1,userJid);
    ResultSet resultSet=statement.executeQuery();
    resultSet.next();
    long userId=resultSet.getLong(""String_Node_Str"");
    return userId;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    close(statement);
  }
}",0.806
152756,"/** 
 * Recommends a list of jids of channels that are related to the user taste.
 * @param userJid The user jid
 * @param howMany The number of recommendations
 * @return A list of recommended channels' jids 
 * @throws TasteException
 * @throws SQLException 
 */
public RecommendationResponse recommend(String userJid,int howMany) throws TasteException, SQLException {
  long userId=recommenderDataModel.toUserId(userJid);
  List<RecommendedItem> recommended=userRecommender.recommend(userId,howMany);
  List<ChannelData> recommendedChannels=new LinkedList<ChannelData>();
  for (  RecommendedItem recommendedItem : recommended) {
    recommendedChannels.add(recommenderDataModel.toChannelData(recommendedItem.getItemID()));
  }
  return new RecommendationResponse(recommendedChannels,getPreferenceCount(userId));
}","/** 
 * Recommends a list of jids of channels that are related to the user taste.
 * @param userJid The user jid
 * @param howMany The number of recommendations
 * @return A list of recommended channels' jids 
 * @throws TasteException
 * @throws SQLException 
 */
public RecommendationResponse recommend(String userJid,int howMany) throws TasteException, SQLException {
  Long userId=recommenderDataModel.toUserId(userJid);
  if (userId == null) {
    return new RecommendationResponse(new LinkedList<ChannelData>(),0);
  }
  List<RecommendedItem> recommended=userRecommender.recommend(userId,howMany);
  List<ChannelData> recommendedChannels=new LinkedList<ChannelData>();
  for (  RecommendedItem recommendedItem : recommended) {
    recommendedChannels.add(recommenderDataModel.toChannelData(recommendedItem.getItemID()));
  }
  return new RecommendationResponse(recommendedChannels,getPreferenceCount(userId));
}",0.9411764705882352
152757,"/** 
 * Recommends a list of jids of channels that are similar to a given channel.
 * @param channelJid The channel jid
 * @param howMany The number of recommendations
 * @return A list of similar channels' jids 
 * @throws TasteException
 * @throws SQLException 
 */
public RecommendationResponse getSimilarChannels(String channelJid,int howMany) throws TasteException, SQLException {
  long itemId=recommenderDataModel.toChannelId(channelJid);
  TopItems.Estimator<Long> estimator=new MostSimilarEstimator(itemId,itemSimilarity,null);
  MostSimilarItemsCandidateItemsStrategy candidateStrategy=new PreferredItemsNeighborhoodCandidateItemsStrategy();
  FastIDSet possibleItemIDs=candidateStrategy.getCandidateItems(new long[]{itemId},recommenderDataModel.getDataModel());
  List<RecommendedItem> recommended=TopItems.getTopItems(howMany,possibleItemIDs.iterator(),null,estimator);
  List<ChannelData> recommendedChannels=new LinkedList<ChannelData>();
  for (  RecommendedItem recommendedItem : recommended) {
    recommendedChannels.add(recommenderDataModel.toChannelData(recommendedItem.getItemID()));
  }
  return new RecommendationResponse(recommendedChannels,possibleItemIDs.size());
}","/** 
 * Recommends a list of jids of channels that are similar to a given channel.
 * @param channelJid The channel jid
 * @param howMany The number of recommendations
 * @return A list of similar channels' jids 
 * @throws TasteException
 * @throws SQLException 
 */
public RecommendationResponse getSimilarChannels(String channelJid,int howMany) throws TasteException, SQLException {
  Long itemId=recommenderDataModel.toChannelId(channelJid);
  if (itemId == null) {
    return new RecommendationResponse(new LinkedList<ChannelData>(),0);
  }
  TopItems.Estimator<Long> estimator=new MostSimilarEstimator(itemId,itemSimilarity,null);
  MostSimilarItemsCandidateItemsStrategy candidateStrategy=new PreferredItemsNeighborhoodCandidateItemsStrategy();
  FastIDSet possibleItemIDs=candidateStrategy.getCandidateItems(new long[]{itemId},recommenderDataModel.getDataModel());
  List<RecommendedItem> recommended=TopItems.getTopItems(howMany,possibleItemIDs.iterator(),null,estimator);
  List<ChannelData> recommendedChannels=new LinkedList<ChannelData>();
  for (  RecommendedItem recommendedItem : recommended) {
    recommendedChannels.add(recommenderDataModel.toChannelData(recommendedItem.getItemID()));
  }
  return new RecommendationResponse(recommendedChannels,possibleItemIDs.size());
}",0.958904109589041
152758,"/** 
 * Converts a channel jid into a long id,  which is required by Mahout.
 * @param channelJid
 * @return
 */
public long toChannelId(String channelJid);","/** 
 * Converts a channel jid into a long id,  which is required by Mahout.
 * @param channelJid
 * @return
 */
public Long toChannelId(String channelJid);",0.9935897435897436
152759,"/** 
 * Converts a user jid into a long id,  which is required by Mahout.
 * @param userJid
 * @return
 */
public long toUserId(String userJid);","/** 
 * Converts a user jid into a long id,  which is required by Mahout.
 * @param userJid
 * @return
 */
public Long toUserId(String userJid);",0.9930555555555556
152760,"@Override public long toChannelId(String channelJid){
  return itemToId.get(channelJid);
}","@Override public Long toChannelId(String channelJid){
  return itemToId.get(channelJid);
}",0.9888888888888888
152761,"@Override public long toUserId(String userJid){
  return userToId.get(userJid);
}","@Override public Long toUserId(String userJid){
  return userToId.get(userJid);
}",0.9876543209876544
152762,"@Override public long toChannelId(String channelJid){
  PreparedStatement statement=null;
  try {
    Connection connection=dataSource.getConnection();
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setString(1,channelJid);
    ResultSet resultSet=statement.executeQuery();
    resultSet.next();
    long itemId=resultSet.getLong(""String_Node_Str"");
    return itemId;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    close(statement);
  }
}","@Override public Long toChannelId(String channelJid){
  PreparedStatement statement=null;
  try {
    Connection connection=dataSource.getConnection();
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setString(1,channelJid);
    ResultSet resultSet=statement.executeQuery();
    if (resultSet.next()) {
      return resultSet.getLong(""String_Node_Str"");
    }
    return null;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    close(statement);
  }
}",0.930460333006856
152763,"@Override public long toUserId(String userJid){
  PreparedStatement statement=null;
  try {
    Connection connection=dataSource.getConnection();
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setString(1,userJid);
    ResultSet resultSet=statement.executeQuery();
    resultSet.next();
    long userId=resultSet.getLong(""String_Node_Str"");
    return userId;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    close(statement);
  }
}","@Override public Long toUserId(String userJid){
  PreparedStatement statement=null;
  try {
    Connection connection=dataSource.getConnection();
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setString(1,userJid);
    ResultSet resultSet=statement.executeQuery();
    if (resultSet.next()) {
      return resultSet.getLong(""String_Node_Str"");
    }
    return null;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    close(statement);
  }
}",0.9292123629112662
152764,"private void addPropertyToArquillianConfig(Node xml,String container,String key,String value){
  Node config=xml.getSingle(""String_Node_Str"" + container);
  if (config == null) {
    config=xml.createChild(""String_Node_Str"");
  }
  config.createChild(""String_Node_Str"").createChild(""String_Node_Str"").text(jbossHome);
}","private void addPropertyToArquillianConfig(Node xml,String container,String key,String value){
  Node config=xml.getSingle(""String_Node_Str"" + container);
  if (config == null) {
    config=xml.createChild(""String_Node_Str"");
  }
}",0.84
152765,"@SetupCommand public void installContainer(@Option(name=""String_Node_Str"",required=true,completer=ContainerCommandCompleter.class) String containerId,@Option(name=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String testframework){
  dependencyFacet=project.getFacet(DependencyFacet.class);
  DependencyBuilder bomDependency=DependencyBuilder.create().setGroupId(""String_Node_Str"").setArtifactId(""String_Node_Str"");
  List<Dependency> bomVersions=dependencyFacet.resolveAvailableVersions(bomDependency);
  Dependency bom=shell.promptChoiceTyped(""String_Node_Str"",bomVersions,bomVersions.get(bomVersions.size() - 1));
  dependencyFacet.addManagedDependency(bom);
  if (testframework.equals(""String_Node_Str"")) {
    installJunitDependencies();
  }
 else {
    installTestNgDependencies();
  }
  List<Container> containers=containerDirectoryParser.getContainers();
  boolean foundContainer=false;
  for (  Container container : containers) {
    if (container.getId().equals(containerId)) {
      shell.println(container.getName());
      containerInstaller.installContainer(container);
      installEvent.fire(new ContainerInstallEvent(container));
      foundContainer=true;
      break;
    }
  }
  if (!foundContainer) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","@SetupCommand public void installContainer(@Option(name=""String_Node_Str"",required=true,completer=ContainerCommandCompleter.class) String containerId,@Option(name=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String testframework){
  dependencyFacet=project.getFacet(DependencyFacet.class);
  if (testframework.equals(""String_Node_Str"")) {
    installJunitDependencies();
  }
 else {
    installTestNgDependencies();
  }
  installArquillianBom();
  List<Container> containers=containerDirectoryParser.getContainers();
  boolean foundContainer=false;
  for (  Container container : containers) {
    if (container.getId().equals(containerId)) {
      containerInstaller.installContainer(container);
      installEvent.fire(new ContainerInstallEvent(container));
      foundContainer=true;
      break;
    }
  }
  if (!foundContainer) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.3277501131733816
152766,"private void addDeployementMethod(boolean enableJPA,JavaSource<?> javaSource,JavaClass testclass){
  testclass.addMethod().setStatic().setName(""String_Node_Str"").setPublic().setReturnType(""String_Node_Str"").setBody(createDeploymentFor(javaSource,enableJPA)).addAnnotation(""String_Node_Str"");
}","private void addDeployementMethod(boolean enableJPA,JavaSource<?> javaSource,JavaClass testclass){
  testclass.addMethod().setStatic(true).setName(""String_Node_Str"").setPublic().setReturnType(""String_Node_Str"").setBody(createDeploymentFor(javaSource,enableJPA)).addAnnotation(""String_Node_Str"");
}",0.9932203389830508
152767,"private void generateExporterClass(JavaSourceFacet java) throws FileNotFoundException {
  JavaClass deployementExporterClass=JavaParser.create(JavaClass.class).setPackage(""String_Node_Str"").setName(""String_Node_Str"").setPublic();
  deployementExporterClass.addMethod().setName(""String_Node_Str"").setStatic().setPublic().setReturnTypeVoid().setParameters(""String_Node_Str"").setBody(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  java.saveTestJavaSource(deployementExporterClass);
}","private void generateExporterClass(JavaSourceFacet java) throws FileNotFoundException {
  JavaClass deployementExporterClass=JavaParser.create(JavaClass.class).setPackage(""String_Node_Str"").setName(""String_Node_Str"").setPublic();
  deployementExporterClass.addMethod().setName(""String_Node_Str"").setStatic(true).setPublic().setReturnTypeVoid().setParameters(""String_Node_Str"").setBody(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  deployementExporterClass.addImport(""String_Node_Str"");
  java.saveTestJavaSource(deployementExporterClass);
}",0.9980563654033042
152768,"@Override public void installDependencies(String arquillianVersion){
  DependencyFacet dependencyFacet=project.getFacet(DependencyFacet.class);
  DependencyBuilder dep1=DependencyBuilder.create().setGroupId(""String_Node_Str"").setArtifactId(""String_Node_Str"").setScopeType(ScopeType.TEST);
  List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(dep1);
  Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies,dependencies.get(dependencies.size() - 1));
  builder.addProfile(""String_Node_Str"",dependency);
  String jbossHome=shell.promptCommon(""String_Node_Str"",PromptType.FILE_PATH);
  Node xml=XMLParser.parse(""String_Node_Str"" + ""String_Node_Str"");
  Node container=xml.create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  container.create(""String_Node_Str"").create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").text(jbossHome);
  container.create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").text(""String_Node_Str"");
  ResourceFacet resources=project.getFacet(ResourceFacet.class);
  FileResource<?> resource=(FileResource<?>)resources.getResourceFolder().getChild(""String_Node_Str"");
  resource.setContents(XMLParser.toXMLString(xml));
}","@Override public void installDependencies(String arquillianVersion){
  DependencyFacet dependencyFacet=project.getFacet(DependencyFacet.class);
  DependencyBuilder dep1=DependencyBuilder.create().setGroupId(""String_Node_Str"").setArtifactId(""String_Node_Str"").setScopeType(ScopeType.TEST);
  List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(dep1);
  if (dependencies.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"" + dep1.toCoordinates() + ""String_Node_Str"");
  }
  Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies,dependencies.get(dependencies.size() - 1));
  builder.addProfile(""String_Node_Str"",dependency);
  String jbossHome=shell.promptCommon(""String_Node_Str"",PromptType.FILE_PATH);
  Node xml=XMLParser.parse(""String_Node_Str"" + ""String_Node_Str"");
  Node container=xml.create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"");
  container.create(""String_Node_Str"").create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").text(jbossHome);
  container.create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").create(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").text(""String_Node_Str"");
  ResourceFacet resources=project.getFacet(ResourceFacet.class);
  FileResource<?> resource=(FileResource<?>)resources.getResourceFolder().getChild(""String_Node_Str"");
  resource.setContents(XMLParser.toXMLString(xml));
}",0.954513645906228
152769,"private void installTestNgDependencies(){
  DependencyBuilder testngDependency=createTestNgDependency();
  if (!dependencyFacet.hasDependency(testngDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(testngDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies);
    dependencyFacet.addDependency(dependency);
  }
  DependencyBuilder testNgArquillianDependency=createTestNgArquillianDependency();
  if (!dependencyFacet.hasDependency(testNgArquillianDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(testNgArquillianDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies,dependencies.get(dependencies.size() - 1));
    dependencyFacet.addDependency(dependency);
  }
}","private void installTestNgDependencies(){
  DependencyBuilder testngDependency=createTestNgDependency();
  if (!dependencyFacet.hasDependency(testngDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(testngDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies);
    dependencyFacet.addDependency(dependency);
  }
  DependencyBuilder testNgArquillianDependency=createTestNgArquillianDependency();
  if (!dependencyFacet.hasDependency(testNgArquillianDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(testNgArquillianDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies,dependencies.get(dependencies.size() - 1));
    arquillianVersion=dependency.getVersion();
    dependencyFacet.addDependency(dependency);
  }
 else {
    arquillianVersion=dependencyFacet.getDependency(testNgArquillianDependency).getVersion();
  }
}",0.914952751528627
152770,"private void installJunitDependencies(){
  DependencyBuilder junitDependency=createJunitDependency();
  if (!dependencyFacet.hasDependency(junitDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(junitDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies);
    dependencyFacet.addDependency(dependency);
  }
  DependencyBuilder junitArquillianDependency=createJunitArquillianDependency();
  if (!dependencyFacet.hasDependency(junitArquillianDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(junitArquillianDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies,dependencies.get(dependencies.size() - 1));
    dependencyFacet.addDependency(dependency);
  }
}","private void installJunitDependencies(){
  DependencyBuilder junitDependency=createJunitDependency();
  if (!dependencyFacet.hasDependency(junitDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(junitDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies);
    dependencyFacet.addDependency(dependency);
  }
  DependencyBuilder junitArquillianDependency=createJunitArquillianDependency();
  if (!dependencyFacet.hasDependency(junitArquillianDependency)) {
    List<Dependency> dependencies=dependencyFacet.resolveAvailableVersions(junitArquillianDependency);
    Dependency dependency=shell.promptChoiceTyped(""String_Node_Str"",dependencies,dependencies.get(dependencies.size() - 1));
    arquillianVersion=dependency.getVersion();
    dependencyFacet.addDependency(dependency);
  }
 else {
    arquillianVersion=dependencyFacet.getDependency(junitArquillianDependency).getVersion();
  }
}",0.9146067415730336
152771,"public boolean contains(Object o){
  SkipListNode node=find((E)o);
  return node != null && node.getValue() != null && ((Comparable)node.getValue()).compareTo(o) == 0;
}","public boolean contains(Object o){
  E e=(E)o;
  SkipListNode node=find(e);
  return node != null && node.getValue() != null && equalTo(node.getValue(),e);
}",0.8282208588957055
152772,"private SkipListNode find(E e,SkipListNode start,int beginLevel){
  SkipListNode current=start;
  SkipListNode next=null;
  int level=beginLevel;
  do {
    current=findNext(e,current,level);
  }
 while (level-- > 0);
  return current;
}","private SkipListNode find(E e,SkipListNode current,int level){
  do {
    current=findNext(e,current,level);
  }
 while (level-- > 0);
  return current;
}",0.7723785166240409
152773,"public static void main(String[] args){
  SkipList testList=new SkipList<Integer>();
  System.out.println(testList.find(2));
  System.out.println(testList.contains(2));
  System.out.println(testList.add(2));
  System.out.println(testList.find(2));
  System.out.println(testList.contains(2));
}","public static void main(String[] args){
  SkipList testList=new SkipList<Integer>();
  testList.add(1);
  testList.add(4);
  System.out.println(testList.find(2));
  testList.add(2);
  System.out.println(testList.find(2));
}",0.627906976744186
152774,"private SkipListNode findNext(E e,SkipListNode current,int level){
  SkipListNode next=current.nextNodes.get(level);
  while (next != null) {
    E value=next.getValue();
    if (((Comparable)e).compareTo(value) > 0)     break;
    current=next;
    next=current.nextNodes.get(level);
  }
  return current;
}","private SkipListNode findNext(E e,SkipListNode current,int level){
  SkipListNode next=current.nextNodes.get(level);
  while (next != null) {
    E value=next.getValue();
    if (lessThan(e,value))     break;
    current=next;
    next=current.nextNodes.get(level);
  }
  return current;
}",0.8911222780569514
152775,"/** 
 * Contributes the   {@link BreadCrumbDispatcher} to the master dispatcher configuration.
 * @param configuration The dispatcher configuration to add the {@link BreadCrumbDispatcher} to.
 * @param breadCrumbDispatcher The {@link BreadCrumbDispatcher} to add.
 */
public static void contributeMasterDispatcher(final OrderedConfiguration<Dispatcher> configuration,@InjectService(""String_Node_Str"") final Dispatcher breadCrumbDispatcher){
  configuration.add(""String_Node_Str"",breadCrumbDispatcher,""String_Node_Str"");
}","/** 
 * Contributes the   {@link BreadCrumbDispatcher} to the master dispatcher configuration.
 * @param configuration The dispatcher configuration to add the {@link BreadCrumbDispatcher} to.
 * @param breadCrumbDispatcher The {@link BreadCrumbDispatcher} to add.
 */
public static void contributeMasterDispatcher(final OrderedConfiguration<Dispatcher> configuration,@InjectService(""String_Node_Str"") final Dispatcher breadCrumbDispatcher){
  configuration.add(""String_Node_Str"",breadCrumbDispatcher,""String_Node_Str"",""String_Node_Str"");
}",0.9830188679245284
152776,"/** 
 * Mark the last read message as consumed
 * @return
 */
public boolean consume(){
  if (lastRead == null) {
    return false;
  }
  return db.deleteEntry(lastRead);
}","/** 
 * Mark the last read message as consumed
 * @return
 */
public boolean consume(){
  if (lastRead == null) {
    return false;
  }
  if (db.deleteEntry(lastRead)) {
    lastRead=null;
    return true;
  }
  return false;
}",0.8170426065162907
152777,"/** 
 * Start the database and create the table if it doesn't exist
 */
private void createTableAndIndex(String dirName,String logName) throws SQLException {
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    LogLog.error(""String_Node_Str"",e);
  }
synchronized (initializeLock) {
    LogLog.warn(""String_Node_Str"");
    conn=DriverManager.getConnection(hsqlConfigUrl,""String_Node_Str"",""String_Node_Str"");
    initializeLock.notify();
  }
  insertStatement=""String_Node_Str"" + logName + ""String_Node_Str"";
  selectStatement=""String_Node_Str"" + logName + ""String_Node_Str"";
  deleteStatement=""String_Node_Str"" + logName + ""String_Node_Str"";
  if (tableExists(logName)) {
    return;
  }
  Statement st=conn.createStatement();
  st.execute(""String_Node_Str"" + logName + ""String_Node_Str"");
  st.execute(""String_Node_Str"" + logName + ""String_Node_Str"");
  st.execute(""String_Node_Str"" + logName + ""String_Node_Str"");
  st.close();
}","/** 
 * Start the database and create the table if it doesn't exist
 */
private void createTableAndIndex(String dirName,String logName) throws SQLException {
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    LogLog.error(""String_Node_Str"",e);
  }
synchronized (initializeLock) {
    LogLog.debug(""String_Node_Str"");
    conn=DriverManager.getConnection(hsqlConfigUrl,""String_Node_Str"",""String_Node_Str"");
    initializeLock.notify();
  }
  insertStatement=""String_Node_Str"" + logName + ""String_Node_Str"";
  selectStatement=""String_Node_Str"" + logName + ""String_Node_Str"";
  deleteStatement=""String_Node_Str"" + logName + ""String_Node_Str"";
  if (tableExists(logName)) {
    return;
  }
  Statement st=conn.createStatement();
  st.execute(""String_Node_Str"" + logName + ""String_Node_Str"");
  st.execute(""String_Node_Str"" + logName + ""String_Node_Str"");
  st.execute(""String_Node_Str"" + logName + ""String_Node_Str"");
  st.close();
}",0.9953584321815367
152778,"public void shutdown(){
synchronized (serverLock) {
    try {
      LogLog.warn(""String_Node_Str"");
      PreparedStatement ps=conn.prepareStatement(""String_Node_Str"");
      ps.execute();
      ps.close();
      server.stop();
      while (server.getState() != ServerConstants.SERVER_STATE_SHUTDOWN) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          LogLog.warn(""String_Node_Str"",e);
        }
      }
    }
 catch (    SQLException e) {
      errorHandler.error(""String_Node_Str"",e,1);
    }
  }
}","public void shutdown(){
synchronized (serverLock) {
    try {
      if (!shutdownRequested) {
        LogLog.debug(""String_Node_Str"");
        PreparedStatement ps=conn.prepareStatement(""String_Node_Str"");
        ps.execute();
        ps.close();
        server.stop();
        shutdownRequested=true;
      }
      while (server.getState() != ServerConstants.SERVER_STATE_SHUTDOWN) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          LogLog.warn(""String_Node_Str"",e);
        }
      }
    }
 catch (    SQLException e) {
      errorHandler.error(""String_Node_Str"",e,1);
    }
  }
}",0.6794979079497908
152779,"/** 
 * Send the data via http post
 * @param message
 * @throws IOException
 */
private int sendData(List<Entry> messages) throws IOException {
  URL url=new URL(logglyUrl);
  Proxy proxy=Proxy.NO_PROXY;
  if (proxyHost != null) {
    SocketAddress addr=new InetSocketAddress(proxyHost,proxyPort);
    proxy=new Proxy(Proxy.Type.HTTP,addr);
  }
  URLConnection conn=url.openConnection(proxy);
  conn.setDoOutput(true);
  conn.setDoInput(true);
  conn.setUseCaches(false);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
  for (  Entry message : messages) {
    if (message.getMessage().getBytes().length < 5200)     wr.write(message.getMessage());
 else     LogLog.warn(""String_Node_Str"");
  }
  wr.flush();
  wr.close();
  HttpURLConnection huc=((HttpURLConnection)conn);
  int respCode=huc.getResponseCode();
  BufferedReader in=null;
  StringBuffer response=null;
  try {
    in=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    response=new StringBuffer();
    int value=-1;
    while ((value=in.read()) != -1) {
      response.append((char)value);
    }
    in.close();
  }
 catch (  IOException e) {
    try {
      response=new StringBuffer();
      response.append(""String_Node_Str"").append(respCode).append(""String_Node_Str"");
      in=new BufferedReader(new InputStreamReader(huc.getErrorStream()));
      int value=-1;
      while ((value=in.read()) != -1) {
        response.append((char)value);
      }
      in.close();
      errorHandler.error(String.format(""String_Node_Str"",logglyUrl,response));
    }
 catch (    IOException ee) {
      errorHandler.error(String.format(""String_Node_Str"",logglyUrl),e,2);
    }
  }
  return respCode;
}","/** 
 * Send the data via http post
 * @param message
 * @throws IOException
 */
private int sendData(List<Entry> messages) throws IOException {
  URL url=new URL(logglyUrl);
  Proxy proxy=Proxy.NO_PROXY;
  if (proxyHost != null) {
    SocketAddress addr=new InetSocketAddress(proxyHost,proxyPort);
    proxy=new Proxy(Proxy.Type.HTTP,addr);
  }
  URLConnection conn=url.openConnection(proxy);
  conn.setDoOutput(true);
  conn.setDoInput(true);
  conn.setUseCaches(false);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  OutputStream os=conn.getOutputStream();
  for (  Entry message : messages) {
    final byte[] msgBytes=message.getMessage().getBytes();
    if (msgBytes.length < 5200) {
      conn.getOutputStream().write(msgBytes);
    }
 else {
      LogLog.warn(""String_Node_Str"" + msgBytes);
    }
  }
  os.flush();
  os.close();
  HttpURLConnection huc=((HttpURLConnection)conn);
  int respCode=huc.getResponseCode();
  BufferedReader in=null;
  StringBuffer response=null;
  try {
    in=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    response=new StringBuffer();
    int value=-1;
    while ((value=in.read()) != -1) {
      response.append((char)value);
    }
    in.close();
  }
 catch (  IOException e) {
    try {
      response=new StringBuffer();
      response.append(""String_Node_Str"").append(respCode).append(""String_Node_Str"");
      in=new BufferedReader(new InputStreamReader(huc.getErrorStream()));
      int value=-1;
      while ((value=in.read()) != -1) {
        response.append((char)value);
      }
      in.close();
      errorHandler.error(String.format(""String_Node_Str"",logglyUrl,response));
    }
 catch (    IOException ee) {
      errorHandler.error(String.format(""String_Node_Str"",logglyUrl),e,2);
    }
  }
  return respCode;
}",0.9195853180162512
152780,"/** 
 * Waits until the db is initialized, or stop has been requested.
 * @return
 */
public boolean waitUntilDbInitialized(){
  Object dbInitLock=db.getInitLock();
synchronized (dbInitLock) {
    while (db.isInitialized() && requestedState != ThreadState.STOPPED) {
      try {
        dbInitLock.wait();
      }
 catch (      InterruptedException e) {
        LogLog.error(""String_Node_Str"",e);
      }
    }
  }
  return db.isInitialized();
}","/** 
 * Waits until the db is initialized, or stop has been requested.
 * @return
 */
public boolean waitUntilDbInitialized(){
synchronized (db.initializeLock) {
    while (!db.isInitialized() && requestedState != ThreadState.STOPPED) {
      try {
        db.initializeLock.wait();
      }
 catch (      InterruptedException e) {
        LogLog.error(""String_Node_Str"",e);
      }
    }
  }
  return db.isInitialized();
}",0.8835063437139562
152781,"public void run(){
  curState=ThreadState.RUNNING;
  boolean initialized=waitUntilDbInitialized();
  if (initialized) {
    while (curState == ThreadState.RUNNING || curState == ThreadState.STOP_REQUESTED) {
      if (curState == ThreadState.STOP_REQUESTED) {
        LogLog.warn(""String_Node_Str"");
      }
      List<Entry> messages=db.getNext(batchSize);
      if (messages == null || messages.size() == 0) {
synchronized (waitLock) {
          try {
            waitLock.wait(1000);
          }
 catch (          InterruptedException e) {
            if (curState == ThreadState.STOP_REQUESTED) {
            }
 else {
              errorHandler.error(""String_Node_Str"",e,1);
            }
          }
        }
      }
 else {
        try {
          int response=sendData(messages);
switch (response) {
case 200:
case 201:
{
              db.deleteEntries(messages);
              break;
            }
case 400:
{
            LogLog.warn(""String_Node_Str"");
            db.deleteEntries(messages);
          }
default :
{
          LogLog.error(""String_Node_Str"" + response + ""String_Node_Str"");
        }
    }
  }
 catch (  IOException e) {
    errorHandler.error(String.format(""String_Node_Str"",logglyUrl),e,2);
  }
}
if (curState == ThreadState.STOP_REQUESTED) {
  curState=ThreadState.STOPPED;
}
 else if (requestedState == ThreadState.STOPPED) {
  curState=ThreadState.STOP_REQUESTED;
}
}
db.shutdown();
LogLog.warn(""String_Node_Str"");
}
 else {
LogLog.warn(""String_Node_Str"");
curState=ThreadState.STOPPED;
}
synchronized (stopLock) {
stopLock.notify();
}
}","public void run(){
  curState=ThreadState.RUNNING;
  LogLog.debug(""String_Node_Str"");
  boolean initialized=waitUntilDbInitialized();
  if (initialized) {
    LogLog.debug(""String_Node_Str"");
    List<Entry> messages=db.getNext(batchSize);
    while (curState == ThreadState.RUNNING || (curState == ThreadState.STOP_REQUESTED && messages != null && messages.size() > 0)) {
      if (curState == ThreadState.STOP_REQUESTED) {
        LogLog.warn(""String_Node_Str"" + messages.size());
      }
      if (messages == null || messages.size() == 0) {
synchronized (waitLock) {
          try {
            waitLock.wait(1000);
          }
 catch (          InterruptedException e) {
            if (curState == ThreadState.STOP_REQUESTED) {
            }
 else {
              errorHandler.error(""String_Node_Str"",e,1);
            }
          }
        }
      }
 else {
        try {
          int response=sendData(messages);
switch (response) {
case 200:
case 201:
{
              db.deleteEntries(messages);
              break;
            }
case 400:
{
            LogLog.warn(""String_Node_Str"");
            db.deleteEntries(messages);
          }
default :
{
          LogLog.error(""String_Node_Str"" + response + ""String_Node_Str"");
        }
    }
  }
 catch (  IOException e) {
    errorHandler.error(String.format(""String_Node_Str"",logglyUrl),e,2);
  }
}
if (curState == ThreadState.STOP_REQUESTED) {
  curState=ThreadState.STOPPED;
}
 else if (requestedState == ThreadState.STOPPED) {
  curState=ThreadState.STOP_REQUESTED;
}
messages=db.getNext(batchSize);
}
LogLog.debug(""String_Node_Str"");
}
 else {
LogLog.warn(""String_Node_Str"");
curState=ThreadState.STOPPED;
}
synchronized (stopLock) {
stopLock.notify();
}
}",0.9103615922212094
152782,"/** 
 * Reads the output file directory and puts all existing files into the queue.
 */
@Override public void activateOptions(){
  if (dirName == null) {
    LogLog.warn(""String_Node_Str"");
  }
  if (logglyUrl == null) {
    LogLog.warn(""String_Node_Str"");
  }
  if (name == null) {
    name=""String_Node_Str"";
  }
  LogLog.debug(""String_Node_Str"" + dirName + ""String_Node_Str""+ getName());
  db=new EmbeddedDb(dirName,getName(),errorHandler);
  Thread posterThread=new Thread(poster);
  posterThread.start();
}","/** 
 * Reads the output file directory and puts all existing files into the queue.
 */
@Override public void activateOptions(){
  if (dirName == null) {
    LogLog.warn(""String_Node_Str"");
  }
  if (logglyUrl == null) {
    LogLog.warn(""String_Node_Str"");
  }
  LogLog.debug(""String_Node_Str"" + dirName + ""String_Node_Str""+ getName());
  db=new EmbeddedDb(dirName,getName(),errorHandler);
  poster=new HttpPost();
  Thread posterThread=new Thread(poster);
  posterThread.start();
}",0.9204431017119838
152783,"/** 
 * Stop this thread sending data and write the last read position
 */
public void stop(){
  requestedState=ThreadState.STOPPED;
synchronized (waitLock) {
    LogLog.debug(""String_Node_Str"");
    waitLock.notify();
  }
synchronized (poster.stopLock) {
    LogLog.debug(""String_Node_Str"");
    while (poster.curState != ThreadState.STOPPED) {
      try {
        poster.stopLock.wait(100);
      }
 catch (      InterruptedException e) {
        LogLog.error(""String_Node_Str"");
      }
    }
  }
}","/** 
 * Stop this thread sending data and write the last read position
 */
public void stop(){
  LogLog.debug(""String_Node_Str"");
  requestedState=ThreadState.STOPPED;
synchronized (waitLock) {
    LogLog.debug(""String_Node_Str"");
    waitLock.notify();
  }
synchronized (poster.stopLock) {
    LogLog.debug(""String_Node_Str"");
    while (poster.curState != ThreadState.STOPPED) {
      try {
        poster.stopLock.wait(100);
      }
 catch (      InterruptedException e) {
        LogLog.error(""String_Node_Str"");
      }
    }
  }
}",0.9662487945998072
152784,"public void close(){
  poster.stop();
}","public void close(){
  poster.stop();
  db.shutdown();
}",0.8210526315789474
152785,"/** 
 * Adds a type mapping to instruct the tester how a certain type should be instantiated. This is the preferred method for type mapping because ensures maximum test stability. If your bean uses interfaces to define properties than all interfaces should be added to the mappings before testing the property otherwise instantiation exceptions will be thrown.
 * @param type the type you want to map
 * @param builder a <code>ValueBuilder</code> implementation capable of generating pseudo-random instances of the given type.
 */
public void addMapping(Class<?> type,ValueBuilder<Object> builder){
  mappings.put(type,builder);
}","/** 
 * Adds a type mapping to instruct the tester how a certain type should be instantiated. This is the preferred method for type mapping because ensures maximum test stability. If your bean uses interfaces to define properties than all interfaces should be added to the mappings before testing the property otherwise instantiation exceptions will be thrown.
 * @param type the type you want to map
 * @param builder a <code>ValueBuilder</code> implementation capable of generating pseudo-random instances of the given type.
 */
public void addMapping(Class<?> type,ValueBuilder<?> builder){
  mappings.put(type,builder);
}",0.994422310756972
152786,"protected Object getInstance(final Class<?> type) throws InstantiationException, IllegalAccessException {
  if (mappings.containsKey(type)) {
    return mappings.get(type);
  }
 else   if (type.isEnum()) {
    return type.getEnumConstants()[0];
  }
 else   if (Modifier.isAbstract(type.getModifiers()) || Modifier.isInterface(type.getModifiers())) {
    return Mockito.mock(type);
  }
 else {
    return type.newInstance();
  }
}","protected Object getInstance(final Class<?> type) throws InstantiationException, IllegalAccessException {
  if (mappings.containsKey(type)) {
    return mappings.get(type);
  }
 else   if (type.isEnum()) {
    return type.getEnumConstants()[0];
  }
 else   if (Modifier.isAbstract(type.getModifiers())) {
    return Mockito.mock(type,Mockito.CALLS_REAL_METHODS);
  }
 else {
    return type.newInstance();
  }
}",0.8523809523809524
152787,"/** 
 * Performs a property check.
 * @param instance the instance on which the properties will be accessed.
 * @param type the class under test.
 * @param field the field to test.
 * @param the property to test.
 * @throws Exception thrown if any of the tests fail.
 */
private void testField(Object instance,Class<?> type,Field field,final String property) throws Exception {
  Method setter=this.getSetter(type,property,field.getType(),false);
  Method getter=this.getGetter(type,property,field.getType(),false);
  if (setter != null && getter != null) {
    Object value=this.getInstance(field.getType());
    setter.invoke(instance,value);
    TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",value,getter.invoke(instance));
  }
 else {
    if (setter != null) {
      Object value=this.getInstance(field.getType());
      setter.invoke(instance,value);
      field.setAccessible(true);
      TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",value,field.get(instance));
    }
    if (getter != null) {
      Object value=this.getInstance(field.getType());
      field.setAccessible(true);
      field.set(instance,value);
      TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",value,getter.invoke(instance));
    }
  }
}","/** 
 * Performs a property check.
 * @param instance the instance on which the properties will be accessed.
 * @param type the class under test.
 * @param field the field to test.
 * @param the property to test.
 * @throws Exception thrown if any of the tests fail.
 */
private void testField(Object instance,Class<?> type,Field field,final String property) throws Exception {
  Method setter=this.getSetter(type,property,field.getType(),false);
  Method getter=this.getGetter(type,property,field.getType(),false);
  if (setter != null && getter != null) {
    Object value=this.getInstance(field.getType());
    setter.invoke(instance,value);
    TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",value,getter.invoke(instance));
    if (!field.getType().isPrimitive()) {
      setter.invoke(instance,field.getType().cast(null));
      TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",null,getter.invoke(instance));
    }
  }
 else {
    if (setter != null) {
      Object value=this.getInstance(field.getType());
      field.setAccessible(true);
      setter.invoke(instance,value);
      TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",value,field.get(instance));
      if (!field.getType().isPrimitive()) {
        setter.invoke(instance,field.getType().cast(null));
        TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",null,field.get(instance));
      }
    }
    if (getter != null) {
      Object value=this.getInstance(field.getType());
      field.setAccessible(true);
      field.set(instance,value);
      TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",value,getter.invoke(instance));
      if (!field.getType().isPrimitive()) {
        field.set(instance,null);
        TestCase.assertEquals(""String_Node_Str"" + field.getName() + ""String_Node_Str"",null,getter.invoke(instance));
      }
    }
  }
}",0.7815459822792545
152788,"public void testAllConstructors(Class<? extends Exception> type) throws Exception {
  Constructor<?>[] constructors=type.getConstructors();
  for (  Constructor<?> constructor : constructors) {
    List<Object> values=new ArrayList<Object>();
    for (    Class<?> param : constructor.getParameterTypes()) {
      values.add(this.getInstance(param));
    }
    this.testConstructor(type,constructor.getParameterTypes(),values.toArray());
  }
}","public void testAllConstructors(Class<? extends Exception> type,boolean lenient) throws Exception {
  Constructor<?>[] constructors=type.getConstructors();
  for (  Constructor<?> constructor : constructors) {
    List<Object> params=new ArrayList<Object>();
    for (    Class<?> paramType : constructor.getParameterTypes()) {
      params.add(this.getInstance(paramType));
    }
    this.testConstructor(type,constructor.getParameterTypes(),params.toArray(),lenient);
  }
}",0.9324618736383442
152789,"public void testConstructor(Class<?> type,Class<?>[] types,Object[] values) throws Exception {
  Constructor<?> constructor=type.getConstructor(types);
  try {
    constructor.newInstance(values);
  }
 catch (  InstantiationException ie) {
    Assert.fail(""String_Node_Str"" + ie);
  }
catch (  InvocationTargetException ite) {
    Assert.fail(""String_Node_Str"" + ite.getCause());
  }
}","public void testConstructor(Class<?> type,Class<?>[] paramTypes,Object[] params,boolean lenient) throws Exception {
  assertNotNull(paramTypes);
  assertNotNull(params);
  Constructor<?> constructor=type.getConstructor(paramTypes);
  Collection<Field> fields=listInherithed(type,type,new ArrayList<Field>());
  try {
    Object instance=constructor.newInstance(params);
    for (int i=0; i < paramTypes.length; i++) {
      this.testParameter(instance,paramTypes[i],params[i],fields,lenient);
    }
  }
 catch (  InstantiationException ie) {
    System.out.println(""String_Node_Str"");
    throw new AssertionError(""String_Node_Str"" + ie);
  }
catch (  InvocationTargetException ite) {
    System.out.println(""String_Node_Str"");
    throw new AssertionError(""String_Node_Str"" + ite.getCause());
  }
}",0.4780405405405405
152790,"/** 
 * Obtains a screenshot from the browser and saves it in the output folder.
 * @param method name of the failing test method
 */
private void capture(String method){
  try {
    FileOutputStream out=new FileOutputStream(outputFolder + ""String_Node_Str"" + method+ ""String_Node_Str"");
    out.write(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES));
    out.close();
  }
 catch (  Exception e) {
    new RuntimeException(""String_Node_Str"" + method,e).printStackTrace();
  }
}","/** 
 * Obtains a screenshot from the browser and saves it in the output folder.
 * @param method name of the failing test method
 */
private void capture(String method){
  try {
    File target=new File(outputFolder,""String_Node_Str"" + method + ""String_Node_Str"");
    FileOutputStream out=new FileOutputStream(target);
    out.write(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES));
    out.close();
  }
 catch (  Exception e) {
    new RuntimeException(""String_Node_Str"" + method,e).printStackTrace();
  }
}",0.9080118694362018
152791,"@Override public void run(){
  if (instance != null && instance.delegate != null) {
    instance.delegate.quit();
  }
}","@Override public void run(){
  SharedWebDriver.destroy();
}",0.4831460674157303
152792,"@Override public void add(Iterable<Statement> triples,String namedGraphURI){
  SailConnection connection=null;
  try {
    connection=sail.getConnection();
  }
 catch (  SailException e2) {
    e2.printStackTrace();
  }
  for (  Statement stmt : triples) {
    try {
      if (namedGraphURI == null) {
        connection.addStatement(stmt.getSubject(),stmt.getPredicate(),stmt.getObject());
      }
 else {
        final URI graph=new ValueFactoryImpl().createURI(namedGraphURI);
        connection.addStatement(stmt.getSubject(),stmt.getPredicate(),stmt.getObject(),graph);
      }
    }
 catch (    SailException e) {
      try {
        connection.rollback();
      }
 catch (      SailException e1) {
        e1.printStackTrace();
      }
    }
  }
  try {
    connection.commit();
    connection.close();
  }
 catch (  SailException e2) {
    e2.printStackTrace();
  }
}","@Override public void add(Iterable<Statement> triples,String namedGraphURI){
  for (  Statement stmt : triples)   try {
    if (namedGraphURI == null) {
      connection.addStatement(stmt.getSubject(),stmt.getPredicate(),stmt.getObject());
    }
 else {
      final URI graph=new ValueFactoryImpl().createURI(namedGraphURI);
      connection.addStatement(stmt.getSubject(),stmt.getPredicate(),stmt.getObject(),graph);
    }
  }
 catch (  SailException e) {
    try {
      connection.rollback();
    }
 catch (    SailException e1) {
      e1.printStackTrace();
    }
  }
  try {
    connection.commit();
  }
 catch (  SailException e2) {
    e2.printStackTrace();
  }
}",0.7805825242718447
152793,"@Override public void disconnect(){
  setConnected(false);
  try {
    connection.close();
  }
 catch (  SailException e) {
    e.printStackTrace();
  }
}","@Override public void disconnect(){
  setConnected(false);
  try {
    if (connection.isOpen()) {
      connection.close();
    }
  }
 catch (  SailException e) {
    e.printStackTrace();
  }
}",0.8876080691642652
152794,"@Override public void delete(String graphURI){
  connect();
  try {
    if (graphURI == null) {
      connection.clear();
    }
 else {
      connection.clear(new ValueFactoryImpl().createURI(graphURI));
    }
  }
 catch (  SailException e) {
    e.printStackTrace();
    try {
      connection.rollback();
    }
 catch (    SailException e1) {
      e1.printStackTrace();
    }
  }
  disconnect();
}","@Override public void delete(String graphURI){
  try {
    if (graphURI == null) {
      connection.clear();
      connection.commit();
    }
 else {
      connection.clear(new ValueFactoryImpl().createURI(graphURI));
      connection.commit();
    }
  }
 catch (  SailException e) {
    e.printStackTrace();
    try {
      connection.rollback();
    }
 catch (    SailException e1) {
      e1.printStackTrace();
    }
  }
}",0.896969696969697
152795,"@Override public void remove(Iterable<Statement> triples,String namedGraphURI){
  connect();
  for (  Statement stmt : triples)   try {
    if (namedGraphURI == null) {
      connection.removeStatements(stmt.getSubject(),stmt.getPredicate(),stmt.getObject());
    }
 else {
      connection.removeStatements(stmt.getSubject(),stmt.getPredicate(),stmt.getObject(),new ValueFactoryImpl().createURI(namedGraphURI));
    }
  }
 catch (  SailException e) {
    try {
      connection.rollback();
    }
 catch (    SailException e1) {
      e1.printStackTrace();
    }
  }
  disconnect();
}","@Override public void remove(Iterable<Statement> triples,String namedGraphURI){
  for (  Statement stmt : triples)   try {
    if (namedGraphURI == null) {
      connection.removeStatements(stmt.getSubject(),stmt.getPredicate(),stmt.getObject());
    }
 else {
      connection.removeStatements(stmt.getSubject(),stmt.getPredicate(),stmt.getObject(),new ValueFactoryImpl().createURI(namedGraphURI));
    }
  }
 catch (  SailException e) {
    try {
      connection.rollback();
    }
 catch (    SailException e1) {
      e1.printStackTrace();
    }
  }
  try {
    connection.commit();
  }
 catch (  SailException e) {
    e.printStackTrace();
  }
}",0.9092382495948136
152796,"@Override public void connect(){
  if (!isConnected()) {
    setConnected(true);
    try {
      connection=sail.getConnection();
    }
 catch (    SailException e) {
      e.printStackTrace();
    }
  }
}","@Override public void connect(){
  if (!isConnected()) {
    setConnected(true);
    try {
      if (connection != null && connection.isOpen()) {
        connection.close();
      }
      connection=sail.getConnection();
    }
 catch (    SailException e) {
      e.printStackTrace();
    }
  }
}",0.8183632734530938
152797,"@Override public IResultSet<Value,URI,Literal> selectQuery(String query,String graph){
  connect();
  final SPARQLParser parser=new SPARQLParser();
  CloseableIteration<? extends BindingSet,QueryEvaluationException> sparqlResults=null;
  ParsedQuery parsedQuery=null;
  try {
    parsedQuery=parser.parseQuery(query,null);
  }
 catch (  MalformedQueryException e) {
    e.printStackTrace();
  }
  try {
    sparqlResults=sail.getConnection().evaluate(parsedQuery.getTupleExpr(),parsedQuery.getDataset(),new EmptyBindingSet(),false);
  }
 catch (  SailException e) {
    e.printStackTrace();
  }
  return new SailResultSet(sparqlResults);
}","@Override public IResultSet<Value,URI,Literal> selectQuery(String query,String graph){
  connect();
  final SPARQLParser parser=new SPARQLParser();
  CloseableIteration<? extends BindingSet,QueryEvaluationException> sparqlResults=null;
  ParsedQuery parsedQuery=null;
  try {
    parsedQuery=parser.parseQuery(query,null);
  }
 catch (  MalformedQueryException e) {
    e.printStackTrace();
  }
  try {
    sparqlResults=connection.evaluate(parsedQuery.getTupleExpr(),parsedQuery.getDataset(),new EmptyBindingSet(),false);
  }
 catch (  SailException e) {
    e.printStackTrace();
  }
  return new SailResultSet(sparqlResults);
}",0.832807570977918
152798,"@SuppressWarnings(""String_Node_Str"") @Override public void save(Collection<Statement> triples,@SuppressWarnings(""String_Node_Str"") IDataSource dataSource,String graphURI){
  dataSource.add(triples,graphURI);
}","@SuppressWarnings(""String_Node_Str"") @Override public void save(Collection<Statement> triples,@SuppressWarnings(""String_Node_Str"") IDataSource dataSource,String graphURI){
  dataSource.connect();
  dataSource.add(triples,graphURI);
  dataSource.disconnect();
}",0.8912579957356077
152799,"@Override public EObject getEObject(String uriFragment){
  if (dataSource == null) {
    dataSource=getDataSource();
  }
  if (uriFragment != null && uriFragment.startsWith(""String_Node_Str"")) {
    final URI key=getProxyKey(uriFragment);
    return load(dataSource,key.toString(),getGraph());
  }
  return null;
}","@Override public EObject getEObject(String uriFragment){
  if (dataSource == null) {
    dataSource=getByRegistryOrCreateDataSource(null);
  }
  if (uriFragment != null && uriFragment.startsWith(""String_Node_Str"")) {
    final URI key=getProxyKey(uriFragment);
    return load(dataSource,key.toString(),getGraph());
  }
  return null;
}",0.966153846153846
152800,"@Override public void delete(Map<?,?> options) throws IOException {
  final IDataSource<G,T,N,U,L> dataSource=options == null ? getDataSource() : getDataSource(options);
  if (dataSource.isMutable()) {
    dataSource.connect();
    final Map<String,String> queries=decodeQueryString(getURI().query());
    dataSource.delete(queries.get(""String_Node_Str""));
    dataSource.disconnect();
  }
}","@Override public void delete(Map<?,?> options) throws IOException {
  if (dataSource == null) {
    dataSource=getByRegistryOrCreateDataSource(options);
  }
  if (dataSource.isMutable()) {
    final Map<String,String> queries=decodeQueryString(getURI().query());
    dataSource.delete(queries.get(""String_Node_Str""));
  }
}",0.7450980392156863
152801,"protected EObject createProxy(EClass eClass,String key){
  if (resource.getPrimaryCache().hasKey(key)) {
    return resource.getPrimaryCache().getObjectByKey(key);
  }
 else {
    EObject object=EcoreUtil.create(eClass);
    setIdValue(object,key,ETripleEcoreUtil.getId(eClass));
    URI id=resource.getID(object);
    ((InternalEObject)object).eSetProxyURI(id);
    resource.getPrimaryCache().cache(key,object);
    resource.getContents().add(object);
    return object;
  }
}","protected EObject createProxy(EClass eClass,String key){
  if (resource.getPrimaryCache().hasKey(key)) {
    return resource.getPrimaryCache().getObjectByKey(key);
  }
 else {
    EObject object=EcoreUtil.create(eClass);
    setIdValue(object,key,ETripleEcoreUtil.getId(eClass));
    final URI proxyURI;
    proxyURI=URI.createURI(resource.getURI() + ""String_Node_Str"" + key);
    ((InternalEObject)object).eSetProxyURI(proxyURI);
    resource.getPrimaryCache().cache(key,object);
    resource.getContents().add(object);
    return object;
  }
}",0.8767123287671232
152802,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected IResultSet<N,U,L> getResultSet(EClass eClass,String key,String graphURI,IDataSource dataSource){
  return dataSource.selectQuery(selectObjectByClass(eClass,key),graphURI);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected IResultSet<N,U,L> getResultSet(EClass eClass,String key,String graphURI,IDataSource dataSource){
  return dataSource.selectQuery(selectObjectByClass(eClass,key,graphURI),null);
}",0.9855670103092784
152803,"protected void setIdValue(EObject returnedObject,String key,EAttribute id){
  if (id == null)   return;
  EAnnotation ann=ETripleEcoreUtil.getETripleAnnotation(id,""String_Node_Str"");
  if (ann == null) {
    returnedObject.eSet(id,key);
    return;
  }
  if (ann.getDetails().containsKey(""String_Node_Str"")) {
    String base=ann.getDetails().get(""String_Node_Str"");
    if (key.startsWith(base)) {
      String localName=key.substring(base.length(),key.length());
      if (localName != null && localName.length() > 0)       returnedObject.eSet(id,EcoreUtil.createFromString((EDataType)id.getEType(),localName));
    }
  }
}","protected void setIdValue(EObject returnedObject,String key,EAttribute id){
  if (id == null)   return;
  EAnnotation ann=ETripleEcoreUtil.getETripleAnnotation(id,""String_Node_Str"");
  if (ann == null) {
    if (id.isID() && id.getName().equals(""String_Node_Str"")) {
      returnedObject.eSet(id,EcoreUtil.createFromString(id.getEAttributeType(),key));
    }
 else {
      String ns=returnedObject.eClass().getEPackage().getNsURI();
      int length;
      if (!(ns.endsWith(""String_Node_Str"") || ns.endsWith(""String_Node_Str""))) {
        length=ns.length() + 1;
      }
 else {
        length=ns.length();
      }
      String value=key.substring(length,key.length());
      returnedObject.eSet(id,EcoreUtil.createFromString(id.getEAttributeType(),value));
    }
  }
 else {
    if (ann.getDetails().containsKey(""String_Node_Str"")) {
      String base=ann.getDetails().get(""String_Node_Str"");
      if (key.startsWith(base)) {
        String localName=key.substring(base.length(),key.length());
        if (localName != null && localName.length() > 0) {
          returnedObject.eSet(id,EcoreUtil.createFromString(id.getEAttributeType(),localName));
        }
      }
    }
  }
}",0.3001107419712071
152804,"@Override public EObject getEObject(String uriFragment){
  if (dataSource == null) {
    dataSource=getByRegistryOrCreateDataSource(null);
  }
  if (uriFragment != null && uriFragment.startsWith(""String_Node_Str"")) {
    final URI key=getProxyKey(uriFragment);
    return load(dataSource,key.toString(),getGraph());
  }
  return null;
}","@Override public EObject getEObject(String uriFragment){
  if (dataSource == null) {
    dataSource=getByRegistryOrCreateDataSource(null);
  }
  if (uriFragment != null) {
    final String key=getProxyKey(uriFragment);
    if (key != null) {
      return load(dataSource,key,getGraph());
    }
  }
  return null;
}",0.7661538461538462
152805,"private URI getProxyKey(String uriFragment){
  return URI.createURI(uriFragment.split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str""));
}","private String getProxyKey(String uriFragment){
  if (uriFragment.startsWith(""String_Node_Str"")) {
    return uriFragment.split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   return null;
}",0.703125
152806,"@Override public URI getID(EObject object){
  if (getPrimaryCache().hasObject(object)) {
    return URI.createURI(getPrimaryCache().getObjectId(object));
  }
  final String key=EObjectID.getId(object);
  getPrimaryCache().cache(key,object);
  return URI.createURI(key);
}","@Override public URI getID(EObject object){
  String key=null;
  if (getPrimaryCache().hasObject(object)) {
    key=getPrimaryCache().getObjectId(object);
  }
  if (key == null && object.eIsProxy()) {
    URI uri=((InternalEObject)object).eProxyURI();
    if (uri.hasFragment()) {
      key=getProxyKey(uri.fragment());
    }
  }
  if (key == null) {
    key=EObjectID.getId(object);
    getPrimaryCache().cache(key,object);
  }
  return URI.createURI(key);
}",0.410958904109589
152807,"/** 
 * Loads an inventory from a YAML configuration file.
 * @param file the YAML file to load
 * @return the loaded inventory
 * @throws IOException if the file could not be read
 * @throws InvalidConfigurationException if the file could not be parsed
 */
public static Inventory loadFromYaml(File file) throws IOException, InvalidConfigurationException {
  YamlConfiguration yaml=new YamlConfiguration();
  yaml.load(file);
  int inventorySize=yaml.getInt(""String_Node_Str"",6 * 9);
  Inventory inventory=Bukkit.getServer().createInventory(null,inventorySize);
  ConfigurationSection items=yaml.getConfigurationSection(""String_Node_Str"");
  for (int slot=0; slot < inventorySize; slot++) {
    String slotString=String.valueOf(slot);
    if (items.isItemStack(slotString)) {
      ItemStack itemStack=items.getItemStack(slotString);
      inventory.setItem(slot,itemStack);
    }
  }
  return inventory;
}","/** 
 * Loads an inventory from a YAML configuration file.
 * @param file the YAML file to load
 * @return the loaded inventory
 * @throws IOException if the file could not be read
 * @throws InvalidConfigurationException if the file could not be parsed
 */
public static Inventory loadFromYaml(File file) throws IOException, InvalidConfigurationException {
  YamlConfiguration yaml=new Utf8YamlConfiguration();
  yaml.load(file);
  int inventorySize=yaml.getInt(""String_Node_Str"",6 * 9);
  Inventory inventory=Bukkit.getServer().createInventory(null,inventorySize);
  ConfigurationSection items=yaml.getConfigurationSection(""String_Node_Str"");
  for (int slot=0; slot < inventorySize; slot++) {
    String slotString=String.valueOf(slot);
    if (items.isItemStack(slotString)) {
      ItemStack itemStack=items.getItemStack(slotString);
      inventory.setItem(slot,itemStack);
    }
  }
  return inventory;
}",0.9977997799779978
152808,"/** 
 * Save an inventory to a YAML configuration file.
 * @param inventory the inventory to save
 * @param file the YAML file to write
 * @throws IOException if the file could not be written
 */
public static void saveToYaml(Inventory inventory,File file) throws IOException {
  YamlConfiguration yaml=new YamlConfiguration();
  int inventorySize=inventory.getSize();
  yaml.set(""String_Node_Str"",inventorySize);
  ConfigurationSection items=yaml.createSection(""String_Node_Str"");
  for (int slot=0; slot < inventorySize; slot++) {
    ItemStack stack=inventory.getItem(slot);
    if (stack != null) {
      items.set(String.valueOf(slot),stack);
    }
  }
  yaml.save(file);
}","/** 
 * Save an inventory to a YAML configuration file.
 * @param inventory the inventory to save
 * @param file the YAML file to write
 * @throws IOException if the file could not be written
 */
public static void saveToYaml(Inventory inventory,File file) throws IOException {
  YamlConfiguration yaml=new Utf8YamlConfiguration();
  int inventorySize=inventory.getSize();
  yaml.set(""String_Node_Str"",inventorySize);
  ConfigurationSection items=yaml.createSection(""String_Node_Str"");
  for (int slot=0; slot < inventorySize; slot++) {
    ItemStack stack=inventory.getItem(slot);
    if (stack != null) {
      items.set(String.valueOf(slot),stack);
    }
  }
  yaml.save(file);
}",0.9970588235294118
152809,"public int save(boolean saveAll){
  int savedChests=0;
  dataFolder.mkdirs();
  Iterator<Entry<String,VirtualChest>> chestIterator=chests.entrySet().iterator();
  while (chestIterator.hasNext()) {
    final Entry<String,VirtualChest> entry=chestIterator.next();
    final String playerName=entry.getKey();
    final VirtualChest chest=entry.getValue();
    new File(dataFolder,playerName + ""String_Node_Str"").delete();
    if (chest == null) {
      new File(dataFolder,playerName + ""String_Node_Str"").delete();
      chestIterator.remove();
    }
 else     if (saveAll || chest.isChanged()) {
      try {
        final File nbtFile=new File(dataFolder,playerName + ""String_Node_Str"");
        saveChestToNBT(chest,nbtFile);
        chest.setChanged(false);
        savedChests++;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return savedChests;
}","public int save(boolean saveAll){
  int savedChests=0;
  dataFolder.mkdirs();
  Iterator<Entry<String,VirtualChest>> chestIterator=chests.entrySet().iterator();
  while (chestIterator.hasNext()) {
    final Entry<String,VirtualChest> entry=chestIterator.next();
    final String playerName=entry.getKey();
    final VirtualChest chest=entry.getValue();
    if (chest == null) {
      new File(dataFolder,playerName + ""String_Node_Str"").delete();
      new File(dataFolder,playerName + ""String_Node_Str"").delete();
      chestIterator.remove();
    }
 else     if (saveAll || chest.isChanged()) {
      new File(dataFolder,playerName + ""String_Node_Str"").delete();
      try {
        final File nbtFile=new File(dataFolder,playerName + ""String_Node_Str"");
        saveChestToNBT(chest,nbtFile);
        chest.setChanged(false);
        savedChests++;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return savedChests;
}",0.9351351351351352
152810,"/** 
 * Parses the credential information from a form submission.
 */
public static UserProvidedCredential fromForm(StaplerRequest req,MultipartFormDataParser parser) throws IOException {
  CrumbIssuer crumbIssuer=Hudson.getInstance().getCrumbIssuer();
  if (crumbIssuer != null && !crumbIssuer.validateCrumb(req,parser)) {
    throw HttpResponses.error(SC_FORBIDDEN,new IOException(""String_Node_Str""));
  }
  String kind=parser.get(""String_Node_Str"");
  int idx=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").indexOf(kind);
  String username=parser.get(""String_Node_Str"" + idx);
  String password=parser.get(""String_Node_Str"" + idx);
  Boolean overrideGlobal=Boolean.valueOf(parser.get(""String_Node_Str""));
  final File keyFile;
  final FileItem item;
  if (idx <= 1) {
    keyFile=null;
    item=null;
  }
 else {
    item=parser.getFileItem(kind.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    keyFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    if (item != null) {
      try {
        item.write(keyFile);
      }
 catch (      Exception e) {
        throw new IOException2(e);
      }
      if (PuTTYKey.isPuTTYKeyFile(keyFile)) {
        LOGGER.info(""String_Node_Str"" + keyFile + ""String_Node_Str"");
        new PuTTYKey(keyFile,null).toOpenSSH(keyFile);
      }
    }
  }
  return new UserProvidedCredential(username,password,keyFile,overrideGlobal,req.findAncestorObject(AbstractProject.class)){
    @Override public void close() throws IOException {
      if (keyFile != null) {
        keyFile.delete();
      }
      if (item != null) {
        item.delete();
      }
    }
  }
;
}","/** 
 * Parses the credential information from a form submission.
 */
public static UserProvidedCredential fromForm(StaplerRequest req,MultipartFormDataParser parser) throws IOException {
  CrumbIssuer crumbIssuer=Hudson.getInstance().getCrumbIssuer();
  if (crumbIssuer != null && !crumbIssuer.validateCrumb(req,parser)) {
    throw HttpResponses.error(SC_FORBIDDEN,new IOException(""String_Node_Str""));
  }
  String kind=parser.get(""String_Node_Str"");
  int idx=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").indexOf(kind);
  String username=parser.get(""String_Node_Str"" + idx);
  String password=parser.get(""String_Node_Str"" + idx);
  Boolean overrideGlobal=Boolean.valueOf(parser.get(""String_Node_Str""));
  final File keyFile;
  final FileItem item;
  if (idx <= 1) {
    keyFile=null;
    item=null;
  }
 else {
    item=parser.getFileItem(kind.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    keyFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    if (item != null) {
      try {
        item.write(keyFile);
      }
 catch (      Exception e) {
        throw new IOException2(e);
      }
      if (PuTTYKey.isPuTTYKeyFile(keyFile)) {
        LOGGER.info(""String_Node_Str"" + keyFile + ""String_Node_Str"");
        new PuTTYKey(keyFile,null).toOpenSSH(keyFile);
      }
    }
  }
  return new UserProvidedCredential(username,password,keyFile,overrideGlobal,req.findAncestorObject(AbstractProject.class)){
    @Override public void close() throws IOException {
      boolean deleteFailed=false;
      if (keyFile != null)       deleteFailed=keyFile.delete();
      if (!deleteFailed)       throw new IOException(""String_Node_Str"" + keyFile.getAbsolutePath());
      if (item != null)       item.delete();
    }
  }
;
}",0.9377880184331796
152811,"public void handleStatus(SVNStatus status) throws SVNException {
  SVNStatusType s=status.getContentsStatus();
  if (s == SVNStatusType.STATUS_UNVERSIONED || s == SVNStatusType.STATUS_IGNORED || s == SVNStatusType.STATUS_MODIFIED || s == SVNStatusType.STATUS_NONE) {
    listener.getLogger().println(""String_Node_Str"" + status.getFile());
    try {
      File f=status.getFile();
      if (f.isDirectory())       FileUtils.deleteDirectory(f);
 else       f.delete();
    }
 catch (    IOException e) {
      throw new SVNException(SVNErrorMessage.UNKNOWN_ERROR_MESSAGE,e);
    }
  }
}","public void handleStatus(SVNStatus status) throws SVNException {
  SVNStatusType s=status.getContentsStatus();
  if (s == SVNStatusType.STATUS_UNVERSIONED || s == SVNStatusType.STATUS_IGNORED || s == SVNStatusType.STATUS_MODIFIED || s == SVNStatusType.STATUS_NONE) {
    listener.getLogger().println(""String_Node_Str"" + status.getFile());
    try {
      File f=status.getFile();
      if (f.isDirectory())       FileUtils.deleteDirectory(f);
 else       if (!f.delete())       throw new IOException(""String_Node_Str"" + f.getAbsolutePath());
    }
 catch (    IOException e) {
      throw new SVNException(SVNErrorMessage.UNKNOWN_ERROR_MESSAGE,e);
    }
  }
}",0.9396621078037009
152812,"@Override protected void preUpdate(ModuleLocation module,File local) throws SVNException {
  listener.getLogger().println(""String_Node_Str"" + local);
  manager.getStatusClient().doStatus(local,null,SVNDepth.INFINITY,false,false,true,false,new ISVNStatusHandler(){
    public void handleStatus(    SVNStatus status) throws SVNException {
      SVNStatusType s=status.getContentsStatus();
      if (s == SVNStatusType.STATUS_UNVERSIONED || s == SVNStatusType.STATUS_IGNORED || s == SVNStatusType.STATUS_MODIFIED || s == SVNStatusType.STATUS_NONE) {
        listener.getLogger().println(""String_Node_Str"" + status.getFile());
        try {
          File f=status.getFile();
          if (f.isDirectory())           FileUtils.deleteDirectory(f);
 else           f.delete();
        }
 catch (        IOException e) {
          throw new SVNException(SVNErrorMessage.UNKNOWN_ERROR_MESSAGE,e);
        }
      }
    }
  }
,null);
}","@Override protected void preUpdate(ModuleLocation module,File local) throws SVNException {
  listener.getLogger().println(""String_Node_Str"" + local);
  manager.getStatusClient().doStatus(local,null,SVNDepth.INFINITY,false,false,true,false,new ISVNStatusHandler(){
    public void handleStatus(    SVNStatus status) throws SVNException {
      SVNStatusType s=status.getContentsStatus();
      if (s == SVNStatusType.STATUS_UNVERSIONED || s == SVNStatusType.STATUS_IGNORED || s == SVNStatusType.STATUS_MODIFIED || s == SVNStatusType.STATUS_NONE) {
        listener.getLogger().println(""String_Node_Str"" + status.getFile());
        try {
          File f=status.getFile();
          if (f.isDirectory())           FileUtils.deleteDirectory(f);
 else           if (!f.delete())           throw new IOException(""String_Node_Str"" + f.getAbsolutePath());
        }
 catch (        IOException e) {
          throw new SVNException(SVNErrorMessage.UNKNOWN_ERROR_MESSAGE,e);
        }
      }
    }
  }
,null);
}",0.9508026929052305
152813,"public Credential getCredential(SVNURL url,String realm){
  return get(getCredentialsKey(url.toDecodedString(),realm));
}","public Credential getCredential(SerializableSVNURL serializableURL,String realm) throws SVNException {
  return get(getCredentialsKey(serializableURL.getSVNURL().toDecodedString(),realm));
}",0.7652733118971061
152814,"private SVNAuthentication fromProvider(SVNURL url,String realm,String kind,RemotableSVNAuthenticationProvider src,String debugName) throws SVNException {
  if (src == null) {
    return null;
  }
  Credential cred=src.getCredential(url,realm);
  LOGGER.fine(String.format(""String_Node_Str"",debugName,kind,url,realm,cred));
  this.lastCredential=cred;
  if (cred != null) {
    return cred.createSVNAuthentication(kind);
  }
  return null;
}","private SVNAuthentication fromProvider(SVNURL url,String realm,String kind,RemotableSVNAuthenticationProvider src,String debugName) throws SVNException {
  if (src == null) {
    return null;
  }
  Credential cred=src.getCredential(new SerializableSVNURL(url),realm);
  LOGGER.fine(String.format(""String_Node_Str"",debugName,kind,url,realm,cred));
  this.lastCredential=cred;
  if (cred != null) {
    return cred.createSVNAuthentication(kind);
  }
  return null;
}",0.9668141592920354
152815,"public Credential getCredential(SVNURL url,String realm){
  for (  SubversionCredentialProvider p : SubversionCredentialProvider.all()) {
    Credential c=p.getCredential(url,realm);
    if (c != null) {
      LOGGER.fine(String.format(""String_Node_Str"",realm,c,p));
      return c;
    }
  }
  LOGGER.fine(String.format(""String_Node_Str"",realm,credentials.get(realm)));
  return credentials.get(realm);
}","public Credential getCredential(SerializableSVNURL serializableUrl,String realm) throws SVNException {
  for (  SubversionCredentialProvider p : SubversionCredentialProvider.all()) {
    Credential c=p.getCredential(serializableUrl.getSVNURL(),realm);
    if (c != null) {
      LOGGER.fine(String.format(""String_Node_Str"",realm,c,p));
      return c;
    }
  }
  LOGGER.fine(String.format(""String_Node_Str"",realm,credentials.get(realm)));
  return credentials.get(realm);
}",0.875995449374289
152816,"/** 
 * Test excluded regions
 */
@Bug(6030) public void testExcludedRegions() throws Exception {
  File repo=new CopyExisting(getClass().getResource(""String_Node_Str"")).allocate();
  SubversionSCM scm=new SubversionSCM(SubversionSCM.ModuleLocation.parse(new String[]{""String_Node_Str"" + repo.getPath()},new String[]{""String_Node_Str""},null,null),true,false,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FreeStyleProject p=createFreeStyleProject(""String_Node_Str"");
  p.setScm(scm);
  assertBuildStatusSuccess(p.scheduleBuild2(0).get());
  assertFalse(p.pollSCMChanges(createTaskListener()));
  createCommit(scm,""String_Node_Str"");
  assertFalse(""String_Node_Str"",p.pollSCMChanges(createTaskListener()));
  createCommit(scm,""String_Node_Str"");
  assertTrue(""String_Node_Str"",p.pollSCMChanges(createTaskListener()));
}","/** 
 * Test excluded regions
 */
@Bug(6030) public void testExcludedRegions() throws Exception {
  File repo=new CopyExisting(getClass().getResource(""String_Node_Str"")).allocate();
  SubversionSCM scm=new SubversionSCM(SubversionSCM.ModuleLocation.parse(new String[]{""String_Node_Str"" + repo.getPath()},new String[]{""String_Node_Str""},null,null),true,false,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FreeStyleProject p=createFreeStyleProject(""String_Node_Str"");
  p.setScm(scm);
  assertBuildStatusSuccess(p.scheduleBuild2(0).get());
  assertFalse(""String_Node_Str"",p.poll(createTaskListener()).hasChanges());
  createCommit(scm,""String_Node_Str"");
  assertFalse(""String_Node_Str"",p.poll(createTaskListener()).hasChanges());
  createCommit(scm,""String_Node_Str"");
  assertTrue(""String_Node_Str"",p.poll(createTaskListener()).hasChanges());
}",0.9439728353140916
152817,"/** 
 * Test included regions
 */
@Bug(6030) public void testIncludedRegions() throws Exception {
  File repo=new CopyExisting(getClass().getResource(""String_Node_Str"")).allocate();
  SubversionSCM scm=new SubversionSCM(SubversionSCM.ModuleLocation.parse(new String[]{""String_Node_Str"" + repo.getPath()},new String[]{""String_Node_Str""},null,null),true,false,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FreeStyleProject p=createFreeStyleProject(""String_Node_Str"");
  p.setScm(scm);
  assertBuildStatusSuccess(p.scheduleBuild2(0).get());
  assertFalse(p.pollSCMChanges(createTaskListener()));
  createCommit(scm,""String_Node_Str"");
  assertFalse(""String_Node_Str"",p.pollSCMChanges(createTaskListener()));
  createCommit(scm,""String_Node_Str"");
  assertTrue(""String_Node_Str"",p.pollSCMChanges(createTaskListener()));
}","/** 
 * Test included regions
 */
@Bug(6030) public void testIncludedRegions() throws Exception {
  File repo=new CopyExisting(getClass().getResource(""String_Node_Str"")).allocate();
  SubversionSCM scm=new SubversionSCM(SubversionSCM.ModuleLocation.parse(new String[]{""String_Node_Str"" + repo.getPath()},new String[]{""String_Node_Str""},null,null),true,false,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  FreeStyleProject p=createFreeStyleProject(""String_Node_Str"");
  p.setScm(scm);
  assertBuildStatusSuccess(p.scheduleBuild2(0).get());
  assertFalse(p.poll(createTaskListener()).hasChanges());
  createCommit(scm,""String_Node_Str"");
  assertFalse(""String_Node_Str"",p.poll(createTaskListener()).hasChanges());
  createCommit(scm,""String_Node_Str"");
  assertTrue(""String_Node_Str"",p.poll(createTaskListener()).hasChanges());
}",0.9605488850771868
152818,"XmlFile getXmlFile(Job prj){
  File rootDir=prj.getRootDir();
  File credentialFile=new File(rootDir,credentialsFileName);
  if (credentialFile.exists()) {
    return new XmlFile(credentialFile);
  }
  if (prj instanceof MatrixConfiguration && prj.getParent() != null) {
    ItemGroup parent=prj.getParent();
    if (parent instanceof Job) {
      return getXmlFile((Job)parent);
    }
  }
  if (prj.hasCascadingProject()) {
    return getXmlFile(prj.getCascadingProject());
  }
  return new XmlFile(new File(rootDir,credentialsFileName));
}","XmlFile getXmlFile(Job prj){
  File rootDir=prj.getRootDir();
  File credentialFile=new File(rootDir,credentialsFileName);
  if (credentialFile.exists()) {
    return new XmlFile(credentialFile);
  }
  if (prj instanceof MatrixConfiguration && prj.getParent() != null) {
    ItemGroup parent=prj.getParent();
    return getXmlFile((Job)parent);
  }
  if (prj.hasCascadingProject()) {
    return getXmlFile(prj.getCascadingProject());
  }
  return new XmlFile(new File(rootDir,credentialsFileName));
}",0.9087415946205571
152819,"@Url(""String_Node_Str"") public void testRemoteCheckOut() throws Exception {
  DumbSlave s=createSlave();
  FreeStyleProject p=createFreeStyleProject();
  p.setAssignedLabel(s.getSelfLabel());
  p.setScm(new SubversionSCM(""String_Node_Str""));
  FreeStyleBuild b=assertBuildStatusSuccess(p.scheduleBuild2(0,new Cause.UserCause()).get());
  assertTrue(b.getWorkspace().child(""String_Node_Str"").exists());
  b=assertBuildStatusSuccess(p.scheduleBuild2(0).get());
}","@Url(""String_Node_Str"") public void testRemoteCheckOut() throws Exception {
  DumbSlave s=createSlave();
  FreeStyleProject p=createFreeStyleProject();
  p.setAssignedLabel(s.getSelfLabel());
  p.setScm(new SubversionSCM(""String_Node_Str""));
  FreeStyleBuild b=assertBuildStatusSuccess(p.scheduleBuild2(0,new Cause.UserCause()).get());
  assertTrue(b.getWorkspace().child(""String_Node_Str"").exists());
  assertNotNull(assertBuildStatusSuccess(p.scheduleBuild2(0).get()));
}",0.9817792068595927
152820,"/** 
 * Validates the excludeCommitMessages field.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckExcludedCommitMessages(@QueryParameter String value) throws IOException, ServletException {
  for (  String message : Util.fixNull(value).trim().split(""String_Node_Str"")) {
    try {
      Pattern.compile(message);
    }
 catch (    PatternSyntaxException e) {
      return FormValidation.error(""String_Node_Str"" + e.getMessage());
    }
  }
  return FormValidation.ok();
}","/** 
 * Validates the excludeCommitMessages field.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException            IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckExcludedCommitMessages(@QueryParameter String value) throws IOException, ServletException {
  for (  String message : Util.fixNull(value).trim().split(""String_Node_Str"")) {
    try {
      Pattern.compile(message);
    }
 catch (    PatternSyntaxException e) {
      return FormValidation.error(""String_Node_Str"" + e.getMessage());
    }
  }
  return FormValidation.ok();
}",0.9913589945011784
152821,"/** 
 * Validates the value for a local location (local checkout directory).
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckLocal(@QueryParameter String value) throws IOException, ServletException {
  String v=Util.nullify(value);
  if (v == null) {
    return FormValidation.ok();
  }
  v=v.trim();
  if (v.startsWith(""String_Node_Str"") || v.startsWith(""String_Node_Str"") || v.startsWith(""String_Node_Str"")|| v.matches(""String_Node_Str"")) {
    return FormValidation.error(""String_Node_Str"");
  }
  return FormValidation.ok();
}","/** 
 * Validates the value for a local location (local checkout directory).
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException            IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckLocal(@QueryParameter String value) throws IOException, ServletException {
  String v=Util.nullify(value);
  if (v == null) {
    return FormValidation.ok();
  }
  v=v.trim();
  if (v.startsWith(""String_Node_Str"") || v.startsWith(""String_Node_Str"") || v.startsWith(""String_Node_Str"")|| v.matches(""String_Node_Str"")) {
    return FormValidation.error(""String_Node_Str"");
  }
  return FormValidation.ok();
}",0.992080633549316
152822,"/** 
 * Validates the includedRegions Regex.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckIncludedRegions(@QueryParameter String value) throws IOException, ServletException {
  return doCheckExcludedRegions(value);
}","/** 
 * Validates the includedRegions Regex.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException            IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckIncludedRegions(@QueryParameter String value) throws IOException, ServletException {
  return doCheckExcludedRegions(value);
}",0.9856584093872228
152823,"/** 
 * Verify if two arrays of objects are equal without same order of elements.
 * @param array1 first array.
 * @param array2 second array.
 * @return true if two arrays equals and false in other way.
 */
public static boolean isEqualsWithoutOrdering(Object[] array1,Object[] array2){
  if (array1 == null && array2 == null) {
    return true;
  }
  if (array1 == null || array2 == null) {
    return false;
  }
  if (array1.length != array2.length) {
    return false;
  }
  for (int i=0; i < array1.length; i++) {
    boolean contains=false;
    for (int j=0; j < array2.length; j++) {
      if (array1[i] == null && array2[i] == null) {
        contains=true;
        break;
      }
      if (array1[i] != null && array1[i].equals(array2[j])) {
        contains=true;
        break;
      }
    }
    if (!contains)     return false;
  }
  return true;
}","/** 
 * Verify if two arrays of objects are equal without same order of elements.
 * @param array1 first array.
 * @param array2 second array.
 * @return true if two arrays equals and false in other way.
 */
public static boolean isEqualsWithoutOrdering(Object[] array1,Object[] array2){
  if (array1 == null && array2 == null) {
    return true;
  }
  if (array1 == null || array2 == null) {
    return false;
  }
  if (array1.length != array2.length) {
    return false;
  }
  for (int i=0; i < array1.length; i++) {
    boolean contains=false;
    for (int j=0; j < array2.length; j++) {
      if (array1[i] == null && array2[i] == null) {
        contains=true;
        break;
      }
      if (array1[i] != null && array1[i].equals(array2[j])) {
        contains=true;
        break;
      }
    }
    if (!contains) {
      return false;
    }
  }
  return true;
}",0.9583815028901734
152824,"/** 
 * Validates the remote server supports custom revision properties.
 * @param context {@link AbstractProject}.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckRevisionPropertiesSupported(@AncestorInPath AbstractProject context,@QueryParameter String value) throws IOException, ServletException {
  String v=Util.fixNull(value).trim();
  if (v.length() == 0) {
    return FormValidation.ok();
  }
  if (!Hudson.getInstance().hasPermission(Hudson.ADMINISTER)) {
    return FormValidation.ok();
  }
  try {
    SVNURL repoURL=SVNURL.parseURIDecoded(v);
    if (checkRepositoryPath(context,repoURL) != SVNNodeKind.NONE) {
      return FormValidation.ok();
    }
    SVNRepository repository=null;
    try {
      repository=getRepository(context,repoURL);
      if (repository.hasCapability(SVNCapability.LOG_REVPROPS)) {
        return FormValidation.ok();
      }
    }
  finally {
      if (repository != null) {
        repository.closeSession();
      }
    }
  }
 catch (  SVNException e) {
    String message=""String_Node_Str"";
    message+=""String_Node_Str"" + Util.escape(v) + ""String_Node_Str""+ Util.escape(e.getErrorMessage().getFullMessage());
    LOGGER.log(Level.INFO,""String_Node_Str"" + v,e);
    return FormValidation.errorWithMarkup(message);
  }
  return FormValidation.warning(Messages.SubversionSCM_excludedRevprop_notSupported(v));
}","/** 
 * Validates the remote server supports custom revision properties.
 * @param context {@link AbstractProject}.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException            IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckRevisionPropertiesSupported(@AncestorInPath AbstractProject context,@QueryParameter String value) throws IOException, ServletException {
  String v=Util.fixNull(value).trim();
  if (v.length() == 0) {
    return FormValidation.ok();
  }
  if (!Hudson.getInstance().hasPermission(Hudson.ADMINISTER)) {
    return FormValidation.ok();
  }
  try {
    SVNURL repoURL=SVNURL.parseURIDecoded(v);
    if (checkRepositoryPath(context,repoURL) != SVNNodeKind.NONE) {
      return FormValidation.ok();
    }
    SVNRepository repository=null;
    try {
      repository=getRepository(context,repoURL);
      if (repository.hasCapability(SVNCapability.LOG_REVPROPS)) {
        return FormValidation.ok();
      }
    }
  finally {
      if (repository != null) {
        repository.closeSession();
      }
    }
  }
 catch (  SVNException e) {
    String message=""String_Node_Str"";
    message+=""String_Node_Str"" + Util.escape(v) + ""String_Node_Str""+ Util.escape(e.getErrorMessage().getFullMessage());
    LOGGER.log(Level.INFO,""String_Node_Str"" + v,e);
    return FormValidation.errorWithMarkup(message);
  }
  return FormValidation.warning(Messages.SubversionSCM_excludedRevprop_notSupported(v));
}",0.9963780046098124
152825,"/** 
 * Validates the excludeUsers field.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckExcludedUsers(@QueryParameter String value) throws IOException, ServletException {
  for (  String user : Util.fixNull(value).trim().split(""String_Node_Str"")) {
    user=user.trim();
    if (""String_Node_Str"".equals(user)) {
      continue;
    }
    if (!validateExcludedUser(user)) {
      return FormValidation.error(""String_Node_Str"" + user);
    }
  }
  return FormValidation.ok();
}","/** 
 * Validates the excludeUsers field.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException            IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckExcludedUsers(@QueryParameter String value) throws IOException, ServletException {
  for (  String user : Util.fixNull(value).trim().split(""String_Node_Str"")) {
    user=user.trim();
    if (""String_Node_Str"".equals(user)) {
      continue;
    }
    if (!validateExcludedUser(user)) {
      return FormValidation.error(""String_Node_Str"" + user);
    }
  }
  return FormValidation.ok();
}",0.9914396887159532
152826,"/** 
 * Checks whether build location contains specified revision.
 * @param url url to verify.
 * @param lastCompletedBuild build.
 * @return true if build location contains specified revision.
 */
boolean isRevisionSpecifiedInBuildLocation(String url,AbstractBuild<?,?> lastCompletedBuild){
  for (  ModuleLocation location : getLocations(lastCompletedBuild)) {
    if (location.getURL() != null && location.getURL().contains(url)) {
      SVNRevision revision=getRevisionFromRemoteUrl(location.getOriginRemote());
      if (isRevisionPresent(revision)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Checks whether build locations contain specified revision.
 * @param url url to verify.
 * @param locations module locations.
 * @return true if build locations contain specified revision.
 */
boolean isRevisionSpecifiedInBuildLocation(String url,ModuleLocation[] locations){
  if (null != locations) {
    for (    ModuleLocation location : locations) {
      if (location.getURL() != null && location.getURL().contains(url)) {
        SVNRevision revision=getRevisionFromRemoteUrl(location.getOriginRemote());
        if (isRevisionPresent(revision)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.6650602409638554
152827,"/** 
 * Validates the excludeRegions Regex.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckExcludedRegions(@QueryParameter String value) throws IOException, ServletException {
  for (  String region : Util.fixNull(value).trim().split(""String_Node_Str"")) {
    try {
      Pattern.compile(region);
    }
 catch (    PatternSyntaxException e) {
      return FormValidation.error(""String_Node_Str"" + e.getMessage());
    }
  }
  return FormValidation.ok();
}","/** 
 * Validates the excludeRegions Regex.
 * @param value value to validate.
 * @return {@link FormValidation}.
 * @throws java.io.IOException            IOException.
 * @throws javax.servlet.ServletException ServletException.
 */
public FormValidation doCheckExcludedRegions(@QueryParameter String value) throws IOException, ServletException {
  for (  String region : Util.fixNull(value).trim().split(""String_Node_Str"")) {
    try {
      Pattern.compile(region);
    }
 catch (    PatternSyntaxException e) {
      return FormValidation.error(""String_Node_Str"" + e.getMessage());
    }
  }
  return FormValidation.ok();
}",0.9911361804995972
152828,"SubversionChangeLogSet(AbstractBuild build,List<LogEntry> logs){
  super(build);
  Collections.sort(logs,new Comparator<LogEntry>(){
    public int compare(    LogEntry a,    LogEntry b){
      return b.getRevision() - a.getRevision();
    }
  }
);
  this.logs=Collections.unmodifiableList(logs);
  for (  LogEntry log : logs) {
    log.setParent(this);
  }
}","SubversionChangeLogSet(AbstractBuild build,List<LogEntry> logs){
  super(build);
  this.logs=prepareChangeLogEntries(logs);
}",0.4462809917355372
152829,"/** 
 * Submits the authentication info.
 */
public void doPostCredential(StaplerRequest req,StaplerResponse rsp) throws IOException, ServletException {
  Hudson.getInstance().checkPermission(Hudson.ADMINISTER);
  MultipartFormDataParser parser=new MultipartFormDataParser(req);
  StringWriter log=new StringWriter();
  PrintWriter logWriter=new PrintWriter(log);
  UserProvidedCredential upc=UserProvidedCredential.fromForm(req,parser);
  try {
    postCredential(parser.get(""String_Node_Str""),upc,logWriter);
    rsp.sendRedirect(""String_Node_Str"");
  }
 catch (  SVNException e) {
    logWriter.println(""String_Node_Str"" + e.getErrorMessage());
    req.setAttribute(""String_Node_Str"",log.toString());
    req.setAttribute(""String_Node_Str"",true);
    req.setAttribute(""String_Node_Str"",e);
    rsp.forward(Hudson.getInstance(),""String_Node_Str"",req);
  }
 finally {
    upc.close();
  }
}","/** 
 * Submits the authentication info.
 */
public void doPostCredential(StaplerRequest req,StaplerResponse rsp) throws IOException, ServletException {
  Hudson.getInstance().checkPermission(Item.CONFIGURE);
  MultipartFormDataParser parser=new MultipartFormDataParser(req);
  StringWriter log=new StringWriter();
  PrintWriter logWriter=new PrintWriter(log);
  UserProvidedCredential upc=UserProvidedCredential.fromForm(req,parser);
  try {
    postCredential(parser.get(""String_Node_Str""),upc,logWriter);
    rsp.sendRedirect(""String_Node_Str"");
  }
 catch (  SVNException e) {
    logWriter.println(""String_Node_Str"" + e.getErrorMessage());
    req.setAttribute(""String_Node_Str"",log.toString());
    req.setAttribute(""String_Node_Str"",true);
    req.setAttribute(""String_Node_Str"",e);
    rsp.forward(Hudson.getInstance(),""String_Node_Str"",req);
  }
 finally {
    upc.close();
  }
}",0.9870713884204608
152830,"/** 
 * validate the value for a remote (repository) location.
 */
public FormValidation doCheckRemote(StaplerRequest req,@AncestorInPath AbstractProject context,@QueryParameter String value){
  String url=Util.nullify(value);
  if (url == null)   return FormValidation.ok();
  url=url.trim();
  if (isValidateRemoteUpToVar()) {
    url=(url.indexOf('$') != -1) ? url.substring(0,url.indexOf('$')) : url;
  }
  if (!URL_PATTERN.matcher(url).matches())   return FormValidation.errorWithMarkup(Messages.SubversionSCM_doCheckRemote_invalidUrl());
  if (!Hudson.getInstance().hasPermission(Hudson.ADMINISTER))   return FormValidation.ok();
  try {
    SVNURL repoURL=SVNURL.parseURIDecoded(url);
    if (checkRepositoryPath(context,repoURL) != SVNNodeKind.NONE)     return FormValidation.ok();
    SVNRepository repository=null;
    try {
      repository=getRepository(context,repoURL);
      long rev=repository.getLatestRevision();
      String repoPath=getRelativePath(repoURL,repository);
      String p=repoPath;
      while (p.length() > 0) {
        p=SVNPathUtil.removeTail(p);
        if (repository.checkPath(p,rev) == SVNNodeKind.DIR) {
          List<SVNDirEntry> entries=new ArrayList<SVNDirEntry>();
          repository.getDir(p,rev,false,entries);
          List<String> paths=new ArrayList<String>();
          for (          SVNDirEntry e : entries)           if (e.getKind() == SVNNodeKind.DIR)           paths.add(e.getName());
          String head=SVNPathUtil.head(repoPath.substring(p.length() + 1));
          String candidate=EditDistance.findNearest(head,paths);
          return FormValidation.error(Messages.SubversionSCM_doCheckRemote_badPathSuggest(p,head,candidate != null ? ""String_Node_Str"" + candidate : ""String_Node_Str""));
        }
      }
      return FormValidation.error(Messages.SubversionSCM_doCheckRemote_badPath(repoPath));
    }
  finally {
      if (repository != null)       repository.closeSession();
    }
  }
 catch (  SVNException e) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + url,e);
    String message=Messages.SubversionSCM_doCheckRemote_exceptionMsg1(Util.escape(url),Util.escape(e.getErrorMessage().getFullMessage()),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") + ""String_Node_Str"" + Functions.printThrowable(e)+ ""String_Node_Str""+ Messages.SubversionSCM_doCheckRemote_exceptionMsg2(""String_Node_Str"" + SubversionSCM.class.getName() + ""String_Node_Str""+ url);
    return FormValidation.errorWithMarkup(message);
  }
}","/** 
 * validate the value for a remote (repository) location.
 */
public FormValidation doCheckRemote(StaplerRequest req,@AncestorInPath AbstractProject context,@QueryParameter String value){
  String url=Util.nullify(value);
  if (url == null)   return FormValidation.ok();
  url=url.trim();
  if (isValidateRemoteUpToVar()) {
    url=(url.indexOf('$') != -1) ? url.substring(0,url.indexOf('$')) : url;
  }
  if (!URL_PATTERN.matcher(url).matches())   return FormValidation.errorWithMarkup(Messages.SubversionSCM_doCheckRemote_invalidUrl());
  if (!Hudson.getInstance().hasPermission(Hudson.ADMINISTER))   return FormValidation.ok();
  try {
    String urlWithoutRevision=getUrlWithoutRevision(url);
    SVNURL repoURL=SVNURL.parseURIDecoded(urlWithoutRevision);
    if (checkRepositoryPath(context,repoURL) != SVNNodeKind.NONE) {
      SVNRevision revision=getRevisionFromRemoteUrl(url);
      if (revision != null && !revision.isValid()) {
        return FormValidation.errorWithMarkup(Messages.SubversionSCM_doCheckRemote_invalidRevision());
      }
      return FormValidation.ok();
    }
    SVNRepository repository=null;
    try {
      repository=getRepository(context,repoURL);
      long rev=repository.getLatestRevision();
      String repoPath=getRelativePath(repoURL,repository);
      String p=repoPath;
      while (p.length() > 0) {
        p=SVNPathUtil.removeTail(p);
        if (repository.checkPath(p,rev) == SVNNodeKind.DIR) {
          List<SVNDirEntry> entries=new ArrayList<SVNDirEntry>();
          repository.getDir(p,rev,false,entries);
          List<String> paths=new ArrayList<String>();
          for (          SVNDirEntry e : entries)           if (e.getKind() == SVNNodeKind.DIR)           paths.add(e.getName());
          String head=SVNPathUtil.head(repoPath.substring(p.length() + 1));
          String candidate=EditDistance.findNearest(head,paths);
          return FormValidation.error(Messages.SubversionSCM_doCheckRemote_badPathSuggest(p,head,candidate != null ? ""String_Node_Str"" + candidate : ""String_Node_Str""));
        }
      }
      return FormValidation.error(Messages.SubversionSCM_doCheckRemote_badPath(repoPath));
    }
  finally {
      if (repository != null)       repository.closeSession();
    }
  }
 catch (  SVNException e) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + url,e);
    String message=Messages.SubversionSCM_doCheckRemote_exceptionMsg1(Util.escape(url),Util.escape(e.getErrorMessage().getFullMessage()),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") + ""String_Node_Str"" + Functions.printThrowable(e)+ ""String_Node_Str""+ Messages.SubversionSCM_doCheckRemote_exceptionMsg2(""String_Node_Str"" + SubversionSCM.class.getName() + ""String_Node_Str""+ url);
    return FormValidation.errorWithMarkup(message);
  }
}",0.9331819042210864
152831,"/** 
 * Figures out which revision to check out. If   {@link #remote} is {@code url@rev}, then this method returns that specific revision.
 * @param defaultValue If ""@NNN"" portion is not in the URL, this value will be returned. Normally, this is the SVN revision timestamped at the build date.
 */
public SVNRevision getRevision(SVNRevision defaultValue){
  int idx=remote.lastIndexOf('@');
  if (idx > 0) {
    String n=remote.substring(idx + 1);
    return SVNRevision.parse(n);
  }
  return defaultValue;
}","/** 
 * Figures out which revision to check out. If   {@link #remote} is {@code url@rev}, then this method returns that specific revision.
 * @param defaultValue If ""@NNN"" portion is not in the URL, this value will be returned. Normally, this is the SVN revision timestamped at the build date.
 */
public SVNRevision getRevision(SVNRevision defaultValue){
  SVNRevision revision=getRevisionFromRemoteUrl(remote);
  return revision != null ? revision : defaultValue;
}",0.7561475409836066
152832,"/** 
 * Returns the pure URL portion of   {@link #remote} by removingpossible ""@NNN"" suffix.
 */
public String getURL(){
  int idx=remote.lastIndexOf('@');
  if (idx > 0) {
    String n=remote.substring(idx + 1);
    SVNRevision r=SVNRevision.parse(n);
    if ((r != null) && (r.isValid())) {
      return remote.substring(0,idx);
    }
  }
  return remote;
}","/** 
 * Returns the pure URL portion of   {@link #remote} by removingpossible ""@NNN"" suffix.
 */
public String getURL(){
  return getUrlWithoutRevision(remote);
}",0.5604606525911708
152833,"private void verify(SubversionSCM lhs,SubversionSCM rhs){
  ModuleLocation[] ll=lhs.getLocations();
  ModuleLocation[] rl=rhs.getLocations();
  assertEquals(ll.length,rl.length);
  for (int i=0; i < ll.length; i++) {
    assertEquals(ll[i].getLocalDir(),rl[i].getLocalDir());
    assertEquals(ll[i].remote,rl[i].remote);
  }
  assertEquals(lhs.isUseUpdate(),rhs.isUseUpdate());
  assertEquals(lhs.getExcludedRegions(),rhs.getExcludedRegions());
  assertEquals(lhs.getExcludedUsers(),rhs.getExcludedUsers());
  assertEquals(lhs.getExcludedRevprop(),rhs.getExcludedRevprop());
  assertEquals(lhs.getExcludedCommitMessages(),rhs.getExcludedCommitMessages());
}","private void verify(SubversionSCM lhs,SubversionSCM rhs){
  ModuleLocation[] ll=lhs.getLocations();
  ModuleLocation[] rl=rhs.getLocations();
  assertEquals(ll.length,rl.length);
  for (int i=0; i < ll.length; i++) {
    assertEquals(ll[i].getLocalDir(),rl[i].getLocalDir());
    assertEquals(ll[i].remote,rl[i].remote);
  }
  assertEquals(lhs.isUseUpdate(),rhs.isUseUpdate());
  assertNullEquals(lhs.getExcludedRegions(),rhs.getExcludedRegions());
  assertNullEquals(lhs.getExcludedUsers(),rhs.getExcludedUsers());
  assertNullEquals(lhs.getExcludedRevprop(),rhs.getExcludedRevprop());
  assertNullEquals(lhs.getExcludedCommitMessages(),rhs.getExcludedCommitMessages());
  assertNullEquals(lhs.getIncludedRegions(),rhs.getIncludedRegions());
}",0.9379014989293362
152834,"public void testConfigRoundtrip() throws Exception {
  FreeStyleProject p=createFreeStyleProject();
  SubversionSCM scm=new SubversionSCM(Arrays.asList(new ModuleLocation(""String_Node_Str"",""String_Node_Str""),new ModuleLocation(""String_Node_Str"",""String_Node_Str"")),true,new Sventon(new URL(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  p.setScm(scm);
  submit(new WebClient().getPage(p,""String_Node_Str"").getFormByName(""String_Node_Str""));
  verify(scm,(SubversionSCM)p.getScm());
  scm=new SubversionSCM(Arrays.asList(new ModuleLocation(""String_Node_Str"",""String_Node_Str"")),false,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  p.setScm(scm);
  submit(new WebClient().getPage(p,""String_Node_Str"").getFormByName(""String_Node_Str""));
  verify(scm,(SubversionSCM)p.getScm());
}","public void testConfigRoundtrip() throws Exception {
  setJavaNetCredential();
  FreeStyleProject p=createFreeStyleProject();
  SubversionSCM scm=new SubversionSCM(Arrays.asList(new ModuleLocation(""String_Node_Str"",""String_Node_Str""),new ModuleLocation(""String_Node_Str"",""String_Node_Str"")),true,new Sventon(new URL(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  p.setScm(scm);
  submit(new WebClient().getPage(p,""String_Node_Str"").getFormByName(""String_Node_Str""));
  verify(scm,(SubversionSCM)p.getScm());
  scm=new SubversionSCM(Arrays.asList(new ModuleLocation(""String_Node_Str"",""String_Node_Str"")),false,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  p.setScm(scm);
  submit(new WebClient().getPage(p,""String_Node_Str"").getFormByName(""String_Node_Str""));
  verify(scm,(SubversionSCM)p.getScm());
}",0.9853932584269663
152835,"public void testCompareSVNAuthentications(){
  assertFalse(compareSVNAuthentications(new SVNUserNameAuthentication(""String_Node_Str"",true),new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"",22,true)));
  _idem(new SVNUserNameAuthentication(""String_Node_Str"",true));
  _idem(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"",22,true));
  _idem(new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false));
  _idem(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false));
  _idem(new SVNPasswordAuthentication(""String_Node_Str"",""String_Node_Str"",true));
  _idem(new SVNSSLAuthentication(new File(""String_Node_Str""),null,true));
  assertTrue(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false),new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false)));
  assertTrue(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false),new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false)));
  assertFalse(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false),new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false)));
  assertFalse(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false),new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false)));
}","public void testCompareSVNAuthentications() throws Exception {
  assertFalse(compareSVNAuthentications(new SVNUserNameAuthentication(""String_Node_Str"",true),new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"",22,true)));
  _idem(new SVNUserNameAuthentication(""String_Node_Str"",true));
  _idem(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"",22,true));
  _idem(new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false));
  _idem(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false));
  _idem(new SVNPasswordAuthentication(""String_Node_Str"",""String_Node_Str"",true));
  _idem(new SVNSSLAuthentication(""String_Node_Str"".getBytes(),null,true));
  assertTrue(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false),new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false)));
  assertTrue(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false),new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false)));
  assertFalse(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false),new SVNSSHAuthentication(""String_Node_Str"",new File(""String_Node_Str""),null,23,false)));
  assertFalse(compareSVNAuthentications(new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false),new SVNSSHAuthentication(""String_Node_Str"",""String_Node_Str"".toCharArray(),""String_Node_Str"",0,false)));
}",0.978517397881997
152836,"/** 
 * Parses the credential information from a form submission.
 */
public static UserProvidedCredential fromForm(StaplerRequest req,MultipartFormDataParser parser) throws IOException {
  CrumbIssuer crumbIssuer=Hudson.getInstance().getCrumbIssuer();
  if (crumbIssuer != null && !crumbIssuer.validateCrumb(req,parser))   throw HttpResponses.error(HttpServletResponse.SC_FORBIDDEN,new IOException(""String_Node_Str""));
  String kind=parser.get(""String_Node_Str"");
  int idx=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").indexOf(kind);
  String username=parser.get(""String_Node_Str"" + idx);
  String password=parser.get(""String_Node_Str"" + idx);
  final File keyFile;
  final FileItem item;
  if (idx <= 1) {
    keyFile=null;
    item=null;
  }
 else {
    item=parser.getFileItem(kind.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    keyFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    if (item != null) {
      try {
        item.write(keyFile);
      }
 catch (      Exception e) {
        throw new IOException2(e);
      }
      if (PuTTYKey.isPuTTYKeyFile(keyFile)) {
        LOGGER.info(""String_Node_Str"" + keyFile + ""String_Node_Str"");
        new PuTTYKey(keyFile,null).toOpenSSH(keyFile);
      }
    }
  }
  return new UserProvidedCredential(username,password,keyFile){
    @Override public void close() throws IOException {
      if (keyFile != null)       keyFile.delete();
      if (item != null)       item.delete();
    }
  }
;
}","/** 
 * Parses the credential information from a form submission.
 */
public static UserProvidedCredential fromForm(StaplerRequest req,MultipartFormDataParser parser) throws IOException {
  CrumbIssuer crumbIssuer=Hudson.getInstance().getCrumbIssuer();
  if (crumbIssuer != null && !crumbIssuer.validateCrumb(req,parser))   throw HttpResponses.error(SC_FORBIDDEN,new IOException(""String_Node_Str""));
  String kind=parser.get(""String_Node_Str"");
  int idx=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").indexOf(kind);
  String username=parser.get(""String_Node_Str"" + idx);
  String password=parser.get(""String_Node_Str"" + idx);
  final File keyFile;
  final FileItem item;
  if (idx <= 1) {
    keyFile=null;
    item=null;
  }
 else {
    item=parser.getFileItem(kind.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    keyFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    if (item != null) {
      try {
        item.write(keyFile);
      }
 catch (      Exception e) {
        throw new IOException2(e);
      }
      if (PuTTYKey.isPuTTYKeyFile(keyFile)) {
        LOGGER.info(""String_Node_Str"" + keyFile + ""String_Node_Str"");
        new PuTTYKey(keyFile,null).toOpenSSH(keyFile);
      }
    }
  }
  return new UserProvidedCredential(username,password,keyFile){
    @Override public void close() throws IOException {
      if (keyFile != null)       keyFile.delete();
      if (item != null)       item.delete();
    }
  }
;
}",0.9934123847167324
152837,"@Override public SVNAuthentication getFirstAuthentication(String kind,String realm,SVNURL url) throws SVNException {
  authenticationAttempted=true;
  if (kind.equals(ISVNAuthenticationManager.USERNAME))   return new SVNUserNameAuthentication(username,false);
  if (kind.equals(ISVNAuthenticationManager.PASSWORD)) {
    logWriter.println(""String_Node_Str"" + username + ""String_Node_Str"");
    cred=new PasswordCredential(username,password);
  }
  if (kind.equals(ISVNAuthenticationManager.SSH)) {
    if (keyFile == null) {
      logWriter.println(""String_Node_Str"" + username + ""String_Node_Str"");
      cred=new PasswordCredential(username,password);
    }
 else {
      logWriter.println(""String_Node_Str"" + username);
      cred=new SshPublicKeyCredential(username,password,keyFile);
    }
  }
  if (kind.equals(ISVNAuthenticationManager.SSL)) {
    logWriter.println(""String_Node_Str"");
    cred=new SslClientCertificateCredential(keyFile,password);
  }
  if (cred == null) {
    logWriter.println(""String_Node_Str"" + kind);
    return null;
  }
  return cred.createSVNAuthentication(kind);
}","@Override public SVNAuthentication getFirstAuthentication(String kind,String realm,SVNURL url) throws SVNException {
  authenticationAttempted=true;
  if (kind.equals(ISVNAuthenticationManager.USERNAME))   return new SVNUserNameAuthentication(username,false);
  if (kind.equals(ISVNAuthenticationManager.PASSWORD)) {
    logWriter.println(""String_Node_Str"" + username + ""String_Node_Str"");
    cred=new PasswordCredential(username,password);
  }
  if (kind.equals(ISVNAuthenticationManager.SSH)) {
    if (keyFile == null) {
      logWriter.println(""String_Node_Str"" + username + ""String_Node_Str"");
      cred=new PasswordCredential(username,password);
    }
 else {
      logWriter.println(""String_Node_Str"" + username);
      cred=new SshPublicKeyCredential(username,password,keyFile);
    }
  }
  if (kind.equals(ISVNAuthenticationManager.SSL)) {
    logWriter.println(""String_Node_Str"");
    try {
      cred=new SslClientCertificateCredential(keyFile,password);
    }
 catch (    IOException e) {
      e.printStackTrace(logWriter);
      return null;
    }
  }
  if (cred == null) {
    logWriter.println(""String_Node_Str"" + kind);
    return null;
  }
  return cred.createSVNAuthentication(kind);
}",0.953125
152838,"public boolean pollChanges(AbstractProject project,Launcher launcher,FilePath workspace,final TaskListener listener) throws IOException, InterruptedException {
  AbstractBuild lastBuild=(AbstractBuild)project.getLastBuild();
  if (lastBuild == null) {
    listener.getLogger().println(""String_Node_Str"");
    return true;
  }
  if (repositoryLocationsNoLongerExist(lastBuild,listener)) {
    listener.getLogger().println(""String_Node_Str"" + project + ""String_Node_Str"");
    project.makeDisabled(true);
    return false;
  }
  final Map<String,Long> wsRev=parseRevisionFile(lastBuild);
  final List<External> externals=parseExternalsFile(project);
  for (  ModuleLocation loc : getLocations(lastBuild)) {
    if (!wsRev.containsKey(loc.getURL())) {
      listener.getLogger().println(""String_Node_Str"" + loc.getURL() + ""String_Node_Str"");
      return true;
    }
  }
  VirtualChannel ch=null;
  Node n=lastBuild.getBuiltOn();
  if (n != null) {
    Computer c=n.toComputer();
    if (c != null)     ch=c.getChannel();
  }
  if (ch == null)   ch=MasterComputer.localChannel;
  return ch.call(new Callable<Boolean,IOException>(){
    final ISVNAuthenticationProvider authProvider=getDescriptor().createAuthenticationProvider();
    final String globalExcludedRevprop=getDescriptor().getGlobalExcludedRevprop();
    public Boolean call() throws IOException {
      OUTER:       for (      Map.Entry<String,Long> localInfo : wsRev.entrySet()) {
        String url=localInfo.getKey();
        for (        External ext : externals)         if (ext.url.equals(url) && ext.isRevisionFixed())         continue OUTER;
        try {
          final SVNURL decodedURL=SVNURL.parseURIDecoded(url);
          SvnInfo remoteInfo=new SvnInfo(parseSvnInfo(decodedURL,authProvider));
          listener.getLogger().println(Messages.SubversionSCM_pollChanges_remoteRevisionAt(url,remoteInfo.revision));
          if (remoteInfo.revision > localInfo.getValue()) {
            boolean changesFound=true;
            Pattern[] excludedPatterns=getExcludedRegionsPatterns();
            String[] excludedUsers=getExcludedUsersNormalized();
            String excludedRevprop=Util.fixEmptyAndTrim(getExcludedRevprop());
            if (excludedRevprop == null) {
              excludedRevprop=globalExcludedRevprop;
            }
            if (excludedPatterns != null || excludedUsers != null || excludedRevprop != null) {
              SVNLogHandler handler=new SVNLogHandler(listener,excludedPatterns,excludedUsers,excludedRevprop);
              final SVNClientManager manager=createSvnClientManager(authProvider);
              try {
                final SVNLogClient svnlc=manager.getLogClient();
                svnlc.doLog(decodedURL,null,SVNRevision.UNDEFINED,SVNRevision.create(localInfo.getValue() + 1),SVNRevision.create(remoteInfo.revision),false,true,false,0,null,handler);
              }
  finally {
                manager.dispose();
              }
              changesFound=handler.isChangesFound();
            }
            if (changesFound) {
              listener.getLogger().println(Messages.SubversionSCM_pollChanges_changedFrom(localInfo.getValue()));
              return true;
            }
          }
        }
 catch (        SVNException e) {
          e.printStackTrace(listener.error(""String_Node_Str"" + url));
        }
      }
      return false;
    }
  }
);
}","public boolean pollChanges(AbstractProject project,Launcher launcher,FilePath workspace,final TaskListener listener) throws IOException, InterruptedException {
  AbstractBuild lastBuild=(AbstractBuild)project.getLastBuild();
  if (lastBuild == null) {
    listener.getLogger().println(""String_Node_Str"");
    return true;
  }
  if (repositoryLocationsNoLongerExist(lastBuild,listener)) {
    listener.getLogger().println(""String_Node_Str"" + project + ""String_Node_Str"");
    project.makeDisabled(true);
    return false;
  }
  final Map<String,Long> wsRev=parseRevisionFile(lastBuild);
  final List<External> externals=parseExternalsFile(project);
  for (  ModuleLocation loc : getLocations(lastBuild)) {
    if (!wsRev.containsKey(loc.getURL())) {
      listener.getLogger().println(""String_Node_Str"" + loc.getURL() + ""String_Node_Str"");
      return true;
    }
  }
  VirtualChannel ch=null;
  Node n=lastBuild.getBuiltOn();
  if (n != null) {
    Computer c=n.toComputer();
    if (c != null)     ch=c.getChannel();
  }
  if (ch == null)   ch=MasterComputer.localChannel;
  return ch.call(new DelegatingCallable<Boolean,IOException>(){
    final ISVNAuthenticationProvider authProvider=getDescriptor().createAuthenticationProvider();
    final String globalExcludedRevprop=getDescriptor().getGlobalExcludedRevprop();
    public ClassLoader getClassLoader(){
      return Hudson.getInstance().getPluginManager().uberClassLoader;
    }
    public Boolean call() throws IOException {
      OUTER:       for (      Map.Entry<String,Long> localInfo : wsRev.entrySet()) {
        String url=localInfo.getKey();
        for (        External ext : externals)         if (ext.url.equals(url) && ext.isRevisionFixed())         continue OUTER;
        try {
          final SVNURL decodedURL=SVNURL.parseURIDecoded(url);
          SvnInfo remoteInfo=new SvnInfo(parseSvnInfo(decodedURL,authProvider));
          listener.getLogger().println(Messages.SubversionSCM_pollChanges_remoteRevisionAt(url,remoteInfo.revision));
          if (remoteInfo.revision > localInfo.getValue()) {
            boolean changesFound=true;
            Pattern[] excludedPatterns=getExcludedRegionsPatterns();
            String[] excludedUsers=getExcludedUsersNormalized();
            String excludedRevprop=Util.fixEmptyAndTrim(getExcludedRevprop());
            if (excludedRevprop == null) {
              excludedRevprop=globalExcludedRevprop;
            }
            if (excludedPatterns != null || excludedUsers != null || excludedRevprop != null) {
              SVNLogHandler handler=new SVNLogHandler(listener,excludedPatterns,excludedUsers,excludedRevprop);
              final SVNClientManager manager=createSvnClientManager(authProvider);
              try {
                final SVNLogClient svnlc=manager.getLogClient();
                svnlc.doLog(decodedURL,null,SVNRevision.UNDEFINED,SVNRevision.create(localInfo.getValue() + 1),SVNRevision.create(remoteInfo.revision),false,true,false,0,null,handler);
              }
  finally {
                manager.dispose();
              }
              changesFound=handler.isChangesFound();
            }
            if (changesFound) {
              listener.getLogger().println(Messages.SubversionSCM_pollChanges_changedFrom(localInfo.getValue()));
              return true;
            }
          }
        }
 catch (        SVNException e) {
          e.printStackTrace(listener.error(""String_Node_Str"" + url));
        }
      }
      return false;
    }
  }
);
}",0.9815594598518949
152839,"public String[] getExcludedRegionsNormalized(){
  return excludedRegions == null ? null : excludedRegions.split(""String_Node_Str"");
}","public String[] getExcludedRegionsNormalized(){
  return (excludedRegions == null || excludedRegions.trim().equals(""String_Node_Str"")) ? null : excludedRegions.split(""String_Node_Str"");
}",0.83125
152840,"public String[] getExcludedUsersNormalized(){
  if (excludedUsers == null) {
    return null;
  }
  ArrayList<String> users=new ArrayList<String>();
  for (  String user : excludedUsers.split(""String_Node_Str"")) {
    users.add(user.trim());
  }
  return users.toArray(new String[users.size()]);
}","public String[] getExcludedUsersNormalized(){
  if (excludedUsers == null || excludedUsers.trim().equals(""String_Node_Str"")) {
    return null;
  }
  ArrayList<String> users=new ArrayList<String>();
  for (  String user : excludedUsers.split(""String_Node_Str"")) {
    users.add(user.trim());
  }
  return users.toArray(new String[users.size()]);
}",0.922360248447205
152841,"public String[] getExcludedCommitMessagesNormalized(){
  return excludedCommitMessages == null ? new String[0] : excludedCommitMessages.split(""String_Node_Str"");
}","public String[] getExcludedCommitMessagesNormalized(){
  return (excludedCommitMessages == null || excludedCommitMessages.trim().equals(""String_Node_Str"")) ? new String[0] : excludedCommitMessages.split(""String_Node_Str"");
}",0.8423772609819121
152842,"public CheckOutTask(AbstractBuild<?,?> build,SubversionSCM parent,Date timestamp,boolean update,TaskListener listener){
  this.authProvider=parent.getDescriptor().createAuthenticationProvider();
  this.timestamp=timestamp;
  this.update=update;
  this.listener=listener;
  this.locations=parent.getLocations(build);
  revisions=build.getAction(RevisionParameterAction.class);
}","public CheckOutTask(AbstractBuild<?,?> build,SubversionSCM parent,Date timestamp,boolean update,boolean revert,TaskListener listener){
  this.authProvider=parent.getDescriptor().createAuthenticationProvider();
  this.timestamp=timestamp;
  this.update=update;
  this.revert=revert;
  this.listener=listener;
  this.locations=parent.getLocations(build);
  revisions=build.getAction(RevisionParameterAction.class);
}",0.9532237673830596
152843,"/** 
 * Performs the checkout or update, depending on the configuration and workspace state. <p> Use canonical path to avoid SVNKit/symlink problem as described in https://wiki.svnkit.com/SVNKit_FAQ
 * @return nullif the operation failed. Otherwise the set of local workspace paths (relative to the workspace root) that has loaded due to svn:external.
 */
private List<External> checkout(AbstractBuild build,FilePath workspace,TaskListener listener) throws IOException, InterruptedException {
  if (repositoryLocationsNoLongerExist(build,listener)) {
    Run lsb=build.getProject().getLastSuccessfulBuild();
    if (lsb != null && build.getNumber() - lsb.getNumber() > 10 && build.getTimestamp().getTimeInMillis() - lsb.getTimestamp().getTimeInMillis() > TimeUnit2.DAYS.toMillis(1)) {
      listener.getLogger().println(""String_Node_Str"" + build.getProject().getName() + ""String_Node_Str"");
      build.getProject().makeDisabled(true);
      return null;
    }
  }
  Boolean isUpdatable=useUpdate && workspace.act(new IsUpdatableTask(build,this,listener));
  return workspace.act(new CheckOutTask(build,this,build.getTimestamp().getTime(),isUpdatable,listener));
}","/** 
 * Performs the checkout or update, depending on the configuration and workspace state. <p> Use canonical path to avoid SVNKit/symlink problem as described in https://wiki.svnkit.com/SVNKit_FAQ
 * @return nullif the operation failed. Otherwise the set of local workspace paths (relative to the workspace root) that has loaded due to svn:external.
 */
private List<External> checkout(AbstractBuild build,FilePath workspace,TaskListener listener) throws IOException, InterruptedException {
  if (repositoryLocationsNoLongerExist(build,listener)) {
    Run lsb=build.getProject().getLastSuccessfulBuild();
    if (lsb != null && build.getNumber() - lsb.getNumber() > 10 && build.getTimestamp().getTimeInMillis() - lsb.getTimestamp().getTimeInMillis() > TimeUnit2.DAYS.toMillis(1)) {
      listener.getLogger().println(""String_Node_Str"" + build.getProject().getName() + ""String_Node_Str"");
      build.getProject().makeDisabled(true);
      return null;
    }
  }
  Boolean isUpdatable=useUpdate && workspace.act(new IsUpdatableTask(build,this,listener));
  return workspace.act(new CheckOutTask(build,this,build.getTimestamp().getTime(),isUpdatable,doRevert,listener));
}",0.9961489088575096
152844,"/** 
 * Checks if the given log entry should be considered for the purposes of SCM polling.
 * @return <code>true</code> if the should trigger polling, <code>false</code> otherwise
 */
private boolean checkLogEntry(SVNLogEntry logEntry){
  if (excludedRevprop != null) {
    SVNProperties revprops=logEntry.getRevisionProperties();
    if (revprops != null && revprops.containsName(excludedRevprop)) {
      listener.getLogger().println(Messages.SubversionSCM_pollChanges_ignoredRevision(logEntry.getRevision(),Messages.SubversionSCM_pollChanges_ignoredRevision_revprop(excludedRevprop)));
      return false;
    }
  }
  String author=logEntry.getAuthor();
  for (  String user : excludedUsers) {
    if (author.equals(user)) {
      listener.getLogger().println(Messages.SubversionSCM_pollChanges_ignoredRevision(logEntry.getRevision(),Messages.SubversionSCM_pollChanges_ignoredRevision_author(author)));
      return false;
    }
  }
  Map changedPaths=logEntry.getChangedPaths();
  if (changedPaths.isEmpty()) {
    return false;
  }
  List<String> excludedPaths=new ArrayList<String>();
  for (  Object paths : changedPaths.values()) {
    SVNLogEntryPath logEntryPath=(SVNLogEntryPath)paths;
    String path=logEntryPath.getPath();
    for (    Pattern pattern : excludedPatterns) {
      if (pattern.matcher(path).matches()) {
        excludedPaths.add(path);
      }
    }
  }
  if (changedPaths.size() == excludedPaths.size()) {
    listener.getLogger().println(Messages.SubversionSCM_pollChanges_ignoredRevision(logEntry.getRevision(),Messages.SubversionSCM_pollChanges_ignoredRevision_path(Util.join(excludedPaths,""String_Node_Str""))));
    return false;
  }
  return true;
}","/** 
 * Checks if the given log entry should be considered for the purposes of SCM polling.
 * @return <code>true</code> if the should trigger polling, <code>false</code> otherwise
 */
private boolean checkLogEntry(SVNLogEntry logEntry){
  if (excludedRevprop != null) {
    SVNProperties revprops=logEntry.getRevisionProperties();
    if (revprops != null && revprops.containsName(excludedRevprop)) {
      listener.getLogger().println(Messages.SubversionSCM_pollChanges_ignoredRevision(logEntry.getRevision(),Messages.SubversionSCM_pollChanges_ignoredRevision_revprop(excludedRevprop)));
      return false;
    }
  }
  String author=logEntry.getAuthor();
  if (excludedUsers.contains(author)) {
    listener.getLogger().println(Messages.SubversionSCM_pollChanges_ignoredRevision(logEntry.getRevision(),Messages.SubversionSCM_pollChanges_ignoredRevision_author(author)));
    return false;
  }
  Map changedPaths=logEntry.getChangedPaths();
  if (changedPaths.isEmpty()) {
    return false;
  }
  List<String> excludedPaths=new ArrayList<String>();
  for (  String path : (Set<String>)changedPaths.keySet()) {
    for (    Pattern pattern : excludedPatterns) {
      if (pattern.matcher(path).matches()) {
        excludedPaths.add(path);
        break;
      }
    }
  }
  if (changedPaths.size() == excludedPaths.size()) {
    listener.getLogger().println(Messages.SubversionSCM_pollChanges_ignoredRevision(logEntry.getRevision(),Messages.SubversionSCM_pollChanges_ignoredRevision_path(Util.join(excludedPaths,""String_Node_Str""))));
    return false;
  }
  return true;
}",0.8347132781355412
152845,"private SVNLogHandler(TaskListener listener,Pattern[] excludedPatterns,String[] excludedUsers,String excludedRevprop){
  this.listener=listener;
  this.excludedPatterns=excludedPatterns == null ? new Pattern[0] : excludedPatterns;
  this.excludedUsers=excludedUsers == null ? new String[0] : excludedUsers;
  this.excludedRevprop=excludedRevprop;
}","private SVNLogHandler(TaskListener listener,Pattern[] excludedPatterns,String[] excludedUsers,String excludedRevprop){
  this.listener=listener;
  this.excludedPatterns=excludedPatterns == null ? new Pattern[0] : excludedPatterns;
  this.excludedUsers=new HashSet<String>(Arrays.asList(excludedUsers == null ? new String[0] : excludedUsers));
  this.excludedRevprop=excludedRevprop;
}",0.9508196721311476
152846,"public Boolean invoke(File ws,VirtualChannel channel) throws IOException {
  for (  ModuleLocation l : locations) {
    String moduleName=l.getLocalDir();
    File module=new File(ws,moduleName).getCanonicalFile();
    if (!module.exists()) {
      listener.getLogger().println(""String_Node_Str"" + module + ""String_Node_Str"");
      return false;
    }
    try {
      SVNInfo svnkitInfo=parseSvnInfo(module,authProvider);
      SvnInfo svnInfo=new SvnInfo(svnkitInfo);
      String url=l.getURL();
      if (!svnInfo.url.equals(url)) {
        listener.getLogger().println(""String_Node_Str"" + url);
        return false;
      }
    }
 catch (    SVNException e) {
      if (e.getErrorMessage().getErrorCode() == SVNErrorCode.WC_NOT_DIRECTORY) {
        listener.getLogger().println(""String_Node_Str"" + module);
      }
 else {
        listener.getLogger().println(""String_Node_Str"" + module);
        e.printStackTrace(listener.error(e.getMessage()));
        return false;
      }
    }
  }
  return true;
}","public Boolean invoke(File ws,VirtualChannel channel) throws IOException {
  for (  ModuleLocation l : locations) {
    String moduleName=l.getLocalDir();
    File module=new File(ws,moduleName).getCanonicalFile();
    if (!module.exists()) {
      listener.getLogger().println(""String_Node_Str"" + module + ""String_Node_Str"");
      return false;
    }
    try {
      SVNInfo svnkitInfo=parseSvnInfo(module,authProvider);
      SvnInfo svnInfo=new SvnInfo(svnkitInfo);
      String url=l.getURL();
      if (!svnInfo.url.equals(url)) {
        listener.getLogger().println(""String_Node_Str"" + url);
        return false;
      }
    }
 catch (    SVNException e) {
      if (e.getErrorMessage().getErrorCode() == SVNErrorCode.WC_NOT_DIRECTORY) {
        listener.getLogger().println(""String_Node_Str"" + module);
      }
 else {
        listener.getLogger().println(""String_Node_Str"" + module);
        e.printStackTrace(listener.error(e.getMessage()));
      }
      return false;
    }
  }
  return true;
}",0.979187314172448
152847,"/** 
 * Creates   {@link ISVNAuthenticationProvider} backed by {@link #credentials}. This method must be invoked on the master, but the returned object is remotable. <p> Therefore, to access   {@link ISVNAuthenticationProvider}, you need to call this method on the master, then pass the object to the slave side, then call  {@link SubversionSCM#createSvnClientManager(ISVNAuthenticationProvider)} on the slave.
 * @see SubversionSCM#createSvnClientManager(ISVNAuthenticationProvider)
 */
public ISVNAuthenticationProvider createAuthenticationProvider(){
  return new SVNAuthenticationProviderImpl(remotableProvider);
}","/** 
 * Creates   {@link ISVNAuthenticationProvider} backed by {@link #credentials}. This method must be invoked on the master, but the returned object is remotable. <p> Therefore, to access   {@link ISVNAuthenticationProvider}, you need to call this method on the master, then pass the object to the slave side, then call  {@link SubversionSCM#createSvnClientManager(ISVNAuthenticationProvider)} on the slave.
 * @see SubversionSCM#createSvnClientManager(ISVNAuthenticationProvider)
 */
public ISVNAuthenticationProvider createAuthenticationProvider(){
  return new SVNAuthenticationProviderImpl(remotableProvider.get());
}",0.9951690821256038
152848,"@Override public URL getFileLink(Path path) throws IOException {
  if (path.getEditType() == EditType.DELETE)   return null;
  int r=path.getLogEntry().getRevision();
  return new URL(url,String.format(""String_Node_Str"",repositoryInstance,encodePath(getPath(path)),r));
}","@Override public URL getFileLink(Path path) throws IOException {
  if (path.getEditType() == EditType.DELETE)   return null;
  int r=path.getLogEntry().getRevision();
  return new URL(url,String.format(""String_Node_Str"",encodePath(repositoryInstance),encodePath(getPath(path)),r));
}",0.9783393501805054
152849,"@Override public URL getChangeSetLink(LogEntry changeSet) throws IOException {
  return new URL(url,String.format(""String_Node_Str"",repositoryInstance,changeSet.getRevision()));
}","@Override public URL getChangeSetLink(LogEntry changeSet) throws IOException {
  return new URL(url,String.format(""String_Node_Str"",encodePath(repositoryInstance),changeSet.getRevision()));
}",0.9675675675675676
152850,"@Override public URL getDiffLink(Path path) throws IOException {
  if (path.getEditType() != EditType.EDIT)   return null;
  int r=path.getLogEntry().getRevision();
  return new URL(url,String.format(""String_Node_Str"",repositoryInstance,encodePath(getPath(path)),r));
}","@Override public URL getDiffLink(Path path) throws IOException {
  if (path.getEditType() != EditType.EDIT)   return null;
  int r=path.getLogEntry().getRevision();
  return new URL(url,String.format(""String_Node_Str"",encodePath(repositoryInstance),encodePath(getPath(path)),r));
}",0.9781818181818182
152851,"/** 
 * Trims off the root module portion to compute the path within FishEye.
 */
private String getPath(Path path){
  String s=trimHeadSlash(path.getValue());
  if (s.startsWith(repositoryInstance))   s=trimHeadSlash(s.substring(repositoryInstance.length()));
  return s;
}","/** 
 * Trims off the root module portion to compute the path within FishEye.
 */
private String getPath(Path path){
  String s=trimHeadSlash(path.getValue());
  return s;
}",0.7740492170022372
152852,"private static String encodePath(String path) throws UnsupportedEncodingException {
  StringBuilder buf=new StringBuilder();
  if (path.startsWith(""String_Node_Str"")) {
    buf.append('/');
  }
  boolean first=true;
  for (  String pathElement : path.split(""String_Node_Str"")) {
    if (first) {
      first=false;
    }
 else {
      buf.append('/');
    }
    buf.append(URLEncoder.encode(pathElement,URL_CHARSET));
  }
  if (path.endsWith(""String_Node_Str"")) {
    buf.append('/');
  }
  return buf.toString();
}","private static String encodePath(String path) throws UnsupportedEncodingException {
  StringBuilder buf=new StringBuilder();
  if (path.startsWith(""String_Node_Str"")) {
    buf.append('/');
  }
  boolean first=true;
  for (  String pathElement : path.split(""String_Node_Str"")) {
    if (first) {
      first=false;
    }
 else {
      buf.append('/');
    }
    buf.append(URLEncoder.encode(pathElement,URL_CHARSET));
  }
  if (path.endsWith(""String_Node_Str"")) {
    buf.append('/');
  }
  return buf.toString().replace(""String_Node_Str"",""String_Node_Str"");
}",0.958139534883721
152853,"@Override public void run(){
  for (  RecognitionListener l : listeners)   l.onVadStateChanged(state);
}","@Override public void run(){
  RecognitionListener[] emptyArray=new RecognitionListener[0];
  for (  RecognitionListener listener : listeners.toArray(emptyArray))   listener.onVadStateChanged(state);
}",0.6491803278688525
152854,"public void removeListener(RecognitionListener listener){
  listeners.remove(listener);
}","public void removeListener(RecognitionListener listener){
synchronized (listeners) {
    listeners.remove(listener);
  }
}",0.8436018957345972
152855,"public void addListener(RecognitionListener listener){
  listeners.add(listener);
}","public void addListener(RecognitionListener listener){
synchronized (listeners) {
    listeners.add(listener);
  }
}",0.8341708542713567
152856,"/** 
 * Called by the connection manager I/O writer thread to instruct this connection to write its pending outgoing messages.
 */
public void writeMessages(){
  try {
    ByteBuffer frame;
    while ((frame=_outq.peek()) != null) {
      _chan.write(frame);
      if (frame.remaining() > 0) {
        _cmgr.requeueWriter(this);
        return;
      }
      _outq.poll();
    }
  }
 catch (  NotYetConnectedException nyce) {
    _cmgr.requeueWriter(this);
  }
catch (  IOException ioe) {
    _outq.clear();
    _input.onSendError(ioe);
    onClose(ioe);
  }
}","/** 
 * Called by the connection manager I/O writer thread to instruct this connection to write its pending outgoing messages.
 */
public void writeMessages(){
  try {
    ByteBuffer frame;
    while ((frame=_outq.peek()) != null) {
      if (_chan == null) {
        return;
      }
      _chan.write(frame);
      if (frame.remaining() > 0) {
        _cmgr.requeueWriter(this);
        return;
      }
      _outq.poll();
    }
  }
 catch (  NotYetConnectedException nyce) {
    _cmgr.requeueWriter(this);
  }
catch (  IOException ioe) {
    _outq.clear();
    _input.onSendError(ioe);
    onClose(ioe);
  }
}",0.9564474807856532
152857,"public void send(ByteBuffer buffer){
  ByteBuffer frame=ByteBuffer.allocate(buffer.limit() - buffer.capacity());
  buffer.put(frame);
  _outq.offer(frame);
  _cmgr.queueWriter(this);
}","public void send(ByteBuffer buffer){
  ByteBuffer frame=ByteBuffer.allocate(buffer.limit() - buffer.position());
  frame.put(buffer);
  frame.flip();
  _outq.offer(frame);
  _cmgr.queueWriter(this);
}",0.796875
152858,"public void onMessage(ByteBuffer data){
  try {
    _bin.setBuffer(data);
    Upstream msg=_sin.<Upstream>readValue();
    msg.dispatch(this);
  }
 catch (  Throwable t) {
    log.warning(""String_Node_Str"",""String_Node_Str"",this);
  }
}","public void onMessage(ByteBuffer data){
  try {
    _bin.setBuffer(data);
    Upstream msg=_sin.<Upstream>readValue();
    msg.dispatch(this);
  }
 catch (  Throwable t) {
    log.warning(""String_Node_Str"",""String_Node_Str"",this,t);
  }
}",0.9957805907172996
152859,"public void save(Configuration credentials){
  Properties props=new Properties();
  props.setProperty(Keys.AMAZON_ACCESS_KEY_ID.name(),credentials.getAccessKeyId());
  props.setProperty(Keys.AMAZON_SECRET_ACCESS_KEY.name(),credentials.getSecretAccessKey());
  props.setProperty(Keys.PROXY_HOST.name(),credentials.getProxyHost());
  props.setProperty(Keys.PROXY_PORT.name(),Integer.toString(credentials.getProxyPort()));
  props.setProperty(Keys.PROXY_USERNAME.name(),credentials.getProxyUsername());
  props.setProperty(Keys.PROXY_PASSWORD.name(),credentials.getProxyPassword());
  props.setProperty(Keys.USE_SSL.name(),Boolean.toString(credentials.isUseSecureProtocol()));
  saveProperties(props);
}","public void save(Configuration credentials){
  Properties props=new Properties();
  setProperty(props,Keys.AMAZON_ACCESS_KEY_ID,credentials.getAccessKeyId());
  setProperty(props,Keys.AMAZON_SECRET_ACCESS_KEY,credentials.getSecretAccessKey());
  setProperty(props,Keys.PROXY_HOST,credentials.getProxyHost());
  setProperty(props,Keys.PROXY_PORT,credentials.getProxyPort());
  setProperty(props,Keys.PROXY_USERNAME,credentials.getProxyUsername());
  setProperty(props,Keys.PROXY_PASSWORD,credentials.getProxyPassword());
  setProperty(props,Keys.USE_SSL,credentials.isUseSecureProtocol());
  saveProperties(props);
}",0.6707224334600761
152860,"public void filesDropped(final File[] files){
  if (controller.isShowingObjects()) {
    uploadFiles(files);
  }
 else {
    worker.executeOnEventLoop(new Runnable(){
      public void run(){
        selectBucketAndUploadFiles(files);
      }
    }
);
  }
}","public void filesDropped(final File[] files){
  if (controller.isShowingObjects()) {
    worker.executeInBackground(new Runnable(){
      public void run(){
        uploadFiles(files);
      }
    }
);
  }
 else {
    worker.executeOnEventLoop(new Runnable(){
      public void run(){
        selectBucketAndUploadFiles(files);
      }
    }
);
  }
}",0.8467874794069192
152861,"public void run(){
  dialog.begin();
  try {
    uploadFiles(resolveKeys(files));
    dialog.append(""String_Node_Str"");
  }
  finally {
    dialog.finish();
  }
}","public void run(){
  controller.selectBucket(bucketName);
  controller.showObjects();
  uploadFiles(files);
}",0.3985239852398524
152862,"private void selectBucketAndUploadFiles(File[] files){
  List<String> names=model.getCurrentNames();
  String bucketName=display.selectOption(""String_Node_Str"",""String_Node_Str"",names);
  if (bucketName != null) {
    controller.selectBucket(bucketName);
    controller.showObjects();
    uploadFiles(files);
  }
}","private void selectBucketAndUploadFiles(final File[] files){
  List<String> names=model.getCurrentNames();
  final String bucketName=display.selectOption(""String_Node_Str"",""String_Node_Str"",names);
  if (bucketName != null) {
    worker.executeInBackground(new Runnable(){
      public void run(){
        controller.selectBucket(bucketName);
        controller.showObjects();
        uploadFiles(files);
      }
    }
);
  }
}",0.7584345479082322
152863,"private void attemptObjectCreation(String bucketName,String objectKey,File file){
  dialog.next();
  try {
    dialog.append(""String_Node_Str"",file.getAbsolutePath(),fileSize.format(file.length()));
    controller.createObject(bucketName,objectKey,file,dialog);
    dialog.append(""String_Node_Str"");
  }
 catch (  Throwable e) {
    logger.warn(""String_Node_Str"" + file,e);
    dialog.append(""String_Node_Str"",e.toString());
  }
}","private void attemptObjectCreation(String bucketName,String objectKey,File file){
  dialog.next();
  try {
    dialog.append(""String_Node_Str"",file.getAbsolutePath(),fileSize.format(file.length()));
    controller.createObject(bucketName,objectKey,file,dialog);
    dialog.append(""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    logger.warn(""String_Node_Str"" + file,e);
    dialog.append(""String_Node_Str"",e.toString());
  }
}",0.9319492502883506
152864,"public void next(){
  progress.setValue(0);
  progress.setIndeterminate(true);
}","public void next(){
  worker.executeOnEventLoop(new Runnable(){
    public void run(){
      progress.setValue(0);
      progress.setIndeterminate(true);
    }
  }
);
}",0.6451612903225806
152865,"public void processed(long count,long length){
  if (progress.isIndeterminate()) {
    progress.setMinimum(0);
    progress.setMaximum((int)length);
    progress.setStringPainted(true);
    progress.setIndeterminate(false);
  }
  progress.setValue((int)count);
}","public void processed(final long count,final long length){
  worker.executeOnEventLoop(new Runnable(){
    public void run(){
      if (progress.isIndeterminate()) {
        progress.setMinimum(0);
        progress.setMaximum((int)length);
        progress.setStringPainted(true);
        progress.setIndeterminate(false);
      }
      progress.setValue((int)count);
    }
  }
);
}",0.8136645962732919
152866,"public void run(){
  closeButton.setEnabled(true);
}","public void run(){
  if (progress.isIndeterminate()) {
    progress.setMinimum(0);
    progress.setMaximum((int)length);
    progress.setStringPainted(true);
    progress.setIndeterminate(false);
  }
  progress.setValue((int)count);
}",0.1818181818181818
152867,"public Configuration(String accessKeyId,String secretAccessKey,String proxyHost,String proxyPort,String proxyUserName,String proxyPassword,String ntlmHost,String ntlmDomain,String useSecureProtocol){
  super.setConnectionTimeout(10000);
  super.setSocketTimeout(10000);
  this.accessKeyId=accessKeyId;
  this.secretAccessKey=secretAccessKey;
  this.ntlmHost=ntlmHost;
  this.ntlmDomain=ntlmDomain;
  if (StringUtils.isNotEmpty(proxyHost)) {
    super.setProxyHost(proxyHost);
  }
  if (NumberUtils.isDigits(proxyPort)) {
    super.setProxyPort(Integer.parseInt(proxyPort));
  }
  if (StringUtils.isNotEmpty(proxyUserName)) {
    super.setProxyUsername(proxyUserName);
  }
  if (StringUtils.isNotEmpty(proxyPassword)) {
    super.setProxyPassword(proxyPassword);
  }
  if (dontUse(useSecureProtocol)) {
    super.setProtocol(Protocol.HTTP);
  }
}","public Configuration(String accessKeyId,String secretAccessKey,String proxyHost,String proxyPort,String proxyUserName,String proxyPassword,String ntlmHost,String ntlmDomain,String useSecureProtocol){
  super.setConnectionTimeout(10000);
  super.setSocketTimeout(50000);
  this.accessKeyId=accessKeyId;
  this.secretAccessKey=secretAccessKey;
  this.ntlmHost=ntlmHost;
  this.ntlmDomain=ntlmDomain;
  if (StringUtils.isNotEmpty(proxyHost)) {
    super.setProxyHost(proxyHost);
  }
  if (NumberUtils.isDigits(proxyPort)) {
    super.setProxyPort(Integer.parseInt(proxyPort));
  }
  if (StringUtils.isNotEmpty(proxyUserName)) {
    super.setProxyUsername(proxyUserName);
  }
  if (StringUtils.isNotEmpty(proxyPassword)) {
    super.setProxyPassword(proxyPassword);
  }
  if (StringUtils.isNotEmpty(useSecureProtocol) && !BooleanUtils.toBoolean(useSecureProtocol)) {
    super.setProtocol(Protocol.HTTP);
  }
}",0.9571673329525984
152868,"public boolean objectExists(String bucketName,String objectKey){
  return client.getObjectMetadata(bucketName,objectKey) != null;
}","public boolean objectExists(String bucketName,String objectKey){
  ObjectListing objectListing=client.listObjects(bucketName,objectKey);
  for (  S3ObjectSummary summary : objectListing.getObjectSummaries()) {
    if (summary.getKey().equals(objectKey)) {
      return true;
    }
  }
  return false;
}",0.4896073903002309
152869,"public List<S3Object> listObjectsInBucket(String bucketName){
  List<S3Object> objects=newArrayList();
  ObjectListing objectListing=client.listObjects(bucketName);
  List<S3ObjectSummary> summaries=objectListing.getObjectSummaries();
  for (  S3ObjectSummary summary : summaries) {
    DateTime lastModified=new DateTime(summary.getLastModified());
    lastModified=lastModified.toDateTime(DateTimeZone.getDefault());
    objects.add(new S3Object(summary.getKey(),summary.getSize(),lastModified.toLocalDateTime()));
  }
  return objects;
}","public List<S3Object> listObjectsInBucket(String bucketName){
  List<S3Object> objects=newArrayList();
  ObjectListing objectListing=client.listObjects(bucketName);
  for (  S3ObjectSummary summary : objectListing.getObjectSummaries()) {
    DateTime lastModified=new DateTime(summary.getLastModified());
    lastModified=lastModified.toDateTime(DateTimeZone.getDefault());
    objects.add(new S3Object(summary.getKey(),summary.getSize(),lastModified.toLocalDateTime()));
  }
  return objects;
}",0.442512077294686
152870,"@Test public void shouldCreateDownloadAndDeleteObject() throws Exception {
  String bucketName=""String_Node_Str"" + UUID.randomUUID();
  Service service=new WebClientService(credentials);
  service.createBucket(bucketName);
  File file=folder.newFile(""String_Node_Str"");
  FileUtils.writeStringToFile(file,UUID.randomUUID().toString());
  service.createObject(bucketName,file.getName(),file,new NullProgressListener());
  assertTrue(""String_Node_Str"",service.objectExists(bucketName,file.getName()));
  assertThat(service.listObjectsInBucket(bucketName),hasItem(object(file.getName())));
  List<S3Object> objects=service.listObjectsInBucket(bucketName);
  assertThat(""String_Node_Str"",objects.size(),equalTo(1));
  S3Object object=objects.get(0);
  assertThat(""String_Node_Str"",object.getKey(),equalTo(file.getName()));
  assertThat(""String_Node_Str"",object.getSize(),equalTo(file.length()));
  File saved=folder.newFile(""String_Node_Str"");
  service.downloadObject(bucketName,file.getName(),saved,new NullProgressListener());
  assertThat(""String_Node_Str"",Files.computeMD5(saved),equalTo(Files.computeMD5(file)));
  service.deleteObject(bucketName,file.getName());
  objects=service.listObjectsInBucket(bucketName);
  assertThat(""String_Node_Str"",objects.size(),equalTo(0));
  assertThat(service.listObjectsInBucket(bucketName),not(hasItem(object(file.getName()))));
  service.deleteBucket(bucketName);
}","@Test public void shouldCreateDownloadAndDeleteObject() throws Exception {
  String bucketName=""String_Node_Str"" + UUID.randomUUID();
  Service service=new WebClientService(credentials);
  service.createBucket(bucketName);
  File file=folder.newFile(""String_Node_Str"");
  FileUtils.writeStringToFile(file,UUID.randomUUID().toString());
  assertFalse(""String_Node_Str"",service.objectExists(bucketName,file.getName()));
  service.createObject(bucketName,file.getName(),file,new NullProgressListener());
  assertTrue(""String_Node_Str"",service.objectExists(bucketName,file.getName()));
  assertThat(service.listObjectsInBucket(bucketName),hasItem(object(file.getName())));
  List<S3Object> objects=service.listObjectsInBucket(bucketName);
  assertThat(""String_Node_Str"",objects.size(),equalTo(1));
  S3Object object=objects.get(0);
  assertThat(""String_Node_Str"",object.getKey(),equalTo(file.getName()));
  assertThat(""String_Node_Str"",object.getSize(),equalTo(file.length()));
  File saved=folder.newFile(""String_Node_Str"");
  service.downloadObject(bucketName,file.getName(),saved,new NullProgressListener());
  assertThat(""String_Node_Str"",Files.computeMD5(saved),equalTo(Files.computeMD5(file)));
  service.deleteObject(bucketName,file.getName());
  objects=service.listObjectsInBucket(bucketName);
  assertThat(""String_Node_Str"",objects.size(),equalTo(0));
  assertThat(service.listObjectsInBucket(bucketName),not(hasItem(object(file.getName()))));
  service.deleteBucket(bucketName);
}",0.9716459197787
152871,"@Test public void shouldDownloadFileUsingPublicLink() throws Exception {
  String bucketName=""String_Node_Str"" + UUID.randomUUID();
  Service service=new WebClientService(credentials);
  service.createBucket(bucketName);
  File file=folder.newFile(""String_Node_Str"");
  FileUtils.writeStringToFile(file,UUID.randomUUID().toString());
  service.createObject(bucketName,file.getName(),file,new NullProgressListener());
  String publicUrl=service.getPublicUrl(bucketName,file.getName(),new DateTime().plusDays(5));
  System.out.println(""String_Node_Str"" + publicUrl);
  File saved=folder.newFile(""String_Node_Str"");
  InputStream input=new URL(publicUrl).openConnection().getInputStream();
  FileOutputStream output=new FileOutputStream(saved);
  IOUtils.copy(input,output);
  output.close();
  assertThat(""String_Node_Str"",Files.computeMD5(saved),equalTo(Files.computeMD5(file)));
  service.deleteObject(bucketName,file.getName());
  service.deleteBucket(bucketName);
}","@Test public void shouldDownloadFileUsingPublicLink() throws Exception {
  String bucketName=""String_Node_Str"" + UUID.randomUUID();
  Service service=new WebClientService(credentials);
  service.createBucket(bucketName);
  File file=folder.newFile(""String_Node_Str"");
  FileUtils.writeStringToFile(file,UUID.randomUUID().toString());
  service.createObject(bucketName,file.getName(),file,new NullProgressListener());
  String publicUrl=service.getPublicUrl(bucketName,file.getName(),new DateTime().plusDays(5));
  File saved=folder.newFile(""String_Node_Str"");
  InputStream input=new URL(publicUrl).openConnection().getInputStream();
  FileOutputStream output=new FileOutputStream(saved);
  IOUtils.copy(input,output);
  output.close();
  assertThat(""String_Node_Str"",Files.computeMD5(saved),equalTo(Files.computeMD5(file)));
  service.deleteObject(bucketName,file.getName());
  service.deleteBucket(bucketName);
}",0.9718234981392876
152872,"void BuildActivityResultActions(){
  ActivityResultActions=new java.util.HashMap<Integer,RequestResponseAction>();
  ActivityResultActions.put(LoadProgramRequest,new RequestResponseAction(){
    public void Run(    int ResultCode,    android.content.Intent Data){
      final String ProgName=Data.getData().getPath();
      final boolean IsLib=Data.getIntExtra(Picker.AltIndexID,0) != 0;
      final boolean LoadingMasterLibrary=IsLib && ProgName.intern() == ""String_Node_Str"";
class LoadProgram extends Global.Task {
        private static final int LOAD_STATE=0;
        private static final int LOAD_MASTER_LIBRARY=1;
        private static final int LOAD_PROG=2;
        private static final int LOAD_DONE=3;
        private int Step;
        private Global.Task Subtask;
        private LoadProgram(        int Step){
          this.Step=Step;
          Subtask=null;
        }
        public LoadProgram(){
          this(StateLoaded ? LoadingMasterLibrary ? LOAD_MASTER_LIBRARY : LOAD_PROG : LOAD_STATE);
        }
        @Override public boolean PreRun(){
switch (Step) {
case LOAD_STATE:
            Subtask=new Persistent.RestoreState(Main.this);
          break;
case LOAD_MASTER_LIBRARY:
        Subtask=new Persistent.LoadMasterLibrary(Main.this);
      break;
case LOAD_PROG:
    Subtask=new Persistent.Load(ProgName,IsLib,false,Global.Disp,Global.Buttons,Global.Calc);
  break;
}
return Subtask != null && Subtask.PreRun();
}
@Override public void BGRun(){
if (Subtask != null) {
if (Step == LOAD_STATE) {
  Subtask.BGRun();
}
 else {
  try {
    Subtask.BGRun();
  }
 catch (  Persistent.DataFormatException Failed) {
    SetStatus(-1,Failed);
  }
}
}
}
@Override public void PostRun(){
if (Subtask != null) {
Subtask.PostRun();
switch (Step) {
case LOAD_STATE:
  StateLoaded=true;
Global.StartBGTask(new LoadProgram(LoadingMasterLibrary ? LOAD_MASTER_LIBRARY : LOAD_PROG),null);
break;
case LOAD_MASTER_LIBRARY:
case LOAD_PROG:
if (TaskFailure == null) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(IsLib ? R.string.library_loaded : R.string.program_loaded),LoadingMasterLibrary ? getString(R.string.master_library) : new java.io.File(ProgName).getName()),android.widget.Toast.LENGTH_SHORT).show();
Global.StartBGTask(new Global.Task(){
@Override public void BGRun(){
  Persistent.SaveState(Main.this,IsLib);
}
}
,getString(R.string.saving));
}
 else {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.file_load_error),TaskFailure.toString()),android.widget.Toast.LENGTH_LONG).show();
}
break;
}
}
}
}
;
Global.StartBGTask(new LoadProgram(),getString(R.string.loading));
}
}
);
ActivityResultActions.put(SaveProgramRequest,new RequestResponseAction(){
public void Run(int ResultCode,android.content.Intent Data){
final String TheName=Data.getData().getPath().substring(1) + Persistent.ProgExt;
final String SaveDir=android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"" + Persistent.ProgramsDir;
Global.StartBGTask(new Global.Task(){
@Override public void BGRun(){
try {
new java.io.File(SaveDir).mkdirs();
Persistent.Save(Global.Buttons,Global.Calc,false,false,SaveDir + ""String_Node_Str"" + TheName);
}
 catch (RuntimeException Failed) {
SetStatus(-1,Failed);
}
}
@Override public void PostRun(){
if (TaskStatus == 0) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.program_saved),TheName),android.widget.Toast.LENGTH_SHORT).show();
}
 else {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.program_save_error),TaskFailure.toString()),android.widget.Toast.LENGTH_LONG).show();
}
}
}
,getString(R.string.saving));
}
}
);
ActivityResultActions.put(ImportDataRequest,new RequestResponseAction(){
public void Run(int ResultCode,android.content.Intent Data){
final String FileName=Data.getData().getPath();
try {
Global.Calc.ClearImport();
Global.Import.ImportData(FileName);
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.import_started),FileName),android.widget.Toast.LENGTH_SHORT).show();
}
 catch (Persistent.DataFormatException Failed) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.file_load_error),Failed.toString()),android.widget.Toast.LENGTH_LONG).show();
}
}
}
);
ActivityResultActions.put(ExportDataRequest,new RequestResponseAction(){
public void Run(int ResultCode,android.content.Intent Data){
switch (ResultCode) {
case android.app.Activity.RESULT_OK:
Global.Export.Close();
try {
String FileName=Data.getData().getPath();
if (!ExportAppend) {
final String SaveDir=android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"" + Persistent.DataDir;
new java.io.File(SaveDir).mkdirs();
FileName=SaveDir + FileName;
}
Global.Export.Open(FileName,ExportAppend,ExportNumbersOnly);
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.export_started),FileName),android.widget.Toast.LENGTH_SHORT).show();
}
 catch (RuntimeException Failed) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.export_error),Failed.toString()),android.widget.Toast.LENGTH_LONG).show();
}
break;
case SwitchAppend:
case SwitchSaveAs:
ExportAppend=ResultCode == SwitchAppend;
LaunchExportPicker();
break;
}
}
}
);
}","void BuildActivityResultActions(){
  ActivityResultActions=new java.util.HashMap<Integer,RequestResponseAction>();
  ActivityResultActions.put(LoadProgramRequest,new RequestResponseAction(){
    public void Run(    int ResultCode,    android.content.Intent Data){
      final String ProgName=Data.getData().getPath();
      final boolean IsLib=Data.getIntExtra(Picker.AltIndexID,0) != 0;
      final boolean LoadingMasterLibrary=IsLib && ProgName.intern() == ""String_Node_Str"";
class LoadProgram extends Global.Task {
        private static final int LOAD_STATE=0;
        private static final int LOAD_MASTER_LIBRARY=1;
        private static final int LOAD_PROG=2;
        private static final int LOAD_DONE=3;
        private int Step;
        private Global.Task Subtask;
        private LoadProgram(        int Step){
          this.Step=Step;
          Subtask=null;
        }
        public LoadProgram(){
          this(StateLoaded ? LoadingMasterLibrary ? LOAD_MASTER_LIBRARY : LOAD_PROG : LOAD_STATE);
        }
        @Override public boolean PreRun(){
switch (Step) {
case LOAD_STATE:
            Subtask=new Persistent.RestoreState(Main.this);
          break;
case LOAD_MASTER_LIBRARY:
        Subtask=new Persistent.LoadMasterLibrary(Main.this);
      break;
case LOAD_PROG:
    Subtask=new Persistent.Load(ProgName,IsLib,false,Global.Disp,Global.Buttons,Global.Calc);
  break;
}
return Subtask != null && Subtask.PreRun();
}
@Override public void BGRun(){
if (Subtask != null) {
if (Step == LOAD_STATE) {
  Subtask.BGRun();
}
 else {
  try {
    Subtask.BGRun();
    if (Subtask.TaskFailure != null) {
      SetStatus(-1,Subtask.TaskFailure);
    }
  }
 catch (  Persistent.DataFormatException Failed) {
    SetStatus(-1,Failed);
  }
}
}
}
@Override public void PostRun(){
if (Subtask != null) {
Subtask.PostRun();
switch (Step) {
case LOAD_STATE:
  StateLoaded=true;
Global.StartBGTask(new LoadProgram(LoadingMasterLibrary ? LOAD_MASTER_LIBRARY : LOAD_PROG),null);
break;
case LOAD_MASTER_LIBRARY:
case LOAD_PROG:
if (TaskFailure == null) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(IsLib ? R.string.library_loaded : R.string.program_loaded),LoadingMasterLibrary ? getString(R.string.master_library) : new java.io.File(ProgName).getName()),android.widget.Toast.LENGTH_SHORT).show();
Global.StartBGTask(new Global.Task(){
@Override public void BGRun(){
  Persistent.SaveState(Main.this,IsLib);
}
}
,getString(R.string.saving));
}
 else {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.file_load_error),TaskFailure.toString()),android.widget.Toast.LENGTH_LONG).show();
}
break;
}
}
}
}
;
Global.StartBGTask(new LoadProgram(),getString(R.string.loading));
}
}
);
ActivityResultActions.put(SaveProgramRequest,new RequestResponseAction(){
public void Run(int ResultCode,android.content.Intent Data){
final String TheName=Data.getData().getPath().substring(1) + Persistent.ProgExt;
final String SaveDir=android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"" + Persistent.ProgramsDir;
Global.StartBGTask(new Global.Task(){
@Override public void BGRun(){
try {
new java.io.File(SaveDir).mkdirs();
Persistent.Save(Global.Buttons,Global.Calc,false,false,SaveDir + ""String_Node_Str"" + TheName);
}
 catch (RuntimeException Failed) {
SetStatus(-1,Failed);
}
}
@Override public void PostRun(){
if (TaskStatus == 0) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.program_saved),TheName),android.widget.Toast.LENGTH_SHORT).show();
}
 else {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.program_save_error),TaskFailure.toString()),android.widget.Toast.LENGTH_LONG).show();
}
}
}
,getString(R.string.saving));
}
}
);
ActivityResultActions.put(ImportDataRequest,new RequestResponseAction(){
public void Run(int ResultCode,android.content.Intent Data){
final String FileName=Data.getData().getPath();
try {
Global.Calc.ClearImport();
Global.Import.ImportData(FileName);
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.import_started),FileName),android.widget.Toast.LENGTH_SHORT).show();
}
 catch (Persistent.DataFormatException Failed) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.file_load_error),Failed.toString()),android.widget.Toast.LENGTH_LONG).show();
}
}
}
);
ActivityResultActions.put(ExportDataRequest,new RequestResponseAction(){
public void Run(int ResultCode,android.content.Intent Data){
switch (ResultCode) {
case android.app.Activity.RESULT_OK:
Global.Export.Close();
try {
String FileName=Data.getData().getPath();
if (!ExportAppend) {
final String SaveDir=android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"" + Persistent.DataDir;
new java.io.File(SaveDir).mkdirs();
FileName=SaveDir + FileName;
}
Global.Export.Open(FileName,ExportAppend,ExportNumbersOnly);
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.export_started),FileName),android.widget.Toast.LENGTH_SHORT).show();
}
 catch (RuntimeException Failed) {
android.widget.Toast.makeText(Main.this,String.format(Global.StdLocale,getString(R.string.export_error),Failed.toString()),android.widget.Toast.LENGTH_LONG).show();
}
break;
case SwitchAppend:
case SwitchSaveAs:
ExportAppend=ResultCode == SwitchAppend;
LaunchExportPicker();
break;
}
}
}
);
}",0.9921173235563704
152873,"public static void RestoreState(android.content.Context ctx){
  boolean RestoredLib=false;
  for (boolean LoadingLib=false; ; ) {
    final String StateFile=ctx.getFilesDir().getAbsolutePath() + ""String_Node_Str"" + (LoadingLib ? SavedLibName : SavedStateName);
    if (new java.io.File(StateFile).exists()) {
      try {
        Load(StateFile,LoadingLib,!LoadingLib,Global.Disp,Global.Label,Global.Buttons,Global.Calc);
        if (LoadingLib) {
          RestoredLib=true;
        }
      }
 catch (      DataFormatException Bad) {
        System.err.printf(""String_Node_Str"",StateFile,Bad.toString());
      }
    }
    if (LoadingLib)     break;
    LoadingLib=true;
  }
  if (!RestoredLib) {
    LoadMasterLibrary(ctx);
  }
}","public static void RestoreState(android.content.Context ctx){
  boolean RestoredLib=false;
  for (boolean LoadingLib=true; ; ) {
    final String StateFile=ctx.getFilesDir().getAbsolutePath() + ""String_Node_Str"" + (LoadingLib ? SavedLibName : SavedStateName);
    if (new java.io.File(StateFile).exists()) {
      try {
        Load(StateFile,LoadingLib,!LoadingLib,Global.Disp,Global.Label,Global.Buttons,Global.Calc);
        if (LoadingLib) {
          RestoredLib=true;
        }
      }
 catch (      DataFormatException Bad) {
        System.err.printf(""String_Node_Str"",StateFile,Bad.toString());
      }
    }
    if (!LoadingLib)     break;
    LoadingLib=false;
  }
  if (!RestoredLib) {
    LoadMasterLibrary(ctx);
    SaveState(ctx,true);
  }
}",0.9730820995962316
152874,"public static void SaveState(android.content.Context ctx,boolean SaveLib){
  ResetState(ctx);
  java.io.FileOutputStream CurSave;
  try {
    CurSave=ctx.openFileOutput(SaveLib ? SavedLibName : SavedStateName,ctx.MODE_WORLD_READABLE);
  }
 catch (  java.io.FileNotFoundException Eh) {
    throw new RuntimeException(""String_Node_Str"" + Eh.toString());
  }
  Save(Global.Buttons,Global.Calc,SaveLib,!SaveLib,CurSave);
  try {
    CurSave.flush();
    CurSave.close();
  }
 catch (  java.io.IOException Failed) {
    throw new RuntimeException(""String_Node_Str"" + Failed.toString());
  }
}","public static void SaveState(android.content.Context ctx,boolean SaveLib){
  java.io.FileOutputStream CurSave;
  try {
    final String StateName=SaveLib ? SavedLibName : SavedStateName;
    ctx.deleteFile(StateName);
    CurSave=ctx.openFileOutput(StateName,ctx.MODE_WORLD_READABLE);
  }
 catch (  java.io.FileNotFoundException Eh) {
    throw new RuntimeException(""String_Node_Str"" + Eh.toString());
  }
  Save(Global.Buttons,Global.Calc,SaveLib,!SaveLib,CurSave);
  try {
    CurSave.flush();
    CurSave.close();
  }
 catch (  java.io.IOException Failed) {
    throw new RuntimeException(""String_Node_Str"" + Failed.toString());
  }
}",0.8790849673202614
152875,"int GetUnitOp(boolean Executing){
  int Result=-1;
  final int NextByte=GetProg(Executing);
  if (NextByte >= 0) {
    boolean OK;
    if (NextByte < 10) {
      Result=NextByte;
      OK=true;
    }
 else     if (NextByte == 40) {
      final int Reg=GetProg(Executing);
      if (Reg >= 0 && Reg < MaxMemories) {
        Result=(int)Memory[Reg];
        OK=Result >= 0 && Result < 10;
        if (!OK) {
          Result=-1;
        }
      }
 else {
        OK=false;
      }
    }
 else {
      OK=false;
    }
    if (!OK) {
      SetErrorState();
      StopProgram();
    }
  }
  return Result;
}","int GetUnitOp(boolean Executing){
  int Result=-1;
  final int NextByte=GetProg(Executing);
  if (NextByte >= 0) {
    boolean OK;
    if (NextByte < 10) {
      Result=NextByte;
      OK=true;
    }
 else     if (NextByte == 40) {
      final int Reg=GetProg(Executing);
      if (Reg >= 0 && Reg < MaxMemories) {
        Result=(int)Memory[Reg];
        OK=Result >= 0 && Result < 10;
        if (!OK) {
          Result=-1;
        }
      }
 else {
        OK=false;
      }
    }
 else {
      OK=false;
    }
    if (Executing && !OK) {
      SetErrorState();
      StopProgram();
    }
  }
  return Result;
}",0.989317995069844
152876,"public void Int(){
  Enter();
  final double IntPart=Math.floor(Math.abs(X));
  if (InvState) {
    SetX((Math.abs(X) - IntPart) * Math.signum(X));
  }
 else {
    SetX(IntPart * Math.signum(X));
  }
}","public void Int(){
  Enter();
  final double RoundFactor=10e+13;
  final double IntPart=Math.floor(Math.abs(Math.rint(X * RoundFactor) / RoundFactor));
  if (InvState) {
    SetX((Math.abs(X) - IntPart) * Math.signum(X));
  }
 else {
    SetX(IntPart * Math.signum(X));
  }
}",0.8403361344537815
152877,"private Method findServiceReferenceMethod(Class<?> clazz,String methodName){
  Method method=org.springframework.util.ReflectionUtils.findMethod(clazz,bindMethod,new Class[]{ServiceReference.class});
  if (method != null) {
    org.springframework.util.ReflectionUtils.makeAccessible(method);
  }
  return method;
}","private Method findServiceReferenceMethod(Class<?> clazz,String methodName){
  Method method=org.springframework.util.ReflectionUtils.findMethod(clazz,methodName,new Class[]{ServiceReference.class});
  if (method != null) {
    org.springframework.util.ReflectionUtils.makeAccessible(method);
  }
  return method;
}",0.9682539682539684
152878,"@Override protected void onSetUp() throws Exception {
  System.out.println(file.toURI());
  startedBundles.clear();
  failedBundles.clear();
  reg1=bundleContext.registerService(BlueprintListener.class.getName(),listener,null);
  String[] topics=new String[]{""String_Node_Str""};
  Dictionary<String,Object> prop=new Hashtable<String,Object>();
  prop.put(EventConstants.EVENT_TOPIC,topics);
  reg2=bundleContext.registerService(EventHandler.class.getName(),handler,prop);
}","@Override protected void onSetUp() throws Exception {
  startedBundles.clear();
  failedBundles.clear();
  reg1=bundleContext.registerService(BlueprintListener.class.getName(),listener,null);
  String[] topics=new String[]{""String_Node_Str""};
  Dictionary<String,Object> prop=new Hashtable<String,Object>();
  prop.put(EventConstants.EVENT_TOPIC,topics);
  reg2=bundleContext.registerService(EventHandler.class.getName(),handler,prop);
}",0.9604395604395604
152879,"/** 
 * Constructs a new <code>SimpleMethodInjectionMetadata</code> instance.
 * @param definition
 */
public SimpleMethodInjectionMetadata(BeanDefinition definition){
  this.name=definition.getFactoryMethodName();
  params=(StringUtils.hasText(definition.getFactoryBeanName()) ? Collections.<ParameterSpecification>emptyList() : MetadataUtils.getParameterList(definition.getConstructorArgumentValues()));
}","/** 
 * Constructs a new <code>SimpleMethodInjectionMetadata</code> instance.
 * @param definition
 */
public SimpleMethodInjectionMetadata(BeanDefinition definition){
  this.name=definition.getFactoryMethodName();
  params=MetadataUtils.getParameterList(definition.getConstructorArgumentValues());
}",0.6591230551626591
152880,"public static Object staticMethod(Long arg1,String arg2,Integer arg3){
  return arg3;
}","public static Object staticMethod(){
  return new Object();
}",0.6621621621621622
152881,"public void run(){
  if (context.isActive()) {
    preProcessClose(context);
    try {
      context.close();
    }
  finally {
      postProcessClose(context);
    }
  }
}","public void run(){
  closeApplicationContext(context);
}",0.3596491228070175
152882,"/** 
 * Closing an application context is a potentially long-running activity, however, we *have* to do it synchronously during the event process as the BundleContext object is not valid once we return from this method.
 * @param bundle
 */
protected void maybeCloseApplicationContextFor(Bundle bundle){
  final ConfigurableOsgiBundleApplicationContext context=(ConfigurableOsgiBundleApplicationContext)managedContexts.remove(new Long(bundle.getBundleId()));
  if (context == null) {
    return;
  }
  RunnableTimedExecution.execute(new Runnable(){
    private final String toString=""String_Node_Str"" + context.getDisplayName();
    public void run(){
      if (context.isActive()) {
        preProcessClose(context);
        try {
          context.close();
        }
  finally {
          postProcessClose(context);
        }
      }
    }
    public String toString(){
      return toString;
    }
  }
,extenderConfiguration.getShutdownWaitTime(),shutdownTaskExecutor);
}","/** 
 * Closing an application context is a potentially long-running activity, however, we *have* to do it synchronously during the event process as the BundleContext object is not valid once we return from this method.
 * @param bundle
 */
protected void maybeCloseApplicationContextFor(Bundle bundle){
  final ConfigurableOsgiBundleApplicationContext context=(ConfigurableOsgiBundleApplicationContext)managedContexts.remove(new Long(bundle.getBundleId()));
  if (context == null) {
    return;
  }
  RunnableTimedExecution.execute(new Runnable(){
    private final String toString=""String_Node_Str"" + context.getDisplayName();
    public void run(){
      closeApplicationContext(context);
    }
    public String toString(){
      return toString;
    }
  }
,extenderConfiguration.getShutdownWaitTime(),shutdownTaskExecutor);
}",0.8957871396895787
152883,"/** 
 * Shutdown the extender and all bundled managed by it. Shutdown of contexts is in the topological order of the dependency graph formed by the service references.
 */
protected void shutdown(){
synchronized (monitor) {
    if (isClosed)     return;
 else     isClosed=true;
  }
  log.info(""String_Node_Str"" + bundleContext.getBundle().getSymbolicName() + ""String_Node_Str""+ extenderVersion+ ""String_Node_Str"");
  stopTimer();
  if (contextListener != null) {
    bundleContext.removeBundleListener(contextListener);
    contextListener=null;
  }
  if (nsListener != null) {
    bundleContext.removeBundleListener(nsListener);
    nsListener=null;
  }
  Bundle[] bundles=new Bundle[managedContexts.size()];
  int i=0;
  for (Iterator it=managedContexts.values().iterator(); it.hasNext(); ) {
    ConfigurableOsgiBundleApplicationContext context=(ConfigurableOsgiBundleApplicationContext)it.next();
    bundles[i++]=context.getBundle();
  }
  bundles=shutdownDependencySorter.computeServiceDependencyGraph(bundles);
  boolean debug=log.isDebugEnabled();
  StringBuffer buffer=new StringBuffer();
  if (debug) {
    buffer.append(""String_Node_Str"");
    for (i=0; i < bundles.length; i++) {
      buffer.append(""String_Node_Str"" + bundles[i].getSymbolicName() + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    log.debug(buffer);
  }
  final List taskList=new ArrayList(managedContexts.size());
  final List closedContexts=Collections.synchronizedList(new ArrayList());
  final Object[] contextClosingDown=new Object[1];
  for (i=0; i < bundles.length; i++) {
    Long id=new Long(bundles[i].getBundleId());
    final ConfigurableOsgiBundleApplicationContext context=(ConfigurableOsgiBundleApplicationContext)managedContexts.get(id);
    if (context != null) {
      closedContexts.add(context);
      taskList.add(new Runnable(){
        private final String toString=""String_Node_Str"" + context.getDisplayName();
        public void run(){
          contextClosingDown[0]=context;
          closedContexts.remove(context);
          if (log.isDebugEnabled())           log.debug(""String_Node_Str"" + context.getDisplayName());
          context.close();
        }
        public String toString(){
          return toString;
        }
      }
);
    }
  }
  final Runnable[] tasks=(Runnable[])taskList.toArray(new Runnable[taskList.size()]);
  for (int j=0; j < tasks.length; j++) {
    if (RunnableTimedExecution.execute(tasks[j],extenderConfiguration.getShutdownWaitTime(),shutdownTaskExecutor)) {
      if (debug) {
        log.debug(contextClosingDown[0] + ""String_Node_Str"");
      }
    }
  }
  this.managedContexts.clear();
  nsManager.destroy();
  if (applicationListeners != null) {
    applicationListeners=null;
    try {
      applicationListenersCleaner.destroy();
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"",ex);
    }
  }
  if (multicaster != null) {
    multicaster.removeAllListeners();
    multicaster=null;
  }
  stopTaskExecutor();
  extenderConfiguration.destroy();
}","/** 
 * Shutdown the extender and all bundled managed by it. Shutdown of contexts is in the topological order of the dependency graph formed by the service references.
 */
protected void shutdown(){
synchronized (monitor) {
    if (isClosed)     return;
 else     isClosed=true;
  }
  log.info(""String_Node_Str"" + bundleContext.getBundle().getSymbolicName() + ""String_Node_Str""+ extenderVersion+ ""String_Node_Str"");
  stopTimer();
  if (contextListener != null) {
    bundleContext.removeBundleListener(contextListener);
    contextListener=null;
  }
  if (nsListener != null) {
    bundleContext.removeBundleListener(nsListener);
    nsListener=null;
  }
  Bundle[] bundles=new Bundle[managedContexts.size()];
  int i=0;
  for (Iterator it=managedContexts.values().iterator(); it.hasNext(); ) {
    ConfigurableOsgiBundleApplicationContext context=(ConfigurableOsgiBundleApplicationContext)it.next();
    bundles[i++]=context.getBundle();
  }
  bundles=shutdownDependencySorter.computeServiceDependencyGraph(bundles);
  boolean debug=log.isDebugEnabled();
  StringBuffer buffer=new StringBuffer();
  if (debug) {
    buffer.append(""String_Node_Str"");
    for (i=0; i < bundles.length; i++) {
      buffer.append(""String_Node_Str"" + bundles[i].getSymbolicName() + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    log.debug(buffer);
  }
  final List taskList=new ArrayList(managedContexts.size());
  final List closedContexts=Collections.synchronizedList(new ArrayList());
  final Object[] contextClosingDown=new Object[1];
  for (i=0; i < bundles.length; i++) {
    Long id=new Long(bundles[i].getBundleId());
    final ConfigurableOsgiBundleApplicationContext context=(ConfigurableOsgiBundleApplicationContext)managedContexts.get(id);
    if (context != null) {
      closedContexts.add(context);
      taskList.add(new Runnable(){
        private final String toString=""String_Node_Str"" + context.getDisplayName();
        public void run(){
          contextClosingDown[0]=context;
          closedContexts.remove(context);
          closeApplicationContext(context);
        }
        public String toString(){
          return toString;
        }
      }
);
    }
  }
  final Runnable[] tasks=(Runnable[])taskList.toArray(new Runnable[taskList.size()]);
  for (int j=0; j < tasks.length; j++) {
    if (RunnableTimedExecution.execute(tasks[j],extenderConfiguration.getShutdownWaitTime(),shutdownTaskExecutor)) {
      if (debug) {
        log.debug(contextClosingDown[0] + ""String_Node_Str"");
      }
    }
  }
  this.managedContexts.clear();
  nsManager.destroy();
  if (applicationListeners != null) {
    applicationListeners=null;
    try {
      applicationListenersCleaner.destroy();
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"",ex);
    }
  }
  if (multicaster != null) {
    multicaster.removeAllListeners();
    multicaster=null;
  }
  stopTaskExecutor();
  extenderConfiguration.destroy();
}",0.9752508361204012
152884,"public void testModuleContextListener() throws Exception {
  final List<Bundle> contexts=new ArrayList<Bundle>();
  ModuleContextListener listener=new ModuleContextListener(){
    public void contextCreated(    Bundle bundle){
      addToList(bundle);
    }
    public void contextCreationFailed(    Bundle bundle,    Throwable ex){
      addToList(bundle);
    }
    private void addToList(    Bundle bundle){
synchronized (contexts) {
        contexts.add(bundle);
        contexts.notify();
      }
    }
  }
;
  installTestBundle();
  bundleContext.registerService(ModuleContextListener.class.getName(),listener,new Hashtable());
  testBundle.start();
synchronized (contexts) {
    contexts.wait(2 * 1000 * 60);
    assertFalse(""String_Node_Str"",contexts.isEmpty());
  }
}","public void testModuleContextListener() throws Exception {
  final List<Bundle> contexts=new ArrayList<Bundle>();
  ModuleContextListener listener=new ModuleContextListener(){
    public void contextCreated(    Bundle bundle){
      addToList(bundle);
    }
    public void contextCreationFailed(    Bundle bundle,    Throwable ex){
      addToList(bundle);
    }
    private void addToList(    Bundle bundle){
synchronized (contexts) {
        contexts.add(bundle);
        contexts.notify();
      }
    }
  }
;
  installTestBundle();
  bundleContext.registerService(ModuleContextListener.class.getName(),listener,null);
  testBundle.start();
synchronized (contexts) {
    contexts.wait(2 * 1000 * 60);
    assertFalse(""String_Node_Str"",contexts.isEmpty());
  }
}",0.9889682024659312
152885,"public void stop(BundleContext context) throws Exception {
  for (int i=CHAIN.length - 1; i < 0; i--) {
    CHAIN[i].stop(context);
  }
}","public void stop(BundleContext context) throws Exception {
  for (int i=CHAIN.length - 1; i >= 0; i--) {
    CHAIN[i].stop(context);
  }
}",0.9890909090909092
152886,"/** 
 * Initialise adapter. Determine custom methods and do validation.
 */
private void initialize(){
  Class clazz=(target == null ? beanFactory.getType(targetBeanName) : target.getClass());
  isLifecycleListener=OsgiServiceLifecycleListener.class.isAssignableFrom(clazz);
  if (isLifecycleListener)   if (log.isDebugEnabled())   log.debug(clazz.getName() + ""String_Node_Str"");
  bindMethods=CustomListenerAdapterUtils.determineCustomMethods(clazz,bindMethod);
  unbindMethods=CustomListenerAdapterUtils.determineCustomMethods(clazz,unbindMethod);
  if (StringUtils.hasText(bindMethod)) {
    bindReference=org.springframework.util.ReflectionUtils.findMethod(clazz,bindMethod,new Class[]{ServiceReference.class});
    if (bindReference != null)     org.springframework.util.ReflectionUtils.makeAccessible(bindReference);
  }
  if (StringUtils.hasText(unbindMethod)) {
    unbindReference=org.springframework.util.ReflectionUtils.findMethod(clazz,unbindMethod,new Class[]{ServiceReference.class});
    if (unbindReference != null)     org.springframework.util.ReflectionUtils.makeAccessible(unbindReference);
  }
  if (!isLifecycleListener && (bindMethods.isEmpty() && unbindMethods.isEmpty() && bindReference == null && unbindReference == null))   throw new IllegalArgumentException(""String_Node_Str"" + OsgiServiceLifecycleListener.class.getName() + ""String_Node_Str"");
}","/** 
 * Initialise adapter. Determine custom methods and do validation.
 */
private void initialize(){
  Class clazz=(target == null ? beanFactory.getType(targetBeanName) : target.getClass());
  isLifecycleListener=OsgiServiceLifecycleListener.class.isAssignableFrom(clazz);
  if (isLifecycleListener)   if (log.isDebugEnabled())   log.debug(clazz.getName() + ""String_Node_Str"");
  bindMethods=CustomListenerAdapterUtils.determineCustomMethods(clazz,bindMethod);
  if (StringUtils.hasText(bindMethod)) {
    bindReference=org.springframework.util.ReflectionUtils.findMethod(clazz,bindMethod,new Class[]{ServiceReference.class});
    if (bindReference != null) {
      org.springframework.util.ReflectionUtils.makeAccessible(bindReference);
    }
 else     if (bindMethods.isEmpty()) {
      String beanName=(target == null ? ""String_Node_Str"" : ""String_Node_Str"" + targetBeanName + ""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"" + bindMethod + ""String_Node_Str""+ beanName+ ""String_Node_Str""+ clazz);
    }
  }
  unbindMethods=CustomListenerAdapterUtils.determineCustomMethods(clazz,unbindMethod);
  if (StringUtils.hasText(unbindMethod)) {
    unbindReference=org.springframework.util.ReflectionUtils.findMethod(clazz,unbindMethod,new Class[]{ServiceReference.class});
    if (unbindReference != null) {
      org.springframework.util.ReflectionUtils.makeAccessible(unbindReference);
    }
 else     if (unbindMethods.isEmpty()) {
      String beanName=(target == null ? ""String_Node_Str"" : ""String_Node_Str"" + targetBeanName + ""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"" + unbindMethod + ""String_Node_Str""+ beanName+ ""String_Node_Str""+ clazz);
    }
  }
  if (!isLifecycleListener && (bindMethods.isEmpty() && unbindMethods.isEmpty() && bindReference == null && unbindReference == null))   throw new IllegalArgumentException(""String_Node_Str"" + OsgiServiceLifecycleListener.class.getName() + ""String_Node_Str"");
}",0.592128801431127
152887,"/** 
 * {@inheritDoc}<p/> Converts the given value to a ServiceReference.
 */
public void setValue(Object value){
  if (value == null) {
    super.setValue(null);
    return;
  }
  if (value instanceof ImportedOsgiServiceProxy) {
    super.setValue(new ServiceReferenceDelegate((ImportedOsgiServiceProxy)value));
    return;
  }
  if (value instanceof ServiceReference) {
    super.setValue(value);
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ImportedOsgiServiceProxy.class.getName() + ""String_Node_Str""+ value.getClass());
}","/** 
 * {@inheritDoc}<p/> Converts the given value to a ServiceReference.
 */
public void setValue(Object value){
  if (value == null) {
    super.setValue(null);
    return;
  }
  if (value instanceof ImportedOsgiServiceProxy) {
    ImportedOsgiServiceProxy referenceProxy=(ImportedOsgiServiceProxy)value;
    super.setValue(referenceProxy.getServiceReference().getTargetServiceReference());
    return;
  }
  if (value instanceof ServiceReference) {
    super.setValue(value);
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ImportedOsgiServiceProxy.class.getName() + ""String_Node_Str""+ value.getClass());
}",0.8468013468013468
152888,"/** 
 * Builds a component metadata from the given bean definition.
 * @param name bean name
 * @param beanDefinition
 * @return
 */
ComponentMetadata buildMetadata(String name,BeanDefinition beanDefinition){
  Object metadata=beanDefinition.getAttribute(COMPONENT_METADATA_ATTRIBUTE);
  if (metadata instanceof ComponentMetadata)   return (ComponentMetadata)metadata;
  if (name == null) {
    name=(String)beanDefinition.getAttribute(COMPONENT_NAME);
  }
  if (isServiceExporter(beanDefinition)) {
    return new SpringServiceExportComponentMetadata(name,beanDefinition);
  }
  if (isServiceImporter(beanDefinition)) {
    return new SpringServiceReferenceComponentMetadata(name,beanDefinition);
  }
  return new SpringLocalComponentMetadata(name,beanDefinition);
}","/** 
 * Builds a component metadata from the given bean definition.
 * @param name bean name
 * @param beanDefinition
 * @return
 */
ComponentMetadata buildMetadata(String name,BeanDefinition beanDefinition){
  Object metadata=beanDefinition.getAttribute(COMPONENT_METADATA_ATTRIBUTE);
  if (metadata instanceof ComponentMetadata)   return (ComponentMetadata)metadata;
  if (name == null) {
    name=(String)beanDefinition.getAttribute(COMPONENT_NAME);
  }
  if (isServiceExporter(beanDefinition)) {
    return new SpringServiceExportComponentMetadata(name,beanDefinition);
  }
  if (isSingleServiceImporter(beanDefinition)) {
    return new SpringUnaryServiceReferenceComponentMetadata(name,beanDefinition);
  }
  if (isCollectionImporter(beanDefinition)) {
    return new SpringCollectionBasedServiceReferenceComponentMetadata(name,beanDefinition);
  }
  return new SpringLocalComponentMetadata(name,beanDefinition);
}",0.9093064611736812
152889,"/** 
 * Builds a component metadata from the given bean definition.
 * @param name bean name
 * @param beanDefinition
 * @return
 */
ComponentMetadata buildMetadata(String name,BeanDefinition beanDefinition){
  Object metadata=beanDefinition.getAttribute(COMPONENT_METADATA_ATTRIBUTE);
  if (metadata instanceof ComponentMetadata)   return (ComponentMetadata)metadata;
  if (name == null) {
    name=(String)beanDefinition.getAttribute(COMPONENT_NAME);
  }
  if (isServiceExporter(beanDefinition)) {
    return new SpringServiceExportComponentMetadata(beanDefinition);
  }
  if (isServiceImporter(beanDefinition)) {
    return new SpringServiceReferenceComponentMetadata(beanDefinition);
  }
  return new SpringLocalComponentMetadata(name,beanDefinition);
}","/** 
 * Builds a component metadata from the given bean definition.
 * @param name bean name
 * @param beanDefinition
 * @return
 */
ComponentMetadata buildMetadata(String name,BeanDefinition beanDefinition){
  Object metadata=beanDefinition.getAttribute(COMPONENT_METADATA_ATTRIBUTE);
  if (metadata instanceof ComponentMetadata)   return (ComponentMetadata)metadata;
  if (name == null) {
    name=(String)beanDefinition.getAttribute(COMPONENT_NAME);
  }
  if (isServiceExporter(beanDefinition)) {
    return new SpringServiceExportComponentMetadata(name,beanDefinition);
  }
  if (isServiceImporter(beanDefinition)) {
    return new SpringServiceReferenceComponentMetadata(name,beanDefinition);
  }
  return new SpringLocalComponentMetadata(name,beanDefinition);
}",0.9934383202099738
152890,"/** 
 * Constructs a new <code>SpringServiceExportComponentMetadata</code> instance.
 * @param definition bean definition
 */
public SpringServiceExportComponentMetadata(BeanDefinition definition){
  super(null,definition);
  MutablePropertyValues propertyValues=definition.getPropertyValues();
}","/** 
 * Constructs a new <code>SpringServiceExportComponentMetadata</code> instance.
 * @param name bean name
 * @param definition bean definition
 */
public SpringServiceExportComponentMetadata(String name,BeanDefinition definition){
  super(name,definition);
  MutablePropertyValues propertyValues=definition.getPropertyValues();
}",0.931637519872814
152891,"/** 
 * Constructs a new <code>SpringServiceReferenceComponentMetadata</code> instance.
 * @param definition bean definition
 */
public SpringServiceReferenceComponentMetadata(BeanDefinition definition){
  super(null,definition);
}","/** 
 * Constructs a new <code>SpringServiceReferenceComponentMetadata</code> instance.
 * @param name bean name
 * @param definition bean definition
 */
public SpringServiceReferenceComponentMetadata(String name,BeanDefinition definition){
  super(name,definition);
  MutablePropertyValues pvs=beanDefinition.getPropertyValues();
  componentName=(String)MetadataUtils.getValue(pvs,SERVICE_NAME_PROP);
  filter=(String)MetadataUtils.getValue(pvs,FILTER_PROP);
  Cardinality cardinality=(Cardinality)MetadataUtils.getValue(pvs,CARDINALITY_PROP);
  availability=(cardinality == null || cardinality.isMandatory() ? ServiceReferenceComponentMetadata.MANDATORY_AVAILABILITY : ServiceReferenceComponentMetadata.OPTIONAL_AVAILABILITY);
  Object value=MetadataUtils.getValue(pvs,INTERFACES_PROP);
  Set<String> intfs=new LinkedHashSet<String>(4);
  if (value instanceof String) {
    intfs.add((String)value);
  }
 else {
    if (value instanceof Collection) {
      Collection values=(Collection)value;
      for (Iterator iterator=values.iterator(); iterator.hasNext(); ) {
        TypedStringValue tsv=(TypedStringValue)iterator.next();
        intfs.add(tsv.getValue());
      }
    }
  }
  interfaces=Collections.unmodifiableSet(intfs);
  List<BindingListenerMetadata> foundListeners=new ArrayList<BindingListenerMetadata>(4);
  List<? extends AbstractBeanDefinition> listenerDefinitions=(List<? extends AbstractBeanDefinition>)MetadataUtils.getValue(pvs,LISTENERS_PROP);
  if (listenerDefinitions != null) {
    for (    AbstractBeanDefinition beanDef : listenerDefinitions) {
      foundListeners.add(new SimpleBindingListenerMetadata(beanDef));
    }
  }
  listeners=Collections.unmodifiableCollection(foundListeners);
}",0.2337262942080984
152892,"public String getComponentName(){
  throw new UnsupportedOperationException();
}","public String getComponentName(){
  return componentName;
}",0.6762589928057554
152893,"public String getFilter(){
  return (String)MetadataUtils.getValue(beanDefinition.getPropertyValues(),FILTER_PROP);
}","public String getFilter(){
  return filter;
}",0.5432098765432098
152894,"public Collection<BindingListenerMetadata> getBindingListeners(){
  throw new UnsupportedOperationException();
}","public Collection<BindingListenerMetadata> getBindingListeners(){
  return listeners;
}",0.7738693467336684
152895,"public Set<String> getInterfaceNames(){
  Class<?>[] classes=(Class<?>[])MetadataUtils.getValue(beanDefinition.getPropertyValues(),INTERFACES_PROP);
  if (ObjectUtils.isEmpty(classes))   return Collections.<String>emptySet();
  Set<String> strings=new LinkedHashSet<String>(classes.length);
  for (int i=0; i < classes.length; i++) {
    strings.add(classes[i].getName());
  }
  return strings;
}","public Set<String> getInterfaceNames(){
  return interfaces;
}",0.2532751091703056
152896,"public int getServiceAvailabilitySpecification(){
  Cardinality cardinality=(Cardinality)MetadataUtils.getValue(beanDefinition.getPropertyValues(),CARDINALITY_PROP);
  return (cardinality == null || cardinality.isMandatory() ? ServiceReferenceComponentMetadata.MANDATORY_AVAILABILITY : ServiceReferenceComponentMetadata.OPTIONAL_AVAILABILITY);
}","public int getServiceAvailabilitySpecification(){
  return availability;
}",0.3293556085918854
152897,"/** 
 * Creates the equivalent value for the given Spring metadata. Since Spring's metadata is a superset of the Blueprint spec, not all Spring types are supported.
 * @param metadata
 * @return
 */
static Value buildValue(Object metadata){
  if (metadata instanceof BeanMetadataElement) {
    if (metadata instanceof RuntimeBeanReference) {
      RuntimeBeanReference reference=(RuntimeBeanReference)metadata;
      return new SimpleReferenceValue(reference.getBeanName());
    }
    if (metadata instanceof RuntimeBeanNameReference) {
      RuntimeBeanNameReference reference=(RuntimeBeanNameReference)metadata;
      return new SimpleReferenceNameValue(reference.getBeanName());
    }
    if (metadata instanceof TypedStringValue) {
      TypedStringValue typedString=(TypedStringValue)metadata;
      return (typedString.getValue() == null ? NullValue.NULL : new SimpleTypedStringValue(typedString));
    }
    if (metadata instanceof BeanDefinition) {
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(null,(BeanDefinition)metadata);
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof BeanDefinitionHolder) {
      BeanDefinitionHolder holder=(BeanDefinitionHolder)metadata;
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(null,holder.getBeanDefinition());
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof ManagedList) {
      ManagedList list=(ManagedList)metadata;
      Value[] values=new Value[list.size()];
      for (int i=0; i < values.length; i++) {
        Object element=list.get(i);
        values[i]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (list instanceof TempManagedList) {
        defaultType=((TempManagedList)list).getDefaultTypeClassName();
      }
      return new SimpleListValue(values,defaultType);
    }
    if (metadata instanceof ManagedSet) {
      ManagedSet set=(ManagedSet)metadata;
      Value[] values=new Value[set.size()];
      int i=0;
      for (      Object element : set) {
        values[i++]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (set instanceof TempManagedSet) {
        defaultType=((TempManagedSet)set).getDefaultTypeClassName();
      }
      return new SimpleSetValue(values,defaultType);
    }
    if (metadata instanceof ManagedMap) {
      ManagedMap map=(ManagedMap)metadata;
      Value[] keys=new Value[map.size()];
      Value[] values=new Value[map.size()];
      int i=0;
      Set<Map.Entry> entrySet=(Set<Map.Entry>)map.entrySet();
      for (Iterator<Map.Entry> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry next=iterator.next();
        keys[i]=ValueFactory.buildValue(next.getKey());
        values[i]=ValueFactory.buildValue(next.getValue());
        i++;
      }
      String defaultKeyType=null, defaultValueType=null;
      if (map instanceof TempManagedMap) {
        defaultKeyType=((TempManagedMap)map).getKeyDefaultTypeClassName();
        defaultValueType=((TempManagedMap)map).getValueDefaultTypeClassName();
      }
      return new SimpleMapValue(keys,defaultKeyType,values,defaultValueType);
    }
    if (metadata instanceof ManagedProperties) {
      ManagedProperties properties=(ManagedProperties)metadata;
      Properties props=new Properties();
      Set<Map.Entry<Object,Object>> entrySet=(Set<Map.Entry<Object,Object>>)properties.entrySet();
      for (Iterator<Map.Entry<Object,Object>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry<Object,Object> next=iterator.next();
        Object key=ValueFactory.buildValue(next.getKey());
        Object value=ValueFactory.buildValue(next.getValue());
        props.put(key,value);
      }
      return new SimplePropertiesValue(props);
    }
    throw new IllegalArgumentException(""String_Node_Str"" + metadata.getClass());
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + metadata + ""String_Node_Str""+ metadata.getClass());
}","/** 
 * Creates the equivalent value for the given Spring metadata. Since Spring's metadata is a superset of the Blueprint spec, not all Spring types are supported.
 * @param metadata
 * @return
 */
static Value buildValue(Object metadata){
  if (metadata instanceof BeanMetadataElement) {
    if (metadata instanceof RuntimeBeanReference) {
      RuntimeBeanReference reference=(RuntimeBeanReference)metadata;
      return new SimpleReferenceValue(reference.getBeanName());
    }
    if (metadata instanceof RuntimeBeanNameReference) {
      RuntimeBeanNameReference reference=(RuntimeBeanNameReference)metadata;
      return new SimpleReferenceNameValue(reference.getBeanName());
    }
    if (metadata instanceof TypedStringValue) {
      TypedStringValue typedString=(TypedStringValue)metadata;
      return (typedString.getValue() == null ? NullValue.NULL : new SimpleTypedStringValue(typedString));
    }
    if (metadata instanceof BeanDefinition) {
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(null,(BeanDefinition)metadata);
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof BeanDefinitionHolder) {
      BeanDefinitionHolder holder=(BeanDefinitionHolder)metadata;
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(null,holder.getBeanDefinition());
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof ManagedList) {
      ManagedList list=(ManagedList)metadata;
      Value[] values=new Value[list.size()];
      for (int i=0; i < values.length; i++) {
        Object element=list.get(i);
        values[i]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (list instanceof TempManagedList) {
        defaultType=((TempManagedList)list).getDefaultTypeClassName();
      }
      return new SimpleListValue(values,defaultType);
    }
    if (metadata instanceof ManagedSet) {
      ManagedSet set=(ManagedSet)metadata;
      Value[] values=new Value[set.size()];
      int i=0;
      for (      Object element : set) {
        values[i++]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (set instanceof TempManagedSet) {
        defaultType=((TempManagedSet)set).getDefaultTypeClassName();
      }
      return new SimpleSetValue(values,defaultType);
    }
    if (metadata instanceof ManagedMap) {
      ManagedMap map=(ManagedMap)metadata;
      Value[] keys=new Value[map.size()];
      Value[] values=new Value[map.size()];
      int i=0;
      Set<Map.Entry> entrySet=(Set<Map.Entry>)map.entrySet();
      for (Iterator<Map.Entry> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry next=iterator.next();
        keys[i]=ValueFactory.buildValue(next.getKey());
        values[i]=ValueFactory.buildValue(next.getValue());
        i++;
      }
      String defaultKeyType=null, defaultValueType=null;
      if (map instanceof TempManagedMap) {
        defaultKeyType=((TempManagedMap)map).getKeyDefaultTypeClassName();
        defaultValueType=((TempManagedMap)map).getValueDefaultTypeClassName();
      }
      return new SimpleMapValue(keys,defaultKeyType,values,defaultValueType);
    }
    if (metadata instanceof ManagedProperties) {
      ManagedProperties properties=(ManagedProperties)metadata;
      Properties props=new Properties();
      Set<Map.Entry<Object,Object>> entrySet=properties.entrySet();
      for (Iterator<Map.Entry<Object,Object>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry<Object,Object> next=iterator.next();
        TypedStringValue key=(TypedStringValue)next.getKey();
        TypedStringValue value=(TypedStringValue)next.getValue();
        props.put(key.getValue(),value.getValue());
      }
      return new SimplePropertiesValue(props);
    }
    throw new IllegalArgumentException(""String_Node_Str"" + metadata.getClass());
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + metadata + ""String_Node_Str""+ metadata.getClass());
}",0.9314835097967628
152898,"protected void setUp() throws Exception {
  applicationContext=new GenericApplicationContext();
  applicationContext.setClassLoader(getClass().getClassLoader());
  reader=new XmlBeanDefinitionReader(applicationContext);
  reader.loadBeanDefinitions(new ClassPathResource(getConfig(),getClass()));
  applicationContext.refresh();
  bundleContext=new MockBundleContext();
  moduleContext=new SpringModuleContext(applicationContext,bundleContext);
}","protected void setUp() throws Exception {
  bundleContext=new MockBundleContext();
  applicationContext=new GenericApplicationContext();
  applicationContext.setClassLoader(getClass().getClassLoader());
  applicationContext.getBeanFactory().addBeanPostProcessor(new BundleContextAwareProcessor(bundleContext));
  reader=new XmlBeanDefinitionReader(applicationContext);
  reader.loadBeanDefinitions(new ClassPathResource(getConfig(),getClass()));
  applicationContext.refresh();
  moduleContext=new SpringModuleContext(applicationContext,bundleContext);
}",0.788
152899,"/** 
 * {@inheritDoc}<p/> Converts the given value to a ServiceReference.
 */
public void setValue(Object value){
  if (value == null) {
    super.setValue(null);
    return;
  }
  if (value instanceof ImportedOsgiServiceProxy) {
    super.setValue(new ServiceReferenceDelegate((ImportedOsgiServiceProxy)value));
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ImportedOsgiServiceProxy.class.getName());
}","/** 
 * {@inheritDoc}<p/> Converts the given value to a ServiceReference.
 */
public void setValue(Object value){
  if (value == null) {
    super.setValue(null);
    return;
  }
  if (value instanceof ImportedOsgiServiceProxy) {
    super.setValue(new ServiceReferenceDelegate((ImportedOsgiServiceProxy)value));
    return;
  }
  if (value instanceof ServiceReference) {
    super.setValue(value);
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ImportedOsgiServiceProxy.class.getName() + ""String_Node_Str""+ value.getClass());
}",0.8739837398373984
152900,"/** 
 * Parse a set element.
 */
private Set<?> parseSetElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  NodeList nl=collectionEle.getChildNodes();
  ManagedSet set=new TempManagedSet(nl.getLength(),defaultTypeClassName);
  set.setSource(parserContext.extractSource(collectionEle));
  set.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      set.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return set;
}","/** 
 * Parse a set element.
 */
private Set<?> parseSetElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  if (!StringUtils.hasText(defaultTypeClassName)) {
    defaultTypeClassName=null;
  }
  NodeList nl=collectionEle.getChildNodes();
  ManagedSet set=new TempManagedSet(nl.getLength(),defaultTypeClassName);
  set.setSource(parserContext.extractSource(collectionEle));
  set.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      set.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return set;
}",0.9467238211879976
152901,"/** 
 * Parse a list element.
 */
private List<?> parseListElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  NodeList nl=collectionEle.getChildNodes();
  ManagedList list=new TempManagedList(nl.getLength(),defaultTypeClassName);
  list.setSource(parserContext.extractSource(collectionEle));
  list.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      list.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return list;
}","/** 
 * Parse a list element.
 */
private List<?> parseListElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  if (!StringUtils.hasText(defaultTypeClassName)) {
    defaultTypeClassName=null;
  }
  NodeList nl=collectionEle.getChildNodes();
  ManagedList list=new TempManagedList(nl.getLength(),defaultTypeClassName);
  list.setSource(parserContext.extractSource(collectionEle));
  list.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      list.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return list;
}",0.9473684210526316
152902,"/** 
 * Build a typed String value Object for the given raw value.
 * @see org.springframework.beans.factory.config.TypedStringValue
 */
private Object buildTypedStringValueForMap(String value,String defaultTypeClassName,Element entryEle){
  try {
    return buildTypedStringValue(value,defaultTypeClassName,entryEle);
  }
 catch (  ClassNotFoundException ex) {
    error(""String_Node_Str"" + defaultTypeClassName + ""String_Node_Str"",entryEle,ex);
    return value;
  }
}","/** 
 * Build a typed String value Object for the given raw value.
 * @see org.springframework.beans.factory.config.TypedStringValue
 */
private Object buildTypedStringValueForMap(String value,String defaultTypeClassName,Element entryEle){
  try {
    return buildTypedStringValue(value,defaultTypeClassName,null,entryEle);
  }
 catch (  ClassNotFoundException ex) {
    error(""String_Node_Str"" + defaultTypeClassName + ""String_Node_Str"",entryEle,ex);
    return value;
  }
}",0.9947089947089948
152903,"/** 
 * Parse a map element.
 */
private Map<?,?> parseMapElement(Element mapEle,BeanDefinition bd){
  String defaultKeyTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.KEY_TYPE_ATTRIBUTE);
  String defaultValueTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  List<Element> entryEles=DomUtils.getChildElementsByTagName(mapEle,BeanDefinitionParserDelegate.ENTRY_ELEMENT);
  ManagedMap map=new TempManagedMap(entryEles.size(),defaultKeyTypeClassName,defaultValueTypeClassName);
  map.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(mapEle));
  map.setSource(parserContext.extractSource(mapEle));
  for (  Element entryEle : entryEles) {
    NodeList entrySubNodes=entryEle.getChildNodes();
    Element keyEle=null;
    Element valueEle=null;
    for (int j=0; j < entrySubNodes.getLength(); j++) {
      Node node=entrySubNodes.item(j);
      if (node instanceof Element) {
        Element candidateEle=(Element)node;
        if (DomUtils.nodeNameEquals(candidateEle,BeanDefinitionParserDelegate.KEY_ELEMENT)) {
          if (keyEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            keyEle=candidateEle;
          }
        }
 else {
          if (valueEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            valueEle=candidateEle;
          }
        }
      }
    }
    Object key=null;
    boolean hasKeyAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE);
    boolean hasKeyRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
    if ((hasKeyAttribute && hasKeyRefAttribute) || ((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasKeyAttribute) {
      key=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE),defaultKeyTypeClassName,entryEle);
    }
 else     if (hasKeyRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      key=ref;
    }
 else     if (keyEle != null) {
      key=parseKeyElement(keyEle,bd,defaultKeyTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    Object value=null;
    boolean hasValueAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE);
    boolean hasValueRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
    if ((hasValueAttribute && hasValueRefAttribute) || ((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasValueAttribute) {
      value=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE),defaultValueTypeClassName,entryEle);
    }
 else     if (hasValueRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      value=ref;
    }
 else     if (valueEle != null) {
      value=parsePropertySubElement(valueEle,bd,defaultValueTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    map.put(key,value);
  }
  return map;
}","/** 
 * Parse a map element.
 */
private Map<?,?> parseMapElement(Element mapEle,BeanDefinition bd){
  String defaultKeyTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.KEY_TYPE_ATTRIBUTE);
  if (!StringUtils.hasText(defaultKeyTypeClassName)) {
    defaultKeyTypeClassName=null;
  }
  String defaultValueTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  if (!StringUtils.hasText(defaultValueTypeClassName)) {
    defaultValueTypeClassName=null;
  }
  List<Element> entryEles=DomUtils.getChildElementsByTagName(mapEle,BeanDefinitionParserDelegate.ENTRY_ELEMENT);
  ManagedMap map=new TempManagedMap(entryEles.size(),defaultKeyTypeClassName,defaultValueTypeClassName);
  map.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(mapEle));
  map.setSource(parserContext.extractSource(mapEle));
  for (  Element entryEle : entryEles) {
    NodeList entrySubNodes=entryEle.getChildNodes();
    Element keyEle=null;
    Element valueEle=null;
    for (int j=0; j < entrySubNodes.getLength(); j++) {
      Node node=entrySubNodes.item(j);
      if (node instanceof Element) {
        Element candidateEle=(Element)node;
        if (DomUtils.nodeNameEquals(candidateEle,BeanDefinitionParserDelegate.KEY_ELEMENT)) {
          if (keyEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            keyEle=candidateEle;
          }
        }
 else {
          if (valueEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            valueEle=candidateEle;
          }
        }
      }
    }
    Object key=null;
    boolean hasKeyAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE);
    boolean hasKeyRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
    if ((hasKeyAttribute && hasKeyRefAttribute) || ((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasKeyAttribute) {
      key=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE),defaultKeyTypeClassName,entryEle);
    }
 else     if (hasKeyRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      key=ref;
    }
 else     if (keyEle != null) {
      key=parseKeyElement(keyEle,bd,defaultKeyTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    Object value=null;
    boolean hasValueAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE);
    boolean hasValueRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
    if ((hasValueAttribute && hasValueRefAttribute) || ((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasValueAttribute) {
      value=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE),defaultValueTypeClassName,entryEle);
    }
 else     if (hasValueRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      value=ref;
    }
 else     if (valueEle != null) {
      value=parsePropertySubElement(valueEle,bd,defaultValueTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    map.put(key,value);
  }
  return map;
}",0.974940648905302
152904,"/** 
 * Return a typed String value Object for the given value element.
 * @param ele element
 * @param defaultTypeClassName type class name
 * @return typed String value Object
 */
private Object parseValueElement(Element ele,String defaultTypeClassName){
  String value=DomUtils.getTextValue(ele);
  String typeClassName=ele.getAttribute(BeanDefinitionParserDelegate.TYPE_ATTRIBUTE);
  if (!StringUtils.hasText(typeClassName)) {
    typeClassName=defaultTypeClassName;
  }
  try {
    return buildTypedStringValue(value,typeClassName,ele);
  }
 catch (  ClassNotFoundException ex) {
    error(""String_Node_Str"" + typeClassName + ""String_Node_Str"",ele,ex);
    return value;
  }
}","/** 
 * Return a typed String value Object for the given value element.
 * @param ele element
 * @param defaultTypeClassName type class name
 * @return typed String value Object
 */
private Object parseValueElement(Element ele,String defaultTypeClassName){
  String value=DomUtils.getTextValue(ele);
  String typeClassName=ele.getAttribute(BeanDefinitionParserDelegate.TYPE_ATTRIBUTE);
  String specifiedType=null;
  if (!StringUtils.hasText(typeClassName)) {
    typeClassName=defaultTypeClassName;
  }
 else {
    specifiedType=typeClassName;
  }
  try {
    return buildTypedStringValue(value,typeClassName,specifiedType,ele);
  }
 catch (  ClassNotFoundException ex) {
    error(""String_Node_Str"" + typeClassName + ""String_Node_Str"",ele,ex);
    return value;
  }
}",0.9393103448275862
152905,"/** 
 * Build a typed String value Object for the given raw value.
 * @see org.springframework.beans.factory.config.TypedStringValue
 */
private Object buildTypedStringValue(String value,String targetTypeName,Element ele) throws ClassNotFoundException {
  ClassLoader classLoader=parserContext.getReaderContext().getBeanClassLoader();
  TypedStringValue typedValue=null;
  if (!StringUtils.hasText(targetTypeName)) {
    typedValue=new TypedStringValue(value);
  }
 else   if (classLoader != null) {
    Class<?> targetType=ClassUtils.forName(targetTypeName,classLoader);
    typedValue=new TypedStringValue(value,targetType);
  }
 else {
    typedValue=new TypedStringValue(value,targetTypeName);
  }
  typedValue.setSource(parserContext.extractSource(ele));
  return typedValue;
}","/** 
 * Build a typed String value Object for the given raw value.
 * @see org.springframework.beans.factory.config.TypedStringValue
 */
private Object buildTypedStringValue(String value,String targetTypeName,String specifiedValue,Element ele) throws ClassNotFoundException {
  ClassLoader classLoader=parserContext.getReaderContext().getBeanClassLoader();
  TypedStringValue typedValue=null;
  if (!StringUtils.hasText(targetTypeName)) {
    typedValue=new TypedStringValue(value);
  }
 else   if (classLoader != null) {
    Class<?> targetType=ClassUtils.forName(targetTypeName,classLoader);
    typedValue=new SpecifiedTypeStringValue(value,targetType,specifiedValue);
  }
 else {
    typedValue=new SpecifiedTypeStringValue(value,targetTypeName,specifiedValue);
  }
  typedValue.setSource(parserContext.extractSource(ele));
  return typedValue;
}",0.946078431372549
152906,"public SimpleTypedStringValue(org.springframework.beans.factory.config.TypedStringValue typedStringValue){
  this.typeName=typedStringValue.getTargetTypeName();
  this.value=typedStringValue.getValue();
}","public SimpleTypedStringValue(org.springframework.beans.factory.config.TypedStringValue typedStringValue){
  if (typedStringValue instanceof SpecifiedTypeStringValue) {
    SpecifiedTypeStringValue customType=(SpecifiedTypeStringValue)typedStringValue;
    this.typeName=customType.getSpecifiedType();
  }
 else {
    this.typeName=typedStringValue.getTargetTypeName();
  }
  this.value=typedStringValue.getValue();
}",0.5700483091787439
152907,"/** 
 * Creates the equivalent value for the given Spring metadata. Since Spring's metadata is a superset of the Blueprint spec, not all Spring types are supported.
 * @param metadata
 * @return
 */
static Value buildValue(Object metadata){
  if (metadata instanceof BeanMetadataElement) {
    if (metadata instanceof RuntimeBeanReference) {
      RuntimeBeanReference reference=(RuntimeBeanReference)metadata;
      return new SimpleReferenceValue(reference.getBeanName());
    }
    if (metadata instanceof RuntimeBeanNameReference) {
      RuntimeBeanNameReference reference=(RuntimeBeanNameReference)metadata;
      return new SimpleReferenceNameValue(reference.getBeanName());
    }
    if (metadata instanceof TypedStringValue) {
      TypedStringValue typedString=(TypedStringValue)metadata;
      return (typedString.getValue() == null ? NullValue.NULL : new SimpleTypedStringValue(typedString));
    }
    if (metadata instanceof BeanDefinition) {
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(null,(BeanDefinition)metadata);
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof BeanDefinitionHolder) {
      BeanDefinitionHolder holder=(BeanDefinitionHolder)metadata;
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(holder.getBeanName(),holder.getBeanDefinition());
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof ManagedList) {
      ManagedList list=(ManagedList)metadata;
      Value[] values=new Value[list.size()];
      for (int i=0; i < values.length; i++) {
        Object element=list.get(i);
        values[i]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (list instanceof TempManagedList) {
        defaultType=((TempManagedList)list).getDefaultTypeClassName();
      }
      return new SimpleListValue(values,defaultType);
    }
    if (metadata instanceof ManagedSet) {
      ManagedSet set=(ManagedSet)metadata;
      Value[] values=new Value[set.size()];
      int i=0;
      for (      Object element : set) {
        values[i++]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (set instanceof TempManagedSet) {
        defaultType=((TempManagedSet)set).getDefaultTypeClassName();
      }
      return new SimpleSetValue(values,defaultType);
    }
    if (metadata instanceof ManagedMap) {
      ManagedMap map=(ManagedMap)metadata;
      Value[] keys=new Value[map.size()];
      Value[] values=new Value[map.size()];
      int i=0;
      Set<Map.Entry> entrySet=(Set<Map.Entry>)map.entrySet();
      for (Iterator<Map.Entry> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry next=iterator.next();
        keys[i]=ValueFactory.buildValue(next.getKey());
        values[i]=ValueFactory.buildValue(next.getValue());
        i++;
      }
      String defaultKeyType=null, defaultValueType=null;
      if (map instanceof TempManagedMap) {
        defaultKeyType=((TempManagedMap)map).getKeyDefaultTypeClassName();
        defaultValueType=((TempManagedMap)map).getValueDefaultTypeClassName();
      }
      return new SimpleMapValue(keys,defaultKeyType,values,defaultValueType);
    }
    if (metadata instanceof ManagedProperties) {
      ManagedProperties properties=(ManagedProperties)metadata;
      Properties props=new Properties();
      Set<Map.Entry<Object,Object>> entrySet=(Set<Map.Entry<Object,Object>>)properties.entrySet();
      for (Iterator<Map.Entry<Object,Object>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry<Object,Object> next=iterator.next();
        Object key=ValueFactory.buildValue(next.getKey());
        Object value=ValueFactory.buildValue(next.getValue());
        props.put(key,value);
      }
      return new SimplePropertiesValue(props);
    }
    throw new IllegalArgumentException(""String_Node_Str"" + metadata.getClass());
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + metadata + ""String_Node_Str""+ metadata.getClass());
}","/** 
 * Creates the equivalent value for the given Spring metadata. Since Spring's metadata is a superset of the Blueprint spec, not all Spring types are supported.
 * @param metadata
 * @return
 */
static Value buildValue(Object metadata){
  if (metadata instanceof BeanMetadataElement) {
    if (metadata instanceof RuntimeBeanReference) {
      RuntimeBeanReference reference=(RuntimeBeanReference)metadata;
      return new SimpleReferenceValue(reference.getBeanName());
    }
    if (metadata instanceof RuntimeBeanNameReference) {
      RuntimeBeanNameReference reference=(RuntimeBeanNameReference)metadata;
      return new SimpleReferenceNameValue(reference.getBeanName());
    }
    if (metadata instanceof TypedStringValue) {
      TypedStringValue typedString=(TypedStringValue)metadata;
      return (typedString.getValue() == null ? NullValue.NULL : new SimpleTypedStringValue(typedString));
    }
    if (metadata instanceof BeanDefinition) {
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(null,(BeanDefinition)metadata);
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof BeanDefinitionHolder) {
      BeanDefinitionHolder holder=(BeanDefinitionHolder)metadata;
      ComponentMetadata componentMetadata=MetadataFactory.buildComponentMetadataFor(null,holder.getBeanDefinition());
      return new SimpleComponentValue((LocalComponentMetadata)componentMetadata);
    }
    if (metadata instanceof ManagedList) {
      ManagedList list=(ManagedList)metadata;
      Value[] values=new Value[list.size()];
      for (int i=0; i < values.length; i++) {
        Object element=list.get(i);
        values[i]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (list instanceof TempManagedList) {
        defaultType=((TempManagedList)list).getDefaultTypeClassName();
      }
      return new SimpleListValue(values,defaultType);
    }
    if (metadata instanceof ManagedSet) {
      ManagedSet set=(ManagedSet)metadata;
      Value[] values=new Value[set.size()];
      int i=0;
      for (      Object element : set) {
        values[i++]=ValueFactory.buildValue(element);
      }
      String defaultType=null;
      if (set instanceof TempManagedSet) {
        defaultType=((TempManagedSet)set).getDefaultTypeClassName();
      }
      return new SimpleSetValue(values,defaultType);
    }
    if (metadata instanceof ManagedMap) {
      ManagedMap map=(ManagedMap)metadata;
      Value[] keys=new Value[map.size()];
      Value[] values=new Value[map.size()];
      int i=0;
      Set<Map.Entry> entrySet=(Set<Map.Entry>)map.entrySet();
      for (Iterator<Map.Entry> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry next=iterator.next();
        keys[i]=ValueFactory.buildValue(next.getKey());
        values[i]=ValueFactory.buildValue(next.getValue());
        i++;
      }
      String defaultKeyType=null, defaultValueType=null;
      if (map instanceof TempManagedMap) {
        defaultKeyType=((TempManagedMap)map).getKeyDefaultTypeClassName();
        defaultValueType=((TempManagedMap)map).getValueDefaultTypeClassName();
      }
      return new SimpleMapValue(keys,defaultKeyType,values,defaultValueType);
    }
    if (metadata instanceof ManagedProperties) {
      ManagedProperties properties=(ManagedProperties)metadata;
      Properties props=new Properties();
      Set<Map.Entry<Object,Object>> entrySet=(Set<Map.Entry<Object,Object>>)properties.entrySet();
      for (Iterator<Map.Entry<Object,Object>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
        Map.Entry<Object,Object> next=iterator.next();
        Object key=ValueFactory.buildValue(next.getKey());
        Object value=ValueFactory.buildValue(next.getValue());
        props.put(key,value);
      }
      return new SimplePropertiesValue(props);
    }
    throw new IllegalArgumentException(""String_Node_Str"" + metadata.getClass());
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + metadata + ""String_Node_Str""+ metadata.getClass());
}",0.9970859640602234
152908,"public void testNumberOfBeans() throws Exception {
  System.out.println(""String_Node_Str"" + ObjectUtils.nullSafeToString(context.getBeanDefinitionNames()));
  assertEquals(""String_Node_Str"",3,context.getBeanDefinitionCount());
}","public void testNumberOfBeans() throws Exception {
  System.out.println(""String_Node_Str"" + ObjectUtils.nullSafeToString(context.getBeanDefinitionNames()));
  assertTrue(""String_Node_Str"",context.getBeanDefinitionCount() >= 3);
}",0.8271334792122538
152909,"/** 
 * Parse a set element.
 */
private Set<?> parseSetElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  NodeList nl=collectionEle.getChildNodes();
  ManagedSet set=new ManagedSet(nl.getLength());
  set.setSource(parserContext.extractSource(collectionEle));
  set.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      set.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return set;
}","/** 
 * Parse a set element.
 */
private Set<?> parseSetElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  NodeList nl=collectionEle.getChildNodes();
  ManagedSet set=new TempManagedSet(nl.getLength(),defaultTypeClassName);
  set.setSource(parserContext.extractSource(collectionEle));
  set.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      set.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return set;
}",0.9835634451019066
152910,"/** 
 * Parse a value, ref or collection sub-element of a property or constructor-arg element. This method is called from several places to handle reusable elements such as idref, ref, null, value and so on. In fact, this method is the main reason why the BeanDefinitionParserDelegate is not used in full since the element namespace becomes important as mixed rfc124/bean content can coexist.
 * @param ele subelement of property element; we don't know which yet
 * @param defaultTypeClassName the default type (class name) for any<code>&lt;value&gt;</code> tag that might be created
 */
private Object parsePropertySubElement(Element ele,BeanDefinition bd,String defaultTypeClassName){
  String namespaceUri=ele.getNamespaceURI();
  if (parserContext.getDelegate().isDefaultNamespace(namespaceUri)) {
    return parserContext.getDelegate().parsePropertySubElement(ele,bd);
  }
 else   if (!NAMESPACE_URI.equals(namespaceUri)) {
    return parserContext.getDelegate().parseCustomElement(ele);
  }
 else {
    if (DomUtils.nodeNameEquals(ele,COMPONENT)) {
      BeanDefinitionHolder bdHolder=parseComponentDefinitionElement(ele,bd);
      if (bdHolder != null) {
        bdHolder=ParsingUtils.decorateBeanDefinitionIfRequired(ele,bdHolder,parserContext);
      }
      return bdHolder;
    }
    if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.REF_ELEMENT)) {
      return parseRefElement(ele);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.IDREF_ELEMENT)) {
      return parseIdRefElement(ele);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.VALUE_ELEMENT)) {
      return parseValueElement(ele,defaultTypeClassName);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.NULL_ELEMENT)) {
      TypedStringValue nullHolder=new TypedStringValue(null);
      nullHolder.setSource(parserContext.extractSource(ele));
      return nullHolder;
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.LIST_ELEMENT)) {
      return parseListElement(ele,bd);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.SET_ELEMENT)) {
      return parseSetElement(ele,bd);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.MAP_ELEMENT)) {
      return parseMapElement(ele,bd);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.PROPS_ELEMENT)) {
      return parserContext.getDelegate().parsePropsElement(ele);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.PROPS_ELEMENT)) {
      return parserContext.getDelegate().parsePropsElement(ele);
    }
    return parserContext.getDelegate().parseCustomElement(ele,bd);
  }
}","/** 
 * Parse a value, ref or collection sub-element of a property or constructor-arg element. This method is called from several places to handle reusable elements such as idref, ref, null, value and so on. In fact, this method is the main reason why the BeanDefinitionParserDelegate is not used in full since the element namespace becomes important as mixed rfc124/bean content can coexist.
 * @param ele subelement of property element; we don't know which yet
 * @param defaultTypeClassName the default type (class name) for any<code>&lt;value&gt;</code> tag that might be created
 */
private Object parsePropertySubElement(Element ele,BeanDefinition bd,String defaultTypeClassName){
  String namespaceUri=ele.getNamespaceURI();
  if (parserContext.getDelegate().isDefaultNamespace(namespaceUri)) {
    return parserContext.getDelegate().parsePropertySubElement(ele,bd);
  }
 else   if (!NAMESPACE_URI.equals(namespaceUri)) {
    return parserContext.getDelegate().parseCustomElement(ele);
  }
 else {
    if (DomUtils.nodeNameEquals(ele,COMPONENT)) {
      BeanDefinitionHolder bdHolder=parseComponentDefinitionElement(ele,bd);
      if (bdHolder != null) {
        bdHolder=ParsingUtils.decorateBeanDefinitionIfRequired(ele,bdHolder,parserContext);
      }
      return bdHolder;
    }
    if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.REF_ELEMENT)) {
      return parseRefElement(ele);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.IDREF_ELEMENT)) {
      return parseIdRefElement(ele);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.VALUE_ELEMENT)) {
      return parseValueElement(ele,defaultTypeClassName);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.NULL_ELEMENT)) {
      TypedStringValue nullHolder=new TypedStringValue(null);
      nullHolder.setSource(parserContext.extractSource(ele));
      return nullHolder;
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.LIST_ELEMENT)) {
      return parseListElement(ele,bd);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.SET_ELEMENT)) {
      return parseSetElement(ele,bd);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.MAP_ELEMENT)) {
      return parseMapElement(ele,bd);
    }
 else     if (DomUtils.nodeNameEquals(ele,BeanDefinitionParserDelegate.PROPS_ELEMENT)) {
      return parserContext.getDelegate().parsePropsElement(ele);
    }
    return parserContext.getDelegate().parseCustomElement(ele,bd);
  }
}",0.9697885196374624
152911,"/** 
 * Parse a list element.
 */
private List<?> parseListElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  NodeList nl=collectionEle.getChildNodes();
  ManagedList list=new ManagedList(nl.getLength());
  list.setSource(parserContext.extractSource(collectionEle));
  list.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      list.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return list;
}","/** 
 * Parse a list element.
 */
private List<?> parseListElement(Element collectionEle,BeanDefinition bd){
  String defaultTypeClassName=collectionEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  NodeList nl=collectionEle.getChildNodes();
  ManagedList list=new TempManagedList(nl.getLength(),defaultTypeClassName);
  list.setSource(parserContext.extractSource(collectionEle));
  list.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(collectionEle));
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,BeanDefinitionParserDelegate.DESCRIPTION_ELEMENT)) {
      list.add(parsePropertySubElement((Element)node,bd,defaultTypeClassName));
    }
  }
  return list;
}",0.9837767683322518
152912,"/** 
 * Parse a map element.
 */
private Map<?,?> parseMapElement(Element mapEle,BeanDefinition bd){
  String defaultKeyTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.KEY_TYPE_ATTRIBUTE);
  String defaultValueTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  List<Element> entryEles=DomUtils.getChildElementsByTagName(mapEle,BeanDefinitionParserDelegate.ENTRY_ELEMENT);
  ManagedMap map=new ManagedMap(entryEles.size());
  map.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(mapEle));
  map.setSource(parserContext.extractSource(mapEle));
  for (  Element entryEle : entryEles) {
    NodeList entrySubNodes=entryEle.getChildNodes();
    Element keyEle=null;
    Element valueEle=null;
    for (int j=0; j < entrySubNodes.getLength(); j++) {
      Node node=entrySubNodes.item(j);
      if (node instanceof Element) {
        Element candidateEle=(Element)node;
        if (DomUtils.nodeNameEquals(candidateEle,BeanDefinitionParserDelegate.KEY_ELEMENT)) {
          if (keyEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            keyEle=candidateEle;
          }
        }
 else {
          if (valueEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            valueEle=candidateEle;
          }
        }
      }
    }
    Object key=null;
    boolean hasKeyAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE);
    boolean hasKeyRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
    if ((hasKeyAttribute && hasKeyRefAttribute) || ((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasKeyAttribute) {
      key=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE),defaultKeyTypeClassName,entryEle);
    }
 else     if (hasKeyRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      key=ref;
    }
 else     if (keyEle != null) {
      key=parseKeyElement(keyEle,bd,defaultKeyTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    Object value=null;
    boolean hasValueAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE);
    boolean hasValueRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
    if ((hasValueAttribute && hasValueRefAttribute) || ((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasValueAttribute) {
      value=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE),defaultValueTypeClassName,entryEle);
    }
 else     if (hasValueRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      value=ref;
    }
 else     if (valueEle != null) {
      value=parsePropertySubElement(valueEle,bd,defaultValueTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    map.put(key,value);
  }
  return map;
}","/** 
 * Parse a map element.
 */
private Map<?,?> parseMapElement(Element mapEle,BeanDefinition bd){
  String defaultKeyTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.KEY_TYPE_ATTRIBUTE);
  String defaultValueTypeClassName=mapEle.getAttribute(BeanDefinitionParserDelegate.VALUE_TYPE_ATTRIBUTE);
  List<Element> entryEles=DomUtils.getChildElementsByTagName(mapEle,BeanDefinitionParserDelegate.ENTRY_ELEMENT);
  ManagedMap map=new TempManagedMap(entryEles.size(),defaultKeyTypeClassName,defaultValueTypeClassName);
  map.setMergeEnabled(parserContext.getDelegate().parseMergeAttribute(mapEle));
  map.setSource(parserContext.extractSource(mapEle));
  for (  Element entryEle : entryEles) {
    NodeList entrySubNodes=entryEle.getChildNodes();
    Element keyEle=null;
    Element valueEle=null;
    for (int j=0; j < entrySubNodes.getLength(); j++) {
      Node node=entrySubNodes.item(j);
      if (node instanceof Element) {
        Element candidateEle=(Element)node;
        if (DomUtils.nodeNameEquals(candidateEle,BeanDefinitionParserDelegate.KEY_ELEMENT)) {
          if (keyEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            keyEle=candidateEle;
          }
        }
 else {
          if (valueEle != null) {
            error(""String_Node_Str"",entryEle);
          }
 else {
            valueEle=candidateEle;
          }
        }
      }
    }
    Object key=null;
    boolean hasKeyAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE);
    boolean hasKeyRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
    if ((hasKeyAttribute && hasKeyRefAttribute) || ((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasKeyAttribute) {
      key=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_ATTRIBUTE),defaultKeyTypeClassName,entryEle);
    }
 else     if (hasKeyRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.KEY_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      key=ref;
    }
 else     if (keyEle != null) {
      key=parseKeyElement(keyEle,bd,defaultKeyTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    Object value=null;
    boolean hasValueAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE);
    boolean hasValueRefAttribute=entryEle.hasAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
    if ((hasValueAttribute && hasValueRefAttribute) || ((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {
      error(""String_Node_Str"" + ""String_Node_Str"",entryEle);
    }
    if (hasValueAttribute) {
      value=buildTypedStringValueForMap(entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_ATTRIBUTE),defaultValueTypeClassName,entryEle);
    }
 else     if (hasValueRefAttribute) {
      String refName=entryEle.getAttribute(BeanDefinitionParserDelegate.VALUE_REF_ATTRIBUTE);
      if (!StringUtils.hasText(refName)) {
        error(""String_Node_Str"",entryEle);
      }
      RuntimeBeanReference ref=new RuntimeBeanReference(refName);
      ref.setSource(parserContext.extractSource(entryEle));
      value=ref;
    }
 else     if (valueEle != null) {
      value=parsePropertySubElement(valueEle,bd,defaultValueTypeClassName);
    }
 else {
      error(""String_Node_Str"",entryEle);
    }
    map.put(key,value);
  }
  return map;
}",0.9926410466067048
152913,"public ComponentMetadata getComponentMetadata(String name) throws NoSuchComponentException {
  if (applicationContext.containsBeanDefinition(name)) {
    BeanDefinition beanDefinition=getBeanFactory().getBeanDefinition(name);
    return MetadataFactory.buildComponentMetadataFor(beanDefinition);
  }
 else {
    throw new NoSuchComponentException(name);
  }
}","public ComponentMetadata getComponentMetadata(String name) throws NoSuchComponentException {
  if (applicationContext.containsBeanDefinition(name)) {
    BeanDefinition beanDefinition=getBeanFactory().getBeanDefinition(name);
    return MetadataFactory.buildComponentMetadataFor(name,beanDefinition);
  }
 else {
    throw new NoSuchComponentException(name);
  }
}",0.9930843706777316
152914,"private List<ComponentMetadata> getComponentMetadataForAllComponents(){
  List<ComponentMetadata> metadata=new ArrayList<ComponentMetadata>();
  String[] components=applicationContext.getBeanDefinitionNames();
  for (  String beanName : components) {
    metadata.add(MetadataFactory.buildComponentMetadataFor(getBeanFactory().getBeanDefinition(beanName)));
  }
  return metadata;
}","private List<ComponentMetadata> getComponentMetadataForAllComponents(){
  List<ComponentMetadata> metadata=new ArrayList<ComponentMetadata>();
  String[] components=applicationContext.getBeanDefinitionNames();
  for (  String beanName : components) {
    metadata.add(MetadataFactory.buildComponentMetadataFor(beanName,getBeanFactory().getBeanDefinition(beanName)));
  }
  return metadata;
}",0.9883570504527812
152915,"public ComponentMetadata getComponentDefinition(String name){
  if (!containsComponentDefinition(name)) {
    return null;
  }
  String nameOfBeanWereLookingFor=name;
  if (!beanRegistry.containsBeanDefinition(name)) {
    for (    String beanName : beanRegistry.getBeanDefinitionNames()) {
      for (      String alias : beanRegistry.getAliases(beanName)) {
        if (alias.equals(name)) {
          nameOfBeanWereLookingFor=beanName;
        }
      }
    }
  }
  return MetadataFactory.buildComponentMetadataFor(this.beanRegistry.getBeanDefinition(nameOfBeanWereLookingFor));
}","public ComponentMetadata getComponentDefinition(String name){
  if (!containsComponentDefinition(name)) {
    return null;
  }
  String nameOfBeanWereLookingFor=name;
  if (!beanRegistry.containsBeanDefinition(name)) {
    for (    String beanName : beanRegistry.getBeanDefinitionNames()) {
      for (      String alias : beanRegistry.getAliases(beanName)) {
        if (alias.equals(name)) {
          nameOfBeanWereLookingFor=beanName;
        }
      }
    }
  }
  return MetadataFactory.buildComponentMetadataFor(name,beanRegistry.getBeanDefinition(nameOfBeanWereLookingFor));
}",0.9914236706689536
152916,"public ComponentMetadata getEnclosingComponent(){
  return MetadataFactory.buildComponentMetadataFor(parserContext.getContainingBeanDefinition());
}","public ComponentMetadata getEnclosingComponent(){
  BeanDefinition def=parserContext.getContainingBeanDefinition();
  if (def != null) {
    String beanName=null;
    if (!def.hasAttribute(COMPONENT_NAME_ATTR)) {
      BeanDefinitionRegistry defRegistry=parserContext.getRegistry();
      String[] names=defRegistry.getBeanDefinitionNames();
      for (      String name : names) {
        if (def == defRegistry.getBeanDefinition(name)) {
          beanName=name;
        }
      }
    }
    return MetadataFactory.buildComponentMetadataFor(beanName,def);
  }
 else {
    return null;
  }
}",0.2760487144790257
152917,"BeanDefinition buildBeanDefinitionFor(ComponentMetadata metadata){
  if (metadata instanceof SpringComponentMetadata) {
    return ((SpringComponentMetadata)metadata).getBeanDefinition();
  }
  AbstractBeanDefinition definition=buildBeanDefinition(metadata);
  definition.setAttribute(MetadataConstants.COMPONENT_METADATA_ATTRIBUTE,metadata);
  Set<String> dependencies=metadata.getExplicitDependencies();
  definition.setDependsOn(dependencies.toArray(new String[dependencies.size()]));
  return definition;
}","BeanDefinition buildBeanDefinitionFor(ComponentMetadata metadata){
  if (metadata instanceof SpringComponentMetadata) {
    return ((SpringComponentMetadata)metadata).getBeanDefinition();
  }
  AbstractBeanDefinition definition=buildBeanDefinition(metadata);
  definition.setAttribute(MetadataConstants.COMPONENT_METADATA_ATTRIBUTE,metadata);
  definition.setAttribute(MetadataConstants.COMPONENT_NAME,metadata.getName());
  Set<String> dependencies=metadata.getExplicitDependencies();
  definition.setDependsOn(dependencies.toArray(new String[dependencies.size()]));
  return definition;
}",0.9272727272727272
152918,"/** 
 * Creates the equivalent Spring metadata for the given value.
 * @param value
 * @return
 */
static BeanMetadataElement buildBeanMetadata(Value value){
  if (value instanceof ReferenceValue) {
    ReferenceValue reference=(ReferenceValue)value;
    return new RuntimeBeanReference(reference.getComponentName());
  }
  if (value instanceof ReferenceNameValue) {
    ReferenceNameValue reference=(ReferenceNameValue)value;
    return new RuntimeBeanNameReference(reference.getReferenceName());
  }
  if (value instanceof TypedStringValue) {
    TypedStringValue typedString=(TypedStringValue)value;
    return new org.springframework.beans.factory.config.TypedStringValue(typedString.getStringValue(),typedString.getTypeName());
  }
  if (value instanceof NullValue) {
    return new org.springframework.beans.factory.config.TypedStringValue(null);
  }
  if (value instanceof ComponentValue) {
    ComponentValue component=(ComponentValue)value;
    return MetadataFactory.buildBeanDefinitionFor(component.getComponentMetadata());
  }
  if (value instanceof ListValue) {
    ListValue listValue=(ListValue)value;
    List<Value> list=(List<Value>)listValue.getList();
    ManagedList managedList=new ManagedList();
    for (    Value val : list) {
      managedList.add(BeanMetadataElementFactory.buildBeanMetadata(val));
    }
    return managedList;
  }
  if (value instanceof SetValue) {
    SetValue setValue=(SetValue)value;
    Set<Value> set=(Set<Value>)setValue.getSet();
    ManagedSet managedSet=new ManagedSet();
    for (Iterator<Value> iterator=set.iterator(); iterator.hasNext(); ) {
      Value val=iterator.next();
      managedSet.add(BeanMetadataElementFactory.buildBeanMetadata(val));
    }
    return managedSet;
  }
  if (value instanceof MapValue) {
    MapValue mapValue=(MapValue)value;
    Map<Value,Value> map=(Map<Value,Value>)mapValue.getMap();
    ManagedMap managedMap=new ManagedMap();
    Set<Entry<Value,Value>> entrySet=map.entrySet();
    for (Iterator<Entry<Value,Value>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
      Entry<Value,Value> entry=iterator.next();
      managedMap.put(BeanMetadataElementFactory.buildBeanMetadata(entry.getKey()),BeanMetadataElementFactory.buildBeanMetadata(entry.getValue()));
    }
  }
  if (value instanceof PropertiesValue) {
    PropertiesValue propertiesValue=(PropertiesValue)value;
    Properties properties=propertiesValue.getPropertiesValue();
    ManagedProperties managedProperties=new ManagedProperties();
    Set entrySet=managedProperties.entrySet();
    for (Iterator<Entry<Value,Value>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
      Entry<Value,Value> entry=iterator.next();
      managedProperties.put(BeanMetadataElementFactory.buildBeanMetadata(entry.getKey()),BeanMetadataElementFactory.buildBeanMetadata(entry.getValue()));
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + value.getClass());
}","/** 
 * Creates the equivalent Spring metadata for the given value.
 * @param value
 * @param defaultTypeName
 * @return
 */
static BeanMetadataElement buildBeanMetadata(Value value,String defaultTypeName){
  if (value instanceof ReferenceValue) {
    ReferenceValue reference=(ReferenceValue)value;
    return new RuntimeBeanReference(reference.getComponentName());
  }
  if (value instanceof ReferenceNameValue) {
    ReferenceNameValue reference=(ReferenceNameValue)value;
    return new RuntimeBeanNameReference(reference.getReferenceName());
  }
  if (value instanceof TypedStringValue) {
    TypedStringValue typedString=(TypedStringValue)value;
    String specifiedType=typedString.getTypeName();
    if (specifiedType == null) {
      specifiedType=defaultTypeName;
    }
    return new org.springframework.beans.factory.config.TypedStringValue(typedString.getStringValue(),specifiedType);
  }
  if (value instanceof NullValue) {
    return new org.springframework.beans.factory.config.TypedStringValue(null);
  }
  if (value instanceof ComponentValue) {
    ComponentValue component=(ComponentValue)value;
    return MetadataFactory.buildBeanDefinitionFor(component.getComponentMetadata());
  }
  if (value instanceof ListValue) {
    ListValue listValue=(ListValue)value;
    List<Value> list=(List<Value>)listValue.getList();
    String defaultType=listValue.getValueType();
    ManagedList managedList=new TempManagedList(list.size(),defaultType);
    for (    Value val : list) {
      managedList.add(BeanMetadataElementFactory.buildBeanMetadata(val,defaultType));
    }
    return managedList;
  }
  if (value instanceof SetValue) {
    SetValue setValue=(SetValue)value;
    Set<Value> set=(Set<Value>)setValue.getSet();
    String defaultType=setValue.getValueType();
    ManagedSet managedSet=new TempManagedSet(set.size(),defaultType);
    for (Iterator<Value> iterator=set.iterator(); iterator.hasNext(); ) {
      Value val=iterator.next();
      managedSet.add(BeanMetadataElementFactory.buildBeanMetadata(val,defaultType));
    }
    return managedSet;
  }
  if (value instanceof MapValue) {
    MapValue mapValue=(MapValue)value;
    Map<Value,Value> map=(Map<Value,Value>)mapValue.getMap();
    String defaultKeyType=mapValue.getKeyType();
    String defaultValueType=mapValue.getValueType();
    ManagedMap managedMap=new TempManagedMap(map.size(),defaultKeyType,defaultValueType);
    Set<Entry<Value,Value>> entrySet=map.entrySet();
    for (Iterator<Entry<Value,Value>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
      Entry<Value,Value> entry=iterator.next();
      managedMap.put(BeanMetadataElementFactory.buildBeanMetadata(entry.getKey(),defaultKeyType),BeanMetadataElementFactory.buildBeanMetadata(entry.getValue(),defaultValueType));
    }
  }
  if (value instanceof PropertiesValue) {
    PropertiesValue propertiesValue=(PropertiesValue)value;
    Properties properties=propertiesValue.getPropertiesValue();
    ManagedProperties managedProperties=new ManagedProperties();
    Set entrySet=managedProperties.entrySet();
    for (Iterator<Entry<Value,Value>> iterator=entrySet.iterator(); iterator.hasNext(); ) {
      Entry<Value,Value> entry=iterator.next();
      managedProperties.put(BeanMetadataElementFactory.buildBeanMetadata(entry.getKey()),BeanMetadataElementFactory.buildBeanMetadata(entry.getValue()));
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + value.getClass());
}",0.5552594450540838
152919,"/** 
 * Builds a component metadata from the given bean definition.
 * @param beanDefinition
 * @return
 */
ComponentMetadata buildMetadata(BeanDefinition beanDefinition){
  Object metadata=beanDefinition.getAttribute(COMPONENT_METADATA_ATTRIBUTE);
  if (metadata instanceof ComponentMetadata)   return (ComponentMetadata)metadata;
  if (isServiceExporter(beanDefinition)) {
    return new SpringServiceExportComponentMetadata(beanDefinition);
  }
  if (isServiceImporter(beanDefinition)) {
    return new SpringServiceReferenceComponentMetadata(beanDefinition);
  }
  return new SpringLocalComponentMetadata(beanDefinition);
}","/** 
 * Builds a component metadata from the given bean definition.
 * @param name bean name
 * @param beanDefinition
 * @return
 */
ComponentMetadata buildMetadata(String name,BeanDefinition beanDefinition){
  Object metadata=beanDefinition.getAttribute(COMPONENT_METADATA_ATTRIBUTE);
  if (metadata instanceof ComponentMetadata)   return (ComponentMetadata)metadata;
  if (name == null) {
    name=(String)beanDefinition.getAttribute(COMPONENT_NAME);
  }
  if (isServiceExporter(beanDefinition)) {
    return new SpringServiceExportComponentMetadata(beanDefinition);
  }
  if (isServiceImporter(beanDefinition)) {
    return new SpringServiceReferenceComponentMetadata(beanDefinition);
  }
  return new SpringLocalComponentMetadata(name,beanDefinition);
}",0.9060693641618496
152920,"/** 
 * Inspects the given   {@link BeanDefinition beanDefinition} and returns theappropriate  {@link ComponentMetadata metadata} (can be one of{@link LocalComponentMetadata},   {@link ServiceExportComponentMetadata}, or   {@link ServiceReferenceComponentMetadata}).
 * @param beanDefinition Spring bean definition
 * @return an OSGi component metadata.
 */
public static ComponentMetadata buildComponentMetadataFor(BeanDefinition beanDefinition){
  return blueprintFactory.buildMetadata(beanDefinition);
}","/** 
 * Inspects the given   {@link BeanDefinition beanDefinition} and returns theappropriate  {@link ComponentMetadata metadata} (can be one of{@link LocalComponentMetadata},   {@link ServiceExportComponentMetadata}, or   {@link ServiceReferenceComponentMetadata}).
 * @param name bean name
 * @param beanDefinition Spring bean definition
 * @return an OSGi component metadata.
 */
public static ComponentMetadata buildComponentMetadataFor(String name,BeanDefinition beanDefinition){
  return blueprintFactory.buildMetadata(name,beanDefinition);
}",0.9601518026565464
152921,"/** 
 * Constructs a new <code>SimpleListValue</code> instance.
 * @param set
 */
public SimpleListValue(Value... values){
  List<Value> vals=new ArrayList<Value>(values.length);
  Collections.addAll(vals,values);
  list=Collections.unmodifiableList(vals);
}","/** 
 * Constructs a new <code>SimpleListValue</code> instance.
 * @param array of values
 * @param valueType value type
 */
public SimpleListValue(Value[] values,String valueType){
  List<Value> vals=new ArrayList<Value>(values.length);
  Collections.addAll(vals,values);
  list=Collections.unmodifiableList(vals);
  this.valueType=valueType;
}",0.8126036484245439
152922,"public String getValueType(){
  throw new UnsupportedOperationException();
}","public String getValueType(){
  return valueType;
}",0.6456692913385826
152923,"public String getKeyType(){
  throw new UnsupportedOperationException();
}","public String getKeyType(){
  return keyValueType;
}",0.6507936507936508
152924,"/** 
 * Constructs a new <code>SimpleListValue</code> instance.
 * @param set
 */
public SimpleMapValue(Value[] keys,Value[] values){
  Assert.state(keys.length == values.length,""String_Node_Str"");
  Map<Value,Value> vals=new LinkedHashMap<Value,Value>(keys.length);
  for (int i=0; i < keys.length; i++) {
    vals.put(keys[i],values[i]);
  }
  map=Collections.unmodifiableMap(vals);
}","/** 
 * Constructs a new <code>SimpleListValue</code> instance.
 * @param set
 */
public SimpleMapValue(Value[] keys,String keyValueType,Value[] values,String valueValueType){
  Assert.state(keys.length == values.length,""String_Node_Str"");
  Map<Value,Value> vals=new LinkedHashMap<Value,Value>(keys.length);
  for (int i=0; i < keys.length; i++) {
    vals.put(keys[i],values[i]);
  }
  map=Collections.unmodifiableMap(vals);
  this.keyValueType=keyValueType;
  this.valueValueType=valueValueType;
}",0.871331828442438
152925,"public String getValueType(){
  throw new UnsupportedOperationException();
}","public String getValueType(){
  return valueValueType;
}",0.6515151515151515
152926,"/** 
 * Constructs a new <code>SimpleSetValue</code> instance.
 * @param set
 */
public SimpleSetValue(Value... values){
  Set<Value> vals=new LinkedHashSet<Value>(values.length);
  Collections.addAll(vals,values);
  set=Collections.unmodifiableSet(vals);
}","/** 
 * Constructs a new <code>SimpleSetValue</code> instance.
 * @param set
 */
public SimpleSetValue(Value[] values,String valueType){
  Set<Value> vals=new LinkedHashSet<Value>(values.length);
  Collections.addAll(vals,values);
  set=Collections.unmodifiableSet(vals);
  this.valueType=valueType;
}",0.8853046594982079
152927,"public String getValueType(){
  throw new UnsupportedOperationException();
}","public String getValueType(){
  return valueType;
}",0.6456692913385826
152928,"/** 
 * Tries (through a best-guess attempt) to figure out why a given class could not be found. This method will search the given bundle and its classpath to determine the reason for which the class cannot be loaded. <p/> This method tries to be effective especially when the dealing with  {@link NoClassDefFoundError} caused by failure of loading transitiveclasses (such as getting a NCDFE when loading <code>foo.A</code> because <code>bar.B</code> cannot be found).
 * @param bundle the bundle to search for (and which should do the loading)
 * @param className the name of the class that failed to be loaded in dotformat (i.e. java.lang.Thread)
 * @param rootClassName the name of the class that triggered the loading(i.e. java.lang.Runnable)
 */
public static void debugClassLoading(Bundle bundle,String className,String rootClassName){
  boolean trace=log.isTraceEnabled();
  if (!trace)   return;
  Dictionary dict=bundle.getHeaders();
  String bname=dict.get(Constants.BUNDLE_NAME) + ""String_Node_Str"" + dict.get(Constants.BUNDLE_SYMBOLICNAME)+ ""String_Node_Str"";
  if (trace)   log.trace(""String_Node_Str"" + className + ""String_Node_Str""+ bname+ ""String_Node_Str"");
  BundleContext context=OsgiBundleUtils.getBundleContext(bundle);
  String packageName=className.substring(0,className.lastIndexOf('.'));
  if (className.indexOf('.') < 0) {
    if (trace)     log.trace(""String_Node_Str"");
    return;
  }
  Version iversion=hasImport(bundle,packageName);
  if (iversion != null && context != null) {
    if (trace)     log.trace(""String_Node_Str"" + iversion + ""String_Node_Str"");
    Bundle[] bundles=context.getBundles();
    for (int i=0; i < bundles.length; i++) {
      if (bundles[i].getBundleId() != bundle.getBundleId()) {
        Version exported=checkBundleForClass(bundles[i],className,iversion);
        if (exported != null && exported.equals(iversion) && rootClassName != null) {
          for (int j=0; j < bundles.length; j++) {
            Version rootexport=hasExport(bundles[j],rootClassName.substring(0,rootClassName.lastIndexOf('.')));
            if (rootexport != null) {
              Version rootimport=hasImport(bundles[j],packageName);
              if (rootimport == null || !rootimport.equals(iversion)) {
                if (trace)                 log.trace(""String_Node_Str"" + OsgiStringUtils.nullSafeNameAndSymName(bundles[j]) + ""String_Node_Str""+ rootClassName+ ""String_Node_Str""+ rootexport+ ""String_Node_Str""+ packageName+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  if (hasExport(bundle,packageName) != null) {
    if (trace)     log.trace(""String_Node_Str"");
    checkBundleForClass(bundle,className,iversion);
  }
}","/** 
 * Tries (through a best-guess attempt) to figure out why a given class could not be found. This method will search the given bundle and its classpath to determine the reason for which the class cannot be loaded. <p/> This method tries to be effective especially when the dealing with  {@link NoClassDefFoundError} caused by failure of loading transitiveclasses (such as getting a NCDFE when loading <code>foo.A</code> because <code>bar.B</code> cannot be found).
 * @param bundle the bundle to search for (and which should do the loading)
 * @param className the name of the class that failed to be loaded in dotformat (i.e. java.lang.Thread)
 * @param rootClassName the name of the class that triggered the loading(i.e. java.lang.Runnable)
 */
public static void debugClassLoading(Bundle bundle,String className,String rootClassName){
  boolean trace=log.isTraceEnabled();
  if (!trace)   return;
  Dictionary dict=bundle.getHeaders();
  String bname=dict.get(Constants.BUNDLE_NAME) + ""String_Node_Str"" + dict.get(Constants.BUNDLE_SYMBOLICNAME)+ ""String_Node_Str"";
  if (trace)   log.trace(""String_Node_Str"" + className + ""String_Node_Str""+ bname+ ""String_Node_Str"");
  BundleContext context=OsgiBundleUtils.getBundleContext(bundle);
  int pkgIndex=className.lastIndexOf('.');
  if (pkgIndex < 0) {
    if (trace)     log.trace(""String_Node_Str"");
    return;
  }
  String packageName=className.substring(0,pkgIndex);
  Version iversion=hasImport(bundle,packageName);
  if (iversion != null && context != null) {
    if (trace)     log.trace(""String_Node_Str"" + iversion + ""String_Node_Str"");
    Bundle[] bundles=context.getBundles();
    for (int i=0; i < bundles.length; i++) {
      if (bundles[i].getBundleId() != bundle.getBundleId()) {
        Version exported=checkBundleForClass(bundles[i],className,iversion);
        if (exported != null && exported.equals(iversion) && rootClassName != null) {
          for (int j=0; j < bundles.length; j++) {
            Version rootexport=hasExport(bundles[j],rootClassName.substring(0,rootClassName.lastIndexOf('.')));
            if (rootexport != null) {
              Version rootimport=hasImport(bundles[j],packageName);
              if (rootimport == null || !rootimport.equals(iversion)) {
                if (trace)                 log.trace(""String_Node_Str"" + OsgiStringUtils.nullSafeNameAndSymName(bundles[j]) + ""String_Node_Str""+ rootClassName+ ""String_Node_Str""+ rootexport+ ""String_Node_Str""+ packageName+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  if (hasExport(bundle,packageName) != null) {
    if (trace)     log.trace(""String_Node_Str"");
    checkBundleForClass(bundle,className,iversion);
  }
}",0.953526517222526
152929,"protected void preProcessBundleContext(BundleContext context) throws Exception {
  super.preProcessBundleContext(context);
  PermissionManager pm=new PermissionManager(context);
}","protected void preProcessBundleContext(BundleContext context) throws Exception {
  super.preProcessBundleContext(context);
  PermissionManager pm=new PermissionManager(context);
  if (isCloverEnabled()) {
    logger.warn(""String_Node_Str"");
  }
}",0.8423529411764706
152930,"protected ArtifactLocator getLocator(){
  ArtifactLocator defaultLocator=super.getLocator();
  if (isCloverEnabled()) {
    logger.warn(""String_Node_Str"");
    return new CloverClassifiedArtifactLocator(defaultLocator);
  }
  return defaultLocator;
}","protected ArtifactLocator getLocator(){
  ArtifactLocator defaultLocator=super.getLocator();
  if (isCloverEnabled()) {
    return new CloverClassifiedArtifactLocator(defaultLocator);
  }
  return defaultLocator;
}",0.5732758620689655
152931,"/** 
 * Constructs a new <code>ExtenderConfiguration</code> instance. Locates the extender configuration, creates an application context which will returned the extender items.
 * @param bundleContext extender OSGi bundle context
 */
public ExtenderConfiguration(BundleContext bundleContext){
  Bundle bundle=bundleContext.getBundle();
  Properties properties=new Properties(createDefaultProperties());
  Enumeration enm=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",false);
  if (enm == null) {
    log.info(""String_Node_Str"");
    taskExecutor=createDefaultTaskExecutor();
    eventMulticaster=new SimpleApplicationEventMulticaster();
    isMulticasterManagedInternally=true;
    contextCreator=createDefaultApplicationContextCreator();
    classLoader=BundleDelegatingClassLoader.createBundleClassLoaderFor(bundle);
  }
 else {
    String[] configs=copyEnumerationToList(enm);
    log.info(""String_Node_Str"" + ObjectUtils.nullSafeToString(configs));
    ConfigurableOsgiBundleApplicationContext context=new OsgiBundleXmlApplicationContext(configs);
    context.setBundleContext(bundleContext);
    context.refresh();
    taskExecutor=context.containsBean(TASK_EXECUTOR_NAME) ? (TaskExecutor)context.getBean(TASK_EXECUTOR_NAME,TaskExecutor.class) : createDefaultTaskExecutor();
    eventMulticaster=(ApplicationEventMulticaster)context.getBean(AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME);
    contextCreator=context.containsBean(CONTEXT_CREATOR_NAME) ? (OsgiApplicationContextCreator)context.getBean(CONTEXT_CREATOR_NAME,OsgiApplicationContextCreator.class) : createDefaultApplicationContextCreator();
    postProcessors.addAll(context.getBeansOfType(OsgiBeanFactoryPostProcessor.class).values());
    classLoader=context.getClassLoader();
    if (context.containsBean(PROPERTIES_NAME)) {
      Properties customProperties=(Properties)context.getBean(PROPERTIES_NAME,Properties.class);
      Enumeration propertyKey=customProperties.propertyNames();
      while (propertyKey.hasMoreElements()) {
        String property=(String)propertyKey.nextElement();
        properties.setProperty(property,customProperties.getProperty(property));
      }
    }
  }
  shutdownWaitTime=getShutdownWaitTime(properties);
  processAnnotation=getProcessAnnotations(properties);
}","/** 
 * Constructs a new <code>ExtenderConfiguration</code> instance. Locates the extender configuration, creates an application context which will returned the extender items.
 * @param bundleContext extender OSGi bundle context
 */
public ExtenderConfiguration(BundleContext bundleContext){
  Bundle bundle=bundleContext.getBundle();
  Properties properties=new Properties(createDefaultProperties());
  Enumeration enm=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",false);
  if (enm == null) {
    log.info(""String_Node_Str"");
    taskExecutor=createDefaultTaskExecutor();
    eventMulticaster=new SimpleApplicationEventMulticaster();
    isMulticasterManagedInternally=true;
    contextCreator=createDefaultApplicationContextCreator();
    classLoader=BundleDelegatingClassLoader.createBundleClassLoaderFor(bundle);
  }
 else {
    String[] configs=copyEnumerationToList(enm);
    log.info(""String_Node_Str"" + ObjectUtils.nullSafeToString(configs));
    extenderConfiguration=new OsgiBundleXmlApplicationContext(configs);
    extenderConfiguration.setBundleContext(bundleContext);
    extenderConfiguration.refresh();
    taskExecutor=extenderConfiguration.containsBean(TASK_EXECUTOR_NAME) ? (TaskExecutor)extenderConfiguration.getBean(TASK_EXECUTOR_NAME,TaskExecutor.class) : createDefaultTaskExecutor();
    eventMulticaster=(ApplicationEventMulticaster)extenderConfiguration.getBean(AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME);
    contextCreator=extenderConfiguration.containsBean(CONTEXT_CREATOR_NAME) ? (OsgiApplicationContextCreator)extenderConfiguration.getBean(CONTEXT_CREATOR_NAME,OsgiApplicationContextCreator.class) : createDefaultApplicationContextCreator();
    postProcessors.addAll(extenderConfiguration.getBeansOfType(OsgiBeanFactoryPostProcessor.class).values());
    classLoader=extenderConfiguration.getClassLoader();
    if (extenderConfiguration.containsBean(PROPERTIES_NAME)) {
      Properties customProperties=(Properties)extenderConfiguration.getBean(PROPERTIES_NAME,Properties.class);
      Enumeration propertyKey=customProperties.propertyNames();
      while (propertyKey.hasMoreElements()) {
        String property=(String)propertyKey.nextElement();
        properties.setProperty(property,customProperties.getProperty(property));
      }
    }
  }
  shutdownWaitTime=getShutdownWaitTime(properties);
  processAnnotation=getProcessAnnotations(properties);
}",0.9201440372802372
152932,"/** 
 * Returns the namespace/resolver invoker plugin. To do that, the Spring-DM core classes will be used assuming that its infrastructure is being used.
 * @return the invoking bundle
 */
private Bundle getInvokingBundle(){
  ClassLoader coreClassLoader=OsgiStringUtils.class.getClassLoader();
  try {
    Class cacheClass=coreClassLoader.loadClass(CACHE_CLASS);
    Field field=cacheClass.getField(FIELD_NAME);
    return (Bundle)((ThreadLocal)field.get(null)).get();
  }
 catch (  Exception ex) {
    log.trace(""String_Node_Str"",ex);
    return null;
  }
}","/** 
 * Returns the namespace/resolver invoker plugin. To do that, the Spring-DM core classes will be used assuming that its infrastructure is being used.
 * @return the invoking bundle
 */
private Bundle getInvokingBundle(){
  ClassLoader coreClassLoader=OsgiStringUtils.class.getClassLoader();
  try {
    Class cacheClass=coreClassLoader.loadClass(CACHE_CLASS);
    Field field=cacheClass.getField(FIELD_NAME);
    ReflectionUtils.makeAccessible(field);
    return (Bundle)((ThreadLocal)field.get(null)).get();
  }
 catch (  Exception ex) {
    log.trace(""String_Node_Str"",ex);
    return null;
  }
}",0.9630266552020637
152933,"public void serviceChanged(ServiceEvent event){
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    ServiceReference ref=event.getServiceReference();
    long serviceId=((Long)ref.getProperty(Constants.SERVICE_ID)).longValue();
    Integer rank=(Integer)ref.getProperty(Constants.SERVICE_RANKING);
    int ranking=(rank == null ? 0 : rank.intValue());
    boolean debug=log.isDebugEnabled();
switch (event.getType()) {
case (ServiceEvent.REGISTERED):
case (ServiceEvent.MODIFIED):
{
        if (updateWrapperIfNecessary(ref,serviceId,ranking)) {
          OsgiServiceBindingUtils.callListenersBind(bundleContext,proxy,ref,listeners);
          if (mandatoryListeners != null) {
            for (int i=0; i < mandatoryListeners.size(); i++) {
              if (debug)               log.debug(""String_Node_Str"");
              ((MandatoryDependencyListener)mandatoryListeners.get(i)).mandatoryDependencySatisfied(new MandatoryDependencyEvent(serviceImporter));
            }
          }
        }
        break;
      }
case (ServiceEvent.UNREGISTERING):
{
      boolean serviceRemoved=false;
synchronized (ServiceDynamicInterceptor.this) {
        if (wrapper != null) {
          if (serviceId == wrapper.getServiceId()) {
            serviceRemoved=true;
            wrapper.cleanup();
          }
        }
      }
      ServiceReference newReference=OsgiServiceReferenceUtils.getServiceReference(bundleContext,(filter == null ? null : filter.toString()));
      if (newReference != null) {
        serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED,newReference));
      }
 else {
        if (serviceRemoved) {
          if (mandatoryListeners != null) {
            for (int i=0; i < mandatoryListeners.size(); i++) {
              if (debug)               log.debug(""String_Node_Str"");
              ((MandatoryDependencyListener)mandatoryListeners.get(i)).mandatoryDependencyUnsatisfied(new MandatoryDependencyEvent(serviceImporter));
            }
          }
          OsgiServiceBindingUtils.callListenersUnbind(bundleContext,proxy,ref,listeners);
          if (debug) {
            String message=""String_Node_Str"" + ref + ""String_Node_Str"";
            if (serviceRemoved) {
              message+=""String_Node_Str"";
            }
 else {
              message+=""String_Node_Str"";
            }
            log.debug(message);
          }
        }
      }
      break;
    }
default :
  throw new IllegalArgumentException(""String_Node_Str"");
}
}
 catch (Throwable e) {
log.fatal(""String_Node_Str"",e);
}
 finally {
Thread.currentThread().setContextClassLoader(tccl);
}
}","public void serviceChanged(ServiceEvent event){
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    ServiceReference ref=event.getServiceReference();
    long serviceId=((Long)ref.getProperty(Constants.SERVICE_ID)).longValue();
    Integer rank=(Integer)ref.getProperty(Constants.SERVICE_RANKING);
    int ranking=(rank == null ? 0 : rank.intValue());
    boolean debug=log.isDebugEnabled();
switch (event.getType()) {
case (ServiceEvent.REGISTERED):
case (ServiceEvent.MODIFIED):
{
        if (updateWrapperIfNecessary(ref,serviceId,ranking)) {
          OsgiServiceBindingUtils.callListenersBind(bundleContext,proxy,ref,listeners);
          if (mandatoryListeners != null) {
            for (int i=0; i < mandatoryListeners.size(); i++) {
              if (debug)               log.debug(""String_Node_Str"");
              ((MandatoryDependencyListener)mandatoryListeners.get(i)).mandatoryDependencySatisfied(new MandatoryDependencyEvent(serviceImporter));
            }
          }
        }
        break;
      }
case (ServiceEvent.UNREGISTERING):
{
      boolean serviceRemoved=false;
      ServiceWrapper oldWrapper=wrapper;
synchronized (ServiceDynamicInterceptor.this) {
        if (wrapper != null) {
          if (serviceId == wrapper.getServiceId()) {
            serviceRemoved=true;
            wrapper=null;
          }
        }
      }
      ServiceReference newReference=OsgiServiceReferenceUtils.getServiceReference(bundleContext,(filter == null ? null : filter.toString()));
      if (newReference != null) {
        serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED,newReference));
      }
 else {
        if (serviceRemoved) {
          wrapper=oldWrapper;
          if (mandatoryListeners != null) {
            for (int i=0; i < mandatoryListeners.size(); i++) {
              if (debug)               log.debug(""String_Node_Str"");
              ((MandatoryDependencyListener)mandatoryListeners.get(i)).mandatoryDependencyUnsatisfied(new MandatoryDependencyEvent(serviceImporter));
            }
          }
          OsgiServiceBindingUtils.callListenersUnbind(bundleContext,proxy,ref,listeners);
          wrapper=null;
          if (debug) {
            String message=""String_Node_Str"" + ref + ""String_Node_Str"";
            if (serviceRemoved) {
              message+=""String_Node_Str"";
            }
 else {
              message+=""String_Node_Str"";
            }
            log.debug(message);
          }
        }
      }
      break;
    }
default :
  throw new IllegalArgumentException(""String_Node_Str"");
}
}
 catch (Throwable e) {
log.fatal(""String_Node_Str"",e);
}
 finally {
Thread.currentThread().setContextClassLoader(tccl);
}
}",0.9797868430723998
152934,"public ServiceWrapper(ServiceReference ref,BundleContext bundleContext){
  Assert.notNull(ref,""String_Node_Str"");
  Assert.notNull(bundleContext,""String_Node_Str"");
  reference=ref;
  this.context=bundleContext;
  serviceId=OsgiServiceReferenceUtils.getServiceId(ref);
  serviceRanking=OsgiServiceReferenceUtils.getServiceRanking(ref);
  toString=""String_Node_Str"" + serviceId + ""String_Node_Str""+ reference+ ""String_Node_Str"";
}","/** 
 * Constructs a new <code>ServiceWrapper</code> instance. Clone-like constructor.
 * @param wrapper
 */
public ServiceWrapper(ServiceWrapper wrapper){
  Assert.notNull(wrapper);
  this.reference=wrapper.reference;
  this.serviceId=wrapper.serviceId;
  this.serviceRanking=wrapper.serviceRanking;
  this.toString=wrapper.toString;
  this.context=wrapper.context;
}",0.2559598494353827
152935,"public static void callListenersUnbind(BundleContext context,Object serviceProxy,ServiceReference reference,OsgiServiceLifecycleListener[] listeners){
  if (!ObjectUtils.isEmpty(listeners)) {
    boolean debug=log.isDebugEnabled();
    Dictionary properties=OsgiServiceReferenceUtils.getServicePropertiesSnapshot(reference);
    for (int i=0; i < listeners.length; i++) {
      if (debug)       log.debug(""String_Node_Str"" + listeners[i] + ""String_Node_Str""+ reference);
      try {
        listeners[i].unbind(serviceProxy,(Map)properties);
      }
 catch (      Exception ex) {
        log.warn(""String_Node_Str"" + listeners[i] + ""String_Node_Str"",ex);
      }
    }
  }
}","public static void callListenersUnbind(BundleContext context,Object serviceProxy,ServiceReference reference,OsgiServiceLifecycleListener[] listeners){
  if (!ObjectUtils.isEmpty(listeners)) {
    boolean debug=log.isDebugEnabled();
    Dictionary properties=OsgiServiceReferenceUtils.getServicePropertiesSnapshot(reference);
    for (int i=0; i < listeners.length; i++) {
      if (debug)       log.debug(""String_Node_Str"" + listeners[i] + ""String_Node_Str""+ reference);
      try {
        listeners[i].unbind(serviceProxy,(Map)properties);
      }
 catch (      Exception ex) {
        log.warn(""String_Node_Str"" + listeners[i] + ""String_Node_Str"",ex);
      }
      if (debug)       log.debug(""String_Node_Str"" + listeners[i] + ""String_Node_Str""+ reference);
    }
  }
}",0.9315825846579128
152936,"public static void callListenersBind(BundleContext context,Object serviceProxy,ServiceReference reference,OsgiServiceLifecycleListener[] listeners){
  if (!ObjectUtils.isEmpty(listeners)) {
    boolean debug=log.isDebugEnabled();
    Dictionary properties=OsgiServiceReferenceUtils.getServicePropertiesSnapshot(reference);
    for (int i=0; i < listeners.length; i++) {
      if (debug)       log.debug(""String_Node_Str"" + listeners[i] + ""String_Node_Str""+ reference);
      try {
        listeners[i].bind(serviceProxy,(Map)properties);
      }
 catch (      Exception ex) {
        log.warn(""String_Node_Str"" + listeners[i] + ""String_Node_Str"",ex);
      }
    }
  }
}","public static void callListenersBind(BundleContext context,Object serviceProxy,ServiceReference reference,OsgiServiceLifecycleListener[] listeners){
  if (!ObjectUtils.isEmpty(listeners)) {
    boolean debug=log.isDebugEnabled();
    Dictionary properties=OsgiServiceReferenceUtils.getServicePropertiesSnapshot(reference);
    for (int i=0; i < listeners.length; i++) {
      if (debug)       log.debug(""String_Node_Str"" + listeners[i] + ""String_Node_Str""+ reference);
      try {
        listeners[i].bind(serviceProxy,(Map)properties);
      }
 catch (      Exception ex) {
        log.warn(""String_Node_Str"" + listeners[i] + ""String_Node_Str"",ex);
      }
      if (debug)       log.debug(""String_Node_Str"" + listeners[i] + ""String_Node_Str""+ reference);
    }
  }
}",0.9312022237665044
152937,"protected String[] getTestBundlesNames(){
  return new String[]{""String_Node_Str"" + getSpringOsgiVersion(),""String_Node_Str"" + getSpringOsgiVersion()};
}","protected String[] getTestBundlesNames(){
  return new String[]{""String_Node_Str"" + getSpringDMVersion(),""String_Node_Str"" + getSpringDMVersion()};
}",0.9602649006622516
152938,"public void testCallGetResourceOnADifferentBundle() throws Exception {
  Bundle[] bundles=bundleContext.getBundles();
  for (int i=1; i < bundles.length; i++) {
    Bundle bundle=bundles[i];
    logger.debug(""String_Node_Str"" + OsgiStringUtils.nullSafeNameAndSymName(bundle));
    URL url=bundle.getResource(LOCATION);
  }
}","public void testCallGetResourceOnADifferentBundle() throws Exception {
  Bundle[] bundles=bundleContext.getBundles();
  for (int i=1; i < bundles.length; i++) {
    Bundle bundle=bundles[i];
    logger.debug(""String_Node_Str"" + OsgiStringUtils.nullSafeNameAndSymName(bundle));
    URL url=bundle.getResource(LOCATION);
    if (!OsgiBundleUtils.isFragment(bundle))     assertNotNull(url);
  }
}",0.9037656903765692
152939,"public void testGetResourceThroughSpringResourceAbstraction() throws Exception {
  Bundle[] bundles=bundleContext.getBundles();
  for (int i=1; i < bundles.length; i++) {
    Bundle bundle=bundles[i];
    Resource res=new OsgiBundleResource(bundle,ResourceLoader.CLASSPATH_URL_PREFIX + LOCATION);
    System.out.println(res.exists());
  }
}","public void testGetResourceThroughSpringResourceAbstraction() throws Exception {
  Bundle[] bundles=bundleContext.getBundles();
  for (int i=1; i < bundles.length; i++) {
    Bundle bundle=bundles[i];
    Resource res=new OsgiBundleResource(bundle,ResourceLoader.CLASSPATH_URL_PREFIX + LOCATION);
    if (!OsgiBundleUtils.isFragment(bundle))     assertTrue(res.exists());
  }
}",0.900976290097629
152940,"public void testCallGetResourcesOnADifferentBundle() throws Exception {
  Bundle[] bundles=bundleContext.getBundles();
  for (int i=1; i < bundles.length; i++) {
    Bundle bundle=bundles[i];
    logger.debug(""String_Node_Str"" + OsgiStringUtils.nullSafeNameAndSymName(bundle));
    Enumeration enm=bundle.getResources(LOCATION);
  }
}","public void testCallGetResourcesOnADifferentBundle() throws Exception {
  Bundle[] bundles=bundleContext.getBundles();
  for (int i=1; i < bundles.length; i++) {
    Bundle bundle=bundles[i];
    logger.debug(""String_Node_Str"" + OsgiStringUtils.nullSafeNameAndSymName(bundle));
    Enumeration enm=bundle.getResources(LOCATION);
    if (!OsgiBundleUtils.isFragment(bundle))     assertNotNull(enm);
  }
}",0.9063772048846676
152941,"protected void setUp() throws Exception {
  super.setUp();
  this.serviceFactoryBean=new OsgiMultiServiceProxyFactoryBean();
  ref=new MockServiceReference(new String[]{Serializable.class.getName()});
  bundleContext=new MockBundleContext(){
    private final String filter_Serializable=OsgiFilterUtils.unifyFilter(Serializable.class,null);
    public ServiceReference[] getServiceReferences(    String clazz,    String filter) throws InvalidSyntaxException {
      if (this.filter_Serializable.equals(filter))       return new ServiceReference[]{ref};
      return new ServiceReference[0];
    }
  }
;
  serviceFactoryBean.setBundleContext(this.bundleContext);
  serviceFactoryBean.setBeanClassLoader(getClass().getClassLoader());
  serviceFactoryBean.setInterface(new Class[]{TestCase.class});
}","protected void setUp() throws Exception {
  super.setUp();
  this.serviceFactoryBean=new OsgiMultiServiceProxyFactoryBean();
  ref=new MockServiceReference(new String[]{Serializable.class.getName()});
  bundleContext=new MockBundleContext(){
    private final String filter_Serializable=OsgiFilterUtils.unifyFilter(Serializable.class,null);
    public ServiceReference[] getServiceReferences(    String clazz,    String filter) throws InvalidSyntaxException {
      if (this.filter_Serializable.equalsIgnoreCase(filter))       return new ServiceReference[]{ref};
      return new ServiceReference[0];
    }
  }
;
  serviceFactoryBean.setBundleContext(this.bundleContext);
  serviceFactoryBean.setBeanClassLoader(getClass().getClassLoader());
  serviceFactoryBean.setInterface(new Class[]{TestCase.class});
}",0.9937655860349128
152942,"public ServiceReference[] getServiceReferences(String clazz,String filter) throws InvalidSyntaxException {
  if (this.filter_Serializable.equals(filter))   return new ServiceReference[]{ref};
  return new ServiceReference[0];
}","public ServiceReference[] getServiceReferences(String clazz,String filter) throws InvalidSyntaxException {
  if (this.filter_Serializable.equalsIgnoreCase(filter))   return new ServiceReference[]{ref};
  return new ServiceReference[0];
}",0.978448275862069
152943,"public void testBundleWithHeaderAndNoMetaInfResourcesIsSpringPowered(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(null);
  aBundle.setEntryReturnOnNextCallToGetEntry(""String_Node_Str"");
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
}","public void testBundleWithHeaderAndNoMetaInfResourcesIsSpringPowered() throws Exception {
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(null);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(""String_Node_Str""));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
}",0.943674976915974
152944,"public void tstEmptyConfigLocationsInMetaInf(){
  System.out.println(""String_Node_Str"");
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(META_INF_SPRING_CONTENT[0]);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",1,configFiles.length);
  assertEquals(ConfigUtils.SPRING_CONTEXT_FILES,configFiles[0]);
}","public void tstEmptyConfigLocationsInMetaInf() throws Exception {
  System.out.println(""String_Node_Str"");
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(META_INF_SPRING_CONTENT[0]));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",1,configFiles.length);
  assertEquals(ConfigUtils.SPRING_CONTEXT_FILES,configFiles[0]);
}",0.9823874755381604
152945,"public void testCreateAsynchronouslyDefaultTrue(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(META_INF_SPRING_CONTENT[0]);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertTrue(""String_Node_Str"",config.isCreateAsynchronously());
}","public void testCreateAsynchronouslyDefaultTrue() throws Exception {
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(META_INF_SPRING_CONTENT[0]));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertTrue(""String_Node_Str"",config.isCreateAsynchronously());
}",0.9779951100244498
152946,"public void tstConfigLocationsInMetaInfWithWildcardHeader(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(META_INF_SPRING_CONTENT[0]);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",1,configFiles.length);
  assertEquals(ConfigUtils.SPRING_CONTEXT_FILES,configFiles[0]);
}","public void tstConfigLocationsInMetaInfWithWildcardHeader() throws Exception {
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(META_INF_SPRING_CONTENT[0]));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",1,configFiles.length);
  assertEquals(ConfigUtils.SPRING_CONTEXT_FILES,configFiles[0]);
}",0.9817197020988492
152947,"public void testSetCreateAsynchronouslyFalse(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(META_INF_SPRING_CONTENT[0]);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertFalse(""String_Node_Str"",config.isCreateAsynchronously());
}","public void testSetCreateAsynchronouslyFalse() throws Exception {
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(META_INF_SPRING_CONTENT[0]));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertFalse(""String_Node_Str"",config.isCreateAsynchronously());
}",0.9779231398201144
152948,"public void tstConfigLocationsInMetaInfWithHeaderAndDependencies(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(META_INF_SPRING_CONTENT[0]);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",1,configFiles.length);
  assertEquals(""String_Node_Str"",configFiles[0]);
}","public void tstConfigLocationsInMetaInfWithHeaderAndDependencies() throws Exception {
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(META_INF_SPRING_CONTENT[0]));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",1,configFiles.length);
  assertEquals(""String_Node_Str"",configFiles[0]);
}",0.9815195071868584
152949,"public void tstHeaderWithBadEntry(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setEntryReturnOnNextCallToGetEntry(""String_Node_Str"");
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertFalse(""String_Node_Str"",config.isSpringPoweredBundle());
  String[] configFiles=config.getConfigurationLocations();
  assertEquals(""String_Node_Str"",0,configFiles.length);
}","public void tstHeaderWithBadEntry() throws Exception {
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(""String_Node_Str""));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertFalse(""String_Node_Str"",config.isSpringPoweredBundle());
  String[] configFiles=config.getConfigurationLocations();
  assertEquals(""String_Node_Str"",0,configFiles.length);
}",0.9760425909494232
152950,"public void tstConfigLocationsInMetaInfWithHeader(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(""String_Node_Str"");
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",configFiles[0]);
}","public void tstConfigLocationsInMetaInfWithHeader() throws Exception {
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(new URL(""String_Node_Str""));
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",configFiles[0]);
}",0.9531129900076863
152951,"public void tstTaskExecutorCreation() throws Exception {
  MockControl bundleContextControl=MockControl.createNiceControl(BundleContext.class);
  BundleContext context=(BundleContext)bundleContextControl.getMock();
  bundleContextControl.expectAndReturn(context.getBundle(),new MockBundle());
  bundleContextControl.expectAndReturn(context.getBundles(),new Bundle[0]);
  Dictionary headers=new Hashtable();
  headers.put(Constants.BUNDLE_NAME,""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setEntryReturnOnNextCallToGetEntry(new ClassPathResource(""String_Node_Str"").getURL().toExternalForm());
  bundleContextControl.expectAndReturn(context.getBundle(),aBundle);
  bundleContextControl.expectAndReturn(context.getBundle(),aBundle);
  bundleContextControl.expectAndReturn(context.getBundle(),aBundle);
  bundleContextControl.replay();
  this.listener.start(context);
  MockBundle eventBundle=new MockBundle();
  eventBundle.setBundleId(1);
  BundleEvent event=new BundleEvent(BundleEvent.STARTED,eventBundle);
  try {
    this.listener.bundleChanged(event);
    fail(""String_Node_Str"");
  }
 catch (  RuntimeException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
}","public void tstTaskExecutorCreation() throws Exception {
  MockControl bundleContextControl=MockControl.createNiceControl(BundleContext.class);
  BundleContext context=(BundleContext)bundleContextControl.getMock();
  bundleContextControl.expectAndReturn(context.getBundle(),new MockBundle());
  bundleContextControl.expectAndReturn(context.getBundles(),new Bundle[0]);
  Dictionary headers=new Hashtable();
  headers.put(Constants.BUNDLE_NAME,""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setEntryReturnOnNextCallToGetEntry(new ClassPathResource(""String_Node_Str"").getURL());
  bundleContextControl.expectAndReturn(context.getBundle(),aBundle);
  bundleContextControl.expectAndReturn(context.getBundle(),aBundle);
  bundleContextControl.expectAndReturn(context.getBundle(),aBundle);
  bundleContextControl.replay();
  this.listener.start(context);
  MockBundle eventBundle=new MockBundle();
  eventBundle.setBundleId(1);
  BundleEvent event=new BundleEvent(BundleEvent.STARTED,eventBundle);
  try {
    this.listener.bundleChanged(event);
    fail(""String_Node_Str"");
  }
 catch (  RuntimeException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
}",0.9931754315535928
152952,"public Object nextElement(){
  return (source[index++]);
}","public Object nextElement(){
  if (hasMoreElements())   return (source[index++]);
 else   throw new NoSuchElementException();
}",0.6270270270270271
152953,"public void setEntryReturnOnNextCallToGetEntry(String entry){
  this.nextEntryResult=entry;
}","public void setEntryReturnOnNextCallToGetEntry(URL entry){
  this.nextEntryResult=entry;
}",0.9508196721311476
152954,"public URL getEntry(String name){
  if (this.nextEntryResult != null) {
    try {
      URL result=new URL(this.nextEntryResult);
      this.nextEntryResult=null;
      return result;
    }
 catch (    MalformedURLException ex) {
    }
    this.nextEntryResult=null;
    return null;
  }
 else {
    return super.getEntry(name);
  }
}","public URL getEntry(String name){
  if (this.nextEntryResult != null) {
    URL result=this.nextEntryResult;
    this.nextEntryResult=null;
    return result;
  }
 else {
    return super.getEntry(name);
  }
}",0.714548802946593
152955,"/** 
 * Delegates to the classloader. Identical to classLoader.getResources(path + filePattern);
 * @see org.osgi.framework.Bundle#findEntries(java.lang.String,java.lang.String,boolean)
 */
public Enumeration findEntries(String path,String filePattern,boolean recurse){
  Enumeration enm=null;
  try {
    enm=loader.getResources(path + ""String_Node_Str"" + filePattern);
  }
 catch (  Exception ex) {
  }
  return (enm == null ? new EmptyEnumeration() : enm);
}","/** 
 * Delegates to the classloader. Identical to classLoader.getResources(path + filePattern);
 * @see org.osgi.framework.Bundle#findEntries(java.lang.String,java.lang.String,boolean)
 */
public Enumeration findEntries(String path,String filePattern,boolean recurse){
  Enumeration enm=null;
  try {
    enm=loader.getResources(path + ""String_Node_Str"" + filePattern);
  }
 catch (  IOException ex) {
    System.err.println(""String_Node_Str"" + ex);
  }
  return (enm == null ? new EmptyEnumeration() : enm);
}",0.948559670781893
152956,"/** 
 * If the Spring-Context header is present the resource files defined there will be used, otherwise all xml files in META-INF/spring will be treated as application context configuration files.
 */
private void initialise(){
  Dictionary headers=bundle.getHeaders();
  this.isSpringPoweredBundle=ConfigUtils.isSpringOsgiPoweredBundle(bundle);
  if (isSpringPoweredBundle) {
    String springContextHeader=ConfigUtils.getSpringContextHeader(headers);
    if (StringUtils.hasText(springContextHeader)) {
      this.timeout=ConfigUtils.getTimeOut(headers);
      this.publishContextAsService=ConfigUtils.getPublishContext(headers);
      this.asyncCreation=ConfigUtils.getCreateAsync(headers);
      try {
        this.configurationLocations=ConfigUtils.getConfigLocations(headers,bundle);
      }
 catch (      MissingConfiguration e) {
        this.configurationLocations=new String[0];
        this.isSpringPoweredBundle=false;
      }
      if (this.configurationLocations.length == 0) {
        this.isSpringPoweredBundle=false;
      }
    }
  }
}","/** 
 * If the Spring-Context header is present the resource files defined there will be used, otherwise all xml files in META-INF/spring will be treated as application context configuration files.
 */
private void initialise(){
  Dictionary headers=bundle.getHeaders();
  this.isSpringPoweredBundle=ConfigUtils.isSpringOsgiPoweredBundle(bundle);
  if (isSpringPoweredBundle) {
    String springContextHeader=ConfigUtils.getSpringContextHeader(headers);
    if (StringUtils.hasText(springContextHeader)) {
      this.timeout=ConfigUtils.getTimeOut(headers);
      this.publishContextAsService=ConfigUtils.getPublishContext(headers);
      this.asyncCreation=ConfigUtils.getCreateAsync(headers);
      try {
        this.configurationLocations=ConfigUtils.getConfigLocations(headers,bundle);
      }
 catch (      MissingConfiguration e) {
        log.error(""String_Node_Str"" + e.getMissingResource() + ""String_Node_Str""+ toString,e);
        this.configurationLocations=new String[0];
        this.isSpringPoweredBundle=false;
      }
      if (this.configurationLocations.length == 0) {
        log.error(""String_Node_Str"" + toString);
        this.isSpringPoweredBundle=false;
      }
    }
  }
}",0.9360568383658968
152957,"/** 
 * Return the config locations from the Spring-Context header. The returned Strings can be sent to a  {@link org.springframework.core.io.ResourceLoader} for loading theconfigurations.
 * @param headers
 * @return
 */
public static String[] getConfigLocations(Dictionary headers,Bundle bundle) throws MissingConfiguration {
  String header=getSpringContextHeader(headers);
  if (StringUtils.hasText(header)) {
    String locations=StringUtils.tokenizeToStringArray(header,DIRECTIVE_SEPARATOR)[0];
    String[] ctxEntries=StringUtils.tokenizeToStringArray(locations,CONTEXT_LOCATION_SEPARATOR);
    ArrayList entries=new ArrayList();
    for (int i=0; i < ctxEntries.length; i++) {
      if (CONFIG_WILDCARD.equals(ctxEntries[i])) {
        Enumeration defaultConfig=bundle.findEntries(CONTEXT_DIR,CONTEXT_FILES,false);
        if (defaultConfig != null) {
          while (defaultConfig.hasMoreElements()) {
            entries.add(defaultConfig.nextElement().toString());
          }
        }
      }
 else {
        if (bundle.getEntry(ctxEntries[i]) == null) {
          throw new MissingConfiguration(ctxEntries[i]);
        }
        String entry=OsgiBundleResource.BUNDLE_URL_PREFIX + ctxEntries[i];
        entries.add(entry);
      }
    }
    ctxEntries=(String[])entries.toArray(new String[entries.size()]);
    return StringUtils.removeDuplicateStrings(ctxEntries);
  }
  return new String[0];
}","/** 
 * Return the config locations from the Spring-Context header. The returned Strings can be sent to a  {@link org.springframework.core.io.ResourceLoader} for loading theconfigurations.
 * @param headers
 * @return
 */
public static String[] getConfigLocations(Dictionary headers,Bundle bundle) throws MissingConfiguration {
  String header=getSpringContextHeader(headers);
  if (StringUtils.hasText(header)) {
    String locations=StringUtils.tokenizeToStringArray(header,DIRECTIVE_SEPARATOR)[0];
    String[] ctxEntries=StringUtils.tokenizeToStringArray(locations,CONTEXT_LOCATION_SEPARATOR);
    ArrayList entries=new ArrayList();
    for (int i=0; i < ctxEntries.length; i++) {
      if (CONFIG_WILDCARD.equals(ctxEntries[i])) {
        Enumeration defaultConfig=bundle.findEntries(CONTEXT_DIR,CONTEXT_FILES,false);
        if (defaultConfig != null) {
          while (defaultConfig.hasMoreElements()) {
            entries.add(defaultConfig.nextElement().toString());
          }
        }
      }
 else {
        if (bundle.getEntry(ctxEntries[i]) == null) {
          MissingConfiguration mc=new MissingConfiguration(""String_Node_Str"" + ctxEntries[i]);
          mc.setMissingResource(ctxEntries[i]);
          throw mc;
        }
        String entry=OsgiBundleResource.BUNDLE_URL_PREFIX + ctxEntries[i];
        entries.add(entry);
      }
    }
    ctxEntries=(String[])entries.toArray(new String[entries.size()]);
    return StringUtils.removeDuplicateStrings(ctxEntries);
  }
  return new String[0];
}",0.935792349726776
152958,"private void fail(ServiceDependentOsgiBundleXmlApplicationContext applicationContext,Throwable t,Long bundleKey){
  applicationContext.interrupt();
  if (log.isErrorEnabled()) {
    log.error(""String_Node_Str"" + bundle.getSymbolicName() + ""String_Node_Str"",t);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"",creationTrace);
    }
  }
synchronized (this.applicationContextMap) {
synchronized (this.contextsPendingInitializationMap) {
      this.contextsPendingInitializationMap.remove(bundleKey);
      this.applicationContextMap.remove(bundleKey);
    }
  }
  postEvent(BundleEvent.STOPPED);
}","protected void fail(ServiceDependentOsgiBundleXmlApplicationContext applicationContext,Throwable t,Long bundleKey){
  applicationContext.interrupt();
synchronized (this.applicationContextMap) {
synchronized (this.contextsPendingInitializationMap) {
      this.contextsPendingInitializationMap.remove(bundleKey);
      this.applicationContextMap.remove(bundleKey);
    }
  }
  postEvent(BundleEvent.STOPPED);
  StringBuffer buf=new StringBuffer();
  DependencyListener listener=applicationContext.getListener();
  if (listener == null || listener.getUnsatisfiedDependencies().isEmpty()) {
    buf.append(""String_Node_Str"");
  }
 else {
    for (Iterator dependencies=listener.getUnsatisfiedDependencies().iterator(); dependencies.hasNext(); ) {
      Dependency dependency=(Dependency)dependencies.next();
      buf.append(dependency.toString());
      if (dependencies.hasNext()) {
        buf.append(""String_Node_Str"");
      }
    }
  }
  if (log.isErrorEnabled()) {
    log.error(""String_Node_Str"" + bundle.getSymbolicName() + ""String_Node_Str""+ buf.toString(),t);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + bundle.getSymbolicName() + ""String_Node_Str""+ ""String_Node_Str"",creationTrace);
    }
  }
}",0.4381471389645776
152959,"private void postEvent(int starting){
  mcast.multicastEvent(new SpringBundleEvent(starting,bundle));
}","protected void postEvent(int starting){
  mcast.multicastEvent(new SpringBundleEvent(starting,bundle));
}",0.9615384615384616
152960,"/** 
 * If the Spring-Context header is present the resource files defined there will be used, otherwise all xml files in META-INF/spring will be treated as application context configuration files.
 */
private void initialise(){
  Dictionary headers=bundle.getHeaders();
  this.isSpringPoweredBundle=ConfigUtils.isSpringOsgiPoweredBundle(bundle);
  if (isSpringPoweredBundle) {
    String springContextHeader=ConfigUtils.getSpringContextHeader(headers);
    if (StringUtils.hasText(springContextHeader)) {
      this.timeout=ConfigUtils.getTimeOut(headers);
      this.publishContextAsService=ConfigUtils.getPublishContext(headers);
      this.asyncCreation=ConfigUtils.getCreateAsync(headers);
      try {
        this.configurationLocations=ConfigUtils.getConfigLocations(headers,bundle);
      }
 catch (      MissingConfiguration e) {
        log.error(""String_Node_Str"" + e.getMissingResource() + ""String_Node_Str""+ toString,e);
        this.configurationLocations=new String[0];
        this.isSpringPoweredBundle=false;
      }
      if (this.configurationLocations.length == 0) {
        log.error(""String_Node_Str"" + toString);
        this.isSpringPoweredBundle=false;
      }
    }
  }
}","/** 
 * If the Spring-Context header is present the resource files defined there will be used, otherwise all xml files in META-INF/spring will be treated as application context configuration files.
 */
private void initialise(){
  Dictionary headers=bundle.getHeaders();
  this.isSpringPoweredBundle=ConfigUtils.isSpringOsgiPoweredBundle(bundle);
  if (isSpringPoweredBundle) {
    String springContextHeader=ConfigUtils.getSpringContextHeader(headers);
    if (StringUtils.hasText(springContextHeader)) {
      this.timeout=ConfigUtils.getTimeOut(headers);
      this.publishContextAsService=ConfigUtils.getPublishContext(headers);
      this.asyncCreation=ConfigUtils.getCreateAsync(headers);
    }
    try {
      this.configurationLocations=ConfigUtils.getConfigLocations(headers,bundle);
      if (this.configurationLocations.length == 0) {
        log.error(""String_Node_Str"" + OsgiBundleUtils.getNullSafeSymbolicName(bundle));
        this.isSpringPoweredBundle=false;
      }
    }
 catch (    MissingConfiguration e) {
      log.error(""String_Node_Str"" + e.getMissingResource() + ""String_Node_Str""+ OsgiBundleUtils.getNullSafeSymbolicName(bundle));
      this.configurationLocations=new String[0];
      this.isSpringPoweredBundle=false;
    }
  }
}",0.7866449511400652
152961,"/** 
 * Return the config locations from the Spring-Context header. The returned Strings can be sent to a  {@link org.springframework.core.io.ResourceLoader} for loading theconfigurations.
 * @param headers
 * @return
 */
public static String[] getConfigLocations(Dictionary headers,Bundle bundle) throws MissingConfiguration {
  String header=getSpringContextHeader(headers);
  if (StringUtils.hasText(header)) {
    String locations=StringUtils.tokenizeToStringArray(header,DIRECTIVE_SEPARATOR)[0];
    String[] ctxEntries=StringUtils.tokenizeToStringArray(locations,CONTEXT_LOCATION_SEPARATOR);
    ArrayList entries=new ArrayList();
    for (int i=0; i < ctxEntries.length; i++) {
      if (CONFIG_WILDCARD.equals(ctxEntries[i])) {
        Enumeration defaultConfig=bundle.findEntries(CONTEXT_DIR,CONTEXT_FILES,false);
        if (defaultConfig != null) {
          while (defaultConfig.hasMoreElements()) {
            entries.add(defaultConfig.nextElement().toString());
          }
        }
      }
 else {
        if (bundle.getEntry(ctxEntries[i]) == null) {
          MissingConfiguration mc=new MissingConfiguration(""String_Node_Str"" + ctxEntries[i]);
          mc.setMissingResource(ctxEntries[i]);
          throw mc;
        }
        String entry=OsgiBundleResource.BUNDLE_URL_PREFIX + ctxEntries[i];
        entries.add(entry);
      }
    }
    ctxEntries=(String[])entries.toArray(new String[entries.size()]);
    return StringUtils.removeDuplicateStrings(ctxEntries);
  }
  return new String[0];
}","/** 
 * Return the config locations from the Spring-Context header. The returned Strings can be sent to a  {@link org.springframework.core.io.ResourceLoader} for loading theconfigurations.
 * @param headers
 * @return
 */
public static String[] getConfigLocations(Dictionary headers,Bundle bundle) throws MissingConfiguration {
  String header=getSpringContextHeader(headers);
  String[] ctxEntries;
  if (StringUtils.hasText(header)) {
    String locations=StringUtils.tokenizeToStringArray(header,DIRECTIVE_SEPARATOR)[0];
    ctxEntries=StringUtils.tokenizeToStringArray(locations,CONTEXT_LOCATION_SEPARATOR);
  }
 else {
    ctxEntries=new String[]{SPRING_CONTEXT_DIRECTORY};
  }
  ArrayList entries=new ArrayList();
  for (int i=0; i < ctxEntries.length; i++) {
    if (CONFIG_WILDCARD.equals(ctxEntries[i]) || SPRING_CONTEXT_DIRECTORY.equals(ctxEntries[i])) {
      Enumeration defaultConfig=bundle.findEntries(CONTEXT_DIR,CONTEXT_FILES,false);
      if (defaultConfig != null && defaultConfig.hasMoreElements()) {
        entries.add(SPRING_CONTEXT_DIRECTORY);
      }
    }
 else {
      if (bundle.getEntry(ctxEntries[i]) == null) {
        MissingConfiguration mc=new MissingConfiguration(""String_Node_Str"" + ctxEntries[i]);
        mc.setMissingResource(ctxEntries[i]);
        throw mc;
      }
 else {
        entries.add(OsgiBundleResource.BUNDLE_URL_PREFIX + ctxEntries[i]);
      }
    }
  }
  ctxEntries=(String[])entries.toArray(new String[entries.size()]);
  return StringUtils.removeDuplicateStrings(ctxEntries);
}",0.8314754098360656
152962,"public void testConfigLocationsInMetaInfWithWildcardHeader(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(META_INF_SPRING_CONTENT[0]);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",2,configFiles.length);
  assertEquals(""String_Node_Str"",configFiles[0]);
  assertEquals(""String_Node_Str"",configFiles[1]);
}","public void testConfigLocationsInMetaInfWithWildcardHeader(){
  Dictionary headers=new Hashtable();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(headers);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  aBundle.setEntryReturnOnNextCallToGetEntry(META_INF_SPRING_CONTENT[0]);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  String[] configFiles=config.getConfigurationLocations();
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
  assertEquals(""String_Node_Str"",1,configFiles.length);
  assertEquals(ConfigUtils.SPRING_CONTEXT_DIRECTORY,configFiles[0]);
}",0.9295774647887324
152963,"public void testBundleWithSpringResourcesAndNoHeaderIsSpringPowered(){
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(null);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
}","public void testBundleWithSpringResourcesAndNoHeaderIsSpringPowered(){
  EntryLookupControllingMockBundle aBundle=new RepeatingEntryLookupControllingMockBundle(null);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  ApplicationContextConfiguration config=new ApplicationContextConfiguration(aBundle);
  assertTrue(""String_Node_Str"",config.isSpringPoweredBundle());
}",0.9885350318471338
152964,"public void testCreationFailureEvent(){
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(null);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  MockControl mockListener=MockControl.createControl(ApplicationListener.class);
  ApplicationListener listener=(ApplicationListener)mockListener.getMock();
  mcast.addApplicationListener(listener);
  final ServiceDependentOsgiBundleXmlApplicationContext testContext=new ServiceDependentOsgiBundleXmlApplicationContext(aBundle.getContext(),META_INF_SPRING_CONTENT){
    public void create(    Runnable postAction){
      throw new RuntimeException(""String_Node_Str""){
        public synchronized Throwable fillInStackTrace(){
          return null;
        }
      }
;
    }
  }
;
  ApplicationContextCreator creator=new ApplicationContextCreator(aBundle,contextMap,initMap,this.pendingRegistrationTasks,null,new ApplicationContextConfiguration(aBundle),mcast){
    protected ServiceDependentOsgiBundleXmlApplicationContext createApplicationContext(    BundleContext context,    String[] locations){
      return testContext;
    }
  }
;
  listener.onApplicationEvent(new SpringBundleEvent(BundleEvent.STARTING,aBundle));
  listener.onApplicationEvent(new SpringBundleEvent(BundleEvent.STOPPED,aBundle));
  mockListener.replay();
  creator.create(null);
  mockListener.verify();
  mcast.removeAllListeners();
}","public void testCreationFailureEvent(){
  EntryLookupControllingMockBundle aBundle=new RepeatingEntryLookupControllingMockBundle(null);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  MockControl mockListener=MockControl.createControl(ApplicationListener.class);
  ApplicationListener listener=(ApplicationListener)mockListener.getMock();
  mcast.addApplicationListener(listener);
  final ServiceDependentOsgiBundleXmlApplicationContext testContext=new ServiceDependentOsgiBundleXmlApplicationContext(aBundle.getContext(),META_INF_SPRING_CONTENT){
    public void create(    Runnable postAction){
      throw new RuntimeException(""String_Node_Str""){
        public synchronized Throwable fillInStackTrace(){
          return null;
        }
      }
;
    }
  }
;
  ApplicationContextCreator creator=new ApplicationContextCreator(aBundle,contextMap,initMap,this.pendingRegistrationTasks,null,new ApplicationContextConfiguration(aBundle),mcast){
    protected ServiceDependentOsgiBundleXmlApplicationContext createApplicationContext(    BundleContext context,    String[] locations){
      return testContext;
    }
  }
;
  listener.onApplicationEvent(new SpringBundleEvent(BundleEvent.STARTING,aBundle));
  listener.onApplicationEvent(new SpringBundleEvent(BundleEvent.STOPPED,aBundle));
  mockListener.replay();
  creator.create(null);
  mockListener.verify();
  mcast.removeAllListeners();
}",0.9968298696724198
152965,"public void testContextIsPlacedIntoPendingMapPriorToRefreshAndMovedAfterwards(){
  EntryLookupControllingMockBundle aBundle=new EntryLookupControllingMockBundle(null);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  final MapTestingBundleXmlApplicationContext testingContext=new MapTestingBundleXmlApplicationContext(aBundle.getContext(),META_INF_SPRING_CONTENT);
  ApplicationContextCreator creator=new ApplicationContextCreator(aBundle,contextMap,initMap,this.pendingRegistrationTasks,null,new ApplicationContextConfiguration(aBundle),mcast){
    protected ServiceDependentOsgiBundleXmlApplicationContext createApplicationContext(    BundleContext context,    String[] locations){
      return testingContext;
    }
  }
;
  creator.create(null);
  assertTrue(""String_Node_Str"",testingContext.isRefreshed);
  Long key=new Long(0);
  assertFalse(initMap.containsKey(key));
  assertTrue(contextMap.containsKey(key));
  assertEquals(""String_Node_Str"",testingContext,contextMap.get(key));
}","public void testContextIsPlacedIntoPendingMapPriorToRefreshAndMovedAfterwards(){
  EntryLookupControllingMockBundle aBundle=new RepeatingEntryLookupControllingMockBundle(null);
  aBundle.setResultsToReturnOnNextCallToFindEntries(META_INF_SPRING_CONTENT);
  final MapTestingBundleXmlApplicationContext testingContext=new MapTestingBundleXmlApplicationContext(aBundle.getContext(),META_INF_SPRING_CONTENT);
  ApplicationContextCreator creator=new ApplicationContextCreator(aBundle,contextMap,initMap,this.pendingRegistrationTasks,null,new ApplicationContextConfiguration(aBundle),mcast){
    protected ServiceDependentOsgiBundleXmlApplicationContext createApplicationContext(    BundleContext context,    String[] locations){
      return testingContext;
    }
  }
;
  creator.create(null);
  assertTrue(""String_Node_Str"",testingContext.isRefreshed);
  Long key=new Long(0);
  assertFalse(initMap.containsKey(key));
  assertTrue(contextMap.containsKey(key));
  assertEquals(""String_Node_Str"",testingContext,contextMap.get(key));
}",0.9956033219345384
152966,"private Enumeration createEnumerationOver(String[] entries){
  return new ArrayEnumerator(entries);
}","protected Enumeration createEnumerationOver(String[] entries){
  return new ArrayEnumerator(entries);
}",0.9607843137254902
152967,"private Version getVersion(String stmt,String packageName){
  if (stmt != null) {
    for (StringTokenizer strok=new StringTokenizer(stmt,""String_Node_Str""); strok.hasMoreTokens(); ) {
      StringTokenizer parts=new StringTokenizer(strok.nextToken(),""String_Node_Str"");
      String pkg=parts.nextToken().trim();
      if (pkg.equals(packageName)) {
        Version version=Version.emptyVersion;
        for (; parts.hasMoreTokens(); ) {
          String modifier=parts.nextToken().trim();
          if (modifier.startsWith(""String_Node_Str"")) {
            String vstr=modifier.substring(modifier.indexOf(""String_Node_Str"") + 1).trim();
            if (vstr.startsWith(""String_Node_Str""))             vstr=vstr.substring(1);
            if (vstr.endsWith(""String_Node_Str""))             vstr=vstr.substring(0,vstr.length() - 2);
            version=Version.parseVersion(vstr);
          }
        }
        return version;
      }
    }
  }
  return null;
}","private static Version getVersion(String stmt,String packageName){
  if (stmt != null) {
    for (StringTokenizer strok=new StringTokenizer(stmt,""String_Node_Str""); strok.hasMoreTokens(); ) {
      StringTokenizer parts=new StringTokenizer(strok.nextToken(),""String_Node_Str"");
      String pkg=parts.nextToken().trim();
      if (pkg.equals(packageName)) {
        Version version=Version.emptyVersion;
        for (; parts.hasMoreTokens(); ) {
          String modifier=parts.nextToken().trim();
          if (modifier.startsWith(""String_Node_Str"")) {
            String vstr=modifier.substring(modifier.indexOf(""String_Node_Str"") + 1).trim();
            if (vstr.startsWith(""String_Node_Str""))             vstr=vstr.substring(1);
            if (vstr.endsWith(""String_Node_Str""))             vstr=vstr.substring(0,vstr.length() - 2);
            version=Version.parseVersion(vstr);
          }
        }
        return version;
      }
    }
  }
  return null;
}",0.9963636363636365
152968,"/** 
 * A best-guess attempt at figuring out why the class could not be found.
 * @param name of the class we are trying to find.
 */
private synchronized void debugClassLoading(String name,String root){
  Dictionary dict=backingBundle.getHeaders();
  String bname=dict.get(Constants.BUNDLE_NAME) + ""String_Node_Str"" + dict.get(Constants.BUNDLE_SYMBOLICNAME)+ ""String_Node_Str"";
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"" + name + ""String_Node_Str""+ bname+ ""String_Node_Str"");
  BundleContext context=OsgiBundleUtils.getBundleContext(backingBundle);
  String packageName=name.substring(0,name.lastIndexOf('.'));
  if (name.indexOf('.') < 0) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"");
    return;
  }
  Version iversion=hasImport(backingBundle,packageName);
  if (iversion != null && context != null) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + iversion + ""String_Node_Str"");
    Bundle[] bundles=context.getBundles();
    for (int i=0; i < bundles.length; i++) {
      if (bundles[i].getBundleId() != backingBundle.getBundleId()) {
        Version exported=checkBundleForClass(bundles[i],name,iversion);
        if (exported != null && exported.equals(iversion) && root != null) {
          for (int j=0; j < bundles.length; j++) {
            Version rootexport=hasExport(bundles[j],root.substring(0,root.lastIndexOf('.')));
            if (rootexport != null) {
              Version rootimport=hasImport(bundles[j],packageName);
              if (rootimport == null || !rootimport.equals(iversion)) {
                if (log.isTraceEnabled())                 log.trace(""String_Node_Str"" + getBundleName(bundles[j]) + ""String_Node_Str""+ root+ ""String_Node_Str""+ rootexport+ ""String_Node_Str""+ packageName+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  if (hasExport(backingBundle,packageName) != null) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"");
    checkBundleForClass(backingBundle,name,iversion);
  }
}","/** 
 * A best-guess attempt at figuring out why the class could not be found.
 * @param name of the class we are trying to find.
 */
public static void debugClassLoading(Bundle backingBundle,String name,String root){
  Dictionary dict=backingBundle.getHeaders();
  String bname=dict.get(Constants.BUNDLE_NAME) + ""String_Node_Str"" + dict.get(Constants.BUNDLE_SYMBOLICNAME)+ ""String_Node_Str"";
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"" + name + ""String_Node_Str""+ bname+ ""String_Node_Str"");
  BundleContext context=OsgiBundleUtils.getBundleContext(backingBundle);
  String packageName=name.substring(0,name.lastIndexOf('.'));
  if (name.indexOf('.') < 0) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"");
    return;
  }
  Version iversion=hasImport(backingBundle,packageName);
  if (iversion != null && context != null) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + iversion + ""String_Node_Str"");
    Bundle[] bundles=context.getBundles();
    for (int i=0; i < bundles.length; i++) {
      if (bundles[i].getBundleId() != backingBundle.getBundleId()) {
        Version exported=checkBundleForClass(bundles[i],name,iversion);
        if (exported != null && exported.equals(iversion) && root != null) {
          for (int j=0; j < bundles.length; j++) {
            Version rootexport=hasExport(bundles[j],root.substring(0,root.lastIndexOf('.')));
            if (rootexport != null) {
              Version rootimport=hasImport(bundles[j],packageName);
              if (rootimport == null || !rootimport.equals(iversion)) {
                if (log.isTraceEnabled())                 log.trace(""String_Node_Str"" + getBundleName(bundles[j]) + ""String_Node_Str""+ root+ ""String_Node_Str""+ rootexport+ ""String_Node_Str""+ packageName+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  if (hasExport(backingBundle,packageName) != null) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"");
    checkBundleForClass(backingBundle,name,iversion);
  }
}",0.9869628198937712
152969,"private URL checkBundleJarsForClass(Bundle bundle,String name){
  String cname=name.replace('.','/') + ""String_Node_Str"";
  for (Enumeration e=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",true); e != null && e.hasMoreElements(); ) {
    URL url=(URL)e.nextElement();
    try {
      JarInputStream jin=new JarInputStream(url.openStream());
      for (JarEntry ze=jin.getNextJarEntry(); ze != null; ze=jin.getNextJarEntry()) {
        if (ze.getName().equals(cname)) {
          jin.close();
          return url;
        }
      }
      jin.close();
    }
 catch (    IOException e1) {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + url.toString() + ""String_Node_Str""+ e1.getMessage());
    }
  }
  return null;
}","private static URL checkBundleJarsForClass(Bundle bundle,String name){
  String cname=name.replace('.','/') + ""String_Node_Str"";
  for (Enumeration e=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",true); e != null && e.hasMoreElements(); ) {
    URL url=(URL)e.nextElement();
    try {
      JarInputStream jin=new JarInputStream(url.openStream());
      for (JarEntry ze=jin.getNextJarEntry(); ze != null; ze=jin.getNextJarEntry()) {
        if (ze.getName().equals(cname)) {
          jin.close();
          return url;
        }
      }
      jin.close();
    }
 catch (    IOException e1) {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + url.toString() + ""String_Node_Str""+ e1.getMessage());
    }
  }
  return null;
}",0.9953177257525084
152970,"private Version checkBundleForClass(Bundle bundle,String name,Version iversion){
  String packageName=name.substring(0,name.lastIndexOf('.'));
  Version hasExport=hasExport(bundle,packageName);
  if (hasExport != null && !hasExport.equals(iversion)) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ packageName+ ""String_Node_Str""+ hasExport+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
    return hasExport;
  }
  String cname=name.substring(packageName.length() + 1) + ""String_Node_Str"";
  Enumeration e=bundle.findEntries(""String_Node_Str"" + packageName.replace('.','/'),cname,false);
  if (e == null) {
    if (hasExport != null) {
      URL url=checkBundleJarsForClass(bundle,name);
      if (url != null) {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str""+ url.toString()+ ""String_Node_Str"");
      }
 else {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str"");
      }
    }
    String root=""String_Node_Str"";
    String fileName=packageName;
    if (packageName.lastIndexOf(""String_Node_Str"") >= 0) {
      root=root + packageName.substring(0,packageName.lastIndexOf(""String_Node_Str"")).replace('.','/');
      fileName=packageName.substring(packageName.lastIndexOf(""String_Node_Str"") + 1).replace('.','/');
    }
    Enumeration pe=bundle.findEntries(root,fileName,false);
    if (pe != null) {
      if (hasExport != null) {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ packageName+ ""String_Node_Str"");
      }
 else {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ packageName+ ""String_Node_Str"");
      }
    }
  }
 else {
    if (hasExport != null) {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str""+ hasExport+ ""String_Node_Str"");
      Class c=null;
      try {
        c=bundle.loadClass(name);
      }
 catch (      ClassNotFoundException e1) {
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str""+ c+ ""String_Node_Str"");
    }
 else {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str"");
    }
  }
  return hasExport;
}","private static Version checkBundleForClass(Bundle bundle,String name,Version iversion){
  String packageName=name.substring(0,name.lastIndexOf('.'));
  Version hasExport=hasExport(bundle,packageName);
  if (hasExport != null && !hasExport.equals(iversion)) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ packageName+ ""String_Node_Str""+ hasExport+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
    return hasExport;
  }
  String cname=name.substring(packageName.length() + 1) + ""String_Node_Str"";
  Enumeration e=bundle.findEntries(""String_Node_Str"" + packageName.replace('.','/'),cname,false);
  if (e == null) {
    if (hasExport != null) {
      URL url=checkBundleJarsForClass(bundle,name);
      if (url != null) {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str""+ url.toString()+ ""String_Node_Str"");
      }
 else {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str"");
      }
    }
    String root=""String_Node_Str"";
    String fileName=packageName;
    if (packageName.lastIndexOf(""String_Node_Str"") >= 0) {
      root=root + packageName.substring(0,packageName.lastIndexOf(""String_Node_Str"")).replace('.','/');
      fileName=packageName.substring(packageName.lastIndexOf(""String_Node_Str"") + 1).replace('.','/');
    }
    Enumeration pe=bundle.findEntries(root,fileName,false);
    if (pe != null) {
      if (hasExport != null) {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ packageName+ ""String_Node_Str"");
      }
 else {
        if (log.isTraceEnabled())         log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ packageName+ ""String_Node_Str"");
      }
    }
  }
 else {
    if (hasExport != null) {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str""+ hasExport+ ""String_Node_Str"");
      Class c=null;
      try {
        c=bundle.loadClass(name);
      }
 catch (      ClassNotFoundException e1) {
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str""+ c+ ""String_Node_Str"");
    }
 else {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + getBundleName(bundle) + ""String_Node_Str""+ cname+ ""String_Node_Str"");
    }
  }
  return hasExport;
}",0.9986462966544188
152971,"protected Class findClass(String name) throws ClassNotFoundException {
  try {
    return this.backingBundle.loadClass(name);
  }
 catch (  ClassNotFoundException cnfe) {
    if (log.isTraceEnabled()) {
      debugClassLoading(name,null);
    }
    ClassNotFoundException e=new ClassNotFoundException(name + ""String_Node_Str"" + backingBundle.getSymbolicName()+ ""String_Node_Str"",cnfe);
    throw e;
  }
catch (  NoClassDefFoundError ncdfe) {
    if (log.isTraceEnabled()) {
      String cname=ncdfe.getMessage().replace('/','.');
      debugClassLoading(cname,name);
    }
    NoClassDefFoundError e=new NoClassDefFoundError(name + ""String_Node_Str"" + backingBundle.getSymbolicName()+ ""String_Node_Str"");
    e.initCause(e);
    throw e;
  }
}","protected Class findClass(String name) throws ClassNotFoundException {
  try {
    return this.backingBundle.loadClass(name);
  }
 catch (  ClassNotFoundException cnfe) {
    if (log.isTraceEnabled()) {
      debugClassLoading(name,null);
    }
    throw new ClassNotFoundException(name + ""String_Node_Str"" + backingBundle.getSymbolicName()+ ""String_Node_Str"",cnfe);
  }
catch (  NoClassDefFoundError ncdfe) {
    if (log.isTraceEnabled()) {
      String cname=ncdfe.getMessage().replace('/','.');
      debugClassLoading(cname,name);
    }
    NoClassDefFoundError e=new NoClassDefFoundError(name + ""String_Node_Str"" + backingBundle.getSymbolicName()+ ""String_Node_Str"");
    e.initCause(e);
    throw e;
  }
}",0.9642365887207704
152972,"private Version hasImport(Bundle bundle,String packageName){
  Dictionary dict=bundle.getHeaders();
  String imports=(String)dict.get(Constants.IMPORT_PACKAGE);
  Version v=getVersion(imports,packageName);
  if (v != null) {
    return v;
  }
  String dynimports=(String)dict.get(Constants.DYNAMICIMPORT_PACKAGE);
  if (dynimports != null) {
    for (StringTokenizer strok=new StringTokenizer(dynimports,""String_Node_Str""); strok.hasMoreTokens(); ) {
      StringTokenizer parts=new StringTokenizer(strok.nextToken(),""String_Node_Str"");
      String pkg=parts.nextToken().trim();
      if (pkg.endsWith(""String_Node_Str"") && packageName.startsWith(pkg.substring(0,pkg.length() - 2)) || pkg.equals(""String_Node_Str"")) {
        Version version=Version.emptyVersion;
        for (; parts.hasMoreTokens(); ) {
          String modifier=parts.nextToken().trim();
          if (modifier.startsWith(""String_Node_Str"")) {
            version=Version.parseVersion(modifier.substring(modifier.indexOf(""String_Node_Str"") + 1).trim());
          }
        }
        return version;
      }
    }
  }
  return null;
}","private static Version hasImport(Bundle bundle,String packageName){
  Dictionary dict=bundle.getHeaders();
  String imports=(String)dict.get(Constants.IMPORT_PACKAGE);
  Version v=getVersion(imports,packageName);
  if (v != null) {
    return v;
  }
  String dynimports=(String)dict.get(Constants.DYNAMICIMPORT_PACKAGE);
  if (dynimports != null) {
    for (StringTokenizer strok=new StringTokenizer(dynimports,""String_Node_Str""); strok.hasMoreTokens(); ) {
      StringTokenizer parts=new StringTokenizer(strok.nextToken(),""String_Node_Str"");
      String pkg=parts.nextToken().trim();
      if (pkg.endsWith(""String_Node_Str"") && packageName.startsWith(pkg.substring(0,pkg.length() - 2)) || pkg.equals(""String_Node_Str"")) {
        Version version=Version.emptyVersion;
        for (; parts.hasMoreTokens(); ) {
          String modifier=parts.nextToken().trim();
          if (modifier.startsWith(""String_Node_Str"")) {
            version=Version.parseVersion(modifier.substring(modifier.indexOf(""String_Node_Str"") + 1).trim());
          }
        }
        return version;
      }
    }
  }
  return null;
}",0.9968425800631484
152973,"private Version hasExport(Bundle bundle,String packageName){
  Dictionary dict=bundle.getHeaders();
  return getVersion((String)dict.get(Constants.EXPORT_PACKAGE),packageName);
}","private static Version hasExport(Bundle bundle,String packageName){
  Dictionary dict=bundle.getHeaders();
  return getVersion((String)dict.get(Constants.EXPORT_PACKAGE),packageName);
}",0.9807162534435262
152974,"private String getBundleName(Bundle bundle){
  Dictionary dict=bundle.getHeaders();
  String name=(String)dict.get(Constants.BUNDLE_NAME);
  String sname=(String)dict.get(Constants.BUNDLE_SYMBOLICNAME);
  return (sname != null ? sname : name) + ""String_Node_Str"" + bundle.getLocation()+ ""String_Node_Str"";
}","private static String getBundleName(Bundle bundle){
  Dictionary dict=bundle.getHeaders();
  String name=(String)dict.get(Constants.BUNDLE_NAME);
  String sname=(String)dict.get(Constants.BUNDLE_SYMBOLICNAME);
  return (sname != null ? sname : name) + ""String_Node_Str"" + bundle.getLocation()+ ""String_Node_Str"";
}",0.9887278582930756
152975,"/** 
 * Create a service proxy over the service reference. The proxy purpose is to transparently decouple the client from holding a strong reference to the service (which might go away).
 * @param ref
 * @return
 */
private Object createServiceProxy(ServiceReference ref){
  String[] classes=(String[])ref.getProperty(Constants.OBJECTCLASS);
  List intfs=new ArrayList();
  Class proxyClass=null;
  for (int i=0; i < classes.length; i++) {
    Bundle loader=ref.getBundle();
    try {
      Class clazz=loader.loadClass(classes[i]);
      if (clazz.isInterface())       intfs.add(clazz);
 else {
        proxyClass=clazz;
      }
    }
 catch (    ClassNotFoundException cnfex) {
      throw (RuntimeException)new IllegalArgumentException(""String_Node_Str"").initCause(cnfex);
    }
  }
  ProxyFactory factory=new ProxyFactory();
  if (!intfs.isEmpty())   factory.setInterfaces((Class[])intfs.toArray(new Class[intfs.size()]));
  if (proxyClass != null) {
    factory.setProxyTargetClass(true);
    factory.setTargetClass(proxyClass);
  }
  if (this.interceptors != null) {
    for (int i=0; i < this.interceptors.length; i++) {
      factory.addAdvisor(this.advisorAdapterRegistry.wrap(this.interceptors[i]));
    }
  }
  factory.addAdvice(new OsgiServiceStaticInterceptor(context,ref,contextClassLoader));
  return factory.getProxy(BundleDelegatingClassLoader.createBundleClassLoaderFor(ref.getBundle(),ProxyFactory.class.getClassLoader()));
}","/** 
 * Create a service proxy over the service reference. The proxy purpose is to transparently decouple the client from holding a strong reference to the service (which might go away).
 * @param ref
 */
private Object createServiceProxy(ServiceReference ref){
  String[] classes=(String[])ref.getProperty(Constants.OBJECTCLASS);
  List intfs=new ArrayList();
  Class proxyClass=null;
  for (int i=0; i < classes.length; i++) {
    Bundle loader=ref.getBundle();
    try {
      Class clazz=loader.loadClass(classes[i]);
      if (clazz.isInterface())       intfs.add(clazz);
 else {
        proxyClass=clazz;
      }
    }
 catch (    ClassNotFoundException cnfex) {
      throw (RuntimeException)new IllegalArgumentException(""String_Node_Str"").initCause(cnfex);
    }
  }
  ProxyFactory factory=new ProxyFactory();
  if (!intfs.isEmpty())   factory.setInterfaces((Class[])intfs.toArray(new Class[intfs.size()]));
  if (proxyClass != null) {
    factory.setProxyTargetClass(true);
    factory.setTargetClass(proxyClass);
  }
  if (this.interceptors != null) {
    for (int i=0; i < this.interceptors.length; i++) {
      factory.addAdvisor(this.advisorAdapterRegistry.wrap(this.interceptors[i]));
    }
  }
  factory.addAdvice(new OsgiServiceStaticInterceptor(context,ref,contextClassLoader));
  return factory.getProxy(BundleDelegatingClassLoader.createBundleClassLoaderFor(ref.getBundle(),ProxyFactory.class.getClassLoader()));
}",0.9961765728189086
152976,"/** 
 * Create the dynamic storage used internally.
 * @return
 */
protected Collection createInternalDynamicStorage(){
  return new DynamicCollection();
}","/** 
 * Create the dynamic storage used internally.
 */
protected Collection createInternalDynamicStorage(){
  return new DynamicCollection();
}",0.9632107023411371
152977,"public void serviceChanged(ServiceEvent event){
  ServiceReference ref=event.getServiceReference();
  Long serviceId=(Long)ref.getProperty(Constants.SERVICE_ID);
  boolean found=false;
switch (event.getType()) {
case (ServiceEvent.REGISTERED):
case (ServiceEvent.MODIFIED):
synchronized (serviceReferences) {
      if (!serviceReferences.containsKey(serviceId)) {
        found=true;
        serviceReferences.put(serviceId,createServiceProxy(ref));
        serviceIDs.add(serviceId);
      }
    }
  if (found)   OsgiServiceBindingUtils.callListenersBind(context,ref,listeners);
break;
case (ServiceEvent.UNREGISTERING):
synchronized (serviceReferences) {
Object proxy=serviceReferences.remove(serviceId);
found=serviceIDs.remove(serviceId);
if (proxy != null) {
  invalidateProxy(proxy);
}
}
if (found) OsgiServiceBindingUtils.callListenersUnbind(context,ref,listeners);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","public void serviceChanged(ServiceEvent event){
  try {
    ServiceReference ref=event.getServiceReference();
    Long serviceId=(Long)ref.getProperty(Constants.SERVICE_ID);
    boolean found=false;
switch (event.getType()) {
case (ServiceEvent.REGISTERED):
case (ServiceEvent.MODIFIED):
synchronized (serviceReferences) {
        if (!serviceReferences.containsKey(serviceId)) {
          found=true;
          serviceReferences.put(serviceId,createServiceProxy(ref));
          serviceIDs.add(serviceId);
        }
      }
    if (found)     OsgiServiceBindingUtils.callListenersBind(context,ref,listeners);
  break;
case (ServiceEvent.UNREGISTERING):
synchronized (serviceReferences) {
  Object proxy=serviceReferences.remove(serviceId);
  found=serviceIDs.remove(serviceId);
  if (proxy != null) {
    invalidateProxy(proxy);
  }
}
if (found) OsgiServiceBindingUtils.callListenersUnbind(context,ref,listeners);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}
 catch (Error e) {
if (log.isErrorEnabled()) {
log.error(""String_Node_Str"",e);
}
throw e;
}
catch (RuntimeException re) {
if (log.isWarnEnabled()) {
log.warn(""String_Node_Str"",re);
}
throw re;
}
}",0.8880562060889929
152978,"public String toString(){
  return ""String_Node_Str"" + filter;
}","public String toString(){
  return filter;
}",0.8148148148148148
152979,"protected Object doInvoke(Object service,MethodInvocation invocation) throws Throwable {
  if (!canCacheClassLoader)   tccl=determineClassLoader(context,serviceReference,contextClassLoader);
  ClassLoader oldCL=null;
  if (tccl != null) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + tccl);
    try {
      oldCL=Thread.currentThread().getContextClassLoader();
      Thread.currentThread().setContextClassLoader(tccl);
      return super.doInvoke(service,invocation);
    }
  finally {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + tccl);
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
  return super.doInvoke(service,invocation);
}","protected Object doInvoke(Object service,MethodInvocation invocation) throws Throwable {
  if (!canCacheClassLoader)   tccl=determineClassLoader(context,serviceReference,contextClassLoader);
  ClassLoader oldCL=null;
  boolean trace=log.isTraceEnabled();
  if ((tccl != null && canCacheClassLoader) || !canCacheClassLoader) {
    if (trace)     log.trace(""String_Node_Str"" + tccl);
    try {
      oldCL=Thread.currentThread().getContextClassLoader();
      Thread.currentThread().setContextClassLoader(tccl);
      return super.doInvoke(service,invocation);
    }
  finally {
      if (trace)       log.trace(""String_Node_Str"" + tccl);
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
  return super.doInvoke(service,invocation);
}",0.9053213545266068
152980,"public OsgiServiceClassLoaderInvoker(BundleContext context,ServiceReference reference,int contextClassLoader){
  this.context=context;
  this.serviceReference=reference;
  canCacheClassLoader=!(contextClassLoader == ReferenceClassLoadingOptions.SERVICE_PROVIDER);
  if (canCacheClassLoader)   this.tccl=determineClassLoader(context,null,contextClassLoader);
}","public OsgiServiceClassLoaderInvoker(BundleContext context,ServiceReference reference,int contextClassLoader){
  this.context=context;
  this.serviceReference=reference;
  canCacheClassLoader=!(contextClassLoader == ReferenceClassLoadingOptions.SERVICE_PROVIDER);
  if (canCacheClassLoader) {
    this.tccl=determineClassLoader(context,null,contextClassLoader);
  }
}",0.9889807162534436
152981,"public void serviceChanged(ServiceEvent event){
  ServiceReference ref=event.getServiceReference();
  log.debug(""String_Node_Str"" + ref);
  long serviceId=((Long)ref.getProperty(Constants.SERVICE_ID)).longValue();
  Integer rank=(Integer)ref.getProperty(Constants.SERVICE_RANKING);
  int ranking=(rank == null ? 0 : rank.intValue());
switch (event.getType()) {
case (ServiceEvent.REGISTERED):
    if (updateWrapperIfNecessary(ref,serviceId,ranking)) {
      callListenersBind(ref);
    }
  break;
case (ServiceEvent.MODIFIED):
if (updateWrapperIfNecessary(ref,serviceId,ranking)) {
  callListenersBind(ref);
}
break;
case (ServiceEvent.UNREGISTERING):
boolean updated=false;
synchronized (OsgiServiceDynamicInterceptor.class) {
if (wrapper != null) {
if (serviceId == wrapper.getServiceId()) {
updated=true;
wrapper.cleanup();
wrapper=null;
}
}
}
if (updated) callListenersUnbind(ref);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","public void serviceChanged(ServiceEvent event){
  ServiceReference ref=event.getServiceReference();
  long serviceId=((Long)ref.getProperty(Constants.SERVICE_ID)).longValue();
  Integer rank=(Integer)ref.getProperty(Constants.SERVICE_RANKING);
  int ranking=(rank == null ? 0 : rank.intValue());
switch (event.getType()) {
case (ServiceEvent.REGISTERED):
    if (updateWrapperIfNecessary(ref,serviceId,ranking)) {
      callListenersBind(ref);
    }
  break;
case (ServiceEvent.MODIFIED):
if (updateWrapperIfNecessary(ref,serviceId,ranking)) {
  callListenersBind(ref);
}
break;
case (ServiceEvent.UNREGISTERING):
boolean updated=false;
synchronized (OsgiServiceDynamicInterceptor.class) {
if (wrapper != null) {
if (serviceId == wrapper.getServiceId()) {
updated=true;
wrapper.cleanup();
wrapper=null;
}
}
}
if (updated) callListenersUnbind(ref);
try {
ServiceReference refs[]=context.getServiceReferences(clazz,filter);
if (refs != null && refs.length > 0) {
serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED,refs[0]));
}
}
 catch (InvalidSyntaxException ise) {
throw new IllegalArgumentException(""String_Node_Str"");
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}",0.8386500231160425
152982,"/** 
 * A best-guess attempt at figuring out why the class could not be found.
 * @param name of the class we are trying to find.
 */
private synchronized void debugClassLoading(String name,String root){
  Dictionary dict=backingBundle.getHeaders();
  String bname=dict.get(Constants.BUNDLE_NAME) + ""String_Node_Str"" + dict.get(Constants.BUNDLE_SYMBOLICNAME)+ ""String_Node_Str"";
  log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ bname+ ""String_Node_Str"");
  BundleContext context=OsgiResourceUtils.getBundleContext(backingBundle);
  String packageName=name.substring(0,name.lastIndexOf('.'));
  if (name.indexOf('.') < 0) {
    log.debug(""String_Node_Str"");
    return;
  }
  Version iversion=hasImport(backingBundle,packageName);
  if (iversion != null) {
    log.debug(""String_Node_Str"" + iversion + ""String_Node_Str"");
    Bundle[] bundles=context.getBundles();
    for (int i=0; i < bundles.length; i++) {
      if (bundles[i].getBundleId() != backingBundle.getBundleId()) {
        Version exported=checkBundleForClass(bundles[i],name,iversion);
        if (exported != null && exported.equals(iversion) && root != null) {
          for (int j=0; j < bundles.length; j++) {
            Version rootexport=hasExport(bundles[j],root.substring(0,root.lastIndexOf('.')));
            if (rootexport != null) {
              Version rootimport=hasImport(bundles[j],packageName);
              if (rootimport == null || !rootimport.equals(iversion)) {
                log.debug(""String_Node_Str"" + getBundleName(bundles[j]) + ""String_Node_Str""+ root+ ""String_Node_Str""+ rootexport+ ""String_Node_Str""+ packageName+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  if (hasExport(backingBundle,packageName) != null) {
    log.debug(""String_Node_Str"");
    checkBundleForClass(backingBundle,name,iversion);
  }
}","/** 
 * A best-guess attempt at figuring out why the class could not be found.
 * @param name of the class we are trying to find.
 */
private synchronized void debugClassLoading(String name,String root){
  Dictionary dict=backingBundle.getHeaders();
  String bname=dict.get(Constants.BUNDLE_NAME) + ""String_Node_Str"" + dict.get(Constants.BUNDLE_SYMBOLICNAME)+ ""String_Node_Str"";
  log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ bname+ ""String_Node_Str"");
  BundleContext context=OsgiResourceUtils.getBundleContext(backingBundle);
  String packageName=name.substring(0,name.lastIndexOf('.'));
  if (name.indexOf('.') < 0) {
    log.debug(""String_Node_Str"");
    return;
  }
  Version iversion=hasImport(backingBundle,packageName);
  if (iversion != null && context != null) {
    log.debug(""String_Node_Str"" + iversion + ""String_Node_Str"");
    Bundle[] bundles=context.getBundles();
    for (int i=0; i < bundles.length; i++) {
      if (bundles[i].getBundleId() != backingBundle.getBundleId()) {
        Version exported=checkBundleForClass(bundles[i],name,iversion);
        if (exported != null && exported.equals(iversion) && root != null) {
          for (int j=0; j < bundles.length; j++) {
            Version rootexport=hasExport(bundles[j],root.substring(0,root.lastIndexOf('.')));
            if (rootexport != null) {
              Version rootimport=hasImport(bundles[j],packageName);
              if (rootimport == null || !rootimport.equals(iversion)) {
                log.debug(""String_Node_Str"" + getBundleName(bundles[j]) + ""String_Node_Str""+ root+ ""String_Node_Str""+ rootexport+ ""String_Node_Str""+ packageName+ ""String_Node_Str""+ iversion+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
  if (hasExport(backingBundle,packageName) != null) {
    log.debug(""String_Node_Str"");
    checkBundleForClass(backingBundle,name,iversion);
  }
}",0.994990772475613
152983,"/** 
 * The simple service should have been exported as an OSGi service, which we can verify using the OSGi service APIs. In a Spring bundle, using osgi:reference is a much easier way to get a reference to a published service.
 */
public void testWeatherServiceExported(){
  waitOnContextCreation(""String_Node_Str"");
  waitOnContextCreation(""String_Node_Str"");
  BundleContext context=getBundleContext();
  ServiceReference ref=context.getServiceReference(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",ref);
  try {
    Object weather=context.getService(ref);
    assertNotNull(""String_Node_Str"",weather);
  }
  finally {
    context.ungetService(ref);
  }
}","/** 
 * The simple service should have been exported as an OSGi service, which we can verify using the OSGi service APIs. <p/> In a Spring bundle, using osgi:reference is a much easier way to get a reference to a published service.
 */
public void testWeatherServiceExported(){
  waitOnContextCreation(""String_Node_Str"");
  waitOnContextCreation(""String_Node_Str"");
  BundleContext context=getBundleContext();
  ServiceReference ref=context.getServiceReference(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",ref);
  try {
    WeatherService weather=(WeatherService)context.getService(ref);
    assertNotNull(""String_Node_Str"",weather);
    assertEquals(new Double(15.0),weather.getHistoricalHigh(new GregorianCalendar(2004,0,1).getTime()));
  }
  finally {
    context.ungetService(ref);
  }
}",0.7407912687585266
152984,"/** 
 * The location of the packaged OSGi bundles to be installed for this test. Values are Spring resource paths. The bundles we want to use are part of the same multi-project maven build as this project is. Hence we use the localMavenArtifact helper method to find the bundles produced by the package phase of the maven build (these tests will run after the packaging phase, in the integration-test phase).  JUnit, commons-logging, spring-core and the spring OSGi test bundle are automatically included so do not need to be specified here.
 */
protected String[] getBundleLocations(){
  return new String[]{localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")};
}","/** 
 * The location of the packaged OSGi bundles to be installed for this test. Values are Spring resource paths. The bundles we want to use are part of the same multi-project maven build as this project is. Hence we use the localMavenArtifact helper method to find the bundles produced by the package phase of the maven build (these tests will run after the packaging phase, in the integration-test phase). <p/> JUnit, commons-logging, spring-core and the spring OSGi test bundle are automatically included so do not need to be specified here.
 */
protected String[] getBundleLocations(){
  return new String[]{localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),localMavenArtifact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")};
}",0.9984375
152985,"/** 
 * Retrieves the list of xml resources which compose the application context. <p/> The org.springframework.context manifest header attribute, if present, is parsed to create an ordered list of resource names in the spring context directory for creating the application context <p/> If the org.springframework.context header is not present, the entire list of xml resources in the spring context directory will be returned.
 */
protected String[] getApplicationContextLocations(Bundle bundle){
  Dictionary manifestHeaders=bundle.getHeaders();
  String contextLocationsHeader=(String)manifestHeaders.get(CONTEXT_LOCATION_HEADER);
  if (contextLocationsHeader != null) {
    String[] locs=StringUtils.tokenizeToStringArray(contextLocationsHeader,CONTEXT_LOCATION_DELIMITERS);
    List ret=new ArrayList();
    for (int i=0; i < locs.length; i++) {
      if (bundle.getEntry(locs[i]) != null) {
        ret.add(SPRING_CONTEXT_DIRECTORY + locs[i]);
      }
    }
    if (ret.isEmpty()) {
      return null;
    }
 else {
      return addBundlePrefixTo((String[])ret.toArray());
    }
  }
 else {
    List resourceList=new ArrayList();
    Enumeration resources=bundle.findEntries(SPRING_CONTEXT_DIRECTORY,""String_Node_Str"",false);
    if (resources != null) {
      for (; resources.hasMoreElements(); ) {
        resourceList.add(((URL)resources.nextElement()).getFile());
      }
    }
    if (resourceList.isEmpty()) {
      return null;
    }
 else {
      String[] list=new String[resourceList.size()];
      for (int i=0; i < list.length; i++) {
        list[i]=(String)resourceList.get(0);
      }
      return addBundlePrefixTo(list);
    }
  }
}","/** 
 * Retrieves the list of xml resources which compose the application context. <p/> The org.springframework.context manifest header attribute, if present, is parsed to create an ordered list of resource names in the spring context directory for creating the application context <p/> If the org.springframework.context header is not present, the entire list of xml resources in the spring context directory will be returned.
 */
protected String[] getApplicationContextLocations(Bundle bundle){
  Dictionary manifestHeaders=bundle.getHeaders();
  String contextLocationsHeader=(String)manifestHeaders.get(CONTEXT_LOCATION_HEADER);
  if (contextLocationsHeader != null) {
    String[] locs=StringUtils.tokenizeToStringArray(contextLocationsHeader,CONTEXT_LOCATION_DELIMITERS);
    List ret=new ArrayList();
    for (int i=0; i < locs.length; i++) {
      if (bundle.getEntry(locs[i]) != null) {
        ret.add(SPRING_CONTEXT_DIRECTORY + locs[i]);
      }
    }
    if (ret.isEmpty()) {
      return null;
    }
 else {
      return addBundlePrefixTo((String[])ret.toArray());
    }
  }
 else {
    List resourceList=new ArrayList();
    Enumeration resources=bundle.findEntries(SPRING_CONTEXT_DIRECTORY,""String_Node_Str"",false);
    if (resources != null) {
      for (; resources.hasMoreElements(); ) {
        resourceList.add(((URL)resources.nextElement()).getFile());
      }
    }
    if (resourceList.isEmpty()) {
      return null;
    }
 else {
      String[] list=new String[resourceList.size()];
      for (int i=0; i < list.length; i++) {
        list[i]=(String)resourceList.get(i);
      }
      return addBundlePrefixTo(list);
    }
  }
}",0.9993957703927492
152986,"public void release(){
  _mediaPlayer.release();
}","public void release(){
  if (_state != RELEASED) {
    _mediaPlayer.release();
    _state=RELEASED;
  }
}",0.6451612903225806
152987,"public void setOnCompletionListener(final OnCompletionListener listener){
  _mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){
    @Override public void onCompletion(    MediaPlayer mp){
      listener.onCompletion(MusicPlayer.this);
    }
  }
);
}","public void setOnCompletionListener(final OnCompletionListener listener){
  if (_state != RELEASED) {
    _mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){
      @Override public void onCompletion(      MediaPlayer mp){
        listener.onCompletion(MusicPlayer.this);
      }
    }
);
  }
}",0.9256756756756755
152988,"public void setVolume(float volume){
  _mediaPlayer.setVolume(volume,volume);
}","public void setVolume(float volume){
  if (_state != RELEASED) {
    _mediaPlayer.setVolume(volume,volume);
  }
}",0.8229166666666666
152989,"public void seekToPosition(int positionMillis){
  _mediaPlayer.seekTo(positionMillis);
  _startTime=System.currentTimeMillis() - positionMillis;
}","public void seekToPosition(int positionMillis){
  if (_state == PLAYING || _state == PAUSED) {
    _mediaPlayer.seekTo(positionMillis);
    _startTime=System.currentTimeMillis() - positionMillis;
  }
}",0.8414985590778098
152990,"public int getSongLength(){
  return _mediaPlayer.getDuration();
}","public int getSongLength(){
  if (_state == PLAYING || _state == PAUSED || _state == STOPPED) {
    return _mediaPlayer.getDuration();
  }
  return 0;
}",0.6055045871559633
152991,"public void stop(){
  if (_state != STOPPED) {
    _mediaPlayer.stop();
    _state=STOPPED;
  }
}","public void stop(){
  if (_state == PLAYING || _state == PAUSED || _state == STOPPED) {
    _mediaPlayer.stop();
    _state=STOPPED;
  }
}",0.8170212765957446
152992,"public void loop(){
  _mediaPlayer.setLooping(true);
  play();
}","public void loop(){
  if (_state == IDLE || _state == PAUSED) {
    _mediaPlayer.setLooping(true);
    play();
  }
}",0.7111111111111111
152993,"public boolean isLooping(){
  return _mediaPlayer.isLooping();
}","public boolean isLooping(){
  if (_state != RELEASED) {
    return _mediaPlayer.isLooping();
  }
  return false;
}",0.7191011235955056
152994,"public BeatTrack(OnCompletionListener listener){
  loadSong(Song.RETRO);
  beatsInRange=new ArrayList<Beat>();
  last_combo_time=0;
  display_uber_brag=false;
  musicPlayer.setOnCompletionListener(new OnCompletionListener(){
    public void onCompletion(    MusicPlayer mp){
      mp.stop();
    }
  }
);
  musicPlayer.setOnCompletionListener(listener);
  isHolding=false;
  combo=0;
  comboStr=""String_Node_Str"" + String.valueOf(combo);
  paint=new Paint();
  paint.setTextSize(20.0f);
  paint.setFakeBoldText(true);
  paint.setStrokeCap(Cap.ROUND);
  paint.setAntiAlias(true);
  brag_text_pos=BBTHGame.WIDTH / 2.0f + BEAT_TRACK_WIDTH / 2.0f - paint.measureText(""String_Node_Str"" + comboStr + ""String_Node_Str"") / 2.0f;
}","public BeatTrack(OnCompletionListener listener){
  loadSong(Song.RETRO);
  beatsInRange=new ArrayList<Beat>();
  onCompletionListener=listener;
  stopped=false;
  last_combo_time=0;
  display_uber_brag=false;
  isHolding=false;
  combo=0;
  comboStr=""String_Node_Str"" + String.valueOf(combo);
  paint=new Paint();
  paint.setTextSize(20.0f);
  paint.setFakeBoldText(true);
  paint.setStrokeCap(Cap.ROUND);
  paint.setAntiAlias(true);
  brag_text_pos=BBTHGame.WIDTH / 2.0f + BEAT_TRACK_WIDTH / 2.0f - paint.measureText(""String_Node_Str"" + comboStr + ""String_Node_Str"") / 2.0f;
}",0.8113933795227097
152995,"public void stopMusic(){
  musicPlayer.stop();
}","public void stopMusic(){
  if (musicPlayer != null) {
    musicPlayer.stop();
    musicPlayer.release();
  }
}",0.6075949367088608
152996,"public final void loadSong(Song song){
  musicPlayer=new MusicPlayer(GameActivity.instance,song.songId);
  beatTracker=new BeatTracker(musicPlayer,song.trackId);
}","public final void loadSong(Song song){
  stopMusic();
  musicPlayer=new MusicPlayer(GameActivity.instance,song.songId);
  beatTracker=new BeatTracker(musicPlayer,song.trackId);
  musicPlayer.setOnCompletionListener(onCompletionListener);
  stopped=false;
}",0.7780429594272077
152997,"@Override public void onCompletion(MusicPlayer mp){
  mp.stop();
  if (singlePlayer) {
    sim.simulateCustomEvent(0,0,BBTHSimulation.MUSIC_STOPPED_EVENT,true);
  }
 else {
    sim.recordCustomEvent(0,0,BBTHSimulation.MUSIC_STOPPED_EVENT);
  }
}","@Override public void onCompletion(MusicPlayer mp){
  mp.stop();
  mp.release();
  if (singlePlayer) {
    sim.simulateCustomEvent(0,0,BBTHSimulation.MUSIC_STOPPED_EVENT,true);
  }
 else {
    sim.recordCustomEvent(0,0,BBTHSimulation.MUSIC_STOPPED_EVENT);
  }
}",0.9683794466403162
152998,"@Override protected void simulateCustomEvent(float x,float y,int code,boolean isServer){
  if (code < 0) {
    this.song=Song.fromInt(code);
    setupEvents();
  }
 else {
    Player player=playerMap.get(isServer);
    UnitType type=UnitType.fromInt(code);
    if (type != null) {
      player.setUnitType(type);
    }
 else     if (code == TUTORIAL_DONE_EVENT) {
      if (isServer) {
        serverReady=true;
      }
 else {
        clientReady=true;
      }
      if (serverReady && clientReady) {
        Unit.resetNextHashCodeID();
      }
    }
 else     if ((gameState == GameState.IN_PROGRESS || gameState == GameState.WAITING_TO_START) && code == MUSIC_STOPPED_EVENT) {
      endTheGame();
    }
  }
}","@Override protected void simulateCustomEvent(float x,float y,int code,boolean isServer){
  if (code < 0) {
    this.song=Song.fromInt(code);
    setupEvents();
  }
 else {
    Player player=playerMap.get(isServer);
    UnitType type=UnitType.fromInt(code);
    if (type != null) {
      player.setUnitType(type);
    }
 else     if (code == TUTORIAL_DONE_EVENT) {
      if (isServer) {
        serverReady=true;
      }
 else {
        clientReady=true;
      }
      if (serverReady && clientReady) {
        Unit.resetNextHashCodeID();
        Wall.resetNextHashCodeID();
      }
    }
 else     if ((gameState == GameState.IN_PROGRESS || gameState == GameState.WAITING_TO_START) && code == MUSIC_STOPPED_EVENT) {
      endTheGame();
    }
  }
}",0.9753086419753086
152999,"public void setBothPlayersReady(){
  clientReady=serverReady=true;
  Unit.resetNextHashCodeID();
}","public void setBothPlayersReady(){
  clientReady=serverReady=true;
  Unit.resetNextHashCodeID();
  Wall.resetNextHashCodeID();
}",0.8672566371681416
153000,"@Override protected void simulateCustomEvent(float x,float y,int code,boolean isServer){
  if (code < 0) {
    this.song=Song.fromInt(code);
  }
 else {
    Player player=playerMap.get(isServer);
    UnitType type=UnitType.fromInt(code);
    if (type != null) {
      player.setUnitType(type);
    }
 else     if (code == TUTORIAL_DONE_EVENT) {
      if (isServer) {
        serverReady=true;
      }
 else {
        clientReady=true;
      }
      if (serverReady && clientReady) {
        Unit.resetNextHashCodeID();
      }
    }
 else     if (code == MUSIC_STOPPED_EVENT) {
      endTheGame();
    }
  }
}","@Override protected void simulateCustomEvent(float x,float y,int code,boolean isServer){
  if (code < 0) {
    this.song=Song.fromInt(code);
    setupEvents();
  }
 else {
    Player player=playerMap.get(isServer);
    UnitType type=UnitType.fromInt(code);
    if (type != null) {
      player.setUnitType(type);
    }
 else     if (code == TUTORIAL_DONE_EVENT) {
      if (isServer) {
        serverReady=true;
      }
 else {
        clientReady=true;
      }
      if (serverReady && clientReady) {
        Unit.resetNextHashCodeID();
      }
    }
 else     if (code == MUSIC_STOPPED_EVENT) {
      endTheGame();
    }
  }
}",0.98464025869038
