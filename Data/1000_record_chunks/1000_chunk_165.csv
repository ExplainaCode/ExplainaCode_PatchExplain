record_number,buggy_code,fixed_code,code_similarity
164001,"@Override protected void createItems(){
  int nItems=3;
  int bonus=RingOfWealth.getBonus(Dungeon.hero,RingOfWealth.Wealth.class);
  bonus=Math.min(bonus,10);
  while (Random.Float() < (0.3f + bonus * 0.05f)) {
    nItems++;
  }
  for (int i=0; i < nItems; i++) {
    Heap.Type type=null;
switch (Random.Int(20)) {
case 0:
      type=Heap.Type.SKELETON;
    break;
case 1:
case 2:
case 3:
case 4:
  type=Heap.Type.CHEST;
break;
case 5:
type=Dungeon.depth > 1 ? Heap.Type.MIMIC : Heap.Type.CHEST;
break;
default :
type=Heap.Type.HEAP;
}
int cell=randomDropCell();
if (map[cell] == Terrain.HIGH_GRASS) map[cell]=Terrain.GRASS;
drop(Generator.random(),cell).type=type;
}
for (Item item : itemsToSpawn) {
int cell;
do {
cell=randomDropCell();
if (item instanceof Scroll) {
while (traps.get(cell) instanceof FireTrap) {
cell=randomDropCell();
}
}
 else if (item instanceof Potion) {
while (traps.get(cell) instanceof ChillingTrap) {
cell=randomDropCell();
}
}
}
 while (traps.get(cell) instanceof ExplosiveTrap);
drop(item,cell).type=Heap.Type.HEAP;
if (map[cell] == Terrain.HIGH_GRASS) map[cell]=Terrain.GRASS;
}
Item item=Bones.get();
if (item != null) {
int cell=randomDropCell();
if (map[cell] == Terrain.HIGH_GRASS) map[cell]=Terrain.GRASS;
drop(item,cell).type=Heap.Type.REMAINS;
}
}","@Override protected void createItems(){
  int nItems=3;
  int bonus=RingOfWealth.getBonus(Dungeon.hero,RingOfWealth.Wealth.class);
  bonus=Math.min(bonus,10);
  while (Random.Float() < (0.3f + bonus * 0.05f)) {
    nItems++;
  }
  for (int i=0; i < nItems; i++) {
    Heap.Type type=null;
switch (Random.Int(20)) {
case 0:
      type=Heap.Type.SKELETON;
    break;
case 1:
case 2:
case 3:
case 4:
  type=Heap.Type.CHEST;
break;
case 5:
type=Dungeon.depth > 1 ? Heap.Type.MIMIC : Heap.Type.CHEST;
break;
default :
type=Heap.Type.HEAP;
}
int cell=randomDropCell();
if (map[cell] == Terrain.HIGH_GRASS) {
map[cell]=Terrain.GRASS;
losBlocking[cell]=false;
}
drop(Generator.random(),cell).type=type;
}
for (Item item : itemsToSpawn) {
int cell;
do {
cell=randomDropCell();
if (item instanceof Scroll) {
while (traps.get(cell) instanceof FireTrap) {
cell=randomDropCell();
}
}
 else if (item instanceof Potion) {
while (traps.get(cell) instanceof ChillingTrap) {
cell=randomDropCell();
}
}
}
 while (traps.get(cell) instanceof ExplosiveTrap);
drop(item,cell).type=Heap.Type.HEAP;
if (map[cell] == Terrain.HIGH_GRASS) {
map[cell]=Terrain.GRASS;
losBlocking[cell]=false;
}
}
Item item=Bones.get();
if (item != null) {
int cell=randomDropCell();
if (map[cell] == Terrain.HIGH_GRASS) {
map[cell]=Terrain.GRASS;
losBlocking[cell]=false;
}
drop(item,cell).type=Heap.Type.REMAINS;
}
}",0.9672316384180792
164002,"protected boolean getCloser(int target){
  if (rooted || target == pos) {
    return false;
  }
  int step=-1;
  if (Dungeon.level.adjacent(pos,target)) {
    path=null;
    if (Actor.findChar(target) == null && Level.passable[target]) {
      step=target;
    }
  }
 else {
    boolean newPath=false;
    if (path == null || path.isEmpty() || !Dungeon.level.adjacent(pos,path.getFirst()))     newPath=true;
 else     if (path.getLast() != target) {
      if (Dungeon.level.adjacent(target,path.getLast()) && path.size() < Dungeon.level.distance(pos,target)) {
        int last=path.removeLast();
        if (path.isEmpty()) {
          if (Dungeon.level.adjacent(target,pos)) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
 else         if (!path.isEmpty()) {
          if (path.getLast() == target) {
          }
 else           if (Dungeon.level.adjacent(target,path.getLast())) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
      }
 else {
        newPath=true;
      }
    }
    if (!newPath) {
      int lookAhead=(int)GameMath.gate(1,path.size() - 1,4);
      for (int i=0; i < lookAhead; i++) {
        int cell=path.get(i);
        if (!Level.passable[cell] || (Dungeon.visible[cell] && Actor.findChar(cell) != null)) {
          newPath=true;
          break;
        }
      }
    }
    if (newPath) {
      path=Dungeon.findPath(this,pos,target,Level.passable,Level.fieldOfView);
    }
    if (path == null)     return false;
    step=path.removeFirst();
  }
  if (step != -1) {
    move(step);
    return true;
  }
 else {
    return false;
  }
}","protected boolean getCloser(int target){
  if (rooted || target == pos) {
    return false;
  }
  int step=-1;
  if (Dungeon.level.adjacent(pos,target)) {
    path=null;
    if (Actor.findChar(target) == null && Level.passable[target]) {
      step=target;
    }
  }
 else {
    boolean newPath=false;
    if (path == null || path.isEmpty() || !Dungeon.level.adjacent(pos,path.getFirst()) || path.size() >= 2 * Dungeon.level.distance(pos,target))     newPath=true;
 else     if (path.getLast() != target) {
      if (Dungeon.level.adjacent(target,path.getLast())) {
        int last=path.removeLast();
        if (path.isEmpty()) {
          if (Dungeon.level.adjacent(target,pos)) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
 else         if (!path.isEmpty()) {
          if (path.getLast() == target) {
          }
 else           if (Dungeon.level.adjacent(target,path.getLast())) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
      }
 else {
        newPath=true;
      }
    }
    if (!newPath) {
      int lookAhead=(int)GameMath.gate(1,path.size() - 1,4);
      for (int i=0; i < lookAhead; i++) {
        int cell=path.get(i);
        if (!Level.passable[cell] || (Level.fieldOfView[cell] && Actor.findChar(cell) != null)) {
          newPath=true;
          break;
        }
      }
    }
    if (newPath) {
      path=Dungeon.findPath(this,pos,target,Level.passable,Level.fieldOfView);
    }
    if (path == null)     return false;
    step=path.removeFirst();
  }
  if (step != -1) {
    move(step);
    return true;
  }
 else {
    return false;
  }
}",0.9599077011825786
164003,"public void drop(Item item){
  if (item.stackable && type != Type.FOR_SALE) {
    for (    Item i : items) {
      if (i.isSimilar(item)) {
        i.quantity+=item.quantity;
        item=i;
        break;
      }
    }
    items.remove(item);
  }
  if (item instanceof Dewdrop && type != Type.FOR_SALE) {
    items.add(item);
  }
 else {
    items.addFirst(item);
  }
  if (sprite != null) {
    if (type == Type.HEAP || type == Type.FOR_SALE)     sprite.view(items.peek());
 else     sprite.view(image(),glowing());
  }
}","public void drop(Item item){
  if (item.stackable && type != Type.FOR_SALE) {
    for (    Item i : items) {
      if (i.isSimilar(item)) {
        i.quantity+=item.quantity;
        item=i;
        break;
      }
    }
    items.remove(item);
  }
  if (item instanceof Dewdrop && type != Type.FOR_SALE) {
    items.add(item);
  }
 else {
    items.addFirst(item);
  }
  if (sprite != null) {
    if (type == Type.HEAP || type == Type.FOR_SALE)     sprite.view(items.peek());
 else     sprite.view(image(),glowing());
    sprite.place(pos);
  }
}",0.9728718428437793
164004,"public Item pickUp(){
  Item item=items.removeFirst();
  if (items.isEmpty()) {
    destroy();
  }
 else   if (sprite != null) {
    sprite.view(image(),glowing());
  }
  return item;
}","public Item pickUp(){
  Item item=items.removeFirst();
  if (items.isEmpty()) {
    destroy();
  }
 else   if (sprite != null) {
    sprite.view(image(),glowing());
    sprite.place(pos);
  }
  return item;
}",0.9414758269720102
164005,"public PointF center(PointF p){
  x=p.x - width / 2;
  y=p.y - height / 2;
  return p;
}","public PointF center(Visual v){
  return new PointF(x + (width() - v.width()) / 2f,y + (height() - v.height()) / 2f);
}",0.3671497584541063
164006,"@Override protected boolean affectHero(Hero hero){
  Sample.INSTANCE.play(Assets.SND_DRINK);
  emitter.parent.add(new Identification(DungeonTilemap.tileCenterToWorld(pos)));
  hero.belongings.observe();
  for (int i=0; i < Dungeon.level.length(); i++) {
    int terr=Dungeon.level.map[i];
    if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
      Dungeon.level.discover(i);
      if (Dungeon.visible[i]) {
        GameScene.discoverTile(i,terr);
      }
    }
  }
  Buff.affect(hero,Awareness.class,Awareness.DURATION);
  Dungeon.observe();
  Dungeon.hero.interrupt();
  GLog.p(Messages.get(this,""String_Node_Str""));
  Journal.remove(Feature.WELL_OF_AWARENESS);
  return true;
}","@Override protected boolean affectHero(Hero hero){
  Sample.INSTANCE.play(Assets.SND_DRINK);
  emitter.parent.add(new Identification(hero.sprite.center()));
  hero.belongings.observe();
  for (int i=0; i < Dungeon.level.length(); i++) {
    int terr=Dungeon.level.map[i];
    if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
      Dungeon.level.discover(i);
      if (Dungeon.visible[i]) {
        GameScene.discoverTile(i,terr);
      }
    }
  }
  Buff.affect(hero,Awareness.class,Awareness.DURATION);
  Dungeon.observe();
  Dungeon.hero.interrupt();
  GLog.p(Messages.get(this,""String_Node_Str""));
  Journal.remove(Feature.WELL_OF_AWARENESS);
  return true;
}",0.9591078066914498
164007,"private boolean chain(int target){
  if (chainsUsed || enemy.properties().contains(Property.IMMOVABLE))   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != enemy.pos || chain.path.size() < 2 || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newPosFinal=newPos;
      yell(Messages.get(this,""String_Node_Str""));
      sprite.parent.add(new Chains(pos,enemy.pos,new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal,new Callback(){
            public void call(){
              enemy.pos=newPosFinal;
              Dungeon.level.press(newPosFinal,enemy);
              Cripple.prolong(enemy,Cripple.class,4f);
              if (enemy == Dungeon.hero) {
                Dungeon.hero.interrupt();
                Dungeon.observe();
                GameScene.updateFog();
              }
            }
          }
),-1);
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}","private boolean chain(int target){
  if (chainsUsed || enemy.properties().contains(Property.IMMOVABLE))   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != enemy.pos || chain.path.size() < 2 || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newPosFinal=newPos;
      yell(Messages.get(this,""String_Node_Str""));
      sprite.parent.add(new Chains(sprite.center(),enemy.sprite.center(),new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal,new Callback(){
            public void call(){
              enemy.pos=newPosFinal;
              Dungeon.level.press(newPosFinal,enemy);
              Cripple.prolong(enemy,Cripple.class,4f);
              if (enemy == Dungeon.hero) {
                Dungeon.hero.interrupt();
                Dungeon.observe();
                GameScene.updateFog();
              }
            }
          }
),-1);
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}",0.9860248447204968
164008,"public Arc(int from,int to){
  start=DungeonTilemap.tileCenterToWorld(from);
  end=DungeonTilemap.tileCenterToWorld(to);
  arc1=new Image(Effects.get(Effects.Type.LIGHTNING));
  arc1.x=start.x - arc1.origin.x;
  arc1.y=start.y - arc1.origin.y;
  arc1.origin.set(0,arc1.height() / 2);
  add(arc1);
  arc2=new Image(Effects.get(Effects.Type.LIGHTNING));
  arc2.origin.set(0,arc2.height() / 2);
  add(arc2);
}","public Arc(PointF from,PointF to){
  start=from;
  end=to;
  arc1=new Image(Effects.get(Effects.Type.LIGHTNING));
  arc1.x=start.x - arc1.origin.x;
  arc1.y=start.y - arc1.origin.y;
  arc1.origin.set(0,arc1.height() / 2);
  add(arc1);
  arc2=new Image(Effects.get(Effects.Type.LIGHTNING));
  arc2.origin.set(0,arc2.height() / 2);
  add(arc2);
}",0.8506666666666667
164009,"public static void hit(int pos,float angle){
  Group parent=Dungeon.hero.sprite.parent;
  Wound w=(Wound)parent.recycle(Wound.class);
  parent.bringToFront(w);
  w.reset(pos);
  w.angle=angle;
}","public static void hit(int pos,float angle){
  Group parent=Dungeon.hero.sprite.parent;
  Surprise s=(Surprise)parent.recycle(Surprise.class);
  parent.bringToFront(s);
  s.reset(pos);
  s.angle=angle;
}",0.7758186397984886
164010,"public void reset(int p){
  revive();
  x=(p % Dungeon.level.width()) * DungeonTilemap.SIZE + (DungeonTilemap.SIZE - width) / 2;
  y=(p / Dungeon.level.width()) * DungeonTilemap.SIZE + (DungeonTilemap.SIZE - height) / 2;
  time=TIME_TO_FADE;
}","public void reset(Visual v){
  revive();
  point(v.center(this));
  time=TIME_TO_FADE;
}",0.4108761329305136
164011,"public void reset(int p){
  revive();
  x=(p % Dungeon.level.width()) * DungeonTilemap.SIZE + (DungeonTilemap.SIZE - width) / 2;
  y=(p / Dungeon.level.width()) * DungeonTilemap.SIZE + (DungeonTilemap.SIZE - height) / 2;
  time=TIME_TO_FADE;
}","public void reset(Visual v){
  revive();
  point(v.center(this));
  time=TIME_TO_FADE;
}",0.4108761329305136
164012,"public synchronized void dispatch(T t){
  canceled=false;
  for (  Listener<T> listener : listeners) {
    if (listeners.contains(listener)) {
      listener.onSignal(t);
      if (canceled) {
        return;
      }
    }
  }
}","public synchronized void dispatch(T t){
  canceled=false;
  for (  Listener<T> listener : listeners) {
    listener.onSignal(t);
    if (canceled) {
      return;
    }
  }
}",0.8656716417910447
164013,"public boolean berserking(){
  if (target.HP == 0 && state == State.NORMAL) {
    WarriorShield shield=target.buff(WarriorShield.class);
    if (shield != null) {
      state=State.BERSERK;
      BuffIndicator.refreshHero();
      target.SHLD=shield.maxShield() * 5;
      SpellSprite.show(target,SpellSprite.BERSERK);
      Sample.INSTANCE.play(Assets.SND_CHALLENGE);
      GameScene.flash(0xFF0000);
    }
  }
  return state == State.BERSERK;
}","public boolean berserking(){
  if (target.HP == 0 && state == State.NORMAL) {
    WarriorShield shield=target.buff(WarriorShield.class);
    if (shield != null) {
      state=State.BERSERK;
      BuffIndicator.refreshHero();
      target.SHLD=shield.maxShield() * 5;
      SpellSprite.show(target,SpellSprite.BERSERK);
      Sample.INSTANCE.play(Assets.SND_CHALLENGE);
      GameScene.flash(0xFF0000);
    }
  }
  return state == State.BERSERK && target.SHLD > 0;
}",0.9791437980241492
164014,"@Override public boolean isAlive(){
  if (subClass == HeroSubClass.BERSERKER && berserk != null && berserk.berserking()) {
    return true;
  }
  return super.isAlive();
}","@Override public boolean isAlive(){
  if (subClass == HeroSubClass.BERSERKER) {
    if (berserk == null)     berserk=Buff.affect(this,Berserk.class);
    if (berserk.berserking())     return true;
  }
  return super.isAlive();
}",0.731829573934837
164015,"private void checkEnemies(){
  candidates.clear();
  int v=Dungeon.hero.visibleEnemies();
  for (int i=0; i < v; i++) {
    Mob mob=Dungeon.hero.visibleEnemy(i);
    if (Dungeon.hero.canAttack(mob)) {
      candidates.add(mob);
    }
  }
  if (!candidates.contains(lastTarget)) {
    if (candidates.isEmpty()) {
      lastTarget=null;
    }
 else {
      active=true;
      lastTarget=Random.element(candidates);
      updateImage();
      flash();
    }
  }
 else {
    if (!bg.visible) {
      active=true;
      flash();
    }
  }
  visible(lastTarget != null);
  enable(bg.visible);
}","private synchronized void checkEnemies(){
  candidates.clear();
  int v=Dungeon.hero.visibleEnemies();
  for (int i=0; i < v; i++) {
    Mob mob=Dungeon.hero.visibleEnemy(i);
    if (Dungeon.hero.canAttack(mob)) {
      candidates.add(mob);
    }
  }
  if (!candidates.contains(lastTarget)) {
    if (candidates.isEmpty()) {
      lastTarget=null;
    }
 else {
      active=true;
      lastTarget=Random.element(candidates);
      updateImage();
      flash();
    }
  }
 else {
    if (!bg.visible) {
      active=true;
      flash();
    }
  }
  visible(lastTarget != null);
  enable(bg.visible);
}",0.9890664423885618
164016,"@Override public void update(){
  super.update();
  if (!bg.visible) {
    enable(false);
    if (delay > 0f)     delay-=Game.elapsed;
    if (delay <= 0f)     active=false;
  }
 else {
    delay=0.75f;
    active=true;
    if (Dungeon.hero.isAlive()) {
      enable(Dungeon.hero.ready);
    }
 else {
      visible(false);
      enable(false);
    }
  }
}","@Override public synchronized void update(){
  super.update();
  if (!bg.visible) {
    enable(false);
    if (delay > 0f)     delay-=Game.elapsed;
    if (delay <= 0f)     active=false;
  }
 else {
    delay=0.75f;
    active=true;
    if (Dungeon.hero.isAlive()) {
      enable(Dungeon.hero.ready);
    }
 else {
      visible(false);
      enable(false);
    }
  }
}",0.9820689655172414
164017,"@Override public void execute(Hero hero,String action){
  super.execute(hero,action);
  if (action.equals(AC_EAT)) {
switch (holiday) {
case NONE:
default :
      break;
case HWEEN:
    hero.HP=Math.min(hero.HP + hero.HT / 10,hero.HT);
  hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
break;
case XMAS:
Buff.affect(hero,Recharging.class,2f);
ScrollOfRecharging.charge(hero);
break;
}
}
}","@Override public void execute(Hero hero,String action){
  super.execute(hero,action);
  if (action.equals(AC_EAT)) {
switch (holiday) {
case NONE:
      break;
case HWEEN:
    hero.HP=Math.min(hero.HP + hero.HT / 10,hero.HT);
  hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
break;
case XMAS:
Buff.affect(hero,Recharging.class,2f);
ScrollOfRecharging.charge(hero);
break;
}
}
}",0.9873737373737372
164018,"@Override public boolean isAlive(){
  if (subClass == HeroSubClass.BERSERKER) {
    if (berserk == null)     berserk=Buff.affect(this,Berserk.class);
    if (berserk.berserking())     return true;
  }
  return super.isAlive();
}","@Override public boolean isAlive(){
  if (subClass == HeroSubClass.BERSERKER && berserk != null && berserk.berserking()) {
    return true;
  }
  return super.isAlive();
}",0.8220551378446115
164019,"@Override public void damage(int dmg,Object src){
  if (buff(TimekeepersHourglass.timeStasis.class) != null)   return;
  if (!(src instanceof Hunger || src instanceof Viscosity.DeferedDamage) && damageInterrupt) {
    interrupt();
    resting=false;
  }
  if (this.buff(Drowsy.class) != null) {
    Buff.detach(this,Drowsy.class);
    GLog.w(Messages.get(this,""String_Node_Str""));
  }
  CapeOfThorns.Thorns thorns=buff(CapeOfThorns.Thorns.class);
  if (thorns != null) {
    dmg=thorns.proc(dmg,(src instanceof Char ? (Char)src : null),this);
  }
  int tenacity=RingOfTenacity.getBonus(this,RingOfTenacity.Tenacity.class);
  if (tenacity != 0)   dmg=(int)Math.ceil((float)dmg * Math.pow(0.85,tenacity * ((float)(HT - HP) / HT)));
  if (belongings.armor != null && belongings.armor.hasGlyph(AntiMagic.class) && RingOfElements.FULL.contains(src.getClass())) {
    dmg-=Random.NormalIntRange(belongings.armor.DRMin(),belongings.armor.DRMax()) / 2;
  }
  super.damage(dmg,src);
}","@Override public void damage(int dmg,Object src){
  if (buff(TimekeepersHourglass.timeStasis.class) != null)   return;
  if (!(src instanceof Hunger || src instanceof Viscosity.DeferedDamage) && damageInterrupt) {
    interrupt();
    resting=false;
  }
  if (this.buff(Drowsy.class) != null) {
    Buff.detach(this,Drowsy.class);
    GLog.w(Messages.get(this,""String_Node_Str""));
  }
  CapeOfThorns.Thorns thorns=buff(CapeOfThorns.Thorns.class);
  if (thorns != null) {
    dmg=thorns.proc(dmg,(src instanceof Char ? (Char)src : null),this);
  }
  int tenacity=RingOfTenacity.getBonus(this,RingOfTenacity.Tenacity.class);
  if (tenacity != 0)   dmg=(int)Math.ceil((float)dmg * Math.pow(0.85,tenacity * ((float)(HT - HP) / HT)));
  if (belongings.armor != null && belongings.armor.hasGlyph(AntiMagic.class) && RingOfElements.FULL.contains(src.getClass())) {
    dmg-=Random.NormalIntRange(belongings.armor.DRMin(),belongings.armor.DRMax()) / 2;
  }
  if (subClass == HeroSubClass.BERSERKER && berserk == null) {
    berserk=Buff.affect(this,Berserk.class);
  }
  super.damage(dmg,src);
}",0.9456838021338506
164020,"@Override public boolean doPickUp(Hero hero){
  if (super.doPickUp(hero)) {
    GLog.n(Messages.get(""String_Node_Str""));
    Buff.affect(hero,DustGhostSpawner.class);
    return true;
  }
  return false;
}","@Override public boolean doPickUp(Hero hero){
  if (super.doPickUp(hero)) {
    GLog.n(Messages.get(this,""String_Node_Str""));
    Buff.affect(hero,DustGhostSpawner.class);
    return true;
  }
  return false;
}",0.9879518072289156
164021,"public void put(String key,Collection<? extends Bundlable> collection){
  JSONArray array=new JSONArray();
  for (  Bundlable object : collection) {
    if (object != null) {
      Bundle bundle=new Bundle();
      bundle.put(CLASS_NAME,object.getClass().getName());
      object.storeInBundle(bundle);
      array.put(bundle.data);
    }
  }
  try {
    data.put(key,array);
  }
 catch (  JSONException e) {
    reportException(e);
  }
}","public void put(String key,Collection<? extends Bundlable> collection){
  JSONArray array=new JSONArray();
  for (  Bundlable object : collection) {
    if (object != null) {
      Class cl=object.getClass();
      if (!cl.isMemberClass() || Modifier.isStatic(cl.getModifiers())) {
        Bundle bundle=new Bundle();
        bundle.put(CLASS_NAME,cl.getName());
        object.storeInBundle(bundle);
        array.put(bundle.data);
      }
    }
  }
  try {
    data.put(key,array);
  }
 catch (  JSONException e) {
    reportException(e);
  }
}",0.7703252032520326
164022,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  if (bundle.contains(LENGTH)) {
    cur=new int[bundle.getInt(LENGTH)];
  }
 else {
    cur=new int[1024];
  }
  off=new int[cur.length];
  int[] data=bundle.getIntArray(CUR);
  if (data != null) {
    int start=bundle.getInt(START);
    for (int i=0; i < data.length; i++) {
      cur[i + start]=data[i];
      volume+=data[i];
    }
  }
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  if (bundle.contains(CUR)) {
    if (bundle.contains(LENGTH)) {
      cur=new int[bundle.getInt(LENGTH)];
    }
 else {
      cur=new int[1024];
    }
    off=new int[cur.length];
    int[] data=bundle.getIntArray(CUR);
    int start=bundle.getInt(START);
    for (int i=0; i < data.length; i++) {
      cur[i + start]=data[i];
      volume+=data[i];
    }
  }
}",0.9255079006772008
164023,"@Override public void filter(int minMode,int maxMode){
  fModeMin=minMode;
  fModeMax=maxMode;
  if (id != -1)   super.filter(fModeMin=minMode,fModeMax=maxMode);
}","@Override public void filter(int minMode,int maxMode){
  if (fModeMin == minMode && fModeMax == maxMode)   return;
  fModeMin=minMode;
  fModeMax=maxMode;
  if (id != -1)   super.filter(fModeMin,fModeMax);
}",0.7945945945945946
164024,"@Override protected void generate(){
  super.generate();
  bitmap(bitmap,premultiplied);
  filter(fModeMin,fModeMax);
  wrap(wModeH,wModeV);
}","@Override protected void generate(){
  super.generate();
  bitmap(bitmap,premultiplied);
  super.filter(fModeMin,fModeMax);
  super.wrap(wModeH,wModeV);
}",0.9594594594594594
164025,"@Override public void wrap(int s,int t){
  wModeH=s;
  wModeV=t;
  if (id != -1)   super.wrap(wModeH=s,wModeV=t);
}","@Override public void wrap(int s,int t){
  if (wModeH == s && wModeV == t)   return;
  wModeH=s;
  wModeV=t;
  if (id != -1)   super.wrap(wModeH,wModeV);
}",0.8222222222222222
164026,"public void move(int step){
  if (Dungeon.level.adjacent(step,pos) && buff(Vertigo.class) != null) {
    sprite.interruptMotion();
    int newPos=pos + PathFinder.NEIGHBOURS8[Random.Int(8)];
    if (!(Level.passable[newPos] || Level.avoid[newPos]) || Actor.findChar(newPos) != null)     return;
 else {
      sprite.move(pos,newPos);
      step=newPos;
    }
  }
  if (Dungeon.level.map[pos] == Terrain.OPEN_DOOR) {
    Door.leave(pos,this);
  }
  pos=step;
  if (flying && Dungeon.level.map[pos] == Terrain.DOOR) {
    Door.enter(pos,this);
  }
  if (this != Dungeon.hero) {
    sprite.visible=Dungeon.visible[pos];
  }
}","public void move(int step){
  if (Dungeon.level.adjacent(step,pos) && buff(Vertigo.class) != null) {
    sprite.interruptMotion();
    int newPos=pos + PathFinder.NEIGHBOURS8[Random.Int(8)];
    if (!(Level.passable[newPos] || Level.avoid[newPos]) || Actor.findChar(newPos) != null)     return;
 else {
      sprite.move(pos,newPos);
      step=newPos;
    }
  }
  if (Dungeon.level.map[pos] == Terrain.OPEN_DOOR) {
    Door.leave(pos);
  }
  pos=step;
  if (flying && Dungeon.level.map[pos] == Terrain.DOOR) {
    Door.enter(pos);
  }
  if (this != Dungeon.hero) {
    sprite.visible=Dungeon.visible[pos];
  }
}",0.8752025931928687
164027,"@Override protected void evolve(){
  boolean[] flamable=Level.flamable;
  int cell;
  int fire;
  boolean observe=false;
  for (int i=area.left - 1; i <= area.right; i++) {
    for (int j=area.top - 1; j <= area.bottom; j++) {
      cell=i + j * Dungeon.level.width();
      if (cur[cell] > 0) {
        burn(cell);
        fire=cur[cell] - 1;
        if (flamable[cell] && Random.Int(fire + 1) == 0) {
          int oldTile=Dungeon.level.map[cell];
          Dungeon.level.destroy(cell);
          observe=true;
          GameScene.updateMap(cell);
          if (Dungeon.visible[cell]) {
            GameScene.discoverTile(cell,oldTile);
          }
        }
      }
 else {
        if (flamable[cell] && (cur[cell - 1] > 0 || cur[cell + 1] > 0 || cur[cell - Dungeon.level.width()] > 0 || cur[cell + Dungeon.level.width()] > 0)) {
          fire=4;
          burn(cell);
          area.union(i,j);
        }
 else {
          fire=0;
        }
      }
      volume+=(off[cell]=fire);
    }
  }
  if (observe) {
    Dungeon.observe();
  }
}","@Override protected void evolve(){
  boolean[] flamable=Level.flamable;
  int cell;
  int fire;
  boolean observe=false;
  for (int i=area.left - 1; i <= area.right; i++) {
    for (int j=area.top - 1; j <= area.bottom; j++) {
      cell=i + j * Dungeon.level.width();
      if (cur[cell] > 0) {
        burn(cell);
        fire=cur[cell] - 1;
        if (fire <= 0 && flamable[cell]) {
          int oldTile=Dungeon.level.map[cell];
          Dungeon.level.destroy(cell);
          observe=true;
          GameScene.updateMap(cell);
          if (Dungeon.visible[cell]) {
            GameScene.discoverTile(cell,oldTile);
          }
        }
      }
 else {
        if (flamable[cell] && (cur[cell - 1] > 0 || cur[cell + 1] > 0 || cur[cell - Dungeon.level.width()] > 0 || cur[cell + Dungeon.level.width()] > 0)) {
          fire=4;
          burn(cell);
          area.union(i,j);
        }
 else {
          fire=0;
        }
      }
      volume+=(off[cell]=fire);
    }
  }
  if (observe) {
    Dungeon.observe();
  }
}",0.9719264278799612
164028,"@Override public boolean act(){
  if (target.isAlive()) {
    int maxDmg=3 + Math.round(4 * target.HP / (float)target.HT);
    int damage=Random.Int(1,maxDmg);
    Buff.detach(target,Chill.class);
    if (target instanceof Hero) {
      Hero hero=(Hero)target;
      if (hero.belongings.armor != null && hero.belongings.armor.hasGlyph(Brimstone.class)) {
        float heal=hero.belongings.armor.level() / 5f;
        if (Random.Float() < heal % 1)         heal++;
        if (heal >= 1 && hero.HP < hero.HT) {
          hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),(int)heal);
          hero.HP=Math.min(hero.HT,hero.HP + (int)heal);
        }
      }
 else {
        hero.damage(damage,this);
        Item item=hero.belongings.randomUnequipped();
        if (item instanceof Scroll && !(item instanceof ScrollOfUpgrade || item instanceof ScrollOfMagicalInfusion)) {
          item=item.detach(hero.belongings.backpack);
          GLog.w(Messages.get(this,""String_Node_Str"",Messages.capitalize(item.toString())));
          Heap.burnFX(hero.pos);
        }
 else         if (item instanceof MysteryMeat) {
          item=item.detach(hero.belongings.backpack);
          ChargrilledMeat steak=new ChargrilledMeat();
          if (!steak.collect(hero.belongings.backpack)) {
            Dungeon.level.drop(steak,hero.pos).sprite.drop();
          }
          GLog.w(Messages.get(this,""String_Node_Str"",item.toString()));
          Heap.burnFX(hero.pos);
        }
      }
    }
 else {
      target.damage(damage,this);
    }
    if (target instanceof Thief) {
      Item item=((Thief)target).item;
      if (item instanceof Scroll && !(item instanceof ScrollOfUpgrade || item instanceof ScrollOfMagicalInfusion)) {
        target.sprite.emitter().burst(ElmoParticle.FACTORY,6);
        ((Thief)target).item=null;
      }
    }
  }
 else {
    detach();
  }
  if (Level.flamable[target.pos]) {
    GameScene.add(Blob.seed(target.pos,4,Fire.class));
  }
  spend(TICK);
  left-=TICK;
  if (left <= 0 || (Level.water[target.pos] && !target.flying)) {
    detach();
  }
  return true;
}","@Override public boolean act(){
  if (target.isAlive()) {
    int maxDmg=3 + Math.round(4 * target.HP / (float)target.HT);
    int damage=Random.Int(1,maxDmg);
    Buff.detach(target,Chill.class);
    if (target instanceof Hero) {
      Hero hero=(Hero)target;
      if (hero.belongings.armor != null && hero.belongings.armor.hasGlyph(Brimstone.class)) {
        float heal=hero.belongings.armor.level() / 5f;
        if (Random.Float() < heal % 1)         heal++;
        if (heal >= 1 && hero.HP < hero.HT) {
          hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),(int)heal);
          hero.HP=Math.min(hero.HT,hero.HP + (int)heal);
        }
      }
 else {
        hero.damage(damage,this);
        Item item=hero.belongings.randomUnequipped();
        if (item instanceof Scroll && !(item instanceof ScrollOfUpgrade || item instanceof ScrollOfMagicalInfusion)) {
          item=item.detach(hero.belongings.backpack);
          GLog.w(Messages.get(this,""String_Node_Str"",Messages.capitalize(item.toString())));
          Heap.burnFX(hero.pos);
        }
 else         if (item instanceof MysteryMeat) {
          item=item.detach(hero.belongings.backpack);
          ChargrilledMeat steak=new ChargrilledMeat();
          if (!steak.collect(hero.belongings.backpack)) {
            Dungeon.level.drop(steak,hero.pos).sprite.drop();
          }
          GLog.w(Messages.get(this,""String_Node_Str"",item.toString()));
          Heap.burnFX(hero.pos);
        }
      }
    }
 else {
      target.damage(damage,this);
    }
    if (target instanceof Thief) {
      Item item=((Thief)target).item;
      if (item instanceof Scroll && !(item instanceof ScrollOfUpgrade || item instanceof ScrollOfMagicalInfusion)) {
        target.sprite.emitter().burst(ElmoParticle.FACTORY,6);
        ((Thief)target).item=null;
      }
    }
  }
 else {
    detach();
  }
  if (Level.flamable[target.pos] && Blob.volumeAt(target.pos,Fire.class) == 0) {
    GameScene.add(Blob.seed(target.pos,4,Fire.class));
  }
  spend(TICK);
  left-=TICK;
  if (left <= 0 || (Level.water[target.pos] && !target.flying)) {
    detach();
  }
  return true;
}",0.989364216497282
164029,"public static void reallyDie(Object cause){
  int length=Dungeon.level.length();
  int[] map=Dungeon.level.map;
  boolean[] visited=Dungeon.level.visited;
  boolean[] discoverable=Level.discoverable;
  for (int i=0; i < length; i++) {
    int terr=map[i];
    if (discoverable[i]) {
      visited[i]=true;
      if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
        Dungeon.level.discover(i);
      }
    }
  }
  Bones.leave();
  Dungeon.observe();
  Dungeon.hero.belongings.identify();
  int pos=Dungeon.hero.pos;
  ArrayList<Integer> passable=new ArrayList<Integer>();
  for (  Integer ofs : PathFinder.NEIGHBOURS8) {
    int cell=pos + ofs;
    if ((Level.passable[cell] || Level.avoid[cell]) && Dungeon.level.heaps.get(cell) == null) {
      passable.add(cell);
    }
  }
  Collections.shuffle(passable);
  ArrayList<Item> items=new ArrayList<Item>(Dungeon.hero.belongings.backpack.items);
  for (  Integer cell : passable) {
    if (items.isEmpty()) {
      break;
    }
    Item item=Random.element(items);
    Dungeon.level.drop(item,cell).sprite.drop(pos);
    items.remove(item);
  }
  GameScene.gameOver();
  if (cause instanceof Hero.Doom) {
    ((Hero.Doom)cause).onDeath();
  }
  Dungeon.deleteGame(Dungeon.hero.heroClass,true);
}","public static void reallyDie(Object cause){
  int length=Dungeon.level.length();
  int[] map=Dungeon.level.map;
  boolean[] visited=Dungeon.level.visited;
  boolean[] discoverable=Level.discoverable;
  for (int i=0; i < length; i++) {
    int terr=map[i];
    if (discoverable[i]) {
      visited[i]=true;
      if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
        Dungeon.level.discover(i);
      }
    }
  }
  Bones.leave();
  Dungeon.observe();
  GameScene.updateFog();
  Dungeon.hero.belongings.identify();
  int pos=Dungeon.hero.pos;
  ArrayList<Integer> passable=new ArrayList<Integer>();
  for (  Integer ofs : PathFinder.NEIGHBOURS8) {
    int cell=pos + ofs;
    if ((Level.passable[cell] || Level.avoid[cell]) && Dungeon.level.heaps.get(cell) == null) {
      passable.add(cell);
    }
  }
  Collections.shuffle(passable);
  ArrayList<Item> items=new ArrayList<Item>(Dungeon.hero.belongings.backpack.items);
  for (  Integer cell : passable) {
    if (items.isEmpty()) {
      break;
    }
    Item item=Random.element(items);
    Dungeon.level.drop(item,cell).sprite.drop(pos);
    items.remove(item);
  }
  GameScene.gameOver();
  if (cause instanceof Hero.Doom) {
    ((Hero.Doom)cause).onDeath();
  }
  Dungeon.deleteGame(Dungeon.hero.heroClass,true);
}",0.9900833002776676
164030,"@Override public int defenseProc(Char enemy,int damage){
  if (HP >= damage + 2) {
    ArrayList<Integer> candidates=new ArrayList<>();
    boolean[] passable=Level.passable;
    int[] neighbours={pos + 1,pos - 1,pos + Dungeon.level.width(),pos - Dungeon.level.width()};
    for (    int n : neighbours) {
      if (passable[n] && Actor.findChar(n) == null) {
        candidates.add(n);
      }
    }
    if (candidates.size() > 0) {
      Swarm clone=split();
      clone.HP=(HP - damage) / 2;
      clone.pos=Random.element(candidates);
      clone.state=clone.HUNTING;
      if (Dungeon.level.map[clone.pos] == Terrain.DOOR) {
        Door.enter(clone.pos,clone);
      }
      GameScene.add(clone,SPLIT_DELAY);
      Actor.addDelayed(new Pushing(clone,pos,clone.pos),-1);
      HP-=clone.HP;
    }
  }
  return super.defenseProc(enemy,damage);
}","@Override public int defenseProc(Char enemy,int damage){
  if (HP >= damage + 2) {
    ArrayList<Integer> candidates=new ArrayList<>();
    boolean[] passable=Level.passable;
    int[] neighbours={pos + 1,pos - 1,pos + Dungeon.level.width(),pos - Dungeon.level.width()};
    for (    int n : neighbours) {
      if (passable[n] && Actor.findChar(n) == null) {
        candidates.add(n);
      }
    }
    if (candidates.size() > 0) {
      Swarm clone=split();
      clone.HP=(HP - damage) / 2;
      clone.pos=Random.element(candidates);
      clone.state=clone.HUNTING;
      if (Dungeon.level.map[clone.pos] == Terrain.DOOR) {
        Door.enter(clone.pos);
      }
      GameScene.add(clone,SPLIT_DELAY);
      Actor.addDelayed(new Pushing(clone,pos,clone.pos),-1);
      HP-=clone.HP;
    }
  }
  return super.defenseProc(enemy,damage);
}",0.99645390070922
164031,"@SuppressLint(""String_Node_Str"") @Override public void update(){
  super.update();
  left-=Game.elapsed;
  if (left <= 0) {
    kill();
  }
 else {
    float p=1 - left / lifespan;
switch (type) {
case STAR:
case FORGE:
      scale.set(1 - p);
    am=p < 0.2f ? p * 5f : (1 - p) * 1.25f;
  break;
case KIT:
case MASTERY:
am=1 - p * p;
break;
case EVOKE:
case HEALING:
am=p < 0.5f ? 1 : 2 - p * 2;
break;
case RED_LIGHT:
case LIGHT:
am=scale.set(p < 0.2f ? p * 5f : (1 - p) * 1.25f).x;
break;
case DISCOVER:
am=1 - p;
scale.set((p < 0.5f ? p : 1 - p) * 2);
break;
case QUESTION:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 3));
break;
case UP:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 2));
break;
case SCREAM:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2f);
scale.set(p * 7);
break;
case BONE:
case RATTLE:
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
case ROCK:
am=p < 0.2f ? p * 5 : 1;
break;
case NOTE:
am=1 - p * p;
break;
case WOOL:
scale.set(1 - p);
break;
case CHANGE:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2);
scale.y=(1 + p) * 0.5f;
scale.x=scale.y * (float)Math.cos(left * 15);
break;
case HEART:
scale.set(1 - p);
am=1 - p * p;
break;
case BUBBLE:
am=p < 0.2f ? p * 5 : 1;
break;
case STEAM:
case TOXIC:
case PARALYSIS:
case CONFUSION:
case DUST:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 0.5f);
scale.set(1 + p);
break;
case VENOM:
hardlight(ColorMath.interpolate(0x8844FF,0x00FF00,p));
case STENCH:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 0.5f);
scale.set(1 + p);
break;
case JET:
am=(p < 0.5f ? p : 1 - p) * 2;
scale.set(p * 1.5f);
break;
case COIN:
scale.x=(float)Math.cos(left * 5);
rm=gm=bm=(Math.abs(scale.x) + 1) * 0.5f;
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
}
}
}","@SuppressLint(""String_Node_Str"") @Override public void update(){
  super.update();
  left-=Game.elapsed;
  if (left <= 0) {
    kill();
  }
 else {
    float p=1 - left / lifespan;
switch (type) {
case STAR:
case FORGE:
      scale.set(1 - p);
    am=p < 0.2f ? p * 5f : (1 - p) * 1.25f;
  break;
case KIT:
case MASTERY:
am=1 - p * p;
break;
case EVOKE:
case HEALING:
am=p < 0.5f ? 1 : 2 - p * 2;
break;
case RED_LIGHT:
case LIGHT:
am=scale.set(p < 0.2f ? p * 5f : (1 - p) * 1.25f).x;
break;
case DISCOVER:
am=1 - p;
scale.set((p < 0.5f ? p : 1 - p) * 2);
break;
case QUESTION:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 3));
break;
case UP:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 2));
break;
case SCREAM:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2f);
scale.set(p * 7);
break;
case BONE:
case RATTLE:
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
case ROCK:
am=p < 0.2f ? p * 5 : 1;
break;
case NOTE:
am=1 - p * p;
break;
case WOOL:
scale.set(1 - p);
break;
case CHANGE:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2);
scale.y=(1 + p) * 0.5f;
scale.x=scale.y * (float)Math.cos(left * 15);
break;
case HEART:
scale.set(1 - p);
am=1 - p * p;
break;
case BUBBLE:
am=p < 0.2f ? p * 5 : 1;
break;
case STEAM:
case TOXIC:
case PARALYSIS:
case CONFUSION:
case DUST:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 0.5f);
scale.set(1 + p);
break;
case VENOM:
hardlight(ColorMath.interpolate(0x8844FF,0x00FF00,p));
case STENCH:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p));
scale.set(1 + p);
break;
case JET:
am=(p < 0.5f ? p : 1 - p) * 2;
scale.set(p * 1.5f);
break;
case COIN:
scale.x=(float)Math.cos(left * 5);
rm=gm=bm=(Math.abs(scale.x) + 1) * 0.5f;
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
}
}
}",0.9979526177244809
164032,"private void spreadFlames(int cell,float strength){
  if (strength >= 0 && Level.passable[cell]) {
    affectedCells.add(cell);
    if (strength >= 1.5f) {
      visualCells.remove(cell);
      spreadFlames(cell + PathFinder.CIRCLE8[left(direction)],strength - 1.5f);
      spreadFlames(cell + PathFinder.CIRCLE8[direction],strength - 1.5f);
      spreadFlames(cell + PathFinder.CIRCLE8[right(direction)],strength - 1.5f);
    }
 else {
      visualCells.add(cell);
    }
  }
 else   if (!Level.passable[cell])   visualCells.add(cell);
}","private void spreadFlames(int cell,float strength){
  if (strength >= 0 && (Level.passable[cell] || Level.flamable[cell])) {
    affectedCells.add(cell);
    if (strength >= 1.5f) {
      visualCells.remove(cell);
      spreadFlames(cell + PathFinder.CIRCLE8[left(direction)],strength - 1.5f);
      spreadFlames(cell + PathFinder.CIRCLE8[direction],strength - 1.5f);
      spreadFlames(cell + PathFinder.CIRCLE8[right(direction)],strength - 1.5f);
    }
 else {
      visualCells.add(cell);
    }
  }
 else   if (!Level.passable[cell])   visualCells.add(cell);
}",0.9763636363636364
164033,"public void press(int cell,Char ch){
  if (ch != null && pit[cell] && !ch.flying) {
    if (ch == Dungeon.hero) {
      Chasm.heroFall(cell);
    }
 else     if (ch instanceof Mob) {
      Chasm.mobFall((Mob)ch);
    }
    return;
  }
  Trap trap=null;
switch (map[cell]) {
case Terrain.SECRET_TRAP:
    GLog.i(Messages.get(Level.class,""String_Node_Str""));
case Terrain.TRAP:
  trap=traps.get(cell);
break;
case Terrain.HIGH_GRASS:
HighGrass.trample(this,cell,ch);
break;
case Terrain.WELL:
WellWater.affectCell(cell);
break;
case Terrain.ALCHEMY:
if (ch == null) {
Alchemy.transmute(cell);
}
break;
case Terrain.DOOR:
Door.enter(cell,ch);
break;
}
TimekeepersHourglass.timeFreeze timeFreeze=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
if (trap != null) {
if (timeFreeze == null) {
if (ch == Dungeon.hero) Dungeon.hero.interrupt();
trap.trigger();
}
 else {
Sample.INSTANCE.play(Assets.SND_TRAP);
discover(cell);
timeFreeze.setDelayedPress(cell);
}
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.trigger();
}
}","public void press(int cell,Char ch){
  if (ch != null && pit[cell] && !ch.flying) {
    if (ch == Dungeon.hero) {
      Chasm.heroFall(cell);
    }
 else     if (ch instanceof Mob) {
      Chasm.mobFall((Mob)ch);
    }
    return;
  }
  Trap trap=null;
switch (map[cell]) {
case Terrain.SECRET_TRAP:
    GLog.i(Messages.get(Level.class,""String_Node_Str""));
case Terrain.TRAP:
  trap=traps.get(cell);
break;
case Terrain.HIGH_GRASS:
HighGrass.trample(this,cell,ch);
break;
case Terrain.WELL:
WellWater.affectCell(cell);
break;
case Terrain.ALCHEMY:
if (ch == null) {
Alchemy.transmute(cell);
}
break;
case Terrain.DOOR:
Door.enter(cell);
break;
}
TimekeepersHourglass.timeFreeze timeFreeze=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
if (trap != null) {
if (timeFreeze == null) {
if (ch == Dungeon.hero) Dungeon.hero.interrupt();
trap.trigger();
}
 else {
Sample.INSTANCE.play(Assets.SND_TRAP);
discover(cell);
timeFreeze.setDelayedPress(cell);
}
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.trigger();
}
}",0.998550024166264
164034,"public void mobPress(Mob mob){
  int cell=mob.pos;
  if (pit[cell] && !mob.flying) {
    Chasm.mobFall(mob);
    return;
  }
  Trap trap=null;
switch (map[cell]) {
case Terrain.TRAP:
    trap=traps.get(cell);
  break;
case Terrain.DOOR:
Door.enter(cell,mob);
break;
}
if (trap != null) {
trap.trigger();
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.trigger();
}
}","public void mobPress(Mob mob){
  int cell=mob.pos;
  if (pit[cell] && !mob.flying) {
    Chasm.mobFall(mob);
    return;
  }
  Trap trap=null;
switch (map[cell]) {
case Terrain.TRAP:
    trap=traps.get(cell);
  break;
case Terrain.DOOR:
Door.enter(cell);
break;
}
if (trap != null) {
trap.trigger();
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.trigger();
}
}",0.9946666666666668
164035,"public static void leave(int pos,Char ch){
  if (Dungeon.level.heaps.get(pos) == null) {
    Level.set(pos,Terrain.DOOR);
    GameScene.updateMap(pos);
    if (ch != Dungeon.hero && Dungeon.visible[pos])     Dungeon.observe();
  }
}","public static void leave(int pos){
  if (Dungeon.level.heaps.get(pos) == null) {
    Level.set(pos,Terrain.DOOR);
    GameScene.updateMap(pos);
    if (Dungeon.visible[pos])     Dungeon.observe();
  }
}",0.7603686635944701
164036,"public static void enter(int pos,Char ch){
  Level.set(pos,Terrain.OPEN_DOOR);
  GameScene.updateMap(pos);
  if (ch == Dungeon.hero) {
    Sample.INSTANCE.play(Assets.SND_OPEN);
  }
 else   if (Dungeon.visible[pos]) {
    Sample.INSTANCE.play(Assets.SND_OPEN);
    Dungeon.observe();
  }
}","public static void enter(int pos){
  Level.set(pos,Terrain.OPEN_DOOR);
  GameScene.updateMap(pos);
  if (Dungeon.visible[pos]) {
    Dungeon.observe();
    Sample.INSTANCE.play(Assets.SND_OPEN);
  }
}",0.6748466257668712
164037,"public static void trample(Level level,int pos,Char ch){
  Level.set(pos,Terrain.GRASS);
  GameScene.updateMap(pos);
  if (!Dungeon.isChallenged(Challenges.NO_HERBALISM)) {
    int naturalismLevel=0;
    if (ch != null) {
      SandalsOfNature.Naturalism naturalism=ch.buff(SandalsOfNature.Naturalism.class);
      if (naturalism != null) {
        if (!naturalism.isCursed()) {
          naturalismLevel=naturalism.itemLevel() + 1;
          naturalism.charge();
        }
 else {
          naturalismLevel=-1;
        }
      }
    }
    if (naturalismLevel >= 0) {
      if (Random.Int(16 - ((int)(naturalismLevel * 3))) == 0) {
        Item seed=Generator.random(Generator.Category.SEED);
        if (seed instanceof BlandfruitBush.Seed) {
          if (Random.Int(15) - Dungeon.limitedDrops.blandfruitSeed.count >= 0) {
            level.drop(seed,pos).sprite.drop();
            Dungeon.limitedDrops.blandfruitSeed.count++;
          }
        }
 else         level.drop(seed,pos).sprite.drop();
      }
      if (Random.Int(24 - naturalismLevel * 3) <= 3) {
        level.drop(new Dewdrop(),pos).sprite.drop();
      }
    }
  }
  int leaves=4;
  if (ch instanceof Hero) {
    Hero hero=(Hero)ch;
    if (hero.subClass == HeroSubClass.WARDEN) {
      Buff.affect(ch,Barkskin.class).level(ch.HT / 3);
      leaves+=4;
    }
    if (hero.belongings.armor != null && hero.belongings.armor.hasGlyph(Camouflage.class)) {
      Buff.affect(hero,Camouflage.Camo.class).set(3 + hero.belongings.armor.level());
      leaves+=4;
    }
  }
  CellEmitter.get(pos).burst(LeafParticle.LEVEL_SPECIFIC,leaves);
  if (ch != Dungeon.hero)   Dungeon.observe();
}","public static void trample(Level level,int pos,Char ch){
  Level.set(pos,Terrain.GRASS);
  GameScene.updateMap(pos);
  if (!Dungeon.isChallenged(Challenges.NO_HERBALISM)) {
    int naturalismLevel=0;
    if (ch != null) {
      SandalsOfNature.Naturalism naturalism=ch.buff(SandalsOfNature.Naturalism.class);
      if (naturalism != null) {
        if (!naturalism.isCursed()) {
          naturalismLevel=naturalism.itemLevel() + 1;
          naturalism.charge();
        }
 else {
          naturalismLevel=-1;
        }
      }
    }
    if (naturalismLevel >= 0) {
      if (Random.Int(16 - ((int)(naturalismLevel * 3))) == 0) {
        Item seed=Generator.random(Generator.Category.SEED);
        if (seed instanceof BlandfruitBush.Seed) {
          if (Random.Int(15) - Dungeon.limitedDrops.blandfruitSeed.count >= 0) {
            level.drop(seed,pos).sprite.drop();
            Dungeon.limitedDrops.blandfruitSeed.count++;
          }
        }
 else         level.drop(seed,pos).sprite.drop();
      }
      if (Random.Int(24 - naturalismLevel * 3) <= 3) {
        level.drop(new Dewdrop(),pos).sprite.drop();
      }
    }
  }
  int leaves=4;
  if (ch instanceof Hero) {
    Hero hero=(Hero)ch;
    if (hero.subClass == HeroSubClass.WARDEN) {
      Buff.affect(ch,Barkskin.class).level(ch.HT / 3);
      leaves+=4;
    }
    if (hero.belongings.armor != null && hero.belongings.armor.hasGlyph(Camouflage.class)) {
      Buff.affect(hero,Camouflage.Camo.class).set(3 + hero.belongings.armor.level());
      leaves+=4;
    }
  }
  CellEmitter.get(pos).burst(LeafParticle.LEVEL_SPECIFIC,leaves);
  if (Dungeon.visible[pos])   Dungeon.observe();
}",0.9933373712901272
164038,"public static void ready(){
  selectCell(defaultCellListener);
  QuickSlotButton.cancel();
}","public static void ready(){
  selectCell(defaultCellListener);
  QuickSlotButton.cancel();
  scene.toolbar.examining=false;
}",0.847926267281106
164039,"public static void refreshAllBuffers(){
  for (  Vertexbuffer buf : buffers) {
    buf.updateVertices();
    buf.updateGLData();
  }
}","public static void refreshAllBuffers(){
synchronized (buffers) {
    for (    Vertexbuffer buf : buffers) {
      buf.updateVertices();
      buf.updateGLData();
    }
  }
}",0.8729641693811075
164040,"public Vertexbuffer(FloatBuffer vertices){
  int[] ptr=new int[1];
  GLES20.glGenBuffers(1,ptr,0);
  id=ptr[0];
  this.vertices=vertices;
  buffers.add(this);
  updateStart=0;
  updateEnd=vertices.limit();
}","public Vertexbuffer(FloatBuffer vertices){
synchronized (buffers) {
    int[] ptr=new int[1];
    GLES20.glGenBuffers(1,ptr,0);
    id=ptr[0];
    this.vertices=vertices;
    buffers.add(this);
    updateStart=0;
    updateEnd=vertices.limit();
  }
}",0.9059080962800876
164041,"public void delete(){
  GLES20.glDeleteBuffers(1,new int[]{id},0);
  buffers.remove(this);
}","public void delete(){
synchronized (buffers) {
    GLES20.glDeleteBuffers(1,new int[]{id},0);
    buffers.remove(this);
  }
}",0.847926267281106
164042,"@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (topLeft < bufferPositions.length && bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,(mapHeight - 1) * mapWidth);
    while (bottomRight >= topLeft && bufferPositions[bottomRight] == -1)     bottomRight--;
    length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0 || length <= 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}","@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (topLeft < bufferPositions.length && bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,(mapHeight - 1) * mapWidth);
    while (bottomRight >= topLeft && bufferPositions[bottomRight] == -1)     bottomRight--;
    if (topLeft >= bufferPositions.length || bottomRight <= 0)     length=0;
 else     length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0 || length <= 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}",0.9752312742464936
164043,"@Override public boolean isAlive(){
  if (subClass == HeroSubClass.BERSERKER) {
    Berserk berserk=buff(Berserk.class);
    if (berserk != null && berserk.berserking()) {
      return true;
    }
  }
  return super.isAlive();
}","@Override public boolean isAlive(){
  if (subClass == HeroSubClass.BERSERKER && berserk != null && berserk.berserking()) {
    return true;
  }
  return super.isAlive();
}",0.8471177944862155
164044,"@Override public int damageRoll(){
  KindOfWeapon wep=rangedWeapon != null ? rangedWeapon : belongings.weapon;
  int dmg;
  int bonus=RingOfForce.getBonus(this,RingOfForce.Force.class);
  if (wep != null) {
    dmg=wep.damageRoll(this) + bonus;
  }
 else {
    if (bonus != 0) {
      dmg=RingOfForce.damageRoll(this);
    }
 else {
      dmg=Random.NormalIntRange(1,Math.max(STR() - 8,1));
    }
  }
  if (dmg < 0)   dmg=0;
  if (subClass == HeroSubClass.BERSERKER) {
    dmg=Buff.affect(this,Berserk.class).damageFactor(dmg);
  }
  return buff(Fury.class) != null ? (int)(dmg * 1.5f) : dmg;
}","@Override public int damageRoll(){
  KindOfWeapon wep=rangedWeapon != null ? rangedWeapon : belongings.weapon;
  int dmg;
  int bonus=RingOfForce.getBonus(this,RingOfForce.Force.class);
  if (wep != null) {
    dmg=wep.damageRoll(this) + bonus;
  }
 else {
    if (bonus != 0) {
      dmg=RingOfForce.damageRoll(this);
    }
 else {
      dmg=Random.NormalIntRange(1,Math.max(STR() - 8,1));
    }
  }
  if (dmg < 0)   dmg=0;
  if (subClass == HeroSubClass.BERSERKER) {
    berserk=Buff.affect(this,Berserk.class);
    dmg=berserk.damageFactor(dmg);
  }
  return buff(Fury.class) != null ? (int)(dmg * 1.5f) : dmg;
}",0.977667493796526
164045,"public void earnExp(int exp){
  this.exp+=exp;
  float percent=exp / (float)maxExp();
  EtherealChains.chainsRecharge chains=buff(EtherealChains.chainsRecharge.class);
  if (chains != null)   chains.gainExp(percent);
  HornOfPlenty.hornRecharge horn=buff(HornOfPlenty.hornRecharge.class);
  if (horn != null)   horn.gainCharge(percent);
  if (subClass == HeroSubClass.BERSERKER)   Buff.affect(this,Berserk.class).recover(percent);
  boolean levelUp=false;
  while (this.exp >= maxExp()) {
    this.exp-=maxExp();
    if (lvl < MAX_LEVEL) {
      lvl++;
      levelUp=true;
      HT+=5;
      HP+=5;
      attackSkill++;
      defenseSkill++;
    }
 else {
      Buff.prolong(this,Bless.class,30f);
      this.exp=0;
      GLog.p(Messages.get(this,""String_Node_Str""));
      Sample.INSTANCE.play(Assets.SND_LEVELUP);
    }
    if (lvl < 10) {
      updateAwareness();
    }
  }
  if (levelUp) {
    GLog.p(Messages.get(this,""String_Node_Str""),lvl);
    sprite.showStatus(CharSprite.POSITIVE,Messages.get(Hero.class,""String_Node_Str""));
    Sample.INSTANCE.play(Assets.SND_LEVELUP);
    Badges.validateLevelReached();
  }
}","public void earnExp(int exp){
  this.exp+=exp;
  float percent=exp / (float)maxExp();
  EtherealChains.chainsRecharge chains=buff(EtherealChains.chainsRecharge.class);
  if (chains != null)   chains.gainExp(percent);
  HornOfPlenty.hornRecharge horn=buff(HornOfPlenty.hornRecharge.class);
  if (horn != null)   horn.gainCharge(percent);
  if (subClass == HeroSubClass.BERSERKER) {
    berserk=Buff.affect(this,Berserk.class);
    berserk.recover(percent);
  }
  boolean levelUp=false;
  while (this.exp >= maxExp()) {
    this.exp-=maxExp();
    if (lvl < MAX_LEVEL) {
      lvl++;
      levelUp=true;
      HT+=5;
      HP+=5;
      attackSkill++;
      defenseSkill++;
    }
 else {
      Buff.prolong(this,Bless.class,30f);
      this.exp=0;
      GLog.p(Messages.get(this,""String_Node_Str""));
      Sample.INSTANCE.play(Assets.SND_LEVELUP);
    }
    if (lvl < 10) {
      updateAwareness();
    }
  }
  if (levelUp) {
    GLog.p(Messages.get(this,""String_Node_Str""),lvl);
    sprite.showStatus(CharSprite.POSITIVE,Messages.get(Hero.class,""String_Node_Str""));
    Sample.INSTANCE.play(Assets.SND_LEVELUP);
    Badges.validateLevelReached();
  }
}",0.9854689564068692
164046,"@Override protected void onClick(){
  GameScene.show(new WndInfoBuff(buff));
}","@Override protected void onClick(){
  if (buff.icon() != NONE)   GameScene.show(new WndInfoBuff(buff));
}",0.8524590163934426
164047,"public WndTextInput(String title,String initialValue,int maxLength,final boolean multiLine,String posTxt,String negTxt){
  super();
  if (ShatteredPixelDungeon.landscape()) {
    offset(multiLine ? -45 : -45);
  }
 else {
    offset(multiLine ? -60 : -45);
  }
  final int width;
  if (ShatteredPixelDungeon.landscape() && multiLine) {
    width=W_LAND_MULTI;
  }
 else {
    width=WIDTH;
  }
  RenderedTextMultiline txtTitle=PixelScene.renderMultiline(title,9);
  txtTitle.maxWidth(width);
  txtTitle.hardlight(Window.TITLE_COLOR);
  txtTitle.setPos((width - txtTitle.width()) / 2,0);
  add(txtTitle);
  float pos=txtTitle.bottom() + MARGIN;
  textInput=new EditText(ShatteredPixelDungeon.instance);
  textInput.setText(initialValue);
  textInput.setTypeface(RenderedText.getFont());
  textInput.setFilters(new InputFilter[]{new InputFilter.LengthFilter(maxLength)});
  textInput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
  final float scaledZoom;
  scaledZoom=camera.zoom * (Game.dispWidth / (float)Game.width);
  final float inputHeight;
  if (multiLine) {
    textInput.setSingleLine(false);
    textInput.setTextSize(TypedValue.COMPLEX_UNIT_PX,6 * scaledZoom);
    inputHeight=9 * textInput.getLineHeight() / scaledZoom;
  }
 else {
    textInput.setSingleLine();
    textInput.setOnEditorActionListener(new EditText.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        onSelect(true);
        hide();
        return true;
      }
    }
);
    textInput.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
    textInput.setGravity(Gravity.CENTER);
    textInput.setTextSize(TypedValue.COMPLEX_UNIT_PX,9 * scaledZoom);
    inputHeight=2 * textInput.getLineHeight() / scaledZoom;
  }
  pos+=inputHeight + MARGIN;
  RedButton positiveBtn=new RedButton(posTxt){
    @Override protected void onClick(){
      onSelect(true);
      hide();
    }
  }
;
  if (negTxt != null)   positiveBtn.setRect(MARGIN,pos,(width - MARGIN * 3) / 2,BUTTON_HEIGHT);
 else   positiveBtn.setRect(MARGIN,pos,width - MARGIN * 2,BUTTON_HEIGHT);
  add(positiveBtn);
  if (negTxt != null) {
    RedButton negativeBtn=new RedButton(negTxt){
      @Override protected void onClick(){
        onSelect(false);
        hide();
      }
    }
;
    negativeBtn.setRect(positiveBtn.right() + MARGIN,pos,(width - MARGIN * 3) / 2,BUTTON_HEIGHT);
    add(negativeBtn);
  }
  pos+=BUTTON_HEIGHT + MARGIN;
  resize(width,(int)pos);
  final int inputTop=(int)(camera.cameraToScreen(0,txtTitle.bottom() + MARGIN).y * (Game.dispWidth / (float)Game.width));
  ShatteredPixelDungeon.instance.runOnUiThread(new Runnable(){
    @Override public void run(){
      FrameLayout.LayoutParams layout=new FrameLayout.LayoutParams((int)((width - MARGIN * 2) * scaledZoom),(int)(inputHeight * scaledZoom),Gravity.CENTER_HORIZONTAL);
      layout.setMargins(0,inputTop,0,0);
      ShatteredPixelDungeon.instance.addContentView(textInput,layout);
    }
  }
);
}","public WndTextInput(final String title,final String initialValue,final int maxLength,final boolean multiLine,final String posTxt,final String negTxt){
  super();
  if (ShatteredPixelDungeon.landscape()) {
    offset(multiLine ? -45 : -45);
  }
 else {
    offset(multiLine ? -60 : -45);
  }
  final int width;
  if (ShatteredPixelDungeon.landscape() && multiLine) {
    width=W_LAND_MULTI;
  }
 else {
    width=WIDTH;
  }
  ShatteredPixelDungeon.instance.runOnUiThread(new Runnable(){
    @Override public void run(){
      RenderedTextMultiline txtTitle=PixelScene.renderMultiline(title,9);
      txtTitle.maxWidth(width);
      txtTitle.hardlight(Window.TITLE_COLOR);
      txtTitle.setPos((width - txtTitle.width()) / 2,0);
      add(txtTitle);
      float pos=txtTitle.bottom() + MARGIN;
      textInput=new EditText(ShatteredPixelDungeon.instance);
      textInput.setText(initialValue);
      textInput.setTypeface(RenderedText.getFont());
      textInput.setFilters(new InputFilter[]{new InputFilter.LengthFilter(maxLength)});
      textInput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
      final float scaledZoom;
      scaledZoom=camera.zoom * (Game.dispWidth / (float)Game.width);
      final float inputHeight;
      if (multiLine) {
        textInput.setSingleLine(false);
        textInput.setTextSize(TypedValue.COMPLEX_UNIT_PX,6 * scaledZoom);
        inputHeight=9 * textInput.getLineHeight() / scaledZoom;
      }
 else {
        textInput.setSingleLine();
        textInput.setOnEditorActionListener(new EditText.OnEditorActionListener(){
          @Override public boolean onEditorAction(          TextView v,          int actionId,          KeyEvent event){
            onSelect(true);
            hide();
            return true;
          }
        }
);
        textInput.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
        textInput.setGravity(Gravity.CENTER);
        textInput.setTextSize(TypedValue.COMPLEX_UNIT_PX,9 * scaledZoom);
        inputHeight=2 * textInput.getLineHeight() / scaledZoom;
      }
      pos+=inputHeight + MARGIN;
      RedButton positiveBtn=new RedButton(posTxt){
        @Override protected void onClick(){
          onSelect(true);
          hide();
        }
      }
;
      if (negTxt != null)       positiveBtn.setRect(MARGIN,pos,(width - MARGIN * 3) / 2,BUTTON_HEIGHT);
 else       positiveBtn.setRect(MARGIN,pos,width - MARGIN * 2,BUTTON_HEIGHT);
      add(positiveBtn);
      if (negTxt != null) {
        RedButton negativeBtn=new RedButton(negTxt){
          @Override protected void onClick(){
            onSelect(false);
            hide();
          }
        }
;
        negativeBtn.setRect(positiveBtn.right() + MARGIN,pos,(width - MARGIN * 3) / 2,BUTTON_HEIGHT);
        add(negativeBtn);
      }
      pos+=BUTTON_HEIGHT + MARGIN;
      resize(width,(int)pos);
      final int inputTop=(int)(camera.cameraToScreen(0,txtTitle.bottom() + MARGIN).y * (Game.dispWidth / (float)Game.width));
      FrameLayout.LayoutParams layout=new FrameLayout.LayoutParams((int)((width - MARGIN * 2) * scaledZoom),(int)(inputHeight * scaledZoom),Gravity.CENTER_HORIZONTAL);
      layout.setMargins(0,inputTop,0,0);
      ShatteredPixelDungeon.instance.addContentView(textInput,layout);
    }
  }
);
}",0.8978817578248498
164048,"@Override public synchronized void updateMapCell(int cell){
  super.updateMapCell(Math.max(0,cell - mapWidth - 1));
  super.updateMapCell(Math.min(size - 1,cell + mapWidth + 1));
  for (  int i : PathFinder.NEIGHBOURS9)   if (cell + i >= 0 && cell + i <= 1023)   data[cell + i]=getTileVisual(cell + i,map[cell + i]);
}","@Override public synchronized void updateMapCell(int cell){
  if (Dungeon.level.insideMap(cell)) {
    super.updateMapCell(cell - mapWidth - 1);
    super.updateMapCell(cell + mapWidth + 1);
    for (    int i : PathFinder.NEIGHBOURS9)     data[cell + i]=getTileVisual(cell + i,map[cell + i]);
  }
 else {
    super.updateMapCell(cell);
    data[cell]=getTileVisual(cell,map[cell]);
  }
}",0.5552407932011332
164049,"@Override public void filter(int minMode,int maxMode){
  if (fModeMin == minMode && fModeMax == maxMode)   return;
  fModeMin=minMode;
  fModeMax=maxMode;
  if (id != -1)   super.filter(fModeMin,fModeMax);
}","@Override public void filter(int minMode,int maxMode){
  fModeMin=minMode;
  fModeMax=maxMode;
  if (id != -1)   super.filter(fModeMin,fModeMax);
}",0.8305084745762712
164050,"@Override protected void generate(){
  super.generate();
  bitmap(bitmap,premultiplied);
  super.filter(fModeMin,fModeMax);
  super.wrap(wModeH,wModeV);
}","@Override protected void generate(){
  super.generate();
  bitmap(bitmap,premultiplied);
  filter(fModeMin,fModeMax);
  wrap(wModeH,wModeV);
}",0.9594594594594594
164051,"@Override public void wrap(int s,int t){
  if (wModeH == s && wModeV == t)   return;
  wModeH=s;
  wModeV=t;
  if (id != -1)   super.wrap(wModeH,wModeV);
}","@Override public void wrap(int s,int t){
  wModeH=s;
  wModeV=t;
  if (id != -1)   super.wrap(wModeH,wModeV);
}",0.8345864661654135
164052,"public ShadowBox(){
  super(Assets.SHADOW,1);
  texture.filter(SmartTexture.LINEAR,SmartTexture.LINEAR);
  scale.set(SIZE,SIZE);
}","public ShadowBox(){
  super(Assets.SHADOW,1);
  if (texture.id == -1)   texture.filter(SmartTexture.LINEAR,SmartTexture.LINEAR);
  scale.set(SIZE,SIZE);
}",0.9154929577464788
164053,"private boolean actInteract(HeroAction.Interact action){
  NPC npc=action.npc;
  if (Dungeon.level.adjacent(pos,npc.pos)) {
    ready();
    sprite.turnTo(pos,npc.pos);
    npc.interact();
    return false;
  }
 else {
    if (Level.fieldOfView[npc.pos] && getCloser(npc.pos)) {
      return true;
    }
 else {
      ready();
      return false;
    }
  }
}","private boolean actInteract(HeroAction.Interact action){
  NPC npc=action.npc;
  if (Dungeon.level.adjacent(pos,npc.pos)) {
    ready();
    sprite.turnTo(pos,npc.pos);
    return npc.interact();
  }
 else {
    if (Level.fieldOfView[npc.pos] && getCloser(npc.pos)) {
      return true;
    }
 else {
      ready();
      return false;
    }
  }
}",0.924822695035461
164054,"@Override public void interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (!Quest.given) {
    GameScene.show(new WndQuest(this,Quest.alternative ? Messages.get(this,""String_Node_Str"") : Messages.get(this,""String_Node_Str"")){
      @Override public void onBackPressed(){
        super.onBackPressed();
        Quest.given=true;
        Quest.completed=false;
        Pickaxe pick=new Pickaxe();
        if (pick.doPickUp(Dungeon.hero)) {
          GLog.i(Messages.get(Dungeon.hero,""String_Node_Str"",pick.name()));
        }
 else {
          Dungeon.level.drop(pick,Dungeon.hero.pos).sprite.drop();
        }
      }
    }
);
    Journal.add(Journal.Feature.TROLL);
  }
 else   if (!Quest.completed) {
    if (Quest.alternative) {
      Pickaxe pick=Dungeon.hero.belongings.getItem(Pickaxe.class);
      if (pick == null) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else       if (!pick.bloodStained) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else {
        if (pick.isEquipped(Dungeon.hero)) {
          pick.doUnequip(Dungeon.hero,false);
        }
        pick.detach(Dungeon.hero.belongings.backpack);
        tell(Messages.get(this,""String_Node_Str""));
        Quest.completed=true;
        Quest.reforged=false;
      }
    }
 else {
      Pickaxe pick=Dungeon.hero.belongings.getItem(Pickaxe.class);
      DarkGold gold=Dungeon.hero.belongings.getItem(DarkGold.class);
      if (pick == null) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else       if (gold == null || gold.quantity() < 15) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else {
        if (pick.isEquipped(Dungeon.hero)) {
          pick.doUnequip(Dungeon.hero,false);
        }
        pick.detach(Dungeon.hero.belongings.backpack);
        gold.detachAll(Dungeon.hero.belongings.backpack);
        tell(Messages.get(this,""String_Node_Str""));
        Quest.completed=true;
        Quest.reforged=false;
      }
    }
  }
 else   if (!Quest.reforged) {
    GameScene.show(new WndBlacksmith(this,Dungeon.hero));
  }
 else {
    tell(Messages.get(this,""String_Node_Str""));
  }
}","@Override public boolean interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (!Quest.given) {
    GameScene.show(new WndQuest(this,Quest.alternative ? Messages.get(this,""String_Node_Str"") : Messages.get(this,""String_Node_Str"")){
      @Override public void onBackPressed(){
        super.onBackPressed();
        Quest.given=true;
        Quest.completed=false;
        Pickaxe pick=new Pickaxe();
        if (pick.doPickUp(Dungeon.hero)) {
          GLog.i(Messages.get(Dungeon.hero,""String_Node_Str"",pick.name()));
        }
 else {
          Dungeon.level.drop(pick,Dungeon.hero.pos).sprite.drop();
        }
      }
    }
);
    Journal.add(Journal.Feature.TROLL);
  }
 else   if (!Quest.completed) {
    if (Quest.alternative) {
      Pickaxe pick=Dungeon.hero.belongings.getItem(Pickaxe.class);
      if (pick == null) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else       if (!pick.bloodStained) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else {
        if (pick.isEquipped(Dungeon.hero)) {
          pick.doUnequip(Dungeon.hero,false);
        }
        pick.detach(Dungeon.hero.belongings.backpack);
        tell(Messages.get(this,""String_Node_Str""));
        Quest.completed=true;
        Quest.reforged=false;
      }
    }
 else {
      Pickaxe pick=Dungeon.hero.belongings.getItem(Pickaxe.class);
      DarkGold gold=Dungeon.hero.belongings.getItem(DarkGold.class);
      if (pick == null) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else       if (gold == null || gold.quantity() < 15) {
        tell(Messages.get(this,""String_Node_Str""));
      }
 else {
        if (pick.isEquipped(Dungeon.hero)) {
          pick.doUnequip(Dungeon.hero,false);
        }
        pick.detach(Dungeon.hero.belongings.backpack);
        gold.detachAll(Dungeon.hero.belongings.backpack);
        tell(Messages.get(this,""String_Node_Str""));
        Quest.completed=true;
        Quest.reforged=false;
      }
    }
  }
 else   if (!Quest.reforged) {
    GameScene.show(new WndBlacksmith(this,Dungeon.hero));
  }
 else {
    tell(Messages.get(this,""String_Node_Str""));
  }
  return false;
}",0.9936842105263158
164055,"@Override public void interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  Sample.INSTANCE.play(Assets.SND_GHOST);
  if (Quest.given) {
    if (Quest.weapon != null) {
      if (Quest.processed) {
        GameScene.show(new WndSadGhost(this,Quest.type));
      }
 else {
switch (Quest.type) {
case 1:
default :
          GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
        break;
case 2:
      GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
    break;
case 3:
  GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
break;
}
int newPos=-1;
for (int i=0; i < 10; i++) {
newPos=Dungeon.level.randomRespawnCell();
if (newPos != -1) {
break;
}
}
if (newPos != -1) {
CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
pos=newPos;
sprite.place(pos);
sprite.visible=Dungeon.visible[pos];
}
}
}
}
 else {
Mob questBoss;
String txt_quest;
switch (Quest.type) {
case 1:
default :
questBoss=new FetidRat();
txt_quest=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 2:
questBoss=new GnollTrickster();
txt_quest=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 3:
questBoss=new GreatCrab();
txt_quest=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
}
questBoss.pos=Dungeon.level.randomRespawnCell();
if (questBoss.pos != -1) {
GameScene.add(questBoss);
GameScene.show(new WndQuest(this,txt_quest));
Quest.given=true;
Journal.add(Journal.Feature.GHOST);
}
}
}","@Override public boolean interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  Sample.INSTANCE.play(Assets.SND_GHOST);
  if (Quest.given) {
    if (Quest.weapon != null) {
      if (Quest.processed) {
        GameScene.show(new WndSadGhost(this,Quest.type));
      }
 else {
switch (Quest.type) {
case 1:
default :
          GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
        break;
case 2:
      GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
    break;
case 3:
  GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
break;
}
int newPos=-1;
for (int i=0; i < 10; i++) {
newPos=Dungeon.level.randomRespawnCell();
if (newPos != -1) {
break;
}
}
if (newPos != -1) {
CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
pos=newPos;
sprite.place(pos);
sprite.visible=Dungeon.visible[pos];
}
}
}
}
 else {
Mob questBoss;
String txt_quest;
switch (Quest.type) {
case 1:
default :
questBoss=new FetidRat();
txt_quest=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 2:
questBoss=new GnollTrickster();
txt_quest=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 3:
questBoss=new GreatCrab();
txt_quest=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
}
questBoss.pos=Dungeon.level.randomRespawnCell();
if (questBoss.pos != -1) {
GameScene.add(questBoss);
GameScene.show(new WndQuest(this,txt_quest));
Quest.given=true;
Journal.add(Journal.Feature.GHOST);
}
}
return false;
}",0.9917464509739188
164056,"@Override public void interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (Quest.given) {
    DwarfToken tokens=Dungeon.hero.belongings.getItem(DwarfToken.class);
    if (tokens != null && (tokens.quantity() >= 8 || (!Quest.alternative && tokens.quantity() >= 6))) {
      GameScene.show(new WndImp(this,tokens));
    }
 else {
      tell(Quest.alternative ? Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName()) : Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName()));
    }
  }
 else {
    tell(Quest.alternative ? Messages.get(this,""String_Node_Str"") : Messages.get(this,""String_Node_Str""));
    Quest.given=true;
    Quest.completed=false;
    Journal.add(Journal.Feature.IMP);
  }
}","@Override public boolean interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (Quest.given) {
    DwarfToken tokens=Dungeon.hero.belongings.getItem(DwarfToken.class);
    if (tokens != null && (tokens.quantity() >= 8 || (!Quest.alternative && tokens.quantity() >= 6))) {
      GameScene.show(new WndImp(this,tokens));
    }
 else {
      tell(Quest.alternative ? Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName()) : Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName()));
    }
  }
 else {
    tell(Quest.alternative ? Messages.get(this,""String_Node_Str"") : Messages.get(this,""String_Node_Str""));
    Quest.given=true;
    Quest.completed=false;
    Journal.add(Journal.Feature.IMP);
  }
  return false;
}",0.981184668989547
164057,"@Override public void interact(){
  int curPos=pos;
  moveSprite(pos,Dungeon.hero.pos);
  move(Dungeon.hero.pos);
  Dungeon.hero.sprite.move(Dungeon.hero.pos,curPos);
  Dungeon.hero.move(curPos);
  Dungeon.hero.spend(1 / Dungeon.hero.speed());
  Dungeon.hero.busy();
}","@Override public boolean interact(){
  int curPos=pos;
  moveSprite(pos,Dungeon.hero.pos);
  move(Dungeon.hero.pos);
  Dungeon.hero.sprite.move(Dungeon.hero.pos,curPos);
  Dungeon.hero.move(curPos);
  Dungeon.hero.spend(1 / Dungeon.hero.speed());
  Dungeon.hero.busy();
  return true;
}",0.1732851985559566
164058,abstract public void interact();,abstract public boolean interact();,0.8656716417910447
164059,"@Override public void interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (state == SLEEPING) {
    notice();
    yell(Messages.get(this,""String_Node_Str""));
    state=WANDERING;
  }
 else {
    yell(Messages.get(this,""String_Node_Str""));
  }
}","@Override public boolean interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (state == SLEEPING) {
    notice();
    yell(Messages.get(this,""String_Node_Str""));
    state=WANDERING;
  }
 else {
    yell(Messages.get(this,""String_Node_Str""));
  }
  return true;
}",0.9494163424124512
164060,"@Override public void interact(){
  yell(Messages.get(this,Random.element(LINE_KEYS)));
}","@Override public boolean interact(){
  yell(Messages.get(this,Random.element(LINE_KEYS)));
  return false;
}",0.8730964467005076
164061,"@Override public void interact(){
  sell();
}","@Override public boolean interact(){
  sell();
  return false;
}",0.7706422018348624
164062,"@Override public void interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (Quest.given) {
    Item item;
switch (Quest.type) {
case 1:
default :
      item=Dungeon.hero.belongings.getItem(CorpseDust.class);
    break;
case 2:
  item=Dungeon.hero.belongings.getItem(Embers.class);
break;
case 3:
item=Dungeon.hero.belongings.getItem(Rotberry.Seed.class);
break;
}
if (item != null) {
GameScene.show(new WndWandmaker(this,item));
}
 else {
String msg=""String_Node_Str"";
switch (Quest.type) {
case 1:
msg=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 2:
msg=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 3:
msg=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
}
GameScene.show(new WndQuest(this,msg));
}
}
 else {
String msg1=""String_Node_Str"";
String msg2=""String_Node_Str"";
switch (Dungeon.hero.heroClass) {
case WARRIOR:
msg1+=Messages.get(this,""String_Node_Str"");
break;
case ROGUE:
msg1+=Messages.get(this,""String_Node_Str"");
break;
case MAGE:
msg1+=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case HUNTRESS:
msg1+=Messages.get(this,""String_Node_Str"");
break;
}
msg1+=Messages.get(this,""String_Node_Str"");
switch (Quest.type) {
case 1:
msg2+=Messages.get(this,""String_Node_Str"");
break;
case 2:
msg2+=Messages.get(this,""String_Node_Str"");
break;
case 3:
msg2+=Messages.get(this,""String_Node_Str"");
break;
}
msg2+=Messages.get(this,""String_Node_Str"");
final String msg2final=msg2;
final NPC wandmaker=this;
GameScene.show(new WndQuest(wandmaker,msg1){
@Override public void hide(){
super.hide();
GameScene.show(new WndQuest(wandmaker,msg2final));
}
}
);
Journal.add(Journal.Feature.WANDMAKER);
Quest.given=true;
}
}","@Override public boolean interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  if (Quest.given) {
    Item item;
switch (Quest.type) {
case 1:
default :
      item=Dungeon.hero.belongings.getItem(CorpseDust.class);
    break;
case 2:
  item=Dungeon.hero.belongings.getItem(Embers.class);
break;
case 3:
item=Dungeon.hero.belongings.getItem(Rotberry.Seed.class);
break;
}
if (item != null) {
GameScene.show(new WndWandmaker(this,item));
}
 else {
String msg=""String_Node_Str"";
switch (Quest.type) {
case 1:
msg=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 2:
msg=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case 3:
msg=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
}
GameScene.show(new WndQuest(this,msg));
}
}
 else {
String msg1=""String_Node_Str"";
String msg2=""String_Node_Str"";
switch (Dungeon.hero.heroClass) {
case WARRIOR:
msg1+=Messages.get(this,""String_Node_Str"");
break;
case ROGUE:
msg1+=Messages.get(this,""String_Node_Str"");
break;
case MAGE:
msg1+=Messages.get(this,""String_Node_Str"",Dungeon.hero.givenName());
break;
case HUNTRESS:
msg1+=Messages.get(this,""String_Node_Str"");
break;
}
msg1+=Messages.get(this,""String_Node_Str"");
switch (Quest.type) {
case 1:
msg2+=Messages.get(this,""String_Node_Str"");
break;
case 2:
msg2+=Messages.get(this,""String_Node_Str"");
break;
case 3:
msg2+=Messages.get(this,""String_Node_Str"");
break;
}
msg2+=Messages.get(this,""String_Node_Str"");
final String msg2final=msg2;
final NPC wandmaker=this;
GameScene.show(new WndQuest(wandmaker,msg1){
@Override public void hide(){
super.hide();
GameScene.show(new WndQuest(wandmaker,msg2final));
}
}
);
Journal.add(Journal.Feature.WANDMAKER);
Quest.given=true;
}
return false;
}",0.992789154888953
164063,"@Override public void interact(){
  if (!DriedRose.talkedTo) {
    DriedRose.talkedTo=true;
    GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
  }
 else {
    int curPos=pos;
    moveSprite(pos,Dungeon.hero.pos);
    move(Dungeon.hero.pos);
    Dungeon.hero.sprite.move(Dungeon.hero.pos,curPos);
    Dungeon.hero.move(curPos);
    Dungeon.hero.spend(1 / Dungeon.hero.speed());
    Dungeon.hero.busy();
  }
}","@Override public boolean interact(){
  if (!DriedRose.talkedTo) {
    DriedRose.talkedTo=true;
    GameScene.show(new WndQuest(this,Messages.get(this,""String_Node_Str"")));
    return false;
  }
 else {
    int curPos=pos;
    moveSprite(pos,Dungeon.hero.pos);
    move(Dungeon.hero.pos);
    Dungeon.hero.sprite.move(Dungeon.hero.pos,curPos);
    Dungeon.hero.move(curPos);
    Dungeon.hero.spend(1 / Dungeon.hero.speed());
    Dungeon.hero.busy();
    return true;
  }
}",0.9491150442477876
164064,"@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,(mapHeight - 1) * mapWidth);
    while (bufferPositions[bottomRight] == -1)     bottomRight--;
    length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}","@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (topLeft < bufferPositions.length && bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,(mapHeight - 1) * mapWidth);
    while (bottomRight >= topLeft && bufferPositions[bottomRight] == -1)     bottomRight--;
    length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0 || length <= 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}",0.9758696333437794
164065,"public void resume(){
  curAction=lastAction;
  lastAction=null;
  damageInterrupt=false;
  act();
}","public void resume(){
  curAction=lastAction;
  lastAction=null;
  damageInterrupt=false;
  next();
}",0.9751243781094528
164066,"@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX > mapWidth || camY > mapHeight || camW + camW < 0 || camH + camH < 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,(mapHeight - 1) * mapWidth);
    while (bufferPositions[bottomRight] == -1)     bottomRight--;
    length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX > mapWidth || camY > mapHeight || camW + camW < 0 || camH + camH < 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}","@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,(mapHeight - 1) * mapWidth);
    while (bufferPositions[bottomRight] == -1)     bottomRight--;
    length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX >= mapWidth || camY >= mapHeight || camW + camW <= 0 || camH + camH <= 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}",0.9974243399871217
164067,"public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.HIGH_GRASS);
  fill(level,room,2,Terrain.GRASS);
  room.entrance().set(Room.Door.Type.REGULAR);
  if (Dungeon.isChallenged(Challenges.NO_FOOD)) {
    if (Random.Int(2) == 0) {
      level.plant(new Sungrass.Seed(),level.pointToCell(room.random()));
    }
  }
 else {
    int bushes=Random.Int(3);
    if (bushes == 0) {
      level.plant(new Sungrass.Seed(),level.pointToCell(room.random()));
    }
 else     if (bushes == 1) {
      level.plant(new BlandfruitBush.Seed(),level.pointToCell(room.random()));
    }
 else     if (Random.Int(5) == 0) {
      level.plant(new Sungrass.Seed(),level.pointToCell(room.random()));
      level.plant(new BlandfruitBush.Seed(),level.pointToCell(room.random()));
    }
  }
  Foliage light=(Foliage)level.blobs.get(Foliage.class);
  if (light == null) {
    light=new Foliage();
  }
  for (int i=room.top + 1; i < room.bottom; i++) {
    for (int j=room.left + 1; j < room.right; j++) {
      light.seed(level,j + level.width() * i,1);
    }
  }
  level.blobs.put(Foliage.class,light);
}","public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.HIGH_GRASS);
  fill(level,room,2,Terrain.GRASS);
  room.entrance().set(Room.Door.Type.REGULAR);
  if (Dungeon.isChallenged(Challenges.NO_FOOD)) {
    if (Random.Int(2) == 0) {
      level.plant(new Sungrass.Seed(),level.pointToCell(room.random()));
    }
  }
 else {
    int bushes=Random.Int(3);
    if (bushes == 0) {
      level.plant(new Sungrass.Seed(),level.pointToCell(room.random()));
    }
 else     if (bushes == 1) {
      level.plant(new BlandfruitBush.Seed(),level.pointToCell(room.random()));
    }
 else     if (Random.Int(5) == 0) {
      int plant1, plant2;
      plant1=level.pointToCell(room.random());
      level.plant(new Sungrass.Seed(),plant1);
      do {
        plant2=level.pointToCell(room.random());
      }
 while (plant2 == plant1);
      level.plant(new BlandfruitBush.Seed(),plant2);
    }
  }
  Foliage light=(Foliage)level.blobs.get(Foliage.class);
  if (light == null) {
    light=new Foliage();
  }
  for (int i=room.top + 1; i < room.bottom; i++) {
    for (int j=room.left + 1; j < room.right; j++) {
      light.seed(level,j + level.width() * i,1);
    }
  }
  level.blobs.put(Foliage.class,light);
}",0.9052013422818792
164068,"protected void evolve(){
  boolean[] blocking=Level.solid;
  int cell;
  for (int i=area.top - 1; i <= area.bottom; i++) {
    for (int j=area.left - 1; j <= area.right; j++) {
      cell=j + i * Dungeon.level.width();
      if (!blocking[cell]) {
        int count=1;
        int sum=cur[cell];
        if (!blocking[cell - 1]) {
          sum+=cur[cell - 1];
          count++;
        }
        if (!blocking[cell + 1]) {
          sum+=cur[cell + 1];
          count++;
        }
        if (!blocking[cell - Dungeon.level.width()]) {
          sum+=cur[cell - Dungeon.level.width()];
          count++;
        }
        if (!blocking[cell + Dungeon.level.width()]) {
          sum+=cur[cell + Dungeon.level.width()];
          count++;
        }
        int value=sum >= count ? (sum / count) - 1 : 0;
        off[cell]=value;
        if (value > 0) {
          if (i < area.top)           area.top=i;
 else           if (i >= area.bottom)           area.bottom=i + 1;
          if (j < area.left)           area.left=j;
 else           if (j >= area.right)           area.right=j + 1;
        }
        volume+=value;
      }
 else {
        off[cell]=0;
      }
    }
  }
}","protected void evolve(){
  boolean[] blocking=Level.solid;
  int cell;
  for (int i=area.top - 1; i <= area.bottom; i++) {
    for (int j=area.left - 1; j <= area.right; j++) {
      cell=j + i * Dungeon.level.width();
      if (!blocking[cell]) {
        int count=1;
        int sum=cur[cell];
        if (j > area.left && !blocking[cell - 1]) {
          sum+=cur[cell - 1];
          count++;
        }
        if (j < area.right && !blocking[cell + 1]) {
          sum+=cur[cell + 1];
          count++;
        }
        if (i > area.top && !blocking[cell - Dungeon.level.width()]) {
          sum+=cur[cell - Dungeon.level.width()];
          count++;
        }
        if (i < area.bottom && !blocking[cell + Dungeon.level.width()]) {
          sum+=cur[cell + Dungeon.level.width()];
          count++;
        }
        int value=sum >= count ? (sum / count) - 1 : 0;
        off[cell]=value;
        if (value > 0) {
          if (i < area.top)           area.top=i;
 else           if (i >= area.bottom)           area.bottom=i + 1;
          if (j < area.left)           area.left=j;
 else           if (j >= area.right)           area.right=j + 1;
        }
        volume+=value;
      }
 else {
        off[cell]=0;
      }
    }
  }
}",0.971217105263158
164069,"@Override public int proc(Armor armor,Char attacker,Char defender,int damage){
  if (Random.Int(20) == 0) {
    ArrayList<Integer> spawnPoints=new ArrayList<>();
    for (int i=0; i < PathFinder.NEIGHBOURS8.length; i++) {
      int p=defender.pos + PathFinder.NEIGHBOURS8[i];
      if (Actor.findChar(p) == null && (Level.passable[p] || Level.avoid[p])) {
        spawnPoints.add(p);
      }
    }
    if (spawnPoints.size() > 0) {
      Mob m=null;
      if (Random.Int(2) == 0 && defender instanceof Hero) {
        m=new MirrorImage();
        ((MirrorImage)m).duplicate((Hero)defender);
      }
 else {
        if (attacker.properties().contains(Char.Property.BOSS) || attacker.properties().contains(Char.Property.MINIBOSS)) {
          m=Bestiary.mutable(Dungeon.depth % 5 == 0 ? Dungeon.depth - 1 : Dungeon.depth);
        }
 else {
          try {
            m=(Mob)defender.getClass().newInstance();
            Bundle store=new Bundle();
            defender.storeInBundle(store);
            m.restoreFromBundle(store);
            m.HP=m.HT;
          }
 catch (          Exception e) {
            ShatteredPixelDungeon.reportException(e);
            m=null;
          }
        }
      }
      if (m != null) {
        GameScene.add(m);
        ScrollOfTeleportation.appear(m,Random.element(spawnPoints));
      }
    }
  }
  return damage;
}","@Override public int proc(Armor armor,Char attacker,Char defender,int damage){
  if (Random.Int(20) == 0) {
    ArrayList<Integer> spawnPoints=new ArrayList<>();
    for (int i=0; i < PathFinder.NEIGHBOURS8.length; i++) {
      int p=defender.pos + PathFinder.NEIGHBOURS8[i];
      if (Actor.findChar(p) == null && (Level.passable[p] || Level.avoid[p])) {
        spawnPoints.add(p);
      }
    }
    if (spawnPoints.size() > 0) {
      Mob m=null;
      if (Random.Int(2) == 0 && defender instanceof Hero) {
        m=new MirrorImage();
        ((MirrorImage)m).duplicate((Hero)defender);
      }
 else {
        if (attacker.properties().contains(Char.Property.BOSS) || attacker.properties().contains(Char.Property.MINIBOSS)) {
          m=Bestiary.mutable(Dungeon.depth % 5 == 0 ? Dungeon.depth - 1 : Dungeon.depth);
        }
 else {
          try {
            m=(Mob)attacker.getClass().newInstance();
            Bundle store=new Bundle();
            attacker.storeInBundle(store);
            m.restoreFromBundle(store);
            m.HP=m.HT;
          }
 catch (          Exception e) {
            ShatteredPixelDungeon.reportException(e);
            m=null;
          }
        }
      }
      if (m != null) {
        GameScene.add(m);
        ScrollOfTeleportation.appear(m,Random.element(spawnPoints));
      }
    }
  }
  return damage;
}",0.991156963890936
164070,"private static void veryRareEffect(final Wand wand,final Hero user,final Ballistica bolt){
switch (Random.Int(4)) {
case 0:
    for (int i=0; i < Dungeon.level.length(); i++) {
      int c=Dungeon.level.map[i];
      if (c == Terrain.EMPTY || c == Terrain.EMBERS || c == Terrain.EMPTY_DECO || c == Terrain.GRASS || c == Terrain.HIGH_GRASS) {
        GameScene.add(Blob.seed(i,15,Regrowth.class));
      }
    }
  do {
    GameScene.add(Blob.seed(Dungeon.level.randomDestination(),10,Fire.class));
  }
 while (Random.Int(5) != 0);
new Flare(8,32).color(0xFFFF66,true).show(user.sprite,2f);
Sample.INSTANCE.play(Assets.SND_TELEPORT);
GLog.p(Messages.get(CursedWand.class,""String_Node_Str""));
GLog.w(Messages.get(CursedWand.class,""String_Node_Str""));
wand.wandUsed();
break;
case 1:
cursedFX(user,bolt,new Callback(){
public void call(){
Mimic mimic=Mimic.spawnAt(bolt.collisionPos,new ArrayList<Item>());
mimic.adjustStats(Dungeon.depth + 10);
mimic.HP=mimic.HT;
Item reward;
do {
reward=Generator.random(Random.oneOf(Generator.Category.WEAPON,Generator.Category.ARMOR,Generator.Category.RING,Generator.Category.WAND));
}
 while (reward.level() < 2 && !(reward instanceof MissileWeapon));
Sample.INSTANCE.play(Assets.SND_MIMIC,1,1,0.5f);
mimic.items.clear();
mimic.items.add(reward);
wand.wandUsed();
}
}
);
break;
case 2:
try {
Dungeon.saveAll();
if (!Messages.get(CursedWand.class,""String_Node_Str"").equals(""String_Node_Str"")) {
GLog.i(Messages.get(CursedWand.class,""String_Node_Str""));
wand.wandUsed();
}
 else {
GameScene.show(new WndOptions(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""){
@Override public void hide(){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
}
 catch (IOException e) {
ShatteredPixelDungeon.reportException(e);
GLog.i(Messages.get(CursedWand.class,""String_Node_Str""));
wand.wandUsed();
}
break;
case 3:
wand.wandUsed();
wand.detach(user.belongings.backpack);
Item result;
do {
result=Generator.random(Random.oneOf(Generator.Category.WEAPON,Generator.Category.ARMOR,Generator.Category.RING,Generator.Category.ARTIFACT));
}
 while (result.level() < 0 && !(result instanceof MissileWeapon));
if (result.isUpgradable()) result.upgrade();
result.cursed=result.cursedKnown=true;
GLog.w(Messages.get(CursedWand.class,""String_Node_Str""));
Dungeon.level.drop(result,user.pos).sprite.drop();
wand.wandUsed();
break;
}
}","private static void veryRareEffect(final Wand wand,final Hero user,final Ballistica bolt){
switch (Random.Int(4)) {
case 0:
    for (int i=0; i < Dungeon.level.length(); i++) {
      int c=Dungeon.level.map[i];
      if (c == Terrain.EMPTY || c == Terrain.EMBERS || c == Terrain.EMPTY_DECO || c == Terrain.GRASS || c == Terrain.HIGH_GRASS) {
        GameScene.add(Blob.seed(i,15,Regrowth.class));
      }
    }
  do {
    GameScene.add(Blob.seed(Dungeon.level.randomDestination(),10,Fire.class));
  }
 while (Random.Int(5) != 0);
new Flare(8,32).color(0xFFFF66,true).show(user.sprite,2f);
Sample.INSTANCE.play(Assets.SND_TELEPORT);
GLog.p(Messages.get(CursedWand.class,""String_Node_Str""));
GLog.w(Messages.get(CursedWand.class,""String_Node_Str""));
wand.wandUsed();
break;
case 1:
cursedFX(user,bolt,new Callback(){
public void call(){
Mimic mimic=Mimic.spawnAt(bolt.collisionPos,new ArrayList<Item>());
mimic.adjustStats(Dungeon.depth + 10);
mimic.HP=mimic.HT;
Item reward;
do {
reward=Generator.random(Random.oneOf(Generator.Category.WEAPON,Generator.Category.ARMOR,Generator.Category.RING,Generator.Category.WAND));
}
 while (reward.level() < 2 && !(reward instanceof MissileWeapon));
Sample.INSTANCE.play(Assets.SND_MIMIC,1,1,0.5f);
mimic.items.clear();
mimic.items.add(reward);
wand.wandUsed();
}
}
);
break;
case 2:
try {
Dungeon.saveAll();
if (Messages.lang() != Languages.ENGLISH) {
GLog.i(Messages.get(CursedWand.class,""String_Node_Str""));
wand.wandUsed();
}
 else {
GameScene.show(new WndOptions(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""){
@Override public void hide(){
throw new RuntimeException(""String_Node_Str"");
}
}
);
}
}
 catch (IOException e) {
ShatteredPixelDungeon.reportException(e);
GLog.i(Messages.get(CursedWand.class,""String_Node_Str""));
wand.wandUsed();
}
break;
case 3:
wand.wandUsed();
wand.detach(user.belongings.backpack);
Item result;
do {
result=Generator.random(Random.oneOf(Generator.Category.WEAPON,Generator.Category.ARMOR,Generator.Category.RING,Generator.Category.ARTIFACT));
}
 while (result.level() < 0 && !(result instanceof MissileWeapon));
if (result.isUpgradable()) result.upgrade();
result.cursed=result.cursedKnown=true;
GLog.w(Messages.get(CursedWand.class,""String_Node_Str""));
Dungeon.level.drop(result,user.pos).sprite.drop();
wand.wandUsed();
break;
}
}",0.9774213969191812
164071,"protected void evolve(){
  boolean[] blocking=Level.solid;
  int cell;
  for (int i=area.top - 1; i <= area.bottom; i++) {
    for (int j=area.left - 1; j <= area.right; j++) {
      cell=j + i * Dungeon.level.width();
      if (!blocking[cell]) {
        int count=1;
        int sum=cur[cell];
        if (j > area.left && !blocking[cell - 1]) {
          sum+=cur[cell - 1];
          count++;
        }
        if (j < area.right && !blocking[cell + 1]) {
          sum+=cur[cell + 1];
          count++;
        }
        if (i > area.top && !blocking[cell - Dungeon.level.width()]) {
          sum+=cur[cell - Dungeon.level.width()];
          count++;
        }
        if (i < area.bottom && !blocking[cell + Dungeon.level.width()]) {
          sum+=cur[cell + Dungeon.level.width()];
          count++;
        }
        int value=sum >= count ? (sum / count) - 1 : 0;
        off[cell]=value;
        if (value > 0) {
          if (i < area.top)           area.top=i;
 else           if (i >= area.bottom)           area.bottom=i + 1;
          if (j < area.left)           area.left=j;
 else           if (j >= area.right)           area.right=j + 1;
        }
        volume+=value;
      }
 else {
        off[cell]=0;
      }
    }
  }
}","protected void evolve(){
  boolean[] blocking=Level.solid;
  int cell;
  for (int i=area.top - 1; i <= area.bottom; i++) {
    for (int j=area.left - 1; j <= area.right; j++) {
      cell=j + i * Dungeon.level.width();
      if (Dungeon.level.insideMap(cell)) {
        if (!blocking[cell]) {
          int count=1;
          int sum=cur[cell];
          if (j > area.left && !blocking[cell - 1]) {
            sum+=cur[cell - 1];
            count++;
          }
          if (j < area.right && !blocking[cell + 1]) {
            sum+=cur[cell + 1];
            count++;
          }
          if (i > area.top && !blocking[cell - Dungeon.level.width()]) {
            sum+=cur[cell - Dungeon.level.width()];
            count++;
          }
          if (i < area.bottom && !blocking[cell + Dungeon.level.width()]) {
            sum+=cur[cell + Dungeon.level.width()];
            count++;
          }
          int value=sum >= count ? (sum / count) - 1 : 0;
          off[cell]=value;
          if (value > 0) {
            if (i < area.top)             area.top=i;
 else             if (i >= area.bottom)             area.bottom=i + 1;
            if (j < area.left)             area.left=j;
 else             if (j >= area.right)             area.right=j + 1;
          }
          volume+=value;
        }
 else {
          off[cell]=0;
        }
      }
    }
  }
}",0.9264201296225696
164072,"public boolean insideMap(int tile){
  return !((tile < 0 || tile >= length()) || (tile < width() || tile >= length() - width()) || (tile % width() == 0 || tile % width() == width() - 1));
}","public boolean insideMap(int tile){
  return !((tile < width || tile >= length - width) || (tile % width == 0 || tile % width == width - 1));
}",0.8313253012048193
164073,"@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX > mapWidth || camY > mapHeight || camW + camW < 0 || camH + camH < 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,mapHeight * (mapWidth - 1));
    while (bufferPositions[bottomRight] == -1)     bottomRight--;
    length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX > mapWidth || camY > mapHeight || camW + camW < 0 || camH + camH < 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}","@Override public void draw(){
  super.draw();
  if (!updated.isEmpty()) {
    updateVertices();
    quads.limit(bufferLength * 16);
    if (buffer == null)     buffer=new Vertexbuffer(quads);
 else {
      if (fullUpdate) {
        buffer.updateVertices(quads);
        fullUpdate=false;
      }
 else {
        buffer.updateVertices(quads,topLeftUpdating * 16,bottomRightUpdating * 16);
      }
    }
    topLeftUpdating=0;
    updating.setEmpty();
  }
  Camera c=Camera.main;
  if (camX == null || camX != (int)c.scroll.x / 16 || camY != (int)c.scroll.y / 16 || camW != (int)Math.ceil(c.width / cellW) || camH != (int)Math.ceil(c.height / cellH)) {
    camX=(int)c.scroll.x / 16;
    camY=(int)c.scroll.y / 16;
    camW=(int)Math.ceil(c.width / cellW);
    camH=(int)Math.ceil(c.height / cellH);
    if (camX > mapWidth || camY > mapHeight || camW + camW < 0 || camH + camH < 0)     return;
    topLeft=Math.max(camX,0) + Math.max(camY * mapWidth,0);
    while (bufferPositions[topLeft] == -1)     topLeft++;
    bottomRight=Math.min(camX + camW,mapWidth - 1) + Math.min((camY + camH) * mapWidth,(mapHeight - 1) * mapWidth);
    while (bufferPositions[bottomRight] == -1)     bottomRight--;
    length=bufferPositions[bottomRight] - bufferPositions[topLeft] + 1;
  }
  if (camX > mapWidth || camY > mapHeight || camW + camW < 0 || camH + camH < 0)   return;
  NoosaScript script=NoosaScriptNoLighting.get();
  texture.bind();
  script.uModel.valueM4(matrix);
  script.camera(camera);
  script.drawQuadSet(buffer,length,bufferPositions[topLeft]);
}",0.9961265332472564
164074,"@Override public void cast(Hero user,int dst){
  throwEquiped=isEquipped(user);
  if (throwEquiped)   Dungeon.quickslot.convertToPlaceholder(this);
  super.cast(user,dst);
}","@Override public void cast(Hero user,int dst){
  throwEquiped=isEquipped(user) && !cursed;
  if (throwEquiped)   Dungeon.quickslot.convertToPlaceholder(this);
  super.cast(user,dst);
}",0.969187675070028
164075,"public Gizmo add(Gizmo g){
  if (g.parent == this) {
    return g;
  }
  if (g.parent != null) {
    g.parent.remove(g);
  }
  for (int i=0; i < length; i++) {
    if (members.get(i) == null) {
      members.set(i,g);
      g.parent=this;
      return g;
    }
  }
  members.add(g);
  g.parent=this;
  length++;
  return g;
}","public synchronized Gizmo add(Gizmo g){
  if (g.parent == this) {
    return g;
  }
  if (g.parent != null) {
    g.parent.remove(g);
  }
  for (int i=0; i < length; i++) {
    if (members.get(i) == null) {
      members.set(i,g);
      g.parent=this;
      return g;
    }
  }
  members.add(g);
  g.parent=this;
  length++;
  return g;
}",0.9803921568627452
164076,"public Gizmo erase(Gizmo g){
  int index=members.indexOf(g);
  if (index != -1) {
    members.set(index,null);
    g.parent=null;
    return g;
  }
 else {
    return null;
  }
}","public synchronized Gizmo erase(Gizmo g){
  int index=members.indexOf(g);
  if (index != -1) {
    members.set(index,null);
    g.parent=null;
    return g;
  }
 else {
    return null;
  }
}",0.964769647696477
164077,"public Gizmo bringToFront(Gizmo g){
  if (members.contains(g)) {
    members.remove(g);
    members.add(g);
    return g;
  }
 else {
    return null;
  }
}","public synchronized Gizmo bringToFront(Gizmo g){
  if (members.contains(g)) {
    members.remove(g);
    members.add(g);
    return g;
  }
 else {
    return null;
  }
}",0.96
164078,"public Gizmo addToBack(Gizmo g){
  if (g.parent == this) {
    sendToBack(g);
    return g;
  }
  if (g.parent != null) {
    g.parent.remove(g);
  }
  if (members.get(0) == null) {
    members.set(0,g);
    g.parent=this;
    return g;
  }
  members.add(0,g);
  g.parent=this;
  length++;
  return g;
}","public synchronized Gizmo addToBack(Gizmo g){
  if (g.parent == this) {
    sendToBack(g);
    return g;
  }
  if (g.parent != null) {
    g.parent.remove(g);
  }
  if (members.get(0) == null) {
    members.set(0,g);
    g.parent=this;
    return g;
  }
  members.add(0,g);
  g.parent=this;
  length++;
  return g;
}",0.9789983844911146
164079,"public Gizmo addToFront(Gizmo g){
  if (g.parent == this) {
    return g;
  }
  if (g.parent != null) {
    g.parent.remove(g);
  }
  for (int i=length - 1; i >= 0; i--) {
    if (members.get(i) == null) {
      if (i == 0 || members.get(i - 1) != null) {
        members.set(i,g);
        g.parent=this;
        return g;
      }
    }
 else {
      break;
    }
  }
  members.add(g);
  g.parent=this;
  length++;
  return g;
}","public synchronized Gizmo addToFront(Gizmo g){
  if (g.parent == this) {
    return g;
  }
  if (g.parent != null) {
    g.parent.remove(g);
  }
  for (int i=length - 1; i >= 0; i--) {
    if (members.get(i) == null) {
      if (i == 0 || members.get(i - 1) != null) {
        members.set(i,g);
        g.parent=this;
        return g;
      }
    }
 else {
      break;
    }
  }
  members.add(g);
  g.parent=this;
  length++;
  return g;
}",0.9850402761795168
164080,"public Gizmo replace(Gizmo oldOne,Gizmo newOne){
  int index=members.indexOf(oldOne);
  if (index != -1) {
    members.set(index,newOne);
    newOne.parent=this;
    oldOne.parent=null;
    return newOne;
  }
 else {
    return null;
  }
}","public synchronized Gizmo replace(Gizmo oldOne,Gizmo newOne){
  int index=members.indexOf(oldOne);
  if (index != -1) {
    members.set(index,newOne);
    newOne.parent=this;
    oldOne.parent=null;
    return newOne;
  }
 else {
    return null;
  }
}",0.9735234215885948
164081,"public void clear(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null) {
      g.parent=null;
    }
  }
  members.clear();
  length=0;
}","public synchronized void clear(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null) {
      g.parent=null;
    }
  }
  members.clear();
  length=0;
}",0.9627507163323782
164082,"@Override public void destroy(){
  super.destroy();
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null) {
      g.destroy();
    }
  }
  members.clear();
  members=null;
  length=0;
}","@Override public synchronized void destroy(){
  super.destroy();
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null) {
      g.destroy();
    }
  }
  members.clear();
  members=null;
  length=0;
}",0.9703872437357632
164083,"@Override public void update(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists && g.active && !(freezeEmitters && Game.timeTotal > 1f && g instanceof Emitter)) {
      g.update();
    }
  }
}","@Override public synchronized void update(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists && g.active && !(freezeEmitters && Game.timeTotal > 1f && g instanceof Emitter)) {
      g.update();
    }
  }
}",0.973305954825462
164084,"public Gizmo getFirstAvailable(Class<? extends Gizmo> c){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && !g.exists && ((c == null) || g.getClass() == c)) {
      return g;
    }
  }
  return null;
}","public synchronized Gizmo getFirstAvailable(Class<? extends Gizmo> c){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && !g.exists && ((c == null) || g.getClass() == c)) {
      return g;
    }
  }
  return null;
}",0.9730848861283644
164085,"public Gizmo sendToBack(Gizmo g){
  if (members.contains(g)) {
    members.remove(g);
    members.add(0,g);
    return g;
  }
 else {
    return null;
  }
}","public synchronized Gizmo sendToBack(Gizmo g){
  if (members.contains(g)) {
    members.remove(g);
    members.add(0,g);
    return g;
  }
 else {
    return null;
  }
}",0.96
164086,"@Override public void draw(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists && g.isVisible()) {
      g.draw();
    }
  }
}","@Override public synchronized void draw(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists && g.isVisible()) {
      g.draw();
    }
  }
}",0.963172804532578
164087,"public int countLiving(){
  int count=0;
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists && g.alive) {
      count++;
    }
  }
  return count;
}","public synchronized int countLiving(){
  int count=0;
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists && g.alive) {
      count++;
    }
  }
  return count;
}",0.9669211195928752
164088,"@Override public void kill(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists) {
      g.kill();
    }
  }
  super.kill();
}","@Override public synchronized void kill(){
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && g.exists) {
      g.kill();
    }
  }
  super.kill();
}",0.9629629629629628
164089,"public Gizmo remove(Gizmo g){
  if (members.remove(g)) {
    length--;
    g.parent=null;
    return g;
  }
 else {
    return null;
  }
}","public synchronized Gizmo remove(Gizmo g){
  if (members.remove(g)) {
    length--;
    g.parent=null;
    return g;
  }
 else {
    return null;
  }
}",0.9550173010380624
164090,"public Gizmo random(){
  if (length > 0) {
    return members.get((int)(Math.random() * length));
  }
 else {
    return null;
  }
}","public synchronized Gizmo random(){
  if (length > 0) {
    return members.get((int)(Math.random() * length));
  }
 else {
    return null;
  }
}",0.9530685920577616
164091,"public Gizmo recycle(Class<? extends Gizmo> c){
  Gizmo g=getFirstAvailable(c);
  if (g != null) {
    return g;
  }
 else   if (c == null) {
    return null;
  }
 else {
    try {
      return add(c.newInstance());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}","public synchronized Gizmo recycle(Class<? extends Gizmo> c){
  Gizmo g=getFirstAvailable(c);
  if (g != null) {
    return g;
  }
 else   if (c == null) {
    return null;
  }
 else {
    try {
      return add(c.newInstance());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.9789303079416533
164092,"public int countDead(){
  int count=0;
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && !g.alive) {
      count++;
    }
  }
  return count;
}","public synchronized int countDead(){
  int count=0;
  for (int i=0; i < length; i++) {
    Gizmo g=members.get(i);
    if (g != null && !g.alive) {
      count++;
    }
  }
  return count;
}",0.9645776566757494
164093,"public int indexOf(Gizmo g){
  return members.indexOf(g);
}","public synchronized int indexOf(Gizmo g){
  return members.indexOf(g);
}",0.900763358778626
164094,"@Override public void draw(){
  super.draw();
  if (dirty) {
    verticesBuffer.position(0);
    verticesBuffer.put(vertices);
    if (buffer == null)     buffer=new Vertexbuffer(verticesBuffer);
 else     buffer.updateVertices(verticesBuffer);
    dirty=false;
  }
  NoosaScript script=NoosaScript.get();
  texture.bind();
  script.camera(camera());
  script.uModel.valueM4(matrix);
  script.lighting(rm,gm,bm,am,ra,ga,ba,aa);
  script.drawQuad(buffer);
}","@Override public void draw(){
  if (texture == null)   return;
  super.draw();
  if (dirty) {
    verticesBuffer.position(0);
    verticesBuffer.put(vertices);
    if (buffer == null)     buffer=new Vertexbuffer(verticesBuffer);
 else     buffer.updateVertices(verticesBuffer);
    dirty=false;
  }
  NoosaScript script=NoosaScript.get();
  texture.bind();
  script.camera(camera());
  script.uModel.valueM4(matrix);
  script.lighting(rm,gm,bm,am,ra,ga,ba,aa);
  script.drawQuad(buffer);
}",0.9650793650793652
164095,"public static void setMapSize(int width,int height){
  int size=width * height;
  PathFinder.size=size;
  distance=new int[size];
  goals=new boolean[size];
  queue=new int[size];
  maxVal=new int[size];
  Arrays.fill(maxVal,Integer.MAX_VALUE);
  dir=new int[]{-1,+1,-width,+width,-width - 1,-width + 1,+width - 1,+width + 1};
  NEIGHBOURS4=new int[]{-width,-1,+1,+width};
  NEIGHBOURS8=new int[]{-width - 1,-width,-width + 1,-1,+1,+width - 1,+width,+width + 1};
  NEIGHBOURS9=new int[]{-width - 1,-width,-width + 1,-1,0,+1,+width - 1,+width,+width + 1};
}","public static void setMapSize(int width,int height){
  int size=width * height;
  PathFinder.size=size;
  distance=new int[size];
  goals=new boolean[size];
  queue=new int[size];
  maxVal=new int[size];
  Arrays.fill(maxVal,Integer.MAX_VALUE);
  dir=new int[]{-1,+1,-width,+width,-width - 1,-width + 1,+width - 1,+width + 1};
  NEIGHBOURS4=new int[]{-width,-1,+1,+width};
  NEIGHBOURS8=new int[]{-width - 1,-width,-width + 1,-1,+1,+width - 1,+width,+width + 1};
  NEIGHBOURS9=new int[]{-width - 1,-width,-width + 1,-1,0,+1,+width - 1,+width,+width + 1};
  CIRCLE=new int[]{-width - 1,-width,-width + 1,+1,+width + 1,+width,+width - 1,-1};
}",0.9289891395154553
164096,"private void spreadFlames(int cell,float strength){
  if (strength >= 0 && Level.passable[cell]) {
    affectedCells.add(cell);
    if (strength >= 1.5f) {
      visualCells.remove(cell);
      spreadFlames(cell + PathFinder.NEIGHBOURS8[left(direction)],strength - 1.5f);
      spreadFlames(cell + PathFinder.NEIGHBOURS8[direction],strength - 1.5f);
      spreadFlames(cell + PathFinder.NEIGHBOURS8[right(direction)],strength - 1.5f);
    }
 else {
      visualCells.add(cell);
    }
  }
 else   if (!Level.passable[cell])   visualCells.add(cell);
}","private void spreadFlames(int cell,float strength){
  if (strength >= 0 && Level.passable[cell]) {
    affectedCells.add(cell);
    if (strength >= 1.5f) {
      visualCells.remove(cell);
      spreadFlames(cell + PathFinder.CIRCLE[left(direction)],strength - 1.5f);
      spreadFlames(cell + PathFinder.CIRCLE[direction],strength - 1.5f);
      spreadFlames(cell + PathFinder.CIRCLE[right(direction)],strength - 1.5f);
    }
 else {
      visualCells.add(cell);
    }
  }
 else   if (!Level.passable[cell])   visualCells.add(cell);
}",0.9584487534626038
164097,"@Override protected void fx(Ballistica bolt,Callback callback){
  affectedCells=new HashSet<>();
  visualCells=new HashSet<>();
  int maxDist=(int)(4 * Math.pow(1.5,(chargesPerCast() - 1)));
  int dist=Math.min(bolt.dist,maxDist);
  for (int i=0; i < PathFinder.NEIGHBOURS8.length; i++) {
    if (bolt.sourcePos + PathFinder.NEIGHBOURS8[i] == bolt.path.get(1)) {
      direction=i;
      break;
    }
  }
  float strength=maxDist;
  for (  int c : bolt.subPath(1,dist)) {
    strength--;
    affectedCells.add(c);
    if (strength > 1) {
      spreadFlames(c + PathFinder.NEIGHBOURS8[left(direction)],strength - 1);
      spreadFlames(c + PathFinder.NEIGHBOURS8[direction],strength - 1);
      spreadFlames(c + PathFinder.NEIGHBOURS8[right(direction)],strength - 1);
    }
 else {
      visualCells.add(c);
    }
  }
  visualCells.remove(bolt.path.get(dist));
  for (  int cell : visualCells) {
    MagicMissile.fire(curUser.sprite.parent,bolt.sourcePos,cell,null);
  }
  MagicMissile.fire(curUser.sprite.parent,bolt.sourcePos,bolt.path.get(dist),callback);
  Sample.INSTANCE.play(Assets.SND_ZAP);
}","@Override protected void fx(Ballistica bolt,Callback callback){
  affectedCells=new HashSet<>();
  visualCells=new HashSet<>();
  int maxDist=(int)(4 * Math.pow(1.5,(chargesPerCast() - 1)));
  int dist=Math.min(bolt.dist,maxDist);
  for (int i=0; i < PathFinder.CIRCLE.length; i++) {
    if (bolt.sourcePos + PathFinder.CIRCLE[i] == bolt.path.get(1)) {
      direction=i;
      break;
    }
  }
  float strength=maxDist;
  for (  int c : bolt.subPath(1,dist)) {
    strength--;
    affectedCells.add(c);
    if (strength > 1) {
      spreadFlames(c + PathFinder.CIRCLE[left(direction)],strength - 1);
      spreadFlames(c + PathFinder.CIRCLE[direction],strength - 1);
      spreadFlames(c + PathFinder.CIRCLE[right(direction)],strength - 1);
    }
 else {
      visualCells.add(c);
    }
  }
  visualCells.remove(bolt.path.get(dist));
  for (  int cell : visualCells) {
    MagicMissile.fire(curUser.sprite.parent,bolt.sourcePos,cell,null);
  }
  MagicMissile.fire(curUser.sprite.parent,bolt.sourcePos,bolt.path.get(dist),callback);
  Sample.INSTANCE.play(Assets.SND_ZAP);
}",0.8964565117349287
164098,"@Override protected void onZap(Ballistica bolt){
  for (  int cell : affectedCells) {
    GameScene.add(Blob.seed(cell,1 + chargesPerCast(),Fire.class));
    Char ch=Actor.findChar(cell);
    if (ch != null) {
      int damage=damageRoll();
      ch.damage(damage,this);
      Buff.affect(ch,Burning.class).reignite(ch);
switch (chargesPerCast()) {
case 1:
        break;
case 2:
      Buff.affect(ch,Cripple.class,4f);
    break;
case 3:
  Buff.affect(ch,Paralysis.class,4f);
break;
}
}
}
}","@Override protected void onZap(Ballistica bolt){
  for (  int cell : affectedCells) {
    if (Level.flamable[cell] || !Dungeon.level.adjacent(bolt.sourcePos,cell))     GameScene.add(Blob.seed(cell,1 + chargesPerCast(),Fire.class));
    Char ch=Actor.findChar(cell);
    if (ch != null) {
      int damage=damageRoll();
      ch.damage(damage,this);
      Buff.affect(ch,Burning.class).reignite(ch);
switch (chargesPerCast()) {
case 1:
        break;
case 2:
      Buff.affect(ch,Cripple.class,4f);
    break;
case 3:
  Buff.affect(ch,Paralysis.class,4f);
break;
}
}
}
}",0.9264150943396228
164099,"private void spreadRegrowth(int cell,float strength){
  if (strength >= 0 && Level.passable[cell] && !Level.losBlocking[cell]) {
    affectedCells.add(cell);
    if (strength >= 1.5f) {
      spreadRegrowth(cell + PathFinder.NEIGHBOURS8[left(direction)],strength - 1.5f);
      spreadRegrowth(cell + PathFinder.NEIGHBOURS8[direction],strength - 1.5f);
      spreadRegrowth(cell + PathFinder.NEIGHBOURS8[right(direction)],strength - 1.5f);
    }
 else {
      visualCells.add(cell);
    }
  }
 else   if (!Level.passable[cell] || Level.losBlocking[cell])   visualCells.add(cell);
}","private void spreadRegrowth(int cell,float strength){
  if (strength >= 0 && Level.passable[cell] && !Level.losBlocking[cell]) {
    affectedCells.add(cell);
    if (strength >= 1.5f) {
      spreadRegrowth(cell + PathFinder.CIRCLE[left(direction)],strength - 1.5f);
      spreadRegrowth(cell + PathFinder.CIRCLE[direction],strength - 1.5f);
      spreadRegrowth(cell + PathFinder.CIRCLE[right(direction)],strength - 1.5f);
    }
 else {
      visualCells.add(cell);
    }
  }
 else   if (!Level.passable[cell] || Level.losBlocking[cell])   visualCells.add(cell);
}",0.8122270742358079
164100,"protected void fx(Ballistica bolt,Callback callback){
  affectedCells=new HashSet<>();
  visualCells=new HashSet<>();
  int maxDist=Math.round(1.2f + chargesPerCast() * .8f);
  int dist=Math.min(bolt.dist,maxDist);
  for (int i=0; i < PathFinder.NEIGHBOURS8.length; i++) {
    if (bolt.sourcePos + PathFinder.NEIGHBOURS8[i] == bolt.path.get(1)) {
      direction=i;
      break;
    }
  }
  float strength=maxDist;
  for (  int c : bolt.subPath(1,dist)) {
    strength--;
    if (!Level.losBlocking[c]) {
      affectedCells.add(c);
      spreadRegrowth(c + PathFinder.NEIGHBOURS8[left(direction)],strength - 1);
      spreadRegrowth(c + PathFinder.NEIGHBOURS8[direction],strength - 1);
      spreadRegrowth(c + PathFinder.NEIGHBOURS8[right(direction)],strength - 1);
    }
 else {
      visualCells.add(c);
    }
  }
  visualCells.remove(bolt.path.get(dist));
  for (  int cell : visualCells) {
    MagicMissile.foliage(curUser.sprite.parent,bolt.sourcePos,cell,null);
  }
  MagicMissile.foliage(curUser.sprite.parent,bolt.sourcePos,bolt.path.get(dist),callback);
  Sample.INSTANCE.play(Assets.SND_ZAP);
}","protected void fx(Ballistica bolt,Callback callback){
  affectedCells=new HashSet<>();
  visualCells=new HashSet<>();
  int maxDist=Math.round(1.2f + chargesPerCast() * .8f);
  int dist=Math.min(bolt.dist,maxDist);
  for (int i=0; i < PathFinder.CIRCLE.length; i++) {
    if (bolt.sourcePos + PathFinder.CIRCLE[i] == bolt.path.get(1)) {
      direction=i;
      break;
    }
  }
  float strength=maxDist;
  for (  int c : bolt.subPath(1,dist)) {
    strength--;
    if (!Level.losBlocking[c]) {
      affectedCells.add(c);
      spreadRegrowth(c + PathFinder.CIRCLE[left(direction)],strength - 1);
      spreadRegrowth(c + PathFinder.CIRCLE[direction],strength - 1);
      spreadRegrowth(c + PathFinder.CIRCLE[right(direction)],strength - 1);
    }
 else {
      visualCells.add(c);
    }
  }
  visualCells.remove(bolt.path.get(dist));
  for (  int cell : visualCells) {
    MagicMissile.foliage(curUser.sprite.parent,bolt.sourcePos,cell,null);
  }
  MagicMissile.foliage(curUser.sprite.parent,bolt.sourcePos,bolt.path.get(dist),callback);
  Sample.INSTANCE.play(Assets.SND_ZAP);
}",0.8952903520804756
164101,"@Override public boolean attachTo(Char target){
  if (super.attachTo(target)) {
    Sample.INSTANCE.play(Assets.SND_MELD);
    Dungeon.observe();
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean attachTo(Char target){
  if (super.attachTo(target)) {
    Sample.INSTANCE.play(Assets.SND_MELD);
    if (Dungeon.level != null)     Dungeon.observe();
    return true;
  }
 else {
    return false;
  }
}",0.927400468384075
164102,"public void level(int value){
  if (level < value) {
    level=value;
    pos=target.pos;
  }
}","public void level(int value){
  if (level < value) {
    level=value;
  }
  pos=target.pos;
}",0.9680851063829788
164103,"@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch == Dungeon.hero) {
    Buff.affect(ch,Health.class).level=ch.HT;
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.get(pos).start(ShaftParticle.FACTORY,0.2f,3);
  }
}","@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch == Dungeon.hero) {
    Buff.affect(ch,Health.class).boost(ch.HT);
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.get(pos).start(ShaftParticle.FACTORY,0.2f,3);
  }
}",0.972972972972973
164104,"public void boost(int amount){
  level+=amount;
}","public void boost(int amount){
  level+=amount;
  pos=target.pos;
}",0.8448275862068966
164105,"public static void selectCell(CellSelector.Listener listener){
  cellSelector.listener=listener;
  scene.prompt(listener.prompt());
}","public static void selectCell(CellSelector.Listener listener){
  cellSelector.listener=listener;
  if (scene != null)   scene.prompt(listener.prompt());
}",0.926829268292683
164106,"private void updateTexture(boolean[] visible,boolean[] visited,boolean[] mapped){
  moveToUpdating();
  FogTexture fog=(FogTexture)texture;
  for (int i=updating.top; i < updating.bottom; i++) {
    int cell=(pWidth - 1) * i + updating.left;
    fog.pixels.position((width2) * i + updating.left);
    for (int j=updating.left; j < updating.right; j++) {
      if (cell < pWidth || cell >= Dungeon.level.length()) {
        fog.pixels.put(INVISIBLE);
      }
 else       if (visible[cell] && visible[cell - (pWidth - 1)] && visible[cell - 1]&& visible[cell - (pWidth - 1) - 1]) {
        fog.pixels.put(VISIBLE);
      }
 else       if (visited[cell] && visited[cell - (pWidth - 1)] && visited[cell - 1]&& visited[cell - (pWidth - 1) - 1]) {
        fog.pixels.put(VISITED);
      }
 else       if (mapped[cell] && mapped[cell - (pWidth - 1)] && mapped[cell - 1]&& mapped[cell - (pWidth - 1) - 1]) {
        fog.pixels.put(MAPPED);
      }
 else {
        fog.pixels.put(INVISIBLE);
      }
      cell++;
    }
  }
  if (updating.width() == pWidth && updating.height() == pHeight)   fog.update();
 else   fog.update(updating.top,updating.bottom);
}","private void updateTexture(boolean[] visible,boolean[] visited,boolean[] mapped){
  moveToUpdating();
  FogTexture fog=(FogTexture)texture;
  for (int i=updating.top; i < updating.bottom; i++) {
    int cell=(pWidth - 1) * i + updating.left;
    fog.pixels.position((width2) * i + updating.left);
    for (int j=updating.left; j < updating.right; j++) {
      if (cell < pWidth || cell >= Dungeon.level.length() || j == 0 || j == pWidth - 1) {
        fog.pixels.put(INVISIBLE);
      }
 else       if (visible[cell] && visible[cell - (pWidth - 1)] && visible[cell - 1]&& visible[cell - (pWidth - 1) - 1]) {
        fog.pixels.put(VISIBLE);
      }
 else       if (visited[cell] && visited[cell - (pWidth - 1)] && visited[cell - 1]&& visited[cell - (pWidth - 1) - 1]) {
        fog.pixels.put(VISITED);
      }
 else       if (mapped[cell] && mapped[cell - (pWidth - 1)] && mapped[cell - 1]&& mapped[cell - (pWidth - 1) - 1]) {
        fog.pixels.put(MAPPED);
      }
 else {
        fog.pixels.put(INVISIBLE);
      }
      cell++;
    }
  }
  if (updating.width() == pWidth && updating.height() == pHeight)   fog.update();
 else   fog.update(updating.top,updating.bottom);
}",0.9875161429186397
164107,"@Override public void draw(){
  if (needsRender)   render(this);
  super.draw();
}","@Override public void draw(){
  if (needsRender)   render(this);
  if (texture != null)   super.draw();
}",0.8770053475935828
164108,"public static void read(int pos){
  if (Dungeon.level instanceof DeadEndLevel) {
    GameScene.show(new WndMessage(Messages.get(Sign.class,""String_Node_Str"")));
  }
 else {
    if (Dungeon.depth <= 21) {
      GameScene.show(new WndMessage(Messages.get(Sign.class,""String_Node_Str"" + Dungeon.depth)));
    }
 else {
      if (Dungeon.depth - 21 < 3 && Messages.get(Sign.class,""String_Node_Str"").equals(""String_Node_Str"")) {
        GameScene.show(new WndMessage(teaser_texts[Dungeon.depth - 21]));
      }
      Dungeon.level.destroy(pos);
      GameScene.updateMap(pos);
      GameScene.discoverTile(pos,Terrain.SIGN);
      GLog.w(Messages.get(Sign.class,""String_Node_Str""));
      CellEmitter.get(pos).burst(ElmoParticle.FACTORY,6);
      Sample.INSTANCE.play(Assets.SND_BURNING);
    }
  }
}","public static void read(int pos){
  if (Dungeon.level instanceof DeadEndLevel) {
    GameScene.show(new WndMessage(Messages.get(Sign.class,""String_Node_Str"")));
  }
 else {
    if (Dungeon.depth <= 21) {
      GameScene.show(new WndMessage(Messages.get(Sign.class,""String_Node_Str"" + Dungeon.depth)));
    }
 else {
      if (Dungeon.depth - 21 <= 3 && Messages.lang() == Languages.ENGLISH) {
        GameScene.show(new WndMessage(teaser_texts[Dungeon.depth - 21]));
      }
      Dungeon.level.destroy(pos);
      GameScene.updateMap(pos);
      GameScene.discoverTile(pos,Terrain.SIGN);
      GLog.w(Messages.get(Sign.class,""String_Node_Str""));
      CellEmitter.get(pos).burst(ElmoParticle.FACTORY,6);
      Sample.INSTANCE.play(Assets.SND_BURNING);
    }
  }
}",0.944194996792816
164109,"public static void afterObserve(){
  if (scene != null) {
    for (    Mob mob : Dungeon.level.mobs) {
      mob.sprite.visible=Dungeon.visible[mob.pos];
    }
  }
}","public static void afterObserve(){
  if (scene != null) {
    for (    Mob mob : Dungeon.level.mobs) {
      if (mob.sprite != null)       mob.sprite.visible=Dungeon.visible[mob.pos];
    }
  }
}",0.9166666666666666
164110,"private boolean getCloser(final int target){
  if (target == pos)   return false;
  if (rooted) {
    Camera.main.shake(1,1f);
    return false;
  }
  int step=-1;
  if (Dungeon.level.adjacent(pos,target)) {
    path=null;
    if (Actor.findChar(target) == null) {
      if (Level.pit[target] && !flying && !Level.solid[target]) {
        if (!Chasm.jumpConfirmed) {
          Chasm.heroJump(this);
          interrupt();
        }
 else {
          Chasm.heroFall(target);
        }
        return false;
      }
      if (Level.passable[target] || Level.avoid[target]) {
        step=target;
      }
    }
  }
 else {
    boolean newPath=false;
    if (path == null || path.isEmpty())     newPath=true;
 else     if (path.getLast() != target)     newPath=true;
 else {
      for (int i=0; i < Math.min(path.size(),2); i++) {
        int cell=path.get(i);
        if (!Level.passable[cell] || ((i != path.size() - 1) && Dungeon.visible[cell] && Actor.findChar(cell) != null)) {
          newPath=true;
          break;
        }
      }
    }
    if (newPath) {
      int len=Dungeon.level.length();
      boolean[] p=Level.passable;
      boolean[] v=Dungeon.level.visited;
      boolean[] m=Dungeon.level.mapped;
      boolean[] passable=new boolean[len];
      for (int i=0; i < len; i++) {
        passable[i]=p[i] && (v[i] || m[i]);
      }
      path=Dungeon.findPath(this,pos,target,passable,Level.fieldOfView);
    }
    if (path == null)     return false;
    step=path.removeFirst();
  }
  if (step != -1) {
    sprite.move(pos,step);
    move(step);
    spend(1 / speed());
    return true;
  }
 else {
    return false;
  }
}","private boolean getCloser(final int target){
  if (target == pos)   return false;
  if (rooted) {
    Camera.main.shake(1,1f);
    return false;
  }
  int step=-1;
  if (Dungeon.level.adjacent(pos,target)) {
    path=null;
    if (Actor.findChar(target) == null) {
      if (Level.pit[target] && !flying && !Level.solid[target]) {
        if (!Chasm.jumpConfirmed) {
          Chasm.heroJump(this);
          interrupt();
        }
 else {
          Chasm.heroFall(target);
        }
        return false;
      }
      if (Level.passable[target] || Level.avoid[target]) {
        step=target;
      }
    }
  }
 else {
    boolean newPath=false;
    if (path == null || path.isEmpty() || !Dungeon.level.adjacent(pos,path.getFirst()))     newPath=true;
 else     if (path.getLast() != target)     newPath=true;
 else {
      for (int i=0; i < Math.min(path.size(),2); i++) {
        int cell=path.get(i);
        if (!Level.passable[cell] || ((i != path.size() - 1) && Dungeon.visible[cell] && Actor.findChar(cell) != null)) {
          newPath=true;
          break;
        }
      }
    }
    if (newPath) {
      int len=Dungeon.level.length();
      boolean[] p=Level.passable;
      boolean[] v=Dungeon.level.visited;
      boolean[] m=Dungeon.level.mapped;
      boolean[] passable=new boolean[len];
      for (int i=0; i < len; i++) {
        passable[i]=p[i] && (v[i] || m[i]);
      }
      path=Dungeon.findPath(this,pos,target,passable,Level.fieldOfView);
    }
    if (path == null)     return false;
    step=path.removeFirst();
  }
  if (step != -1) {
    sprite.move(pos,step);
    move(step);
    spend(1 / speed());
    return true;
  }
 else {
    return false;
  }
}",0.9855595667870036
164111,"protected boolean getCloser(int target){
  if (rooted || target == pos) {
    return false;
  }
  int step=-1;
  if (Dungeon.level.adjacent(pos,target)) {
    path=null;
    if (Actor.findChar(target) == null && Level.passable[target]) {
      step=target;
    }
  }
 else {
    boolean newPath=false;
    if (path == null || path.isEmpty())     newPath=true;
 else     if (path.getLast() != target) {
      if (Dungeon.level.adjacent(target,path.getLast())) {
        int last=path.removeLast();
        if (path.isEmpty()) {
          if (Dungeon.level.adjacent(target,pos)) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
 else         if (!path.isEmpty()) {
          if (path.getLast() == target) {
          }
 else           if (Dungeon.level.adjacent(target,path.getLast())) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
      }
 else {
        newPath=true;
      }
    }
    if (!newPath) {
      for (int i=0; i < Math.min(path.size(),4); i++) {
        int cell=path.get(i);
        if (!Level.passable[cell] || ((i != path.size() - 1) && Dungeon.visible[cell] && Actor.findChar(cell) != null)) {
          newPath=true;
          break;
        }
      }
    }
    if (newPath) {
      path=Dungeon.findPath(this,pos,target,Level.passable,Level.fieldOfView);
    }
    if (path == null)     return false;
    step=path.removeFirst();
  }
  if (step != -1) {
    move(step);
    return true;
  }
 else {
    return false;
  }
}","protected boolean getCloser(int target){
  if (rooted || target == pos) {
    return false;
  }
  int step=-1;
  if (Dungeon.level.adjacent(pos,target)) {
    path=null;
    if (Actor.findChar(target) == null && Level.passable[target]) {
      step=target;
    }
  }
 else {
    boolean newPath=false;
    if (path == null || path.isEmpty() || !Dungeon.level.adjacent(pos,path.getFirst()))     newPath=true;
 else     if (path.getLast() != target) {
      if (Dungeon.level.adjacent(target,path.getLast()) && path.size() < viewDistance) {
        int last=path.removeLast();
        if (path.isEmpty()) {
          if (Dungeon.level.adjacent(target,pos)) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
 else         if (!path.isEmpty()) {
          if (path.getLast() == target) {
          }
 else           if (Dungeon.level.adjacent(target,path.getLast())) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
      }
 else {
        newPath=true;
      }
    }
    if (!newPath) {
      for (int i=0; i < Math.min(path.size(),4); i++) {
        int cell=path.get(i);
        if (!Level.passable[cell] || ((i != path.size() - 1) && Dungeon.visible[cell] && Actor.findChar(cell) != null)) {
          newPath=true;
          break;
        }
      }
    }
    if (newPath) {
      path=Dungeon.findPath(this,pos,target,Level.passable,Level.fieldOfView);
    }
    if (path == null)     return false;
    step=path.removeFirst();
  }
  if (step != -1) {
    move(step);
    return true;
  }
 else {
    return false;
  }
}",0.9763349514563108
164112,"public NoosaScript(){
  compile(shader());
  uCamera=uniform(""String_Node_Str"");
  uModel=uniform(""String_Node_Str"");
  uTex=uniform(""String_Node_Str"");
  uColorM=uniform(""String_Node_Str"");
  uColorA=uniform(""String_Node_Str"");
  aXY=attribute(""String_Node_Str"");
  aUV=attribute(""String_Node_Str"");
  Quad.setupIndices();
  Quad.bindIndices();
}","public NoosaScript(){
  super();
  compile(shader());
  uCamera=uniform(""String_Node_Str"");
  uModel=uniform(""String_Node_Str"");
  uTex=uniform(""String_Node_Str"");
  uColorM=uniform(""String_Node_Str"");
  uColorA=uniform(""String_Node_Str"");
  aXY=attribute(""String_Node_Str"");
  aUV=attribute(""String_Node_Str"");
  Quad.setupIndices();
  Quad.bindIndices();
}",0.9843971631205674
164113,"protected void step(){
  if (requestedReset) {
    requestedReset=false;
    try {
      requestedScene=sceneClass.newInstance();
      switchScene();
    }
 catch (    InstantiationException|IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  update();
}","protected void step(){
  if (requestedReset) {
    requestedReset=false;
    try {
      requestedScene=sceneClass.newInstance();
      switchScene();
    }
 catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  update();
}",0.9134125636672326
164114,"public static void loadGame(String fileName,boolean fullLoad) throws IOException {
  Bundle bundle=gameBundle(fileName);
  version=bundle.getInt(VERSION);
  Generator.reset();
  Actor.restoreNextID(bundle);
  quickslot.reset();
  QuickSlotButton.reset();
  Dungeon.challenges=bundle.getInt(CHALLENGES);
  Dungeon.level=null;
  Dungeon.depth=-1;
  Scroll.restore(bundle);
  Potion.restore(bundle);
  Ring.restore(bundle);
  quickslot.restorePlaceholders(bundle);
  if (fullLoad) {
    transmutation=bundle.getInt(WT);
    int[] dropValues=bundle.getIntArray(LIMDROPS);
    for (    limitedDrops value : limitedDrops.values())     value.count=value.ordinal() < dropValues.length ? dropValues[value.ordinal()] : 0;
    chapters=new HashSet<Integer>();
    int ids[]=bundle.getIntArray(CHAPTERS);
    if (ids != null) {
      for (      int id : ids) {
        chapters.add(id);
      }
    }
    Bundle quests=bundle.getBundle(QUESTS);
    if (!quests.isNull()) {
      Ghost.Quest.restoreFromBundle(quests);
      Wandmaker.Quest.restoreFromBundle(quests);
      Blacksmith.Quest.restoreFromBundle(quests);
      Imp.Quest.restoreFromBundle(quests);
    }
 else {
      Ghost.Quest.reset();
      Wandmaker.Quest.reset();
      Blacksmith.Quest.reset();
      Imp.Quest.reset();
    }
    Room.restoreRoomsFromBundle(bundle);
  }
  Bundle badges=bundle.getBundle(BADGES);
  if (!badges.isNull()) {
    Badges.loadLocal(badges);
  }
 else {
    Badges.reset();
  }
  hero=null;
  hero=(Hero)bundle.get(HERO);
  gold=bundle.getInt(GOLD);
  depth=bundle.getInt(DEPTH);
  Statistics.restoreFromBundle(bundle);
  Journal.restoreFromBundle(bundle);
  Generator.restoreFromBundle(bundle);
  droppedItems=new SparseArray<ArrayList<Item>>();
  for (int i=2; i <= Statistics.deepestFloor + 1; i++) {
    ArrayList<Item> dropped=new ArrayList<Item>();
    for (    Bundlable b : bundle.getCollection(String.format(DROPPED,i))) {
      dropped.add((Item)b);
    }
    if (!dropped.isEmpty()) {
      droppedItems.put(i,dropped);
    }
  }
}","public static void loadGame(String fileName,boolean fullLoad) throws IOException {
  Bundle bundle=gameBundle(fileName);
  version=bundle.getInt(VERSION);
  Generator.reset();
  Actor.restoreNextID(bundle);
  quickslot.reset();
  QuickSlotButton.reset();
  Dungeon.challenges=bundle.getInt(CHALLENGES);
  Dungeon.level=null;
  Dungeon.depth=-1;
  Scroll.restore(bundle);
  Potion.restore(bundle);
  Ring.restore(bundle);
  quickslot.restorePlaceholders(bundle);
  if (fullLoad) {
    transmutation=bundle.getInt(WT);
    int[] dropValues=bundle.getIntArray(LIMDROPS);
    for (    limitedDrops value : limitedDrops.values())     value.count=value.ordinal() < dropValues.length ? dropValues[value.ordinal()] : 0;
    chapters=new HashSet<Integer>();
    int ids[]=bundle.getIntArray(CHAPTERS);
    if (ids != null) {
      for (      int id : ids) {
        chapters.add(id);
      }
    }
    Bundle quests=bundle.getBundle(QUESTS);
    if (!quests.isNull()) {
      Ghost.Quest.restoreFromBundle(quests);
      Wandmaker.Quest.restoreFromBundle(quests);
      Blacksmith.Quest.restoreFromBundle(quests);
      Imp.Quest.restoreFromBundle(quests);
    }
 else {
      Ghost.Quest.reset();
      Wandmaker.Quest.reset();
      Blacksmith.Quest.reset();
      Imp.Quest.reset();
    }
    Room.restoreRoomsFromBundle(bundle);
  }
  Bundle badges=bundle.getBundle(BADGES);
  if (!badges.isNull()) {
    Badges.loadLocal(badges);
  }
 else {
    Badges.reset();
  }
  hero=null;
  hero=(Hero)bundle.get(HERO);
  gold=bundle.getInt(GOLD);
  depth=bundle.getInt(DEPTH);
  Statistics.restoreFromBundle(bundle);
  Journal.restoreFromBundle(bundle);
  Generator.restoreFromBundle(bundle);
  droppedItems=new SparseArray<ArrayList<Item>>();
  for (int i=2; i <= Statistics.deepestFloor + 1; i++) {
    ArrayList<Item> dropped=new ArrayList<Item>();
    for (    Bundlable b : bundle.getCollection(Messages.format(DROPPED,i))) {
      dropped.add((Item)b);
    }
    if (!dropped.isEmpty()) {
      droppedItems.put(i,dropped);
    }
  }
}",0.9965466206216084
164115,"public static void saveGame(String fileName) throws IOException {
  try {
    Bundle bundle=new Bundle();
    version=Game.versionCode;
    bundle.put(VERSION,version);
    bundle.put(CHALLENGES,challenges);
    bundle.put(HERO,hero);
    bundle.put(GOLD,gold);
    bundle.put(DEPTH,depth);
    for (    int d : droppedItems.keyArray()) {
      bundle.put(String.format(DROPPED,d),droppedItems.get(d));
    }
    quickslot.storePlaceholders(bundle);
    bundle.put(WT,transmutation);
    int[] dropValues=new int[limitedDrops.values().length];
    for (    limitedDrops value : limitedDrops.values())     dropValues[value.ordinal()]=value.count;
    bundle.put(LIMDROPS,dropValues);
    int count=0;
    int ids[]=new int[chapters.size()];
    for (    Integer id : chapters) {
      ids[count++]=id;
    }
    bundle.put(CHAPTERS,ids);
    Bundle quests=new Bundle();
    Ghost.Quest.storeInBundle(quests);
    Wandmaker.Quest.storeInBundle(quests);
    Blacksmith.Quest.storeInBundle(quests);
    Imp.Quest.storeInBundle(quests);
    bundle.put(QUESTS,quests);
    Room.storeRoomsInBundle(bundle);
    Statistics.storeInBundle(bundle);
    Journal.storeInBundle(bundle);
    Generator.storeInBundle(bundle);
    Scroll.save(bundle);
    Potion.save(bundle);
    Ring.save(bundle);
    Actor.storeNextID(bundle);
    Bundle badges=new Bundle();
    Badges.saveLocal(badges);
    bundle.put(BADGES,badges);
    OutputStream output=Game.instance.openFileOutput(fileName,Game.MODE_PRIVATE);
    Bundle.write(bundle,output);
    output.close();
  }
 catch (  IOException e) {
    GamesInProgress.setUnknown(hero.heroClass);
    ShatteredPixelDungeon.reportException(e);
  }
}","public static void saveGame(String fileName) throws IOException {
  try {
    Bundle bundle=new Bundle();
    version=Game.versionCode;
    bundle.put(VERSION,version);
    bundle.put(CHALLENGES,challenges);
    bundle.put(HERO,hero);
    bundle.put(GOLD,gold);
    bundle.put(DEPTH,depth);
    for (    int d : droppedItems.keyArray()) {
      bundle.put(Messages.format(DROPPED,d),droppedItems.get(d));
    }
    quickslot.storePlaceholders(bundle);
    bundle.put(WT,transmutation);
    int[] dropValues=new int[limitedDrops.values().length];
    for (    limitedDrops value : limitedDrops.values())     dropValues[value.ordinal()]=value.count;
    bundle.put(LIMDROPS,dropValues);
    int count=0;
    int ids[]=new int[chapters.size()];
    for (    Integer id : chapters) {
      ids[count++]=id;
    }
    bundle.put(CHAPTERS,ids);
    Bundle quests=new Bundle();
    Ghost.Quest.storeInBundle(quests);
    Wandmaker.Quest.storeInBundle(quests);
    Blacksmith.Quest.storeInBundle(quests);
    Imp.Quest.storeInBundle(quests);
    bundle.put(QUESTS,quests);
    Room.storeRoomsInBundle(bundle);
    Statistics.storeInBundle(bundle);
    Journal.storeInBundle(bundle);
    Generator.storeInBundle(bundle);
    Scroll.save(bundle);
    Potion.save(bundle);
    Ring.save(bundle);
    Actor.storeNextID(bundle);
    Bundle badges=new Bundle();
    Badges.saveLocal(badges);
    bundle.put(BADGES,badges);
    OutputStream output=Game.instance.openFileOutput(fileName,Game.MODE_PRIVATE);
    Bundle.write(bundle,output);
    output.close();
  }
 catch (  IOException e) {
    GamesInProgress.setUnknown(hero.heroClass);
    ShatteredPixelDungeon.reportException(e);
  }
}",0.9964136282127914
164116,"protected boolean getCloser(int target){
  if (rooted || target == pos) {
    return false;
  }
  boolean newPath=false;
  if (path == null || path.isEmpty())   newPath=true;
 else   if (path.getLast() != target) {
    if (Dungeon.level.adjacent(target,path.getLast())) {
      int last=path.removeLast();
      if (path.isEmpty()) {
        if (Dungeon.level.adjacent(target,pos)) {
          path.add(target);
        }
 else {
          path.add(last);
          path.add(target);
        }
      }
 else       if (!path.isEmpty()) {
        if (path.getLast() == target) {
        }
 else         if (Dungeon.level.adjacent(target,path.getLast())) {
          path.add(target);
        }
 else {
          path.add(last);
          path.add(target);
        }
      }
    }
 else {
      newPath=true;
    }
  }
  if (!newPath) {
    for (int i=0; i < Math.min(path.size(),4); i++) {
      int cell=path.get(i);
      if (!Level.passable[cell] || ((i != path.size() - 1) && Dungeon.visible[cell] && Actor.findChar(cell) != null)) {
        newPath=true;
        break;
      }
    }
  }
  if (newPath) {
    path=Dungeon.findPath(this,pos,target,Level.passable,Level.fieldOfView);
  }
  if (path == null)   return false;
  int step=path.removeFirst();
  if (step != -1) {
    move(step);
    return true;
  }
 else {
    return false;
  }
}","protected boolean getCloser(int target){
  if (rooted || target == pos) {
    return false;
  }
  int step=-1;
  if (Dungeon.level.adjacent(pos,target)) {
    path=null;
    if (Actor.findChar(target) == null && Level.passable[target]) {
      step=target;
    }
  }
 else {
    boolean newPath=false;
    if (path == null || path.isEmpty())     newPath=true;
 else     if (path.getLast() != target) {
      if (Dungeon.level.adjacent(target,path.getLast())) {
        int last=path.removeLast();
        if (path.isEmpty()) {
          if (Dungeon.level.adjacent(target,pos)) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
 else         if (!path.isEmpty()) {
          if (path.getLast() == target) {
          }
 else           if (Dungeon.level.adjacent(target,path.getLast())) {
            path.add(target);
          }
 else {
            path.add(last);
            path.add(target);
          }
        }
      }
 else {
        newPath=true;
      }
    }
    if (!newPath) {
      for (int i=0; i < Math.min(path.size(),4); i++) {
        int cell=path.get(i);
        if (!Level.passable[cell] || ((i != path.size() - 1) && Dungeon.visible[cell] && Actor.findChar(cell) != null)) {
          newPath=true;
          break;
        }
      }
    }
    if (newPath) {
      path=Dungeon.findPath(this,pos,target,Level.passable,Level.fieldOfView);
    }
    if (path == null)     return false;
    step=path.removeFirst();
  }
  if (step != -1) {
    move(step);
    return true;
  }
 else {
    return false;
  }
}",0.7050457162207924
164117,"@Override protected boolean canAttack(Char enemy){
  if (beamCooldown == 0) {
    Ballistica aim=new Ballistica(pos,enemy.pos,Ballistica.STOP_TERRAIN);
    if (enemy.invisible == 0 && Level.fieldOfView[enemy.pos] && aim.subPath(1,aim.dist).contains(enemy.pos)) {
      beam=aim;
      return true;
    }
 else     return beamCharged;
  }
 else   return super.canAttack(enemy);
}","@Override protected boolean canAttack(Char enemy){
  if (beamCooldown == 0) {
    Ballistica aim=new Ballistica(pos,enemy.pos,Ballistica.STOP_TERRAIN);
    if (enemy.invisible == 0 && Level.fieldOfView[enemy.pos] && aim.subPath(1,aim.dist).contains(enemy.pos)) {
      beam=aim;
      beamTarget=aim.collisionPos;
      return true;
    }
 else     return beamCharged;
  }
 else   return super.canAttack(enemy);
}",0.9557522123893806
164118,"public void deathGaze(){
  if (!beamCharged || beamCooldown > 0 || beam == null)   return;
  beamCharged=false;
  beamCooldown=Random.IntRange(3,6);
  boolean terrainAffected=false;
  for (  int pos : beam.subPath(1,beam.dist)) {
    if (Level.flamable[pos]) {
      Dungeon.level.destroy(pos);
      GameScene.updateMap(pos);
      terrainAffected=true;
    }
    Char ch=Actor.findChar(pos);
    if (ch == null) {
      continue;
    }
    if (hit(this,ch,true)) {
      ch.damage(Random.NormalIntRange(30,50),this);
      if (Dungeon.visible[pos]) {
        ch.sprite.flash();
        CellEmitter.center(pos).burst(PurpleParticle.BURST,Random.IntRange(1,2));
      }
      if (!ch.isAlive() && ch == Dungeon.hero) {
        Dungeon.fail(getClass());
        GLog.n(Messages.get(this,""String_Node_Str""));
      }
    }
 else {
      ch.sprite.showStatus(CharSprite.NEUTRAL,ch.defenseVerb());
    }
  }
  if (terrainAffected) {
    Dungeon.observe();
  }
  beam=null;
  sprite.idle();
}","public void deathGaze(){
  if (!beamCharged || beamCooldown > 0 || beam == null)   return;
  beamCharged=false;
  beamCooldown=Random.IntRange(3,6);
  boolean terrainAffected=false;
  for (  int pos : beam.subPath(1,beam.dist)) {
    if (Level.flamable[pos]) {
      Dungeon.level.destroy(pos);
      GameScene.updateMap(pos);
      terrainAffected=true;
    }
    Char ch=Actor.findChar(pos);
    if (ch == null) {
      continue;
    }
    if (hit(this,ch,true)) {
      ch.damage(Random.NormalIntRange(30,50),this);
      if (Dungeon.visible[pos]) {
        ch.sprite.flash();
        CellEmitter.center(pos).burst(PurpleParticle.BURST,Random.IntRange(1,2));
      }
      if (!ch.isAlive() && ch == Dungeon.hero) {
        Dungeon.fail(getClass());
        GLog.n(Messages.get(this,""String_Node_Str""));
      }
    }
 else {
      ch.sprite.showStatus(CharSprite.NEUTRAL,ch.defenseVerb());
    }
  }
  if (terrainAffected) {
    Dungeon.observe();
  }
  beam=null;
  beamTarget=-1;
  sprite.idle();
}",0.9914615770969362
164119,"@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  if (beam != null)   bundle.put(BEAM_TARGET,beam.collisionPos);
  bundle.put(BEAM_COOLDOWN,beamCooldown);
  bundle.put(BEAM_CHARGED,beamCharged);
}","@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(BEAM_TARGET,beamTarget);
  bundle.put(BEAM_COOLDOWN,beamCooldown);
  bundle.put(BEAM_CHARGED,beamCharged);
}",0.9103448275862068
164120,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  if (bundle.contains(BEAM_TARGET))   beam=new Ballistica(pos,bundle.getInt(BEAM_TARGET),Ballistica.STOP_TERRAIN);
  beamCooldown=bundle.getInt(BEAM_COOLDOWN);
  beamCharged=bundle.getBoolean(BEAM_CHARGED);
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  if (bundle.contains(BEAM_TARGET))   beamTarget=bundle.getInt(BEAM_TARGET);
  beamCooldown=bundle.getInt(BEAM_COOLDOWN);
  beamCharged=bundle.getBoolean(BEAM_CHARGED);
}",0.9107142857142856
164121,"public void measure(){
  width=0;
  height=0;
  if (text == null) {
    text=""String_Node_Str"";
  }
  int length=text.length();
  for (int i=0; i < length; i++) {
    RectF rect=font.get(text.charAt(i));
    float w=font.width(rect);
    float h=font.height(rect);
    width+=w + font.tracking;
    if (h > height) {
      height=h;
    }
  }
  if (length > 0) {
    width-=font.tracking;
  }
}","public synchronized void measure(){
  width=0;
  height=0;
  if (text == null) {
    text=""String_Node_Str"";
  }
  int length=text.length();
  for (int i=0; i < length; i++) {
    RectF rect=font.get(text.charAt(i));
    float w=font.width(rect);
    float h=font.height(rect);
    width+=w + font.tracking;
    if (h > height) {
      height=h;
    }
  }
  if (length > 0) {
    width-=font.tracking;
  }
}",0.9837702871410736
164122,"protected void updateVertices(){
  width=0;
  height=0;
  if (text == null) {
    text=""String_Node_Str"";
  }
  quads=Quad.createSet(text.length());
  realLength=0;
  int length=text.length();
  for (int i=0; i < length; i++) {
    RectF rect=font.get(text.charAt(i));
    if (rect == null) {
      rect=null;
    }
    float w=font.width(rect);
    float h=font.height(rect);
    vertices[0]=width;
    vertices[1]=0;
    vertices[2]=rect.left;
    vertices[3]=rect.top;
    vertices[4]=width + w;
    vertices[5]=0;
    vertices[6]=rect.right;
    vertices[7]=rect.top;
    vertices[8]=width + w;
    vertices[9]=h;
    vertices[10]=rect.right;
    vertices[11]=rect.bottom;
    vertices[12]=width;
    vertices[13]=h;
    vertices[14]=rect.left;
    vertices[15]=rect.bottom;
    quads.put(vertices);
    realLength++;
    width+=w + font.tracking;
    if (h > height) {
      height=h;
    }
  }
  if (length > 0) {
    width-=font.tracking;
  }
  dirty=false;
}","protected synchronized void updateVertices(){
  width=0;
  height=0;
  if (text == null) {
    text=""String_Node_Str"";
  }
  quads=Quad.createSet(text.length());
  realLength=0;
  int length=text.length();
  for (int i=0; i < length; i++) {
    RectF rect=font.get(text.charAt(i));
    if (rect == null) {
      rect=null;
    }
    float w=font.width(rect);
    float h=font.height(rect);
    vertices[0]=width;
    vertices[1]=0;
    vertices[2]=rect.left;
    vertices[3]=rect.top;
    vertices[4]=width + w;
    vertices[5]=0;
    vertices[6]=rect.right;
    vertices[7]=rect.top;
    vertices[8]=width + w;
    vertices[9]=h;
    vertices[10]=rect.right;
    vertices[11]=rect.bottom;
    vertices[12]=width;
    vertices[13]=h;
    vertices[14]=rect.left;
    vertices[15]=rect.bottom;
    quads.put(vertices);
    realLength++;
    width+=w + font.tracking;
    if (h > height) {
      height=h;
    }
  }
  if (length > 0) {
    width-=font.tracking;
  }
  dirty=false;
}",0.9933161953727506
164123,"public void text(String str){
  text=str;
  dirty=true;
}","public synchronized void text(String str){
  text=str;
  dirty=true;
}",0.8976377952755905
164124,"public void font(Font value){
  font=value;
}","public synchronized void font(Font value){
  font=value;
}",0.8737864077669902
164125,"public void place(int p){
  point(worldToCamera(p));
}","public void place(int p){
  if (Dungeon.level != null)   point(worldToCamera(p));
}",0.7883211678832117
164126,"public synchronized void updateMap(){
  updated.set(0,0,mapWidth,mapHeight);
}","public synchronized void updateMap(){
  updated.set(0,0,mapWidth,mapHeight);
  if (buffer != null) {
    buffer.delete();
  }
  buffer=null;
  camX=null;
}",0.6695278969957081
164127,"public void map(int[] data,int cols){
  this.data=data;
  mapWidth=cols;
  mapHeight=data.length / cols;
  size=mapWidth * mapHeight;
  bufferPositions=new short[size];
  for (int i=0; i < bufferPositions.length; i++)   bufferPositions[i]=-1;
  bufferLength=0;
  width=cellW * mapWidth;
  height=cellH * mapHeight;
  quads=Quad.createSet(size);
  updated.set(0,0,mapWidth,mapHeight);
}","public void map(int[] data,int cols){
  this.data=data;
  mapWidth=cols;
  mapHeight=data.length / cols;
  size=mapWidth * mapHeight;
  bufferPositions=new short[size];
  for (int i=0; i < bufferPositions.length; i++)   bufferPositions[i]=-1;
  bufferLength=0;
  width=cellW * mapWidth;
  height=cellH * mapHeight;
  quads=Quad.createSet(size);
  updateMap();
}",0.9597855227882036
164128,"private void changeMap(int[] map){
  this.map=map.clone();
  GameScene.resetMap();
  buildFlagMaps();
  cleanWalls();
  exit=entrance=0;
  for (int i=0; i < length(); i++)   if (map[i] == Terrain.ENTRANCE)   entrance=i;
 else   if (map[i] == Terrain.EXIT)   exit=i;
  visited=mapped=new boolean[length()];
  for (  Blob blob : blobs.values()) {
    blob.fullyClear();
  }
  addVisuals();
  resetTraps();
  Dungeon.observe();
}","private void changeMap(int[] map){
  this.map=map.clone();
  buildFlagMaps();
  cleanWalls();
  exit=entrance=0;
  for (int i=0; i < length(); i++)   if (map[i] == Terrain.ENTRANCE)   entrance=i;
 else   if (map[i] == Terrain.EXIT)   exit=i;
  visited=mapped=new boolean[length()];
  for (  Blob blob : blobs.values()) {
    blob.fullyClear();
  }
  addVisuals();
  resetTraps();
  GameScene.resetMap();
  Dungeon.observe();
}",0.943661971830986
164129,"public void progress(){
switch (state) {
case START:
    seal();
  set(5 + 25 * 32,Terrain.LOCKED_DOOR);
GameScene.updateMap(5 + 25 * 32);
tengu.state=tengu.HUNTING;
tengu.pos=5 + 28 * 32;
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_START;
break;
case FIGHT_START:
changeMap(MAP_MAZE);
clearEntities((Room)new Room().set(0,5,8,32));
Actor.remove(tengu);
mobs.remove(tengu);
HealthIndicator.instance.target(null);
tengu.sprite.kill();
Room maze=new Room();
maze.set(10,1,31,29);
maze.connected.put(null,new Room.Door(10,2));
maze.connected.put(maze,new Room.Door(20,29));
MazePainter.paint(this,maze);
GameScene.resetMap();
buildFlagMaps();
cleanWalls();
GameScene.flash(0xFFFFFF);
Sample.INSTANCE.play(Assets.SND_BLAST);
state=State.MAZE;
break;
case MAZE:
Dungeon.hero.interrupt();
Dungeon.hero.pos+=9 + 3 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
changeMap(MAP_ARENA);
clearEntities(null);
tengu.state=tengu.HUNTING;
do {
tengu.pos=Random.Int(length());
}
 while (solid[tengu.pos] || distance(tengu.pos,Dungeon.hero.pos) < 8);
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_ARENA;
break;
case FIGHT_ARENA:
unseal();
CustomTileVisual vis=new exitVisual();
vis.pos(7,7);
customTiles.add(vis);
((GameScene)ShatteredPixelDungeon.scene()).addCustomTile(vis);
Dungeon.hero.interrupt();
Dungeon.hero.pos=5 + 27 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
tengu.pos=5 + 28 * 32;
tengu.sprite.place(5 + 28 * 32);
changeMap(MAP_END);
clearEntities(null);
tengu.die(Dungeon.hero);
for (Item item : storedItems) drop(item,randomPrisonCell());
state=State.WON;
break;
}
}","public void progress(){
switch (state) {
case START:
    seal();
  set(5 + 25 * 32,Terrain.LOCKED_DOOR);
GameScene.updateMap(5 + 25 * 32);
tengu.state=tengu.HUNTING;
tengu.pos=5 + 28 * 32;
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_START;
break;
case FIGHT_START:
changeMap(MAP_MAZE);
clearEntities((Room)new Room().set(0,5,8,32));
Actor.remove(tengu);
mobs.remove(tengu);
HealthIndicator.instance.target(null);
tengu.sprite.kill();
Room maze=new Room();
maze.set(10,1,31,29);
maze.connected.put(null,new Room.Door(10,2));
maze.connected.put(maze,new Room.Door(20,29));
MazePainter.paint(this,maze);
buildFlagMaps();
cleanWalls();
GameScene.resetMap();
GameScene.flash(0xFFFFFF);
Sample.INSTANCE.play(Assets.SND_BLAST);
state=State.MAZE;
break;
case MAZE:
Dungeon.hero.interrupt();
Dungeon.hero.pos+=9 + 3 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
changeMap(MAP_ARENA);
clearEntities(null);
tengu.state=tengu.HUNTING;
do {
tengu.pos=Random.Int(length());
}
 while (solid[tengu.pos] || distance(tengu.pos,Dungeon.hero.pos) < 8);
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_ARENA;
break;
case FIGHT_ARENA:
unseal();
CustomTileVisual vis=new exitVisual();
vis.pos(7,7);
customTiles.add(vis);
((GameScene)ShatteredPixelDungeon.scene()).addCustomTile(vis);
Dungeon.hero.interrupt();
Dungeon.hero.pos=5 + 27 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
tengu.pos=5 + 28 * 32;
tengu.sprite.place(5 + 28 * 32);
changeMap(MAP_END);
clearEntities(null);
tengu.die(Dungeon.hero);
for (Item item : storedItems) drop(item,randomPrisonCell());
state=State.WON;
break;
}
}",0.9814925373134328
164130,"public void map(int[] data,int cols){
  this.data=data;
  mapWidth=cols;
  mapHeight=data.length / cols;
  size=mapWidth * mapHeight;
  bufferPositions=new short[size];
  for (int i=0; i < bufferPositions.length; i++)   bufferPositions[i]=-1;
  width=cellW * mapWidth;
  height=cellH * mapHeight;
  quads=Quad.createSet(size);
  updated.set(0,0,mapWidth,mapHeight);
}","public void map(int[] data,int cols){
  this.data=data;
  mapWidth=cols;
  mapHeight=data.length / cols;
  size=mapWidth * mapHeight;
  bufferPositions=new short[size];
  for (int i=0; i < bufferPositions.length; i++)   bufferPositions[i]=-1;
  bufferLength=0;
  width=cellW * mapWidth;
  height=cellH * mapHeight;
  quads=Quad.createSet(size);
  updated.set(0,0,mapWidth,mapHeight);
}",0.976063829787234
164131,"public static boolean spawn(PrisonLevel level,Room room,Collection<Room> rooms){
  if (!spawned && (type != 0 || (Dungeon.depth > 6 && Random.Int(10 - Dungeon.depth) == 0))) {
    if (type == 0)     type=Random.Int(Dungeon.isChallenged(Challenges.NO_HERBALISM) ? 2 : 3) + 1;
    if (setRoom(rooms)) {
      Wandmaker npc=new Wandmaker();
      do {
        npc.pos=Dungeon.level.pointToCell(room.random());
      }
 while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
      level.mobs.add(npc);
      spawned=true;
      given=false;
      wand1=(Wand)Generator.random(Generator.Category.WAND);
      wand1.cursed=false;
      wand1.identify();
      wand1.upgrade();
      do {
        wand2=(Wand)Generator.random(Generator.Category.WAND);
      }
 while (wand2.getClass().equals(wand1.getClass()));
      wand2.cursed=false;
      wand2.identify();
      wand2.upgrade();
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return true;
  }
}","public static boolean spawn(PrisonLevel level,Room room,Collection<Room> rooms){
  if (!spawned && (type != 0 || (Dungeon.depth > 6 && Random.Int(10 - Dungeon.depth) == 0))) {
    if (type == 0)     type=Random.Int(Dungeon.isChallenged(Challenges.NO_HERBALISM) ? 2 : 3) + 1;
    if (setRoom(rooms)) {
      Wandmaker npc=new Wandmaker();
      do {
        npc.pos=level.pointToCell(room.random());
      }
 while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
      level.mobs.add(npc);
      spawned=true;
      given=false;
      wand1=(Wand)Generator.random(Generator.Category.WAND);
      wand1.cursed=false;
      wand1.identify();
      wand1.upgrade();
      do {
        wand2=(Wand)Generator.random(Generator.Category.WAND);
      }
 while (wand2.getClass().equals(wand1.getClass()));
      wand2.cursed=false;
      wand2.identify();
      wand2.upgrade();
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return true;
  }
}",0.995991983967936
164132,"public void level(int value){
  if (level < value) {
    level=value;
  }
}","public void level(int value){
  if (level < value) {
    level=value;
    pos=target.pos;
  }
}",0.8823529411764706
164133,"@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch == Dungeon.hero) {
    Buff.affect(ch,Armor.class).level=ch.HT;
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.bottom(pos).start(EarthParticle.FACTORY,0.05f,8);
    Camera.main.shake(1,0.4f);
  }
}","@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch == Dungeon.hero) {
    Buff.affect(ch,Armor.class).level(ch.HT);
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.bottom(pos).start(EarthParticle.FACTORY,0.05f,8);
    Camera.main.shake(1,0.4f);
  }
}",0.994535519125683
164134,"protected boolean act(){
  PathFinder.buildDistanceMap(pos,BArray.not(Level.solid,null),2);
  for (int i=0; i < PathFinder.distance.length; i++) {
    if (PathFinder.distance[i] < Integer.MAX_VALUE)     if (Dungeon.level.insideMap(i) && Actor.findChar(i) == null && !(Level.pit[i])) {
      Sheep sheep=new Sheep();
      sheep.lifespan=2 + Random.Int(Dungeon.depth + 10);
      sheep.pos=i;
      GameScene.add(sheep);
    }
    CellEmitter.get(i).burst(Speck.factory(Speck.WOOL),4);
  }
  Sample.INSTANCE.play(Assets.SND_PUFF);
  Actor.remove(this);
  return true;
}","protected boolean act(){
  PathFinder.buildDistanceMap(pos,BArray.not(Level.solid,null),2);
  for (int i=0; i < PathFinder.distance.length; i++) {
    if (PathFinder.distance[i] < Integer.MAX_VALUE)     if (Dungeon.level.insideMap(i) && Actor.findChar(i) == null && !(Level.pit[i])) {
      Sheep sheep=new Sheep();
      sheep.lifespan=2 + Random.Int(Dungeon.depth + 10);
      sheep.pos=i;
      GameScene.add(sheep);
      CellEmitter.get(i).burst(Speck.factory(Speck.WOOL),4);
    }
  }
  Sample.INSTANCE.play(Assets.SND_PUFF);
  Actor.remove(this);
  return true;
}",0.9912126537785588
164135,"@Override public void activate(){
  Actor.add(new Actor(){
{
      actPriority=3;
    }
    protected boolean act(){
      PathFinder.buildDistanceMap(pos,BArray.not(Level.solid,null),2);
      for (int i=0; i < PathFinder.distance.length; i++) {
        if (PathFinder.distance[i] < Integer.MAX_VALUE)         if (Dungeon.level.insideMap(i) && Actor.findChar(i) == null && !(Level.pit[i])) {
          Sheep sheep=new Sheep();
          sheep.lifespan=2 + Random.Int(Dungeon.depth + 10);
          sheep.pos=i;
          GameScene.add(sheep);
        }
        CellEmitter.get(i).burst(Speck.factory(Speck.WOOL),4);
      }
      Sample.INSTANCE.play(Assets.SND_PUFF);
      Actor.remove(this);
      return true;
    }
  }
);
}","@Override public void activate(){
  Actor.add(new Actor(){
{
      actPriority=3;
    }
    protected boolean act(){
      PathFinder.buildDistanceMap(pos,BArray.not(Level.solid,null),2);
      for (int i=0; i < PathFinder.distance.length; i++) {
        if (PathFinder.distance[i] < Integer.MAX_VALUE)         if (Dungeon.level.insideMap(i) && Actor.findChar(i) == null && !(Level.pit[i])) {
          Sheep sheep=new Sheep();
          sheep.lifespan=2 + Random.Int(Dungeon.depth + 10);
          sheep.pos=i;
          GameScene.add(sheep);
          CellEmitter.get(i).burst(Speck.factory(Speck.WOOL),4);
        }
      }
      Sample.INSTANCE.play(Assets.SND_PUFF);
      Actor.remove(this);
      return true;
    }
  }
);
}",0.9876712328767124
164136,"@Override protected Char chooseEnemy(){
  if (beamCharged)   return enemy;
  return super.chooseEnemy();
}","@Override protected Char chooseEnemy(){
  if (beamCharged && enemy != null)   return enemy;
  return super.chooseEnemy();
}",0.925764192139738
164137,"@Override public boolean act(boolean enemyInFOV,boolean justAlerted){
  if (beamCharged)   enemyInFOV=true;
  return super.act(enemyInFOV,justAlerted);
}","@Override public boolean act(boolean enemyInFOV,boolean justAlerted){
  if (beamCharged && enemy != null)   enemyInFOV=true;
  return super.act(enemyInFOV,justAlerted);
}",0.9473684210526316
164138,"@Override public void activate(){
  InterlevelScene.returnDepth=Dungeon.depth;
  for (  Item item : Dungeon.hero.belongings.backpack.items.toArray(new Item[0])) {
    if (item instanceof Key && ((Key)item).depth == Dungeon.depth) {
      item.detachAll(Dungeon.hero.belongings.backpack);
    }
  }
  InterlevelScene.mode=InterlevelScene.Mode.RESET;
  Game.switchScene(InterlevelScene.class);
}","@Override public void activate(){
  InterlevelScene.returnDepth=Dungeon.depth;
  Belongings belongings=Dungeon.hero.belongings;
  belongings.ironKeys[Dungeon.depth]=0;
  belongings.specialKeys[Dungeon.depth]=0;
  for (  Item i : belongings) {
    if (i instanceof LloydsBeacon && ((LloydsBeacon)i).returnDepth == Dungeon.depth)     ((LloydsBeacon)i).returnDepth=-1;
  }
  InterlevelScene.mode=InterlevelScene.Mode.RESET;
  Game.switchScene(InterlevelScene.class);
}",0.4778554778554778
164139,"private void updateVersion(int previousVersion){
  if (previousVersion < 108) {
    Rankings.INSTANCE.load();
    for (    Rankings.Record rec : Rankings.INSTANCE.records) {
      try {
        Dungeon.loadGame(rec.gameFile,false);
        rec.gameID=rec.gameFile.replaceAll(""String_Node_Str"",""String_Node_Str"");
        Rankings.INSTANCE.saveGameData(rec);
      }
 catch (      Exception e) {
        rec.gameID=rec.gameFile.replaceAll(""String_Node_Str"",""String_Node_Str"");
        rec.gameData=null;
      }
      String file=rec.gameFile;
      rec.gameFile=""String_Node_Str"";
      Game.instance.deleteFile(file);
    }
    Rankings.INSTANCE.save();
  }
  ShatteredPixelDungeon.version(ShatteredPixelDungeon.versionCode);
}","private void updateVersion(int previousVersion){
  if (previousVersion <= 114) {
    Rankings.INSTANCE.load();
    for (    Rankings.Record rec : Rankings.INSTANCE.records) {
      if (rec.gameFile != null) {
        try {
          Dungeon.loadGame(rec.gameFile,false);
          rec.gameID=rec.gameFile.replaceAll(""String_Node_Str"",""String_Node_Str"");
          Rankings.INSTANCE.saveGameData(rec);
        }
 catch (        Exception e) {
          rec.gameID=rec.gameFile.replaceAll(""String_Node_Str"",""String_Node_Str"");
          rec.gameData=null;
        }
        String file=rec.gameFile;
        rec.gameFile=""String_Node_Str"";
        Game.instance.deleteFile(file);
      }
 else       if (rec.gameID == null) {
        rec.gameID=UUID.randomUUID().toString();
      }
    }
    Rankings.INSTANCE.save();
  }
  ShatteredPixelDungeon.version(ShatteredPixelDungeon.versionCode);
}",0.8974042027194067
164140,"public void item(Item item){
  if (this.item == item) {
    updateText();
    return;
  }
  this.item=item;
  if (item == null) {
    active=false;
    icon.visible(false);
    updateText();
  }
 else {
    active=true;
    icon.visible(true);
    icon.view(item);
    updateText();
  }
}","public void item(Item item){
  if (this.item == item) {
    updateText();
    return;
  }
  this.item=item;
  if (item == null) {
    enable(false);
    icon.visible(false);
    updateText();
  }
 else {
    enable(true);
    icon.visible(true);
    icon.view(item);
    updateText();
  }
}",0.916955017301038
164141,"@Override public int defenseProc(Char enemy,int damage){
  if (!enemySeen && enemy == Dungeon.hero && Dungeon.hero.canSurpriseAttack()) {
    if (((Hero)enemy).subClass == HeroSubClass.ASSASSIN) {
      damage*=1.25f;
      Wound.hit(this);
    }
 else {
      Surprise.hit(this);
    }
  }
  if (enemy.buff(Corruption.class) != null) {
    aggro(enemy);
    target=enemy.pos;
    if (state == SLEEPING || state == WANDERING)     state=HUNTING;
  }
  if (buff(SoulMark.class) != null) {
    int restoration=Math.max(damage,HP);
    Dungeon.hero.buff(Hunger.class).satisfy(restoration * 0.5f);
    Dungeon.hero.HP=(int)Math.ceil(Math.min(Dungeon.hero.HT,Dungeon.hero.HP + (restoration * 0.25f)));
    Dungeon.hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
  }
  return damage;
}","@Override public int defenseProc(Char enemy,int damage){
  if (!enemySeen && enemy == Dungeon.hero && Dungeon.hero.canSurpriseAttack()) {
    if (((Hero)enemy).subClass == HeroSubClass.ASSASSIN) {
      damage*=1.25f;
      Wound.hit(this);
    }
 else {
      Surprise.hit(this);
    }
  }
  if (enemy.buff(Corruption.class) != null) {
    aggro(enemy);
    target=enemy.pos;
    if (state == SLEEPING || state == WANDERING)     state=HUNTING;
  }
  if (buff(SoulMark.class) != null) {
    int restoration=Math.min(damage,HP);
    Dungeon.hero.buff(Hunger.class).satisfy(restoration * 0.5f);
    Dungeon.hero.HP=(int)Math.ceil(Math.min(Dungeon.hero.HT,Dungeon.hero.HP + (restoration * 0.25f)));
    Dungeon.hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
  }
  return damage;
}",0.9974715549936788
164142,"@Override public int drRoll(){
  int dr=0;
  Barkskin bark=buff(Barkskin.class);
  if (belongings.armor != null) {
    dr+=Random.NormalIntRange(belongings.armor.DRMin(),belongings.armor.DRMax());
    if (STR() < belongings.armor.STRReq()) {
      dr-=2 * (belongings.armor.STRReq() - STR());
      dr=Math.max(dr,0);
    }
  }
  if (belongings.weapon != null)   dr+=Math.max(belongings.weapon.defenceFactor(this),0);
  if (bark != null)   dr+=bark.level();
  return dr;
}","@Override public int drRoll(){
  int dr=0;
  Barkskin bark=buff(Barkskin.class);
  if (belongings.armor != null) {
    dr+=Random.NormalIntRange(belongings.armor.DRMin(),belongings.armor.DRMax());
    if (STR() < belongings.armor.STRReq()) {
      dr-=2 * (belongings.armor.STRReq() - STR());
      dr=Math.max(dr,0);
    }
  }
  if (belongings.weapon != null)   dr+=Random.NormalIntRange(0,belongings.weapon.defenseFactor(this));
  if (bark != null)   dr+=Random.NormalIntRange(0,bark.level());
  return dr;
}",0.7718940936863544
164143,"@Override public int drRoll(){
  return Random.NormalIntRange(0,Dungeon.depth + weapon.defenceFactor(null));
}","@Override public int drRoll(){
  return Random.NormalIntRange(0,Dungeon.depth + weapon.defenseFactor(null));
}",0.990909090909091
164144,"public void call(){
  Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal),-1);
  enemy.pos=newPosFinal;
  Dungeon.level.press(newPosFinal,enemy);
  Cripple.prolong(enemy,Cripple.class,4f);
  if (enemy == Dungeon.hero) {
    Dungeon.hero.interrupt();
    Dungeon.observe();
  }
  next();
}","public void call(){
  enemy.pos=newPosFinal;
  Dungeon.level.press(newPosFinal,enemy);
  Cripple.prolong(enemy,Cripple.class,4f);
  if (enemy == Dungeon.hero) {
    Dungeon.hero.interrupt();
    Dungeon.observe();
  }
}",0.8538011695906432
164145,"private boolean chain(int target){
  if (chainsUsed || enemy.properties().contains(Property.IMMOVABLE))   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != enemy.pos || chain.path.size() < 2 || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newPosFinal=newPos;
      yell(Messages.get(this,""String_Node_Str""));
      sprite.parent.add(new Chains(pos,enemy.pos,new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal),-1);
          enemy.pos=newPosFinal;
          Dungeon.level.press(newPosFinal,enemy);
          Cripple.prolong(enemy,Cripple.class,4f);
          if (enemy == Dungeon.hero) {
            Dungeon.hero.interrupt();
            Dungeon.observe();
          }
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}","private boolean chain(int target){
  if (chainsUsed || enemy.properties().contains(Property.IMMOVABLE))   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != enemy.pos || chain.path.size() < 2 || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newPosFinal=newPos;
      yell(Messages.get(this,""String_Node_Str""));
      sprite.parent.add(new Chains(pos,enemy.pos,new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal,new Callback(){
            public void call(){
              enemy.pos=newPosFinal;
              Dungeon.level.press(newPosFinal,enemy);
              Cripple.prolong(enemy,Cripple.class,4f);
              if (enemy == Dungeon.hero) {
                Dungeon.hero.interrupt();
                Dungeon.observe();
              }
            }
          }
),-1);
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}",0.9514972585407
164146,"public ItemSprite view(int image,Glowing glowing){
  if (this.emitter != null)   this.emitter.on=false;
  emitter=null;
  frame(film.get(image));
  if ((this.glowing=glowing) == null) {
    resetColor();
  }
  return this;
}","public ItemSprite view(int image,Glowing glowing){
  if (this.emitter != null)   this.emitter.killAndErase();
  emitter=null;
  frame(film.get(image));
  if ((this.glowing=glowing) == null) {
    resetColor();
  }
  return this;
}",0.9515418502202644
164147,"public void item(Item item){
  if (bottomRightIcon != null) {
    remove(bottomRightIcon);
    bottomRightIcon=null;
  }
  if (item == null) {
    active=false;
    topLeft.visible=topRight.visible=bottomRight.visible=false;
    icon.visible(false);
  }
 else {
    active=true;
    topLeft.visible=topRight.visible=bottomRight.visible=true;
    icon.visible(true);
    icon.view(item);
    topLeft.text(item.status());
    boolean isArmor=item instanceof Armor;
    boolean isWeapon=item instanceof Weapon;
    if (isArmor || isWeapon) {
      if (item.levelKnown || (isWeapon && !(item instanceof MeleeWeapon))) {
        int str=isArmor ? ((Armor)item).STRReq() : ((Weapon)item).STRReq();
        topRight.text(Messages.format(TXT_STRENGTH,str));
        if (str > Dungeon.hero.STR()) {
          topRight.hardlight(DEGRADED);
        }
 else {
          topRight.resetColor();
        }
      }
 else {
        topRight.text(Messages.format(TXT_TYPICAL_STR,isArmor ? ((Armor)item).STRReq(0) : ((Weapon)item).STRReq(0)));
        topRight.hardlight(WARNING);
      }
      topRight.measure();
    }
 else     if (item instanceof Key && !(item instanceof SkeletonKey)) {
      topRight.text(Messages.format(TXT_KEY_DEPTH,((Key)item).depth));
      topRight.measure();
    }
 else {
      topRight.text(null);
    }
    int level=item.visiblyUpgraded();
    if (level != 0) {
      bottomRight.text(item.levelKnown ? Messages.format(TXT_LEVEL,level) : TXT_CURSED);
      bottomRight.measure();
      bottomRight.hardlight(level > 0 ? UPGRADED : DEGRADED);
    }
 else     if (item instanceof Scroll || item instanceof Potion) {
      bottomRight.text(null);
      Integer iconInt;
      if (item instanceof Scroll) {
        iconInt=((Scroll)item).initials();
      }
 else {
        iconInt=((Potion)item).initials();
      }
      if (iconInt != null && iconVisible) {
        bottomRightIcon=new Image(Assets.CONS_ICONS);
        int left=iconInt * 7;
        int top=item instanceof Potion ? 0 : 8;
        bottomRightIcon.frame(left,top,7,8);
        add(bottomRightIcon);
      }
    }
 else {
      bottomRight.text(null);
    }
    layout();
  }
}","public void item(Item item){
  if (this.item == item) {
    updateText();
    return;
  }
  this.item=item;
  if (item == null) {
    active=false;
    icon.visible(false);
    updateText();
  }
 else {
    active=true;
    icon.visible(true);
    icon.view(item);
    updateText();
  }
}",0.0621931260229132
164148,"@Override public boolean doEquip(Hero hero){
  if (super.doEquip(hero)) {
    hero.HT+=level() * 5;
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean doEquip(Hero hero){
  if (super.doEquip(hero)) {
    hero.HT+=level() * 5;
    hero.HP=Math.min(hero.HP,hero.HT);
    return true;
  }
 else {
    return false;
  }
}",0.8862973760932945
164149,"@Override public boolean isAlive(){
  return HP > 0 || Dungeon.level.mobs.contains(this);
}","@Override public boolean isAlive(){
  return Dungeon.level.mobs.contains(this);
}",0.9418604651162792
164150,"@Override public void damage(int dmg,Object src){
  boolean bleeding=(HP * 2 <= HT);
  super.damage(dmg,src);
  if ((HP * 2 <= HT) && !bleeding) {
    BossHealthBar.bleed(true);
    GLog.w(Messages.get(this,""String_Node_Str""));
    sprite.showStatus(CharSprite.NEGATIVE,Messages.get(this,""String_Node_Str""));
    ((GooSprite)sprite).spray(true);
    yell(Messages.get(this,""String_Node_Str""));
    spend(TICK);
  }
  LockedFloor lock=Dungeon.hero.buff(LockedFloor.class);
  if (lock != null)   lock.addTime(dmg * 2);
}","@Override public void damage(int dmg,Object src){
  boolean bleeding=(HP * 2 <= HT);
  super.damage(dmg,src);
  if ((HP * 2 <= HT) && !bleeding) {
    BossHealthBar.bleed(true);
    GLog.w(Messages.get(this,""String_Node_Str""));
    sprite.showStatus(CharSprite.NEGATIVE,Messages.get(this,""String_Node_Str""));
    ((GooSprite)sprite).spray(true);
    yell(Messages.get(this,""String_Node_Str""));
  }
  LockedFloor lock=Dungeon.hero.buff(LockedFloor.class);
  if (lock != null)   lock.addTime(dmg * 2);
}",0.9833169774288518
164151,"private boolean chain(int target){
  if (chainsUsed || enemy.properties().contains(Property.IMMOVABLE))   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != enemy.pos || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newPosFinal=newPos;
      yell(Messages.get(this,""String_Node_Str""));
      sprite.parent.add(new Chains(pos,enemy.pos,new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal),-1);
          enemy.pos=newPosFinal;
          Dungeon.level.press(newPosFinal,enemy);
          Cripple.prolong(enemy,Cripple.class,4f);
          if (enemy == Dungeon.hero) {
            Dungeon.hero.interrupt();
            Dungeon.observe();
          }
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}","private boolean chain(int target){
  if (chainsUsed || enemy.properties().contains(Property.IMMOVABLE))   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != enemy.pos || chain.path.size() < 2 || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newPosFinal=newPos;
      yell(Messages.get(this,""String_Node_Str""));
      sprite.parent.add(new Chains(pos,enemy.pos,new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal),-1);
          enemy.pos=newPosFinal;
          Dungeon.level.press(newPosFinal,enemy);
          Cripple.prolong(enemy,Cripple.class,4f);
          if (enemy == Dungeon.hero) {
            Dungeon.hero.interrupt();
            Dungeon.observe();
          }
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}",0.9888542131074454
164152,"@Override protected void onClick(){
  if (rec.gameFile.length() > 0) {
    parent.add(new WndRanking(rec.gameFile));
  }
 else {
    parent.add(new WndError(Messages.get(this,""String_Node_Str"")));
  }
}","@Override protected void onClick(){
  if (rec.gameFile.length() > 0) {
    parent.add(new WndRanking(rec.gameFile));
  }
 else {
    parent.add(new WndError(Messages.get(RankingsScene.class,""String_Node_Str"")));
  }
}",0.9498806682577564
164153,"@Override public boolean act(){
  if (target.pos != pos) {
    detach();
  }
  if (count == 5) {
    if (level <= healCurr * .025 * target.HT) {
      target.HP=Math.min(target.HT,target.HP + level);
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
      detach();
    }
 else {
      target.HP=Math.min(target.HT,target.HP + (int)(healCurr * .025 * target.HT));
      level-=(healCurr * .025 * target.HT);
      if (healCurr < 6)       healCurr++;
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
      if (target.HP == target.HT && target instanceof Hero) {
        ((Hero)target).resting=false;
      }
    }
    count=1;
  }
 else {
    count++;
  }
  if (level <= 0)   detach();
  spend(STEP);
  return true;
}","@Override public boolean act(){
  if (target.pos != pos) {
    detach();
  }
  if (count == 5) {
    if (level <= healCurr * .025 * target.HT) {
      target.HP=Math.min(target.HT,target.HP + level);
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
      detach();
    }
 else {
      target.HP=Math.min(target.HT,target.HP + (int)(healCurr * .025 * target.HT));
      level-=(healCurr * .025 * target.HT);
      if (healCurr < 6)       healCurr++;
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
    }
    if (target.HP == target.HT && target instanceof Hero) {
      ((Hero)target).resting=false;
    }
    count=1;
  }
 else {
    count++;
  }
  if (level <= 0)   detach();
  spend(STEP);
  return true;
}",0.952127659574468
164154,"@Override public void call(){
  if (finalTarget == Dungeon.hero) {
    if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
      finalTarget.damage((finalTarget.HP - 1),trap);
    }
 else {
      finalTarget.damage(finalTarget.HP,trap);
    }
    Sample.INSTANCE.play(Assets.SND_CURSED);
    if (!finalTarget.isAlive()) {
      Dungeon.fail(GrimTrap.class);
      GLog.n(Messages.get(GrimTrap.class,""String_Node_Str""));
    }
  }
 else {
    finalTarget.damage(finalTarget.HP,this);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
  finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
  if (!finalTarget.isAlive())   finalTarget.next();
}","@Override public void call(){
  if (!finalTarget.isAlive())   return;
  if (finalTarget == Dungeon.hero) {
    if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
      finalTarget.damage((finalTarget.HP - 1),trap);
    }
 else {
      finalTarget.damage(finalTarget.HP,trap);
    }
    Sample.INSTANCE.play(Assets.SND_CURSED);
    if (!finalTarget.isAlive()) {
      Dungeon.fail(GrimTrap.class);
      GLog.n(Messages.get(GrimTrap.class,""String_Node_Str""));
    }
  }
 else {
    finalTarget.damage(finalTarget.HP,this);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
  finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
  if (!finalTarget.isAlive())   finalTarget.next();
}",0.9701492537313432
164155,"@Override public void activate(){
  Char target=Actor.findChar(pos);
  if (target == null) {
    for (    Char ch : Actor.chars()) {
      Ballistica bolt=new Ballistica(pos,ch.pos,Ballistica.PROJECTILE);
      if (bolt.collisionPos == ch.pos && (target == null || Level.distance(pos,ch.pos) < Level.distance(pos,target.pos))) {
        target=ch;
      }
    }
  }
  if (target != null) {
    final Char finalTarget=target;
    final GrimTrap trap=this;
    MagicMissile.shadow(target.sprite.parent,pos,target.pos,new Callback(){
      @Override public void call(){
        if (finalTarget == Dungeon.hero) {
          if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
            finalTarget.damage((finalTarget.HP - 1),trap);
          }
 else {
            finalTarget.damage(finalTarget.HP,trap);
          }
          Sample.INSTANCE.play(Assets.SND_CURSED);
          if (!finalTarget.isAlive()) {
            Dungeon.fail(GrimTrap.class);
            GLog.n(Messages.get(GrimTrap.class,""String_Node_Str""));
          }
        }
 else {
          finalTarget.damage(finalTarget.HP,this);
          Sample.INSTANCE.play(Assets.SND_BURNING);
        }
        finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
        if (!finalTarget.isAlive())         finalTarget.next();
      }
    }
);
  }
 else {
    CellEmitter.get(pos).burst(ShadowParticle.UP,10);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
}","@Override public void activate(){
  Char target=Actor.findChar(pos);
  if (target == null) {
    for (    Char ch : Actor.chars()) {
      Ballistica bolt=new Ballistica(pos,ch.pos,Ballistica.PROJECTILE);
      if (bolt.collisionPos == ch.pos && (target == null || Level.distance(pos,ch.pos) < Level.distance(pos,target.pos))) {
        target=ch;
      }
    }
  }
  if (target != null) {
    final Char finalTarget=target;
    final GrimTrap trap=this;
    MagicMissile.shadow(target.sprite.parent,pos,target.pos,new Callback(){
      @Override public void call(){
        if (!finalTarget.isAlive())         return;
        if (finalTarget == Dungeon.hero) {
          if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
            finalTarget.damage((finalTarget.HP - 1),trap);
          }
 else {
            finalTarget.damage(finalTarget.HP,trap);
          }
          Sample.INSTANCE.play(Assets.SND_CURSED);
          if (!finalTarget.isAlive()) {
            Dungeon.fail(GrimTrap.class);
            GLog.n(Messages.get(GrimTrap.class,""String_Node_Str""));
          }
        }
 else {
          finalTarget.damage(finalTarget.HP,this);
          Sample.INSTANCE.play(Assets.SND_BURNING);
        }
        finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
        if (!finalTarget.isAlive())         finalTarget.next();
      }
    }
);
  }
 else {
    CellEmitter.get(pos).burst(ShadowParticle.UP,10);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
}",0.9821182943603852
164156,"@Override public int STRReq(int lvl){
  lvl=Math.max(0,lvl);
  return (7 + armorTier * 2) - (int)(Math.sqrt(8 * lvl + 1) - 1) / 2;
}","@Override public int STRReq(int lvl){
  lvl=Math.max(0,lvl);
  int effectiveTier=armorTier;
  if (glyph != null)   effectiveTier+=glyph.tierSTRAdjust();
  effectiveTier=Math.max(0,effectiveTier);
  return (8 + effectiveTier * 2) - (int)(Math.sqrt(8 * lvl + 1) - 1) / 2;
}",0.5955334987593052
164157,"@Override public int DR(){
  return armorTier * (2 + level() + (glyph == null ? 0 : 1));
}","@Override public int DR(){
  int effectiveTier=armorTier;
  if (glyph != null)   effectiveTier+=glyph.tierDRAdjust();
  effectiveTier=Math.max(0,effectiveTier);
  return effectiveTier * (2 + level());
}",0.3561643835616438
164158,"protected int throwPos(Hero user,int dst){
  return new Ballistica(user.pos,dst,Ballistica.PROJECTILE).collisionPos;
}","public int throwPos(Hero user,int dst){
  return new Ballistica(user.pos,dst,Ballistica.PROJECTILE).collisionPos;
}",0.9527896995708156
164159,"@Override protected int throwPos(Hero user,int dst){
  int defaultPos=super.throwPos(user,dst);
  if (defaultPos == dst)   return dst;
 else   if (hasEnchant(Projecting.class)) {
    Ballistica ProjectingTrajectory=new Ballistica(user.pos,dst,Ballistica.STOP_TARGET);
    if (ProjectingTrajectory.dist <= 4)     return ProjectingTrajectory.collisionPos;
 else     return super.throwPos(user,dst);
  }
 else {
    return super.throwPos(user,dst);
  }
}","@Override public int throwPos(Hero user,int dst){
  if (hasEnchant(Projecting.class) && !Level.solid[dst] && Level.distance(user.pos,dst) <= 4) {
    return dst;
  }
 else {
    return super.throwPos(user,dst);
  }
}",0.2458770614692653
164160,"public static int autoAim(Char target){
  if (new Ballistica(Dungeon.hero.pos,target.pos,Ballistica.PROJECTILE).collisionPos == target.pos) {
    return target.pos;
  }
  for (  int i : Level.NEIGHBOURS9DIST2) {
    if (new Ballistica(Dungeon.hero.pos,target.pos + i,Ballistica.PROJECTILE).collisionPos == target.pos) {
      return target.pos + i;
    }
  }
  return -1;
}","public static int autoAim(Char target,Item item){
  if (item.throwPos(Dungeon.hero,target.pos) == target.pos) {
    return target.pos;
  }
  for (  int i : Level.NEIGHBOURS9DIST2) {
    if (item.throwPos(Dungeon.hero,target.pos) == target.pos) {
      return target.pos + i;
    }
  }
  return -1;
}",0.7827380952380952
164161,"@Override protected void createChildren(){
  super.createChildren();
  slot=new ItemSlot(){
    @Override protected void onClick(){
      if (targeting) {
        int cell=autoAim(lastTarget);
        if (cell != -1) {
          GameScene.handleCell(cell);
        }
 else {
          GameScene.handleCell(lastTarget.pos);
        }
      }
 else {
        Item item=select(slotNum);
        if (item.usesTargeting)         useTargeting();
        item.execute(Dungeon.hero);
      }
    }
    @Override protected boolean onLongClick(){
      return QuickSlotButton.this.onLongClick();
    }
    @Override protected void onTouchDown(){
      icon.lightness(0.7f);
    }
    @Override protected void onTouchUp(){
      icon.resetColor();
    }
  }
;
  slot.showParams(true,false,true);
  add(slot);
  crossB=Icons.TARGET.get();
  crossB.visible=false;
  add(crossB);
  crossM=new Image();
  crossM.copy(crossB);
}","@Override protected void createChildren(){
  super.createChildren();
  slot=new ItemSlot(){
    @Override protected void onClick(){
      if (targeting) {
        int cell=autoAim(lastTarget,select(slotNum));
        if (cell != -1) {
          GameScene.handleCell(cell);
        }
 else {
          GameScene.handleCell(lastTarget.pos);
        }
      }
 else {
        Item item=select(slotNum);
        if (item.usesTargeting)         useTargeting();
        item.execute(Dungeon.hero);
      }
    }
    @Override protected boolean onLongClick(){
      return QuickSlotButton.this.onLongClick();
    }
    @Override protected void onTouchDown(){
      icon.lightness(0.7f);
    }
    @Override protected void onTouchUp(){
      icon.resetColor();
    }
  }
;
  slot.showParams(true,false,true);
  add(slot);
  crossB=Icons.TARGET.get();
  crossB.visible=false;
  add(crossB);
  crossM=new Image();
  crossM.copy(crossB);
}",0.991304347826087
164162,"@Override public boolean doUnequip(Hero hero,boolean collect,boolean single){
  if (super.doUnequip(hero,collect,single)) {
    hero.HT-=level() * 5;
    hero.HP=Math.min(hero.HP,hero.HT);
    return false;
  }
 else {
    return false;
  }
}","@Override public boolean doUnequip(Hero hero,boolean collect,boolean single){
  if (super.doUnequip(hero,collect,single)) {
    hero.HT-=level() * 5;
    hero.HP=Math.min(hero.HP,hero.HT);
    return true;
  }
 else {
    return false;
  }
}",0.8778467908902692
164163,"private static Item prize(Level level){
  Armor prize=Generator.randomArmor((Dungeon.depth / 5) + 1);
  if (!prize.cursed) {
    prize.upgrade();
    if (prize.glyph != null) {
      prize.cursed=prize.cursedKnown=true;
      prize.inscribe(Armor.Glyph.randomCurse());
    }
  }
  return prize;
}","private static Item prize(Level level){
  Armor prize=Generator.randomArmor((Dungeon.depth / 5) + 1);
  if (!prize.cursed) {
    prize.upgrade();
    if (prize.glyph == null) {
      prize.cursed=prize.cursedKnown=true;
      prize.inscribe(Armor.Glyph.randomCurse());
    }
  }
  return prize;
}",0.9966216216216216
164164,"@Override public int attackProc(Char enemy,int damage){
  KindOfWeapon wep=rangedWeapon != null ? rangedWeapon : belongings.weapon;
  if (wep != null)   wep.proc(this,enemy,damage);
switch (subClass) {
case SNIPER:
    if (rangedWeapon != null) {
      Buff.prolong(this,SnipersMark.class,attackDelay() * 1.1f).object=enemy.id();
    }
  break;
default :
}
return damage;
}","@Override public int attackProc(Char enemy,int damage){
  KindOfWeapon wep=rangedWeapon != null ? rangedWeapon : belongings.weapon;
  if (wep != null)   damage=wep.proc(this,enemy,damage);
switch (subClass) {
case SNIPER:
    if (rangedWeapon != null) {
      Buff.prolong(this,SnipersMark.class,attackDelay() * 1.1f).object=enemy.id();
    }
  break;
default :
}
return damage;
}",0.9907038512616202
164165,"@Override public int attackProc(Char enemy,int damage){
  weapon.proc(this,enemy,damage);
  return damage;
}","@Override public int attackProc(Char enemy,int damage){
  return weapon.proc(this,enemy,damage);
}",0.883495145631068
164166,"@Override public int proc(Weapon weapon,Char attacker,Char defender,int damage){
  int level=Math.max(0,weapon.level());
  if (Random.Int(100) < (50 + level)) {
    return weapon.max() - defender.dr() / 2;
  }
 else {
    return weapon.min() - defender.dr() / 2;
  }
}","@Override public int proc(Weapon weapon,Char attacker,Char defender,int damage){
  int level=Math.max(0,weapon.level());
  if (Random.Int(100) < (50 + level)) {
    int exStr=0;
    if (attacker == Dungeon.hero)     exStr=Math.max(0,Dungeon.hero.STR() - weapon.STRReq());
    damage=weapon.max() + exStr - Random.IntRange(0,defender.dr());
  }
 else {
    damage=weapon.min() - Random.IntRange(0,defender.dr());
  }
  return Math.max(0,damage);
}",0.6050420168067226
164167,"public void charge(){
  if (charge < target.HT) {
    charge+=(Math.round((target.HT - charge) * (.01 + level() * 0.01)));
    updateQuickslot();
  }
}","public void charge(){
  if (level() > 0 && charge < target.HT) {
    charge+=(Math.round((target.HT - charge) * (.01 + level() * 0.01)));
    updateQuickslot();
  }
}",0.9526813880126184
164168,"public void affixSeal(BrokenSeal seal){
  this.seal=seal;
  if (seal.level() > 0) {
    upgrade(glyph != null);
  }
  if (isEquipped(Dungeon.hero)) {
    Buff.affect(Dungeon.hero,BrokenSeal.WarriorShield.class).setArmor(this);
  }
}","public void affixSeal(BrokenSeal seal){
  this.seal=seal;
  if (seal.level() > 0) {
    level(level() + 1);
  }
  if (isEquipped(Dungeon.hero)) {
    Buff.affect(Dungeon.hero,BrokenSeal.WarriorShield.class).setArmor(this);
  }
}",0.917391304347826
164169,"@Override public void damage(int dmg,Object src){
  LockedFloor lock=Dungeon.hero.buff(LockedFloor.class);
  if (lock != null) {
    int multiple=HP > HT / 2 ? 1 : 4;
    lock.addTime(dmg * multiple);
  }
  if (dmg >= HP) {
    if (state == SLEEPING) {
      state=WANDERING;
    }
    ((PrisonBossLevel)Dungeon.level).progress();
    return;
  }
  int beforeHitHP=HP;
  super.damage(dmg,src);
  int hpBracket=HP > HT / 2 ? 12 : 20;
  if (beforeHitHP > HT / 2 && HP <= HT / 2) {
    HP=(HT / 2) - 1;
    yell(Messages.get(this,""String_Node_Str""));
    ((PrisonBossLevel)Dungeon.level).progress();
    BossHealthBar.bleed(true);
  }
 else   if (beforeHitHP / hpBracket != HP / hpBracket) {
    jump();
  }
}","@Override public void damage(int dmg,Object src){
  int beforeHitHP=HP;
  super.damage(dmg,src);
  dmg=beforeHitHP - HP;
  LockedFloor lock=Dungeon.hero.buff(LockedFloor.class);
  if (lock != null) {
    int multiple=beforeHitHP > HT / 2 ? 1 : 4;
    lock.addTime(dmg * multiple);
  }
  if (HP == 0 && beforeHitHP <= HT / 2) {
    ((PrisonBossLevel)Dungeon.level).progress();
    return;
  }
  int hpBracket=beforeHitHP > HT / 2 ? 12 : 20;
  if (beforeHitHP > HT / 2 && HP <= HT / 2) {
    HP=(HT / 2) - 1;
    yell(Messages.get(this,""String_Node_Str""));
    ((PrisonBossLevel)Dungeon.level).progress();
    BossHealthBar.bleed(true);
  }
 else   if (beforeHitHP / hpBracket != HP / hpBracket) {
    jump();
  }
}",0.7484143763213531
164170,"@Override public void press(int cell,Char ch){
  super.press(cell,ch);
  if (ch == Dungeon.hero) {
    if (state == State.START && ((Room)new Room().set(2,25,8,32)).inside(cell)) {
      progress();
    }
 else     if (state == State.MAZE && ((Room)new Room().set(4,1,7,4)).inside(cell)) {
      progress();
    }
  }
}","@Override public void press(int cell,Char ch){
  super.press(cell,ch);
  if (ch == Dungeon.hero) {
    if (state == State.START && ((Room)new Room().set(2,25,8,32)).inside(cell)) {
      progress();
    }
 else     if (state == State.MAZE && ((Room)new Room().set(4,0,7,4)).inside(cell)) {
      progress();
    }
  }
}",0.9968652037617556
164171,"@Override public boolean act(){
  if (target.isAlive()) {
    int maxDmg=3 + Math.round(4 * target.HP / (float)target.HT);
    target.damage(Random.Int(1,maxDmg),this);
    Buff.detach(target,Chill.class);
    if (target instanceof Hero) {
      Hero hero=(Hero)target;
      Item item=hero.belongings.randomUnequipped();
      if (item instanceof Scroll) {
        item=item.detach(hero.belongings.backpack);
        GLog.w(Messages.get(this,""String_Node_Str"",item.toString()));
        Heap.burnFX(hero.pos);
      }
 else       if (item instanceof MysteryMeat) {
        item=item.detach(hero.belongings.backpack);
        ChargrilledMeat steak=new ChargrilledMeat();
        if (!steak.collect(hero.belongings.backpack)) {
          Dungeon.level.drop(steak,hero.pos).sprite.drop();
        }
        GLog.w(Messages.get(this,""String_Node_Str"",item.toString()));
        Heap.burnFX(hero.pos);
      }
    }
 else     if (target instanceof Thief && ((Thief)target).item instanceof Scroll) {
      ((Thief)target).item=null;
      target.sprite.emitter().burst(ElmoParticle.FACTORY,6);
    }
  }
 else {
    detach();
  }
  if (Level.flamable[target.pos]) {
    GameScene.add(Blob.seed(target.pos,4,Fire.class));
  }
  spend(TICK);
  left-=TICK;
  if (left <= 0 || (Level.water[target.pos] && !target.flying)) {
    detach();
  }
  return true;
}","@Override public boolean act(){
  if (target.isAlive()) {
    int maxDmg=3 + Math.round(4 * target.HP / (float)target.HT);
    target.damage(Random.Int(1,maxDmg),this);
    Buff.detach(target,Chill.class);
    if (target instanceof Hero) {
      Hero hero=(Hero)target;
      Item item=hero.belongings.randomUnequipped();
      if (item instanceof Scroll) {
        item=item.detach(hero.belongings.backpack);
        GLog.w(Messages.get(this,""String_Node_Str"",Messages.capitalize(item.toString())));
        Heap.burnFX(hero.pos);
      }
 else       if (item instanceof MysteryMeat) {
        item=item.detach(hero.belongings.backpack);
        ChargrilledMeat steak=new ChargrilledMeat();
        if (!steak.collect(hero.belongings.backpack)) {
          Dungeon.level.drop(steak,hero.pos).sprite.drop();
        }
        GLog.w(Messages.get(this,""String_Node_Str"",item.toString()));
        Heap.burnFX(hero.pos);
      }
    }
 else     if (target instanceof Thief && ((Thief)target).item instanceof Scroll) {
      ((Thief)target).item=null;
      target.sprite.emitter().burst(ElmoParticle.FACTORY,6);
    }
  }
 else {
    detach();
  }
  if (Level.flamable[target.pos]) {
    GameScene.add(Blob.seed(target.pos,4,Fire.class));
  }
  spend(TICK);
  left-=TICK;
  if (left <= 0 || (Level.water[target.pos] && !target.flying)) {
    detach();
  }
  return true;
}",0.9922765722692166
164172,"public void damage(int dmg,Object src){
  if (HP <= 0 || dmg < 0) {
    return;
  }
  if (this.buff(Frost.class) != null) {
    Buff.detach(this,Frost.class);
  }
  if (this.buff(MagicalSleep.class) != null) {
    Buff.detach(this,MagicalSleep.class);
  }
  Class<?> srcClass=src.getClass();
  if (immunities().contains(srcClass)) {
    dmg=0;
  }
 else   if (resistances().contains(srcClass)) {
    dmg=Random.IntRange(0,dmg);
  }
  if (buff(Paralysis.class) != null) {
    if (Random.Int(dmg) >= Random.Int(HP)) {
      Buff.detach(this,Paralysis.class);
      if (Dungeon.visible[pos]) {
        GLog.i(Messages.get(Char.class,""String_Node_Str"",name));
      }
    }
  }
  if (src instanceof Hunger || SHLD == 0) {
    HP-=dmg;
  }
 else   if (SHLD >= dmg) {
    SHLD-=dmg;
  }
 else   if (SHLD > 0) {
    HP-=(dmg - SHLD);
    SHLD=0;
  }
  if (dmg > 0 || src instanceof Char) {
    sprite.showStatus(HP > HT / 2 ? CharSprite.WARNING : CharSprite.NEGATIVE,Integer.toString(dmg));
  }
  if (HP < 0)   HP=0;
  if (!isAlive()) {
    die(src);
  }
}","public void damage(int dmg,Object src){
  if (!isAlive() || dmg < 0) {
    return;
  }
  if (this.buff(Frost.class) != null) {
    Buff.detach(this,Frost.class);
  }
  if (this.buff(MagicalSleep.class) != null) {
    Buff.detach(this,MagicalSleep.class);
  }
  Class<?> srcClass=src.getClass();
  if (immunities().contains(srcClass)) {
    dmg=0;
  }
 else   if (resistances().contains(srcClass)) {
    dmg=Random.IntRange(0,dmg);
  }
  if (buff(Paralysis.class) != null) {
    if (Random.Int(dmg) >= Random.Int(HP)) {
      Buff.detach(this,Paralysis.class);
      if (Dungeon.visible[pos]) {
        GLog.i(Messages.get(Char.class,""String_Node_Str"",name));
      }
    }
  }
  if (src instanceof Hunger || SHLD == 0) {
    HP-=dmg;
  }
 else   if (SHLD >= dmg) {
    SHLD-=dmg;
  }
 else   if (SHLD > 0) {
    HP-=(dmg - SHLD);
    SHLD=0;
  }
  if (dmg > 0 || src instanceof Char) {
    sprite.showStatus(HP > HT / 2 ? CharSprite.WARNING : CharSprite.NEGATIVE,Integer.toString(dmg));
  }
  if (HP < 0)   HP=0;
  if (!isAlive()) {
    die(src);
  }
}",0.9919086149452642
164173,"public static Item get(){
  if (depth == -1) {
    try {
      InputStream input=Game.instance.openFileInput(BONES_FILE);
      Bundle bundle=Bundle.read(input);
      input.close();
      depth=bundle.getInt(LEVEL);
      item=(Item)bundle.get(ITEM);
      return get();
    }
 catch (    Exception e) {
      return null;
    }
  }
 else {
    if (depth == Dungeon.depth && Dungeon.challenges == 0) {
      Game.instance.deleteFile(BONES_FILE);
      depth=0;
      if (item instanceof Artifact) {
        if (Generator.removeArtifact((Artifact)item)) {
          try {
            Artifact artifact=(Artifact)item.getClass().newInstance();
            artifact.cursed=true;
            artifact.cursedKnown=true;
            artifact.transferUpgrade(Math.min(item.visiblyUpgraded(),1 + ((Dungeon.depth * 3) / 10)));
            return item;
          }
 catch (          Exception e) {
            return new Gold(item.price());
          }
        }
 else {
          return new Gold(item.price());
        }
      }
      if (item.isUpgradable()) {
        item.cursed=true;
        item.cursedKnown=true;
        if (item.isUpgradable()) {
          int lvl=1 + ((Dungeon.depth * 3) / 10);
          if (lvl < item.level()) {
            item.degrade(item.level() - lvl);
          }
          item.levelKnown=false;
        }
      }
      item.reset();
      return item;
    }
 else {
      return null;
    }
  }
}","public static Item get(){
  if (depth == -1) {
    try {
      InputStream input=Game.instance.openFileInput(BONES_FILE);
      Bundle bundle=Bundle.read(input);
      input.close();
      depth=bundle.getInt(LEVEL);
      item=(Item)bundle.get(ITEM);
      return get();
    }
 catch (    Exception e) {
      return null;
    }
  }
 else {
    if (depth == Dungeon.depth && Dungeon.challenges == 0) {
      Game.instance.deleteFile(BONES_FILE);
      depth=0;
      if (item instanceof Artifact) {
        if (Generator.removeArtifact((Artifact)item)) {
          try {
            Artifact artifact=(Artifact)item.getClass().newInstance();
            artifact.cursed=true;
            artifact.cursedKnown=true;
            artifact.transferUpgrade(Math.min(item.visiblyUpgraded(),1 + ((Dungeon.depth * 3) / 10)));
            return item;
          }
 catch (          Exception e) {
            return new Gold(item.price());
          }
        }
 else {
          return new Gold(item.price());
        }
      }
      if (item.isUpgradable() || item instanceof Artifact) {
        item.cursed=true;
        item.cursedKnown=true;
        if (item.isUpgradable()) {
          int lvl=1 + ((Dungeon.depth * 3) / 10);
          if (lvl < item.level()) {
            item.degrade(item.level() - lvl);
          }
          item.levelKnown=false;
        }
      }
      item.reset();
      return item;
    }
 else {
      return null;
    }
  }
}",0.9902642559109874
164174,"@Override public void execute(Hero hero,String action){
  super.execute(hero,action);
  if (action.equals(AC_SCRY)) {
    if (!isEquipped(hero))     GLog.i(Messages.get(Artifact.class,""String_Node_Str""));
 else     if (charge != chargeCap)     GLog.i(Messages.get(this,""String_Node_Str""));
 else {
      hero.sprite.operate(hero.pos);
      hero.busy();
      Sample.INSTANCE.play(Assets.SND_BEACON);
      charge=0;
      for (int i=0; i < Level.LENGTH; i++) {
        int terr=Dungeon.level.map[i];
        if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
          GameScene.updateMap(i);
          if (Dungeon.visible[i]) {
            GameScene.discoverTile(i,terr);
          }
        }
      }
      GLog.p(Messages.get(this,""String_Node_Str""));
      Buff.affect(hero,Awareness.class,Awareness.DURATION);
      Dungeon.observe();
    }
  }
}","@Override public void execute(Hero hero,String action){
  super.execute(hero,action);
  if (action.equals(AC_SCRY)) {
    if (!isEquipped(hero))     GLog.i(Messages.get(Artifact.class,""String_Node_Str""));
 else     if (charge != chargeCap)     GLog.i(Messages.get(this,""String_Node_Str""));
 else {
      hero.sprite.operate(hero.pos);
      hero.busy();
      Sample.INSTANCE.play(Assets.SND_BEACON);
      charge=0;
      for (int i=0; i < Level.LENGTH; i++) {
        int terr=Dungeon.level.map[i];
        if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
          GameScene.updateMap(i);
          if (Dungeon.visible[i]) {
            GameScene.discoverTile(i,terr);
          }
        }
      }
      GLog.p(Messages.get(this,""String_Node_Str""));
      updateQuickslot();
      Buff.affect(hero,Awareness.class,Awareness.DURATION);
      Dungeon.observe();
    }
  }
}",0.9855407750144592
164175,"@Override public boolean doPickUp(Hero hero){
  if (super.doPickUp(hero)) {
    if (!Statistics.amuletObtained) {
      Statistics.amuletObtained=true;
      Badges.validateVictory();
      hero.spend(-TIME_TO_PICK_UP);
      showAmuletScene(true);
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean doPickUp(Hero hero){
  if (super.doPickUp(hero)) {
    if (!Statistics.amuletObtained) {
      Statistics.amuletObtained=true;
      Badges.validateVictory();
      hero.spend(-TIME_TO_PICK_UP);
      Actor.addDelayed(new Actor(){
        @Override protected boolean act(){
          Actor.remove(this);
          showAmuletScene(true);
          return false;
        }
      }
,-5);
    }
    return true;
  }
 else {
    return false;
  }
}",0.704516129032258
164176,"public void affixSeal(BrokenSeal sigil){
  this.seal=true;
  if (sigil.level() > 0) {
    upgrade(glyph != null);
  }
  if (isEquipped(Dungeon.hero)) {
    Buff.affect(Dungeon.hero,BrokenSeal.WarriorShield.class).setArmor(this);
  }
}","public void affixSeal(BrokenSeal seal){
  this.seal=true;
  if (seal.level() > 0) {
    upgrade(glyph != null);
  }
  if (isEquipped(Dungeon.hero)) {
    Buff.affect(Dungeon.hero,BrokenSeal.WarriorShield.class).setArmor(this);
  }
}",0.9785407725321889
164177,"public static ClassArmor upgrade(Hero owner,Armor armor){
  ClassArmor classArmor=null;
switch (owner.heroClass) {
case WARRIOR:
    classArmor=new WarriorArmor();
  break;
case ROGUE:
classArmor=new RogueArmor();
break;
case MAGE:
classArmor=new MageArmor();
break;
case HUNTRESS:
classArmor=new HuntressArmor();
break;
}
classArmor.STR=armor.STR;
classArmor.DR=armor.DR();
classArmor.inscribe(armor.glyph);
return classArmor;
}","public static ClassArmor upgrade(Hero owner,Armor armor){
  ClassArmor classArmor=null;
switch (owner.heroClass) {
case WARRIOR:
    classArmor=new WarriorArmor();
  classArmor.seal=armor.seal;
if (armor.seal && armor.isEquipped(owner)) {
  Buff.affect(Dungeon.hero,BrokenSeal.WarriorShield.class).setArmor(classArmor);
}
break;
case ROGUE:
classArmor=new RogueArmor();
break;
case MAGE:
classArmor=new MageArmor();
break;
case HUNTRESS:
classArmor=new HuntressArmor();
break;
}
classArmor.STR=armor.STR;
classArmor.DR=armor.DR();
classArmor.inscribe(armor.glyph);
return classArmor;
}",0.8461538461538461
164178,"public static Item get(){
  if (depth == -1) {
    try {
      InputStream input=Game.instance.openFileInput(BONES_FILE);
      Bundle bundle=Bundle.read(input);
      input.close();
      depth=bundle.getInt(LEVEL);
      item=(Item)bundle.get(ITEM);
      return get();
    }
 catch (    Exception e) {
      return null;
    }
  }
 else {
    if (depth == Dungeon.depth && Dungeon.challenges == 0) {
      Game.instance.deleteFile(BONES_FILE);
      depth=0;
      if (item instanceof Artifact) {
        if (Generator.removeArtifact((Artifact)item)) {
          try {
            Artifact artifact=(Artifact)item.getClass().newInstance();
            artifact.cursed=true;
            artifact.cursedKnown=true;
            artifact.transferUpgrade(Math.min(item.visiblyUpgraded(),1 + ((Dungeon.depth * 3) / 10)));
            return item;
          }
 catch (          Exception e) {
            return new Gold(item.price());
          }
        }
 else {
          return new Gold(item.price());
        }
      }
      if (item.isUpgradable() || item instanceof Artifact) {
        item.cursed=true;
        item.cursedKnown=true;
        if (item.isUpgradable()) {
          int lvl=1 + ((Dungeon.depth * 3) / 10);
          if (lvl < item.level()) {
            item.degrade(item.level() - lvl);
          }
          item.levelKnown=false;
        }
      }
      item.reset();
      return item;
    }
 else {
      return null;
    }
  }
}","public static Item get(){
  if (depth == -1) {
    try {
      InputStream input=Game.instance.openFileInput(BONES_FILE);
      Bundle bundle=Bundle.read(input);
      input.close();
      depth=bundle.getInt(LEVEL);
      item=(Item)bundle.get(ITEM);
      return get();
    }
 catch (    Exception e) {
      return null;
    }
  }
 else {
    if (depth == Dungeon.depth && Dungeon.challenges == 0) {
      Game.instance.deleteFile(BONES_FILE);
      depth=0;
      if (item instanceof Artifact) {
        if (Generator.removeArtifact((Artifact)item)) {
          try {
            Artifact artifact=(Artifact)item.getClass().newInstance();
            artifact.cursed=true;
            artifact.cursedKnown=true;
            artifact.transferUpgrade(Math.min(item.visiblyUpgraded(),1 + ((Dungeon.depth * 3) / 10)));
            return artifact;
          }
 catch (          Exception e) {
            return new Gold(item.price());
          }
        }
 else {
          return new Gold(item.price());
        }
      }
      if (item.isUpgradable()) {
        item.cursed=true;
        item.cursedKnown=true;
        if (item.isUpgradable()) {
          int lvl=1 + ((Dungeon.depth * 3) / 10);
          if (lvl < item.level()) {
            item.degrade(item.level() - lvl);
          }
          item.levelKnown=false;
        }
      }
      item.reset();
      return item;
    }
 else {
      return null;
    }
  }
}",0.9861111111111112
164179,"public boolean berserking(){
  if (target.HP == 0 && state == State.NORMAL) {
    WarriorShield sigil=target.buff(WarriorShield.class);
    if (sigil != null) {
      state=State.BERSERK;
      BuffIndicator.refreshHero();
      target.SHLD=sigil.maxShield() * 5;
      SpellSprite.show(target,SpellSprite.BERSERK);
      Sample.INSTANCE.play(Assets.SND_CHALLENGE);
      GameScene.flash(0xFF0000);
    }
  }
  return state == State.BERSERK;
}","public boolean berserking(){
  if (target.HP == 0 && state == State.NORMAL) {
    WarriorShield shield=target.buff(WarriorShield.class);
    if (shield != null) {
      state=State.BERSERK;
      BuffIndicator.refreshHero();
      target.SHLD=shield.maxShield() * 5;
      SpellSprite.show(target,SpellSprite.BERSERK);
      Sample.INSTANCE.play(Assets.SND_CHALLENGE);
      GameScene.flash(0xFF0000);
    }
  }
  return state == State.BERSERK;
}",0.96962879640045
164180,"@Override public boolean doUnequip(Hero hero,boolean collect,boolean single){
  if (super.doUnequip(hero,collect,single)) {
    hero.belongings.armor=null;
    ((HeroSprite)hero.sprite).updateArmor();
    BrokenSeal.WarriorShield sigilBuff=hero.buff(BrokenSeal.WarriorShield.class);
    if (sigilBuff != null)     sigilBuff.setArmor(null);
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean doUnequip(Hero hero,boolean collect,boolean single){
  if (super.doUnequip(hero,collect,single)) {
    hero.belongings.armor=null;
    ((HeroSprite)hero.sprite).updateArmor();
    BrokenSeal.WarriorShield sealBuff=hero.buff(BrokenSeal.WarriorShield.class);
    if (sealBuff != null)     sealBuff.setArmor(null);
    return true;
  }
 else {
    return false;
  }
}",0.9807938540332908
164181,"@Override public void execute(Hero hero,String action){
  super.execute(hero,action);
  if (action.equals(AC_DETACH) && seal) {
    seal=false;
    BrokenSeal.WarriorShield sigilBuff=hero.buff(BrokenSeal.WarriorShield.class);
    if (sigilBuff != null)     sigilBuff.setArmor(null);
    BrokenSeal sigil=new BrokenSeal();
    if (level() > 0) {
      sigil.upgrade();
      degrade();
    }
    GLog.i(Messages.get(Armor.class,""String_Node_Str""));
    hero.sprite.operate(hero.pos);
    if (!sigil.collect()) {
      Dungeon.level.drop(sigil,hero.pos);
    }
  }
}","@Override public void execute(Hero hero,String action){
  super.execute(hero,action);
  if (action.equals(AC_DETACH) && seal) {
    seal=false;
    BrokenSeal.WarriorShield sealBuff=hero.buff(BrokenSeal.WarriorShield.class);
    if (sealBuff != null)     sealBuff.setArmor(null);
    BrokenSeal seal=new BrokenSeal();
    if (level() > 0) {
      seal.upgrade();
      degrade();
    }
    GLog.i(Messages.get(Armor.class,""String_Node_Str""));
    hero.sprite.operate(hero.pos);
    if (!seal.collect()) {
      Dungeon.level.drop(seal,hero.pos);
    }
  }
}",0.9687778768956288
164182,"public static Emitter.Factory factory(final int type,final boolean lightMode,final int tint){
  Emitter.Factory factory=factories.get(type);
  if (factory == null) {
    factory=new Emitter.Factory(){
      @Override public void emit(      Emitter emitter,      int index,      float x,      float y){
        Speck p=(Speck)emitter.recycle(Speck.class);
        p.reset(index,x,y,type);
        if (tint != 0)         p.tint(tint);
      }
      @Override public boolean lightMode(){
        return lightMode;
      }
    }
;
    factories.put(type,factory);
  }
  return factory;
}","public static Emitter.Factory factory(final int type,final boolean lightMode){
  Emitter.Factory factory=factories.get(type);
  if (factory == null) {
    factory=new Emitter.Factory(){
      @Override public void emit(      Emitter emitter,      int index,      float x,      float y){
        Speck p=(Speck)emitter.recycle(Speck.class);
        p.reset(index,x,y,type);
      }
      @Override public boolean lightMode(){
        return lightMode;
      }
    }
;
    factories.put(type,factory);
  }
  return factory;
}",0.945750452079566
164183,"public void reset(int index,float x,float y,int type){
  revive();
  this.type=type;
switch (type) {
case DISCOVER:
    frame(film.get(LIGHT));
  break;
case EVOKE:
case MASTERY:
case KIT:
case FORGE:
frame(film.get(STAR));
break;
case RATTLE:
frame(film.get(BONE));
break;
case JET:
case TOXIC:
case VENOM:
case PARALYSIS:
case STENCH:
case CONFUSION:
case DUST:
frame(film.get(STEAM));
break;
default :
frame(film.get(type));
}
this.x=x - origin.x;
this.y=y - origin.y;
resetColor();
scale.set(1);
speed.set(0);
acc.set(0);
angle=0;
angularSpeed=0;
switch (type) {
case HEALING:
speed.set(0,-20);
lifespan=1f;
break;
case STAR:
speed.polar(Random.Float(2 * 3.1415926f),Random.Float(128));
acc.set(0,128);
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
lifespan=1f;
break;
case FORGE:
speed.polar(Random.Float(-3.1415926f),Random.Float(64));
acc.set(0,128);
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
lifespan=0.51f;
break;
case EVOKE:
speed.polar(Random.Float(-3.1415926f),50);
acc.set(0,50);
angle=Random.Float(360);
angularSpeed=Random.Float(-180,+180);
lifespan=1f;
break;
case KIT:
speed.polar(index * 3.1415926f / 5,50);
acc.set(-speed.x,-speed.y);
angle=index * 36;
angularSpeed=360;
lifespan=1f;
break;
case MASTERY:
speed.set(Random.Int(2) == 0 ? Random.Float(-128,-64) : Random.Float(+64,+128),0);
angularSpeed=speed.x < 0 ? -180 : +180;
acc.set(-speed.x,0);
lifespan=0.5f;
break;
case LIGHT:
angle=Random.Float(360);
angularSpeed=90;
lifespan=1f;
break;
case DISCOVER:
angle=Random.Float(360);
angularSpeed=90;
lifespan=0.5f;
am=0;
break;
case QUESTION:
lifespan=0.8f;
break;
case UP:
speed.set(0,-20);
lifespan=1f;
break;
case SCREAM:
lifespan=0.9f;
break;
case BONE:
lifespan=0.2f;
speed.polar(Random.Float(2 * 3.1415926f),24 / lifespan);
acc.set(0,128);
angle=Random.Float(360);
angularSpeed=360;
break;
case RATTLE:
lifespan=0.5f;
speed.set(0,-200);
acc.set(0,-2 * speed.y / lifespan);
angle=Random.Float(360);
angularSpeed=360;
break;
case WOOL:
lifespan=0.5f;
speed.set(0,-50);
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
break;
case ROCK:
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
scale.set(Random.Float(1,2));
speed.set(0,64);
lifespan=0.2f;
y-=speed.y * lifespan;
break;
case NOTE:
angularSpeed=Random.Float(-30,+30);
speed.polar((angularSpeed - 90) * PointF.G2R,30);
lifespan=1f;
break;
case CHANGE:
angle=Random.Float(360);
speed.polar((angle - 90) * PointF.G2R,Random.Float(4,12));
lifespan=1.5f;
break;
case HEART:
speed.set(Random.Int(-10,+10),-40);
angularSpeed=Random.Float(-45,+45);
lifespan=1f;
break;
case BUBBLE:
speed.set(0,-15);
scale.set(Random.Float(0.8f,1));
lifespan=Random.Float(0.8f,1.5f);
break;
case STEAM:
speed.y=-Random.Float(20,30);
angularSpeed=Random.Float(+180);
angle=Random.Float(360);
lifespan=1f;
break;
case JET:
speed.y=+32;
acc.y=-64;
angularSpeed=Random.Float(180,360);
angle=Random.Float(360);
lifespan=0.5f;
break;
case TOXIC:
hardlight(0x50FF60);
angularSpeed=30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case VENOM:
hardlight(0x8844FF);
angularSpeed=30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case PARALYSIS:
hardlight(0xFFFF66);
angularSpeed=-30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case STENCH:
hardlight(0x003300);
angularSpeed=-30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case CONFUSION:
hardlight(Random.Int(0x1000000) | 0x000080);
angularSpeed=Random.Float(-20,+20);
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case DUST:
hardlight(0xFFFF66);
angle=Random.Float(360);
speed.polar(Random.Float(2 * 3.1415926f),Random.Float(16,48));
lifespan=0.5f;
break;
case COIN:
speed.polar(-PointF.PI * Random.Float(0.3f,0.7f),Random.Float(48,96));
acc.y=256;
lifespan=-speed.y / acc.y * 2;
break;
}
left=lifespan;
}","public void reset(int index,float x,float y,int type){
  revive();
  this.type=type;
switch (type) {
case DISCOVER:
case RED_LIGHT:
    frame(film.get(LIGHT));
  break;
case EVOKE:
case MASTERY:
case KIT:
case FORGE:
frame(film.get(STAR));
break;
case RATTLE:
frame(film.get(BONE));
break;
case JET:
case TOXIC:
case VENOM:
case PARALYSIS:
case STENCH:
case CONFUSION:
case DUST:
frame(film.get(STEAM));
break;
default :
frame(film.get(type));
}
this.x=x - origin.x;
this.y=y - origin.y;
resetColor();
scale.set(1);
speed.set(0);
acc.set(0);
angle=0;
angularSpeed=0;
switch (type) {
case HEALING:
speed.set(0,-20);
lifespan=1f;
break;
case STAR:
speed.polar(Random.Float(2 * 3.1415926f),Random.Float(128));
acc.set(0,128);
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
lifespan=1f;
break;
case FORGE:
speed.polar(Random.Float(-3.1415926f),Random.Float(64));
acc.set(0,128);
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
lifespan=0.51f;
break;
case EVOKE:
speed.polar(Random.Float(-3.1415926f),50);
acc.set(0,50);
angle=Random.Float(360);
angularSpeed=Random.Float(-180,+180);
lifespan=1f;
break;
case KIT:
speed.polar(index * 3.1415926f / 5,50);
acc.set(-speed.x,-speed.y);
angle=index * 36;
angularSpeed=360;
lifespan=1f;
break;
case MASTERY:
speed.set(Random.Int(2) == 0 ? Random.Float(-128,-64) : Random.Float(+64,+128),0);
angularSpeed=speed.x < 0 ? -180 : +180;
acc.set(-speed.x,0);
lifespan=0.5f;
break;
case RED_LIGHT:
tint(0xFFCC0000);
case LIGHT:
angle=Random.Float(360);
angularSpeed=90;
lifespan=1f;
break;
case DISCOVER:
angle=Random.Float(360);
angularSpeed=90;
lifespan=0.5f;
am=0;
break;
case QUESTION:
lifespan=0.8f;
break;
case UP:
speed.set(0,-20);
lifespan=1f;
break;
case SCREAM:
lifespan=0.9f;
break;
case BONE:
lifespan=0.2f;
speed.polar(Random.Float(2 * 3.1415926f),24 / lifespan);
acc.set(0,128);
angle=Random.Float(360);
angularSpeed=360;
break;
case RATTLE:
lifespan=0.5f;
speed.set(0,-200);
acc.set(0,-2 * speed.y / lifespan);
angle=Random.Float(360);
angularSpeed=360;
break;
case WOOL:
lifespan=0.5f;
speed.set(0,-50);
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
break;
case ROCK:
angle=Random.Float(360);
angularSpeed=Random.Float(-360,+360);
scale.set(Random.Float(1,2));
speed.set(0,64);
lifespan=0.2f;
y-=speed.y * lifespan;
break;
case NOTE:
angularSpeed=Random.Float(-30,+30);
speed.polar((angularSpeed - 90) * PointF.G2R,30);
lifespan=1f;
break;
case CHANGE:
angle=Random.Float(360);
speed.polar((angle - 90) * PointF.G2R,Random.Float(4,12));
lifespan=1.5f;
break;
case HEART:
speed.set(Random.Int(-10,+10),-40);
angularSpeed=Random.Float(-45,+45);
lifespan=1f;
break;
case BUBBLE:
speed.set(0,-15);
scale.set(Random.Float(0.8f,1));
lifespan=Random.Float(0.8f,1.5f);
break;
case STEAM:
speed.y=-Random.Float(20,30);
angularSpeed=Random.Float(+180);
angle=Random.Float(360);
lifespan=1f;
break;
case JET:
speed.y=+32;
acc.y=-64;
angularSpeed=Random.Float(180,360);
angle=Random.Float(360);
lifespan=0.5f;
break;
case TOXIC:
hardlight(0x50FF60);
angularSpeed=30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case VENOM:
hardlight(0x8844FF);
angularSpeed=30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case PARALYSIS:
hardlight(0xFFFF66);
angularSpeed=-30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case STENCH:
hardlight(0x003300);
angularSpeed=-30;
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case CONFUSION:
hardlight(Random.Int(0x1000000) | 0x000080);
angularSpeed=Random.Float(-20,+20);
angle=Random.Float(360);
lifespan=Random.Float(1f,3f);
break;
case DUST:
hardlight(0xFFFF66);
angle=Random.Float(360);
speed.polar(Random.Float(2 * 3.1415926f),Random.Float(16,48));
lifespan=0.5f;
break;
case COIN:
speed.polar(-PointF.PI * Random.Float(0.3f,0.7f),Random.Float(48,96));
acc.y=256;
lifespan=-speed.y / acc.y * 2;
break;
}
left=lifespan;
}",0.993556701030928
164184,"@SuppressLint(""String_Node_Str"") @Override public void update(){
  super.update();
  left-=Game.elapsed;
  if (left <= 0) {
    kill();
  }
 else {
    float p=1 - left / lifespan;
switch (type) {
case STAR:
case FORGE:
      scale.set(1 - p);
    am=p < 0.2f ? p * 5f : (1 - p) * 1.25f;
  break;
case KIT:
case MASTERY:
am=1 - p * p;
break;
case EVOKE:
case HEALING:
am=p < 0.5f ? 1 : 2 - p * 2;
break;
case LIGHT:
am=scale.set(p < 0.2f ? p * 5f : (1 - p) * 1.25f).x;
break;
case DISCOVER:
am=1 - p;
scale.set((p < 0.5f ? p : 1 - p) * 2);
break;
case QUESTION:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 3));
break;
case UP:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 2));
break;
case SCREAM:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2f);
scale.set(p * 7);
break;
case BONE:
case RATTLE:
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
case ROCK:
am=p < 0.2f ? p * 5 : 1;
break;
case NOTE:
am=1 - p * p;
break;
case WOOL:
scale.set(1 - p);
break;
case CHANGE:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2);
scale.y=(1 + p) * 0.5f;
scale.x=scale.y * (float)Math.cos(left * 15);
break;
case HEART:
scale.set(1 - p);
am=1 - p * p;
break;
case BUBBLE:
am=p < 0.2f ? p * 5 : 1;
break;
case STEAM:
case TOXIC:
case PARALYSIS:
case CONFUSION:
case DUST:
am=p < 0.5f ? p : 1 - p;
scale.set(1 + p * 2);
break;
case VENOM:
hardlight(ColorMath.interpolate(0x8844FF,0x00FF00,p));
case STENCH:
am=(p < 0.5f ? p : 1 - p) * 2;
scale.set(1 + p * 2);
break;
case JET:
am=(p < 0.5f ? p : 1 - p) * 2;
scale.set(p * 1.5f);
break;
case COIN:
scale.x=(float)Math.cos(left * 5);
rm=gm=bm=(Math.abs(scale.x) + 1) * 0.5f;
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
}
}
}","@SuppressLint(""String_Node_Str"") @Override public void update(){
  super.update();
  left-=Game.elapsed;
  if (left <= 0) {
    kill();
  }
 else {
    float p=1 - left / lifespan;
switch (type) {
case STAR:
case FORGE:
      scale.set(1 - p);
    am=p < 0.2f ? p * 5f : (1 - p) * 1.25f;
  break;
case KIT:
case MASTERY:
am=1 - p * p;
break;
case EVOKE:
case HEALING:
am=p < 0.5f ? 1 : 2 - p * 2;
break;
case RED_LIGHT:
case LIGHT:
am=scale.set(p < 0.2f ? p * 5f : (1 - p) * 1.25f).x;
break;
case DISCOVER:
am=1 - p;
scale.set((p < 0.5f ? p : 1 - p) * 2);
break;
case QUESTION:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 3));
break;
case UP:
scale.set((float)(Math.sqrt(p < 0.5f ? p : 1 - p) * 2));
break;
case SCREAM:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2f);
scale.set(p * 7);
break;
case BONE:
case RATTLE:
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
case ROCK:
am=p < 0.2f ? p * 5 : 1;
break;
case NOTE:
am=1 - p * p;
break;
case WOOL:
scale.set(1 - p);
break;
case CHANGE:
am=(float)Math.sqrt((p < 0.5f ? p : 1 - p) * 2);
scale.y=(1 + p) * 0.5f;
scale.x=scale.y * (float)Math.cos(left * 15);
break;
case HEART:
scale.set(1 - p);
am=1 - p * p;
break;
case BUBBLE:
am=p < 0.2f ? p * 5 : 1;
break;
case STEAM:
case TOXIC:
case PARALYSIS:
case CONFUSION:
case DUST:
am=p < 0.5f ? p : 1 - p;
scale.set(1 + p * 2);
break;
case VENOM:
hardlight(ColorMath.interpolate(0x8844FF,0x00FF00,p));
case STENCH:
am=(p < 0.5f ? p : 1 - p) * 2;
scale.set(1 + p * 2);
break;
case JET:
am=(p < 0.5f ? p : 1 - p) * 2;
scale.set(p * 1.5f);
break;
case COIN:
scale.x=(float)Math.cos(left * 5);
rm=gm=bm=(Math.abs(scale.x) + 1) * 0.5f;
am=p < 0.9f ? 1 : (1 - p) * 10;
break;
}
}
}",0.9951951951951952
164185,"@Override public void emit(Emitter emitter,int index,float x,float y){
  Speck p=(Speck)emitter.recycle(Speck.class);
  p.reset(index,x,y,type);
  if (tint != 0)   p.tint(tint);
}","@Override public void emit(Emitter emitter,int index,float x,float y){
  Speck p=(Speck)emitter.recycle(Speck.class);
  p.reset(index,x,y,type);
}",0.8984615384615384
164186,"@Override public Emitter emitter(){
  if (!seal)   return super.emitter();
  Emitter emitter=new Emitter();
  emitter.pos(10f,6f);
  emitter.fillTarget=false;
  emitter.pour(Speck.factory(Speck.LIGHT,0xFFCC0000),0.6f);
  return emitter;
}","@Override public Emitter emitter(){
  if (!seal)   return super.emitter();
  Emitter emitter=new Emitter();
  emitter.pos(10f,6f);
  emitter.fillTarget=false;
  emitter.pour(Speck.factory(Speck.RED_LIGHT),0.6f);
  return emitter;
}",0.9637526652452024
164187,"@Override public void execute(Hero hero,String action){
  super.execute(hero,action);
  if (action.equals(AC_EAT)) {
    if (potionAttrib == null) {
      GLog.w(Messages.get(this,""String_Node_Str""));
    }
 else {
      super.execute(hero,action);
      if (potionAttrib instanceof PotionOfFrost) {
        GLog.i(Messages.get(this,""String_Node_Str""));
        FrozenCarpaccio.effect(hero);
      }
 else       if (potionAttrib instanceof PotionOfLiquidFlame) {
        GLog.i(Messages.get(this,""String_Node_Str""));
        Buff.affect(hero,FireImbue.class).set(FireImbue.DURATION);
      }
 else       if (potionAttrib instanceof PotionOfToxicGas) {
        GLog.i(Messages.get(this,""String_Node_Str""));
        Buff.affect(hero,ToxicImbue.class).set(ToxicImbue.DURATION);
      }
 else       if (potionAttrib instanceof PotionOfParalyticGas) {
        GLog.i(Messages.get(this,""String_Node_Str""));
        Buff.affect(hero,EarthImbue.class,EarthImbue.DURATION);
      }
 else       potionAttrib.apply(hero);
    }
  }
}","@Override public void execute(Hero hero,String action){
  if (action.equals(AC_EAT) && potionAttrib == null) {
    GLog.w(Messages.get(this,""String_Node_Str""));
    return;
  }
  super.execute(hero,action);
  if (action.equals(AC_EAT) && potionAttrib != null) {
    if (potionAttrib instanceof PotionOfFrost) {
      GLog.i(Messages.get(this,""String_Node_Str""));
      FrozenCarpaccio.effect(hero);
    }
 else     if (potionAttrib instanceof PotionOfLiquidFlame) {
      GLog.i(Messages.get(this,""String_Node_Str""));
      Buff.affect(hero,FireImbue.class).set(FireImbue.DURATION);
    }
 else     if (potionAttrib instanceof PotionOfToxicGas) {
      GLog.i(Messages.get(this,""String_Node_Str""));
      Buff.affect(hero,ToxicImbue.class).set(ToxicImbue.DURATION);
    }
 else     if (potionAttrib instanceof PotionOfParalyticGas) {
      GLog.i(Messages.get(this,""String_Node_Str""));
      Buff.affect(hero,EarthImbue.class,EarthImbue.DURATION);
    }
 else {
      potionAttrib.apply(hero);
    }
  }
}",0.8959052787370498
164188,"@Override public void activate(){
  if (Dungeon.visible[pos]) {
    Sample.INSTANCE.play(Assets.SND_HIT);
    Wound.hit(pos);
  }
  Char ch=Actor.findChar(pos);
  if (ch != null) {
    int damage=Random.NormalIntRange(Dungeon.depth,Dungeon.depth * 2);
    damage-=Random.IntRange(0,ch.dr());
    ch.damage(Math.max(damage,0),this);
    if (!ch.isAlive() && ch == Dungeon.hero) {
      Dungeon.fail(getClass());
      GLog.n(Messages.get(this,""String_Node_Str""));
    }
  }
}","@Override public void activate(){
  if (Dungeon.visible[pos]) {
    Sample.INSTANCE.play(Assets.SND_HIT);
    Wound.hit(pos);
  }
  Char ch=Actor.findChar(pos);
  if (ch != null && !ch.flying) {
    int damage=Random.NormalIntRange(Dungeon.depth,Dungeon.depth * 2);
    damage-=Random.IntRange(0,ch.dr());
    ch.damage(Math.max(damage,0),this);
    if (!ch.isAlive() && ch == Dungeon.hero) {
      Dungeon.fail(getClass());
      GLog.n(Messages.get(this,""String_Node_Str""));
    }
  }
}",0.9854469854469856
164189,"@Override protected Char chooseEnemy(){
  if (enemy == null || !enemy.isAlive() || state == WANDERING) {
    HashSet<Mob> enemies=new HashSet<Mob>();
    for (    Mob mob : Dungeon.level.mobs) {
      if (mob.hostile && Level.fieldOfView[mob.pos] && mob.state != mob.PASSIVE) {
        enemies.add(mob);
      }
    }
    enemy=enemies.size() > 0 ? Random.element(enemies) : null;
  }
  return enemy;
}","@Override protected Char chooseEnemy(){
  if (enemy == null || !enemy.isAlive() || !Dungeon.level.mobs.contains(enemy) || state == WANDERING) {
    HashSet<Mob> enemies=new HashSet<Mob>();
    for (    Mob mob : Dungeon.level.mobs) {
      if (mob.hostile && Level.fieldOfView[mob.pos] && mob.state != mob.PASSIVE) {
        enemies.add(mob);
      }
    }
    enemy=enemies.size() > 0 ? Random.element(enemies) : null;
  }
  return enemy;
}",0.9537366548042704
164190,"@Override public void execute(Hero hero,String action){
  if (action.equals(AC_CAST)) {
    curUser=hero;
    if (!isEquipped(hero))     GLog.i(Messages.get(Artifact.class,""String_Node_Str""));
 else     if (charge < 1)     GLog.i(Messages.get(this,""String_Node_Str""));
 else     if (cursed)     GLog.w(Messages.get(this,""String_Node_Str""));
 else {
      GameScene.selectCell(caster);
    }
  }
 else   super.execute(hero,action);
}","@Override public void execute(Hero hero,String action){
  if (action.equals(AC_CAST)) {
    curUser=hero;
    if (!isEquipped(hero)) {
      GLog.i(Messages.get(Artifact.class,""String_Node_Str""));
      QuickSlotButton.cancel();
    }
 else     if (charge < 1) {
      GLog.i(Messages.get(this,""String_Node_Str""));
      QuickSlotButton.cancel();
    }
 else     if (cursed) {
      GLog.w(Messages.get(this,""String_Node_Str""));
      QuickSlotButton.cancel();
    }
 else {
      GameScene.selectCell(caster);
    }
  }
 else   super.execute(hero,action);
}",0.8727272727272727
164191,"@Override public void execute(Hero hero,String action){
  if (action == AC_SET || action == AC_RETURN) {
    if (Dungeon.bossLevel()) {
      hero.spend(LloydsBeacon.TIME_TO_USE);
      GLog.w(Messages.get(this,""String_Node_Str""));
      return;
    }
    for (int i=0; i < Level.NEIGHBOURS8.length; i++) {
      if (Actor.findChar(hero.pos + Level.NEIGHBOURS8[i]) != null) {
        GLog.w(Messages.get(this,""String_Node_Str""));
        return;
      }
    }
  }
  if (action == AC_ZAP) {
    curUser=hero;
    int chargesToUse=Dungeon.depth > 20 ? 2 : 1;
    if (!isEquipped(hero))     GLog.i(Messages.get(Artifact.class,""String_Node_Str""));
 else     if (charge < chargesToUse)     GLog.i(Messages.get(this,""String_Node_Str""));
 else {
      GameScene.selectCell(zapper);
    }
  }
 else   if (action == AC_SET) {
    returnDepth=Dungeon.depth;
    returnPos=hero.pos;
    hero.spend(LloydsBeacon.TIME_TO_USE);
    hero.busy();
    hero.sprite.operate(hero.pos);
    Sample.INSTANCE.play(Assets.SND_BEACON);
    GLog.i(Messages.get(this,""String_Node_Str""));
  }
 else   if (action == AC_RETURN) {
    if (returnDepth == Dungeon.depth) {
      ScrollOfTeleportation.appear(hero,returnPos);
      Dungeon.level.press(returnPos,hero);
      Dungeon.observe();
    }
 else {
      Buff buff=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
      if (buff != null)       buff.detach();
      for (      Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))       if (mob instanceof DriedRose.GhostHero)       mob.destroy();
      InterlevelScene.mode=InterlevelScene.Mode.RETURN;
      InterlevelScene.returnDepth=returnDepth;
      InterlevelScene.returnPos=returnPos;
      Game.switchScene(InterlevelScene.class);
    }
  }
 else {
    super.execute(hero,action);
  }
}","@Override public void execute(Hero hero,String action){
  if (action == AC_SET || action == AC_RETURN) {
    if (Dungeon.bossLevel()) {
      hero.spend(LloydsBeacon.TIME_TO_USE);
      GLog.w(Messages.get(this,""String_Node_Str""));
      return;
    }
    for (int i=0; i < Level.NEIGHBOURS8.length; i++) {
      if (Actor.findChar(hero.pos + Level.NEIGHBOURS8[i]) != null) {
        GLog.w(Messages.get(this,""String_Node_Str""));
        return;
      }
    }
  }
  if (action == AC_ZAP) {
    curUser=hero;
    int chargesToUse=Dungeon.depth > 20 ? 2 : 1;
    if (!isEquipped(hero)) {
      GLog.i(Messages.get(Artifact.class,""String_Node_Str""));
      QuickSlotButton.cancel();
    }
 else     if (charge < chargesToUse) {
      GLog.i(Messages.get(this,""String_Node_Str""));
      QuickSlotButton.cancel();
    }
 else {
      GameScene.selectCell(zapper);
    }
  }
 else   if (action == AC_SET) {
    returnDepth=Dungeon.depth;
    returnPos=hero.pos;
    hero.spend(LloydsBeacon.TIME_TO_USE);
    hero.busy();
    hero.sprite.operate(hero.pos);
    Sample.INSTANCE.play(Assets.SND_BEACON);
    GLog.i(Messages.get(this,""String_Node_Str""));
  }
 else   if (action == AC_RETURN) {
    if (returnDepth == Dungeon.depth) {
      ScrollOfTeleportation.appear(hero,returnPos);
      Dungeon.level.press(returnPos,hero);
      Dungeon.observe();
    }
 else {
      Buff buff=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
      if (buff != null)       buff.detach();
      for (      Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))       if (mob instanceof DriedRose.GhostHero)       mob.destroy();
      InterlevelScene.mode=InterlevelScene.Mode.RETURN;
      InterlevelScene.returnDepth=returnDepth;
      InterlevelScene.returnPos=returnPos;
      Game.switchScene(InterlevelScene.class);
    }
  }
 else {
    super.execute(hero,action);
  }
}",0.976884975233902
164192,"@Override public void call(){
  if (finalTarget == Dungeon.hero) {
    if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
      finalTarget.damage((finalTarget.HP - 1),this);
    }
 else {
      finalTarget.damage(finalTarget.HP,this);
    }
    Sample.INSTANCE.play(Assets.SND_CURSED);
    if (!finalTarget.isAlive()) {
      Dungeon.fail(getClass());
      GLog.n(Messages.get(this,""String_Node_Str""));
    }
  }
 else {
    finalTarget.damage(finalTarget.HP,this);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
  finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
}","@Override public void call(){
  if (finalTarget == Dungeon.hero) {
    if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
      finalTarget.damage((finalTarget.HP - 1),trap);
    }
 else {
      finalTarget.damage(finalTarget.HP,trap);
    }
    Sample.INSTANCE.play(Assets.SND_CURSED);
    if (!finalTarget.isAlive()) {
      Dungeon.fail(GrimTrap.class);
      GLog.n(Messages.get(GrimTrap.class,""String_Node_Str""));
    }
  }
 else {
    finalTarget.damage(finalTarget.HP,this);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
  finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
  if (!finalTarget.isAlive())   finalTarget.next();
}",0.9157212317666128
164193,"@Override public void activate(){
  Char target=Actor.findChar(pos);
  if (target == null) {
    for (    Char ch : Actor.chars()) {
      Ballistica bolt=new Ballistica(pos,ch.pos,Ballistica.PROJECTILE);
      if (bolt.collisionPos == ch.pos && (target == null || Level.distance(pos,ch.pos) < Level.distance(pos,target.pos))) {
        target=ch;
      }
    }
  }
  if (target != null) {
    final Char finalTarget=target;
    MagicMissile.shadow(target.sprite.parent,pos,target.pos,new Callback(){
      @Override public void call(){
        if (finalTarget == Dungeon.hero) {
          if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
            finalTarget.damage((finalTarget.HP - 1),this);
          }
 else {
            finalTarget.damage(finalTarget.HP,this);
          }
          Sample.INSTANCE.play(Assets.SND_CURSED);
          if (!finalTarget.isAlive()) {
            Dungeon.fail(getClass());
            GLog.n(Messages.get(this,""String_Node_Str""));
          }
        }
 else {
          finalTarget.damage(finalTarget.HP,this);
          Sample.INSTANCE.play(Assets.SND_BURNING);
        }
        finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
      }
    }
);
  }
 else {
    CellEmitter.get(pos).burst(ShadowParticle.UP,10);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
}","@Override public void activate(){
  Char target=Actor.findChar(pos);
  if (target == null) {
    for (    Char ch : Actor.chars()) {
      Ballistica bolt=new Ballistica(pos,ch.pos,Ballistica.PROJECTILE);
      if (bolt.collisionPos == ch.pos && (target == null || Level.distance(pos,ch.pos) < Level.distance(pos,target.pos))) {
        target=ch;
      }
    }
  }
  if (target != null) {
    final Char finalTarget=target;
    final GrimTrap trap=this;
    MagicMissile.shadow(target.sprite.parent,pos,target.pos,new Callback(){
      @Override public void call(){
        if (finalTarget == Dungeon.hero) {
          if (((float)finalTarget.HP / finalTarget.HT) >= 0.9f) {
            finalTarget.damage((finalTarget.HP - 1),trap);
          }
 else {
            finalTarget.damage(finalTarget.HP,trap);
          }
          Sample.INSTANCE.play(Assets.SND_CURSED);
          if (!finalTarget.isAlive()) {
            Dungeon.fail(GrimTrap.class);
            GLog.n(Messages.get(GrimTrap.class,""String_Node_Str""));
          }
        }
 else {
          finalTarget.damage(finalTarget.HP,this);
          Sample.INSTANCE.play(Assets.SND_BURNING);
        }
        finalTarget.sprite.emitter().burst(ShadowParticle.UP,10);
        if (!finalTarget.isAlive())         finalTarget.next();
      }
    }
);
  }
 else {
    CellEmitter.get(pos).burst(ShadowParticle.UP,10);
    Sample.INSTANCE.play(Assets.SND_BURNING);
  }
}",0.9468704512372634
164194,"public void stick(MissileWeapon item){
  items.add(item);
}","public void stick(MissileWeapon projectile){
  for (  Item item : items) {
    if (item.isSimilar(projectile)) {
      item.quantity(item.quantity() + projectile.quantity());
      return;
    }
  }
  items.add(projectile);
}",0.3591549295774648
164195,"@Override protected void onThrow(int cell){
  Char enemy=Actor.findChar(cell);
  if (enemy == null || enemy == curUser) {
    if (this instanceof Boomerang)     super.onThrow(cell);
 else     miss(cell);
  }
 else {
    if (!curUser.shoot(enemy,this)) {
      miss(cell);
    }
 else     if (!(this instanceof Boomerang)) {
      int bonus=0;
      for (      Buff buff : curUser.buffs(RingOfSharpshooting.Aim.class))       bonus+=((RingOfSharpshooting.Aim)buff).level;
      if (curUser.heroClass == HeroClass.HUNTRESS && enemy.buff(PinCushion.class) == null)       bonus+=3;
      if (Random.Float() > Math.pow(0.7,bonus))       Buff.affect(enemy,PinCushion.class).stick(this);
    }
  }
}","@Override protected void onThrow(int cell){
  Char enemy=Actor.findChar(cell);
  if (enemy == null || enemy == curUser) {
    if (this instanceof Boomerang)     super.onThrow(cell);
 else     miss(cell);
  }
 else {
    if (!curUser.shoot(enemy,this)) {
      miss(cell);
    }
 else     if (!(this instanceof Boomerang)) {
      int bonus=0;
      for (      Buff buff : curUser.buffs(RingOfSharpshooting.Aim.class))       bonus+=((RingOfSharpshooting.Aim)buff).level;
      if (curUser.heroClass == HeroClass.HUNTRESS && enemy.buff(PinCushion.class) == null)       bonus+=3;
      if (Random.Float() > Math.pow(0.7,bonus)) {
        if (enemy.isAlive())         Buff.affect(enemy,PinCushion.class).stick(this);
 else         Dungeon.level.drop(this,enemy.pos).sprite.drop();
      }
    }
  }
}",0.929388029589778
164196,"@Override public void onSelect(Integer target){
  if (target != null && (Dungeon.level.visited[target] || Dungeon.level.mapped[target])) {
    int missileProperties=(Dungeon.depth == 10 || Dungeon.depth == 15 || Dungeon.depth == 20 || Dungeon.depth == 25) ? Ballistica.PROJECTILE : Ballistica.STOP_CHARS | Ballistica.STOP_TARGET;
    final Ballistica chain=new Ballistica(curUser.pos,target,missileProperties);
    if (Actor.findChar(chain.collisionPos) != null) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null) {
          newPos=i;
          break;
        }
      }
      if (newPos == -1) {
        GLog.w(Messages.get(this,""String_Node_Str""));
      }
 else {
        final int newMobPos=newPos;
        final Char affected=Actor.findChar(chain.collisionPos);
        int chargeUse=Level.distance(affected.pos,newMobPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else         if (affected.properties().contains(Char.Property.IMMOVABLE)) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,affected.pos,new Callback(){
          public void call(){
            Actor.add(new Pushing(affected,affected.pos,newMobPos,new Callback(){
              public void call(){
                Dungeon.level.press(newMobPos,affected);
              }
            }
));
            affected.pos=newMobPos;
            Dungeon.observe();
            curUser.spendAndNext(1f);
          }
        }
));
      }
    }
 else     if (Level.solid[chain.path.get(chain.dist)] || (chain.dist > 0 && Level.solid[chain.path.get(chain.dist - 1)]) || (chain.path.size() > chain.dist + 1 && Level.solid[chain.path.get(chain.dist + 1)])|| (chain.path.size() == chain.dist + 1)) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null)         newPos=i;
      }
      if (newPos == -1) {
        GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
      }
 else {
        final int newHeroPos=newPos;
        int chargeUse=Level.distance(curUser.pos,newHeroPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,target,new Callback(){
          public void call(){
            Actor.add(new Pushing(curUser,curUser.pos,newHeroPos,new Callback(){
              public void call(){
                Dungeon.level.press(newHeroPos,curUser);
              }
            }
));
            curUser.spendAndNext(1f);
            curUser.pos=newHeroPos;
            Dungeon.observe();
          }
        }
));
      }
    }
 else {
      GLog.i(Messages.get(EtherealChains.class,""String_Node_Str""));
    }
  }
}","@Override public void onSelect(Integer target){
  if (target != null && (Dungeon.level.visited[target] || Dungeon.level.mapped[target])) {
    int missileProperties=(Dungeon.depth == 10 || Dungeon.depth == 15 || Dungeon.depth == 20 || Dungeon.depth == 25) ? Ballistica.PROJECTILE : Ballistica.STOP_CHARS | Ballistica.STOP_TARGET;
    final Ballistica chain=new Ballistica(curUser.pos,target,missileProperties);
    if (Actor.findChar(chain.collisionPos) != null) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null) {
          newPos=i;
          break;
        }
      }
      if (newPos == -1) {
        GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
      }
 else {
        final int newMobPos=newPos;
        final Char affected=Actor.findChar(chain.collisionPos);
        int chargeUse=Level.distance(affected.pos,newMobPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else         if (affected.properties().contains(Char.Property.IMMOVABLE)) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,affected.pos,new Callback(){
          public void call(){
            Actor.add(new Pushing(affected,affected.pos,newMobPos,new Callback(){
              public void call(){
                Dungeon.level.press(newMobPos,affected);
              }
            }
));
            affected.pos=newMobPos;
            Dungeon.observe();
            curUser.spendAndNext(1f);
          }
        }
));
      }
    }
 else     if (Level.solid[chain.path.get(chain.dist)] || (chain.dist > 0 && Level.solid[chain.path.get(chain.dist - 1)]) || (chain.path.size() > chain.dist + 1 && Level.solid[chain.path.get(chain.dist + 1)])|| (chain.path.size() == chain.dist + 1)) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null)         newPos=i;
      }
      if (newPos == -1) {
        GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
      }
 else {
        final int newHeroPos=newPos;
        int chargeUse=Level.distance(curUser.pos,newHeroPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,target,new Callback(){
          public void call(){
            Actor.add(new Pushing(curUser,curUser.pos,newHeroPos,new Callback(){
              public void call(){
                Dungeon.level.press(newHeroPos,curUser);
              }
            }
));
            curUser.spendAndNext(1f);
            curUser.pos=newHeroPos;
            Dungeon.observe();
          }
        }
));
      }
    }
 else {
      GLog.i(Messages.get(EtherealChains.class,""String_Node_Str""));
    }
  }
}",0.996570003118179
164197,"@Override public void restoreFromBundle(Bundle bundle){
  if (bundle.contains(REASON)) {
    String info=bundle.getString(REASON).toLowerCase();
    if (info.equals(""String_Node_Str""))     cause=Amulet.class;
 else     if (info.contains(""String_Node_Str""))     cause=Goo.class;
 else     if (info.contains(""String_Node_Str""))     cause=Tengu.class;
 else     if (info.contains(""String_Node_Str""))     cause=DM300.class;
 else     if (info.contains(""String_Node_Str""))     cause=King.class;
 else     if (info.contains(""String_Node_Str""))     cause=Yog.class;
 else     if (info.contains(""String_Node_Str""))     cause=Yog.class;
 else     if (info.contains(""String_Node_Str""))     cause=Yog.class;
 else     if (info.equals(""String_Node_Str""))     cause=Burning.class;
 else     if (info.equals(""String_Node_Str""))     cause=Hunger.class;
 else     if (info.equals(""String_Node_Str""))     cause=Poison.class;
 else     if (info.equals(""String_Node_Str""))     cause=ToxicGas.class;
 else     if (info.equals(""String_Node_Str""))     cause=Bleeding.class;
 else     if (info.equals(""String_Node_Str""))     cause=Ooze.class;
 else     if (info.equals(""String_Node_Str""))     cause=Chasm.class;
 else     this.info=info;
  }
 else {
    cause=bundle.getClass(CAUSE);
  }
  win=bundle.getBoolean(WIN);
  score=bundle.getInt(SCORE);
  heroClass=HeroClass.restoreInBundle(bundle);
  armorTier=bundle.getInt(TIER);
  gameFile=bundle.getString(GAME);
  depth=bundle.getInt(DEPTH);
  herolevel=bundle.getInt(LEVEL);
}","@Override public void restoreFromBundle(Bundle bundle){
  if (bundle.contains(REASON)) {
    String info=bundle.getString(REASON).toLowerCase(Locale.ENGLISH);
    if (info.equals(""String_Node_Str""))     cause=Amulet.class;
 else     if (info.contains(""String_Node_Str""))     cause=Goo.class;
 else     if (info.contains(""String_Node_Str""))     cause=Tengu.class;
 else     if (info.contains(""String_Node_Str""))     cause=DM300.class;
 else     if (info.contains(""String_Node_Str""))     cause=King.class;
 else     if (info.contains(""String_Node_Str""))     cause=Yog.class;
 else     if (info.contains(""String_Node_Str""))     cause=Yog.class;
 else     if (info.contains(""String_Node_Str""))     cause=Yog.class;
 else     if (info.equals(""String_Node_Str""))     cause=Burning.class;
 else     if (info.equals(""String_Node_Str""))     cause=Hunger.class;
 else     if (info.equals(""String_Node_Str""))     cause=Poison.class;
 else     if (info.equals(""String_Node_Str""))     cause=ToxicGas.class;
 else     if (info.equals(""String_Node_Str""))     cause=Bleeding.class;
 else     if (info.equals(""String_Node_Str""))     cause=Ooze.class;
 else     if (info.equals(""String_Node_Str""))     cause=Chasm.class;
 else     this.info=info;
  }
 else {
    cause=bundle.getClass(CAUSE);
  }
  win=bundle.getBoolean(WIN);
  score=bundle.getInt(SCORE);
  heroClass=HeroClass.restoreInBundle(bundle);
  armorTier=bundle.getInt(TIER);
  gameFile=bundle.getString(GAME);
  depth=bundle.getInt(DEPTH);
  herolevel=bundle.getInt(LEVEL);
}",0.9953703703703703
164198,"public static String titleCase(String str){
  if (lang == Languages.ENGLISH) {
    String result=""String_Node_Str"";
    for (    String word : str.split(""String_Node_Str"")) {
      if (noCaps.contains(word.trim().toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str""))) {
        result+=word;
      }
 else {
        result+=capitalize(word);
      }
    }
    return capitalize(result);
  }
  return capitalize(str);
}","public static String titleCase(String str){
  if (lang == Languages.ENGLISH) {
    String result=""String_Node_Str"";
    for (    String word : str.split(""String_Node_Str"")) {
      if (noCaps.contains(word.trim().toLowerCase(Locale.ENGLISH).replaceAll(""String_Node_Str"",""String_Node_Str""))) {
        result+=word;
      }
 else {
        result+=capitalize(word);
      }
    }
    return capitalize(result);
  }
  return capitalize(str);
}",0.9838709677419356
164199,"public static String get(Class c,String k,Object... args){
  String key;
  if (c != null) {
    key=c.getName().replace(""String_Node_Str"",""String_Node_Str"");
    key+=""String_Node_Str"" + k;
  }
 else   key=k;
  if (!strings.containsKey(key.toLowerCase())) {
    if (c != null && c.getSuperclass() != null) {
      return get(c.getSuperclass(),k,args);
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    if (args.length > 0)     return format(strings.get(key.toLowerCase()),args);
 else     return strings.get(key.toLowerCase());
  }
}","public static String get(Class c,String k,Object... args){
  String key;
  if (c != null) {
    key=c.getName().replace(""String_Node_Str"",""String_Node_Str"");
    key+=""String_Node_Str"" + k;
  }
 else   key=k;
  if (strings.containsKey(key.toLowerCase(Locale.ENGLISH))) {
    if (c != null && c.getSuperclass() != null) {
      return get(c.getSuperclass(),k,args);
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    if (args.length > 0)     return format(strings.get(key.toLowerCase(Locale.ENGLISH)),args);
 else     return strings.get(key.toLowerCase(Locale.ENGLISH));
  }
}",0.9623797025371827
164200,"public void burn(){
  if (type == Type.MIMIC) {
    Mimic m=Mimic.spawnAt(pos,items);
    if (m != null) {
      Buff.affect(m,Burning.class).reignite(m);
      m.sprite.emitter().burst(FlameParticle.FACTORY,5);
      destroy();
    }
  }
  if (type != Type.HEAP) {
    return;
  }
  boolean burnt=false;
  boolean evaporated=false;
  for (  Item item : items.toArray(new Item[0])) {
    if (item instanceof Scroll) {
      items.remove(item);
      burnt=true;
    }
 else     if (item instanceof Dewdrop) {
      items.remove(item);
      evaporated=true;
    }
 else     if (item instanceof MysteryMeat) {
      replace(item,ChargrilledMeat.cook((MysteryMeat)item));
      burnt=true;
    }
 else     if (item instanceof Bomb) {
      items.remove(item);
      ((Bomb)item).explode(pos);
      return;
    }
  }
  if (burnt || evaporated) {
    if (Dungeon.visible[pos]) {
      if (burnt) {
        burnFX(pos);
      }
 else {
        evaporateFX(pos);
      }
    }
    if (isEmpty()) {
      destroy();
    }
 else     if (sprite != null) {
      sprite.view(image(),glowing());
    }
  }
}","public void burn(){
  if (type == Type.MIMIC) {
    Mimic m=Mimic.spawnAt(pos,items);
    if (m != null) {
      Buff.affect(m,Burning.class).reignite(m);
      m.sprite.emitter().burst(FlameParticle.FACTORY,5);
      destroy();
    }
  }
  if (type != Type.HEAP) {
    return;
  }
  boolean burnt=false;
  boolean evaporated=false;
  for (  Item item : items.toArray(new Item[0])) {
    if (item instanceof Scroll) {
      items.remove(item);
      burnt=true;
    }
 else     if (item instanceof Dewdrop) {
      items.remove(item);
      evaporated=true;
    }
 else     if (item instanceof MysteryMeat) {
      replace(item,ChargrilledMeat.cook((MysteryMeat)item));
      burnt=true;
    }
 else     if (item instanceof Bomb) {
      items.remove(item);
      ((Bomb)item).explode(pos);
      return;
    }
  }
  if (burnt || evaporated) {
    if (Dungeon.visible[pos]) {
      if (burnt) {
        burnFX(pos);
      }
 else {
        evaporateFX(pos);
      }
    }
    if (isEmpty()) {
      destroy();
    }
 else     if (sprite != null) {
      sprite.view(items.peek());
    }
  }
}",0.9748743718592964
164201,"public void freeze(){
  if (type == Type.MIMIC) {
    Mimic m=Mimic.spawnAt(pos,items);
    if (m != null) {
      Buff.prolong(m,Frost.class,Frost.duration(m) * Random.Float(1.0f,1.5f));
      destroy();
    }
  }
  if (type != Type.HEAP) {
    return;
  }
  boolean frozen=false;
  for (  Item item : items.toArray(new Item[0])) {
    if (item instanceof MysteryMeat) {
      replace(item,FrozenCarpaccio.cook((MysteryMeat)item));
      frozen=true;
    }
 else     if (item instanceof Potion) {
      items.remove(item);
      ((Potion)item).shatter(pos);
      frozen=true;
    }
 else     if (item instanceof Bomb) {
      ((Bomb)item).fuse=null;
      frozen=true;
    }
  }
  if (frozen) {
    if (isEmpty()) {
      destroy();
    }
 else     if (sprite != null) {
      sprite.view(image(),glowing());
    }
  }
}","public void freeze(){
  if (type == Type.MIMIC) {
    Mimic m=Mimic.spawnAt(pos,items);
    if (m != null) {
      Buff.prolong(m,Frost.class,Frost.duration(m) * Random.Float(1.0f,1.5f));
      destroy();
    }
  }
  if (type != Type.HEAP) {
    return;
  }
  boolean frozen=false;
  for (  Item item : items.toArray(new Item[0])) {
    if (item instanceof MysteryMeat) {
      replace(item,FrozenCarpaccio.cook((MysteryMeat)item));
      frozen=true;
    }
 else     if (item instanceof Potion) {
      items.remove(item);
      ((Potion)item).shatter(pos);
      frozen=true;
    }
 else     if (item instanceof Bomb) {
      ((Bomb)item).fuse=null;
      frozen=true;
    }
  }
  if (frozen) {
    if (isEmpty()) {
      destroy();
    }
 else     if (sprite != null) {
      sprite.view(items.peek());
    }
  }
}",0.9664429530201344
164202,"public void explode(){
  if (type == Type.MIMIC || type == Type.CHEST || type == Type.SKELETON) {
    type=Type.HEAP;
    sprite.link();
    sprite.drop();
    return;
  }
  if (type != Type.HEAP) {
    return;
  }
 else {
    for (    Item item : items.toArray(new Item[0])) {
      if (item instanceof Potion) {
        items.remove(item);
        ((Potion)item).shatter(pos);
      }
 else       if (item instanceof Bomb) {
        items.remove(item);
        ((Bomb)item).explode(pos);
        return;
      }
 else       if (!(item.level() > 0 || item.unique))       items.remove(item);
    }
    if (items.isEmpty())     destroy();
  }
}","public void explode(){
  if (type == Type.MIMIC || type == Type.CHEST || type == Type.SKELETON) {
    type=Type.HEAP;
    sprite.link();
    sprite.drop();
    return;
  }
  if (type != Type.HEAP) {
    return;
  }
 else {
    for (    Item item : items.toArray(new Item[0])) {
      if (item instanceof Potion) {
        items.remove(item);
        ((Potion)item).shatter(pos);
      }
 else       if (item instanceof Bomb) {
        items.remove(item);
        ((Bomb)item).explode(pos);
        return;
      }
 else       if (!(item.level() > 0 || item.unique))       items.remove(item);
    }
    if (isEmpty()) {
      destroy();
    }
 else     if (sprite != null) {
      sprite.view(items.peek());
    }
  }
}",0.9316678912564292
164203,"@Override public void onSelect(Integer target){
  if (target == null)   return;
  Invisibility.dispel();
  charge-=Dungeon.depth > 20 ? 2 : 1;
  updateQuickslot();
  if (Actor.findChar(target) == curUser) {
    ScrollOfTeleportation.teleportHero(curUser);
    curUser.spendAndNext(1f);
  }
 else {
    final Ballistica bolt=new Ballistica(curUser.pos,target,Ballistica.MAGIC_BOLT);
    final Char ch=Actor.findChar(bolt.collisionPos);
    if (ch == curUser) {
      ScrollOfTeleportation.teleportHero(curUser);
      curUser.spendAndNext(1f);
    }
 else {
      Sample.INSTANCE.play(Assets.SND_ZAP);
      curUser.sprite.zap(bolt.collisionPos);
      curUser.busy();
      MagicMissile.force(curUser.sprite.parent,bolt.sourcePos,bolt.collisionPos,new Callback(){
        @Override public void call(){
          if (ch != null) {
            int count=10;
            int pos;
            do {
              pos=Dungeon.level.randomRespawnCell();
              if (count-- <= 0) {
                break;
              }
            }
 while (pos == -1);
            if (pos == -1 || Dungeon.bossLevel()) {
              GLog.w(Messages.get(ScrollOfTeleportation.class,""String_Node_Str""));
            }
 else             if (ch.properties().contains(Char.Property.IMMOVABLE)) {
              GLog.w(Messages.get(this,""String_Node_Str""));
            }
 else {
              ch.pos=pos;
              ch.sprite.place(ch.pos);
              ch.sprite.visible=Dungeon.visible[pos];
            }
          }
          curUser.spendAndNext(1f);
        }
      }
);
    }
  }
}","@Override public void onSelect(Integer target){
  if (target == null)   return;
  Invisibility.dispel();
  charge-=Dungeon.depth > 20 ? 2 : 1;
  updateQuickslot();
  if (Actor.findChar(target) == curUser) {
    ScrollOfTeleportation.teleportHero(curUser);
    curUser.spendAndNext(1f);
  }
 else {
    final Ballistica bolt=new Ballistica(curUser.pos,target,Ballistica.MAGIC_BOLT);
    final Char ch=Actor.findChar(bolt.collisionPos);
    if (ch == curUser) {
      ScrollOfTeleportation.teleportHero(curUser);
      curUser.spendAndNext(1f);
    }
 else {
      Sample.INSTANCE.play(Assets.SND_ZAP);
      curUser.sprite.zap(bolt.collisionPos);
      curUser.busy();
      MagicMissile.force(curUser.sprite.parent,bolt.sourcePos,bolt.collisionPos,new Callback(){
        @Override public void call(){
          if (ch != null) {
            int count=10;
            int pos;
            do {
              pos=Dungeon.level.randomRespawnCell();
              if (count-- <= 0) {
                break;
              }
            }
 while (pos == -1);
            if (pos == -1 || Dungeon.bossLevel()) {
              GLog.w(Messages.get(ScrollOfTeleportation.class,""String_Node_Str""));
            }
 else             if (ch.properties().contains(Char.Property.IMMOVABLE)) {
              GLog.w(Messages.get(LloydsBeacon.class,""String_Node_Str""));
            }
 else {
              ch.pos=pos;
              ch.sprite.place(ch.pos);
              ch.sprite.visible=Dungeon.visible[pos];
            }
          }
          curUser.spendAndNext(1f);
        }
      }
);
    }
  }
}",0.9936708860759492
164204,"@Override public void call(){
  if (ch != null) {
    int count=10;
    int pos;
    do {
      pos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (pos == -1);
    if (pos == -1 || Dungeon.bossLevel()) {
      GLog.w(Messages.get(ScrollOfTeleportation.class,""String_Node_Str""));
    }
 else     if (ch.properties().contains(Char.Property.IMMOVABLE)) {
      GLog.w(Messages.get(this,""String_Node_Str""));
    }
 else {
      ch.pos=pos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  curUser.spendAndNext(1f);
}","@Override public void call(){
  if (ch != null) {
    int count=10;
    int pos;
    do {
      pos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (pos == -1);
    if (pos == -1 || Dungeon.bossLevel()) {
      GLog.w(Messages.get(ScrollOfTeleportation.class,""String_Node_Str""));
    }
 else     if (ch.properties().contains(Char.Property.IMMOVABLE)) {
      GLog.w(Messages.get(LloydsBeacon.class,""String_Node_Str""));
    }
 else {
      ch.pos=pos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  curUser.spendAndNext(1f);
}",0.9835796387520526
164205,"@Override public String prompt(){
  return Messages.get(this,""String_Node_Str"");
}","@Override public String prompt(){
  return Messages.get(LloydsBeacon.class,""String_Node_Str"");
}",0.8876404494382022
164206,"private static void layoutButtons(ArrayList<RedButton> line,float extraWidth,float y){
  if (line == null || line.size() == 0 || extraWidth == 0)   return;
  if (line.size() == 1) {
    line.get(0).setSize(line.get(0).width() + extraWidth,BUTTON_HEIGHT);
    return;
  }
  ArrayList<RedButton> lineByWidths=new ArrayList<>(line);
  Collections.sort(lineByWidths,widthComparator);
  RedButton smallest, middle, largest;
  smallest=lineByWidths.get(0);
  middle=lineByWidths.get(1);
  largest=null;
  if (lineByWidths.size() == 3) {
    largest=lineByWidths.get(2);
  }
  float btnDiff=middle.width() - smallest.width();
  smallest.setSize(smallest.width() + Math.min(btnDiff,extraWidth),BUTTON_HEIGHT);
  extraWidth-=btnDiff;
  if (extraWidth > 0) {
    if (largest == null) {
      smallest.setSize(smallest.width() + extraWidth / 2,BUTTON_HEIGHT);
      middle.setSize(middle.width() + extraWidth / 2,BUTTON_HEIGHT);
    }
 else {
      btnDiff=largest.width() - smallest.width();
      smallest.setSize(smallest.width() + Math.min(btnDiff,extraWidth / 2),BUTTON_HEIGHT);
      middle.setSize(middle.width() + Math.min(btnDiff,extraWidth / 2),BUTTON_HEIGHT);
      extraWidth-=btnDiff * 2;
      if (extraWidth > 0) {
        smallest.setSize(smallest.width() + extraWidth / 3,BUTTON_HEIGHT);
        middle.setSize(middle.width() + extraWidth / 3,BUTTON_HEIGHT);
        largest.setSize(largest.width() + extraWidth / 3,BUTTON_HEIGHT);
      }
    }
  }
  float x=0;
  for (  RedButton btn : line) {
    btn.setPos(x,y);
    x+=btn.width() + 1;
  }
}","private static void layoutButtons(ArrayList<RedButton> line,float extraWidth,float y){
  if (line == null || line.size() == 0 || extraWidth == 0)   return;
  if (line.size() == 1) {
    line.get(0).setSize(line.get(0).width() + extraWidth,BUTTON_HEIGHT);
    line.get(0).setPos(0,y);
    return;
  }
  ArrayList<RedButton> lineByWidths=new ArrayList<>(line);
  Collections.sort(lineByWidths,widthComparator);
  RedButton smallest, middle, largest;
  smallest=lineByWidths.get(0);
  middle=lineByWidths.get(1);
  largest=null;
  if (lineByWidths.size() == 3) {
    largest=lineByWidths.get(2);
  }
  float btnDiff=middle.width() - smallest.width();
  smallest.setSize(smallest.width() + Math.min(btnDiff,extraWidth),BUTTON_HEIGHT);
  extraWidth-=btnDiff;
  if (extraWidth > 0) {
    if (largest == null) {
      smallest.setSize(smallest.width() + extraWidth / 2,BUTTON_HEIGHT);
      middle.setSize(middle.width() + extraWidth / 2,BUTTON_HEIGHT);
    }
 else {
      btnDiff=largest.width() - smallest.width();
      smallest.setSize(smallest.width() + Math.min(btnDiff,extraWidth / 2),BUTTON_HEIGHT);
      middle.setSize(middle.width() + Math.min(btnDiff,extraWidth / 2),BUTTON_HEIGHT);
      extraWidth-=btnDiff * 2;
      if (extraWidth > 0) {
        smallest.setSize(smallest.width() + extraWidth / 3,BUTTON_HEIGHT);
        middle.setSize(middle.width() + extraWidth / 3,BUTTON_HEIGHT);
        largest.setSize(largest.width() + extraWidth / 3,BUTTON_HEIGHT);
      }
    }
  }
  float x=0;
  for (  RedButton btn : line) {
    btn.setPos(x,y);
    x+=btn.width() + 1;
  }
}",0.990743696137887
164207,"@Override protected void onClick(){
  if (Badges.isUnlocked(Badges.Badge.VICTORY)) {
    StartScene.this.add(new WndChallenges(ShatteredPixelDungeon.challenges(),true){
      public void onBackPressed(){
        super.onBackPressed();
        image.copy(Icons.get(ShatteredPixelDungeon.challenges() > 0 ? Icons.CHALLENGE_ON : Icons.CHALLENGE_OFF));
      }
    }
);
  }
 else {
    StartScene.this.add(new WndMessage(Messages.get(this,""String_Node_Str"")));
  }
}","@Override protected void onClick(){
  if (Badges.isUnlocked(Badges.Badge.VICTORY)) {
    StartScene.this.add(new WndChallenges(ShatteredPixelDungeon.challenges(),true){
      public void onBackPressed(){
        super.onBackPressed();
        image.copy(Icons.get(ShatteredPixelDungeon.challenges() > 0 ? Icons.CHALLENGE_ON : Icons.CHALLENGE_OFF));
      }
    }
);
  }
 else {
    StartScene.this.add(new WndMessage(Messages.get(StartScene.class,""String_Node_Str"")));
  }
}",0.9807692307692308
164208,"public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    ItemSprite sprite=heap.sprite=new ItemSprite();
    sprite.link(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.seen=Dungeon.visible[cell];
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}","public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade || item instanceof ScrollOfMagicalInfusion)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    ItemSprite sprite=heap.sprite=new ItemSprite();
    sprite.link(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.seen=Dungeon.visible[cell];
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}",0.9888917592353396
164209,"public static WndBag sell(){
  return GameScene.selectItem(itemSelector,WndBag.Mode.FOR_SALE,""String_Node_Str"");
}","public static WndBag sell(){
  return GameScene.selectItem(itemSelector,WndBag.Mode.FOR_SALE,Messages.get(Shopkeeper.class,""String_Node_Str""));
}",0.8803088803088803
164210,"@Override public String prompt(){
  return Messages.get(this,""String_Node_Str"");
}","@Override public String prompt(){
  return Messages.get(EtherealChains.class,""String_Node_Str"");
}",0.9111111111111112
164211,"@Override public void onSelect(Integer target){
  if (target != null && (Dungeon.level.visited[target] || Dungeon.level.mapped[target])) {
    int missileProperties=(Dungeon.depth == 10 || Dungeon.depth == 15 || Dungeon.depth == 20 || Dungeon.depth == 25) ? Ballistica.PROJECTILE : Ballistica.STOP_CHARS | Ballistica.STOP_TARGET;
    final Ballistica chain=new Ballistica(curUser.pos,target,missileProperties);
    if (Actor.findChar(chain.collisionPos) != null) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null) {
          newPos=i;
          break;
        }
      }
      if (newPos == -1) {
        GLog.w(Messages.get(this,""String_Node_Str""));
      }
 else {
        final int newMobPos=newPos;
        final Char affected=Actor.findChar(chain.collisionPos);
        int chargeUse=Level.distance(affected.pos,newMobPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(this,""String_Node_Str""));
          return;
        }
 else         if (affected.properties().contains(Char.Property.IMMOVABLE)) {
          GLog.w(Messages.get(this,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,affected.pos,new Callback(){
          public void call(){
            Actor.add(new Pushing(affected,affected.pos,newMobPos,new Callback(){
              public void call(){
                Dungeon.level.press(newMobPos,affected);
              }
            }
));
            affected.pos=newMobPos;
            Dungeon.observe();
            curUser.spendAndNext(1f);
          }
        }
));
      }
    }
 else     if (Level.solid[chain.path.get(chain.dist)] || (chain.dist > 0 && Level.solid[chain.path.get(chain.dist - 1)]) || (chain.path.size() > chain.dist + 1 && Level.solid[chain.path.get(chain.dist + 1)])|| (chain.path.size() == chain.dist + 1)) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null)         newPos=i;
      }
      if (newPos == -1) {
        GLog.w(Messages.get(this,""String_Node_Str""));
      }
 else {
        final int newHeroPos=newPos;
        int chargeUse=Level.distance(curUser.pos,newHeroPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(this,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,target,new Callback(){
          public void call(){
            Actor.add(new Pushing(curUser,curUser.pos,newHeroPos,new Callback(){
              public void call(){
                Dungeon.level.press(newHeroPos,curUser);
              }
            }
));
            curUser.spendAndNext(1f);
            curUser.pos=newHeroPos;
            Dungeon.observe();
          }
        }
));
      }
    }
 else {
      GLog.i(Messages.get(this,""String_Node_Str""));
    }
  }
}","@Override public void onSelect(Integer target){
  if (target != null && (Dungeon.level.visited[target] || Dungeon.level.mapped[target])) {
    int missileProperties=(Dungeon.depth == 10 || Dungeon.depth == 15 || Dungeon.depth == 20 || Dungeon.depth == 25) ? Ballistica.PROJECTILE : Ballistica.STOP_CHARS | Ballistica.STOP_TARGET;
    final Ballistica chain=new Ballistica(curUser.pos,target,missileProperties);
    if (Actor.findChar(chain.collisionPos) != null) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null) {
          newPos=i;
          break;
        }
      }
      if (newPos == -1) {
        GLog.w(Messages.get(this,""String_Node_Str""));
      }
 else {
        final int newMobPos=newPos;
        final Char affected=Actor.findChar(chain.collisionPos);
        int chargeUse=Level.distance(affected.pos,newMobPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else         if (affected.properties().contains(Char.Property.IMMOVABLE)) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,affected.pos,new Callback(){
          public void call(){
            Actor.add(new Pushing(affected,affected.pos,newMobPos,new Callback(){
              public void call(){
                Dungeon.level.press(newMobPos,affected);
              }
            }
));
            affected.pos=newMobPos;
            Dungeon.observe();
            curUser.spendAndNext(1f);
          }
        }
));
      }
    }
 else     if (Level.solid[chain.path.get(chain.dist)] || (chain.dist > 0 && Level.solid[chain.path.get(chain.dist - 1)]) || (chain.path.size() > chain.dist + 1 && Level.solid[chain.path.get(chain.dist + 1)])|| (chain.path.size() == chain.dist + 1)) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null)         newPos=i;
      }
      if (newPos == -1) {
        GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
      }
 else {
        final int newHeroPos=newPos;
        int chargeUse=Level.distance(curUser.pos,newHeroPos);
        if (chargeUse > charge) {
          GLog.w(Messages.get(EtherealChains.class,""String_Node_Str""));
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,target,new Callback(){
          public void call(){
            Actor.add(new Pushing(curUser,curUser.pos,newHeroPos,new Callback(){
              public void call(){
                Dungeon.level.press(newHeroPos,curUser);
              }
            }
));
            curUser.spendAndNext(1f);
            curUser.pos=newHeroPos;
            Dungeon.observe();
          }
        }
));
      }
    }
 else {
      GLog.i(Messages.get(EtherealChains.class,""String_Node_Str""));
    }
  }
}",0.9825894270338716
164212,"@Override protected void layout(){
  super.layout();
  shield.x=x;
  shield.y=y + (height - shield.height) / 2;
  position.x=shield.x + (shield.width - position.width()) / 2;
  position.y=shield.y + (shield.height - position.height()) / 2 + 1;
  if (flare != null) {
    flare.point(shield.center());
  }
  classIcon.x=x + width - classIcon.width;
  classIcon.y=shield.y;
  level.x=classIcon.x + (classIcon.width - level.width()) / 2;
  level.y=classIcon.y + (classIcon.height - level.height()) / 2 + 1;
  steps.x=x + width - steps.width - classIcon.width;
  steps.y=shield.y;
  depth.x=steps.x + (steps.width - depth.width()) / 2;
  depth.y=steps.y + (steps.height - depth.height()) / 2 + 1;
  desc.maxWidth((int)(steps.x - desc.left()));
  desc.setPos(shield.x + shield.width + GAP,shield.y + (shield.height - desc.height()) / 2 + 1);
}","@Override protected void layout(){
  super.layout();
  shield.x=x;
  shield.y=y + (height - shield.height) / 2;
  position.x=shield.x + (shield.width - position.width()) / 2;
  position.y=shield.y + (shield.height - position.height()) / 2 + 1;
  if (flare != null) {
    flare.point(shield.center());
  }
  classIcon.x=x + width - classIcon.width;
  classIcon.y=shield.y;
  level.x=classIcon.x + (classIcon.width - level.width()) / 2;
  level.y=classIcon.y + (classIcon.height - level.height()) / 2 + 1;
  steps.x=x + width - steps.width - classIcon.width;
  steps.y=shield.y;
  depth.x=steps.x + (steps.width - depth.width()) / 2;
  depth.y=steps.y + (steps.height - depth.height()) / 2 + 1;
  desc.maxWidth((int)(steps.x - (shield.x + shield.width + GAP)));
  desc.setPos(shield.x + shield.width + GAP,shield.y + (shield.height - desc.height()) / 2 + 1);
}",0.9764150943396226
164213,"public GameLog(){
  super();
  GLog.update.add(this);
  recreateLines();
}","public GameLog(){
  super();
  GLog.update.replace(this);
  recreateLines();
}",0.9473684210526316
164214,"@Override protected void nowhereToRun(){
  if (buff(Terror.class) == null && buff(Corruption.class) == null) {
    if (enemySeen) {
      sprite.showStatus(CharSprite.NEGATIVE,Messages.get(this,""String_Node_Str""));
      state=HUNTING;
    }
 else {
      int count=32;
      int newPos;
      do {
        newPos=Dungeon.level.randomRespawnCell();
        if (count-- <= 0) {
          break;
        }
      }
 while (newPos == -1 || Dungeon.visible[newPos] || Level.distance(newPos,pos) < (count / 3));
      if (newPos != -1) {
        if (Dungeon.visible[pos])         CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
        pos=newPos;
        sprite.place(pos);
        sprite.visible=Dungeon.visible[pos];
        if (Dungeon.visible[pos])         CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
      }
      if (item != null)       GLog.n(Messages.get(this,""String_Node_Str"",item.name()));
      item=null;
      state=WANDERING;
    }
  }
 else {
    super.nowhereToRun();
  }
}","@Override protected void nowhereToRun(){
  if (buff(Terror.class) == null && buff(Corruption.class) == null) {
    if (enemySeen) {
      sprite.showStatus(CharSprite.NEGATIVE,Messages.get(Mob.class,""String_Node_Str""));
      state=HUNTING;
    }
 else {
      int count=32;
      int newPos;
      do {
        newPos=Dungeon.level.randomRespawnCell();
        if (count-- <= 0) {
          break;
        }
      }
 while (newPos == -1 || Dungeon.visible[newPos] || Level.distance(newPos,pos) < (count / 3));
      if (newPos != -1) {
        if (Dungeon.visible[pos])         CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
        pos=newPos;
        sprite.place(pos);
        sprite.visible=Dungeon.visible[pos];
        if (Dungeon.visible[pos])         CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
      }
      if (item != null)       GLog.n(Messages.get(this,""String_Node_Str"",item.name()));
      item=null;
      state=WANDERING;
    }
  }
 else {
    super.nowhereToRun();
  }
}",0.9945517582961864
164215,"public void showParams(boolean TL,boolean TR,boolean BR){
  if (TL)   add(topLeft);
 else   remove(topLeft);
  if (TR)   add(topRight);
 else   remove(topRight);
  if (BR)   add(bottomRight);
 else   remove(bottomRight);
}","public void showParams(boolean TL,boolean TR,boolean BR){
  if (TL)   add(topLeft);
 else   remove(topLeft);
  if (TR)   add(topRight);
 else   remove(topRight);
  if (BR)   add(bottomRight);
 else   remove(bottomRight);
  iconVisible=BR;
}",0.961038961038961
164216,"public void item(Item item){
  if (item == null) {
    active=false;
    topLeft.visible=topRight.visible=bottomRight.visible=false;
    icon.visible(false);
  }
 else {
    active=true;
    topLeft.visible=topRight.visible=bottomRight.visible=true;
    icon.visible(true);
    icon.view(item);
    topLeft.text(item.status());
    boolean isArmor=item instanceof Armor;
    boolean isWeapon=item instanceof Weapon;
    if (isArmor || isWeapon) {
      if (item.levelKnown || (isWeapon && !(item instanceof MeleeWeapon))) {
        int str=isArmor ? ((Armor)item).STR : ((Weapon)item).STR;
        topRight.text(Utils.format(TXT_STRENGTH,str));
        if (str > Dungeon.hero.STR()) {
          topRight.hardlight(DEGRADED);
        }
 else {
          topRight.resetColor();
        }
      }
 else {
        topRight.text(Utils.format(TXT_TYPICAL_STR,isArmor ? ((Armor)item).typicalSTR() : ((MeleeWeapon)item).typicalSTR()));
        topRight.hardlight(WARNING);
      }
      topRight.measure();
    }
 else     if (item instanceof Key && !(item instanceof SkeletonKey)) {
      topRight.text(Utils.format(TXT_KEY_DEPTH,((Key)item).depth));
      topRight.measure();
    }
 else {
      topRight.text(null);
    }
    int level=item.visiblyUpgraded();
    if (level != 0) {
      bottomRight.text(item.levelKnown ? Utils.format(TXT_LEVEL,level) : TXT_CURSED);
      bottomRight.measure();
      bottomRight.hardlight(level > 0 ? UPGRADED : DEGRADED);
    }
 else     if (item instanceof Scroll || item instanceof Potion) {
      bottomRight.text(null);
      Integer iconInt;
      if (item instanceof Scroll) {
        iconInt=((Scroll)item).initials();
      }
 else {
        iconInt=((Potion)item).initials();
      }
      if (iconInt != null) {
        bottomRightIcon=new Image(Assets.CONS_ICONS);
        int left=iconInt * 7;
        int top=item instanceof Potion ? 0 : 8;
        bottomRightIcon.frame(left,top,7,8);
        add(bottomRightIcon);
      }
    }
 else {
      bottomRight.text(null);
    }
    layout();
  }
}","public void item(Item item){
  if (item == null) {
    active=false;
    topLeft.visible=topRight.visible=bottomRight.visible=false;
    icon.visible(false);
  }
 else {
    active=true;
    topLeft.visible=topRight.visible=bottomRight.visible=true;
    icon.visible(true);
    icon.view(item);
    topLeft.text(item.status());
    boolean isArmor=item instanceof Armor;
    boolean isWeapon=item instanceof Weapon;
    if (isArmor || isWeapon) {
      if (item.levelKnown || (isWeapon && !(item instanceof MeleeWeapon))) {
        int str=isArmor ? ((Armor)item).STR : ((Weapon)item).STR;
        topRight.text(Utils.format(TXT_STRENGTH,str));
        if (str > Dungeon.hero.STR()) {
          topRight.hardlight(DEGRADED);
        }
 else {
          topRight.resetColor();
        }
      }
 else {
        topRight.text(Utils.format(TXT_TYPICAL_STR,isArmor ? ((Armor)item).typicalSTR() : ((MeleeWeapon)item).typicalSTR()));
        topRight.hardlight(WARNING);
      }
      topRight.measure();
    }
 else     if (item instanceof Key && !(item instanceof SkeletonKey)) {
      topRight.text(Utils.format(TXT_KEY_DEPTH,((Key)item).depth));
      topRight.measure();
    }
 else {
      topRight.text(null);
    }
    int level=item.visiblyUpgraded();
    if (level != 0) {
      bottomRight.text(item.levelKnown ? Utils.format(TXT_LEVEL,level) : TXT_CURSED);
      bottomRight.measure();
      bottomRight.hardlight(level > 0 ? UPGRADED : DEGRADED);
    }
 else     if (item instanceof Scroll || item instanceof Potion) {
      bottomRight.text(null);
      Integer iconInt;
      if (item instanceof Scroll) {
        iconInt=((Scroll)item).initials();
      }
 else {
        iconInt=((Potion)item).initials();
      }
      if (iconInt != null && iconVisible) {
        bottomRightIcon=new Image(Assets.CONS_ICONS);
        int left=iconInt * 7;
        int top=item instanceof Potion ? 0 : 8;
        bottomRightIcon.frame(left,top,7,8);
        add(bottomRightIcon);
      }
    }
 else {
      bottomRight.text(null);
    }
    layout();
  }
}",0.9963334148130042
164217,"@Override public boolean act(){
  LockedFloor lock=target.buff(LockedFloor.class);
  if (charge < chargeCap && !cursed && (lock == null || lock.regenOn())) {
    partialCharge+=0.25f + (0.015f * level());
    if (partialCharge >= 36) {
      charge++;
      partialCharge-=36;
      if (charge == chargeCap)       image=ItemSpriteSheet.ARTIFACT_HORN4;
 else       if (charge >= 7)       image=ItemSpriteSheet.ARTIFACT_HORN3;
 else       if (charge >= 3)       image=ItemSpriteSheet.ARTIFACT_HORN2;
 else       image=ItemSpriteSheet.ARTIFACT_HORN1;
      if (charge == chargeCap) {
        GLog.p(Messages.get(this,""String_Node_Str""));
        partialCharge=0;
      }
      updateQuickslot();
    }
  }
 else   partialCharge=0;
  spend(TICK);
  return true;
}","@Override public boolean act(){
  LockedFloor lock=target.buff(LockedFloor.class);
  if (charge < chargeCap && !cursed && (lock == null || lock.regenOn())) {
    partialCharge+=0.25f + (0.015f * level());
    if (partialCharge >= 36) {
      charge++;
      partialCharge-=36;
      if (charge == chargeCap)       image=ItemSpriteSheet.ARTIFACT_HORN4;
 else       if (charge >= 7)       image=ItemSpriteSheet.ARTIFACT_HORN3;
 else       if (charge >= 3)       image=ItemSpriteSheet.ARTIFACT_HORN2;
 else       image=ItemSpriteSheet.ARTIFACT_HORN1;
      if (charge == chargeCap) {
        GLog.p(Messages.get(HornOfPlenty.class,""String_Node_Str""));
        partialCharge=0;
      }
      updateQuickslot();
    }
  }
 else   partialCharge=0;
  spend(TICK);
  return true;
}",0.9869451697127938
164218,"@Override protected void layout(){
  health.visible=!Float.isNaN(healthLvl);
  imIcon.x=x;
  imIcon.y=y;
  tfLabel.setPos(imIcon.x + imIcon.width() + GAP,imIcon.height > tfLabel.height() ? imIcon.y + (imIcon.height() - tfLabel.height()) / 2 : imIcon.y);
  tfLabel.maxWidth((int)(width - tfLabel.left()));
  if (health.visible) {
    health.setRect(tfLabel.left(),Math.max(tfLabel.top() + tfLabel.height(),imIcon.y + imIcon.height() - health.height()),tfLabel.maxWidth(),0);
    height=health.bottom();
  }
 else {
    height=Math.max(imIcon.height(),tfLabel.height());
  }
}","@Override protected void layout(){
  health.visible=!Float.isNaN(healthLvl);
  imIcon.x=x;
  imIcon.y=y;
  tfLabel.maxWidth((int)(width - (imIcon.x + imIcon.width() + GAP)));
  tfLabel.setPos(imIcon.x + imIcon.width() + GAP,imIcon.height > tfLabel.height() ? imIcon.y + (imIcon.height() - tfLabel.height()) / 2 : imIcon.y);
  if (health.visible) {
    health.setRect(tfLabel.left(),Math.max(tfLabel.top() + tfLabel.height(),imIcon.y + imIcon.height() - health.height()),tfLabel.maxWidth(),0);
    height=health.bottom();
  }
 else {
    height=Math.max(imIcon.height(),tfLabel.height());
  }
}",0.8963153384747216
164219,"public static void setup(String region){
  strings=new HashMap<>();
  Locale locale=new Locale(region);
  for (  String file : prop_files) {
    ResourceBundle bundle=ResourceBundle.getBundle(file,locale);
    Enumeration<String> keys=bundle.getKeys();
    while (keys.hasMoreElements()) {
      String key=keys.nextElement();
      strings.put(key,bundle.getString(key));
    }
  }
}","public static void setup(String region){
  strings=new HashMap<>();
  Locale locale=new Locale(region);
  for (  String file : prop_files) {
    ResourceBundle bundle=ResourceBundle.getBundle(file,locale);
    Enumeration<String> keys=bundle.getKeys();
    while (keys.hasMoreElements()) {
      String key=keys.nextElement();
      String value=bundle.getString(key);
      if (android.os.Build.VERSION.SDK_INT == 8) {
        try {
          value=new String(value.getBytes(""String_Node_Str""),""String_Node_Str"");
        }
 catch (        Exception e) {
        }
      }
      strings.put(key,value);
    }
  }
}",0.7107107107107107
164220,"@Override public void trigger(){
  if (Dungeon.visible[pos]) {
    Sample.INSTANCE.play(Assets.SND_TRAP);
  }
  reveal();
  activate();
}","@Override public void trigger(){
  if (Dungeon.visible[pos]) {
    Sample.INSTANCE.play(Assets.SND_TRAP);
  }
  reveal();
  Level.set(pos,Terrain.TRAP);
  activate();
}",0.898360655737705
164221,"@Override protected void onClick(){
  if (thievery.steal(price)) {
    Hero hero=Dungeon.hero;
    Item item=heap.pickUp();
    GLog.i(Messages.get(this,""String_Node_Str"",item.name()));
    hide();
    if (!item.doPickUp(hero)) {
      Dungeon.level.drop(item,heap.pos).sprite.drop();
    }
  }
 else {
    for (    Mob mob : Dungeon.level.mobs) {
      if (mob instanceof Shopkeeper) {
        mob.yell(Messages.get(mob,""String_Node_Str""));
        ((Shopkeeper)mob).flee();
        break;
      }
    }
    hide();
  }
}","@Override protected void onClick(){
  if (thievery.steal(price)) {
    Hero hero=Dungeon.hero;
    Item item=heap.pickUp();
    GLog.i(Messages.get(WndTradeItem.class,""String_Node_Str"",item.name()));
    hide();
    if (!item.doPickUp(hero)) {
      Dungeon.level.drop(item,heap.pos).sprite.drop();
    }
  }
 else {
    for (    Mob mob : Dungeon.level.mobs) {
      if (mob instanceof Shopkeeper) {
        mob.yell(Messages.get(mob,""String_Node_Str""));
        ((Shopkeeper)mob).flee();
        break;
      }
    }
    hide();
  }
}",0.9810964083175804
164222,"public WndTradeItem(final Heap heap,boolean canBuy){
  super();
  Item item=heap.peek();
  float pos=createDescription(item,true);
  final int price=price(item);
  if (canBuy) {
    RedButton btnBuy=new RedButton(Messages.get(this,""String_Node_Str"",price)){
      @Override protected void onClick(){
        hide();
        buy(heap);
      }
    }
;
    btnBuy.setRect(0,pos + GAP,WIDTH,BTN_HEIGHT);
    btnBuy.enable(price <= Dungeon.gold);
    add(btnBuy);
    RedButton btnCancel=new RedButton(Messages.get(this,""String_Node_Str"")){
      @Override protected void onClick(){
        hide();
      }
    }
;
    final MasterThievesArmband.Thievery thievery=Dungeon.hero.buff(MasterThievesArmband.Thievery.class);
    if (thievery != null) {
      final float chance=thievery.stealChance(price);
      RedButton btnSteal=new RedButton(Messages.get(this,""String_Node_Str"",Math.min(100,(int)(chance * 100)))){
        @Override protected void onClick(){
          if (thievery.steal(price)) {
            Hero hero=Dungeon.hero;
            Item item=heap.pickUp();
            GLog.i(Messages.get(this,""String_Node_Str"",item.name()));
            hide();
            if (!item.doPickUp(hero)) {
              Dungeon.level.drop(item,heap.pos).sprite.drop();
            }
          }
 else {
            for (            Mob mob : Dungeon.level.mobs) {
              if (mob instanceof Shopkeeper) {
                mob.yell(Messages.get(mob,""String_Node_Str""));
                ((Shopkeeper)mob).flee();
                break;
              }
            }
            hide();
          }
        }
      }
;
      btnSteal.setRect(0,btnBuy.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnSteal);
      btnCancel.setRect(0,btnSteal.bottom() + GAP,WIDTH,BTN_HEIGHT);
    }
 else     btnCancel.setRect(0,btnBuy.bottom() + GAP,WIDTH,BTN_HEIGHT);
    add(btnCancel);
    resize(WIDTH,(int)btnCancel.bottom());
  }
 else {
    resize(WIDTH,(int)pos);
  }
}","public WndTradeItem(final Heap heap,boolean canBuy){
  super();
  Item item=heap.peek();
  float pos=createDescription(item,true);
  final int price=price(item);
  if (canBuy) {
    RedButton btnBuy=new RedButton(Messages.get(this,""String_Node_Str"",price)){
      @Override protected void onClick(){
        hide();
        buy(heap);
      }
    }
;
    btnBuy.setRect(0,pos + GAP,WIDTH,BTN_HEIGHT);
    btnBuy.enable(price <= Dungeon.gold);
    add(btnBuy);
    RedButton btnCancel=new RedButton(Messages.get(this,""String_Node_Str"")){
      @Override protected void onClick(){
        hide();
      }
    }
;
    final MasterThievesArmband.Thievery thievery=Dungeon.hero.buff(MasterThievesArmband.Thievery.class);
    if (thievery != null) {
      final float chance=thievery.stealChance(price);
      RedButton btnSteal=new RedButton(Messages.get(this,""String_Node_Str"",Math.min(100,(int)(chance * 100)))){
        @Override protected void onClick(){
          if (thievery.steal(price)) {
            Hero hero=Dungeon.hero;
            Item item=heap.pickUp();
            GLog.i(Messages.get(WndTradeItem.class,""String_Node_Str"",item.name()));
            hide();
            if (!item.doPickUp(hero)) {
              Dungeon.level.drop(item,heap.pos).sprite.drop();
            }
          }
 else {
            for (            Mob mob : Dungeon.level.mobs) {
              if (mob instanceof Shopkeeper) {
                mob.yell(Messages.get(mob,""String_Node_Str""));
                ((Shopkeeper)mob).flee();
                break;
              }
            }
            hide();
          }
        }
      }
;
      btnSteal.setRect(0,btnBuy.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnSteal);
      btnCancel.setRect(0,btnSteal.bottom() + GAP,WIDTH,BTN_HEIGHT);
    }
 else     btnCancel.setRect(0,btnBuy.bottom() + GAP,WIDTH,BTN_HEIGHT);
    add(btnCancel);
    resize(WIDTH,(int)btnCancel.bottom());
  }
 else {
    resize(WIDTH,(int)pos);
  }
}",0.9948953547728432
164223,"public WndInfoBuff(Buff buff){
  super();
  IconTitle titlebar=new IconTitle();
  icons=TextureCache.get(Assets.BUFFS_LARGE);
  film=new TextureFilm(icons,16,16);
  Image buffIcon=new Image(icons);
  buffIcon.frame(film.get(buff.icon()));
  titlebar.icon(buffIcon);
  titlebar.label(Utils.capitalize(buff.toString()),Window.TITLE_COLOR);
  titlebar.setRect(0,0,WIDTH,0);
  add(titlebar);
  RenderedTextMultiline txtInfo=PixelScene.renderMultiline(buff.desc(),6);
  txtInfo.maxWidth(width);
  txtInfo.setPos(titlebar.left(),titlebar.bottom() + GAP);
  add(txtInfo);
  resize(WIDTH,(int)(txtInfo.top() + txtInfo.height()));
}","public WndInfoBuff(Buff buff){
  super();
  IconTitle titlebar=new IconTitle();
  icons=TextureCache.get(Assets.BUFFS_LARGE);
  film=new TextureFilm(icons,16,16);
  Image buffIcon=new Image(icons);
  buffIcon.frame(film.get(buff.icon()));
  titlebar.icon(buffIcon);
  titlebar.label(Utils.capitalize(buff.toString()),Window.TITLE_COLOR);
  titlebar.setRect(0,0,WIDTH,0);
  add(titlebar);
  RenderedTextMultiline txtInfo=PixelScene.renderMultiline(buff.desc(),6);
  txtInfo.maxWidth(WIDTH);
  txtInfo.setPos(titlebar.left(),titlebar.bottom() + GAP);
  add(txtInfo);
  resize(WIDTH,(int)(txtInfo.top() + txtInfo.height()));
}",0.9919743178170144
164224,"public static RenderedText renderText(String text,int size){
  int zoom=Math.min(defaultZoom,5);
  RenderedText result=new RenderedText(text,size * zoom);
  result.scale.set(1 / (float)zoom);
  return result;
}","public static RenderedText renderText(String text,int size){
  int zoom=Math.min(defaultZoom,5);
  RenderedText result=new RenderedText(text,size * zoom);
  result.scale.set(1 / (float)zoom + .001f);
  return result;
}",0.9813084112149532
164225,"public static RenderedTextMultiline renderMultiline(String text,int size){
  int zoom=Math.min(defaultZoom,5);
  RenderedTextMultiline result=new RenderedTextMultiline(text,size * zoom);
  result.zoom(1 / (float)zoom);
  return result;
}","public static RenderedTextMultiline renderMultiline(String text,int size){
  int zoom=Math.min(defaultZoom,5);
  RenderedTextMultiline result=new RenderedTextMultiline(text,size * zoom);
  result.zoom(1 / (float)zoom + .001f);
  return result;
}",0.983402489626556
164226,"private static void add(Actor actor,float time){
  if (all.contains(actor)) {
    return;
  }
  ids.put(actor.id(),actor);
  all.add(actor);
  actor.time=time;
  actor.onAdd();
  if (actor instanceof Char) {
    Char ch=(Char)actor;
    chars.add(ch);
    for (    Buff buff : ch.buffs()) {
      all.add(buff);
      buff.onAdd();
    }
  }
}","private static void add(Actor actor,float time){
  if (all.contains(actor)) {
    return;
  }
  ids.put(actor.id(),actor);
  all.add(actor);
  actor.time+=time;
  actor.onAdd();
  if (actor instanceof Char) {
    Char ch=(Char)actor;
    chars.add(ch);
    for (    Buff buff : ch.buffs()) {
      all.add(buff);
      buff.onAdd();
    }
  }
}",0.9985443959243084
164227,"public static void init(){
  addDelayed(Dungeon.hero,-Float.MIN_VALUE);
  for (  Mob mob : Dungeon.level.mobs) {
    add(mob);
  }
  for (  Blob blob : Dungeon.level.blobs.values()) {
    add(blob);
  }
  current=null;
}","public static void init(){
  add(Dungeon.hero);
  for (  Mob mob : Dungeon.level.mobs) {
    add(mob);
  }
  for (  Blob blob : Dungeon.level.blobs.values()) {
    add(blob);
  }
  current=null;
}",0.9423076923076924
164228,"@Override public void onSelect(Integer target){
  if (target != null && (Dungeon.level.visited[target] || Dungeon.level.mapped[target])) {
    int missileProperties=(Dungeon.depth == 10 || Dungeon.depth == 15 || Dungeon.depth == 20 || Dungeon.depth == 25) ? Ballistica.PROJECTILE : Ballistica.STOP_CHARS | Ballistica.STOP_TARGET;
    final Ballistica chain=new Ballistica(curUser.pos,target,missileProperties);
    if (Actor.findChar(chain.collisionPos) != null) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null) {
          newPos=i;
          break;
        }
      }
      if (newPos == -1) {
        GLog.w(""String_Node_Str"");
      }
 else {
        final int newMobPos=newPos;
        final Char affected=Actor.findChar(chain.collisionPos);
        int chargeUse=Level.distance(affected.pos,newMobPos);
        if (chargeUse > charge) {
          GLog.w(""String_Node_Str"");
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,affected.pos,new Callback(){
          public void call(){
            Actor.add(new Pushing(affected,affected.pos,newMobPos));
            affected.pos=newMobPos;
            Dungeon.observe();
            curUser.spendAndNext(1f);
            Dungeon.level.press(newMobPos,affected);
          }
        }
));
      }
    }
 else     if (Level.solid[chain.path.get(chain.dist)] || (chain.dist > 0 && Level.solid[chain.path.get(chain.dist - 1)]) || (chain.path.size() > chain.dist + 1 && Level.solid[chain.path.get(chain.dist + 1)])|| (chain.path.size() == chain.dist + 1)) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null)         newPos=i;
      }
      if (newPos == -1) {
        GLog.w(""String_Node_Str"");
      }
 else {
        final int newHeroPos=newPos;
        int chargeUse=Level.distance(curUser.pos,newHeroPos);
        if (chargeUse > charge) {
          GLog.w(""String_Node_Str"");
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,target,new Callback(){
          public void call(){
            Actor.add(new Pushing(curUser,curUser.pos,newHeroPos,new Callback(){
              public void call(){
                Dungeon.level.press(newHeroPos,curUser);
              }
            }
));
            curUser.spendAndNext(1f);
            curUser.pos=newHeroPos;
            Dungeon.observe();
          }
        }
));
      }
    }
 else {
      GLog.i(""String_Node_Str"");
    }
  }
}","@Override public void onSelect(Integer target){
  if (target != null && (Dungeon.level.visited[target] || Dungeon.level.mapped[target])) {
    int missileProperties=(Dungeon.depth == 10 || Dungeon.depth == 15 || Dungeon.depth == 20 || Dungeon.depth == 25) ? Ballistica.PROJECTILE : Ballistica.STOP_CHARS | Ballistica.STOP_TARGET;
    final Ballistica chain=new Ballistica(curUser.pos,target,missileProperties);
    if (Actor.findChar(chain.collisionPos) != null) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null) {
          newPos=i;
          break;
        }
      }
      if (newPos == -1) {
        GLog.w(""String_Node_Str"");
      }
 else {
        final int newMobPos=newPos;
        final Char affected=Actor.findChar(chain.collisionPos);
        int chargeUse=Level.distance(affected.pos,newMobPos);
        if (chargeUse > charge) {
          GLog.w(""String_Node_Str"");
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,affected.pos,new Callback(){
          public void call(){
            Actor.add(new Pushing(affected,affected.pos,newMobPos,new Callback(){
              public void call(){
                Dungeon.level.press(newMobPos,affected);
              }
            }
));
            affected.pos=newMobPos;
            Dungeon.observe();
            curUser.spendAndNext(1f);
          }
        }
));
      }
    }
 else     if (Level.solid[chain.path.get(chain.dist)] || (chain.dist > 0 && Level.solid[chain.path.get(chain.dist - 1)]) || (chain.path.size() > chain.dist + 1 && Level.solid[chain.path.get(chain.dist + 1)])|| (chain.path.size() == chain.dist + 1)) {
      int newPos=-1;
      for (      int i : chain.subPath(1,chain.dist)) {
        if (!Level.solid[i] && Actor.findChar(i) == null)         newPos=i;
      }
      if (newPos == -1) {
        GLog.w(""String_Node_Str"");
      }
 else {
        final int newHeroPos=newPos;
        int chargeUse=Level.distance(curUser.pos,newHeroPos);
        if (chargeUse > charge) {
          GLog.w(""String_Node_Str"");
          return;
        }
 else {
          charge-=chargeUse;
          updateQuickslot();
        }
        curUser.busy();
        curUser.sprite.parent.add(new Chains(curUser.pos,target,new Callback(){
          public void call(){
            Actor.add(new Pushing(curUser,curUser.pos,newHeroPos,new Callback(){
              public void call(){
                Dungeon.level.press(newHeroPos,curUser);
              }
            }
));
            curUser.spendAndNext(1f);
            curUser.pos=newHeroPos;
            Dungeon.observe();
          }
        }
));
      }
    }
 else {
      GLog.i(""String_Node_Str"");
    }
  }
}",0.9349406133664244
164229,"@Override protected boolean act(){
  if (Dungeon.level.map[pos] != Terrain.GRASS && Dungeon.level.map[pos] != Terrain.HIGH_GRASS) {
    destroy();
    sprite.die();
    return true;
  }
 else {
    if (enemy == null || !Level.adjacent(pos,enemy.pos)) {
      HP=Math.min(HT,HP + 3);
    }
    return super.act();
  }
}","@Override protected boolean act(){
  if (enemy == null || !Level.adjacent(pos,enemy.pos)) {
    HP=Math.min(HT,HP + 3);
  }
  return super.act();
}",0.632258064516129
164230,"@Override public void damage(int dmg,Object src){
  LockedFloor lock=Dungeon.hero.buff(LockedFloor.class);
  if (lock != null) {
    int multiple=HP > HT / 2 ? 1 : 4;
    lock.addTime(dmg * multiple);
  }
  if (dmg >= HP) {
    ((PrisonBossLevel)Dungeon.level).progress();
    return;
  }
  int beforeHitHP=HP;
  super.damage(dmg,src);
  int hpBracket=HP > HT / 2 ? 12 : 20;
  if (beforeHitHP > HT / 2 && HP <= HT / 2) {
    HP=(HT / 2) - 1;
    yell(""String_Node_Str"");
    ((PrisonBossLevel)Dungeon.level).progress();
    BossHealthBar.bleed(true);
  }
 else   if (beforeHitHP / hpBracket != HP / hpBracket) {
    jump();
  }
}","@Override public void damage(int dmg,Object src){
  LockedFloor lock=Dungeon.hero.buff(LockedFloor.class);
  if (lock != null) {
    int multiple=HP > HT / 2 ? 1 : 4;
    lock.addTime(dmg * multiple);
  }
  if (dmg >= HP) {
    if (state == SLEEPING) {
      state=WANDERING;
    }
    ((PrisonBossLevel)Dungeon.level).progress();
    return;
  }
  int beforeHitHP=HP;
  super.damage(dmg,src);
  int hpBracket=HP > HT / 2 ? 12 : 20;
  if (beforeHitHP > HT / 2 && HP <= HT / 2) {
    HP=(HT / 2) - 1;
    yell(""String_Node_Str"");
    ((PrisonBossLevel)Dungeon.level).progress();
    BossHealthBar.bleed(true);
  }
 else   if (beforeHitHP / hpBracket != HP / hpBracket) {
    jump();
  }
}",0.9559270516717324
164231,"private void jump(){
  for (int i=0; i < 4; i++) {
    int trapPos;
    do {
      trapPos=Random.Int(Level.LENGTH);
    }
 while (!Level.fieldOfView[trapPos] || Level.solid[trapPos]);
    if (Dungeon.level.map[trapPos] == Terrain.INACTIVE_TRAP) {
      Dungeon.level.setTrap(new SpearTrap().reveal(),trapPos);
      Level.set(trapPos,Terrain.TRAP);
      ScrollOfMagicMapping.discover(trapPos);
    }
  }
  int newPos;
  if (HP > HT / 2) {
    do {
      newPos=Random.Int(Level.LENGTH);
    }
 while (!Level.fieldOfView[newPos] || Level.solid[newPos] || Level.adjacent(newPos,enemy.pos)|| Actor.findChar(newPos) != null);
  }
 else {
    do {
      newPos=Random.Int(Level.LENGTH);
    }
 while (Level.solid[newPos] || Level.distance(newPos,enemy.pos) < 8 || Actor.findChar(newPos) != null);
  }
  if (Dungeon.visible[pos])   CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
  sprite.move(pos,newPos);
  move(newPos);
  if (Dungeon.visible[newPos])   CellEmitter.get(newPos).burst(Speck.factory(Speck.WOOL),6);
  Sample.INSTANCE.play(Assets.SND_PUFF);
  spend(1 / speed());
}","private void jump(){
  for (int i=0; i < 4; i++) {
    int trapPos;
    do {
      trapPos=Random.Int(Level.LENGTH);
    }
 while (!Level.fieldOfView[trapPos] || Level.solid[trapPos]);
    if (Dungeon.level.map[trapPos] == Terrain.INACTIVE_TRAP) {
      Dungeon.level.setTrap(new SpearTrap().reveal(),trapPos);
      Level.set(trapPos,Terrain.TRAP);
      ScrollOfMagicMapping.discover(trapPos);
    }
  }
  int newPos;
  if (HP > HT / 2) {
    do {
      newPos=Random.Int(Level.LENGTH);
    }
 while (!(Dungeon.level.map[newPos] == Terrain.INACTIVE_TRAP || Dungeon.level.map[newPos] == Terrain.TRAP) || Level.solid[newPos] || Level.adjacent(newPos,enemy.pos)|| Actor.findChar(newPos) != null);
  }
 else {
    do {
      newPos=Random.Int(Level.LENGTH);
    }
 while (Level.solid[newPos] || Level.distance(newPos,enemy.pos) < 8 || Actor.findChar(newPos) != null);
  }
  if (Dungeon.visible[pos])   CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
  sprite.move(pos,newPos);
  move(newPos);
  if (Dungeon.visible[newPos])   CellEmitter.get(newPos).burst(Speck.factory(Speck.WOOL),6);
  Sample.INSTANCE.play(Assets.SND_PUFF);
  spend(1 / speed());
}",0.9536128456735058
164232,"public boolean attack(Char enemy){
  boolean visibleFight=Dungeon.visible[pos] || Dungeon.visible[enemy.pos];
  if (hit(this,enemy,false)) {
    if (visibleFight) {
      GLog.i(TXT_HIT,name,enemy.name);
    }
    int dr=this instanceof Hero && ((Hero)this).rangedWeapon != null && ((Hero)this).subClass == HeroSubClass.SNIPER ? 0 : Random.IntRange(0,enemy.dr());
    int dmg=damageRoll();
    int effectiveDamage=Math.max(dmg - dr,0);
    effectiveDamage=attackProc(enemy,effectiveDamage);
    effectiveDamage=enemy.defenseProc(this,effectiveDamage);
    if (visibleFight) {
      Sample.INSTANCE.play(Assets.SND_HIT,1,1,Random.Float(0.8f,1.25f));
    }
    if (!enemy.isAlive()) {
      return true;
    }
    float shake=0f;
    if (enemy == Dungeon.hero)     shake=effectiveDamage / (enemy.HT / 4);
    if (shake > 1f)     Camera.main.shake(GameMath.gate(1,shake,5),0.3f);
    enemy.damage(effectiveDamage,this);
    if (buff(FireImbue.class) != null)     buff(FireImbue.class).proc(enemy);
    if (buff(EarthImbue.class) != null)     buff(EarthImbue.class).proc(enemy);
    enemy.sprite.bloodBurstA(sprite.center(),effectiveDamage);
    enemy.sprite.flash();
    if (!enemy.isAlive() && visibleFight) {
      if (enemy == Dungeon.hero) {
        if (this instanceof Yog) {
          Dungeon.fail(Utils.format(ResultDescriptions.NAMED,name));
        }
 else         if (properties().contains(Property.MINIBOSS) || properties().contains(Property.BOSS)) {
          Dungeon.fail(Utils.format(ResultDescriptions.UNIQUE,name));
        }
 else {
          Dungeon.fail(Utils.format(ResultDescriptions.MOB,Utils.indefinite(name)));
        }
        GLog.n(TXT_KILL,name);
      }
 else {
        GLog.i(TXT_DEFEAT,name,enemy.name);
      }
    }
    return true;
  }
 else {
    if (visibleFight) {
      String defense=enemy.defenseVerb();
      enemy.sprite.showStatus(CharSprite.NEUTRAL,defense);
      if (this == Dungeon.hero) {
        GLog.i(TXT_YOU_MISSED,enemy.name,defense);
      }
 else {
        GLog.i(TXT_SMB_MISSED,enemy.name,defense,name);
      }
      Sample.INSTANCE.play(Assets.SND_MISS);
    }
    return false;
  }
}","public boolean attack(Char enemy){
  if (enemy == null || !enemy.isAlive())   return false;
  boolean visibleFight=Dungeon.visible[pos] || Dungeon.visible[enemy.pos];
  if (hit(this,enemy,false)) {
    if (visibleFight) {
      GLog.i(TXT_HIT,name,enemy.name);
    }
    int dr=this instanceof Hero && ((Hero)this).rangedWeapon != null && ((Hero)this).subClass == HeroSubClass.SNIPER ? 0 : Random.IntRange(0,enemy.dr());
    int dmg=damageRoll();
    int effectiveDamage=Math.max(dmg - dr,0);
    effectiveDamage=attackProc(enemy,effectiveDamage);
    effectiveDamage=enemy.defenseProc(this,effectiveDamage);
    if (visibleFight) {
      Sample.INSTANCE.play(Assets.SND_HIT,1,1,Random.Float(0.8f,1.25f));
    }
    if (!enemy.isAlive()) {
      return true;
    }
    float shake=0f;
    if (enemy == Dungeon.hero)     shake=effectiveDamage / (enemy.HT / 4);
    if (shake > 1f)     Camera.main.shake(GameMath.gate(1,shake,5),0.3f);
    enemy.damage(effectiveDamage,this);
    if (buff(FireImbue.class) != null)     buff(FireImbue.class).proc(enemy);
    if (buff(EarthImbue.class) != null)     buff(EarthImbue.class).proc(enemy);
    enemy.sprite.bloodBurstA(sprite.center(),effectiveDamage);
    enemy.sprite.flash();
    if (!enemy.isAlive() && visibleFight) {
      if (enemy == Dungeon.hero) {
        if (this instanceof Yog) {
          Dungeon.fail(Utils.format(ResultDescriptions.NAMED,name));
        }
 else         if (properties().contains(Property.MINIBOSS) || properties().contains(Property.BOSS)) {
          Dungeon.fail(Utils.format(ResultDescriptions.UNIQUE,name));
        }
 else {
          Dungeon.fail(Utils.format(ResultDescriptions.MOB,Utils.indefinite(name)));
        }
        GLog.n(TXT_KILL,name);
      }
 else {
        GLog.i(TXT_DEFEAT,name,enemy.name);
      }
    }
    return true;
  }
 else {
    if (visibleFight) {
      String defense=enemy.defenseVerb();
      enemy.sprite.showStatus(CharSprite.NEUTRAL,defense);
      if (this == Dungeon.hero) {
        GLog.i(TXT_YOU_MISSED,enemy.name,defense);
      }
 else {
        GLog.i(TXT_SMB_MISSED,enemy.name,defense,name);
      }
      Sample.INSTANCE.play(Assets.SND_MISS);
    }
    return false;
  }
}",0.9868572746137884
164233,"@Override public void call(){
  ch.onAttackComplete();
}","@Override public void call(){
  ch.next();
  if (enemy != null)   ch.attack(enemy);
}",0.6524822695035462
164234,"@Override public void attack(int cell){
  if (!Level.adjacent(cell,ch.pos)) {
    ((MissileSprite)parent.recycle(MissileSprite.class)).reset(ch.pos,cell,new Shuriken(),new Callback(){
      @Override public void call(){
        ch.onAttackComplete();
      }
    }
);
    play(cast);
    turnTo(ch.pos,cell);
  }
 else {
    super.attack(cell);
  }
}","@Override public void attack(int cell){
  if (!Level.adjacent(cell,ch.pos)) {
    final Char enemy=Actor.findChar(cell);
    ((MissileSprite)parent.recycle(MissileSprite.class)).reset(ch.pos,cell,new Shuriken(),new Callback(){
      @Override public void call(){
        ch.next();
        if (enemy != null)         ch.attack(enemy);
      }
    }
);
    play(cast);
    turnTo(ch.pos,cell);
  }
 else {
    super.attack(cell);
  }
}",0.8647959183673469
164235,"public void call(){
  ch.pos=newPos;
  if (ch.pos == trajectory.collisionPos) {
    ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
    Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
  }
  Dungeon.level.press(ch.pos,ch);
}","public void call(){
  if (initialpos != ch.pos) {
    ch.sprite.place(ch.pos);
    return;
  }
  ch.pos=newPos;
  if (ch.pos == trajectory.collisionPos) {
    ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
    Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
  }
  Dungeon.level.press(ch.pos,ch);
}",0.885145482388974
164236,"private void throwChar(final Char ch,final Ballistica trajectory,int power){
  int dist=Math.min(trajectory.dist,power);
  if ((ch instanceof King) || (ch instanceof Golem) || (ch instanceof Yog.RottingFist))   dist/=2;
  if (dist == 0 || ch instanceof Yog || ch instanceof RotLasher || ch instanceof RotHeart)   return;
  if (Actor.findChar(trajectory.path.get(dist)) != null) {
    dist--;
  }
  final int newPos=trajectory.path.get(dist);
  if (newPos == ch.pos)   return;
  final int finalDist=dist;
  Actor.addDelayed(new Pushing(ch,ch.pos,newPos,new Callback(){
    public void call(){
      ch.pos=newPos;
      if (ch.pos == trajectory.collisionPos) {
        ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
        Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
      }
      Dungeon.level.press(ch.pos,ch);
    }
  }
),-1);
}","private void throwChar(final Char ch,final Ballistica trajectory,int power){
  int dist=Math.min(trajectory.dist,power);
  if ((ch instanceof King) || (ch instanceof Golem) || (ch instanceof Yog.RottingFist))   dist/=2;
  if (dist == 0 || ch instanceof Yog || ch instanceof RotLasher || ch instanceof RotHeart)   return;
  if (Actor.findChar(trajectory.path.get(dist)) != null) {
    dist--;
  }
  final int newPos=trajectory.path.get(dist);
  if (newPos == ch.pos)   return;
  final int finalDist=dist;
  final int initialpos=ch.pos;
  Actor.addDelayed(new Pushing(ch,ch.pos,newPos,new Callback(){
    public void call(){
      if (initialpos != ch.pos) {
        ch.sprite.place(ch.pos);
        return;
      }
      ch.pos=newPos;
      if (ch.pos == trajectory.collisionPos) {
        ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
        Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
      }
      Dungeon.level.press(ch.pos,ch);
    }
  }
),-1);
}",0.936656282450675
164237,"@Override protected Char chooseEnemy(){
  if (potHolder == -1 && potPos == -1)   return Dungeon.hero;
 else   if (Actor.findById(potHolder) != null)   return (Char)Actor.findById(potHolder);
 else {
    if (enemy != null && enemy.isAlive() && Level.fieldOfView[enemy.pos] && enemy.invisible == 0 && Level.distance(enemy.pos,potPos) <= 3)     return enemy;
    HashSet<Char> enemies=new HashSet<Char>();
    for (    Mob mob : Dungeon.level.mobs)     if (!(mob instanceof Bee) && Level.distance(mob.pos,potPos) <= 3 && (mob.hostile || mob.ally))     enemies.add(mob);
    if (enemies.size() > 0)     return Random.element(enemies);
 else     return (Level.distance(Dungeon.hero.pos,potPos) <= 3) ? Dungeon.hero : null;
  }
}","@Override protected Char chooseEnemy(){
  if (potHolder == -1 && potPos == -1)   return Dungeon.hero;
 else   if (Actor.findById(potHolder) != null)   return (Char)Actor.findById(potHolder);
 else {
    if (enemy != null && enemy.isAlive() && Dungeon.level.mobs.contains(enemy) && Level.fieldOfView[enemy.pos] && enemy.invisible == 0 && Level.distance(enemy.pos,potPos) <= 3)     return enemy;
    HashSet<Char> enemies=new HashSet<Char>();
    for (    Mob mob : Dungeon.level.mobs)     if (!(mob instanceof Bee) && Level.distance(mob.pos,potPos) <= 3 && (mob.hostile || mob.ally))     enemies.add(mob);
    if (enemies.size() > 0)     return Random.element(enemies);
 else     return (Level.distance(Dungeon.hero.pos,potPos) <= 3) ? Dungeon.hero : null;
  }
}",0.9743935309973046
164238,"@Override public boolean act(boolean enemyInFOV,boolean justAlerted){
  enemySeen=enemyInFOV;
  if (enemyInFOV && !isCharmedBy(enemy) && canAttack(enemy)) {
    return doAttack(enemy);
  }
 else {
    if (enemyInFOV) {
      target=enemy.pos;
    }
    spend(TICK);
    return true;
  }
}","@Override public boolean act(boolean enemyInFOV,boolean justAlerted){
  enemySeen=enemyInFOV;
  if (enemyInFOV && !isCharmedBy(enemy) && canAttack(enemy)) {
    return doAttack(enemy);
  }
 else {
    if (enemyInFOV) {
      target=enemy.pos;
    }
 else {
      chooseEnemy();
      target=enemy.pos;
    }
    spend(TICK);
    return true;
  }
}",0.9070866141732284
164239,"public void progress(){
switch (state) {
case START:
    seal();
  set(5 + 25 * 32,Terrain.LOCKED_DOOR);
GameScene.updateMap(5 + 25 * 32);
tengu.state=tengu.HUNTING;
tengu.pos=5 + 28 * 32;
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_START;
break;
case FIGHT_START:
changeMap(MAP_MAZE);
clearHeaps((Room)new Room().set(0,5,8,32));
Actor.remove(tengu);
mobs.remove(tengu);
HealthIndicator.instance.target(null);
tengu.sprite.kill();
GameScene.flash(0xFFFFFF);
Sample.INSTANCE.play(Assets.SND_BLAST);
state=State.MAZE;
break;
case MAZE:
Dungeon.hero.interrupt();
Dungeon.hero.pos+=9 + 3 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
changeMap(MAP_ARENA);
clearHeaps(null);
tengu.state=tengu.HUNTING;
do {
tengu.pos=Random.Int(LENGTH);
}
 while (solid[tengu.pos] || distance(tengu.pos,Dungeon.hero.pos) < 8);
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_ARENA;
break;
case FIGHT_ARENA:
unseal();
CustomTileVisual vis=new exitVisual();
vis.pos(7,7);
customTiles.add(vis);
((GameScene)ShatteredPixelDungeon.scene()).addCustomTile(vis);
Dungeon.hero.interrupt();
Dungeon.hero.pos=5 + 27 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
tengu.pos=5 + 28 * 32;
tengu.sprite.place(5 + 28 * 32);
changeMap(MAP_END);
clearHeaps(null);
tengu.die(Dungeon.hero);
for (Item item : storedItems) drop(item,randomPrisonCell());
state=State.WON;
break;
}
}","public void progress(){
switch (state) {
case START:
    seal();
  set(5 + 25 * 32,Terrain.LOCKED_DOOR);
GameScene.updateMap(5 + 25 * 32);
tengu.state=tengu.HUNTING;
tengu.pos=5 + 28 * 32;
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_START;
break;
case FIGHT_START:
changeMap(MAP_MAZE);
clearEntities((Room)new Room().set(0,5,8,32));
Actor.remove(tengu);
mobs.remove(tengu);
HealthIndicator.instance.target(null);
tengu.sprite.kill();
GameScene.flash(0xFFFFFF);
Sample.INSTANCE.play(Assets.SND_BLAST);
state=State.MAZE;
break;
case MAZE:
Dungeon.hero.interrupt();
Dungeon.hero.pos+=9 + 3 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
changeMap(MAP_ARENA);
clearEntities(null);
tengu.state=tengu.HUNTING;
do {
tengu.pos=Random.Int(LENGTH);
}
 while (solid[tengu.pos] || distance(tengu.pos,Dungeon.hero.pos) < 8);
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_ARENA;
break;
case FIGHT_ARENA:
unseal();
CustomTileVisual vis=new exitVisual();
vis.pos(7,7);
customTiles.add(vis);
((GameScene)ShatteredPixelDungeon.scene()).addCustomTile(vis);
Dungeon.hero.interrupt();
Dungeon.hero.pos=5 + 27 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
tengu.pos=5 + 28 * 32;
tengu.sprite.place(5 + 28 * 32);
changeMap(MAP_END);
clearEntities(null);
tengu.die(Dungeon.hero);
for (Item item : storedItems) drop(item,randomPrisonCell());
state=State.WON;
break;
}
}",0.988608905764584
164240,"public Group addVisuals(){
  visuals.clear();
  for (int i=0; i < LENGTH; i++) {
    if (pit[i]) {
      visuals.add(new WindParticle.Wind(i));
      if (i >= WIDTH && water[i - WIDTH]) {
        visuals.add(new FlowParticle.Flow(i - WIDTH));
      }
    }
  }
  return visuals;
}","public Group addVisuals(){
  if (visuals == null || visuals.parent == null) {
    visuals=new Group();
  }
 else {
    visuals.clear();
  }
  for (int i=0; i < LENGTH; i++) {
    if (pit[i]) {
      visuals.add(new WindParticle.Wind(i));
      if (i >= WIDTH && water[i - WIDTH]) {
        visuals.add(new FlowParticle.Flow(i - WIDTH));
      }
    }
  }
  return visuals;
}",0.8562691131498471
164241,"@Override public void destroy(){
  super.destroy();
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
    if (mob instanceof RotLasher) {
      mob.die(null);
    }
  }
}","@Override public void destroy(){
  super.destroy();
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[Dungeon.level.mobs.size()])) {
    if (mob instanceof RotLasher) {
      mob.die(null);
    }
  }
}",0.932642487046632
164242,"@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.EMPTY) {
      int n=0;
      if (map[i + 1] == Terrain.WALL) {
        n++;
      }
      if (map[i - 1] == Terrain.WALL) {
        n++;
      }
      if (map[i + WIDTH] == Terrain.WALL) {
        n++;
      }
      if (map[i - WIDTH] == Terrain.WALL) {
        n++;
      }
      if (Random.Int(8) <= n) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.WALL && Random.Int(8) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  int sign;
  do {
    sign=Random.Int(ROOM_LEFT,ROOM_RIGHT) + Random.Int(ROOM_TOP,ROOM_BOTTOM) * WIDTH;
  }
 while (sign == entrance);
  map[sign]=Terrain.SIGN;
}","@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.EMPTY) {
      int n=0;
      if (map[i + 1] == Terrain.WALL) {
        n++;
      }
      if (map[i - 1] == Terrain.WALL) {
        n++;
      }
      if (map[i + WIDTH] == Terrain.WALL) {
        n++;
      }
      if (map[i - WIDTH] == Terrain.WALL) {
        n++;
      }
      if (Random.Int(8) <= n) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.WALL && Random.Int(8) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  int sign;
  do {
    sign=Random.Int(ROOM_LEFT,ROOM_RIGHT) + Random.Int(ROOM_TOP,ROOM_BOTTOM) * WIDTH;
  }
 while (sign == entrance || map[sign] == Terrain.INACTIVE_TRAP);
  map[sign]=Terrain.SIGN;
}",0.9759493670886076
164243,"protected boolean assignRoomType(){
  int specialRooms=0;
  boolean pitMade=false;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() == 1) {
      if (specials.size() > 0 && r.width() > 3 && r.height() > 3 && Random.Int(specialRooms * specialRooms + 2) == 0) {
        if (pitRoomNeeded) {
          r.type=Type.PIT;
          pitMade=true;
          specials.remove(Type.ARMORY);
          specials.remove(Type.CRYPT);
          specials.remove(Type.LABORATORY);
          specials.remove(Type.LIBRARY);
          specials.remove(Type.STATUE);
          specials.remove(Type.TREASURY);
          specials.remove(Type.VAULT);
          specials.remove(Type.WEAK_FLOOR);
        }
 else         if (Dungeon.depth % 5 == 2 && specials.contains(Type.LABORATORY)) {
          r.type=Type.LABORATORY;
        }
 else         if (Dungeon.depth >= Dungeon.transmutation && specials.contains(Type.MAGIC_WELL)) {
          r.type=Type.MAGIC_WELL;
        }
 else {
          int n=specials.size();
          r.type=specials.get(Math.min(Random.Int(n),Random.Int(n)));
          if (r.type == Type.WEAK_FLOOR) {
            weakFloorCreated=true;
          }
        }
        Room.useType(r.type);
        specials.remove(r.type);
        specialRooms++;
      }
 else       if (Random.Int(2) == 0) {
        HashSet<Room> neigbours=new HashSet<Room>();
        for (        Room n : r.neigbours) {
          if (!r.connected.containsKey(n) && !Room.SPECIALS.contains(n.type) && n.type != Type.PIT) {
            neigbours.add(n);
          }
        }
        if (neigbours.size() > 1) {
          r.connect(Random.element(neigbours));
        }
      }
    }
  }
  if (pitRoomNeeded && !pitMade)   return false;
  int count=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL) {
      int connections=r.connected.size();
      if (connections == 0) {
      }
 else       if (Random.Int(connections * connections) == 0) {
        r.type=Type.STANDARD;
        count++;
      }
 else {
        r.type=Type.TUNNEL;
      }
    }
  }
  while (count < 6) {
    Room r=randomRoom(Type.TUNNEL,1);
    if (r != null) {
      r.type=Type.STANDARD;
      count++;
    }
  }
  return true;
}","protected boolean assignRoomType(){
  int specialRooms=0;
  boolean pitMade=false;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() == 1) {
      if (specials.size() > 0 && r.width() > 3 && r.height() > 3 && Random.Int(specialRooms * specialRooms + 2) == 0) {
        if (pitRoomNeeded && !pitMade) {
          r.type=Type.PIT;
          pitMade=true;
          specials.remove(Type.ARMORY);
          specials.remove(Type.CRYPT);
          specials.remove(Type.LABORATORY);
          specials.remove(Type.LIBRARY);
          specials.remove(Type.STATUE);
          specials.remove(Type.TREASURY);
          specials.remove(Type.VAULT);
          specials.remove(Type.WEAK_FLOOR);
        }
 else         if (Dungeon.depth % 5 == 2 && specials.contains(Type.LABORATORY)) {
          r.type=Type.LABORATORY;
        }
 else         if (Dungeon.depth >= Dungeon.transmutation && specials.contains(Type.MAGIC_WELL)) {
          r.type=Type.MAGIC_WELL;
        }
 else {
          int n=specials.size();
          r.type=specials.get(Math.min(Random.Int(n),Random.Int(n)));
          if (r.type == Type.WEAK_FLOOR) {
            weakFloorCreated=true;
          }
        }
        Room.useType(r.type);
        specials.remove(r.type);
        specialRooms++;
      }
 else       if (Random.Int(2) == 0) {
        HashSet<Room> neigbours=new HashSet<Room>();
        for (        Room n : r.neigbours) {
          if (!r.connected.containsKey(n) && !Room.SPECIALS.contains(n.type) && n.type != Type.PIT) {
            neigbours.add(n);
          }
        }
        if (neigbours.size() > 1) {
          r.connect(Random.element(neigbours));
        }
      }
    }
  }
  if (pitRoomNeeded && !pitMade)   return false;
  int count=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL) {
      int connections=r.connected.size();
      if (connections == 0) {
      }
 else       if (Random.Int(connections * connections) == 0) {
        r.type=Type.STANDARD;
        count++;
      }
 else {
        r.type=Type.TUNNEL;
      }
    }
  }
  while (count < 6) {
    Room r=randomRoom(Type.TUNNEL,1);
    if (r != null) {
      r.type=Type.STANDARD;
      count++;
    }
  }
  return true;
}",0.9972875226039783
164244,"@Override protected boolean getFurther(int target){
  return false;
}","@Override protected boolean getFurther(int target){
  return true;
}",0.948905109489051
164245,"@Override protected boolean act(){
  if (Dungeon.level.map[pos] != Terrain.GRASS && Dungeon.level.map[pos] != Terrain.HIGH_GRASS) {
    destroy();
    sprite.die();
    return true;
  }
 else {
    HP=Math.min(HT,HP + 2);
    return super.act();
  }
}","@Override protected boolean act(){
  if (Dungeon.level.map[pos] != Terrain.GRASS && Dungeon.level.map[pos] != Terrain.HIGH_GRASS) {
    destroy();
    sprite.die();
    return true;
  }
 else {
    if (enemy == null || !Level.adjacent(pos,enemy.pos)) {
      HP=Math.min(HT,HP + 3);
    }
    return super.act();
  }
}",0.8717047451669596
164246,"@Override protected boolean getCloser(int target){
  return false;
}","@Override protected boolean getCloser(int target){
  return true;
}",0.9481481481481482
164247,"public static boolean spawn(PrisonLevel level,Room room,Collection<Room> rooms){
  if (!spawned && Dungeon.depth > 6 && Random.Int(10 - Dungeon.depth) == 0 || type != 0) {
    if (type == 0)     type=Random.Int(Dungeon.isChallenged(Challenges.NO_HERBALISM) ? 2 : 3) + 1;
    if (setRoom(rooms)) {
      Wandmaker npc=new Wandmaker();
      do {
        npc.pos=room.random();
      }
 while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
      level.mobs.add(npc);
      spawned=true;
      given=false;
      wand1=(Wand)Generator.random(Generator.Category.WAND);
      wand1.upgrade();
      do {
        wand2=(Wand)Generator.random(Generator.Category.WAND);
      }
 while (wand2.getClass().equals(wand1.getClass()));
      wand2.upgrade();
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return true;
  }
}","public static boolean spawn(PrisonLevel level,Room room,Collection<Room> rooms){
  if (!spawned && (type != 0 || (Dungeon.depth > 6 && Random.Int(10 - Dungeon.depth) == 0))) {
    if (type == 0)     type=Random.Int(Dungeon.isChallenged(Challenges.NO_HERBALISM) ? 2 : 3) + 1;
    if (setRoom(rooms)) {
      Wandmaker npc=new Wandmaker();
      do {
        npc.pos=room.random();
      }
 while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
      level.mobs.add(npc);
      spawned=true;
      given=false;
      wand1=(Wand)Generator.random(Generator.Category.WAND);
      wand1.upgrade();
      do {
        wand2=(Wand)Generator.random(Generator.Category.WAND);
      }
 while (wand2.getClass().equals(wand1.getClass()));
      wand2.upgrade();
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return true;
  }
}",0.9828178694158076
164248,"@Override protected void nowhereToRun(){
  if (buff(Terror.class) == null) {
    if (enemySeen) {
      sprite.showStatus(CharSprite.NEGATIVE,TXT_RAGE);
      state=HUNTING;
    }
 else {
      GLog.n(""String_Node_Str"" + item.name() + ""String_Node_Str"");
      item=null;
      state=WANDERING;
    }
  }
 else {
    super.nowhereToRun();
  }
}","@Override protected void nowhereToRun(){
  if (buff(Terror.class) == null) {
    if (enemySeen) {
      sprite.showStatus(CharSprite.NEGATIVE,TXT_RAGE);
      state=HUNTING;
    }
 else {
      if (item != null)       GLog.n(""String_Node_Str"" + item.name() + ""String_Node_Str"");
      item=null;
      state=WANDERING;
    }
  }
 else {
    super.nowhereToRun();
  }
}",0.9662921348314608
164249,"private static void generateItems(){
  itemsToSpawn=new ArrayList<Item>();
switch (Dungeon.depth) {
case 6:
    itemsToSpawn.add((Random.Int(2) == 0 ? new Quarterstaff() : new Spear()).identify());
  itemsToSpawn.add(Random.Int(2) == 0 ? new IncendiaryDart().quantity(Random.NormalIntRange(2,4)) : new CurareDart().quantity(Random.NormalIntRange(1,3)));
itemsToSpawn.add(new LeatherArmor().identify());
break;
case 11:
itemsToSpawn.add((Random.Int(2) == 0 ? new Sword() : new Mace()).identify());
itemsToSpawn.add(Random.Int(2) == 0 ? new CurareDart().quantity(Random.NormalIntRange(2,5)) : new Shuriken().quantity(Random.NormalIntRange(3,6)));
itemsToSpawn.add(new MailArmor().identify());
break;
case 16:
itemsToSpawn.add((Random.Int(2) == 0 ? new Longsword() : new BattleAxe()).identify());
itemsToSpawn.add(Random.Int(2) == 0 ? new Shuriken().quantity(Random.NormalIntRange(4,7)) : new Javelin().quantity(Random.NormalIntRange(3,6)));
itemsToSpawn.add(new ScaleArmor().identify());
break;
case 21:
itemsToSpawn.add(Random.Int(2) == 0 ? new Glaive().identify() : new WarHammer().identify());
itemsToSpawn.add(Random.Int(2) == 0 ? new Javelin().quantity(Random.NormalIntRange(4,7)) : new Tamahawk().quantity(Random.NormalIntRange(4,7)));
itemsToSpawn.add(new PlateArmor().identify());
itemsToSpawn.add(new Torch());
itemsToSpawn.add(new Torch());
break;
}
itemsToSpawn.add(new MerchantsBeacon());
ChooseBag(Dungeon.hero.belongings);
itemsToSpawn.add(new PotionOfHealing());
for (int i=0; i < 3; i++) itemsToSpawn.add(Generator.random(Generator.Category.POTION));
itemsToSpawn.add(new ScrollOfIdentify());
itemsToSpawn.add(new ScrollOfRemoveCurse());
itemsToSpawn.add(new ScrollOfMagicMapping());
itemsToSpawn.add(Generator.random(Generator.Category.SCROLL));
for (int i=0; i < 2; i++) itemsToSpawn.add(Random.Int(2) == 0 ? Generator.random(Generator.Category.POTION) : Generator.random(Generator.Category.SCROLL));
itemsToSpawn.add(new OverpricedRation());
itemsToSpawn.add(new OverpricedRation());
itemsToSpawn.add(new Bomb().random());
switch (Random.Int(5)) {
case 1:
itemsToSpawn.add(new Bomb());
break;
case 2:
itemsToSpawn.add(new Bomb().random());
break;
case 3:
case 4:
itemsToSpawn.add(new Honeypot());
break;
}
if (Dungeon.depth == 6) {
itemsToSpawn.add(new Ankh());
itemsToSpawn.add(new Weightstone());
}
 else {
itemsToSpawn.add(Random.Int(2) == 0 ? new Ankh() : new Weightstone());
}
TimekeepersHourglass hourglass=Dungeon.hero.belongings.getItem(TimekeepersHourglass.class);
if (hourglass != null) {
int bags=0;
switch (Dungeon.depth) {
case 6:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.20f);
break;
case 11:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.25f);
break;
case 16:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.50f);
break;
case 21:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.80f);
break;
}
for (int i=1; i <= bags; i++) {
itemsToSpawn.add(new TimekeepersHourglass.sandBag());
hourglass.sandBags++;
}
}
Item rare;
switch (Random.Int(10)) {
case 0:
rare=Generator.random(Generator.Category.WAND);
rare.level=0;
break;
case 1:
rare=Generator.random(Generator.Category.RING);
rare.level=1;
break;
case 2:
rare=Generator.random(Generator.Category.ARTIFACT).identify();
break;
default :
rare=new Stylus();
}
rare.cursed=rare.cursedKnown=false;
itemsToSpawn.add(rare);
if (itemsToSpawn.size() > 39) throw new RuntimeException(""String_Node_Str"");
Collections.shuffle(itemsToSpawn);
}","private static void generateItems(){
  itemsToSpawn=new ArrayList<Item>();
switch (Dungeon.depth) {
case 6:
    itemsToSpawn.add((Random.Int(2) == 0 ? new Quarterstaff() : new Spear()).identify());
  itemsToSpawn.add(Random.Int(2) == 0 ? new IncendiaryDart().quantity(Random.NormalIntRange(2,4)) : new CurareDart().quantity(Random.NormalIntRange(1,3)));
itemsToSpawn.add(new LeatherArmor().identify());
break;
case 11:
itemsToSpawn.add((Random.Int(2) == 0 ? new Sword() : new Mace()).identify());
itemsToSpawn.add(Random.Int(2) == 0 ? new CurareDart().quantity(Random.NormalIntRange(2,5)) : new Shuriken().quantity(Random.NormalIntRange(3,6)));
itemsToSpawn.add(new MailArmor().identify());
break;
case 16:
itemsToSpawn.add((Random.Int(2) == 0 ? new Longsword() : new BattleAxe()).identify());
itemsToSpawn.add(Random.Int(2) == 0 ? new Shuriken().quantity(Random.NormalIntRange(4,7)) : new Javelin().quantity(Random.NormalIntRange(3,6)));
itemsToSpawn.add(new ScaleArmor().identify());
break;
case 21:
itemsToSpawn.add(Random.Int(2) == 0 ? new Glaive().identify() : new WarHammer().identify());
itemsToSpawn.add(Random.Int(2) == 0 ? new Javelin().quantity(Random.NormalIntRange(4,7)) : new Tamahawk().quantity(Random.NormalIntRange(4,7)));
itemsToSpawn.add(new PlateArmor().identify());
itemsToSpawn.add(new Torch());
itemsToSpawn.add(new Torch());
break;
}
itemsToSpawn.add(new MerchantsBeacon());
ChooseBag(Dungeon.hero.belongings);
itemsToSpawn.add(new PotionOfHealing());
for (int i=0; i < 3; i++) itemsToSpawn.add(Generator.random(Generator.Category.POTION));
itemsToSpawn.add(new ScrollOfIdentify());
itemsToSpawn.add(new ScrollOfRemoveCurse());
itemsToSpawn.add(new ScrollOfMagicMapping());
itemsToSpawn.add(Generator.random(Generator.Category.SCROLL));
for (int i=0; i < 2; i++) itemsToSpawn.add(Random.Int(2) == 0 ? Generator.random(Generator.Category.POTION) : Generator.random(Generator.Category.SCROLL));
itemsToSpawn.add(new OverpricedRation());
itemsToSpawn.add(new OverpricedRation());
itemsToSpawn.add(new Bomb().random());
switch (Random.Int(5)) {
case 1:
itemsToSpawn.add(new Bomb());
break;
case 2:
itemsToSpawn.add(new Bomb().random());
break;
case 3:
case 4:
itemsToSpawn.add(new Honeypot());
break;
}
if (Dungeon.depth == 6) {
itemsToSpawn.add(new Ankh());
itemsToSpawn.add(new Weightstone());
}
 else {
itemsToSpawn.add(Random.Int(2) == 0 ? new Ankh() : new Weightstone());
}
TimekeepersHourglass hourglass=Dungeon.hero.belongings.getItem(TimekeepersHourglass.class);
if (hourglass != null) {
int bags=0;
switch (Dungeon.depth) {
case 6:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.20f);
break;
case 11:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.25f);
break;
case 16:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.50f);
break;
case 21:
bags=(int)Math.ceil((5 - hourglass.sandBags) * 0.80f);
break;
}
for (int i=1; i <= bags; i++) {
itemsToSpawn.add(new TimekeepersHourglass.sandBag());
hourglass.sandBags++;
}
}
Item rare;
switch (Random.Int(10)) {
case 0:
rare=Generator.random(Generator.Category.WAND);
if (rare.level > 0) rare.degrade(rare.level);
break;
case 1:
rare=Generator.random(Generator.Category.RING);
rare.level=1;
break;
case 2:
rare=Generator.random(Generator.Category.ARTIFACT).identify();
break;
default :
rare=new Stylus();
}
rare.cursed=rare.cursedKnown=false;
itemsToSpawn.add(rare);
if (itemsToSpawn.size() > 39) throw new RuntimeException(""String_Node_Str"");
Collections.shuffle(itemsToSpawn);
}",0.9950567025298052
164250,"@Override public void damage(int dmg,Object src){
  if (dmg > HP) {
    ((PrisonBossLevel)Dungeon.level).progress();
    return;
  }
  int beforeHitHP=HP;
  super.damage(dmg,src);
  if (beforeHitHP > HT / 2 && HP <= HT / 2) {
    HP=HT / 2;
    yell(""String_Node_Str"");
    ((PrisonBossLevel)Dungeon.level).progress();
    BossHealthBar.bleed(true);
  }
}","@Override public void damage(int dmg,Object src){
  if (dmg >= HP) {
    ((PrisonBossLevel)Dungeon.level).progress();
    return;
  }
  int beforeHitHP=HP;
  super.damage(dmg,src);
  if (beforeHitHP > HT / 2 && HP <= HT / 2) {
    HP=HT / 2;
    yell(""String_Node_Str"");
    ((PrisonBossLevel)Dungeon.level).progress();
    BossHealthBar.bleed(true);
  }
}",0.9985935302391
164251,"public void progress(){
switch (state) {
case START:
    seal();
  set(5 + 25 * 32,Terrain.LOCKED_DOOR);
GameScene.updateMap(5 + 25 * 32);
tengu.state=tengu.HUNTING;
tengu.pos=5 + 28 * 32;
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_START;
break;
case FIGHT_START:
changeMap(MAP_MAZE);
Actor.remove(tengu);
mobs.remove(tengu);
HealthIndicator.instance.target(null);
tengu.sprite.kill();
GameScene.flash(0xFFFFFF);
Sample.INSTANCE.play(Assets.SND_BLAST);
state=State.MAZE;
break;
case MAZE:
Dungeon.hero.interrupt();
Dungeon.hero.pos+=106;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
changeMap(MAP_ARENA);
tengu.state=tengu.HUNTING;
do {
tengu.pos=Random.Int(LENGTH);
}
 while (solid[tengu.pos] || distance(tengu.pos,Dungeon.hero.pos) < 8);
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_ARENA;
break;
case FIGHT_ARENA:
unseal();
CustomTileVisual vis=new exitVisual();
vis.pos(7,7);
customTiles.add(vis);
((GameScene)ShatteredPixelDungeon.scene()).addCustomTile(vis);
Dungeon.hero.interrupt();
Dungeon.hero.pos=5 + 27 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
changeMap(MAP_END);
tengu.pos=5 + 28 * 32;
tengu.sprite.interruptMotion();
tengu.sprite.place(5 + 28 * 32);
tengu.die(Dungeon.hero);
state=State.WON;
break;
}
}","public void progress(){
switch (state) {
case START:
    seal();
  set(5 + 25 * 32,Terrain.LOCKED_DOOR);
GameScene.updateMap(5 + 25 * 32);
tengu.state=tengu.HUNTING;
tengu.pos=5 + 28 * 32;
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_START;
break;
case FIGHT_START:
changeMap(MAP_MAZE);
Actor.remove(tengu);
mobs.remove(tengu);
HealthIndicator.instance.target(null);
tengu.sprite.kill();
GameScene.flash(0xFFFFFF);
Sample.INSTANCE.play(Assets.SND_BLAST);
state=State.MAZE;
break;
case MAZE:
Dungeon.hero.interrupt();
Dungeon.hero.pos+=106;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
changeMap(MAP_ARENA);
tengu.state=tengu.HUNTING;
do {
tengu.pos=Random.Int(LENGTH);
}
 while (solid[tengu.pos] || distance(tengu.pos,Dungeon.hero.pos) < 8);
GameScene.add(tengu);
tengu.notice();
state=State.FIGHT_ARENA;
break;
case FIGHT_ARENA:
unseal();
CustomTileVisual vis=new exitVisual();
vis.pos(7,7);
customTiles.add(vis);
((GameScene)ShatteredPixelDungeon.scene()).addCustomTile(vis);
Dungeon.hero.interrupt();
Dungeon.hero.pos=5 + 27 * 32;
Dungeon.hero.sprite.interruptMotion();
Dungeon.hero.sprite.place(Dungeon.hero.pos);
tengu.pos=5 + 28 * 32;
tengu.sprite.place(5 + 28 * 32);
changeMap(MAP_END);
tengu.die(Dungeon.hero);
state=State.WON;
break;
}
}",0.945121951219512
164252,"public void call(){
  Actor.addDelayed(new Pushing(Dungeon.hero,Dungeon.hero.pos,newHeroPos),-1);
  Dungeon.hero.pos=newHeroPos;
  Dungeon.observe();
  Dungeon.level.press(newHeroPos,Dungeon.hero);
  Cripple.prolong(Dungeon.hero,Cripple.class,4f);
  Dungeon.hero.interrupt();
  next();
}","public void call(){
  Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal),-1);
  enemy.pos=newPosFinal;
  Dungeon.level.press(newPosFinal,enemy);
  Cripple.prolong(enemy,Cripple.class,4f);
  if (enemy == Dungeon.hero) {
    Dungeon.hero.interrupt();
    Dungeon.observe();
  }
  next();
}",0.4716006884681583
164253,"private boolean chain(int target){
  if (chainsUsed)   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != Dungeon.hero.pos || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newHeroPos=newPos;
      yell(""String_Node_Str"");
      sprite.parent.add(new Chains(pos,Dungeon.hero.pos,new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(Dungeon.hero,Dungeon.hero.pos,newHeroPos),-1);
          Dungeon.hero.pos=newHeroPos;
          Dungeon.observe();
          Dungeon.level.press(newHeroPos,Dungeon.hero);
          Cripple.prolong(Dungeon.hero,Cripple.class,4f);
          Dungeon.hero.interrupt();
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}","private boolean chain(int target){
  if (chainsUsed)   return false;
  Ballistica chain=new Ballistica(pos,target,Ballistica.PROJECTILE);
  if (chain.collisionPos != enemy.pos || Level.pit[chain.path.get(1)])   return false;
 else {
    int newPos=-1;
    for (    int i : chain.subPath(1,chain.dist)) {
      if (!Level.solid[i] && Actor.findChar(i) == null) {
        newPos=i;
        break;
      }
    }
    if (newPos == -1) {
      return false;
    }
 else {
      final int newPosFinal=newPos;
      yell(""String_Node_Str"");
      sprite.parent.add(new Chains(pos,enemy.pos,new Callback(){
        public void call(){
          Actor.addDelayed(new Pushing(enemy,enemy.pos,newPosFinal),-1);
          enemy.pos=newPosFinal;
          Dungeon.level.press(newPosFinal,enemy);
          Cripple.prolong(enemy,Cripple.class,4f);
          if (enemy == Dungeon.hero) {
            Dungeon.hero.interrupt();
            Dungeon.observe();
          }
          next();
        }
      }
));
    }
  }
  chainsUsed=true;
  return true;
}",0.6972920696324951
164254,"@Override protected boolean act(){
  Dungeon.level.updateFieldOfView(this);
  if (state == HUNTING && Level.fieldOfView[enemy.pos] && Level.distance(pos,enemy.pos) < 5 && !Level.adjacent(pos,enemy.pos) && Random.Int(3) == 0 && chain(enemy.pos)) {
    return false;
  }
 else {
    return super.act();
  }
}","@Override protected boolean act(){
  Dungeon.level.updateFieldOfView(this);
  if (state == HUNTING && enemy != null && Level.fieldOfView[enemy.pos] && Level.distance(pos,enemy.pos) < 5 && !Level.adjacent(pos,enemy.pos) && Random.Int(3) == 0 && chain(enemy.pos)) {
    return false;
  }
 else {
    return super.act();
  }
}",0.972972972972973
164255,"public static void restoreFromBundle(Bundle bundle){
  Bundle node=bundle.getBundle(NODE);
  if (!node.isNull() && (spawned=node.getBoolean(SPAWNED))) {
    if (bundle.contains(TYPE)) {
      type=node.getInt(TYPE);
    }
 else {
      type=node.getBoolean(""String_Node_Str"") ? 1 : 3;
    }
    given=node.getBoolean(GIVEN);
    wand1=(Wand)node.get(WAND1);
    wand2=(Wand)node.get(WAND2);
    if (type == 2) {
      CeremonialCandle.ritualPos=bundle.getInt(RITUALPOS);
    }
  }
 else {
    reset();
  }
}","public static void restoreFromBundle(Bundle bundle){
  Bundle node=bundle.getBundle(NODE);
  if (!node.isNull() && (spawned=node.getBoolean(SPAWNED))) {
    if (node.contains(TYPE)) {
      type=node.getInt(TYPE);
    }
 else {
      type=node.getBoolean(""String_Node_Str"") ? 1 : 3;
    }
    given=node.getBoolean(GIVEN);
    wand1=(Wand)node.get(WAND1);
    wand2=(Wand)node.get(WAND2);
    if (type == 2) {
      CeremonialCandle.ritualPos=node.getInt(RITUALPOS);
    }
  }
 else {
    reset();
  }
}",0.984158415841584
164256,"public static void paint(Level level,Room room){
  for (  Room.Door door : room.connected.values()) {
    door.set(Room.Door.Type.REGULAR);
  }
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.EMPTY);
  RitualMarker vis=new RitualMarker();
  Point c=room.center();
  vis.pos(c.x - 1,c.y - 1);
  level.customTiles.add(vis);
  level.addItemToSpawn(new CeremonialCandle());
  level.addItemToSpawn(new CeremonialCandle());
  level.addItemToSpawn(new CeremonialCandle());
  level.addItemToSpawn(new CeremonialCandle());
  CeremonialCandle.ritualPos=c.x + (Level.WIDTH * c.y);
}","public static void paint(Level level,Room room){
  for (  Room.Door door : room.connected.values()) {
    door.set(Room.Door.Type.REGULAR);
  }
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.EMPTY);
  RitualMarker vis=new RitualMarker();
  Point c=room.center();
  vis.pos(c.x - 1,c.y - 1);
  level.customTiles.add(vis);
  fill(level,c.x - 1,c.y - 1,3,3,Terrain.EMPTY_DECO);
  level.addItemToSpawn(new CeremonialCandle());
  level.addItemToSpawn(new CeremonialCandle());
  level.addItemToSpawn(new CeremonialCandle());
  level.addItemToSpawn(new CeremonialCandle());
  CeremonialCandle.ritualPos=c.x + (Level.WIDTH * c.y);
}",0.955810147299509
164257,"public static boolean spawn(PrisonLevel level,Room room,Collection<Room> rooms){
  if (!spawned && Dungeon.depth > 6 && Random.Int(10 - Dungeon.depth) == 0 || type != 0) {
    if (type == 0)     type=Random.Int(Dungeon.isChallenged(Challenges.NO_HERBALISM) ? 2 : 3) + 1;
    if (setRoom(rooms)) {
      Wandmaker npc=new Wandmaker();
      do {
        npc.pos=room.random();
      }
 while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
      level.mobs.add(npc);
      spawned=true;
      given=false;
      wand1=(Wand)Generator.random(Generator.Category.WAND);
      wand1.upgrade();
      do {
        wand2=(Wand)Generator.random(Generator.Category.WAND);
      }
 while (wand2.getClass().equals(wand1.getClass()));
      wand2.upgrade();
      return true;
    }
  }
  return false;
}","public static boolean spawn(PrisonLevel level,Room room,Collection<Room> rooms){
  if (!spawned && Dungeon.depth > 6 && Random.Int(10 - Dungeon.depth) == 0 || type != 0) {
    if (type == 0)     type=Random.Int(Dungeon.isChallenged(Challenges.NO_HERBALISM) ? 2 : 3) + 1;
    if (setRoom(rooms)) {
      Wandmaker npc=new Wandmaker();
      do {
        npc.pos=room.random();
      }
 while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
      level.mobs.add(npc);
      spawned=true;
      given=false;
      wand1=(Wand)Generator.random(Generator.Category.WAND);
      wand1.upgrade();
      do {
        wand2=(Wand)Generator.random(Generator.Category.WAND);
      }
 while (wand2.getClass().equals(wand1.getClass()));
      wand2.upgrade();
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return true;
  }
}",0.9557522123893806
164258,"@Override protected void updateMatrix(){
  float sx=scroll.x + shakeX;
  float sy=scroll.y + shakeY;
  matrix[0]=+zoom * invW2;
  matrix[5]=-zoom * invH2;
  matrix[12]=-1 + x * invW2 - sx * matrix[0];
  matrix[13]=+1 - y * invH2 - sy * matrix[5];
}","@Override protected void updateMatrix(){
  float sx=Math.round(scroll.x + shakeX);
  float sy=Math.round(scroll.y + shakeY);
  matrix[0]=+zoom * invW2;
  matrix[5]=-zoom * invH2;
  matrix[12]=-1 + x * invW2 - sx * matrix[0];
  matrix[13]=+1 - y * invH2 - sy * matrix[5];
}",0.953846153846154
164259,"@Override public int randomRespawnCell(){
  int cell=entrance + NEIGHBOURS8[Random.Int(8)];
  while (!passable[cell]) {
    cell=entrance + NEIGHBOURS8[Random.Int(8)];
  }
  return cell;
}","@Override public int randomRespawnCell(){
  if (entrance == -1)   return entrance;
  int cell=entrance + NEIGHBOURS8[Random.Int(8)];
  while (!passable[cell]) {
    cell=entrance + NEIGHBOURS8[Random.Int(8)];
  }
  return cell;
}",0.9016786570743404
164260,"public static void init(){
  version=Game.versionCode;
  challenges=ShatteredPixelDungeon.challenges();
  Generator.initArtifacts();
  Actor.clear();
  Actor.resetNextID();
  PathFinder.setMapSize(Level.WIDTH,Level.HEIGHT);
  Scroll.initLabels();
  Potion.initColors();
  Ring.initGems();
  Statistics.reset();
  Journal.reset();
  quickslot.reset();
  QuickSlotButton.reset();
  depth=0;
  gold=0;
  droppedItems=new SparseArray<ArrayList<Item>>();
  for (  limitedDrops a : limitedDrops.values())   a.count=0;
  transmutation=Random.IntRange(6,14);
  chapters=new HashSet<Integer>();
  Ghost.Quest.reset();
  Wandmaker.Quest.reset();
  Blacksmith.Quest.reset();
  Imp.Quest.reset();
  Room.shuffleTypes();
  hero=new Hero();
  hero.live();
  Badges.reset();
  StartScene.curClass.initHero(hero);
}","public static void init(){
  version=Game.versionCode;
  challenges=ShatteredPixelDungeon.challenges();
  Actor.clear();
  Actor.resetNextID();
  PathFinder.setMapSize(Level.WIDTH,Level.HEIGHT);
  Scroll.initLabels();
  Potion.initColors();
  Ring.initGems();
  Statistics.reset();
  Journal.reset();
  quickslot.reset();
  QuickSlotButton.reset();
  depth=0;
  gold=0;
  droppedItems=new SparseArray<ArrayList<Item>>();
  for (  limitedDrops a : limitedDrops.values())   a.count=0;
  transmutation=Random.IntRange(6,14);
  chapters=new HashSet<Integer>();
  Ghost.Quest.reset();
  Wandmaker.Quest.reset();
  Blacksmith.Quest.reset();
  Imp.Quest.reset();
  Room.shuffleTypes();
  Generator.initArtifacts();
  hero=new Hero();
  hero.live();
  Badges.reset();
  StartScene.curClass.initHero(hero);
}",0.9637046307884856
164261,"public static void initArtifacts(){
  Category.ARTIFACT.probs=INITIAL_ARTIFACT_PROBS;
  if (Ghost.Quest.processed)   Category.ARTIFACT.probs[10]=1;
  spawnedArtifacts=new ArrayList<String>();
}","public static void initArtifacts(){
  Category.ARTIFACT.probs=INITIAL_ARTIFACT_PROBS.clone();
  if (Ghost.Quest.completed())   Category.ARTIFACT.probs[10]=1;
  spawnedArtifacts=new ArrayList<String>();
}",0.9393939393939394
164262,"@Override protected void doRead(){
  new Flare(5,32).color(0xFF0000,true).show(curUser.sprite,2f);
  Sample.INSTANCE.play(Assets.SND_READ);
  Invisibility.dispel();
  int count=0;
  Mob affected=null;
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
    if (Level.fieldOfView[mob.pos]) {
      Buff.affect(mob,Terror.class,Terror.DURATION).object=curUser.id();
      count++;
      affected=mob;
    }
  }
switch (count) {
case 0:
    GLog.i(""String_Node_Str"");
  break;
case 1:
GLog.i(""String_Node_Str"" + affected.name + ""String_Node_Str"");
break;
default :
GLog.i(""String_Node_Str"");
}
setKnown();
curUser.spendAndNext(TIME_TO_READ);
}","@Override protected void doRead(){
  new Flare(5,32).color(0xFF0000,true).show(curUser.sprite,2f);
  Sample.INSTANCE.play(Assets.SND_READ);
  Invisibility.dispel();
  int count=0;
  Mob affected=null;
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
    if (Level.fieldOfView[mob.pos]) {
      Buff.affect(mob,Terror.class,Terror.DURATION).object=curUser.id();
      if (mob.buff(Terror.class) != null) {
        count++;
        affected=mob;
      }
    }
  }
switch (count) {
case 0:
    GLog.i(""String_Node_Str"");
  break;
case 1:
GLog.i(""String_Node_Str"" + affected.name + ""String_Node_Str"");
break;
default :
GLog.i(""String_Node_Str"");
}
setKnown();
curUser.spendAndNext(TIME_TO_READ);
}",0.9586410635155096
164263,"@Override public void trigger(){
  if (Dungeon.visible[pos]) {
    Sample.INSTANCE.play(Assets.SND_TRAP);
  }
  activate();
}","@Override public void trigger(){
  if (Dungeon.visible[pos]) {
    Sample.INSTANCE.play(Assets.SND_TRAP);
  }
  reveal();
  activate();
}",0.9541984732824428
164264,"public void trigger(){
  if (active) {
    if (Dungeon.visible[pos]) {
      Sample.INSTANCE.play(Assets.SND_TRAP);
    }
    disarm();
    activate();
  }
}","public void trigger(){
  if (active) {
    if (Dungeon.visible[pos]) {
      Sample.INSTANCE.play(Assets.SND_TRAP);
    }
    disarm();
    reveal();
    activate();
  }
}",0.9573170731707316
164265,"protected void disarm(){
  Dungeon.level.disarmTrap(pos);
  active=false;
  if (sprite != null) {
    sprite.visible=true;
    sprite.reset(this);
  }
}","protected void disarm(){
  Dungeon.level.disarmTrap(pos);
  active=false;
  if (sprite != null) {
    sprite.reset(this);
  }
}",0.910394265232975
164266,"@Override public void activate(){
  InterlevelScene.returnDepth=Dungeon.depth;
  for (  Item item : Dungeon.hero.belongings.backpack.items) {
    if (item instanceof Key && ((Key)item).depth == Dungeon.depth) {
      item.detachAll(Dungeon.hero.belongings.backpack);
    }
  }
  Dungeon.depth--;
  Level level=Dungeon.newLevel();
  Dungeon.switchLevel(level,level.entrance);
  InterlevelScene.returnPos=level.entrance;
  InterlevelScene.mode=InterlevelScene.Mode.RETURN;
  Game.switchScene(InterlevelScene.class);
}","@Override public void activate(){
  InterlevelScene.returnDepth=Dungeon.depth;
  for (  Item item : Dungeon.hero.belongings.backpack.items) {
    if (item instanceof Key && ((Key)item).depth == Dungeon.depth) {
      item.detachAll(Dungeon.hero.belongings.backpack);
    }
  }
  InterlevelScene.mode=InterlevelScene.Mode.RESET;
  Game.switchScene(InterlevelScene.class);
}",0.8342728297632469
164267,"@Override public void create(){
  super.create();
  String text=""String_Node_Str"";
switch (mode) {
case DESCEND:
    text=TXT_DESCENDING;
  break;
case ASCEND:
text=TXT_ASCENDING;
break;
case CONTINUE:
text=TXT_LOADING;
break;
case RESURRECT:
text=TXT_RESURRECTING;
break;
case RETURN:
text=TXT_RETURNING;
break;
case FALL:
text=TXT_FALLING;
break;
}
message=PixelScene.createText(text,9);
message.measure();
message.x=(Camera.main.width - message.width()) / 2;
message.y=(Camera.main.height - message.height()) / 2;
add(message);
phase=Phase.FADE_IN;
timeLeft=TIME_TO_FADE;
thread=new Thread(){
@Override public void run(){
try {
Generator.reset();
switch (mode) {
case DESCEND:
descend();
break;
case ASCEND:
ascend();
break;
case CONTINUE:
restore();
break;
case RESURRECT:
resurrect();
break;
case RETURN:
returnTo();
break;
case FALL:
fall();
break;
}
if ((Dungeon.depth % 5) == 0) {
Sample.INSTANCE.load(Assets.SND_BOSS);
}
}
 catch (Exception e) {
error=e;
}
if (phase == Phase.STATIC && error == null) {
phase=Phase.FADE_OUT;
timeLeft=TIME_TO_FADE;
}
}
}
;
thread.start();
}","@Override public void create(){
  super.create();
  String text=""String_Node_Str"";
switch (mode) {
case DESCEND:
    text=TXT_DESCENDING;
  break;
case ASCEND:
text=TXT_ASCENDING;
break;
case CONTINUE:
text=TXT_LOADING;
break;
case RESURRECT:
text=TXT_RESURRECTING;
break;
case RETURN:
text=TXT_RETURNING;
break;
case FALL:
text=TXT_FALLING;
break;
case RESET:
text=TXT_RESETTING;
break;
}
message=PixelScene.createText(text,9);
message.measure();
message.x=(Camera.main.width - message.width()) / 2;
message.y=(Camera.main.height - message.height()) / 2;
add(message);
phase=Phase.FADE_IN;
timeLeft=TIME_TO_FADE;
thread=new Thread(){
@Override public void run(){
try {
Generator.reset();
switch (mode) {
case DESCEND:
descend();
break;
case ASCEND:
ascend();
break;
case CONTINUE:
restore();
break;
case RESURRECT:
resurrect();
break;
case RETURN:
returnTo();
break;
case FALL:
fall();
break;
case RESET:
reset();
break;
}
if ((Dungeon.depth % 5) == 0) {
Sample.INSTANCE.load(Assets.SND_BOSS);
}
}
 catch (Exception e) {
error=e;
}
if (phase == Phase.STATIC && error == null) {
phase=Phase.FADE_OUT;
timeLeft=TIME_TO_FADE;
}
}
}
;
thread.start();
}",0.9699686239354548
164268,"@Override public void run(){
  try {
    Generator.reset();
switch (mode) {
case DESCEND:
      descend();
    break;
case ASCEND:
  ascend();
break;
case CONTINUE:
restore();
break;
case RESURRECT:
resurrect();
break;
case RETURN:
returnTo();
break;
case FALL:
fall();
break;
}
if ((Dungeon.depth % 5) == 0) {
Sample.INSTANCE.load(Assets.SND_BOSS);
}
}
 catch (Exception e) {
error=e;
}
if (phase == Phase.STATIC && error == null) {
phase=Phase.FADE_OUT;
timeLeft=TIME_TO_FADE;
}
}","@Override public void run(){
  try {
    Generator.reset();
switch (mode) {
case DESCEND:
      descend();
    break;
case ASCEND:
  ascend();
break;
case CONTINUE:
restore();
break;
case RESURRECT:
resurrect();
break;
case RETURN:
returnTo();
break;
case FALL:
fall();
break;
case RESET:
reset();
break;
}
if ((Dungeon.depth % 5) == 0) {
Sample.INSTANCE.load(Assets.SND_BOSS);
}
}
 catch (Exception e) {
error=e;
}
if (phase == Phase.STATIC && error == null) {
phase=Phase.FADE_OUT;
timeLeft=TIME_TO_FADE;
}
}",0.9717741935483872
164269,"@Override public void onSelect(Integer target){
  if (target == null)   return;
  Invisibility.dispel();
  charge-=Dungeon.depth > 20 ? 2 : 1;
  updateQuickslot();
  if (Actor.findChar(target) == curUser) {
    ScrollOfTeleportation.teleportHero(curUser);
    Sample.INSTANCE.play(Assets.SND_TELEPORT);
    curUser.spendAndNext(1f);
  }
 else {
    final Ballistica bolt=new Ballistica(curUser.pos,target,Ballistica.MAGIC_BOLT);
    final Char ch=Actor.findChar(bolt.collisionPos);
    if (ch == curUser) {
      ScrollOfTeleportation.teleportHero(curUser);
      Sample.INSTANCE.play(Assets.SND_TELEPORT);
      curUser.spendAndNext(1f);
    }
 else {
      Sample.INSTANCE.play(Assets.SND_ZAP);
      curUser.sprite.zap(bolt.collisionPos);
      curUser.busy();
      MagicMissile.force(curUser.sprite.parent,bolt.sourcePos,bolt.collisionPos,new Callback(){
        @Override public void call(){
          if (ch != null) {
            int count=10;
            int pos;
            do {
              pos=Dungeon.level.randomRespawnCell();
              if (count-- <= 0) {
                break;
              }
            }
 while (pos == -1);
            if (pos == -1) {
              GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
            }
 else {
              ch.pos=pos;
              ch.sprite.place(ch.pos);
              ch.sprite.visible=Dungeon.visible[pos];
            }
          }
          curUser.spendAndNext(1f);
        }
      }
);
    }
  }
}","@Override public void onSelect(Integer target){
  if (target == null)   return;
  Invisibility.dispel();
  charge-=Dungeon.depth > 20 ? 2 : 1;
  updateQuickslot();
  if (Actor.findChar(target) == curUser) {
    ScrollOfTeleportation.teleportHero(curUser);
    curUser.spendAndNext(1f);
  }
 else {
    final Ballistica bolt=new Ballistica(curUser.pos,target,Ballistica.MAGIC_BOLT);
    final Char ch=Actor.findChar(bolt.collisionPos);
    if (ch == curUser) {
      ScrollOfTeleportation.teleportHero(curUser);
      curUser.spendAndNext(1f);
    }
 else {
      Sample.INSTANCE.play(Assets.SND_ZAP);
      curUser.sprite.zap(bolt.collisionPos);
      curUser.busy();
      MagicMissile.force(curUser.sprite.parent,bolt.sourcePos,bolt.collisionPos,new Callback(){
        @Override public void call(){
          if (ch != null) {
            int count=10;
            int pos;
            do {
              pos=Dungeon.level.randomRespawnCell();
              if (count-- <= 0) {
                break;
              }
            }
 while (pos == -1);
            if (pos == -1 || Dungeon.bossLevel()) {
              GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
            }
 else {
              ch.pos=pos;
              ch.sprite.place(ch.pos);
              ch.sprite.visible=Dungeon.visible[pos];
            }
          }
          curUser.spendAndNext(1f);
        }
      }
);
    }
  }
}",0.9266597149808828
164270,"@Override public void call(){
  if (ch != null) {
    int count=10;
    int pos;
    do {
      pos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (pos == -1);
    if (pos == -1) {
      GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
    }
 else {
      ch.pos=pos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  curUser.spendAndNext(1f);
}","@Override public void call(){
  if (ch != null) {
    int count=10;
    int pos;
    do {
      pos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (pos == -1);
    if (pos == -1 || Dungeon.bossLevel()) {
      GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
    }
 else {
      ch.pos=pos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  curUser.spendAndNext(1f);
}",0.9740698985343856
164271,"public static void teleportHero(Hero hero){
  int count=10;
  int pos;
  do {
    pos=Dungeon.level.randomRespawnCell();
    if (count-- <= 0) {
      break;
    }
  }
 while (pos == -1);
  if (pos == -1) {
    GLog.w(TXT_NO_TELEPORT);
  }
 else {
    appear(hero,pos);
    Dungeon.level.press(pos,hero);
    Dungeon.observe();
    GLog.i(TXT_TELEPORTED);
  }
}","public static void teleportHero(Hero hero){
  int count=10;
  int pos;
  do {
    pos=Dungeon.level.randomRespawnCell();
    if (count-- <= 0) {
      break;
    }
  }
 while (pos == -1);
  if (pos == -1 || Dungeon.bossLevel()) {
    GLog.w(TXT_NO_TELEPORT);
  }
 else {
    appear(hero,pos);
    Dungeon.level.press(pos,hero);
    Dungeon.observe();
    GLog.i(TXT_TELEPORTED);
  }
}",0.9691275167785236
164272,"private static void commonEffect(final Wand wand,final Hero user,final Ballistica bolt){
switch (Random.Int(4)) {
case 0:
    cursedFX(user,bolt,new Callback(){
      public void call(){
        Char target=Actor.findChar(bolt.collisionPos);
switch (Random.Int(2)) {
case 0:
          if (target != null)           Buff.affect(target,Burning.class).reignite(target);
        Buff.affect(user,Frost.class,Frost.duration(user) * Random.Float(3f,5f));
      break;
case 1:
    Buff.affect(user,Burning.class).reignite(user);
  if (target != null)   Buff.affect(target,Frost.class,Frost.duration(target) * Random.Float(3f,5f));
break;
}
wand.wandUsed();
}
}
);
break;
case 1:
cursedFX(user,bolt,new Callback(){
public void call(){
int c=Dungeon.level.map[bolt.collisionPos];
if (c == Terrain.EMPTY || c == Terrain.EMBERS || c == Terrain.EMPTY_DECO || c == Terrain.GRASS || c == Terrain.HIGH_GRASS) {
GameScene.add(Blob.seed(bolt.collisionPos,30,Regrowth.class));
}
wand.wandUsed();
}
}
);
break;
case 2:
switch (Random.Int(2)) {
case 0:
ScrollOfTeleportation.teleportHero(user);
wand.wandUsed();
break;
case 1:
cursedFX(user,bolt,new Callback(){
public void call(){
Char ch=Actor.findChar(bolt.collisionPos);
if (ch != null) {
int count=10;
int pos;
do {
pos=Dungeon.level.randomRespawnCell();
if (count-- <= 0) {
break;
}
}
 while (pos == -1);
if (pos == -1) {
GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
}
 else {
ch.pos=pos;
ch.sprite.place(ch.pos);
ch.sprite.visible=Dungeon.visible[pos];
}
}
wand.wandUsed();
}
}
);
break;
}
break;
case 3:
cursedFX(user,bolt,new Callback(){
public void call(){
switch (Random.Int(3)) {
case 0:
GameScene.add(Blob.seed(bolt.collisionPos,800,ConfusionGas.class));
break;
case 1:
GameScene.add(Blob.seed(bolt.collisionPos,500,ToxicGas.class));
break;
case 2:
GameScene.add(Blob.seed(bolt.collisionPos,200,ParalyticGas.class));
break;
}
wand.wandUsed();
}
}
);
break;
}
}","private static void commonEffect(final Wand wand,final Hero user,final Ballistica bolt){
switch (Random.Int(4)) {
case 0:
    cursedFX(user,bolt,new Callback(){
      public void call(){
        Char target=Actor.findChar(bolt.collisionPos);
switch (Random.Int(2)) {
case 0:
          if (target != null)           Buff.affect(target,Burning.class).reignite(target);
        Buff.affect(user,Frost.class,Frost.duration(user) * Random.Float(3f,5f));
      break;
case 1:
    Buff.affect(user,Burning.class).reignite(user);
  if (target != null)   Buff.affect(target,Frost.class,Frost.duration(target) * Random.Float(3f,5f));
break;
}
wand.wandUsed();
}
}
);
break;
case 1:
cursedFX(user,bolt,new Callback(){
public void call(){
int c=Dungeon.level.map[bolt.collisionPos];
if (c == Terrain.EMPTY || c == Terrain.EMBERS || c == Terrain.EMPTY_DECO || c == Terrain.GRASS || c == Terrain.HIGH_GRASS) {
GameScene.add(Blob.seed(bolt.collisionPos,30,Regrowth.class));
}
wand.wandUsed();
}
}
);
break;
case 2:
switch (Random.Int(2)) {
case 0:
ScrollOfTeleportation.teleportHero(user);
wand.wandUsed();
break;
case 1:
cursedFX(user,bolt,new Callback(){
public void call(){
Char ch=Actor.findChar(bolt.collisionPos);
if (ch != null) {
int count=10;
int pos;
do {
pos=Dungeon.level.randomRespawnCell();
if (count-- <= 0) {
break;
}
}
 while (pos == -1);
if (pos == -1 || Dungeon.bossLevel()) {
GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
}
 else {
ch.pos=pos;
ch.sprite.place(ch.pos);
ch.sprite.visible=Dungeon.visible[pos];
}
}
wand.wandUsed();
}
}
);
break;
}
break;
case 3:
cursedFX(user,bolt,new Callback(){
public void call(){
switch (Random.Int(3)) {
case 0:
GameScene.add(Blob.seed(bolt.collisionPos,800,ConfusionGas.class));
break;
case 1:
GameScene.add(Blob.seed(bolt.collisionPos,500,ToxicGas.class));
break;
case 2:
GameScene.add(Blob.seed(bolt.collisionPos,200,ParalyticGas.class));
break;
}
wand.wandUsed();
}
}
);
break;
}
}",0.993999478215497
164273,"@Override public void activate(){
  CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
  Sample.INSTANCE.play(Assets.SND_TELEPORT);
  Char ch=Actor.findChar(pos);
  if (ch instanceof Hero) {
    ScrollOfTeleportation.teleportHero((Hero)ch);
  }
 else   if (ch != null) {
    int count=10;
    int pos;
    do {
      pos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (pos == -1);
    if (pos == -1) {
      GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
    }
 else {
      ch.pos=pos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  Heap heap=Dungeon.level.heaps.get(pos);
  if (heap != null) {
    int cell=Dungeon.level.randomRespawnCell();
    Item item=heap.pickUp();
    if (cell != -1) {
      Dungeon.level.drop(item,cell);
    }
  }
}","@Override public void activate(){
  CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
  Sample.INSTANCE.play(Assets.SND_TELEPORT);
  Char ch=Actor.findChar(pos);
  if (ch instanceof Hero) {
    ScrollOfTeleportation.teleportHero((Hero)ch);
  }
 else   if (ch != null) {
    int count=10;
    int pos;
    do {
      pos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (pos == -1);
    if (pos == -1 || Dungeon.bossLevel()) {
      GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
    }
 else {
      ch.pos=pos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  Heap heap=Dungeon.level.heaps.get(pos);
  if (heap != null) {
    int cell=Dungeon.level.randomRespawnCell();
    Item item=heap.pickUp();
    if (cell != -1) {
      Dungeon.level.drop(item,cell);
    }
  }
}",0.986604542807222
164274,"@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch instanceof Hero) {
    ScrollOfTeleportation.teleportHero((Hero)ch);
    ((Hero)ch).curAction=null;
  }
 else   if (ch instanceof Mob) {
    int count=10;
    int newPos;
    do {
      newPos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (newPos == -1);
    if (newPos != -1) {
      ch.pos=newPos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
  }
}","@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch instanceof Hero) {
    ScrollOfTeleportation.teleportHero((Hero)ch);
    ((Hero)ch).curAction=null;
  }
 else   if (ch instanceof Mob) {
    int count=10;
    int newPos;
    do {
      newPos=Dungeon.level.randomRespawnCell();
      if (count-- <= 0) {
        break;
      }
    }
 while (newPos == -1);
    if (newPos != -1 && !Dungeon.bossLevel()) {
      ch.pos=newPos;
      ch.sprite.place(ch.pos);
      ch.sprite.visible=Dungeon.visible[pos];
    }
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
  }
}",0.9808306709265175
164275,"private boolean getCloser(final int target){
  if (rooted) {
    Camera.main.shake(1,1f);
    return false;
  }
  int step=-1;
  if (Level.adjacent(pos,target)) {
    if (Actor.findChar(target) == null) {
      if (Level.pit[target] && !flying && !Chasm.jumpConfirmed) {
        if (!Level.solid[target]) {
          Chasm.heroJump(this);
          interrupt();
        }
        return false;
      }
      if (Level.passable[target] || Level.avoid[target]) {
        step=target;
      }
    }
  }
 else {
    int len=Level.LENGTH;
    boolean[] p=Level.passable;
    boolean[] v=Dungeon.level.visited;
    boolean[] m=Dungeon.level.mapped;
    boolean[] passable=new boolean[len];
    for (int i=0; i < len; i++) {
      passable[i]=p[i] && (v[i] || m[i]);
    }
    step=Dungeon.findPath(this,pos,target,passable,Level.fieldOfView);
  }
  if (step != -1) {
    sprite.move(pos,step);
    move(step);
    spend(1 / speed());
    return true;
  }
 else {
    return false;
  }
}","private boolean getCloser(final int target){
  if (rooted) {
    Camera.main.shake(1,1f);
    return false;
  }
  int step=-1;
  if (Level.adjacent(pos,target)) {
    if (Actor.findChar(target) == null) {
      if (Level.pit[target] && !flying && !Level.solid[target]) {
        if (!Chasm.jumpConfirmed) {
          Chasm.heroJump(this);
          interrupt();
        }
 else {
          Chasm.heroFall(target);
        }
        return false;
      }
      if (Level.passable[target] || Level.avoid[target]) {
        step=target;
      }
    }
  }
 else {
    int len=Level.LENGTH;
    boolean[] p=Level.passable;
    boolean[] v=Dungeon.level.visited;
    boolean[] m=Dungeon.level.mapped;
    boolean[] passable=new boolean[len];
    for (int i=0; i < len; i++) {
      passable[i]=p[i] && (v[i] || m[i]);
    }
    step=Dungeon.findPath(this,pos,target,passable,Level.fieldOfView);
  }
  if (step != -1) {
    sprite.move(pos,step);
    move(step);
    spend(1 / speed());
    return true;
  }
 else {
    return false;
  }
}",0.9383697813121272
164276,"public void move(int step){
  if (Level.adjacent(step,pos) && buff(Vertigo.class) != null) {
    step=pos + Level.NEIGHBOURS8[Random.Int(8)];
    if (!(Level.passable[step] || Level.avoid[step]) || Actor.findChar(step) != null)     return;
  }
  if (Dungeon.level.map[pos] == Terrain.OPEN_DOOR) {
    Door.leave(pos);
  }
  pos=step;
  if (flying && Dungeon.level.map[pos] == Terrain.DOOR) {
    Door.enter(pos);
  }
  if (this != Dungeon.hero) {
    sprite.visible=Dungeon.visible[pos];
  }
}","public void move(int step){
  if (Level.adjacent(step,pos) && buff(Vertigo.class) != null) {
    sprite.interruptMotion();
    int newPos=pos + Level.NEIGHBOURS8[Random.Int(8)];
    if (!(Level.passable[newPos] || Level.avoid[newPos]) || Actor.findChar(newPos) != null)     return;
 else {
      sprite.move(pos,newPos);
      step=newPos;
    }
  }
  if (Dungeon.level.map[pos] == Terrain.OPEN_DOOR) {
    Door.leave(pos);
  }
  pos=step;
  if (flying && Dungeon.level.map[pos] == Terrain.DOOR) {
    Door.enter(pos);
  }
  if (this != Dungeon.hero) {
    sprite.visible=Dungeon.visible[pos];
  }
}",0.8754578754578755
164277,"public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    ItemSprite sprite=heap.sprite=new ItemSprite();
    sprite.link(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.seen=fieldOfView[cell];
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}","public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    ItemSprite sprite=heap.sprite=new ItemSprite();
    sprite.link(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.seen=Dungeon.visible[cell];
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}",0.9932008368200836
164278,"public boolean[] updateFieldOfView(Char c){
  int cx=c.pos % WIDTH;
  int cy=c.pos / WIDTH;
  boolean sighted=c.buff(Blindness.class) == null && c.buff(Shadows.class) == null && c.buff(TimekeepersHourglass.timeStasis.class) == null && c.isAlive();
  if (sighted) {
    ShadowCaster.castShadow(cx,cy,fieldOfView,c.viewDistance);
  }
 else {
    Arrays.fill(fieldOfView,false);
  }
  int sense=1;
  if (c.isAlive()) {
    for (    Buff b : c.buffs(MindVision.class)) {
      sense=Math.max(((MindVision)b).distance,sense);
    }
  }
  if ((sighted && sense > 1) || !sighted) {
    int ax=Math.max(0,cx - sense);
    int bx=Math.min(cx + sense,WIDTH - 1);
    int ay=Math.max(0,cy - sense);
    int by=Math.min(cy + sense,HEIGHT - 1);
    int len=bx - ax + 1;
    int pos=ax + ay * WIDTH;
    for (int y=ay; y <= by; y++, pos+=WIDTH) {
      Arrays.fill(fieldOfView,pos,pos + len,true);
    }
    for (int i=0; i < LENGTH; i++) {
      fieldOfView[i]&=discoverable[i];
    }
  }
  if (c.isAlive()) {
    if (c.buff(MindVision.class) != null) {
      for (      Mob mob : mobs) {
        int p=mob.pos;
        fieldOfView[p]=true;
        fieldOfView[p + 1]=true;
        fieldOfView[p - 1]=true;
        fieldOfView[p + WIDTH + 1]=true;
        fieldOfView[p + WIDTH - 1]=true;
        fieldOfView[p - WIDTH + 1]=true;
        fieldOfView[p - WIDTH - 1]=true;
        fieldOfView[p + WIDTH]=true;
        fieldOfView[p - WIDTH]=true;
      }
    }
 else     if (c == Dungeon.hero && ((Hero)c).heroClass == HeroClass.HUNTRESS) {
      for (      Mob mob : mobs) {
        int p=mob.pos;
        if (distance(c.pos,p) == 2) {
          fieldOfView[p]=true;
          fieldOfView[p + 1]=true;
          fieldOfView[p - 1]=true;
          fieldOfView[p + WIDTH + 1]=true;
          fieldOfView[p + WIDTH - 1]=true;
          fieldOfView[p - WIDTH + 1]=true;
          fieldOfView[p - WIDTH - 1]=true;
          fieldOfView[p + WIDTH]=true;
          fieldOfView[p - WIDTH]=true;
        }
      }
    }
    if (c.buff(Awareness.class) != null) {
      for (      Heap heap : heaps.values()) {
        int p=heap.pos;
        fieldOfView[p]=true;
        fieldOfView[p + 1]=true;
        fieldOfView[p - 1]=true;
        fieldOfView[p + WIDTH + 1]=true;
        fieldOfView[p + WIDTH - 1]=true;
        fieldOfView[p - WIDTH + 1]=true;
        fieldOfView[p - WIDTH - 1]=true;
        fieldOfView[p + WIDTH]=true;
        fieldOfView[p - WIDTH]=true;
      }
    }
  }
  for (  Heap heap : heaps.values())   if (!heap.seen && fieldOfView[heap.pos])   heap.seen=true;
  return fieldOfView;
}","public boolean[] updateFieldOfView(Char c){
  int cx=c.pos % WIDTH;
  int cy=c.pos / WIDTH;
  boolean sighted=c.buff(Blindness.class) == null && c.buff(Shadows.class) == null && c.buff(TimekeepersHourglass.timeStasis.class) == null && c.isAlive();
  if (sighted) {
    ShadowCaster.castShadow(cx,cy,fieldOfView,c.viewDistance);
  }
 else {
    Arrays.fill(fieldOfView,false);
  }
  int sense=1;
  if (c.isAlive()) {
    for (    Buff b : c.buffs(MindVision.class)) {
      sense=Math.max(((MindVision)b).distance,sense);
    }
  }
  if ((sighted && sense > 1) || !sighted) {
    int ax=Math.max(0,cx - sense);
    int bx=Math.min(cx + sense,WIDTH - 1);
    int ay=Math.max(0,cy - sense);
    int by=Math.min(cy + sense,HEIGHT - 1);
    int len=bx - ax + 1;
    int pos=ax + ay * WIDTH;
    for (int y=ay; y <= by; y++, pos+=WIDTH) {
      Arrays.fill(fieldOfView,pos,pos + len,true);
    }
    for (int i=0; i < LENGTH; i++) {
      fieldOfView[i]&=discoverable[i];
    }
  }
  if (c.isAlive()) {
    if (c.buff(MindVision.class) != null) {
      for (      Mob mob : mobs) {
        int p=mob.pos;
        fieldOfView[p]=true;
        fieldOfView[p + 1]=true;
        fieldOfView[p - 1]=true;
        fieldOfView[p + WIDTH + 1]=true;
        fieldOfView[p + WIDTH - 1]=true;
        fieldOfView[p - WIDTH + 1]=true;
        fieldOfView[p - WIDTH - 1]=true;
        fieldOfView[p + WIDTH]=true;
        fieldOfView[p - WIDTH]=true;
      }
    }
 else     if (c == Dungeon.hero && ((Hero)c).heroClass == HeroClass.HUNTRESS) {
      for (      Mob mob : mobs) {
        int p=mob.pos;
        if (distance(c.pos,p) == 2) {
          fieldOfView[p]=true;
          fieldOfView[p + 1]=true;
          fieldOfView[p - 1]=true;
          fieldOfView[p + WIDTH + 1]=true;
          fieldOfView[p + WIDTH - 1]=true;
          fieldOfView[p - WIDTH + 1]=true;
          fieldOfView[p - WIDTH - 1]=true;
          fieldOfView[p + WIDTH]=true;
          fieldOfView[p - WIDTH]=true;
        }
      }
    }
    if (c.buff(Awareness.class) != null) {
      for (      Heap heap : heaps.values()) {
        int p=heap.pos;
        fieldOfView[p]=true;
        fieldOfView[p + 1]=true;
        fieldOfView[p - 1]=true;
        fieldOfView[p + WIDTH + 1]=true;
        fieldOfView[p + WIDTH - 1]=true;
        fieldOfView[p - WIDTH + 1]=true;
        fieldOfView[p - WIDTH - 1]=true;
        fieldOfView[p + WIDTH]=true;
        fieldOfView[p - WIDTH]=true;
      }
    }
  }
  for (  Heap heap : heaps.values())   if (!heap.seen && fieldOfView[heap.pos] && c == Dungeon.hero)   heap.seen=true;
  return fieldOfView;
}",0.9944090996722575
164279,"@Override protected void disarm(){
  super.disarm();
  if (!(Dungeon.level.map[pos - Level.WIDTH] == Terrain.WALL && Dungeon.level.map[pos + Level.WIDTH] == Terrain.WALL) && !(Dungeon.level.map[pos - 1] == Terrain.WALL && Dungeon.level.map[pos + 1] == Terrain.WALL)) {
    int c=Dungeon.level.map[pos - Level.WIDTH];
    if (c == Terrain.WALL || c == Terrain.WALL_DECO) {
      Level.set(pos,Terrain.CHASM_WALL);
    }
 else {
      Level.set(pos,Terrain.CHASM_FLOOR);
    }
    sprite.parent.add(new WindParticle.Wind(pos));
    GameScene.updateMap(pos);
  }
}","@Override protected void disarm(){
  super.disarm();
  if (!(Dungeon.level.map[pos - Level.WIDTH] == Terrain.WALL && Dungeon.level.map[pos + Level.WIDTH] == Terrain.WALL) && !(Dungeon.level.map[pos - 1] == Terrain.WALL && Dungeon.level.map[pos + 1] == Terrain.WALL)) {
    int c=Dungeon.level.map[pos - Level.WIDTH];
    if (c == Terrain.WALL || c == Terrain.WALL_DECO) {
      Level.set(pos,Terrain.CHASM_WALL);
    }
 else {
      Level.set(pos,Terrain.CHASM_FLOOR);
    }
    sprite.parent.add(new WindParticle.Wind(pos));
    sprite.killAndErase();
    GameScene.updateMap(pos);
  }
}",0.9765013054830288
164280,"public void remove(State state){
switch (state) {
case BURNING:
    if (burning != null) {
      burning.on=false;
      burning=null;
    }
  break;
case LEVITATING:
if (levitation != null) {
  levitation.on=false;
  levitation=null;
}
break;
case INVISIBLE:
alpha(1f);
break;
case PARALYSED:
paused=false;
break;
case FROZEN:
if (iceBlock != null) {
iceBlock.melt();
iceBlock=null;
}
paused=false;
break;
case ILLUMINATED:
if (halo != null) {
halo.putOut();
}
break;
case CHILLED:
if (chilled != null) {
chilled.on=false;
chilled=null;
}
case DARKENED:
if (darkBlock != null) {
darkBlock.lighten();
darkBlock=null;
}
break;
}
}","public void remove(State state){
switch (state) {
case BURNING:
    if (burning != null) {
      burning.on=false;
      burning=null;
    }
  break;
case LEVITATING:
if (levitation != null) {
  levitation.on=false;
  levitation=null;
}
break;
case INVISIBLE:
alpha(1f);
break;
case PARALYSED:
paused=false;
break;
case FROZEN:
if (iceBlock != null) {
iceBlock.melt();
iceBlock=null;
}
paused=false;
break;
case ILLUMINATED:
if (halo != null) {
halo.putOut();
}
break;
case CHILLED:
if (chilled != null) {
chilled.on=false;
chilled=null;
}
break;
case DARKENED:
if (darkBlock != null) {
darkBlock.lighten();
darkBlock=null;
}
break;
}
}",0.9944664031620554
164281,"public static void layoutTags(){
  float tagLeft=ShatteredPixelDungeon.flipTags() ? 0 : uiCamera.width - scene.attack.width();
  if (ShatteredPixelDungeon.flipTags()) {
    scene.log.setRect(scene.attack.width(),scene.toolbar.top(),uiCamera.width - scene.attack.width(),0);
  }
 else {
    scene.log.setRect(0,scene.toolbar.top(),scene.attack.left(),0);
  }
  float pos=scene.toolbar.top();
  if (scene.tagAttack) {
    scene.attack.setPos(tagLeft,pos - scene.attack.height());
    scene.attack.flip(tagLeft == 0);
    pos=scene.attack.top();
  }
  if (scene.tagLoot) {
    scene.loot.setPos(tagLeft,pos - scene.loot.height());
    scene.loot.flip(tagLeft == 0);
    pos=scene.loot.top();
  }
  if (scene.tagResume) {
    scene.resume.setPos(tagLeft,pos - scene.resume.height());
    scene.resume.flip(tagLeft == 0);
  }
}","public static void layoutTags(){
  float tagLeft=ShatteredPixelDungeon.flipTags() ? 0 : uiCamera.width - scene.attack.width();
  if (ShatteredPixelDungeon.flipTags()) {
    scene.log.setRect(scene.attack.width(),scene.toolbar.top(),uiCamera.width - scene.attack.width(),0);
  }
 else {
    scene.log.setRect(0,scene.toolbar.top(),uiCamera.width - scene.attack.width(),0);
  }
  float pos=scene.toolbar.top();
  if (scene.tagAttack) {
    scene.attack.setPos(tagLeft,pos - scene.attack.height());
    scene.attack.flip(tagLeft == 0);
    pos=scene.attack.top();
  }
  if (scene.tagLoot) {
    scene.loot.setPos(tagLeft,pos - scene.loot.height());
    scene.loot.flip(tagLeft == 0);
    pos=scene.loot.top();
  }
  if (scene.tagResume) {
    scene.resume.setPos(tagLeft,pos - scene.resume.height());
    scene.resume.flip(tagLeft == 0);
  }
}",0.9843561973525872
164282,"public static void layoutTags(){
  float tagLeft=ShatteredPixelDungeon.flipTags() ? 0 : uiCamera.width - scene.attack.width();
  if (ShatteredPixelDungeon.flipTags()) {
    scene.log.setRect(scene.attack.width(),scene.toolbar.top(),uiCamera.width - scene.attack.width(),0);
  }
 else {
    scene.log.setRect(0,scene.toolbar.top(),uiCamera.width - scene.attack.width(),0);
  }
  float pos=scene.toolbar.top();
  if (scene.tagAttack) {
    scene.attack.setPos(tagLeft,pos - scene.attack.height());
    scene.attack.flip(tagLeft == 0);
    pos=scene.attack.top();
  }
  if (scene.tagLoot) {
    scene.loot.setPos(tagLeft,pos - scene.loot.height());
    scene.loot.flip(tagLeft == 0);
    pos=scene.loot.top();
  }
  if (scene.tagResume) {
    scene.resume.setPos(tagLeft,pos - scene.resume.height());
    scene.resume.flip(tagLeft == 0);
  }
}","public static void layoutTags(){
  if (scene == null)   return;
  float tagLeft=ShatteredPixelDungeon.flipTags() ? 0 : uiCamera.width - scene.attack.width();
  if (ShatteredPixelDungeon.flipTags()) {
    scene.log.setRect(scene.attack.width(),scene.toolbar.top(),uiCamera.width - scene.attack.width(),0);
  }
 else {
    scene.log.setRect(0,scene.toolbar.top(),uiCamera.width - scene.attack.width(),0);
  }
  float pos=scene.toolbar.top();
  if (scene.tagAttack) {
    scene.attack.setPos(tagLeft,pos - scene.attack.height());
    scene.attack.flip(tagLeft == 0);
    pos=scene.attack.top();
  }
  if (scene.tagLoot) {
    scene.loot.setPos(tagLeft,pos - scene.loot.height());
    scene.loot.flip(tagLeft == 0);
    pos=scene.loot.top();
  }
  if (scene.tagResume) {
    scene.resume.setPos(tagLeft,pos - scene.resume.height());
    scene.resume.flip(tagLeft == 0);
  }
}",0.9818819403857392
164283,"public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    ItemSprite sprite=heap.sprite=new ItemSprite();
    sprite.link(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}","public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    ItemSprite sprite=heap.sprite=new ItemSprite();
    sprite.link(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.seen=fieldOfView[cell];
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}",0.9912859783469764
164284,"public static void initArtifacts(){
  Category.ARTIFACT.probs=new float[]{0,1,0,1,0,1,1,1,1,0,0,0,1};
  spawnedArtifacts=new ArrayList<String>();
}","public static void initArtifacts(){
  Category.ARTIFACT.probs=INITIAL_ARTIFACT_PROBS;
  if (Ghost.Quest.processed)   Category.ARTIFACT.probs[10]=1;
  spawnedArtifacts=new ArrayList<String>();
}",0.6823529411764706
164285,"public OptionSlider(String title,String minTxt,String maxTxt,int minVal,int maxVal){
  super();
  this.title.text(title);
  this.title.measure();
  this.minTxt.text(minTxt);
  this.minTxt.measure();
  this.maxTxt.text(maxTxt);
  this.maxTxt.measure();
  this.minVal=minVal;
  this.maxVal=maxVal;
  if (minVal > maxVal)   throw new IllegalArgumentException();
  sliderTicks=new ColorBlock[(maxVal - minVal) + 1];
  for (int i=0; i < sliderTicks.length; i++) {
    add(sliderTicks[i]=new ColorBlock(1,11,0xFF222222));
  }
  add(sliderNode);
}","public OptionSlider(String title,String minTxt,String maxTxt,int minVal,int maxVal){
  super();
  this.title.text(title);
  this.title.measure();
  this.minTxt.text(minTxt);
  this.minTxt.measure();
  this.maxTxt.text(maxTxt);
  this.maxTxt.measure();
  this.minVal=minVal;
  this.maxVal=maxVal;
  if (minVal > maxVal) {
    active=false;
    visible=false;
  }
  sliderTicks=new ColorBlock[(maxVal - minVal) + 1];
  for (int i=0; i < sliderTicks.length; i++) {
    add(sliderTicks[i]=new ColorBlock(1,11,0xFF222222));
  }
  add(sliderNode);
}",0.925207756232687
164286,"public WndDisplay(){
  OptionSlider scale=new OptionSlider(""String_Node_Str"",(int)Math.ceil(2 * Game.density) + ""String_Node_Str"",PixelScene.maxDefaultZoom + ""String_Node_Str"",(int)Math.ceil(2 * Game.density),PixelScene.maxDefaultZoom){
    @Override protected void onChange(){
      ShatteredPixelDungeon.scale(getSelectedValue());
    }
  }
;
  scale.setSelectedValue(PixelScene.defaultZoom);
  if ((int)Math.ceil(2 * Game.density) < PixelScene.maxDefaultZoom) {
    scale.setRect(0,0,WIDTH,SLIDER_HEIGHT);
    add(scale);
  }
 else {
    scale.setRect(0,0,0,0);
  }
  CheckBox chkImmersive=new CheckBox(""String_Node_Str""){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.immerse(checked());
    }
  }
;
  chkImmersive.setRect(0,scale.bottom() + GAP_SML,WIDTH,BTN_HEIGHT);
  chkImmersive.checked(ShatteredPixelDungeon.immersed());
  chkImmersive.enable(android.os.Build.VERSION.SDK_INT >= 19);
  add(chkImmersive);
  OptionSlider brightness=new OptionSlider(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-2,4){
    @Override protected void onChange(){
      ShatteredPixelDungeon.brightness(getSelectedValue());
    }
  }
;
  brightness.setSelectedValue(ShatteredPixelDungeon.brightness());
  brightness.setRect(0,chkImmersive.bottom() + GAP_LRG,WIDTH,SLIDER_HEIGHT);
  add(brightness);
  BitmapText barDesc=PixelScene.createText(""String_Node_Str"",9);
  barDesc.measure();
  barDesc.x=(WIDTH - barDesc.width()) / 2;
  barDesc.y=brightness.bottom() + GAP_LRG;
  add(barDesc);
  RedButton btnSplit=new RedButton(""String_Node_Str""){
    @Override protected void onClick(){
      ShatteredPixelDungeon.toolbarMode(Toolbar.Mode.SPLIT.name());
      Toolbar.updateLayout();
    }
  }
;
  btnSplit.setRect(1,barDesc.y + barDesc.height(),36,BTN_HEIGHT);
  add(btnSplit);
  RedButton btnGrouped=new RedButton(""String_Node_Str""){
    @Override protected void onClick(){
      ShatteredPixelDungeon.toolbarMode(Toolbar.Mode.GROUP.name());
      Toolbar.updateLayout();
    }
  }
;
  btnGrouped.setRect(btnSplit.right() + 1,barDesc.y + barDesc.height(),36,BTN_HEIGHT);
  add(btnGrouped);
  RedButton btnCentered=new RedButton(""String_Node_Str""){
    @Override protected void onClick(){
      ShatteredPixelDungeon.toolbarMode(Toolbar.Mode.CENTER.name());
      Toolbar.updateLayout();
    }
  }
;
  btnCentered.setRect(btnGrouped.right() + 1,barDesc.y + barDesc.height(),36,BTN_HEIGHT);
  add(btnCentered);
  OptionSlider slots=new OptionSlider(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,4){
    @Override protected void onChange(){
      ShatteredPixelDungeon.quickSlots(getSelectedValue());
      Toolbar.updateLayout();
    }
  }
;
  slots.setSelectedValue(ShatteredPixelDungeon.quickSlots());
  slots.setRect(0,btnGrouped.bottom() + GAP_SML,WIDTH,SLIDER_HEIGHT);
  add(slots);
  CheckBox chkFlip=new CheckBox(""String_Node_Str""){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.flippedUI(checked());
      Toolbar.updateLayout();
    }
  }
;
  chkFlip.setRect(0,slots.bottom() + GAP_SML,WIDTH,BTN_HEIGHT);
  chkFlip.checked(ShatteredPixelDungeon.flippedUI());
  add(chkFlip);
  resize(WIDTH,(int)chkFlip.bottom());
}","public WndDisplay(){
  OptionSlider scale=new OptionSlider(""String_Node_Str"",(int)Math.ceil(2 * Game.density) + ""String_Node_Str"",PixelScene.maxDefaultZoom + ""String_Node_Str"",(int)Math.ceil(2 * Game.density),PixelScene.maxDefaultZoom){
    @Override protected void onChange(){
      ShatteredPixelDungeon.scale(getSelectedValue());
      ShatteredPixelDungeon.resetScene();
    }
  }
;
  scale.setSelectedValue(PixelScene.defaultZoom);
  if ((int)Math.ceil(2 * Game.density) < PixelScene.maxDefaultZoom) {
    scale.setRect(0,0,WIDTH,SLIDER_HEIGHT);
    add(scale);
  }
 else {
    scale.setRect(0,0,0,0);
  }
  CheckBox chkImmersive=new CheckBox(""String_Node_Str""){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.immerse(checked());
    }
  }
;
  chkImmersive.setRect(0,scale.bottom() + GAP_SML,WIDTH,BTN_HEIGHT);
  chkImmersive.checked(ShatteredPixelDungeon.immersed());
  chkImmersive.enable(android.os.Build.VERSION.SDK_INT >= 19);
  add(chkImmersive);
  OptionSlider brightness=new OptionSlider(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-2,4){
    @Override protected void onChange(){
      ShatteredPixelDungeon.brightness(getSelectedValue());
    }
  }
;
  brightness.setSelectedValue(ShatteredPixelDungeon.brightness());
  brightness.setRect(0,chkImmersive.bottom() + GAP_LRG,WIDTH,SLIDER_HEIGHT);
  add(brightness);
  BitmapText barDesc=PixelScene.createText(""String_Node_Str"",9);
  barDesc.measure();
  barDesc.x=(WIDTH - barDesc.width()) / 2;
  barDesc.y=brightness.bottom() + GAP_LRG;
  add(barDesc);
  RedButton btnSplit=new RedButton(""String_Node_Str""){
    @Override protected void onClick(){
      ShatteredPixelDungeon.toolbarMode(Toolbar.Mode.SPLIT.name());
      Toolbar.updateLayout();
    }
  }
;
  btnSplit.setRect(1,barDesc.y + barDesc.height(),36,BTN_HEIGHT);
  add(btnSplit);
  RedButton btnGrouped=new RedButton(""String_Node_Str""){
    @Override protected void onClick(){
      ShatteredPixelDungeon.toolbarMode(Toolbar.Mode.GROUP.name());
      Toolbar.updateLayout();
    }
  }
;
  btnGrouped.setRect(btnSplit.right() + 1,barDesc.y + barDesc.height(),36,BTN_HEIGHT);
  add(btnGrouped);
  RedButton btnCentered=new RedButton(""String_Node_Str""){
    @Override protected void onClick(){
      ShatteredPixelDungeon.toolbarMode(Toolbar.Mode.CENTER.name());
      Toolbar.updateLayout();
    }
  }
;
  btnCentered.setRect(btnGrouped.right() + 1,barDesc.y + barDesc.height(),36,BTN_HEIGHT);
  add(btnCentered);
  OptionSlider slots=new OptionSlider(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,4){
    @Override protected void onChange(){
      ShatteredPixelDungeon.quickSlots(getSelectedValue());
      Toolbar.updateLayout();
    }
  }
;
  slots.setSelectedValue(ShatteredPixelDungeon.quickSlots());
  slots.setRect(0,btnGrouped.bottom() + GAP_SML,WIDTH,SLIDER_HEIGHT);
  add(slots);
  CheckBox chkFlip=new CheckBox(""String_Node_Str""){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.flippedUI(checked());
      Toolbar.updateLayout();
    }
  }
;
  chkFlip.setRect(0,slots.bottom() + GAP_SML,WIDTH,BTN_HEIGHT);
  chkFlip.checked(ShatteredPixelDungeon.flippedUI());
  add(chkFlip);
  resize(WIDTH,(int)chkFlip.bottom());
}",0.9935125115848008
164287,"@Override protected void decorate(){
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(4) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(2) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      int count=(map[i + 1] == Terrain.WALL ? 1 : 0) + (map[i - 1] == Terrain.WALL ? 1 : 0) + (map[i + WIDTH] == Terrain.WALL ? 1 : 0)+ (map[i - WIDTH] == Terrain.WALL ? 1 : 0);
      if (Random.Int(16) < count * count) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  if (Dungeon.depth == 2)   for (  Room r : roomEntrance.connected.keySet()) {
    Room.Door d=roomEntrance.connected.get(r);
    map[d.x + d.y * WIDTH]=Terrain.SECRET_DOOR;
  }
  placeSign();
}","@Override protected void decorate(){
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(4) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(2) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      int count=(map[i + 1] == Terrain.WALL ? 1 : 0) + (map[i - 1] == Terrain.WALL ? 1 : 0) + (map[i + WIDTH] == Terrain.WALL ? 1 : 0)+ (map[i - WIDTH] == Terrain.WALL ? 1 : 0);
      if (Random.Int(16) < count * count) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  if (Dungeon.depth == 2)   for (  Room r : roomEntrance.connected.keySet()) {
    Room.Door d=roomEntrance.connected.get(r);
    if (d.type == Room.Door.Type.REGULAR)     map[d.x + d.y * WIDTH]=Terrain.SECRET_DOOR;
  }
  placeSign();
}",0.9789579158316634
164288,"@Override public void onHit(MagesStaff staff,Char attacker,Char defender,int damage){
  int level=Math.max(0,0);
  int maxValue=damage * (level + 2) / (level + 6);
  int effValue=Math.min(Random.IntRange(0,maxValue),attacker.HT - attacker.HP);
  Buff.affect(attacker,Sungrass.Health.class).boost(effValue);
}","@Override public void onHit(MagesStaff staff,Char attacker,Char defender,int damage){
  int level=Math.max(0,staff.level);
  int maxValue=damage * (level + 2) / (level + 6);
  int effValue=Math.min(Random.IntRange(0,maxValue),attacker.HT - attacker.HP);
  Buff.affect(attacker,Sungrass.Health.class).boost(effValue);
}",0.9808306709265175
164289,"public Item transmute(){
  CellEmitter.get(pos).burst(Speck.factory(Speck.BUBBLE),3);
  Splash.at(pos,0xFFFFFF,3);
  float chances[]=new float[items.size()];
  int count=0;
  if (items.size() == 2 && items.get(0) instanceof Seed && items.get(1) instanceof Blandfruit) {
    Sample.INSTANCE.play(Assets.SND_PUFF);
    CellEmitter.center(pos).burst(Speck.factory(Speck.EVOKE),3);
    Blandfruit result=new Blandfruit();
    result.cook((Seed)items.get(0));
    destroy();
    return result;
  }
  int index=0;
  for (  Item item : items) {
    if (item instanceof Seed) {
      count+=item.quantity;
      chances[index++]=item.quantity;
    }
 else {
      count=0;
      break;
    }
  }
  AlchemistsToolkit.alchemy alchemy=Dungeon.hero.buff(AlchemistsToolkit.alchemy.class);
  int bonus=alchemy != null ? alchemy.level() : -1;
  if (bonus != -1 ? alchemy.tryCook(count) : count >= SEEDS_TO_POTION) {
    CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
    Sample.INSTANCE.play(Assets.SND_PUFF);
    Item potion;
    if (Random.Int(count + bonus) == 0) {
      CellEmitter.center(pos).burst(Speck.factory(Speck.EVOKE),3);
      destroy();
      Statistics.potionsCooked++;
      Badges.validatePotionsCooked();
      potion=Generator.random(Generator.Category.POTION);
    }
 else {
      Seed proto=(Seed)items.get(Random.chances(chances));
      Class<? extends Item> itemClass=proto.alchemyClass;
      destroy();
      Statistics.potionsCooked++;
      Badges.validatePotionsCooked();
      if (itemClass == null) {
        potion=Generator.random(Generator.Category.POTION);
      }
 else {
        try {
          potion=itemClass.newInstance();
        }
 catch (        Exception e) {
          return null;
        }
      }
    }
    if (bonus > 0)     if (Random.Int(1000 / bonus) == 0)     return new PotionOfExperience();
    while (potion instanceof PotionOfHealing && Random.Int(15) - Dungeon.limitedDrops.cookingHP.count >= 0)     potion=Generator.random(Generator.Category.POTION);
    if (potion instanceof PotionOfHealing)     Dungeon.limitedDrops.cookingHP.count++;
    return potion;
  }
 else {
    return null;
  }
}","public Item transmute(){
  CellEmitter.get(pos).burst(Speck.factory(Speck.BUBBLE),3);
  Splash.at(pos,0xFFFFFF,3);
  float chances[]=new float[items.size()];
  int count=0;
  if (items.size() == 2 && items.get(0) instanceof Seed && items.get(1) instanceof Blandfruit) {
    Sample.INSTANCE.play(Assets.SND_PUFF);
    CellEmitter.center(pos).burst(Speck.factory(Speck.EVOKE),3);
    Blandfruit result=new Blandfruit();
    result.cook((Seed)items.get(0));
    destroy();
    return result;
  }
  int index=0;
  for (  Item item : items) {
    if (item instanceof Seed) {
      count+=item.quantity;
      chances[index++]=item.quantity;
    }
 else {
      count=0;
      break;
    }
  }
  AlchemistsToolkit.alchemy alchemy=Dungeon.hero.buff(AlchemistsToolkit.alchemy.class);
  int bonus=alchemy != null ? alchemy.level() : -1;
  if (bonus != -1 ? alchemy.tryCook(count) : count >= SEEDS_TO_POTION) {
    CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL),6);
    Sample.INSTANCE.play(Assets.SND_PUFF);
    Item potion;
    if (Random.Int(count + bonus) == 0) {
      CellEmitter.center(pos).burst(Speck.factory(Speck.EVOKE),3);
      destroy();
      Statistics.potionsCooked++;
      Badges.validatePotionsCooked();
      potion=Generator.random(Generator.Category.POTION);
    }
 else {
      Seed proto=(Seed)items.get(Random.chances(chances));
      Class<? extends Item> itemClass=proto.alchemyClass;
      destroy();
      Statistics.potionsCooked++;
      Badges.validatePotionsCooked();
      if (itemClass == null) {
        potion=Generator.random(Generator.Category.POTION);
      }
 else {
        try {
          potion=itemClass.newInstance();
        }
 catch (        Exception e) {
          return null;
        }
      }
    }
    if (bonus > 0)     if (Random.Int(1000 / bonus) == 0)     return new PotionOfExperience();
    while (potion instanceof PotionOfHealing && Random.Int(10) < Dungeon.limitedDrops.cookingHP.count)     potion=Generator.random(Generator.Category.POTION);
    if (potion instanceof PotionOfHealing)     Dungeon.limitedDrops.cookingHP.count++;
    return potion;
  }
 else {
    return null;
  }
}",0.9969704031694244
164290,"@Override public String desc(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (count <= 2 ? ""String_Node_Str"" : ""String_Node_Str"" + ((count - 2) / 5f) + ""String_Node_Str"");
}","@Override public String desc(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (count <= 2 ? ""String_Node_Str"" : ""String_Node_Str"" + ((count - 2) * 20f) + ""String_Node_Str"");
}",0.9861932938856016
164291,"private boolean getCloser(final int target){
  if (rooted) {
    Camera.main.shake(1,1f);
    return false;
  }
  int step=-1;
  if (Level.adjacent(pos,target)) {
    if (Actor.findChar(target) == null) {
      if (Level.pit[target] && !flying && !Chasm.jumpConfirmed) {
        if (!Level.solid[target]) {
          Chasm.heroJump(this);
          interrupt();
        }
        return false;
      }
      if (Level.passable[target] || Level.avoid[target]) {
        step=target;
      }
    }
  }
 else {
    int len=Level.LENGTH;
    boolean[] p=Level.passable;
    boolean[] v=Dungeon.level.visited;
    boolean[] m=Dungeon.level.mapped;
    boolean[] passable=new boolean[len];
    for (int i=0; i < len; i++) {
      passable[i]=p[i] && (v[i] || m[i]);
    }
    step=Dungeon.findPath(this,pos,target,passable,Level.fieldOfView);
  }
  if (step != -1) {
    int oldPos=pos;
    move(step);
    sprite.move(oldPos,pos);
    spend(1 / speed());
    return true;
  }
 else {
    return false;
  }
}","private boolean getCloser(final int target){
  if (rooted) {
    Camera.main.shake(1,1f);
    return false;
  }
  int step=-1;
  if (Level.adjacent(pos,target)) {
    if (Actor.findChar(target) == null) {
      if (Level.pit[target] && !flying && !Chasm.jumpConfirmed) {
        if (!Level.solid[target]) {
          Chasm.heroJump(this);
          interrupt();
        }
        return false;
      }
      if (Level.passable[target] || Level.avoid[target]) {
        step=target;
      }
    }
  }
 else {
    int len=Level.LENGTH;
    boolean[] p=Level.passable;
    boolean[] v=Dungeon.level.visited;
    boolean[] m=Dungeon.level.mapped;
    boolean[] passable=new boolean[len];
    for (int i=0; i < len; i++) {
      passable[i]=p[i] && (v[i] || m[i]);
    }
    step=Dungeon.findPath(this,pos,target,passable,Level.fieldOfView);
  }
  if (step != -1) {
    sprite.move(pos,step);
    move(step);
    spend(1 / speed());
    return true;
  }
 else {
    return false;
  }
}",0.9556004036326944
164292,"@Override public Item upgrade(boolean enchant){
  super.upgrade(enchant);
  STR=10;
  if (wand != null) {
    int curCharges=wand.curCharges;
    wand.upgrade();
    wand.maxCharges=Math.min(wand.maxCharges + 1,10);
    wand.curCharges=curCharges + 1;
    updateQuickslot();
  }
  return this;
}","@Override public Item upgrade(boolean enchant){
  super.upgrade(enchant);
  STR=10;
  if (wand != null) {
    int curCharges=wand.curCharges;
    wand.upgrade();
    wand.maxCharges=Math.min(wand.maxCharges + 1,10);
    wand.curCharges=Math.min(wand.curCharges + 1,10);
    updateQuickslot();
  }
  return this;
}",0.9703947368421052
164293,"@Override public void activate(){
  if (Dungeon.bossLevel()) {
    return;
  }
  int nMobs=1;
  if (Random.Int(2) == 0) {
    nMobs++;
    if (Random.Int(2) == 0) {
      nMobs++;
    }
  }
  ArrayList<Integer> candidates=new ArrayList<>();
  for (int i=0; i < Level.NEIGHBOURS8.length; i++) {
    int p=pos + Level.NEIGHBOURS8[i];
    if (Actor.findChar(p) == null && (Level.passable[p] || Level.avoid[p])) {
      candidates.add(p);
    }
  }
  ArrayList<Integer> respawnPoints=new ArrayList<>();
  while (nMobs > 0 && candidates.size() > 0) {
    int index=Random.index(candidates);
    DUMMY.pos=candidates.get(index);
    respawnPoints.add(candidates.remove(index));
    nMobs--;
  }
  for (  Integer point : respawnPoints) {
    Mob mob=Bestiary.mob(Dungeon.depth);
    mob.state=mob.WANDERING;
    GameScene.add(mob,DELAY);
    ScrollOfTeleportation.appear(mob,point);
  }
}","@Override public void activate(){
  if (Dungeon.bossLevel()) {
    return;
  }
  int nMobs=1;
  if (Random.Int(2) == 0) {
    nMobs++;
    if (Random.Int(2) == 0) {
      nMobs++;
    }
  }
  ArrayList<Integer> candidates=new ArrayList<>();
  for (int i=0; i < Level.NEIGHBOURS8.length; i++) {
    int p=pos + Level.NEIGHBOURS8[i];
    if (Actor.findChar(p) == null && (Level.passable[p] || Level.avoid[p])) {
      candidates.add(p);
    }
  }
  ArrayList<Integer> respawnPoints=new ArrayList<>();
  while (nMobs > 0 && candidates.size() > 0) {
    int index=Random.index(candidates);
    respawnPoints.add(candidates.remove(index));
    nMobs--;
  }
  ArrayList<Mob> mobs=new ArrayList<>();
  for (  Integer point : respawnPoints) {
    Mob mob=Bestiary.mob(Dungeon.depth);
    mob.state=mob.WANDERING;
    mob.pos=point;
    GameScene.add(mob,DELAY);
    mobs.add(mob);
  }
  for (  Mob mob : mobs) {
    ScrollOfTeleportation.appear(mob,mob.pos);
  }
}",0.9134458356015244
164294,"private static void rareEffect(final Wand wand,final Hero user,final Ballistica bolt){
switch (Random.Int(4)) {
case 0:
    cursedFX(user,bolt,new Callback(){
      public void call(){
        Char ch=Actor.findChar(bolt.collisionPos);
        if (ch != null && ch != user) {
          Sheep sheep=new Sheep();
          sheep.lifespan=10;
          sheep.pos=ch.pos;
          ch.sprite.killAndErase();
          Actor.remove(ch);
          Dungeon.level.mobs.remove(ch);
          HealthIndicator.instance.target(null);
          GameScene.add(sheep);
          CellEmitter.get(sheep.pos).burst(Speck.factory(Speck.WOOL),4);
        }
 else {
          GLog.i(""String_Node_Str"");
        }
        wand.wandUsed();
      }
    }
);
  break;
case 1:
KindOfWeapon weapon=user.belongings.weapon;
Armor armor=user.belongings.armor;
KindofMisc misc1=user.belongings.misc1;
KindofMisc misc2=user.belongings.misc2;
if (weapon != null) weapon.cursed=weapon.cursedKnown=true;
if (armor != null) armor.cursed=armor.cursedKnown=true;
if (misc1 != null) misc1.cursed=misc1.cursedKnown=true;
if (misc2 != null) misc2.cursed=misc2.cursedKnown=true;
EquipableItem.equipCursed(user);
GLog.n(""String_Node_Str"");
wand.wandUsed();
break;
case 2:
if (Dungeon.depth > 1 && !Dungeon.bossLevel()) {
Buff buff=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
if (buff != null) buff.detach();
for (Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) if (mob instanceof DriedRose.GhostHero) mob.destroy();
InterlevelScene.mode=InterlevelScene.Mode.RETURN;
InterlevelScene.returnDepth=Random.Int(Dungeon.depth - 1) + 1;
InterlevelScene.returnPos=-1;
Game.switchScene(InterlevelScene.class);
}
 else {
ScrollOfTeleportation.teleportHero(user);
wand.wandUsed();
}
break;
case 3:
new SummoningTrap().set(user.pos).activate();
wand.wandUsed();
break;
}
}","private static void rareEffect(final Wand wand,final Hero user,final Ballistica bolt){
switch (Random.Int(4)) {
case 0:
    cursedFX(user,bolt,new Callback(){
      public void call(){
        Char ch=Actor.findChar(bolt.collisionPos);
        if (ch != null && ch != user) {
          Sheep sheep=new Sheep();
          sheep.lifespan=10;
          sheep.pos=ch.pos;
          ch.destroy();
          ch.sprite.killAndErase();
          Dungeon.level.mobs.remove(ch);
          HealthIndicator.instance.target(null);
          GameScene.add(sheep);
          CellEmitter.get(sheep.pos).burst(Speck.factory(Speck.WOOL),4);
        }
 else {
          GLog.i(""String_Node_Str"");
        }
        wand.wandUsed();
      }
    }
);
  break;
case 1:
KindOfWeapon weapon=user.belongings.weapon;
Armor armor=user.belongings.armor;
KindofMisc misc1=user.belongings.misc1;
KindofMisc misc2=user.belongings.misc2;
if (weapon != null) weapon.cursed=weapon.cursedKnown=true;
if (armor != null) armor.cursed=armor.cursedKnown=true;
if (misc1 != null) misc1.cursed=misc1.cursedKnown=true;
if (misc2 != null) misc2.cursed=misc2.cursedKnown=true;
EquipableItem.equipCursed(user);
GLog.n(""String_Node_Str"");
wand.wandUsed();
break;
case 2:
if (Dungeon.depth > 1 && !Dungeon.bossLevel()) {
Buff buff=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
if (buff != null) buff.detach();
for (Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) if (mob instanceof DriedRose.GhostHero) mob.destroy();
InterlevelScene.mode=InterlevelScene.Mode.RETURN;
InterlevelScene.returnDepth=Random.Int(Dungeon.depth - 1) + 1;
InterlevelScene.returnPos=-1;
Game.switchScene(InterlevelScene.class);
}
 else {
ScrollOfTeleportation.teleportHero(user);
wand.wandUsed();
}
break;
case 3:
new SummoningTrap().set(user.pos).activate();
wand.wandUsed();
break;
}
}",0.985792349726776
164295,"@Override public void proc(Char attacker,Char defender,int damage){
  if (wand != null && Dungeon.hero.subClass == HeroSubClass.BATTLEMAGE) {
    wand.partialCharge+=0.33f;
    ScrollOfRecharging.charge((Hero)attacker);
    wand.onHit(this,attacker,defender,damage);
  }
  super.proc(attacker,defender,damage);
}","@Override public void proc(Char attacker,Char defender,int damage){
  if (wand != null && Dungeon.hero.subClass == HeroSubClass.BATTLEMAGE) {
    if (wand.curCharges < wand.maxCharges)     wand.partialCharge+=0.33f;
    ScrollOfRecharging.charge((Hero)attacker);
    wand.onHit(this,attacker,defender,damage);
  }
  super.proc(attacker,defender,damage);
}",0.9355322338830584
164296,"@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch != null) {
    ch.damage(Math.max(1,Random.Int(ch.HP / 3,2 * ch.HP / 3)),LIGHTNING);
    if (ch == Dungeon.hero) {
      Camera.main.shake(2,0.3f);
      if (!ch.isAlive()) {
        Dungeon.fail(Utils.format(ResultDescriptions.TRAP,name));
        GLog.n(""String_Node_Str"");
      }
    }
    ArrayList<Lightning.Arc> arcs=new ArrayList<>();
    arcs.add(new Lightning.Arc(pos - Level.WIDTH,pos + Level.WIDTH));
    arcs.add(new Lightning.Arc(pos - 1,pos + 1));
    ch.sprite.parent.add(new Lightning(arcs,null));
  }
  Heap heap=Dungeon.level.heaps.get(pos);
  if (heap != null) {
    Item item=heap.items.peek();
    if (item instanceof Wand) {
      Wand wand=(Wand)item;
      ((Wand)item).curCharges+=(int)Math.ceil((wand.curCharges - wand.maxCharges) / 2f);
    }
  }
  CellEmitter.center(pos).burst(SparkParticle.FACTORY,Random.IntRange(3,4));
}","@Override public void activate(){
  Char ch=Actor.findChar(pos);
  if (ch != null) {
    ch.damage(Math.max(1,Random.Int(ch.HP / 3,2 * ch.HP / 3)),LIGHTNING);
    if (ch == Dungeon.hero) {
      Camera.main.shake(2,0.3f);
      if (!ch.isAlive()) {
        Dungeon.fail(Utils.format(ResultDescriptions.TRAP,name));
        GLog.n(""String_Node_Str"");
      }
    }
    ArrayList<Lightning.Arc> arcs=new ArrayList<>();
    arcs.add(new Lightning.Arc(pos - Level.WIDTH,pos + Level.WIDTH));
    arcs.add(new Lightning.Arc(pos - 1,pos + 1));
    ch.sprite.parent.add(new Lightning(arcs,null));
  }
  Heap heap=Dungeon.level.heaps.get(pos);
  if (heap != null) {
    Item item=heap.items.peek();
    if (item instanceof Wand) {
      Wand wand=(Wand)item;
      ((Wand)item).curCharges+=(int)Math.ceil((wand.maxCharges - wand.curCharges) / 2f);
    }
  }
  CellEmitter.center(pos).burst(SparkParticle.FACTORY,Random.IntRange(3,4));
}",0.9935275080906149
164297,"private void build(int from,int to,boolean stopTarget,boolean stopChars,boolean stopTerrain){
  int w=Level.WIDTH;
  int x0=from % w;
  int x1=to % w;
  int y0=from / w;
  int y1=to / w;
  int dx=x1 - x0;
  int dy=y1 - y0;
  int stepX=dx > 0 ? +1 : -1;
  int stepY=dy > 0 ? +1 : -1;
  dx=Math.abs(dx);
  dy=Math.abs(dy);
  int stepA;
  int stepB;
  int dA;
  int dB;
  if (dx > dy) {
    stepA=stepX;
    stepB=stepY * w;
    dA=dx;
    dB=dy;
  }
 else {
    stepA=stepY * w;
    stepB=stepX;
    dA=dy;
    dB=dx;
  }
  int cell=from;
  int err=dA / 2;
  while (Level.insideMap(cell)) {
    if (stopTerrain && !Level.passable[cell] && !Level.avoid[cell]) {
      collide(path.get(path.size() - 1));
    }
    path.add(cell);
    if ((stopTerrain && Level.losBlocking[cell]) || (cell != sourcePos && stopChars && Actor.findChar(cell) != null) || (cell == to && stopTarget)) {
      collide(cell);
    }
    cell+=stepA;
    err+=dB;
    if (err >= dA) {
      err=err - dA;
      cell=cell + stepB;
    }
  }
}","private void build(int from,int to,boolean stopTarget,boolean stopChars,boolean stopTerrain){
  int w=Level.WIDTH;
  int x0=from % w;
  int x1=to % w;
  int y0=from / w;
  int y1=to / w;
  int dx=x1 - x0;
  int dy=y1 - y0;
  int stepX=dx > 0 ? +1 : -1;
  int stepY=dy > 0 ? +1 : -1;
  dx=Math.abs(dx);
  dy=Math.abs(dy);
  int stepA;
  int stepB;
  int dA;
  int dB;
  if (dx > dy) {
    stepA=stepX;
    stepB=stepY * w;
    dA=dx;
    dB=dy;
  }
 else {
    stepA=stepY * w;
    stepB=stepX;
    dA=dy;
    dB=dx;
  }
  int cell=from;
  int err=dA / 2;
  while (Level.insideMap(cell)) {
    if (stopTerrain && cell != sourcePos && !Level.passable[cell] && !Level.avoid[cell]) {
      collide(path.get(path.size() - 1));
    }
    path.add(cell);
    if ((stopTerrain && cell != sourcePos && Level.losBlocking[cell]) || (cell != sourcePos && stopChars && Actor.findChar(cell) != null) || (cell == to && stopTarget)) {
      collide(cell);
    }
    cell+=stepA;
    err+=dB;
    if (err >= dA) {
      err=err - dA;
      cell=cell + stepB;
    }
  }
}",0.9796511627906976
164298,"@Override protected void decorate(){
  for (  Room room : rooms) {
    if (room.type != Room.Type.STANDARD) {
      continue;
    }
    if (room.width() <= 3 || room.height() <= 3) {
      continue;
    }
    int s=room.square();
    if (Random.Int(s) > 8) {
      int corner=(room.left + 1) + (room.top + 1) * WIDTH;
      if (map[corner - 1] == Terrain.WALL && map[corner - WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    if (Random.Int(s) > 8) {
      int corner=(room.right - 1) + (room.top + 1) * WIDTH;
      if (map[corner + 1] == Terrain.WALL && map[corner - WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    if (Random.Int(s) > 8) {
      int corner=(room.left + 1) + (room.bottom - 1) * WIDTH;
      if (map[corner - 1] == Terrain.WALL && map[corner + WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    if (Random.Int(s) > 8) {
      int corner=(room.right - 1) + (room.bottom - 1) * WIDTH;
      if (map[corner + 1] == Terrain.WALL && map[corner + WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    for (    Room n : room.connected.keySet()) {
      if ((n.type == Room.Type.STANDARD || n.type == Room.Type.TUNNEL) && Random.Int(3) == 0) {
        Painter.set(this,room.connected.get(n),Terrain.EMPTY_DECO);
      }
    }
  }
  for (int i=WIDTH + 1; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.EMPTY) {
      int n=0;
      if (map[i + 1] == Terrain.WALL) {
        n++;
      }
      if (map[i - 1] == Terrain.WALL) {
        n++;
      }
      if (map[i + WIDTH] == Terrain.WALL) {
        n++;
      }
      if (map[i - WIDTH] == Terrain.WALL) {
        n++;
      }
      if (Random.Int(6) <= n) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.WALL && Random.Int(12) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  while (true) {
    int pos=roomEntrance.random();
    if (pos != entrance) {
      map[pos]=Terrain.SIGN;
      break;
    }
  }
  if (Dungeon.bossLevel(Dungeon.depth + 1)) {
    return;
  }
  for (  Room r : rooms) {
    if (r.type == Type.STANDARD) {
      for (      Room n : r.neigbours) {
        if (n.type == Type.STANDARD && !r.connected.containsKey(n)) {
          Rect w=r.intersect(n);
          if (w.left == w.right && w.bottom - w.top >= 5) {
            w.top+=2;
            w.bottom-=1;
            w.right++;
            Painter.fill(this,w.left,w.top,1,w.height(),Terrain.CHASM);
          }
 else           if (w.top == w.bottom && w.right - w.left >= 5) {
            w.left+=2;
            w.right-=1;
            w.bottom++;
            Painter.fill(this,w.left,w.top,w.width(),1,Terrain.CHASM);
          }
        }
      }
    }
  }
}","@Override protected void decorate(){
  for (  Room room : rooms) {
    if (room.type != Room.Type.STANDARD) {
      continue;
    }
    if (room.width() <= 3 || room.height() <= 3) {
      continue;
    }
    int s=room.square();
    if (Random.Int(s) > 8) {
      int corner=(room.left + 1) + (room.top + 1) * WIDTH;
      if (map[corner - 1] == Terrain.WALL && map[corner - WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    if (Random.Int(s) > 8) {
      int corner=(room.right - 1) + (room.top + 1) * WIDTH;
      if (map[corner + 1] == Terrain.WALL && map[corner - WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    if (Random.Int(s) > 8) {
      int corner=(room.left + 1) + (room.bottom - 1) * WIDTH;
      if (map[corner - 1] == Terrain.WALL && map[corner + WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    if (Random.Int(s) > 8) {
      int corner=(room.right - 1) + (room.bottom - 1) * WIDTH;
      if (map[corner + 1] == Terrain.WALL && map[corner + WIDTH] == Terrain.WALL) {
        map[corner]=Terrain.WALL;
      }
    }
    for (    Room n : room.connected.keySet()) {
      if ((n.type == Room.Type.STANDARD || n.type == Room.Type.TUNNEL) && Random.Int(3) == 0) {
        Painter.set(this,room.connected.get(n),Terrain.EMPTY_DECO);
      }
    }
  }
  for (int i=WIDTH + 1; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.EMPTY) {
      int n=0;
      if (map[i + 1] == Terrain.WALL) {
        n++;
      }
      if (map[i - 1] == Terrain.WALL) {
        n++;
      }
      if (map[i + WIDTH] == Terrain.WALL) {
        n++;
      }
      if (map[i - WIDTH] == Terrain.WALL) {
        n++;
      }
      if (Random.Int(6) <= n) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.WALL && Random.Int(12) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  placeSign();
  if (Dungeon.bossLevel(Dungeon.depth + 1)) {
    return;
  }
  for (  Room r : rooms) {
    if (r.type == Type.STANDARD) {
      for (      Room n : r.neigbours) {
        if (n.type == Type.STANDARD && !r.connected.containsKey(n)) {
          Rect w=r.intersect(n);
          if (w.left == w.right && w.bottom - w.top >= 5) {
            w.top+=2;
            w.bottom-=1;
            w.right++;
            Painter.fill(this,w.left,w.top,1,w.height(),Terrain.CHASM);
          }
 else           if (w.top == w.bottom && w.right - w.left >= 5) {
            w.left+=2;
            w.right-=1;
            w.bottom++;
            Painter.fill(this,w.left,w.top,w.width(),1,Terrain.CHASM);
          }
        }
      }
    }
  }
}",0.9750458715596332
164299,"@Override protected void decorate(){
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.EMPTY && Random.Int(10) == 0) {
      map[i]=Terrain.EMPTY_DECO;
    }
 else     if (map[i] == Terrain.WALL && Random.Int(8) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  while (true) {
    int pos=roomEntrance.random();
    if (pos != entrance) {
      map[pos]=Terrain.SIGN;
      break;
    }
  }
}","@Override protected void decorate(){
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.EMPTY && Random.Int(10) == 0) {
      map[i]=Terrain.EMPTY_DECO;
    }
 else     if (map[i] == Terrain.WALL && Random.Int(8) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  placeSign();
}",0.8040345821325648
164300,"@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      int count=0;
      for (int j=0; j < NEIGHBOURS8.length; j++) {
        if ((Terrain.flags[map[i + NEIGHBOURS8[j]]] & Terrain.PASSABLE) > 0) {
          count++;
        }
      }
      if (Random.Int(80) < count) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
 else     if (map[i] == Terrain.WALL && map[i - 1] != Terrain.WALL_DECO && map[i - WIDTH] != Terrain.WALL_DECO && Random.Int(20) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  while (true) {
    int pos=roomEntrance.random();
    if (pos != entrance) {
      map[pos]=Terrain.SIGN;
      break;
    }
  }
}","@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      int count=0;
      for (int j=0; j < NEIGHBOURS8.length; j++) {
        if ((Terrain.flags[map[i + NEIGHBOURS8[j]]] & Terrain.PASSABLE) > 0) {
          count++;
        }
      }
      if (Random.Int(80) < count) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
 else     if (map[i] == Terrain.WALL && map[i - 1] != Terrain.WALL_DECO && map[i - WIDTH] != Terrain.WALL_DECO && Random.Int(20) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  placeSign();
}",0.8955453149001537
164301,"@Override protected void decorate(){
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.EMPTY && Random.Int(10) == 0) {
      map[i]=Terrain.EMPTY_DECO;
    }
 else     if (map[i] == Terrain.WALL && Random.Int(8) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
 else     if (map[i] == Terrain.SECRET_DOOR) {
      map[i]=Terrain.DOOR;
    }
  }
  if (Imp.Quest.isCompleted()) {
    while (true) {
      int pos=roomEntrance.random();
      if (pos != entrance) {
        map[pos]=Terrain.SIGN;
        break;
      }
    }
  }
}","@Override protected void decorate(){
  for (int i=0; i < LENGTH; i++) {
    if (map[i] == Terrain.EMPTY && Random.Int(10) == 0) {
      map[i]=Terrain.EMPTY_DECO;
    }
 else     if (map[i] == Terrain.WALL && Random.Int(8) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
 else     if (map[i] == Terrain.SECRET_DOOR) {
      map[i]=Terrain.DOOR;
    }
  }
  if (Imp.Quest.isCompleted()) {
    placeSign();
  }
}",0.8347457627118644
164302,"@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      float c=0.15f;
      if (map[i + 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i + 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (Random.Float() < c) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(4) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(2) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  while (true) {
    int pos=roomEntrance.random();
    if (pos != entrance) {
      map[pos]=Terrain.SIGN;
      break;
    }
  }
  Point door=roomExit.entrance();
  arenaDoor=door.x + door.y * WIDTH;
  Painter.set(this,arenaDoor,Terrain.LOCKED_DOOR);
  Painter.fill(this,roomExit.left + 2,roomExit.top + 2,roomExit.width() - 3,roomExit.height() - 3,Terrain.INACTIVE_TRAP);
}","@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      float c=0.15f;
      if (map[i + 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i + 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (Random.Float() < c) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(4) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(2) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  placeSign();
  Point door=roomExit.entrance();
  arenaDoor=door.x + door.y * WIDTH;
  Painter.set(this,arenaDoor,Terrain.LOCKED_DOOR);
  Painter.fill(this,roomExit.left + 2,roomExit.top + 2,roomExit.width() - 3,roomExit.height() - 3,Terrain.INACTIVE_TRAP);
}",0.953125
164303,"@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      float c=0.05f;
      if (map[i + 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i + 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (Random.Float() < c) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(6) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(3) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  while (true) {
    int pos=roomEntrance.random();
    if (pos != entrance) {
      map[pos]=Terrain.SIGN;
      break;
    }
  }
}","@Override protected void decorate(){
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      float c=0.05f;
      if (map[i + 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i + WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i + 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (map[i - 1] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL) {
        c+=0.2f;
      }
      if (Random.Float() < c) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(6) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && (map[i + WIDTH] == Terrain.EMPTY || map[i + WIDTH] == Terrain.EMPTY_SP) && Random.Int(3) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  placeSign();
}",0.9424398625429552
164304,"@Override protected void decorate(){
  int start=roomExit.top * WIDTH + roomExit.left + 1;
  int end=start + roomExit.width() - 1;
  for (int i=start; i < end; i++) {
    if (i != exit && map[i] == Terrain.WALL) {
      map[i]=Terrain.WALL_DECO;
      map[i + WIDTH]=Terrain.WATER;
    }
 else {
      map[i + WIDTH]=Terrain.EMPTY;
    }
  }
  while (true) {
    int pos=roomEntrance.random();
    if (pos != entrance) {
      map[pos]=Terrain.SIGN;
      break;
    }
  }
}","@Override protected void decorate(){
  int start=roomExit.top * WIDTH + roomExit.left + 1;
  int end=start + roomExit.width() - 1;
  for (int i=start; i < end; i++) {
    if (i != exit && map[i] == Terrain.WALL) {
      map[i]=Terrain.WALL_DECO;
      map[i + WIDTH]=Terrain.WATER;
    }
 else {
      map[i + WIDTH]=Terrain.EMPTY;
    }
  }
  placeSign();
}",0.8389423076923077
164305,"@Override protected void decorate(){
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(4) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(2) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      int count=(map[i + 1] == Terrain.WALL ? 1 : 0) + (map[i - 1] == Terrain.WALL ? 1 : 0) + (map[i + WIDTH] == Terrain.WALL ? 1 : 0)+ (map[i - WIDTH] == Terrain.WALL ? 1 : 0);
      if (Random.Int(16) < count * count) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  while (true) {
    int pos=roomEntrance.random();
    if (pos != entrance) {
      map[pos]=Terrain.SIGN;
      break;
    }
  }
}","@Override protected void decorate(){
  for (int i=0; i < WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(4) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH; i < LENGTH - WIDTH; i++) {
    if (map[i] == Terrain.WALL && map[i - WIDTH] == Terrain.WALL && map[i + WIDTH] == Terrain.WATER && Random.Int(2) == 0) {
      map[i]=Terrain.WALL_DECO;
    }
  }
  for (int i=WIDTH + 1; i < LENGTH - WIDTH - 1; i++) {
    if (map[i] == Terrain.EMPTY) {
      int count=(map[i + 1] == Terrain.WALL ? 1 : 0) + (map[i - 1] == Terrain.WALL ? 1 : 0) + (map[i + WIDTH] == Terrain.WALL ? 1 : 0)+ (map[i - WIDTH] == Terrain.WALL ? 1 : 0);
      if (Random.Int(16) < count * count) {
        map[i]=Terrain.EMPTY_DECO;
      }
    }
  }
  placeSign();
}",0.9218203033838972
164306,"private void placePlants(float numPlants,float numDews,float numPods,float numStars){
  Iterator<Integer> cells=affectedCells.iterator();
  Level floor=Dungeon.level;
  while (cells.hasNext() && Random.Float() <= numPlants) {
    Plant.Seed seed=(Plant.Seed)Generator.random(Generator.Category.SEED);
    if (seed instanceof BlandfruitBush.Seed) {
      if (Random.Int(15) - Dungeon.limitedDrops.blandfruitSeed.count >= 0) {
        floor.plant(seed,cells.next());
        Dungeon.limitedDrops.blandfruitSeed.count++;
      }
    }
 else     if (seed != null)     floor.plant(seed,cells.next());
    numPlants--;
  }
  while (cells.hasNext() && Random.Float() <= numDews) {
    floor.plant(new Dewcatcher.Seed(),cells.next());
    numDews--;
  }
  while (cells.hasNext() && Random.Float() <= numPods) {
    floor.plant(new Seedpod.Seed(),cells.next());
    numPods--;
  }
  while (cells.hasNext() && Random.Float() <= numStars) {
    floor.plant(new Starflower.Seed(),cells.next());
    numStars--;
  }
}","private void placePlants(float numPlants,float numDews,float numPods,float numStars){
  Iterator<Integer> cells=affectedCells.iterator();
  Level floor=Dungeon.level;
  while (cells.hasNext() && Random.Float() <= numPlants) {
    Plant.Seed seed=(Plant.Seed)Generator.random(Generator.Category.SEED);
    if (seed instanceof BlandfruitBush.Seed) {
      if (Random.Int(15) - Dungeon.limitedDrops.blandfruitSeed.count >= 0) {
        floor.plant(seed,cells.next());
        Dungeon.limitedDrops.blandfruitSeed.count++;
      }
    }
 else     floor.plant(seed,cells.next());
    numPlants--;
  }
  while (cells.hasNext() && Random.Float() <= numDews) {
    floor.plant(new Dewcatcher.Seed(),cells.next());
    numDews--;
  }
  while (cells.hasNext() && Random.Float() <= numPods) {
    floor.plant(new Seedpod.Seed(),cells.next());
    numPods--;
  }
  while (cells.hasNext() && Random.Float() <= numStars) {
    floor.plant(new Starflower.Seed(),cells.next());
    numStars--;
  }
}",0.9889224572004028
164307,"@Override public int defenseProc(Char enemy,int damage){
  if (HP >= damage + 2) {
    ArrayList<Integer> candidates=new ArrayList<Integer>();
    boolean[] passable=Level.passable;
    int[] neighbours={pos + 1,pos - 1,pos + Level.WIDTH,pos - Level.WIDTH};
    for (    int n : neighbours) {
      if (passable[n] && Actor.findChar(n) == null) {
        candidates.add(n);
      }
    }
    if (candidates.size() > 0) {
      Swarm clone=split();
      clone.HP=(HP - damage) / 2;
      clone.pos=Random.element(candidates);
      clone.state=clone.HUNTING;
      if (Dungeon.level.map[clone.pos] == Terrain.DOOR) {
        Door.enter(clone.pos);
      }
      GameScene.add(clone,SPLIT_DELAY);
      Actor.addDelayed(new Pushing(clone,pos,clone.pos),-1);
      HP-=clone.HP;
    }
  }
  return damage;
}","@Override public int defenseProc(Char enemy,int damage){
  if (HP >= damage + 2) {
    ArrayList<Integer> candidates=new ArrayList<Integer>();
    boolean[] passable=Level.passable;
    int[] neighbours={pos + 1,pos - 1,pos + Level.WIDTH,pos - Level.WIDTH};
    for (    int n : neighbours) {
      if (passable[n] && Actor.findChar(n) == null) {
        candidates.add(n);
      }
    }
    if (candidates.size() > 0) {
      Swarm clone=split();
      clone.HP=(HP - damage) / 2;
      clone.pos=Random.element(candidates);
      clone.state=clone.HUNTING;
      if (Dungeon.level.map[clone.pos] == Terrain.DOOR) {
        Door.enter(clone.pos);
      }
      GameScene.add(clone,SPLIT_DELAY);
      Actor.addDelayed(new Pushing(clone,pos,clone.pos),-1);
      HP-=clone.HP;
    }
  }
  return super.defenseProc(enemy,damage);
}",0.9773700305810398
164308,"@Override public int defenseProc(Char enemy,int damage){
  if (state == FLEEING) {
    Dungeon.level.drop(new Gold(),pos).sprite.drop();
  }
  return damage;
}","@Override public int defenseProc(Char enemy,int damage){
  if (state == FLEEING) {
    Dungeon.level.drop(new Gold(),pos).sprite.drop();
  }
  return super.defenseProc(enemy,damage);
}",0.9271137026239068
164309,"@Override public void die(Object cause){
  super.die(cause);
  if (item != null) {
    Dungeon.level.drop(item,pos).sprite.drop();
  }
}","@Override public void die(Object cause){
  super.die(cause);
  if (item != null) {
    Dungeon.level.drop(item,pos).sprite.drop();
    if (item instanceof Honeypot.ShatteredPot)     ((Honeypot.ShatteredPot)item).setHolder(this);
  }
}",0.7351351351351352
164310,"public void call(){
  ch.pos=newPos;
  if (ch.pos == trajectory.collisionPos) {
    ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
    Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
    Dungeon.level.press(ch.pos,ch);
  }
}","public void call(){
  ch.pos=newPos;
  if (ch.pos == trajectory.collisionPos) {
    ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
    Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
  }
  Dungeon.level.press(ch.pos,ch);
}",0.9896551724137932
164311,"private void throwChar(final Char ch,final Ballistica trajectory,int power){
  int dist=Math.min(trajectory.dist,power);
  if ((ch instanceof King) || (ch instanceof Golem) || (ch instanceof Yog.RottingFist))   dist/=2;
  if (dist == 0 || ch instanceof Yog)   return;
  if (Actor.findChar(trajectory.path.get(dist)) != null) {
    dist--;
  }
  final int newPos=trajectory.path.get(dist);
  if (newPos == ch.pos)   return;
  final int finalDist=dist;
  Actor.addDelayed(new Pushing(ch,ch.pos,newPos,new Callback(){
    public void call(){
      ch.pos=newPos;
      if (ch.pos == trajectory.collisionPos) {
        ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
        Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
        Dungeon.level.press(ch.pos,ch);
      }
    }
  }
),-1);
}","private void throwChar(final Char ch,final Ballistica trajectory,int power){
  int dist=Math.min(trajectory.dist,power);
  if ((ch instanceof King) || (ch instanceof Golem) || (ch instanceof Yog.RottingFist))   dist/=2;
  if (dist == 0 || ch instanceof Yog)   return;
  if (Actor.findChar(trajectory.path.get(dist)) != null) {
    dist--;
  }
  final int newPos=trajectory.path.get(dist);
  if (newPos == ch.pos)   return;
  final int finalDist=dist;
  Actor.addDelayed(new Pushing(ch,ch.pos,newPos,new Callback(){
    public void call(){
      ch.pos=newPos;
      if (ch.pos == trajectory.collisionPos) {
        ch.damage(Random.NormalIntRange((finalDist + 1) / 2,finalDist),this);
        Paralysis.prolong(ch,Paralysis.class,Random.NormalIntRange((finalDist + 1) / 2,finalDist));
      }
      Dungeon.level.press(ch.pos,ch);
    }
  }
),-1);
}",0.991764705882353
164312,"public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.TRAP);
  fill(level,room,2,Terrain.EMPTY_SP);
  for (  int cell : room.getCells()) {
    if (level.map[cell] == Terrain.TRAP) {
      level.setTrap(new FireTrap().reveal(),cell);
    }
  }
  for (int i=0; i < 2; i++) {
    int pos;
    do {
      pos=room.random();
    }
 while (level.map[pos] != Terrain.EMPTY_SP);
    level.drop(Generator.random(Random.oneOf(Generator.Category.ARMOR,Generator.Category.WEAPON)),pos);
  }
  for (  Room.Door door : room.connected.values()) {
    door.set(Room.Door.Type.UNLOCKED);
    drawInside(level,room,door,1,Terrain.EMPTY);
  }
  Blacksmith npc=new Blacksmith();
  do {
    npc.pos=room.random(1);
  }
 while (level.heaps.get(npc.pos) != null);
  level.mobs.add(npc);
}","public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.TRAP);
  fill(level,room,2,Terrain.EMPTY_SP);
  for (int i=0; i < 2; i++) {
    int pos;
    do {
      pos=room.random();
    }
 while (level.map[pos] != Terrain.EMPTY_SP);
    level.drop(Generator.random(Random.oneOf(Generator.Category.ARMOR,Generator.Category.WEAPON)),pos);
  }
  for (  Room.Door door : room.connected.values()) {
    door.set(Room.Door.Type.UNLOCKED);
    drawInside(level,room,door,1,Terrain.EMPTY);
  }
  Blacksmith npc=new Blacksmith();
  do {
    npc.pos=room.random(1);
  }
 while (level.heaps.get(npc.pos) != null);
  level.mobs.add(npc);
  for (  int cell : room.getCells()) {
    if (level.map[cell] == Terrain.TRAP) {
      level.setTrap(new FireTrap().reveal(),cell);
    }
  }
}",0.8258221680876979
164313,"public MagesStaff(Wand wand){
  this();
  wand.identify();
  wand.cursed=false;
  this.wand=wand;
  wand.maxCharges=Math.min(wand.maxCharges + 1,10);
}","public MagesStaff(Wand wand){
  this();
  wand.identify();
  wand.cursed=false;
  this.wand=wand;
  wand.maxCharges=Math.min(wand.maxCharges + 1,10);
  wand.curCharges=wand.maxCharges;
}",0.8961424332344213
164314,"public Item imbueWand(Wand wand,Char owner){
  this.wand=null;
  GLog.p(""String_Node_Str"" + wand.name());
  if (enchantment != null) {
    GLog.w(""String_Node_Str"");
    enchant(null);
  }
  int targetLevel=Math.max(this.level,wand.level);
  int staffLevelDiff=targetLevel - this.level;
  if (staffLevelDiff > 0)   this.upgrade(staffLevelDiff);
 else   if (staffLevelDiff < 0)   this.degrade(Math.abs(staffLevelDiff));
  int wandLevelDiff=targetLevel - wand.level;
  if (wandLevelDiff > 0)   wand.upgrade(wandLevelDiff);
 else   if (wandLevelDiff < 0)   wand.degrade(Math.abs(wandLevelDiff));
  this.wand=wand;
  wand.maxCharges=Math.min(wand.maxCharges + 1,10);
  wand.identify();
  wand.cursed=false;
  wand.charge(owner);
  updateQuickslot();
  return this;
}","public Item imbueWand(Wand wand,Char owner){
  this.wand=null;
  GLog.p(""String_Node_Str"" + wand.name());
  if (enchantment != null) {
    GLog.w(""String_Node_Str"");
    enchant(null);
  }
  int targetLevel=Math.max(this.level,wand.level);
  int staffLevelDiff=targetLevel - this.level;
  if (staffLevelDiff > 0)   this.upgrade(staffLevelDiff);
 else   if (staffLevelDiff < 0)   this.degrade(Math.abs(staffLevelDiff));
  int wandLevelDiff=targetLevel - wand.level;
  if (wandLevelDiff > 0)   wand.upgrade(wandLevelDiff);
 else   if (wandLevelDiff < 0)   wand.degrade(Math.abs(wandLevelDiff));
  this.wand=wand;
  wand.maxCharges=Math.min(wand.maxCharges + 1,10);
  wand.curCharges=wand.maxCharges;
  wand.identify();
  wand.cursed=false;
  wand.charge(owner);
  updateQuickslot();
  return this;
}",0.9775497113534316
164315,"@Override public Item degrade(){
  super.degrade();
  STR=10;
  if (wand != null) {
    wand.degrade();
    wand.maxCharges=Math.min(wand.maxCharges + 1,10);
  }
  return this;
}","@Override public Item degrade(){
  super.degrade();
  STR=10;
  if (wand != null) {
    int curCharges=wand.curCharges;
    wand.degrade();
    wand.maxCharges=Math.min(wand.maxCharges + 1,10);
    wand.curCharges=curCharges - 1;
    updateQuickslot();
  }
  return this;
}",0.7893569844789357
164316,"@Override public Item upgrade(boolean enchant){
  super.upgrade(enchant);
  STR=10;
  if (wand != null) {
    wand.upgrade();
    wand.maxCharges=Math.min(wand.maxCharges + 1,10);
  }
  return this;
}","@Override public Item upgrade(boolean enchant){
  super.upgrade(enchant);
  STR=10;
  if (wand != null) {
    int curCharges=wand.curCharges;
    wand.upgrade();
    wand.maxCharges=Math.min(wand.maxCharges + 1,10);
    wand.curCharges=curCharges + 1;
    updateQuickslot();
  }
  return this;
}",0.8080808080808081
164317,"@Override protected void createMobs(){
  int mobsToSpawn=Dungeon.depth == 1 ? 10 : nMobs();
  HashSet<Room> stdRooms=new HashSet<>();
  for (  Room room : rooms) {
    if (room.type == Type.STANDARD)     stdRooms.add(room);
  }
  Iterator<Room> stdRoomIter=stdRooms.iterator();
  while (mobsToSpawn > 0) {
    if (!stdRoomIter.hasNext())     stdRoomIter=stdRooms.iterator();
    Room roomToSpawn=stdRoomIter.next();
    Mob mob=Bestiary.mob(Dungeon.depth);
    mob.pos=roomToSpawn.random();
    if (Actor.findChar(mob.pos) == null && Level.passable[mob.pos]) {
      mobsToSpawn--;
      mobs.add(mob);
      if (mobsToSpawn > 0 && Random.Int(4) == 0) {
        mob=Bestiary.mob(Dungeon.depth);
        mob.pos=roomToSpawn.random();
        if (Actor.findChar(mob.pos) == null && Level.passable[mob.pos]) {
          mobsToSpawn--;
          mobs.add(mob);
        }
      }
    }
  }
}","@Override protected void createMobs(){
  int mobsToSpawn=Dungeon.depth == 1 ? 10 : nMobs();
  HashSet<Room> stdRooms=new HashSet<>();
  for (  Room room : rooms) {
    if (room.type == Type.STANDARD)     stdRooms.add(room);
  }
  Iterator<Room> stdRoomIter=stdRooms.iterator();
  while (mobsToSpawn > 0) {
    if (!stdRoomIter.hasNext())     stdRoomIter=stdRooms.iterator();
    Room roomToSpawn=stdRoomIter.next();
    Mob mob=Bestiary.mob(Dungeon.depth);
    mob.pos=roomToSpawn.random();
    if (findMob(mob.pos) == null && Level.passable[mob.pos]) {
      mobsToSpawn--;
      mobs.add(mob);
      if (mobsToSpawn > 0 && Random.Int(4) == 0) {
        mob=Bestiary.mob(Dungeon.depth);
        mob.pos=roomToSpawn.random();
        if (findMob(mob.pos) == null && Level.passable[mob.pos]) {
          mobsToSpawn--;
          mobs.add(mob);
        }
      }
    }
  }
}",0.9852104664391352
164318,"public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.WATER);
  Room.Door door=room.entrance();
  door.set(Room.Door.Type.REGULAR);
  int x=-1;
  int y=-1;
  if (door.x == room.left) {
    x=room.right - 1;
    y=room.top + room.height() / 2;
  }
 else   if (door.x == room.right) {
    x=room.left + 1;
    y=room.top + room.height() / 2;
  }
 else   if (door.y == room.top) {
    x=room.left + room.width() / 2;
    y=room.bottom - 1;
  }
 else   if (door.y == room.bottom) {
    x=room.left + room.width() / 2;
    y=room.top + 1;
  }
  int pos=x + y * Level.WIDTH;
  level.drop(prize(level),pos).type=Random.Int(3) == 0 ? Heap.Type.CHEST : Heap.Type.HEAP;
  set(level,pos,Terrain.PEDESTAL);
  level.addItemToSpawn(new PotionOfInvisibility());
  for (int i=0; i < NPIRANHAS; i++) {
    Piranha piranha=new Piranha();
    do {
      piranha.pos=room.random();
    }
 while (level.map[piranha.pos] != Terrain.WATER || Actor.findChar(piranha.pos) != null);
    level.mobs.add(piranha);
  }
}","public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.WATER);
  Room.Door door=room.entrance();
  door.set(Room.Door.Type.REGULAR);
  int x=-1;
  int y=-1;
  if (door.x == room.left) {
    x=room.right - 1;
    y=room.top + room.height() / 2;
  }
 else   if (door.x == room.right) {
    x=room.left + 1;
    y=room.top + room.height() / 2;
  }
 else   if (door.y == room.top) {
    x=room.left + room.width() / 2;
    y=room.bottom - 1;
  }
 else   if (door.y == room.bottom) {
    x=room.left + room.width() / 2;
    y=room.top + 1;
  }
  int pos=x + y * Level.WIDTH;
  level.drop(prize(level),pos).type=Random.Int(3) == 0 ? Heap.Type.CHEST : Heap.Type.HEAP;
  set(level,pos,Terrain.PEDESTAL);
  level.addItemToSpawn(new PotionOfInvisibility());
  for (int i=0; i < NPIRANHAS; i++) {
    Piranha piranha=new Piranha();
    do {
      piranha.pos=room.random();
    }
 while (level.map[piranha.pos] != Terrain.WATER || level.findMob(piranha.pos) != null);
    level.mobs.add(piranha);
  }
}",0.987099856665074
164319,"public static void process(){
  if (current != null) {
    return;
  }
  boolean doNext;
  do {
    now=Float.MAX_VALUE;
    current=null;
    Arrays.fill(chars,null);
    for (    Actor actor : all) {
      if (actor.time < now || actor.time == now && actor.actPriority < current.actPriority) {
        now=actor.time;
        current=actor;
      }
      if (actor instanceof Char) {
        Char ch=(Char)actor;
        chars[ch.pos]=ch;
      }
    }
    if (current != null) {
      if (current instanceof Char && ((Char)current).sprite.isMoving) {
        current=null;
        break;
      }
      doNext=current.act();
      if (doNext && !Dungeon.hero.isAlive()) {
        doNext=false;
        current=null;
      }
    }
 else {
      doNext=false;
    }
  }
 while (doNext);
}","public static void process(){
  if (current != null) {
    return;
  }
  boolean doNext;
  do {
    now=Float.MAX_VALUE;
    current=null;
    Arrays.fill(chars,null);
    for (    Actor actor : all) {
      if (actor.time < now || actor.time == now && (current == null || actor.actPriority < current.actPriority)) {
        now=actor.time;
        current=actor;
      }
      if (actor instanceof Char) {
        Char ch=(Char)actor;
        chars[ch.pos]=ch;
      }
    }
    if (current != null) {
      if (current instanceof Char && ((Char)current).sprite.isMoving) {
        current=null;
        break;
      }
      doNext=current.act();
      if (doNext && !Dungeon.hero.isAlive()) {
        doNext=false;
        current=null;
      }
    }
 else {
      doNext=false;
    }
  }
 while (doNext);
}",0.986850344395742
164320,"@Override public boolean act(){
  if (target.isAlive()) {
    if (target.HP < target.HT && !((Hero)target).isStarving()) {
      target.HP+=1;
    }
    ChaliceOfBlood.chaliceRegen regenBuff=Dungeon.hero.buff(ChaliceOfBlood.chaliceRegen.class);
    if (regenBuff != null)     if (regenBuff.isCursed())     spend(REGENERATION_DELAY * 1.5f);
 else     spend(regenBuff.level() * 0.9f);
 else     spend(REGENERATION_DELAY);
  }
 else {
    diactivate();
  }
  return true;
}","@Override public boolean act(){
  if (target.isAlive()) {
    if (target.HP < target.HT && !((Hero)target).isStarving()) {
      target.HP+=1;
    }
    ChaliceOfBlood.chaliceRegen regenBuff=Dungeon.hero.buff(ChaliceOfBlood.chaliceRegen.class);
    if (regenBuff != null)     if (regenBuff.isCursed())     spend(REGENERATION_DELAY * 1.5f);
 else     spend(REGENERATION_DELAY - regenBuff.level() * 0.9f);
 else     spend(REGENERATION_DELAY);
  }
 else {
    diactivate();
  }
  return true;
}",0.8886576482830385
164321,"@Override protected boolean act(){
  if (!Level.water[pos]) {
    die(null);
    return true;
  }
 else {
    Dungeon.level.updateFieldOfView(this);
    enemy=chooseEnemy();
    if (state == this.HUNTING && !(enemy.isAlive() && Level.fieldOfView[enemy.pos] && enemy.invisible <= 0)) {
      state=this.WANDERING;
      int oldPos=pos;
      int i=0;
      do {
        i++;
        target=Dungeon.level.randomDestination();
        if (i == 100)         return true;
      }
 while (!getCloser(target));
      moveSprite(oldPos,pos);
      return true;
    }
    return super.act();
  }
}","@Override protected boolean act(){
  if (!Level.water[pos]) {
    die(null);
    return true;
  }
 else {
    Dungeon.level.updateFieldOfView(this);
    enemy=chooseEnemy();
    if (state == this.HUNTING && !(enemy != null && enemy.isAlive() && Level.fieldOfView[enemy.pos] && enemy.invisible <= 0)) {
      state=this.WANDERING;
      int oldPos=pos;
      int i=0;
      do {
        i++;
        target=Dungeon.level.randomDestination();
        if (i == 100)         return true;
      }
 while (!getCloser(target));
      moveSprite(oldPos,pos);
      return true;
    }
    return super.act();
  }
}",0.9857502095557418
164322,"@Override protected void onZap(Ballistica bolt){
  Sample.INSTANCE.play(Assets.SND_BLAST);
  BlastWave.blast(bolt.collisionPos);
  int damage=Random.NormalIntRange(1,6 + (int)(level * level / 4f));
  for (  int i : Level.NEIGHBOURS9) {
    Dungeon.level.press(bolt.collisionPos + i,Actor.findChar(bolt.collisionPos + i));
  }
  for (  int i : Level.NEIGHBOURS8) {
    Char ch=Actor.findChar(bolt.collisionPos + i);
    if (ch != null) {
      ch.damage(damage,this);
      if (ch.isAlive()) {
        Ballistica trajectory=new Ballistica(ch.pos,ch.pos + i,Ballistica.MAGIC_BOLT);
        int strength=1 + ((level + 1) / 3);
        throwChar(ch,trajectory,strength);
      }
    }
  }
  Char ch=Actor.findChar(bolt.collisionPos);
  if (ch != null) {
    ch.damage(damage,this);
    if (ch.isAlive() && bolt.path.size() > bolt.dist) {
      Ballistica trajectory=new Ballistica(ch.pos,bolt.path.get(bolt.dist + 1),Ballistica.MAGIC_BOLT);
      int strength=level + 3;
      throwChar(ch,trajectory,strength);
    }
  }
  if (!curUser.isAlive()) {
    Dungeon.fail(Utils.format(ResultDescriptions.ITEM,name));
    GLog.n(""String_Node_Str"");
  }
}","@Override protected void onZap(Ballistica bolt){
  Sample.INSTANCE.play(Assets.SND_BLAST);
  BlastWave.blast(bolt.collisionPos);
  int damage=Random.NormalIntRange(1,6 + (int)(level * level / 4f));
  for (  int i : Level.NEIGHBOURS9) {
    Dungeon.level.press(bolt.collisionPos + i,Actor.findChar(bolt.collisionPos + i));
  }
  for (  int i : Level.NEIGHBOURS8) {
    Char ch=Actor.findChar(bolt.collisionPos + i);
    if (ch != null) {
      ch.damage(damage,this);
      if (ch.isAlive()) {
        Ballistica trajectory=new Ballistica(ch.pos,ch.pos + i,Ballistica.MAGIC_BOLT);
        int strength=1 + ((level + 1) / 3);
        throwChar(ch,trajectory,strength);
      }
    }
  }
  Char ch=Actor.findChar(bolt.collisionPos);
  if (ch != null) {
    ch.damage(damage,this);
    if (ch.isAlive() && bolt.path.size() > bolt.dist + 1) {
      Ballistica trajectory=new Ballistica(ch.pos,bolt.path.get(bolt.dist + 1),Ballistica.MAGIC_BOLT);
      int strength=level + 3;
      throwChar(ch,trajectory,strength);
    }
  }
  if (!curUser.isAlive()) {
    Dungeon.fail(Utils.format(ResultDescriptions.ITEM,name));
    GLog.n(""String_Node_Str"");
  }
}",0.9982547993019196
164323,"@Override protected void onZap(Ballistica beam){
  for (  int c : beam.subPath(0,beam.dist))   CellEmitter.center(c).burst(BloodParticle.BURST,1);
  int cell=beam.collisionPos;
  Char ch=Actor.findChar(cell);
  Heap heap=Dungeon.level.heaps.get(cell);
  if (ch != null && ch instanceof Mob) {
    if (((Mob)ch).ally || ch.buff(Charm.class) != null || ch.buff(Corruption.class) != null) {
      int missingHP=ch.HT - ch.HP;
      int healing=(int)Math.ceil((missingHP * (0.30f + (0.03f * level))));
      ch.HP+=healing;
      ch.sprite.emitter().burst(Speck.factory(Speck.HEALING),1 + level / 2);
      ch.sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"",healing);
    }
 else     if (undeadMobs.contains(ch.getClass())) {
      int damage=(int)Math.ceil(ch.HT * (0.3f + (0.05f * level)));
      ch.damage(damage,this);
      ch.sprite.emitter().start(ShadowParticle.UP,0.05f,10 + level);
      Sample.INSTANCE.play(Assets.SND_BURNING);
    }
 else {
      float duration=5 + level;
      Buff.affect(ch,Charm.class,Charm.durationFactor(ch) * duration).object=curUser.id();
      duration*=Random.Float(0.75f,1f);
      Buff.affect(curUser,Charm.class,Charm.durationFactor(ch) * duration).object=curUser.id();
      ch.sprite.centerEmitter().start(Speck.factory(Speck.HEART),0.2f,5);
      curUser.sprite.centerEmitter().start(Speck.factory(Speck.HEART),0.2f,5);
    }
  }
 else   if (heap != null && heap.type == Heap.Type.HEAP) {
    Item item=heap.peek();
    if (item != null && Random.Float() <= 0.3f + level * 0.1f) {
      if (item.cursed) {
        item.cursed=false;
        CellEmitter.get(cell).start(ShadowParticle.UP,0.05f,10);
        Sample.INSTANCE.play(Assets.SND_BURNING);
      }
      int lvldiffFromBase=item.level - (item instanceof Ring ? 1 : 0);
      if (lvldiffFromBase < 0) {
        item.upgrade(-lvldiffFromBase);
        CellEmitter.get(cell).start(Speck.factory(Speck.UP),0.2f,3);
        Sample.INSTANCE.play(Assets.SND_EVOKE);
      }
    }
  }
 else   if (Dungeon.level.map[cell] == Terrain.GRASS) {
    Dungeon.level.set(cell,Terrain.HIGH_GRASS);
    GameScene.updateMap(cell);
    CellEmitter.get(cell).burst(LeafParticle.LEVEL_SPECIFIC,4);
  }
 else   if (Dungeon.level.map[cell] == Terrain.EMBERS) {
    if (Random.Float() <= 0.3f + level * 0.03f) {
      Dungeon.level.plant((Plant.Seed)Generator.random(Generator.Category.SEED),cell);
      CellEmitter.get(cell).burst(LeafParticle.LEVEL_SPECIFIC,8);
      GameScene.updateMap(cell);
    }
 else {
      Dungeon.level.set(cell,Terrain.HIGH_GRASS);
      GameScene.updateMap(cell);
      CellEmitter.get(cell).burst(LeafParticle.LEVEL_SPECIFIC,4);
    }
  }
 else   return;
  if (!freeCharge) {
    damageHero();
  }
 else {
    freeCharge=false;
  }
}","@Override protected void onZap(Ballistica beam){
  for (  int c : beam.subPath(0,beam.dist))   CellEmitter.center(c).burst(BloodParticle.BURST,1);
  int cell=beam.collisionPos;
  Char ch=Actor.findChar(cell);
  Heap heap=Dungeon.level.heaps.get(cell);
  if (ch != null && ch instanceof Mob) {
    if (((Mob)ch).ally || ch.buff(Charm.class) != null || ch.buff(Corruption.class) != null) {
      int missingHP=ch.HT - ch.HP;
      int healing=(int)Math.ceil((missingHP * (0.30f + (0.03f * level))));
      ch.HP+=healing;
      ch.sprite.emitter().burst(Speck.factory(Speck.HEALING),1 + level / 2);
      ch.sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"",healing);
    }
 else     if (undeadMobs.contains(ch.getClass())) {
      int damage=(int)Math.ceil(ch.HT * (0.3f + (0.05f * level)));
      ch.damage(damage,this);
      ch.sprite.emitter().start(ShadowParticle.UP,0.05f,10 + level);
      Sample.INSTANCE.play(Assets.SND_BURNING);
    }
 else {
      float duration=5 + level;
      Buff.affect(ch,Charm.class,Charm.durationFactor(ch) * duration).object=curUser.id();
      duration*=Random.Float(0.75f,1f);
      Buff.affect(curUser,Charm.class,Charm.durationFactor(ch) * duration).object=ch.id();
      ch.sprite.centerEmitter().start(Speck.factory(Speck.HEART),0.2f,5);
      curUser.sprite.centerEmitter().start(Speck.factory(Speck.HEART),0.2f,5);
    }
  }
 else   if (heap != null && heap.type == Heap.Type.HEAP) {
    Item item=heap.peek();
    if (item != null && Random.Float() <= 0.3f + level * 0.1f) {
      if (item.cursed) {
        item.cursed=false;
        CellEmitter.get(cell).start(ShadowParticle.UP,0.05f,10);
        Sample.INSTANCE.play(Assets.SND_BURNING);
      }
      int lvldiffFromBase=item.level - (item instanceof Ring ? 1 : 0);
      if (lvldiffFromBase < 0) {
        item.upgrade(-lvldiffFromBase);
        CellEmitter.get(cell).start(Speck.factory(Speck.UP),0.2f,3);
        Sample.INSTANCE.play(Assets.SND_EVOKE);
      }
    }
  }
 else   if (Dungeon.level.map[cell] == Terrain.GRASS) {
    Dungeon.level.set(cell,Terrain.HIGH_GRASS);
    GameScene.updateMap(cell);
    CellEmitter.get(cell).burst(LeafParticle.LEVEL_SPECIFIC,4);
  }
 else   if (Dungeon.level.map[cell] == Terrain.EMBERS) {
    if (Random.Float() <= 0.3f + level * 0.03f) {
      Dungeon.level.plant((Plant.Seed)Generator.random(Generator.Category.SEED),cell);
      CellEmitter.get(cell).burst(LeafParticle.LEVEL_SPECIFIC,8);
      GameScene.updateMap(cell);
    }
 else {
      Dungeon.level.set(cell,Terrain.HIGH_GRASS);
      GameScene.updateMap(cell);
      CellEmitter.get(cell).burst(LeafParticle.LEVEL_SPECIFIC,4);
    }
  }
 else   return;
  if (!freeCharge) {
    damageHero();
  }
 else {
    freeCharge=false;
  }
}",0.9987251866690948
164324,"@Override public String desc(){
  return ""String_Node_Str"" + ((Char)Actor.findById(object)).name + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}","@Override public String desc(){
  Char ch=(Char)Actor.findById(object);
  return ""String_Node_Str"" + ((ch == null) ? ""String_Node_Str"" : ""String_Node_Str"" + ch.name) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.6983372921615202
164325,"private void placePlants(float numPlants,float numDews,float numPods,float numStars){
  Iterator<Integer> cells=affectedCells.iterator();
  Level floor=Dungeon.level;
  while (cells.hasNext() && Random.Float() <= numPlants) {
    floor.plant((Plant.Seed)Generator.random(Generator.Category.SEED),cells.next());
    numPlants--;
  }
  while (cells.hasNext() && Random.Float() <= numDews) {
    floor.plant(new Dewcatcher.Seed(),cells.next());
    numDews--;
  }
  while (cells.hasNext() && Random.Float() <= numPods) {
    floor.plant(new Seedpod.Seed(),cells.next());
    numPods--;
  }
  while (cells.hasNext() && Random.Float() <= numStars) {
    floor.plant(new Starflower.Seed(),cells.next());
    numStars--;
  }
}","private void placePlants(float numPlants,float numDews,float numPods,float numStars){
  Iterator<Integer> cells=affectedCells.iterator();
  Level floor=Dungeon.level;
  while (cells.hasNext() && Random.Float() <= numPlants) {
    Plant.Seed seed=(Plant.Seed)Generator.random(Generator.Category.SEED);
    if (seed instanceof BlandfruitBush.Seed) {
      if (Random.Int(15) - Dungeon.limitedDrops.blandfruitSeed.count >= 0) {
        floor.plant(seed,cells.next());
        Dungeon.limitedDrops.blandfruitSeed.count++;
      }
    }
 else     if (seed != null)     floor.plant(seed,cells.next());
    numPlants--;
  }
  while (cells.hasNext() && Random.Float() <= numDews) {
    floor.plant(new Dewcatcher.Seed(),cells.next());
    numDews--;
  }
  while (cells.hasNext() && Random.Float() <= numPods) {
    floor.plant(new Seedpod.Seed(),cells.next());
    numPods--;
  }
  while (cells.hasNext() && Random.Float() <= numStars) {
    floor.plant(new Starflower.Seed(),cells.next());
    numStars--;
  }
}",0.820661636680209
164326,"@Override public void damage(int dmg,Object src){
  if (fistsCount > 0) {
    for (    Mob mob : Dungeon.level.mobs) {
      if (mob instanceof BurningFist || mob instanceof RottingFist) {
        mob.beckon(pos);
      }
    }
    dmg>>=fistsCount;
  }
  super.damage(dmg,src);
}","@Override public void damage(int dmg,Object src){
  HashSet<Mob> fists=new HashSet<>();
  for (  Mob mob : Dungeon.level.mobs)   if (mob instanceof RottingFist || mob instanceof BurningFist)   fists.add(mob);
  for (  Mob fist : fists)   fist.beckon(pos);
  dmg>>=fists.size();
  super.damage(dmg,src);
}",0.5684931506849316
164327,"@Override public void die(Object cause){
  super.die(cause);
  fistsCount--;
}","@SuppressWarnings(""String_Node_Str"") @Override public void die(Object cause){
  for (  Mob mob : (Iterable<Mob>)Dungeon.level.mobs.clone()) {
    if (mob instanceof BurningFist || mob instanceof RottingFist) {
      mob.die(cause);
    }
  }
  GameScene.bossSlain();
  Dungeon.level.drop(new SkeletonKey(Dungeon.depth),pos).sprite.drop();
  super.die(cause);
  yell(""String_Node_Str"");
}",0.1935483870967742
164328,"@SuppressWarnings(""String_Node_Str"") public static void switchLevel(final Level level,int pos){
  Dungeon.level=level;
  Actor.init();
  Actor respawner=level.respawner();
  if (respawner != null) {
    Actor.add(level.respawner());
  }
  hero.pos=pos != -1 ? pos : level.exit;
  Light light=hero.buff(Light.class);
  hero.viewDistance=light == null ? level.viewDistance : Math.max(Light.DISTANCE,level.viewDistance);
  observe();
  try {
    saveAll();
  }
 catch (  IOException e) {
  }
}","@SuppressWarnings(""String_Node_Str"") public static void switchLevel(final Level level,int pos){
  Dungeon.level=level;
  Actor.init();
  Actor respawner=level.respawner();
  if (respawner != null) {
    Actor.add(level.respawner());
  }
  hero.pos=pos != -1 ? pos : level.exit;
  Light light=hero.buff(Light.class);
  hero.viewDistance=light == null ? level.viewDistance : Math.max(Light.DISTANCE,level.viewDistance);
  if (Dungeon.version <= 38 && Dungeon.hero.heroClass == HeroClass.MAGE) {
    MagesStaff staff=new MagesStaff();
    staff.identify();
    if (!staff.collect(Dungeon.hero.belongings.backpack)) {
      Dungeon.level.drop(staff,Dungeon.hero.pos);
    }
  }
  observe();
  try {
    saveAll();
  }
 catch (  IOException e) {
  }
}",0.7928802588996764
164329,"@Override public String desc(){
  String result=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  if (wand instanceof WandOfMagicMissile) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfFireblast) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfLightning) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfDisintegration) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfVenom) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfPrismaticLight) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfFrost) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfBlastWave) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfRegrowth) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfTransfusion) {
    result+=""String_Node_Str"";
  }
  return result;
}","@Override public String desc(){
  String result=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  if (wand == null) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfMagicMissile) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfFireblast) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfLightning) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfDisintegration) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfVenom) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfPrismaticLight) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfFrost) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfBlastWave) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfRegrowth) {
    result+=""String_Node_Str"";
  }
 else   if (wand instanceof WandOfTransfusion) {
    result+=""String_Node_Str"";
  }
  return result;
}",0.9683576092415872
164330,"@Override public void create(){
  Music.INSTANCE.play(Assets.TUNE,true);
  Music.INSTANCE.volume(1f);
  ShatteredPixelDungeon.lastClass(Dungeon.hero.heroClass.ordinal());
  super.create();
  Camera.main.zoom(GameMath.gate(minZoom,defaultZoom + ShatteredPixelDungeon.zoom(),maxZoom));
  scene=this;
  terrain=new Group();
  add(terrain);
  water=new SkinnedBlock(Level.WIDTH * DungeonTilemap.SIZE,Level.HEIGHT * DungeonTilemap.SIZE,Dungeon.level.waterTex());
  terrain.add(water);
  ripples=new Group();
  terrain.add(ripples);
  tiles=new DungeonTilemap();
  terrain.add(tiles);
  Dungeon.level.addVisuals(this);
  plants=new Group();
  add(plants);
  int size=Dungeon.level.plants.size();
  for (int i=0; i < size; i++) {
    addPlantSprite(Dungeon.level.plants.valueAt(i));
  }
  heaps=new Group();
  add(heaps);
  size=Dungeon.level.heaps.size();
  for (int i=0; i < size; i++) {
    addHeapSprite(Dungeon.level.heaps.valueAt(i));
  }
  emitters=new Group();
  effects=new Group();
  emoicons=new Group();
  mobs=new Group();
  add(mobs);
  for (  Mob mob : Dungeon.level.mobs) {
    addMobSprite(mob);
    if (Statistics.amuletObtained) {
      mob.beckon(Dungeon.hero.pos);
    }
  }
  add(emitters);
  add(effects);
  gases=new Group();
  add(gases);
  for (  Blob blob : Dungeon.level.blobs.values()) {
    blob.emitter=null;
    addBlobSprite(blob);
  }
  fog=new FogOfWar(Level.WIDTH,Level.HEIGHT);
  fog.updateVisibility(Dungeon.visible,Dungeon.level.visited,Dungeon.level.mapped);
  add(fog);
  brightness(ShatteredPixelDungeon.brightness());
  spells=new Group();
  add(spells);
  statuses=new Group();
  add(statuses);
  add(emoicons);
  hero=new HeroSprite();
  hero.place(Dungeon.hero.pos);
  hero.updateArmor();
  mobs.add(hero);
  add(new HealthIndicator());
  add(cellSelector=new CellSelector(tiles));
  StatusPane sb=new StatusPane();
  sb.camera=uiCamera;
  sb.setSize(uiCamera.width,0);
  add(sb);
  toolbar=new Toolbar();
  toolbar.camera=uiCamera;
  toolbar.setRect(0,uiCamera.height - toolbar.height(),uiCamera.width,toolbar.height());
  add(toolbar);
  attack=new AttackIndicator();
  attack.camera=uiCamera;
  attack.setPos(uiCamera.width - attack.width(),toolbar.top() - attack.height());
  add(attack);
  loot=new LootIndicator();
  loot.camera=uiCamera;
  add(loot);
  resume=new ResumeIndicator();
  resume.camera=uiCamera;
  add(resume);
  layoutTags();
  log=new GameLog();
  log.camera=uiCamera;
  log.setRect(0,toolbar.top(),attack.left(),0);
  add(log);
  if (Dungeon.depth < Statistics.deepestFloor)   GLog.i(TXT_WELCOME_BACK,Dungeon.depth);
 else   GLog.i(TXT_WELCOME,Dungeon.depth);
  Sample.INSTANCE.play(Assets.SND_DESCEND);
switch (Dungeon.level.feeling) {
case CHASM:
    GLog.w(TXT_CHASM);
  break;
case WATER:
GLog.w(TXT_WATER);
break;
case GRASS:
GLog.w(TXT_GRASS);
break;
case DARK:
GLog.w(TXT_DARK);
break;
default :
}
if (Dungeon.level instanceof RegularLevel && ((RegularLevel)Dungeon.level).secretDoors > Random.IntRange(3,4)) {
GLog.w(TXT_SECRETS);
}
busy=new BusyIndicator();
busy.camera=uiCamera;
busy.x=1;
busy.y=sb.bottom() + 1;
add(busy);
switch (InterlevelScene.mode) {
case RESURRECT:
ScrollOfTeleportation.appear(Dungeon.hero,Dungeon.level.entrance);
new Flare(8,32).color(0xFFFF66,true).show(hero,2f);
break;
case RETURN:
ScrollOfTeleportation.appear(Dungeon.hero,Dungeon.hero.pos);
break;
case FALL:
Chasm.heroLand();
break;
case DESCEND:
switch (Dungeon.depth) {
case 1:
WndStory.showChapter(WndStory.ID_SEWERS);
break;
case 6:
WndStory.showChapter(WndStory.ID_PRISON);
break;
case 11:
WndStory.showChapter(WndStory.ID_CAVES);
break;
case 16:
WndStory.showChapter(WndStory.ID_METROPOLIS);
break;
case 22:
WndStory.showChapter(WndStory.ID_HALLS);
break;
}
if (Dungeon.hero.isAlive() && Dungeon.depth != 22) {
Badges.validateNoKilling();
}
break;
default :
}
ArrayList<Item> dropped=Dungeon.droppedItems.get(Dungeon.depth);
if (dropped != null) {
for (Item item : dropped) {
int pos=Dungeon.level.randomRespawnCell();
if (item instanceof Potion) {
((Potion)item).shatter(pos);
}
 else if (item instanceof Plant.Seed) {
Dungeon.level.plant((Plant.Seed)item,pos);
}
 else if (item instanceof Honeypot) {
Dungeon.level.drop(((Honeypot)item).shatter(null,pos),pos);
}
 else {
Dungeon.level.drop(item,pos);
}
}
Dungeon.droppedItems.remove(Dungeon.depth);
}
if (Dungeon.version <= 38 && Dungeon.hero.heroClass == HeroClass.MAGE) {
MagesStaff staff=new MagesStaff();
staff.identify();
GLog.p(""String_Node_Str"");
if (!staff.collect(Dungeon.hero.belongings.backpack)) {
Dungeon.level.drop(staff,Dungeon.hero.pos);
}
}
Camera.main.target=hero;
fadeIn();
}","@Override public void create(){
  Music.INSTANCE.play(Assets.TUNE,true);
  Music.INSTANCE.volume(1f);
  ShatteredPixelDungeon.lastClass(Dungeon.hero.heroClass.ordinal());
  super.create();
  Camera.main.zoom(GameMath.gate(minZoom,defaultZoom + ShatteredPixelDungeon.zoom(),maxZoom));
  scene=this;
  terrain=new Group();
  add(terrain);
  water=new SkinnedBlock(Level.WIDTH * DungeonTilemap.SIZE,Level.HEIGHT * DungeonTilemap.SIZE,Dungeon.level.waterTex());
  terrain.add(water);
  ripples=new Group();
  terrain.add(ripples);
  tiles=new DungeonTilemap();
  terrain.add(tiles);
  Dungeon.level.addVisuals(this);
  plants=new Group();
  add(plants);
  int size=Dungeon.level.plants.size();
  for (int i=0; i < size; i++) {
    addPlantSprite(Dungeon.level.plants.valueAt(i));
  }
  heaps=new Group();
  add(heaps);
  size=Dungeon.level.heaps.size();
  for (int i=0; i < size; i++) {
    addHeapSprite(Dungeon.level.heaps.valueAt(i));
  }
  emitters=new Group();
  effects=new Group();
  emoicons=new Group();
  mobs=new Group();
  add(mobs);
  for (  Mob mob : Dungeon.level.mobs) {
    addMobSprite(mob);
    if (Statistics.amuletObtained) {
      mob.beckon(Dungeon.hero.pos);
    }
  }
  add(emitters);
  add(effects);
  gases=new Group();
  add(gases);
  for (  Blob blob : Dungeon.level.blobs.values()) {
    blob.emitter=null;
    addBlobSprite(blob);
  }
  fog=new FogOfWar(Level.WIDTH,Level.HEIGHT);
  fog.updateVisibility(Dungeon.visible,Dungeon.level.visited,Dungeon.level.mapped);
  add(fog);
  brightness(ShatteredPixelDungeon.brightness());
  spells=new Group();
  add(spells);
  statuses=new Group();
  add(statuses);
  add(emoicons);
  hero=new HeroSprite();
  hero.place(Dungeon.hero.pos);
  hero.updateArmor();
  mobs.add(hero);
  add(new HealthIndicator());
  add(cellSelector=new CellSelector(tiles));
  StatusPane sb=new StatusPane();
  sb.camera=uiCamera;
  sb.setSize(uiCamera.width,0);
  add(sb);
  toolbar=new Toolbar();
  toolbar.camera=uiCamera;
  toolbar.setRect(0,uiCamera.height - toolbar.height(),uiCamera.width,toolbar.height());
  add(toolbar);
  attack=new AttackIndicator();
  attack.camera=uiCamera;
  attack.setPos(uiCamera.width - attack.width(),toolbar.top() - attack.height());
  add(attack);
  loot=new LootIndicator();
  loot.camera=uiCamera;
  add(loot);
  resume=new ResumeIndicator();
  resume.camera=uiCamera;
  add(resume);
  layoutTags();
  log=new GameLog();
  log.camera=uiCamera;
  log.setRect(0,toolbar.top(),attack.left(),0);
  add(log);
  if (Dungeon.depth < Statistics.deepestFloor)   GLog.i(TXT_WELCOME_BACK,Dungeon.depth);
 else   GLog.i(TXT_WELCOME,Dungeon.depth);
  Sample.INSTANCE.play(Assets.SND_DESCEND);
switch (Dungeon.level.feeling) {
case CHASM:
    GLog.w(TXT_CHASM);
  break;
case WATER:
GLog.w(TXT_WATER);
break;
case GRASS:
GLog.w(TXT_GRASS);
break;
case DARK:
GLog.w(TXT_DARK);
break;
default :
}
if (Dungeon.level instanceof RegularLevel && ((RegularLevel)Dungeon.level).secretDoors > Random.IntRange(3,4)) {
GLog.w(TXT_SECRETS);
}
busy=new BusyIndicator();
busy.camera=uiCamera;
busy.x=1;
busy.y=sb.bottom() + 1;
add(busy);
switch (InterlevelScene.mode) {
case RESURRECT:
ScrollOfTeleportation.appear(Dungeon.hero,Dungeon.level.entrance);
new Flare(8,32).color(0xFFFF66,true).show(hero,2f);
break;
case RETURN:
ScrollOfTeleportation.appear(Dungeon.hero,Dungeon.hero.pos);
break;
case FALL:
Chasm.heroLand();
break;
case DESCEND:
switch (Dungeon.depth) {
case 1:
WndStory.showChapter(WndStory.ID_SEWERS);
break;
case 6:
WndStory.showChapter(WndStory.ID_PRISON);
break;
case 11:
WndStory.showChapter(WndStory.ID_CAVES);
break;
case 16:
WndStory.showChapter(WndStory.ID_METROPOLIS);
break;
case 22:
WndStory.showChapter(WndStory.ID_HALLS);
break;
}
if (Dungeon.hero.isAlive() && Dungeon.depth != 22) {
Badges.validateNoKilling();
}
break;
default :
}
ArrayList<Item> dropped=Dungeon.droppedItems.get(Dungeon.depth);
if (dropped != null) {
for (Item item : dropped) {
int pos=Dungeon.level.randomRespawnCell();
if (item instanceof Potion) {
((Potion)item).shatter(pos);
}
 else if (item instanceof Plant.Seed) {
Dungeon.level.plant((Plant.Seed)item,pos);
}
 else if (item instanceof Honeypot) {
Dungeon.level.drop(((Honeypot)item).shatter(null,pos),pos);
}
 else {
Dungeon.level.drop(item,pos);
}
}
Dungeon.droppedItems.remove(Dungeon.depth);
}
Camera.main.target=hero;
fadeIn();
}",0.9643774427694024
164331,"@Override public boolean attachTo(Char target){
  if (super.attachTo(target)) {
    CellEmitter.center(target.pos).burst(PoisonParticle.SPLASH,5);
    return true;
  }
 else   return false;
}","@Override public boolean attachTo(Char target){
  if (super.attachTo(target) && target.sprite != null) {
    CellEmitter.center(target.pos).burst(PoisonParticle.SPLASH,5);
    return true;
  }
 else   return false;
}",0.9385749385749386
164332,"public void press(int cell,Char ch){
  if (pit[cell] && ch == Dungeon.hero) {
    Chasm.heroFall(cell);
    return;
  }
  TimekeepersHourglass.timeFreeze timeFreeze=null;
  if (ch != null)   timeFreeze=ch.buff(TimekeepersHourglass.timeFreeze.class);
  boolean frozen=timeFreeze != null;
  boolean trap=false;
switch (map[cell]) {
case Terrain.SECRET_TOXIC_TRAP:
    GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.TOXIC_TRAP:
  trap=true;
if (!frozen) ToxicTrap.trigger(cell,ch);
break;
case Terrain.SECRET_FIRE_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.FIRE_TRAP:
trap=true;
if (!frozen) FireTrap.trigger(cell,ch);
break;
case Terrain.SECRET_PARALYTIC_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.PARALYTIC_TRAP:
trap=true;
if (!frozen) ParalyticTrap.trigger(cell,ch);
break;
case Terrain.SECRET_POISON_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.POISON_TRAP:
trap=true;
if (!frozen) PoisonTrap.trigger(cell,ch);
break;
case Terrain.SECRET_ALARM_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.ALARM_TRAP:
trap=true;
if (!frozen) AlarmTrap.trigger(cell,ch);
break;
case Terrain.SECRET_LIGHTNING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.LIGHTNING_TRAP:
trap=true;
if (!frozen) LightningTrap.trigger(cell,ch);
break;
case Terrain.SECRET_GRIPPING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.GRIPPING_TRAP:
trap=true;
if (!frozen) GrippingTrap.trigger(cell,ch);
break;
case Terrain.SECRET_SUMMONING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.SUMMONING_TRAP:
trap=true;
if (!frozen) SummoningTrap.trigger(cell,ch);
break;
case Terrain.HIGH_GRASS:
HighGrass.trample(this,cell,ch);
break;
case Terrain.WELL:
WellWater.affectCell(cell);
break;
case Terrain.ALCHEMY:
if (ch == null) {
Alchemy.transmute(cell);
}
break;
case Terrain.DOOR:
Door.enter(cell);
break;
}
if (trap && !frozen) {
if (Dungeon.visible[cell]) Sample.INSTANCE.play(Assets.SND_TRAP);
if (ch == Dungeon.hero) Dungeon.hero.interrupt();
set(cell,Terrain.INACTIVE_TRAP);
GameScene.updateMap(cell);
}
 else if (trap && frozen) {
Sample.INSTANCE.play(Assets.SND_TRAP);
Level.set(cell,Terrain.discover(map[cell]));
GameScene.updateMap(cell);
timeFreeze.setDelayedPress(cell);
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.activate(ch);
}
}","public void press(int cell,Char ch){
  if (ch != null && pit[cell] && !ch.flying) {
    if (ch == Dungeon.hero) {
      Chasm.heroFall(cell);
    }
 else     if (ch instanceof Mob) {
      Chasm.mobFall((Mob)ch);
    }
    return;
  }
  TimekeepersHourglass.timeFreeze timeFreeze=null;
  if (ch != null)   timeFreeze=ch.buff(TimekeepersHourglass.timeFreeze.class);
  boolean frozen=timeFreeze != null;
  boolean trap=false;
switch (map[cell]) {
case Terrain.SECRET_TOXIC_TRAP:
    GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.TOXIC_TRAP:
  trap=true;
if (!frozen) ToxicTrap.trigger(cell,ch);
break;
case Terrain.SECRET_FIRE_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.FIRE_TRAP:
trap=true;
if (!frozen) FireTrap.trigger(cell,ch);
break;
case Terrain.SECRET_PARALYTIC_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.PARALYTIC_TRAP:
trap=true;
if (!frozen) ParalyticTrap.trigger(cell,ch);
break;
case Terrain.SECRET_POISON_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.POISON_TRAP:
trap=true;
if (!frozen) PoisonTrap.trigger(cell,ch);
break;
case Terrain.SECRET_ALARM_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.ALARM_TRAP:
trap=true;
if (!frozen) AlarmTrap.trigger(cell,ch);
break;
case Terrain.SECRET_LIGHTNING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.LIGHTNING_TRAP:
trap=true;
if (!frozen) LightningTrap.trigger(cell,ch);
break;
case Terrain.SECRET_GRIPPING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.GRIPPING_TRAP:
trap=true;
if (!frozen) GrippingTrap.trigger(cell,ch);
break;
case Terrain.SECRET_SUMMONING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.SUMMONING_TRAP:
trap=true;
if (!frozen) SummoningTrap.trigger(cell,ch);
break;
case Terrain.HIGH_GRASS:
HighGrass.trample(this,cell,ch);
break;
case Terrain.WELL:
WellWater.affectCell(cell);
break;
case Terrain.ALCHEMY:
if (ch == null) {
Alchemy.transmute(cell);
}
break;
case Terrain.DOOR:
Door.enter(cell);
break;
}
if (trap && !frozen) {
if (Dungeon.visible[cell]) Sample.INSTANCE.play(Assets.SND_TRAP);
if (ch == Dungeon.hero) Dungeon.hero.interrupt();
set(cell,Terrain.INACTIVE_TRAP);
GameScene.updateMap(cell);
}
 else if (trap && frozen) {
Sample.INSTANCE.play(Assets.SND_TRAP);
Level.set(cell,Terrain.discover(map[cell]));
GameScene.updateMap(cell);
timeFreeze.setDelayedPress(cell);
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.activate(ch);
}
}",0.9713300280232808
164333,"public List<Integer> subPath(int start,int end){
  try {
    end=Math.max(end,path.size() - 1);
    return path.subList(start,end + 1);
  }
 catch (  Exception e) {
    return new ArrayList<>();
  }
}","public List<Integer> subPath(int start,int end){
  try {
    end=Math.min(end,path.size() - 1);
    return path.subList(start,end + 1);
  }
 catch (  Exception e) {
    return new ArrayList<>();
  }
}",0.99
164334,"@Override public void onDetach(){
  this.owner=null;
  for (  Item item : items)   Dungeon.quickslot.clearItem(item);
}","@Override public void onDetach(){
  this.owner=null;
  for (  Item item : items)   Dungeon.quickslot.clearItem(item);
  updateQuickslot();
}",0.918918918918919
164335,"@Override public void onDetach(){
  for (  Item item : items) {
    ((Wand)item).stopCharging();
  }
}","@Override public void onDetach(){
  super.onDetach();
  for (  Item item : items) {
    ((Wand)item).stopCharging();
  }
}",0.9107142857142856
164336,"@Override protected boolean canAttack(Char enemy){
  return Ballistica.cast(pos,enemy.pos,false,true) == enemy.pos;
}","@Override protected boolean canAttack(Char enemy){
  return Ballistica.cast(pos,enemy.pos,false,true) == enemy.pos && !isCharmedBy(enemy);
}",0.9105058365758756
164337,"@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(CHARGECAP,chargeCap);
  bundle.put(STEALTHED,stealthed);
  bundle.put(COOLDOWN,cooldown);
}","@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(STEALTHED,stealthed);
  bundle.put(COOLDOWN,cooldown);
}",0.8967551622418879
164338,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  chargeCap=bundle.getInt(CHARGECAP);
  stealthed=bundle.getBoolean(STEALTHED);
  cooldown=bundle.getInt(COOLDOWN);
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  stealthed=bundle.getBoolean(STEALTHED);
  cooldown=bundle.getInt(COOLDOWN);
}",0.8994708994708994
164339,"@Override public Item upgrade(){
  chargeCap=(((level + 1) / 2) + 1);
  while (scrolls.size() > (levelCap - 1 - level))   scrolls.remove(0);
  return super.upgrade();
}","@Override public Item upgrade(){
  chargeCap=(((level + 1) / 2) + 3);
  while (scrolls.size() > (levelCap - 1 - level))   scrolls.remove(0);
  return super.upgrade();
}",0.9940476190476192
164340,"@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(CHARGECAP,chargeCap);
  bundle.put(SCROLLS,scrolls.toArray(new String[scrolls.size()]));
}","@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(SCROLLS,scrolls.toArray(new String[scrolls.size()]));
}",0.8961424332344213
164341,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  chargeCap=bundle.getInt(CHARGECAP);
  scrolls.clear();
  Collections.addAll(scrolls,bundle.getStringArray(SCROLLS));
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  scrolls.clear();
  Collections.addAll(scrolls,bundle.getStringArray(SCROLLS));
}",0.9010416666666666
164342,"@Override public int attackProc(Char enemy,int damage){
  KindOfWeapon wep=rangedWeapon != null ? rangedWeapon : belongings.weapon;
  if (wep != null)   wep.proc(this,enemy,damage);
switch (subClass) {
case GLADIATOR:
    if (wep instanceof MeleeWeapon || wep == null) {
      damage+=Buff.affect(this,Combo.class).hit(enemy,damage);
    }
  break;
case BATTLEMAGE:
if (wep instanceof Wand) {
  Wand wand=(Wand)wep;
  if (wand.curCharges < wand.maxCharges && damage > 0) {
    wand.curCharges++;
    if (Dungeon.quickslot.contains(wand)) {
      QuickSlotButton.refresh();
    }
    ScrollOfRecharging.charge(this);
  }
  damage+=wand.curCharges;
}
case SNIPER:
if (rangedWeapon != null) {
Buff.prolong(this,SnipersMark.class,attackDelay() * 1.1f).object=enemy.id();
}
break;
default :
}
return damage;
}","@Override public int attackProc(Char enemy,int damage){
  KindOfWeapon wep=rangedWeapon != null ? rangedWeapon : belongings.weapon;
  if (wep != null)   wep.proc(this,enemy,damage);
switch (subClass) {
case GLADIATOR:
    if (wep instanceof MeleeWeapon || wep == null) {
      damage+=Buff.affect(this,Combo.class).hit(enemy,damage);
    }
  break;
case BATTLEMAGE:
if (wep instanceof Wand) {
  Wand wand=(Wand)wep;
  if (wand.curCharges < wand.maxCharges && damage > 0) {
    wand.curCharges++;
    if (Dungeon.quickslot.contains(wand)) {
      QuickSlotButton.refresh();
    }
    ScrollOfRecharging.charge(this);
  }
  damage+=wand.curCharges;
}
break;
case SNIPER:
if (rangedWeapon != null) {
Buff.prolong(this,SnipersMark.class,attackDelay() * 1.1f).object=enemy.id();
}
break;
default :
}
return damage;
}",0.9956656346749226
164343,"@Override public void onSelect(Item item){
  if (item != null) {
    Sample.INSTANCE.play(Assets.SND_EVOKE);
    ScrollOfUpgrade.upgrade(curUser);
    evoke(curUser);
    GLog.w(TXT_DISENCHANTED,item.name());
    item.upgrade();
    curUser.spendAndNext(TIME_TO_DISENCHANT);
    Badges.validateItemLevelAquired(item);
  }
 else {
    if (disenchantEquipped) {
      curUser.belongings.weapon=WandOfMagicMissile.this;
      WandOfMagicMissile.this.updateQuickslot();
    }
 else {
      collect(curUser.belongings.backpack);
    }
  }
}","@Override public void onSelect(Item item){
  if (item != null) {
    Sample.INSTANCE.play(Assets.SND_EVOKE);
    ScrollOfUpgrade.upgrade(curUser);
    evoke(curUser);
    GLog.w(TXT_DISENCHANTED,item.name());
    Dungeon.quickslot.clearItem(WandOfMagicMissile.this);
    WandOfMagicMissile.this.updateQuickslot();
    item.upgrade();
    curUser.spendAndNext(TIME_TO_DISENCHANT);
    Badges.validateItemLevelAquired(item);
  }
 else {
    if (disenchantEquipped) {
      curUser.belongings.weapon=WandOfMagicMissile.this;
      WandOfMagicMissile.this.updateQuickslot();
    }
 else {
      collect(curUser.belongings.backpack);
    }
  }
}",0.9106382978723404
164344,"public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    GameScene.add(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}","public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch))|| (Dungeon.isChallenged(Challenges.NO_SCROLLS) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder))|| item == null) {
    Heap heap=new Heap();
    ItemSprite sprite=heap.sprite=new ItemSprite();
    sprite.link(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (!(item instanceof Plant.Seed || item instanceof Blandfruit) || item instanceof BlandfruitBush.Seed || (item instanceof Blandfruit && (((Blandfruit)item).potionAttrib != null || heaps.get(cell) != null))|| Dungeon.hero.buff(AlchemistsToolkit.alchemy.class) != null && Dungeon.hero.buff(AlchemistsToolkit.alchemy.class).isCursed())) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      Dungeon.dropToChasm(item);
      GameScene.discard(heap);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}",0.9794816414686826
164345,"@Override public void onDetach(){
  this.owner=null;
}","@Override public void onDetach(){
  this.owner=null;
  for (  Item item : items)   Dungeon.quickslot.clearItem(item);
}",0.6242774566473989
164346,"@Override public void onSelect(Item item){
  if (item != null) {
    ((InventoryScroll)curItem).onItemSelected(item);
    curUser.spendAndNext(TIME_TO_READ);
    Sample.INSTANCE.play(Assets.SND_READ);
    Invisibility.dispel();
  }
 else   if (identifiedByUse && !((Scroll)curItem).ownedByBook) {
    ((InventoryScroll)curItem).confirmCancelation();
  }
 else {
    curItem.collect(curUser.belongings.backpack);
  }
}","@Override public void onSelect(Item item){
  if (item != null) {
    ((InventoryScroll)curItem).onItemSelected(item);
    curUser.spendAndNext(TIME_TO_READ);
    Sample.INSTANCE.play(Assets.SND_READ);
    Invisibility.dispel();
  }
 else   if (identifiedByUse && !((Scroll)curItem).ownedByBook) {
    ((InventoryScroll)curItem).confirmCancelation();
  }
 else   if (!((Scroll)curItem).ownedByBook) {
    curItem.collect(curUser.belongings.backpack);
  }
}",0.9564220183486238
164347,"@Override protected void layout(){
  health.visible=!Float.isNaN(healthLvl);
  imIcon.x=x;
  imIcon.y=y;
  tfLabel.x=PixelScene.align(PixelScene.uiCamera,imIcon.x + imIcon.width() + GAP);
  tfLabel.maxWidth=(int)(width - tfLabel.x);
  tfLabel.measure();
  tfLabel.y=PixelScene.align(PixelScene.uiCamera,imIcon.height > tfLabel.height() ? imIcon.y + (imIcon.height() - tfLabel.baseLine()) / 2 : imIcon.y);
  if (health.visible) {
    health.setRect(tfLabel.x,Math.max(tfLabel.y + tfLabel.height(),imIcon.y + imIcon.height() - health.height()),tfLabel.maxWidth,0);
    height=health.bottom();
  }
 else {
    height=Math.max(imIcon.y + imIcon.height(),tfLabel.y + tfLabel.height());
  }
}","@Override protected void layout(){
  health.visible=!Float.isNaN(healthLvl);
  imIcon.x=x;
  imIcon.y=y;
  tfLabel.x=PixelScene.align(PixelScene.uiCamera,imIcon.x + imIcon.width() + GAP);
  tfLabel.maxWidth=(int)(width - tfLabel.x);
  tfLabel.measure();
  tfLabel.y=PixelScene.align(PixelScene.uiCamera,imIcon.height > tfLabel.height() ? imIcon.y + (imIcon.height() - tfLabel.baseLine()) / 2 : imIcon.y);
  if (health.visible) {
    health.setRect(tfLabel.x,Math.max(tfLabel.y + tfLabel.height(),imIcon.y + imIcon.height() - health.height()),tfLabel.maxWidth,0);
    height=health.bottom();
  }
 else {
    height=Math.max(imIcon.height(),tfLabel.height());
  }
}",0.98295033358043
164348,"private Wand changeWand(Wand w){
  Wand n;
  do {
    n=(Wand)Generator.random(Category.WAND);
  }
 while (n.getClass() == w.getClass());
  n.level=0;
  n.upgrade(w.level);
  n.levelKnown=w.levelKnown;
  n.cursedKnown=w.cursedKnown;
  n.cursed=w.cursed;
  return n;
}","private Wand changeWand(Wand w){
  Wand n;
  do {
    n=(Wand)Generator.random(Category.WAND);
  }
 while (n.getClass() == w.getClass());
  n.level=0;
  n.updateLevel();
  n.upgrade(w.level);
  n.levelKnown=w.levelKnown;
  n.cursedKnown=w.cursedKnown;
  n.cursed=w.cursed;
  return n;
}",0.9656419529837252
164349,"protected void updateLevel(){
  maxCharges=Math.min(initialCharges() + level,9);
  curCharges=Math.min(curCharges,maxCharges);
  calculateDamage();
}","public void updateLevel(){
  maxCharges=Math.min(initialCharges() + level,9);
  curCharges=Math.min(curCharges,maxCharges);
  calculateDamage();
}",0.9627118644067796
164350,"public static void read(int pos){
  if (Dungeon.level instanceof DeadEndLevel) {
    GameScene.show(new WndMessage(TXT_DEAD_END));
  }
 else {
    int index=Dungeon.depth - 1;
    if (index < TIPS.length) {
      GameScene.show(new WndMessage(TIPS[index]));
      if (index >= 21)       Level.set(pos,Terrain.EMBERS);
      GameScene.updateMap(pos);
      GameScene.discoverTile(pos,Terrain.SIGN);
      GLog.w(TXT_BURN);
      CellEmitter.get(pos).burst(ElmoParticle.FACTORY,6);
      Sample.INSTANCE.play(Assets.SND_BURNING);
    }
  }
}","public static void read(int pos){
  if (Dungeon.level instanceof DeadEndLevel) {
    GameScene.show(new WndMessage(TXT_DEAD_END));
  }
 else {
    int index=Dungeon.depth - 1;
    if (index < TIPS.length) {
      GameScene.show(new WndMessage(TIPS[index]));
      if (index >= 21) {
        Level.set(pos,Terrain.EMBERS);
        GameScene.updateMap(pos);
        GameScene.discoverTile(pos,Terrain.SIGN);
        GLog.w(TXT_BURN);
        CellEmitter.get(pos).burst(ElmoParticle.FACTORY,6);
        Sample.INSTANCE.play(Assets.SND_BURNING);
      }
    }
  }
}",0.98
164351,"@Override protected void onTouchDown(Touch t){
  if (t != touch && another == null) {
    if (!touch.down) {
      touch=t;
      onTouchDown(t);
      return;
    }
    pinching=true;
    another=t;
    startSpan=PointF.distance(touch.current,another.current);
    startZoom=camera.zoom;
    dragging=false;
  }
}","@Override protected void onTouchDown(Touch t){
  if (t != touch && another == null) {
    if (!touch.down) {
      touch=t;
      onTouchDown(t);
      return;
    }
    pinching=true;
    another=t;
    startSpan=PointF.distance(touch.current,another.current);
    startZoom=camera.zoom;
    dragging=false;
  }
 else   if (t != touch) {
    reset();
  }
}",0.9359165424739196
164352,"@Override public synchronized void update(){
  if (Dungeon.hero == null) {
    return;
  }
  super.update();
  if (!freezeEmitters)   water.offset(0,-5 * Game.elapsed);
  Actor.process();
  if (Dungeon.hero.ready && !Dungeon.hero.paralysed) {
    log.newLine();
  }
  if (tagAttack != attack.active || tagLoot != loot.visible || tagResume != resume.visible) {
    tagAttack=attack.active;
    tagLoot=loot.visible;
    tagResume=resume.visible;
    layoutTags();
  }
  cellSelector.enabled=Dungeon.hero.ready;
}","@Override public synchronized void update(){
  if (Dungeon.hero == null) {
    return;
  }
  super.update();
  if (!freezeEmitters)   water.offset(0,-5 * Game.elapsed);
  Actor.process();
  if (Dungeon.hero.ready && !Dungeon.hero.paralysed) {
    log.newLine();
  }
  if (tagAttack != attack.active || tagLoot != loot.visible || tagResume != resume.visible) {
    tagAttack=attack.active;
    tagLoot=loot.visible;
    tagResume=resume.visible;
    layoutTags();
  }
  cellSelector.enable(Dungeon.hero.ready);
}",0.9960861056751468
164353,"@Override public ArrayList<String> actions(Hero hero){
  ArrayList<String> actions=super.actions(hero);
  if (isEquipped(hero) && charge > 0 && !cursed)   actions.add(AC_READ);
  if (level < levelCap && !cursed)   actions.add(AC_ADD);
  return actions;
}","@Override public ArrayList<String> actions(Hero hero){
  ArrayList<String> actions=super.actions(hero);
  if (isEquipped(hero) && charge > 0 && !cursed)   actions.add(AC_READ);
  if (isEquipped(hero) && level < levelCap && !cursed)   actions.add(AC_ADD);
  return actions;
}",0.9621212121212122
164354,"@Override public void use(BlobEmitter emitter){
  super.use(emitter);
  emitter.start(GooWarnParticle.FACTORY,0.05f,0);
}","@Override public void use(BlobEmitter emitter){
  super.use(emitter);
  emitter.pour(GooSprite.GooParticle.FACTORY,0.03f);
}",0.9061224489795918
164355,"@Override public void play(Animation anim,boolean force){
  super.play(anim,force);
  if (anim == pump) {
    spray=centerEmitter();
    spray.pour(GooParticle.FACTORY,0.04f);
  }
 else   if (spray != null) {
    spray.on=false;
    spray=null;
  }
}","@Override public void play(Animation anim,boolean force){
  super.play(anim,force);
}",0.5074626865671642
164356,"public GooSprite(){
  super();
  texture(Assets.GOO);
  TextureFilm frames=new TextureFilm(texture,20,14);
  idle=new Animation(10,true);
  idle.frames(frames,2,1,0,0,1);
  run=new Animation(15,true);
  run.frames(frames,3,2,1,2);
  pump=new Animation(20,true);
  pump.frames(frames,4,3,2,1,0);
  pumpAttack=new Animation(20,false);
  pumpAttack.frames(frames,4,3,2,1,0,7);
  jump=new Animation(1,true);
  jump.frames(frames,6);
  attack=new Animation(10,false);
  attack.frames(frames,8,9,10);
  die=new Animation(10,false);
  die.frames(frames,5,6,7);
  play(idle);
}","public GooSprite(){
  super();
  texture(Assets.GOO);
  TextureFilm frames=new TextureFilm(texture,20,14);
  idle=new Animation(10,true);
  idle.frames(frames,2,1,0,0,1);
  run=new Animation(15,true);
  run.frames(frames,3,2,1,2);
  pump=new Animation(20,true);
  pump.frames(frames,4,3,2,1,0);
  pumpAttack=new Animation(20,false);
  pumpAttack.frames(frames,4,3,2,1,0,7);
  attack=new Animation(10,false);
  attack.frames(frames,8,9,10);
  die=new Animation(10,false);
  die.frames(frames,5,6,7);
  play(idle);
}",0.9492151431209604
164357,"@Override public void update(){
  super.update();
  if (visible) {
    if (growing) {
      scale.set(scale.x + Game.elapsed * timeScale);
      if (scale.x > maxSize) {
        growing=false;
      }
    }
 else {
      scale.set(scale.x - Game.elapsed * timeScale);
      if (scale.x < 1) {
        growing=true;
      }
    }
    x=owner.x + owner.width - width / 2;
    y=owner.y - height;
  }
}","@Override public void update(){
  super.update();
  if (visible) {
    if (growing) {
      scale.set(Math.min(scale.x + Game.elapsed * timeScale,maxSize));
      if (scale.x >= maxSize) {
        growing=false;
      }
    }
 else {
      scale.set(Math.max(scale.x - Game.elapsed * timeScale,1f));
      if (scale.x <= 1) {
        growing=true;
      }
    }
    x=owner.x + owner.width - width / 2;
    y=owner.y - height;
  }
}",0.96028880866426
164358,"@SuppressWarnings(""String_Node_Str"") @Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  items=new ArrayList<Item>((Collection<? extends Item>)bundle.getCollection(ITEMS));
  adjustStats(bundle.getInt(LEVEL));
}","@SuppressWarnings(""String_Node_Str"") @Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  items=new ArrayList<Item>((Collection<Item>)((Collection<?>)bundle.getCollection(ITEMS)));
  adjustStats(bundle.getInt(LEVEL));
}",0.9354207436399216
164359,"@Override public boolean act(){
  target.invisible--;
  detach();
  return true;
}","@Override public boolean act(){
  detach();
  return true;
}",0.8450704225352113
164360,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  int[] values=bundle.getIntArray(PRESSES);
  for (int i=0; i < values.length; i++)   presses.add(values[i]);
  partialTime=bundle.getFloat(PARTIALTIME);
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  int[] values=bundle.getIntArray(PRESSES);
  for (  int value : values)   presses.add(value);
  partialTime=bundle.getFloat(PARTIALTIME);
}",0.7966457023060797
164361,"@Override protected boolean build(){
  initRooms();
  int distance;
  int retry=0;
  do {
    if (retry++ > 20) {
      return false;
    }
    roomEntrance=Random.element(rooms);
  }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4 || roomEntrance.top == 0 || roomEntrance.top >= 12);
  roomEntrance.type=Type.ENTRANCE;
  roomExit=roomEntrance;
  Room curRoom=null;
  Room lastRoom=roomEntrance;
  for (int i=0; i <= 4; i++) {
    retry=0;
    if (i < 4) {
      do {
        if (retry++ > 20) {
          return false;
        }
        curRoom=Random.element(rooms);
        Graph.buildDistanceMap(rooms,curRoom);
        distance=lastRoom.distance();
      }
 while (curRoom.type != Type.NULL || distance != 2 || curRoom.neigbours.contains(roomEntrance));
      curRoom.type=Type.STANDARD;
    }
 else {
      curRoom=roomEntrance;
    }
    Graph.buildDistanceMap(rooms,curRoom);
    List<Room> path=Graph.buildPath(rooms,lastRoom,curRoom);
    Graph.setPrice(path,lastRoom.distance);
    path=Graph.buildPath(rooms,lastRoom,curRoom);
    Room room=lastRoom;
    for (    Room next : path) {
      room.connect(next);
      room=next;
    }
    if (i == 4) {
      ArrayList<Room> candidates=new ArrayList<Room>();
      for (      Room r : lastRoom.neigbours) {
        if (r.type == Type.NULL && r.connected.size() == 0 && !r.neigbours.contains(roomEntrance)) {
          candidates.add(r);
        }
      }
      if (candidates.size() > 0) {
        Room kingsRoom=Random.element(candidates);
        kingsRoom.connect(lastRoom);
        kingsRoom.type=Room.Type.RAT_KING;
      }
 else {
        return false;
      }
    }
    lastRoom=curRoom;
  }
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.TUNNEL;
    }
  }
  for (  Room r : roomEntrance.neigbours) {
    if (r.bottom == roomEntrance.top && r.type != Type.NULL)     return false;
  }
  paint();
  exit=roomEntrance.top * Level.WIDTH + (roomEntrance.left + roomEntrance.right) / 2;
  map[exit]=Terrain.LOCKED_EXIT;
  paintWater();
  paintGrass();
  return true;
}","@Override protected boolean build(){
  initRooms();
  int distance;
  int retry=0;
  do {
    if (retry++ > 20) {
      return false;
    }
    roomEntrance=Random.element(rooms);
  }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4 || roomEntrance.top == 0 || roomEntrance.top >= 12);
  roomEntrance.type=Type.ENTRANCE;
  roomExit=roomEntrance;
  Room curRoom=null;
  Room lastRoom=roomEntrance;
  for (int i=0; i <= 4; i++) {
    retry=0;
    if (i < 4) {
      do {
        if (retry++ > 20) {
          return false;
        }
        curRoom=Random.element(rooms);
        Graph.buildDistanceMap(rooms,curRoom);
        distance=lastRoom.distance();
      }
 while (curRoom.type != Type.NULL || distance != 2 || !curRoom.intersect(roomEntrance).isEmpty());
      curRoom.type=Type.STANDARD;
    }
 else {
      curRoom=roomEntrance;
    }
    Graph.buildDistanceMap(rooms,curRoom);
    List<Room> path=Graph.buildPath(rooms,lastRoom,curRoom);
    Graph.setPrice(path,lastRoom.distance);
    path=Graph.buildPath(rooms,lastRoom,curRoom);
    Room room=lastRoom;
    for (    Room next : path) {
      room.connect(next);
      room=next;
    }
    if (i == 4) {
      ArrayList<Room> candidates=new ArrayList<Room>();
      for (      Room r : lastRoom.neigbours) {
        if (r.type == Type.NULL && r.connected.size() == 0 && !r.neigbours.contains(roomEntrance)) {
          candidates.add(r);
        }
      }
      if (candidates.size() > 0) {
        Room kingsRoom=Random.element(candidates);
        kingsRoom.connect(lastRoom);
        kingsRoom.type=Room.Type.RAT_KING;
      }
 else {
        return false;
      }
    }
    lastRoom=curRoom;
  }
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.TUNNEL;
    }
  }
  for (  Room r : roomEntrance.neigbours) {
    if (r.bottom == roomEntrance.top && r.type != Type.NULL)     return false;
  }
  paint();
  exit=roomEntrance.top * Level.WIDTH + (roomEntrance.left + roomEntrance.right) / 2;
  map[exit]=Terrain.LOCKED_EXIT;
  paintWater();
  paintGrass();
  return true;
}",0.9809433063363506
164362,"@Override protected boolean build(){
  feeling=Feeling.CHASM;
  initRooms();
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    int innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 6 || roomExit.height() < 6 || roomExit.top == 0);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=Graph.buildPath(rooms,roomEntrance,roomExit).size();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
  }
  Room roomShop=null;
  int shopSquare=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.PASSAGE;
      if (r.square() > shopSquare) {
        roomShop=r;
        shopSquare=r.square();
      }
    }
  }
  if (roomShop == null || shopSquare < 30 || ((roomShop.width() - 1) * (roomShop.height() - 1) < ShopPainter.spaceNeeded())) {
    return false;
  }
 else {
    roomShop.type=Imp.Quest.isCompleted() ? Room.Type.SHOP : Room.Type.STANDARD;
  }
  paint();
  paintWater();
  paintGrass();
  return true;
}","@Override protected boolean build(){
  feeling=Feeling.CHASM;
  viewDistance=4;
  initRooms();
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    int innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 6 || roomExit.height() < 6 || roomExit.top == 0);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=Graph.buildPath(rooms,roomEntrance,roomExit).size();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
  }
  Room roomShop=null;
  int shopSquare=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.PASSAGE;
      if (r.square() > shopSquare) {
        roomShop=r;
        shopSquare=r.square();
      }
    }
  }
  if (roomShop == null || shopSquare < 54) {
    return false;
  }
 else {
    roomShop.type=Imp.Quest.isCompleted() ? Room.Type.SHOP : Room.Type.STANDARD;
  }
  paint();
  paintWater();
  paintGrass();
  return true;
}",0.9700460829493088
164363,"@Override public void destroy(){
  super.destroy();
  instance=null;
  lastItem=null;
  lastTarget=null;
}","@Override public void destroy(){
  super.destroy();
  instance=new QuickSlotButton[4];
  lastItem=null;
  lastTarget=null;
}",0.9130434782608696
164364,"public WndSettings(boolean inGame){
  super();
  CheckBox btnImmersive=null;
  if (inGame) {
    int w=BTN_HEIGHT;
    btnZoomOut=new RedButton(TXT_ZOOM_OUT){
      @Override protected void onClick(){
        zoom(Camera.main.zoom - 1);
      }
    }
;
    add(btnZoomOut.setRect(0,0,w,BTN_HEIGHT));
    btnZoomIn=new RedButton(TXT_ZOOM_IN){
      @Override protected void onClick(){
        zoom(Camera.main.zoom + 1);
      }
    }
;
    add(btnZoomIn.setRect(WIDTH - w,0,w,BTN_HEIGHT));
    add(new RedButton(TXT_ZOOM_DEFAULT){
      @Override protected void onClick(){
        zoom(PixelScene.defaultZoom);
      }
    }
.setRect(btnZoomOut.right(),0,WIDTH - btnZoomIn.width() - btnZoomOut.width(),BTN_HEIGHT));
  }
 else {
    CheckBox btnScaleUp=new CheckBox(TXT_SCALE_UP){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.scaleUp(checked());
      }
    }
;
    btnScaleUp.setRect(0,0,WIDTH,BTN_HEIGHT);
    btnScaleUp.checked(ShatteredPixelDungeon.scaleUp());
    add(btnScaleUp);
    btnImmersive=new CheckBox(TXT_IMMERSIVE){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.immerse(checked());
      }
    }
;
    btnImmersive.setRect(0,btnScaleUp.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnImmersive.checked(ShatteredPixelDungeon.immersed());
    btnImmersive.enable(android.os.Build.VERSION.SDK_INT >= 19);
    add(btnImmersive);
  }
  CheckBox btnMusic=new CheckBox(TXT_MUSIC){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.music(checked());
    }
  }
;
  btnMusic.setRect(0,(btnImmersive != null ? btnImmersive.bottom() : BTN_HEIGHT) + GAP,WIDTH,BTN_HEIGHT);
  btnMusic.checked(ShatteredPixelDungeon.music());
  add(btnMusic);
  CheckBox btnSound=new CheckBox(TXT_SOUND){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.soundFx(checked());
      Sample.INSTANCE.play(Assets.SND_CLICK);
    }
  }
;
  btnSound.setRect(0,btnMusic.bottom() + GAP,WIDTH,BTN_HEIGHT);
  btnSound.checked(ShatteredPixelDungeon.soundFx());
  add(btnSound);
  if (!inGame) {
    RedButton btnOrientation=new RedButton(orientationText()){
      @Override protected void onClick(){
        ShatteredPixelDungeon.landscape(!ShatteredPixelDungeon.landscape());
      }
    }
;
    btnOrientation.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
    add(btnOrientation);
    resize(WIDTH,(int)btnOrientation.bottom());
  }
 else {
    CheckBox btnBrightness=new CheckBox(TXT_BRIGHTNESS){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.brightness(checked());
      }
    }
;
    btnBrightness.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnBrightness.checked(ShatteredPixelDungeon.brightness());
    add(btnBrightness);
    CheckBox btnQuickSlot=new CheckBox(TXT_QUICKSLOT){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.quickSlots(checked() ? 2 : 1);
        Toolbar.QuickSlots=checked() ? 2 : 1;
      }
    }
;
    btnQuickSlot.setRect(0,btnBrightness.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnQuickSlot.checked(ShatteredPixelDungeon.quickSlots() == 1);
    add(btnQuickSlot);
    resize(WIDTH,(int)btnQuickSlot.bottom());
  }
}","public WndSettings(boolean inGame){
  super();
  CheckBox btnImmersive=null;
  if (inGame) {
    int w=BTN_HEIGHT;
    btnZoomOut=new RedButton(TXT_ZOOM_OUT){
      @Override protected void onClick(){
        zoom(Camera.main.zoom - 1);
      }
    }
;
    add(btnZoomOut.setRect(0,0,w,BTN_HEIGHT));
    btnZoomIn=new RedButton(TXT_ZOOM_IN){
      @Override protected void onClick(){
        zoom(Camera.main.zoom + 1);
      }
    }
;
    add(btnZoomIn.setRect(WIDTH - w,0,w,BTN_HEIGHT));
    add(new RedButton(TXT_ZOOM_DEFAULT){
      @Override protected void onClick(){
        zoom(PixelScene.defaultZoom);
      }
    }
.setRect(btnZoomOut.right(),0,WIDTH - btnZoomIn.width() - btnZoomOut.width(),BTN_HEIGHT));
  }
 else {
    CheckBox btnScaleUp=new CheckBox(TXT_SCALE_UP){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.scaleUp(checked());
      }
    }
;
    btnScaleUp.setRect(0,0,WIDTH,BTN_HEIGHT);
    btnScaleUp.checked(ShatteredPixelDungeon.scaleUp());
    add(btnScaleUp);
    btnImmersive=new CheckBox(TXT_IMMERSIVE){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.immerse(checked());
      }
    }
;
    btnImmersive.setRect(0,btnScaleUp.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnImmersive.checked(ShatteredPixelDungeon.immersed());
    btnImmersive.enable(android.os.Build.VERSION.SDK_INT >= 19);
    add(btnImmersive);
  }
  CheckBox btnMusic=new CheckBox(TXT_MUSIC){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.music(checked());
    }
  }
;
  btnMusic.setRect(0,(btnImmersive != null ? btnImmersive.bottom() : BTN_HEIGHT) + GAP,WIDTH,BTN_HEIGHT);
  btnMusic.checked(ShatteredPixelDungeon.music());
  add(btnMusic);
  CheckBox btnSound=new CheckBox(TXT_SOUND){
    @Override protected void onClick(){
      super.onClick();
      ShatteredPixelDungeon.soundFx(checked());
      Sample.INSTANCE.play(Assets.SND_CLICK);
    }
  }
;
  btnSound.setRect(0,btnMusic.bottom() + GAP,WIDTH,BTN_HEIGHT);
  btnSound.checked(ShatteredPixelDungeon.soundFx());
  add(btnSound);
  if (!inGame) {
    RedButton btnOrientation=new RedButton(orientationText()){
      @Override protected void onClick(){
        ShatteredPixelDungeon.landscape(!ShatteredPixelDungeon.landscape());
      }
    }
;
    btnOrientation.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
    add(btnOrientation);
    resize(WIDTH,(int)btnOrientation.bottom());
  }
 else {
    CheckBox btnBrightness=new CheckBox(TXT_BRIGHTNESS){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.brightness(checked());
      }
    }
;
    btnBrightness.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnBrightness.checked(ShatteredPixelDungeon.brightness());
    add(btnBrightness);
    CheckBox btnQuickSlot=new CheckBox(TXT_QUICKSLOT){
      @Override protected void onClick(){
        super.onClick();
        ShatteredPixelDungeon.quickSlots(checked() ? 2 : 1);
        Toolbar.QuickSlots=checked() ? 2 : 1;
      }
    }
;
    btnQuickSlot.setRect(0,btnBrightness.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnQuickSlot.checked(ShatteredPixelDungeon.quickSlots() == 2);
    add(btnQuickSlot);
    resize(WIDTH,(int)btnQuickSlot.bottom());
  }
}",0.9996980676328504
164365,"public final Item detach(Bag container){
  if (quantity <= 0) {
    return null;
  }
 else   if (quantity == 1) {
    if (stackable == true || this instanceof Boomerang) {
      Dungeon.quickslot.convertToPlaceholder(this);
    }
    return detachAll(container);
  }
 else {
    quantity--;
    updateQuickslot();
    try {
      Item detached=getClass().newInstance();
      Bundle copy=new Bundle();
      this.storeInBundle(copy);
      detached.restoreFromBundle(copy);
      detached.quantity(1);
      detached.onDetach();
      return detached;
    }
 catch (    Exception e) {
      return null;
    }
  }
}","public final Item detach(Bag container){
  if (quantity <= 0) {
    return null;
  }
 else   if (quantity == 1) {
    if (stackable || this instanceof Boomerang) {
      Dungeon.quickslot.convertToPlaceholder(this);
    }
    return detachAll(container);
  }
 else {
    quantity--;
    updateQuickslot();
    try {
      Item detached=getClass().newInstance();
      Bundle copy=new Bundle();
      this.storeInBundle(copy);
      detached.restoreFromBundle(copy);
      detached.quantity(1);
      detached.onDetach();
      return detached;
    }
 catch (    Exception e) {
      return null;
    }
  }
}",0.9934533551554828
164366,"private void circleBack(int from,Hero owner){
  ((MissileSprite)curUser.sprite.parent.recycle(MissileSprite.class)).reset(from,curUser.pos,curItem,null);
  if (throwEquiped) {
    owner.belongings.weapon=this;
    owner.spend(-TIME_TO_EQUIP);
  }
 else   if (!collect(curUser.belongings.backpack)) {
    Dungeon.level.drop(this,owner.pos).sprite.drop();
  }
}","private void circleBack(int from,Hero owner){
  ((MissileSprite)curUser.sprite.parent.recycle(MissileSprite.class)).reset(from,curUser.pos,curItem,null);
  if (throwEquiped) {
    owner.belongings.weapon=this;
    owner.spend(-TIME_TO_EQUIP);
    Dungeon.quickslot.replaceSimilar(this);
    updateQuickslot();
  }
 else   if (!collect(curUser.belongings.backpack)) {
    Dungeon.level.drop(this,owner.pos).sprite.drop();
  }
}",0.9146496815286624
164367,"@Override public void update(){
  if (visible != (Dungeon.hero.lastAction != null)) {
    visible=Dungeon.hero.lastAction != null;
    if (visible)     flash();
  }
  super.update();
}","@Override public void update(){
  if (!Dungeon.hero.isAlive())   visible=false;
 else   if (visible != (Dungeon.hero.lastAction != null)) {
    visible=Dungeon.hero.lastAction != null;
    if (visible)     flash();
  }
  super.update();
}",0.8720379146919431
164368,"public Effect(){
  super(0,0,0,0);
  point(sprite.worldToCamera(from));
  end=sprite.worldToCamera(to);
  speed.set(2 * (end.x - x) / DELAY,2 * (end.y - y) / DELAY);
  acc.set(-speed.x / DELAY,-speed.y / DELAY);
  delay=0;
  sprite.parent.add(this);
}","public Effect(){
  super(0,0,0,0);
  point(sprite.worldToCamera(from));
  end=sprite.worldToCamera(to);
  speed.set(2 * (end.x - x) / DELAY,2 * (end.y - y) / DELAY);
  acc.set(-speed.x / DELAY,-speed.y / DELAY);
  delay=0;
  if (sprite.parent != null)   sprite.parent.add(this);
}",0.9453860640301318
164369,"@Override public void restoreFromBundle(Bundle bundle){
  info=bundle.getString(REASON);
  win=bundle.getBoolean(WIN);
  score=bundle.getInt(SCORE);
  heroClass=HeroClass.restoreInBundle(bundle);
  armorTier=bundle.getInt(TIER);
  gameFile=bundle.getString(GAME);
  if (!bundle.contains(LEVEL)) {
    try {
      depth=Integer.parseInt(info.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      depth=0;
    }
    info=info.split(""String_Node_Str"")[0].trim();
    try {
      Dungeon.loadGame(gameFile);
      herolevel=Dungeon.hero.lvl;
    }
 catch (    Exception e) {
      herolevel=0;
    }
  }
 else {
    depth=bundle.getInt(DEPTH);
    herolevel=bundle.getInt(LEVEL);
  }
}","@Override public void restoreFromBundle(Bundle bundle){
  info=bundle.getString(REASON);
  win=bundle.getBoolean(WIN);
  score=bundle.getInt(SCORE);
  heroClass=HeroClass.restoreInBundle(bundle);
  armorTier=bundle.getInt(TIER);
  gameFile=bundle.getString(GAME);
  if (!bundle.contains(LEVEL)) {
    try {
      depth=Integer.parseInt(info.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      depth=0;
    }
    info=info.split(""String_Node_Str"")[0].trim();
    try {
      InputStream input=Game.instance.openFileInput(gameFile);
      Bundle gameBundle=Bundle.read(input);
      input.close();
      herolevel=((Hero)gameBundle.get(""String_Node_Str"")).lvl;
    }
 catch (    Exception e) {
      herolevel=0;
    }
  }
 else {
    depth=bundle.getInt(DEPTH);
    herolevel=bundle.getInt(LEVEL);
  }
}",0.890032154340836
164370,"public void guessBrew(){
  if (curGuess.size() != 3)   return;
  int numWrongPlace=0;
  int numRight=0;
  for (  String potion : curGuess) {
    if (combination.contains(potion)) {
      if (curGuess.indexOf(potion) == combination.indexOf(potion)) {
        numRight++;
      }
 else {
        numWrongPlace++;
      }
    }
  }
  int score=(numRight * 3) + numWrongPlace;
  if (score == 9)   score++;
  if (score == 0) {
    GLog.i(""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (score > level) {
    level=score;
    bstGuess=curGuess;
    this.numRight=numRight;
    this.numWrongPlace=numWrongPlace;
    if (level == 10) {
      bstGuess=new ArrayList<String>();
      GLog.p(""String_Node_Str"");
    }
 else {
      GLog.w(""String_Node_Str"" + brewDesc(numWrongPlace,numRight) + ""String_Node_Str"");
    }
  }
 else {
    GLog.w(""String_Node_Str"" + brewDesc(numWrongPlace,numRight) + ""String_Node_Str"");
  }
  curGuess=new ArrayList<String>();
}","public void guessBrew(){
  if (curGuess.size() != 3)   return;
  int numWrongPlace=0;
  int numRight=0;
  for (  String potion : curGuess) {
    if (combination.contains(potion)) {
      if (curGuess.indexOf(potion) == combination.indexOf(potion)) {
        numRight++;
      }
 else {
        numWrongPlace++;
      }
    }
  }
  int score=(numRight * 3) + numWrongPlace;
  if (score == 9)   score++;
  if (score == 0) {
    GLog.i(""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (score > level) {
    level=score;
    seedsToPotion=0;
    bstGuess=curGuess;
    this.numRight=numRight;
    this.numWrongPlace=numWrongPlace;
    if (level == 10) {
      bstGuess=new ArrayList<String>();
      GLog.p(""String_Node_Str"");
    }
 else {
      GLog.w(""String_Node_Str"" + brewDesc(numWrongPlace,numRight) + ""String_Node_Str"");
    }
  }
 else {
    GLog.w(""String_Node_Str"" + brewDesc(numWrongPlace,numRight) + ""String_Node_Str"");
  }
  curGuess=new ArrayList<String>();
}",0.9891248058001036
164371,"public boolean tryCook(int count){
  if (seedsToPotion == 0) {
    if (Random.Int(30) < 10 + level) {
      if (Random.Int(30) < level) {
        seedsToPotion=1;
      }
 else       seedsToPotion=2;
    }
 else     seedsToPotion=3;
  }
  if (count >= seedsToPotion) {
    seedsToPotion=0;
    return true;
  }
 else   return false;
}","public boolean tryCook(int count){
  if (seedsToPotion == 0) {
    if (Random.Int(20) < 10 + level) {
      if (Random.Int(20) < level) {
        seedsToPotion=1;
      }
 else       seedsToPotion=2;
    }
 else     seedsToPotion=3;
  }
  if (count >= seedsToPotion) {
    seedsToPotion=0;
    return true;
  }
 else   return false;
}",0.6766467065868264
164372,"private static void store(Bundle bundle,HashSet<Badge> badges){
  int count=0;
  String names[]=new String[global.size()];
  for (  Badge badge : badges) {
    names[count++]=badge.toString();
  }
  bundle.put(BADGES,names);
}","private static void store(Bundle bundle,HashSet<Badge> badges){
  int count=0;
  String names[]=new String[badges.size()];
  for (  Badge badge : badges) {
    names[count++]=badge.toString();
  }
  bundle.put(BADGES,names);
}",0.9734513274336284
164373,"@Override protected void assignRoomType(){
  super.assignRoomType();
  for (  Room r : rooms) {
    if (r.type == Type.TUNNEL) {
      r.type=Type.PASSAGE;
    }
  }
}","@Override protected boolean assignRoomType(){
  super.assignRoomType();
  for (  Room r : rooms) {
    if (r.type == Type.TUNNEL) {
      r.type=Type.PASSAGE;
    }
  }
  return true;
}",0.9318181818181818
164374,"@Override protected void assignRoomType(){
  super.assignRoomType();
  for (  Room r : rooms) {
    if (r.type == Type.TUNNEL) {
      r.type=Type.PASSAGE;
    }
  }
}","@Override protected boolean assignRoomType(){
  super.assignRoomType();
  for (  Room r : rooms) {
    if (r.type == Type.TUNNEL) {
      r.type=Type.PASSAGE;
    }
  }
  return true;
}",0.9318181818181818
164375,"@Override protected boolean build(){
  if (!initRooms()) {
    return false;
  }
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    do {
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    do {
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 4 || roomExit.height() < 4);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=roomEntrance.distance();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  HashSet<Room> connected=new HashSet<Room>();
  connected.add(roomEntrance);
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  int nConnected=(int)(rooms.size() * Random.Float(0.5f,0.7f));
  while (connected.size() < nConnected) {
    Room cr=Random.element(connected);
    Room or=Random.element(cr.neigbours);
    if (!connected.contains(or)) {
      cr.connect(or);
      connected.add(or);
    }
  }
  if (Dungeon.shopOnLevel()) {
    Room shop=null;
    for (    Room r : roomEntrance.connected.keySet()) {
      if (r.connected.size() == 1 && r.width() >= 5 && r.height() >= 5) {
        shop=r;
        break;
      }
    }
    if (shop == null) {
      return false;
    }
 else {
      shop.type=Room.Type.SHOP;
    }
  }
  specials=new ArrayList<Room.Type>(Room.SPECIALS);
  if (Dungeon.bossLevel(Dungeon.depth + 1)) {
    specials.remove(Room.Type.WEAK_FLOOR);
  }
  if (Dungeon.isChallenged(Challenges.NO_ARMOR)) {
    specials.remove(Room.Type.CRYPT);
  }
  if (Dungeon.isChallenged(Challenges.NO_HERBALISM)) {
    specials.remove(Room.Type.GARDEN);
  }
  assignRoomType();
  paint();
  paintWater();
  paintGrass();
  placeTraps();
  return true;
}","@Override protected boolean build(){
  if (!initRooms()) {
    return false;
  }
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    do {
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    do {
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 4 || roomExit.height() < 4);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=roomEntrance.distance();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  HashSet<Room> connected=new HashSet<Room>();
  connected.add(roomEntrance);
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  int nConnected=(int)(rooms.size() * Random.Float(0.5f,0.7f));
  while (connected.size() < nConnected) {
    Room cr=Random.element(connected);
    Room or=Random.element(cr.neigbours);
    if (!connected.contains(or)) {
      cr.connect(or);
      connected.add(or);
    }
  }
  if (Dungeon.shopOnLevel()) {
    Room shop=null;
    for (    Room r : roomEntrance.connected.keySet()) {
      if (r.connected.size() == 1 && r.width() >= 5 && r.height() >= 5) {
        shop=r;
        break;
      }
    }
    if (shop == null) {
      return false;
    }
 else {
      shop.type=Room.Type.SHOP;
    }
  }
  specials=new ArrayList<Room.Type>(Room.SPECIALS);
  if (Dungeon.bossLevel(Dungeon.depth + 1)) {
    specials.remove(Room.Type.WEAK_FLOOR);
  }
  if (Dungeon.isChallenged(Challenges.NO_ARMOR)) {
    specials.remove(Room.Type.CRYPT);
  }
  if (Dungeon.isChallenged(Challenges.NO_HERBALISM)) {
    specials.remove(Room.Type.GARDEN);
  }
  if (!assignRoomType())   return false;
  paint();
  paintWater();
  paintGrass();
  placeTraps();
  return true;
}",0.9953734302709848
164376,"protected void assignRoomType(){
  int specialRooms=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() == 1) {
      if (specials.size() > 0 && r.width() > 3 && r.height() > 3 && Random.Int(specialRooms * specialRooms + 2) == 0) {
        if (pitRoomNeeded) {
          r.type=Type.PIT;
          pitRoomNeeded=false;
          specials.remove(Type.ARMORY);
          specials.remove(Type.CRYPT);
          specials.remove(Type.LABORATORY);
          specials.remove(Type.LIBRARY);
          specials.remove(Type.STATUE);
          specials.remove(Type.TREASURY);
          specials.remove(Type.VAULT);
          specials.remove(Type.WEAK_FLOOR);
        }
 else         if (Dungeon.depth % 5 == 2 && specials.contains(Type.LABORATORY)) {
          r.type=Type.LABORATORY;
        }
 else         if (Dungeon.depth >= Dungeon.transmutation && specials.contains(Type.MAGIC_WELL)) {
          r.type=Type.MAGIC_WELL;
        }
 else {
          int n=specials.size();
          r.type=specials.get(Math.min(Random.Int(n),Random.Int(n)));
          if (r.type == Type.WEAK_FLOOR) {
            weakFloorCreated=true;
          }
        }
        Room.useType(r.type);
        specials.remove(r.type);
        specialRooms++;
      }
 else       if (Random.Int(2) == 0) {
        HashSet<Room> neigbours=new HashSet<Room>();
        for (        Room n : r.neigbours) {
          if (!r.connected.containsKey(n) && !Room.SPECIALS.contains(n.type) && n.type != Type.PIT) {
            neigbours.add(n);
          }
        }
        if (neigbours.size() > 1) {
          r.connect(Random.element(neigbours));
        }
      }
    }
  }
  int count=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL) {
      int connections=r.connected.size();
      if (connections == 0) {
      }
 else       if (Random.Int(connections * connections) == 0) {
        r.type=Type.STANDARD;
        count++;
      }
 else {
        r.type=Type.TUNNEL;
      }
    }
  }
  while (count < 4) {
    Room r=randomRoom(Type.TUNNEL,1);
    if (r != null) {
      r.type=Type.STANDARD;
      count++;
    }
  }
}","protected boolean assignRoomType(){
  int specialRooms=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() == 1) {
      if (specials.size() > 0 && r.width() > 3 && r.height() > 3 && Random.Int(specialRooms * specialRooms + 2) == 0) {
        if (pitRoomNeeded) {
          r.type=Type.PIT;
          pitRoomNeeded=false;
          specials.remove(Type.ARMORY);
          specials.remove(Type.CRYPT);
          specials.remove(Type.LABORATORY);
          specials.remove(Type.LIBRARY);
          specials.remove(Type.STATUE);
          specials.remove(Type.TREASURY);
          specials.remove(Type.VAULT);
          specials.remove(Type.WEAK_FLOOR);
        }
 else         if (Dungeon.depth % 5 == 2 && specials.contains(Type.LABORATORY)) {
          r.type=Type.LABORATORY;
        }
 else         if (Dungeon.depth >= Dungeon.transmutation && specials.contains(Type.MAGIC_WELL)) {
          r.type=Type.MAGIC_WELL;
        }
 else {
          int n=specials.size();
          r.type=specials.get(Math.min(Random.Int(n),Random.Int(n)));
          if (r.type == Type.WEAK_FLOOR) {
            weakFloorCreated=true;
          }
        }
        Room.useType(r.type);
        specials.remove(r.type);
        specialRooms++;
      }
 else       if (Random.Int(2) == 0) {
        HashSet<Room> neigbours=new HashSet<Room>();
        for (        Room n : r.neigbours) {
          if (!r.connected.containsKey(n) && !Room.SPECIALS.contains(n.type) && n.type != Type.PIT) {
            neigbours.add(n);
          }
        }
        if (neigbours.size() > 1) {
          r.connect(Random.element(neigbours));
        }
      }
    }
  }
  int count=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL) {
      int connections=r.connected.size();
      if (connections == 0) {
      }
 else       if (Random.Int(connections * connections) == 0) {
        r.type=Type.STANDARD;
        count++;
      }
 else {
        r.type=Type.TUNNEL;
      }
    }
  }
  while (count < 4) {
    Room r=randomRoom(Type.TUNNEL,1);
    if (r != null) {
      r.type=Type.STANDARD;
      count++;
    }
  }
  return true;
}",0.9938967136150236
164377,"@Override protected boolean build(){
  initRooms();
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    int innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 6 || roomExit.height() < 6 || roomExit.top == 0);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=Graph.buildPath(rooms,roomEntrance,roomExit).size();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
  }
  Room roomShop=null;
  int shopSquare=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.PASSAGE;
      if (r.square() > shopSquare) {
        roomShop=r;
        shopSquare=r.square();
      }
    }
  }
  if (roomShop == null || shopSquare < 30) {
    return false;
  }
 else {
    roomShop.type=Imp.Quest.isCompleted() ? Room.Type.SHOP : Room.Type.STANDARD;
  }
  paint();
  paintWater();
  paintGrass();
  return true;
}","@Override protected boolean build(){
  feeling=Feeling.CHASM;
  initRooms();
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    int innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    innerRetry=0;
    do {
      if (innerRetry++ > 10) {
        return false;
      }
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 6 || roomExit.height() < 6 || roomExit.top == 0);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=Graph.buildPath(rooms,roomEntrance,roomExit).size();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
  }
  Room roomShop=null;
  int shopSquare=0;
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.PASSAGE;
      if (r.square() > shopSquare) {
        roomShop=r;
        shopSquare=r.square();
      }
    }
  }
  if (roomShop == null || shopSquare < 30 || ((roomShop.width() - 1) * (roomShop.height() - 1) < ShopPainter.spaceNeeded())) {
    return false;
  }
 else {
    roomShop.type=Imp.Quest.isCompleted() ? Room.Type.SHOP : Room.Type.STANDARD;
  }
  paint();
  paintWater();
  paintGrass();
  return true;
}",0.968795567220764
164378,"@Override protected boolean build(){
  if (!initRooms()) {
    return false;
  }
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    do {
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    do {
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 4 || roomExit.height() < 4);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=roomEntrance.distance();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  HashSet<Room> connected=new HashSet<Room>();
  connected.add(roomEntrance);
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  int nConnected=(int)(rooms.size() * Random.Float(0.5f,0.7f));
  while (connected.size() < nConnected) {
    Room cr=Random.element(connected);
    Room or=Random.element(cr.neigbours);
    if (!connected.contains(or)) {
      cr.connect(or);
      connected.add(or);
    }
  }
  if (Dungeon.shopOnLevel()) {
    Room shop=null;
    for (    Room r : roomEntrance.connected.keySet()) {
      if (r.connected.size() == 1 && r.width() >= 5 && r.height() >= 5) {
        shop=r;
        break;
      }
    }
    if (shop == null) {
      return false;
    }
 else {
      shop.type=Room.Type.SHOP;
    }
  }
  specials=new ArrayList<Room.Type>(Room.SPECIALS);
  if (Dungeon.bossLevel(Dungeon.depth + 1)) {
    specials.remove(Room.Type.WEAK_FLOOR);
  }
  if (Dungeon.isChallenged(Challenges.NO_ARMOR)) {
    specials.remove(Room.Type.CRYPT);
  }
  if (Dungeon.isChallenged(Challenges.NO_HERBALISM)) {
    specials.remove(Room.Type.GARDEN);
  }
  if (!assignRoomType())   return false;
  paint();
  paintWater();
  paintGrass();
  placeTraps();
  return true;
}","@Override protected boolean build(){
  if (!initRooms()) {
    return false;
  }
  int distance;
  int retry=0;
  int minDistance=(int)Math.sqrt(rooms.size());
  do {
    do {
      roomEntrance=Random.element(rooms);
    }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4);
    do {
      roomExit=Random.element(rooms);
    }
 while (roomExit == roomEntrance || roomExit.width() < 4 || roomExit.height() < 4);
    Graph.buildDistanceMap(rooms,roomExit);
    distance=roomEntrance.distance();
    if (retry++ > 10) {
      return false;
    }
  }
 while (distance < minDistance);
  roomEntrance.type=Type.ENTRANCE;
  roomExit.type=Type.EXIT;
  HashSet<Room> connected=new HashSet<Room>();
  connected.add(roomEntrance);
  Graph.buildDistanceMap(rooms,roomExit);
  List<Room> path=Graph.buildPath(rooms,roomEntrance,roomExit);
  Room room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  Graph.setPrice(path,roomEntrance.distance);
  Graph.buildDistanceMap(rooms,roomExit);
  path=Graph.buildPath(rooms,roomEntrance,roomExit);
  room=roomEntrance;
  for (  Room next : path) {
    room.connect(next);
    room=next;
    connected.add(room);
  }
  int nConnected=(int)(rooms.size() * Random.Float(0.5f,0.7f));
  while (connected.size() < nConnected) {
    Room cr=Random.element(connected);
    Room or=Random.element(cr.neigbours);
    if (!connected.contains(or)) {
      cr.connect(or);
      connected.add(or);
    }
  }
  if (Dungeon.shopOnLevel()) {
    Room shop=null;
    for (    Room r : roomEntrance.connected.keySet()) {
      if (r.connected.size() == 1 && ((r.width() - 1) * (r.height() - 1) >= ShopPainter.spaceNeeded())) {
        shop=r;
        break;
      }
    }
    if (shop == null) {
      return false;
    }
 else {
      shop.type=Room.Type.SHOP;
    }
  }
  specials=new ArrayList<Room.Type>(Room.SPECIALS);
  if (Dungeon.bossLevel(Dungeon.depth + 1)) {
    specials.remove(Room.Type.WEAK_FLOOR);
  }
  if (Dungeon.isChallenged(Challenges.NO_ARMOR)) {
    specials.remove(Room.Type.CRYPT);
  }
  if (Dungeon.isChallenged(Challenges.NO_HERBALISM)) {
    specials.remove(Room.Type.GARDEN);
  }
  if (!assignRoomType())   return false;
  paint();
  paintWater();
  paintGrass();
  placeTraps();
  return true;
}",0.9843205574912892
164379,"public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.EMPTY_SP);
  pasWidth=room.width() - 2;
  pasHeight=room.height() - 2;
  int per=pasWidth * 2 + pasHeight * 2;
  Item[] range=range();
  int pos=xy2p(room,room.entrance()) + (per - range.length) / 2;
  for (int i=0; i < range.length; i++) {
    Point xy=p2xy(room,(pos + per) % per);
    int cell=xy.x + xy.y * Level.WIDTH;
    if (level.heaps.get(cell) != null) {
      do {
        cell=room.random();
      }
 while (level.heaps.get(cell) != null);
    }
    level.drop(range[i],cell).type=Heap.Type.FOR_SALE;
    pos++;
  }
  placeShopkeeper(level,room);
  for (  Room.Door door : room.connected.values()) {
    door.set(Room.Door.Type.REGULAR);
  }
}","public static void paint(Level level,Room room){
  fill(level,room,Terrain.WALL);
  fill(level,room,1,Terrain.EMPTY_SP);
  pasWidth=room.width() - 2;
  pasHeight=room.height() - 2;
  int per=pasWidth * 2 + pasHeight * 2;
  if (itemsToSpawn == null)   generateItems();
  int pos=xy2p(room,room.entrance()) + (per - itemsToSpawn.size()) / 2;
  for (  Item item : itemsToSpawn) {
    Point xy=p2xy(room,(pos + per) % per);
    int cell=xy.x + xy.y * Level.WIDTH;
    if (level.heaps.get(cell) != null) {
      do {
        cell=room.random();
      }
 while (level.heaps.get(cell) != null);
    }
    level.drop(item,cell).type=Heap.Type.FOR_SALE;
    pos++;
  }
  placeShopkeeper(level,room);
  for (  Room.Door door : room.connected.values()) {
    door.set(Room.Door.Type.REGULAR);
  }
  itemsToSpawn=null;
}",0.891290527654164
164380,"@Override public void detach(){
  charge/=0.80;
  super.detach();
}","@Override public void detach(){
  charge*=0.80;
  super.detach();
}",0.9850746268656716
164381,"public static void dispel(){
  Invisibility buff=Dungeon.hero.buff(Invisibility.class);
  if (buff != null && Dungeon.hero.visibleEnemies() > 0) {
    buff.detach();
  }
  CloakOfShadows.cloakStealth cloakBuff=Dungeon.hero.buff(CloakOfShadows.cloakStealth.class);
  if (cloakBuff != null && Dungeon.hero.visibleEnemies() > 0) {
    cloakBuff.act();
    cloakBuff.detach();
  }
  TimekeepersHourglass.timeFreeze timeFreeze=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
  if (timeFreeze != null && Dungeon.hero.visibleEnemies() > 0) {
    timeFreeze.detach();
  }
}","public static void dispel(){
  Invisibility buff=Dungeon.hero.buff(Invisibility.class);
  if (buff != null) {
    buff.detach();
  }
  CloakOfShadows.cloakStealth cloakBuff=Dungeon.hero.buff(CloakOfShadows.cloakStealth.class);
  if (cloakBuff != null) {
    cloakBuff.act();
    cloakBuff.detach();
  }
  TimekeepersHourglass.timeFreeze timeFreeze=Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
  if (timeFreeze != null) {
    timeFreeze.detach();
  }
}",0.3811357074109721
164382,"@Override public void execute(Hero hero,String action){
  if (action == special()) {
    if (hero.HP < 3) {
      GLog.w(TXT_LOW_HEALTH);
    }
 else     if (!isEquipped(hero)) {
      GLog.w(TXT_NOT_EQUIPPED);
    }
 else {
      curUser=hero;
      doSpecial();
    }
  }
 else {
    super.execute(hero,action);
  }
}","@Override public void execute(Hero hero,String action){
  if (action == special()) {
    if (hero.HP < 3) {
      GLog.w(TXT_LOW_HEALTH);
    }
 else     if (!isEquipped(hero)) {
      GLog.w(TXT_NOT_EQUIPPED);
    }
 else {
      curUser=hero;
      Invisibility.dispel();
      doSpecial();
    }
  }
 else {
    super.execute(hero,action);
  }
}",0.9565217391304348
164383,"@Override public void onSelect(Integer target){
  if (target != null && target != curUser.pos) {
    int cell=Ballistica.cast(curUser.pos,target,false,true);
    if (Actor.findChar(cell) != null && cell != curUser.pos) {
      cell=Ballistica.trace[Ballistica.distance - 2];
    }
    curUser.HP-=(curUser.HP / 3);
    if (curUser.subClass == HeroSubClass.BERSERKER && curUser.HP <= curUser.HT * Fury.LEVEL) {
      Buff.affect(curUser,Fury.class);
    }
    Invisibility.dispel();
    final int dest=cell;
    curUser.busy();
    ((HeroSprite)curUser.sprite).jump(curUser.pos,cell,new Callback(){
      @Override public void call(){
        curUser.move(dest);
        Dungeon.level.press(dest,curUser);
        Dungeon.observe();
        for (int i=0; i < Level.NEIGHBOURS8.length; i++) {
          Char mob=Actor.findChar(curUser.pos + Level.NEIGHBOURS8[i]);
          if (mob != null && mob != curUser) {
            Buff.prolong(mob,Paralysis.class,SHOCK_TIME);
          }
        }
        CellEmitter.center(dest).burst(Speck.factory(Speck.DUST),10);
        Camera.main.shake(2,0.5f);
        curUser.spendAndNext(LEAP_TIME);
      }
    }
);
  }
}","@Override public void onSelect(Integer target){
  if (target != null && target != curUser.pos) {
    int cell=Ballistica.cast(curUser.pos,target,false,true);
    if (Actor.findChar(cell) != null && cell != curUser.pos) {
      cell=Ballistica.trace[Ballistica.distance - 2];
    }
    curUser.HP-=(curUser.HP / 3);
    if (curUser.subClass == HeroSubClass.BERSERKER && curUser.HP <= curUser.HT * Fury.LEVEL) {
      Buff.affect(curUser,Fury.class);
    }
    final int dest=cell;
    curUser.busy();
    ((HeroSprite)curUser.sprite).jump(curUser.pos,cell,new Callback(){
      @Override public void call(){
        curUser.move(dest);
        Dungeon.level.press(dest,curUser);
        Dungeon.observe();
        for (int i=0; i < Level.NEIGHBOURS8.length; i++) {
          Char mob=Actor.findChar(curUser.pos + Level.NEIGHBOURS8[i]);
          if (mob != null && mob != curUser) {
            Buff.prolong(mob,Paralysis.class,SHOCK_TIME);
          }
        }
        CellEmitter.center(dest).burst(Speck.factory(Speck.DUST),10);
        Camera.main.shake(2,0.5f);
        curUser.spendAndNext(LEAP_TIME);
      }
    }
);
  }
}",0.9881941407958024
164384,"private void checkEnemies(){
  int heroPos=Dungeon.hero.pos;
  candidates.clear();
  int v=Dungeon.hero.visibleEnemies();
  for (int i=0; i < v; i++) {
    Mob mob=Dungeon.hero.visibleEnemy(i);
    if (Level.adjacent(heroPos,mob.pos)) {
      candidates.add(mob);
    }
  }
  if (!candidates.contains(lastTarget)) {
    if (candidates.isEmpty()) {
      lastTarget=null;
    }
 else {
      lastTarget=Random.element(candidates);
      updateImage();
      flash();
    }
  }
 else {
    if (!bg.visible) {
      flash();
    }
  }
  visible(lastTarget != null);
  enable(bg.visible);
}","private void checkEnemies(){
  int heroPos=Dungeon.hero.pos;
  candidates.clear();
  int v=Dungeon.hero.visibleEnemies();
  for (int i=0; i < v; i++) {
    Mob mob=Dungeon.hero.visibleEnemy(i);
    if (Level.adjacent(heroPos,mob.pos)) {
      candidates.add(mob);
    }
  }
  if (!candidates.contains(lastTarget)) {
    if (candidates.isEmpty()) {
      lastTarget=null;
    }
 else {
      active=true;
      lastTarget=Random.element(candidates);
      updateImage();
      flash();
    }
  }
 else {
    if (!bg.visible) {
      active=true;
      flash();
    }
  }
  visible(lastTarget != null);
  enable(bg.visible);
}",0.968595041322314
164385,"@Override protected void onClick(){
  if (enabled && lastTarget != null) {
    Dungeon.hero.handle(lastTarget.pos);
  }
}","@Override protected void onClick(){
  if (enabled) {
    Dungeon.hero.handle(lastTarget.pos);
  }
}",0.9
164386,"@Override public void update(){
  super.update();
  if (lastTarget == null) {
    if (delay > 0f)     delay-=Game.elapsed;
    if (delay <= 0f)     active=false;
  }
 else {
    delay=0.5f;
    active=true;
  }
  if (Dungeon.hero.isAlive()) {
    enable(Dungeon.hero.ready);
  }
 else {
    visible(false);
    enable(false);
  }
}","@Override public void update(){
  super.update();
  if (!bg.visible) {
    enable(false);
    if (delay > 0f)     delay-=Game.elapsed;
    if (delay <= 0f)     active=false;
  }
 else {
    delay=0.75f;
    active=true;
    if (Dungeon.hero.isAlive()) {
      enable(Dungeon.hero.ready);
    }
 else {
      visible(false);
      enable(false);
    }
  }
}",0.74235807860262
164387,"public void create(){
  resizingNeeded=false;
  map=new int[LENGTH];
  visited=new boolean[LENGTH];
  Arrays.fill(visited,false);
  mapped=new boolean[LENGTH];
  Arrays.fill(mapped,false);
  mobs=new HashSet<Mob>();
  heaps=new SparseArray<Heap>();
  blobs=new HashMap<Class<? extends Blob>,Blob>();
  plants=new SparseArray<Plant>();
  if (!Dungeon.bossLevel()) {
    addItemToSpawn(Generator.random(Generator.Category.FOOD));
    if (Dungeon.posNeeded()) {
      addItemToSpawn(new PotionOfStrength());
      Dungeon.limitedDrops.strengthPotions.count++;
    }
    if (Dungeon.soeNeeded()) {
      addItemToSpawn(new ScrollOfUpgrade());
      Dungeon.limitedDrops.upgradeScrolls.count++;
    }
    if (Dungeon.asNeeded()) {
      addItemToSpawn(new Stylus());
      Dungeon.limitedDrops.arcaneStyli.count++;
    }
    int bonus=0;
    for (    Buff buff : Dungeon.hero.buffs(RingOfWealth.Wealth.class)) {
      bonus+=((RingOfWealth.Wealth)buff).level;
    }
    if (Random.Float() > Math.pow(0.95,bonus)) {
      if (Random.Int(2) == 0)       addItemToSpawn(new ScrollOfWeaponUpgrade());
 else       addItemToSpawn(new PotionOfMight());
    }
    DriedRose rose=Dungeon.hero.belongings.getItem(DriedRose.class);
    if (rose != null) {
      int petalsNeeded=(int)Math.ceil((float)((Dungeon.depth / 2) - rose.droppedPetals) / 3);
      for (int i=1; i <= petalsNeeded; i++) {
        if (rose.droppedPetals < 10) {
          addItemToSpawn(new DriedRose.Petal());
          rose.droppedPetals++;
        }
      }
    }
    if (Dungeon.depth > 1) {
switch (Random.Int(10)) {
case 0:
        if (!Dungeon.bossLevel(Dungeon.depth + 1)) {
          feeling=Feeling.CHASM;
        }
      break;
case 1:
    feeling=Feeling.WATER;
  break;
case 2:
feeling=Feeling.GRASS;
break;
}
}
}
boolean pitNeeded=Dungeon.depth > 1 && weakFloorCreated;
do {
Arrays.fill(map,feeling == Feeling.CHASM ? Terrain.CHASM : Terrain.WALL);
pitRoomNeeded=pitNeeded;
weakFloorCreated=false;
}
 while (!build());
decorate();
buildFlagMaps();
cleanWalls();
createMobs();
createItems();
}","public void create(){
  resizingNeeded=false;
  map=new int[LENGTH];
  visited=new boolean[LENGTH];
  Arrays.fill(visited,false);
  mapped=new boolean[LENGTH];
  Arrays.fill(mapped,false);
  mobs=new HashSet<Mob>();
  heaps=new SparseArray<Heap>();
  blobs=new HashMap<Class<? extends Blob>,Blob>();
  plants=new SparseArray<Plant>();
  if (!Dungeon.bossLevel()) {
    addItemToSpawn(Generator.random(Generator.Category.FOOD));
    if (Dungeon.posNeeded()) {
      addItemToSpawn(new PotionOfStrength());
      Dungeon.limitedDrops.strengthPotions.count++;
    }
    if (Dungeon.soeNeeded()) {
      addItemToSpawn(new ScrollOfUpgrade());
      Dungeon.limitedDrops.upgradeScrolls.count++;
    }
    if (Dungeon.asNeeded()) {
      addItemToSpawn(new Stylus());
      Dungeon.limitedDrops.arcaneStyli.count++;
    }
    int bonus=0;
    for (    Buff buff : Dungeon.hero.buffs(RingOfWealth.Wealth.class)) {
      bonus+=((RingOfWealth.Wealth)buff).level;
    }
    if (Random.Float() > Math.pow(0.95,bonus)) {
      if (Random.Int(2) == 0)       addItemToSpawn(new ScrollOfWeaponUpgrade());
 else       addItemToSpawn(new PotionOfMight());
    }
    DriedRose rose=Dungeon.hero.belongings.getItem(DriedRose.class);
    if (rose != null && !rose.cursed) {
      int petalsNeeded=(int)Math.ceil((float)((Dungeon.depth / 2) - rose.droppedPetals) / 3);
      for (int i=1; i <= petalsNeeded; i++) {
        if (rose.droppedPetals < 10) {
          addItemToSpawn(new DriedRose.Petal());
          rose.droppedPetals++;
        }
      }
    }
    if (Dungeon.depth > 1) {
switch (Random.Int(10)) {
case 0:
        if (!Dungeon.bossLevel(Dungeon.depth + 1)) {
          feeling=Feeling.CHASM;
        }
      break;
case 1:
    feeling=Feeling.WATER;
  break;
case 2:
feeling=Feeling.GRASS;
break;
}
}
}
boolean pitNeeded=Dungeon.depth > 1 && weakFloorCreated;
do {
Arrays.fill(map,feeling == Feeling.CHASM ? Terrain.CHASM : Terrain.WALL);
pitRoomNeeded=pitNeeded;
weakFloorCreated=false;
}
 while (!build());
decorate();
buildFlagMaps();
cleanWalls();
createMobs();
createItems();
}",0.996135265700483
164388,"@Override protected void onZap(int cell){
  boolean mapUpdated=false;
  int maxDistance=level() + 4;
  Ballistica.distance=Math.min(Ballistica.distance,maxDistance);
  Char ch;
  Heap heap=null;
  for (int i=1; i < Ballistica.distance; i++) {
    int c=Ballistica.trace[i];
    int before=Dungeon.level.map[c];
    if ((ch=Actor.findChar(c)) != null) {
      if (i == Ballistica.distance - 1) {
        ch.damage(maxDistance - 1 - i,this);
      }
 else {
        int next=Ballistica.trace[i + 1];
        if ((Level.passable[next] || Level.avoid[next]) && Actor.findChar(next) == null) {
          Actor.addDelayed(new Pushing(ch,ch.pos,next),-1);
          ch.pos=next;
          Actor.freeCell(next);
          if (ch instanceof Mob) {
            Dungeon.level.mobPress((Mob)ch);
          }
 else {
            Dungeon.level.press(ch.pos,ch);
          }
        }
 else {
          ch.damage(maxDistance - 1 - i,this);
        }
      }
    }
    if (heap == null && (heap=Dungeon.level.heaps.get(c)) != null) {
switch (heap.type) {
case HEAP:
        transport(heap);
      break;
case CHEST:
    open(heap);
  break;
default :
}
}
Dungeon.level.press(c,null);
if (before == Terrain.OPEN_DOOR && Actor.findChar(c) == null) {
Level.set(c,Terrain.DOOR);
GameScene.updateMap(c);
}
 else if (Level.water[c]) {
GameScene.ripple(c);
}
if (!mapUpdated && Dungeon.level.map[c] != before) {
mapUpdated=true;
}
}
if (mapUpdated) {
Dungeon.observe();
}
}","@Override protected void onZap(int cell){
  boolean mapUpdated=false;
  int maxDistance=level() + 4;
  Ballistica.distance=Math.min(Ballistica.distance,maxDistance);
  Char ch;
  Heap heap=null;
  for (int i=1; i < Ballistica.distance; i++) {
    int c=Ballistica.trace[i];
    int before=Dungeon.level.map[c];
    if ((ch=Actor.findChar(c)) != null) {
      if (i == Ballistica.distance - 1) {
        ch.damage(maxDistance - 1 - i,this);
      }
 else {
        int next=Ballistica.trace[i + 1];
        if ((Level.passable[next] || Level.avoid[next]) && Actor.findChar(next) == null) {
          Actor.addDelayed(new Pushing(ch,ch.pos,next),-1);
          ch.pos=next;
          Actor.freeCell(next);
          if (ch instanceof Shopkeeper)           ch.damage(0,this);
          if (ch instanceof Mob) {
            Dungeon.level.mobPress((Mob)ch);
          }
 else {
            Dungeon.level.press(ch.pos,ch);
          }
        }
 else {
          ch.damage(maxDistance - 1 - i,this);
        }
      }
    }
    if (heap == null && (heap=Dungeon.level.heaps.get(c)) != null) {
switch (heap.type) {
case HEAP:
        transport(heap);
      break;
case CHEST:
    open(heap);
  break;
default :
}
}
Dungeon.level.press(c,null);
if (before == Terrain.OPEN_DOOR && Actor.findChar(c) == null) {
Level.set(c,Terrain.DOOR);
GameScene.updateMap(c);
}
 else if (Level.water[c]) {
GameScene.ripple(c);
}
if (!mapUpdated && Dungeon.level.map[c] != before) {
mapUpdated=true;
}
}
if (mapUpdated) {
Dungeon.observe();
}
}",0.9767598518019536
164389,"public boolean attachTo(Char target){
  if (super.attachTo(target) && !target.immunities().contains(Sleep.class)) {
    if (cooldown() == 0)     spend(Random.Int(3,6));
    return true;
  }
  return false;
}","public boolean attachTo(Char target){
  if (!target.immunities().contains(Sleep.class) && super.attachTo(target)) {
    if (cooldown() == 0)     spend(Random.Int(3,6));
    return true;
  }
  return false;
}",0.7777777777777778
164390,"@Override public void detach(){
  triggerPresses();
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))   mob.sprite.remove(CharSprite.State.PARALYSED);
  GameScene.freezeEmitters=false;
  charge=0;
  QuickSlot.refresh();
  super.detach();
}","@Override public void detach(){
  triggerPresses();
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))   mob.sprite.remove(CharSprite.State.PARALYSED);
  GameScene.freezeEmitters=false;
  charge=0;
  QuickSlot.refresh();
  super.detach();
  activeBuff=null;
}",0.9631067961165048
164391,"@Override public boolean attack(Char enemy){
  if (!Level.adjacent(pos,enemy.pos)) {
    spend(attackDelay());
    if (hit(this,enemy,true)) {
      int dmg=damageRoll();
      enemy.damage(dmg,this);
      enemy.sprite.bloodBurstA(sprite.center(),dmg);
      enemy.sprite.flash();
      if (!enemy.isAlive() && enemy == Dungeon.hero) {
        Dungeon.fail(Utils.format(ResultDescriptions.BOSS,name,Dungeon.depth));
        GLog.n(TXT_KILL,name);
      }
      return true;
    }
 else {
      enemy.sprite.showStatus(CharSprite.NEUTRAL,enemy.defenseVerb());
      return false;
    }
  }
 else {
    return super.attack(enemy);
  }
}","@Override public boolean attack(Char enemy){
  if (!Level.adjacent(pos,enemy.pos)) {
    spend(attackDelay());
    if (hit(this,enemy,true)) {
      int dmg=damageRoll();
      enemy.damage(dmg,this);
      enemy.sprite.bloodBurstA(sprite.center(),dmg);
      enemy.sprite.flash();
      if (!enemy.isAlive() && enemy == Dungeon.hero) {
        Dungeon.fail(Utils.format(ResultDescriptions.UNIQUE,name,Dungeon.depth));
        GLog.n(TXT_KILL,name);
      }
      return true;
    }
 else {
      enemy.sprite.showStatus(CharSprite.NEUTRAL,enemy.defenseVerb());
      return false;
    }
  }
 else {
    return super.attack(enemy);
  }
}",0.9921383647798742
164392,"@Override protected boolean build(){
  initRooms();
  int distance;
  int retry=0;
  do {
    if (retry++ > 20) {
      return false;
    }
    roomEntrance=Random.element(rooms);
  }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4 || roomEntrance.top == 0 || roomEntrance.top >= 12);
  roomEntrance.type=Type.ENTRANCE;
  roomExit=roomEntrance;
  Room curRoom=null;
  Room lastRoom=roomEntrance;
  for (int i=0; i <= 4; i++) {
    retry=0;
    if (i < 4) {
      do {
        if (retry++ > 20) {
          return false;
        }
        curRoom=Random.element(rooms);
        Graph.buildDistanceMap(rooms,curRoom);
        distance=lastRoom.distance();
      }
 while (curRoom.type != Type.NULL || distance != 2);
      curRoom.type=Type.STANDARD;
    }
 else {
      curRoom=roomEntrance;
    }
    Graph.buildDistanceMap(rooms,curRoom);
    List<Room> path=Graph.buildPath(rooms,lastRoom,curRoom);
    Graph.setPrice(path,lastRoom.distance);
    path=Graph.buildPath(rooms,lastRoom,curRoom);
    Room room=lastRoom;
    for (    Room next : path) {
      room.connect(next);
      room=next;
    }
    if (i == 4) {
      ArrayList<Room> candidates=new ArrayList<Room>();
      for (      Room r : lastRoom.neigbours) {
        if (r.type == Type.NULL && r.connected.size() == 0 && !r.neigbours.contains(roomEntrance)) {
          candidates.add(r);
        }
      }
      if (candidates.size() > 0) {
        Room kingsRoom=Random.element(candidates);
        kingsRoom.connect(lastRoom);
        kingsRoom.type=Room.Type.RAT_KING;
      }
 else {
        return false;
      }
    }
    lastRoom=curRoom;
  }
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.TUNNEL;
    }
  }
  for (  Room r : roomEntrance.neigbours) {
    if (r.bottom == roomEntrance.top && r.type != Type.NULL)     return false;
  }
  paint();
  exit=roomEntrance.top * Level.WIDTH + (roomEntrance.left + roomEntrance.right) / 2;
  map[exit]=Terrain.LOCKED_EXIT;
  paintWater();
  paintGrass();
  return true;
}","@Override protected boolean build(){
  initRooms();
  int distance;
  int retry=0;
  do {
    if (retry++ > 20) {
      return false;
    }
    roomEntrance=Random.element(rooms);
  }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4 || roomEntrance.top == 0 || roomEntrance.top >= 12);
  roomEntrance.type=Type.ENTRANCE;
  roomExit=roomEntrance;
  Room curRoom=null;
  Room lastRoom=roomEntrance;
  for (int i=0; i <= 4; i++) {
    retry=0;
    if (i < 4) {
      do {
        if (retry++ > 20) {
          return false;
        }
        curRoom=Random.element(rooms);
        Graph.buildDistanceMap(rooms,curRoom);
        distance=lastRoom.distance();
      }
 while (curRoom.type != Type.NULL || distance != 2 || curRoom.neigbours.contains(roomEntrance));
      curRoom.type=Type.STANDARD;
    }
 else {
      curRoom=roomEntrance;
    }
    Graph.buildDistanceMap(rooms,curRoom);
    List<Room> path=Graph.buildPath(rooms,lastRoom,curRoom);
    Graph.setPrice(path,lastRoom.distance);
    path=Graph.buildPath(rooms,lastRoom,curRoom);
    Room room=lastRoom;
    for (    Room next : path) {
      room.connect(next);
      room=next;
    }
    if (i == 4) {
      ArrayList<Room> candidates=new ArrayList<Room>();
      for (      Room r : lastRoom.neigbours) {
        if (r.type == Type.NULL && r.connected.size() == 0 && !r.neigbours.contains(roomEntrance)) {
          candidates.add(r);
        }
      }
      if (candidates.size() > 0) {
        Room kingsRoom=Random.element(candidates);
        kingsRoom.connect(lastRoom);
        kingsRoom.type=Room.Type.RAT_KING;
      }
 else {
        return false;
      }
    }
    lastRoom=curRoom;
  }
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.TUNNEL;
    }
  }
  for (  Room r : roomEntrance.neigbours) {
    if (r.bottom == roomEntrance.top && r.type != Type.NULL)     return false;
  }
  paint();
  exit=roomEntrance.top * Level.WIDTH + (roomEntrance.left + roomEntrance.right) / 2;
  map[exit]=Terrain.LOCKED_EXIT;
  paintWater();
  paintGrass();
  return true;
}",0.9894026974951832
164393,"@Override public void die(Object cause){
  lootChance=1f / ((5 + Dungeon.limitedDrops.swarmHP.count) * generation);
  super.die(cause);
}","@Override public void die(Object cause){
  lootChance=1f / ((5 + Dungeon.limitedDrops.swarmHP.count) * generation + 1);
  super.die(cause);
}",0.9856115107913668
164394,"@Override public void onSelect(Item item){
  if (item != null && item instanceof Scroll && item.isIdentified()) {
    String scroll=convertName(item.getClass().getSimpleName());
    Hero hero=Dungeon.hero;
    for (int i=0; (i <= 1 && i < scrolls.size()); i++) {
      if (scrolls.get(i).equals(scroll)) {
        hero.sprite.operate(hero.pos);
        hero.busy();
        hero.spend(2f);
        Sample.INSTANCE.play(Assets.SND_BURNING);
        hero.sprite.emitter().burst(ElmoParticle.FACTORY,12);
        scrolls.remove(i);
        item.detach(hero.belongings.backpack);
        upgrade();
        GLog.i(""String_Node_Str"");
        return;
      }
    }
    if (item != null)     GLog.w(""String_Node_Str"");
  }
}","@Override public void onSelect(Item item){
  if (item != null && item instanceof Scroll && item.isIdentified()) {
    String scroll=convertName(item.getClass().getSimpleName());
    Hero hero=Dungeon.hero;
    for (int i=0; (i <= 1 && i < scrolls.size()); i++) {
      if (scrolls.get(i).equals(scroll)) {
        hero.sprite.operate(hero.pos);
        hero.busy();
        hero.spend(2f);
        Sample.INSTANCE.play(Assets.SND_BURNING);
        hero.sprite.emitter().burst(ElmoParticle.FACTORY,12);
        scrolls.remove(i);
        item.detach(hero.belongings.backpack);
        upgrade();
        GLog.i(""String_Node_Str"");
        return;
      }
    }
    if (item != null)     GLog.w(""String_Node_Str"");
  }
 else   if (item instanceof Scroll && !item.isIdentified())   GLog.w(""String_Node_Str"");
}",0.9416393442622952
164395,"protected String convertName(String className){
  className.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  className.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return className;
}","protected String convertName(String className){
  className=className.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  className=className.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return className;
}",0.9507389162561576
164396,"public Plant plant(Plant.Seed seed,int pos){
  Plant plant=plants.get(pos);
  if (plant != null) {
    plant.wither();
  }
  if (map[pos] == Terrain.HIGH_GRASS || map[pos] == Terrain.EMPTY || map[pos] == Terrain.EMBERS || map[pos] == Terrain.EMPTY_DECO) {
    set(pos,Terrain.GRASS);
    GameScene.updateMap(pos);
  }
  plant=seed.couch(pos);
  plants.put(pos,plant);
  GameScene.add(plant);
  return plant;
}","public Plant plant(Plant.Seed seed,int pos){
  Plant plant=plants.get(pos);
  if (plant != null) {
    plant.wither();
  }
  if (map[pos] == Terrain.HIGH_GRASS || map[pos] == Terrain.EMPTY || map[pos] == Terrain.EMBERS || map[pos] == Terrain.EMPTY_DECO) {
    map[pos]=Terrain.GRASS;
    GameScene.updateMap(pos);
  }
  plant=seed.couch(pos);
  plants.put(pos,plant);
  GameScene.add(plant);
  return plant;
}",0.9779951100244498
164397,"@Override public void detach(){
  for (  int cell : presses)   Dungeon.level.press(cell,null);
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))   mob.sprite.remove(CharSprite.State.PARALYSED);
  GameScene.freezeEmitters=false;
  charge=0;
  QuickSlot.refresh();
  super.detach();
}","@Override public void detach(){
  triggerPresses();
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))   mob.sprite.remove(CharSprite.State.PARALYSED);
  GameScene.freezeEmitters=false;
  charge=0;
  QuickSlot.refresh();
  super.detach();
}",0.8645640074211502
164398,"@Override public boolean attachTo(Char target){
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))   mob.sprite.add(CharSprite.State.PARALYSED);
  GameScene.freezeEmitters=true;
  return super.attachTo(target);
}","@Override public boolean attachTo(Char target){
  if (Dungeon.level != null)   for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))   mob.sprite.add(CharSprite.State.PARALYSED);
  GameScene.freezeEmitters=true;
  return super.attachTo(target);
}",0.9381663113006397
164399,"public void press(int cell,Char ch){
  if (pit[cell] && ch == Dungeon.hero) {
    Chasm.heroFall(cell);
    return;
  }
  TimekeepersHourglass.timeFreeze timeFreeze=null;
  if (ch != null)   timeFreeze=ch.buff(TimekeepersHourglass.timeFreeze.class);
  boolean frozen=timeFreeze != null;
  boolean trap=false;
switch (map[cell]) {
case Terrain.SECRET_TOXIC_TRAP:
    GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.TOXIC_TRAP:
  trap=true;
if (!frozen) ToxicTrap.trigger(cell,ch);
break;
case Terrain.SECRET_FIRE_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.FIRE_TRAP:
trap=true;
if (!frozen) FireTrap.trigger(cell,ch);
break;
case Terrain.SECRET_PARALYTIC_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.PARALYTIC_TRAP:
trap=true;
if (!frozen) ParalyticTrap.trigger(cell,ch);
break;
case Terrain.SECRET_POISON_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.POISON_TRAP:
trap=true;
if (!frozen) PoisonTrap.trigger(cell,ch);
break;
case Terrain.SECRET_ALARM_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.ALARM_TRAP:
trap=true;
if (!frozen) AlarmTrap.trigger(cell,ch);
break;
case Terrain.SECRET_LIGHTNING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.LIGHTNING_TRAP:
trap=true;
if (!frozen) LightningTrap.trigger(cell,ch);
break;
case Terrain.SECRET_GRIPPING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.GRIPPING_TRAP:
trap=true;
if (!frozen) GrippingTrap.trigger(cell,ch);
break;
case Terrain.SECRET_SUMMONING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.SUMMONING_TRAP:
trap=true;
if (!frozen) SummoningTrap.trigger(cell,ch);
break;
case Terrain.HIGH_GRASS:
HighGrass.trample(this,cell,ch);
break;
case Terrain.WELL:
WellWater.affectCell(cell);
break;
case Terrain.ALCHEMY:
if (ch == null) {
Alchemy.transmute(cell);
}
break;
case Terrain.DOOR:
Door.enter(cell);
break;
}
if (trap && !frozen) {
if (Dungeon.visible[cell]) Sample.INSTANCE.play(Assets.SND_TRAP);
if (ch == Dungeon.hero) Dungeon.hero.interrupt();
set(cell,Terrain.INACTIVE_TRAP);
GameScene.updateMap(cell);
}
 else if (trap && frozen) {
Sample.INSTANCE.play(Assets.SND_TRAP);
Level.set(cell,Terrain.discover(map[cell]));
GameScene.updateMap(cell);
timeFreeze.delayedPress(cell);
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.activate(ch);
}
}","public void press(int cell,Char ch){
  if (pit[cell] && ch == Dungeon.hero) {
    Chasm.heroFall(cell);
    return;
  }
  TimekeepersHourglass.timeFreeze timeFreeze=null;
  if (ch != null)   timeFreeze=ch.buff(TimekeepersHourglass.timeFreeze.class);
  boolean frozen=timeFreeze != null;
  boolean trap=false;
switch (map[cell]) {
case Terrain.SECRET_TOXIC_TRAP:
    GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.TOXIC_TRAP:
  trap=true;
if (!frozen) ToxicTrap.trigger(cell,ch);
break;
case Terrain.SECRET_FIRE_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.FIRE_TRAP:
trap=true;
if (!frozen) FireTrap.trigger(cell,ch);
break;
case Terrain.SECRET_PARALYTIC_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.PARALYTIC_TRAP:
trap=true;
if (!frozen) ParalyticTrap.trigger(cell,ch);
break;
case Terrain.SECRET_POISON_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.POISON_TRAP:
trap=true;
if (!frozen) PoisonTrap.trigger(cell,ch);
break;
case Terrain.SECRET_ALARM_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.ALARM_TRAP:
trap=true;
if (!frozen) AlarmTrap.trigger(cell,ch);
break;
case Terrain.SECRET_LIGHTNING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.LIGHTNING_TRAP:
trap=true;
if (!frozen) LightningTrap.trigger(cell,ch);
break;
case Terrain.SECRET_GRIPPING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.GRIPPING_TRAP:
trap=true;
if (!frozen) GrippingTrap.trigger(cell,ch);
break;
case Terrain.SECRET_SUMMONING_TRAP:
GLog.i(TXT_HIDDEN_PLATE_CLICKS);
case Terrain.SUMMONING_TRAP:
trap=true;
if (!frozen) SummoningTrap.trigger(cell,ch);
break;
case Terrain.HIGH_GRASS:
HighGrass.trample(this,cell,ch);
break;
case Terrain.WELL:
WellWater.affectCell(cell);
break;
case Terrain.ALCHEMY:
if (ch == null) {
Alchemy.transmute(cell);
}
break;
case Terrain.DOOR:
Door.enter(cell);
break;
}
if (trap && !frozen) {
if (Dungeon.visible[cell]) Sample.INSTANCE.play(Assets.SND_TRAP);
if (ch == Dungeon.hero) Dungeon.hero.interrupt();
set(cell,Terrain.INACTIVE_TRAP);
GameScene.updateMap(cell);
}
 else if (trap && frozen) {
Sample.INSTANCE.play(Assets.SND_TRAP);
Level.set(cell,Terrain.discover(map[cell]));
GameScene.updateMap(cell);
timeFreeze.setDelayedPress(cell);
}
Plant plant=plants.get(cell);
if (plant != null) {
plant.activate(ch);
}
}",0.9988940499889404
164400,"public void destroy(){
  scene=null;
  Badges.saveGlobal();
  super.destroy();
}","public void destroy(){
  freezeEmitters=false;
  scene=null;
  Badges.saveGlobal();
  super.destroy();
}",0.8695652173913043
164401,"@Override protected void onClick(){
  if (enabled) {
    Dungeon.hero.handle(lastTarget.pos);
  }
}","@Override protected void onClick(){
  if (Dungeon.hero.curAction != null)   Dungeon.hero.interrupt();
 else   Dungeon.hero.handle(lastTarget.pos);
}",0.728744939271255
164402,"@Override public void update(){
  super.update();
  if (Dungeon.hero.isAlive()) {
    if (!Dungeon.hero.ready) {
      enable(false);
    }
  }
 else {
    visible(false);
    enable(false);
  }
}","@Override public void update(){
  super.update();
  if (!Dungeon.hero.isAlive()) {
    visible(false);
    enable(false);
  }
}",0.7801857585139319
164403,"@Override protected boolean build(){
  initRooms();
  int distance;
  int retry=0;
  do {
    if (retry++ > 20) {
      return false;
    }
    roomEntrance=Random.element(rooms);
  }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4 || roomEntrance.top == 0 || roomEntrance.top >= 12);
  roomEntrance.type=Type.ENTRANCE;
  roomExit=roomEntrance;
  Room curRoom=null;
  Room lastRoom=roomEntrance;
  for (int i=0; i <= 4; i++) {
    retry=0;
    if (i < 4) {
      do {
        if (retry++ > 20) {
          return false;
        }
        curRoom=Random.element(rooms);
        Graph.buildDistanceMap(rooms,curRoom);
        distance=lastRoom.distance();
      }
 while (curRoom.type != Type.NULL || distance != 2);
      curRoom.type=Type.STANDARD;
    }
 else {
      curRoom=roomEntrance;
    }
    Graph.buildDistanceMap(rooms,curRoom);
    List<Room> path=Graph.buildPath(rooms,lastRoom,curRoom);
    Graph.setPrice(path,lastRoom.distance);
    path=Graph.buildPath(rooms,lastRoom,curRoom);
    Room room=lastRoom;
    for (    Room next : path) {
      room.connect(next);
      room=next;
    }
    if (i == 4) {
      ArrayList<Room> candidates=new ArrayList<Room>();
      for (      Room r : lastRoom.neigbours) {
        if (r.type == Type.NULL && r.connected.size() == 0) {
          candidates.add(r);
        }
      }
      if (candidates.size() > 0) {
        Room kingsRoom=Random.element(candidates);
        kingsRoom.connect(lastRoom);
        kingsRoom.type=Room.Type.RAT_KING;
      }
 else {
        return false;
      }
    }
    lastRoom=curRoom;
  }
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.TUNNEL;
    }
  }
  for (  Room r : roomEntrance.neigbours) {
    if (r.bottom == roomEntrance.top && r.type != Type.NULL)     return false;
  }
  paint();
  exit=roomEntrance.top * Level.WIDTH + (roomEntrance.left + roomEntrance.right) / 2;
  map[exit]=Terrain.LOCKED_EXIT;
  paintWater();
  paintGrass();
  return true;
}","@Override protected boolean build(){
  initRooms();
  int distance;
  int retry=0;
  do {
    if (retry++ > 20) {
      return false;
    }
    roomEntrance=Random.element(rooms);
  }
 while (roomEntrance.width() < 4 || roomEntrance.height() < 4 || roomEntrance.top == 0 || roomEntrance.top >= 12);
  roomEntrance.type=Type.ENTRANCE;
  roomExit=roomEntrance;
  Room curRoom=null;
  Room lastRoom=roomEntrance;
  for (int i=0; i <= 4; i++) {
    retry=0;
    if (i < 4) {
      do {
        if (retry++ > 20) {
          return false;
        }
        curRoom=Random.element(rooms);
        Graph.buildDistanceMap(rooms,curRoom);
        distance=lastRoom.distance();
      }
 while (curRoom.type != Type.NULL || distance != 2);
      curRoom.type=Type.STANDARD;
    }
 else {
      curRoom=roomEntrance;
    }
    Graph.buildDistanceMap(rooms,curRoom);
    List<Room> path=Graph.buildPath(rooms,lastRoom,curRoom);
    Graph.setPrice(path,lastRoom.distance);
    path=Graph.buildPath(rooms,lastRoom,curRoom);
    Room room=lastRoom;
    for (    Room next : path) {
      room.connect(next);
      room=next;
    }
    if (i == 4) {
      ArrayList<Room> candidates=new ArrayList<Room>();
      for (      Room r : lastRoom.neigbours) {
        if (r.type == Type.NULL && r.connected.size() == 0 && !r.neigbours.contains(roomEntrance)) {
          candidates.add(r);
        }
      }
      if (candidates.size() > 0) {
        Room kingsRoom=Random.element(candidates);
        kingsRoom.connect(lastRoom);
        kingsRoom.type=Room.Type.RAT_KING;
      }
 else {
        return false;
      }
    }
    lastRoom=curRoom;
  }
  for (  Room r : rooms) {
    if (r.type == Type.NULL && r.connected.size() > 0) {
      r.type=Type.TUNNEL;
    }
  }
  for (  Room r : roomEntrance.neigbours) {
    if (r.bottom == roomEntrance.top && r.type != Type.NULL)     return false;
  }
  paint();
  exit=roomEntrance.top * Level.WIDTH + (roomEntrance.left + roomEntrance.right) / 2;
  map[exit]=Terrain.LOCKED_EXIT;
  paintWater();
  paintGrass();
  return true;
}",0.9904153354632588
164404,"@Override public boolean act(){
  super.act();
  if (paralysed) {
    curAction=null;
    spendAndNext(TICK);
    return false;
  }
  checkVisibleMobs();
  AttackIndicator.updateState();
  if (curAction == null) {
    if (restoreHealth) {
      if (isStarving() || HP >= HT) {
        restoreHealth=false;
      }
 else {
        spend(TIME_TO_REST);
        next();
        return false;
      }
    }
    ready();
    return false;
  }
 else {
    restoreHealth=false;
    ready=false;
    if (curAction instanceof HeroAction.Move) {
      return actMove((HeroAction.Move)curAction);
    }
 else     if (curAction instanceof HeroAction.Interact) {
      return actInteract((HeroAction.Interact)curAction);
    }
 else     if (curAction instanceof HeroAction.Buy) {
      return actBuy((HeroAction.Buy)curAction);
    }
 else     if (curAction instanceof HeroAction.PickUp) {
      return actPickUp((HeroAction.PickUp)curAction);
    }
 else     if (curAction instanceof HeroAction.OpenChest) {
      return actOpenChest((HeroAction.OpenChest)curAction);
    }
 else     if (curAction instanceof HeroAction.Unlock) {
      return actUnlock((HeroAction.Unlock)curAction);
    }
 else     if (curAction instanceof HeroAction.Descend) {
      return actDescend((HeroAction.Descend)curAction);
    }
 else     if (curAction instanceof HeroAction.Ascend) {
      return actAscend((HeroAction.Ascend)curAction);
    }
 else     if (curAction instanceof HeroAction.Attack) {
      return actAttack((HeroAction.Attack)curAction);
    }
 else     if (curAction instanceof HeroAction.Cook) {
      return actCook((HeroAction.Cook)curAction);
    }
  }
  return false;
}","@Override public boolean act(){
  super.act();
  if (paralysed) {
    curAction=null;
    spendAndNext(TICK);
    return false;
  }
  checkVisibleMobs();
  if (curAction == null) {
    if (restoreHealth) {
      if (isStarving() || HP >= HT) {
        restoreHealth=false;
      }
 else {
        spend(TIME_TO_REST);
        next();
        return false;
      }
    }
    ready();
    return false;
  }
 else {
    restoreHealth=false;
    ready=false;
    if (curAction instanceof HeroAction.Move) {
      return actMove((HeroAction.Move)curAction);
    }
 else     if (curAction instanceof HeroAction.Interact) {
      return actInteract((HeroAction.Interact)curAction);
    }
 else     if (curAction instanceof HeroAction.Buy) {
      return actBuy((HeroAction.Buy)curAction);
    }
 else     if (curAction instanceof HeroAction.PickUp) {
      return actPickUp((HeroAction.PickUp)curAction);
    }
 else     if (curAction instanceof HeroAction.OpenChest) {
      return actOpenChest((HeroAction.OpenChest)curAction);
    }
 else     if (curAction instanceof HeroAction.Unlock) {
      return actUnlock((HeroAction.Unlock)curAction);
    }
 else     if (curAction instanceof HeroAction.Descend) {
      return actDescend((HeroAction.Descend)curAction);
    }
 else     if (curAction instanceof HeroAction.Ascend) {
      return actAscend((HeroAction.Ascend)curAction);
    }
 else     if (curAction instanceof HeroAction.Attack) {
      return actAttack((HeroAction.Attack)curAction);
    }
 else     if (curAction instanceof HeroAction.Cook) {
      return actCook((HeroAction.Cook)curAction);
    }
  }
  return false;
}",0.9899604502585944
164405,"private void ready(){
  sprite.idle();
  curAction=null;
  damageInterrupt=true;
  ready=true;
  GameScene.ready();
}","private void ready(){
  sprite.idle();
  curAction=null;
  damageInterrupt=true;
  ready=true;
  AttackIndicator.updateState();
  GameScene.ready();
}",0.8764044943820225
164406,"@Override protected void onClick(){
  if (Dungeon.hero.curAction != null)   Dungeon.hero.interrupt();
 else   Dungeon.hero.handle(lastTarget.pos);
}","@Override protected void onClick(){
  if (enabled) {
    Dungeon.hero.handle(lastTarget.pos);
  }
}",0.7206477732793523
164407,"private void enable(boolean value){
  enabled=value;
  if (sprite != null) {
    sprite.alpha(value ? ENABLED : DISABLED);
  }
}","private void enable(boolean value){
  enabled=value;
  active=value;
  if (sprite != null) {
    sprite.alpha(value ? ENABLED : DISABLED);
  }
}",0.9411764705882352
164408,"@Override public void update(){
  super.update();
  if (!Dungeon.hero.isAlive()) {
    visible(false);
    enable(false);
  }
}","@Override public void update(){
  super.update();
  if (Dungeon.hero.isAlive()) {
    enable(Dungeon.hero.ready);
  }
 else {
    visible(false);
    enable(false);
  }
}",0.8484848484848485
164409,"@Override protected void onClick(){
  Mob target=Dungeon.hero.visibleEnemy(enemyIndex++);
  HealthIndicator.instance.target(target == HealthIndicator.instance.target() ? null : target);
  Camera.main.target=null;
  Camera.main.focusOn(target.sprite);
}","@Override protected void onClick(){
  Mob target=Dungeon.hero.visibleEnemy(enemyIndex++);
  HealthIndicator.instance.target(target == HealthIndicator.instance.target() ? null : target);
  if (Dungeon.hero.curAction == null) {
    Camera.main.target=null;
    Camera.main.focusOn(target.sprite);
  }
}",0.9130434782608696
164410,"@Override public Item upgrade(){
  chargeCap=((level / 2) + 1);
  if (scrolls.size() > (levelCap - level))   scrolls.remove(0);
  return super.upgrade();
}","@Override public Item upgrade(){
  chargeCap=(((level + 1) / 2) + 1);
  while (scrolls.size() > (levelCap - 1 - level))   scrolls.remove(0);
  return super.upgrade();
}",0.953560371517028
164411,"@Override public void add(Buff buff){
  if (buff instanceof Burning) {
    if (HP < HT) {
      HP++;
      sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
    }
  }
 else {
    if (buff instanceof Frost) {
      if (Level.water[this.pos])       damage(Random.NormalIntRange(HT / 2,HT),buff);
 else       damage(Random.NormalIntRange(1,HT * 2 / 3),buff);
    }
    super.add(buff);
  }
}","@Override public void add(Buff buff){
  if (buff instanceof Burning) {
    if (HP < HT) {
      HP++;
      sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
    }
  }
 else {
    if (buff instanceof Frost) {
      if (Level.water[this.pos])       damage(Random.NormalIntRange(HT / 2,HT),buff);
 else       damage(Random.NormalIntRange(1,HT * 2 / 3),buff);
    }
    if (isAlive())     super.add(buff);
  }
}",0.976514215080346
164412,"@Override public void execute(Hero hero,String action){
  if (action.equals(AC_STEALTH)) {
    if (!stealthed) {
      if (cooldown <= 0 && charge > 0 && isEquipped(hero)) {
        stealthed=true;
        hero.spend(1f);
        Sample.INSTANCE.play(Assets.SND_MELD);
        activeBuff=activeBuff();
        activeBuff.attachTo(hero);
        if (hero.sprite.parent != null) {
          hero.sprite.parent.add(new AlphaTweener(hero.sprite,0.4f,0.4f));
        }
 else {
          hero.sprite.alpha(0.4f);
        }
        hero.sprite.operate(hero.pos);
        GLog.i(""String_Node_Str"");
      }
 else       if (!isEquipped(hero)) {
        GLog.i(""String_Node_Str"");
      }
 else       if (cooldown > 0) {
        GLog.i(""String_Node_Str"" + cooldown + ""String_Node_Str"");
      }
 else       if (charge == 0) {
        GLog.i(""String_Node_Str"");
      }
    }
 else {
      stealthed=false;
      activeBuff.detach();
      activeBuff=null;
      hero.sprite.operate(hero.pos);
      GLog.i(""String_Node_Str"");
    }
  }
 else {
    if (stealthed) {
      stealthed=false;
      activeBuff.detach();
      activeBuff=null;
      GLog.i(""String_Node_Str"");
    }
    super.execute(hero,action);
  }
}","@Override public void execute(Hero hero,String action){
  if (action.equals(AC_STEALTH)) {
    if (!stealthed) {
      if (cooldown <= 0 && charge >= 2 && isEquipped(hero)) {
        stealthed=true;
        hero.spend(1f);
        hero.busy();
        Sample.INSTANCE.play(Assets.SND_MELD);
        activeBuff=activeBuff();
        activeBuff.attachTo(hero);
        if (hero.sprite.parent != null) {
          hero.sprite.parent.add(new AlphaTweener(hero.sprite,0.4f,0.4f));
        }
 else {
          hero.sprite.alpha(0.4f);
        }
        hero.sprite.operate(hero.pos);
        GLog.i(""String_Node_Str"");
      }
 else       if (!isEquipped(hero)) {
        GLog.i(""String_Node_Str"");
      }
 else       if (cooldown > 0) {
        GLog.i(""String_Node_Str"" + cooldown + ""String_Node_Str"");
      }
 else       if (charge <= 1) {
        GLog.i(""String_Node_Str"");
      }
    }
 else {
      stealthed=false;
      activeBuff.detach();
      activeBuff=null;
      hero.sprite.operate(hero.pos);
      GLog.i(""String_Node_Str"");
    }
  }
 else {
    if (stealthed) {
      stealthed=false;
      activeBuff.detach();
      activeBuff=null;
      GLog.i(""String_Node_Str"");
    }
    super.execute(hero,action);
  }
}",0.9868312757201646
164413,"@Override public ArrayList<String> actions(Hero hero){
  ArrayList<String> actions=super.actions(hero);
  if (isEquipped(hero))   actions.add(AC_STEALTH);
  return actions;
}","@Override public ArrayList<String> actions(Hero hero){
  ArrayList<String> actions=super.actions(hero);
  if (isEquipped(hero) && charge > 1)   actions.add(AC_STEALTH);
  return actions;
}",0.9613259668508288
164414,"@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  if (state == SLEEPING) {
    bundle.put(STATE,Sleeping.TAG);
  }
 else   if (state == WANDERING) {
    bundle.put(STATE,Wandering.TAG);
  }
 else   if (state == HUNTING) {
    bundle.put(STATE,Hunting.TAG);
  }
 else   if (state == FLEEING) {
    bundle.put(STATE,Fleeing.TAG);
  }
 else   if (state == PASSIVE) {
    bundle.put(STATE,Passive.TAG);
  }
  bundle.put(TARGET,target);
}","@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  if (state == SLEEPING) {
    bundle.put(STATE,Sleeping.TAG);
  }
 else   if (state == WANDERING) {
    bundle.put(STATE,Wandering.TAG);
  }
 else   if (state == HUNTING) {
    bundle.put(STATE,Hunting.TAG);
  }
 else   if (state == FLEEING) {
    bundle.put(STATE,Fleeing.TAG);
  }
 else   if (state == PASSIVE) {
    bundle.put(STATE,Passive.TAG);
  }
  bundle.put(SEEN,enemySeen);
  bundle.put(TARGET,target);
}",0.968944099378882
164415,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  String state=bundle.getString(STATE);
  if (state.equals(Sleeping.TAG)) {
    this.state=SLEEPING;
  }
 else   if (state.equals(Wandering.TAG)) {
    this.state=WANDERING;
  }
 else   if (state.equals(Hunting.TAG)) {
    this.state=HUNTING;
  }
 else   if (state.equals(Fleeing.TAG)) {
    this.state=FLEEING;
  }
 else   if (state.equals(Passive.TAG)) {
    this.state=PASSIVE;
  }
  target=bundle.getInt(TARGET);
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  String state=bundle.getString(STATE);
  if (state.equals(Sleeping.TAG)) {
    this.state=SLEEPING;
  }
 else   if (state.equals(Wandering.TAG)) {
    this.state=WANDERING;
  }
 else   if (state.equals(Hunting.TAG)) {
    this.state=HUNTING;
  }
 else   if (state.equals(Fleeing.TAG)) {
    this.state=FLEEING;
  }
 else   if (state.equals(Passive.TAG)) {
    this.state=PASSIVE;
  }
  enemySeen=bundle.getBoolean(SEEN);
  target=bundle.getInt(TARGET);
}",0.9535545023696682
164416,"private Artifact changeArtifact(Artifact a){
  Artifact n=Generator.randomArtifact();
  if (n != null) {
    n.cursedKnown=a.cursedKnown;
    n.cursed=a.cursed;
    n.transferUpgrade(a.visiblyUpgraded());
    Journal.remove(Feature.WELL_OF_TRANSMUTATION);
  }
  return n;
}","private Artifact changeArtifact(Artifact a){
  Artifact n=Generator.randomArtifact();
  if (n != null) {
    n.cursedKnown=a.cursedKnown;
    n.cursed=a.cursed;
    n.levelKnown=a.levelKnown;
    n.transferUpgrade(a.visiblyUpgraded());
    Journal.remove(Feature.WELL_OF_TRANSMUTATION);
  }
  return n;
}",0.9462738301559792
164417,"private void descend() throws Exception {
  Level level;
  ArrayList<Item> fallingItems=new ArrayList<Item>();
  if (Dungeon.depth > 0) {
    level=Dungeon.level;
    fallingItems=level.fallingItems;
    level.fallingItems=new ArrayList<Item>();
  }
  Actor.fixTime();
  if (Dungeon.hero == null) {
    Dungeon.init();
    if (noStory) {
      Dungeon.chapters.add(WndStory.ID_SEWERS);
      noStory=false;
    }
  }
 else {
    Dungeon.saveLevel();
  }
  if (Dungeon.depth >= Statistics.deepestFloor) {
    level=Dungeon.newLevel();
  }
 else {
    Dungeon.depth++;
    level=Dungeon.loadLevel(Dungeon.hero.heroClass);
  }
  for (  Item item : fallingItems) {
    int cell=level.randomRespawnCell();
    while (cell == -1)     cell=level.randomRespawnCell();
    if (!(item instanceof Potion))     level.drop(item,cell);
 else     level.fallingPotions.add((Potion)item);
  }
  Dungeon.switchLevel(level,level.entrance);
}","private void descend() throws Exception {
  Level level;
  ArrayList<Item> fallingItems=new ArrayList<Item>();
  Actor.fixTime();
  if (Dungeon.hero == null) {
    Dungeon.init();
    if (noStory) {
      Dungeon.chapters.add(WndStory.ID_SEWERS);
      noStory=false;
    }
  }
 else {
    level=Dungeon.level;
    fallingItems=level.fallingItems;
    level.fallingItems=new ArrayList<Item>();
    Dungeon.saveLevel();
  }
  if (Dungeon.depth >= Statistics.deepestFloor) {
    level=Dungeon.newLevel();
  }
 else {
    Dungeon.depth++;
    level=Dungeon.loadLevel(Dungeon.hero.heroClass);
  }
  for (  Item item : fallingItems) {
    int cell=level.randomRespawnCell();
    while (cell == -1)     cell=level.randomRespawnCell();
    if (!(item instanceof Potion))     level.drop(item,cell);
 else     level.fallingPotions.add((Potion)item);
  }
  Dungeon.switchLevel(level,level.entrance);
}",0.863761720904578
164418,"public Plant plant(Plant.Seed seed,int pos){
  Plant plant=plants.get(pos);
  if (plant != null) {
    plant.wither();
  }
  plant=seed.couch(pos);
  plants.put(pos,plant);
  GameScene.add(plant);
  return plant;
}","public Plant plant(Plant.Seed seed,int pos){
  Plant plant=plants.get(pos);
  if (plant != null) {
    plant.wither();
  }
  if (map[pos] == Terrain.HIGH_GRASS || map[pos] == Terrain.EMPTY || map[pos] == Terrain.EMBERS || map[pos] == Terrain.EMPTY_DECO) {
    set(pos,Terrain.GRASS);
    GameScene.updateMap(pos);
  }
  plant=seed.couch(pos);
  plants.put(pos,plant);
  GameScene.add(plant);
  return plant;
}",0.6869983948635634
164419,"public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop))) {
    return new Heap();
  }
  if ((map[cell] == Terrain.ALCHEMY) && (item instanceof BlandfruitBush.Seed || !(item instanceof Plant.Seed || (item instanceof Blandfruit && ((Blandfruit)item).potionAttrib == null && heaps.get(cell) == null)))) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      GameScene.discard(heap);
      fallingItems.add(item);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}","public Heap drop(Item item,int cell){
  if ((Dungeon.isChallenged(Challenges.NO_FOOD) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) || (Dungeon.isChallenged(Challenges.NO_ARMOR) && item instanceof Armor) || (Dungeon.isChallenged(Challenges.NO_HEALING) && item instanceof PotionOfHealing)|| (Dungeon.isChallenged(Challenges.NO_HERBALISM) && (item instanceof Plant.Seed || item instanceof Dewdrop))) {
    Heap heap=new Heap();
    GameScene.add(heap);
    return heap;
  }
  if ((map[cell] == Terrain.ALCHEMY) && (item instanceof BlandfruitBush.Seed || !(item instanceof Plant.Seed || (item instanceof Blandfruit && ((Blandfruit)item).potionAttrib == null && heaps.get(cell) == null)))) {
    int n;
    do {
      n=cell + NEIGHBOURS8[Random.Int(8)];
    }
 while (map[n] != Terrain.EMPTY_SP);
    cell=n;
  }
  Heap heap=heaps.get(cell);
  if (heap == null) {
    heap=new Heap();
    heap.pos=cell;
    if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
      GameScene.discard(heap);
      fallingItems.add(item);
    }
 else {
      heaps.put(cell,heap);
      GameScene.add(heap);
    }
  }
 else   if (heap.type == Heap.Type.LOCKED_CHEST || heap.type == Heap.Type.CRYSTAL_CHEST) {
    int n;
    do {
      n=cell + Level.NEIGHBOURS8[Random.Int(8)];
    }
 while (!Level.passable[n] && !Level.avoid[n]);
    return drop(item,n);
  }
  heap.drop(item);
  if (Dungeon.level != null) {
    press(cell,null);
  }
  return heap;
}",0.9796761970375474
164420,"@Override public boolean act(){
  spend(TICK);
  boolean smthFound=false;
  int distance=3;
  int cx=target.pos % Level.WIDTH;
  int cy=target.pos / Level.WIDTH;
  int ax=cx - distance;
  if (ax < 0) {
    ax=0;
  }
  int bx=cx + distance;
  if (bx >= Level.WIDTH) {
    bx=Level.WIDTH - 1;
  }
  int ay=cy - distance;
  if (ay < 0) {
    ay=0;
  }
  int by=cy + distance;
  if (by >= Level.HEIGHT) {
    by=Level.HEIGHT - 1;
  }
  for (int y=ay; y <= by; y++) {
    for (int x=ax, p=ax + y * Level.WIDTH; x <= bx; x++, p++) {
      if (Dungeon.visible[p] && Level.secret[p] && Dungeon.level.map[p] != Terrain.SECRET_DOOR)       smthFound=true;
    }
  }
  if (smthFound == true || !cursed) {
    if (warn == 0) {
      GLog.w(""String_Node_Str"");
      if (target instanceof Hero) {
        ((Hero)target).interrupt();
      }
    }
    warn=3;
  }
 else {
    if (warn > 0) {
      warn--;
    }
  }
  BuffIndicator.refreshHero();
  if (charge < 100 && !cursed) {
    partialCharge+=(1f / 24) + (((float)level) / 80);
    if (partialCharge > 1 && charge < 100) {
      partialCharge--;
      charge++;
    }
 else     if (charge >= 100) {
      partialCharge=0;
      GLog.p(""String_Node_Str"");
    }
  }
  return true;
}","@Override public boolean act(){
  spend(TICK);
  boolean smthFound=false;
  int distance=3;
  int cx=target.pos % Level.WIDTH;
  int cy=target.pos / Level.WIDTH;
  int ax=cx - distance;
  if (ax < 0) {
    ax=0;
  }
  int bx=cx + distance;
  if (bx >= Level.WIDTH) {
    bx=Level.WIDTH - 1;
  }
  int ay=cy - distance;
  if (ay < 0) {
    ay=0;
  }
  int by=cy + distance;
  if (by >= Level.HEIGHT) {
    by=Level.HEIGHT - 1;
  }
  for (int y=ay; y <= by; y++) {
    for (int x=ax, p=ax + y * Level.WIDTH; x <= bx; x++, p++) {
      if (Dungeon.visible[p] && Level.secret[p] && Dungeon.level.map[p] != Terrain.SECRET_DOOR)       smthFound=true;
    }
  }
  if (smthFound == true && !cursed) {
    if (warn == 0) {
      GLog.w(""String_Node_Str"");
      if (target instanceof Hero) {
        ((Hero)target).interrupt();
      }
    }
    warn=3;
  }
 else {
    if (warn > 0) {
      warn--;
    }
  }
  BuffIndicator.refreshHero();
  if (charge < 100 && !cursed) {
    partialCharge+=(1f / 24) + (((float)level) / 80);
    if (partialCharge > 1 && charge < 100) {
      partialCharge--;
      charge++;
    }
 else     if (charge >= 100) {
      partialCharge=0;
      GLog.p(""String_Node_Str"");
    }
  }
  return true;
}",0.9983633387888708
164421,"@Override public boolean proc(Weapon weapon,Char attacker,Char defender,int damage){
  int level=Math.max(0,weapon.level);
  int maxDamage=(int)(damage * Math.pow(2,-1d / (level + 1)));
  if (maxDamage >= 1) {
    int d=defender.pos - attacker.pos;
    int pos=defender.pos + d;
    do {
      Char ch=Actor.findChar(pos);
      if (ch == null) {
        break;
      }
      int dr=Random.IntRange(0,ch.dr());
      int dmg=Random.Int(1,maxDamage);
      int effectiveDamage=Math.max(dmg - dr,0);
      ch.damage(effectiveDamage,this);
      ch.sprite.bloodBurstA(attacker.sprite.center(),effectiveDamage);
      ch.sprite.flash();
      pos+=d;
    }
 while (pos >= 0 && pos < Level.LENGTH);
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean proc(Weapon weapon,Char attacker,Char defender,int damage){
  int level=Math.max(0,weapon.level);
  int maxDamage=(int)(damage * Math.pow(2,-1d / (level + 1)));
  if (maxDamage >= 1) {
    int d=defender.pos - attacker.pos;
    int pos=defender.pos + d;
    while (pos >= 0 && pos < Level.LENGTH) {
      Char ch=Actor.findChar(pos);
      if (ch == null) {
        break;
      }
      int dr=Random.IntRange(0,ch.dr());
      int dmg=Random.Int(1,maxDamage);
      int effectiveDamage=Math.max(dmg - dr,0);
      ch.damage(effectiveDamage,this);
      ch.sprite.bloodBurstA(attacker.sprite.center(),effectiveDamage);
      ch.sprite.flash();
      pos+=d;
    }
    return true;
  }
 else {
    return false;
  }
}",0.4815063887020847
164422,"@Override public ArrayList<String> actions(Hero hero){
  ArrayList<String> actions=super.actions(hero);
  DewVial vial=hero.belongings.getItem(DewVial.class);
  if (vial != null && vial.isFull())   actions.add(AC_BLESS);
  return actions;
}","@Override public ArrayList<String> actions(Hero hero){
  ArrayList<String> actions=super.actions(hero);
  DewVial vial=hero.belongings.getItem(DewVial.class);
  if (vial != null && vial.isFull() && !blessed)   actions.add(AC_BLESS);
  return actions;
}",0.975609756097561
164423,"@Override public void die(Object cause){
  curAction=null;
  Ankh ankh=(Ankh)belongings.getItem(Ankh.class);
  if (ankh != null && ankh.isBlessed()) {
    this.HP=HT;
    new Flare(8,32).color(0xFFFF66,true).show(sprite,2f);
    CellEmitter.get(this.pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
    ankh.detach(belongings.backpack);
    Sample.INSTANCE.play(Assets.SND_TELEPORT);
    GLog.w(ankh.TXT_REVIVE);
    Statistics.ankhsUsed++;
    return;
  }
  Actor.fixTime();
  super.die(cause);
  if (ankh == null) {
    reallyDie(cause);
  }
 else {
    Dungeon.deleteGame(Dungeon.hero.heroClass,false);
    GameScene.show(new WndResurrect(ankh,cause));
  }
}","@Override public void die(Object cause){
  curAction=null;
  Ankh ankh=null;
  for (  Item item : belongings) {
    if (item instanceof Ankh) {
      if (ankh == null || ((Ankh)item).isBlessed()) {
        ankh=(Ankh)item;
      }
    }
  }
  if (ankh != null && ankh.isBlessed()) {
    this.HP=HT;
    new Flare(8,32).color(0xFFFF66,true).show(sprite,2f);
    CellEmitter.get(this.pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
    ankh.detach(belongings.backpack);
    Sample.INSTANCE.play(Assets.SND_TELEPORT);
    GLog.w(ankh.TXT_REVIVE);
    Statistics.ankhsUsed++;
    return;
  }
  Actor.fixTime();
  super.die(cause);
  if (ankh == null) {
    reallyDie(cause);
  }
 else {
    Dungeon.deleteGame(Dungeon.hero.heroClass,false);
    GameScene.show(new WndResurrect(ankh,cause));
  }
}",0.8717241379310345
164424,"public void countIronKeys(){
  IronKey.curDepthQuantity=0;
  for (  Item item : backpack) {
    if (item instanceof IronKey && ((IronKey)item).depth == Dungeon.depth) {
      IronKey.curDepthQuantity++;
    }
  }
}","public void countIronKeys(){
  IronKey.curDepthQuantity=0;
  for (  Item item : backpack) {
    if (item instanceof IronKey && ((IronKey)item).depth == Dungeon.depth) {
      IronKey.curDepthQuantity+=item.quantity();
    }
  }
}",0.9616252821670428
164425,"public final Item detach(Bag container){
  if (quantity <= 0) {
    return null;
  }
 else   if (quantity == 1) {
    return detachAll(container);
  }
 else {
    quantity--;
    updateQuickslot();
    try {
      Item detached=getClass().newInstance();
      detached.onDetach();
      return detached;
    }
 catch (    Exception e) {
      return null;
    }
  }
}","public final Item detach(Bag container){
  if (quantity <= 0) {
    return null;
  }
 else   if (quantity == 1) {
    return detachAll(container);
  }
 else {
    quantity--;
    updateQuickslot();
    try {
      Item detached=getClass().newInstance();
      Bundle copy=new Bundle();
      this.storeInBundle(copy);
      detached.restoreFromBundle(copy);
      detached.quantity(1);
      detached.onDetach();
      return detached;
    }
 catch (    Exception e) {
      return null;
    }
  }
}",0.8475750577367206
164426,"@Override public void interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  Sample.INSTANCE.play(Assets.SND_GHOST);
  if (Quest.given) {
    if (Quest.processed || Dungeon.hero.belongings.getItem(RatSkull.class) != null) {
      GameScene.show(new WndSadGhost(this,Quest.type));
    }
 else {
switch (Quest.type) {
case 1:
default :
        GameScene.show(new WndQuest(this,TXT_RAT2));
      break;
case 2:
    GameScene.show(new WndQuest(this,TXT_GNOLL2));
  break;
case 3:
GameScene.show(new WndQuest(this,TXT_CRAB2));
break;
}
int newPos=-1;
for (int i=0; i < 10; i++) {
newPos=Dungeon.level.randomRespawnCell();
if (newPos != -1) {
break;
}
}
if (newPos != -1) {
Actor.freeCell(pos);
CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
pos=newPos;
sprite.place(pos);
sprite.visible=Dungeon.visible[pos];
}
}
}
 else {
Mob questBoss;
String txt_quest;
switch (Quest.type) {
case 1:
default :
questBoss=new FetidRat();
txt_quest=TXT_RAT1;
break;
case 2:
questBoss=new GnollTrickster();
txt_quest=TXT_GNOLL1;
break;
case 3:
questBoss=new GreatCrab();
txt_quest=TXT_CRAB1;
break;
}
questBoss.pos=Dungeon.level.randomRespawnCell();
if (questBoss.pos != -1) {
GameScene.add(questBoss);
GameScene.show(new WndQuest(this,txt_quest));
Quest.given=true;
Journal.add(Journal.Feature.GHOST);
}
}
}","@Override public void interact(){
  sprite.turnTo(pos,Dungeon.hero.pos);
  Sample.INSTANCE.play(Assets.SND_GHOST);
  if (Quest.given) {
    if (Quest.weapon != null) {
      if (Quest.processed || Dungeon.hero.belongings.getItem(RatSkull.class) != null) {
        GameScene.show(new WndSadGhost(this,Quest.type));
      }
 else {
switch (Quest.type) {
case 1:
default :
          GameScene.show(new WndQuest(this,TXT_RAT2));
        break;
case 2:
      GameScene.show(new WndQuest(this,TXT_GNOLL2));
    break;
case 3:
  GameScene.show(new WndQuest(this,TXT_CRAB2));
break;
}
int newPos=-1;
for (int i=0; i < 10; i++) {
newPos=Dungeon.level.randomRespawnCell();
if (newPos != -1) {
break;
}
}
if (newPos != -1) {
Actor.freeCell(pos);
CellEmitter.get(pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
pos=newPos;
sprite.place(pos);
sprite.visible=Dungeon.visible[pos];
}
}
}
}
 else {
Mob questBoss;
String txt_quest;
switch (Quest.type) {
case 1:
default :
questBoss=new FetidRat();
txt_quest=TXT_RAT1;
break;
case 2:
questBoss=new GnollTrickster();
txt_quest=TXT_GNOLL1;
break;
case 3:
questBoss=new GreatCrab();
txt_quest=TXT_CRAB1;
break;
}
questBoss.pos=Dungeon.level.randomRespawnCell();
if (questBoss.pos != -1) {
GameScene.add(questBoss);
GameScene.show(new WndQuest(this,txt_quest));
Quest.given=true;
Journal.add(Journal.Feature.GHOST);
}
}
}",0.981117824773414
164427,"public static Item get(){
  if (depth == -1) {
    try {
      InputStream input=Game.instance.openFileInput(BONES_FILE);
      Bundle bundle=Bundle.read(input);
      input.close();
      depth=bundle.getInt(LEVEL);
      item=(Item)bundle.get(ITEM);
      return get();
    }
 catch (    Exception e) {
      return null;
    }
  }
 else {
    if (depth == Dungeon.depth) {
      Game.instance.deleteFile(BONES_FILE);
      depth=0;
      if (item.isUpgradable()) {
        item.cursed=true;
        item.cursedKnown=true;
        if (item.isUpgradable()) {
          int lvl=(Dungeon.depth - 1) * 3 / 5 + 1;
          if (lvl < item.level) {
            item.degrade(item.level - lvl);
          }
          item.levelKnown=false;
        }
      }
      if (item instanceof Ring) {
        ((Ring)item).syncGem();
      }
      return item;
    }
 else {
      return null;
    }
  }
}","public static Item get(){
  if (depth == -1) {
    try {
      InputStream input=Game.instance.openFileInput(BONES_FILE);
      Bundle bundle=Bundle.read(input);
      input.close();
      depth=bundle.getInt(LEVEL);
      item=(Item)bundle.get(ITEM);
      return get();
    }
 catch (    Exception e) {
      return null;
    }
  }
 else {
    if (depth == Dungeon.depth) {
      Game.instance.deleteFile(BONES_FILE);
      depth=0;
      if (item.isUpgradable()) {
        item.cursed=true;
        item.cursedKnown=true;
        if (item.isUpgradable()) {
          int lvl=(Dungeon.depth - 1) * 3 / 5 + 1;
          if (lvl < item.level) {
            item.degrade(item.level - lvl);
          }
          item.levelKnown=false;
        }
      }
      item.syncVisuals();
      return item;
    }
 else {
      return null;
    }
  }
}",0.8832369942196532
164428,"private static Item pickItem(Hero hero){
  Item item=null;
  if (Random.Int(2) == 0) {
switch (Random.Int(5)) {
case 0:
      item=hero.belongings.weapon;
    break;
case 1:
  item=hero.belongings.armor;
break;
case 2:
item=hero.belongings.misc1;
break;
case 3:
item=hero.belongings.misc2;
break;
case 4:
item=QuickSlot.getItem();
break;
}
if (item != null && !item.bones) return pickItem(hero);
}
 else {
Iterator<Item> iterator=hero.belongings.backpack.iterator();
Item curItem;
ArrayList<Item> items=new ArrayList<Item>();
while (iterator.hasNext()) {
curItem=iterator.next();
if (curItem.bones && !(curItem instanceof EquipableItem)) items.add(curItem);
}
if (!items.isEmpty()) {
item=Random.element(items);
if (item.stackable) {
item.quantity(Random.NormalIntRange(1,(int)Math.sqrt(item.quantity())));
}
}
}
if (item == null) {
if (Dungeon.gold > 0) {
item=new Gold(Random.NormalIntRange(1,Dungeon.gold));
}
 else {
item=new Gold(1);
}
}
return item;
}","private static Item pickItem(Hero hero){
  Item item=null;
  if (Random.Int(2) == 0) {
switch (Random.Int(5)) {
case 0:
      item=hero.belongings.weapon;
    break;
case 1:
  item=hero.belongings.armor;
break;
case 2:
item=hero.belongings.misc1;
break;
case 3:
item=hero.belongings.misc2;
break;
case 4:
item=QuickSlot.getItem();
break;
}
if (item != null && !item.bones) return pickItem(hero);
}
 else {
Iterator<Item> iterator=hero.belongings.backpack.iterator();
Item curItem;
ArrayList<Item> items=new ArrayList<Item>();
while (iterator.hasNext()) {
curItem=iterator.next();
if (curItem.bones && !(curItem instanceof EquipableItem)) items.add(curItem);
}
if (!items.isEmpty()) {
item=Random.element(items);
if (item.stackable) {
item.quantity((int)Math.sqrt(item.quantity()));
}
}
}
if (item == null) {
if (Dungeon.gold > 0) {
item=new Gold(Random.NormalIntRange(1,Dungeon.gold));
}
 else {
item=new Gold(1);
}
}
return item;
}",0.9867654843832716
164429,"public Potion(){
  super();
  image=handler.image(this);
  color=handler.label(this);
}","public Potion(){
  super();
  syncVisuals();
}",0.5864661654135338
164430,"public Ring(){
  super();
  syncGem();
}","public Ring(){
  super();
  syncVisuals();
}",0.8809523809523809
164431,"public Scroll(){
  super();
  image=handler.image(this);
  rune=handler.label(this);
}","public Scroll(){
  super();
  syncVisuals();
}",0.6212121212121212
164432,"public Wand(){
  super();
  calculateDamage();
  try {
    image=handler.image(this);
    wood=handler.label(this);
  }
 catch (  Exception e) {
  }
}","public Wand(){
  super();
  calculateDamage();
  try {
    syncVisuals();
  }
 catch (  Exception e) {
  }
}",0.7906976744186046
164433,"@Override public void damage(int dmg,Object src){
  restoreHealth=false;
  if (this.buff(Drowsy.class) != null) {
    Buff.detach(this,Drowsy.class);
    GLog.w(""String_Node_Str"");
  }
  int tenacity=0;
  for (  Buff buff : buffs(RingOfTenacity.Tenacity.class)) {
    tenacity+=((RingOfTenacity.Tenacity)buff).level;
  }
  if (tenacity != 0)   dmg*=Math.pow(0.9,tenacity * ((float)(HT - HP) / HT));
  super.damage(dmg,src);
  if (subClass == HeroSubClass.BERSERKER && 0 < HP && HP <= HT * Fury.LEVEL) {
    Buff.affect(this,Fury.class);
  }
}","@Override public void damage(int dmg,Object src){
  restoreHealth=false;
  if (this.buff(Drowsy.class) != null) {
    Buff.detach(this,Drowsy.class);
    GLog.w(""String_Node_Str"");
  }
  int tenacity=0;
  for (  Buff buff : buffs(RingOfTenacity.Tenacity.class)) {
    tenacity+=((RingOfTenacity.Tenacity)buff).level;
  }
  if (tenacity != 0)   dmg=(int)Math.ceil((float)dmg * Math.pow(0.9,tenacity * ((float)(HT - HP) / HT)));
  super.damage(dmg,src);
  if (subClass == HeroSubClass.BERSERKER && 0 < HP && HP <= HT * Fury.LEVEL) {
    Buff.affect(this,Fury.class);
  }
}",0.9730215827338128
164434,"@Override protected void doRead(){
  for (  Mob mob : Dungeon.level.mobs) {
    mob.beckon(curUser.pos);
    if (Dungeon.level.fieldOfView[mob.pos]) {
      Buff.prolong(mob,Amok.class,5f);
    }
  }
  GLog.w(""String_Node_Str"");
  setKnown();
  curUser.sprite.centerEmitter().start(Speck.factory(Speck.SCREAM),0.3f,3);
  Sample.INSTANCE.play(Assets.SND_CHALLENGE);
  Invisibility.dispel();
  curUser.spendAndNext(TIME_TO_READ);
}","@Override protected void doRead(){
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
    mob.beckon(curUser.pos);
    if (Level.fieldOfView[mob.pos]) {
      Buff.prolong(mob,Amok.class,5f);
    }
  }
  GLog.w(""String_Node_Str"");
  setKnown();
  curUser.sprite.centerEmitter().start(Speck.factory(Speck.SCREAM),0.3f,3);
  Sample.INSTANCE.play(Assets.SND_CHALLENGE);
  Invisibility.dispel();
  curUser.spendAndNext(TIME_TO_READ);
}",0.9655172413793104
164435,"@Override public void remove(Buff buff){
  super.remove(buff);
  if (buff instanceof Light) {
    sprite.remove(CharSprite.State.ILLUMINATED);
  }
 else   if (buff instanceof RingOfMight.Might) {
    if (((RingOfMight.Might)buff).level > 0) {
      HT-=((RingOfMight.Might)buff).level * 5;
    }
  }
  BuffIndicator.refreshHero();
}","@Override public void remove(Buff buff){
  super.remove(buff);
  if (buff instanceof Light) {
    sprite.remove(CharSprite.State.ILLUMINATED);
  }
 else   if (buff instanceof RingOfMight.Might) {
    if (((RingOfMight.Might)buff).level > 0) {
      HT-=((RingOfMight.Might)buff).level * 5;
      HP=Math.min(HT,HP);
    }
  }
  BuffIndicator.refreshHero();
}",0.9623188405797102
164436,"public void charge(){
  charge=Math.min(charge + 4,chargeCap);
  exp++;
  if (exp >= 4) {
    upgrade();
    GLog.p(""String_Node_Str"");
    exp-=4;
  }
}","public void charge(){
  charge=Math.min(charge + 4,chargeCap);
  exp++;
  if (exp >= 5 && level < levelCap) {
    upgrade();
    GLog.p(""String_Node_Str"");
    exp-=5;
  }
}",0.9263803680981596
164437,"@Override public void onSelect(Item item){
  if (item != null && item instanceof Plant.Seed) {
    if (seeds.contains(item.name())) {
      GLog.w(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      seeds.add(item.name());
      Hero hero=Dungeon.hero;
      hero.sprite.operate(hero.pos);
      hero.busy();
      hero.spend(2f);
      if (seeds.size() >= 5 + level) {
        seeds.clear();
        upgrade();
        if (level >= 1 && level <= 3) {
          GLog.p(""String_Node_Str"" + name + ""String_Node_Str""+ NAMES[level]+ ""String_Node_Str"");
          name=NAMES[level];
        }
        if (level <= 0)         image=ItemSpriteSheet.ARTIFACT_SANDALS;
 else         if (level == 1)         image=ItemSpriteSheet.ARTIFACT_SHOES;
 else         if (level == 2)         image=ItemSpriteSheet.ARTIFACT_BOOTS;
 else         if (level >= 3)         image=ItemSpriteSheet.ARTIFACT_GREAVES;
      }
 else {
        GLog.i(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
  }
}","@Override public void onSelect(Item item){
  if (item != null && item instanceof Plant.Seed) {
    if (seeds.contains(item.name())) {
      GLog.w(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      seeds.add(item.name());
      Hero hero=Dungeon.hero;
      hero.sprite.operate(hero.pos);
      hero.busy();
      hero.spend(2f);
      if (seeds.size() >= 5 + level) {
        seeds.clear();
        upgrade();
        if (level >= 1 && level <= 3) {
          GLog.p(""String_Node_Str"" + name + ""String_Node_Str""+ NAMES[level]+ ""String_Node_Str"");
          name=NAMES[level];
        }
        if (level <= 0)         image=ItemSpriteSheet.ARTIFACT_SANDALS;
 else         if (level == 1)         image=ItemSpriteSheet.ARTIFACT_SHOES;
 else         if (level == 2)         image=ItemSpriteSheet.ARTIFACT_BOOTS;
 else         if (level >= 3)         image=ItemSpriteSheet.ARTIFACT_GREAVES;
      }
 else {
        GLog.i(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      item.detach(hero.belongings.backpack);
    }
  }
}",0.9780380673499268
164438,"public static void loadGame(String fileName,boolean fullLoad) throws IOException {
  Bundle bundle=gameBundle(fileName);
  Dungeon.level=null;
  Dungeon.depth=-1;
  if (fullLoad) {
    PathFinder.setMapSize(Level.WIDTH,Level.HEIGHT);
  }
  Scroll.restore(bundle);
  Potion.restore(bundle);
  Wand.restore(bundle);
  Ring.restore(bundle);
  potionOfStrength=bundle.getInt(POS);
  scrollsOfUpgrade=bundle.getInt(SOU);
  arcaneStyli=bundle.getInt(AS);
  dewVial=bundle.getBoolean(DV);
  transmutation=bundle.getInt(WT);
  if (fullLoad) {
    chapters=new HashSet<Integer>();
    int ids[]=bundle.getIntArray(CHAPTERS);
    if (ids != null) {
      for (      int id : ids) {
        chapters.add(id);
      }
    }
    Bundle quests=bundle.getBundle(QUESTS);
    if (!quests.isNull()) {
      Ghost.Quest.restoreFromBundle(quests);
      Wandmaker.Quest.restoreFromBundle(quests);
      Blacksmith.Quest.restoreFromBundle(quests);
      Imp.Quest.restoreFromBundle(quests);
    }
 else {
      Ghost.Quest.reset();
      Wandmaker.Quest.reset();
      Blacksmith.Quest.reset();
      Imp.Quest.reset();
    }
    Room.restoreRoomsFromBundle(bundle);
  }
  Bundle badges=bundle.getBundle(BADGES);
  if (!badges.isNull()) {
    Badges.loadLocal(badges);
  }
 else {
    Badges.reset();
  }
  String qsClass=bundle.getString(QUICKSLOT);
  if (qsClass != null) {
    try {
      quickslot=Class.forName(qsClass);
    }
 catch (    ClassNotFoundException e) {
    }
  }
 else {
    quickslot=null;
  }
  version=bundle.getInt(VERSION);
  hero=null;
  hero=(Hero)bundle.get(HERO);
  gold=bundle.getInt(GOLD);
  depth=bundle.getInt(DEPTH);
  Statistics.restoreFromBundle(bundle);
  Journal.restoreFromBundle(bundle);
}","public static void loadGame(String fileName,boolean fullLoad) throws IOException {
  Bundle bundle=gameBundle(fileName);
  version=bundle.getInt(VERSION);
  Dungeon.level=null;
  Dungeon.depth=-1;
  if (fullLoad) {
    PathFinder.setMapSize(Level.WIDTH,Level.HEIGHT);
  }
  Scroll.restore(bundle);
  Potion.restore(bundle);
  Wand.restore(bundle);
  Ring.restore(bundle);
  potionOfStrength=bundle.getInt(POS);
  scrollsOfUpgrade=bundle.getInt(SOU);
  arcaneStyli=bundle.getInt(AS);
  dewVial=bundle.getBoolean(DV);
  transmutation=bundle.getInt(WT);
  if (fullLoad) {
    chapters=new HashSet<Integer>();
    int ids[]=bundle.getIntArray(CHAPTERS);
    if (ids != null) {
      for (      int id : ids) {
        chapters.add(id);
      }
    }
    Bundle quests=bundle.getBundle(QUESTS);
    if (!quests.isNull()) {
      Ghost.Quest.restoreFromBundle(quests);
      Wandmaker.Quest.restoreFromBundle(quests);
      Blacksmith.Quest.restoreFromBundle(quests);
      Imp.Quest.restoreFromBundle(quests);
    }
 else {
      Ghost.Quest.reset();
      Wandmaker.Quest.reset();
      Blacksmith.Quest.reset();
      Imp.Quest.reset();
    }
    Room.restoreRoomsFromBundle(bundle);
  }
  Bundle badges=bundle.getBundle(BADGES);
  if (!badges.isNull()) {
    Badges.loadLocal(badges);
  }
 else {
    Badges.reset();
  }
  String qsClass=bundle.getString(QUICKSLOT);
  if (qsClass != null) {
    try {
      quickslot=Class.forName(qsClass);
    }
 catch (    ClassNotFoundException e) {
    }
  }
 else {
    quickslot=null;
  }
  hero=null;
  hero=(Hero)bundle.get(HERO);
  gold=bundle.getInt(GOLD);
  depth=bundle.getInt(DEPTH);
  Statistics.restoreFromBundle(bundle);
  Journal.restoreFromBundle(bundle);
}",0.9800936768149884
164439,"public int absorb(int damage){
  if (level >= damage - damage / 2) {
    detach();
    return damage - level;
  }
 else {
    level-=damage - damage / 2;
    return damage / 2;
  }
}","public int absorb(int damage){
  if (level <= damage - damage / 2) {
    detach();
    return damage - level;
  }
 else {
    level-=damage - damage / 2;
    return damage / 2;
  }
}",0.9945054945054944
164440,"@Override public boolean doEquip(Hero hero){
  if (hero.belongings.misc1 != null && hero.belongings.misc2 != null) {
    GLog.w(""String_Node_Str"");
    return false;
  }
 else   if (hero.belongings.misc1.getClass() == this.getClass() || hero.belongings.misc2.getClass() == this.getClass()) {
    GLog.w(""String_Node_Str"");
    return false;
  }
 else {
    if (hero.belongings.misc1 == null) {
      hero.belongings.misc1=this;
    }
 else {
      hero.belongings.misc2=this;
    }
    detach(hero.belongings.backpack);
    activate(hero);
    hero.spendAndNext(TIME_TO_EQUIP);
    return true;
  }
}","@Override public boolean doEquip(Hero hero){
  if (hero.belongings.misc1 != null && hero.belongings.misc2 != null) {
    GLog.w(""String_Node_Str"");
    return false;
  }
 else   if ((hero.belongings.misc1 != null && hero.belongings.misc1.getClass() == this.getClass()) || (hero.belongings.misc2 != null && hero.belongings.misc2.getClass() == this.getClass())) {
    GLog.w(""String_Node_Str"");
    return false;
  }
 else {
    if (hero.belongings.misc1 == null) {
      hero.belongings.misc1=this;
    }
 else {
      hero.belongings.misc2=this;
    }
    detach(hero.belongings.backpack);
    activate(hero);
    hero.spendAndNext(TIME_TO_EQUIP);
    return true;
  }
}",0.9448818897637796
164441,"@Override public boolean act(){
  charge--;
  if (charge <= 0) {
    detach();
    GLog.w(""String_Node_Str"");
  }
  exp+=10 + ((Hero)target).lvl;
  if (exp >= level * 50 && level < 21) {
    exp-=level * 50;
    GLog.p(""String_Node_Str"");
    level++;
    chargeCap++;
  }
  QuickSlot.refresh();
  spend(TICK);
  return true;
}","@Override public boolean act(){
  charge--;
  if (charge <= 0) {
    detach();
    GLog.w(""String_Node_Str"");
  }
  exp+=10 + ((Hero)target).lvl;
  if (exp >= level * 50 && level < 16) {
    exp-=level * 50;
    GLog.p(""String_Node_Str"");
    level++;
    chargeCap++;
  }
  QuickSlot.refresh();
  spend(TICK);
  return true;
}",0.9969418960244648
164442,"@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(""String_Node_Str"",stealthed);
}","@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(""String_Node_Str"",stealthed);
  bundle.put(""String_Node_Str"",cooldown);
}",0.8581081081081081
164443,"@Override public void detach(){
  if (target.invisible > 0)   target.invisible--;
  stealthed=false;
  cooldown=12 - (level / 3);
  super.detach();
}","@Override public void detach(){
  if (target.invisible > 0)   target.invisible--;
  stealthed=false;
  cooldown=10 - (level / 4);
  QuickSlot.refresh();
  super.detach();
}",0.9158878504672896
164444,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  stealthed=bundle.getBoolean(""String_Node_Str"");
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  stealthed=bundle.getBoolean(""String_Node_Str"");
  cooldown=bundle.getInt(""String_Node_Str"");
}",0.8632218844984803
164445,"@Override public String desc(){
  return ""String_Node_Str"" + cooldown;
}","@Override public String desc(){
  return ""String_Node_Str"";
}",0.9172932330827068
164446,"@Override public String status(){
  return Utils.format(TXT_STATUS,charge,chargeCap);
}","@Override public String status(){
  if (cooldown == 0)   return Utils.format(TXT_CHARGE,charge,chargeCap);
 else   return Utils.format(TXT_CD,cooldown);
}",0.6804979253112033
164447,"public int proc(int damage,Char attacker){
  if (timer == 0) {
    charge+=damage / (4f - level * 0.1);
    if (charge > chargeCap) {
      charge=0;
      timer=5 + level;
    }
  }
  if (timer != 0) {
    int deflected=Random.NormalIntRange(0,(int)(damage * 0.66));
    damage-=deflected;
    attacker.damage(deflected,this);
    exp+=deflected;
    if (exp >= (level + 1) * 10 && level < levelCap) {
      exp-=(level + 1) * 10;
      level++;
      GLog.p(""String_Node_Str"");
    }
  }
  return damage;
}","public int proc(int damage,Char attacker){
  if (timer == 0) {
    charge+=damage * (0.5 + level * 0.025);
    if (charge > chargeCap) {
      charge=0;
      timer=5 + level;
      BuffIndicator.refreshHero();
    }
  }
  if (timer != 0) {
    int deflected=Random.NormalIntRange((int)(damage * 0.33),damage);
    damage-=deflected;
    attacker.damage(deflected,this);
    exp+=deflected;
    if (exp >= (level + 1) * 10 && level < levelCap) {
      exp-=(level + 1) * 10;
      level++;
      GLog.p(""String_Node_Str"");
    }
  }
  QuickSlot.refresh();
  return damage;
}",0.8632162661737524
164448,"@Override public boolean act(){
  if (timer > 0)   timer--;
 else   if (charge > 0)   charge--;
  return true;
}","@Override public boolean act(){
  if (timer > 0) {
    timer--;
    if (timer == 0)     BuffIndicator.refreshHero();
    QuickSlot.refresh();
  }
  spend(TICK);
  return true;
}",0.6782006920415224
164449,"public static void loadGame(String fileName,boolean fullLoad) throws IOException {
  Bundle bundle=gameBundle(fileName);
  Dungeon.level=null;
  Dungeon.depth=-1;
  if (fullLoad) {
    PathFinder.setMapSize(Level.WIDTH,Level.HEIGHT);
  }
  Scroll.restore(bundle);
  Potion.restore(bundle);
  Wand.restore(bundle);
  Ring.restore(bundle);
  potionOfStrength=bundle.getInt(POS);
  scrollsOfUpgrade=bundle.getInt(SOU);
  arcaneStyli=bundle.getInt(AS);
  dewVial=bundle.getBoolean(DV);
  transmutation=bundle.getInt(WT);
  if (fullLoad) {
    chapters=new HashSet<Integer>();
    int ids[]=bundle.getIntArray(CHAPTERS);
    if (ids != null) {
      for (      int id : ids) {
        chapters.add(id);
      }
    }
    Bundle quests=bundle.getBundle(QUESTS);
    if (!quests.isNull()) {
      Ghost.Quest.restoreFromBundle(quests);
      Wandmaker.Quest.restoreFromBundle(quests);
      Blacksmith.Quest.restoreFromBundle(quests);
      Imp.Quest.restoreFromBundle(quests);
    }
 else {
      Ghost.Quest.reset();
      Wandmaker.Quest.reset();
      Blacksmith.Quest.reset();
      Imp.Quest.reset();
    }
    Room.restoreRoomsFromBundle(bundle);
  }
  Bundle badges=bundle.getBundle(BADGES);
  if (!badges.isNull()) {
    Badges.loadLocal(badges);
  }
 else {
    Badges.reset();
  }
  String qsClass=bundle.getString(QUICKSLOT);
  if (qsClass != null) {
    try {
      quickslot=Class.forName(qsClass);
    }
 catch (    ClassNotFoundException e) {
    }
  }
 else {
    quickslot=null;
  }
  @SuppressWarnings(""String_Node_Str"") String version=bundle.getString(VERSION);
  hero=null;
  hero=(Hero)bundle.get(HERO);
  gold=bundle.getInt(GOLD);
  depth=bundle.getInt(DEPTH);
  Statistics.restoreFromBundle(bundle);
  Journal.restoreFromBundle(bundle);
}","public static void loadGame(String fileName,boolean fullLoad) throws IOException {
  Bundle bundle=gameBundle(fileName);
  Dungeon.level=null;
  Dungeon.depth=-1;
  if (fullLoad) {
    PathFinder.setMapSize(Level.WIDTH,Level.HEIGHT);
  }
  Scroll.restore(bundle);
  Potion.restore(bundle);
  Wand.restore(bundle);
  Ring.restore(bundle);
  potionOfStrength=bundle.getInt(POS);
  scrollsOfUpgrade=bundle.getInt(SOU);
  arcaneStyli=bundle.getInt(AS);
  dewVial=bundle.getBoolean(DV);
  transmutation=bundle.getInt(WT);
  if (fullLoad) {
    chapters=new HashSet<Integer>();
    int ids[]=bundle.getIntArray(CHAPTERS);
    if (ids != null) {
      for (      int id : ids) {
        chapters.add(id);
      }
    }
    Bundle quests=bundle.getBundle(QUESTS);
    if (!quests.isNull()) {
      Ghost.Quest.restoreFromBundle(quests);
      Wandmaker.Quest.restoreFromBundle(quests);
      Blacksmith.Quest.restoreFromBundle(quests);
      Imp.Quest.restoreFromBundle(quests);
    }
 else {
      Ghost.Quest.reset();
      Wandmaker.Quest.reset();
      Blacksmith.Quest.reset();
      Imp.Quest.reset();
    }
    Room.restoreRoomsFromBundle(bundle);
  }
  Bundle badges=bundle.getBundle(BADGES);
  if (!badges.isNull()) {
    Badges.loadLocal(badges);
  }
 else {
    Badges.reset();
  }
  String qsClass=bundle.getString(QUICKSLOT);
  if (qsClass != null) {
    try {
      quickslot=Class.forName(qsClass);
    }
 catch (    ClassNotFoundException e) {
    }
  }
 else {
    quickslot=null;
  }
  version=bundle.getInt(VERSION);
  hero=null;
  hero=(Hero)bundle.get(HERO);
  gold=bundle.getInt(GOLD);
  depth=bundle.getInt(DEPTH);
  Statistics.restoreFromBundle(bundle);
  Journal.restoreFromBundle(bundle);
}",0.9846953508518624
164450,"public static void saveGame(String fileName) throws IOException {
  try {
    Bundle bundle=new Bundle();
    bundle.put(VERSION,Game.version);
    bundle.put(HERO,hero);
    bundle.put(GOLD,gold);
    bundle.put(DEPTH,depth);
    bundle.put(POS,potionOfStrength);
    bundle.put(SOU,scrollsOfUpgrade);
    bundle.put(AS,arcaneStyli);
    bundle.put(DV,dewVial);
    bundle.put(WT,transmutation);
    int count=0;
    int ids[]=new int[chapters.size()];
    for (    Integer id : chapters) {
      ids[count++]=id;
    }
    bundle.put(CHAPTERS,ids);
    Bundle quests=new Bundle();
    Ghost.Quest.storeInBundle(quests);
    Wandmaker.Quest.storeInBundle(quests);
    Blacksmith.Quest.storeInBundle(quests);
    Imp.Quest.storeInBundle(quests);
    bundle.put(QUESTS,quests);
    Room.storeRoomsInBundle(bundle);
    Statistics.storeInBundle(bundle);
    Journal.storeInBundle(bundle);
    if (quickslot instanceof Class) {
      bundle.put(QUICKSLOT,((Class<?>)quickslot).getName());
    }
    Scroll.save(bundle);
    Potion.save(bundle);
    Wand.save(bundle);
    Ring.save(bundle);
    Bundle badges=new Bundle();
    Badges.saveLocal(badges);
    bundle.put(BADGES,badges);
    OutputStream output=Game.instance.openFileOutput(fileName,Game.MODE_PRIVATE);
    Bundle.write(bundle,output);
    output.close();
  }
 catch (  Exception e) {
    GamesInProgress.setUnknown(hero.heroClass);
  }
}","public static void saveGame(String fileName) throws IOException {
  try {
    Bundle bundle=new Bundle();
    bundle.put(VERSION,Game.versionCode);
    bundle.put(HERO,hero);
    bundle.put(GOLD,gold);
    bundle.put(DEPTH,depth);
    bundle.put(POS,potionOfStrength);
    bundle.put(SOU,scrollsOfUpgrade);
    bundle.put(AS,arcaneStyli);
    bundle.put(DV,dewVial);
    bundle.put(WT,transmutation);
    int count=0;
    int ids[]=new int[chapters.size()];
    for (    Integer id : chapters) {
      ids[count++]=id;
    }
    bundle.put(CHAPTERS,ids);
    Bundle quests=new Bundle();
    Ghost.Quest.storeInBundle(quests);
    Wandmaker.Quest.storeInBundle(quests);
    Blacksmith.Quest.storeInBundle(quests);
    Imp.Quest.storeInBundle(quests);
    bundle.put(QUESTS,quests);
    Room.storeRoomsInBundle(bundle);
    Statistics.storeInBundle(bundle);
    Journal.storeInBundle(bundle);
    if (quickslot instanceof Class) {
      bundle.put(QUICKSLOT,((Class<?>)quickslot).getName());
    }
    Scroll.save(bundle);
    Potion.save(bundle);
    Wand.save(bundle);
    Ring.save(bundle);
    Bundle badges=new Bundle();
    Badges.saveLocal(badges);
    bundle.put(BADGES,badges);
    OutputStream output=Game.instance.openFileOutput(fileName,Game.MODE_PRIVATE);
    Bundle.write(bundle,output);
    output.close();
  }
 catch (  Exception e) {
    GamesInProgress.setUnknown(hero.heroClass);
  }
}",0.9985714285714286
164451,"private void restore(Bundle bundle,String[] allLabels,Integer[] allImages){
  ArrayList<String> labelsLeft=new ArrayList<String>(Arrays.asList(allLabels));
  ArrayList<Integer> imagesLeft=new ArrayList<Integer>(Arrays.asList(allImages));
  for (int i=0; i < items.length; i++) {
    Class<? extends T> item=(Class<? extends T>)(items[i]);
    String itemName=item.toString();
    if (bundle.contains(itemName + PFX_LABEL)) {
      String label=bundle.getString(itemName + PFX_LABEL);
      labels.put(item,label);
      labelsLeft.remove(label);
      Integer image=bundle.getInt(itemName + PFX_IMAGE);
      images.put(item,image);
      imagesLeft.remove(image);
      if (bundle.getBoolean(itemName + PFX_KNOWN)) {
        known.add(item);
      }
    }
 else {
      int index=Random.Int(labelsLeft.size());
      labels.put(item,labelsLeft.get(index));
      labelsLeft.remove(index);
      images.put(item,imagesLeft.get(index));
      imagesLeft.remove(index);
    }
  }
}","private void restore(Bundle bundle,String[] allLabels,Integer[] allImages){
  ArrayList<String> labelsLeft=new ArrayList<String>(Arrays.asList(allLabels));
  ArrayList<Integer> imagesLeft=new ArrayList<Integer>(Arrays.asList(allImages));
  for (int i=0; i < items.length; i++) {
    Class<? extends T> item=(Class<? extends T>)(items[i]);
    String itemName=item.toString();
    if (bundle.contains(itemName + PFX_LABEL) && Dungeon.version > 3) {
      String label=bundle.getString(itemName + PFX_LABEL);
      labels.put(item,label);
      labelsLeft.remove(label);
      Integer image=bundle.getInt(itemName + PFX_IMAGE);
      images.put(item,image);
      imagesLeft.remove(image);
      if (bundle.getBoolean(itemName + PFX_KNOWN)) {
        known.add(item);
      }
    }
 else {
      int index=Random.Int(labelsLeft.size());
      labels.put(item,labelsLeft.get(index));
      labelsLeft.remove(index);
      images.put(item,imagesLeft.get(index));
      imagesLeft.remove(index);
      if (bundle.contains(itemName + PFX_KNOWN) && bundle.getBoolean(itemName + PFX_KNOWN)) {
        known.add(item);
      }
    }
  }
}",0.928842504743833
164452,"@Override public boolean act(){
  if (target.pos != pos || level <= 0) {
    detach();
  }
  if (count == 5) {
    if (level <= healCurr) {
      target.HP=Math.min(target.HT,target.HP + level);
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
      detach();
    }
 else {
      target.HP=Math.min(target.HT,target.HP + (int)(healCurr * .025 * target.HT));
      level-=(healCurr * .025 * target.HT);
      if (healCurr < 6)       healCurr++;
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
    }
    count=1;
  }
 else {
    count++;
  }
  spend(STEP);
  return true;
}","@Override public boolean act(){
  if (target.pos != pos) {
    detach();
  }
  if (count == 5) {
    if (level <= healCurr * .025 * target.HT) {
      target.HP=Math.min(target.HT,target.HP + level);
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
      detach();
    }
 else {
      target.HP=Math.min(target.HT,target.HP + (int)(healCurr * .025 * target.HT));
      level-=(healCurr * .025 * target.HT);
      if (healCurr < 6)       healCurr++;
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
    }
    count=1;
  }
 else {
    count++;
  }
  if (level <= 0)   detach();
  spend(STEP);
  return true;
}",0.8610007942811755
164453,"@Override public boolean act(){
  if (placed) {
    if (target instanceof Hero)     if (target.HP == target.HT) {
      GLog.i(""String_Node_Str"");
      detach();
    }
 else {
      GLog.i(""String_Node_Str"");
      Buff.affect(target,MagicalSleep.class);
      detach();
    }
 else     Buff.affect(target,MagicalSleep.class);
    return true;
  }
 else {
    placed=true;
    spend(STEP);
    return true;
  }
}","@Override public boolean act(){
  if (placed) {
    if (target instanceof Hero)     if (target.HP == target.HT) {
      GLog.i(""String_Node_Str"");
    }
 else {
      GLog.i(""String_Node_Str"");
      Buff.affect(target,MagicalSleep.class);
    }
 else     Buff.affect(target,MagicalSleep.class);
    detach();
    return true;
  }
 else {
    placed=true;
    spend(STEP);
    return true;
  }
}",0.943069306930693
164454,"@Override public boolean act(){
  if (target.isAlive()) {
    if (target.HP < target.HT && !((Hero)target).isStarving()) {
      target.HP+=1;
    }
    ChaliceOfBlood.chaliceRegen regenBuff=Dungeon.hero.buff(ChaliceOfBlood.chaliceRegen.class);
    spend(REGENERATION_DELAY - regenBuff.level());
  }
 else {
    diactivate();
  }
  return true;
}","@Override public boolean act(){
  if (target.isAlive()) {
    if (target.HP < target.HT && !((Hero)target).isStarving()) {
      target.HP+=1;
    }
    ChaliceOfBlood.chaliceRegen regenBuff=Dungeon.hero.buff(ChaliceOfBlood.chaliceRegen.class);
    if (regenBuff != null)     spend(REGENERATION_DELAY - regenBuff.level());
 else     spend(REGENERATION_DELAY);
  }
 else {
    diactivate();
  }
  return true;
}",0.9153439153439152
164455,"@Override public boolean act(){
  if (charge < chargeCap) {
    partialCharge+=(1 / (200 - level));
    if (partialCharge >= 1) {
      charge++;
      partialCharge-=1;
      if (charge == chargeCap) {
        GLog.p(""String_Node_Str"");
        partialCharge=0;
      }
    }
  }
 else   partialCharge=0;
  spend(TICK);
  return true;
}","@Override public boolean act(){
  if (charge < chargeCap) {
    partialCharge+=(1f / (200 - level));
    if (partialCharge >= 1) {
      charge++;
      partialCharge-=1;
      if (charge == chargeCap) {
        GLog.p(""String_Node_Str"");
        partialCharge=0;
      }
    }
  }
 else   partialCharge=0;
  spend(TICK);
  return true;
}",0.9985185185185184
164456,"@Override public void onSelect(Item item){
  if (item != null && item instanceof Food) {
    if (item instanceof Blandfruit && ((Blandfruit)item).potionAttrib == null) {
      GLog.w(""String_Node_Str"");
    }
 else {
      curItem.level+=((Food)item).hornValue;
      if (curItem.level >= 150) {
        curItem.level=150;
        GLog.p(""String_Node_Str"");
      }
 else       GLog.p(""String_Node_Str"");
      item.detach(Dungeon.hero.belongings.backpack);
    }
  }
}","@Override public void onSelect(Item item){
  if (item != null && item instanceof Food) {
    if (item instanceof Blandfruit && ((Blandfruit)item).potionAttrib == null) {
      GLog.w(""String_Node_Str"");
    }
 else {
      Hero hero=Dungeon.hero;
      hero.sprite.operate(hero.pos);
      hero.busy();
      hero.spend(TIME_TO_EAT);
      curItem.level+=((Food)item).hornValue;
      if (curItem.level >= 150) {
        curItem.level=150;
        GLog.p(""String_Node_Str"");
      }
 else       GLog.p(""String_Node_Str"");
      item.detach(Dungeon.hero.belongings.backpack);
    }
  }
}",0.8890995260663507
164457,"public static void process(){
  if (current != null) {
    return;
  }
  boolean doNext;
  do {
    now=Float.MAX_VALUE;
    current=null;
    Arrays.fill(chars,null);
    for (    Actor actor : all) {
      if (actor.time < now) {
        now=actor.time;
        current=actor;
      }
      if (actor instanceof Char) {
        Char ch=(Char)actor;
        chars[ch.pos]=ch;
      }
    }
    if (current != null) {
      doNext=current.act();
      if (doNext && !Dungeon.hero.isAlive()) {
        doNext=false;
        current=null;
      }
    }
 else {
      doNext=false;
    }
  }
 while (doNext);
}","public static void process(){
  if (current != null) {
    return;
  }
  boolean doNext;
  do {
    now=Float.MAX_VALUE;
    current=null;
    Arrays.fill(chars,null);
    for (    Actor actor : all) {
      if (actor.time < now || (actor instanceof Hero && actor.time == now)) {
        now=actor.time;
        current=actor;
      }
      if (actor instanceof Char) {
        Char ch=(Char)actor;
        chars[ch.pos]=ch;
      }
    }
    if (current != null) {
      doNext=current.act();
      if (doNext && !Dungeon.hero.isAlive()) {
        doNext=false;
        current=null;
      }
    }
 else {
      doNext=false;
    }
  }
 while (doNext);
}",0.5911251980982567
164458,"public void add(Buff buff){
  buffs.add(buff);
  Actor.add(buff);
  if (sprite != null) {
    if (buff instanceof Poison) {
      CellEmitter.center(pos).burst(PoisonParticle.SPLASH,5);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Amok) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Slow) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof MindVision) {
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Paralysis) {
      sprite.add(CharSprite.State.PARALYSED);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Terror) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Roots) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Cripple) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Bleeding) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Sleep || buff instanceof MagicalSleep) {
      sprite.idle();
    }
 else     if (buff instanceof Burning) {
      sprite.add(CharSprite.State.BURNING);
    }
 else     if (buff instanceof Levitation) {
      sprite.add(CharSprite.State.LEVITATING);
    }
 else     if (buff instanceof Frost) {
      sprite.add(CharSprite.State.FROZEN);
    }
 else     if (buff instanceof Invisibility) {
      if (!(buff instanceof Shadows)) {
        sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      }
      sprite.add(CharSprite.State.INVISIBLE);
    }
  }
}","public void add(Buff buff){
  buffs.add(buff);
  Actor.add(buff);
  if (sprite != null) {
    if (buff instanceof Poison) {
      CellEmitter.center(pos).burst(PoisonParticle.SPLASH,5);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Amok) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Slow) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof MindVision) {
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Paralysis) {
      sprite.add(CharSprite.State.PARALYSED);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Terror) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Roots) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Cripple) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Bleeding) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Sleep || buff instanceof MagicalSleep) {
      sprite.idle();
    }
 else     if (buff instanceof Burning) {
      sprite.add(CharSprite.State.BURNING);
    }
 else     if (buff instanceof Levitation) {
      sprite.add(CharSprite.State.LEVITATING);
    }
 else     if (buff instanceof Frost) {
      sprite.add(CharSprite.State.FROZEN);
    }
 else     if (buff instanceof Invisibility || buff instanceof CloakOfShadows.cloakStealth) {
      if (!(buff instanceof Shadows)) {
        sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      }
      sprite.add(CharSprite.State.INVISIBLE);
    }
  }
}",0.9874028410613775
164459,"public void updateSpriteState(){
  for (  Buff buff : buffs) {
    if (buff instanceof Burning) {
      sprite.add(CharSprite.State.BURNING);
    }
 else     if (buff instanceof Levitation) {
      sprite.add(CharSprite.State.LEVITATING);
    }
 else     if (buff instanceof Invisibility) {
      sprite.add(CharSprite.State.INVISIBLE);
    }
 else     if (buff instanceof Paralysis) {
      sprite.add(CharSprite.State.PARALYSED);
    }
 else     if (buff instanceof Frost) {
      sprite.add(CharSprite.State.FROZEN);
    }
 else     if (buff instanceof Light) {
      sprite.add(CharSprite.State.ILLUMINATED);
    }
  }
}","public void updateSpriteState(){
  for (  Buff buff : buffs) {
    if (buff instanceof Burning) {
      sprite.add(CharSprite.State.BURNING);
    }
 else     if (buff instanceof Levitation) {
      sprite.add(CharSprite.State.LEVITATING);
    }
 else     if (buff instanceof Invisibility || buff instanceof CloakOfShadows.cloakStealth) {
      sprite.add(CharSprite.State.INVISIBLE);
    }
 else     if (buff instanceof Paralysis) {
      sprite.add(CharSprite.State.PARALYSED);
    }
 else     if (buff instanceof Frost) {
      sprite.add(CharSprite.State.FROZEN);
    }
 else     if (buff instanceof Light) {
      sprite.add(CharSprite.State.ILLUMINATED);
    }
  }
}",0.9637065637065636
164460,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  stealthed=bundle.getBoolean(""String_Node_Str"");
  if (stealthed) {
    Hero hero=Dungeon.hero;
    activeBuff=activeBuff();
    activeBuff.attachTo(hero);
    if (hero.sprite.parent != null) {
      hero.sprite.parent.add(new AlphaTweener(hero.sprite,0.4f,0.4f));
    }
 else {
      hero.sprite.alpha(0.4f);
    }
  }
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  stealthed=bundle.getBoolean(""String_Node_Str"");
}",0.5117117117117117
164461,"@Override public void detach(){
  target.invisible--;
  super.detach();
}","@Override public void detach(){
  if (target.invisible > 0)   target.invisible--;
  super.detach();
}",0.8390804597701149
164462,"@Override public boolean act(){
  charge--;
  if (charge <= 0) {
    detach();
    GLog.w(""String_Node_Str"");
  }
 else   if (charge == 2)   GLog.w(""String_Node_Str"");
  exp+=10 + ((Hero)target).lvl;
  if (exp >= level * 50 && level < 26) {
    exp-=level * 50;
    GLog.p(""String_Node_Str"");
    level++;
    chargeCap++;
  }
  spend(TICK);
  return true;
}","@Override public boolean act(){
  charge--;
  if (charge <= 0) {
    detach();
    GLog.w(""String_Node_Str"");
  }
  exp+=10 + ((Hero)target).lvl;
  if (exp >= level * 50 && level < 26) {
    exp-=level * 50;
    GLog.p(""String_Node_Str"");
    level++;
    chargeCap++;
  }
  spend(TICK);
  return true;
}",0.918429003021148
164463,"@Override public void detach(){
  target.invisible--;
  stealthed=false;
  cooldown=18 - (level / 2);
  super.detach();
}","@Override public void detach(){
  if (target.invisible > 0)   target.invisible--;
  stealthed=false;
  cooldown=18 - (level / 2);
  super.detach();
}",0.8962962962962963
164464,"@Override public boolean attachTo(Char target){
  if (super.attachTo(target)) {
    target.invisible++;
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean attachTo(Char target){
  if (super.attachTo(target)) {
    target.invisible++;
    spend(TICK);
    return true;
  }
 else {
    return false;
  }
}",0.9483282674772036
164465,"@Override public void apply(Hero hero){
  setKnown();
  hero.STR++;
  hero.HT+=5;
  hero.HP+=5;
  hero.sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
  GLog.p(""String_Node_Str"");
}","@Override public void apply(Hero hero){
  setKnown();
  hero.STR++;
  hero.HT+=5;
  hero.HP+=5;
  hero.sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
  GLog.p(""String_Node_Str"");
  Badges.validateStrengthAttained();
}",0.9116945107398567
164466,"@Override public void storeInBundle(Bundle bundle){
}","@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(NAME,name);
}",0.654320987654321
164467,"@Override public void execute(Hero hero,String action){
  if (potionAttrib == null) {
    if (action.equals(AC_EAT)) {
      detach(hero.belongings.backpack);
      ((Hunger)hero.buff(Hunger.class)).satisfy(energy);
      GLog.i(message);
      hero.sprite.operate(hero.pos);
      hero.busy();
      SpellSprite.show(hero,SpellSprite.FOOD);
      Sample.INSTANCE.play(Assets.SND_EAT);
      hero.spend(1f);
      Statistics.foodEaten++;
      Badges.validateFoodEaten();
    }
 else     super.execute(hero,action);
  }
 else   if (action.equals(AC_EAT)) {
    ((Hunger)hero.buff(Hunger.class)).satisfy(Hunger.HUNGRY);
    detach(hero.belongings.backpack);
    hero.spend(1f);
    hero.busy();
    if (potionAttrib instanceof PotionOfFrost) {
      GLog.i(""String_Node_Str"");
switch (Random.Int(5)) {
case 0:
        GLog.i(""String_Node_Str"");
      Buff.affect(hero,Invisibility.class,Invisibility.DURATION);
    break;
case 1:
  GLog.i(""String_Node_Str"");
Buff.affect(hero,Barkskin.class).level(hero.HT / 4);
break;
case 2:
GLog.i(""String_Node_Str"");
Buff.detach(hero,Poison.class);
Buff.detach(hero,Cripple.class);
Buff.detach(hero,Weakness.class);
Buff.detach(hero,Bleeding.class);
break;
case 3:
GLog.i(""String_Node_Str"");
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + hero.HT / 4,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
}
}
 else potionAttrib.apply(hero);
Sample.INSTANCE.play(Assets.SND_EAT);
hero.sprite.operate(hero.pos);
switch (hero.heroClass) {
case WARRIOR:
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + 5,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
case MAGE:
hero.belongings.charge(false);
ScrollOfRecharging.charge(hero);
break;
case ROGUE:
case HUNTRESS:
break;
}
}
 else if (action.equals(AC_THROW)) {
if (potionAttrib instanceof PotionOfLiquidFlame || potionAttrib instanceof PotionOfToxicGas || potionAttrib instanceof PotionOfParalyticGas|| potionAttrib instanceof PotionOfFrost) {
potionAttrib.execute(hero,action);
}
 else {
super.execute(hero,action);
}
}
 else {
super.execute(hero,action);
}
}","@Override public void execute(Hero hero,String action){
  if (action.equals(AC_EAT)) {
    if (potionAttrib == null) {
      detach(hero.belongings.backpack);
      ((Hunger)hero.buff(Hunger.class)).satisfy(energy);
      GLog.i(message);
      hero.sprite.operate(hero.pos);
      hero.busy();
      SpellSprite.show(hero,SpellSprite.FOOD);
      Sample.INSTANCE.play(Assets.SND_EAT);
      hero.spend(1f);
      Statistics.foodEaten++;
      Badges.validateFoodEaten();
    }
 else {
      ((Hunger)hero.buff(Hunger.class)).satisfy(Hunger.HUNGRY);
      detach(hero.belongings.backpack);
      hero.spend(1f);
      hero.busy();
      if (potionAttrib instanceof PotionOfFrost) {
        GLog.i(""String_Node_Str"");
switch (Random.Int(5)) {
case 0:
          GLog.i(""String_Node_Str"");
        Buff.affect(hero,Invisibility.class,Invisibility.DURATION);
      break;
case 1:
    GLog.i(""String_Node_Str"");
  Buff.affect(hero,Barkskin.class).level(hero.HT / 4);
break;
case 2:
GLog.i(""String_Node_Str"");
Buff.detach(hero,Poison.class);
Buff.detach(hero,Cripple.class);
Buff.detach(hero,Weakness.class);
Buff.detach(hero,Bleeding.class);
break;
case 3:
GLog.i(""String_Node_Str"");
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + hero.HT / 4,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
}
}
 else potionAttrib.apply(hero);
Sample.INSTANCE.play(Assets.SND_EAT);
hero.sprite.operate(hero.pos);
switch (hero.heroClass) {
case WARRIOR:
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + 5,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
case MAGE:
hero.belongings.charge(false);
ScrollOfRecharging.charge(hero);
break;
case ROGUE:
case HUNTRESS:
break;
}
}
}
 else {
super.execute(hero,action);
}
}",0.875968992248062
164468,"public void add(Buff buff){
  buffs.add(buff);
  Actor.add(buff);
  if (sprite != null) {
    if (buff instanceof Poison) {
      CellEmitter.center(pos).burst(PoisonParticle.SPLASH,5);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Amok) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Slow) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof MindVision) {
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Paralysis) {
      sprite.add(CharSprite.State.PARALYSED);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Terror) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Roots) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Cripple) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Bleeding) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Sleep) {
      sprite.idle();
    }
 else     if (buff instanceof Burning) {
      sprite.add(CharSprite.State.BURNING);
    }
 else     if (buff instanceof Levitation) {
      sprite.add(CharSprite.State.LEVITATING);
    }
 else     if (buff instanceof Frost) {
      sprite.add(CharSprite.State.FROZEN);
    }
 else     if (buff instanceof Invisibility) {
      if (!(buff instanceof Shadows)) {
        sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      }
      sprite.add(CharSprite.State.INVISIBLE);
    }
  }
}","public void add(Buff buff){
  buffs.add(buff);
  Actor.add(buff);
  if (sprite != null) {
    if (buff instanceof Poison) {
      CellEmitter.center(pos).burst(PoisonParticle.SPLASH,5);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Amok) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Slow) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof MindVision) {
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Paralysis) {
      sprite.add(CharSprite.State.PARALYSED);
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Terror) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Roots) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Cripple) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Bleeding) {
      sprite.showStatus(CharSprite.NEGATIVE,""String_Node_Str"");
    }
 else     if (buff instanceof Sleep || buff instanceof MagicalSleep) {
      sprite.idle();
    }
 else     if (buff instanceof Burning) {
      sprite.add(CharSprite.State.BURNING);
    }
 else     if (buff instanceof Levitation) {
      sprite.add(CharSprite.State.LEVITATING);
    }
 else     if (buff instanceof Frost) {
      sprite.add(CharSprite.State.FROZEN);
    }
 else     if (buff instanceof Invisibility) {
      if (!(buff instanceof Shadows)) {
        sprite.showStatus(CharSprite.POSITIVE,""String_Node_Str"");
      }
      sprite.add(CharSprite.State.INVISIBLE);
    }
  }
}",0.991237677984666
164469,"@Override public void die(Object cause){
  curAction=null;
  Ankh ankh=(Ankh)belongings.getItem(Ankh.class);
  if (ankh != null && ankh.isBlessed()) {
    this.HP=HT;
    new Flare(8,32).color(0xFFFF66,true).show(sprite,2f);
    ankh.detach(belongings.backpack);
    Sample.INSTANCE.play(Assets.SND_TELEPORT);
    GLog.w(ankh.TXT_REVIVE);
    return;
  }
  Actor.fixTime();
  super.die(cause);
  if (ankh == null) {
    reallyDie(cause);
  }
 else {
    Dungeon.deleteGame(Dungeon.hero.heroClass,false);
    GameScene.show(new WndResurrect(ankh,cause));
  }
}","@Override public void die(Object cause){
  curAction=null;
  Ankh ankh=(Ankh)belongings.getItem(Ankh.class);
  if (ankh != null && ankh.isBlessed()) {
    this.HP=HT;
    new Flare(8,32).color(0xFFFF66,true).show(sprite,2f);
    CellEmitter.get(this.pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
    ankh.detach(belongings.backpack);
    Sample.INSTANCE.play(Assets.SND_TELEPORT);
    GLog.w(ankh.TXT_REVIVE);
    return;
  }
  Actor.fixTime();
  super.die(cause);
  if (ankh == null) {
    reallyDie(cause);
  }
 else {
    Dungeon.deleteGame(Dungeon.hero.heroClass,false);
    GameScene.show(new WndResurrect(ankh,cause));
  }
}",0.9394957983193276
164470,"@Override public void damage(int dmg,Object src){
  restoreHealth=false;
  if (this.buff(Drowsy.class) != null) {
    Buff.detach(this,Drowsy.class);
    GLog.i(""String_Node_Str"");
  }
  super.damage(dmg,src);
  if (subClass == HeroSubClass.BERSERKER && 0 < HP && HP <= HT * Fury.LEVEL) {
    Buff.affect(this,Fury.class);
  }
}","@Override public void damage(int dmg,Object src){
  restoreHealth=false;
  if (this.buff(Drowsy.class) != null) {
    Buff.detach(this,Drowsy.class);
    GLog.w(""String_Node_Str"");
  }
  super.damage(dmg,src);
  if (subClass == HeroSubClass.BERSERKER && 0 < HP && HP <= HT * Fury.LEVEL) {
    Buff.affect(this,Fury.class);
  }
}",0.9969512195121952
164471,"@Override public void add(Buff buff){
  super.add(buff);
  if (buff instanceof Amok) {
    if (sprite != null) {
      sprite.showStatus(CharSprite.NEGATIVE,TXT_RAGE);
    }
    state=State.HUNTING;
  }
 else   if (buff instanceof Terror) {
    state=State.FLEEING;
  }
 else   if (buff instanceof Sleep || buff instanceof MagicalSleep) {
    if (sprite != null) {
      this.sprite().showSleep();
    }
    state=State.SLEEPING;
    this.sprite().showSleep();
    postpone(Sleep.SWS);
  }
}","@Override public void add(Buff buff){
  super.add(buff);
  if (buff instanceof Amok) {
    if (sprite != null) {
      sprite.showStatus(CharSprite.NEGATIVE,TXT_RAGE);
    }
    state=State.HUNTING;
  }
 else   if (buff instanceof Terror) {
    state=State.FLEEING;
  }
 else   if (buff instanceof Sleep || buff instanceof MagicalSleep) {
    state=State.SLEEPING;
    this.sprite().showSleep();
    postpone(Sleep.SWS);
  }
}",0.9291166848418756
164472,"@Override public void execute(final Hero hero,String action){
  if (action.equals(AC_BLESS)) {
    DewVial vial=hero.belongings.getItem(DewVial.class);
    if (vial != null) {
      blessed=true;
      vial.empty();
      GLog.p(TXT_BLESS);
      hero.spend(1f);
      hero.busy();
      Sample.INSTANCE.play(Assets.SND_DRINK);
      hero.sprite.operate(hero.pos);
    }
  }
 else {
    super.execute(hero,action);
  }
}","@Override public void execute(final Hero hero,String action){
  if (action.equals(AC_BLESS)) {
    DewVial vial=hero.belongings.getItem(DewVial.class);
    if (vial != null) {
      blessed=true;
      vial.empty();
      GLog.p(TXT_BLESS);
      hero.spend(1f);
      hero.busy();
      Sample.INSTANCE.play(Assets.SND_DRINK);
      CellEmitter.get(hero.pos).start(Speck.factory(Speck.LIGHT),0.2f,3);
      hero.sprite.operate(hero.pos);
    }
  }
 else {
    super.execute(hero,action);
  }
}",0.9190371991247264
164473,"public Item cook(Seed seed){
  Class<? extends Item> plant=seed.alchemyClass;
  try {
    potionAttrib=(Potion)plant.newInstance();
  }
 catch (  Exception e) {
    return null;
  }
  potionAttrib.image=ItemSpriteSheet.BLANDFRUIT;
  if (potionAttrib instanceof PotionOfHealing) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0x2EE62E);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfStrength) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xCC0022);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfParalyticGas) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0x67583D);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfInvisibility) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xE5D273);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfLiquidFlame) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xFF7F00);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfFrost) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0x66B3FF);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfMindVision) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xB8E6CF);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfToxicGas) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xA15CE5);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
  return this;
}","public Item cook(Seed seed){
  Class<? extends Item> plant=seed.alchemyClass;
  try {
    potionAttrib=(Potion)plant.newInstance();
    potionAttrib.ownedByFruit=true;
  }
 catch (  Exception e) {
    return null;
  }
  potionAttrib.image=ItemSpriteSheet.BLANDFRUIT;
  if (potionAttrib instanceof PotionOfHealing) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0x2EE62E);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfStrength) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xCC0022);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfParalyticGas) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0x67583D);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfInvisibility) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xE5D273);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfLiquidFlame) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xFF7F00);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfFrost) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0x66B3FF);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfMindVision) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xB8E6CF);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
 else   if (potionAttrib instanceof PotionOfToxicGas) {
    name=""String_Node_Str"";
    potionGlow=new ItemSprite.Glowing(0xA15CE5);
    info=""String_Node_Str"" + ""String_Node_Str"";
  }
  return this;
}",0.9897025171624714
164474,"@Override public void execute(Hero hero,String action){
  if (potionAttrib == null) {
    if (action.equals(AC_EAT)) {
      detach(hero.belongings.backpack);
      ((Hunger)hero.buff(Hunger.class)).satisfy(energy);
      GLog.i(message);
      hero.sprite.operate(hero.pos);
      hero.busy();
      SpellSprite.show(hero,SpellSprite.FOOD);
      Sample.INSTANCE.play(Assets.SND_EAT);
      hero.spend(1f);
      Statistics.foodEaten++;
      Badges.validateFoodEaten();
    }
 else     super.execute(hero,action);
  }
 else   if (action.equals(AC_EAT)) {
    ((Hunger)hero.buff(Hunger.class)).satisfy(Hunger.HUNGRY);
    detach(hero.belongings.backpack);
    hero.spend(1f);
    hero.busy();
    if (potionAttrib instanceof PotionOfFrost) {
      GLog.i(""String_Node_Str"");
switch (Random.Int(5)) {
case 0:
        GLog.i(""String_Node_Str"");
      Buff.affect(hero,Invisibility.class,Invisibility.DURATION);
    break;
case 1:
  GLog.i(""String_Node_Str"");
Buff.affect(hero,Barkskin.class).level(hero.HT / 4);
break;
case 2:
GLog.i(""String_Node_Str"");
Buff.detach(hero,Poison.class);
Buff.detach(hero,Cripple.class);
Buff.detach(hero,Weakness.class);
Buff.detach(hero,Bleeding.class);
break;
case 3:
GLog.i(""String_Node_Str"");
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + hero.HT / 4,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
}
}
 else potionAttrib.apply(hero);
Sample.INSTANCE.play(Assets.SND_EAT);
hero.sprite.operate(hero.pos);
switch (hero.heroClass) {
case WARRIOR:
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + 5,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
case MAGE:
hero.belongings.charge(false);
ScrollOfRecharging.charge(hero);
break;
case ROGUE:
case HUNTRESS:
break;
}
}
 else if (action.equals(AC_THROW)) {
if (potionAttrib instanceof PotionOfLiquidFlame || potionAttrib instanceof PotionOfToxicGas || potionAttrib instanceof PotionOfParalyticGas|| potionAttrib instanceof PotionOfFrost) {
potionAttrib.execute(hero,action);
detach(hero.belongings.backpack);
}
 else {
super.execute(hero,action);
}
}
 else {
super.execute(hero,action);
}
}","@Override public void execute(Hero hero,String action){
  if (potionAttrib == null) {
    if (action.equals(AC_EAT)) {
      detach(hero.belongings.backpack);
      ((Hunger)hero.buff(Hunger.class)).satisfy(energy);
      GLog.i(message);
      hero.sprite.operate(hero.pos);
      hero.busy();
      SpellSprite.show(hero,SpellSprite.FOOD);
      Sample.INSTANCE.play(Assets.SND_EAT);
      hero.spend(1f);
      Statistics.foodEaten++;
      Badges.validateFoodEaten();
    }
 else     super.execute(hero,action);
  }
 else   if (action.equals(AC_EAT)) {
    ((Hunger)hero.buff(Hunger.class)).satisfy(Hunger.HUNGRY);
    detach(hero.belongings.backpack);
    hero.spend(1f);
    hero.busy();
    if (potionAttrib instanceof PotionOfFrost) {
      GLog.i(""String_Node_Str"");
switch (Random.Int(5)) {
case 0:
        GLog.i(""String_Node_Str"");
      Buff.affect(hero,Invisibility.class,Invisibility.DURATION);
    break;
case 1:
  GLog.i(""String_Node_Str"");
Buff.affect(hero,Barkskin.class).level(hero.HT / 4);
break;
case 2:
GLog.i(""String_Node_Str"");
Buff.detach(hero,Poison.class);
Buff.detach(hero,Cripple.class);
Buff.detach(hero,Weakness.class);
Buff.detach(hero,Bleeding.class);
break;
case 3:
GLog.i(""String_Node_Str"");
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + hero.HT / 4,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
}
}
 else potionAttrib.apply(hero);
Sample.INSTANCE.play(Assets.SND_EAT);
hero.sprite.operate(hero.pos);
switch (hero.heroClass) {
case WARRIOR:
if (hero.HP < hero.HT) {
hero.HP=Math.min(hero.HP + 5,hero.HT);
hero.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
}
break;
case MAGE:
hero.belongings.charge(false);
ScrollOfRecharging.charge(hero);
break;
case ROGUE:
case HUNTRESS:
break;
}
}
 else if (action.equals(AC_THROW)) {
if (potionAttrib instanceof PotionOfLiquidFlame || potionAttrib instanceof PotionOfToxicGas || potionAttrib instanceof PotionOfParalyticGas|| potionAttrib instanceof PotionOfFrost) {
potionAttrib.execute(hero,action);
}
 else {
super.execute(hero,action);
}
}
 else {
super.execute(hero,action);
}
}",0.9919962335216572
164475,"public void setKnown(){
  if (!isKnown()) {
    handler.know(this);
  }
  Badges.validateAllPotionsIdentified();
}","public void setKnown(){
  if (!ownedByFruit) {
    if (!isKnown()) {
      handler.know(this);
    }
    Badges.validateAllPotionsIdentified();
  }
}",0.8669201520912547
164476,"@Override protected void doRead(){
  curUser.sprite.centerEmitter().start(Speck.factory(Speck.NOTE),0.3f,5);
  Sample.INSTANCE.play(Assets.SND_LULLABY);
  Invisibility.dispel();
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
    if (Level.fieldOfView[mob.pos]) {
      Buff.affect(mob,Drowsy.class);
    }
  }
  Buff.affect(curUser,Drowsy.class);
  GLog.i(""String_Node_Str"");
  setKnown();
  curUser.spendAndNext(TIME_TO_READ);
}","@Override protected void doRead(){
  curUser.sprite.centerEmitter().start(Speck.factory(Speck.NOTE),0.3f,5);
  Sample.INSTANCE.play(Assets.SND_LULLABY);
  Invisibility.dispel();
  for (  Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
    if (Level.fieldOfView[mob.pos]) {
      Buff.affect(mob,Drowsy.class);
      mob.sprite.centerEmitter().start(Speck.factory(Speck.NOTE),0.3f,5);
    }
  }
  Buff.affect(curUser,Drowsy.class);
  GLog.i(""String_Node_Str"");
  setKnown();
  curUser.spendAndNext(TIME_TO_READ);
}",0.9229166666666668
164477,"@Override public boolean act(){
  if (target.pos != pos || healTot <= 0) {
    detach();
  }
  if (count == 5) {
    if (healTot <= healCurr) {
      target.HP=Math.min(target.HT,target.HP + healTot);
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
      detach();
    }
 else {
      target.HP=Math.min(target.HT,target.HP + healCurr);
      healTot-=healCurr;
      healCurr=Math.min(healCurr + healCurr - 1,(int)(target.HT * 0.15));
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
    }
    count=1;
  }
 else {
    count++;
  }
  spend(STEP);
  return true;
}","@Override public boolean act(){
  if (target.pos != pos || level <= 0) {
    detach();
  }
  if (count == 5) {
    if (level <= healCurr) {
      target.HP=Math.min(target.HT,target.HP + level);
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
      detach();
    }
 else {
      target.HP=Math.min(target.HT,target.HP + (int)(healCurr * .025 * target.HT));
      level-=(healCurr * .025 * target.HT);
      if (healCurr < 6)       healCurr++;
      target.sprite.emitter().burst(Speck.factory(Speck.HEALING),1);
    }
    count=1;
  }
 else {
    count++;
  }
  spend(STEP);
  return true;
}",0.8414133114215283
164478,"@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(POS,pos);
}","@Override public void storeInBundle(Bundle bundle){
  super.storeInBundle(bundle);
  bundle.put(POS,pos);
  bundle.put(HEALCURR,healCurr);
  bundle.put(COUNT,count);
  bundle.put(LEVEL,level);
}",0.7109634551495017
164479,"@Override public void activate(Char ch){
  super.activate(ch);
  if (ch != null) {
    Buff.affect(ch,Health.class);
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.get(pos).start(ShaftParticle.FACTORY,0.2f,3);
  }
}","@Override public void activate(Char ch){
  super.activate(ch);
  if (ch != null) {
    Buff.affect(ch,Health.class).level=ch.HT;
  }
  if (Dungeon.visible[pos]) {
    CellEmitter.get(pos).start(ShaftParticle.FACTORY,0.2f,3);
  }
}",0.9732142857142856
164480,"@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  pos=bundle.getInt(POS);
}","@Override public void restoreFromBundle(Bundle bundle){
  super.restoreFromBundle(bundle);
  pos=bundle.getInt(POS);
  if (!bundle.contains(LEVEL)) {
    return;
  }
  healCurr=bundle.getInt(HEALCURR);
  count=bundle.getInt(COUNT);
  level=bundle.getInt(LEVEL);
}",0.6194225721784777
164481,"@Override public String toString(){
  return Utils.format(""String_Node_Str"",healTot);
}","@Override public String toString(){
  return Utils.format(""String_Node_Str"",level);
}",0.9534883720930232
164482,"@Override public boolean attachTo(Char target){
  pos=target.pos;
  healTot=target.HT;
  return super.attachTo(target);
}","@Override public boolean attachTo(Char target){
  pos=target.pos;
  return super.attachTo(target);
}",0.9049773755656108
164483,"public int absorb(int damage){
  healTot-=damage;
  if (healTot <= 0)   detach();
  return damage;
}","public int absorb(int damage){
  level-=damage;
  if (level <= 0)   detach();
  return damage;
}",0.9183673469387756
164484,"private void fetchProfile(String username){
  ApiClient.getService().getProfile(username).enqueue(new Callback<UserResponse>(){
    @Override public void onResponse(    Response<UserResponse> response,    Retrofit retrofit){
      if (isDestroyed() || isFinishing())       return;
      if (response != null && response.body() != null) {
        UserResponse userResponse=response.body();
        if (mSelectedUser != null) {
          mSelectedUser.copy(userResponse.data);
        }
 else {
          mSelectedUser=userResponse.data;
        }
        mSelectedUser.setLastSeen(System.currentTimeMillis());
        if (mSelectedUser.isSelf(app) && !TextUtils.isEmpty(mSelectedUser.getAccessToken())) {
          SqlHelper.getInstance(getApplicationContext()).updateUserInfo(mSelectedUser);
        }
 else {
          SqlHelper.getInstance(getApplicationContext()).insertProfile(mSelectedUser);
        }
        mAdapter=new ProfilePager(getApplicationContext(),getFragmentManager(),mSelectedUser);
        mPager.setAdapter(mAdapter);
        mSlidingTabs.setupWithViewPager(mPager);
        mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
        supportInvalidateOptionsMenu();
      }
 else {
        ViewUtils.setErrorText(mMultiView,R.id.errorMessage,R.string.error_generic);
        mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
      }
    }
    @Override public void onFailure(    Throwable t){
      ViewUtils.setErrorText(mMultiView,R.id.errorMessage,ApiClient.getErrorCode(t));
      mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
    }
  }
);
}","private void fetchProfile(final String username){
  ApiClient.getService().getProfile(username).enqueue(new Callback<UserResponse>(){
    @Override public void onResponse(    Response<UserResponse> response,    Retrofit retrofit){
      if (isDestroyed() || isFinishing())       return;
      if (response != null && response.body() != null) {
        UserResponse userResponse=response.body();
        if (mSelectedUser != null) {
          mSelectedUser.copy(userResponse.data);
        }
 else {
          mSelectedUser=userResponse.data;
        }
        mSelectedUser.setLastSeen(System.currentTimeMillis());
        if (mSelectedUser.isSelf(app) && !TextUtils.isEmpty(mSelectedUser.getAccessToken())) {
          SqlHelper.getInstance(getApplicationContext()).updateUserInfo(mSelectedUser);
        }
 else {
          SqlHelper.getInstance(getApplicationContext()).insertProfile(mSelectedUser);
        }
        mAdapter=new ProfilePager(getApplicationContext(),getFragmentManager(),mSelectedUser);
        mPager.setAdapter(mAdapter);
        mSlidingTabs.setupWithViewPager(mPager);
        mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
        supportInvalidateOptionsMenu();
      }
 else {
        ViewUtils.setErrorText(mMultiView,R.id.errorMessage,getString(R.string.profile_not_found,username));
        mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
      }
    }
    @Override public void onFailure(    Throwable t){
      ViewUtils.setErrorText(mMultiView,R.id.errorMessage,ApiClient.getErrorCode(t));
      mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
    }
  }
);
}",0.977639751552795
164485,"@Override public void onResponse(Response<UserResponse> response,Retrofit retrofit){
  if (isDestroyed() || isFinishing())   return;
  if (response != null && response.body() != null) {
    UserResponse userResponse=response.body();
    if (mSelectedUser != null) {
      mSelectedUser.copy(userResponse.data);
    }
 else {
      mSelectedUser=userResponse.data;
    }
    mSelectedUser.setLastSeen(System.currentTimeMillis());
    if (mSelectedUser.isSelf(app) && !TextUtils.isEmpty(mSelectedUser.getAccessToken())) {
      SqlHelper.getInstance(getApplicationContext()).updateUserInfo(mSelectedUser);
    }
 else {
      SqlHelper.getInstance(getApplicationContext()).insertProfile(mSelectedUser);
    }
    mAdapter=new ProfilePager(getApplicationContext(),getFragmentManager(),mSelectedUser);
    mPager.setAdapter(mAdapter);
    mSlidingTabs.setupWithViewPager(mPager);
    mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
    supportInvalidateOptionsMenu();
  }
 else {
    ViewUtils.setErrorText(mMultiView,R.id.errorMessage,R.string.error_generic);
    mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
  }
}","@Override public void onResponse(Response<UserResponse> response,Retrofit retrofit){
  if (isDestroyed() || isFinishing())   return;
  if (response != null && response.body() != null) {
    UserResponse userResponse=response.body();
    if (mSelectedUser != null) {
      mSelectedUser.copy(userResponse.data);
    }
 else {
      mSelectedUser=userResponse.data;
    }
    mSelectedUser.setLastSeen(System.currentTimeMillis());
    if (mSelectedUser.isSelf(app) && !TextUtils.isEmpty(mSelectedUser.getAccessToken())) {
      SqlHelper.getInstance(getApplicationContext()).updateUserInfo(mSelectedUser);
    }
 else {
      SqlHelper.getInstance(getApplicationContext()).insertProfile(mSelectedUser);
    }
    mAdapter=new ProfilePager(getApplicationContext(),getFragmentManager(),mSelectedUser);
    mPager.setAdapter(mAdapter);
    mSlidingTabs.setupWithViewPager(mPager);
    mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
    supportInvalidateOptionsMenu();
  }
 else {
    ViewUtils.setErrorText(mMultiView,R.id.errorMessage,getString(R.string.profile_not_found,username));
    mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
  }
}",0.9712543554006968
164486,"public boolean onError(MediaPlayer mp,int framework_err,int impl_err){
  Log.d(TAG,""String_Node_Str"" + framework_err + ""String_Node_Str""+ impl_err);
  mCurrentState=STATE_ERROR;
  mTargetState=STATE_ERROR;
  if (mMediaController != null) {
    mMediaController.hide();
  }
  if (mOnErrorListener != null) {
    if (mOnErrorListener.onError(mMediaPlayer,framework_err,impl_err)) {
      return true;
    }
  }
  if (getWindowToken() != null) {
    mMediaPlayer.setOnErrorListener(null);
    new AlertDialog.Builder(getContext()).setTitle(R.string.error_generic).setMessage(R.string.loading_image_error).setPositiveButton(R.string.cancel,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        if (mOnCompletionListener != null) {
          mOnCompletionListener.onCompletion(mMediaPlayer);
        }
      }
    }
).setCancelable(false).show();
  }
  return true;
}","public boolean onError(MediaPlayer mp,int framework_err,int impl_err){
  Log.d(TAG,""String_Node_Str"" + framework_err + ""String_Node_Str""+ impl_err);
  mCurrentState=STATE_ERROR;
  mTargetState=STATE_ERROR;
  if (mMediaController != null) {
    mMediaController.hide();
  }
  if (mOnErrorListener != null) {
    if (mOnErrorListener.onError(mMediaPlayer,framework_err,impl_err)) {
      return true;
    }
    mOnErrorListener=null;
  }
  if (getWindowToken() != null) {
    mMediaPlayer.setOnErrorListener(null);
    new AlertDialog.Builder(getContext()).setTitle(R.string.error_generic).setMessage(R.string.loading_image_error).setPositiveButton(R.string.cancel,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        if (mOnCompletionListener != null) {
          mOnCompletionListener.onCompletion(mMediaPlayer);
        }
      }
    }
).setCancelable(false).show();
  }
  return true;
}",0.9857519788918204
164487,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (user == null)   throw new IllegalStateException(""String_Node_Str"");
  getSupportActionBar().setTitle(R.string.notifications);
  setContentView(R.layout.activity_notifications);
  mList.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
  if (savedInstanceState != null) {
    List<ImgurNotification> notifications=savedInstanceState.getParcelableArrayList(KEY_ITEMS);
    if (notifications != null && !notifications.isEmpty()) {
      int position=savedInstanceState.getInt(KEY_POSIION,0);
      mList.setAdapter(mAdapter=new NotificationAdapter(this,notifications,this));
      mList.scrollToPosition(position);
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (user == null)   throw new IllegalStateException(""String_Node_Str"");
  getSupportActionBar().setTitle(R.string.notifications);
  setContentView(R.layout.activity_notifications);
  mList.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
  if (savedInstanceState != null) {
    List<ImgurNotification> notifications=savedInstanceState.getParcelableArrayList(KEY_ITEMS);
    if (notifications != null && !notifications.isEmpty()) {
      int position=savedInstanceState.getInt(KEY_POSIION,0);
      mList.setAdapter(mAdapter=new NotificationAdapter(this,notifications,this));
      mList.scrollToPosition(position);
      mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
    }
  }
}",0.9883076923076924
164488,"@OnClick(R.id.errorButton) @Override public void onClick(View v){
  if (v.getId() == R.id.errorButton) {
    mMultiView.setViewState(MultiStateView.ViewState.LOADING);
    fetchNotifications();
    return;
  }
  ImgurNotification notification=mAdapter.getItem(mList.getChildAdapterPosition(v));
  if (notification.getType() == ImgurNotification.TYPE_MESSAGE) {
    ImgurConvo convo=new ImgurConvo(notification.getContentId(),notification.getAuthor(),0);
    startActivity(ConvoThreadActivity.createIntent(getApplicationContext(),convo));
  }
 else {
    String url=""String_Node_Str"" + notification.getContentId();
    Intent intent=ViewActivity.createIntent(getApplicationContext(),url,!TextUtils.isEmpty(notification.getAlbumCover()));
    startActivity(intent);
  }
}","@OnClick(R.id.errorButton) @Override public void onClick(View v){
  if (v.getId() == R.id.errorButton) {
    mMultiView.setViewState(MultiStateView.VIEW_STATE_LOADING);
    fetchNotifications();
    return;
  }
  ImgurNotification notification=mAdapter.getItem(mList.getChildAdapterPosition(v));
  if (notification.getType() == ImgurNotification.TYPE_MESSAGE) {
    ImgurConvo convo=new ImgurConvo(notification.getContentId(),notification.getAuthor(),0);
    startActivity(ConvoThreadActivity.createIntent(getApplicationContext(),convo));
  }
 else {
    String url=""String_Node_Str"" + notification.getContentId();
    Intent intent=ViewActivity.createIntent(getApplicationContext(),url,!TextUtils.isEmpty(notification.getAlbumCover()));
    startActivity(intent);
  }
}",0.9889538661468484
164489,"@Override public void success(NotificationResponse notificationResponse,Response response){
  if (notificationResponse != null && notificationResponse.data != null) {
    app.getSql().insertNotifications(notificationResponse);
    List<ImgurNotification> notifications=app.getSql().getNotifications();
    if (notifications.isEmpty() && (mAdapter == null || mAdapter.isEmpty())) {
      mMultiView.setViewState(MultiStateView.ViewState.EMPTY);
    }
 else {
      if (mAdapter != null) {
        mAdapter.addItems(notifications);
      }
 else {
        mAdapter=new NotificationAdapter(NotificationActivity.this,notifications,NotificationActivity.this);
        mList.setAdapter(mAdapter);
      }
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
    }
  }
 else {
    mMultiView.setErrorText(R.id.errorMessage,R.string.error_generic);
    mMultiView.setViewState(MultiStateView.ViewState.ERROR);
  }
}","@Override public void success(NotificationResponse notificationResponse,Response response){
  if (notificationResponse != null && notificationResponse.data != null) {
    app.getSql().insertNotifications(notificationResponse);
    List<ImgurNotification> notifications=app.getSql().getNotifications();
    if (notifications.isEmpty() && (mAdapter == null || mAdapter.isEmpty())) {
      mMultiView.setViewState(MultiStateView.VIEW_STATE_EMPTY);
    }
 else {
      if (mAdapter != null) {
        mAdapter.addItems(notifications);
      }
 else {
        mAdapter=new NotificationAdapter(NotificationActivity.this,notifications,NotificationActivity.this);
        mList.setAdapter(mAdapter);
      }
      mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
    }
  }
 else {
    mMultiView.setErrorText(R.id.errorMessage,R.string.error_generic);
    mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
  }
}",0.9690385659967408
164490,"@Override public void failure(RetrofitError error){
  if (mAdapter == null || mAdapter.isEmpty()) {
    mMultiView.setErrorText(R.id.errorMessage,ApiClient.getErrorCode(error));
    mMultiView.setViewState(MultiStateView.ViewState.ERROR);
  }
 else {
    SnackBar.show(NotificationActivity.this,ApiClient.getErrorCode(error));
    mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
  }
}","@Override public void failure(RetrofitError error){
  if (mAdapter == null || mAdapter.isEmpty()) {
    mMultiView.setErrorText(R.id.errorMessage,ApiClient.getErrorCode(error));
    mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
  }
 else {
    SnackBar.show(NotificationActivity.this,ApiClient.getErrorCode(error));
    mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
  }
}",0.952020202020202
164491,"private void fetchNotifications(){
  ApiClient.getService().getNotifications(new Callback<NotificationResponse>(){
    @Override public void success(    NotificationResponse notificationResponse,    Response response){
      if (notificationResponse != null && notificationResponse.data != null) {
        app.getSql().insertNotifications(notificationResponse);
        List<ImgurNotification> notifications=app.getSql().getNotifications();
        if (notifications.isEmpty() && (mAdapter == null || mAdapter.isEmpty())) {
          mMultiView.setViewState(MultiStateView.ViewState.EMPTY);
        }
 else {
          if (mAdapter != null) {
            mAdapter.addItems(notifications);
          }
 else {
            mAdapter=new NotificationAdapter(NotificationActivity.this,notifications,NotificationActivity.this);
            mList.setAdapter(mAdapter);
          }
          mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
        }
      }
 else {
        mMultiView.setErrorText(R.id.errorMessage,R.string.error_generic);
        mMultiView.setViewState(MultiStateView.ViewState.ERROR);
      }
    }
    @Override public void failure(    RetrofitError error){
      if (mAdapter == null || mAdapter.isEmpty()) {
        mMultiView.setErrorText(R.id.errorMessage,ApiClient.getErrorCode(error));
        mMultiView.setViewState(MultiStateView.ViewState.ERROR);
      }
 else {
        SnackBar.show(NotificationActivity.this,ApiClient.getErrorCode(error));
        mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
      }
    }
  }
);
}","private void fetchNotifications(){
  ApiClient.getService().getNotifications(new Callback<NotificationResponse>(){
    @Override public void success(    NotificationResponse notificationResponse,    Response response){
      if (notificationResponse != null && notificationResponse.data != null) {
        app.getSql().insertNotifications(notificationResponse);
        List<ImgurNotification> notifications=app.getSql().getNotifications();
        if (notifications.isEmpty() && (mAdapter == null || mAdapter.isEmpty())) {
          mMultiView.setViewState(MultiStateView.VIEW_STATE_EMPTY);
        }
 else {
          if (mAdapter != null) {
            mAdapter.addItems(notifications);
          }
 else {
            mAdapter=new NotificationAdapter(NotificationActivity.this,notifications,NotificationActivity.this);
            mList.setAdapter(mAdapter);
          }
          mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
        }
      }
 else {
        mMultiView.setErrorText(R.id.errorMessage,R.string.error_generic);
        mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
      }
    }
    @Override public void failure(    RetrofitError error){
      if (mAdapter == null || mAdapter.isEmpty()) {
        mMultiView.setErrorText(R.id.errorMessage,ApiClient.getErrorCode(error));
        mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
      }
 else {
        SnackBar.show(NotificationActivity.this,ApiClient.getErrorCode(error));
        mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
      }
    }
  }
);
}",0.9697355845810768
164492,"@Override protected void onResume(){
  super.onResume();
  if (mAdapter == null || mAdapter.isEmpty()) {
    List<ImgurNotification> notifications=app.getSql().getNotifications();
    if (!notifications.isEmpty()) {
      LogUtil.v(TAG,""String_Node_Str"");
      mAdapter=new NotificationAdapter(this,notifications,this);
      mList.setAdapter(mAdapter);
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
      String ids=app.getSql().getNotificationIds();
      if (!TextUtils.isEmpty(ids)) {
        app.getSql().deleteNotifications();
        ApiClient.getService().markNotificationsRead(ids,new Callback<BasicResponse>(){
          @Override public void success(          BasicResponse basicResponse,          Response response){
          }
          @Override public void failure(          RetrofitError error){
            LogUtil.e(TAG,""String_Node_Str"",error);
          }
        }
);
      }
    }
 else {
      LogUtil.v(TAG,""String_Node_Str"");
      mMultiView.setViewState(MultiStateView.ViewState.LOADING);
      fetchNotifications();
    }
  }
}","@Override protected void onResume(){
  super.onResume();
  if (mAdapter == null || mAdapter.isEmpty()) {
    List<ImgurNotification> notifications=app.getSql().getNotifications();
    if (!notifications.isEmpty()) {
      LogUtil.v(TAG,""String_Node_Str"");
      mAdapter=new NotificationAdapter(this,notifications,this);
      mList.setAdapter(mAdapter);
      mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
      String ids=app.getSql().getNotificationIds();
      if (!TextUtils.isEmpty(ids)) {
        app.getSql().deleteNotifications();
        ApiClient.getService().markNotificationsRead(ids,new Callback<BasicResponse>(){
          @Override public void success(          BasicResponse basicResponse,          Response response){
          }
          @Override public void failure(          RetrofitError error){
            LogUtil.e(TAG,""String_Node_Str"",error);
          }
        }
);
      }
    }
 else {
      LogUtil.v(TAG,""String_Node_Str"");
      mMultiView.setViewState(MultiStateView.VIEW_STATE_LOADING);
      fetchNotifications();
    }
  }
}",0.9823584029712163
164493,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.refresh:
    mMultiView.setViewState(MultiStateView.ViewState.LOADING);
  fetchNotifications();
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.refresh:
    mMultiView.setViewState(MultiStateView.VIEW_STATE_LOADING);
  fetchNotifications();
break;
}
return super.onOptionsItemSelected(item);
}",0.9619238476953909
164494,"@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  if (savedInstanceState == null) {
    mCommentSort=CommentSort.getSortFromString(app.getPreferences().getString(KEY_SORT,null));
    mLoadComments=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(KEY_LOAD_COMMENTS,true);
    if (!TextUtils.isEmpty(mGalleryId)) {
      boolean isAlbumLink=getIntent().getBooleanExtra(KEY_VIEW_FOR_ALBUM,false);
      fetchItemDetails(mGalleryId,isAlbumLink);
      mMultiView.setViewState(MultiStateView.ViewState.LOADING);
    }
 else {
      mViewPager.setAdapter(mPagerAdapter);
      if (mCurrentPosition == 0) {
        fetchComments();
      }
 else {
        mViewPager.setCurrentItem(mCurrentPosition);
      }
    }
  }
 else {
    mCommentSort=CommentSort.getSortFromString(savedInstanceState.getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=savedInstanceState.getBoolean(KEY_LOAD_COMMENTS,true);
    mIsResuming=true;
    mCurrentPosition=savedInstanceState.getInt(KEY_POSITION,0);
    ArrayList<ImgurBaseObject> objects=savedInstanceState.getParcelableArrayList(KEY_OBJECTS);
    mPagerAdapter=new BrowsingAdapter(getApplicationContext(),getFragmentManager(),objects);
    mViewPager.setAdapter(mPagerAdapter);
    mViewPager.setCurrentItem(mCurrentPosition);
    if (mSideGalleryFragment != null) {
      mSideGalleryFragment.addGalleryItems(objects);
    }
    List<ImgurComment> comments=savedInstanceState.getParcelableArrayList(KEY_COMMENT);
    if (comments != null) {
      mCommentAdapter=new CommentAdapter(this,comments,this);
      mCommentList.setAdapter(mCommentAdapter);
    }
    if (mLoadComments) {
      mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
    }
 else {
      mMultiView.setErrorText(R.id.errorMessage,R.string.comments_off);
      mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
    }
    if (savedInstanceState.getBoolean(KEY_PANEL_EXPANDED,false))     getSupportActionBar().hide();
  }
}","@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  if (savedInstanceState == null) {
    mCommentSort=CommentSort.getSortFromString(app.getPreferences().getString(KEY_SORT,null));
    mLoadComments=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(KEY_LOAD_COMMENTS,true);
    if (!TextUtils.isEmpty(mGalleryId)) {
      boolean isAlbumLink=getIntent().getBooleanExtra(KEY_VIEW_FOR_ALBUM,false);
      fetchItemDetails(mGalleryId,isAlbumLink);
      mMultiView.setViewState(MultiStateView.VIEW_STATE_LOADING);
    }
 else {
      mViewPager.setAdapter(mPagerAdapter);
      if (mCurrentPosition == 0) {
        fetchComments();
      }
 else {
        mViewPager.setCurrentItem(mCurrentPosition);
      }
    }
  }
 else {
    mCommentSort=CommentSort.getSortFromString(savedInstanceState.getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=savedInstanceState.getBoolean(KEY_LOAD_COMMENTS,true);
    mIsResuming=true;
    mCurrentPosition=savedInstanceState.getInt(KEY_POSITION,0);
    ArrayList<ImgurBaseObject> objects=savedInstanceState.getParcelableArrayList(KEY_OBJECTS);
    mPagerAdapter=new BrowsingAdapter(getApplicationContext(),getFragmentManager(),objects);
    mViewPager.setAdapter(mPagerAdapter);
    mViewPager.setCurrentItem(mCurrentPosition);
    if (mSideGalleryFragment != null) {
      mSideGalleryFragment.addGalleryItems(objects);
    }
    List<ImgurComment> comments=savedInstanceState.getParcelableArrayList(KEY_COMMENT);
    if (comments != null) {
      mCommentAdapter=new CommentAdapter(this,comments,this);
      mCommentList.setAdapter(mCommentAdapter);
    }
    if (mLoadComments) {
      mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT);
    }
 else {
      mMultiView.setErrorText(R.id.errorMessage,R.string.comments_off);
      mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR);
    }
    if (savedInstanceState.getBoolean(KEY_PANEL_EXPANDED,false))     getSupportActionBar().hide();
  }
}",0.9953601953601954
164495,"@Override public Cursor runQuery(CharSequence constraint){
  return app.getSql().getPreviousGallerySearches(constraint);
}","@Override public Cursor runQuery(CharSequence constraint){
  return app.getSql().getPreviousGallerySearches(constraint.toString());
}",0.9568627450980391
164496,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  inflater.inflate(R.menu.gallery,menu);
  mSearchMenuItem=menu.findItem(R.id.search);
  mSearchView=(SearchView)MenuItemCompat.getActionView(mSearchMenuItem);
  mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String text){
      if (!TextUtils.isEmpty(text)) {
        startActivity(GallerySearchActivity.createIntent(getActivity(),text));
        mSearchMenuItem.collapseActionView();
        return true;
      }
      return false;
    }
    @Override public boolean onQueryTextChange(    String s){
      return false;
    }
  }
);
  mSearchView.setOnSuggestionListener(new SearchView.OnSuggestionListener(){
    @Override public boolean onSuggestionSelect(    int position){
      String query=mSearchAdapter.getTitle(position);
      if (GalleryFragment.this instanceof GallerySearchFragment) {
        ((GallerySearchFragment)GalleryFragment.this).setQuery(query);
        GalleryFragment.this.refresh();
      }
 else {
        startActivity(GallerySearchActivity.createIntent(getActivity(),query));
      }
      return true;
    }
    @Override public boolean onSuggestionClick(    int position){
      String query=mSearchAdapter.getTitle(position);
      if (GalleryFragment.this instanceof GallerySearchFragment) {
        ((GallerySearchFragment)GalleryFragment.this).setQuery(query);
        GalleryFragment.this.refresh();
      }
 else {
        startActivity(GallerySearchActivity.createIntent(getActivity(),query));
      }
      return true;
    }
  }
);
  if (getActivity() != null) {
    mSearchView.setQueryHint(getString(R.string.gallery_search_hint));
    if (mSearchView.getSuggestionsAdapter() == null) {
      mSearchAdapter=new SearchAdapter(getActivity(),app.getSql().getPreviousGallerySearches(),DBContracts.GallerySearchContract.COLUMN_NAME);
      mSearchAdapter.setFilterQueryProvider(new FilterQueryProvider(){
        @Override public Cursor runQuery(        CharSequence constraint){
          return app.getSql().getPreviousGallerySearches(constraint);
        }
      }
);
      mSearchView.setSuggestionsAdapter(mSearchAdapter);
    }
  }
 else {
    LogUtil.w(TAG,""String_Node_Str"");
  }
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  inflater.inflate(R.menu.gallery,menu);
  mSearchMenuItem=menu.findItem(R.id.search);
  mSearchView=(SearchView)MenuItemCompat.getActionView(mSearchMenuItem);
  mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String text){
      if (!TextUtils.isEmpty(text)) {
        startActivity(GallerySearchActivity.createIntent(getActivity(),text));
        mSearchMenuItem.collapseActionView();
        return true;
      }
      return false;
    }
    @Override public boolean onQueryTextChange(    String s){
      return false;
    }
  }
);
  mSearchView.setOnSuggestionListener(new SearchView.OnSuggestionListener(){
    @Override public boolean onSuggestionSelect(    int position){
      String query=mSearchAdapter.getTitle(position);
      if (GalleryFragment.this instanceof GallerySearchFragment) {
        ((GallerySearchFragment)GalleryFragment.this).setQuery(query);
        GalleryFragment.this.refresh();
      }
 else {
        startActivity(GallerySearchActivity.createIntent(getActivity(),query));
      }
      return true;
    }
    @Override public boolean onSuggestionClick(    int position){
      String query=mSearchAdapter.getTitle(position);
      if (GalleryFragment.this instanceof GallerySearchFragment) {
        ((GallerySearchFragment)GalleryFragment.this).setQuery(query);
        GalleryFragment.this.refresh();
      }
 else {
        startActivity(GallerySearchActivity.createIntent(getActivity(),query));
      }
      return true;
    }
  }
);
  if (getActivity() != null) {
    mSearchView.setQueryHint(getString(R.string.gallery_search_hint));
    if (mSearchView.getSuggestionsAdapter() == null) {
      mSearchAdapter=new SearchAdapter(getActivity(),app.getSql().getPreviousGallerySearches(),DBContracts.GallerySearchContract.COLUMN_NAME);
      mSearchAdapter.setFilterQueryProvider(new FilterQueryProvider(){
        @Override public Cursor runQuery(        CharSequence constraint){
          return app.getSql().getPreviousGallerySearches(constraint.toString());
        }
      }
);
      mSearchView.setSuggestionsAdapter(mSearchAdapter);
    }
  }
 else {
    LogUtil.w(TAG,""String_Node_Str"");
  }
}",0.9976420150053592
164497,"/** 
 * Called when a successful search has been completed by the API
 */
public void onSuccessfulSearch(){
  app.getSql().addPreviousGallerySearch(mQuery);
  if (mSearchAdapter == null) {
    mSearchAdapter=new SearchAdapter(getActivity(),app.getSql().getSubReddits(mQuery),DBContracts.GallerySearchContract.COLUMN_NAME);
    mSearchView.setSuggestionsAdapter(mSearchAdapter);
  }
 else {
    mSearchAdapter.changeCursor(app.getSql().getSubReddits(mQuery));
  }
  mSearchAdapter.notifyDataSetChanged();
}","/** 
 * Called when a successful search has been completed by the API
 */
public void onSuccessfulSearch(){
  app.getSql().addPreviousGallerySearch(mQuery);
  if (mSearchAdapter == null) {
    mSearchAdapter=new SearchAdapter(getActivity(),app.getSql().getPreviousGallerySearches(mQuery),DBContracts.GallerySearchContract.COLUMN_NAME);
    mSearchView.setSuggestionsAdapter(mSearchAdapter);
  }
 else {
    mSearchAdapter.changeCursor(app.getSql().getPreviousGallerySearches(mQuery));
  }
  mSearchAdapter.notifyDataSetChanged();
}",0.9401544401544402
164498,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case MESSAGE_ACTION_COMPLETE:
    if (msg.obj instanceof ImgurBaseObject) {
      setupFragmentWithObject((ImgurBaseObject)msg.obj);
    }
 else     if (msg.obj instanceof List && mImgurObject instanceof ImgurAlbum) {
      ((ImgurAlbum)mImgurObject).addPhotosToAlbum((List<ImgurPhoto>)msg.obj);
      mPhotoAdapter=new PhotoAdapter(getActivity(),((ImgurAlbum)mImgurObject).getAlbumPhotos(),ImgurViewFragment.this);
      createHeader();
      mListView.setAdapter(mPhotoAdapter);
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
    }
 else {
      mMultiView.setErrorText(R.id.errorMessage,R.string.error_generic);
      mMultiView.setViewState(MultiStateView.ViewState.ERROR);
    }
  break;
case MESSAGE_ACTION_FAILED:
mMultiView.setErrorText(R.id.errorMessage,ApiClient.getErrorCodeStringResource((Integer)msg.obj));
mMultiView.setViewState(MultiStateView.ViewState.ERROR);
break;
case MESSAGE_TAGS_RECEIVED:
if (msg.obj instanceof ArrayList) {
mImgurObject.setTags((ArrayList<String>)msg.obj);
displayTags(true);
}
break;
default :
super.handleMessage(msg);
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case MESSAGE_ACTION_COMPLETE:
    if (getActivity() == null || !isAdded() || isRemoving())     return;
  if (msg.obj instanceof ImgurBaseObject) {
    setupFragmentWithObject((ImgurBaseObject)msg.obj);
  }
 else   if (msg.obj instanceof List && mImgurObject instanceof ImgurAlbum) {
    ((ImgurAlbum)mImgurObject).addPhotosToAlbum((List<ImgurPhoto>)msg.obj);
    mPhotoAdapter=new PhotoAdapter(getActivity(),((ImgurAlbum)mImgurObject).getAlbumPhotos(),ImgurViewFragment.this);
    createHeader();
    mListView.setAdapter(mPhotoAdapter);
    mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
  }
 else {
    mMultiView.setErrorText(R.id.errorMessage,R.string.error_generic);
    mMultiView.setViewState(MultiStateView.ViewState.ERROR);
  }
break;
case MESSAGE_ACTION_FAILED:
mMultiView.setErrorText(R.id.errorMessage,ApiClient.getErrorCodeStringResource((Integer)msg.obj));
mMultiView.setViewState(MultiStateView.ViewState.ERROR);
break;
case MESSAGE_TAGS_RECEIVED:
if (msg.obj instanceof ArrayList) {
mImgurObject.setTags((ArrayList<String>)msg.obj);
displayTags(true);
}
break;
default :
super.handleMessage(msg);
break;
}
}",0.9446088794926004
164499,"@Override public Cursor runQuery(CharSequence constraint){
  return app.getSql().getSubReddits(constraint);
}","@Override public Cursor runQuery(CharSequence constraint){
  return app.getSql().getSubReddits(constraint.toString());
}",0.9519650655021834
164500,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.reddit,menu);
  mSearchMenuItem=menu.findItem(R.id.search);
  mSearchView=(SearchView)MenuItemCompat.getActionView(mSearchMenuItem);
  mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String text){
      return search(text);
    }
    @Override public boolean onQueryTextChange(    String s){
      return false;
    }
  }
);
  mSearchView.setOnSuggestionListener(new SearchView.OnSuggestionListener(){
    @Override public boolean onSuggestionSelect(    int position){
      String title=mCursorAdapter.getTitle(position);
      return search(title);
    }
    @Override public boolean onSuggestionClick(    int position){
      String title=mCursorAdapter.getTitle(position);
      return search(title);
    }
  }
);
  if (getActivity() != null) {
    mSearchView.setQueryHint(getString(R.string.enter_sub_reddit));
    mCursorAdapter=new SearchAdapter(getActivity(),app.getSql().getSubReddits(),DBContracts.SubRedditContract.COLUMN_NAME);
    mCursorAdapter.setFilterQueryProvider(new FilterQueryProvider(){
      @Override public Cursor runQuery(      CharSequence constraint){
        return app.getSql().getSubReddits(constraint);
      }
    }
);
    mSearchView.setSuggestionsAdapter(mCursorAdapter);
  }
  super.onCreateOptionsMenu(menu,inflater);
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.reddit,menu);
  mSearchMenuItem=menu.findItem(R.id.search);
  mSearchView=(SearchView)MenuItemCompat.getActionView(mSearchMenuItem);
  mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String text){
      return search(text);
    }
    @Override public boolean onQueryTextChange(    String s){
      return false;
    }
  }
);
  mSearchView.setOnSuggestionListener(new SearchView.OnSuggestionListener(){
    @Override public boolean onSuggestionSelect(    int position){
      String title=mCursorAdapter.getTitle(position);
      return search(title);
    }
    @Override public boolean onSuggestionClick(    int position){
      String title=mCursorAdapter.getTitle(position);
      return search(title);
    }
  }
);
  if (getActivity() != null) {
    mSearchView.setQueryHint(getString(R.string.enter_sub_reddit));
    mCursorAdapter=new SearchAdapter(getActivity(),app.getSql().getSubReddits(),DBContracts.SubRedditContract.COLUMN_NAME);
    mCursorAdapter.setFilterQueryProvider(new FilterQueryProvider(){
      @Override public Cursor runQuery(      CharSequence constraint){
        return app.getSql().getSubReddits(constraint.toString());
      }
    }
);
    mSearchView.setSuggestionsAdapter(mCursorAdapter);
  }
  super.onCreateOptionsMenu(menu,inflater);
}",0.9961818812912184
164501,"/** 
 * Returns subreddits that match the given name
 * @param name
 * @return
 */
public Cursor getSubReddits(CharSequence name){
  String sql=SubRedditContract.SEARCH_SUBREDDIT_SQL + name + ""String_Node_Str"";
  return getReadableDatabase().rawQuery(sql,null);
}","/** 
 * Returns subreddits that match the given name
 * @param name
 * @return
 */
public Cursor getSubReddits(String name){
  name=""String_Node_Str"" + name + ""String_Node_Str"";
  return getReadableDatabase().rawQuery(SubRedditContract.SEARCH_SUBREDDIT_SQL,new String[]{name});
}",0.6088560885608856
164502,"public Cursor getPreviousGallerySearches(CharSequence name){
  String sql=GallerySearchContract.SEARCH_GALLERY_SQL + name + ""String_Node_Str"";
  return getReadableDatabase().rawQuery(sql,null);
}","public Cursor getPreviousGallerySearches(String name){
  name=""String_Node_Str"" + name + ""String_Node_Str"";
  return getReadableDatabase().rawQuery(GallerySearchContract.SEARCH_GALLERY_SQL,new String[]{name});
}",0.4778325123152709
164503,"@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  if (url.startsWith(REDIRECT_URL)) {
    mMultiView.setViewState(MultiStateView.ViewState.LOADING);
    String[] outerSplit=url.split(""String_Node_Str"")[1].split(""String_Node_Str"");
    String username=null;
    String accessToken=null;
    String refreshToken=null;
    long accessTokenExpiration=0;
    int index=0;
    for (    String s : outerSplit) {
      String[] innerSplit=s.split(""String_Node_Str"");
switch (index) {
case 0:
        accessToken=innerSplit[1];
      break;
case 1:
    long expiresIn=Long.parseLong(innerSplit[1]);
  accessTokenExpiration=System.currentTimeMillis() + (expiresIn * DateUtils.SECOND_IN_MILLIS);
break;
case 2:
break;
case 3:
refreshToken=innerSplit[1];
break;
case 4:
username=innerSplit[1];
break;
}
index++;
}
if (!TextUtils.isEmpty(username) && !TextUtils.isEmpty(accessToken) && !TextUtils.isEmpty(refreshToken)&& accessTokenExpiration > 0) {
ImgurUser newUser=new ImgurUser(username,accessToken,refreshToken,accessTokenExpiration);
app.setUser(newUser);
user=newUser;
mSelectedUser=newUser;
LogUtil.v(TAG,""String_Node_Str"" + newUser.getUsername() + ""String_Node_Str"");
String detailsUrls=String.format(Endpoints.PROFILE.getUrl(),newUser.getUsername());
new ApiClient(detailsUrls,ApiClient.HttpRequest.GET).doWork(ImgurBusEvent.EventType.PROFILE_DETAILS,newUser.getUsername(),null);
CookieManager.getInstance().removeAllCookie();
view.clearHistory();
view.clearCache(true);
view.clearFormData();
getSupportActionBar().show();
getSupportActionBar().setTitle(user.getUsername());
setResult(Activity.RESULT_OK,new Intent().putExtra(KEY_LOGGED_IN,true));
}
 else {
mHandler.sendMessage(ImgurHandler.MESSAGE_ACTION_FAILED,R.string.error_generic);
}
}
 else {
view.loadUrl(url);
}
return true;
}","@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  if (url.startsWith(REDIRECT_URL)) {
    if (url.contains(""String_Node_Str"")) {
      LogUtil.v(TAG,""String_Node_Str"" + url);
      view.loadUrl(Endpoints.LOGIN.getUrl());
      return true;
    }
    mMultiView.setViewState(MultiStateView.ViewState.LOADING);
    String[] outerSplit=url.split(""String_Node_Str"")[1].split(""String_Node_Str"");
    String username=null;
    String accessToken=null;
    String refreshToken=null;
    long accessTokenExpiration=0;
    int index=0;
    for (    String s : outerSplit) {
      String[] innerSplit=s.split(""String_Node_Str"");
switch (index) {
case 0:
        accessToken=innerSplit[1];
      break;
case 1:
    long expiresIn=Long.parseLong(innerSplit[1]);
  accessTokenExpiration=System.currentTimeMillis() + (expiresIn * DateUtils.SECOND_IN_MILLIS);
break;
case 2:
break;
case 3:
refreshToken=innerSplit[1];
break;
case 4:
username=innerSplit[1];
break;
}
index++;
}
if (!TextUtils.isEmpty(username) && !TextUtils.isEmpty(accessToken) && !TextUtils.isEmpty(refreshToken)&& accessTokenExpiration > 0) {
ImgurUser newUser=new ImgurUser(username,accessToken,refreshToken,accessTokenExpiration);
app.setUser(newUser);
user=newUser;
mSelectedUser=newUser;
LogUtil.v(TAG,""String_Node_Str"" + newUser.getUsername() + ""String_Node_Str"");
String detailsUrls=String.format(Endpoints.PROFILE.getUrl(),newUser.getUsername());
new ApiClient(detailsUrls,ApiClient.HttpRequest.GET).doWork(ImgurBusEvent.EventType.PROFILE_DETAILS,newUser.getUsername(),null);
CookieManager.getInstance().removeAllCookie();
view.clearHistory();
view.clearCache(true);
view.clearFormData();
getSupportActionBar().show();
getSupportActionBar().setTitle(user.getUsername());
setResult(Activity.RESULT_OK,new Intent().putExtra(KEY_LOGGED_IN,true));
}
 else {
mHandler.sendMessage(ImgurHandler.MESSAGE_ACTION_FAILED,R.string.error_generic);
}
}
 else {
view.loadUrl(url);
}
return true;
}",0.9576943416181914
164504,"/** 
 * Configures the webview to handle a user logging in
 */
private void configWebView(){
  getSupportActionBar().hide();
  mMultiView.setViewState(MultiStateView.ViewState.EMPTY);
  WebView webView=(WebView)mMultiView.getView(MultiStateView.ViewState.EMPTY).findViewById(R.id.loginWebView);
  webView.loadUrl(Endpoints.LOGIN.getUrl());
  webView.getSettings().setJavaScriptEnabled(true);
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      if (url.startsWith(REDIRECT_URL)) {
        mMultiView.setViewState(MultiStateView.ViewState.LOADING);
        String[] outerSplit=url.split(""String_Node_Str"")[1].split(""String_Node_Str"");
        String username=null;
        String accessToken=null;
        String refreshToken=null;
        long accessTokenExpiration=0;
        int index=0;
        for (        String s : outerSplit) {
          String[] innerSplit=s.split(""String_Node_Str"");
switch (index) {
case 0:
            accessToken=innerSplit[1];
          break;
case 1:
        long expiresIn=Long.parseLong(innerSplit[1]);
      accessTokenExpiration=System.currentTimeMillis() + (expiresIn * DateUtils.SECOND_IN_MILLIS);
    break;
case 2:
  break;
case 3:
refreshToken=innerSplit[1];
break;
case 4:
username=innerSplit[1];
break;
}
index++;
}
if (!TextUtils.isEmpty(username) && !TextUtils.isEmpty(accessToken) && !TextUtils.isEmpty(refreshToken)&& accessTokenExpiration > 0) {
ImgurUser newUser=new ImgurUser(username,accessToken,refreshToken,accessTokenExpiration);
app.setUser(newUser);
user=newUser;
mSelectedUser=newUser;
LogUtil.v(TAG,""String_Node_Str"" + newUser.getUsername() + ""String_Node_Str"");
String detailsUrls=String.format(Endpoints.PROFILE.getUrl(),newUser.getUsername());
new ApiClient(detailsUrls,ApiClient.HttpRequest.GET).doWork(ImgurBusEvent.EventType.PROFILE_DETAILS,newUser.getUsername(),null);
CookieManager.getInstance().removeAllCookie();
view.clearHistory();
view.clearCache(true);
view.clearFormData();
getSupportActionBar().show();
getSupportActionBar().setTitle(user.getUsername());
setResult(Activity.RESULT_OK,new Intent().putExtra(KEY_LOGGED_IN,true));
}
 else {
mHandler.sendMessage(ImgurHandler.MESSAGE_ACTION_FAILED,R.string.error_generic);
}
}
 else {
view.loadUrl(url);
}
return true;
}
}
);
}","/** 
 * Configures the webview to handle a user logging in
 */
private void configWebView(){
  getSupportActionBar().hide();
  mMultiView.setViewState(MultiStateView.ViewState.EMPTY);
  WebView webView=(WebView)mMultiView.getView(MultiStateView.ViewState.EMPTY).findViewById(R.id.loginWebView);
  webView.loadUrl(Endpoints.LOGIN.getUrl());
  webView.getSettings().setJavaScriptEnabled(true);
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      if (url.startsWith(REDIRECT_URL)) {
        if (url.contains(""String_Node_Str"")) {
          LogUtil.v(TAG,""String_Node_Str"" + url);
          view.loadUrl(Endpoints.LOGIN.getUrl());
          return true;
        }
        mMultiView.setViewState(MultiStateView.ViewState.LOADING);
        String[] outerSplit=url.split(""String_Node_Str"")[1].split(""String_Node_Str"");
        String username=null;
        String accessToken=null;
        String refreshToken=null;
        long accessTokenExpiration=0;
        int index=0;
        for (        String s : outerSplit) {
          String[] innerSplit=s.split(""String_Node_Str"");
switch (index) {
case 0:
            accessToken=innerSplit[1];
          break;
case 1:
        long expiresIn=Long.parseLong(innerSplit[1]);
      accessTokenExpiration=System.currentTimeMillis() + (expiresIn * DateUtils.SECOND_IN_MILLIS);
    break;
case 2:
  break;
case 3:
refreshToken=innerSplit[1];
break;
case 4:
username=innerSplit[1];
break;
}
index++;
}
if (!TextUtils.isEmpty(username) && !TextUtils.isEmpty(accessToken) && !TextUtils.isEmpty(refreshToken)&& accessTokenExpiration > 0) {
ImgurUser newUser=new ImgurUser(username,accessToken,refreshToken,accessTokenExpiration);
app.setUser(newUser);
user=newUser;
mSelectedUser=newUser;
LogUtil.v(TAG,""String_Node_Str"" + newUser.getUsername() + ""String_Node_Str"");
String detailsUrls=String.format(Endpoints.PROFILE.getUrl(),newUser.getUsername());
new ApiClient(detailsUrls,ApiClient.HttpRequest.GET).doWork(ImgurBusEvent.EventType.PROFILE_DETAILS,newUser.getUsername(),null);
CookieManager.getInstance().removeAllCookie();
view.clearHistory();
view.clearCache(true);
view.clearFormData();
getSupportActionBar().show();
getSupportActionBar().setTitle(user.getUsername());
setResult(Activity.RESULT_OK,new Intent().putExtra(KEY_LOGGED_IN,true));
}
 else {
mHandler.sendMessage(ImgurHandler.MESSAGE_ACTION_FAILED,R.string.error_generic);
}
}
 else {
view.loadUrl(url);
}
return true;
}
}
);
}",0.9629018961253092
164505,"@Override public void handleMessage(Message msg){
  if (isRemoving() || getActivity().isFinishing()) {
    LogUtil.w(TAG,""String_Node_Str"");
    return;
  }
  mRefreshLayout.setRefreshing(false);
switch (msg.what) {
case MESSAGE_ACTION_COMPLETE:
    List<ImgurBaseObject> gallery=(List<ImgurBaseObject>)msg.obj;
  if (getAdapter() == null) {
    setUpGridTop();
    setAdapter(new GalleryAdapter(getActivity(),SetUniqueList.decorate(gallery)));
  }
 else {
    getAdapter().addItems(gallery);
  }
if (mListener != null) mListener.onLoadingComplete();
mMultiStateView.setViewState(MultiStateView.ViewState.CONTENT);
if (mCurrentPage == 0) {
if (GalleryFragment.this instanceof GallerySearchFragment) {
((GallerySearchFragment)GalleryFragment.this).onSuccessfulSearch();
}
mMultiStateView.post(new Runnable(){
@Override public void run(){
  mGrid.setSelection(0);
}
}
);
}
break;
case MESSAGE_ACTION_FAILED:
if (getAdapter() == null || getAdapter().isEmpty()) {
if (mListener != null) {
mListener.onError((Integer)msg.obj);
}
mMultiStateView.setErrorText(R.id.errorMessage,(Integer)msg.obj);
mMultiStateView.setErrorButtonText(R.id.errorButton,R.string.retry);
mMultiStateView.setErrorButtonClickListener(R.id.errorButton,new View.OnClickListener(){
@Override public void onClick(View view){
mMultiStateView.setViewState(MultiStateView.ViewState.LOADING);
fetchGallery();
}
}
);
mMultiStateView.setViewState(MultiStateView.ViewState.ERROR);
}
break;
case MESSAGE_EMPTY_RESULT:
if (GalleryFragment.this instanceof GallerySearchFragment) {
((GallerySearchFragment)GalleryFragment.this).onEmptyResults();
}
break;
default :
super.handleMessage(msg);
break;
}
mIsLoading=false;
}","@Override public void handleMessage(Message msg){
  if (getActivity() == null || getActivity().isFinishing() || isRemoving()) {
    LogUtil.w(TAG,""String_Node_Str"");
    return;
  }
  mRefreshLayout.setRefreshing(false);
switch (msg.what) {
case MESSAGE_ACTION_COMPLETE:
    List<ImgurBaseObject> gallery=(List<ImgurBaseObject>)msg.obj;
  if (getAdapter() == null) {
    setUpGridTop();
    setAdapter(new GalleryAdapter(getActivity(),SetUniqueList.decorate(gallery)));
  }
 else {
    getAdapter().addItems(gallery);
  }
if (mListener != null) mListener.onLoadingComplete();
mMultiStateView.setViewState(MultiStateView.ViewState.CONTENT);
if (mCurrentPage == 0) {
if (GalleryFragment.this instanceof GallerySearchFragment) {
((GallerySearchFragment)GalleryFragment.this).onSuccessfulSearch();
}
mMultiStateView.post(new Runnable(){
@Override public void run(){
  mGrid.setSelection(0);
}
}
);
}
break;
case MESSAGE_ACTION_FAILED:
if (getAdapter() == null || getAdapter().isEmpty()) {
if (mListener != null) {
mListener.onError((Integer)msg.obj);
}
mMultiStateView.setErrorText(R.id.errorMessage,(Integer)msg.obj);
mMultiStateView.setErrorButtonText(R.id.errorButton,R.string.retry);
mMultiStateView.setErrorButtonClickListener(R.id.errorButton,new View.OnClickListener(){
@Override public void onClick(View view){
mMultiStateView.setViewState(MultiStateView.ViewState.LOADING);
fetchGallery();
}
}
);
mMultiStateView.setViewState(MultiStateView.ViewState.ERROR);
}
break;
case MESSAGE_EMPTY_RESULT:
if (GalleryFragment.this instanceof GallerySearchFragment) {
((GallerySearchFragment)GalleryFragment.this).onEmptyResults();
}
break;
default :
super.handleMessage(msg);
break;
}
mIsLoading=false;
}",0.9866508454464552
164506,"@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  if (savedInstanceState == null) {
    mCommentSort=CommentSort.getSortFromString(app.getPreferences().getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(KEY_LOAD_COMMENTS,true);
    if (!TextUtils.isEmpty(mGalleryId)) {
      boolean isAlbumLink=getIntent().getBooleanExtra(KEY_VIEW_FOR_ALBUM,false);
      String url;
      ImgurBusEvent.EventType eventType;
      if (isAlbumLink) {
        url=String.format(Endpoints.ALBUM.getUrl(),mGalleryId);
        eventType=ImgurBusEvent.EventType.ALBUM_DETAILS;
      }
 else {
        url=String.format(Endpoints.GALLERY_ITEM_DETAILS.getUrl(),mGalleryId);
        eventType=ImgurBusEvent.EventType.GALLERY_ITEM_INFO;
      }
      mApiClient=new ApiClient(url,ApiClient.HttpRequest.GET);
      mApiClient.doWork(eventType,mGalleryId,null);
    }
 else {
      mViewPager.setAdapter(mPagerAdapter);
      if (mCurrentPosition == 0) {
        loadComments();
      }
 else {
        mViewPager.setCurrentItem(mCurrentPosition);
      }
    }
  }
 else {
    mCommentSort=CommentSort.getSortFromString(savedInstanceState.getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=savedInstanceState.getBoolean(KEY_LOAD_COMMENTS,true);
    mIsResuming=true;
    mCurrentPosition=savedInstanceState.getInt(KEY_POSITION,0);
    ArrayList<ImgurBaseObject> objects=savedInstanceState.getParcelableArrayList(KEY_OBJECTS);
    mPagerAdapter=new BrowsingAdapter(getFragmentManager(),objects);
    mViewPager.setAdapter(mPagerAdapter);
    mViewPager.setCurrentItem(mCurrentPosition);
    if (mSideGalleryFragment != null) {
      mSideGalleryFragment.addGalleryItems(objects);
    }
    List<ImgurComment> comments=savedInstanceState.getParcelableArrayList(KEY_COMMENT);
    if (comments != null) {
      mCommentAdapter=new CommentAdapter(this,comments,this);
      mCommentList.setAdapter(mCommentAdapter);
      mCommentList.removeHeaderView(mCommentListHeader);
    }
    if (mLoadComments) {
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
    }
 else {
      mMultiView.setErrorText(R.id.errorMessage,R.string.comments_off);
      mMultiView.setViewState(MultiStateView.ViewState.ERROR);
    }
  }
}","@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  if (savedInstanceState == null) {
    mCommentSort=CommentSort.getSortFromString(app.getPreferences().getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(KEY_LOAD_COMMENTS,true);
    if (!TextUtils.isEmpty(mGalleryId)) {
      boolean isAlbumLink=getIntent().getBooleanExtra(KEY_VIEW_FOR_ALBUM,false);
      String url;
      ImgurBusEvent.EventType eventType;
      if (isAlbumLink) {
        url=String.format(Endpoints.ALBUM.getUrl(),mGalleryId);
        eventType=ImgurBusEvent.EventType.ALBUM_DETAILS;
      }
 else {
        url=String.format(Endpoints.GALLERY_ITEM_DETAILS.getUrl(),mGalleryId);
        eventType=ImgurBusEvent.EventType.GALLERY_ITEM_INFO;
      }
      mApiClient=new ApiClient(url,ApiClient.HttpRequest.GET);
      mApiClient.doWork(eventType,mGalleryId,null);
    }
 else {
      mViewPager.setAdapter(mPagerAdapter);
      if (mCurrentPosition == 0) {
        loadComments();
      }
 else {
        mViewPager.setCurrentItem(mCurrentPosition);
      }
    }
  }
 else {
    mCommentSort=CommentSort.getSortFromString(savedInstanceState.getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=savedInstanceState.getBoolean(KEY_LOAD_COMMENTS,true);
    mIsResuming=true;
    mCurrentPosition=savedInstanceState.getInt(KEY_POSITION,0);
    ArrayList<ImgurBaseObject> objects=savedInstanceState.getParcelableArrayList(KEY_OBJECTS);
    mPagerAdapter=new BrowsingAdapter(getFragmentManager(),objects);
    mViewPager.setAdapter(mPagerAdapter);
    mViewPager.setCurrentItem(mCurrentPosition);
    if (mSideGalleryFragment != null) {
      mSideGalleryFragment.addGalleryItems(objects);
    }
    List<ImgurComment> comments=savedInstanceState.getParcelableArrayList(KEY_COMMENT);
    if (comments != null) {
      mCommentAdapter=new CommentAdapter(this,comments,this);
      mCommentList.setAdapter(mCommentAdapter);
      mCommentList.removeHeaderView(mCommentListHeader);
    }
    if (mLoadComments) {
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
    }
 else {
      mMultiView.setErrorText(R.id.errorMessage,R.string.comments_off);
      mMultiView.setViewState(MultiStateView.ViewState.ERROR);
    }
    if (savedInstanceState.getBoolean(KEY_PANEL_EXPANDED,false))     getSupportActionBar().hide();
  }
}",0.9795412275263484
164507,"private void onListItemClick(int position){
  if (position >= 0) {
    boolean shouldClose=mCommentAdapter.setSelectedIndex(position);
    if (shouldClose) {
      mSelectedComment=null;
    }
 else {
      mSelectedComment=mCommentAdapter.getItem(position);
      showCommentSheet();
    }
  }
 else {
    previousComments(mCommentAdapter.getItem(0));
  }
}","private void onListItemClick(int position){
  if (mCommentAdapter == null)   return;
  if (position >= 0) {
    boolean shouldClose=mCommentAdapter.setSelectedIndex(position);
    if (shouldClose) {
      mSelectedComment=null;
    }
 else {
      mSelectedComment=mCommentAdapter.getItem(position);
      showCommentSheet();
    }
  }
 else {
    previousComments(mCommentAdapter.getItem(0));
  }
}",0.9458388375165124
164508,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mCommentArray.size() > 0) {
    long key=mCommentArray.keyAt(0);
    outState.putParcelableArrayList(KEY_COMMENT,mCommentArray.get(key));
  }
 else   if (mCommentAdapter != null && !mCommentAdapter.isEmpty()) {
    outState.putParcelableArrayList(KEY_COMMENT,mCommentAdapter.retainItems());
  }
  outState.putBoolean(KEY_LOAD_COMMENTS,mLoadComments);
  outState.putString(KEY_SORT,mCommentSort.getSort());
  if (mPagerAdapter != null && !mPagerAdapter.isEmpty()) {
    outState.putInt(KEY_POSITION,mViewPager.getCurrentItem());
    outState.putParcelableArrayList(KEY_OBJECTS,mPagerAdapter.retainItems());
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mCommentArray.size() > 0) {
    long key=mCommentArray.keyAt(0);
    outState.putParcelableArrayList(KEY_COMMENT,mCommentArray.get(key));
  }
 else   if (mCommentAdapter != null && !mCommentAdapter.isEmpty()) {
    outState.putParcelableArrayList(KEY_COMMENT,mCommentAdapter.retainItems());
  }
  outState.putBoolean(KEY_LOAD_COMMENTS,mLoadComments);
  outState.putString(KEY_SORT,mCommentSort.getSort());
  if (mPagerAdapter != null && !mPagerAdapter.isEmpty()) {
    outState.putInt(KEY_POSITION,mViewPager.getCurrentItem());
    outState.putParcelableArrayList(KEY_OBJECTS,mPagerAdapter.retainItems());
  }
  if (mSlidingPane != null)   outState.putBoolean(KEY_PANEL_EXPANDED,mSlidingPane.getPanelState() == SlidingUpPanelLayout.PanelState.EXPANDED);
}",0.90897597977244
164509,"@Override protected void onResume(){
  super.onResume();
  EventBus.getDefault().register(this);
}","@Override protected void onResume(){
  super.onResume();
  if (!EventBus.getDefault().isRegistered(this)) {
    EventBus.getDefault().register(this);
  }
}",0.7747035573122529
164510,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (mPagerAdapter == null || mPagerAdapter.getImgurItem(mCurrentPosition) == null) {
    LogUtil.w(TAG,""String_Node_Str"");
    return false;
  }
  final ImgurBaseObject imgurObj=mPagerAdapter.getImgurItem(mCurrentPosition);
switch (item.getItemId()) {
case R.id.favorite:
    if (user != null) {
      String url;
      if (imgurObj instanceof ImgurAlbum) {
        url=String.format(Endpoints.FAVORITE_ALBUM.getUrl(),imgurObj.getId());
      }
 else {
        url=String.format(Endpoints.FAVORITE_IMAGE.getUrl(),imgurObj.getId());
      }
      final RequestBody body=new FormEncodingBuilder().add(""String_Node_Str"",imgurObj.getId()).build();
      if (mApiClient == null) {
        mApiClient=new ApiClient(url,ApiClient.HttpRequest.POST);
      }
 else {
        mApiClient.setUrl(url);
        mApiClient.setRequestType(ApiClient.HttpRequest.POST);
      }
      mApiClient.doWork(ImgurBusEvent.EventType.FAVORITE,imgurObj.getId(),body);
    }
 else {
      SnackBar.show(ViewActivity.this,R.string.user_not_logged_in);
    }
  return true;
case R.id.profile:
startActivity(ProfileActivity.createIntent(getApplicationContext(),imgurObj.getAccount()));
return true;
case R.id.reddit:
String url=String.format(""String_Node_Str"",imgurObj.getRedditLink());
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
if (browserIntent.resolveActivity(getPackageManager()) != null) {
startActivity(browserIntent);
}
 else {
SnackBar.show(ViewActivity.this,new SnackBarItem.Builder().setMessage(getString(R.string.cant_launch_intent)).build());
}
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (mPagerAdapter == null || mPagerAdapter.getImgurItem(mCurrentPosition) == null) {
    LogUtil.w(TAG,""String_Node_Str"");
    return false;
  }
  final ImgurBaseObject imgurObj=mPagerAdapter.getImgurItem(mCurrentPosition);
switch (item.getItemId()) {
case R.id.favorite:
    if (user != null) {
      String url;
      if (imgurObj instanceof ImgurAlbum) {
        url=String.format(Endpoints.FAVORITE_ALBUM.getUrl(),imgurObj.getId());
      }
 else {
        url=String.format(Endpoints.FAVORITE_IMAGE.getUrl(),imgurObj.getId());
      }
      final RequestBody body=new FormEncodingBuilder().add(""String_Node_Str"",imgurObj.getId()).build();
      if (mApiClient == null) {
        mApiClient=new ApiClient(url,ApiClient.HttpRequest.POST);
      }
 else {
        mApiClient.setUrl(url);
        mApiClient.setRequestType(ApiClient.HttpRequest.POST);
      }
      mApiClient.doWork(ImgurBusEvent.EventType.FAVORITE,imgurObj.getId(),body);
    }
 else {
      SnackBar.show(ViewActivity.this,R.string.user_not_logged_in);
    }
  return true;
case R.id.profile:
startActivity(ProfileActivity.createIntent(getApplicationContext(),imgurObj.getAccount()));
return true;
case R.id.reddit:
if (TextUtils.isEmpty(imgurObj.getRedditLink())) {
LogUtil.w(TAG,""String_Node_Str"");
return false;
}
String url=String.format(""String_Node_Str"",imgurObj.getRedditLink());
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
if (browserIntent.resolveActivity(getPackageManager()) != null) {
startActivity(browserIntent);
}
 else {
SnackBar.show(ViewActivity.this,new SnackBarItem.Builder().setMessage(getString(R.string.cant_launch_intent)).build());
}
return true;
}
return super.onOptionsItemSelected(item);
}",0.9707500724008108
164511,"@Override public void onLinkTap(View view,String url){
  if (!TextUtils.isEmpty(url)) {
    LinkUtils.LinkMatch match=LinkUtils.findImgurLinkMatch(url);
switch (match) {
case GALLERY:
case ALBUM:
      Intent intent=ViewActivity.createIntent(getApplicationContext(),url,match == LinkUtils.LinkMatch.ALBUM).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);
  break;
case IMAGE_URL:
PopupImageDialogFragment.getInstance(url,url.endsWith(""String_Node_Str""),true,false).show(getFragmentManager(),""String_Node_Str"");
break;
case VIDEO_URL:
PopupImageDialogFragment.getInstance(url,true,true,true).show(getFragmentManager(),""String_Node_Str"");
break;
case IMAGE:
String[] split=url.split(""String_Node_Str"");
PopupImageDialogFragment.getInstance(split[split.length - 1],false,false,false).show(getFragmentManager(),""String_Node_Str"");
break;
case NONE:
default :
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
if (browserIntent.resolveActivity(getPackageManager()) != null) {
startActivity(browserIntent);
}
 else {
SnackBar.show(ViewActivity.this,R.string.cant_launch_intent);
}
break;
}
}
 else {
onListItemClick(mCommentList.getPositionForView(view) - mCommentList.getHeaderViewsCount());
}
}","@Override public void onLinkTap(View view,String url){
  if (!TextUtils.isEmpty(url) && !isFinishing()) {
    LinkUtils.LinkMatch match=LinkUtils.findImgurLinkMatch(url);
switch (match) {
case GALLERY:
case ALBUM:
      Intent intent=ViewActivity.createIntent(getApplicationContext(),url,match == LinkUtils.LinkMatch.ALBUM).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);
  break;
case IMAGE_URL:
PopupImageDialogFragment.getInstance(url,url.endsWith(""String_Node_Str""),true,false).show(getFragmentManager(),""String_Node_Str"");
break;
case VIDEO_URL:
PopupImageDialogFragment.getInstance(url,true,true,true).show(getFragmentManager(),""String_Node_Str"");
break;
case IMAGE:
String[] split=url.split(""String_Node_Str"");
PopupImageDialogFragment.getInstance(split[split.length - 1],false,false,false).show(getFragmentManager(),""String_Node_Str"");
break;
case NONE:
default :
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
if (browserIntent.resolveActivity(getPackageManager()) != null) {
startActivity(browserIntent);
}
 else {
SnackBar.show(ViewActivity.this,R.string.cant_launch_intent);
}
break;
}
}
 else {
onListItemClick(mCommentList.getPositionForView(view) - mCommentList.getHeaderViewsCount());
}
}",0.9927184466019418
164512,"@Override public void onVideoDownloadComplete(File file){
  displayVideo(file);
}","@Override public void onVideoDownloadComplete(File file){
  if (isAdded() && isResumed()) {
    displayVideo(file);
  }
}",0.801980198019802
164513,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mCommentArray.size() > 0) {
    long key=mCommentArray.keyAt(0);
    outState.putParcelableArrayList(KEY_COMMENT,mCommentArray.get(key));
  }
 else   if (!mCommentAdapter.isEmpty()) {
    outState.putParcelableArrayList(KEY_COMMENT,mCommentAdapter.retainItems());
  }
  outState.putBoolean(KEY_LOAD_COMMENTS,mLoadComments);
  outState.putString(KEY_SORT,mCommentSort.getSort());
  if (mPagerAdapter != null && !mPagerAdapter.isEmpty()) {
    outState.putInt(KEY_POSITION,mViewPager.getCurrentItem());
    outState.putParcelableArrayList(KEY_OBJECTS,mPagerAdapter.retainItems());
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mCommentArray.size() > 0) {
    long key=mCommentArray.keyAt(0);
    outState.putParcelableArrayList(KEY_COMMENT,mCommentArray.get(key));
  }
 else   if (mCommentAdapter != null && !mCommentAdapter.isEmpty()) {
    outState.putParcelableArrayList(KEY_COMMENT,mCommentAdapter.retainItems());
  }
  outState.putBoolean(KEY_LOAD_COMMENTS,mLoadComments);
  outState.putString(KEY_SORT,mCommentSort.getSort());
  if (mPagerAdapter != null && !mPagerAdapter.isEmpty()) {
    outState.putInt(KEY_POSITION,mViewPager.getCurrentItem());
    outState.putParcelableArrayList(KEY_OBJECTS,mPagerAdapter.retainItems());
  }
}",0.9808646350106308
164514,"/** 
 * Deletes all of the cache, including the unused partition (external/internal)
 */
public void deleteAllCache(){
  mImageLoader.clearDiskCache();
  mImageLoader.clearMemoryCache();
  VideoCache.getInstance().deleteCache();
  String cacheKey=mPref.getString(SettingsActivity.KEY_CACHE_LOC,SettingsActivity.CACHE_LOC_INTERNAL);
  if (SettingsActivity.CACHE_LOC_EXTERNAL.equals(cacheKey)) {
    FileUtil.deleteDirectory(getCacheDir());
    File videoCache=new File(getCacheDir(),""String_Node_Str"");
    FileUtil.deleteDirectory(videoCache);
  }
 else   if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    if (FileUtil.isFileValid(getExternalCacheDir())) {
      File cache=getExternalCacheDir();
      FileUtil.deleteDirectory(cache);
      File videoCache=new File(cache,""String_Node_Str"");
      FileUtil.deleteDirectory(videoCache);
    }
  }
}","/** 
 * Deletes all of the cache, including the unused partition (external/internal)
 */
public void deleteAllCache(){
  ImageLoader imageLoader=getImageLoader();
  imageLoader.clearDiskCache();
  imageLoader.clearMemoryCache();
  VideoCache.getInstance().deleteCache();
  String cacheKey=mPref.getString(SettingsActivity.KEY_CACHE_LOC,SettingsActivity.CACHE_LOC_INTERNAL);
  if (SettingsActivity.CACHE_LOC_EXTERNAL.equals(cacheKey)) {
    FileUtil.deleteDirectory(getCacheDir());
    File videoCache=new File(getCacheDir(),""String_Node_Str"");
    FileUtil.deleteDirectory(videoCache);
  }
 else   if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    if (FileUtil.isFileValid(getExternalCacheDir())) {
      File cache=getExternalCacheDir();
      FileUtil.deleteDirectory(cache);
      File videoCache=new File(cache,""String_Node_Str"");
      FileUtil.deleteDirectory(videoCache);
    }
  }
}",0.9733924611973392
164515,"public static OpenImgurApp getInstance(Context context){
  return (OpenImgurApp)context.getApplicationContext();
}","public static OpenImgurApp getInstance(Context context){
  return context != null ? (OpenImgurApp)context.getApplicationContext() : instance;
}",0.8871595330739299
164516,"/** 
 * Changes the comment list to the previous thread of comments
 * @param comment
 */
private void previousComments(final ImgurComment comment){
  if (mIsCommentsAnimating)   return;
  mIsCommentsAnimating=true;
  mSelectedComment=null;
  mCommentAdapter.setSelectedIndex(-1);
  mCommentList.animate().translationX(mCommentList.getWidth()).setDuration(250).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      animation.removeAllListeners();
      if (mPreviousCommentPositionArray.size() <= 1) {
        mCommentList.removeHeaderView(mCommentListHeader);
      }
      mCommentAdapter.clear();
      mCommentAdapter.addItems(mCommentArray.get(comment.getParentId()));
      mCommentArray.remove(comment.getParentId());
      mCommentAdapter.notifyDataSetChanged();
      mCommentList.setSelection(mPreviousCommentPositionArray.get(comment.getParentId()));
      mPreviousCommentPositionArray.remove(comment.getParentId());
      Animator anim=ObjectAnimator.ofFloat(mCommentList,""String_Node_Str"",-mCommentList.getWidth(),0);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          super.onAnimationEnd(animation);
          animation.removeAllListeners();
          mIsCommentsAnimating=false;
        }
      }
);
      anim.setDuration(250).start();
    }
  }
).start();
}","/** 
 * Changes the comment list to the previous thread of comments
 * @param comment
 */
private void previousComments(final ImgurComment comment){
  final Integer previousSelection=mPreviousCommentPositionArray.get(comment.getParentId());
  if (mIsCommentsAnimating || previousSelection == null) {
    LogUtil.w(TAG,""String_Node_Str"");
    return;
  }
  mIsCommentsAnimating=true;
  mSelectedComment=null;
  mCommentAdapter.setSelectedIndex(-1);
  mCommentList.animate().translationX(mCommentList.getWidth()).setDuration(250).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      animation.removeAllListeners();
      if (mPreviousCommentPositionArray.size() <= 1) {
        mCommentList.removeHeaderView(mCommentListHeader);
      }
      mCommentAdapter.clear();
      mCommentAdapter.addItems(mCommentArray.get(comment.getParentId()));
      mCommentArray.remove(comment.getParentId());
      mCommentAdapter.notifyDataSetChanged();
      mCommentList.setSelection(previousSelection);
      mPreviousCommentPositionArray.remove(comment.getParentId());
      Animator anim=ObjectAnimator.ofFloat(mCommentList,""String_Node_Str"",-mCommentList.getWidth(),0);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          super.onAnimationEnd(animation);
          animation.removeAllListeners();
          mIsCommentsAnimating=false;
        }
      }
);
      anim.setDuration(250).start();
    }
  }
).start();
}",0.899803536345776
164517,"@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  if (savedInstanceState == null) {
    mCommentSort=CommentSort.getSortFromString(app.getPreferences().getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(KEY_LOAD_COMMENTS,true);
    if (!TextUtils.isEmpty(mGalleryId)) {
      mApiClient=new ApiClient(String.format(Endpoints.GALLERY_ITEM_DETAILS.getUrl(),mGalleryId),ApiClient.HttpRequest.GET);
      mApiClient.doWork(ImgurBusEvent.EventType.GALLERY_ITEM_INFO,null,null);
      mGalleryId=null;
    }
 else {
      mViewPager.setAdapter(mPagerAdapter);
      if (mCurrentPosition == 0) {
        loadComments();
      }
 else {
        mViewPager.setCurrentItem(mCurrentPosition);
      }
    }
  }
 else {
    mCommentSort=CommentSort.getSortFromString(savedInstanceState.getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=savedInstanceState.getBoolean(KEY_LOAD_COMMENTS,true);
    mIsResuming=true;
    mCurrentPosition=savedInstanceState.getInt(KEY_POSITION,0);
    ArrayList<ImgurBaseObject> objects=savedInstanceState.getParcelableArrayList(KEY_OBJECTS);
    mPagerAdapter=new BrowsingAdapter(getFragmentManager(),objects);
    mViewPager.setAdapter(mPagerAdapter);
    mViewPager.setCurrentItem(mCurrentPosition);
    if (mSideGalleryFragment != null) {
      mSideGalleryFragment.addGalleryItems(objects);
    }
    List<ImgurComment> comments=savedInstanceState.getParcelableArrayList(KEY_COMMENT);
    if (comments != null) {
      mCommentAdapter=new CommentAdapter(getApplicationContext(),comments,this);
      mCommentList.setAdapter(mCommentAdapter);
    }
    if (mLoadComments) {
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
    }
 else {
      mMultiView.setErrorText(R.id.errorMessage,R.string.comments_off);
      mMultiView.setViewState(MultiStateView.ViewState.ERROR);
    }
  }
}","@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  if (savedInstanceState == null) {
    mCommentSort=CommentSort.getSortFromString(app.getPreferences().getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(KEY_LOAD_COMMENTS,true);
    if (!TextUtils.isEmpty(mGalleryId)) {
      mApiClient=new ApiClient(String.format(Endpoints.GALLERY_ITEM_DETAILS.getUrl(),mGalleryId),ApiClient.HttpRequest.GET);
      mApiClient.doWork(ImgurBusEvent.EventType.GALLERY_ITEM_INFO,null,null);
      mGalleryId=null;
    }
 else {
      mViewPager.setAdapter(mPagerAdapter);
      if (mCurrentPosition == 0) {
        loadComments();
      }
 else {
        mViewPager.setCurrentItem(mCurrentPosition);
      }
    }
  }
 else {
    mCommentSort=CommentSort.getSortFromString(savedInstanceState.getString(KEY_SORT,CommentSort.NEW.getSort()));
    mLoadComments=savedInstanceState.getBoolean(KEY_LOAD_COMMENTS,true);
    mIsResuming=true;
    mCurrentPosition=savedInstanceState.getInt(KEY_POSITION,0);
    ArrayList<ImgurBaseObject> objects=savedInstanceState.getParcelableArrayList(KEY_OBJECTS);
    mPagerAdapter=new BrowsingAdapter(getFragmentManager(),objects);
    mViewPager.setAdapter(mPagerAdapter);
    mViewPager.setCurrentItem(mCurrentPosition);
    if (mSideGalleryFragment != null) {
      mSideGalleryFragment.addGalleryItems(objects);
    }
    List<ImgurComment> comments=savedInstanceState.getParcelableArrayList(KEY_COMMENT);
    if (comments != null) {
      mCommentAdapter=new CommentAdapter(getApplicationContext(),comments,this);
      mCommentList.setAdapter(mCommentAdapter);
      mCommentList.removeHeaderView(mCommentListHeader);
    }
    if (mLoadComments) {
      mMultiView.setViewState(MultiStateView.ViewState.CONTENT);
    }
 else {
      mMultiView.setErrorText(R.id.errorMessage,R.string.comments_off);
      mMultiView.setViewState(MultiStateView.ViewState.ERROR);
    }
  }
}",0.9859015582488252
164518,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view);
  mSideGalleryFragment=(SideGalleryFragment)getFragmentManager().findFragmentById(R.id.sideGallery);
  mMultiView.setErrorButtonText(R.id.errorButton,R.string.load_comments);
  findViewById(R.id.topContainer).setBackgroundColor(getResources().getColor(theme.primaryColor));
  mCommentListHeader=(TextViewRoboto)View.inflate(getApplicationContext(),R.layout.previous_comments_header,null);
  Drawable[] drawables=mCommentListHeader.getCompoundDrawables();
  if (drawables != null && drawables.length > 0 && drawables[0] instanceof LayerDrawable) {
    GradientDrawable drawable=(GradientDrawable)((LayerDrawable)drawables[0]).getDrawable(0);
    drawable.setColor(getResources().getColor(theme.accentColor));
  }
  mCommentList.addHeaderView(mCommentListHeader);
  mCommentList.removeHeaderView(mCommentListHeader);
  mViewPager.setPageTransformer(true,new ZoomOutPageTransformer());
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      if (!mIsResuming) {
        mCurrentPosition=position;
        loadComments();
        invalidateOptionsMenu();
        if (mSideGalleryFragment != null) {
          mSideGalleryFragment.onPositionChanged(position);
        }
      }
      mIsResuming=false;
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mCommentList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long l){
      onListItemClick(position - mCommentList.getHeaderViewsCount());
    }
  }
);
  initSlidingView();
  handleIntent(getIntent(),savedInstanceState);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view);
  mSideGalleryFragment=(SideGalleryFragment)getFragmentManager().findFragmentById(R.id.sideGallery);
  mMultiView.setErrorButtonText(R.id.errorButton,R.string.load_comments);
  findViewById(R.id.topContainer).setBackgroundColor(getResources().getColor(theme.primaryColor));
  mCommentListHeader=(TextViewRoboto)View.inflate(getApplicationContext(),R.layout.previous_comments_header,null);
  Drawable[] drawables=mCommentListHeader.getCompoundDrawables();
  if (drawables != null && drawables.length > 0 && drawables[0] instanceof LayerDrawable) {
    GradientDrawable drawable=(GradientDrawable)((LayerDrawable)drawables[0]).getDrawable(0);
    drawable.setColor(getResources().getColor(theme.accentColor));
  }
  mCommentList.addHeaderView(mCommentListHeader);
  mViewPager.setPageTransformer(true,new ZoomOutPageTransformer());
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      if (!mIsResuming) {
        mCurrentPosition=position;
        loadComments();
        invalidateOptionsMenu();
        if (mSideGalleryFragment != null) {
          mSideGalleryFragment.onPositionChanged(position);
        }
      }
      mIsResuming=false;
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mCommentList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long l){
      onListItemClick(position - mCommentList.getHeaderViewsCount());
    }
  }
);
  initSlidingView();
  handleIntent(getIntent(),savedInstanceState);
}",0.986392811296534
164519,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mCommentAdapter != null && !mCommentAdapter.isEmpty()) {
    outState.putParcelableArrayList(KEY_COMMENT,mCommentAdapter.retainItems());
  }
  outState.putBoolean(KEY_LOAD_COMMENTS,mLoadComments);
  outState.putString(KEY_SORT,mCommentSort.getSort());
  if (mPagerAdapter != null && !mPagerAdapter.isEmpty()) {
    outState.putInt(KEY_POSITION,mViewPager.getCurrentItem());
    outState.putParcelableArrayList(KEY_OBJECTS,mPagerAdapter.retainItems());
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mCommentArray.size() > 0) {
    long key=mCommentArray.keyAt(0);
    outState.putParcelableArrayList(KEY_COMMENT,mCommentArray.get(key));
  }
 else   if (!mCommentAdapter.isEmpty()) {
    outState.putParcelableArrayList(KEY_COMMENT,mCommentAdapter.retainItems());
  }
  outState.putBoolean(KEY_LOAD_COMMENTS,mLoadComments);
  outState.putString(KEY_SORT,mCommentSort.getSort());
  if (mPagerAdapter != null && !mPagerAdapter.isEmpty()) {
    outState.putInt(KEY_POSITION,mViewPager.getCurrentItem());
    outState.putParcelableArrayList(KEY_OBJECTS,mPagerAdapter.retainItems());
  }
}",0.8257756563245824
164520,"/** 
 * Handles the Bundle arguments if they exists
 * @param savedInstanceState
 */
private void handleBundle(Bundle savedInstanceState){
  int uploadType=UPLOAD_TYPE_LINK;
  if (savedInstanceState == null) {
    if (getIntent().getExtras() != null) {
      Intent intent=getIntent();
      if (Intent.ACTION_SEND.equals(intent.getAction())) {
        String type=intent.getType();
        LogUtil.v(TAG,""String_Node_Str"" + type);
        if (""String_Node_Str"".equals(type)) {
          String link=intent.getStringExtra(Intent.EXTRA_TEXT);
          init(true);
          mLink.setText(link);
        }
 else {
          Uri photoUri=intent.getParcelableExtra(Intent.EXTRA_STREAM);
          init(false);
          decodeUri(photoUri);
        }
        return;
      }
 else {
        uploadType=getIntent().getExtras().getInt(KEY_UPLOAD_TYPE,UPLOAD_TYPE_LINK);
      }
    }
    if (uploadType != UPLOAD_TYPE_LINK) {
      int requestCode=uploadType == UPLOAD_TYPE_GALLERY ? REQUEST_CODE_GALLERY : REQUEST_CODE_CAMERA;
      startActivityForResult(createPhotoIntent(uploadType),requestCode);
    }
  }
 else {
    uploadType=savedInstanceState.getInt(KEY_UPLOAD_TYPE,UPLOAD_TYPE_LINK);
    mIsUploading=savedInstanceState.getBoolean(KEY_IS_UPLOADING,false);
switch (uploadType) {
case UPLOAD_TYPE_CAMERA:
      mCameraFile=new File(savedInstanceState.getString(KEY_FILE_PATH));
    new LoadImageTask(this).execute(mCameraFile);
  mLink.setVisibility(View.GONE);
break;
case UPLOAD_TYPE_GALLERY:
mTempFile=new File(savedInstanceState.getString(KEY_FILE_PATH));
new LoadImageTask(this).execute(mTempFile);
mLink.setVisibility(View.GONE);
break;
case UPLOAD_TYPE_LINK:
break;
}
if (mIsUploading) {
showDialogFragment(LoadingDialogFragment.createInstance(R.string.uploading,false),DFRAGMENT_UPLOADING);
}
}
init(uploadType == UPLOAD_TYPE_LINK);
}","/** 
 * Handles the Bundle arguments if they exists
 * @param savedInstanceState
 */
private void handleBundle(Bundle savedInstanceState){
  int uploadType=UPLOAD_TYPE_LINK;
  if (savedInstanceState == null) {
    if (getIntent().getExtras() != null) {
      Intent intent=getIntent();
      if (Intent.ACTION_SEND.equals(intent.getAction())) {
        String type=intent.getType();
        LogUtil.v(TAG,""String_Node_Str"" + type);
        if (""String_Node_Str"".equals(type)) {
          String link=intent.getStringExtra(Intent.EXTRA_TEXT);
          init(true);
          mLink.setText(link);
        }
 else {
          Uri photoUri=intent.getParcelableExtra(Intent.EXTRA_STREAM);
          init(false);
          decodeUri(photoUri);
        }
        return;
      }
 else {
        uploadType=getIntent().getExtras().getInt(KEY_UPLOAD_TYPE,UPLOAD_TYPE_LINK);
      }
    }
    if (uploadType != UPLOAD_TYPE_LINK) {
      int requestCode=uploadType == UPLOAD_TYPE_GALLERY ? REQUEST_CODE_GALLERY : REQUEST_CODE_CAMERA;
      Intent intent=createPhotoIntent(uploadType);
      if (intent.resolveActivity(getPackageManager()) != null) {
        startActivityForResult(createPhotoIntent(uploadType),requestCode);
      }
 else {
        finish();
        Toast.makeText(getApplicationContext(),R.string.cant_launch_intent,Toast.LENGTH_SHORT).show();
      }
    }
  }
 else {
    uploadType=savedInstanceState.getInt(KEY_UPLOAD_TYPE,UPLOAD_TYPE_LINK);
    mIsUploading=savedInstanceState.getBoolean(KEY_IS_UPLOADING,false);
switch (uploadType) {
case UPLOAD_TYPE_CAMERA:
      mCameraFile=new File(savedInstanceState.getString(KEY_FILE_PATH));
    new LoadImageTask(this).execute(mCameraFile);
  mLink.setVisibility(View.GONE);
break;
case UPLOAD_TYPE_GALLERY:
mTempFile=new File(savedInstanceState.getString(KEY_FILE_PATH));
new LoadImageTask(this).execute(mTempFile);
mLink.setVisibility(View.GONE);
break;
case UPLOAD_TYPE_LINK:
break;
}
if (mIsUploading) {
showDialogFragment(LoadingDialogFragment.createInstance(R.string.uploading,false),DFRAGMENT_UPLOADING);
}
}
init(uploadType == UPLOAD_TYPE_LINK);
}",0.9335018963337548
164521,"/** 
 * Adds a list of items to the adapter list
 * @param items
 */
public void addItems(List<T> items){
  if (mItems == null) {
    mItems=items;
  }
 else {
    mItems.addAll(items);
  }
  notifyDataSetChanged();
}","/** 
 * Adds a list of items to the adapter list
 * @param items
 */
public void addItems(List<T> items){
  if (items == null || items.isEmpty()) {
    LogUtil.w(TAG,""String_Node_Str"");
    return;
  }
  if (mItems == null) {
    mItems=items;
  }
 else {
    mItems.addAll(items);
  }
  notifyDataSetChanged();
}",0.8188679245283019
164522,"public void deleteCache(){
  FileUtil.deleteDirectory(mCacheDir);
}","public void deleteCache(){
  FileUtil.deleteDirectory(mCacheDir);
  mCacheDir.mkdirs();
}",0.8589743589743589
164523,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  dbm=new yourCustomSqlLiteHelperclass(AndroidDatabaseManager.this);
  mainscrollview=new ScrollView(AndroidDatabaseManager.this);
  mainLayout=new LinearLayout(AndroidDatabaseManager.this);
  mainLayout.setOrientation(LinearLayout.VERTICAL);
  mainLayout.setBackgroundColor(Color.WHITE);
  mainLayout.setScrollContainer(true);
  mainscrollview.addView(mainLayout);
  setContentView(mainscrollview);
  final LinearLayout firstrow=new LinearLayout(AndroidDatabaseManager.this);
  firstrow.setPadding(0,10,0,20);
  LinearLayout.LayoutParams firstrowlp=new LinearLayout.LayoutParams(0,150);
  firstrowlp.weight=1;
  TextView maintext=new TextView(AndroidDatabaseManager.this);
  maintext.setText(""String_Node_Str"");
  maintext.setTextSize(22);
  maintext.setLayoutParams(firstrowlp);
  select_table=new Spinner(AndroidDatabaseManager.this);
  select_table.setLayoutParams(firstrowlp);
  firstrow.addView(maintext);
  firstrow.addView(select_table);
  mainLayout.addView(firstrow);
  ArrayList<Cursor> alc;
  hsv=new HorizontalScrollView(AndroidDatabaseManager.this);
  tableLayout=new TableLayout(AndroidDatabaseManager.this);
  tableLayout.setHorizontalScrollBarEnabled(true);
  hsv.addView(tableLayout);
  final LinearLayout secondrow=new LinearLayout(AndroidDatabaseManager.this);
  secondrow.setPadding(0,20,0,10);
  LinearLayout.LayoutParams secondrowlp=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
  secondrowlp.weight=1;
  TextView secondrowtext=new TextView(AndroidDatabaseManager.this);
  secondrowtext.setText(""String_Node_Str"");
  secondrowtext.setTextSize(20);
  secondrowtext.setLayoutParams(secondrowlp);
  tv=new TextView(AndroidDatabaseManager.this);
  tv.setTextSize(20);
  tv.setLayoutParams(secondrowlp);
  secondrow.addView(secondrowtext);
  secondrow.addView(tv);
  mainLayout.addView(secondrow);
  final EditText customquerytext=new EditText(this);
  customquerytext.setVisibility(View.GONE);
  customquerytext.setHint(""String_Node_Str"");
  mainLayout.addView(customquerytext);
  final Button submitQuery=new Button(AndroidDatabaseManager.this);
  submitQuery.setVisibility(View.GONE);
  submitQuery.setText(""String_Node_Str"");
  submitQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(submitQuery);
  final TextView help=new TextView(AndroidDatabaseManager.this);
  help.setText(""String_Node_Str"");
  help.setPadding(0,5,0,5);
  final Spinner spinnertable=new Spinner(AndroidDatabaseManager.this);
  mainLayout.addView(spinnertable);
  mainLayout.addView(help);
  hsv.setPadding(0,10,0,10);
  hsv.setScrollbarFadingEnabled(false);
  hsv.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_INSET);
  mainLayout.addView(hsv);
  final LinearLayout thirdrow=new LinearLayout(AndroidDatabaseManager.this);
  previous=new Button(AndroidDatabaseManager.this);
  previous.setText(""String_Node_Str"");
  previous.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  previous.setLayoutParams(secondrowlp);
  next=new Button(AndroidDatabaseManager.this);
  next.setText(""String_Node_Str"");
  next.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  next.setLayoutParams(secondrowlp);
  TextView tvblank=new TextView(this);
  tvblank.setLayoutParams(secondrowlp);
  thirdrow.setPadding(0,10,0,10);
  thirdrow.addView(previous);
  thirdrow.addView(tvblank);
  thirdrow.addView(next);
  mainLayout.addView(thirdrow);
  tvmessage=new TextView(AndroidDatabaseManager.this);
  tvmessage.setText(""String_Node_Str"");
  String Query=""String_Node_Str"";
  tvmessage.setTextSize(18);
  mainLayout.addView(tvmessage);
  final Button customQuery=new Button(AndroidDatabaseManager.this);
  customQuery.setText(""String_Node_Str"");
  customQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(customQuery);
  customQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      indexInfo.isCustomQuery=true;
      secondrow.setVisibility(View.GONE);
      spinnertable.setVisibility(View.GONE);
      help.setVisibility(View.GONE);
      customquerytext.setVisibility(View.VISIBLE);
      submitQuery.setVisibility(View.VISIBLE);
      select_table.setSelection(0);
      customQuery.setVisibility(View.GONE);
    }
  }
);
  submitQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tableLayout.removeAllViews();
      customQuery.setVisibility(View.GONE);
      ArrayList<Cursor> alc2;
      String Query10=customquerytext.getText().toString();
      Log.d(""String_Node_Str"",Query10);
      alc2=dbm.getData(Query10);
      final Cursor c4=alc2.get(0);
      Cursor Message2=alc2.get(1);
      Message2.moveToLast();
      if (Message2.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        tvmessage.setText(""String_Node_Str"" + c4.getCount());
        if (c4.getCount() > 0) {
          indexInfo.maincursor=c4;
          refreshTable(1);
        }
      }
 else {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        tvmessage.setText(""String_Node_Str"" + Message2.getString(0));
      }
    }
  }
);
  tableRowParams=new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  tableRowParams.setMargins(0,0,2,0);
  alc=dbm.getData(Query);
  final Cursor c=alc.get(0);
  Cursor Message=alc.get(1);
  Message.moveToLast();
  String msg=Message.getString(0);
  Log.d(""String_Node_Str"",msg);
  ArrayList<String> tablenames=new ArrayList<String>();
  if (c != null) {
    c.moveToFirst();
    tablenames.add(""String_Node_Str"");
    do {
      tablenames.add(c.getString(0));
    }
 while (c.moveToNext());
  }
  ArrayAdapter<String> tablenamesadapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,tablenames){
    public View getView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      TextView adap=(TextView)v;
      adap.setTextSize(20);
      return adap;
    }
    public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getDropDownView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      return v;
    }
  }
;
  tablenamesadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  if (tablenamesadapter != null) {
    select_table.setAdapter(tablenamesadapter);
  }
  select_table.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      if (pos == 0 && !indexInfo.isCustomQuery) {
        secondrow.setVisibility(View.GONE);
        hsv.setVisibility(View.GONE);
        thirdrow.setVisibility(View.GONE);
        spinnertable.setVisibility(View.GONE);
        help.setVisibility(View.GONE);
        tvmessage.setVisibility(View.GONE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.GONE);
      }
      if (pos != 0) {
        secondrow.setVisibility(View.VISIBLE);
        spinnertable.setVisibility(View.VISIBLE);
        help.setVisibility(View.VISIBLE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.VISIBLE);
        hsv.setVisibility(View.VISIBLE);
        tvmessage.setVisibility(View.VISIBLE);
        thirdrow.setVisibility(View.VISIBLE);
        c.moveToPosition(pos - 1);
        indexInfo.cursorpostion=pos - 1;
        Log.d(""String_Node_Str"",""String_Node_Str"" + c.getString(0));
        indexInfo.table_name=c.getString(0);
        tvmessage.setText(""String_Node_Str"");
        tvmessage.setBackgroundColor(Color.WHITE);
        tableLayout.removeAllViews();
        ArrayList<String> spinnertablevalues=new ArrayList<String>();
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(getApplicationContext(),android.R.layout.simple_spinner_dropdown_item,spinnertablevalues);
        spinnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_item);
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,spinnertablevalues){
          public View getView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            TextView adap=(TextView)v;
            adap.setTextSize(20);
            return adap;
          }
          public View getDropDownView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getDropDownView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            return v;
          }
        }
;
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnertable.setAdapter(adapter);
        String Query2=""String_Node_Str"" + c.getString(0);
        Log.d(""String_Node_Str"",""String_Node_Str"" + Query2);
        ArrayList<Cursor> alc2=dbm.getData(Query2);
        final Cursor c2=alc2.get(0);
        indexInfo.maincursor=c2;
        if (c2 != null) {
          int counts=c2.getCount();
          indexInfo.isEmpty=false;
          Log.d(""String_Node_Str"",""String_Node_Str"" + counts);
          tv.setText(""String_Node_Str"" + counts);
          spinnertable.setOnItemSelectedListener((new AdapterView.OnItemSelectedListener(){
            @Override public void onItemSelected(            AdapterView<?> parentView,            View selectedItemView,            int position,            long id){
              ((TextView)parentView.getChildAt(0)).setTextColor(Color.rgb(0,0,0));
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query6=""String_Node_Str"" + indexInfo.table_name;
                          ArrayList<Cursor> aldropt=dbm.getData(Query6);
                          Cursor tempc=aldropt.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            refreshactivity();
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query7=""String_Node_Str"" + indexInfo.table_name;
                          Log.d(""String_Node_Str"",Query7);
                          ArrayList<Cursor> aldeletet=dbm.getData(Query7);
                          Cursor tempc=aldeletet.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            indexInfo.isEmpty=true;
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                final LinkedList<TextView> addnewrownames=new LinkedList<TextView>();
                final LinkedList<EditText> addnewrowvalues=new LinkedList<EditText>();
                final ScrollView addrowsv=new ScrollView(AndroidDatabaseManager.this);
                Cursor c4=indexInfo.maincursor;
                if (indexInfo.isEmpty) {
                  getcolumnnames();
                  for (int i=0; i < indexInfo.emptytablecolumnnames.size(); i++) {
                    String cname=indexInfo.emptytablecolumnnames.get(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
 else {
                  for (int i=0; i < c4.getColumnCount(); i++) {
                    String cname=c4.getColumnName(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
                final RelativeLayout addnewlayout=new RelativeLayout(AndroidDatabaseManager.this);
                RelativeLayout.LayoutParams addnewparams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                addnewparams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
                for (int i=0; i < addnewrownames.size(); i++) {
                  TextView tv=addnewrownames.get(i);
                  EditText et=addnewrowvalues.get(i);
                  int t=i + 400;
                  int k=i + 500;
                  int lid=i + 600;
                  tv.setId(t);
                  tv.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                  et.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setId(k);
                  final LinearLayout ll=new LinearLayout(AndroidDatabaseManager.this);
                  LinearLayout.LayoutParams tvl=new LinearLayout.LayoutParams(0,100);
                  tvl.weight=1;
                  ll.addView(tv,tvl);
                  ll.addView(et,tvl);
                  ll.setId(lid);
                  Log.d(""String_Node_Str"",""String_Node_Str"" + et.getText().toString());
                  RelativeLayout.LayoutParams rll=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                  rll.addRule(RelativeLayout.BELOW,ll.getId() - 1);
                  rll.setMargins(0,20,0,0);
                  addnewlayout.addView(ll,rll);
                }
                addnewlayout.setBackgroundColor(Color.WHITE);
                addrowsv.addView(addnewlayout);
                Log.d(""String_Node_Str"",""String_Node_Str"");
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setCancelable(false).setView(addrowsv).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          indexInfo.index=10;
                          String Query4=""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            TextView tv=addnewrownames.get(i);
                            tv.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + tv.getText().toString();
                            }
 else {
                              Query4=Query4 + tv.getText().toString() + ""String_Node_Str"";
                            }
                          }
                          Query4=Query4 + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            EditText et=addnewrowvalues.get(i);
                            et.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
 else {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
                          }
                          Log.d(""String_Node_Str"",Query4);
                          ArrayList<Cursor> altc=dbm.getData(Query4);
                          Cursor tempc=altc.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + indexInfo.table_name);
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
            }
            public void onNothingSelected(            AdapterView<?> arg0){
            }
          }
));
          TableRow tableheader=new TableRow(getApplicationContext());
          tableheader.setBackgroundColor(Color.BLACK);
          tableheader.setPadding(0,2,0,2);
          for (int k=0; k < c2.getColumnCount(); k++) {
            LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
            cell.setBackgroundColor(Color.WHITE);
            cell.setLayoutParams(tableRowParams);
            final TextView tableheadercolums=new TextView(getApplicationContext());
            tableheadercolums.setPadding(0,0,4,3);
            tableheadercolums.setText(""String_Node_Str"" + c2.getColumnName(k));
            tableheadercolums.setTextColor(Color.parseColor(""String_Node_Str""));
            cell.addView(tableheadercolums);
            tableheader.addView(cell);
          }
          tableLayout.addView(tableheader);
          c2.moveToFirst();
          paginatetable(c2.getCount());
        }
 else {
          help.setVisibility(View.GONE);
          tableLayout.removeAllViews();
          getcolumnnames();
          TableRow tableheader2=new TableRow(getApplicationContext());
          tableheader2.setBackgroundColor(Color.BLACK);
          tableheader2.setPadding(0,2,0,2);
          LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
          cell.setBackgroundColor(Color.WHITE);
          cell.setLayoutParams(tableRowParams);
          final TextView tableheadercolums=new TextView(getApplicationContext());
          tableheadercolums.setPadding(0,0,4,3);
          tableheadercolums.setText(""String_Node_Str"");
          tableheadercolums.setTextSize(30);
          tableheadercolums.setTextColor(Color.RED);
          cell.addView(tableheadercolums);
          tableheader2.addView(cell);
          tableLayout.addView(tableheader2);
          tv.setText(""String_Node_Str"" + 0);
        }
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  dbm=new yourCustomSqlLiteHelperclass(AndroidDatabaseManager.this);
  mainscrollview=new ScrollView(AndroidDatabaseManager.this);
  mainLayout=new LinearLayout(AndroidDatabaseManager.this);
  mainLayout.setOrientation(LinearLayout.VERTICAL);
  mainLayout.setBackgroundColor(Color.WHITE);
  mainLayout.setScrollContainer(true);
  mainscrollview.addView(mainLayout);
  setContentView(mainscrollview);
  final LinearLayout firstrow=new LinearLayout(AndroidDatabaseManager.this);
  firstrow.setPadding(0,10,0,20);
  LinearLayout.LayoutParams firstrowlp=new LinearLayout.LayoutParams(0,150);
  firstrowlp.weight=1;
  TextView maintext=new TextView(AndroidDatabaseManager.this);
  maintext.setText(""String_Node_Str"");
  maintext.setTextSize(22);
  maintext.setLayoutParams(firstrowlp);
  select_table=new Spinner(AndroidDatabaseManager.this);
  select_table.setLayoutParams(firstrowlp);
  firstrow.addView(maintext);
  firstrow.addView(select_table);
  mainLayout.addView(firstrow);
  ArrayList<Cursor> alc;
  hsv=new HorizontalScrollView(AndroidDatabaseManager.this);
  tableLayout=new TableLayout(AndroidDatabaseManager.this);
  tableLayout.setHorizontalScrollBarEnabled(true);
  hsv.addView(tableLayout);
  final LinearLayout secondrow=new LinearLayout(AndroidDatabaseManager.this);
  secondrow.setPadding(0,20,0,10);
  LinearLayout.LayoutParams secondrowlp=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
  secondrowlp.weight=1;
  TextView secondrowtext=new TextView(AndroidDatabaseManager.this);
  secondrowtext.setText(""String_Node_Str"");
  secondrowtext.setTextSize(20);
  secondrowtext.setLayoutParams(secondrowlp);
  tv=new TextView(AndroidDatabaseManager.this);
  tv.setTextSize(20);
  tv.setLayoutParams(secondrowlp);
  secondrow.addView(secondrowtext);
  secondrow.addView(tv);
  mainLayout.addView(secondrow);
  final EditText customquerytext=new EditText(this);
  customquerytext.setVisibility(View.GONE);
  customquerytext.setHint(""String_Node_Str"");
  mainLayout.addView(customquerytext);
  final Button submitQuery=new Button(AndroidDatabaseManager.this);
  submitQuery.setVisibility(View.GONE);
  submitQuery.setText(""String_Node_Str"");
  submitQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(submitQuery);
  final TextView help=new TextView(AndroidDatabaseManager.this);
  help.setText(""String_Node_Str"");
  help.setPadding(0,5,0,5);
  final Spinner spinnertable=new Spinner(AndroidDatabaseManager.this);
  mainLayout.addView(spinnertable);
  mainLayout.addView(help);
  hsv.setPadding(0,10,0,10);
  hsv.setScrollbarFadingEnabled(false);
  hsv.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_INSET);
  mainLayout.addView(hsv);
  final LinearLayout thirdrow=new LinearLayout(AndroidDatabaseManager.this);
  previous=new Button(AndroidDatabaseManager.this);
  previous.setText(""String_Node_Str"");
  previous.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  previous.setLayoutParams(secondrowlp);
  next=new Button(AndroidDatabaseManager.this);
  next.setText(""String_Node_Str"");
  next.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  next.setLayoutParams(secondrowlp);
  TextView tvblank=new TextView(this);
  tvblank.setLayoutParams(secondrowlp);
  thirdrow.setPadding(0,10,0,10);
  thirdrow.addView(previous);
  thirdrow.addView(tvblank);
  thirdrow.addView(next);
  mainLayout.addView(thirdrow);
  tvmessage=new TextView(AndroidDatabaseManager.this);
  tvmessage.setText(""String_Node_Str"");
  String Query=""String_Node_Str"";
  tvmessage.setTextSize(18);
  mainLayout.addView(tvmessage);
  final Button customQuery=new Button(AndroidDatabaseManager.this);
  customQuery.setText(""String_Node_Str"");
  customQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(customQuery);
  customQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      indexInfo.isCustomQuery=true;
      secondrow.setVisibility(View.GONE);
      spinnertable.setVisibility(View.GONE);
      help.setVisibility(View.GONE);
      customquerytext.setVisibility(View.VISIBLE);
      submitQuery.setVisibility(View.VISIBLE);
      select_table.setSelection(0);
      customQuery.setVisibility(View.GONE);
    }
  }
);
  submitQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tableLayout.removeAllViews();
      customQuery.setVisibility(View.GONE);
      ArrayList<Cursor> alc2;
      String Query10=customquerytext.getText().toString();
      Log.d(""String_Node_Str"",Query10);
      alc2=dbm.getData(Query10);
      final Cursor c4=alc2.get(0);
      Cursor Message2=alc2.get(1);
      Message2.moveToLast();
      if (Message2.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        if (c4 != null) {
          tvmessage.setText(""String_Node_Str"" + c4.getCount());
          if (c4.getCount() > 0) {
            indexInfo.maincursor=c4;
            refreshTable(1);
          }
        }
 else {
          tvmessage.setText(""String_Node_Str"");
          refreshTable(1);
        }
      }
 else {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        tvmessage.setText(""String_Node_Str"" + Message2.getString(0));
      }
    }
  }
);
  tableRowParams=new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  tableRowParams.setMargins(0,0,2,0);
  alc=dbm.getData(Query);
  final Cursor c=alc.get(0);
  Cursor Message=alc.get(1);
  Message.moveToLast();
  String msg=Message.getString(0);
  Log.d(""String_Node_Str"",msg);
  ArrayList<String> tablenames=new ArrayList<String>();
  if (c != null) {
    c.moveToFirst();
    tablenames.add(""String_Node_Str"");
    do {
      tablenames.add(c.getString(0));
    }
 while (c.moveToNext());
  }
  ArrayAdapter<String> tablenamesadapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,tablenames){
    public View getView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      TextView adap=(TextView)v;
      adap.setTextSize(20);
      return adap;
    }
    public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getDropDownView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      return v;
    }
  }
;
  tablenamesadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  if (tablenamesadapter != null) {
    select_table.setAdapter(tablenamesadapter);
  }
  select_table.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      if (pos == 0 && !indexInfo.isCustomQuery) {
        secondrow.setVisibility(View.GONE);
        hsv.setVisibility(View.GONE);
        thirdrow.setVisibility(View.GONE);
        spinnertable.setVisibility(View.GONE);
        help.setVisibility(View.GONE);
        tvmessage.setVisibility(View.GONE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.GONE);
      }
      if (pos != 0) {
        secondrow.setVisibility(View.VISIBLE);
        spinnertable.setVisibility(View.VISIBLE);
        help.setVisibility(View.VISIBLE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.VISIBLE);
        hsv.setVisibility(View.VISIBLE);
        tvmessage.setVisibility(View.VISIBLE);
        thirdrow.setVisibility(View.VISIBLE);
        c.moveToPosition(pos - 1);
        indexInfo.cursorpostion=pos - 1;
        Log.d(""String_Node_Str"",""String_Node_Str"" + c.getString(0));
        indexInfo.table_name=c.getString(0);
        tvmessage.setText(""String_Node_Str"");
        tvmessage.setBackgroundColor(Color.WHITE);
        tableLayout.removeAllViews();
        ArrayList<String> spinnertablevalues=new ArrayList<String>();
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(getApplicationContext(),android.R.layout.simple_spinner_dropdown_item,spinnertablevalues);
        spinnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_item);
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,spinnertablevalues){
          public View getView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            TextView adap=(TextView)v;
            adap.setTextSize(20);
            return adap;
          }
          public View getDropDownView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getDropDownView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            return v;
          }
        }
;
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnertable.setAdapter(adapter);
        String Query2=""String_Node_Str"" + c.getString(0);
        Log.d(""String_Node_Str"",""String_Node_Str"" + Query2);
        ArrayList<Cursor> alc2=dbm.getData(Query2);
        final Cursor c2=alc2.get(0);
        indexInfo.maincursor=c2;
        if (c2 != null) {
          int counts=c2.getCount();
          indexInfo.isEmpty=false;
          Log.d(""String_Node_Str"",""String_Node_Str"" + counts);
          tv.setText(""String_Node_Str"" + counts);
          spinnertable.setOnItemSelectedListener((new AdapterView.OnItemSelectedListener(){
            @Override public void onItemSelected(            AdapterView<?> parentView,            View selectedItemView,            int position,            long id){
              ((TextView)parentView.getChildAt(0)).setTextColor(Color.rgb(0,0,0));
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query6=""String_Node_Str"" + indexInfo.table_name;
                          ArrayList<Cursor> aldropt=dbm.getData(Query6);
                          Cursor tempc=aldropt.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            refreshactivity();
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query7=""String_Node_Str"" + indexInfo.table_name;
                          Log.d(""String_Node_Str"",Query7);
                          ArrayList<Cursor> aldeletet=dbm.getData(Query7);
                          Cursor tempc=aldeletet.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            indexInfo.isEmpty=true;
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                final LinkedList<TextView> addnewrownames=new LinkedList<TextView>();
                final LinkedList<EditText> addnewrowvalues=new LinkedList<EditText>();
                final ScrollView addrowsv=new ScrollView(AndroidDatabaseManager.this);
                Cursor c4=indexInfo.maincursor;
                if (indexInfo.isEmpty) {
                  getcolumnnames();
                  for (int i=0; i < indexInfo.emptytablecolumnnames.size(); i++) {
                    String cname=indexInfo.emptytablecolumnnames.get(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
 else {
                  for (int i=0; i < c4.getColumnCount(); i++) {
                    String cname=c4.getColumnName(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
                final RelativeLayout addnewlayout=new RelativeLayout(AndroidDatabaseManager.this);
                RelativeLayout.LayoutParams addnewparams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                addnewparams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
                for (int i=0; i < addnewrownames.size(); i++) {
                  TextView tv=addnewrownames.get(i);
                  EditText et=addnewrowvalues.get(i);
                  int t=i + 400;
                  int k=i + 500;
                  int lid=i + 600;
                  tv.setId(t);
                  tv.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                  et.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setId(k);
                  final LinearLayout ll=new LinearLayout(AndroidDatabaseManager.this);
                  LinearLayout.LayoutParams tvl=new LinearLayout.LayoutParams(0,100);
                  tvl.weight=1;
                  ll.addView(tv,tvl);
                  ll.addView(et,tvl);
                  ll.setId(lid);
                  Log.d(""String_Node_Str"",""String_Node_Str"" + et.getText().toString());
                  RelativeLayout.LayoutParams rll=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                  rll.addRule(RelativeLayout.BELOW,ll.getId() - 1);
                  rll.setMargins(0,20,0,0);
                  addnewlayout.addView(ll,rll);
                }
                addnewlayout.setBackgroundColor(Color.WHITE);
                addrowsv.addView(addnewlayout);
                Log.d(""String_Node_Str"",""String_Node_Str"");
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setCancelable(false).setView(addrowsv).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          indexInfo.index=10;
                          String Query4=""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            TextView tv=addnewrownames.get(i);
                            tv.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + tv.getText().toString();
                            }
 else {
                              Query4=Query4 + tv.getText().toString() + ""String_Node_Str"";
                            }
                          }
                          Query4=Query4 + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            EditText et=addnewrowvalues.get(i);
                            et.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
 else {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
                          }
                          Log.d(""String_Node_Str"",Query4);
                          ArrayList<Cursor> altc=dbm.getData(Query4);
                          Cursor tempc=altc.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + indexInfo.table_name);
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
            }
            public void onNothingSelected(            AdapterView<?> arg0){
            }
          }
));
          TableRow tableheader=new TableRow(getApplicationContext());
          tableheader.setBackgroundColor(Color.BLACK);
          tableheader.setPadding(0,2,0,2);
          for (int k=0; k < c2.getColumnCount(); k++) {
            LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
            cell.setBackgroundColor(Color.WHITE);
            cell.setLayoutParams(tableRowParams);
            final TextView tableheadercolums=new TextView(getApplicationContext());
            tableheadercolums.setPadding(0,0,4,3);
            tableheadercolums.setText(""String_Node_Str"" + c2.getColumnName(k));
            tableheadercolums.setTextColor(Color.parseColor(""String_Node_Str""));
            cell.addView(tableheadercolums);
            tableheader.addView(cell);
          }
          tableLayout.addView(tableheader);
          c2.moveToFirst();
          paginatetable(c2.getCount());
        }
 else {
          help.setVisibility(View.GONE);
          tableLayout.removeAllViews();
          getcolumnnames();
          TableRow tableheader2=new TableRow(getApplicationContext());
          tableheader2.setBackgroundColor(Color.BLACK);
          tableheader2.setPadding(0,2,0,2);
          LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
          cell.setBackgroundColor(Color.WHITE);
          cell.setLayoutParams(tableRowParams);
          final TextView tableheadercolums=new TextView(getApplicationContext());
          tableheadercolums.setPadding(0,0,4,3);
          tableheadercolums.setText(""String_Node_Str"");
          tableheadercolums.setTextSize(30);
          tableheadercolums.setTextColor(Color.RED);
          cell.addView(tableheadercolums);
          tableheader2.addView(cell);
          tableLayout.addView(tableheader2);
          tv.setText(""String_Node_Str"" + 0);
        }
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
}",0.9969816073483746
164524,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  dbm=new yourCustomSqlLiteHelperclass(AndroidDatabaseManager.this);
  mainscrollview=new ScrollView(AndroidDatabaseManager.this);
  mainLayout=new LinearLayout(AndroidDatabaseManager.this);
  mainLayout.setOrientation(LinearLayout.VERTICAL);
  mainLayout.setBackgroundColor(Color.WHITE);
  mainLayout.setScrollContainer(true);
  mainscrollview.addView(mainLayout);
  setContentView(mainscrollview);
  final LinearLayout firstrow=new LinearLayout(AndroidDatabaseManager.this);
  firstrow.setPadding(0,10,0,20);
  LinearLayout.LayoutParams firstrowlp=new LinearLayout.LayoutParams(0,150);
  firstrowlp.weight=1;
  TextView maintext=new TextView(AndroidDatabaseManager.this);
  maintext.setText(""String_Node_Str"");
  maintext.setTextSize(22);
  maintext.setLayoutParams(firstrowlp);
  select_table=new Spinner(AndroidDatabaseManager.this);
  select_table.setLayoutParams(firstrowlp);
  firstrow.addView(maintext);
  firstrow.addView(select_table);
  mainLayout.addView(firstrow);
  ArrayList<Cursor> alc;
  hsv=new HorizontalScrollView(AndroidDatabaseManager.this);
  tableLayout=new TableLayout(AndroidDatabaseManager.this);
  tableLayout.setHorizontalScrollBarEnabled(true);
  hsv.addView(tableLayout);
  final LinearLayout secondrow=new LinearLayout(AndroidDatabaseManager.this);
  secondrow.setPadding(0,20,0,10);
  LinearLayout.LayoutParams secondrowlp=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
  secondrowlp.weight=1;
  TextView secondrowtext=new TextView(AndroidDatabaseManager.this);
  secondrowtext.setText(""String_Node_Str"");
  secondrowtext.setTextSize(20);
  secondrowtext.setLayoutParams(secondrowlp);
  tv=new TextView(AndroidDatabaseManager.this);
  tv.setTextSize(20);
  tv.setLayoutParams(secondrowlp);
  secondrow.addView(secondrowtext);
  secondrow.addView(tv);
  mainLayout.addView(secondrow);
  final EditText customquerytext=new EditText(this);
  customquerytext.setVisibility(View.GONE);
  customquerytext.setHint(""String_Node_Str"");
  mainLayout.addView(customquerytext);
  final Button submitQuery=new Button(AndroidDatabaseManager.this);
  submitQuery.setVisibility(View.GONE);
  submitQuery.setText(""String_Node_Str"");
  submitQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(submitQuery);
  final TextView help=new TextView(AndroidDatabaseManager.this);
  help.setText(""String_Node_Str"");
  help.setPadding(0,5,0,5);
  final Spinner spinnertable=new Spinner(AndroidDatabaseManager.this);
  mainLayout.addView(spinnertable);
  mainLayout.addView(help);
  hsv.setPadding(0,10,0,10);
  hsv.setScrollbarFadingEnabled(false);
  hsv.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_INSET);
  mainLayout.addView(hsv);
  final LinearLayout thirdrow=new LinearLayout(AndroidDatabaseManager.this);
  previous=new Button(AndroidDatabaseManager.this);
  previous.setText(""String_Node_Str"");
  previous.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  previous.setLayoutParams(secondrowlp);
  next=new Button(AndroidDatabaseManager.this);
  next.setText(""String_Node_Str"");
  next.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  next.setLayoutParams(secondrowlp);
  TextView tvblank=new TextView(this);
  tvblank.setLayoutParams(secondrowlp);
  thirdrow.setPadding(0,10,0,10);
  thirdrow.addView(previous);
  thirdrow.addView(tvblank);
  thirdrow.addView(next);
  mainLayout.addView(thirdrow);
  tvmessage=new TextView(AndroidDatabaseManager.this);
  tvmessage.setText(""String_Node_Str"");
  String Query=""String_Node_Str"";
  tvmessage.setTextSize(18);
  mainLayout.addView(tvmessage);
  final Button customQuery=new Button(AndroidDatabaseManager.this);
  customQuery.setText(""String_Node_Str"");
  customQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(customQuery);
  customQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      indexInfo.isCustomQuery=true;
      secondrow.setVisibility(View.GONE);
      spinnertable.setVisibility(View.GONE);
      help.setVisibility(View.GONE);
      customquerytext.setVisibility(View.VISIBLE);
      submitQuery.setVisibility(View.VISIBLE);
      select_table.setSelection(0);
      customQuery.setVisibility(View.GONE);
    }
  }
);
  submitQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tableLayout.removeAllViews();
      customQuery.setVisibility(View.GONE);
      ArrayList<Cursor> alc2;
      String Query10=customquerytext.getText().toString();
      Log.d(""String_Node_Str"",Query10);
      alc2=dbm.getData(Query10);
      final Cursor c4=alc2.get(0);
      Cursor Message2=alc2.get(1);
      Message2.moveToLast();
      if (Message2.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        if (c4 != null) {
          tvmessage.setText(""String_Node_Str"" + c4.getCount());
          if (c4.getCount() > 0) {
            indexInfo.maincursor=c4;
            refreshTable(1);
          }
        }
 else {
          tvmessage.setText(""String_Node_Str"");
          refreshTable(1);
        }
      }
 else {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        tvmessage.setText(""String_Node_Str"" + Message2.getString(0));
      }
    }
  }
);
  tableRowParams=new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  tableRowParams.setMargins(0,0,2,0);
  alc=dbm.getData(Query);
  final Cursor c=alc.get(0);
  Cursor Message=alc.get(1);
  Message.moveToLast();
  String msg=Message.getString(0);
  Log.d(""String_Node_Str"",msg);
  ArrayList<String> tablenames=new ArrayList<String>();
  if (c != null) {
    c.moveToFirst();
    tablenames.add(""String_Node_Str"");
    do {
      tablenames.add(c.getString(0));
    }
 while (c.moveToNext());
  }
  ArrayAdapter<String> tablenamesadapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,tablenames){
    public View getView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      TextView adap=(TextView)v;
      adap.setTextSize(20);
      return adap;
    }
    public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getDropDownView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      return v;
    }
  }
;
  tablenamesadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  if (tablenamesadapter != null) {
    select_table.setAdapter(tablenamesadapter);
  }
  select_table.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      if (pos == 0 && !indexInfo.isCustomQuery) {
        secondrow.setVisibility(View.GONE);
        hsv.setVisibility(View.GONE);
        thirdrow.setVisibility(View.GONE);
        spinnertable.setVisibility(View.GONE);
        help.setVisibility(View.GONE);
        tvmessage.setVisibility(View.GONE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.GONE);
      }
      if (pos != 0) {
        secondrow.setVisibility(View.VISIBLE);
        spinnertable.setVisibility(View.VISIBLE);
        help.setVisibility(View.VISIBLE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.VISIBLE);
        hsv.setVisibility(View.VISIBLE);
        tvmessage.setVisibility(View.VISIBLE);
        thirdrow.setVisibility(View.VISIBLE);
        c.moveToPosition(pos - 1);
        indexInfo.cursorpostion=pos - 1;
        Log.d(""String_Node_Str"",""String_Node_Str"" + c.getString(0));
        indexInfo.table_name=c.getString(0);
        tvmessage.setText(""String_Node_Str"");
        tvmessage.setBackgroundColor(Color.WHITE);
        tableLayout.removeAllViews();
        ArrayList<String> spinnertablevalues=new ArrayList<String>();
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(getApplicationContext(),android.R.layout.simple_spinner_dropdown_item,spinnertablevalues);
        spinnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_item);
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,spinnertablevalues){
          public View getView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            TextView adap=(TextView)v;
            adap.setTextSize(20);
            return adap;
          }
          public View getDropDownView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getDropDownView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            return v;
          }
        }
;
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnertable.setAdapter(adapter);
        String Query2=""String_Node_Str"" + c.getString(0);
        Log.d(""String_Node_Str"",""String_Node_Str"" + Query2);
        ArrayList<Cursor> alc2=dbm.getData(Query2);
        final Cursor c2=alc2.get(0);
        indexInfo.maincursor=c2;
        if (c2 != null) {
          int counts=c2.getCount();
          indexInfo.isEmpty=false;
          Log.d(""String_Node_Str"",""String_Node_Str"" + counts);
          tv.setText(""String_Node_Str"" + counts);
          spinnertable.setOnItemSelectedListener((new AdapterView.OnItemSelectedListener(){
            @Override public void onItemSelected(            AdapterView<?> parentView,            View selectedItemView,            int position,            long id){
              ((TextView)parentView.getChildAt(0)).setTextColor(Color.rgb(0,0,0));
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query6=""String_Node_Str"" + indexInfo.table_name;
                          ArrayList<Cursor> aldropt=dbm.getData(Query6);
                          Cursor tempc=aldropt.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            refreshactivity();
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query7=""String_Node_Str"" + indexInfo.table_name;
                          Log.d(""String_Node_Str"",Query7);
                          ArrayList<Cursor> aldeletet=dbm.getData(Query7);
                          Cursor tempc=aldeletet.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            indexInfo.isEmpty=true;
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                final LinkedList<TextView> addnewrownames=new LinkedList<TextView>();
                final LinkedList<EditText> addnewrowvalues=new LinkedList<EditText>();
                final ScrollView addrowsv=new ScrollView(AndroidDatabaseManager.this);
                Cursor c4=indexInfo.maincursor;
                if (indexInfo.isEmpty) {
                  getcolumnnames();
                  for (int i=0; i < indexInfo.emptytablecolumnnames.size(); i++) {
                    String cname=indexInfo.emptytablecolumnnames.get(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
 else {
                  for (int i=0; i < c4.getColumnCount(); i++) {
                    String cname=c4.getColumnName(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
                final RelativeLayout addnewlayout=new RelativeLayout(AndroidDatabaseManager.this);
                RelativeLayout.LayoutParams addnewparams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                addnewparams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
                for (int i=0; i < addnewrownames.size(); i++) {
                  TextView tv=addnewrownames.get(i);
                  EditText et=addnewrowvalues.get(i);
                  int t=i + 400;
                  int k=i + 500;
                  int lid=i + 600;
                  tv.setId(t);
                  tv.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                  et.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setId(k);
                  final LinearLayout ll=new LinearLayout(AndroidDatabaseManager.this);
                  LinearLayout.LayoutParams tvl=new LinearLayout.LayoutParams(0,100);
                  tvl.weight=1;
                  ll.addView(tv,tvl);
                  ll.addView(et,tvl);
                  ll.setId(lid);
                  Log.d(""String_Node_Str"",""String_Node_Str"" + et.getText().toString());
                  RelativeLayout.LayoutParams rll=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                  rll.addRule(RelativeLayout.BELOW,ll.getId() - 1);
                  rll.setMargins(0,20,0,0);
                  addnewlayout.addView(ll,rll);
                }
                addnewlayout.setBackgroundColor(Color.WHITE);
                addrowsv.addView(addnewlayout);
                Log.d(""String_Node_Str"",""String_Node_Str"");
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setCancelable(false).setView(addrowsv).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          indexInfo.index=10;
                          String Query4=""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            TextView tv=addnewrownames.get(i);
                            tv.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + tv.getText().toString();
                            }
 else {
                              Query4=Query4 + tv.getText().toString() + ""String_Node_Str"";
                            }
                          }
                          Query4=Query4 + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            EditText et=addnewrowvalues.get(i);
                            et.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
 else {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
                          }
                          Log.d(""String_Node_Str"",Query4);
                          ArrayList<Cursor> altc=dbm.getData(Query4);
                          Cursor tempc=altc.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + indexInfo.table_name);
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
            }
            public void onNothingSelected(            AdapterView<?> arg0){
            }
          }
));
          TableRow tableheader=new TableRow(getApplicationContext());
          tableheader.setBackgroundColor(Color.BLACK);
          tableheader.setPadding(0,2,0,2);
          for (int k=0; k < c2.getColumnCount(); k++) {
            LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
            cell.setBackgroundColor(Color.WHITE);
            cell.setLayoutParams(tableRowParams);
            final TextView tableheadercolums=new TextView(getApplicationContext());
            tableheadercolums.setPadding(0,0,4,3);
            tableheadercolums.setText(""String_Node_Str"" + c2.getColumnName(k));
            tableheadercolums.setTextColor(Color.parseColor(""String_Node_Str""));
            cell.addView(tableheadercolums);
            tableheader.addView(cell);
          }
          tableLayout.addView(tableheader);
          c2.moveToFirst();
          paginatetable(c2.getCount());
        }
 else {
          help.setVisibility(View.GONE);
          tableLayout.removeAllViews();
          getcolumnnames();
          TableRow tableheader2=new TableRow(getApplicationContext());
          tableheader2.setBackgroundColor(Color.BLACK);
          tableheader2.setPadding(0,2,0,2);
          LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
          cell.setBackgroundColor(Color.WHITE);
          cell.setLayoutParams(tableRowParams);
          final TextView tableheadercolums=new TextView(getApplicationContext());
          tableheadercolums.setPadding(0,0,4,3);
          tableheadercolums.setText(""String_Node_Str"");
          tableheadercolums.setTextSize(30);
          tableheadercolums.setTextColor(Color.RED);
          cell.addView(tableheadercolums);
          tableheader2.addView(cell);
          tableLayout.addView(tableheader2);
          tv.setText(""String_Node_Str"" + 0);
        }
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  dbm=new yourCustomSqlLiteHelperclass(AndroidDatabaseManager.this);
  mainscrollview=new ScrollView(AndroidDatabaseManager.this);
  mainLayout=new LinearLayout(AndroidDatabaseManager.this);
  mainLayout.setOrientation(LinearLayout.VERTICAL);
  mainLayout.setBackgroundColor(Color.WHITE);
  mainLayout.setScrollContainer(true);
  mainscrollview.addView(mainLayout);
  setContentView(mainscrollview);
  final LinearLayout firstrow=new LinearLayout(AndroidDatabaseManager.this);
  firstrow.setPadding(0,10,0,20);
  LinearLayout.LayoutParams firstrowlp=new LinearLayout.LayoutParams(0,150);
  firstrowlp.weight=1;
  TextView maintext=new TextView(AndroidDatabaseManager.this);
  maintext.setText(""String_Node_Str"");
  maintext.setTextSize(22);
  maintext.setLayoutParams(firstrowlp);
  select_table=new Spinner(AndroidDatabaseManager.this);
  select_table.setLayoutParams(firstrowlp);
  firstrow.addView(maintext);
  firstrow.addView(select_table);
  mainLayout.addView(firstrow);
  ArrayList<Cursor> alc;
  hsv=new HorizontalScrollView(AndroidDatabaseManager.this);
  tableLayout=new TableLayout(AndroidDatabaseManager.this);
  tableLayout.setHorizontalScrollBarEnabled(true);
  hsv.addView(tableLayout);
  final LinearLayout secondrow=new LinearLayout(AndroidDatabaseManager.this);
  secondrow.setPadding(0,20,0,10);
  LinearLayout.LayoutParams secondrowlp=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
  secondrowlp.weight=1;
  TextView secondrowtext=new TextView(AndroidDatabaseManager.this);
  secondrowtext.setText(""String_Node_Str"");
  secondrowtext.setTextSize(20);
  secondrowtext.setLayoutParams(secondrowlp);
  tv=new TextView(AndroidDatabaseManager.this);
  tv.setTextSize(20);
  tv.setLayoutParams(secondrowlp);
  secondrow.addView(secondrowtext);
  secondrow.addView(tv);
  mainLayout.addView(secondrow);
  final EditText customquerytext=new EditText(this);
  customquerytext.setVisibility(View.GONE);
  customquerytext.setHint(""String_Node_Str"");
  mainLayout.addView(customquerytext);
  final Button submitQuery=new Button(AndroidDatabaseManager.this);
  submitQuery.setVisibility(View.GONE);
  submitQuery.setText(""String_Node_Str"");
  submitQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(submitQuery);
  final TextView help=new TextView(AndroidDatabaseManager.this);
  help.setText(""String_Node_Str"");
  help.setPadding(0,5,0,5);
  final Spinner spinnertable=new Spinner(AndroidDatabaseManager.this);
  mainLayout.addView(spinnertable);
  mainLayout.addView(help);
  hsv.setPadding(0,10,0,10);
  hsv.setScrollbarFadingEnabled(false);
  hsv.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_INSET);
  mainLayout.addView(hsv);
  final LinearLayout thirdrow=new LinearLayout(AndroidDatabaseManager.this);
  previous=new Button(AndroidDatabaseManager.this);
  previous.setText(""String_Node_Str"");
  previous.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  previous.setLayoutParams(secondrowlp);
  next=new Button(AndroidDatabaseManager.this);
  next.setText(""String_Node_Str"");
  next.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  next.setLayoutParams(secondrowlp);
  TextView tvblank=new TextView(this);
  tvblank.setLayoutParams(secondrowlp);
  thirdrow.setPadding(0,10,0,10);
  thirdrow.addView(previous);
  thirdrow.addView(tvblank);
  thirdrow.addView(next);
  mainLayout.addView(thirdrow);
  tvmessage=new TextView(AndroidDatabaseManager.this);
  tvmessage.setText(""String_Node_Str"");
  String Query=""String_Node_Str"";
  tvmessage.setTextSize(18);
  mainLayout.addView(tvmessage);
  final Button customQuery=new Button(AndroidDatabaseManager.this);
  customQuery.setText(""String_Node_Str"");
  customQuery.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  mainLayout.addView(customQuery);
  customQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      indexInfo.isCustomQuery=true;
      secondrow.setVisibility(View.GONE);
      spinnertable.setVisibility(View.GONE);
      help.setVisibility(View.GONE);
      customquerytext.setVisibility(View.VISIBLE);
      submitQuery.setVisibility(View.VISIBLE);
      select_table.setSelection(0);
      customQuery.setVisibility(View.GONE);
    }
  }
);
  submitQuery.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tableLayout.removeAllViews();
      customQuery.setVisibility(View.GONE);
      ArrayList<Cursor> alc2;
      String Query10=customquerytext.getText().toString();
      Log.d(""String_Node_Str"",Query10);
      alc2=dbm.getData(Query10);
      final Cursor c4=alc2.get(0);
      Cursor Message2=alc2.get(1);
      Message2.moveToLast();
      if (Message2.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        tvmessage.setText(""String_Node_Str"" + c4.getCount());
        if (c4.getCount() > 0) {
          indexInfo.maincursor=c4;
          refreshTable(1);
        }
      }
 else {
        tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        tvmessage.setText(""String_Node_Str"" + Message2.getString(0));
      }
    }
  }
);
  tableRowParams=new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  tableRowParams.setMargins(0,0,2,0);
  alc=dbm.getData(Query);
  final Cursor c=alc.get(0);
  Cursor Message=alc.get(1);
  Message.moveToLast();
  String msg=Message.getString(0);
  Log.d(""String_Node_Str"",msg);
  ArrayList<String> tablenames=new ArrayList<String>();
  if (c != null) {
    c.moveToFirst();
    tablenames.add(""String_Node_Str"");
    do {
      tablenames.add(c.getString(0));
    }
 while (c.moveToNext());
  }
  ArrayAdapter<String> tablenamesadapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,tablenames){
    public View getView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      TextView adap=(TextView)v;
      adap.setTextSize(20);
      return adap;
    }
    public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      View v=super.getDropDownView(position,convertView,parent);
      v.setBackgroundColor(Color.WHITE);
      return v;
    }
  }
;
  tablenamesadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  if (tablenamesadapter != null) {
    select_table.setAdapter(tablenamesadapter);
  }
  select_table.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      if (pos == 0 && !indexInfo.isCustomQuery) {
        secondrow.setVisibility(View.GONE);
        hsv.setVisibility(View.GONE);
        thirdrow.setVisibility(View.GONE);
        spinnertable.setVisibility(View.GONE);
        help.setVisibility(View.GONE);
        tvmessage.setVisibility(View.GONE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.GONE);
      }
      if (pos != 0) {
        secondrow.setVisibility(View.VISIBLE);
        spinnertable.setVisibility(View.VISIBLE);
        help.setVisibility(View.VISIBLE);
        customquerytext.setVisibility(View.GONE);
        submitQuery.setVisibility(View.GONE);
        customQuery.setVisibility(View.VISIBLE);
        hsv.setVisibility(View.VISIBLE);
        tvmessage.setVisibility(View.VISIBLE);
        thirdrow.setVisibility(View.VISIBLE);
        c.moveToPosition(pos - 1);
        indexInfo.cursorpostion=pos - 1;
        Log.d(""String_Node_Str"",""String_Node_Str"" + c.getString(0));
        indexInfo.table_name=c.getString(0);
        tvmessage.setText(""String_Node_Str"");
        tvmessage.setBackgroundColor(Color.WHITE);
        tableLayout.removeAllViews();
        ArrayList<String> spinnertablevalues=new ArrayList<String>();
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        spinnertablevalues.add(""String_Node_Str"");
        ArrayAdapter<String> spinnerArrayAdapter=new ArrayAdapter<String>(getApplicationContext(),android.R.layout.simple_spinner_dropdown_item,spinnertablevalues);
        spinnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_item);
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(AndroidDatabaseManager.this,android.R.layout.simple_spinner_item,spinnertablevalues){
          public View getView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            TextView adap=(TextView)v;
            adap.setTextSize(20);
            return adap;
          }
          public View getDropDownView(          int position,          View convertView,          ViewGroup parent){
            View v=super.getDropDownView(position,convertView,parent);
            v.setBackgroundColor(Color.WHITE);
            return v;
          }
        }
;
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnertable.setAdapter(adapter);
        String Query2=""String_Node_Str"" + c.getString(0);
        Log.d(""String_Node_Str"",""String_Node_Str"" + Query2);
        ArrayList<Cursor> alc2=dbm.getData(Query2);
        final Cursor c2=alc2.get(0);
        indexInfo.maincursor=c2;
        if (c2 != null) {
          int counts=c2.getCount();
          indexInfo.isEmpty=false;
          Log.d(""String_Node_Str"",""String_Node_Str"" + counts);
          tv.setText(""String_Node_Str"" + counts);
          spinnertable.setOnItemSelectedListener((new AdapterView.OnItemSelectedListener(){
            @Override public void onItemSelected(            AdapterView<?> parentView,            View selectedItemView,            int position,            long id){
              ((TextView)parentView.getChildAt(0)).setTextColor(Color.rgb(0,0,0));
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query6=""String_Node_Str"" + indexInfo.table_name;
                          ArrayList<Cursor> aldropt=dbm.getData(Query6);
                          Cursor tempc=aldropt.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            refreshactivity();
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          String Query7=""String_Node_Str"" + indexInfo.table_name;
                          Log.d(""String_Node_Str"",Query7);
                          ArrayList<Cursor> aldeletet=dbm.getData(Query7);
                          Cursor tempc=aldeletet.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(indexInfo.table_name + ""String_Node_Str"");
                            indexInfo.isEmpty=true;
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
              if (spinnertable.getSelectedItem().toString().equals(""String_Node_Str"")) {
                final LinkedList<TextView> addnewrownames=new LinkedList<TextView>();
                final LinkedList<EditText> addnewrowvalues=new LinkedList<EditText>();
                final ScrollView addrowsv=new ScrollView(AndroidDatabaseManager.this);
                Cursor c4=indexInfo.maincursor;
                if (indexInfo.isEmpty) {
                  getcolumnnames();
                  for (int i=0; i < indexInfo.emptytablecolumnnames.size(); i++) {
                    String cname=indexInfo.emptytablecolumnnames.get(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
 else {
                  for (int i=0; i < c4.getColumnCount(); i++) {
                    String cname=c4.getColumnName(i);
                    TextView tv=new TextView(getApplicationContext());
                    tv.setText(cname);
                    addnewrownames.add(tv);
                  }
                  for (int i=0; i < addnewrownames.size(); i++) {
                    EditText et=new EditText(getApplicationContext());
                    addnewrowvalues.add(et);
                  }
                }
                final RelativeLayout addnewlayout=new RelativeLayout(AndroidDatabaseManager.this);
                RelativeLayout.LayoutParams addnewparams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                addnewparams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
                for (int i=0; i < addnewrownames.size(); i++) {
                  TextView tv=addnewrownames.get(i);
                  EditText et=addnewrowvalues.get(i);
                  int t=i + 400;
                  int k=i + 500;
                  int lid=i + 600;
                  tv.setId(t);
                  tv.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                  et.setTextColor(Color.parseColor(""String_Node_Str""));
                  et.setId(k);
                  final LinearLayout ll=new LinearLayout(AndroidDatabaseManager.this);
                  LinearLayout.LayoutParams tvl=new LinearLayout.LayoutParams(0,100);
                  tvl.weight=1;
                  ll.addView(tv,tvl);
                  ll.addView(et,tvl);
                  ll.setId(lid);
                  Log.d(""String_Node_Str"",""String_Node_Str"" + et.getText().toString());
                  RelativeLayout.LayoutParams rll=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
                  rll.addRule(RelativeLayout.BELOW,ll.getId() - 1);
                  rll.setMargins(0,20,0,0);
                  addnewlayout.addView(ll,rll);
                }
                addnewlayout.setBackgroundColor(Color.WHITE);
                addrowsv.addView(addnewlayout);
                Log.d(""String_Node_Str"",""String_Node_Str"");
                runOnUiThread(new Runnable(){
                  @Override public void run(){
                    if (!isFinishing()) {
                      new AlertDialog.Builder(AndroidDatabaseManager.this).setTitle(""String_Node_Str"").setCancelable(false).setView(addrowsv).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          indexInfo.index=10;
                          String Query4=""String_Node_Str"" + indexInfo.table_name + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            TextView tv=addnewrownames.get(i);
                            tv.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + tv.getText().toString();
                            }
 else {
                              Query4=Query4 + tv.getText().toString() + ""String_Node_Str"";
                            }
                          }
                          Query4=Query4 + ""String_Node_Str"";
                          for (int i=0; i < addnewrownames.size(); i++) {
                            EditText et=addnewrowvalues.get(i);
                            et.getText().toString();
                            if (i == addnewrownames.size() - 1) {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
 else {
                              Query4=Query4 + ""String_Node_Str"" + et.getText().toString()+ ""String_Node_Str"";
                            }
                          }
                          Log.d(""String_Node_Str"",Query4);
                          ArrayList<Cursor> altc=dbm.getData(Query4);
                          Cursor tempc=altc.get(1);
                          tempc.moveToLast();
                          Log.d(""String_Node_Str"",tempc.getString(0));
                          if (tempc.getString(0).equalsIgnoreCase(""String_Node_Str"")) {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + indexInfo.table_name);
                            refreshTable(0);
                          }
 else {
                            tvmessage.setBackgroundColor(Color.parseColor(""String_Node_Str""));
                            tvmessage.setText(""String_Node_Str"" + tempc.getString(0));
                            spinnertable.setSelection(0);
                          }
                        }
                      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                        public void onClick(                        DialogInterface dialog,                        int which){
                          spinnertable.setSelection(0);
                        }
                      }
).create().show();
                    }
                  }
                }
);
              }
            }
            public void onNothingSelected(            AdapterView<?> arg0){
            }
          }
));
          TableRow tableheader=new TableRow(getApplicationContext());
          tableheader.setBackgroundColor(Color.BLACK);
          tableheader.setPadding(0,2,0,2);
          for (int k=0; k < c2.getColumnCount(); k++) {
            LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
            cell.setBackgroundColor(Color.WHITE);
            cell.setLayoutParams(tableRowParams);
            final TextView tableheadercolums=new TextView(getApplicationContext());
            tableheadercolums.setPadding(0,0,4,3);
            tableheadercolums.setText(""String_Node_Str"" + c2.getColumnName(k));
            tableheadercolums.setTextColor(Color.parseColor(""String_Node_Str""));
            cell.addView(tableheadercolums);
            tableheader.addView(cell);
          }
          tableLayout.addView(tableheader);
          c2.moveToFirst();
          paginatetable(c2.getCount());
        }
 else {
          help.setVisibility(View.GONE);
          tableLayout.removeAllViews();
          getcolumnnames();
          TableRow tableheader2=new TableRow(getApplicationContext());
          tableheader2.setBackgroundColor(Color.BLACK);
          tableheader2.setPadding(0,2,0,2);
          LinearLayout cell=new LinearLayout(AndroidDatabaseManager.this);
          cell.setBackgroundColor(Color.WHITE);
          cell.setLayoutParams(tableRowParams);
          final TextView tableheadercolums=new TextView(getApplicationContext());
          tableheadercolums.setPadding(0,0,4,3);
          tableheadercolums.setText(""String_Node_Str"");
          tableheadercolums.setTextSize(30);
          tableheadercolums.setTextColor(Color.RED);
          cell.addView(tableheadercolums);
          tableheader2.addView(cell);
          tableLayout.addView(tableheader2);
          tv.setText(""String_Node_Str"" + 0);
        }
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
}",0.9969816073483746
164525,"@Transactional(readOnly=true) public Pair<List<ExtensionLog>,Integer> getLog(String path,String name,ExtensionLog.Type type,int pageSize,int offset){
  int count=extensionLogRepository.countPages(path,name,type);
  List<ExtensionLog> logs=extensionLogRepository.getPage(path,name,type,pageSize,offset);
  return Pair.of(logs,count);
}","@Transactional(readOnly=true) public Pair<List<ExtensionLog>,Integer> getLog(String path,String name,ExtensionLog.Type type,int pageSize,int offset){
  String typeAsString=type != null ? type.name() : null;
  int count=extensionLogRepository.countPages(path,name,typeAsString);
  List<ExtensionLog> logs=extensionLogRepository.getPage(path,name,typeAsString,pageSize,offset);
  return Pair.of(logs,count);
}",0.9014844804318488
164526,"@Query(""String_Node_Str"" + FIND_EXTENSION_LOG + ""String_Node_Str"") int countPages(@Bind(""String_Node_Str"") String path,@Bind(""String_Node_Str"") String name,@Bind(""String_Node_Str"") ExtensionLog.Type type);","@Query(""String_Node_Str"" + FIND_EXTENSION_LOG + ""String_Node_Str"") int countPages(@Bind(""String_Node_Str"") String path,@Bind(""String_Node_Str"") String name,@Bind(""String_Node_Str"") String type);",0.9573934837092732
164527,"@Query(""String_Node_Str"" + FIND_EXTENSION_LOG + ""String_Node_Str"") List<ExtensionLog> getPage(@Bind(""String_Node_Str"") String path,@Bind(""String_Node_Str"") String name,@Bind(""String_Node_Str"") ExtensionLog.Type type,@Bind(""String_Node_Str"") int pageSize,@Bind(""String_Node_Str"") int offset);","@Query(""String_Node_Str"" + FIND_EXTENSION_LOG + ""String_Node_Str"") List<ExtensionLog> getPage(@Bind(""String_Node_Str"") String path,@Bind(""String_Node_Str"") String name,@Bind(""String_Node_Str"") String type,@Bind(""String_Node_Str"") int pageSize,@Bind(""String_Node_Str"") int offset);",0.9597197898423818
164528,"@Override public void migrate(JdbcTemplate jdbcTemplate) throws Exception {
  Integer enabledCount=jdbcTemplate.queryForObject(""String_Node_Str"",Integer.class);
  if (enabledCount == 0) {
    return;
  }
  String dialect=flywayConfiguration.getLocations()[0].split(""String_Node_Str"")[1].toLowerCase(Locale.ROOT);
  QueryFactory queryFactory=new QueryFactory(dialect,jdbcTemplate);
  EventRepository eventRepository=queryFactory.from(EventRepository.class);
  ExtensionRepository extensionRepository=queryFactory.from(ExtensionRepository.class);
  ExtensionLogRepository extensionLogRepository=queryFactory.from(ExtensionLogRepository.class);
  PluginRepository pluginRepository=queryFactory.from(PluginRepository.class);
  ExtensionService extensionService=new ExtensionService(new ScriptingExecutionService(),extensionRepository,extensionLogRepository,new DataSourceTransactionManager(jdbcTemplate.getDataSource()));
  extensionService.createOrUpdate(null,null,new Extension(""String_Node_Str"",""String_Node_Str"",getMailChimpScript(),true));
  int extensionId=extensionRepository.getExtensionIdFor(""String_Node_Str"",""String_Node_Str"");
  int apiKeyId=pluginRepository.getConfigurationMetadataIdFor(extensionId,""String_Node_Str"",""String_Node_Str"");
  int listIdId=pluginRepository.getConfigurationMetadataIdFor(extensionId,""String_Node_Str"",""String_Node_Str"");
  List<ConfValue> confValues=pluginRepository.findAllMailChimpConfigurationValues();
  for (  ConfValue cv : confValues) {
    if (cv.value != null) {
      Optional<Event> ev=eventRepository.findOptionalById(cv.eventId);
      ev.ifPresent(event -> {
        int orgId=event.getOrganizationId();
        extensionRepository.insertSettingValue(""String_Node_Str"".equals(cv.name) ? apiKeyId : listIdId,""String_Node_Str"" + orgId + ""String_Node_Str""+ cv.eventId,cv.value);
      }
);
    }
  }
}","@Override public void migrate(JdbcTemplate jdbcTemplate) throws Exception {
  Integer enabledCount=jdbcTemplate.queryForObject(""String_Node_Str"",Integer.class);
  if (enabledCount == 0) {
    return;
  }
  String dialect=flywayConfiguration.getLocations()[0].split(""String_Node_Str"")[1].toLowerCase(Locale.ROOT);
  QueryFactory queryFactory=new QueryFactory(dialect,jdbcTemplate);
  EventRepository eventRepository=queryFactory.from(EventRepository.class);
  ExtensionRepository extensionRepository=queryFactory.from(ExtensionRepository.class);
  ExtensionLogRepository extensionLogRepository=queryFactory.from(ExtensionLogRepository.class);
  PluginRepository pluginRepository=queryFactory.from(PluginRepository.class);
  ExtensionService extensionService=new ExtensionService(new ScriptingExecutionService(),extensionRepository,extensionLogRepository,new DataSourceTransactionManager(jdbcTemplate.getDataSource()));
  extensionService.createOrUpdate(null,null,new Extension(""String_Node_Str"",""String_Node_Str"",getMailChimpScript(),true));
  int extensionId=extensionRepository.getExtensionIdFor(""String_Node_Str"",""String_Node_Str"");
  int apiKeyId=pluginRepository.getConfigurationMetadataIdFor(extensionId,""String_Node_Str"",""String_Node_Str"");
  int listIdId=pluginRepository.getConfigurationMetadataIdFor(extensionId,""String_Node_Str"",""String_Node_Str"");
  List<ConfValue> confValues=pluginRepository.findAllMailChimpConfigurationValues();
  for (  ConfValue cv : confValues) {
    if (cv.value != null) {
      optionally(() -> jdbcTemplate.queryForObject(""String_Node_Str"" + cv.eventId,Integer.class)).ifPresent(orgId -> extensionRepository.insertSettingValue(""String_Node_Str"".equals(cv.name) ? apiKeyId : listIdId,""String_Node_Str"" + orgId + ""String_Node_Str""+ cv.eventId,cv.value));
    }
  }
}",0.8502600602244731
164529,"private List<ScriptPathNameHash> getActiveScriptsForEvent(String event,String basePath,boolean async){
  Set<String> paths=new TreeSet<>();
  int basePathLength=basePath.length();
  for (int i=1; i < basePathLength; i++) {
    if (basePath.charAt(i) == '.') {
      paths.add(basePath.substring(0,i));
    }
  }
  paths.add(""String_Node_Str"");
  paths.add(basePath);
  return extensionRepository.findActive(paths,async,event);
}","private List<ScriptPathNameHash> getActiveScriptsForEvent(String event,String basePath,boolean async){
  Set<String> paths=new TreeSet<>();
  int basePathLength=basePath.length();
  for (int i=1; i < basePathLength; i++) {
    if (basePath.charAt(i) == '-') {
      paths.add(basePath.substring(0,i));
    }
  }
  paths.add(""String_Node_Str"");
  paths.add(basePath);
  return extensionRepository.findActive(paths,async,event);
}",0.9976635514018692
164530,"public <T>T executeScriptsForEvent(String event,String basePath,Map<String,Object> payload,Class<T> clazz){
  List<ScriptPathNameHash> activePaths=getActiveScriptsForEvent(event,basePath,false);
  T res=null;
  Map<String,Object> input=new HashMap<>(payload);
  input.put(""String_Node_Str"",event);
  for (  ScriptPathNameHash activePath : activePaths) {
    String path=activePath.getPath();
    String name=activePath.getName();
    res=scriptingExecutionService.executeScript(path,name,activePath.getHash(),() -> getScript(path,name) + ""String_Node_Str"",input,clazz);
    input.put(""String_Node_Str"",res);
  }
  return res;
}","public <T>T executeScriptsForEvent(String event,String basePath,Map<String,Object> payload,Class<T> clazz){
  List<ScriptPathNameHash> activePaths=getActiveScriptsForEvent(event,basePath,false);
  T res=null;
  Map<String,Object> input=new HashMap<>(payload);
  input.put(""String_Node_Str"",event);
  for (  ScriptPathNameHash activePath : activePaths) {
    String path=activePath.getPath();
    String name=activePath.getName();
    res=scriptingExecutionService.executeScript(name,activePath.getHash(),() -> getScript(path,name) + ""String_Node_Str"",input,clazz);
    input.put(""String_Node_Str"",res);
  }
  return res;
}",0.9959967974379504
164531,"public void executeScriptAsync(String path,String name,String hash,Supplier<String> scriptFetcher,Map<String,Object> params){
  Optional.ofNullable(asyncExecutors.get(path,(key) -> Executors.newSingleThreadExecutor())).ifPresent(it -> it.submit(() -> {
    executeScript(path,name,hash,scriptFetcher,params,Object.class);
  }
));
}","public void executeScriptAsync(String path,String name,String hash,Supplier<String> scriptFetcher,Map<String,Object> params){
  Optional.ofNullable(asyncExecutors.get(path,(key) -> Executors.newSingleThreadExecutor())).ifPresent(it -> it.submit(() -> {
    executeScript(name,hash,scriptFetcher,params,Object.class);
  }
));
}",0.9923896499238964
164532,"private Result<TicketCategory> checkExistingCategory(TicketsInfo ti,Event event,String username){
  Category category=ti.getCategory();
  List<Attendee> attendees=ti.getAttendees();
  int tickets=attendees.size();
  int eventId=event.getId();
  TicketCategory existing=ticketCategoryRepository.getByIdAndActive(category.getExistingCategoryId(),eventId);
  int existingCategoryId=existing.getId();
  int freeTicketsInCategory=ticketRepository.countFreeTickets(eventId,existingCategoryId);
  int notAllocated=getNotAllocatedTickets(event);
  int missingTickets=Math.max(tickets - (freeTicketsInCategory + notAllocated),0);
  Event modified=increaseSeatsIfNeeded(ti,event,missingTickets,event);
  if (freeTicketsInCategory < tickets && existing.isBounded()) {
    int maxTickets=existing.getMaxTickets() + (tickets - freeTicketsInCategory);
    TicketCategoryModification tcm=new TicketCategoryModification(existingCategoryId,existing.getName(),maxTickets,DateTimeModification.fromZonedDateTime(existing.getInception(modified.getZoneId())),DateTimeModification.fromZonedDateTime(existing.getExpiration(event.getZoneId())),Collections.emptyMap(),existing.getPrice(),existing.isAccessRestricted(),""String_Node_Str"",true,existing.getCode(),DateTimeModification.fromZonedDateTime(existing.getValidCheckInFrom(modified.getZoneId())),DateTimeModification.fromZonedDateTime(existing.getValidCheckInTo(modified.getZoneId())));
    return eventManager.updateCategory(existingCategoryId,modified,tcm,username);
  }
  return Result.success(existing);
}","private Result<TicketCategory> checkExistingCategory(TicketsInfo ti,Event event,String username){
  Category category=ti.getCategory();
  List<Attendee> attendees=ti.getAttendees();
  int tickets=attendees.size();
  int eventId=event.getId();
  TicketCategory existing=ticketCategoryRepository.getByIdAndActive(category.getExistingCategoryId(),eventId);
  int existingCategoryId=existing.getId();
  int freeTicketsInCategory=ticketRepository.countFreeTickets(eventId,existingCategoryId);
  int notAllocated=getNotAllocatedTickets(event);
  int missingTickets=Math.max(tickets - (freeTicketsInCategory + notAllocated),0);
  Event modified=increaseSeatsIfNeeded(ti,event,missingTickets,event);
  if (freeTicketsInCategory < tickets && existing.isBounded()) {
    int maxTickets=existing.getMaxTickets() + (tickets - freeTicketsInCategory);
    TicketCategoryModification tcm=new TicketCategoryModification(existingCategoryId,existing.getName(),maxTickets,DateTimeModification.fromZonedDateTime(existing.getInception(modified.getZoneId())),DateTimeModification.fromZonedDateTime(existing.getExpiration(event.getZoneId())),Collections.emptyMap(),existing.getPrice(),existing.isAccessRestricted(),""String_Node_Str"",true,existing.getCode(),DateTimeModification.fromZonedDateTime(existing.getValidCheckInFrom(modified.getZoneId())),DateTimeModification.fromZonedDateTime(existing.getValidCheckInTo(modified.getZoneId())));
    return eventManager.updateCategory(existingCategoryId,modified,tcm,username,true);
  }
  return Result.success(existing);
}",0.9983771502758844
164533,"private void updateCategory(TicketCategoryModification tc,boolean freeOfCharge,ZoneId zoneId,Event event){
  int eventId=event.getId();
  final int price=evaluatePrice(tc.getPriceInCents(),freeOfCharge);
  TicketCategory original=ticketCategoryRepository.getByIdAndActive(tc.getId(),eventId);
  ticketCategoryRepository.update(tc.getId(),tc.getName(),tc.getInception().toZonedDateTime(zoneId),tc.getExpiration().toZonedDateTime(zoneId),tc.getMaxTickets(),tc.isTokenGenerationRequested(),price,StringUtils.trimToNull(tc.getCode()),DateTimeModification.toZonedDateTime(tc.getValidCheckInFrom(),zoneId),DateTimeModification.toZonedDateTime(tc.getValidCheckInTo(),(zoneId)));
  TicketCategory updated=ticketCategoryRepository.getByIdAndActive(tc.getId(),eventId);
  int addedTickets=0;
  if (original.isBounded() ^ tc.isBounded()) {
    handleTicketAllocationStrategyChange(event,original,tc);
  }
 else {
    addedTickets=updated.getMaxTickets() - original.getMaxTickets();
    handleTicketNumberModification(event,original,updated,addedTickets);
  }
  handleTokenModification(original,updated,addedTickets);
  handlePriceChange(event,original,updated);
  insertOrUpdateTicketCategoryDescription(tc.getId(),tc,event);
  auditingRepository.insertUpdateTicketInCategoryId(tc.getId());
}","private void updateCategory(TicketCategoryModification tc,boolean freeOfCharge,ZoneId zoneId,Event event,boolean resetTicketsToFree){
  int eventId=event.getId();
  final int price=evaluatePrice(tc.getPriceInCents(),freeOfCharge);
  TicketCategory original=ticketCategoryRepository.getByIdAndActive(tc.getId(),eventId);
  ticketCategoryRepository.update(tc.getId(),tc.getName(),tc.getInception().toZonedDateTime(zoneId),tc.getExpiration().toZonedDateTime(zoneId),tc.getMaxTickets(),tc.isTokenGenerationRequested(),price,StringUtils.trimToNull(tc.getCode()),DateTimeModification.toZonedDateTime(tc.getValidCheckInFrom(),zoneId),DateTimeModification.toZonedDateTime(tc.getValidCheckInTo(),(zoneId)));
  TicketCategory updated=ticketCategoryRepository.getByIdAndActive(tc.getId(),eventId);
  int addedTickets=0;
  if (original.isBounded() ^ tc.isBounded()) {
    handleTicketAllocationStrategyChange(event,original,tc);
  }
 else {
    addedTickets=updated.getMaxTickets() - original.getMaxTickets();
    handleTicketNumberModification(event,original,updated,addedTickets,resetTicketsToFree);
  }
  handleTokenModification(original,updated,addedTickets);
  handlePriceChange(event,original,updated);
  insertOrUpdateTicketCategoryDescription(tc.getId(),tc,event);
  auditingRepository.insertUpdateTicketInCategoryId(tc.getId());
}",0.982361963190184
164534,"public void deleteEvent(int eventId,String username){
  final Event event=eventRepository.findById(eventId);
  checkOwnership(event,username,event.getOrganizationId());
  eventDeleterRepository.deleteWaitingQueue(eventId);
  eventDeleterRepository.deletePluginLog(eventId);
  eventDeleterRepository.deletePluginConfiguration(eventId);
  eventDeleterRepository.deleteConfigurationEvent(eventId);
  eventDeleterRepository.deleteConfigurationTicketCategory(eventId);
  eventDeleterRepository.deleteEmailMessage(eventId);
  eventDeleterRepository.deleteTicketFieldValue(eventId);
  eventDeleterRepository.deleteFieldDescription(eventId);
  eventDeleterRepository.deleteAdditionalServiceFieldValue(eventId);
  eventDeleterRepository.deleteAdditionalServiceDescriptions(eventId);
  eventDeleterRepository.deleteAdditionalServiceItems(eventId);
  eventDeleterRepository.deleteTicketFieldConfiguration(eventId);
  eventDeleterRepository.deleteAdditionalServices(eventId);
  eventDeleterRepository.deleteEventMigration(eventId);
  eventDeleterRepository.deleteSponsorScan(eventId);
  eventDeleterRepository.deleteTicket(eventId);
  eventDeleterRepository.deleteReservation(eventId);
  eventDeleterRepository.deletePromoCode(eventId);
  eventDeleterRepository.deleteTicketCategoryText(eventId);
  eventDeleterRepository.deleteTicketCategory(eventId);
  eventDeleterRepository.deleteEventDescription(eventId);
  eventDeleterRepository.deleteResources(eventId);
  eventDeleterRepository.deleteScanAudit(eventId);
  eventDeleterRepository.deleteEvent(eventId);
}","public void deleteEvent(int eventId,String username){
  final Event event=eventRepository.findById(eventId);
  checkOwnership(event,username,event.getOrganizationId());
  eventDeleterRepository.deleteWaitingQueue(eventId);
  eventDeleterRepository.deletePluginLog(eventId);
  eventDeleterRepository.deletePluginConfiguration(eventId);
  eventDeleterRepository.deleteConfigurationEvent(eventId);
  eventDeleterRepository.deleteConfigurationTicketCategory(eventId);
  eventDeleterRepository.deleteEmailMessage(eventId);
  eventDeleterRepository.deleteTicketFieldValue(eventId);
  eventDeleterRepository.deleteFieldDescription(eventId);
  eventDeleterRepository.deleteAdditionalServiceFieldValue(eventId);
  eventDeleterRepository.deleteAdditionalServiceDescriptions(eventId);
  eventDeleterRepository.deleteAdditionalServiceItems(eventId);
  eventDeleterRepository.deleteTicketFieldConfiguration(eventId);
  eventDeleterRepository.deleteAdditionalServices(eventId);
  eventDeleterRepository.deleteEventMigration(eventId);
  eventDeleterRepository.deleteSponsorScan(eventId);
  eventDeleterRepository.deleteTicket(eventId);
  eventDeleterRepository.deleteTransactions(eventId);
  eventDeleterRepository.deleteReservation(eventId);
  eventDeleterRepository.deletePromoCode(eventId);
  eventDeleterRepository.deleteTicketCategoryText(eventId);
  eventDeleterRepository.deleteTicketCategory(eventId);
  eventDeleterRepository.deleteEventDescription(eventId);
  eventDeleterRepository.deleteResources(eventId);
  eventDeleterRepository.deleteScanAudit(eventId);
  eventDeleterRepository.deleteEvent(eventId);
}",0.9828680203045684
164535,"public void updateAdditionalField(int id,EventModification.UpdateAdditionalField f){
  String serializedRestrictedValues=toSerializedRestrictedValues(f);
  ticketFieldRepository.updateRequiredAndRestrictedValues(id,f.isRequired(),serializedRestrictedValues);
  f.getDescription().forEach((locale,value) -> {
    String val=Json.GSON.toJson(value.getDescription());
    if (0 == ticketFieldRepository.updateDescription(id,locale,val)) {
      ticketFieldRepository.insertDescription(id,locale,val);
    }
    ;
  }
);
}","public void updateAdditionalField(int id,EventModification.UpdateAdditionalField f){
  String serializedRestrictedValues=toSerializedRestrictedValues(f);
  ticketFieldRepository.updateRequiredAndRestrictedValues(id,f.isRequired(),serializedRestrictedValues);
  f.getDescription().forEach((locale,value) -> {
    String val=Json.GSON.toJson(value.getDescription());
    if (0 == ticketFieldRepository.updateDescription(id,locale,val)) {
      ticketFieldRepository.insertDescription(id,locale,val);
    }
  }
);
}",0.9883495145631068
164536,"@Test public void testUpdateBoundedCategory(){
  List<TicketCategoryModification> categories=Collections.singletonList(new TicketCategoryModification(null,""String_Node_Str"",10,new DateTimeModification(LocalDate.now(),LocalTime.now()),new DateTimeModification(LocalDate.now(),LocalTime.now()),DESCRIPTION,BigDecimal.TEN,false,""String_Node_Str"",false,null,null,null));
  Pair<Event,String> pair=initEvent(categories,organizationRepository,userManager,eventManager,eventRepository);
  Event event=pair.getKey();
  TicketCategory category=ticketCategoryRepository.findByEventId(event.getId()).get(0);
  TicketCategoryModification tcm=new TicketCategoryModification(category.getId(),""String_Node_Str"",20,new DateTimeModification(LocalDate.now(),LocalTime.now()),new DateTimeModification(LocalDate.now(),LocalTime.now()),DESCRIPTION,BigDecimal.TEN,false,""String_Node_Str"",false,null,null,null);
  eventManager.updateCategory(category.getId(),event.getId(),tcm,pair.getValue());
  List<Ticket> tickets=ticketRepository.findFreeByEventId(event.getId());
  assertNotNull(tickets);
  assertFalse(tickets.isEmpty());
  assertEquals(AVAILABLE_SEATS,tickets.size());
  assertEquals(0,tickets.stream().filter(t -> t.getCategoryId() == null).count());
}","@Test public void testUpdateBoundedCategory(){
  List<TicketCategoryModification> categories=Collections.singletonList(new TicketCategoryModification(null,""String_Node_Str"",10,new DateTimeModification(LocalDate.now(),LocalTime.now()),new DateTimeModification(LocalDate.now(),LocalTime.now()),DESCRIPTION,BigDecimal.TEN,false,""String_Node_Str"",false,null,null,null));
  Pair<Event,String> pair=initEvent(categories,organizationRepository,userManager,eventManager,eventRepository);
  Event event=pair.getKey();
  TicketCategory category=ticketCategoryRepository.findByEventId(event.getId()).get(0);
  TicketCategoryModification tcm=new TicketCategoryModification(category.getId(),""String_Node_Str"",20,new DateTimeModification(LocalDate.now(),LocalTime.now()),new DateTimeModification(LocalDate.now(),LocalTime.now()),DESCRIPTION,BigDecimal.TEN,false,""String_Node_Str"",false,null,null,null);
  eventManager.updateCategory(category.getId(),event.getId(),tcm,pair.getValue());
  waitingQueueSubscriptionProcessor.distributeAvailableSeats(event);
  List<Ticket> tickets=ticketRepository.findFreeByEventId(event.getId());
  assertNotNull(tickets);
  assertFalse(tickets.isEmpty());
  assertEquals(AVAILABLE_SEATS,tickets.size());
  assertEquals(0,tickets.stream().filter(t -> t.getCategoryId() == null).count());
}",0.9728880157170924
164537,"private boolean send(int eventId,String address,String apiKey,String email,CustomerName name,String language,String eventKey){
}","private boolean send(int eventId,String address,String apiKey,String email,CustomerName name,String language,String eventKey){
  Map<String,Object> content=new HashMap<>();
  content.put(""String_Node_Str"",email);
  content.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> mergeFields=new HashMap<>();
  mergeFields.put(""String_Node_Str"",name.isHasFirstAndLastName() ? name.getFirstName() : name.getFullName());
  mergeFields.put(ALFIO_EVENT_KEY,eventKey);
  content.put(""String_Node_Str"",mergeFields);
  content.put(""String_Node_Str"",language);
  Request request=new Request.Builder().url(address).header(""String_Node_Str"",Credentials.basic(""String_Node_Str"",apiKey)).put(RequestBody.create(MediaType.parse(APPLICATION_JSON),Json.GSON.toJson(content,Map.class))).build();
  try {
    Response response=httpClient.newCall(request).execute();
    if (response.isSuccessful()) {
      pluginDataStorage.registerSuccess(String.format(""String_Node_Str"",email),eventId);
      return true;
    }
    try (ResponseBody body=response.body()){
      String responseBody=body.string();
      if (response.code() != 400 || responseBody.contains(""String_Node_Str"")) {
        pluginDataStorage.registerFailure(String.format(FAILURE_MSG,email,name,language,responseBody),eventId);
        return false;
      }
 else {
        pluginDataStorage.registerWarning(String.format(FAILURE_MSG,email,name,language,responseBody),eventId);
      }
      return true;
    }
   }
 catch (  IOException e) {
    pluginDataStorage.registerFailure(String.format(FAILURE_MSG,email,name,language,e.toString()),eventId);
    return false;
  }
}",0.1457858769931662
164538,"public TicketReservationManager(EventRepository eventRepository,OrganizationRepository organizationRepository,TicketRepository ticketRepository,TicketReservationRepository ticketReservationRepository,TicketCategoryRepository ticketCategoryRepository,TicketCategoryDescriptionRepository ticketCategoryDescriptionRepository,ConfigurationManager configurationManager,PaymentManager paymentManager,PromoCodeDiscountRepository promoCodeDiscountRepository,SpecialPriceRepository specialPriceRepository,TransactionRepository transactionRepository,NotificationManager notificationManager,MessageSource messageSource,TemplateManager templateManager,PlatformTransactionManager transactionManager,WaitingQueueManager waitingQueueManager,PluginManager pluginManager,TicketFieldRepository ticketFieldRepository,AdditionalServiceRepository additionalServiceRepository,AdditionalServiceItemRepository additionalServiceItemRepository,AdditionalServiceTextRepository additionalServiceTextRepository,InvoiceSequencesRepository invoiceSequencesRepository){
  this.eventRepository=eventRepository;
  this.organizationRepository=organizationRepository;
  this.ticketRepository=ticketRepository;
  this.ticketReservationRepository=ticketReservationRepository;
  this.ticketCategoryRepository=ticketCategoryRepository;
  this.ticketCategoryDescriptionRepository=ticketCategoryDescriptionRepository;
  this.configurationManager=configurationManager;
  this.paymentManager=paymentManager;
  this.promoCodeDiscountRepository=promoCodeDiscountRepository;
  this.specialPriceRepository=specialPriceRepository;
  this.transactionRepository=transactionRepository;
  this.notificationManager=notificationManager;
  this.messageSource=messageSource;
  this.templateManager=templateManager;
  this.waitingQueueManager=waitingQueueManager;
  this.pluginManager=pluginManager;
  this.requiresNewTransactionTemplate=new TransactionTemplate(transactionManager,new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRES_NEW));
  this.ticketFieldRepository=ticketFieldRepository;
  this.additionalServiceRepository=additionalServiceRepository;
  this.additionalServiceItemRepository=additionalServiceItemRepository;
  this.additionalServiceTextRepository=additionalServiceTextRepository;
  this.invoiceSequencesRepository=invoiceSequencesRepository;
}","public TicketReservationManager(EventRepository eventRepository,OrganizationRepository organizationRepository,TicketRepository ticketRepository,TicketReservationRepository ticketReservationRepository,TicketCategoryRepository ticketCategoryRepository,TicketCategoryDescriptionRepository ticketCategoryDescriptionRepository,ConfigurationManager configurationManager,PaymentManager paymentManager,PromoCodeDiscountRepository promoCodeDiscountRepository,SpecialPriceRepository specialPriceRepository,TransactionRepository transactionRepository,NotificationManager notificationManager,MessageSource messageSource,TemplateManager templateManager,PlatformTransactionManager transactionManager,WaitingQueueManager waitingQueueManager,PluginManager pluginManager,TicketFieldRepository ticketFieldRepository,AdditionalServiceRepository additionalServiceRepository,AdditionalServiceItemRepository additionalServiceItemRepository,AdditionalServiceTextRepository additionalServiceTextRepository,InvoiceSequencesRepository invoiceSequencesRepository,AuditingRepository auditingRepository){
  this.eventRepository=eventRepository;
  this.organizationRepository=organizationRepository;
  this.ticketRepository=ticketRepository;
  this.ticketReservationRepository=ticketReservationRepository;
  this.ticketCategoryRepository=ticketCategoryRepository;
  this.ticketCategoryDescriptionRepository=ticketCategoryDescriptionRepository;
  this.configurationManager=configurationManager;
  this.paymentManager=paymentManager;
  this.promoCodeDiscountRepository=promoCodeDiscountRepository;
  this.specialPriceRepository=specialPriceRepository;
  this.transactionRepository=transactionRepository;
  this.notificationManager=notificationManager;
  this.messageSource=messageSource;
  this.templateManager=templateManager;
  this.waitingQueueManager=waitingQueueManager;
  this.pluginManager=pluginManager;
  this.requiresNewTransactionTemplate=new TransactionTemplate(transactionManager,new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRES_NEW));
  this.ticketFieldRepository=ticketFieldRepository;
  this.additionalServiceRepository=additionalServiceRepository;
  this.additionalServiceItemRepository=additionalServiceItemRepository;
  this.additionalServiceTextRepository=additionalServiceTextRepository;
  this.invoiceSequencesRepository=invoiceSequencesRepository;
  this.auditingRepository=auditingRepository;
}",0.9822859552931252
164539,"/** 
 * Create a ticket reservation. It will create a reservation _only_ if it can find enough tickets. Note that it will not do date/validity validation. This must be ensured by the caller.
 * @param event
 * @param list
 * @param reservationExpiration
 * @param forWaitingQueue
 * @return
 */
public String createTicketReservation(Event event,List<TicketReservationWithOptionalCodeModification> list,List<ASReservationWithOptionalCodeModification> additionalServices,Date reservationExpiration,Optional<String> specialPriceSessionId,Optional<String> promotionCodeDiscount,Locale locale,boolean forWaitingQueue) throws NotEnoughTicketsException, MissingSpecialPriceTokenException, InvalidSpecialPriceTokenException {
  String reservationId=UUID.randomUUID().toString();
  Optional<PromoCodeDiscount> discount=promotionCodeDiscount.flatMap((promoCodeDiscount) -> optionally(() -> promoCodeDiscountRepository.findPromoCodeInEventOrOrganization(event.getId(),promoCodeDiscount)));
  ticketReservationRepository.createNewReservation(reservationId,reservationExpiration,discount.map(PromoCodeDiscount::getId).orElse(null),locale.getLanguage(),event.getId());
  list.forEach(t -> reserveTicketsForCategory(event,specialPriceSessionId,reservationId,t,locale,forWaitingQueue,discount.orElse(null)));
  int ticketCount=list.stream().map(TicketReservationWithOptionalCodeModification::getAmount).mapToInt(Integer::intValue).sum();
  additionalServiceRepository.findAllInEventWithPolicy(event.getId(),AdditionalService.SupplementPolicy.MANDATORY_ONE_FOR_TICKET).stream().filter(AdditionalService::getSaleable).forEach(as -> {
    AdditionalServiceReservationModification asrm=new AdditionalServiceReservationModification();
    asrm.setAdditionalServiceId(as.getId());
    asrm.setQuantity(ticketCount);
    additionalServices.add(new ASReservationWithOptionalCodeModification(asrm,Optional.empty()));
  }
);
  additionalServices.forEach(as -> reserveAdditionalServicesForReservation(event.getId(),reservationId,as,discount.orElse(null)));
  TicketReservation reservation=ticketReservationRepository.findReservationById(reservationId);
  OrderSummary orderSummary=orderSummaryForReservationId(reservation.getId(),event,Locale.forLanguageTag(reservation.getUserLanguage()));
  ticketReservationRepository.addReservationInvoiceOrReceiptModel(reservationId,Json.toJson(orderSummary));
  return reservationId;
}","/** 
 * Create a ticket reservation. It will create a reservation _only_ if it can find enough tickets. Note that it will not do date/validity validation. This must be ensured by the caller.
 * @param event
 * @param list
 * @param reservationExpiration
 * @param forWaitingQueue
 * @return
 */
public String createTicketReservation(Event event,List<TicketReservationWithOptionalCodeModification> list,List<ASReservationWithOptionalCodeModification> additionalServices,Date reservationExpiration,Optional<String> specialPriceSessionId,Optional<String> promotionCodeDiscount,Locale locale,boolean forWaitingQueue) throws NotEnoughTicketsException, MissingSpecialPriceTokenException, InvalidSpecialPriceTokenException {
  String reservationId=UUID.randomUUID().toString();
  Optional<PromoCodeDiscount> discount=promotionCodeDiscount.flatMap((promoCodeDiscount) -> optionally(() -> promoCodeDiscountRepository.findPromoCodeInEventOrOrganization(event.getId(),promoCodeDiscount)));
  ticketReservationRepository.createNewReservation(reservationId,reservationExpiration,discount.map(PromoCodeDiscount::getId).orElse(null),locale.getLanguage(),event.getId());
  list.forEach(t -> reserveTicketsForCategory(event,specialPriceSessionId,reservationId,t,locale,forWaitingQueue,discount.orElse(null)));
  int ticketCount=list.stream().map(TicketReservationWithOptionalCodeModification::getAmount).mapToInt(Integer::intValue).sum();
  additionalServiceRepository.findAllInEventWithPolicy(event.getId(),AdditionalService.SupplementPolicy.MANDATORY_ONE_FOR_TICKET).stream().filter(AdditionalService::getSaleable).forEach(as -> {
    AdditionalServiceReservationModification asrm=new AdditionalServiceReservationModification();
    asrm.setAdditionalServiceId(as.getId());
    asrm.setQuantity(ticketCount);
    additionalServices.add(new ASReservationWithOptionalCodeModification(asrm,Optional.empty()));
  }
);
  additionalServices.forEach(as -> reserveAdditionalServicesForReservation(event.getId(),reservationId,as,discount.orElse(null)));
  TicketReservation reservation=ticketReservationRepository.findReservationById(reservationId);
  OrderSummary orderSummary=orderSummaryForReservationId(reservation.getId(),event,Locale.forLanguageTag(reservation.getUserLanguage()));
  ticketReservationRepository.addReservationInvoiceOrReceiptModel(reservationId,Json.toJson(orderSummary));
  auditingRepository.insert(null,null,Audit.EventType.RESERVATION_CREATE,new Date(),Audit.EntityType.RESERVATION,reservationId,null);
  return reservationId;
}",0.9646915584415584
164540,"public TicketCSVInfo(@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") int id,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String uuid,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") ZonedDateTime creation,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") int categoryId,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String status,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") int eventId,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") int ticketSrcPriceCts,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") int ticketFinalPriceCts,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") int ticketVatCts,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") int ticketDiscountCts,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String ticketsReservationId,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String fullName,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String firstName,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String lastName,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String email,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") boolean lockedAssignment,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String userLanguage,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String trId,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") Date trValidity,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") TicketReservation.TicketReservationStatus trStatus,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String trFullName,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String trFirstName,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String trLastName,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String trEmail,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String trBillingAddress,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") ZonedDateTime trConfirmationTimestamp,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") ZonedDateTime trLatestReminder,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") PaymentProxy trPaymentMethod,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") Boolean trReminderSent,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") Integer trPromoCodeDiscountId,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") boolean trAutomatic,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") String resUserLanguage,@ConstructorAnnotationRowMapper.Column(""String_Node_Str"") boolean directAssignment){
  this.ticket=new Ticket(id,uuid,creation,categoryId,status,eventId,ticketsReservationId,fullName,firstName,lastName,email,lockedAssignment,userLanguage,ticketSrcPriceCts,ticketFinalPriceCts,ticketVatCts,ticketDiscountCts);
  this.ticketReservation=new TicketReservation(trId,trValidity,trStatus,trFullName,trFirstName,trLastName,trEmail,trBillingAddress,trConfirmationTimestamp,trLatestReminder,trPaymentMethod,trReminderSent,trPromoCodeDiscountId,trAutomatic,resUserLanguage,directAssignment);
}","public TicketCSVInfo(@Column(""String_Node_Str"") int id,@Column(""String_Node_Str"") String uuid,@Column(""String_Node_Str"") ZonedDateTime creation,@Column(""String_Node_Str"") int categoryId,@Column(""String_Node_Str"") String status,@Column(""String_Node_Str"") int eventId,@Column(""String_Node_Str"") int ticketSrcPriceCts,@Column(""String_Node_Str"") int ticketFinalPriceCts,@Column(""String_Node_Str"") int ticketVatCts,@Column(""String_Node_Str"") int ticketDiscountCts,@Column(""String_Node_Str"") String ticketsReservationId,@Column(""String_Node_Str"") String fullName,@Column(""String_Node_Str"") String firstName,@Column(""String_Node_Str"") String lastName,@Column(""String_Node_Str"") String email,@Column(""String_Node_Str"") boolean lockedAssignment,@Column(""String_Node_Str"") String userLanguage,@Column(""String_Node_Str"") String trId,@Column(""String_Node_Str"") Date trValidity,@Column(""String_Node_Str"") TicketReservation.TicketReservationStatus trStatus,@Column(""String_Node_Str"") String trFullName,@Column(""String_Node_Str"") String trFirstName,@Column(""String_Node_Str"") String trLastName,@Column(""String_Node_Str"") String trEmail,@Column(""String_Node_Str"") String trBillingAddress,@Column(""String_Node_Str"") ZonedDateTime trConfirmationTimestamp,@Column(""String_Node_Str"") ZonedDateTime trLatestReminder,@Column(""String_Node_Str"") PaymentProxy trPaymentMethod,@Column(""String_Node_Str"") Boolean trReminderSent,@Column(""String_Node_Str"") Integer trPromoCodeDiscountId,@Column(""String_Node_Str"") boolean trAutomatic,@Column(""String_Node_Str"") String resUserLanguage,@Column(""String_Node_Str"") boolean directAssignment,@Column(""String_Node_Str"") String invoiceNumber,@Column(""String_Node_Str"") String invoiceModel){
  this.ticket=new Ticket(id,uuid,creation,categoryId,status,eventId,ticketsReservationId,fullName,firstName,lastName,email,lockedAssignment,userLanguage,ticketSrcPriceCts,ticketFinalPriceCts,ticketVatCts,ticketDiscountCts);
  this.ticketReservation=new TicketReservation(trId,trValidity,trStatus,trFullName,trFirstName,trLastName,trEmail,trBillingAddress,trConfirmationTimestamp,trLatestReminder,trPaymentMethod,trReminderSent,trPromoCodeDiscountId,trAutomatic,resUserLanguage,directAssignment,invoiceNumber,invoiceModel);
}",0.2904610789621056
164541,"private Result<Pair<TicketReservation,List<Ticket>>> createReservation(Result<Pair<TicketsInfo,TicketCategory>> input,Event event,AdminReservationModification arm){
  return input.flatMap(t -> {
    TicketCategory category=t.getRight();
    TicketsInfo ticketsInfo=t.getLeft();
    String reservationId=UUID.randomUUID().toString();
    String specialPriceSessionId=UUID.randomUUID().toString();
    Date validity=Date.from(arm.getExpiration().toZonedDateTime(event.getZoneId()).toInstant());
    ticketReservationRepository.createNewReservation(reservationId,validity,null,arm.getLanguage());
    AdminReservationModification.CustomerData customerData=arm.getCustomerData();
    ticketReservationRepository.updateTicketReservation(reservationId,TicketReservationStatus.PENDING.name(),customerData.getEmailAddress(),customerData.getFullName(),customerData.getFirstName(),customerData.getLastName(),arm.getLanguage(),null,null,null);
    int categoryId=category.getId();
    List<Attendee> attendees=ticketsInfo.getAttendees();
    List<Integer> reservedForUpdate=ticketReservationManager.reserveTickets(event.getId(),categoryId,attendees.size(),singletonList(Ticket.TicketStatus.FREE));
    if (reservedForUpdate.size() != attendees.size()) {
      return Result.error(ErrorCode.CategoryError.NOT_ENOUGH_SEATS);
    }
    ticketRepository.reserveTickets(reservationId,reservedForUpdate,categoryId,arm.getLanguage(),category.getSrcPriceCts());
    Ticket ticket=ticketRepository.findById(reservedForUpdate.get(0),categoryId);
    TicketPriceContainer priceContainer=TicketPriceContainer.from(ticket,event,null);
    ticketRepository.updateTicketPrice(reservedForUpdate,categoryId,event.getId(),category.getSrcPriceCts(),MonetaryUtil.unitToCents(priceContainer.getFinalPrice()),MonetaryUtil.unitToCents(priceContainer.getVAT()),MonetaryUtil.unitToCents(priceContainer.getAppliedDiscount()));
    List<SpecialPrice> codes=category.isAccessRestricted() ? bindSpecialPriceTokens(specialPriceSessionId,categoryId,attendees) : Collections.emptyList();
    assignTickets(attendees,reservedForUpdate,codes,reservationId,arm.getLanguage(),category.getSrcPriceCts());
    List<Ticket> tickets=reservedForUpdate.stream().map(id -> ticketRepository.findById(id,categoryId)).collect(toList());
    return Result.success(Pair.of(ticketReservationRepository.findReservationById(reservationId),tickets));
  }
);
}","private Result<Pair<TicketReservation,List<Ticket>>> createReservation(Result<List<TicketsInfo>> input,Event event,AdminReservationModification arm){
  final TicketsInfo empty=new TicketsInfo(null,null,false,false);
  return input.flatMap(t -> {
    String reservationId=UUID.randomUUID().toString();
    String specialPriceSessionId=UUID.randomUUID().toString();
    Date validity=Date.from(arm.getExpiration().toZonedDateTime(event.getZoneId()).toInstant());
    ticketReservationRepository.createNewReservation(reservationId,validity,null,arm.getLanguage());
    AdminReservationModification.CustomerData customerData=arm.getCustomerData();
    ticketReservationRepository.updateTicketReservation(reservationId,TicketReservationStatus.PENDING.name(),customerData.getEmailAddress(),customerData.getFullName(),customerData.getFirstName(),customerData.getLastName(),arm.getLanguage(),null,null,null);
    Result<List<Ticket>> result=flattenTicketsInfo(event,empty,t).map(pair -> reserveForTicketsInfo(event,arm,reservationId,specialPriceSessionId,pair)).reduce(this::reduceReservationResults).orElseGet(() -> Result.error(ErrorCode.custom(""String_Node_Str"",""String_Node_Str"")));
    return result.map(list -> Pair.of(ticketReservationRepository.findReservationById(reservationId),list));
  }
);
}",0.4750812567713976
164542,"private Result<Pair<TicketReservation,List<Ticket>>> processReservation(AdminReservationModification input,String username,Event event){
  return input.getTicketsInfo().stream().map(ti -> checkCategoryCapacity(ti,event,input,username).map(c -> Pair.of(ti,c))).map(t -> createReservation(t,event,input)).reduce((r1,r2) -> {
    boolean successful=r1.isSuccess() && r2.isSuccess();
    ResultStatus global=r1.isSuccess() ? r2.getStatus() : r1.getStatus();
    List<ErrorCode> errors=new ArrayList<>();
    if (!successful) {
      errors.addAll(r1.getErrors());
      errors.addAll(r2.getErrors());
    }
    return new Result<>(global,joinData(r1,r2),errors);
  }
).orElseGet(() -> Result.error(singletonList(ErrorCode.custom(""String_Node_Str"",""String_Node_Str""))));
}","private Result<Pair<TicketReservation,List<Ticket>>> processReservation(AdminReservationModification input,String username,Event event){
  return input.getTicketsInfo().stream().map(ti -> checkCategoryCapacity(ti,event,input,username)).reduce((r1,r2) -> reduceResults(r1,r2,this::joinData)).map(r -> createReservation(r,event,input)).orElseGet(() -> Result.error(singletonList(ErrorCode.custom(""String_Node_Str"",""String_Node_Str""))));
}",0.6051537822111388
164543,"private Result<TicketCategory> checkCategoryCapacity(TicketsInfo ti,Event event,AdminReservationModification reservation,String username){
  return ti.getCategory().isExisting() ? checkExistingCategory(ti,event,username) : createCategory(ti,event,reservation,username);
}","private Result<List<TicketsInfo>> checkCategoryCapacity(TicketsInfo ti,Event event,AdminReservationModification reservation,String username){
  Result<TicketCategory> ticketCategoryResult=ti.getCategory().isExisting() ? checkExistingCategory(ti,event,username) : createCategory(ti,event,reservation,username);
  return ticketCategoryResult.map(tc -> Collections.singletonList(new TicketsInfo(new Category(tc.getId(),tc.getName(),tc.getPrice()),ti.getAttendees(),ti.isAddSeatsIfNotAvailable(),ti.isUpdateAttendees())));
}",0.6472819216182049
164544,"private Result<TicketCategory> checkExistingCategory(TicketsInfo ti,Event event,String username){
  AdminReservationModification.Category category=ti.getCategory();
  List<Attendee> attendees=ti.getAttendees();
  int tickets=attendees.size();
  int eventId=event.getId();
  TicketCategory existing=ticketCategoryRepository.getById(category.getExistingCategoryId(),eventId);
  int existingCategoryId=existing.getId();
  int freeTicketsInCategory=ticketRepository.countFreeTickets(eventId,existingCategoryId);
  int notAllocated=getNotAllocatedTickets(event);
  int missingTickets=Math.max(tickets - (freeTicketsInCategory + notAllocated),0);
  Event modified=increaseSeatsIfNeeded(ti,event,missingTickets,event);
  if (freeTicketsInCategory < tickets && existing.isBounded()) {
    int maxTickets=existing.getMaxTickets() + (tickets - freeTicketsInCategory);
    TicketCategoryModification tcm=new TicketCategoryModification(existingCategoryId,existing.getName(),maxTickets,DateTimeModification.fromZonedDateTime(existing.getInception(modified.getZoneId())),DateTimeModification.fromZonedDateTime(existing.getExpiration(event.getZoneId())),Collections.emptyMap(),existing.getPrice(),existing.isAccessRestricted(),""String_Node_Str"",true);
    return eventManager.updateCategory(existingCategoryId,modified,tcm,username);
  }
  return Result.success(existing);
}","private Result<TicketCategory> checkExistingCategory(TicketsInfo ti,Event event,String username){
  Category category=ti.getCategory();
  List<Attendee> attendees=ti.getAttendees();
  int tickets=attendees.size();
  int eventId=event.getId();
  TicketCategory existing=ticketCategoryRepository.getById(category.getExistingCategoryId(),eventId);
  int existingCategoryId=existing.getId();
  int freeTicketsInCategory=ticketRepository.countFreeTickets(eventId,existingCategoryId);
  int notAllocated=getNotAllocatedTickets(event);
  int missingTickets=Math.max(tickets - (freeTicketsInCategory + notAllocated),0);
  Event modified=increaseSeatsIfNeeded(ti,event,missingTickets,event);
  if (freeTicketsInCategory < tickets && existing.isBounded()) {
    int maxTickets=existing.getMaxTickets() + (tickets - freeTicketsInCategory);
    TicketCategoryModification tcm=new TicketCategoryModification(existingCategoryId,existing.getName(),maxTickets,DateTimeModification.fromZonedDateTime(existing.getInception(modified.getZoneId())),DateTimeModification.fromZonedDateTime(existing.getExpiration(event.getZoneId())),Collections.emptyMap(),existing.getPrice(),existing.isAccessRestricted(),""String_Node_Str"",true);
    return eventManager.updateCategory(existingCategoryId,modified,tcm,username);
  }
  return Result.success(existing);
}",0.9892153216809224
164545,"private Result<TicketCategory> createCategory(TicketsInfo ti,Event event,AdminReservationModification reservation,String username){
  AdminReservationModification.Category category=ti.getCategory();
  List<Attendee> attendees=ti.getAttendees();
  DateTimeModification inception=DateTimeModification.fromZonedDateTime(ZonedDateTime.now(event.getZoneId()));
  int tickets=attendees.size();
  TicketCategoryModification tcm=new TicketCategoryModification(category.getExistingCategoryId(),category.getName(),tickets,inception,reservation.getExpiration(),Collections.emptyMap(),category.getPrice(),true,""String_Node_Str"",true);
  int notAllocated=getNotAllocatedTickets(event);
  int missingTickets=Math.max(tickets - notAllocated,0);
  Event modified=increaseSeatsIfNeeded(ti,event,missingTickets,event);
  return eventManager.insertCategory(modified,tcm,username).map(id -> ticketCategoryRepository.getById(id,event.getId()));
}","private Result<TicketCategory> createCategory(TicketsInfo ti,Event event,AdminReservationModification reservation,String username){
  Category category=ti.getCategory();
  List<Attendee> attendees=ti.getAttendees();
  DateTimeModification inception=DateTimeModification.fromZonedDateTime(ZonedDateTime.now(event.getZoneId()));
  int tickets=attendees.size();
  TicketCategoryModification tcm=new TicketCategoryModification(category.getExistingCategoryId(),category.getName(),tickets,inception,reservation.getExpiration(),Collections.emptyMap(),category.getPrice(),true,""String_Node_Str"",true);
  int notAllocated=getNotAllocatedTickets(event);
  int missingTickets=Math.max(tickets - notAllocated,0);
  Event modified=increaseSeatsIfNeeded(ti,event,missingTickets,event);
  return eventManager.insertCategory(modified,tcm,username).map(id -> ticketCategoryRepository.getById(id,event.getId()));
}",0.9840746842394288
164546,"private Pair<TicketReservation,List<Ticket>> joinData(Result<Pair<TicketReservation,List<Ticket>>> t1,Result<Pair<TicketReservation,List<Ticket>>> t2){
  if (!t1.isSuccess() || !t2.isSuccess()) {
    return null;
  }
  List<Ticket> tickets=new ArrayList<>();
  Pair<TicketReservation,List<Ticket>> data1=t1.getData();
  tickets.addAll(data1.getRight());
  Pair<TicketReservation,List<Ticket>> data2=t2.getData();
  tickets.addAll(data2.getRight());
  return Pair.of(data1.getLeft(),tickets);
}","private List<TicketsInfo> joinData(List<TicketsInfo> t1,List<TicketsInfo> t2){
  List<TicketsInfo> join=new ArrayList<>();
  join.addAll(t1);
  join.addAll(t2);
  return join;
}",0.3701492537313433
164547,"private void validateSuccess(boolean bounded,List<Integer> attendeesNr,Event event,String username,List<TicketCategory> existingCategories,Result<Pair<TicketReservation,List<Ticket>>> result,List<Attendee> allAttendees,int expectedEventSeats,int reservedTickets){
  assertTrue(result.isSuccess());
  Pair<TicketReservation,List<Ticket>> data=result.getData();
  assertTrue(data.getRight().size() == attendeesNr.stream().mapToInt(i -> i).sum());
  assertNotNull(data.getLeft());
  Event modified=eventManager.getSingleEvent(event.getShortName(),username);
  assertEquals(expectedEventSeats,modified.getAvailableSeats());
  List<Ticket> tickets=ticketRepository.findPendingTicketsInCategories(existingCategories.stream().map(TicketCategory::getId).collect(toList()));
  assertEquals(attendeesNr.stream().mapToInt(i -> i).sum(),tickets.size() - reservedTickets);
  if (bounded) {
    final Iterator<Integer> iterator=attendeesNr.iterator();
    existingCategories.forEach(existingCategory -> {
      TicketCategory categoryModified=ticketCategoryRepository.getById(existingCategory.getId(),event.getId());
      assertEquals(categoryModified.getMaxTickets(),iterator.next().intValue());
    }
);
  }
  for (int i=0; i < tickets.size() - reservedTickets; i++) {
    Attendee attendee=allAttendees.get(i);
    if (!attendee.isEmpty()) {
      Ticket ticket=data.getRight().get(i);
      assertTrue(ticket.getAssigned());
      assertEquals(attendee.getFullName(),ticket.getFullName());
      assertEquals(attendee.getEmailAddress(),ticket.getEmail());
    }
  }
  ticketCategoryRepository.findByEventId(modified.getId()).forEach(tc -> assertTrue(specialPriceRepository.findAllByCategoryId(tc.getId()).stream().allMatch(sp -> sp.getStatus() == SpecialPrice.Status.PENDING)));
}","private void validateSuccess(boolean bounded,List<Integer> attendeesNr,Event event,String username,List<TicketCategory> existingCategories,Result<Pair<TicketReservation,List<Ticket>>> result,List<Attendee> allAttendees,int expectedEventSeats,int reservedTickets){
  assertTrue(result.isSuccess());
  Pair<TicketReservation,List<Ticket>> data=result.getData();
  assertTrue(data.getRight().size() == attendeesNr.stream().mapToInt(i -> i).sum());
  assertNotNull(data.getLeft());
  Event modified=eventManager.getSingleEvent(event.getShortName(),username);
  assertEquals(expectedEventSeats,modified.getAvailableSeats());
  List<Ticket> tickets=ticketRepository.findPendingTicketsInCategories(existingCategories.stream().map(TicketCategory::getId).collect(toList()));
  assertEquals(attendeesNr.stream().mapToInt(i -> i).sum(),tickets.size() - reservedTickets);
  if (bounded) {
    final Iterator<Integer> iterator=attendeesNr.iterator();
    existingCategories.forEach(existingCategory -> {
      TicketCategory categoryModified=ticketCategoryRepository.getById(existingCategory.getId(),event.getId());
      assertEquals(categoryModified.getMaxTickets(),iterator.next().intValue());
    }
);
  }
  for (int i=0; i < tickets.size() - reservedTickets; i++) {
    Attendee attendee=allAttendees.get(i);
    if (!attendee.isEmpty()) {
      Ticket ticket=data.getRight().get(i);
      assertTrue(ticket.getAssigned());
      assertEquals(attendee.getFullName(),ticket.getFullName());
      assertEquals(attendee.getEmailAddress(),ticket.getEmail());
      assertEquals(data.getLeft().getId(),ticket.getTicketsReservationId());
    }
  }
  ticketCategoryRepository.findByEventId(modified.getId()).forEach(tc -> assertTrue(specialPriceRepository.findAllByCategoryId(tc.getId()).stream().allMatch(sp -> sp.getStatus() == SpecialPrice.Status.PENDING)));
}",0.9787234042553192
164548,"@RequestMapping(value=""String_Node_Str"",method=GET) public List<EventWithStatistics> getAllEvents(Principal principal){
  return eventStatisticsManager.getAllEventsWithStatistics(principal.getName()).stream().sorted().collect(Collectors.toList());
}","@RequestMapping(value=""String_Node_Str"",method=GET) public List<EventStatistic> getAllEvents(Principal principal){
  return eventStatisticsManager.getAllEventsWithStatistics(principal.getName()).stream().map(EventStatistic::new).sorted().collect(Collectors.toList());
}",0.9073359073359072
164549,"private void deleteReservations(List<String> reservationIdsToRemove){
  int removedReservation=ticketReservationRepository.remove(reservationIdsToRemove);
  Validate.isTrue(removedReservation == 1,""String_Node_Str"" + removedReservation);
}","private void deleteReservations(List<String> reservationIdsToRemove){
  waitingQueueManager.cleanExpiredReservations(reservationIdsToRemove);
  int removedReservation=ticketReservationRepository.remove(reservationIdsToRemove);
  Validate.isTrue(removedReservation == 1,""String_Node_Str"" + removedReservation);
}",0.8690909090909091
164550,"@Bean public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){
  return (container) -> {
    container.addInitializers(SERVLET_CONTEXT_INITIALIZER);
    Map<String,String> mimeMappings=new HashMap<>();
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    container.setSessionTimeout(2,TimeUnit.HOURS);
    container.setMimeMappings(new MimeMappings(mimeMappings));
  }
;
}","@Bean public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){
  return (container) -> {
    container.addInitializers(SERVLET_CONTEXT_INITIALIZER);
    Map<String,String> mimeMappings=new HashMap<>();
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    mimeMappings.put(""String_Node_Str"",""String_Node_Str"");
    container.setSessionTimeout(2,TimeUnit.HOURS);
    container.setMimeMappings(new MimeMappings(mimeMappings));
    container.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND,""String_Node_Str""),new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR,""String_Node_Str""),new ErrorPage(""String_Node_Str""));
  }
;
}",0.875085324232082
164551,"@Query(""String_Node_Str"") List<Integer> selectFreeTicketsForPreReservation(@Bind(""String_Node_Str"") int eventId,@Bind(""String_Node_Str"") int amount);","@Query(""String_Node_Str"") List<Integer> selectFreeTicketsForPreReservation(@Bind(""String_Node_Str"") int eventId,@Bind(""String_Node_Str"") int amount,@Bind(""String_Node_Str"") int categoryId);",0.8816568047337278
164552,"@Override public Supplier<List<Pair<Integer,Integer>>> supplier(){
  return ArrayList::new;
}","@Override public Supplier<List<Pair<Integer,TicketCategoryWithStatistic>>> supplier(){
  return ArrayList::new;
}",0.8737864077669902
164553,"@Override public Function<List<Pair<Integer,Integer>>,List<Pair<Integer,Integer>>> finisher(){
  return Function.identity();
}","@Override public Function<List<Pair<Integer,TicketCategoryWithStatistic>>,List<Pair<Integer,TicketCategoryWithStatistic>>> finisher(){
  return Function.identity();
}",0.821917808219178
164554,"@Override public BiConsumer<List<Pair<Integer,Integer>>,Pair<Integer,TicketCategoryWithStatistic>> accumulator(){
  return (accumulator,candidate) -> {
    int requested=requestedTickets.get();
    if (requested > 0) {
      int capacity=Math.min(requested,candidate.getKey());
      accumulator.add(Pair.of(capacity,candidate.getValue().getId()));
      requestedTickets.addAndGet(-capacity);
    }
  }
;
}","@Override public BiConsumer<List<Pair<Integer,TicketCategoryWithStatistic>>,Pair<Integer,TicketCategoryWithStatistic>> accumulator(){
  return (accumulator,candidate) -> {
    int requested=requestedTickets.get();
    if (requested > 0) {
      int capacity=Math.min(requested,candidate.getKey());
      accumulator.add(Pair.of(capacity,candidate.getValue()));
      requestedTickets.addAndGet(-capacity);
    }
  }
;
}",0.9491525423728814
164555,"/** 
 * This collector is not designed run in parallel. Thus the combiner here doesn't do nothing
 * @return the first parameter
 */
@Override public BinaryOperator<List<Pair<Integer,Integer>>> combiner(){
  return (a,b) -> a;
}","/** 
 * This collector is not designed run in parallel. Thus the combiner here doesn't do nothing
 * @return the first parameter
 */
@Override public BinaryOperator<List<Pair<Integer,TicketCategoryWithStatistic>>> combiner(){
  return (a,b) -> a;
}",0.9285714285714286
164556,"@Test public void testSoldOut() throws InterruptedException {
  List<TicketCategoryModification> categories=Arrays.asList(new TicketCategoryModification(null,""String_Node_Str"",AVAILABLE_SEATS - 1,new DateTimeModification(LocalDate.now().minusDays(1),LocalTime.now()),new DateTimeModification(LocalDate.now().plusDays(2),LocalTime.now()),DESCRIPTION,BigDecimal.ZERO,false,""String_Node_Str"",true),new TicketCategoryModification(null,""String_Node_Str"",0,new DateTimeModification(LocalDate.now().minusDays(1),LocalTime.now()),new DateTimeModification(LocalDate.now().plusDays(2),LocalTime.now()),DESCRIPTION,BigDecimal.ZERO,false,""String_Node_Str"",false));
  Pair<Event,String> pair=initEvent(categories,organizationRepository,userManager,eventManager);
  Event event=pair.getKey();
  List<TicketCategory> ticketCategories=eventManager.loadTicketCategories(event);
  TicketCategory bounded=ticketCategories.get(0);
  TicketCategory unbounded=ticketCategories.get(1);
  List<Integer> reserved=ticketRepository.selectFreeTicketsForPreReservation(event.getId(),20);
  String reservationId=UUID.randomUUID().toString();
  ticketReservationRepository.createNewReservation(reservationId,DateUtils.addHours(new Date(),1),null,Locale.ITALIAN.getLanguage());
  ticketRepository.reserveTickets(reservationId,reserved.subList(0,19),bounded.getId(),Locale.ITALIAN.getLanguage());
  ticketRepository.reserveTickets(reservationId,reserved.subList(19,20),unbounded.getId(),Locale.ITALIAN.getLanguage());
  ticketRepository.updateTicketsStatusWithReservationId(reservationId,Ticket.TicketStatus.ACQUIRED.name());
  waitingQueueManager.subscribe(event,""String_Node_Str"",""String_Node_Str"",Locale.ENGLISH);
  Thread.sleep(100L);
  waitingQueueManager.subscribe(event,""String_Node_Str"",""String_Node_Str"",Locale.ITALIAN);
  List<WaitingQueueSubscription> subscriptions=waitingQueueRepository.loadAll(event.getId());
  assertTrue(waitingQueueRepository.countWaitingPeople(event.getId()) == 2);
  assertTrue(subscriptions.stream().allMatch(w -> w.getSubscriptionType().equals(WaitingQueueSubscription.Type.SOLD_OUT)));
  waitingQueueSubscriptionProcessor.distributeAvailableSeats(event);
  assertTrue(waitingQueueRepository.countWaitingPeople(event.getId()) == 2);
  Ticket firstTicket=ticketRepository.findTicketsInReservation(reservationId).get(0);
  ticketRepository.releaseTicket(reservationId,event.getId(),firstTicket.getId());
  waitingQueueSubscriptionProcessor.distributeAvailableSeats(event);
  subscriptions=waitingQueueRepository.loadAll(event.getId());
  assertEquals(1,subscriptions.stream().filter(w -> StringUtils.isNotBlank(w.getReservationId())).count());
  Optional<WaitingQueueSubscription> first=subscriptions.stream().filter(w -> w.getStatus().equals(WaitingQueueSubscription.Status.PENDING)).findFirst();
  assertTrue(first.isPresent());
  assertEquals(""String_Node_Str"",first.get().getFullName());
}","@Test public void testSoldOut() throws InterruptedException {
  List<TicketCategoryModification> categories=Arrays.asList(new TicketCategoryModification(null,""String_Node_Str"",AVAILABLE_SEATS - 1,new DateTimeModification(LocalDate.now().minusDays(1),LocalTime.now()),new DateTimeModification(LocalDate.now().plusDays(2),LocalTime.now()),DESCRIPTION,BigDecimal.ZERO,false,""String_Node_Str"",true),new TicketCategoryModification(null,""String_Node_Str"",0,new DateTimeModification(LocalDate.now().minusDays(1),LocalTime.now()),new DateTimeModification(LocalDate.now().plusDays(2),LocalTime.now()),DESCRIPTION,BigDecimal.ZERO,false,""String_Node_Str"",false));
  Pair<Event,String> pair=initEvent(categories,organizationRepository,userManager,eventManager);
  Event event=pair.getKey();
  List<TicketCategory> ticketCategories=eventManager.loadTicketCategories(event);
  TicketCategory bounded=ticketCategories.get(0);
  TicketCategory unbounded=ticketCategories.get(1);
  List<Integer> boundedReserved=ticketRepository.selectFreeTicketsForPreReservation(event.getId(),20,ticketCategories.get(0).getId());
  assertEquals(19,boundedReserved.size());
  List<Integer> unboundedReserved=ticketRepository.selectNotAllocatedFreeTicketsForPreReservation(event.getId(),20);
  assertEquals(1,unboundedReserved.size());
  List<Integer> reserved=new ArrayList<>(boundedReserved);
  reserved.addAll(unboundedReserved);
  String reservationId=UUID.randomUUID().toString();
  ticketReservationRepository.createNewReservation(reservationId,DateUtils.addHours(new Date(),1),null,Locale.ITALIAN.getLanguage());
  ticketRepository.reserveTickets(reservationId,reserved.subList(0,19),bounded.getId(),Locale.ITALIAN.getLanguage());
  ticketRepository.reserveTickets(reservationId,reserved.subList(19,20),unbounded.getId(),Locale.ITALIAN.getLanguage());
  ticketRepository.updateTicketsStatusWithReservationId(reservationId,Ticket.TicketStatus.ACQUIRED.name());
  waitingQueueManager.subscribe(event,""String_Node_Str"",""String_Node_Str"",Locale.ENGLISH);
  Thread.sleep(100L);
  waitingQueueManager.subscribe(event,""String_Node_Str"",""String_Node_Str"",Locale.ITALIAN);
  List<WaitingQueueSubscription> subscriptions=waitingQueueRepository.loadAll(event.getId());
  assertTrue(waitingQueueRepository.countWaitingPeople(event.getId()) == 2);
  assertTrue(subscriptions.stream().allMatch(w -> w.getSubscriptionType().equals(WaitingQueueSubscription.Type.SOLD_OUT)));
  waitingQueueSubscriptionProcessor.distributeAvailableSeats(event);
  assertTrue(waitingQueueRepository.countWaitingPeople(event.getId()) == 2);
  Ticket firstTicket=ticketRepository.findTicketsInReservation(reservationId).get(0);
  ticketRepository.releaseTicket(reservationId,event.getId(),firstTicket.getId());
  waitingQueueSubscriptionProcessor.distributeAvailableSeats(event);
  subscriptions=waitingQueueRepository.loadAll(event.getId());
  assertEquals(1,subscriptions.stream().filter(w -> StringUtils.isNotBlank(w.getReservationId())).count());
  Optional<WaitingQueueSubscription> first=subscriptions.stream().filter(w -> w.getStatus().equals(WaitingQueueSubscription.Status.PENDING)).findFirst();
  assertTrue(first.isPresent());
  assertEquals(""String_Node_Str"",first.get().getFullName());
}",0.9442270058708416
164557,"@BeforeClass public static void initEnv(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
}","@BeforeClass public static void initEnv(){
  IntegrationTestUtil.initSystemProperties();
}",0.2581967213114754
164558,"@BeforeClass public static void initEnv(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
}","@BeforeClass public static void initEnv(){
  IntegrationTestUtil.initSystemProperties();
}",0.2581967213114754
164559,"public static Pair<Event,String> initEvent(List<TicketCategoryModification> categories,OrganizationRepository organizationRepository,UserManager userManager,EventManager eventManager){
  String organizationName=UUID.randomUUID().toString();
  String username=UUID.randomUUID().toString();
  String eventName=UUID.randomUUID().toString();
  organizationRepository.create(organizationName,""String_Node_Str"",""String_Node_Str"");
  Organization organization=organizationRepository.findByName(organizationName).get(0);
  userManager.insertUser(organization.getId(),username,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Role.OPERATOR);
  LocalDateTime expiration=LocalDateTime.now().plusDays(5).plusHours(1);
  Map<String,String> desc=new HashMap<>();
  desc.put(""String_Node_Str"",""String_Node_Str"");
  desc.put(""String_Node_Str"",""String_Node_Str"");
  desc.put(""String_Node_Str"",""String_Node_Str"");
  EventModification em=new EventModification(null,Event.EventType.INTERNAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,eventName,""String_Node_Str"",organization.getId(),""String_Node_Str"",desc,new DateTimeModification(LocalDate.now().plusDays(5),LocalTime.now()),new DateTimeModification(expiration.toLocalDate(),expiration.toLocalTime()),BigDecimal.TEN,""String_Node_Str"",AVAILABLE_SEATS,BigDecimal.ONE,true,null,categories,false,new LocationDescriptor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),7,null);
  eventManager.createEvent(em);
  return Pair.of(eventManager.getSingleEvent(eventName,username),username);
}","public static Pair<Event,String> initEvent(List<TicketCategoryModification> categories,OrganizationRepository organizationRepository,UserManager userManager,EventManager eventManager){
  String organizationName=UUID.randomUUID().toString();
  String username=UUID.randomUUID().toString();
  String eventName=UUID.randomUUID().toString();
  organizationRepository.create(organizationName,""String_Node_Str"",""String_Node_Str"");
  Organization organization=organizationRepository.findByName(organizationName).get(0);
  userManager.insertUser(organization.getId(),username,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Role.OPERATOR);
  userManager.insertUser(organization.getId(),username + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Role.OWNER);
  LocalDateTime expiration=LocalDateTime.now().plusDays(5).plusHours(1);
  Map<String,String> desc=new HashMap<>();
  desc.put(""String_Node_Str"",""String_Node_Str"");
  desc.put(""String_Node_Str"",""String_Node_Str"");
  desc.put(""String_Node_Str"",""String_Node_Str"");
  EventModification em=new EventModification(null,Event.EventType.INTERNAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,eventName,""String_Node_Str"",organization.getId(),""String_Node_Str"",desc,new DateTimeModification(LocalDate.now().plusDays(5),LocalTime.now()),new DateTimeModification(expiration.toLocalDate(),expiration.toLocalTime()),BigDecimal.TEN,""String_Node_Str"",AVAILABLE_SEATS,BigDecimal.ONE,true,null,categories,false,new LocationDescriptor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),7,null);
  eventManager.createEvent(em);
  return Pair.of(eventManager.getSingleEvent(eventName,username),username);
}",0.9568913175470553
164560,"private void cancelReservation(String reservationId){
  List<String> reservationIdsToRemove=singletonList(reservationId);
  specialPriceRepository.updateStatusForReservation(reservationIdsToRemove,Status.FREE.toString());
  int updatedTickets=ticketRepository.freeFromReservation(reservationIdsToRemove);
  Validate.isTrue(updatedTickets > 0,""String_Node_Str"");
  deleteReservations(reservationIdsToRemove);
  waitingQueueManager.fireReservationExpired(reservationId);
}","private void cancelReservation(String reservationId){
  List<String> reservationIdsToRemove=singletonList(reservationId);
  specialPriceRepository.updateStatusForReservation(reservationIdsToRemove,Status.FREE.toString());
  int updatedTickets=ticketRepository.freeFromReservation(reservationIdsToRemove);
  Validate.isTrue(updatedTickets > 0,""String_Node_Str"");
  waitingQueueManager.fireReservationExpired(reservationId);
  deleteReservations(reservationIdsToRemove);
}",0.902127659574468
164561,"public void fireReservationExpired(String reservationId){
  updateStatus(reservationId,WaitingQueueSubscription.Status.EXPIRED.toString());
}","public void fireReservationExpired(String reservationId){
  waitingQueueRepository.bulkUpdateExpiredReservations(Collections.singletonList(reservationId));
}",0.5906040268456376
164562,"@Autowired public EventController(ConfigurationManager configurationManager,EventRepository eventRepository,EventDescriptionRepository eventDescriptionRepository,I18nManager i18nManager,OrganizationRepository organizationRepository,TicketCategoryRepository ticketCategoryRepository,TicketCategoryDescriptionRepository ticketCategoryDescriptionRepository,SpecialPriceRepository specialPriceRepository,PromoCodeDiscountRepository promoCodeRepository,EventManager eventManager,TicketReservationManager ticketReservationManager){
  this.configurationManager=configurationManager;
  this.eventRepository=eventRepository;
  this.eventDescriptionRepository=eventDescriptionRepository;
  this.i18nManager=i18nManager;
  this.organizationRepository=organizationRepository;
  this.ticketCategoryRepository=ticketCategoryRepository;
  this.ticketCategoryDescriptionRepository=ticketCategoryDescriptionRepository;
  this.specialPriceRepository=specialPriceRepository;
  this.promoCodeRepository=promoCodeRepository;
  this.eventManager=eventManager;
  this.ticketReservationManager=ticketReservationManager;
}","@Autowired public EventController(ConfigurationManager configurationManager,EventRepository eventRepository,EventDescriptionRepository eventDescriptionRepository,I18nManager i18nManager,OrganizationRepository organizationRepository,TicketCategoryRepository ticketCategoryRepository,TicketCategoryDescriptionRepository ticketCategoryDescriptionRepository,SpecialPriceRepository specialPriceRepository,PromoCodeDiscountRepository promoCodeRepository,EventManager eventManager,TicketReservationManager ticketReservationManager,EventStatisticsManager eventStatisticsManager){
  this.configurationManager=configurationManager;
  this.eventRepository=eventRepository;
  this.eventDescriptionRepository=eventDescriptionRepository;
  this.i18nManager=i18nManager;
  this.organizationRepository=organizationRepository;
  this.ticketCategoryRepository=ticketCategoryRepository;
  this.ticketCategoryDescriptionRepository=ticketCategoryDescriptionRepository;
  this.specialPriceRepository=specialPriceRepository;
  this.promoCodeRepository=promoCodeRepository;
  this.eventManager=eventManager;
  this.ticketReservationManager=ticketReservationManager;
  this.eventStatisticsManager=eventStatisticsManager;
}",0.95640802092415
164563,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String showEvent(@PathVariable(""String_Node_Str"") String eventName,Model model,HttpServletRequest request,Locale locale){
  Optional<Event> maybeEvent=eventRepository.findOptionalByShortName(eventName);
  if (!maybeEvent.isPresent()) {
    return REDIRECT + ""String_Node_Str"";
  }
  Event event=maybeEvent.get();
  Optional<String> maybeSpecialCode=SessionUtil.retrieveSpecialPriceCode(request);
  Optional<SpecialPrice> specialCode=maybeSpecialCode.flatMap((trimmedCode) -> optionally(() -> specialPriceRepository.getByCode(trimmedCode)));
  Optional<PromoCodeDiscount> promoCodeDiscount=SessionUtil.retrievePromotionCodeDiscount(request).flatMap((code) -> optionally(() -> promoCodeRepository.findPromoCodeInEvent(event.getId(),code)));
  final ZonedDateTime now=ZonedDateTime.now(event.getZoneId());
  final int maxTickets=configurationManager.getIntConfigValue(Configuration.maxAmountOfTicketsByReservation(event),5);
  List<SaleableTicketCategory> ticketCategories=ticketCategoryRepository.findAllTicketCategories(event.getId()).stream().filter((c) -> !c.isAccessRestricted() || (specialCode.isPresent() && specialCode.get().getTicketCategoryId() == c.getId())).map((m) -> new SaleableTicketCategory(m,ticketCategoryDescriptionRepository.findByTicketCategoryIdAndLocale(m.getId(),locale.getLanguage()).orElse(""String_Node_Str""),now,event,ticketReservationManager.countAvailableTickets(event,m),maxTickets,promoCodeDiscount)).collect(Collectors.toList());
  LocationDescriptor ld=LocationDescriptor.fromGeoData(event.getLatLong(),TimeZone.getTimeZone(event.getTimeZone()),configurationManager.getStringConfigValue(Configuration.mapsClientApiKey()));
  final boolean hasAccessPromotions=ticketCategoryRepository.countAccessRestrictedRepositoryByEventId(event.getId()) > 0 || promoCodeRepository.countByEventId(event.getId()) > 0;
  String eventDescription=eventDescriptionRepository.findDescriptionByEventIdTypeAndLocale(event.getId(),EventDescription.EventDescriptionType.DESCRIPTION,locale.getLanguage()).orElse(""String_Node_Str"");
  final EventDescriptor eventDescriptor=new EventDescriptor(event,eventDescription);
  List<SaleableTicketCategory> expiredCategories=ticketCategories.stream().filter(SaleableTicketCategory::getExpired).collect(Collectors.toList());
  List<SaleableTicketCategory> validCategories=ticketCategories.stream().filter(tc -> !tc.getExpired()).collect(Collectors.toList());
  model.addAttribute(""String_Node_Str"",eventDescriptor).addAttribute(""String_Node_Str"",organizationRepository.getById(event.getOrganizationId())).addAttribute(""String_Node_Str"",validCategories).addAttribute(""String_Node_Str"",expiredCategories).addAttribute(""String_Node_Str"",!expiredCategories.isEmpty()).addAttribute(""String_Node_Str"",validCategories.isEmpty()).addAttribute(""String_Node_Str"",hasAccessPromotions).addAttribute(""String_Node_Str"",specialCode.map(SpecialPrice::getCode).orElse(null)).addAttribute(""String_Node_Str"",ld).addAttribute(""String_Node_Str"",""String_Node_Str"").addAttribute(""String_Node_Str"",promoCodeDiscount.isPresent()).addAttribute(""String_Node_Str"",promoCodeDiscount.orElse(null)).addAttribute(""String_Node_Str"",EventUtil.displayWaitingQueueForm(event,ticketCategories,configurationManager)).addAttribute(""String_Node_Str"",EventUtil.isPreSales(event,ticketCategories)).addAttribute(""String_Node_Str"",locale.getLanguage()).addAttribute(""String_Node_Str"",ticketCategories.stream().noneMatch(SaleableTicketCategory::getSaleable));
  model.asMap().putIfAbsent(""String_Node_Str"",false);
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String showEvent(@PathVariable(""String_Node_Str"") String eventName,Model model,HttpServletRequest request,Locale locale){
  Optional<Event> maybeEvent=eventRepository.findOptionalByShortName(eventName);
  if (!maybeEvent.isPresent()) {
    return REDIRECT + ""String_Node_Str"";
  }
  Event event=maybeEvent.get();
  Optional<String> maybeSpecialCode=SessionUtil.retrieveSpecialPriceCode(request);
  Optional<SpecialPrice> specialCode=maybeSpecialCode.flatMap((trimmedCode) -> optionally(() -> specialPriceRepository.getByCode(trimmedCode)));
  Optional<PromoCodeDiscount> promoCodeDiscount=SessionUtil.retrievePromotionCodeDiscount(request).flatMap((code) -> optionally(() -> promoCodeRepository.findPromoCodeInEvent(event.getId(),code)));
  final ZonedDateTime now=ZonedDateTime.now(event.getZoneId());
  final int maxTickets=configurationManager.getIntConfigValue(Configuration.maxAmountOfTicketsByReservation(event),5);
  List<SaleableTicketCategory> ticketCategories=ticketCategoryRepository.findAllTicketCategories(event.getId()).stream().filter((c) -> !c.isAccessRestricted() || (specialCode.isPresent() && specialCode.get().getTicketCategoryId() == c.getId())).map((m) -> new SaleableTicketCategory(m,ticketCategoryDescriptionRepository.findByTicketCategoryIdAndLocale(m.getId(),locale.getLanguage()).orElse(""String_Node_Str""),now,event,ticketReservationManager.countAvailableTickets(event,m),maxTickets,promoCodeDiscount)).collect(Collectors.toList());
  LocationDescriptor ld=LocationDescriptor.fromGeoData(event.getLatLong(),TimeZone.getTimeZone(event.getTimeZone()),configurationManager.getStringConfigValue(Configuration.mapsClientApiKey()));
  final boolean hasAccessPromotions=ticketCategoryRepository.countAccessRestrictedRepositoryByEventId(event.getId()) > 0 || promoCodeRepository.countByEventId(event.getId()) > 0;
  String eventDescription=eventDescriptionRepository.findDescriptionByEventIdTypeAndLocale(event.getId(),EventDescription.EventDescriptionType.DESCRIPTION,locale.getLanguage()).orElse(""String_Node_Str"");
  final EventDescriptor eventDescriptor=new EventDescriptor(event,eventDescription);
  List<SaleableTicketCategory> expiredCategories=ticketCategories.stream().filter(SaleableTicketCategory::getExpired).collect(Collectors.toList());
  List<SaleableTicketCategory> validCategories=ticketCategories.stream().filter(tc -> !tc.getExpired()).collect(Collectors.toList());
  model.addAttribute(""String_Node_Str"",eventDescriptor).addAttribute(""String_Node_Str"",organizationRepository.getById(event.getOrganizationId())).addAttribute(""String_Node_Str"",validCategories).addAttribute(""String_Node_Str"",expiredCategories).addAttribute(""String_Node_Str"",!expiredCategories.isEmpty()).addAttribute(""String_Node_Str"",validCategories.isEmpty()).addAttribute(""String_Node_Str"",hasAccessPromotions).addAttribute(""String_Node_Str"",specialCode.map(SpecialPrice::getCode).orElse(null)).addAttribute(""String_Node_Str"",ld).addAttribute(""String_Node_Str"",""String_Node_Str"").addAttribute(""String_Node_Str"",promoCodeDiscount.isPresent()).addAttribute(""String_Node_Str"",promoCodeDiscount.orElse(null)).addAttribute(""String_Node_Str"",EventUtil.displayWaitingQueueForm(event,ticketCategories,configurationManager,eventStatisticsManager.noSeatsAvailable())).addAttribute(""String_Node_Str"",EventUtil.isPreSales(event,ticketCategories)).addAttribute(""String_Node_Str"",locale.getLanguage()).addAttribute(""String_Node_Str"",ticketCategories.stream().noneMatch(SaleableTicketCategory::getSaleable));
  model.asMap().putIfAbsent(""String_Node_Str"",false);
  return ""String_Node_Str"";
}",0.9942260104481716
164564,"private void validateSubscriptionType(Event event,WaitingQueueSubscription.Type type){
  if (type == WaitingQueueSubscription.Type.PRE_SALES) {
    Validate.isTrue(configurationManager.getBooleanConfigValue(Configuration.enablePreRegistration(event),false),""String_Node_Str"");
  }
 else {
    EventWithStatistics eventWithStatistics=eventStatisticsManager.fillWithStatistics(event);
    Validate.isTrue(eventWithStatistics.getTicketCategories().stream().allMatch(tc -> determineAvailableSeats(tc,eventWithStatistics) == 0),""String_Node_Str"");
  }
}","private void validateSubscriptionType(Event event,WaitingQueueSubscription.Type type){
  if (type == WaitingQueueSubscription.Type.PRE_SALES) {
    Validate.isTrue(configurationManager.getBooleanConfigValue(Configuration.enablePreRegistration(event),false),""String_Node_Str"");
  }
 else {
    Validate.isTrue(eventStatisticsManager.noSeatsAvailable().test(event),""String_Node_Str"");
  }
}",0.7521367521367521
164565,"public static boolean displayWaitingQueueForm(Event event,List<SaleableTicketCategory> categories,ConfigurationManager configurationManager){
  Optional<SaleableTicketCategory> lastCategoryOptional=findLastCategory(categories);
  if (!lastCategoryOptional.isPresent()) {
    return false;
  }
  ZonedDateTime now=ZonedDateTime.now(event.getZoneId());
  SaleableTicketCategory lastCategory=lastCategoryOptional.get();
  if (isPreSales(event,categories)) {
    return configurationManager.getBooleanConfigValue(Configuration.enablePreRegistration(event),false);
  }
 else   if (configurationManager.getBooleanConfigValue(Configuration.enableWaitingQueue(event),false)) {
    return now.isBefore(lastCategory.getZonedExpiration()) && noTicketAvailable(categories);
  }
  return false;
}","public static boolean displayWaitingQueueForm(Event event,List<SaleableTicketCategory> categories,ConfigurationManager configurationManager,Predicate<Event> noTicketsAvailable){
  Optional<SaleableTicketCategory> lastCategoryOptional=findLastCategory(categories);
  if (!lastCategoryOptional.isPresent()) {
    return false;
  }
  ZonedDateTime now=ZonedDateTime.now(event.getZoneId());
  if (isPreSales(event,categories)) {
    return configurationManager.getBooleanConfigValue(Configuration.enablePreRegistration(event),false);
  }
 else   if (configurationManager.getBooleanConfigValue(Configuration.enableWaitingQueue(event),false)) {
    return now.isBefore(lastCategoryOptional.get().getZonedExpiration()) && noTicketsAvailable.test(event);
  }
  return false;
}",0.5854287556415216
164566,"public String renderString(String template,Map<String,Object> model,Locale locale,TemplateOutput templateOutput){
  return render(new ByteArrayResource(template.getBytes()),""String_Node_Str"",model,locale,templateOutput,false);
}","public String renderString(String template,Map<String,Object> model,Locale locale,TemplateOutput templateOutput){
  return render(new ByteArrayResource(template.getBytes(StandardCharsets.UTF_8)),""String_Node_Str"",model,locale,templateOutput,false);
}",0.9539748953974896
164567,"@Transactional public UserWithPassword resetPassword(int userId){
  User user=findUser(userId);
  String password=PasswordGenerator.generateRandomPassword();
  Validate.isTrue(userRepository.resetPassword(userId,password) == 1,""String_Node_Str"");
  return new UserWithPassword(user,password,UUID.randomUUID().toString());
}","@Transactional public UserWithPassword resetPassword(int userId){
  User user=findUser(userId);
  String password=PasswordGenerator.generateRandomPassword();
  Validate.isTrue(userRepository.resetPassword(userId,passwordEncoder.encode(password)) == 1,""String_Node_Str"");
  return new UserWithPassword(user,password,UUID.randomUUID().toString());
}",0.964179104477612
164568,"private HandlerInterceptor getCSPInterceptor(){
  return new HandlerInterceptorAdapter(){
    @Override public void postHandle(    HttpServletRequest request,    HttpServletResponse response,    Object handler,    ModelAndView modelAndView) throws Exception {
      response.addHeader(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
;
}","private HandlerInterceptor getCSPInterceptor(){
  return new HandlerInterceptorAdapter(){
    @Override public void postHandle(    HttpServletRequest request,    HttpServletResponse response,    Object handler,    ModelAndView modelAndView) throws Exception {
      response.addHeader(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
;
}",0.980228928199792
164569,"private void updateTicketOwner(UpdateTicketOwnerForm updateTicketOwner,HttpServletRequest request,Ticket t,Event event,TicketReservation ticketReservation){
  ticketReservationManager.updateTicketOwner(t,RequestContextUtils.getLocale(request),event,updateTicketOwner,getConfirmationTextBuilder(request,t,event,ticketReservation),getOwnerChangeTextBuilder(request,t,event),preparePdfTicket(request,event,ticketReservation,t));
}","private void updateTicketOwner(UpdateTicketOwnerForm updateTicketOwner,HttpServletRequest request,Ticket t,Event event,TicketReservation ticketReservation){
  ticketReservationManager.updateTicketOwner(t,RequestContextUtils.getLocale(request),event,updateTicketOwner,getConfirmationTextBuilder(request,event,ticketReservation),getOwnerChangeTextBuilder(request,t,event),preparePdfTicket(request,event,ticketReservation,t));
}",0.9976525821596244
164570,"private PDFTemplateBuilder preparePdfTicket(HttpServletRequest request,Event event,TicketReservation ticketReservation,Ticket ticket){
  TicketCategory ticketCategory=ticketCategoryRepository.getById(ticket.getCategoryId(),event.getId());
  Organization organization=organizationRepository.getById(event.getOrganizationId());
  try {
    return TemplateProcessor.buildPDFTicket(request,event,ticketReservation,ticket,ticketCategory,organization,templateManager);
  }
 catch (  WriterException|IOException e) {
    throw new IllegalStateException(e);
  }
}","private PartialTicketPDFGenerator preparePdfTicket(HttpServletRequest request,Event event,TicketReservation ticketReservation,Ticket ticket){
  TicketCategory ticketCategory=ticketCategoryRepository.getById(ticket.getCategoryId(),event.getId());
  Organization organization=organizationRepository.getById(event.getOrganizationId());
  try {
    return TemplateProcessor.buildPartialPDFTicket(request,event,ticketReservation,ticketCategory,organization,templateManager);
  }
 catch (  WriterException|IOException e) {
    throw new IllegalStateException(e);
  }
}",0.9561324977618622
164571,"private TextTemplateBuilder getOwnerChangeTextBuilder(HttpServletRequest request,Ticket t,Event event){
  return TemplateProcessor.buildEmailForOwnerChange(t.getEmail(),event,t,organizationRepository,ticketReservationManager,templateManager,request);
}","private PartialTicketTextGenerator getOwnerChangeTextBuilder(HttpServletRequest request,Ticket t,Event event){
  return TemplateProcessor.buildEmailForOwnerChange(event,t,organizationRepository,ticketReservationManager,templateManager,request);
}",0.9036144578313252
164572,"private TextTemplateBuilder getConfirmationTextBuilder(HttpServletRequest request,Ticket t,Event event,TicketReservation ticketReservation){
  return TemplateProcessor.buildEmail(event,organizationRepository,ticketReservation,t,templateManager,request);
}","private PartialTicketTextGenerator getConfirmationTextBuilder(HttpServletRequest request,Event event,TicketReservation ticketReservation){
  return TemplateProcessor.buildPartialEmail(event,organizationRepository,ticketReservation,templateManager,request);
}",0.8966861598440545
164573,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String sendTicketByEmail(@PathVariable(""String_Node_Str"") String eventName,@PathVariable(""String_Node_Str"") String reservationId,@PathVariable(""String_Node_Str"") String ticketIdentifier,HttpServletRequest request,Locale locale) throws Exception {
  Optional<Triple<Event,TicketReservation,Ticket>> oData=ticketReservationManager.fetchCompleteAndAssigned(eventName,reservationId,ticketIdentifier);
  if (!oData.isPresent()) {
    return ""String_Node_Str"" + eventName + ""String_Node_Str""+ reservationId;
  }
  Triple<Event,TicketReservation,Ticket> data=oData.get();
  Ticket ticket=data.getRight();
  Event event=data.getLeft();
  notificationManager.sendTicketByEmail(ticket,event,locale,TemplateProcessor.buildEmail(event,organizationRepository,data.getMiddle(),ticket,templateManager,request),preparePdfTicket(request,event,data.getMiddle(),ticket));
  return ""String_Node_Str"" + eventName + ""String_Node_Str""+ reservationId+ (""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")) ? (""String_Node_Str"" + ticket.getUuid()) : ""String_Node_Str"")+ ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String sendTicketByEmail(@PathVariable(""String_Node_Str"") String eventName,@PathVariable(""String_Node_Str"") String reservationId,@PathVariable(""String_Node_Str"") String ticketIdentifier,HttpServletRequest request,Locale locale) throws Exception {
  Optional<Triple<Event,TicketReservation,Ticket>> oData=ticketReservationManager.fetchCompleteAndAssigned(eventName,reservationId,ticketIdentifier);
  if (!oData.isPresent()) {
    return ""String_Node_Str"" + eventName + ""String_Node_Str""+ reservationId;
  }
  Triple<Event,TicketReservation,Ticket> data=oData.get();
  Ticket ticket=data.getRight();
  Event event=data.getLeft();
  notificationManager.sendTicketByEmail(ticket,event,locale,TemplateProcessor.buildPartialEmail(event,organizationRepository,data.getMiddle(),templateManager,request),preparePdfTicket(request,event,data.getMiddle(),ticket));
  return ""String_Node_Str"" + eventName + ""String_Node_Str""+ reservationId+ (""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")) ? (""String_Node_Str"" + ticket.getUuid()) : ""String_Node_Str"")+ ""String_Node_Str"";
}",0.9939236111111112
164574,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public void generateTicketPdf(@PathVariable(""String_Node_Str"") String eventName,@PathVariable(""String_Node_Str"") String reservationId,@PathVariable(""String_Node_Str"") String ticketIdentifier,HttpServletRequest request,HttpServletResponse response) throws IOException, DocumentException, WriterException {
  Optional<Triple<Event,TicketReservation,Ticket>> oData=ticketReservationManager.fetchCompleteAndAssigned(eventName,reservationId,ticketIdentifier);
  if (!oData.isPresent()) {
    response.sendError(HttpServletResponse.SC_FORBIDDEN);
    return;
  }
  Triple<Event,TicketReservation,Ticket> data=oData.get();
  Ticket ticket=data.getRight();
  response.setContentType(""String_Node_Str"");
  response.addHeader(""String_Node_Str"",""String_Node_Str"" + ticketIdentifier + ""String_Node_Str"");
  try (OutputStream os=response.getOutputStream()){
    preparePdfTicket(request,data.getLeft(),data.getMiddle(),ticket).build().createPDF(os);
  }
 }","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public void generateTicketPdf(@PathVariable(""String_Node_Str"") String eventName,@PathVariable(""String_Node_Str"") String reservationId,@PathVariable(""String_Node_Str"") String ticketIdentifier,HttpServletRequest request,HttpServletResponse response) throws IOException, DocumentException, WriterException {
  Optional<Triple<Event,TicketReservation,Ticket>> oData=ticketReservationManager.fetchCompleteAndAssigned(eventName,reservationId,ticketIdentifier);
  if (!oData.isPresent()) {
    response.sendError(HttpServletResponse.SC_FORBIDDEN);
    return;
  }
  Triple<Event,TicketReservation,Ticket> data=oData.get();
  Ticket ticket=data.getRight();
  response.setContentType(""String_Node_Str"");
  response.addHeader(""String_Node_Str"",""String_Node_Str"" + ticketIdentifier + ""String_Node_Str"");
  try (OutputStream os=response.getOutputStream()){
    preparePdfTicket(request,data.getLeft(),data.getMiddle(),ticket).generate(ticket).createPDF(os);
  }
 }",0.9896398618648248
164575,"private PDFTemplateBuilder preparePdfTicket(HttpServletRequest request,Event event,TicketReservation ticketReservation,Ticket ticket) throws WriterException, IOException {
  TicketCategory ticketCategory=ticketCategoryRepository.getById(ticket.getCategoryId(),event.getId());
  Organization organization=organizationRepository.getById(event.getOrganizationId());
  return TemplateProcessor.buildPDFTicket(request,event,ticketReservation,ticket,ticketCategory,organization,templateManager);
}","private PartialTicketPDFGenerator preparePdfTicket(HttpServletRequest request,Event event,TicketReservation ticketReservation,Ticket ticket) throws WriterException, IOException {
  TicketCategory ticketCategory=ticketCategoryRepository.getById(ticket.getCategoryId(),event.getId());
  Organization organization=organizationRepository.getById(event.getOrganizationId());
  return TemplateProcessor.buildPartialPDFTicket(request,event,ticketReservation,ticketCategory,organization,templateManager);
}",0.9504550050556118
164576,"public static PDFTemplateBuilder buildPDFTicket(HttpServletRequest request,Event event,TicketReservation ticketReservation,Ticket ticket,TicketCategory ticketCategory,Organization organization,TemplateManager templateManager) throws WriterException, IOException {
  return () -> {
    String qrCodeText=ticket.ticketCode(event.getPrivateKey());
    Map<String,Object> model=new HashMap<>();
    model.put(""String_Node_Str"",ticket);
    model.put(""String_Node_Str"",ticketReservation);
    model.put(""String_Node_Str"",ticketCategory);
    model.put(""String_Node_Str"",event);
    model.put(""String_Node_Str"",organization);
    model.put(""String_Node_Str"",""String_Node_Str"" + Base64.getEncoder().encodeToString(createQRCode(qrCodeText)));
    model.put(""String_Node_Str"",Optional.ofNullable(ticketReservation.getPaymentMethod()).orElse(PaymentProxy.STRIPE).isDeskPaymentRequired());
    String page=templateManager.renderClassPathResource(""String_Node_Str"",model,RequestContextUtils.getLocale(request));
    ITextRenderer renderer=new ITextRenderer();
    renderer.setDocumentFromString(page);
    renderer.layout();
    return renderer;
  }
;
}","public static PDFTemplateGenerator buildPDFTicket(HttpServletRequest request,Event event,TicketReservation ticketReservation,Ticket ticket,TicketCategory ticketCategory,Organization organization,TemplateManager templateManager){
  return () -> {
    String qrCodeText=ticket.ticketCode(event.getPrivateKey());
    Map<String,Object> model=new HashMap<>();
    model.put(""String_Node_Str"",ticket);
    model.put(""String_Node_Str"",ticketReservation);
    model.put(""String_Node_Str"",ticketCategory);
    model.put(""String_Node_Str"",event);
    model.put(""String_Node_Str"",organization);
    model.put(""String_Node_Str"",""String_Node_Str"" + Base64.getEncoder().encodeToString(createQRCode(qrCodeText)));
    model.put(""String_Node_Str"",Optional.ofNullable(ticketReservation.getPaymentMethod()).orElse(PaymentProxy.STRIPE).isDeskPaymentRequired());
    String page=templateManager.renderClassPathResource(""String_Node_Str"",model,RequestContextUtils.getLocale(request));
    ITextRenderer renderer=new ITextRenderer();
    renderer.setDocumentFromString(page);
    renderer.layout();
    return renderer;
  }
;
}",0.9773030707610146
164577,"public static TextTemplateBuilder buildEmailForOwnerChange(String newEmailOwner,Event e,Ticket t,OrganizationRepository organizationRepository,TicketReservationManager ticketReservationManager,TemplateManager templateManager,HttpServletRequest request){
  return () -> {
    String eventName=e.getShortName();
    Map<String,Object> emailModel=new HashMap<>();
    emailModel.put(""String_Node_Str"",t);
    emailModel.put(""String_Node_Str"",organizationRepository.getById(e.getOrganizationId()));
    emailModel.put(""String_Node_Str"",eventName);
    emailModel.put(""String_Node_Str"",t.getEmail());
    emailModel.put(""String_Node_Str"",newEmailOwner);
    emailModel.put(""String_Node_Str"",ticketReservationManager.reservationUrl(t.getTicketsReservationId()));
    return templateManager.renderClassPathResource(""String_Node_Str"",emailModel,RequestContextUtils.getLocale(request));
  }
;
}","public static PartialTicketTextGenerator buildEmailForOwnerChange(Event e,Ticket oldTicket,OrganizationRepository organizationRepository,TicketReservationManager ticketReservationManager,TemplateManager templateManager,HttpServletRequest request){
  return (newTicket) -> {
    String eventName=e.getShortName();
    Map<String,Object> emailModel=new HashMap<>();
    emailModel.put(""String_Node_Str"",oldTicket);
    emailModel.put(""String_Node_Str"",organizationRepository.getById(e.getOrganizationId()));
    emailModel.put(""String_Node_Str"",eventName);
    emailModel.put(""String_Node_Str"",oldTicket.getEmail());
    emailModel.put(""String_Node_Str"",newTicket.getEmail());
    emailModel.put(""String_Node_Str"",ticketReservationManager.reservationUrl(oldTicket.getTicketsReservationId()));
    return templateManager.renderClassPathResource(""String_Node_Str"",emailModel,RequestContextUtils.getLocale(request));
  }
;
}",0.9368070953436808
164578,"public static TextTemplateBuilder buildEmail(Event event,OrganizationRepository organizationRepository,TicketReservation ticketReservation,Ticket ticket,TemplateManager templateManager,HttpServletRequest request){
  return (() -> {
    Map<String,Object> model=new HashMap<>();
    model.put(""String_Node_Str"",organizationRepository.getById(event.getOrganizationId()));
    model.put(""String_Node_Str"",event);
    model.put(""String_Node_Str"",ticketReservation);
    model.put(""String_Node_Str"",ticket);
    return templateManager.renderClassPathResource(""String_Node_Str"",model,RequestContextUtils.getLocale(request));
  }
);
}","public static TextTemplateGenerator buildEmail(Event event,OrganizationRepository organizationRepository,TicketReservation ticketReservation,Ticket ticket,TemplateManager templateManager,HttpServletRequest request){
  return (() -> {
    Map<String,Object> model=new HashMap<>();
    model.put(""String_Node_Str"",organizationRepository.getById(event.getOrganizationId()));
    model.put(""String_Node_Str"",event);
    model.put(""String_Node_Str"",ticketReservation);
    model.put(""String_Node_Str"",ticket);
    return templateManager.renderClassPathResource(""String_Node_Str"",model,RequestContextUtils.getLocale(request));
  }
);
}",0.9888535031847132
164579,"public void sendTicketByEmail(Ticket ticket,Event event,Locale locale,TextTemplateBuilder textBuilder,PDFTemplateBuilder ticketBuilder) throws DocumentException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ticketBuilder.build().createPDF(baos);
  Mailer.Attachment attachment=new Mailer.Attachment(""String_Node_Str"" + ticket.getUuid() + ""String_Node_Str"",new ByteArrayResource(baos.toByteArray()),""String_Node_Str"");
  mailer.send(ticket.getEmail(),messageSource.getMessage(""String_Node_Str"",new Object[]{event.getShortName()},locale),textBuilder.build(),Optional.empty(),attachment);
}","public void sendTicketByEmail(Ticket ticket,Event event,Locale locale,PartialTicketTextGenerator textBuilder,PartialTicketPDFGenerator ticketBuilder) throws DocumentException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ticketBuilder.generate(ticket).createPDF(baos);
  Mailer.Attachment attachment=new Mailer.Attachment(""String_Node_Str"" + ticket.getUuid() + ""String_Node_Str"",new ByteArrayResource(baos.toByteArray()),""String_Node_Str"");
  mailer.send(ticket.getEmail(),messageSource.getMessage(""String_Node_Str"",new Object[]{event.getShortName()},locale),textBuilder.generate(ticket),Optional.empty(),attachment);
}",0.8885298869143781
164580,"public void sendSimpleEmail(String recipient,String subject,TextTemplateBuilder textBuilder){
  mailer.send(recipient,subject,textBuilder.build(),Optional.empty());
}","public void sendSimpleEmail(String recipient,String subject,String text){
  mailer.send(recipient,subject,text,Optional.empty());
}",0.8552188552188552
164581,"public void updateTicketOwner(Ticket ticket,Locale locale,Event event,UpdateTicketOwnerForm updateTicketOwner,TextTemplateBuilder confirmationTextBuilder,TextTemplateBuilder ownerChangeTextBuilder,PDFTemplateBuilder pdfTemplateBuilder){
  String newEmail=updateTicketOwner.getEmail().trim();
  String newFullName=updateTicketOwner.getFullName().trim();
  ticketRepository.updateTicketOwner(ticket.getUuid(),newEmail,newFullName);
  ticketRepository.updateOptionalTicketInfo(ticket.getUuid(),updateTicketOwner.getJobTitle(),updateTicketOwner.getCompany(),updateTicketOwner.getPhoneNumber(),updateTicketOwner.getAddress(),updateTicketOwner.getCountry(),updateTicketOwner.getTShirtSize(),updateTicketOwner.getNotes(),locale.getLanguage());
  if (!StringUtils.equalsIgnoreCase(newEmail,ticket.getEmail()) || !StringUtils.equalsIgnoreCase(newFullName,ticket.getFullName())) {
    sendTicketByEmail(ticketRepository.findByUUID(ticket.getUuid()),locale,event,confirmationTextBuilder,pdfTemplateBuilder);
  }
  if (StringUtils.isNotBlank(ticket.getEmail()) && !StringUtils.equalsIgnoreCase(newEmail,ticket.getEmail())) {
    String subject=messageSource.getMessage(""String_Node_Str"",new Object[]{event.getShortName()},locale);
    notificationManager.sendSimpleEmail(ticket.getEmail(),subject,ownerChangeTextBuilder);
  }
}","public void updateTicketOwner(Ticket ticket,Locale locale,Event event,UpdateTicketOwnerForm updateTicketOwner,PartialTicketTextGenerator confirmationTextBuilder,PartialTicketTextGenerator ownerChangeTextBuilder,PartialTicketPDFGenerator pdfTemplateGenerator){
  String newEmail=updateTicketOwner.getEmail().trim();
  String newFullName=updateTicketOwner.getFullName().trim();
  ticketRepository.updateTicketOwner(ticket.getUuid(),newEmail,newFullName);
  ticketRepository.updateOptionalTicketInfo(ticket.getUuid(),updateTicketOwner.getJobTitle(),updateTicketOwner.getCompany(),updateTicketOwner.getPhoneNumber(),updateTicketOwner.getAddress(),updateTicketOwner.getCountry(),updateTicketOwner.getTShirtSize(),updateTicketOwner.getNotes(),locale.getLanguage());
  Ticket newTicket=ticketRepository.findByUUID(ticket.getUuid());
  if (!StringUtils.equalsIgnoreCase(newEmail,ticket.getEmail()) || !StringUtils.equalsIgnoreCase(newFullName,ticket.getFullName())) {
    sendTicketByEmail(newTicket,locale,event,confirmationTextBuilder,pdfTemplateGenerator);
  }
  if (StringUtils.isNotBlank(ticket.getEmail()) && !StringUtils.equalsIgnoreCase(newEmail,ticket.getEmail())) {
    String subject=messageSource.getMessage(""String_Node_Str"",new Object[]{event.getShortName()},locale);
    notificationManager.sendSimpleEmail(ticket.getEmail(),subject,ownerChangeTextBuilder.generate(newTicket));
  }
}",0.8044362292051755
164582,"private void sendTicketByEmail(Ticket ticket,Locale locale,Event event,TextTemplateBuilder confirmationTextBuilder,PDFTemplateBuilder pdfTemplateBuilder){
  try {
    notificationManager.sendTicketByEmail(ticket,event,locale,confirmationTextBuilder,pdfTemplateBuilder);
  }
 catch (  DocumentException e) {
    throw new IllegalStateException(e);
  }
}","private void sendTicketByEmail(Ticket ticket,Locale locale,Event event,PartialTicketTextGenerator confirmationTextBuilder,PartialTicketPDFGenerator pdfTemplateGenerator){
  try {
    notificationManager.sendTicketByEmail(ticket,event,locale,confirmationTextBuilder,pdfTemplateGenerator);
  }
 catch (  DocumentException e) {
    throw new IllegalStateException(e);
  }
}",0.481994459833795
164583,"public boolean hasBeenSold(){
  return status == TicketStatus.ACQUIRED || status == TicketStatus.CANCELLED || status == TicketStatus.CHECKED_IN;
}","public boolean hasBeenSold(){
  return SOLD_STATUSES.contains(status);
}",0.4403669724770642
164584,"public void updateEventPrices(int eventId,EventModification em,String username){
  final Event original=eventRepository.findById(eventId);
  checkOwnership(original,username,em.getOrganizationId());
  if (original.getAvailableSeats() > em.getAvailableSeats()) {
    final EventWithStatistics eventWithStatistics=fillWithStatistics(original);
    int allocatedSeats=eventWithStatistics.getTicketCategories().stream().mapToInt(TicketCategoryWithStatistic::getMaxTickets).sum();
    if (em.getAvailableSeats() < allocatedSeats) {
      throw new IllegalArgumentException(format(""String_Node_Str"",em.getAvailableSeats(),allocatedSeats));
    }
  }
  String paymentProxies=collectPaymentProxies(em);
  int actualPrice=evaluatePrice(em.getPriceInCents(),em.getVat(),em.isVatIncluded(),em.isFreeOfCharge());
  BigDecimal vat=em.isFreeOfCharge() ? BigDecimal.ZERO : em.getVat();
  eventRepository.updatePrices(actualPrice,em.getCurrency(),em.getAvailableSeats(),em.isVatIncluded(),vat,paymentProxies);
}","public void updateEventPrices(int eventId,EventModification em,String username){
  final Event original=eventRepository.findById(eventId);
  checkOwnership(original,username,em.getOrganizationId());
  if (original.getAvailableSeats() > em.getAvailableSeats()) {
    final EventWithStatistics eventWithStatistics=fillWithStatistics(original);
    int allocatedSeats=eventWithStatistics.getTicketCategories().stream().mapToInt(TicketCategoryWithStatistic::getMaxTickets).sum();
    if (em.getAvailableSeats() < allocatedSeats) {
      throw new IllegalArgumentException(format(""String_Node_Str"",em.getAvailableSeats(),allocatedSeats));
    }
  }
  String paymentProxies=collectPaymentProxies(em);
  int actualPrice=evaluatePrice(em.getPriceInCents(),em.getVat(),em.isVatIncluded(),em.isFreeOfCharge());
  BigDecimal vat=em.isFreeOfCharge() ? BigDecimal.ZERO : em.getVat();
  eventRepository.updatePrices(actualPrice,em.getCurrency(),em.getAvailableSeats(),em.isVatIncluded(),vat,paymentProxies,eventId);
}",0.995995995995996
164585,"@Query(""String_Node_Str"") int updatePrices(@Bind(""String_Node_Str"") int regular_price,@Bind(""String_Node_Str"") String currency,@Bind(""String_Node_Str"") int available_seats,@Bind(""String_Node_Str"") boolean vat_included,@Bind(""String_Node_Str"") BigDecimal vat,@Bind(""String_Node_Str"") String allowedPaymentProxies);","@Query(""String_Node_Str"") int updatePrices(@Bind(""String_Node_Str"") int regular_price,@Bind(""String_Node_Str"") String currency,@Bind(""String_Node_Str"") int available_seats,@Bind(""String_Node_Str"") boolean vat_included,@Bind(""String_Node_Str"") BigDecimal vat,@Bind(""String_Node_Str"") String allowedPaymentProxies,@Bind(""String_Node_Str"") int eventId);",0.9441930618401206
164586,"public static ValidationResult validateEventPrices(EventModification ev,Errors errors){
  if (!ev.isFreeOfCharge()) {
    if (isCollectionEmpty(ev.getAllowedPaymentProxies())) {
      errors.reject(""String_Node_Str"",""String_Node_Str"");
    }
    if (ev.getRegularPrice() == null || BigDecimal.ZERO.compareTo(ev.getRegularPrice()) <= 0) {
      errors.reject(""String_Node_Str"",""String_Node_Str"");
    }
    if (ev.getVat() == null || BigDecimal.ZERO.compareTo(ev.getRegularPrice()) < 0) {
      errors.reject(""String_Node_Str"",""String_Node_Str"");
    }
    ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  }
  if (ev.getAvailableSeats() < 1) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}","public static ValidationResult validateEventPrices(EventModification ev,Errors errors){
  if (!ev.isFreeOfCharge()) {
    if (isCollectionEmpty(ev.getAllowedPaymentProxies())) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (ev.getRegularPrice() == null || BigDecimal.ZERO.compareTo(ev.getRegularPrice()) <= 0) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (ev.getVat() == null || BigDecimal.ZERO.compareTo(ev.getRegularPrice()) < 0) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  }
  if (ev.getAvailableSeats() < 1) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}",0.9874529485570892
164587,"public static ValidationResult validateTicketAssignment(UpdateTicketOwnerForm form,Errors errors){
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  String email=form.getEmail();
  if (StringUtils.isNotEmpty(email) && !SIMPLE_E_MAIL_PATTERN.matcher(email).matches()) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(form.getFullName()) || StringUtils.length(form.getFullName()) > 255) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isNotBlank(form.getNotes()) && StringUtils.length(form.getNotes()) > 1024) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}","public static ValidationResult validateTicketAssignment(UpdateTicketOwnerForm form,Errors errors){
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  String email=form.getEmail();
  if (StringUtils.isNotEmpty(email) && !SIMPLE_E_MAIL_PATTERN.matcher(email).matches()) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(form.getFullName()) || StringUtils.length(form.getFullName()) > 255) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isNotBlank(form.getNotes()) && StringUtils.length(form.getNotes()) > 1024) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}",0.9897750511247444
164588,"public static ValidationResult validateCategory(TicketCategoryModification category,Errors errors){
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  if (category.getMaxTickets() < 1) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  if (!category.getInception().isBefore(category.getExpiration())) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}","public static ValidationResult validateCategory(TicketCategoryModification category,Errors errors){
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  if (category.getMaxTickets() < 1) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  if (!category.getInception().isBefore(category.getExpiration())) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}",0.989247311827957
164589,"public static ValidationResult validateEventHeader(EventModification ev,Errors errors){
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  if (ev.getOrganizationId() < 0) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  if (!StringUtils.startsWith(ev.getImageUrl(),""String_Node_Str"")) {
    errors.reject(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}","public static ValidationResult validateEventHeader(EventModification ev,Errors errors){
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  if (ev.getOrganizationId() < 0) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"");
  if (!StringUtils.startsWith(ev.getImageUrl(),""String_Node_Str"")) {
    errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
  }
  return evaluateValidationResult(errors);
}",0.9944196428571428
164590,"/** 
 * Get the total cost with VAT if it's not included in the ticket price.
 * @param reservationId
 * @return
 */
public TotalPrice totalReservationCostWithVAT(String reservationId){
  Event event=eventRepository.findByReservationId(reservationId);
  int total=totalFrom(ticketRepository.findTicketsInReservation(reservationId));
  if (event.isVatIncluded()) {
    final int vat=MonetaryUtil.calcVat(total,event.getVat());
    return new TotalPrice(total + vat,vat);
  }
 else {
    int priceWithVAT=MonetaryUtil.addVAT(total,event.getVat());
    return new TotalPrice(priceWithVAT,priceWithVAT - total);
  }
}","/** 
 * Get the total cost with VAT if it's not included in the ticket price.
 * @param reservationId
 * @return
 */
public TotalPrice totalReservationCostWithVAT(String reservationId){
  Event event=eventRepository.findByReservationId(reservationId);
  List<Ticket> tickets=ticketRepository.findTicketsInReservation(reservationId);
  int net=totalFrom(tickets);
  int vat=totalVat(tickets,event.getVat());
  return new TotalPrice(net + vat,vat);
}",0.706880301602262
164591,"@Override public void onStartup(ServletContext servletContext) throws ServletException {
  super.onStartup(servletContext);
  configureSessionCookie(servletContext);
  Dynamic redirectFilter=servletContext.addFilter(""String_Node_Str"",RedirectToHttpsFilter.class);
  redirectFilter.setAsyncSupported(true);
  redirectFilter.addMappingForUrlPatterns(null,false,""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"") != null) {
    Class<?> cls;
    try {
      cls=ClassUtils.getClass(""String_Node_Str"");
      MethodUtils.invokeStaticMethod(cls,""String_Node_Str"",new Object[]{new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}});
    }
 catch (    ReflectiveOperationException e) {
      log.warn(""String_Node_Str"",e);
    }
  }
}","@Override public void onStartup(ServletContext servletContext) throws ServletException {
  super.onStartup(servletContext);
  configureSessionCookie(servletContext);
  CharacterEncodingFilter cef=new CharacterEncodingFilter();
  cef.setEncoding(""String_Node_Str"");
  cef.setForceEncoding(true);
  Dynamic characterEncodingFilter=servletContext.addFilter(""String_Node_Str"",cef);
  characterEncodingFilter.setAsyncSupported(true);
  characterEncodingFilter.addMappingForUrlPatterns(null,false,""String_Node_Str"");
  Dynamic redirectFilter=servletContext.addFilter(""String_Node_Str"",RedirectToHttpsFilter.class);
  redirectFilter.setAsyncSupported(true);
  redirectFilter.addMappingForUrlPatterns(null,false,""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"") != null) {
    Class<?> cls;
    try {
      cls=ClassUtils.getClass(""String_Node_Str"");
      MethodUtils.invokeStaticMethod(cls,""String_Node_Str"",new Object[]{new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}});
    }
 catch (    ReflectiveOperationException e) {
      log.warn(""String_Node_Str"",e);
    }
  }
}",0.8140161725067385
164592,"public String getRequiredValue(ConfigurationKeys key){
  return optionally(() -> configurationRepository.findByKey(key.getValue())).map(Configuration::getValue).orElseThrow(IllegalArgumentException::new);
}","public String getRequiredValue(ConfigurationKeys key){
  return optionally(() -> configurationRepository.findByKey(key.getValue())).map(Configuration::getValue).orElseThrow(() -> new IllegalArgumentException(""String_Node_Str"" + key + ""String_Node_Str""));
}",0.8701298701298701
164593,"public BigDecimal getFinalPrice(){
  if (event.isVatIncluded()) {
    return MonetaryUtil.addVAT(ticketCategory.getPrice(),event.getVat());
  }
  return ticketCategory.getPrice();
}","public String getFinalPrice(){
  if (event.isVatIncluded()) {
    return formatCents(addVAT(ticketCategory.getPriceInCents(),event.getVat()));
  }
  return formatCents(ticketCategory.getPriceInCents());
}",0.8155844155844156
164594,"@Override protected void configure(HttpSecurity http) throws Exception {
  http.sessionManagement().invalidSessionUrl(""String_Node_Str"").and().csrf().csrfTokenRepository(getCsrfTokenRepository()).and().authorizeRequests().antMatchers(ADMIN_API + ""String_Node_Str"",ADMIN_API + ""String_Node_Str"",ADMIN_API + ""String_Node_Str"").hasRole(ROLE_ADMIN).antMatchers(""String_Node_Str"").hasAnyRole(ROLE_ADMIN,ROLE_OWNER).antMatchers(""String_Node_Str"").permitAll().and().formLogin();
}","@Override protected void configure(HttpSecurity http) throws Exception {
  http.exceptionHandling().accessDeniedPage(""String_Node_Str"").and().csrf().csrfTokenRepository(getCsrfTokenRepository()).and().authorizeRequests().antMatchers(ADMIN_API + ""String_Node_Str"",ADMIN_API + ""String_Node_Str"",ADMIN_API + ""String_Node_Str"").hasRole(ROLE_ADMIN).antMatchers(""String_Node_Str"").hasAnyRole(ROLE_ADMIN,ROLE_OWNER).antMatchers(""String_Node_Str"").permitAll().and().formLogin();
}",0.926984126984127
164595,"@Bean public MessageSource messageSource(){
  ResourceBundleMessageSource source=new ResourceBundleMessageSource();
  source.setBasenames(""String_Node_Str"",""String_Node_Str"");
  source.setFallbackToSystemLocale(false);
  return source;
}","@Bean public MessageSource messageSource(){
  ResourceBundleMessageSource source=new ResourceBundleMessageSource();
  source.setBasenames(""String_Node_Str"",""String_Node_Str"");
  source.setFallbackToSystemLocale(false);
  source.setAlwaysUseMessageFormat(true);
  return source;
}",0.9186046511627908
164596,"public int getPriceInCents(){
  return freeOfCharge ? 0 : price.multiply(EventManager.HUNDRED).intValueExact();
}","public int getPriceInCents(){
  return freeOfCharge ? 0 : MonetaryUtil.unitToCents(price);
}",0.6536585365853659
164597,"public BigDecimal getNotSoldTicketsPercent(){
  return EventManager.HUNDRED.subtract(soldTicketsPercent);
}","public BigDecimal getNotSoldTicketsPercent(){
  return MonetaryUtil.HUNDRED.subtract(soldTicketsPercent);
}",0.9252336448598132
164598,"public TicketCategoryWithStatistic(TicketCategory ticketCategory,int soldTickets,List<SpecialPrice> tokenStatus){
  this.ticketCategory=ticketCategory;
  this.soldTickets=soldTickets;
  this.tokenStatus=tokenStatus;
  this.soldTicketsPercent=BigDecimal.valueOf(soldTickets).divide(BigDecimal.valueOf(ticketCategory.getMaxTickets()),2,RoundingMode.HALF_UP);
}","public TicketCategoryWithStatistic(TicketCategory ticketCategory,int soldTickets,List<SpecialPrice> tokenStatus){
  this.ticketCategory=ticketCategory;
  this.soldTickets=soldTickets;
  this.tokenStatus=tokenStatus;
  this.soldTicketsPercent=BigDecimal.valueOf(soldTickets).divide(BigDecimal.valueOf(ticketCategory.getMaxTickets()),2,RoundingMode.HALF_UP).multiply(MonetaryUtil.HUNDRED);
}",0.9585006693440428
164599,"public int getPriceInCents(){
  return price.multiply(EventManager.HUNDRED).intValueExact();
}","public int getPriceInCents(){
  return freeOfCharge ? 0 : price.multiply(EventManager.HUNDRED).intValueExact();
}",0.9082125603864736
164600,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ac_refresh_recycler_view);
  if (getSupportActionBar() != null) {
    getSupportActionBar().setDisplayShowHomeEnabled(true);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
  }
  mWrapperRecyclerView=(WrapperRecyclerView)findViewById(R.id.recycler_view);
  final LinearLayoutManager linearLayoutManager=new LinearLayoutManager(this);
  mWrapperRecyclerView.setLayoutManager(linearLayoutManager);
  mAdapter=new SimpleAdapter(new ArrayList<String>());
  mAdapter.setLoadMoreFooterView(new DefaultLoadMoreFooterView(this));
  mWrapperRecyclerView.setAdapter(mAdapter);
  mWrapperRecyclerView.setRecyclerViewListener(this);
  mWrapperRecyclerView.post(new Runnable(){
    @Override public void run(){
      mWrapperRecyclerView.autoRefresh();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ac_refresh_recycler_view);
  if (getSupportActionBar() != null) {
    getSupportActionBar().setDisplayShowHomeEnabled(true);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
  }
  mWrapperRecyclerView=(WrapperRecyclerView)findViewById(R.id.recycler_view);
  final LinearLayoutManager linearLayoutManager=new LinearLayoutManager(this);
  mWrapperRecyclerView.setLayoutManager(linearLayoutManager);
  mAdapter=new SimpleAdapter(new ArrayList<String>());
  mAdapter.setLoadMoreFooterView(new DefaultLoadMoreFooterView(this));
  mWrapperRecyclerView.setAdapter(mAdapter);
  addHeaderView();
  addFooterView();
  mWrapperRecyclerView.setRecyclerViewListener(this);
  mWrapperRecyclerView.post(new Runnable(){
    @Override public void run(){
      mWrapperRecyclerView.autoRefresh();
    }
  }
);
}",0.9802904564315352
164601,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ac_main);
  if (getSupportActionBar() != null) {
    getSupportActionBar().setDisplayShowHomeEnabled(true);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
  }
  mRecyclerView=(RecyclerView)findViewById(R.id.recycler_view);
  final GridLayoutManager layoutManager=new GridLayoutManager(this,3);
  layoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup(){
    @Override public int getSpanSize(    int position){
      if (!mAdapter.isContentView(position)) {
        return layoutManager.getSpanCount();
      }
 else {
        return 1;
      }
    }
  }
);
  mRecyclerView.setLayoutManager(layoutManager);
  mAdapter=new SimpleAdapter(values);
  mRecyclerView.setAdapter(mAdapter);
  mAdapter.setLoadMoreFooterView(new BaseLoadMoreFooterView(this){
    @Override public int getLoadMoreLayoutResource(){
      return R.layout.list_load_more;
    }
  }
);
  final PtrFrameLayout ptrFrameLayout=(PtrFrameLayout)findViewById(R.id.material_style_ptr_frame);
  final MaterialHeader header=new MaterialHeader(this);
  int[] colors=getResources().getIntArray(R.array.google_colors);
  header.setColorSchemeColors(colors);
  header.setLayoutParams(new PtrFrameLayout.LayoutParams(-1,-2));
  header.setPadding(0,PtrLocalDisplay.dp2px(15),0,PtrLocalDisplay.dp2px(10));
  header.setPtrFrameLayout(ptrFrameLayout);
  ptrFrameLayout.setDurationToCloseHeader(1500);
  ptrFrameLayout.setHeaderView(header);
  ptrFrameLayout.addPtrUIHandler(header);
  ptrFrameLayout.setEnabledNextPtrAtOnce(false);
  ptrFrameLayout.setPtrHandler(new PtrHandler(){
    @Override public boolean checkCanDoRefresh(    PtrFrameLayout frame,    View content,    View header){
      return layoutManager.findFirstCompletelyVisibleItemPosition() <= 0;
    }
    @Override public void onRefreshBegin(    PtrFrameLayout frame){
      mLoadMoreListener.setPagination(1);
      ptrFrameLayout.postDelayed(new Runnable(){
        @Override public void run(){
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.notifyItemRangeInserted(0,10);
          ptrFrameLayout.refreshComplete();
          mRecyclerView.scrollToPosition(0);
        }
      }
,500);
    }
  }
);
  mLoadMoreListener=new EndlessRecyclerOnScrollListener(layoutManager){
    @Override public void onLoadMore(    final int pagination,    int pageSize){
      mRecyclerView.post(new Runnable(){
        @Override public void run(){
          mAdapter.showLoadMoreView();
        }
      }
);
      mRecyclerView.postDelayed(new Runnable(){
        @Override public void run(){
          int position=mAdapter.getItemCount();
          if (mAdapter.getItemCount() > 50) {
            mAdapter.showNoMoreDataView();
          }
 else {
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
          }
          mAdapter.notifyDataSetChanged();
          mRecyclerView.scrollToPosition(position);
          loadComplete();
          mAdapter.hideFooterView();
        }
      }
,1500);
    }
  }
;
  mRecyclerView.addOnScrollListener(mLoadMoreListener);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ac_main);
  if (getSupportActionBar() != null) {
    getSupportActionBar().setDisplayShowHomeEnabled(true);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
  }
  mRecyclerView=(RecyclerView)findViewById(R.id.recycler_view);
  final GridLayoutManager layoutManager=new GridLayoutManager(this,3);
  layoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup(){
    @Override public int getSpanSize(    int position){
      if (mAdapter.isContentView(position)) {
        return 1;
      }
 else {
        return layoutManager.getSpanCount();
      }
    }
  }
);
  mRecyclerView.setLayoutManager(layoutManager);
  mAdapter=new SimpleAdapter(values);
  mRecyclerView.setAdapter(mAdapter);
  mAdapter.setLoadMoreFooterView(new BaseLoadMoreFooterView(this){
    @Override public int getLoadMoreLayoutResource(){
      return R.layout.list_load_more;
    }
  }
);
  final PtrFrameLayout ptrFrameLayout=(PtrFrameLayout)findViewById(R.id.material_style_ptr_frame);
  final MaterialHeader header=new MaterialHeader(this);
  int[] colors=getResources().getIntArray(R.array.google_colors);
  header.setColorSchemeColors(colors);
  header.setLayoutParams(new PtrFrameLayout.LayoutParams(-1,-2));
  header.setPadding(0,PtrLocalDisplay.dp2px(15),0,PtrLocalDisplay.dp2px(10));
  header.setPtrFrameLayout(ptrFrameLayout);
  ptrFrameLayout.setDurationToCloseHeader(1500);
  ptrFrameLayout.setHeaderView(header);
  ptrFrameLayout.addPtrUIHandler(header);
  ptrFrameLayout.setEnabledNextPtrAtOnce(false);
  ptrFrameLayout.setPtrHandler(new PtrHandler(){
    @Override public boolean checkCanDoRefresh(    PtrFrameLayout frame,    View content,    View header){
      return layoutManager.findFirstCompletelyVisibleItemPosition() <= 0;
    }
    @Override public void onRefreshBegin(    PtrFrameLayout frame){
      mLoadMoreListener.setPagination(1);
      ptrFrameLayout.postDelayed(new Runnable(){
        @Override public void run(){
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.appendToTop(mAdapter.getItemCount() + ""String_Node_Str"");
          mAdapter.notifyItemRangeInserted(0,10);
          ptrFrameLayout.refreshComplete();
          mRecyclerView.scrollToPosition(0);
        }
      }
,500);
    }
  }
);
  mLoadMoreListener=new EndlessRecyclerOnScrollListener(layoutManager){
    @Override public void onLoadMore(    final int pagination,    int pageSize){
      mRecyclerView.post(new Runnable(){
        @Override public void run(){
          mAdapter.showLoadMoreView();
        }
      }
);
      mRecyclerView.postDelayed(new Runnable(){
        @Override public void run(){
          int position=mAdapter.getItemCount();
          if (mAdapter.getItemCount() > 50) {
            mAdapter.showNoMoreDataView();
          }
 else {
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
            mAdapter.append(pagination + ""String_Node_Str"" + mAdapter.getItemCount());
          }
          mAdapter.notifyDataSetChanged();
          mRecyclerView.scrollToPosition(position);
          loadComplete();
          mAdapter.hideFooterView();
        }
      }
,1500);
    }
  }
;
  mRecyclerView.addOnScrollListener(mLoadMoreListener);
}",0.9919758111408304
164602,"@Override public int getSpanSize(int position){
  if (!mAdapter.isContentView(position)) {
    return layoutManager.getSpanCount();
  }
 else {
    return 1;
  }
}","@Override public int getSpanSize(int position){
  if (mAdapter.isContentView(position)) {
    return 1;
  }
 else {
    return layoutManager.getSpanCount();
  }
}",0.8369230769230769
164603,"public void showNoMoreDataView(){
  if (mLoadMoreFooterView == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mLoadMoreFooterView.showNoMoreData();
  if (showLoadMoreView) {
  }
 else {
    this.showLoadMoreView=true;
    notifyItemInserted(getBasicItemCount());
  }
}","public void showNoMoreDataView(){
  if (mLoadMoreFooterView == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mLoadMoreFooterView.showNoMoreData();
  if (showLoadMoreView) {
  }
 else {
    this.showLoadMoreView=true;
    notifyItemInserted(getItemCount());
  }
}",0.9914236706689536
164604,"public void hideFooterView(){
  if (mLoadMoreFooterView == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (showLoadMoreView) {
    this.showLoadMoreView=false;
    notifyItemRemoved(getItemCount());
  }
}","public void hideFooterView(){
  if (mLoadMoreFooterView == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (showLoadMoreView) {
    this.showLoadMoreView=false;
    notifyDataSetChanged();
  }
}",0.9142857142857144
164605,"public void showLoadMoreView(){
  if (mLoadMoreFooterView == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mLoadMoreFooterView.showLoading();
  if (showLoadMoreView) {
  }
 else {
    this.showLoadMoreView=true;
    notifyItemInserted(getBasicItemCount());
  }
}","public void showLoadMoreView(){
  if (mLoadMoreFooterView == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mLoadMoreFooterView.showLoading();
  if (showLoadMoreView) {
  }
 else {
    this.showLoadMoreView=true;
    notifyItemInserted(getItemCount());
  }
}",0.9912739965095986
164606,"@SuppressWarnings(""String_Node_Str"") void addResult(@Nullable Object value){
  if (value == null) {
    getResults().addReturnValueResult(null);
  }
 else   if (isReplacementInstance(value)) {
    if (recordPhase != null) {
      Map<Object,Object> replacementMap=recordPhase.getReplacementMap();
      replacementMap.put(invocation.instance,value);
    }
    invocation.replacementInstance=value;
  }
 else   if (value instanceof Throwable) {
    getResults().addThrowable((Throwable)value);
  }
 else   if (value instanceof mockit.Delegate) {
    getResults().addDelegatedResult((mockit.Delegate<?>)value);
  }
 else {
    Class<?> rt=getReturnType();
    if (rt.isInstance(value)) {
      getResults().addReturnValueResult(value);
    }
 else {
      new ReturnTypeConversion(this,rt,value).addConvertedValue();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") void addResult(@Nullable Object value){
}",0.1725663716814159
164607,"Expectation(@Nullable RecordPhase recordPhase,@Nonnull ExpectedInvocation invocation,boolean nonStrict){
  this.recordPhase=recordPhase;
  this.invocation=invocation;
  constraints=new InvocationConstraints(nonStrict);
}","Expectation(@Nonnull RecordPhase recordPhase,@Nonnull ExpectedInvocation invocation,boolean nonStrict){
  this.recordPhase=recordPhase;
  this.invocation=invocation;
  constraints=new InvocationConstraints(nonStrict);
}",0.9840546697038725
164608,"@Nonnull public static String extractNames(@Nonnull Class<?> classOfInterest){
  String className=classOfInterest.getName();
  String classDesc=className.replace('.','/');
  if (!ParameterNames.hasNamesForClass(classDesc)) {
    byte[] classfile=JAVA_VERSION < 1.7F ? ClassFile.readBytesFromClassFile(classDesc) : ClassFile.getClassFile(classOfInterest);
    ClassMetadataReader cmr=new ClassMetadataReader(classfile,PARAMETERS);
    List<MethodInfo> methods=cmr.getMethods();
    for (    MethodInfo method : methods) {
      if (!method.isSynthetic()) {
        String[] parameters=method.parameters;
        if (parameters != null) {
          ParameterNames.register(classDesc,method.name,method.desc,parameters);
        }
      }
    }
  }
  return classDesc;
}","@Nonnull public static String extractNames(@Nonnull Class<?> classOfInterest){
  String className=classOfInterest.getName();
  String classDesc=className.replace('.','/');
  if (!ParameterNames.hasNamesForClass(classDesc)) {
    byte[] classfile=ClassFile.readBytesFromClassFile(classDesc);
    ClassMetadataReader cmr=new ClassMetadataReader(classfile,PARAMETERS);
    List<MethodInfo> methods=cmr.getMethods();
    for (    MethodInfo method : methods) {
      if (!method.isSynthetic()) {
        String[] parameters=method.parameters;
        if (parameters != null) {
          ParameterNames.register(classDesc,method.name,method.desc,parameters);
        }
      }
    }
  }
  return classDesc;
}",0.9564625850340136
164609,"@Nullable CommonDataSource createIfDataSourceDefinitionAvailable(@Nonnull TestedClass testedClass){
  if (dsName == null) {
    return null;
  }
  TestedClass testedClassToBeSearched=testedClass;
  do {
    createFromTestedClassOrASuperclass(testedClassToBeSearched);
    if (ds != null) {
      return ds;
    }
    testedClassToBeSearched=testedClassToBeSearched.parent;
  }
 while (testedClassToBeSearched != null);
  throw new IllegalStateException(""String_Node_Str"" + dsName + ""String_Node_Str""+ testedClass.nameOfTestedClass+ ""String_Node_Str"");
}","@Nullable CommonDataSource createIfDataSourceDefinitionAvailable(@Nonnull TestedClass testedClass){
  TestedClass testedClassWithDataSource=testedClass.parent;
  if (testedClassWithDataSource == null || dsName == null) {
    return null;
  }
  TestedClass testedClassToBeSearched=testedClassWithDataSource;
  do {
    createFromTestedClassOrASuperclass(testedClassToBeSearched);
    if (ds != null) {
      return ds;
    }
    testedClassToBeSearched=testedClassToBeSearched.parent;
  }
 while (testedClassToBeSearched != null);
  throw new IllegalStateException(""String_Node_Str"" + dsName + ""String_Node_Str""+ testedClassWithDataSource.nameOfTestedClass+ ""String_Node_Str"");
}",0.8984565393988627
164610,"private void readBytecodeInstructionsInCodeBlock(@Nonnegative int codeStart,@Nonnegative int codeEnd){
  char[] c=buf;
  byte[] b=code;
  int u=codeStart;
  while (u < codeEnd) {
    int offset=u - codeStart;
    readLabelAndLineNumber(offset);
    int opcode=b[u] & 0xFF;
switch (TYPE[opcode]) {
case NOARG:
      mv.visitInsn(opcode);
    u++;
  break;
case IMPLVAR:
readImplicitVarInstruction(opcode);
u++;
break;
case LABEL:
Label targetLabel=labels[offset + readShort(u + 1)];
mv.visitJumpInsn(opcode,targetLabel);
u+=3;
break;
case LABELW:
Label targetLabelW=labels[offset + readInt(u + 1)];
mv.visitJumpInsn(opcode - 33,targetLabelW);
u+=5;
break;
case InstructionType.WIDE:
u=readWideInstruction(u);
break;
case TABL:
u=readTableSwitchInstruction(u,offset);
break;
case LOOK:
u=readLookupSwitchInstruction(u,offset);
break;
case VAR:
int var=b[u + 1] & 0xFF;
mv.visitVarInsn(opcode,var);
u+=2;
break;
case SBYTE:
byte byteOperand=b[u + 1];
mv.visitIntInsn(opcode,byteOperand);
u+=2;
break;
case SHORT:
int shortOperand=readShort(u + 1);
mv.visitIntInsn(opcode,shortOperand);
u+=3;
break;
case InstructionType.LDC:
Object cst=readConst(b[u + 1] & 0xFF,c);
mv.visitLdcInsn(cst);
u+=2;
break;
case LDCW:
Object cstWide=readConst(readUnsignedShort(u + 1),c);
mv.visitLdcInsn(cstWide);
u+=3;
break;
case FIELDORMETH:
case ITFMETH:
readFieldOrInvokeInstruction(u,opcode);
u+=opcode == INVOKEINTERFACE ? 5 : 3;
break;
case INDYMETH:
u=readInvokeDynamicInstruction(u);
break;
case InstructionType.TYPE:
String typeDesc=readClass(u + 1);
mv.visitTypeInsn(opcode,typeDesc);
u+=3;
break;
case IINC:
int incCar=b[u + 1] & 0xFF;
byte increment=b[u + 2];
mv.visitIincInsn(incCar,increment);
u+=3;
break;
default :
String arrayTypeDesc=readClass(u + 1);
int dims=b[u + 3] & 0xFF;
mv.visitMultiANewArrayInsn(arrayTypeDesc,dims);
u+=4;
break;
}
}
}","private void readBytecodeInstructionsInCodeBlock(@Nonnegative int codeStart,@Nonnegative int codeEnd){
  char[] c=buf;
  byte[] b=code;
  int u=codeStart;
  while (u < codeEnd) {
    int offset=u - codeStart;
    readLabelAndLineNumber(offset);
    int opcode=b[u] & 0xFF;
switch (TYPE[opcode]) {
case NOARG:
      mv.visitInsn(opcode);
    u++;
  break;
case IMPLVAR:
readImplicitVarInstruction(opcode);
u++;
break;
case LABEL:
Label targetLabel=labels[offset + readShort(u + 1)];
mv.visitJumpInsn(opcode,targetLabel);
u+=3;
break;
case LABELW:
Label targetLabelW=labels[offset + readInt(u + 1)];
mv.visitJumpInsn(opcode - 33,targetLabelW);
u+=5;
break;
case WIDE_INSN:
u=readWideInstruction(u);
break;
case TABL_INSN:
u=readTableSwitchInstruction(u,offset);
break;
case LOOK_INSN:
u=readLookupSwitchInstruction(u,offset);
break;
case VAR:
int var=b[u + 1] & 0xFF;
mv.visitVarInsn(opcode,var);
u+=2;
break;
case SBYTE:
byte byteOperand=b[u + 1];
mv.visitIntInsn(opcode,byteOperand);
u+=2;
break;
case SHORT:
int shortOperand=readShort(u + 1);
mv.visitIntInsn(opcode,shortOperand);
u+=3;
break;
case LDC_INSN:
Object cst=readConst(b[u + 1] & 0xFF,c);
mv.visitLdcInsn(cst);
u+=2;
break;
case LDCW_INSN:
Object cstWide=readConst(readUnsignedShort(u + 1),c);
mv.visitLdcInsn(cstWide);
u+=3;
break;
case FIELDORMETH:
case ITFMETH:
readFieldOrInvokeInstruction(u,opcode);
u+=opcode == INVOKEINTERFACE ? 5 : 3;
break;
case INDYMETH:
u=readInvokeDynamicInstruction(u);
break;
case TYPE_INSN:
String typeDesc=readClass(u + 1);
mv.visitTypeInsn(opcode,typeDesc);
u+=3;
break;
case IINC_INSN:
int incCar=b[u + 1] & 0xFF;
byte increment=b[u + 2];
mv.visitIincInsn(incCar,increment);
u+=3;
break;
case MANA_INSN:
default :
String arrayTypeDesc=readClass(u + 1);
int dims=b[u + 3] & 0xFF;
mv.visitMultiANewArrayInsn(arrayTypeDesc,dims);
u+=4;
break;
}
}
}",0.9731051344743276
164611,"@Nonnegative private int readAllLabelsInCodeBlock(@Nonnegative int u,@Nonnegative int codeLength,@Nonnegative int codeStart,@Nonnegative int codeEnd){
  byte[] b=code;
  readLabel(codeLength + 1);
  while (u < codeEnd) {
    int offset=u - codeStart;
    int opcode=b[u] & 0xFF;
switch (TYPE[opcode]) {
case NOARG:
case IMPLVAR:
      u++;
    break;
case LABEL:
  readLabel(offset + readShort(u + 1));
u+=3;
break;
case LABELW:
readLabel(offset + readInt(u + 1));
u+=5;
break;
case InstructionType.WIDE:
opcode=b[u + 1] & 0xFF;
u+=opcode == IINC ? 6 : 4;
break;
case TABL:
u=readSwitchInstruction(u,offset,true);
break;
case LOOK:
u=readSwitchInstruction(u,offset,false);
break;
case VAR:
case SBYTE:
case InstructionType.LDC:
u+=2;
break;
case SHORT:
case LDCW:
case FIELDORMETH:
case InstructionType.TYPE:
case IINC:
u+=3;
break;
case ITFMETH:
case INDYMETH:
u+=5;
break;
default :
u+=4;
break;
}
}
return u;
}","@Nonnegative private int readAllLabelsInCodeBlock(@Nonnegative int u,@Nonnegative int codeLength,@Nonnegative int codeStart,@Nonnegative int codeEnd){
  byte[] b=code;
  readLabel(codeLength + 1);
  while (u < codeEnd) {
    int offset=u - codeStart;
    int opcode=b[u] & 0xFF;
switch (TYPE[opcode]) {
case NOARG:
case IMPLVAR:
      u++;
    break;
case LABEL:
  readLabel(offset + readShort(u + 1));
u+=3;
break;
case LABELW:
readLabel(offset + readInt(u + 1));
u+=5;
break;
case WIDE_INSN:
opcode=b[u + 1] & 0xFF;
u+=opcode == IINC ? 6 : 4;
break;
case TABL_INSN:
u=readSwitchInstruction(u,offset,true);
break;
case LOOK_INSN:
u=readSwitchInstruction(u,offset,false);
break;
case VAR:
case SBYTE:
case LDC_INSN:
u+=2;
break;
case SHORT:
case LDCW_INSN:
case FIELDORMETH:
case TYPE_INSN:
case IINC_INSN:
u+=3;
break;
case ITFMETH:
case INDYMETH:
u+=5;
break;
case MANA_INSN:
default :
u+=4;
break;
}
}
return u;
}",0.945872061235648
164612,"/** 
 * Reads a method and makes the given visitor visit it.
 * @param u the start offset of the method in the class file.
 * @return the offset of the first byte following the method in the class.
 */
@Nonnegative private int readMethod(@Nonnegative int u){
  u=readMethodDeclaration(u);
  int u0=u;
  int code=0;
  int exception=0;
  exceptions=null;
  String signature=null;
  int anns=0;
  int annDefault=0;
  int paramAnns=0;
  char[] c=buf;
  for (int i=readUnsignedShort(u); i > 0; i--) {
    String attrName=readUTF8(u + 2,c);
    if (""String_Node_Str"".equals(attrName)) {
      code=u + 8;
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      exception=readExceptionsInThrowsClause(u);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      signature=readUTF8(u + 8,c);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      access=Access.asDeprecated(access);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      anns=u + 8;
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      annDefault=u + 8;
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      access=Access.asSynthetic(access);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      paramAnns=u + 8;
    }
    u+=6 + readInt(u + 4);
  }
  u+=2;
  readMethodBody(u0,u,code,exception,signature,anns,annDefault,paramAnns);
  return u;
}","/** 
 * Reads a method and makes the given visitor visit it.
 * @param u the start offset of the method in the class file.
 * @return the offset of the first byte following the method in the class.
 */
@Nonnegative private int readMethod(@Nonnegative int u){
  u=readMethodDeclaration(u);
  int u0=u;
  int code=0;
  int exception=0;
  exceptions=null;
  String signature=null;
  int anns=0;
  int annDefault=0;
  int paramAnns=0;
  char[] c=buf;
  for (int attributeCount=readUnsignedShort(u); attributeCount > 0; attributeCount--) {
    String attrName=readUTF8(u + 2,c);
    if (""String_Node_Str"".equals(attrName)) {
      code=u + 8;
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      exception=readExceptionsInThrowsClause(u);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      signature=readUTF8(u + 8,c);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      access=Access.asDeprecated(access);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      anns=u + 8;
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      annDefault=u + 8;
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      access=Access.asSynthetic(access);
    }
 else     if (""String_Node_Str"".equals(attrName)) {
      paramAnns=u + 8;
    }
    u+=6 + readInt(u + 4);
  }
  u+=2;
  readMethodBody(u0,u,code,exception,signature,anns,annDefault,paramAnns);
  return u;
}",0.9838071248650594
164613,"@Nonnull private Class<?> getTargetReturnType(){
  String methodNameAndDescription=invocation.getMethodNameAndDescription();
  int rightParen=methodNameAndDescription.indexOf(')') + 1;
  String returnTypeDesc=methodNameAndDescription.substring(rightParen);
  if (returnTypeDesc.length() == 1) {
    char typeCode=returnTypeDesc.charAt(0);
    return getPrimitiveType(typeCode);
  }
  String returnTypeInternalName=returnTypeDesc.substring(1,returnTypeDesc.length() - 1);
  return ClassLoad.loadByInternalName(returnTypeInternalName);
}","@Nonnull private Class<?> getTargetReturnType(){
  Type returnType=Type.getReturnType(invocation.getMethodNameAndDescription());
  Class<?> classForType=TypeDescriptor.getClassForType(returnType);
  return classForType;
}",0.2301587301587301
164614,"void delegate(){
}","byte[] delegate(){
  return bytes;
}",0.5185185185185185
164615,"@Nullable public static Object matchedArgument(@Nonnegative int parameterIndex){
  RecordAndReplayExecution instance=TestRun.getRecordAndReplayForRunningTest();
  if (instance != null) {
    BaseVerificationPhase verificationPhase=(BaseVerificationPhase)instance.getCurrentTestOnlyPhase();
    if (verificationPhase != null) {
      return verificationPhase.getArgumentValueForCurrentVerification(parameterIndex);
    }
  }
  return null;
}","@Nullable public static Object matchedArgument(@Nonnegative int parameterIndex,@Nullable String argTypeDesc){
  RecordAndReplayExecution instance=TestRun.getRecordAndReplayForRunningTest();
  if (instance != null) {
    BaseVerificationPhase verificationPhase=(BaseVerificationPhase)instance.getCurrentTestOnlyPhase();
    if (verificationPhase != null) {
      Object value=verificationPhase.getArgumentValueForCurrentVerification(parameterIndex);
      if (value == null && argTypeDesc != null) {
        value=DefaultValues.computeForWrapperType(argTypeDesc);
      }
      return value;
    }
  }
  return null;
}",0.8192999053926207
164616,"/** 
 * Generates bytecode that will be responsible for performing the following steps: 1. Get the argument value (an Object) for the last matched invocation. 2. Cast to a reference type or unbox to a primitive type, as needed. 3. Store the converted value in its local variable.
 */
void generateCodeToStoreCapturedValue(){
  if (opcode != ALOAD) {
    mw.visitIntInsn(SIPUSH,parameterIndex);
    invocationBlockModifier.generateCallToActiveInvocationsMethod(""String_Node_Str"",""String_Node_Str"");
    Type argType=getArgumentType();
    generateCastOrUnboxing(mw,argType,opcode);
    mw.visitVarInsn(opcode,varIndex);
  }
}","/** 
 * Generates bytecode that will be responsible for performing the following steps: 1. Get the argument value (an Object) for the last matched invocation. 2. Cast to a reference type or unbox to a primitive type, as needed. 3. Store the converted value in its local variable.
 */
void generateCodeToStoreCapturedValue(){
  if (opcode != ALOAD) {
    mw.visitIntInsn(SIPUSH,parameterIndex);
    if (typeToCapture == null) {
      mw.visitInsn(ACONST_NULL);
    }
 else {
      mw.visitLdcInsn(typeToCapture);
    }
    invocationBlockModifier.generateCallToActiveInvocationsMethod(""String_Node_Str"",""String_Node_Str"");
    Type argType=getArgumentType();
    generateCastOrUnboxing(mw,argType,opcode);
    mw.visitVarInsn(opcode,varIndex);
  }
}",0.9096209912536444
164617,"@Nonnull private Type getArgumentType(){
  if (typeToCapture == null) {
    return invocationBlockModifier.argumentMatching.getParameterType(parameterIndex);
  }
 else   if (typeToCapture.charAt(0) == '[') {
    return Type.getType(typeToCapture);
  }
 else {
    return Type.getType('L' + typeToCapture + ';');
  }
}","@Nonnull private Type getArgumentType(){
  if (typeToCapture == null) {
    return invocationBlockModifier.argumentMatching.getParameterType(parameterIndex);
  }
  if (typeToCapture.charAt(0) == '[') {
    return Type.getType(typeToCapture);
  }
  return Type.getType('L' + typeToCapture + ';');
}",0.96742671009772
164618,"@SuppressWarnings(""String_Node_Str"") private static void addJava8TypeMapEntries(){
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Optional.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",OptionalInt.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",OptionalLong.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",OptionalDouble.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptySpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptyIntSpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptyLongSpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptyDoubleSpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",new PrimitiveIterator.OfInt(){
    @Override public int nextInt(){
      throw new NoSuchElementException();
    }
    @Override public Integer next(){
      throw new NoSuchElementException();
    }
    @Override public boolean hasNext(){
      return false;
    }
    @Override public void forEachRemaining(    IntConsumer action){
    }
  }
);
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",new PrimitiveIterator.OfLong(){
    @Override public long nextLong(){
      throw new NoSuchElementException();
    }
    @Override public Long next(){
      throw new NoSuchElementException();
    }
    @Override public boolean hasNext(){
      return false;
    }
    @Override public void forEachRemaining(    LongConsumer action){
    }
  }
);
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",new PrimitiveIterator.OfDouble(){
    @Override public double nextDouble(){
      throw new NoSuchElementException();
    }
    @Override public Double next(){
      throw new NoSuchElementException();
    }
    @Override public boolean hasNext(){
      return false;
    }
    @Override public void forEachRemaining(    DoubleConsumer action){
    }
  }
);
  try {
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Stream.class.getMethod(""String_Node_Str"").invoke(null));
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",IntStream.class.getMethod(""String_Node_Str"").invoke(null));
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",LongStream.class.getMethod(""String_Node_Str"").invoke(null));
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",DoubleStream.class.getMethod(""String_Node_Str"").invoke(null));
  }
 catch (  Exception ignore) {
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static void addJava8TypeMapEntries(){
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Optional.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",OptionalInt.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",OptionalLong.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",OptionalDouble.empty());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptySpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptyIntSpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptyLongSpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Spliterators.emptyDoubleSpliterator());
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",new PrimitiveIterator.OfInt(){
    @Override public int nextInt(){
      throw new NoSuchElementException();
    }
    @Override public Integer next(){
      throw new NoSuchElementException();
    }
    @Override public boolean hasNext(){
      return false;
    }
    @Override public void forEachRemaining(    IntConsumer action){
    }
  }
);
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",new PrimitiveIterator.OfLong(){
    @Override public long nextLong(){
      throw new NoSuchElementException();
    }
    @Override public Long next(){
      throw new NoSuchElementException();
    }
    @Override public boolean hasNext(){
      return false;
    }
    @Override public void forEachRemaining(    LongConsumer action){
    }
  }
);
  TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",new PrimitiveIterator.OfDouble(){
    @Override public double nextDouble(){
      throw new NoSuchElementException();
    }
    @Override public Double next(){
      throw new NoSuchElementException();
    }
    @Override public boolean hasNext(){
      return false;
    }
    @Override public void forEachRemaining(    DoubleConsumer action){
    }
  }
);
  try {
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",Stream.class.getMethod(""String_Node_Str"").invoke(null));
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",IntStream.class.getMethod(""String_Node_Str"").invoke(null));
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",LongStream.class.getMethod(""String_Node_Str"").invoke(null));
    TYPE_DESC_TO_VALUE_MAP.put(""String_Node_Str"",DoubleStream.class.getMethod(""String_Node_Str"").invoke(null));
  }
 catch (  Exception ignore) {
  }
}",0.9886792452830188
164619,"@Nullable public static Object computeForType(@Nonnull Class<?> type){
  if (type.isArray()) {
    return Array.newInstance(type.getComponentType(),0);
  }
 else   if (type != void.class && type.isPrimitive()) {
    return defaultValueForPrimitiveType(type);
  }
  return computeForWrapperType(type);
}","@Nullable public static Object computeForType(@Nonnull Class<?> type){
  if (type.isArray()) {
    return Array.newInstance(type.getComponentType(),0);
  }
  if (type != void.class && type.isPrimitive()) {
    return defaultValueForPrimitiveType(type);
  }
  return computeForWrapperType(type);
}",0.9899665551839464
164620,"@SuppressWarnings(""String_Node_Str"") @Nullable public static <T>T computeForWrapperType(@Nonnull java.lang.reflect.Type type){
  if (type == Integer.class) {
    return (T)ZERO_INT;
  }
 else   if (type == Boolean.class) {
    return (T)Boolean.FALSE;
  }
 else   if (type == Long.class) {
    return (T)ZERO_LONG;
  }
 else   if (type == Double.class) {
    return (T)ZERO_DOUBLE;
  }
 else   if (type == Float.class) {
    return (T)ZERO_FLOAT;
  }
 else   if (type == Character.class) {
    return (T)ZERO_CHAR;
  }
 else   if (type == Byte.class) {
    return (T)ZERO_BYTE;
  }
 else   if (type == Short.class) {
    return (T)ZERO_SHORT;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Nullable public static <T>T computeForWrapperType(@Nonnull String typeDesc){
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)ZERO_INT;
  }
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)Boolean.FALSE;
  }
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)ZERO_LONG;
  }
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)ZERO_DOUBLE;
  }
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)ZERO_FLOAT;
  }
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)ZERO_CHAR;
  }
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)ZERO_BYTE;
  }
  if (""String_Node_Str"".equals(typeDesc)) {
    return (T)ZERO_SHORT;
  }
  return null;
}",0.5386281588447653
164621,"Unmocked(@SuppressWarnings(""String_Node_Str"") String s){
}","Unmocked(@SuppressWarnings(""String_Node_Str"") boolean b){
}",0.8888888888888888
164622,"@Nonnull protected final Expectation expectationBeingVerified(){
  return currentVerification;
}","@Nullable protected final Expectation expectationBeingVerified(){
  return currentVerification;
}",0.9637305699481864
164623,"@Nullable public final Object getArgumentValueForCurrentVerification(int parameterIndex){
  List<VerifiedExpectation> verifiedExpectations=recordAndReplay.executionState.verifiedExpectations;
  if (verifiedExpectations.isEmpty()) {
    return expectationBeingVerified().invocation.getArgumentValues()[parameterIndex];
  }
  VerifiedExpectation lastMatched=verifiedExpectations.get(verifiedExpectations.size() - 1);
  return lastMatched.arguments[parameterIndex];
}","@Nullable public final Object getArgumentValueForCurrentVerification(int parameterIndex){
  List<VerifiedExpectation> verifiedExpectations=recordAndReplay.executionState.verifiedExpectations;
  if (verifiedExpectations.isEmpty()) {
    Expectation expectation=expectationBeingVerified();
    return expectation == null ? null : expectation.invocation.getArgumentValues()[parameterIndex];
  }
  VerifiedExpectation lastMatched=verifiedExpectations.get(verifiedExpectations.size() - 1);
  return lastMatched.arguments[parameterIndex];
}",0.9158316633266532
164624,"@SuppressWarnings(""String_Node_Str"") @Override public void handleInvocationCountConstraint(int minInvocations,int maxInvocations){
  Error errorThrown=pendingError;
  pendingError=null;
  if (errorThrown != null && minInvocations > 0) {
    throw errorThrown;
  }
  Expectation verifying=expectationBeingVerified();
  ExpectedInvocation invocation=verifying.invocation;
  argMatchers=invocation.arguments.getMatchers();
  int invocationCount=1;
  while (replayIndex < expectationCount) {
    Expectation replayExpectation=expectationsInReplayOrder.get(replayIndex);
    if (replayExpectation != null && matchesCurrentVerification(replayExpectation)) {
      invocationCount++;
      verifying.constraints.invocationCount++;
      if (invocationCount > maxInvocations) {
        if (maxInvocations >= 0) {
          throw replayExpectation.invocation.errorForUnexpectedInvocation();
        }
        break;
      }
    }
 else     if (invocationCount >= minInvocations) {
      break;
    }
    replayIndex++;
  }
  argMatchers=null;
  int n=minInvocations - invocationCount;
  if (n > 0) {
    throw invocation.errorForMissingInvocations(n,Collections.<ExpectedInvocation>emptyList());
  }
  verifyMaxInvocations(maxInvocations);
}","@SuppressWarnings(""String_Node_Str"") @Override public void handleInvocationCountConstraint(int minInvocations,int maxInvocations){
  Error errorThrown=pendingError;
  pendingError=null;
  if (errorThrown != null && minInvocations > 0) {
    throw errorThrown;
  }
  Expectation verifying=expectationBeingVerified();
  if (verifying == null) {
    return;
  }
  ExpectedInvocation invocation=verifying.invocation;
  argMatchers=invocation.arguments.getMatchers();
  int invocationCount=1;
  while (replayIndex < expectationCount) {
    Expectation replayExpectation=expectationsInReplayOrder.get(replayIndex);
    if (replayExpectation != null && matchesCurrentVerification(invocation,replayExpectation)) {
      invocationCount++;
      verifying.constraints.invocationCount++;
      if (invocationCount > maxInvocations) {
        if (maxInvocations >= 0) {
          throw replayExpectation.invocation.errorForUnexpectedInvocation();
        }
        break;
      }
    }
 else     if (invocationCount >= minInvocations) {
      break;
    }
    replayIndex++;
  }
  argMatchers=null;
  int n=minInvocations - invocationCount;
  if (n > 0) {
    throw invocation.errorForMissingInvocations(n,Collections.<ExpectedInvocation>emptyList());
  }
  verifyMaxInvocations(verifying,maxInvocations);
}",0.9746835443037974
164625,"private boolean matchesCurrentVerification(@Nonnull Expectation replayExpectation){
  ExpectedInvocation invocation=expectationBeingVerified().invocation;
  Object mock=invocation.instance;
  String mockClassDesc=invocation.getClassDesc();
  String mockNameAndDesc=invocation.getMethodNameAndDescription();
  Object[] args=invocation.arguments.getValues();
  matchInstance=invocation.matchInstance;
  if (recordAndReplay.executionState.isToBeMatchedOnInstance(mock,mockNameAndDesc)) {
    matchInstance=true;
  }
  Object replayInstance=invocationInstancesInReplayOrder.get(replayIndex);
  Object[] replayArgs=invocationArgumentsInReplayOrder.get(replayIndex);
  return matches(mock,mockClassDesc,mockNameAndDesc,args,replayExpectation,replayInstance,replayArgs);
}","private boolean matchesCurrentVerification(@Nonnull ExpectedInvocation invocation,@Nonnull Expectation replayExpectation){
  Object mock=invocation.instance;
  String mockClassDesc=invocation.getClassDesc();
  String mockNameAndDesc=invocation.getMethodNameAndDescription();
  Object[] args=invocation.arguments.getValues();
  matchInstance=invocation.matchInstance;
  if (recordAndReplay.executionState.isToBeMatchedOnInstance(mock,mockNameAndDesc)) {
    matchInstance=true;
  }
  Object replayInstance=invocationInstancesInReplayOrder.get(replayIndex);
  Object[] replayArgs=invocationArgumentsInReplayOrder.get(replayIndex);
  return matches(mock,mockClassDesc,mockNameAndDesc,args,replayExpectation,replayInstance,replayArgs);
}",0.9158878504672896
164626,"private void verifyMaxInvocations(int maxInvocations){
  if (maxInvocations >= 0) {
    Expectation verifying=expectationBeingVerified();
    int n=verifying.constraints.invocationCount - maxInvocations;
    if (n > 0) {
      Object[] replayArgs=invocationArgumentsInReplayOrder.get(replayIndex - 1);
      throw verifying.invocation.errorForUnexpectedInvocations(replayArgs,n);
    }
  }
}","private void verifyMaxInvocations(@Nonnull Expectation verifying,int maxInvocations){
  if (maxInvocations >= 0) {
    int n=verifying.constraints.invocationCount - maxInvocations;
    if (n > 0) {
      Object[] replayArgs=invocationArgumentsInReplayOrder.get(replayIndex - 1);
      throw verifying.invocation.errorForUnexpectedInvocations(replayArgs,n);
    }
  }
}",0.8880105401844532
164627,"@Nonnull @Override protected List<ExpectedInvocation> findNonStrictExpectation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nonnull Object[] args){
  int i=replayIndex;
  while (i >= 0 && i < expectationCount) {
    Expectation replayExpectation=expectationsInReplayOrder.get(i);
    Object replayInstance=invocationInstancesInReplayOrder.get(i);
    Object[] replayArgs=invocationArgumentsInReplayOrder.get(i);
    i+=indexIncrement;
    if (replayExpectation == null) {
      continue;
    }
    if (!matchInstance && recordAndReplay.executionState.isToBeMatchedOnInstance(mock,mockNameAndDesc)) {
      matchInstance=true;
    }
    if (matches(mock,mockClassDesc,mockNameAndDesc,args,replayExpectation,replayInstance,replayArgs)) {
      currentExpectation=replayExpectation;
      i+=1 - indexIncrement;
      indexIncrement=1;
      replayIndex=i;
      expectationBeingVerified().constraints.invocationCount++;
      mapNewInstanceToReplacementIfApplicable(mock);
      break;
    }
    if (!unverifiedExpectationsFixed) {
      unverifiedInvocationLeftBehind=replayExpectation.invocation;
    }
 else     if (indexIncrement > 0) {
      recordAndReplay.setErrorThrown(replayExpectation.invocation.errorForUnexpectedInvocation());
      replayIndex=i;
      break;
    }
  }
  return emptyList();
}","@Nonnull @Override protected List<ExpectedInvocation> findNonStrictExpectation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nonnull Object[] args){
  Expectation expectation=expectationBeingVerified();
  int i=replayIndex;
  while (i >= 0 && i < expectationCount) {
    Expectation replayExpectation=expectationsInReplayOrder.get(i);
    Object replayInstance=invocationInstancesInReplayOrder.get(i);
    Object[] replayArgs=invocationArgumentsInReplayOrder.get(i);
    i+=indexIncrement;
    if (replayExpectation == null) {
      continue;
    }
    if (!matchInstance && recordAndReplay.executionState.isToBeMatchedOnInstance(mock,mockNameAndDesc)) {
      matchInstance=true;
    }
    if (matches(mock,mockClassDesc,mockNameAndDesc,args,replayExpectation,replayInstance,replayArgs)) {
      currentExpectation=replayExpectation;
      i+=1 - indexIncrement;
      indexIncrement=1;
      replayIndex=i;
      if (expectation != null) {
        expectation.constraints.invocationCount++;
      }
      mapNewInstanceToReplacementIfApplicable(mock);
      break;
    }
    if (!unverifiedExpectationsFixed) {
      unverifiedInvocationLeftBehind=replayExpectation.invocation;
    }
 else     if (indexIncrement > 0) {
      recordAndReplay.setErrorThrown(replayExpectation.invocation.errorForUnexpectedInvocation());
      replayIndex=i;
      break;
    }
  }
  return emptyList();
}",0.9531024531024532
164628,"@Nonnull @Override protected List<ExpectedInvocation> findNonStrictExpectation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nonnull Object[] args){
  if (!matchInstance && recordAndReplay.executionState.isToBeMatchedOnInstance(mock,mockNameAndDesc)) {
    matchInstance=true;
  }
  replayIndex=-1;
  List<ExpectedInvocation> matchingInvocationsWithDifferentArgs=new ArrayList<ExpectedInvocation>();
  for (int i=0, n=expectationsInReplayOrder.size(); i < n; i++) {
    Expectation replayExpectation=expectationsInReplayOrder.get(i);
    Object replayInstance=invocationInstancesInReplayOrder.get(i);
    Object[] replayArgs=invocationArgumentsInReplayOrder.get(i);
    if (matches(mock,mockClassDesc,mockNameAndDesc,args,replayExpectation,replayInstance,replayArgs)) {
      Expectation verification=expectationBeingVerified();
      replayIndex=i;
      verification.constraints.invocationCount++;
      currentExpectation=replayExpectation;
      mapNewInstanceToReplacementIfApplicable(mock);
    }
 else     if (matchingInvocationWithDifferentArgs != null) {
      matchingInvocationsWithDifferentArgs.add(matchingInvocationWithDifferentArgs);
    }
  }
  if (replayIndex >= 0) {
    pendingError=verifyConstraints();
  }
  return matchingInvocationsWithDifferentArgs;
}","@Nonnull @Override protected List<ExpectedInvocation> findNonStrictExpectation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nonnull Object[] args){
  if (!matchInstance && recordAndReplay.executionState.isToBeMatchedOnInstance(mock,mockNameAndDesc)) {
    matchInstance=true;
  }
  replayIndex=-1;
  Expectation verification=expectationBeingVerified();
  List<ExpectedInvocation> matchingInvocationsWithDifferentArgs=new ArrayList<ExpectedInvocation>();
  for (int i=0, n=expectationsInReplayOrder.size(); i < n; i++) {
    Expectation replayExpectation=expectationsInReplayOrder.get(i);
    Object replayInstance=invocationInstancesInReplayOrder.get(i);
    Object[] replayArgs=invocationArgumentsInReplayOrder.get(i);
    if (matches(mock,mockClassDesc,mockNameAndDesc,args,replayExpectation,replayInstance,replayArgs)) {
      replayIndex=i;
      if (verification != null) {
        verification.constraints.invocationCount++;
      }
      currentExpectation=replayExpectation;
      mapNewInstanceToReplacementIfApplicable(mock);
    }
 else     if (matchingInvocationWithDifferentArgs != null) {
      matchingInvocationsWithDifferentArgs.add(matchingInvocationWithDifferentArgs);
    }
  }
  if (verification != null && replayIndex >= 0) {
    pendingError=verifyConstraints(verification);
  }
  return matchingInvocationsWithDifferentArgs;
}",0.9171597633136096
164629,"@Override public void handleInvocationCountConstraint(int minInvocations,int maxInvocations){
  pendingError=null;
  Expectation verifying=expectationBeingVerified();
  Error errorThrown;
  if (replayIndex >= 0) {
    ExpectedInvocation replayInvocation=expectationsInReplayOrder.get(replayIndex).invocation;
    Object[] replayArgs=invocationArgumentsInReplayOrder.get(replayIndex);
    errorThrown=verifying.verifyConstraints(replayInvocation,replayArgs,minInvocations,maxInvocations);
  }
 else {
    errorThrown=verifying.verifyConstraints(minInvocations);
  }
  if (errorThrown != null) {
    throw errorThrown;
  }
}","@Override public void handleInvocationCountConstraint(int minInvocations,int maxInvocations){
  pendingError=null;
  Expectation verifying=expectationBeingVerified();
  if (verifying == null) {
    return;
  }
  Error errorThrown;
  if (replayIndex >= 0) {
    ExpectedInvocation replayInvocation=expectationsInReplayOrder.get(replayIndex).invocation;
    Object[] replayArgs=invocationArgumentsInReplayOrder.get(replayIndex);
    errorThrown=verifying.verifyConstraints(replayInvocation,replayArgs,minInvocations,maxInvocations);
  }
 else {
    errorThrown=verifying.verifyConstraints(minInvocations);
  }
  if (errorThrown != null) {
    throw errorThrown;
  }
}",0.9665889665889664
164630,"@Nullable private Error verifyConstraints(){
  ExpectedInvocation lastInvocation=expectationsInReplayOrder.get(replayIndex).invocation;
  Object[] lastArgs=invocationArgumentsInReplayOrder.get(replayIndex);
  Expectation expectation=expectationBeingVerified();
  return expectation.verifyConstraints(lastInvocation,lastArgs,1,-1);
}","@Nullable private Error verifyConstraints(@Nonnull Expectation verification){
  ExpectedInvocation lastInvocation=expectationsInReplayOrder.get(replayIndex).invocation;
  Object[] lastArgs=invocationArgumentsInReplayOrder.get(replayIndex);
  return verification.verifyConstraints(lastInvocation,lastArgs,1,-1);
}",0.8385093167701864
164631,"/** 
 * Refreshes the persistent state of a given entity from the database, so that a test can verify that persistent state was modified as expected.
 */
public final void refresh(BaseEntity entity){
  em.flush();
  em.refresh(entity);
}","/** 
 * Refreshes the persistent state of a given entity from the database, so that a test can verify that persistent state was modified as expected.
 */
public final void refresh(BaseEntity entity){
  em.refresh(entity);
}",0.9217391304347826
164632,"@Nullable protected static Object[] createInstancesForAnnotatedParameters(@Nonnull Object testClassInstance,@Nonnull Method testMethod,@Nullable Object[] parameterValues){
  int numParameters=testMethod.getParameterTypes().length;
  if (numParameters == 0) {
    return null;
  }
  if (parameterValues == null || parameterValues.length != numParameters) {
    parameterValues=new Object[numParameters];
  }
  TestMethod methodInfo=new TestMethod(testMethod,parameterValues);
  TestRun.enterNoMockingZone();
  try {
    ParameterTypeRedefinitions redefinitions=new ParameterTypeRedefinitions(methodInfo);
    TestRun.getExecutingTest().setParameterRedefinitions(redefinitions);
    TestedParameters testedParameters=new TestedParameters(methodInfo);
    testedParameters.createTestedParameters(testClassInstance,redefinitions);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
  return parameterValues;
}","@Nullable protected static Object[] createInstancesForAnnotatedParameters(@Nonnull Object testClassInstance,@Nonnull Method testMethod,@Nullable Object[] parameterValues){
  int numParameters=testMethod.getParameterTypes().length;
  if (numParameters == 0) {
    return null;
  }
  if (parameterValues == null || parameterValues.length != numParameters) {
    parameterValues=new Object[numParameters];
  }
  TestMethod methodInfo=new TestMethod(testMethod,parameterValues);
  TestRun.enterNoMockingZone();
  try {
    ParameterTypeRedefinitions redefinitions=new ParameterTypeRedefinitions(methodInfo,parameterValues);
    TestRun.getExecutingTest().setParameterRedefinitions(redefinitions);
    TestedParameters testedParameters=new TestedParameters(methodInfo);
    testedParameters.createTestedParameters(testClassInstance,redefinitions);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
  return parameterValues;
}",0.9912568306010928
164633,"/** 
 * @return the class object corresponding to the type to be mocked, or {@code TypeVariable.class} in case themocked type is a type variable (which usually occurs when the mocked implements/extends multiple types)
 */
@Nonnull public Class<?> getClassType(){
  Type mockedType=declaredType;
  if (mockedType instanceof Class<?>) {
    return (Class<?>)mockedType;
  }
  if (mockedType instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)mockedType;
    return (Class<?>)parameterizedType.getRawType();
  }
  return TypeVariable.class;
}","/** 
 * @return the class object corresponding to the type to be mocked, or {@code TypeVariable.class} in case themocked type is a type variable (which usually occurs when the mocked implements/extends multiple types)
 */
@Nonnull public Class<?> getClassType(){
  if (parameterImplementationClass != null) {
    return parameterImplementationClass;
  }
  Type mockedType=declaredType;
  if (mockedType instanceof Class<?>) {
    return (Class<?>)mockedType;
  }
  if (mockedType instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)mockedType;
    return (Class<?>)parameterizedType.getRawType();
  }
  return TypeVariable.class;
}",0.9271417133706964
164634,"MockedType(@Nonnull String cascadingMethodName,@Nonnull Type cascadedType){
  super(cascadedType,cascadingMethodName);
  field=null;
  fieldFromTestClass=false;
  accessModifiers=0;
  mocked=null;
  capturing=null;
  injectable=true;
}","MockedType(@Nonnull String cascadingMethodName,@Nonnull Type cascadedType){
  super(cascadedType,cascadingMethodName);
  field=null;
  fieldFromTestClass=false;
  accessModifiers=0;
  mocked=null;
  capturing=null;
  injectable=true;
  parameterImplementationClass=null;
}",0.9270216962524654
164635,"public ParameterTypeRedefinitions(@Nonnull TestMethod testMethod){
  this.testMethod=testMethod;
  int n=testMethod.getParameterCount();
  mockParameters=new MockedType[n];
  injectableParameters=new ArrayList<MockedType>(n);
  for (int i=0; i < n; i++) {
    getMockedTypeFromMockParameterDeclaration(i);
  }
  InstanceFactory[] instanceFactories=redefineMockedTypes();
  instantiateMockedTypes(instanceFactories);
}","public ParameterTypeRedefinitions(@Nonnull TestMethod testMethod,@Nonnull Object[] parameterValues){
  this.testMethod=testMethod;
  int n=testMethod.getParameterCount();
  mockParameters=new MockedType[n];
  injectableParameters=new ArrayList<MockedType>(n);
  for (int i=0; i < n; i++) {
    Object mock=parameterValues[i];
    createMockedTypeFromMockParameterDeclaration(i,mock);
  }
  InstanceFactory[] instanceFactories=redefineMockedTypes();
  instantiateMockedTypes(instanceFactories);
}",0.9078947368421052
164636,"private static boolean isRegularTestClass(@Nonnull ExtensionContext context){
  Optional<Object> testInstance=context.getTestInstance();
  return testInstance.isPresent() && isRegularTestClass(testInstance.get());
}","private static boolean isRegularTestClass(@Nonnull ExtensionContext context){
  Optional<Class<?>> testClass=context.getTestClass();
  return testClass.isPresent() && isRegularTestClass(testClass.get());
}",0.819047619047619
164637,"@Override public void afterAll(@Nonnull ExtensionContext context){
  if (savePointForTestClass != null) {
    savePointForTestClass.rollback();
    savePointForTestClass=null;
    clearFieldTypeRedefinitions();
    TestRun.setCurrentTestClass(null);
  }
}","@Override public void afterAll(@Nonnull ExtensionContext context){
  if (savePointForTestClass != null && isRegularTestClass(context)) {
    savePointForTestClass.rollback();
    savePointForTestClass=null;
    clearFieldTypeRedefinitions();
    TestRun.setCurrentTestClass(null);
  }
}",0.9426987060998152
164638,"private void validateTargetClassType(){
  if (targetClass.isInterface() || targetClass.isAnnotation() || targetClass.isArray()|| targetClass.isPrimitive()|| isWrapperOfPrimitiveType(targetClass)|| isGeneratedImplementationClass(targetClass)) {
    throw new IllegalArgumentException(""String_Node_Str"" + targetClass);
  }
}","private void validateTargetClassType(){
  if (targetClass.isInterface() || targetClass.isAnnotation() || targetClass.isArray()|| targetClass.isPrimitive()|| MockingFilters.isSubclassOfUnmockable(targetClass)|| isWrapperOfPrimitiveType(targetClass)|| isGeneratedImplementationClass(targetClass)) {
    throw new IllegalArgumentException(""String_Node_Str"" + targetClass);
  }
}",0.9239598278335724
164639,"@Nullable final InstanceFactory redefineType(){
  return redefineType(typeMetadata.getDeclaredType());
}","@Nullable final InstanceFactory redefineType(){
  Class<?> classToMock=typeMetadata.getClassType();
  if (MockingFilters.isSubclassOfUnmockable(classToMock)) {
    String mockSource=typeMetadata.field == null ? ""String_Node_Str"" : ""String_Node_Str"";
    throw new IllegalArgumentException(classToMock + ""String_Node_Str"" + mockSource+ ""String_Node_Str""+ typeMetadata.getName()+ ""String_Node_Str"");
  }
  Type declaredType=typeMetadata.getDeclaredType();
  return redefineType(declaredType);
}",0.2785234899328859
164640,"void attemptToMockUnmockableJREClass(Class<?> jreClass){
  try {
    new Expectations(jreClass){
    }
;
    fail(""String_Node_Str"" + jreClass);
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().endsWith(""String_Node_Str""));
  }
}","void attemptToMockUnmockableJREClass(Class<?> jreClass){
  try {
    new Expectations(jreClass){
    }
;
    fail(""String_Node_Str"" + jreClass);
  }
 catch (  IllegalArgumentException e) {
    String msg=e.getMessage();
    assertTrue(msg.contains(jreClass.getName()) || msg.endsWith(""String_Node_Str""));
  }
}",0.8546099290780141
164641,"public boolean isStrictInvocation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc){
  if (isInstanceMethodWithStandardBehavior(mock,mockNameAndDesc)) {
    return false;
  }
  for (  Object strictMock : strictMocks) {
    if (strictMock == mockClassDesc) {
      addStrictMock(mock);
      return true;
    }
    if (strictMock == mock || mock != null && isInvokedInstanceEquivalentToCapturedInstance(mock,strictMock)) {
      return true;
    }
  }
  return false;
}","public boolean isStrictInvocation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc){
  if (isInstanceMethodWithStandardBehavior(mock,mockNameAndDesc)) {
    return false;
  }
  for (  Object strictMock : strictMocks) {
    if (strictMock instanceof String) {
      if (strictMock == mockClassDesc || loadByInternalName((String)strictMock).isAssignableFrom(loadByInternalName(mockClassDesc))) {
        addStrictMock(mock);
        return true;
      }
    }
 else     if (strictMock == mock || mock != null && isInvokedInstanceEquivalentToCapturedInstance(mock,strictMock)) {
      return true;
    }
  }
  return false;
}",0.8672413793103448
164642,"@Test public void recordingExpectationOnMethodWithOneArgumentButReplayingWithAnotherShouldProduceUsefulErrorMessage(@Mocked final Collaborator mock) throws Exception {
  final URL expectedURL=new URL(""String_Node_Str"");
  new Expectations(){
{
      mock.doSomething(expectedURL);
    }
  }
;
  mock.doSomething(expectedURL);
  URL anotherURL=new URL(""String_Node_Str"");
  mock.doSomething(anotherURL);
  thrown.expect(UnexpectedInvocation.class);
  thrown.expectMessage(anotherURL.toString());
  new FullVerifications(){
  }
;
}","@Test public void recordingExpectationOnMethodWithOneArgumentButReplayingWithAnotherShouldProduceUsefulErrorMessage(@Mocked final Collaborator mock) throws Exception {
  final String expected=""String_Node_Str"";
  new Expectations(){
{
      mock.doSomething(expected);
    }
  }
;
  mock.doSomething(expected);
  String another=""String_Node_Str"";
  mock.doSomething(another);
  thrown.expect(UnexpectedInvocation.class);
  thrown.expectMessage(another);
  new FullVerifications(){
  }
;
}",0.7630285152409046
164643,"String doSomething(URL url){
  return url.toString();
}","String doSomething(String s){
  return s.toLowerCase();
}",0.7321428571428571
164644,"@Nonnull public static Class<?> getClassType(@Nonnull Type declaredType){
  while (true) {
    if (declaredType instanceof Class<?>) {
      return (Class<?>)declaredType;
    }
    if (declaredType instanceof ParameterizedType) {
      return (Class<?>)((ParameterizedType)declaredType).getRawType();
    }
    if (declaredType instanceof TypeVariable) {
      declaredType=((TypeVariable<?>)declaredType).getBounds()[0];
      continue;
    }
    if (declaredType instanceof WildcardType) {
      declaredType=((WildcardType)declaredType).getUpperBounds()[0];
      continue;
    }
    throw new IllegalArgumentException(""String_Node_Str"" + declaredType);
  }
}","@Nonnull public static Class<?> getClassType(@Nonnull Type declaredType){
  while (true) {
    if (declaredType instanceof Class<?>) {
      return (Class<?>)declaredType;
    }
    if (declaredType instanceof ParameterizedType) {
      return (Class<?>)((ParameterizedType)declaredType).getRawType();
    }
    if (declaredType instanceof GenericArrayType) {
      declaredType=((GenericArrayType)declaredType).getGenericComponentType();
      continue;
    }
    if (declaredType instanceof TypeVariable) {
      declaredType=((TypeVariable<?>)declaredType).getBounds()[0];
      continue;
    }
    if (declaredType instanceof WildcardType) {
      declaredType=((WildcardType)declaredType).getUpperBounds()[0];
      continue;
    }
    throw new IllegalArgumentException(""String_Node_Str"" + declaredType);
  }
}",0.896551724137931
164645,"@SuppressWarnings(""String_Node_Str"") @Nullable public static Object convertFromString(@Nonnull Class<?> targetType,@Nullable String value){
}","@SuppressWarnings(""String_Node_Str"") @Nullable public static <E extends Enum<E>>Object convertFromString(@Nonnull Class<?> targetType,@Nullable String value){
}",0.9368770764119602
164646,"private void beforeConfigurationMethod(@Nonnull ITestNGMethod method,@Nonnull Class<?> testClass){
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(null,testClass);
    if (method.isBeforeMethodConfiguration()) {
      if (shouldPrepareForNextTest) {
        discardTestLevelMockedTypes();
      }
      Object testInstance=method.getInstance();
      updateTestClassState(testInstance,testClass);
      if (shouldPrepareForNextTest) {
        prepareForNextTest();
        shouldPrepareForNextTest=false;
        createInstancesForTestedFields(testInstance,true);
      }
      TestRun.setRunningIndividualTest(testInstance);
    }
 else     if (method.isAfterClassConfiguration()) {
      TestRun.getExecutingTest().setRecordAndReplay(null);
      cleanUpMocksFromPreviousTest();
      TestRun.clearCurrentTestInstance();
    }
 else     if (!method.isAfterMethodConfiguration() && !method.isBeforeClassConfiguration()) {
      TestRun.getExecutingTest().setRecordAndReplay(null);
      cleanUpMocksFromPreviousTestClass();
      TestRun.clearCurrentTestInstance();
      TestRun.setCurrentTestClass(null);
    }
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}","private void beforeConfigurationMethod(@Nonnull ITestNGMethod method,@Nonnull Class<?> testClass){
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(null,testClass);
    if (method.isBeforeMethodConfiguration()) {
      if (shouldPrepareForNextTest) {
        discardTestLevelMockedTypes();
        clearTestedObjectsCreatedDuringSetup();
      }
      Object testInstance=method.getInstance();
      updateTestClassState(testInstance,testClass);
      if (shouldPrepareForNextTest) {
        prepareForNextTest();
        shouldPrepareForNextTest=false;
        createInstancesForTestedFields(testInstance,true);
      }
      TestRun.setRunningIndividualTest(testInstance);
    }
 else     if (method.isAfterClassConfiguration()) {
      TestRun.getExecutingTest().setRecordAndReplay(null);
      cleanUpMocksFromPreviousTest();
      TestRun.clearCurrentTestInstance();
    }
 else     if (!method.isAfterMethodConfiguration() && !method.isBeforeClassConfiguration()) {
      TestRun.getExecutingTest().setRecordAndReplay(null);
      cleanUpMocksFromPreviousTestClass();
      TestRun.clearCurrentTestInstance();
      TestRun.setCurrentTestClass(null);
    }
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}",0.9735318444995864
164647,"@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}","@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
      clearTestedObjectsCreatedDuringSetup();
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}",0.984543010752688
164648,"public void clearTestedObjects(){
  injectionState.lifecycleMethods.executeTerminationMethodsIfAny();
  injectionState.clearTestedObjectsAndInstantiatedDependencies();
  Object testClassInstance=injectionState.getCurrentTestClassInstance();
  for (  TestedObject testedField : testedFields) {
    testedField.clearIfAutomaticCreation(testClassInstance);
  }
}","public void clearTestedObjects(){
  injectionState.lifecycleMethods.executeTerminationMethodsIfAny();
  injectionState.clearTestedObjectsAndInstantiatedDependencies();
  resetTestedFields(false);
}",0.6906474820143885
164649,"void clearIfAutomaticCreation(@Nonnull Object testClassInstance){
  if (createAutomatically && !isAvailableDuringSetup()) {
    setInstance(testClassInstance,null);
  }
}","void clearIfAutomaticCreation(@Nonnull Object testClassInstance,boolean duringTearDown){
  if (createAutomatically && (duringTearDown || !isAvailableDuringSetup())) {
    setInstance(testClassInstance,null);
  }
}",0.8877284595300261
164650,"@Test(dependsOnMethods=""String_Node_Str"") public void secondTest(@Injectable Collaborator collaborator2){
  assertSame(collaborator1,util.collaborator1);
  assertNull(util.collaborator2);
  assertNotSame(collaborator2,secondMockedObject);
  assertSame(collaborator1,firstMockedObject);
  assertNotSame(tested1,firstTestedObject);
  assertStatesOfTestedObjects(collaborator2);
}","@Test(dependsOnMethods=""String_Node_Str"") public void secondTest(@Injectable Collaborator collaborator2){
  assertSame(collaborator1,util.collaborator1);
  assertNull(util.collaborator2);
  assertNotSame(collaborator2,secondMockedObject);
  assertSame(collaborator1,firstMockedObject);
  assertNotSame(tested1,firstTestedObject);
  assertStatesOfTestedObjects(collaborator2);
  assertNotSame(util,previousUtilityClassInstance);
}",0.935483870967742
164651,"@Test public void firstTest(@Injectable final Collaborator collaborator2){
  assertSame(collaborator1,util.collaborator1);
  assertNull(util.collaborator2);
  assertNotNull(tested1);
  firstTestedObject=tested1;
  assertNotNull(collaborator1);
  firstMockedObject=collaborator1;
  assertNotNull(collaborator2);
  secondMockedObject=collaborator2;
  assertStatesOfTestedObjects(collaborator2);
  new Expectations(){
{
      collaborator1.doSomething();
      collaborator2.doSomething();
    }
  }
;
  tested1.useCollaborators();
}","@Test public void firstTest(@Injectable final Collaborator collaborator2){
  assertSame(collaborator1,util.collaborator1);
  assertNull(util.collaborator2);
  assertNotNull(tested1);
  firstTestedObject=tested1;
  assertNotNull(collaborator1);
  firstMockedObject=collaborator1;
  assertNotNull(collaborator2);
  secondMockedObject=collaborator2;
  assertStatesOfTestedObjects(collaborator2);
  new Expectations(){
{
      collaborator1.doSomething();
      collaborator2.doSomething();
    }
  }
;
  tested1.useCollaborators();
  previousUtilityClassInstance=util;
}",0.9662716499544212
164652,"@Nonnull private static Method findMethod(@Nonnull Class<?> realClass,@Nonnull String methodName,@Nonnull String methodDesc) throws NoSuchMethodException {
  Class<?>[] parameterTypes=TypeDescriptor.getParameterTypes(methodDesc);
  Class<?> ownerClass=realClass;
  while (true) {
    try {
      Method method=ownerClass.getDeclaredMethod(methodName,parameterTypes);
      if (method.isBridge()) {
        ownerClass=ownerClass.getSuperclass();
        continue;
      }
      return method;
    }
 catch (    NoSuchMethodException e) {
      Method interfaceMethod=findInterfaceMethod(ownerClass,methodName,parameterTypes);
      if (interfaceMethod != null) {
        return interfaceMethod;
      }
      ownerClass=ownerClass.getSuperclass();
      if (ownerClass == Object.class) {
        throw e;
      }
    }
  }
}","@Nonnull private static Method findMethod(@Nonnull Class<?> realClass,@Nonnull String methodName,@Nonnull String methodDesc) throws NoSuchMethodException {
  Class<?>[] parameterTypes=TypeDescriptor.getParameterTypes(methodDesc);
  Class<?> ownerClass=realClass;
  while (true) {
    try {
      Method method=ownerClass.getDeclaredMethod(methodName,parameterTypes);
      if (method.isBridge()) {
        ownerClass=ownerClass.getSuperclass();
        continue;
      }
      return method;
    }
 catch (    NoSuchMethodException e) {
      Method interfaceMethod=findInterfaceMethod(ownerClass,methodName,parameterTypes);
      if (interfaceMethod != null) {
        return interfaceMethod;
      }
      ownerClass=ownerClass.getSuperclass();
      if (ownerClass == null || ownerClass == Object.class) {
        throw e;
      }
    }
  }
}",0.986810551558753
164653,"@Nonnull private Type getGenericReturnType(@Nonnull Class<?> cascadingClass,@Nonnull String methodNameAndDesc) throws NoSuchMethodException {
  Method cascadingMethod=new RealMethodOrConstructor(cascadingClass,methodNameAndDesc).getMember();
  Type genericReturnType=cascadingMethod.getGenericReturnType();
  if (genericReturnType instanceof TypeVariable<?>) {
    genericReturnType=getGenericReflection().resolveTypeVariable((TypeVariable<?>)genericReturnType);
  }
  return genericReturnType;
}","@Nullable private Type getGenericReturnType(@Nonnull Class<?> cascadingClass,@Nonnull String methodNameAndDesc){
  RealMethodOrConstructor realMethod;
  try {
    realMethod=new RealMethodOrConstructor(cascadingClass,methodNameAndDesc);
  }
 catch (  NoSuchMethodException e) {
    return null;
  }
  Method cascadingMethod=realMethod.getMember();
  Type genericReturnType=cascadingMethod.getGenericReturnType();
  if (genericReturnType instanceof TypeVariable<?>) {
    genericReturnType=getGenericReflection().resolveTypeVariable((TypeVariable<?>)genericReturnType);
  }
  return genericReturnType == Object.class ? null : genericReturnType;
}",0.7414548641542507
164654,"@Nullable private Object getCascadedInstance(@Nonnull String methodNameAndDesc,@Nonnull String returnTypeInternalName,@Nullable Object mockInstance){
  MockedTypeCascade nextLevel=this;
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=getClassWithCalledMethod();
    Type genericReturnType;
    try {
      genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    }
 catch (    NoSuchMethodException ignore) {
      return null;
    }
    if (genericReturnType == Object.class) {
      return null;
    }
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (mockInstance != null) {
        return mockInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      nextLevel=CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    nextLevel=CASCADING_TYPES.getCascade(returnType);
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return nextLevel.createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}","@Nullable private Object getCascadedInstance(@Nonnull String methodNameAndDesc,@Nonnull String returnTypeInternalName,@Nullable Object mockInstance){
  MockedTypeCascade nextLevel=this;
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=getClassWithCalledMethod();
    Type genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    if (genericReturnType == null) {
      return null;
    }
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (mockInstance != null) {
        return mockInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else     if (nonPublicTypeReturnedFromPublicInterface(cascadingClass,resolvedReturnType)) {
      return null;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      nextLevel=CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    nextLevel=CASCADING_TYPES.getCascade(returnType);
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return nextLevel.createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}",0.9245049504950495
164655,"@Nonnull public String getSignatureWithResolvedReturnType(){
  String signature=arguments.genericSignature;
  if (signature != null) {
    String classDesc=getClassDesc();
    Class<?> mockedClass=instance != null ? instance.getClass() : ClassLoad.loadByInternalName(classDesc);
    GenericTypeReflection reflection=new GenericTypeReflection(mockedClass,null);
    signature=reflection.resolveReturnType(classDesc,signature);
    char firstTypeChar=signature.charAt(signature.indexOf(')') + 1);
    if (firstTypeChar != 'T' && firstTypeChar != '[') {
      return signature;
    }
  }
  return arguments.methodNameAndDesc;
}","@Nonnull public String getSignatureWithResolvedReturnType(){
  String signature=arguments.genericSignature;
  if (signature != null) {
    String classDesc=getClassDesc();
    Class<?> mockedClass=instance != null ? instance.getClass() : ClassLoad.loadByInternalName(classDesc);
    GenericTypeReflection reflection=new GenericTypeReflection(mockedClass,null);
    signature=reflection.resolveSignature(classDesc,signature);
    char firstTypeChar=signature.charAt(signature.indexOf(')') + 1);
    if (firstTypeChar != 'T' && firstTypeChar != '[') {
      return signature;
    }
  }
  return arguments.methodNameAndDesc;
}",0.8211708099438653
164656,"@Override @SuppressWarnings(""String_Node_Str"") protected void generateMethodImplementation(@Nonnull String className,int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if (signature != null && mockedTypeInfo != null) {
    signature=mockedTypeInfo.genericTypeMap.resolveReturnType(className,signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,signature,exceptions);
  if (ObjectMethods.isMethodFromObject(name,desc)) {
    generateEmptyImplementation(desc);
  }
 else {
    generateDirectCallToHandler(mw,className,access,name,desc,signature);
    generateReturnWithObjectAtTopOfTheStack(desc);
    mw.visitMaxs(1,0);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") protected void generateMethodImplementation(@Nonnull String className,int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if (signature != null && mockedTypeInfo != null) {
    signature=mockedTypeInfo.genericTypeMap.resolveSignature(className,signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,signature,exceptions);
  if (ObjectMethods.isMethodFromObject(name,desc)) {
    generateEmptyImplementation(desc);
  }
 else {
    generateDirectCallToHandler(mw,className,access,name,desc,signature);
    generateReturnWithObjectAtTopOfTheStack(desc);
    mw.visitMaxs(1,0);
  }
}",0.9876900796524256
164657,"@Nonnull private String replaceTypeParametersWithActualTypes(@Nonnull String ownerTypeDesc,@Nonnull String typeDesc){
  if (typeDesc.charAt(0) == 'T' && !typeParametersToTypeArgumentNames.isEmpty()) {
    String typeParameter=typeDesc.substring(0,typeDesc.length() - 1);
    @Nullable String typeArg=typeParametersToTypeArgumentNames.get(ownerTypeDesc + ':' + typeParameter);
    return typeArg == null ? typeDesc : typeArg + ';';
  }
  int p=typeDesc.indexOf('<');
  if (p < 0) {
    return typeDesc;
  }
  String resolvedTypeDesc=typeDesc;
  for (  Entry<String,String> paramAndArg : typeParametersToTypeArgumentNames.entrySet()) {
    String typeMappingKey=paramAndArg.getKey();
    String typeParam=typeMappingKey.substring(typeMappingKey.indexOf(':') + 1) + ';';
    String typeArg=paramAndArg.getValue() + ';';
    resolvedTypeDesc=resolvedTypeDesc.replace(typeParam,typeArg);
  }
  return resolvedTypeDesc;
}","@Nonnull private String replaceTypeParametersWithActualTypes(@Nonnull String ownerTypeDesc,@Nonnull String typeDesc){
  if (typeDesc.charAt(0) == 'T' && !typeParametersToTypeArgumentNames.isEmpty()) {
    return replaceTypeParameters(ownerTypeDesc,typeDesc);
  }
  int p=typeDesc.indexOf('<');
  if (p < 0) {
    return typeDesc;
  }
  String resolvedTypeDesc=typeDesc;
  for (  Entry<String,String> paramAndArg : typeParametersToTypeArgumentNames.entrySet()) {
    String typeMappingKey=paramAndArg.getKey();
    String typeParam=typeMappingKey.substring(typeMappingKey.indexOf(':') + 1) + ';';
    String typeArg=paramAndArg.getValue() + ';';
    resolvedTypeDesc=resolvedTypeDesc.replace(typeParam,typeArg);
  }
  return resolvedTypeDesc;
}",0.8588661037394452
164658,"@Nullable public static Object getMock(@Nonnull String mockedTypeDesc,@Nonnull String mockedMethodNameAndDesc,@Nullable Object mockInstance,@Nonnull String returnTypeDesc,@Nullable String genericSignature){
  char typeCode=returnTypeDesc.charAt(0);
  if (typeCode != 'L') {
    return null;
  }
  MockedTypeCascade cascade=CASCADING_TYPES.getCascade(mockedTypeDesc,mockInstance);
  if (cascade == null) {
    return null;
  }
  String resolvedReturnTypeDesc=null;
  if (genericSignature != null) {
    resolvedReturnTypeDesc=cascade.getGenericReturnType(genericSignature);
  }
  if (resolvedReturnTypeDesc == null) {
    resolvedReturnTypeDesc=getReturnTypeIfCascadingSupportedForIt(returnTypeDesc);
    if (resolvedReturnTypeDesc == null) {
      return null;
    }
  }
 else   if (resolvedReturnTypeDesc.charAt(0) == '[') {
    return DefaultValues.computeForArrayType(resolvedReturnTypeDesc);
  }
  return cascade.getCascadedInstance(mockedMethodNameAndDesc,resolvedReturnTypeDesc,mockInstance);
}","@Nullable public static Object getMock(@Nonnull String mockedTypeDesc,@Nonnull String mockedMethodNameAndDesc,@Nullable Object mockInstance,@Nonnull String returnTypeDesc,@Nullable String genericSignature){
  char typeCode=returnTypeDesc.charAt(0);
  if (typeCode != 'L') {
    return null;
  }
  MockedTypeCascade cascade=CASCADING_TYPES.getCascade(mockedTypeDesc,mockInstance);
  if (cascade == null) {
    return null;
  }
  String resolvedReturnTypeDesc=null;
  if (genericSignature != null) {
    resolvedReturnTypeDesc=cascade.getGenericReturnType(mockedTypeDesc,genericSignature);
  }
  if (resolvedReturnTypeDesc == null) {
    resolvedReturnTypeDesc=getReturnTypeIfCascadingSupportedForIt(returnTypeDesc);
    if (resolvedReturnTypeDesc == null) {
      return null;
    }
  }
 else   if (resolvedReturnTypeDesc.charAt(0) == '[') {
    return DefaultValues.computeForArrayType(resolvedReturnTypeDesc);
  }
  return cascade.getCascadedInstance(mockedMethodNameAndDesc,resolvedReturnTypeDesc,mockInstance);
}",0.9925558312655088
164659,"@Nullable private Object getCascadedInstance(@Nonnull String methodNameAndDesc,@Nonnull String returnTypeInternalName,@Nullable Object mockInstance){
  MockedTypeCascade nextLevel=this;
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=getClassWithCalledMethod();
    Type genericReturnType;
    try {
      genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    }
 catch (    NoSuchMethodException ignore) {
      return null;
    }
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (mockInstance != null) {
        return mockInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      nextLevel=CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    nextLevel=CASCADING_TYPES.getCascade(returnType);
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return nextLevel.createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}","@Nullable private Object getCascadedInstance(@Nonnull String methodNameAndDesc,@Nonnull String returnTypeInternalName,@Nullable Object mockInstance){
  MockedTypeCascade nextLevel=this;
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=getClassWithCalledMethod();
    Type genericReturnType;
    try {
      genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    }
 catch (    NoSuchMethodException ignore) {
      return null;
    }
    if (genericReturnType == Object.class) {
      return null;
    }
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (mockInstance != null) {
        return mockInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      nextLevel=CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    nextLevel=CASCADING_TYPES.getCascade(returnType);
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return nextLevel.createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}",0.9778621125869704
164660,"@Test public void cascadeFromMethodReturningInstanceOfGenericSubclassThenFromGenericMethodOfGenericBaseClass(@Mocked ClassWithMethodReturningGenericClassInstance mock){
  SubB<C> cascade1=mock.doSomething();
  C cascade2=cascade1.getValue();
  assertNotNull(cascade2);
}","@Test public void cascadeFromMethodReturningInstanceOfGenericSubclassThenFromGenericMethodOfGenericBaseClass(@Mocked ClassWithMethodReturningGenericClassInstance mock){
  SubB<C<?>> cascade1=mock.doSomething();
  C<?> cascade2=cascade1.getValue();
  assertNotNull(cascade2);
}",0.989010989010989
164661,"SubB<C> doSomething(){
  return null;
}","SubB<C<?>> doSomething(){
  return null;
}",0.9629629629629628
164662,"@Test public void cascadeFromMethodReturningInnerInstanceOfGenericClass(@Mocked final Client mock){
  final Outer.Inner innerInstance=new Outer().new Inner();
  new Expectations(){
{
      mock.doSomething();
      result=innerInstance;
    }
  }
;
  assertSame(innerInstance,mock.doSomething());
}","@Test public void cascadeFromMethodReturningInnerInstanceOfGenericClass(@Mocked final Client mock){
  final Outer<?>.Inner innerInstance=new Outer().new Inner();
  new Expectations(){
{
      mock.doSomething();
      result=innerInstance;
    }
  }
;
  assertSame(innerInstance,mock.doSomething());
}",0.994991652754591
164663,"@Override public void afterInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  if (!invokedMethod.isTestMethod()) {
    afterConfigurationMethod(testResult);
    return;
  }
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(null);
  }
  SavePoint testMethodSavePoint=savePoint.get();
  if (testMethodSavePoint == null) {
    return;
  }
  TestRun.enterNoMockingZone();
  shouldPrepareForNextTest=true;
  savePoint.set(null);
  Throwable thrownByTest=testResult.getThrowable();
  try {
    if (thrownByTest == null) {
      concludeTestExecutionWithNothingThrown(testMethodSavePoint,testResult);
    }
 else     if (thrownByTest instanceof TestException) {
      concludeTestExecutionWithExpectedExceptionNotThrown(invokedMethod,testMethodSavePoint,testResult);
    }
 else     if (testResult.isSuccess()) {
      concludeTestExecutionWithExpectedExceptionThrown(testMethodSavePoint,testResult,thrownByTest);
    }
 else {
      concludeTestExecutionWithUnexpectedExceptionThrown(testMethodSavePoint,testResult,thrownByTest);
    }
  }
  finally {
    TestRun.finishCurrentTestExecution();
  }
}","@Override public void afterInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  if (!invokedMethod.isTestMethod()) {
    afterConfigurationMethod(testResult);
    return;
  }
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(null);
  }
  SavePoint testMethodSavePoint=savePoint.get();
  if (testMethodSavePoint == null) {
    return;
  }
  TestRun.enterNoMockingZone();
  shouldPrepareForNextTest=true;
  savePoint.set(null);
  Throwable thrownByTest=testResult.getThrowable();
  try {
    if (thrownByTest == null) {
      concludeTestExecutionWithNothingThrown(testMethodSavePoint,testResult);
    }
 else     if (thrownByTest instanceof TestException) {
      concludeTestExecutionWithExpectedExceptionNotThrown(invokedMethod,testMethodSavePoint,testResult);
    }
 else     if (testResult.isSuccess()) {
      concludeTestExecutionWithExpectedExceptionThrown(testMethodSavePoint,testResult,thrownByTest);
    }
 else {
      concludeTestExecutionWithUnexpectedExceptionThrown(testMethodSavePoint,testResult,thrownByTest);
    }
  }
  finally {
    TestRun.finishCurrentTestExecution();
    TestRun.clearCurrentTestInstance();
  }
}",0.983065198983912
164664,"@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    TestRun.clearCurrentTestInstance();
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}","@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}",0.9865319865319864
164665,"public boolean isStrictInvocation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc){
  if (isInstanceMethodWithStandardBehavior(mock,mockNameAndDesc)) {
    return false;
  }
  for (  Object strictMock : strictMocks) {
    if (strictMock == mock) {
      return true;
    }
 else     if (strictMock == mockClassDesc) {
      addStrictMock(mock);
      return true;
    }
  }
  return false;
}","public boolean isStrictInvocation(@Nullable Object mock,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc){
  if (isInstanceMethodWithStandardBehavior(mock,mockNameAndDesc)) {
    return false;
  }
  for (  Object strictMock : strictMocks) {
    if (strictMock == mockClassDesc) {
      addStrictMock(mock);
      return true;
    }
    if (strictMock == mock || mock != null && isInvokedInstanceEquivalentToCapturedInstance(mock,strictMock)) {
      return true;
    }
  }
  return false;
}",0.7419354838709677
164666,"boolean doSomething(){
  return false;
}","@Override public boolean doSomething(){
  return false;
}",0.8247422680412371
164667,"@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass && !testClass.getClass().getName().equals(testClass.getName())) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    TestRun.clearCurrentTestInstance();
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}","@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    TestRun.clearCurrentTestInstance();
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}",0.979498861047836
164668,"private void generateDynamicCallToMock(){
  Label startOfRealImplementation=null;
  if (!isStatic(methodAccess) && !isConstructor && isMockedSuperclass()) {
    startOfRealImplementation=new Label();
    mw.visitVarInsn(ALOAD,0);
    mw.visitTypeInsn(INSTANCEOF,Type.getInternalName(mockMethods.getRealClass()));
    mw.visitJumpInsn(IFEQ,startOfRealImplementation);
  }
  generateCallToUpdateMockState();
  if (isConstructor) {
    generateConditionalCallForMockedConstructor();
  }
 else {
    generateConditionalCallForMockedMethod(startOfRealImplementation);
  }
}","private void generateDynamicCallToMock(){
  Label startOfRealImplementation=null;
  if (!isStatic(methodAccess) && !isConstructor && isMockedSuperclass()) {
    Class<?> targetClass=mockMethods.getRealClass();
    if (mockedClass.getClassLoader() == targetClass.getClassLoader()) {
      startOfRealImplementation=new Label();
      mw.visitVarInsn(ALOAD,0);
      mw.visitTypeInsn(INSTANCEOF,Type.getInternalName(targetClass));
      mw.visitJumpInsn(IFEQ,startOfRealImplementation);
    }
  }
  generateCallToUpdateMockState();
  if (isConstructor) {
    generateConditionalCallForMockedConstructor();
  }
 else {
    generateConditionalCallForMockedMethod(startOfRealImplementation);
  }
}",0.8539682539682539
164669,"@Nullable @Override Object getExistingTestedInstanceIfApplicable(@Nonnull Object testClassInstance){
  Object testedObject=null;
  if (!createAutomatically) {
    testedObject=getFieldValue(testedField,testClassInstance);
    createAutomatically=testedObject == null && !isFinal(testedField.getModifiers());
  }
  return testedObject;
}","@Nullable @Override Object getExistingTestedInstanceIfApplicable(@Nonnull Object testClassInstance){
  Object testedObject=null;
  if (!createAutomatically) {
    Class<?> targetClass=testedField.getType();
    testedObject=getFieldValue(testedField,testClassInstance);
    if (testedObject == null || isNonInstantiableType(targetClass,testedObject)) {
      String providedValue=metadata.value();
      if (!providedValue.isEmpty()) {
        testedObject=Utilities.convertFromString(targetClass,providedValue);
      }
      createAutomatically=testedObject == null && !isFinal(testedField.getModifiers());
    }
  }
  return testedObject;
}",0.6537282941777324
164670,"private static boolean isNonInstantiableType(@Nonnull Class<?> targetClass,@Nullable Object currentValue){
  return targetClass.isPrimitive() && defaultValueForPrimitiveType(targetClass).equals(currentValue) || currentValue == null && (targetClass.isArray() || targetClass.isEnum() || targetClass.isAnnotation()|| isWrapperOfPrimitiveType(targetClass));
}","static boolean isNonInstantiableType(@Nonnull Class<?> targetClass,@Nullable Object currentValue){
  return targetClass.isPrimitive() && defaultValueForPrimitiveType(targetClass).equals(currentValue) || currentValue == null && (targetClass.isArray() || targetClass.isEnum() || targetClass.isAnnotation()|| isWrapperOfPrimitiveType(targetClass));
}",0.9886039886039886
164671,"@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass && !testClass.getClass().getName().equals(testClass.getName())) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}","@Override public void beforeInvocation(@Nonnull IInvokedMethod invokedMethod,@Nonnull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  TestRun.clearNoMockingZone();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Method method=testNGMethod.getConstructorOrMethod().getMethod();
  if (Metrics.DataCoverage.active) {
    TestCoverage.INSTANCE.setCurrentTestMethod(method);
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass && !testClass.getClass().getName().equals(testClass.getName())) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    TestRun.clearCurrentTestInstance();
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForAnnotatedParameters(testInstance,method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance,false);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}",0.9870801033591732
164672,boolean doSomething();,Collaborator doSomething();,0.7346938775510204
164673,"@Nullable public Object getDefaultValueForReturnType(){
  if (defaultReturnValue == UNDEFINED_DEFAULT_RETURN) {
    Class<?> resolvedReturnType=getReturnTypeAsResolvedFromClassArgument();
    if (resolvedReturnType != null) {
      defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue == null) {
        String returnTypeDesc='L' + resolvedReturnType.getName().replace('.','/') + ';';
        String mockedTypeDesc=getClassDesc();
        defaultReturnValue=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,resolvedReturnType);
      }
      return defaultReturnValue;
    }
    String returnTypeDesc=DefaultValues.getReturnTypeDesc(arguments.methodNameAndDesc);
    defaultReturnValue=DefaultValues.computeForType(returnTypeDesc);
    if (defaultReturnValue == null) {
      String mockedTypeDesc=getClassDesc();
      defaultReturnValue=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,arguments.genericSignature);
    }
  }
  return defaultReturnValue;
}","@Nullable public Object getDefaultValueForReturnType(){
  if (defaultReturnValue == UNDEFINED_DEFAULT_RETURN) {
    Class<?> resolvedReturnType=getReturnTypeAsResolvedFromClassArgument();
    if (resolvedReturnType != null) {
      defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue == null) {
        String returnTypeDesc='L' + resolvedReturnType.getName().replace('.','/') + ';';
        String mockedTypeDesc=getClassDesc();
        defaultReturnValue=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,resolvedReturnType);
      }
      return defaultReturnValue;
    }
    String returnTypeDesc=DefaultValues.getReturnTypeDesc(arguments.methodNameAndDesc);
    if (""String_Node_Str"".equals(returnTypeDesc)) {
      return null;
    }
    defaultReturnValue=DefaultValues.computeForType(returnTypeDesc);
    if (defaultReturnValue == null) {
      String mockedTypeDesc=getClassDesc();
      defaultReturnValue=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,arguments.genericSignature);
    }
  }
  return defaultReturnValue;
}",0.9658839167035888
164674,"protected static void registerMock(@Nonnull MockedType mockedType,@Nonnull Object mock){
  TestRun.getExecutingTest().registerMock(mockedType.injectable,mock);
}","protected static void registerMock(@Nonnull MockedType mockedType,@Nonnull Object mock){
  TestRun.getExecutingTest().registerMock(mockedType,mock);
}",0.964630225080386
164675,"void add(@Nonnull String mockedTypeDesc,boolean fromMockField,@Nonnull java.lang.reflect.Type mockedType){
  if (!cascadingTypes.containsKey(mockedTypeDesc)) {
    cascadingTypes.put(mockedTypeDesc,new MockedTypeCascade(fromMockField,mockedType));
  }
}","@Nonnull MockedTypeCascade add(@Nonnull String mockedTypeDesc,boolean fromMockField,@Nonnull Type mockedType){
  MockedTypeCascade cascade=mockedTypesToCascades.get(mockedType);
  if (cascade == null) {
    cascade=new MockedTypeCascade(fromMockField,mockedType,mockedTypeDesc);
    mockedTypesToCascades.put(mockedType,cascade);
  }
  return cascade;
}",0.462046204620462
164676,"@Nullable private MockedTypeCascade getCascade(@Nonnull String invokedTypeDesc,@Nonnull Class<?> mockedClass){
  Class<?> typeToLookFor=mockedClass;
  do {
    String typeDesc=Type.getInternalName(typeToLookFor);
    if (invokedTypeDesc.equals(typeDesc)) {
      return null;
    }
    MockedTypeCascade cascade=getCascade(typeDesc);
    if (cascade != null) {
      cascade.mockedClass=mockedClass;
      return cascade;
    }
    cascade=getCascadeForInterface(invokedTypeDesc,typeToLookFor);
    if (cascade != null) {
      return cascade;
    }
    typeToLookFor=typeToLookFor.getSuperclass();
  }
 while (typeToLookFor != Object.class);
  return null;
}","@Nullable public MockedTypeCascade getCascade(@Nonnull String mockedTypeDesc,@Nullable Object mockInstance){
  if (mockedTypesToCascades.isEmpty()) {
    return null;
  }
  if (mockInstance != null) {
    MockedTypeCascade cascade=findCascadeForInstance(mockInstance);
    if (cascade != null) {
      return cascade;
    }
  }
  for (  MockedTypeCascade cascade : mockedTypesToCascades.values()) {
    if (cascade.mockedTypeDesc.equals(mockedTypeDesc)) {
      return cascade;
    }
  }
  return null;
}",0.1478933791917454
164677,"void clearNonSharedCascadingTypes(){
  if (!cascadingTypes.isEmpty()) {
    Iterator<MockedTypeCascade> itr=cascadingTypes.values().iterator();
    while (itr.hasNext()) {
      MockedTypeCascade cascade=itr.next();
      if (cascade.fromMockField) {
        cascade.discardCascadedMocks();
      }
 else {
        itr.remove();
      }
    }
  }
}","void clearNonSharedCascadingTypes(){
  if (!mockedTypesToCascades.isEmpty()) {
    Iterator<MockedTypeCascade> itr=mockedTypesToCascades.values().iterator();
    while (itr.hasNext()) {
      MockedTypeCascade cascade=itr.next();
      if (cascade.fromMockField) {
        cascade.discardCascadedMocks();
      }
 else {
        itr.remove();
      }
    }
  }
}",0.9126760563380282
164678,"public void clear(){
  cascadingTypes.clear();
}","public void clear(){
  mockedTypesToCascades.clear();
}",0.8155339805825242
164679,"CascadingTypes(){
  cascadingTypes=new ConcurrentHashMap<String,MockedTypeCascade>(4);
}","CascadingTypes(){
  mockedTypesToCascades=new ConcurrentHashMap<Type,MockedTypeCascade>(4);
}",0.8397790055248618
164680,"public void registerMock(boolean injectable,@Nonnull Object mock){
  if (injectable) {
    addInjectableMock(mock);
  }
 else   if (!containsReference(regularMocks,mock)) {
    regularMocks.add(mock);
  }
}","public void registerMock(@Nonnull MockedType mockedType,@Nonnull Object mock){
  if (mockedType.injectable) {
    addInjectableMock(mock);
  }
 else   if (!containsReference(regularMocks,mock)) {
    regularMocks.add(mock);
  }
  Type declaredType=mockedType.getDeclaredType();
  cascadingTypes.addInstance(declaredType,mock);
}",0.7078651685393258
164681,"@Nullable private static Object createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(@Nonnull String methodNameAndDesc,@Nonnull Type mockedReturnType){
  InstanceFactory instanceFactory=TestRun.mockFixture().findInstanceFactory(mockedReturnType);
  if (instanceFactory == null) {
    String methodName=methodNameAndDesc.substring(0,methodNameAndDesc.indexOf('('));
    CascadingTypeRedefinition typeRedefinition=new CascadingTypeRedefinition(methodName,mockedReturnType);
    instanceFactory=typeRedefinition.redefineType();
    if (instanceFactory == null) {
      return null;
    }
  }
 else {
    Object lastInstance=instanceFactory.getLastInstance();
    if (lastInstance != null) {
      return lastInstance;
    }
  }
  Object cascadedInstance=instanceFactory.create();
  instanceFactory.clearLastInstance();
  TestRun.getExecutingTest().addInjectableMock(cascadedInstance);
  return cascadedInstance;
}","@Nullable private Object createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(@Nonnull String methodNameAndDesc,@Nonnull Type mockedReturnType){
  InstanceFactory instanceFactory=TestRun.mockFixture().findInstanceFactory(mockedReturnType);
  if (instanceFactory == null) {
    String methodName=methodNameAndDesc.substring(0,methodNameAndDesc.indexOf('('));
    CascadingTypeRedefinition typeRedefinition=new CascadingTypeRedefinition(methodName,mockedReturnType);
    instanceFactory=typeRedefinition.redefineType();
    if (instanceFactory == null) {
      return null;
    }
  }
 else {
    Object lastInstance=instanceFactory.getLastInstance();
    if (lastInstance != null) {
      return lastInstance;
    }
  }
  Object cascadedInstance=instanceFactory.create();
  instanceFactory.clearLastInstance();
  addInstance(cascadedInstance);
  TestRun.getExecutingTest().addInjectableMock(cascadedInstance);
  return cascadedInstance;
}",0.978401727861771
164682,"@Nullable private Object getCascadedInstance(@Nonnull String methodNameAndDesc,@Nonnull String returnTypeInternalName,@Nullable Object mockInstance){
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=getClassWithCalledMethod();
    Type genericReturnType;
    try {
      genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    }
 catch (    NoSuchMethodException ignore) {
      return null;
    }
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (mockInstance != null) {
        return mockInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}","@Nullable private Object getCascadedInstance(@Nonnull String methodNameAndDesc,@Nonnull String returnTypeInternalName,@Nullable Object mockInstance){
  MockedTypeCascade nextLevel=this;
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=getClassWithCalledMethod();
    Type genericReturnType;
    try {
      genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    }
 catch (    NoSuchMethodException ignore) {
      return null;
    }
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (mockInstance != null) {
        return mockInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      nextLevel=CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    nextLevel=CASCADING_TYPES.getCascade(returnType);
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return nextLevel.createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}",0.9631120053655264
164683,"void discardCascadedMocks(){
  cascadedTypesAndMocks.clear();
}","void discardCascadedMocks(){
  cascadedTypesAndMocks.clear();
  cascadingInstances.clear();
}",0.8076923076923077
164684,"MockedTypeCascade(boolean fromMockField,@Nonnull Type mockedType){
  this.fromMockField=fromMockField;
  this.mockedType=mockedType;
  cascadedTypesAndMocks=new ConcurrentHashMap<String,Type>(4);
}","MockedTypeCascade(boolean fromMockField,@Nonnull Type mockedType,@Nonnull String mockedTypeDesc){
  this.fromMockField=fromMockField;
  this.mockedType=mockedType;
  this.mockedTypeDesc=mockedTypeDesc;
  cascadedTypesAndMocks=new ConcurrentHashMap<String,Type>(4);
  cascadingInstances=synchronizedList(new ArrayList<Object>());
}",0.7476280834914611
164685,"@Nullable private static Method findInterfaceMethod(@Nonnull Class<?> anInterface,@Nonnull String methodName,@Nonnull Class<?>[] parameterTypes){
  for (  Class<?> superInterface : anInterface.getInterfaces()) {
    try {
      return superInterface.getMethod(methodName,parameterTypes);
    }
 catch (    NoSuchMethodException ignore) {
    }
  }
  return null;
}","@Nullable private static Method findInterfaceMethod(@Nonnull Class<?> aType,@Nonnull String methodName,@Nonnull Class<?>[] parameterTypes){
  for (  Class<?> anInterface : aType.getInterfaces()) {
    try {
      return anInterface.getMethod(methodName,parameterTypes);
    }
 catch (    NoSuchMethodException ignore) {
    }
  }
  return null;
}",0.9464788732394366
164686,"@Nonnull private static Method findMethod(@Nonnull Class<?> realClass,@Nonnull String methodName,@Nonnull String methodDesc) throws NoSuchMethodException {
  Class<?>[] parameterTypes=TypeDescriptor.getParameterTypes(methodDesc);
  Class<?> ownerClass=realClass;
  while (true) {
    try {
      Method method=ownerClass.getDeclaredMethod(methodName,parameterTypes);
      if (method.isBridge()) {
        ownerClass=ownerClass.getSuperclass();
        continue;
      }
      return method;
    }
 catch (    NoSuchMethodException e) {
      if (ownerClass.isInterface()) {
        Method interfaceMethod=findInterfaceMethod(ownerClass,methodName,parameterTypes);
        if (interfaceMethod == null) {
          throw e;
        }
        return interfaceMethod;
      }
      ownerClass=ownerClass.getSuperclass();
      if (ownerClass == Object.class) {
        throw e;
      }
    }
  }
}","@Nonnull private static Method findMethod(@Nonnull Class<?> realClass,@Nonnull String methodName,@Nonnull String methodDesc) throws NoSuchMethodException {
  Class<?>[] parameterTypes=TypeDescriptor.getParameterTypes(methodDesc);
  Class<?> ownerClass=realClass;
  while (true) {
    try {
      Method method=ownerClass.getDeclaredMethod(methodName,parameterTypes);
      if (method.isBridge()) {
        ownerClass=ownerClass.getSuperclass();
        continue;
      }
      return method;
    }
 catch (    NoSuchMethodException e) {
      Method interfaceMethod=findInterfaceMethod(ownerClass,methodName,parameterTypes);
      if (interfaceMethod != null) {
        return interfaceMethod;
      }
      ownerClass=ownerClass.getSuperclass();
      if (ownerClass == Object.class) {
        throw e;
      }
    }
  }
}",0.9574839836924868
164687,"private boolean isMatchingInstance(@Nonnull Object invokedInstance,@Nullable Boolean matchInstance,@Nonnull Expectation expectation){
}","private boolean isMatchingInstance(@Nonnull Object instance){
  return instanceMap.containsKey(instance) || instanceMap.containsValue(instance) || replacementMap.containsKey(instance)|| replacementMap.containsValue(instance);
}",0.3149171270718232
164688,"@Test public void usingStrictAndNotStrictMockedTypes(@Mocked final A a,@Mocked final B b,@Mocked final C c){
  new StrictExpectations(){
{
      new A();
      a.process(input);
      a.result();
      result=42;
    }
  }
;
  new Expectations(){
{
      new B();
      times=1;
      new C();
      times=1;
      b.foo();
      times=input.length;
      c.bar();
      times=input.length;
    }
  }
;
  assertEquals(42,testedMethod());
  new FullVerifications(){
  }
;
}","@Test public void usingStrictAndNotStrictMockedTypes(@Mocked A anyA,@Mocked B anyB,@Mocked C anyC){
  new StrictExpectations(){
{
      A a=new A();
      a.process(input);
      a.result();
      result=42;
    }
  }
;
  new Expectations(){
{
      B b=new B();
      times=1;
      C c=new C();
      times=1;
      b.foo();
      times=input.length;
      c.bar();
      times=input.length;
    }
  }
;
  assertEquals(42,testedMethod());
  new FullVerifications(){
  }
;
}",0.9461457233368532
164689,"@Test public void fewerRequirementsUsingNotStrictExpectationsOnly(@Mocked final A a,@Mocked final B b,@Mocked final C c){
  new Expectations(){
{
      new A();
      times=1;
      new B();
      times=1;
      new C();
      times=1;
      a.result();
      result=42;
      b.foo();
      times=input.length;
      c.bar();
      times=input.length;
    }
  }
;
  assertEquals(42,testedMethod());
  new FullVerifications(b,c){
  }
;
}","@Test public void fewerRequirementsUsingNotStrictExpectationsOnly(@Mocked A anyA,@Mocked B anyB,@Mocked C anyC){
  new Expectations(){
{
      A a=new A();
      times=1;
      B b=new B();
      times=1;
      C c=new C();
      times=1;
      a.result();
      result=42;
      b.foo();
      times=input.length;
      c.bar();
      times=input.length;
    }
  }
;
  assertEquals(42,testedMethod());
  new FullVerifications(anyB,anyC){
  }
;
}",0.9218573046432617
164690,"@Mock String format(Invocation inv){
  return formats.get(inv.getInvokedInstance());
}","@Mock String format(Invocation inv){
  String pattern=inv.<SimpleDateFormat>getInvokedInstance().toPattern();
  if (DATE_FORMAT.equals(pattern))   return FORMATTED_DATE;
 else   if (TIME_FORMAT.equals(pattern))   return FORMATTED_TIME;
 else   return null;
}",0.25
164691,"@Test @Ignore(""String_Node_Str"") public void recordDifferentResultsForInstancesCreatedWithDifferentConstructors(@Mocked final Collaborator anyCol){
  new Expectations(){
{
      anyCol.getValue();
      result=1;
      Collaborator col2=new Collaborator(anyInt);
      col2.getValue();
      result=2;
    }
  }
;
  Collaborator col3=new Collaborator(10);
  int valueFromRecordedConstructor=col3.getValue();
  int valueFromAnyOtherConstructor=new Collaborator().getValue();
  assertEquals(2,valueFromRecordedConstructor);
  assertEquals(1,valueFromAnyOtherConstructor);
}","@Test public void recordDifferentResultsForInstancesCreatedWithDifferentConstructors(@Mocked final Collaborator anyCol){
  new Expectations(){
{
      anyCol.getValue();
      result=1;
      Collaborator col2=new Collaborator(anyInt);
      col2.getValue();
      result=2;
    }
  }
;
  int valueFromRecordedConstructor=new Collaborator(10).getValue();
  int valueFromAnyOtherConstructor=new Collaborator().getValue();
  assertEquals(2,valueFromRecordedConstructor);
  assertEquals(1,valueFromAnyOtherConstructor);
}",0.8925619834710744
164692,"@Override public void visit(int version,int access,@Nonnull String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  classExtendsCapturedType=false;
  if (capturedTypeDesc.equals(superName)) {
    classExtendsCapturedType=true;
    throw VisitInterruptedException.INSTANCE;
  }
  boolean haveInterfaces=interfaces != null && interfaces.length > 0;
  if (haveInterfaces) {
    for (    String implementedInterface : interfaces) {
      if (capturedTypeDesc.equals(implementedInterface)) {
        classExtendsCapturedType=true;
        throw VisitInterruptedException.INSTANCE;
      }
    }
  }
  if (superName != null) {
    if (!""String_Node_Str"".contains(superName)) {
      searchSuperType(superName);
    }
    if (haveInterfaces) {
      for (      String implementedInterface : interfaces) {
        searchSuperType(implementedInterface);
      }
    }
  }
  throw VisitInterruptedException.INSTANCE;
}","@Override public void visit(int version,int access,@Nonnull String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  classExtendsCapturedType=false;
  if (capturedTypeDesc.equals(superName)) {
    classExtendsCapturedType=true;
    throw VisitInterruptedException.INSTANCE;
  }
  boolean haveInterfaces=interfaces != null && interfaces.length > 0;
  if (haveInterfaces) {
    interruptVisitIfClassImplementsAnInterface(interfaces);
  }
  if (superName != null) {
    if (!""String_Node_Str"".contains(superName)) {
      searchSuperType(superName);
    }
    if (haveInterfaces) {
      for (      String implementedInterface : interfaces) {
        searchSuperType(implementedInterface);
      }
    }
  }
  throw VisitInterruptedException.INSTANCE;
}",0.5799426934097421
164693,"@Nullable public <C extends CaptureOfImplementations<?>>C getCaptureOfImplementationsIfApplicable(@Nonnull Class<?> baseType){
  if (baseType == capturedType.baseType && typeMetadata != null) {
    return (C)captureOfImplementations;
  }
  return null;
}","@Nullable public <C extends CaptureOfImplementations<?>>C getCaptureOfImplementationsIfApplicable(@Nonnull Class<?> aType){
  if (capturedType.baseType.isAssignableFrom(aType) && typeMetadata != null) {
    return (C)captureOfImplementations;
  }
  return null;
}",0.920696324951644
164694,"@Override void doSomething(){
  throw new IllegalStateException(""String_Node_Str"");
}","@Override public int doSomething(){
  return -1;
}",0.5185185185185185
164695,"boolean isToBeMatchedOnInstance(@Nullable Object mock,@Nonnull String mockNameAndDesc){
  if (mock == null || mockNameAndDesc.charAt(0) == '<') {
    return false;
  }
  if (dynamicMockInstancesToMatch != null && containsReference(dynamicMockInstancesToMatch,mock)) {
    return true;
  }
  if (mockedTypesToMatchOnInstances != null) {
    Class<?> mockedClass=GeneratedClasses.getMockedClass(mock);
    if (containsReference(mockedTypesToMatchOnInstances,mockedClass)) {
      return true;
    }
  }
 else   if (TestRun.getExecutingTest().isInjectableMock(mock)) {
    return true;
  }
  return false;
}","boolean isToBeMatchedOnInstance(@Nullable Object mock,@Nonnull String mockNameAndDesc){
  if (mock == null || mockNameAndDesc.charAt(0) == '<') {
    return false;
  }
  if (dynamicMockInstancesToMatch != null && containsReference(dynamicMockInstancesToMatch,mock)) {
    return true;
  }
  if (mockedTypesToMatchOnInstances != null) {
    Class<?> mockedClass=GeneratedClasses.getMockedClass(mock);
    if (containsReference(mockedTypesToMatchOnInstances,mockedClass)) {
      return true;
    }
  }
  return TestRun.getExecutingTest().isInjectableMock(mock);
}",0.9502572898799314
164696,"private void findAllTestedAndInjectableFieldsInTestClassHierarchy(@Nonnull Class<?> testClass){
  Class<?> superclass=testClass.getSuperclass();
  if (superclass.getClassLoader() != null) {
    findAllTestedAndInjectableFieldsInTestClassHierarchy(superclass);
  }
  for (  Field field : testClass.getDeclaredFields()) {
    addAsTestedOrInjectableFieldIfApplicable(field);
  }
}","private void findAllTestedAndInjectableFieldsInTestClassHierarchy(@Nonnull Class<?> testClass){
  Class<?> superclass=testClass.getSuperclass();
  if (superclass.getClassLoader() != null) {
    findAllTestedAndInjectableFieldsInTestClassHierarchy(superclass);
  }
  Field[] fieldsFromTestClass=testClass.getDeclaredFields();
  for (  Field candidateField : fieldsFromTestClass) {
    int fieldModifiers=candidateField.getModifiers();
    if ((fieldModifiers & FIELD_ACCESS_MASK) == 0) {
      addAsTestedOrInjectableFieldIfApplicable(candidateField);
    }
  }
}",0.7574468085106383
164697,"/** 
 * Applies the   {@linkplain Mock mock methods} defined in the mock-up subclass to the type specified through the typeparameter, but only affecting the given instance. <p/> In most cases, the constructor with no parameters should be adequate. This variation can be used when mock data or behavior is desired only for a particular instance, with other instances remaining unaffected; or when multiple mock-up objects carrying different states are desired, with one mock-up instance per real instance. <p/> If  {@link #getMockInstance()} later gets called on this mock-up instance, it will return the instance that wasgiven here.
 * @param targetInstance a real instance of the type to be faked, meant to be the only one of that type that shouldbe affected by this mock-up instance; must not be  {@code null}
 * @see #MockUp()
 * @see #MockUp(Class)
 */
protected MockUp(@Nonnull T targetInstance){
  if (targetInstance == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  validateFakingAllowed();
  MockUp<?> previousMockUp=findPreviouslyFakedClassIfMockUpAlreadyApplied();
  if (previousMockUp != null) {
    targetType=previousMockUp.targetType;
    mockedClass=previousMockUp.mockedClass;
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Class<T> classToMock=(Class<T>)targetInstance.getClass();
  validateThatClassToFakeIsExternal(classToMock);
  targetType=classToMock;
  mockedClass=classToMock;
  classesToRestore=redefineMethods(classToMock,classToMock,classToMock);
  setMockInstance(targetInstance);
}","/** 
 * Applies the   {@linkplain Mock mock methods} defined in the mock-up subclass to the type specified through the typeparameter, but only affecting the given instance. <p/> In most cases, the constructor with no parameters should be adequate. This variation can be used when mock data or behavior is desired only for a particular instance, with other instances remaining unaffected; or when multiple mock-up objects carrying different states are desired, with one mock-up instance per real instance. <p/> If  {@link #getMockInstance()} later gets called on this mock-up instance, it will return the instance that wasgiven here.
 * @param targetInstance a real instance of the type to be faked, meant to be the only one of that type that shouldbe affected by this mock-up instance; must not be  {@code null}
 * @see #MockUp()
 * @see #MockUp(Class)
 */
protected MockUp(@Nonnull T targetInstance){
  if (targetInstance == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  validateFakingAllowed();
  MockUp<?> previousMockUp=findPreviouslyFakedClassIfMockUpAlreadyApplied();
  if (previousMockUp != null) {
    targetType=previousMockUp.targetType;
    mockedClass=previousMockUp.mockedClass;
    setMockInstance(targetInstance);
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Class<T> classToMock=(Class<T>)targetInstance.getClass();
  validateThatClassToFakeIsExternal(classToMock);
  targetType=classToMock;
  mockedClass=classToMock;
  classesToRestore=redefineMethods(classToMock,classToMock,classToMock);
  setMockInstance(targetInstance);
}",0.98816
164698,"AClassMockUp(String value){
  this.value=value;
}","AClassMockUp(int value){
  this.value=value;
}",0.9473684210526316
164699,"@Nullable @Override final Object handleInvocation(@Nullable Object mock,int mockAccess,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nullable String genericSignature,boolean withRealImpl,@Nonnull Object[] args){
  if (pendingError != null) {
    recordAndReplay.setErrorThrown(pendingError);
    pendingError=null;
    return null;
  }
  matchInstance=mock != null && (nextInstanceToMatch != null && mock == nextInstanceToMatch || recordAndReplay.executionState.isReplacementInstance(mock,mockNameAndDesc) || isEnumElement(mock));
  ExpectedInvocation currentInvocation=new ExpectedInvocation(mock,mockAccess,mockClassDesc,mockNameAndDesc,matchInstance,genericSignature,args);
  currentInvocation.arguments.setMatchers(argMatchers);
  currentVerification=new Expectation(currentInvocation);
  currentExpectation=null;
  currentVerifiedExpectations.clear();
  findNonStrictExpectation(mock,mockClassDesc,mockNameAndDesc,args);
  argMatchers=null;
  if (matchInstance) {
    nextInstanceToMatch=null;
  }
  if (recordAndReplay.getErrorThrown() != null) {
    return null;
  }
  if (currentExpectation == null) {
    pendingError=currentVerification.invocation.errorForMissingInvocation();
    currentExpectation=currentVerification;
  }
  return currentExpectation.invocation.getDefaultValueForReturnType(this);
}","@Nullable @Override final Object handleInvocation(@Nullable Object mock,int mockAccess,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nullable String genericSignature,boolean withRealImpl,@Nonnull Object[] args){
  if (pendingError != null) {
    recordAndReplay.setErrorThrown(pendingError);
    pendingError=null;
    return null;
  }
  matchInstance=mock != null && (nextInstanceToMatch != null && mock == nextInstanceToMatch || recordAndReplay.executionState.isReplacementInstance(mock,mockNameAndDesc) || isEnumElement(mock));
  ExpectedInvocation currentInvocation=new ExpectedInvocation(mock,mockAccess,mockClassDesc,mockNameAndDesc,matchInstance,genericSignature,args);
  currentInvocation.arguments.setMatchers(argMatchers);
  currentVerification=new Expectation(currentInvocation);
  currentExpectation=null;
  currentVerifiedExpectations.clear();
  findNonStrictExpectation(mock,mockClassDesc,mockNameAndDesc,args);
  argMatchers=null;
  if (matchInstance) {
    nextInstanceToMatch=null;
  }
  if (recordAndReplay.getErrorThrown() != null) {
    return null;
  }
  if (currentExpectation == null) {
    pendingError=currentVerification.invocation.errorForMissingInvocation();
    currentExpectation=currentVerification;
  }
  return currentExpectation.invocation.getDefaultValueForReturnType();
}",0.9984917043740572
164700,"@Nullable Object produceResult(@Nullable Object invokedObject,@Nonnull Object[] invocationArgs) throws Throwable {
  if (results == null) {
    return invocation.getDefaultValueForReturnType(null);
  }
  return results.produceResult(invokedObject,invocationArgs);
}","@Nullable Object produceResult(@Nullable Object invokedObject,@Nonnull Object[] invocationArgs) throws Throwable {
  if (results == null) {
    return invocation.getDefaultValueForReturnType();
  }
  return results.produceResult(invokedObject,invocationArgs);
}",0.9923954372623576
164701,"@Nullable @Override Object handleInvocation(@Nullable Object mock,int mockAccess,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nullable String genericSignature,boolean withRealImpl,@Nonnull Object[] args) throws Throwable {
  mock=configureMatchingOnMockInstanceIfSpecified(mock);
  ExpectedInvocation invocation=new ExpectedInvocation(mock,mockAccess,mockClassDesc,mockNameAndDesc,matchInstance,genericSignature,args);
  Class<?> callerClass=loadClass(invocation.getCallerClassName());
  if (Expectations.class.isAssignableFrom(callerClass)) {
    boolean nonStrictInvocation=false;
    if (strict) {
      TestRun.getExecutingTest().addStrictMock(mock,matchInstance ? null : mockClassDesc);
    }
 else     if (!matchInstance && invocation.isConstructor()) {
      invocation.replacementInstance=mock;
      getReplacementMap().put(mock,mock);
    }
 else {
      nonStrictInvocation=isInstanceMethodWithStandardBehavior(mock,mockNameAndDesc);
    }
    currentExpectation=new Expectation(this,invocation,strict,nonStrictInvocation);
    if (argMatchers != null) {
      invocation.arguments.setMatchers(argMatchers);
      argMatchers=null;
    }
    recordAndReplay.executionState.addExpectation(currentExpectation,strict);
  }
  return invocation.getDefaultValueForReturnType(this);
}","@Nullable @Override Object handleInvocation(@Nullable Object mock,int mockAccess,@Nonnull String mockClassDesc,@Nonnull String mockNameAndDesc,@Nullable String genericSignature,boolean withRealImpl,@Nonnull Object[] args) throws Throwable {
  mock=configureMatchingOnMockInstanceIfSpecified(mock);
  ExpectedInvocation invocation=new ExpectedInvocation(mock,mockAccess,mockClassDesc,mockNameAndDesc,matchInstance,genericSignature,args);
  Class<?> callerClass=loadClass(invocation.getCallerClassName());
  if (Expectations.class.isAssignableFrom(callerClass)) {
    boolean nonStrictInvocation=false;
    if (strict) {
      TestRun.getExecutingTest().addStrictMock(mock,matchInstance ? null : mockClassDesc);
    }
 else     if (!matchInstance && invocation.isConstructor()) {
      invocation.replacementInstance=mock;
      getReplacementMap().put(mock,mock);
    }
 else {
      nonStrictInvocation=isInstanceMethodWithStandardBehavior(mock,mockNameAndDesc);
    }
    currentExpectation=new Expectation(this,invocation,strict,nonStrictInvocation);
    if (argMatchers != null) {
      invocation.arguments.setMatchers(argMatchers);
      argMatchers=null;
    }
    recordAndReplay.executionState.addExpectation(currentExpectation,strict);
  }
  return invocation.getDefaultValueForReturnType();
}",0.9984662576687116
164702,"@Nullable public Object getDefaultValueForReturnType(@Nullable TestOnlyPhase phase){
  if (defaultReturnValue == UNDEFINED_DEFAULT_RETURN) {
    Class<?> resolvedReturnType=getReturnTypeAsResolvedFromClassArgument();
    if (resolvedReturnType != null) {
      defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue == null) {
        String returnTypeDesc='L' + resolvedReturnType.getName().replace('.','/') + ';';
        String mockedTypeDesc=getClassDesc();
        Object cascadedMock=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,resolvedReturnType);
        useCascadedMock(phase,cascadedMock);
      }
      return defaultReturnValue;
    }
    String returnTypeDesc=DefaultValues.getReturnTypeDesc(arguments.methodNameAndDesc);
    defaultReturnValue=DefaultValues.computeForType(returnTypeDesc);
    if (defaultReturnValue == null) {
      produceCascadedInstanceIfApplicable(phase,returnTypeDesc,arguments.genericSignature);
    }
  }
  return defaultReturnValue;
}","@Nullable public Object getDefaultValueForReturnType(){
  if (defaultReturnValue == UNDEFINED_DEFAULT_RETURN) {
    Class<?> resolvedReturnType=getReturnTypeAsResolvedFromClassArgument();
    if (resolvedReturnType != null) {
      defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue == null) {
        String returnTypeDesc='L' + resolvedReturnType.getName().replace('.','/') + ';';
        String mockedTypeDesc=getClassDesc();
        defaultReturnValue=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,resolvedReturnType);
      }
      return defaultReturnValue;
    }
    String returnTypeDesc=DefaultValues.getReturnTypeDesc(arguments.methodNameAndDesc);
    defaultReturnValue=DefaultValues.computeForType(returnTypeDesc);
    if (defaultReturnValue == null) {
      String mockedTypeDesc=getClassDesc();
      defaultReturnValue=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,arguments.genericSignature);
    }
  }
  return defaultReturnValue;
}",0.5343228200371057
164703,"private boolean isMatchingMethod(@Nullable Object mock,@Nonnull String invokedMethod){
  if (mock != null && instance != null) {
    String genericSignature=arguments.genericSignature;
    if (genericSignature != null) {
      Class<?> mockedClass=mock.getClass();
      if (mockedClass != instance.getClass()) {
        GenericTypeReflection typeReflection=new GenericTypeReflection(mockedClass,null);
        GenericSignature parsedSignature=typeReflection.parseSignature(genericSignature);
        return parsedSignature.satisfiesSignature(invokedMethod);
      }
    }
  }
  String nameAndDesc=getMethodNameAndDescription();
  int i=0;
  while (true) {
    char c=nameAndDesc.charAt(i);
    if (c != invokedMethod.charAt(i)) {
      return false;
    }
    i++;
    if (c == ')') {
      break;
    }
  }
  int n=invokedMethod.length();
  if (n == nameAndDesc.length()) {
    int j=i;
    while (true) {
      char c=nameAndDesc.charAt(j);
      if (c != invokedMethod.charAt(j)) {
        break;
      }
      j++;
      if (j == n) {
        return true;
      }
    }
  }
  Type rt1=Type.getType(nameAndDesc.substring(i));
  Type rt2=Type.getType(invokedMethod.substring(i));
  return TypeDescriptor.getClassForType(rt2).isAssignableFrom(TypeDescriptor.getClassForType(rt1));
}","private boolean isMatchingMethod(@Nonnull String invokedMethod){
  int returnTypeStartPos=getReturnTypePosition(invokedMethod);
  if (returnTypeStartPos < 0) {
    return false;
  }
  if (haveSameReturnTypes(invokedMethod,returnTypeStartPos)) {
    return true;
  }
  return isReturnTypeOfRecordedMethodAssignableToReturnTypeOfInvokedMethod(invokedMethod,returnTypeStartPos);
}",0.0963275135460565
164704,"@Nonnull private Type getGenericReturnType(@Nonnull Class<?> cascadingClass,@Nonnull String methodNameAndDesc) throws NoSuchMethodException {
  Method cascadingMethod=new RealMethodOrConstructor(cascadingClass,methodNameAndDesc).getMember();
  Type genericReturnType=cascadingMethod.getGenericReturnType();
  if (genericReturnType instanceof TypeVariable<?>) {
    genericReturnType=genericReflection.resolveTypeVariable((TypeVariable<?>)genericReturnType);
  }
  return genericReturnType;
}","@Nonnull private Type getGenericReturnType(@Nonnull Class<?> cascadingClass,@Nonnull String methodNameAndDesc) throws NoSuchMethodException {
  Method cascadingMethod=new RealMethodOrConstructor(cascadingClass,methodNameAndDesc).getMember();
  Type genericReturnType=cascadingMethod.getGenericReturnType();
  if (genericReturnType instanceof TypeVariable<?>) {
    genericReturnType=getGenericReflection().resolveTypeVariable((TypeVariable<?>)genericReturnType);
  }
  return genericReturnType;
}",0.994934143870314
164705,"<T extends Bar>T doSomething(){
  return null;
}",<T extends Runnable>T doSomething();,0.6904761904761905
164706,"@Nullable private MockedTypeCascade getCascade(@Nonnull String invokedTypeDesc,@Nonnull Class<?> mockedClass){
  Class<?> typeToLookFor=mockedClass;
  do {
    String typeDesc=Type.getInternalName(typeToLookFor);
    if (invokedTypeDesc.equals(typeDesc)) {
      return null;
    }
    MockedTypeCascade cascade=cascadingTypes.get(typeDesc);
    if (cascade != null) {
      cascade.mockedClass=mockedClass;
      return cascade;
    }
    cascade=getCascadeForInterface(invokedTypeDesc,typeToLookFor);
    if (cascade != null) {
      return cascade;
    }
    typeToLookFor=typeToLookFor.getSuperclass();
  }
 while (typeToLookFor != Object.class);
  return null;
}","@Nullable private MockedTypeCascade getCascade(@Nonnull String invokedTypeDesc,@Nonnull Class<?> mockedClass){
  Class<?> typeToLookFor=mockedClass;
  do {
    String typeDesc=Type.getInternalName(typeToLookFor);
    if (invokedTypeDesc.equals(typeDesc)) {
      return null;
    }
    MockedTypeCascade cascade=getCascade(typeDesc);
    if (cascade != null) {
      cascade.mockedClass=mockedClass;
      return cascade;
    }
    cascade=getCascadeForInterface(invokedTypeDesc,typeToLookFor);
    if (cascade != null) {
      return cascade;
    }
    typeToLookFor=typeToLookFor.getSuperclass();
  }
 while (typeToLookFor != Object.class);
  return null;
}",0.9803921568627452
164707,"Outer<String>.Inner doSomething(){
  return null;
}","SubB<C> doSomething(){
  return null;
}",0.7777777777777778
164708,"@Nonnull public String getSignatureWithResolvedReturnType(){
  String signature=arguments.genericSignature;
  if (signature != null) {
    char firstTypeChar=signature.charAt(signature.indexOf(')') + 1);
    if (firstTypeChar != 'T' && firstTypeChar != '[') {
      return signature;
    }
  }
  return arguments.methodNameAndDesc;
}","@Nonnull public String getSignatureWithResolvedReturnType(){
  String signature=arguments.genericSignature;
  if (signature != null) {
    String classDesc=getClassDesc();
    Class<?> mockedClass=instance != null ? instance.getClass() : ClassLoad.loadByInternalName(classDesc);
    GenericTypeReflection reflection=new GenericTypeReflection(mockedClass,null);
    signature=reflection.resolveReturnType(classDesc,signature);
    char firstTypeChar=signature.charAt(signature.indexOf(')') + 1);
    if (firstTypeChar != 'T' && firstTypeChar != '[') {
      return signature;
    }
  }
  return arguments.methodNameAndDesc;
}",0.6959247648902821
164709,"@Override protected void generateMethodBody(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  String resolvedSignature=signature;
  if (signature != null) {
    resolvedSignature=mockedTypeInfo.genericTypeMap.resolveReturnType(methodOwner,signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,resolvedSignature,exceptions);
  generateDirectCallToHandler(mw,interfaceName,access,name,desc,resolvedSignature);
  generateReturnWithObjectAtTopOfTheStack(desc);
  mw.visitMaxs(1,0);
}","@Override protected void generateMethodBody(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,signature,exceptions);
  String className=isOverrideOfMethodFromSuperInterface(name,desc) ? interfaceName : methodOwner;
  generateDirectCallToHandler(mw,className,access,name,desc,signature);
  generateReturnWithObjectAtTopOfTheStack(desc);
  mw.visitMaxs(1,0);
}",0.6295928500496525
164710,"@Nullable private MockedTypeCascade getCascade(@Nonnull String invokedTypeDesc,@Nonnull Class<?> mockedClass){
  Class<?> typeToLookFor=mockedClass;
  do {
    String typeDesc=Type.getInternalName(typeToLookFor);
    if (invokedTypeDesc.equals(typeDesc)) {
      return null;
    }
    MockedTypeCascade cascade=cascadingTypes.get(typeDesc);
    if (cascade != null) {
      cascade.mockedClass=mockedClass;
      return cascade;
    }
    typeToLookFor=typeToLookFor.getSuperclass();
  }
 while (typeToLookFor != Object.class);
  return null;
}","@Nullable private MockedTypeCascade getCascade(@Nonnull String invokedTypeDesc,@Nonnull Class<?> mockedClass){
  Class<?> typeToLookFor=mockedClass;
  do {
    String typeDesc=Type.getInternalName(typeToLookFor);
    if (invokedTypeDesc.equals(typeDesc)) {
      return null;
    }
    MockedTypeCascade cascade=cascadingTypes.get(typeDesc);
    if (cascade != null) {
      cascade.mockedClass=mockedClass;
      return cascade;
    }
    cascade=getCascadeForInterface(invokedTypeDesc,typeToLookFor);
    if (cascade != null) {
      return cascade;
    }
    typeToLookFor=typeToLookFor.getSuperclass();
  }
 while (typeToLookFor != Object.class);
  return null;
}",0.8993399339933993
164711,"@Nullable private String resolveReturnType(@Nonnull Class<?> ownerType,@Nonnull String genericReturnType){
  String ownerTypeDesc=getOwnerClassDesc(ownerType);
  String resolvedReturnType=replaceTypeParametersWithActualTypes(ownerTypeDesc,genericReturnType);
  if (!resolvedReturnType.equals(genericReturnType)) {
    return resolvedReturnType;
  }
  if (ownerType.isInterface()) {
    for (    Class<?> superInterface : ownerType.getInterfaces()) {
      resolvedReturnType=resolveReturnType(superInterface,genericReturnType);
      if (resolvedReturnType != null) {
        return resolvedReturnType;
      }
    }
    return null;
  }
  Class<?> superClass=ownerType.getSuperclass();
  return superClass == Object.class ? null : resolveReturnType(superClass,genericReturnType);
}","@Nullable private String resolveReturnType(@Nonnull Class<?> ownerType,@Nonnull String genericReturnType){
  do {
    String ownerTypeDesc=getOwnerClassDesc(ownerType);
    String resolvedReturnType=replaceTypeParametersWithActualTypes(ownerTypeDesc,genericReturnType);
    if (!resolvedReturnType.equals(genericReturnType)) {
      return resolvedReturnType;
    }
    resolvedReturnType=resolveReturnTypeForInterfaceMethod(ownerType,genericReturnType);
    if (resolvedReturnType != null) {
      return resolvedReturnType;
    }
    ownerType=ownerType.getSuperclass();
  }
 while (ownerType != null && ownerType != Object.class);
  return null;
}",0.5893854748603352
164712,"@Nonnull public static Class<?> getReturnType(@Nonnull String methodDesc){
  Type returnType=Type.getReturnType(methodDesc);
  return getClassForType(returnType);
}","@Nonnull public static Class<?> getReturnType(@Nonnull String methodSignature){
  String methodDesc=methodDescriptionWithoutTypeArguments(methodSignature);
  Type returnType=Type.getReturnType(methodDesc);
  return getClassForType(returnType);
}",0.7041564792176039
164713,<T extends Runnable>T doSomething();,"Outer<String>.Inner doSomething(){
  return null;
}",0.4827586206896552
164714,"@Nonnull private Object getArgumentValueToInject(@Nonnull InjectionPointProvider injectable){
  Object argument=injectionState.getValueToInject(injectable);
  if (argument == null) {
    String parameterName=injectable.getName();
    throw new IllegalArgumentException(""String_Node_Str"" + missingValueDescription(parameterName));
  }
  return argument;
}","@Nonnull private Object getArgumentValueToInject(@Nonnull InjectionPointProvider injectable,int parameterIndex){
  Object argument=injectionState.getValueToInject(injectable);
  if (argument == null) {
    String classDesc=getClassDesc();
    String constructorDesc=getConstructorDesc();
    String parameterName=ParameterNames.getName(classDesc,constructorDesc,parameterIndex);
    if (parameterName == null) {
      parameterName=injectable.getName();
    }
    throw new IllegalArgumentException(""String_Node_Str"" + missingValueDescription(parameterName));
  }
  return argument;
}",0.7547974413646056
164715,"@Nonnull private String missingValueDescription(@Nonnull String name){
  String classDesc=mockit.external.asm.Type.getInternalName(constructor.getDeclaringClass());
  String constructorDesc=""String_Node_Str"" + mockit.external.asm.Type.getConstructorDescriptor(constructor);
  String constructorDescription=new MethodFormatter(classDesc,constructorDesc).toString();
  return ""String_Node_Str"" + name + ""String_Node_Str""+ constructorDescription.replace(""String_Node_Str"",""String_Node_Str"");
}","@Nonnull private String missingValueDescription(@Nonnull String name){
  String classDesc=getClassDesc();
  String constructorDesc=getConstructorDesc();
  String constructorDescription=new MethodFormatter(classDesc,constructorDesc).toString();
  return ""String_Node_Str"" + name + ""String_Node_Str""+ constructorDescription.replace(""String_Node_Str"",""String_Node_Str"");
}",0.2258440046565774
164716,"@Nonnull Object instantiate(@Nonnull List<InjectionPointProvider> parameterProviders){
  Type[] parameterTypes=constructor.getGenericParameterTypes();
  int n=parameterTypes.length;
  List<InjectionPointProvider> consumedInjectables=n == 0 ? null : injectionState.saveConsumedInjectables();
  Object[] arguments=n == 0 ? NO_ARGS : new Object[n];
  boolean varArgs=constructor.isVarArgs();
  if (varArgs) {
    n--;
  }
  for (int i=0; i < n; i++) {
    InjectionPointProvider parameterProvider=parameterProviders.get(i);
    Object value;
    if (parameterProvider instanceof ConstructorParameter) {
      value=createOrReuseArgumentValue((ConstructorParameter)parameterProvider);
    }
 else {
      value=getArgumentValueToInject(parameterProvider);
    }
    Type parameterType=parameterTypes[i];
    arguments[i]=wrapInProviderIfNeeded(parameterType,value);
  }
  if (varArgs) {
    Type parameterType=parameterTypes[n];
    arguments[n]=obtainInjectedVarargsArray(parameterType);
  }
  if (consumedInjectables != null) {
    injectionState.restoreConsumedInjectables(consumedInjectables);
  }
  return invokeConstructor(arguments);
}","@Nonnull Object instantiate(@Nonnull List<InjectionPointProvider> parameterProviders){
  Type[] parameterTypes=constructor.getGenericParameterTypes();
  int n=parameterTypes.length;
  List<InjectionPointProvider> consumedInjectables=n == 0 ? null : injectionState.saveConsumedInjectables();
  Object[] arguments=n == 0 ? NO_ARGS : new Object[n];
  boolean varArgs=constructor.isVarArgs();
  if (varArgs) {
    n--;
  }
  for (int i=0; i < n; i++) {
    InjectionPointProvider parameterProvider=parameterProviders.get(i);
    Object value;
    if (parameterProvider instanceof ConstructorParameter) {
      value=createOrReuseArgumentValue((ConstructorParameter)parameterProvider);
    }
 else {
      value=getArgumentValueToInject(parameterProvider,i);
    }
    Type parameterType=parameterTypes[i];
    arguments[i]=wrapInProviderIfNeeded(parameterType,value);
  }
  if (varArgs) {
    Type parameterType=parameterTypes[n];
    arguments[n]=obtainInjectedVarargsArray(parameterType);
  }
  if (consumedInjectables != null) {
    injectionState.restoreConsumedInjectables(consumedInjectables);
  }
  return invokeConstructor(arguments);
}",0.9991220368744512
164717,"@Nonnull public String getCallerClassName(){
  StackTrace st=new StackTrace(invocationCause);
  int steIndex=3;
  String firstCaller=st.getElement(steIndex).getClassName();
  steIndex+=""String_Node_Str"".equals(firstCaller) ? 2 : 1;
  String secondCaller=st.getElement(steIndex).getClassName();
  if (secondCaller.contains(""String_Node_Str"")) {
    steIndex+=3;
    while (true) {
      String nextCaller=st.getElement(steIndex).getClassName();
      steIndex++;
      if (""String_Node_Str"".equals(nextCaller)) {
        continue;
      }
      if (!nextCaller.contains(""String_Node_Str"") && !nextCaller.startsWith(""String_Node_Str"")) {
        return nextCaller;
      }
    }
  }
  if (!secondCaller.equals(firstCaller)) {
    return secondCaller;
  }
  String thirdCaller=st.getElement(steIndex + 1).getClassName();
  return thirdCaller;
}","@Nonnull public String getCallerClassName(){
  StackTrace st=new StackTrace(invocationCause);
  int steIndex=3;
  StackTraceElement ste=st.getElement(steIndex);
  if (ste.getFileName() != null && ste.getLineNumber() == -1 && ste.getMethodName().charAt(0) != '<') {
    StackTraceElement steNext=st.getElement(steIndex + 1);
    if (steNext.getMethodName().equals(ste.getMethodName())) {
      ste=steNext;
      steIndex++;
    }
  }
  String firstCaller=ste.getClassName();
  steIndex+=""String_Node_Str"".equals(firstCaller) ? 2 : 1;
  String secondCaller=st.getElement(steIndex).getClassName();
  if (secondCaller.contains(""String_Node_Str"")) {
    return getNextCallerAfterReflectionCalls(st,steIndex);
  }
  if (!secondCaller.equals(firstCaller)) {
    return secondCaller;
  }
  String thirdCaller=st.getElement(steIndex + 1).getClassName();
  return thirdCaller;
}",0.2619883040935672
164718,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void addMappingsFromTypeParametersToTypeArguments(@Nonnull Class<?> rawType,@Nonnull ParameterizedType genericType){
  String ownerTypeDesc=getOwnerClassDesc(rawType);
  TypeVariable<?>[] typeParameters=rawType.getTypeParameters();
  Type[] typeArguments=genericType.getActualTypeArguments();
  int n=typeParameters.length;
  for (int i=0; i < n; i++) {
    TypeVariable<?> typeParam=typeParameters[i];
    String typeVarName=typeParam.getName();
    if (typeParametersToTypeArguments.containsKey(ownerTypeDesc + ':' + typeVarName)) {
      continue;
    }
    Type typeArg=typeArguments[i];
    Type mappedTypeArg;
    String mappedTypeArgName=null;
    if (typeArg instanceof Class<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        mappedTypeArgName='L' + getOwnerClassDesc((Class<?>)typeArg);
      }
    }
 else     if (typeArg instanceof TypeVariable<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        TypeVariable<?> typeVar=(TypeVariable<?>)typeArg;
        String ownerClassDesc=getOwnerClassDesc(typeVar);
        String intermediateTypeArg=ownerClassDesc + ""String_Node_Str"" + typeVar.getName();
        mappedTypeArgName=typeParametersToTypeArgumentNames.get(intermediateTypeArg);
      }
    }
 else     if (typeArg instanceof ParameterizedType) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        Class<?> classType=getClassType(typeArg);
        mappedTypeArgName='L' + getOwnerClassDesc(classType);
      }
    }
 else     if (typeArg instanceof GenericArrayType) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        Type componentType=((GenericArrayType)typeArg).getGenericComponentType();
        Class<?> classType=getClassType(componentType);
        mappedTypeArgName=""String_Node_Str"" + getOwnerClassDesc(classType);
      }
    }
 else {
      mappedTypeArg=typeParam.getBounds()[0];
      if (withSignatures) {
        Class<?> classType=getClassType(mappedTypeArg);
        mappedTypeArgName='L' + getOwnerClassDesc(classType);
      }
    }
    addTypeMapping(ownerTypeDesc,typeVarName,mappedTypeArg,mappedTypeArgName);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void addMappingsFromTypeParametersToTypeArguments(@Nonnull Class<?> rawType,@Nonnull ParameterizedType genericType){
  String ownerTypeDesc=getOwnerClassDesc(rawType);
  TypeVariable<?>[] typeParameters=rawType.getTypeParameters();
  Type[] typeArguments=genericType.getActualTypeArguments();
  int n=typeParameters.length;
  for (int i=0; i < n; i++) {
    TypeVariable<?> typeParam=typeParameters[i];
    String typeVarName=typeParam.getName();
    if (typeParametersToTypeArguments.containsKey(ownerTypeDesc + ':' + typeVarName)) {
      continue;
    }
    Type typeArg=typeArguments[i];
    Type mappedTypeArg;
    String mappedTypeArgName=null;
    if (typeArg instanceof Class<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        Class<?> classArg=(Class<?>)typeArg;
        String ownerClassDesc=getOwnerClassDesc(classArg);
        mappedTypeArgName=classArg.isArray() ? ownerClassDesc : 'L' + ownerClassDesc;
      }
    }
 else     if (typeArg instanceof TypeVariable<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        TypeVariable<?> typeVar=(TypeVariable<?>)typeArg;
        String ownerClassDesc=getOwnerClassDesc(typeVar);
        String intermediateTypeArg=ownerClassDesc + ""String_Node_Str"" + typeVar.getName();
        mappedTypeArgName=typeParametersToTypeArgumentNames.get(intermediateTypeArg);
      }
    }
 else     if (typeArg instanceof ParameterizedType) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        Class<?> classType=getClassType(typeArg);
        mappedTypeArgName='L' + getOwnerClassDesc(classType);
      }
    }
 else     if (typeArg instanceof GenericArrayType) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        mappedTypeArgName=getMappedTypeArgName((GenericArrayType)typeArg);
      }
    }
 else {
      mappedTypeArg=typeParam.getBounds()[0];
      if (withSignatures) {
        Class<?> classType=getClassType(mappedTypeArg);
        mappedTypeArgName='L' + getOwnerClassDesc(classType);
      }
    }
    addTypeMapping(ownerTypeDesc,typeVarName,mappedTypeArg,mappedTypeArgName);
  }
}",0.5120661916800735
164719,"@Nonnull Object instantiate(@Nonnull List<InjectionPointProvider> parameterProviders){
}","@Nonnull Object instantiate(@Nonnull List<InjectionPointProvider> parameterProviders){
  Type[] parameterTypes=constructor.getGenericParameterTypes();
  int n=parameterTypes.length;
  List<InjectionPointProvider> consumedInjectables=n == 0 ? null : injectionState.saveConsumedInjectables();
  Object[] arguments=n == 0 ? NO_ARGS : new Object[n];
  boolean varArgs=constructor.isVarArgs();
  if (varArgs) {
    n--;
  }
  for (int i=0; i < n; i++) {
    InjectionPointProvider parameterProvider=parameterProviders.get(i);
    Object value;
    if (parameterProvider instanceof ConstructorParameter) {
      value=createOrReuseArgumentValue((ConstructorParameter)parameterProvider);
    }
 else {
      value=getArgumentValueToInject(parameterProvider);
    }
    Type parameterType=parameterTypes[i];
    arguments[i]=wrapInProviderIfNeeded(parameterType,value);
  }
  if (varArgs) {
    Type parameterType=parameterTypes[n];
    arguments[n]=obtainInjectedVarargsArray(parameterType);
  }
  if (consumedInjectables != null) {
    injectionState.restoreConsumedInjectables(consumedInjectables);
  }
  return invokeConstructor(arguments);
}",0.1435562805872756
164720,"public MethodCoverageData(){
  nodes=Collections.emptyList();
  paths=Collections.emptyList();
  nonShadowedPaths=Collections.emptyList();
  nodesReached=new ThreadLocal<List<Node>>();
  previousNodeIndex=new ThreadLocal<Integer>();
}","public MethodCoverageData(){
  nodes=Collections.emptyList();
  paths=Collections.emptyList();
  nonShadowedPaths=Collections.emptyList();
  nodesReached=new ThreadLocal<List<Node>>();
  previousNodeIndex=new ThreadLocal<Integer>();
  clearNodes();
}",0.9669421487603306
164721,"@Override public void visitEnd(){
}","@Override public void visitEnd(){
  for (  String superInterface : superInterfaces) {
    new MethodGeneratorForImplementedSuperInterface(superInterface);
  }
}",0.358974358974359
164722,"@Override public void visit(int version,int access,String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  superInterfaces=interfaces;
}","@Override public void visit(int version,int access,String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  methodOwner=name;
  superInterfaces=interfaces;
}",0.9473684210526316
164723,"@Override protected void generateMethodBody(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  String resolvedSignature=signature;
  if (signature != null) {
    resolvedSignature=mockedTypeInfo.genericTypeMap.resolveReturnType(interfaceName,signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,resolvedSignature,exceptions);
  generateDirectCallToHandler(mw,interfaceName,access,name,desc,resolvedSignature);
  generateReturnWithObjectAtTopOfTheStack(desc);
  mw.visitMaxs(1,0);
}","@Override protected void generateMethodBody(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  String resolvedSignature=signature;
  if (signature != null) {
    resolvedSignature=mockedTypeInfo.genericTypeMap.resolveReturnType(methodOwner,signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,resolvedSignature,exceptions);
  generateDirectCallToHandler(mw,interfaceName,access,name,desc,resolvedSignature);
  generateReturnWithObjectAtTopOfTheStack(desc);
  mw.visitMaxs(1,0);
}",0.9780621572212066
164724,"@Test @Ignore(""String_Node_Str"") public void recordGenericInterfaceMethodWithReturnTypeGivenByTypeParameterDependentOnAnotherTypeParameterOfSameName(@Mocked final DerivedGenericInterface<String> dep) throws Exception {
  Method mockedMethod=dep.getClass().getDeclaredMethod(""String_Node_Str"");
  Type rt=mockedMethod.getGenericReturnType();
  assertNotSame(String.class,rt);
  final List<String> values=asList(""String_Node_Str"",""String_Node_Str"");
  new Expectations(){
{
      dep.doSomething();
      result=values;
    }
  }
;
  List<String> result=dep.doSomething();
  assertSame(values,result);
}","@Test public void recordGenericInterfaceMethodWithReturnTypeGivenByTypeParameterDependentOnAnotherTypeParameterOfSameName(@Mocked final DerivedGenericInterface<String> dep) throws Exception {
  Class<?> generatedClass=dep.getClass();
  Method mockedBaseMethod=generatedClass.getDeclaredMethod(""String_Node_Str"");
  Type rt=mockedBaseMethod.getGenericReturnType();
  assertSame(List.class,rt);
  Method mockedSubInterfaceMethod=generatedClass.getDeclaredMethod(""String_Node_Str"");
  rt=mockedSubInterfaceMethod.getGenericReturnType();
  assertSame(String.class,rt);
  final List<String> values=asList(""String_Node_Str"",""String_Node_Str"");
  new Expectations(){
{
      dep.doSomething();
      result=values;
      dep.doSomethingElse();
      result=""String_Node_Str"";
    }
  }
;
  List<String> resultFromBase=dep.doSomething();
  String resultFromSub=dep.doSomethingElse();
  assertSame(values,resultFromBase);
  assertEquals(""String_Node_Str"",resultFromSub);
}",0.7225063938618926
164725,"protected final void generateCodeToFillArrayElement(int arrayIndex,@Nullable Object value){
  mw.visitInsn(DUP);
  mw.visitIntInsn(BIPUSH,arrayIndex);
  if (value == null) {
    mw.visitInsn(ACONST_NULL);
  }
 else   if (value instanceof Integer) {
    mw.visitIntInsn(SIPUSH,(Integer)value);
    mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
 else   if (value instanceof Boolean) {
    mw.visitInsn((Boolean)value ? ICONST_1 : ICONST_0);
    mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mw.visitLdcInsn(value);
  }
  mw.visitInsn(AASTORE);
}","protected final void generateCodeToFillArrayElement(int arrayIndex,@Nullable Object value){
  mw.visitInsn(DUP);
  mw.visitIntInsn(SIPUSH,arrayIndex);
  if (value == null) {
    mw.visitInsn(ACONST_NULL);
  }
 else   if (value instanceof Integer) {
    mw.visitIntInsn(SIPUSH,(Integer)value);
    mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
 else   if (value instanceof Boolean) {
    mw.visitInsn((Boolean)value ? ICONST_1 : ICONST_0);
    mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mw.visitLdcInsn(value);
  }
  mw.visitInsn(AASTORE);
}",0.9984825493171472
164726,"public static void generateCodeToCreateArrayOfObject(@Nonnull MethodWriter mw,int arrayLength){
  mw.visitIntInsn(BIPUSH,arrayLength);
  mw.visitTypeInsn(ANEWARRAY,""String_Node_Str"");
}","public static void generateCodeToCreateArrayOfObject(@Nonnull MethodWriter mw,int arrayLength){
  mw.visitIntInsn(SIPUSH,arrayLength);
  mw.visitTypeInsn(ANEWARRAY,""String_Node_Str"");
}",0.9945945945945946
164727,"public static void generateCodeToFillArrayWithParameterValues(@Nonnull MethodWriter mw,@Nonnull Type[] parameterTypes,int initialArrayIndex,int initialParameterIndex){
  int i=initialArrayIndex;
  int j=initialParameterIndex;
  for (  Type parameterType : parameterTypes) {
    mw.visitInsn(DUP);
    mw.visitIntInsn(BIPUSH,i++);
    mw.visitVarInsn(parameterType.getOpcode(ILOAD),j);
    TypeConversion.generateCastToObject(mw,parameterType);
    mw.visitInsn(AASTORE);
    j+=parameterType.getSize();
  }
}","public static void generateCodeToFillArrayWithParameterValues(@Nonnull MethodWriter mw,@Nonnull Type[] parameterTypes,int initialArrayIndex,int initialParameterIndex){
  int i=initialArrayIndex;
  int j=initialParameterIndex;
  for (  Type parameterType : parameterTypes) {
    mw.visitInsn(DUP);
    mw.visitIntInsn(SIPUSH,i++);
    mw.visitVarInsn(parameterType.getOpcode(ILOAD),j);
    TypeConversion.generateCastToObject(mw,parameterType);
    mw.visitInsn(AASTORE);
    j+=parameterType.getSize();
  }
}",0.998031496062992
164728,"/** 
 * Allows execution to proceed into the real implementation of the mocked method/constructor. <p/> In the case of a mocked method, the real implementation is executed with the argument values originally received or explicitly given as replacement. Whatever comes out of that call (either a return value or a thrown exception/error, even if it is a <em>checked</em> exception) becomes the result of the current invocation to the mock method. <p/> In the case of a mocked constructor, the real constructor implementation code which comes after the necessary call to ""<code>super</code>"" is executed, using the original argument values; replacement arguments are not supported. If the execution of said code throws an exception or error, it is propagated out to the caller of the mocked constructor (even in the case of a <em>checked</em> exception). Contrary to proceeding into a mocked method, it's not possible to actually execute test code inside the delegate method after proceeding into the real constructor, nor to proceed into it more than once.
 * @param replacementArguments the argument values to be passed to the real method, as replacement for the valuesreceived by the mock method; if those received values should be passed without replacement, then this method should be called with no values
 * @param < T > the return type of the mocked method
 * @return the same value returned by the real method, if any
 * @throws UnsupportedOperationException if attempting to proceed into a mocked method which does not belong to an{@linkplain Injectable injectable mocked type} nor to a {@linkplain Expectations#Expectations(Object) dynamicpartially mocked type}, into a   {@code native} method, or into a mocked constructor while passing replacementarguments
 * @throws IllegalArgumentException if replacement arguments were given but they are the same as the invokedarguments
 * @see <a href=""http://jmockit.org/tutorial/Faking.html#proceed"">Tutorial</a>
 */
public final <T>T proceed(Object... replacementArguments){
  if (replacementArguments == invokedArguments) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return ((BaseInvocation)this).doProceed(replacementArguments);
}","/** 
 * Allows execution to proceed into the real implementation of the mocked method/constructor. <p/> In the case of a mocked method, the real implementation is executed with the argument values originally received or explicitly given as replacement. Whatever comes out of that call (either a return value or a thrown exception/error, even if it is a <em>checked</em> exception) becomes the result of the current invocation to the mock method. <p/> In the case of a mocked constructor, the real constructor implementation code which comes after the necessary call to ""<code>super</code>"" is executed, using the original argument values; replacement arguments are not supported. If the execution of said code throws an exception or error, it is propagated out to the caller of the mocked constructor (even in the case of a <em>checked</em> exception). Contrary to proceeding into a mocked method, it's not possible to actually execute test code inside the delegate method after proceeding into the real constructor, nor to proceed into it more than once.
 * @param replacementArguments the argument values to be passed to the real method, as replacement for the valuesreceived by the mock method; if those received values should be passed without replacement, then this method should be called with no values
 * @param < T > the return type of the mocked method
 * @return the same value returned by the real method, if any
 * @throws UnsupportedOperationException if attempting to proceed into a mocked method which does not belong to an{@linkplain Injectable injectable mocked type} nor to a {@linkplain Expectations#Expectations(Object) dynamicpartially mocked type}, into a   {@code native} method, into a mocked constructor while passing replacementarguments, or into an interface or abstract method
 * @throws IllegalArgumentException if replacement arguments were given but they are the same as the invokedarguments
 * @see <a href=""http://jmockit.org/tutorial/Faking.html#proceed"">Tutorial</a>
 */
public final <T>T proceed(Object... replacementArguments){
  if (replacementArguments == invokedArguments) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return ((BaseInvocation)this).doProceed(replacementArguments);
}",0.9901168014375562
164729,"@Nonnull @Override protected Member findRealMember(){
  return mockState.getRealMethodOrConstructor(mockedClassDesc,mockedMethodName,mockedMethodDesc);
}","@Nonnull @Override protected Member findRealMember(){
  Object invokedInstance=getInvokedInstance();
  if (invokedInstance != null) {
    Class<?> mockedClass=invokedInstance.getClass();
    return mockState.getRealMethodOrConstructor(mockedClass,mockedMethodName,mockedMethodDesc);
  }
  return mockState.getRealMethodOrConstructor(mockedClassDesc,mockedMethodName,mockedMethodDesc);
}",0.5120593692022264
164730,"@Nonnull Member getRealMethodOrConstructor(@Nonnull String mockedClassDesc,@Nonnull String mockedMethodName,@Nonnull String mockedMethodDesc){
  if (realMethodOrConstructor == null || !mockedClassDesc.equals(realClassDesc)) {
    String memberName=""String_Node_Str"".equals(mockedMethodName) ? ""String_Node_Str"" : mockedMethodName;
    RealMethodOrConstructor realMember;
    try {
      realMember=new RealMethodOrConstructor(mockedClassDesc,memberName,mockedMethodDesc);
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
    Member member=realMember.getMember();
    if (mockMethod.isAdvice) {
      return member;
    }
    realMethodOrConstructor=member;
    realClassDesc=mockedClassDesc;
  }
  return realMethodOrConstructor;
}","@Nonnull Member getRealMethodOrConstructor(@Nonnull Class<?> mockedClass,@Nonnull String mockedMethodName,@Nonnull String mockedMethodDesc){
  if (realMethodOrConstructor == null || !mockedClass.equals(realClass)) {
    String memberName=""String_Node_Str"".equals(mockedMethodName) ? ""String_Node_Str"" : mockedMethodName;
    RealMethodOrConstructor realMember;
    try {
      realMember=new RealMethodOrConstructor(mockedClass,memberName,mockedMethodDesc);
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
    Member member=realMember.getMember();
    if (mockMethod.isAdvice) {
      return member;
    }
    realMethodOrConstructor=member;
    realClass=mockedClass;
  }
  return realMethodOrConstructor;
}",0.9591567852437418
164731,"@Override public boolean equals(@Nonnull Object other){
  return mockMethod.equals(((MockState)other).mockMethod);
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean equals(@Nonnull Object other){
  return mockMethod.equals(((MockState)other).mockMethod);
}",0.862453531598513
164732,"public RealMethodOrConstructor(@Nonnull Class<?> realClass,@Nonnull String methodNameAndDesc) throws NoSuchMethodException {
  int p=methodNameAndDesc.indexOf('(');
  String memberDesc=methodNameAndDesc.substring(p);
  if (methodNameAndDesc.charAt(0) == '<') {
    member=findConstructor(realClass,memberDesc);
  }
 else {
    String methodName=methodNameAndDesc.substring(0,p);
    member=findMethod(realClass,methodName,memberDesc);
  }
}","public RealMethodOrConstructor(@Nonnull Class<?> realClass,@Nonnull String methodName,@Nonnull String memberDesc) throws NoSuchMethodException {
  if (methodName.charAt(0) == '<') {
    member=findConstructor(realClass,memberDesc);
  }
 else {
    member=findMethod(realClass,methodName,memberDesc);
  }
}",0.7248322147651006
164733,"@Mock int doSomething(){
  return 2;
}","@Mock void doSomething(Invocation invocation){
  invocation.proceed();
}",0.5454545454545454
164734,"void registerTypeToCaptureIntoListIfApplicable(int varIndex,@Nonnull String signature){
  if (signature.startsWith(""String_Node_Str"")) {
    String typeDesc=signature.substring(16,signature.length() - 2);
    Type type=Type.getType(typeDesc);
    ActiveInvocations.varIndexToTypeDesc.put(varIndex,type.getInternalName());
  }
}","void registerTypeToCaptureIntoListIfApplicable(int varIndex,@Nonnull String signature){
  if (signature.startsWith(""String_Node_Str"")) {
    String typeDesc=signature.substring(16,signature.length() - 2);
    int p=typeDesc.indexOf('<');
    if (p > 0) {
      typeDesc=typeDesc.substring(0,p) + ';';
    }
    Type type=Type.getType(typeDesc);
    ActiveInvocations.varIndexToTypeDesc.put(varIndex,type.getInternalName());
  }
}",0.8650793650793651
164735,"@Override public void visit(int version,int access,@Nonnull String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  classExtendsCapturedType=false;
  if (capturedTypeDesc.equals(superName)) {
    classExtendsCapturedType=true;
  }
 else   if (interfaces != null && interfaces.length > 0) {
    for (    String implementedInterface : interfaces) {
      if (capturedTypeDesc.equals(implementedInterface)) {
        classExtendsCapturedType=true;
        break;
      }
    }
  }
  if (superName != null && !classExtendsCapturedType && !""String_Node_Str"".contains(superName)) {
    ClassReader cr=ClassFile.createClassFileReader(loader,superName);
    cr.accept(this,SKIP_DEBUG);
  }
  throw VisitInterruptedException.INSTANCE;
}","@Override public void visit(int version,int access,@Nonnull String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  classExtendsCapturedType=false;
  if (capturedTypeDesc.equals(superName)) {
    classExtendsCapturedType=true;
    throw VisitInterruptedException.INSTANCE;
  }
  boolean haveInterfaces=interfaces != null && interfaces.length > 0;
  if (haveInterfaces) {
    for (    String implementedInterface : interfaces) {
      if (capturedTypeDesc.equals(implementedInterface)) {
        classExtendsCapturedType=true;
        throw VisitInterruptedException.INSTANCE;
      }
    }
  }
  if (superName != null) {
    if (!""String_Node_Str"".contains(superName)) {
      ClassReader cr=ClassFile.createClassFileReader(loader,superName);
      cr.accept(this,SKIP_DEBUG);
    }
 else     if (haveInterfaces) {
      for (      String implementedInterface : interfaces) {
        ClassReader cr=ClassFile.createClassFileReader(loader,implementedInterface);
        cr.accept(this,SKIP_DEBUG);
      }
    }
  }
  throw VisitInterruptedException.INSTANCE;
}",0.7701333333333333
164736,"static boolean isNotToBeCaptured(@Nullable ClassLoader loader,@Nullable ProtectionDomain protectionDomain,@Nonnull String classNameOrDesc){
  if (loader == null && classNameOrDesc.startsWith(""String_Node_Str"") || protectionDomain == JMOCKIT_DOMAIN || isGeneratedClass(classNameOrDesc)) {
    return true;
  }
  return classNameOrDesc.endsWith(""String_Node_Str"") || classNameOrDesc.startsWith(""String_Node_Str"") || classNameOrDesc.startsWith(""String_Node_Str"")|| classNameOrDesc.startsWith(""String_Node_Str"") && (hasSubPackage(classNameOrDesc,""String_Node_Str"") || hasSubPackage(classNameOrDesc,""String_Node_Str"") || hasSubPackage(classNameOrDesc,""String_Node_Str"")) || classNameOrDesc.startsWith(""String_Node_Str"") && hasSubPackage(classNameOrDesc,""String_Node_Str"") || ClassLoad.isGeneratedSubclass(classNameOrDesc);
}","static boolean isNotToBeCaptured(@Nullable ClassLoader loader,@Nullable ProtectionDomain protectionDomain,@Nonnull String classNameOrDesc){
  if (loader == null && classNameOrDesc.startsWith(""String_Node_Str"") || protectionDomain == JMOCKIT_DOMAIN || isGeneratedClass(classNameOrDesc)) {
    return true;
  }
  return classNameOrDesc.endsWith(""String_Node_Str"") || classNameOrDesc.startsWith(""String_Node_Str"") || classNameOrDesc.startsWith(""String_Node_Str"") && !hasSubPackage(classNameOrDesc,4,""String_Node_Str"") || classNameOrDesc.startsWith(""String_Node_Str"") && (hasSubPackage(classNameOrDesc,4,""String_Node_Str"") || hasSubPackage(classNameOrDesc,4,""String_Node_Str"") || hasSubPackage(classNameOrDesc,4,""String_Node_Str"")) || classNameOrDesc.startsWith(""String_Node_Str"") && (hasSubPackage(classNameOrDesc,4,""String_Node_Str"") && !hasSubPackage(classNameOrDesc,8,""String_Node_Str"") || hasSubPackage(classNameOrDesc,4,""String_Node_Str"")) || ClassLoad.isGeneratedSubclass(classNameOrDesc);
}",0.6960838389409818
164737,"private static boolean hasSubPackage(@Nonnull String nameOrDesc,@Nonnull String subPackage){
  return nameOrDesc.regionMatches(4,subPackage,0,subPackage.length());
}","private static boolean hasSubPackage(@Nonnull String nameOrDesc,int offset,@Nonnull String subPackage){
  return nameOrDesc.regionMatches(offset,subPackage,0,subPackage.length());
}",0.9479768786127168
164738,"@SuppressWarnings(""String_Node_Str"") boolean isToBeCaptured(@Nonnull Class<?> aClass){
  if (baseType == Object.class) {
    if (aClass.isArray() || mockit.MockUp.class.isAssignableFrom(aClass) || mockit.Delegate.class.isAssignableFrom(aClass)|| mockit.Expectations.class.isAssignableFrom(aClass)|| mockit.Verifications.class.isAssignableFrom(aClass)) {
      return false;
    }
  }
 else   if (aClass == baseType || !baseType.isAssignableFrom(aClass)) {
    return false;
  }
  if (aClass.isInterface()) {
    return false;
  }
  return !isNotToBeCaptured(aClass.getClassLoader(),aClass.getProtectionDomain(),aClass.getName());
}","@SuppressWarnings(""String_Node_Str"") boolean isToBeCaptured(@Nonnull Class<?> aClass){
  if (baseType == Object.class) {
    if (aClass.isArray() || mockit.MockUp.class.isAssignableFrom(aClass) || mockit.Delegate.class.isAssignableFrom(aClass)|| mockit.Expectations.class.isAssignableFrom(aClass)|| mockit.Verifications.class.isAssignableFrom(aClass)) {
      return false;
    }
  }
 else   if (aClass == baseType || !baseType.isAssignableFrom(aClass)) {
    return false;
  }
  return !aClass.isInterface() && !isNotToBeCaptured(aClass.getClassLoader(),aClass.getProtectionDomain(),aClass.getName());
}",0.7886639676113361
164739,"@Nullable private static String getReturnTypeIfCascadingSupportedForIt(@Nonnull String typeDesc){
  String typeName=getInternalTypeName(typeDesc);
  return isTypeSupportedForCascading(typeName) ? typeName : null;
}","@Nullable private static String getReturnTypeIfCascadingSupportedForIt(@Nonnull String typeDesc){
  String typeName=typeDesc.substring(1,typeDesc.length() - 1);
  return isTypeSupportedForCascading(typeName) ? typeName : null;
}",0.8778280542986425
164740,"@Nonnull private Type getGenericReturnType(@Nonnull Class<?> cascadingClass,@Nonnull String methodNameAndDesc) throws NoSuchMethodException {
  Method cascadingMethod=new RealMethodOrConstructor(cascadingClass,methodNameAndDesc).getMember();
  Type genericReturnType=cascadingMethod.getGenericReturnType();
  if (genericReturnType instanceof TypeVariable<?>) {
    GenericTypeReflection typeReflection=new GenericTypeReflection(cascadingClass,mockedType);
    genericReturnType=typeReflection.resolveReturnType((TypeVariable<?>)genericReturnType);
  }
  return genericReturnType;
}","@Nonnull private Type getGenericReturnType(@Nonnull Class<?> cascadingClass,@Nonnull String methodNameAndDesc) throws NoSuchMethodException {
  Method cascadingMethod=new RealMethodOrConstructor(cascadingClass,methodNameAndDesc).getMember();
  Type genericReturnType=cascadingMethod.getGenericReturnType();
  if (genericReturnType instanceof TypeVariable<?>) {
    genericReturnType=genericReflection.resolveReturnType((TypeVariable<?>)genericReturnType);
  }
  return genericReturnType;
}",0.8691588785046729
164741,"@Nonnull private static <T>Constructor<T> findCompatibleConstructor(@Nonnull Class<?> theClass,@Nonnull Class<?>[] argTypes){
  Constructor<T> found=null;
  Class<?>[] foundParameters=null;
  Constructor<?>[] declaredConstructors=theClass.getDeclaredConstructors();
  for (  Constructor<?> declaredConstructor : declaredConstructors) {
    Class<?>[] declaredParamTypes=declaredConstructor.getParameterTypes();
    int firstRealParameter=indexOfFirstRealParameter(declaredParamTypes,argTypes);
    if (firstRealParameter >= 0 && (matchesParameterTypes(declaredParamTypes,argTypes,firstRealParameter) || acceptsArgumentTypes(declaredParamTypes,argTypes,firstRealParameter)) && (found == null || hasMoreSpecificTypes(declaredParamTypes,foundParameters))) {
      found=(Constructor<T>)declaredConstructor;
      foundParameters=declaredParamTypes;
    }
  }
  if (found != null) {
    return found;
  }
  Class<?> declaringClass=theClass.getDeclaringClass();
  Class<?>[] paramTypes=declaredConstructors[0].getParameterTypes();
  if (paramTypes[0] == declaringClass && paramTypes.length > argTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String argTypesDesc=getParameterTypesDescription(argTypes);
  throw new IllegalArgumentException(""String_Node_Str"" + theClass.getSimpleName() + argTypesDesc);
}","@Nonnull private static <T>Constructor<T> findCompatibleConstructor(@Nonnull Class<?> theClass,@Nonnull Class<?>[] argTypes){
  Constructor<T> found=null;
  Class<?>[] foundParameters=null;
  Constructor<?>[] declaredConstructors=theClass.getDeclaredConstructors();
  for (  Constructor<?> declaredConstructor : declaredConstructors) {
    Class<?>[] declaredParamTypes=declaredConstructor.getParameterTypes();
    int firstRealParameter=indexOfFirstRealParameter(declaredParamTypes,argTypes);
    if (firstRealParameter >= 0 && (matchesParameterTypes(declaredParamTypes,argTypes,firstRealParameter) || acceptsArgumentTypes(declaredParamTypes,argTypes,firstRealParameter)) && (found == null || hasMoreSpecificTypes(declaredParamTypes,foundParameters))) {
      found=(Constructor<T>)declaredConstructor;
      foundParameters=declaredParamTypes;
    }
  }
  if (found != null) {
    return found;
  }
  Class<?> declaringClass=theClass.getDeclaringClass();
  Class<?>[] paramTypes=declaredConstructors[0].getParameterTypes();
  if (paramTypes.length > argTypes.length && paramTypes[0] == declaringClass) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String argTypesDesc=getParameterTypesDescription(argTypes);
  throw new IllegalArgumentException(""String_Node_Str"" + theClass.getSimpleName() + argTypesDesc);
}",0.9706987227648384
164742,"private boolean generateArgumentsForMockMethodInvocation(){
  Type[] argTypes=Type.getArgumentTypes(mockMethod.mockDescWithoutInvocationParameter);
  int varIndex=isStatic(methodAccess) ? 0 : 1;
  boolean canProceedIntoConstructor=false;
  if (mockMethod.hasInvocationParameter) {
    generateCallToCreateNewMockInvocation(argTypes,varIndex);
    if (isConstructor) {
      mw.visitInsn(mockMethod.isStatic() ? DUP : DUP_X1);
      canProceedIntoConstructor=true;
    }
  }
  boolean forGenericMethod=mockMethod.isForGenericMethod();
  for (  Type argType : argTypes) {
    int opcode=argType.getOpcode(ILOAD);
    mw.visitVarInsn(opcode,varIndex);
    if (forGenericMethod && argType.getSort() >= Type.ARRAY) {
      mw.visitTypeInsn(CHECKCAST,argType.getInternalName());
    }
    varIndex+=argType.getSize();
  }
  return canProceedIntoConstructor;
}","private boolean generateArgumentsForMockMethodInvocation(){
  String mockedDesc=mockMethod.isAdvice ? methodDesc : mockMethod.mockDescWithoutInvocationParameter;
  Type[] argTypes=Type.getArgumentTypes(mockedDesc);
  int varIndex=isStatic(methodAccess) ? 0 : 1;
  boolean canProceedIntoConstructor=false;
  if (mockMethod.hasInvocationParameter) {
    generateCallToCreateNewMockInvocation(argTypes,varIndex);
    if (isConstructor) {
      mw.visitInsn(mockMethod.isStatic() ? DUP : DUP_X1);
      canProceedIntoConstructor=true;
    }
  }
  if (!mockMethod.isAdvice) {
    boolean forGenericMethod=mockMethod.isForGenericMethod();
    for (    Type argType : argTypes) {
      int opcode=argType.getOpcode(ILOAD);
      mw.visitVarInsn(opcode,varIndex);
      if (forGenericMethod && argType.getSort() >= Type.ARRAY) {
        mw.visitTypeInsn(CHECKCAST,argType.getInternalName());
      }
      varIndex+=argType.getSize();
    }
  }
  return canProceedIntoConstructor;
}",0.8932676518883416
164743,"private void generateMethodReturn(){
  if (shouldUseMockingBridge()) {
    generateReturnWithObjectAtTopOfTheStack(methodDesc);
  }
 else {
    Type returnType=Type.getReturnType(methodDesc);
    mw.visitInsn(returnType.getOpcode(IRETURN));
  }
}","private void generateMethodReturn(){
  if (shouldUseMockingBridge() || mockMethod.isAdvice) {
    generateReturnWithObjectAtTopOfTheStack(methodDesc);
  }
 else {
    Type returnType=Type.getReturnType(methodDesc);
    mw.visitInsn(returnType.getOpcode(IRETURN));
  }
}",0.9553398058252428
164744,"@Mock Object $advice(Invocation invocation){
  long startTime=System.nanoTime() / 1000000;
  try {
    return invocation.proceed();
  }
  finally {
    long endTime=System.nanoTime() / 1000000;
    long dt=endTime - startTime;
    Method invokedMethod=invocation.getInvokedMember();
    addMethodExecutionTime(invokedMethod,dt);
  }
}","@Mock public static Object $advice(Invocation inv){
  Object[] args=inv.getInvokedArguments();
  if (args.length > 0) {
    Integer i=(Integer)args[0];
    return -i;
  }
  return null;
}",0.3186180422264875
164745,"@Nullable public static <T>T getFieldValue(@Nonnull Field field,@Nullable Object targetObject){
  Utilities.ensureThatMemberIsAccessible(field);
  try {
    return (T)field.get(targetObject);
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","@Nullable public static <T>T getFieldValue(@Nonnull Field field,@Nullable Object targetObject){
  ensureThatMemberIsAccessible(field);
  try {
    return (T)field.get(targetObject);
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.9814126394052044
164746,"public static void setFieldValue(@Nonnull Field field,@Nullable Object targetObject,@Nullable Object value){
  try {
    if (isStatic(field.getModifiers()) && isFinal(field.getModifiers())) {
      setStaticFinalField(field,value);
    }
 else {
      Utilities.ensureThatMemberIsAccessible(field);
      field.set(targetObject,value);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","public static void setFieldValue(@Nonnull Field field,@Nullable Object targetObject,@Nullable Object value){
  try {
    if (isStatic(field.getModifiers()) && isFinal(field.getModifiers())) {
      setStaticFinalField(field,value);
    }
 else {
      ensureThatMemberIsAccessible(field);
      field.set(targetObject,value);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.9880668257756564
164747,"private static void setStaticFinalField(@Nonnull Field field,@Nullable Object value) throws IllegalAccessException {
  Field modifiersField;
  try {
    modifiersField=Field.class.getDeclaredField(""String_Node_Str"");
  }
 catch (  NoSuchFieldException e) {
    throw new RuntimeException(e);
  }
  modifiersField.setAccessible(true);
  int nonFinalModifiers=modifiersField.getInt(field) - FINAL;
  modifiersField.setInt(field,nonFinalModifiers);
  sun.reflect.FieldAccessor accessor=sun.reflect.ReflectionFactory.getReflectionFactory().newFieldAccessor(field,false);
  accessor.set(null,value);
}","private static void setStaticFinalField(@Nonnull Field field,@Nullable Object value) throws IllegalAccessException {
  int nonFinalModifiers=MODIFIERS_FIELD.getInt(field) - FINAL;
  MODIFIERS_FIELD.setInt(field,nonFinalModifiers);
  ensureThatMemberIsAccessible(field);
  field.set(null,value);
}",0.3744394618834081
164748,"@Test public void setStaticFinalFields(){
  if (!JAVA9) {
    setField(Subclass.class,""String_Node_Str"",54);
    setField(Subclass.class,""String_Node_Str"");
    setField(Subclass.class,true);
    assertEquals(54,getField(Subclass.class,""String_Node_Str""));
    assertEquals(""String_Node_Str"",getField(Subclass.class,String.class));
    assertTrue(getField(Subclass.class,boolean.class));
    assertFalse(Subclass.FLAG);
  }
}","@Test public void setStaticFinalFields() throws Exception {
  setField(Subclass.class,""String_Node_Str"",54);
  setField(Subclass.class,""String_Node_Str"");
  setField(Subclass.class,true);
  assertEquals(54,getField(Subclass.class,""String_Node_Str""));
  assertEquals(""String_Node_Str"",getField(Subclass.class,String.class));
  assertTrue(getField(Subclass.class,boolean.class));
  assertFalse(Subclass.FLAG);
}",0.8633093525179856
164749,"@Override public void visitInnerClass(@Nonnull String internalName,@Nullable String outerName,@Nullable String innerName,int access){
  cw.visitInnerClass(internalName,outerName,innerName,access);
  if (forInnerClass || isSyntheticOrEnumClass(access) || !isNestedInsideClassBeingModified(outerName)) {
    return;
  }
  String innerClassName=internalName.replace('/','.');
  if (INNER_CLASS_MODIFIERS.containsKey(innerClassName)) {
    return;
  }
  ClassReader innerCR=createClassReader(CoverageModifier.class.getClassLoader(),internalName);
  if (innerCR != null) {
    CoverageModifier innerClassModifier=new CoverageModifier(innerCR,this,innerName);
    innerCR.accept(innerClassModifier,SKIP_FRAMES);
    INNER_CLASS_MODIFIERS.put(innerClassName,innerClassModifier);
  }
}","@Override public void visitInnerClass(@Nonnull String internalName,@Nullable String outerName,@Nullable String innerName,int access){
  cw.visitInnerClass(internalName,outerName,innerName,access);
  if (forInnerClass || isSyntheticOrEnumClass(access) || !isNestedInsideClassBeingModified(internalName,outerName)) {
    return;
  }
  String innerClassName=internalName.replace('/','.');
  if (INNER_CLASS_MODIFIERS.containsKey(innerClassName)) {
    return;
  }
  ClassReader innerCR=createClassReader(CoverageModifier.class.getClassLoader(),internalName);
  if (innerCR != null) {
    CoverageModifier innerClassModifier=new CoverageModifier(innerCR,this,innerName);
    innerCR.accept(innerClassModifier,SKIP_FRAMES);
    INNER_CLASS_MODIFIERS.put(innerClassName,innerClassModifier);
  }
}",0.9917038927887684
164750,"private boolean isNestedInsideClassBeingModified(@Nullable String outerName){
  if (outerName == null) {
    return false;
  }
  int p=outerName.indexOf('$');
  String outerClassName=p < 0 ? outerName : outerName.substring(0,p);
  return outerClassName.equals(internalClassName);
}","private boolean isNestedInsideClassBeingModified(@Nonnull String internalName,@Nullable String outerName){
  String className=outerName == null ? internalName : outerName;
  int p=className.indexOf('$');
  String outerClassName=p < 0 ? className : className.substring(0,p);
  return outerClassName.equals(internalClassName);
}",0.7314662273476112
164751,"@Test public void exerciseNestedClasses(){
  ClassWithNestedClasses.doSomething();
  assertEquals(10,fileData.lineCoverageInfo.getExecutableLineCount());
  assertEquals(60,fileData.lineCoverageInfo.getCoveragePercentage());
  assertEquals(10,fileData.lineCoverageInfo.getTotalItems());
  assertEquals(6,fileData.lineCoverageInfo.getCoveredItems());
  findMethodData(27);
  assertMethodLines(27,33);
  assertPaths(2,1,1);
  assertPath(4,0);
  assertPath(5,1);
  assertEquals(5,fileData.pathCoverageInfo.firstLineToMethodData.size());
  assertEquals(50,fileData.pathCoverageInfo.getCoveragePercentage());
  assertEquals(6,fileData.pathCoverageInfo.getTotalItems());
  assertEquals(3,fileData.pathCoverageInfo.getCoveredItems());
}","@Test public void exerciseNestedClasses(){
  ClassWithNestedClasses.doSomething();
  ClassWithNestedClasses.methodContainingAnonymousClass(1);
  assertEquals(12,fileData.lineCoverageInfo.getExecutableLineCount());
  assertEquals(64,fileData.lineCoverageInfo.getCoveragePercentage());
  assertEquals(14,fileData.lineCoverageInfo.getTotalItems());
  assertEquals(9,fileData.lineCoverageInfo.getCoveredItems());
  findMethodData(27);
  assertMethodLines(27,33);
  assertPaths(2,1,1);
  assertPath(4,0);
  assertPath(5,1);
  assertEquals(6,fileData.pathCoverageInfo.firstLineToMethodData.size());
  assertEquals(57,fileData.pathCoverageInfo.getCoveragePercentage());
  assertEquals(7,fileData.pathCoverageInfo.getTotalItems());
  assertEquals(4,fileData.pathCoverageInfo.getCoveredItems());
}",0.7467018469656992
164752,"@Override boolean hasEquivalentMatchers(@Nonnull ArgumentValuesAndMatchers other){
  int i=indexOfFirstValueAfterEquivalentMatchers(other);
  if (i < 0) {
    return false;
  }
  VarargsComparison varargsComparison=new VarargsComparison(other.values);
  int n=varargsComparison.getTotalArgumentCountWhenDifferent();
  if (n < 0) {
    return false;
  }
  while (i < n) {
    Object thisArg=varargsComparison.getThisArgument(i);
    Object otherArg=varargsComparison.getOtherArgument(i);
    if (!EqualityMatcher.areEqual(thisArg,otherArg)) {
      return false;
    }
    i++;
  }
  return true;
}","@Override boolean hasEquivalentMatchers(@Nonnull ArgumentValuesAndMatchers other){
  @SuppressWarnings(""String_Node_Str"") int i=indexOfFirstValueAfterEquivalentMatchers(other);
  if (i < 0) {
    return false;
  }
  VarargsComparison varargsComparison=new VarargsComparison(other.values);
  int n=varargsComparison.getTotalArgumentCountWhenDifferent();
  if (n < 0) {
    return false;
  }
  while (i < n) {
    Object thisArg=varargsComparison.getThisArgument(i);
    Object otherArg=varargsComparison.getOtherArgument(i);
    if (!EqualityMatcher.areEqual(thisArg,otherArg)) {
      return false;
    }
    i++;
  }
  return true;
}",0.9699431356620634
164753,"@Override boolean isMatch(@Nonnull Object[] replayArgs,@Nonnull Map<Object,Object> instanceMap){
  if (matchers == null) {
    return areEqual(replayArgs,instanceMap);
  }
  VarargsComparison varargsComparison=new VarargsComparison(replayArgs);
  int n=varargsComparison.getTotalArgumentCountWhenDifferent();
  if (n < 0) {
    return false;
  }
  for (int i=0; i < n; i++) {
    Object actual=varargsComparison.getOtherArgument(i);
    ArgumentMatcher<?> expected=getArgumentMatcher(i);
    if (expected == null) {
      Object arg=varargsComparison.getThisArgument(i);
      if (arg == null)       continue;
      expected=new LenientEqualityMatcher(arg,instanceMap);
    }
    if (!expected.matches(actual)) {
      return false;
    }
  }
  return true;
}","@Override boolean isMatch(@Nonnull Object[] replayArgs,@Nonnull Map<Object,Object> instanceMap){
  if (matchers == null) {
    return areEqual(replayArgs,instanceMap);
  }
  VarargsComparison varargsComparison=new VarargsComparison(replayArgs);
  int totalArgCount=varargsComparison.getTotalArgumentCountWhenDifferent();
  int regularArgCount=varargsComparison.regularArgCount;
  if (totalArgCount < 0) {
    return false;
  }
  for (int i=0; i < totalArgCount; i++) {
    Object actual=varargsComparison.getOtherArgument(i);
    ArgumentMatcher<?> expected=getArgumentMatcher(i);
    if (expected == null) {
      Object arg=varargsComparison.getThisArgument(i);
      if (arg == null)       continue;
      expected=new LenientEqualityMatcher(arg,instanceMap);
    }
 else     if (i == regularArgCount && expected instanceof CaptureMatcher<?>) {
      actual=varargsComparison.getOtherVarArgs();
      i=totalArgCount;
    }
    if (!expected.matches(actual)) {
      return false;
    }
  }
  return true;
}",0.851328434143584
164754,"@Nullable public Class<?> findClassAlreadyMocked(@Nonnull Class<?> targetClass){
  return findClassAssignableFrom(mockedClasses,targetClass);
}","@Nullable public Class<?> findClassAlreadyMocked(@Nonnull Class<?> targetClass){
  int n=mockedClasses.size();
  for (int i=0; i < n; i++) {
    Class<?> mockedClass=mockedClasses.get(i);
    if (mockedClass == targetClass || !mockedClass.isInterface() && mockedClass.isAssignableFrom(targetClass)) {
      return mockedClass;
    }
  }
  return null;
}",0.4112903225806452
164755,"public boolean isInstanceOfMockedClass(@Nonnull Object mockedInstance){
  Class<?> mockedClass=mockedInstance.getClass();
  return findClassAlreadyMocked(mockedClass) != null;
}","public boolean isInstanceOfMockedClass(@Nonnull Object mockedInstance){
  Class<?> mockedClass=mockedInstance.getClass();
  return findClassAssignableFrom(mockedClasses,mockedClass) != null;
}",0.926829268292683
164756,"@Override public void run(){
  task.doIt();
}","@Override public void run(){
}",0.8
164757,"@Test public void dynamicMockFullyVerified_verifyAllRecordedExpectationsButNotAllOfTheReplayedOnes(){
  final Collaborator collaborator=new Collaborator(0);
  new Expectations(collaborator){
{
      collaborator.setValue(1);
    }
  }
;
  collaborator.setValue(1);
  collaborator.setValue(2);
  new FullVerifications(){
{
    }
  }
;
}","@Test public void dynamicMockFullyVerified_verifyAllRecordedExpectationsButNotAllOfTheReplayedOnes(){
  final Collaborator collaborator=new Collaborator(0);
  new Expectations(collaborator){
{
      collaborator.setValue(1);
    }
  }
;
  collaborator.setValue(1);
  collaborator.setValue(2);
  new FullVerifications(){
  }
;
}",0.9818731117824774
164758,"boolean isSelected(@Nonnull String className,@Nonnull ProtectionDomain protectionDomain){
  CodeSource codeSource=protectionDomain.getCodeSource();
  if (codeSource == null || isIneligibleForSelection(className) || !canAccessJMockitFromClassToBeMeasured(protectionDomain)) {
    return false;
  }
  URL location=findLocationInCodeSource(className,protectionDomain);
  if (location == null) {
    return false;
  }
  if (configurationRead) {
    if (isClassExcludedFromCoverage(className)) {
      return false;
    }
 else     if (classesToInclude != null) {
      return classesToInclude.reset(className).matches();
    }
  }
  return !isClassFromExternalLibrary(location);
}","boolean isSelected(@Nonnull String className,@Nonnull ProtectionDomain protectionDomain){
  CodeSource codeSource=protectionDomain.getCodeSource();
  if (codeSource == null || isIneligibleForSelection(className) || !canAccessJMockitFromClassToBeMeasured(protectionDomain)) {
    return false;
  }
  URL location=findLocationInCodeSource(className,protectionDomain);
  if (location == null) {
    return false;
  }
  if (!configurationRead) {
    readConfiguration();
  }
  if (isClassExcludedFromCoverage(className)) {
    return false;
  }
 else   if (classesToInclude != null) {
    return classesToInclude.reset(className).matches();
  }
  return !isClassFromExternalLibrary(location);
}",0.9487554904831624
164759,"private boolean isClassFromExternalLibrary(@Nonnull URL location){
  if (""String_Node_Str"".equals(location.getProtocol())) {
    return true;
  }
  String path=location.getPath();
  if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"") || testCode != null && (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str""))) {
    return true;
  }
  if (!configurationRead) {
    readConfiguration();
  }
  return false;
}","private boolean isClassFromExternalLibrary(@Nonnull URL location){
  if (""String_Node_Str"".equals(location.getProtocol())) {
    return true;
  }
  String path=location.getPath();
  return path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"") || testCode != null && (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str""));
}",0.8664169787765293
164760,"private static int getSumOfArgumentSizes(@Nonnull String memberDesc){
  int sum=0;
  int i=1;
  while (true) {
    char c=memberDesc.charAt(i);
    i++;
    if (c == ')') {
      return sum;
    }
    if (c == 'L') {
      while (memberDesc.charAt(i) != ';')       i++;
      sum++;
    }
 else     if (c == '[') {
      while ((c=memberDesc.charAt(i)) == '[')       i++;
      if (isDoubleSizeType(c)) {
        i++;
        sum++;
      }
    }
 else     if (isDoubleSizeType(c)) {
      sum+=2;
    }
 else {
      sum++;
    }
  }
}","private static int getSumOfArgumentSizes(@Nonnull String memberDesc){
  int sum=0;
  int i=1;
  while (true) {
    char c=memberDesc.charAt(i);
    i++;
    if (c == ')') {
      return sum;
    }
    if (c == 'L') {
      while (memberDesc.charAt(i) != ';')       i++;
      i++;
      sum++;
    }
 else     if (c == '[') {
      while ((c=memberDesc.charAt(i)) == '[')       i++;
      if (isDoubleSizeType(c)) {
        i++;
        sum++;
      }
    }
 else     if (isDoubleSizeType(c)) {
      sum+=2;
    }
 else {
      sum++;
    }
  }
}",0.989843028624192
164761,"private void assertFieldsSetByTheConstructor(){
  assertEquals(123,tested1.i);
  assertEquals(""String_Node_Str"",tested1.name);
  assertNull(tested1.action1);
  assertEquals(45,tested2.i);
  assertEquals(""String_Node_Str"",tested2.name);
  assertNotNull(tested2.action1);
  assertNotSame(action,tested2.action1);
}","void assertFieldsSetByTheConstructor(){
  assertEquals(123,tested1.i);
  assertEquals(""String_Node_Str"",tested1.name);
  assertNull(tested1.action1);
  assertEquals(45,tested2.i);
  assertEquals(""String_Node_Str"",tested2.name);
  assertNotNull(tested2.action1);
  assertNotSame(action,tested2.action1);
}",0.987012987012987
164762,"private void assertFieldsSetThroughFieldInjectionFromInjectableFields(){
  assertSame(action,tested1.action2);
  assertEquals(-67,tested1.i2);
  assertEquals(""String_Node_Str"",tested1.text);
  assertSame(action,tested2.action2);
  assertEquals(-67,tested2.i2);
  assertEquals(""String_Node_Str"",tested2.text);
  assertEquals(asList(""String_Node_Str"",""String_Node_Str""),tested1.names);
  assertSame(tested1.names,tested2.names);
}","void assertFieldsSetThroughFieldInjectionFromInjectableFields(){
  assertSame(action,tested1.action2);
  assertEquals(-67,tested1.i2);
  assertEquals(""String_Node_Str"",tested1.text);
  assertSame(action,tested2.action2);
  assertEquals(-67,tested2.i2);
  assertEquals(""String_Node_Str"",tested2.text);
  assertEquals(asList(""String_Node_Str"",""String_Node_Str""),tested1.names);
  assertSame(tested1.names,tested2.names);
}",0.9905660377358492
164763,"ConstructorSearch(@Nonnull InjectionState injectionState,@Nonnull Class<?> testedClass,boolean withFullInjection){
  this.injectionState=injectionState;
  this.testedClass=testedClass;
  Class<?> declaredClass=isGeneratedClass(testedClass.getName()) ? testedClass.getSuperclass() : testedClass;
  testedClassDesc=new ParameterNameExtractor(false).extractNames(declaredClass);
  parameterProviders=new ArrayList<InjectionPointProvider>();
  this.withFullInjection=withFullInjection;
}","ConstructorSearch(@Nonnull InjectionState injectionState,@Nonnull Class<?> testedClass,boolean withFullInjection){
  this.injectionState=injectionState;
  this.testedClass=testedClass;
  Class<?> declaredClass=isGeneratedClass(testedClass.getName()) ? testedClass.getSuperclass() : testedClass;
  testedClassDesc=new ParameterNameExtractor().extractNames(declaredClass);
  parameterProviders=new ArrayList<InjectionPointProvider>();
  this.withFullInjection=withFullInjection;
}",0.9947970863683664
164764,"ParameterNameExtractor(boolean forMethods){
  this.forMethods=forMethods;
  classDesc=memberName=memberDesc=""String_Node_Str"";
}","ParameterNameExtractor(){
  classDesc=memberName=memberDesc=""String_Node_Str"";
}",0.7692307692307693
164765,"@Nullable @Override public MethodVisitor visitMethod(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ACC_SYNTHETIC) == 0) {
    boolean visitingAMethod=name.charAt(0) != '<';
    if (visitingAMethod == forMethods) {
      memberAccess=access;
      memberName=name;
      memberDesc=desc;
      return new MethodOrConstructorVisitor();
    }
  }
  return null;
}","@Nullable @Override public MethodVisitor visitMethod(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ACC_SYNTHETIC) == 0) {
    memberAccess=access;
    memberName=name;
    memberDesc=desc;
    return new MethodOrConstructorVisitor();
  }
  return null;
}",0.7249357326478149
164766,"@Nonnull public Collection<MethodCoverageData> getMethods(){
  return pathCoverageInfo.firstLineToMethodData.values();
}","@Nonnull public Collection<MethodCoverageData> getMethods(){
  List<MethodCoverageData> methods=new ArrayList<MethodCoverageData>(pathCoverageInfo.firstLineToMethodData.values());
  Collections.sort(methods,new Comparator<MethodCoverageData>(){
    @Override public int compare(    MethodCoverageData m1,    MethodCoverageData m2){
      int l1=m1.getFirstLineInBody();
      int l2=m2.getFirstLineInBody();
      if (l1 == l2) {
        return 0;
      }
      return l1 < l2 ? -1 : 1;
    }
  }
);
  return methods;
}",0.3474178403755869
164767,"public void mergeInformation(@Nonnull PerFilePathCoverage previousCoverage){
  Map<Integer,MethodCoverageData> previousInfo=previousCoverage.firstLineToMethodData;
  for (  Map.Entry<Integer,MethodCoverageData> firstLineAndInfo : firstLineToMethodData.entrySet()) {
    Integer firstLine=firstLineAndInfo.getKey();
    MethodCoverageData previousPathInfo=previousInfo.get(firstLine);
    if (previousPathInfo != null) {
      MethodCoverageData pathInfo=firstLineAndInfo.getValue();
      pathInfo.addCountsFromPreviousTestRun(previousPathInfo);
    }
  }
  for (  Map.Entry<Integer,MethodCoverageData> firstLineAndInfo : previousInfo.entrySet()) {
    Integer firstLine=firstLineAndInfo.getKey();
    if (!firstLineToMethodData.containsKey(firstLine)) {
      firstLineToMethodData.put(firstLine,firstLineAndInfo.getValue());
    }
  }
}","public void mergeInformation(@Nonnull PerFilePathCoverage previousCoverage){
  Map<Integer,MethodCoverageData> previousInfo=previousCoverage.firstLineToMethodData;
  addExecutionCountsFromPreviousTestRun(previousInfo);
  addPathInfoFromPreviousTestRunForMethodsNotExecutedInCurrentTestRun(previousInfo);
}",0.3202099737532808
164768,"public void addMethod(@Nonnull MethodCoverageData methodData){
  firstLineToMethodData.put(methodData.getFirstLineInBody(),methodData);
}","public void addMethod(@Nonnull MethodCoverageData methodData){
  int firstLineInBody=methodData.getFirstLineInBody();
  firstLineToMethodData.put(firstLineInBody,methodData);
}",0.7795527156549521
164769,"public static void doSomething(){
  new NestedClass.DeeplyNestedClass().print(""String_Node_Str"");
}","public static void doSomething(){
  new NestedClass.DeeplyNestedClass().print(""String_Node_Str"");
  if (System.out != null) {
    System.out.println(""String_Node_Str"");
  }
}",0.7252747252747253
164770,"@Test public void exerciseNestedClasses(){
  ClassWithNestedClasses.doSomething();
  assertEquals(8,fileData.lineCoverageInfo.getExecutableLineCount());
  assertEquals(50,fileData.lineCoverageInfo.getCoveragePercentage());
  assertEquals(8,fileData.lineCoverageInfo.getTotalItems());
  assertEquals(4,fileData.lineCoverageInfo.getCoveredItems());
  assertEquals(5,fileData.pathCoverageInfo.firstLineToMethodData.size());
  assertEquals(60,fileData.pathCoverageInfo.getCoveragePercentage());
  assertEquals(5,fileData.pathCoverageInfo.getTotalItems());
  assertEquals(3,fileData.pathCoverageInfo.getCoveredItems());
}","@Test public void exerciseNestedClasses(){
  ClassWithNestedClasses.doSomething();
  assertEquals(10,fileData.lineCoverageInfo.getExecutableLineCount());
  assertEquals(60,fileData.lineCoverageInfo.getCoveragePercentage());
  assertEquals(10,fileData.lineCoverageInfo.getTotalItems());
  assertEquals(6,fileData.lineCoverageInfo.getCoveredItems());
  findMethodData(27);
  assertMethodLines(27,33);
  assertPaths(2,1,1);
  assertPath(4,0);
  assertPath(5,1);
  assertEquals(5,fileData.pathCoverageInfo.firstLineToMethodData.size());
  assertEquals(50,fileData.pathCoverageInfo.getCoveragePercentage());
  assertEquals(6,fileData.pathCoverageInfo.getTotalItems());
  assertEquals(3,fileData.pathCoverageInfo.getCoveredItems());
}",0.4657738095238095
164771,"@Override protected void generateMethodBody(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  String resolvedSignature=signature;
  if (signature != null) {
    resolvedSignature=mockedTypeInfo.genericTypeMap.resolveReturnType(signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,resolvedSignature,exceptions);
  generateDirectCallToHandler(mw,interfaceName,access,name,desc,resolvedSignature);
  generateReturnWithObjectAtTopOfTheStack(desc);
  mw.visitMaxs(1,0);
}","@Override protected void generateMethodBody(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  String resolvedSignature=signature;
  if (signature != null) {
    resolvedSignature=mockedTypeInfo.genericTypeMap.resolveReturnType(interfaceName,signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,resolvedSignature,exceptions);
  generateDirectCallToHandler(mw,interfaceName,access,name,desc,resolvedSignature);
  generateReturnWithObjectAtTopOfTheStack(desc);
  mw.visitMaxs(1,0);
}",0.9870609981515712
164772,"@Override @SuppressWarnings(""String_Node_Str"") protected void generateMethodImplementation(@Nonnull String className,int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if (signature != null && mockedTypeInfo != null) {
    signature=mockedTypeInfo.genericTypeMap.resolveReturnType(signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,signature,exceptions);
  if (ObjectMethods.isMethodFromObject(name,desc)) {
    generateEmptyImplementation(desc);
  }
 else {
    generateDirectCallToHandler(mw,className,access,name,desc,signature);
    generateReturnWithObjectAtTopOfTheStack(desc);
    mw.visitMaxs(1,0);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") protected void generateMethodImplementation(@Nonnull String className,int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if (signature != null && mockedTypeInfo != null) {
    signature=mockedTypeInfo.genericTypeMap.resolveReturnType(className,signature);
  }
  mw=cw.visitMethod(ACC_PUBLIC,name,desc,signature,exceptions);
  if (ObjectMethods.isMethodFromObject(name,desc)) {
    generateEmptyImplementation(desc);
  }
 else {
    generateDirectCallToHandler(mw,className,access,name,desc,signature);
    generateReturnWithObjectAtTopOfTheStack(desc);
    mw.visitMaxs(1,0);
  }
}",0.9927113702623906
164773,"@Nonnull public Type resolveReturnType(@Nonnull TypeVariable<?> typeVariable){
  Type typeArgument=typeParametersToTypeArguments.get(typeVariable.getName());
  if (typeArgument == null) {
    typeArgument=typeVariable.getBounds()[0];
  }
  if (typeArgument instanceof TypeVariable<?>) {
    typeArgument=resolveReturnType((TypeVariable<?>)typeArgument);
  }
  return typeArgument;
}","@Nonnull public Type resolveReturnType(@Nonnull TypeVariable<?> typeVariable){
  String typeVarKey=getTypeVariableKey(typeVariable);
  Type typeArgument=typeParametersToTypeArguments.get(typeVarKey);
  if (typeArgument == null) {
    typeArgument=typeVariable.getBounds()[0];
  }
  if (typeArgument instanceof TypeVariable<?>) {
    typeArgument=resolveReturnType((TypeVariable<?>)typeArgument);
  }
  return typeArgument;
}",0.9106699751861044
164774,"@Nonnull private Class<?> getClassType(@Nonnull Type type){
  if (type instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    return (Class<?>)parameterizedType.getRawType();
  }
 else   if (type instanceof TypeVariable<?>) {
    TypeVariable<?> typeVar=(TypeVariable<?>)type;
    String typeVarName=typeVar.getName();
    Type typeArg=typeParametersToTypeArguments.get(typeVarName);
    if (typeArg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + typeVarName + '""');
    }
    return getClassType(typeArg);
  }
  return (Class<?>)type;
}","@Nonnull private Class<?> getClassType(@Nonnull Type type){
  if (type instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    return (Class<?>)parameterizedType.getRawType();
  }
 else   if (type instanceof TypeVariable<?>) {
    TypeVariable<?> typeVar=(TypeVariable<?>)type;
    String typeVarKey=getTypeVariableKey(typeVar);
    Type typeArg=typeParametersToTypeArguments.get(typeVarKey);
    if (typeArg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + typeVar.getName() + '""');
    }
    return getClassType(typeArg);
  }
  return (Class<?>)type;
}",0.8569105691056911
164775,"@Nonnull private String replaceTypeParametersWithActualTypes(@Nonnull String typeDesc){
  if (typeDesc.charAt(0) == 'T') {
    String typeParameter=typeDesc.substring(0,typeDesc.length() - 1);
    String typeArg=typeParametersToTypeArgumentNames.get(typeParameter);
    return typeArg == null ? typeDesc : typeArg + ';';
  }
  int p=typeDesc.indexOf('<');
  if (p < 0) {
    return typeDesc;
  }
  String resolvedTypeDesc=typeDesc;
  for (  Entry<String,String> paramAndArg : typeParametersToTypeArgumentNames.entrySet()) {
    String typeParam=paramAndArg.getKey() + ';';
    String typeArg=paramAndArg.getValue() + ';';
    resolvedTypeDesc=resolvedTypeDesc.replace(typeParam,typeArg);
  }
  return resolvedTypeDesc;
}","@Nonnull private String replaceTypeParametersWithActualTypes(@Nonnull String ownerTypeDesc,@Nonnull String typeDesc){
  if (typeDesc.charAt(0) == 'T') {
    String typeParameter=typeDesc.substring(0,typeDesc.length() - 1);
    String typeArg=typeParametersToTypeArgumentNames.get(ownerTypeDesc + ':' + typeParameter);
    return typeArg == null ? typeDesc : typeArg + ';';
  }
  int p=typeDesc.indexOf('<');
  if (p < 0) {
    return typeDesc;
  }
  String resolvedTypeDesc=typeDesc;
  for (  Entry<String,String> paramAndArg : typeParametersToTypeArgumentNames.entrySet()) {
    String typeMappingKey=paramAndArg.getKey();
    String typeParam=typeMappingKey.substring(typeMappingKey.indexOf(':') + 1) + ';';
    String typeArg=paramAndArg.getValue() + ';';
    resolvedTypeDesc=resolvedTypeDesc.replace(typeParam,typeArg);
  }
  return resolvedTypeDesc;
}",0.891566265060241
164776,"private boolean areParametersOfSameType(@Nonnull String param1,@Nonnull String param2){
  if (param1.equals(param2))   return true;
  int i=-1;
  char c;
  do {
    i++;
    c=param1.charAt(i);
  }
 while (c == '[');
  if (c != 'T')   return false;
  String typeArg1=typeParametersToTypeArgumentNames.get(param1.substring(i));
  return param2.substring(i).equals(typeArg1);
}","private boolean areParametersOfSameType(@Nonnull String param1,@Nonnull String param2){
  if (param1.equals(param2))   return true;
  int i=-1;
  char c;
  do {
    i++;
    c=param1.charAt(i);
  }
 while (c == '[');
  if (c != 'T')   return false;
  String typeVarName1=param1.substring(i);
  String typeVarName2=param2.substring(i);
  String typeArg1=null;
  for (  Entry<String,String> typeParamAndArgName : typeParametersToTypeArgumentNames.entrySet()) {
    String typeMappingKey=typeParamAndArgName.getKey();
    String typeVarName=typeMappingKey.substring(typeMappingKey.indexOf(':') + 1);
    if (typeVarName.equals(typeVarName1)) {
      typeArg1=typeParamAndArgName.getValue();
      break;
    }
  }
  return typeVarName2.equals(typeArg1);
}",0.5820763087843833
164777,"private void addMappingsFromTypeParametersToTypeArguments(@Nonnull Class<?> mockedClass,@Nonnull ParameterizedType mockedType){
  TypeVariable<?>[] typeParameters=mockedClass.getTypeParameters();
  Type[] typeArguments=mockedType.getActualTypeArguments();
  int n=typeParameters.length;
  for (int i=0; i < n; i++) {
    TypeVariable<?> typeParam=typeParameters[i];
    String typeVarName=typeParam.getName();
    if (typeParametersToTypeArguments.containsKey(typeVarName)) {
      continue;
    }
    Type typeArg=typeArguments[i];
    Type mappedTypeArg;
    String mappedTypeArgName=null;
    if (typeArg instanceof Class<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        mappedTypeArgName='L' + ((Class<?>)typeArg).getName().replace('.','/');
      }
    }
 else     if (typeArg instanceof TypeVariable<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        String intermediateTypeArg='T' + ((TypeVariable<?>)typeArg).getName();
        mappedTypeArgName=typeParametersToTypeArgumentNames.get(intermediateTypeArg);
      }
    }
 else {
      mappedTypeArg=typeParam.getBounds()[0];
      if (withSignatures) {
        mappedTypeArgName='L' + getClassType(mappedTypeArg).getName().replace('.','/');
      }
    }
    addTypeMapping(typeVarName,mappedTypeArg,mappedTypeArgName);
  }
}","private void addMappingsFromTypeParametersToTypeArguments(@Nonnull Class<?> mockedClass,@Nonnull ParameterizedType mockedType){
  String ownerTypeDesc=mockedClass.getName().replace('.','/');
  TypeVariable<?>[] typeParameters=mockedClass.getTypeParameters();
  Type[] typeArguments=mockedType.getActualTypeArguments();
  int n=typeParameters.length;
  for (int i=0; i < n; i++) {
    TypeVariable<?> typeParam=typeParameters[i];
    String typeVarName=typeParam.getName();
    if (typeParametersToTypeArguments.containsKey(ownerTypeDesc + ':' + typeVarName)) {
      continue;
    }
    Type typeArg=typeArguments[i];
    Type mappedTypeArg;
    String mappedTypeArgName=null;
    if (typeArg instanceof Class<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        mappedTypeArgName='L' + ((Class<?>)typeArg).getName().replace('.','/');
      }
    }
 else     if (typeArg instanceof TypeVariable<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        TypeVariable<?> typeVar=(TypeVariable<?>)typeArg;
        String ownerClassDesc=getOwnerClassDesc(typeVar);
        String intermediateTypeArg=ownerClassDesc + ""String_Node_Str"" + typeVar.getName();
        mappedTypeArgName=typeParametersToTypeArgumentNames.get(intermediateTypeArg);
      }
    }
 else {
      mappedTypeArg=typeParam.getBounds()[0];
      if (withSignatures) {
        mappedTypeArgName='L' + getClassType(mappedTypeArg).getName().replace('.','/');
      }
    }
    addTypeMapping(ownerTypeDesc,typeVarName,mappedTypeArg,mappedTypeArgName);
  }
}",0.8904347826086957
164778,"private boolean areMatchingTypeArguments(@Nonnull TypeVariable<?> declaredType,@Nonnull Type concreteType){
  Type resolvedType=typeParametersToTypeArguments.get(declaredType.getName());
  if (resolvedType != null) {
    if (resolvedType.equals(concreteType)) {
      return true;
    }
    if (concreteType instanceof Class<?> && typeSatisfiesResolvedTypeVariable(resolvedType,(Class<?>)concreteType)) {
      return true;
    }
    if (concreteType instanceof WildcardType && typeSatisfiesUpperBounds(resolvedType,((WildcardType)concreteType).getUpperBounds())) {
      return true;
    }
  }
 else   if (typeSatisfiesUpperBounds(concreteType,declaredType.getBounds())) {
    return true;
  }
  return false;
}","private boolean areMatchingTypeArguments(@Nonnull TypeVariable<?> declaredType,@Nonnull Type concreteType){
  String typeVarKey=getTypeVariableKey(declaredType);
  Type resolvedType=typeParametersToTypeArguments.get(typeVarKey);
  if (resolvedType != null) {
    if (resolvedType.equals(concreteType)) {
      return true;
    }
    if (concreteType instanceof Class<?> && typeSatisfiesResolvedTypeVariable(resolvedType,(Class<?>)concreteType)) {
      return true;
    }
    if (concreteType instanceof WildcardType && typeSatisfiesUpperBounds(resolvedType,((WildcardType)concreteType).getUpperBounds())) {
      return true;
    }
  }
 else   if (typeSatisfiesUpperBounds(concreteType,declaredType.getBounds())) {
    return true;
  }
  return false;
}",0.941336971350614
164779,"private void addTypeArgumentsIfAvailable(@Nonnull String signature){
  int firstParen=signature.indexOf('(');
  if (firstParen == 0)   return;
  int p=1;
  boolean lastMappingFound=false;
  while (!lastMappingFound) {
    int q=signature.indexOf(':',p);
    String typeVar=signature.substring(p,q);
    q++;
    if (signature.charAt(q) == ':') {
      q++;
    }
    int r=signature.indexOf(':',q);
    if (r < 0) {
      r=firstParen - 2;
      lastMappingFound=true;
    }
 else {
      r=signature.lastIndexOf(';',r);
      p=r + 1;
    }
    String typeArg=signature.substring(q,r);
    addTypeMapping(typeVar,typeArg);
  }
}","private void addTypeArgumentsIfAvailable(@Nonnull String ownerTypeDesc,@Nonnull String signature){
  int firstParen=signature.indexOf('(');
  if (firstParen == 0)   return;
  int p=1;
  boolean lastMappingFound=false;
  while (!lastMappingFound) {
    int q=signature.indexOf(':',p);
    String typeVar=signature.substring(p,q);
    q++;
    if (signature.charAt(q) == ':') {
      q++;
    }
    int r=signature.indexOf(':',q);
    if (r < 0) {
      r=firstParen - 2;
      lastMappingFound=true;
    }
 else {
      r=signature.lastIndexOf(';',r);
      p=r + 1;
    }
    String typeArg=signature.substring(q,r);
    addTypeMapping(ownerTypeDesc,typeVar,typeArg);
  }
}",0.9662058371735792
164780,"private void addTypeMapping(@Nonnull String typeVarName,@Nonnull String mappedTypeArgName){
  typeParametersToTypeArgumentNames.put('T' + typeVarName,mappedTypeArgName);
}","private void addTypeMapping(@Nonnull String ownerTypeDesc,@Nonnull String typeVarName,@Nonnull String mappedTypeArgName){
  String typeMappingKey=ownerTypeDesc + ""String_Node_Str"" + typeVarName;
  typeParametersToTypeArgumentNames.put(typeMappingKey,mappedTypeArgName);
}",0.6968325791855203
164781,"int doSomething(){
  return 1;
}","<T extends Bar>T doSomething(){
  return null;
}",0.725
164782,"private void useCascadedMock(@Nullable TestOnlyPhase phase,@Nullable Object cascadedMock){
  if (cascadedMock != null) {
    if (phase != null) {
      phase.setNextInstanceToMatch(cascadedMock);
    }
    defaultReturnValue=cascadedMock;
  }
}","private void useCascadedMock(@Nullable TestOnlyPhase phase,@Nullable Object cascadedMock){
  if (cascadedMock != null) {
    if (phase != null && !TestRun.getExecutingTest().isRegularMockedInstance(cascadedMock)) {
      phase.setNextInstanceToMatch(cascadedMock);
    }
    defaultReturnValue=cascadedMock;
  }
}",0.8761220825852782
164783,"@Nullable private List<MockedType> findAvailableInjectablesForConstructor(@Nonnull Constructor<?> candidate){
  Type[] parameterTypes=candidate.getGenericParameterTypes();
  int n=parameterTypes.length;
  List<MockedType> injectablesFound=new ArrayList<MockedType>(n);
  boolean varArgs=candidate.isVarArgs();
  if (varArgs) {
    n--;
  }
  printCandidateConstructorNameIfRequested(candidate);
  String constructorDesc=""String_Node_Str"" + mockit.external.asm.Type.getConstructorDescriptor(candidate);
  for (int i=0; i < n; i++) {
    injectionState.setTypeOfInjectionPoint(parameterTypes[i]);
    String parameterName=ParameterNames.getName(testedClassDesc,constructorDesc,i);
    MockedType injectable=parameterName == null ? null : injectionState.findInjectableByTypeAndOptionallyName(parameterName);
    if (injectable == null || injectablesFound.contains(injectable)) {
      printParameterOfCandidateConstructorIfRequested(parameterName,injectable);
      return null;
    }
    injectablesFound.add(injectable);
  }
  if (varArgs) {
    MockedType injectable=hasInjectedValuesForVarargsParameter(parameterTypes,n);
    if (injectable != null) {
      injectablesFound.add(injectable);
    }
  }
  return injectablesFound;
}","@Nullable private List<MockedType> findAvailableInjectablesForConstructor(@Nonnull Constructor<?> candidate){
  Type[] parameterTypes=candidate.getGenericParameterTypes();
  int n=parameterTypes.length;
  List<MockedType> injectablesFound=new ArrayList<MockedType>(n);
  boolean varArgs=candidate.isVarArgs();
  if (varArgs) {
    n--;
  }
  printCandidateConstructorNameIfRequested(candidate);
  String constructorDesc=""String_Node_Str"" + mockit.external.asm.Type.getConstructorDescriptor(candidate);
  for (int i=0; i < n; i++) {
    Type parameterType=parameterTypes[i];
    injectionState.setTypeOfInjectionPoint(parameterType);
    String parameterName=ParameterNames.getName(testedClassDesc,constructorDesc,i);
    MockedType injectable=parameterName == null ? null : injectionState.findInjectableByTypeAndOptionallyName(parameterName);
    if (injectable == null || injectablesFound.contains(injectable)) {
      printParameterOfCandidateConstructorIfRequested(parameterName,injectable);
      return null;
    }
    injectablesFound.add(injectable);
  }
  if (varArgs) {
    MockedType injectable=hasInjectedValuesForVarargsParameter(parameterTypes,n);
    if (injectable != null) {
      injectablesFound.add(injectable);
    }
  }
  return injectablesFound;
}",0.9816
164784,"boolean isSelected(@Nonnull String className,@Nonnull ProtectionDomain protectionDomain){
  CodeSource codeSource=protectionDomain.getCodeSource();
  if (codeSource == null || isIneligibleForSelection(className) || !canAccessJMockitFromClassToBeMeasured(protectionDomain) || !hasLocationInCodeSource(className,protectionDomain)) {
    return false;
  }
  if (configurationRead) {
    if (isClassExcludedFromCoverage(className)) {
      return false;
    }
 else     if (classesToInclude != null) {
      return classesToInclude.reset(className).matches();
    }
  }
  return !isClassFromExternalLibrary(codeSource);
}","boolean isSelected(@Nonnull String className,@Nonnull ProtectionDomain protectionDomain){
  CodeSource codeSource=protectionDomain.getCodeSource();
  if (codeSource == null || isIneligibleForSelection(className) || !canAccessJMockitFromClassToBeMeasured(protectionDomain)) {
    return false;
  }
  URL location=findLocationInCodeSource(className,protectionDomain);
  if (location == null) {
    return false;
  }
  if (configurationRead) {
    if (isClassExcludedFromCoverage(className)) {
      return false;
    }
 else     if (classesToInclude != null) {
      return classesToInclude.reset(className).matches();
    }
  }
  return !isClassFromExternalLibrary(location);
}",0.9265274555297756
164785,"private boolean isClassFromExternalLibrary(@Nonnull CodeSource codeSource){
  URL location=codeSource.getLocation();
  if (""String_Node_Str"".equals(location.getProtocol())) {
    return true;
  }
  String path=location.getPath();
  if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"") || testCode != null && (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str""))) {
    return true;
  }
  if (!configurationRead) {
    readConfiguration();
    configurationRead=true;
  }
  return false;
}","private boolean isClassFromExternalLibrary(@Nonnull URL location){
  if (""String_Node_Str"".equals(location.getProtocol())) {
    return true;
  }
  String path=location.getPath();
  if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"") || testCode != null && (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str""))) {
    return true;
  }
  if (!configurationRead) {
    readConfiguration();
    configurationRead=true;
  }
  return false;
}",0.946
164786,"void findLifecycleMethods(@Nonnull Class<?> testedClass){
  if (classesSearched.contains(testedClass)) {
    return;
  }
  boolean isServlet=isServlet(testedClass);
  Class<?> classWithLifecycleMethods=testedClass;
  do {
    Method initializationMethod=null;
    Method terminationMethod=null;
    int methodsFoundInSameClass=0;
    for (    Method method : classWithLifecycleMethods.getDeclaredMethods()) {
      if (method.isSynthetic()) {
        continue;
      }
 else       if (initializationMethod == null && isInitializationMethod(method,isServlet)) {
        initializationMethods.put(classWithLifecycleMethods,method);
        initializationMethod=method;
        methodsFoundInSameClass++;
      }
 else       if (terminationMethod == null && isTerminationMethod(method,isServlet)) {
        terminationMethods.put(classWithLifecycleMethods,method);
        terminationMethod=method;
        methodsFoundInSameClass++;
      }
      if (methodsFoundInSameClass == 2) {
        break;
      }
    }
    classWithLifecycleMethods=classWithLifecycleMethods.getSuperclass();
  }
 while (classWithLifecycleMethods != Object.class);
  classesSearched.add(testedClass);
}","void findLifecycleMethods(@Nonnull Class<?> testedClass){
  if (testedClass.isInterface() || classesSearched.contains(testedClass)) {
    return;
  }
  boolean isServlet=isServlet(testedClass);
  Class<?> classWithLifecycleMethods=testedClass;
  do {
    findLifecycleMethodsInSingleClass(isServlet,classWithLifecycleMethods);
    classWithLifecycleMethods=classWithLifecycleMethods.getSuperclass();
  }
 while (classWithLifecycleMethods != Object.class);
  classesSearched.add(testedClass);
}",0.5044937088076693
164787,"ClassSelection(){
  testCode=Startup.isTestRun() ? TEST_CLASS_NAME.matcher(""String_Node_Str"") : null;
}","ClassSelection(){
  if (Startup.isTestRun()) {
    testCode=TEST_CLASS_NAME.matcher(""String_Node_Str"");
  }
 else {
    testCode=null;
    readConfiguration();
  }
}",0.6865671641791045
164788,"private void readConfiguration(){
  String classes=Configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  loadedOnly=""String_Node_Str"".equals(classes);
  classesToInclude=loadedOnly ? null : newMatcherForClassSelection(classes);
  String excludes=Configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  classesToExclude=newMatcherForClassSelection(excludes);
}","private void readConfiguration(){
  String classes=Configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  loadedOnly=""String_Node_Str"".equals(classes);
  classesToInclude=loadedOnly ? null : newMatcherForClassSelection(classes);
  String excludes=Configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  classesToExclude=newMatcherForClassSelection(excludes);
  configurationRead=true;
}",0.967005076142132
164789,"private boolean isClassFromExternalLibrary(@Nonnull URL location){
  if (""String_Node_Str"".equals(location.getProtocol())) {
    return true;
  }
  String path=location.getPath();
  if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"") || testCode != null && (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str""))) {
    return true;
  }
  if (!configurationRead) {
    readConfiguration();
    configurationRead=true;
  }
  return false;
}","private boolean isClassFromExternalLibrary(@Nonnull URL location){
  if (""String_Node_Str"".equals(location.getProtocol())) {
    return true;
  }
  String path=location.getPath();
  if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"") || testCode != null && (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str""))) {
    return true;
  }
  if (!configurationRead) {
    readConfiguration();
  }
  return false;
}",0.9370932754880694
164790,"@Override protected Class<?> findClass(String name){
  return defineClass(name,modifiedClassfile,0,modifiedClassfile.length);
}","@Override protected Class<?> findClass(String name) throws ClassNotFoundException {
  if (!name.equals(generatedClassName)) {
    return parentLoader.loadClass(name);
  }
  return defineClass(name,modifiedClassfile,0,modifiedClassfile.length);
}",0.6827956989247311
164791,"@Nonnull private Class<T> defineNewClass(@Nonnull ClassVisitor modifier){
  ClassLoader parentLoader=sourceClass.getClassLoader();
  if (parentLoader == null) {
    parentLoader=ImplementationClass.class.getClassLoader();
  }
  final byte[] modifiedClassfile=modifier.toByteArray();
  @SuppressWarnings(""String_Node_Str"") Class<T> generatedClass=(Class<T>)new ClassLoader(parentLoader){
    @Override protected Class<?> findClass(    String name){
      return defineClass(name,modifiedClassfile,0,modifiedClassfile.length);
    }
  }
.findClass(generatedClassName);
  generatedBytecode=modifiedClassfile;
  return generatedClass;
}","@Nonnull private Class<T> defineNewClass(@Nonnull ClassVisitor modifier){
  ClassLoader sourceClassLoader=sourceClass.getClassLoader();
  final ClassLoader parentLoader=sourceClassLoader != null ? sourceClassLoader : ImplementationClass.class.getClassLoader();
  final byte[] modifiedClassfile=modifier.toByteArray();
  try {
    @SuppressWarnings(""String_Node_Str"") Class<T> generatedClass=(Class<T>)new ClassLoader(parentLoader){
      @Override protected Class<?> findClass(      String name) throws ClassNotFoundException {
        if (!name.equals(generatedClassName)) {
          return parentLoader.loadClass(name);
        }
        return defineClass(name,modifiedClassfile,0,modifiedClassfile.length);
      }
    }
.findClass(generatedClassName);
    generatedBytecode=modifiedClassfile;
    return generatedClass;
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"" + generatedClassName,e);
  }
}",0.7397086763774541
164792,"@Override public void visitLocalVariable(@Nonnull String name,String desc,String signature,Label start,Label end,int index){
  ParameterNames.registerName(classDesc,methodName,methodDesc,name);
}","@Override public void visitLocalVariable(@Nonnull String name,@Nonnull String desc,String signature,Label start,Label end,@Nonnegative int index){
  ParameterNames.registerName(classDesc,memberAccess,memberName,memberDesc,desc,name,index);
}",0.8073394495412844
164793,"ParameterNameExtractor(boolean forMethods){
  this.forMethods=forMethods;
  classDesc=methodName=methodDesc=""String_Node_Str"";
}","ParameterNameExtractor(boolean forMethods){
  this.forMethods=forMethods;
  classDesc=memberName=memberDesc=""String_Node_Str"";
}",0.9375
164794,"@Nullable @Override public MethodVisitor visitMethod(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ACC_SYNTHETIC) == 0) {
    boolean visitingAMethod=name.charAt(0) != '<';
    if (visitingAMethod == forMethods) {
      methodName=name;
      methodDesc=desc;
      return new MethodOrConstructorVisitor();
    }
  }
  return null;
}","@Nullable @Override public MethodVisitor visitMethod(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ACC_SYNTHETIC) == 0) {
    boolean visitingAMethod=name.charAt(0) != '<';
    if (visitingAMethod == forMethods) {
      memberAccess=access;
      memberName=name;
      memberDesc=desc;
      return new MethodOrConstructorVisitor();
    }
  }
  return null;
}",0.9054842473745623
164795,"@Override public void visitLocalVariable(@Nonnull String name,String desc,String signature,Label start,Label end,int index){
  String classDesc=mockMethods.getMockClassInternalName();
  ParameterNames.registerName(classDesc,methodName,methodDesc,name);
}","@Override public void visitLocalVariable(@Nonnull String name,@Nonnull String desc,String signature,Label start,Label end,@Nonnegative int index){
  String classDesc=mockMethods.getMockClassInternalName();
  ParameterNames.registerName(classDesc,access,methodName,methodDesc,desc,name,index);
}",0.9124087591240876
164796,"@Nullable public static String getName(@Nonnull String classDesc,@Nonnull String methodDesc,int index){
  Map<String,String[]> methodsToParameters=classesToMethodsToParameters.get(classDesc);
  if (methodsToParameters == null) {
    return null;
  }
  String[] parameterNames=methodsToParameters.get(methodDesc);
  return parameterNames == null ? null : parameterNames[index];
}","@Nullable public static String getName(@Nonnull String classDesc,@Nonnull String methodDesc,int index){
  Map<String,String[]> methodsToParameters=classesToMethodsToParameters.get(classDesc);
  if (methodsToParameters == null) {
    return null;
  }
  String[] parameterNames=methodsToParameters.get(methodDesc);
  int n=parameterNames.length;
  int i=0;
  int j=0;
  while (true) {
    String name=parameterNames[i];
    if (j == index || name == null) {
      return name;
    }
    i++;
    if (i == n) {
      break;
    }
    String nextName=parameterNames[i];
    if (nextName.isEmpty()) {
      i++;
    }
    j++;
  }
  return null;
}",0.692156862745098
164797,"public static void registerName(@Nonnull String classDesc,@Nonnull String methodName,@Nonnull String methodDesc,@Nonnull String name){
  if (""String_Node_Str"".equals(name)) {
    return;
  }
  Map<String,String[]> methodsToParameters=classesToMethodsToParameters.get(classDesc);
  if (methodsToParameters == null) {
    methodsToParameters=new HashMap<String,String[]>();
    classesToMethodsToParameters.put(classDesc,methodsToParameters);
  }
  String methodKey=methodName + methodDesc;
  String[] parameterNames=methodsToParameters.get(methodKey);
  if (parameterNames == null) {
    int numParameters=Type.getArgumentTypes(methodDesc).length;
    parameterNames=numParameters == 0 ? NO_PARAMETERS : new String[numParameters];
    methodsToParameters.put(methodKey,parameterNames);
  }
  for (int i=0, n=parameterNames.length; i < n; i++) {
    if (parameterNames[i] == null) {
      parameterNames[i]=name;
      break;
    }
  }
}","public static void registerName(@Nonnull String classDesc,@Nonnegative int memberAccess,@Nonnull String memberName,@Nonnull String memberDesc,@Nonnull String desc,@Nonnull String name,@Nonnegative int index){
  if (""String_Node_Str"".equals(name)) {
    return;
  }
  Map<String,String[]> methodsToParameters=classesToMethodsToParameters.get(classDesc);
  if (methodsToParameters == null) {
    methodsToParameters=new HashMap<String,String[]>();
    classesToMethodsToParameters.put(classDesc,methodsToParameters);
  }
  String methodKey=memberName + memberDesc;
  String[] parameterNames=methodsToParameters.get(methodKey);
  if (parameterNames == null) {
    int sumOfArgumentSizes=getSumOfArgumentSizes(memberDesc);
    parameterNames=sumOfArgumentSizes == 0 ? NO_PARAMETERS : new String[sumOfArgumentSizes];
    methodsToParameters.put(methodKey,parameterNames);
  }
  int i=index - (isStatic(memberAccess) ? 0 : 1);
  if (i < parameterNames.length) {
    parameterNames[i]=name;
    if (isDoubleSizeType(desc.charAt(0))) {
      parameterNames[i + 1]=""String_Node_Str"";
    }
  }
}",0.6739238000989609
164798,"@Nullable private Object getValueForFieldIfAvailable(@Nonnull List<Field> targetFields,@Nonnull Field fieldToBeInjected){
  InjectionState injectionState=testedField.injectionState;
  injectionState.setTypeOfInjectionPoint(fieldToBeInjected.getGenericType());
  String targetFieldName=fieldToBeInjected.getName();
  MockedType mockedType;
  if (withMultipleTargetFieldsOfSameType(targetFields,fieldToBeInjected)) {
    mockedType=injectionState.findInjectableByTypeAndName(targetFieldName);
  }
 else {
    mockedType=injectionState.findInjectableByTypeAndOptionallyName(targetFieldName);
  }
  if (mockedType != null) {
    return injectionState.getValueToInject(mockedType);
  }
  KindOfInjectionPoint kindOfInjectionPoint=isAnnotated(fieldToBeInjected);
  if (fullInjection != null) {
    if (testedField.requireDIAnnotation && kindOfInjectionPoint == KindOfInjectionPoint.NotAnnotated) {
      return null;
    }
    Object newInstance=fullInjection.newInstance(this,fieldToBeInjected);
    if (newInstance != null) {
      return newInstance;
    }
  }
  if (kindOfInjectionPoint == KindOfInjectionPoint.WithValue) {
    return getValueFromAnnotation(fieldToBeInjected);
  }
  if (kindOfInjectionPoint == KindOfInjectionPoint.Required) {
    String fieldType=fieldToBeInjected.getGenericType().toString();
    fieldType=TYPE_NAME.matcher(fieldType).replaceAll(""String_Node_Str"");
    String kindOfInjectable=fullInjection == null ? ""String_Node_Str"" : ""String_Node_Str"";
    throw new IllegalStateException(""String_Node_Str"" + kindOfInjectable + ""String_Node_Str""+ fieldToBeInjected.getDeclaringClass().getSimpleName()+ '#'+ fieldToBeInjected.getName()+ ""String_Node_Str""+ fieldType);
  }
  return null;
}","@Nullable private Object getValueForFieldIfAvailable(@Nonnull List<Field> targetFields,@Nonnull Field fieldToBeInjected){
  injectionState.setTypeOfInjectionPoint(fieldToBeInjected.getGenericType());
  String targetFieldName=fieldToBeInjected.getName();
  MockedType mockedType;
  if (withMultipleTargetFieldsOfSameType(targetFields,fieldToBeInjected)) {
    mockedType=injectionState.findInjectableByTypeAndName(targetFieldName);
  }
 else {
    mockedType=injectionState.findInjectableByTypeAndOptionallyName(targetFieldName);
  }
  if (mockedType != null) {
    return injectionState.getValueToInject(mockedType);
  }
  KindOfInjectionPoint kindOfInjectionPoint=isAnnotated(fieldToBeInjected);
  if (fullInjection != null) {
    if (requireDIAnnotation && kindOfInjectionPoint == KindOfInjectionPoint.NotAnnotated) {
      return null;
    }
    Object newInstance=fullInjection.newInstance(this,fieldToBeInjected);
    if (newInstance != null) {
      return newInstance;
    }
  }
  if (kindOfInjectionPoint == KindOfInjectionPoint.WithValue) {
    return getValueFromAnnotation(fieldToBeInjected);
  }
  if (kindOfInjectionPoint == KindOfInjectionPoint.Required) {
    String fieldType=fieldToBeInjected.getGenericType().toString();
    fieldType=TYPE_NAME.matcher(fieldType).replaceAll(""String_Node_Str"");
    String kindOfInjectable=fullInjection == null ? ""String_Node_Str"" : ""String_Node_Str"";
    throw new IllegalStateException(""String_Node_Str"" + kindOfInjectable + ""String_Node_Str""+ fieldToBeInjected.getDeclaringClass().getSimpleName()+ '#'+ fieldToBeInjected.getName()+ ""String_Node_Str""+ fieldType);
  }
  return null;
}",0.978494623655914
164799,"private boolean withMultipleTargetFieldsOfSameType(@Nonnull List<Field> targetFields,@Nonnull Field fieldToBeInjected){
  InjectionState injectionState=testedField.injectionState;
  for (  Field targetField : targetFields) {
    if (targetField != fieldToBeInjected && injectionState.isSameTypeAsInjectionPoint(targetField.getGenericType())) {
      return true;
    }
  }
  return false;
}","private boolean withMultipleTargetFieldsOfSameType(@Nonnull List<Field> targetFields,@Nonnull Field fieldToBeInjected){
  for (  Field targetField : targetFields) {
    if (targetField != fieldToBeInjected && injectionState.isSameTypeAsInjectionPoint(targetField.getGenericType())) {
      return true;
    }
  }
  return false;
}",0.9166666666666666
164800,"void fillOutDependenciesRecursively(@Nonnull Object dependency){
  Class<?> dependencyClass=dependency.getClass();
  List<Field> targetFields=findAllTargetInstanceFieldsInTestedClassHierarchy(dependencyClass);
  if (!targetFields.isEmpty()) {
    InjectionState injectionState=testedField.injectionState;
    List<MockedType> currentlyConsumedInjectables=injectionState.saveConsumedInjectables();
    injectIntoEligibleFields(targetFields,dependency);
    injectionState.restoreConsumedInjectables(currentlyConsumedInjectables);
  }
}","void fillOutDependenciesRecursively(@Nonnull Object dependency){
  Class<?> dependencyClass=dependency.getClass();
  boolean previousRequireDIAnnotation=requireDIAnnotation;
  List<Field> targetFields=findAllTargetInstanceFieldsInTestedClassHierarchy(dependencyClass);
  if (!targetFields.isEmpty()) {
    List<MockedType> currentlyConsumedInjectables=injectionState.saveConsumedInjectables();
    injectIntoEligibleFields(targetFields,dependency);
    injectionState.restoreConsumedInjectables(currentlyConsumedInjectables);
  }
  requireDIAnnotation=previousRequireDIAnnotation;
}",0.8458781362007168
164801,"@Nonnull List<Field> findAllTargetInstanceFieldsInTestedClassHierarchy(@Nonnull Class<?> testedClass){
  testedField.requireDIAnnotation=false;
  List<Field> targetFields=new ArrayList<Field>();
  Class<?> classWithFields=testedClass;
  do {
    Field[] fields=classWithFields.getDeclaredFields();
    for (    Field field : fields) {
      if (isEligibleForInjection(field)) {
        targetFields.add(field);
      }
    }
    classWithFields=classWithFields.getSuperclass();
  }
 while (isClassFromSameModuleOrSystemAsTestedClass(classWithFields) || isServlet(classWithFields));
  return targetFields;
}","@Nonnull List<Field> findAllTargetInstanceFieldsInTestedClassHierarchy(@Nonnull Class<?> testedClass){
  requireDIAnnotation=false;
  List<Field> targetFields=new ArrayList<Field>();
  Class<?> classWithFields=testedClass;
  do {
    Field[] fields=classWithFields.getDeclaredFields();
    for (    Field field : fields) {
      if (isEligibleForInjection(field)) {
        targetFields.add(field);
      }
    }
    classWithFields=classWithFields.getSuperclass();
  }
 while (isClassFromSameModuleOrSystemAsTestedClass(classWithFields) || isServlet(classWithFields));
  return targetFields;
}",0.99
164802,"FieldInjection(@Nonnull TestedField testedField,@Nonnull Class<?> testedClass,boolean fullInjection){
  this.testedField=testedField;
  protectionDomainOfTestedClass=testedClass.getProtectionDomain();
  CodeSource codeSource=protectionDomainOfTestedClass.getCodeSource();
  codeLocationParentPath=codeSource == null ? null : new File(codeSource.getLocation().getPath()).getParent();
  nameOfTestedClass=testedClass.getName();
  this.fullInjection=fullInjection ? new FullInjection(testedField.injectionState) : null;
}","FieldInjection(@Nonnull TestedField testedField,@Nonnull Class<?> testedClass,boolean fullInjection){
  injectionState=testedField.injectionState;
  requireDIAnnotation=testedField.requireDIAnnotation;
  protectionDomainOfTestedClass=testedClass.getProtectionDomain();
  CodeSource codeSource=protectionDomainOfTestedClass.getCodeSource();
  codeLocationParentPath=codeSource == null ? null : new File(codeSource.getLocation().getPath()).getParent();
  nameOfTestedClass=testedClass.getName();
  this.fullInjection=fullInjection ? new FullInjection(injectionState) : null;
}",0.8754578754578755
164803,"private boolean isEligibleForInjection(@Nonnull Field field){
  int modifiers=field.getModifiers();
  if (isFinal(modifiers)) {
    return false;
  }
  boolean annotated=isAnnotated(field) != KindOfInjectionPoint.NotAnnotated;
  if (annotated) {
    testedField.requireDIAnnotation=true;
    return true;
  }
  return !isStatic(modifiers);
}","private boolean isEligibleForInjection(@Nonnull Field field){
  int modifiers=field.getModifiers();
  if (isFinal(modifiers)) {
    return false;
  }
  boolean annotated=isAnnotated(field) != KindOfInjectionPoint.NotAnnotated;
  if (annotated) {
    requireDIAnnotation=true;
    return true;
  }
  return !isStatic(modifiers);
}",0.982089552238806
164804,"void instantiateWithInjectableValues(@Nonnull Object testClassInstance){
  if (isAvailableDuringSetup() && getFieldValue(testedField,testClassInstance) != null) {
    return;
  }
  Object testedObject=null;
  if (!createAutomatically) {
    testedObject=getFieldValue(testedField,testClassInstance);
    createAutomatically=testedObject == null && !isFinal(testedField.getModifiers());
  }
  injectionState.setTestedField(testedField);
  Class<?> testedClass;
  if (createAutomatically) {
    testedClass=testedField.getType();
    testedObject=testedObjectCreation.create();
    setFieldValue(testedField,testClassInstance,testedObject);
  }
 else {
    testedClass=testedObject == null ? null : testedObject.getClass();
  }
  if (testedObject != null) {
    FieldInjection fieldInjection=new FieldInjection(this,testedClass,metadata.fullyInitialized());
    if (targetFields == null) {
      targetFields=fieldInjection.findAllTargetInstanceFieldsInTestedClassHierarchy(testedClass);
    }
    fieldInjection.injectIntoEligibleFields(targetFields,testedObject);
    if (createAutomatically) {
      injectionState.lifecycleMethods.executePostConstructMethodIfAny(testedClass,testedObject);
    }
  }
}","void instantiateWithInjectableValues(@Nonnull Object testClassInstance){
  if (isAvailableDuringSetup() && getFieldValue(testedField,testClassInstance) != null) {
    return;
  }
  Object testedObject=null;
  if (!createAutomatically) {
    testedObject=getFieldValue(testedField,testClassInstance);
    createAutomatically=testedObject == null && !isFinal(testedField.getModifiers());
  }
  injectionState.setTestedField(testedField);
  Class<?> testedClass;
  if (createAutomatically) {
    testedClass=testedField.getType();
    testedObject=testedObjectCreation.create();
    setFieldValue(testedField,testClassInstance,testedObject);
  }
 else {
    testedClass=testedObject == null ? null : testedObject.getClass();
  }
  if (testedObject != null) {
    FieldInjection fieldInjection=new FieldInjection(this,testedClass,metadata.fullyInitialized());
    if (targetFields == null) {
      targetFields=fieldInjection.findAllTargetInstanceFieldsInTestedClassHierarchy(testedClass);
      requireDIAnnotation=fieldInjection.requireDIAnnotation;
    }
    fieldInjection.injectIntoEligibleFields(targetFields,testedObject);
    if (createAutomatically) {
      injectionState.lifecycleMethods.executePostConstructMethodIfAny(testedClass,testedObject);
    }
  }
}",0.9748784440842788
164805,"public void loadAgent(){
  VirtualMachine vm;
  if (AttachProvider.providers().isEmpty()) {
    String vmName=System.getProperty(""String_Node_Str"");
    if (vmName.contains(""String_Node_Str"")) {
      vm=getVirtualMachineImplementationFromEmbeddedOnes();
    }
 else {
      String helpMessage=getHelpMessageForNonHotSpotVM(vmName);
      throw new IllegalStateException(helpMessage);
    }
  }
 else {
    vm=attachToRunningVM();
  }
  loadAgentAndDetachFromRunningVM(vm);
}","public void loadAgent(){
  VirtualMachine vm;
  if (AttachProvider.providers().isEmpty()) {
    if (HOTSPOT_VM) {
      vm=getVirtualMachineImplementationFromEmbeddedOnes();
    }
 else {
      String helpMessage=getHelpMessageForNonHotSpotVM();
      throw new IllegalStateException(helpMessage);
    }
  }
 else {
    vm=attachToRunningVM();
  }
  loadAgentAndDetachFromRunningVM(vm);
}",0.5654692931633836
164806,"@Nonnull private String getHelpMessageForNonHotSpotVM(@Nonnull String vmName){
  String helpMessage=""String_Node_Str"" + vmName;
  if (vmName.contains(""String_Node_Str"")) {
    helpMessage+=""String_Node_Str"";
  }
  return helpMessage + ""String_Node_Str"" + jarFilePath;
}","@Nonnull private String getHelpMessageForNonHotSpotVM(){
  String vmName=System.getProperty(""String_Node_Str"");
  String helpMessage=""String_Node_Str"" + vmName;
  if (vmName.contains(""String_Node_Str"")) {
    helpMessage+=""String_Node_Str"";
  }
  return helpMessage + ""String_Node_Str"" + jarFilePath;
}",0.8651488616462347
164807,"boolean hasUnusedMocks(){
  for (  MockMethod method : methods) {
    if (!method.hasMatchingRealMethod) {
      return true;
    }
  }
  return false;
}","boolean hasUnusedMocks(){
  if (adviceMethod != null) {
    return true;
  }
  for (  MockMethod method : methods) {
    if (!method.hasMatchingRealMethod) {
      return true;
    }
  }
  return false;
}",0.8571428571428571
164808,"@Override public void visitLocalVariable(@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nonnull Label start,@Nonnull Label end,int index){
  int parameterIndex=index;
  if (""String_Node_Str"".equals(previousDesc) || ""String_Node_Str"".equals(previousDesc)) {
    parameterIndex=previousIndex + 1;
  }
  ParameterNames.registerName(classDesc,methodAccess,methodName,methodDesc,name,parameterIndex);
  previousIndex=parameterIndex;
  previousDesc=desc;
}","@Override public void visitLocalVariable(@Nonnull String name,String desc,String signature,Label start,Label end,int index){
  ParameterNames.registerName(classDesc,methodName,methodDesc,name);
}",0.5838323353293413
164809,"@Nullable @Override public MethodVisitor visitMethod(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ACC_SYNTHETIC) == 0) {
    boolean visitingAMethod=name.charAt(0) != '<';
    if (visitingAMethod == forMethods) {
      methodAccess=access;
      methodName=name;
      methodDesc=desc;
      return new MethodOrConstructorVisitor();
    }
  }
  return null;
}","@Nullable @Override public MethodVisitor visitMethod(int access,@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ACC_SYNTHETIC) == 0) {
    boolean visitingAMethod=name.charAt(0) != '<';
    if (visitingAMethod == forMethods) {
      methodName=name;
      methodDesc=desc;
      return new MethodOrConstructorVisitor();
    }
  }
  return null;
}",0.7911318553092183
164810,"@Override public void visitLocalVariable(@Nonnull String name,@Nonnull String desc,@Nullable String signature,@Nonnull Label start,@Nonnull Label end,int index){
  String classDesc=mockMethods.getMockClassInternalName();
  ParameterNames.registerName(classDesc,access,methodName,methodDesc,name,index);
}","@Override public void visitLocalVariable(@Nonnull String name,String desc,String signature,Label start,Label end,int index){
  String classDesc=mockMethods.getMockClassInternalName();
  ParameterNames.registerName(classDesc,methodName,methodDesc,name);
}",0.8100358422939068
164811,"/** 
 * Adds the method specified to the set of mock methods, as long as it's annotated with   {@code @Mock}.
 * @param methodSignature generic signature for a Java 5 generic method, ignored since redefinition only needs toconsider the ""erased"" signature
 * @param exceptions zero or more thrown exceptions in the method ""throws"" clause, also ignored
 */
@SuppressWarnings(""String_Node_Str"") @Nullable @Override public MethodVisitor visitMethod(final int access,@Nonnull final String methodName,@Nonnull final String methodDesc,@Nullable String methodSignature,@Nullable String[] exceptions){
  if ((access & INVALID_METHOD_ACCESSES) != 0) {
    return null;
  }
  if (""String_Node_Str"".equals(methodName)) {
    if (!collectingFromSuperClass && methodDesc.equals(enclosingClassDescriptor)) {
      enclosingClassDescriptor=null;
    }
    return null;
  }
  return new MethodVisitor(){
    @Override @Nullable public AnnotationVisitor visitAnnotation(    String desc,    boolean visible){
      if (""String_Node_Str"".equals(desc)) {
        MockMethods.MockMethod mockMethod=mockMethods.addMethod(collectingFromSuperClass,access,methodName,methodDesc);
        if (mockMethod != null) {
          return new MockAnnotationVisitor(mockMethod);
        }
      }
      return null;
    }
    @Override public void visitLocalVariable(    @Nonnull String name,    @Nonnull String desc,    @Nullable String signature,    @Nonnull Label start,    @Nonnull Label end,    int index){
      String classDesc=mockMethods.getMockClassInternalName();
      ParameterNames.registerName(classDesc,access,methodName,methodDesc,name,index);
    }
  }
;
}","/** 
 * Adds the method specified to the set of mock methods, as long as it's annotated with   {@code @Mock}.
 * @param methodSignature generic signature for a Java 5 generic method, ignored since redefinition only needs toconsider the ""erased"" signature
 * @param exceptions zero or more thrown exceptions in the method ""throws"" clause, also ignored
 */
@SuppressWarnings(""String_Node_Str"") @Nullable @Override public MethodVisitor visitMethod(int access,@Nonnull String methodName,@Nonnull String methodDesc,String methodSignature,String[] exceptions){
  if ((access & INVALID_METHOD_ACCESSES) != 0) {
    return null;
  }
  if (""String_Node_Str"".equals(methodName)) {
    if (!collectingFromSuperClass && methodDesc.equals(enclosingClassDescriptor)) {
      enclosingClassDescriptor=null;
    }
    return null;
  }
  return new MockMethodVisitor(access,methodName,methodDesc);
}",0.6941689805632686
164812,"@Override @Nullable public AnnotationVisitor visitAnnotation(String desc,boolean visible){
  if (""String_Node_Str"".equals(desc)) {
    MockMethods.MockMethod mockMethod=mockMethods.addMethod(collectingFromSuperClass,access,methodName,methodDesc);
    if (mockMethod != null) {
      return new MockAnnotationVisitor(mockMethod);
    }
  }
  return null;
}","@Nullable @Override public AnnotationVisitor visitAnnotation(@Nullable String desc,boolean visible){
  if (""String_Node_Str"".equals(desc)) {
    MockMethods.MockMethod mockMethod=mockMethods.addMethod(collectingFromSuperClass,access,methodName,methodDesc);
    if (mockMethod != null) {
      return new MockAnnotationVisitor(mockMethod);
    }
  }
  return null;
}",0.8722222222222222
164813,"public static void registerName(@Nonnull String classDesc,int methodAccess,@Nonnull String methodName,@Nonnull String methodDesc,@Nonnull String name,int index){
  if (""String_Node_Str"".equals(name)) {
    return;
  }
  Map<String,String[]> methodsToParameters=classesToMethodsToParameters.get(classDesc);
  if (methodsToParameters == null) {
    methodsToParameters=new HashMap<String,String[]>();
    classesToMethodsToParameters.put(classDesc,methodsToParameters);
  }
  String methodKey=methodName + methodDesc;
  String[] parameterNames=methodsToParameters.get(methodKey);
  if (parameterNames == null) {
    int numParameters=Type.getArgumentTypes(methodDesc).length;
    parameterNames=numParameters == 0 ? NO_PARAMETERS : new String[numParameters];
    methodsToParameters.put(methodKey,parameterNames);
  }
  if (!isStatic(methodAccess)) {
    index--;
  }
  if (index < parameterNames.length) {
    parameterNames[index]=name;
  }
}","public static void registerName(@Nonnull String classDesc,@Nonnull String methodName,@Nonnull String methodDesc,@Nonnull String name){
  if (""String_Node_Str"".equals(name)) {
    return;
  }
  Map<String,String[]> methodsToParameters=classesToMethodsToParameters.get(classDesc);
  if (methodsToParameters == null) {
    methodsToParameters=new HashMap<String,String[]>();
    classesToMethodsToParameters.put(classDesc,methodsToParameters);
  }
  String methodKey=methodName + methodDesc;
  String[] parameterNames=methodsToParameters.get(methodKey);
  if (parameterNames == null) {
    int numParameters=Type.getArgumentTypes(methodDesc).length;
    parameterNames=numParameters == 0 ? NO_PARAMETERS : new String[numParameters];
    methodsToParameters.put(methodKey,parameterNames);
  }
  for (int i=0, n=parameterNames.length; i < n; i++) {
    if (parameterNames[i] == null) {
      parameterNames[i]=name;
      break;
    }
  }
}",0.8630793819925413
164814,"@Test public void verifyInstantiationOfTestedObjectsThroughConstructorsWithNonMockedParameters(){
  assertNotNull(tested0);
  assertNotNull(tested1);
  assertNotNull(tested2);
  assertNotNull(tested3);
  assertNotNull(tested4);
  assertNotNull(tested5);
}","@Test public void verifyInstantiationOfTestedObjectsThroughConstructorsWithNonMockedParameters(){
  assertNotNull(tested0);
  assertNotNull(tested1);
  assertNotNull(tested2);
  assertNotNull(tested3);
  assertNotNull(tested4);
  assertNotNull(tested5);
  assertNotNull(tested6);
}",0.9514925373134328
164815,"@Nonnull Object instantiate(@Nonnull List<MockedType> injectablesForConstructor){
  Type[] parameterTypes=constructor.getGenericParameterTypes();
  int n=parameterTypes.length;
  Object[] arguments=n == 0 ? NO_ARGS : new Object[n];
  boolean varArgs=constructor.isVarArgs();
  if (varArgs) {
    n--;
  }
  for (int i=0; i < n; i++) {
    MockedType injectable=injectablesForConstructor.get(i);
    Object value=getArgumentValueToInject(injectable);
    arguments[i]=wrapInProviderIfNeeded(parameterTypes[i],value);
  }
  if (varArgs) {
    arguments[n]=obtainInjectedVarargsArray(parameterTypes,n);
  }
  return invoke(constructor,arguments);
}","@Nonnull Object instantiate(@Nonnull List<MockedType> injectablesForConstructor){
  Type[] parameterTypes=constructor.getGenericParameterTypes();
  int n=parameterTypes.length;
  Object[] arguments=n == 0 ? NO_ARGS : new Object[n];
  boolean varArgs=constructor.isVarArgs();
  if (varArgs) {
    n--;
  }
  for (int i=0; i < n; i++) {
    MockedType injectable=injectablesForConstructor.get(i);
    Object value=getArgumentValueToInject(injectable);
    arguments[i]=wrapInProviderIfNeeded(parameterTypes[i],value);
  }
  if (varArgs) {
    arguments[n]=obtainInjectedVarargsArray(parameterTypes,n);
  }
  TestRun.exitNoMockingZone();
  try {
    return invoke(constructor,arguments);
  }
  finally {
    TestRun.enterNoMockingZone();
  }
}",0.9314079422382672
164816,"public TestedClass(GenericClass<String> go,List<Integer> values,Callable<Number>... actions){
  this.go=go;
  this.values=values;
  action1=actions[0];
  if (actions.length > 1)   action2=actions[1];
  if (actions.length > 2)   action3=actions[2];
}","public TestedClass(GenericClass<String> go,List<Integer> values,Callable<Number>... actions){
  this.go=go;
  this.values=values;
  action1=actions[0];
  if (actions.length > 1)   action2=actions[1];
  if (actions.length > 2)   action3=actions[2];
  try {
    InitialContext context=new InitialContext();
    database=(DataSource)context.lookup(""String_Node_Str"");
    context.close();
  }
 catch (  NamingException e) {
    throw new RuntimeException(e);
  }
}",0.7014084507042253
164817,"@Before public void recordCommonExpectations(){
  new NonStrictExpectations(){
{
      mockGO.doSomething();
      result=""String_Node_Str"";
    }
  }
;
}","@Before public void recordCommonExpectations() throws Exception {
  new NonStrictExpectations(){
{
      mockGO.doSomething();
      result=""String_Node_Str"";
    }
  }
;
  new NonStrictExpectations(){
{
      jndiContext.lookup(""String_Node_Str"");
      result=testDB;
    }
  }
;
}",0.700228832951945
164818,"protected static boolean notToBeMocked(@Nullable Object mocked,@Nonnull String mockedClassDesc){
  Thread currentThread=Thread.currentThread();
  if (""String_Node_Str"".equals(currentThread.getClass().getName())) {
    return true;
  }
  if (""String_Node_Str"".equals(currentThread.getName())) {
    return true;
  }
  return (mocked == null && ""String_Node_Str"".equals(mockedClassDesc) || mocked != null && instanceOfClassThatParticipatesInClassLoading(mocked.getClass())) && wasCalledDuringClassLoading();
}","protected static boolean notToBeMocked(@Nullable Object mocked,@Nonnull String mockedClassDesc){
  return (mocked == null && ""String_Node_Str"".equals(mockedClassDesc) || mocked != null && instanceOfClassThatParticipatesInClassLoading(mocked.getClass())) && wasCalledDuringClassLoading();
}",0.7261306532663316
164819,"@Nullable @Override public Object invoke(@Nullable Object mocked,Method method,@Nonnull Object[] args) throws Throwable {
  String mockedClassDesc=(String)args[1];
  if (notToBeMocked(mocked,mockedClassDesc)) {
    return Void.class;
  }
  String mockName=(String)args[2];
  String mockDesc=(String)args[3];
  String mockNameAndDesc=mockName + mockDesc;
  Integer executionMode=(Integer)args[5];
  Object[] mockArgs=extractMockArguments(6,args);
  boolean regularExecutionWithRecordReplayLock=executionMode == ExecutionMode.Regular.ordinal() && RECORD_OR_REPLAY_LOCK.isHeldByCurrentThread();
  Object rv;
  if (regularExecutionWithRecordReplayLock && mocked != null) {
    rv=ObjectMethods.evaluateOverride(mocked,mockNameAndDesc,args);
    if (rv != null) {
      return rv;
    }
  }
  if (TestRun.getExecutingTest().isProceedingIntoRealImplementation() || regularExecutionWithRecordReplayLock || TestRun.isInsideNoMockingZone()) {
    return Void.class;
  }
  TestRun.enterNoMockingZone();
  try {
    int mockAccess=(Integer)args[0];
    String genericSignature=(String)args[4];
    rv=recordOrReplay(mocked,mockAccess,mockedClassDesc,mockNameAndDesc,genericSignature,executionMode,mockArgs);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
  return rv;
}","@Nullable @Override public Object invoke(@Nullable Object mocked,Method method,@Nonnull Object[] args) throws Throwable {
  String mockedClassDesc=(String)args[1];
  if (calledFromSpecialThread() || notToBeMocked(mocked,mockedClassDesc)) {
    return Void.class;
  }
  String mockName=(String)args[2];
  String mockDesc=(String)args[3];
  String mockNameAndDesc=mockName + mockDesc;
  Integer executionMode=(Integer)args[5];
  Object[] mockArgs=extractMockArguments(6,args);
  boolean regularExecutionWithRecordReplayLock=executionMode == ExecutionMode.Regular.ordinal() && RECORD_OR_REPLAY_LOCK.isHeldByCurrentThread();
  Object rv;
  if (regularExecutionWithRecordReplayLock && mocked != null) {
    rv=ObjectMethods.evaluateOverride(mocked,mockNameAndDesc,args);
    if (rv != null) {
      return rv;
    }
  }
  if (TestRun.getExecutingTest().isProceedingIntoRealImplementation() || regularExecutionWithRecordReplayLock || TestRun.isInsideNoMockingZone()) {
    return Void.class;
  }
  TestRun.enterNoMockingZone();
  try {
    int mockAccess=(Integer)args[0];
    String genericSignature=(String)args[4];
    rv=recordOrReplay(mocked,mockAccess,mockedClassDesc,mockNameAndDesc,genericSignature,executionMode,mockArgs);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
  return rv;
}",0.9886585842784512
164820,"@Nullable @Override public Object invoke(@Nullable Object mockedInstance,Method method,@Nonnull Object[] args) throws Throwable {
  String mockClassDesc=(String)args[0];
  String mockedClassDesc=(String)args[1];
  String mockDesc=(String)args[4];
  Object mockUp=TestRun.getMock(mockClassDesc,mockedInstance);
  if (mockUp == null || notToBeMocked(mockedInstance,mockedClassDesc)) {
    Integer mockedAccess=(Integer)args[2];
    return isNative(mockedAccess) ? DefaultValues.computeForReturnType(mockDesc) : Void.class;
  }
  String mockName=(String)args[3];
  int mockStateIndex=(Integer)args[5];
  Object[] mockArgs=extractMockArguments(6,args);
  return callMock(mockedInstance,mockUp,mockedClassDesc,mockName,mockDesc,mockStateIndex,mockArgs);
}","@Nullable @Override public Object invoke(@Nullable Object mockedInstance,Method method,@Nonnull Object[] args) throws Throwable {
  String mockClassDesc=(String)args[0];
  String mockedClassDesc=(String)args[1];
  String mockDesc=(String)args[4];
  Object mockUp=TestRun.getMock(mockClassDesc,mockedInstance);
  if (mockUp == null || notToBeMocked(mockedInstance,mockedClassDesc)) {
    return DefaultValues.computeForReturnType(mockDesc);
  }
  String mockName=(String)args[3];
  int mockStateIndex=(Integer)args[5];
  Object[] mockArgs=extractMockArguments(6,args);
  return callMock(mockedInstance,mockUp,mockedClassDesc,mockName,mockDesc,mockStateIndex,mockArgs);
}",0.93446088794926
164821,"@Mock void run(){
}","@Override public void run(){
  boolean hasAccess=Collaborator.doSomethingElse();
  assertTrue(hasAccess);
}",0.2539682539682539
164822,"@Mock boolean doSomethingElse(Invocation inv){
  return true;
}","@Mock boolean doSomethingElse(){
  return true;
}",0.875
164823,"@Nonnull Member getRealMethodOrConstructor(@Nonnull String mockedClassDesc,@Nonnull String mockedMethodName,@Nonnull String mockedMethodDesc){
  if (realMethodOrConstructor == null) {
    String memberName=""String_Node_Str"".equals(mockedMethodName) ? ""String_Node_Str"" : mockedMethodName;
    RealMethodOrConstructor realMember;
    try {
      realMember=new RealMethodOrConstructor(mockedClassDesc,memberName,mockedMethodDesc);
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
    Member member=realMember.getMember();
    if (mockMethod.isAdvice) {
      return member;
    }
    realMethodOrConstructor=member;
  }
  return realMethodOrConstructor;
}","@Nonnull Member getRealMethodOrConstructor(@Nonnull String mockedClassDesc,@Nonnull String mockedMethodName,@Nonnull String mockedMethodDesc){
  if (realMethodOrConstructor == null || !mockedClassDesc.equals(realClassDesc)) {
    String memberName=""String_Node_Str"".equals(mockedMethodName) ? ""String_Node_Str"" : mockedMethodName;
    RealMethodOrConstructor realMember;
    try {
      realMember=new RealMethodOrConstructor(mockedClassDesc,memberName,mockedMethodDesc);
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
    Member member=realMember.getMember();
    if (mockMethod.isAdvice) {
      return member;
    }
    realMethodOrConstructor=member;
    realClassDesc=mockedClassDesc;
  }
  return realMethodOrConstructor;
}",0.9473684210526316
164824,"InterfaceInstanceFactory(@NotNull Object emptyProxy){
  this.emptyProxy=emptyProxy;
}","InterfaceInstanceFactory(@NotNull Object emptyProxy){
  super(emptyProxy.getClass());
  this.emptyProxy=emptyProxy;
}",0.8415841584158416
164825,"ClassInstanceFactory(@NotNull Class<?> concreteClass){
  this.concreteClass=concreteClass;
}","ClassInstanceFactory(@NotNull Class<?> concreteClass){
  super(concreteClass);
}",0.8604651162790697
164826,"public final void clearLastInstance(){
  lastInstance=null;
}","@Override public void clearLastInstance(){
  lastInstance=null;
}",0.873015873015873
164827,"Baz getBaz(){
  return null;
}","Baz getBaz(@SuppressWarnings(""String_Node_Str"") int i){
  return null;
}",0.5882352941176471
164828,"@Nullable private MockUp<?> findPreviouslyMockedClassIfMockUpAlreadyApplied(){
  MockUpInstances mockUpInstances=TestRun.getMockClasses().findPreviouslyAppliedMockUps(this);
  if (mockUpInstances != null) {
    if (mockUpInstances.hasMockUpsForSingleInstances()) {
      return mockUpInstances.initialMockUp;
    }
    tearDown();
  }
  return null;
}","@Nullable private MockUp<?> findPreviouslyMockedClassIfMockUpAlreadyApplied(){
  MockUpInstances mockUpInstances=TestRun.getMockClasses().findPreviouslyAppliedMockUps(this);
  if (mockUpInstances != null) {
    MockUp<?> previousMockUp=mockUpInstances.initialMockUp;
    if (mockUpInstances.hasMockUpsForSingleInstances()) {
      return previousMockUp;
    }
    previousMockUp.tearDown();
  }
  return null;
}",0.7611548556430446
164829,"@NotNull public Type resolveReturnType(@NotNull TypeVariable<?> genericReturnType){
  Type typeArgument=typeParametersToTypeArguments.get(genericReturnType.getName());
  if (typeArgument == null) {
    typeArgument=genericReturnType.getBounds()[0];
  }
  return typeArgument;
}","@NotNull public Type resolveReturnType(@NotNull TypeVariable<?> genericReturnType){
  Type typeArgument=typeParametersToTypeArguments.get(genericReturnType.getName());
  if (typeArgument == null) {
    typeArgument=genericReturnType.getBounds()[0];
    if (typeArgument instanceof TypeVariable<?>) {
      typeArgument=resolveReturnType((TypeVariable<?>)typeArgument);
    }
  }
  return typeArgument;
}",0.8147058823529412
164830,"@Nullable private static String getGenericReturnTypeWithTypeArguments(@NotNull String genericSignature,@NotNull ParameterizedType mockedGenericType){
  String typeName=getInternalTypeName(genericSignature);
  if (typeName.charAt(0) == 'T') {
    typeName=typeName.substring(1);
  }
  TypeVariable<?>[] typeParameters=((GenericDeclaration)mockedGenericType.getRawType()).getTypeParameters();
  Type[] actualTypeArguments=mockedGenericType.getActualTypeArguments();
  for (int i=0; i < typeParameters.length; i++) {
    TypeVariable<?> typeParameter=typeParameters[i];
    if (typeName.equals(typeParameter.getName())) {
      Type actualType=actualTypeArguments[i];
      Class<?> actualClass;
      if (actualType instanceof Class<?>) {
        actualClass=(Class<?>)actualType;
      }
 else       if (actualType instanceof WildcardType) {
        actualClass=(Class<?>)((WildcardType)actualType).getUpperBounds()[0];
      }
 else       if (actualType instanceof GenericArrayType) {
        Class<?> componentClass=getClassType((GenericArrayType)actualType);
        return getInternalName(componentClass);
      }
 else {
        return null;
      }
      return getReturnTypeIfCascadingSupportedForIt(actualClass);
    }
  }
  return null;
}","@Nullable private static String getGenericReturnTypeWithTypeArguments(@NotNull String genericSignature,@NotNull ParameterizedType mockedGenericType){
  String typeCodeAndName=getInternalReturnTypeCodeAndName(genericSignature);
  char typeCode=typeCodeAndName.charAt(0);
  String typeName=typeCodeAndName.substring(1);
  if (typeCode == 'L') {
    return isTypeSupportedForCascading(typeName) ? typeName : null;
  }
  TypeVariable<?>[] typeParameters=((GenericDeclaration)mockedGenericType.getRawType()).getTypeParameters();
  Type[] actualTypeArguments=mockedGenericType.getActualTypeArguments();
  for (int i=0; i < typeParameters.length; i++) {
    TypeVariable<?> typeParameter=typeParameters[i];
    if (typeName.equals(typeParameter.getName())) {
      Type actualType=actualTypeArguments[i];
      Class<?> actualClass;
      if (actualType instanceof Class<?>) {
        actualClass=(Class<?>)actualType;
      }
 else       if (actualType instanceof WildcardType) {
        actualClass=(Class<?>)((WildcardType)actualType).getUpperBounds()[0];
      }
 else       if (actualType instanceof GenericArrayType) {
        Class<?> componentClass=getClassType((GenericArrayType)actualType);
        return getInternalName(componentClass);
      }
 else {
        return null;
      }
      return getReturnTypeIfCascadingSupportedForIt(actualClass);
    }
  }
  return null;
}",0.912
164831,"@NotNull private static String getInternalTypeName(@NotNull String typeDesc){
  int p=typeDesc.indexOf('(');
  return typeDesc.substring(p + 2,typeDesc.length() - 1);
}","@NotNull private static String getInternalTypeName(@NotNull String typeDesc){
  return typeDesc.substring(1,typeDesc.length() - 1);
}",0.8770764119601329
164832,"public CustomRunner(Class<?> klass) throws InitializationError {
  super(klass);
}","public CustomRunner(Class<?> testClass) throws InitializationError {
  super(testClass);
}",0.9302325581395348
164833,"private void appendToFormattedLine(@NotNull LineElement firstElement,@NotNull LineSegmentData segmentData){
  if (firstElement == element) {
    return;
  }
  appendStartTag(segmentData);
  firstElement.appendAllBefore(line,element);
  appendEndTag(segmentData);
  segmentIndex++;
}","private void appendToFormattedLine(@NotNull LineElement firstElement,@NotNull LineSegmentData segmentData){
  if (firstElement == element) {
    return;
  }
  if (element == null && !firstElement.containsExecutableCodeBeforeEndOfLine()) {
    firstElement.appendAllBefore(line,null);
  }
 else {
    appendStartTag(segmentData);
    firstElement.appendAllBefore(line,element);
    appendEndTag(segmentData);
  }
  segmentIndex++;
}",0.791023842917251
164834,"private static boolean isTestMethod(@NotNull StackTraceElement ste){
  if (ste.getClassName() == null || ste.getMethodName() == null) {
    return false;
  }
  if (steCache.containsKey(ste)) {
    return steCache.get(ste);
  }
  if (ste.getFileName() == null || ste.getLineNumber() < 0) {
    steCache.put(ste,false);
    return false;
  }
  Class<?> aClass=loadClass(ste.getClassName());
  Method method=findMethod(aClass,ste.getMethodName());
  if (method == null) {
    steCache.put(ste,false);
    return false;
  }
  boolean isTestMethod=checkTestAnnotationOnClass && aClass.isAnnotationPresent(testAnnotation) || containsATestFrameworkAnnotation(method.getDeclaredAnnotations()) || checkIfTestCaseSubclass && isJUnit3xTestMethod(aClass,method);
  steCache.put(ste,isTestMethod);
  return isTestMethod;
}","private static boolean isTestMethod(@NotNull StackTraceElement ste){
  String className=ste.getClassName();
  String methodName=ste.getMethodName();
  if (className == null || methodName == null) {
    return false;
  }
  if (steCache.containsKey(ste)) {
    return steCache.get(ste);
  }
  boolean isTestMethod=false;
  if (ste.getFileName() != null && ste.getLineNumber() >= 0 && !className.startsWith(""String_Node_Str"") && !className.startsWith(""String_Node_Str"") && !className.startsWith(""String_Node_Str"") && !className.startsWith(""String_Node_Str"") && !className.startsWith(""String_Node_Str"") && !className.startsWith(""String_Node_Str"")) {
    Class<?> aClass=loadClass(className);
    if (aClass != null) {
      if (checkTestAnnotationOnClass && aClass.isAnnotationPresent(testAnnotation)) {
        isTestMethod=true;
      }
 else {
        Method method=findMethod(aClass,methodName);
        if (method != null) {
          isTestMethod=containsATestFrameworkAnnotation(method.getDeclaredAnnotations()) || checkIfTestCaseSubclass && isJUnit3xTestMethod(aClass,method);
        }
      }
    }
  }
  steCache.put(ste,isTestMethod);
  return isTestMethod;
}",0.4068825910931174
164835,"@Nullable private static Method findMethod(@NotNull Class<?> aClass,@NotNull String name){
  try {
    for (    Method method : aClass.getDeclaredMethods()) {
      if (isPublic(method.getModifiers()) && method.getReturnType() == void.class && name.equals(method.getName())) {
        return method;
      }
    }
  }
 catch (  NoClassDefFoundError e) {
    System.out.println(e + ""String_Node_Str"" + name+ ""String_Node_Str""+ aClass);
  }
  return null;
}","@Nullable private static Method findMethod(@NotNull Class<?> aClass,@NotNull String name){
  try {
    for (    Method method : aClass.getDeclaredMethods()) {
      if (method.getReturnType() == void.class && name.equals(method.getName())) {
        return method;
      }
    }
  }
 catch (  NoClassDefFoundError ignore) {
  }
  return null;
}",0.7909887359198998
164836,"@NotNull private static Class<?> loadClass(@NotNull String className){
  try {
    return Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
}","@Nullable private static Class<?> loadClass(@NotNull String className){
  try {
    return Class.forName(className);
  }
 catch (  ClassNotFoundException ignore) {
    return null;
  }
catch (  LinkageError ignore) {
    return null;
  }
}",0.7185354691075515
164837,"private static boolean isJUnit3xTestMethod(@NotNull Class<?> aClass,@NotNull Method method){
  if (!method.getName().startsWith(""String_Node_Str"")) {
    return false;
  }
  Class<?> superClass=aClass.getSuperclass();
  while (superClass != Object.class) {
    if (""String_Node_Str"".equals(superClass.getName())) {
      return true;
    }
    superClass=superClass.getSuperclass();
  }
  return false;
}","private static boolean isJUnit3xTestMethod(@NotNull Class<?> aClass,@NotNull Method method){
  if (!isPublic(method.getModifiers()) || !method.getName().startsWith(""String_Node_Str"")) {
    return false;
  }
  Class<?> superClass=aClass.getSuperclass();
  while (superClass != Object.class) {
    if (""String_Node_Str"".equals(superClass.getName())) {
      return true;
    }
    superClass=superClass.getSuperclass();
  }
  return false;
}",0.957345971563981
164838,"public void insertListOfCallPoints(@Nullable List<CallPoint> callPoints){
  if (callPoints == null) {
    return;
  }
  if (content.length() == 0) {
    content.append(EOL).append(""String_Node_Str"");
  }
  content.append(""String_Node_Str"").append(EOL);
  CallPoint currentCP=callPoints.get(0);
  appendTestMethod(currentCP.getStackTraceElement());
  appendRepetitionCountIfNeeded(currentCP);
  for (int i=1, n=callPoints.size(); i < n; i++) {
    CallPoint nextCP=callPoints.get(i);
    StackTraceElement ste=nextCP.getStackTraceElement();
    if (nextCP.isSameTestMethod(currentCP)) {
      content.append(""String_Node_Str"").append(ste.getLineNumber());
    }
 else {
      content.append(""String_Node_Str"").append(EOL);
      appendTestMethod(ste);
    }
    appendRepetitionCountIfNeeded(nextCP);
    currentCP=nextCP;
  }
  content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
}","public void insertListOfCallPoints(@Nullable List<CallPoint> callPoints){
  if (content.length() == 0) {
    content.append(EOL).append(""String_Node_Str"");
  }
  content.append(""String_Node_Str"");
  if (callPoints == null) {
    content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
    return;
  }
  content.append(EOL);
  CallPoint currentCP=callPoints.get(0);
  appendTestMethod(currentCP.getStackTraceElement());
  appendRepetitionCountIfNeeded(currentCP);
  for (int i=1, n=callPoints.size(); i < n; i++) {
    CallPoint nextCP=callPoints.get(i);
    StackTraceElement ste=nextCP.getStackTraceElement();
    if (nextCP.isSameTestMethod(currentCP)) {
      content.append(""String_Node_Str"").append(ste.getLineNumber());
    }
 else {
      content.append(""String_Node_Str"").append(EOL);
      appendTestMethod(ste);
    }
    appendRepetitionCountIfNeeded(nextCP);
    currentCP=nextCP;
  }
  content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
}",0.9105691056910568
164839,"@Override public void visit(int version,int access,@NotNull String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  interfaceName=name;
  String classSignature=signature + mockedTypeInfo.implementationSignature;
  super.visit(version,access,name,classSignature,superName,interfaces);
}","@Override public void visit(int version,int access,@NotNull String name,@Nullable String signature,@Nullable String superName,@Nullable String[] interfaces){
  interfaceName=name;
  String classSignature=signature == null ? null : signature + mockedTypeInfo.implementationSignature;
  super.visit(version,access,name,classSignature,superName,interfaces);
}",0.9605839416058394
164840,"LineSegmentsFormatter(boolean withCallPoints,@NotNull StringBuilder line){
  listOfCallPoints=withCallPoints ? new ListOfCallPoints() : null;
  this.line=line;
}","LineSegmentsFormatter(boolean withCallPoints,@NotNull StringBuilder formattedLine){
  listOfCallPoints=withCallPoints ? new ListOfCallPoints() : null;
  this.formattedLine=formattedLine;
}",0.9054441260744984
164841,"private void appendStartTag(@NotNull LineSegmentData segmentData){
  line.append(""String_Node_Str"").append(lineNumber).append('s').append(segmentIndex).append(""String_Node_Str"");
  appendTooltipWithExecutionCounts(segmentData);
  if (segmentData.isCovered()) {
    if (segmentData.containsCallPoints()) {
      line.append(""String_Node_Str"").append(segmentIndex).append(""String_Node_Str"");
    }
 else {
      line.append(""String_Node_Str"");
    }
  }
 else {
    line.append(""String_Node_Str"");
  }
}","private void appendStartTag(){
  formattedLine.append(""String_Node_Str"").append(lineNumber).append('s').append(segmentIndex);
  formattedLine.append(""String_Node_Str"").append(segmentData.getExecutionCount()).append(""String_Node_Str"");
  if (segmentData.isCovered()) {
    if (segmentData.containsCallPoints()) {
      formattedLine.append(""String_Node_Str"").append(segmentIndex).append(""String_Node_Str"");
    }
 else {
      formattedLine.append(""String_Node_Str"");
    }
  }
 else {
    formattedLine.append(""String_Node_Str"");
  }
}",0.4382239382239382
164842,"private void appendEndTag(@NotNull LineSegmentData segmentData){
  int i=line.length() - 1;
  while (isWhitespace(line.charAt(i))) {
    i--;
  }
  line.insert(i + 1,""String_Node_Str"");
  if (listOfCallPoints != null) {
    List<CallPoint> callPoints=segmentData.getCallPoints();
    listOfCallPoints.insertListOfCallPoints(callPoints);
  }
}","private void appendEndTag(){
  int i=formattedLine.length() - 1;
  while (isWhitespace(formattedLine.charAt(i))) {
    i--;
  }
  formattedLine.insert(i + 1,""String_Node_Str"");
  if (listOfCallPoints != null) {
    List<CallPoint> callPoints=segmentData.getCallPoints();
    listOfCallPoints.insertListOfCallPoints(callPoints);
  }
}",0.8681481481481481
164843,"private void appendToFormattedLine(@NotNull LineElement firstElement,@NotNull LineSegmentData segmentData){
  if (firstElement == element) {
    return;
  }
  appendStartTag(segmentData);
  firstElement.appendAllBefore(line,element);
  appendEndTag(segmentData);
  segmentIndex++;
}","private void appendToFormattedLine(@NotNull LineElement firstElement){
  if (firstElement != element) {
    appendStartTag();
    firstElement.appendAllBefore(formattedLine,element);
    appendEndTag();
    segmentIndex++;
  }
}",0.3490196078431372
164844,"void formatSegments(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  lineNumber=lineParser.getNumber();
  List<BranchCoverageData> branchData=lineData.getBranches();
  int numSegments=lineData.getNumberOfSegments();
  element=lineParser.getInitialElement().appendUntilNextCodeElement(line);
  segmentIndex=0;
  appendUntilFirstElementAfterNextBranchingPoint(lineData);
  while (element != null && segmentIndex < numSegments) {
    LineSegmentData segmentData=segmentIndex == 0 ? lineData : branchData.get(segmentIndex - 1);
    element=element.appendUntilNextCodeElement(line);
    appendUntilFirstElementAfterNextBranchingPoint(segmentData);
  }
  if (element != null) {
    element.appendAllBefore(line,null);
  }
  line.append(""String_Node_Str"");
  if (listOfCallPoints != null && lineData.containsCallPoints()) {
    line.append(listOfCallPoints.getContents());
  }
}","void formatSegments(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  lineNumber=lineParser.getNumber();
  List<BranchCoverageData> branchData=lineData.getBranches();
  int numSegments=lineData.getNumberOfSegments();
  element=lineParser.getInitialElement().appendUntilNextCodeElement(formattedLine);
  segmentIndex=0;
  segmentData=lineData;
  appendUntilNextBranchingPoint();
  while (element != null && segmentIndex < numSegments) {
    segmentData=segmentIndex == 0 ? lineData : branchData.get(segmentIndex - 1);
    element=element.appendUntilNextCodeElement(formattedLine);
    appendUntilNextBranchingPoint();
  }
  if (element != null) {
    element.appendAllBefore(formattedLine,null);
  }
  formattedLine.append(""String_Node_Str"");
  if (listOfCallPoints != null && lineData.containsCallPoints()) {
    formattedLine.append(listOfCallPoints.getContents());
  }
}",0.9170403587443946
164845,"@Test public void methodWithTrivialTernaryOperatorAndTrivialIfElse(){
  assertTrue(tested.returnsResultPreviouslyComputedFromInput(false,1));
  assertFalse(tested.returnsResultPreviouslyComputedFromInput(false,0));
  assertTrue(tested.returnsResultPreviouslyComputedFromInput(true,1));
  assertTrue(tested.returnsResultPreviouslyComputedFromInput(true,-1));
  findMethodData(77);
  assertPaths(4,3,4);
  assertPath(12,1);
  assertPath(11,1);
  assertPath(11,0);
  assertPath(10,2);
}","@Test public void methodWithTrivialTernaryOperatorAndTrivialIfElse(){
  assertTrue(tested.returnsResultPreviouslyComputedFromInput(false,1));
  assertFalse(tested.returnsResultPreviouslyComputedFromInput(false,0));
  assertTrue(tested.returnsResultPreviouslyComputedFromInput(true,1));
  assertTrue(tested.returnsResultPreviouslyComputedFromInput(true,-1));
  assertLines(77,86,5);
  assertLine(77,3,3,4,2,2);
  assertLine(80,2,2,4,3);
  assertLine(82,1,1,1);
  assertLine(83,1,1,1);
  assertLine(86,1,1,4);
  findMethodData(77);
  assertPaths(4,3,4);
  assertPath(12,1);
  assertPath(11,1);
  assertPath(11,0);
  assertPath(10,2);
}",0.8100358422939068
164846,"private void redefineTargetClassAndCreateInstanceFactory(@NotNull Type typeToMock){
  Integer mockedClassId=redefineClassesFromCache();
  if (mockedClassId == null) {
    return;
  }
  boolean redefined=redefineMethodsAndConstructorsInTargetType();
  if (redefined) {
    instanceFactory=createInstanceFactory(typeToMock);
    storeRedefinedClassesInCache(mockedClassId);
  }
}","private void redefineTargetClassAndCreateInstanceFactory(@NotNull Type typeToMock){
  Integer mockedClassId=redefineClassesFromCache();
  if (mockedClassId == null) {
    return;
  }
  boolean redefined=redefineMethodsAndConstructorsInTargetType();
  instanceFactory=createInstanceFactory(typeToMock);
  if (redefined) {
    storeRedefinedClassesInCache(mockedClassId);
  }
}",0.8563829787234043
164847,"@Test public void cascadeOneLevelDuringReplay(@Mocked Foo foo){
  cascadedBar1=foo.getBar();
  assertEquals(0,cascadedBar1.doSomething());
  cascadedBar2=Foo.globalBar();
  assertEquals(0,cascadedBar2.doSomething());
  Bar bar=foo.getBar();
  assertSame(cascadedBar1,bar);
  Bar globalBar=Foo.globalBar();
  assertSame(cascadedBar2,globalBar);
  assertNotSame(bar,globalBar);
  foo.doSomething(""String_Node_Str"");
  assertEquals(0,foo.getIntValue());
  assertFalse(foo.getBooleanValue());
  assertTrue(foo.getList().isEmpty());
  assertNotNull(foo.returnTypeWithWildcard());
  assertNotNull(foo.returnTypeWithBoundedTypeVariable());
  Entry<Baz,List<Integer>> x=foo.returnTypeWithMultipleTypeVariables();
  assertNotNull(x);
  HashMap<?,?> map=foo.getMap();
  assertNull(map);
}","@Test public void cascadeOneLevelDuringReplay(@Mocked Foo foo){
  cascadedBar1=foo.getBar();
  assertEquals(0,cascadedBar1.doSomething());
  cascadedBar2=Foo.globalBar();
  assertEquals(0,cascadedBar2.doSomething());
  Bar bar=foo.getBar();
  assertSame(cascadedBar1,bar);
  Bar globalBar=Foo.globalBar();
  assertSame(cascadedBar2,globalBar);
  assertNotSame(bar,globalBar);
  foo.doSomething(""String_Node_Str"");
  assertEquals(0,foo.getIntValue());
  assertFalse(foo.getBooleanValue());
  assertTrue(foo.getList().isEmpty());
  assertNotNull(foo.returnTypeWithWildcard());
  assertNotNull(foo.returnTypeWithBoundedTypeVariable());
  Entry<Baz,List<Integer>> x=foo.returnTypeWithMultipleTypeVariables();
  assertNotNull(x);
  HashMap<?,?> map=foo.getMap();
  assertNotNull(map);
}",0.9980756895445798
164848,"@Test public void recordSameInvocationInNotStrictExpectationBlockThenInStrictOne(){
  thrown.handleAssertionErrors();
  thrown.expect(AssertionError.class);
  new Expectations(){
{
      mock.value();
      result=1;
    }
  }
;
  new StrictExpectations(){
{
      mock.value();
      result=2;
    }
  }
;
  assertEquals(1,mock.value());
  assertEquals(1,mock.value());
}","@Test public void recordSameInvocationInNotStrictExpectationBlockThenInStrictOne(){
  thrown.expect(AssertionError.class);
  new Expectations(){
{
      mock.value();
      result=1;
    }
  }
;
  new StrictExpectations(){
{
      mock.value();
      result=2;
    }
  }
;
  assertEquals(1,mock.value());
  assertEquals(1,mock.value());
}",0.952112676056338
164849,"void clearIfAutomaticCreation(){
  if (createAutomatically) {
    Object testClassInstance=injectionState.getCurrentTestClassInstance();
    FieldReflection.setFieldValue(testedField,testClassInstance,null);
  }
}","void clearIfAutomaticCreation(){
  if (createAutomatically) {
    injectionState.clearInstantiatedDependencies();
    Object testClassInstance=injectionState.getCurrentTestClassInstance();
    FieldReflection.setFieldValue(testedField,testClassInstance,null);
  }
}",0.891213389121339
164850,"void formatSegments(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  lineNumber=lineParser.getNumber();
  List<BranchCoverageData> branchData=lineData.getBranches();
  int numSegments=lineData.getNumberOfSegments();
  element=lineParser.getInitialElement().appendUntilNextCodeElement(formattedLine);
  segmentIndex=0;
  segmentData=lineData;
  appendUntilNextBranchingPoint();
  while (element != null && segmentIndex < numSegments) {
    segmentData=segmentIndex == 0 ? lineData : branchData.get(segmentIndex - 1);
    element=element.appendUntilNextCodeElement(formattedLine);
    appendUntilNextBranchingPoint();
  }
  if (element != null) {
    element.appendAllBefore(formattedLine,null);
  }
  formattedLine.append(""String_Node_Str"");
  if (listOfCallPoints != null && lineData.containsCallPoints()) {
    formattedLine.append(listOfCallPoints.getContents());
  }
}","void formatSegments(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  lineNumber=lineParser.getNumber();
  List<BranchCoverageData> branchData=lineData.getBranches();
  int numSegments=lineData.getNumberOfSegments();
  element=lineParser.getInitialElement().appendUntilNextCodeElement(formattedLine);
  segmentIndex=0;
  segmentData=lineData;
  appendUntilNextBranchingPoint();
  while (element != null && segmentIndex < numSegments) {
    segmentData=segmentIndex == 0 ? lineData : branchData.get(segmentIndex - 1);
    element=element.appendUntilNextCodeElement(formattedLine);
    appendUntilNextBranchingPoint();
  }
  if (element != null) {
    element.appendAllBefore(formattedLine,null);
  }
  formattedLine.append(""String_Node_Str"");
  if (listOfCallPoints != null) {
    formattedLine.append(listOfCallPoints.getContents());
  }
}",0.9366076527698458
164851,"@Nullable private String getGenericReturnType(@NotNull String genericReturnTypeDesc){
  Type cascadingType=mockedType;
  if (!(cascadingType instanceof ParameterizedType)) {
    cascadingType=((Class<?>)cascadingType).getGenericSuperclass();
  }
  if (cascadingType instanceof ParameterizedType) {
    return getGenericReturnTypeWithTypeArguments(genericReturnTypeDesc,(ParameterizedType)cascadingType);
  }
  return getReturnTypeIfCascadingSupportedForIt(genericReturnTypeDesc);
}","@NotNull private Type getGenericReturnType(@NotNull Class<?> cascadingClass,@NotNull String methodNameAndDesc){
  Method cascadingMethod=new RealMethodOrConstructor(cascadingClass,methodNameAndDesc).getMember();
  Type genericReturnType=cascadingMethod.getGenericReturnType();
  if (genericReturnType instanceof TypeVariable<?>) {
    GenericTypeReflection typeReflection=new GenericTypeReflection(cascadingClass,mockedType);
    genericReturnType=typeReflection.resolveReturnType((TypeVariable<?>)genericReturnType);
  }
  return genericReturnType;
}",0.1453488372093023
164852,"@Nullable private Object getCascadedInstance(@NotNull String methodNameAndDesc,@NotNull String returnTypeInternalName){
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  if (returnType == null) {
    returnType=registerIntermediateCascadingType(methodNameAndDesc,returnTypeInternalName);
    if (returnType == null) {
      if (cascadedInstance != null) {
        return cascadedInstance;
      }
      returnType=mockedType;
    }
  }
  return createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}","@Nullable private Object getCascadedInstance(@NotNull String methodNameAndDesc,@NotNull String returnTypeInternalName){
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=mockedType instanceof Class<?> ? (Class<?>)mockedType : (Class<?>)((ParameterizedType)mockedType).getRawType();
    Type genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (cascadedInstance != null) {
        return cascadedInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType,null);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}",0.3667180277349769
164853,"private static void clearTestMethodArguments(@NotNull ITestResult testResult){
  testResult.setParameters(NO_ARGS);
}","private static void clearTestMethodArguments(@NotNull ITestResult testResult){
  Method method=testResult.getMethod().getConstructorOrMethod().getMethod();
  if (!isMethodWithParametersProvidedByTestNG(method)) {
    testResult.setParameters(NO_ARGS);
  }
}",0.6256684491978609
164854,"@Nullable private MockedTypeCascade getCascade(@NotNull String invokedTypeDesc,@NotNull Class<?> mockedType){
  Class<?> typeToLookFor=mockedType;
  do {
    String typeDesc=Type.getInternalName(typeToLookFor);
    if (invokedTypeDesc.equals(typeDesc)) {
      return null;
    }
    MockedTypeCascade cascade=cascadingTypes.get(typeDesc);
    if (cascade != null) {
      return cascade;
    }
    typeToLookFor=typeToLookFor.getSuperclass();
  }
 while (typeToLookFor != Object.class);
  return null;
}","@Nullable private MockedTypeCascade getCascade(@NotNull String invokedTypeDesc,@NotNull Class<?> mockedClass){
  Class<?> typeToLookFor=mockedClass;
  do {
    String typeDesc=Type.getInternalName(typeToLookFor);
    if (invokedTypeDesc.equals(typeDesc)) {
      return null;
    }
    MockedTypeCascade cascade=cascadingTypes.get(typeDesc);
    if (cascade != null) {
      cascade.mockedClass=mockedClass;
      return cascade;
    }
    typeToLookFor=typeToLookFor.getSuperclass();
  }
 while (typeToLookFor != Object.class);
  return null;
}",0.9456625357483316
164855,"@Nullable private Object getCascadedInstance(@NotNull String methodNameAndDesc,@NotNull String returnTypeInternalName){
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=mockedType instanceof Class<?> ? (Class<?>)mockedType : (Class<?>)((ParameterizedType)mockedType).getRawType();
    Type genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (cascadedInstance != null) {
        return cascadedInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType,null);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}","@Nullable private Object getCascadedInstance(@NotNull String methodNameAndDesc,@NotNull String returnTypeInternalName){
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  Class<?> returnClass;
  if (returnType == null) {
    Class<?> cascadingClass=getClassWithCalledMethod();
    Type genericReturnType=getGenericReturnType(cascadingClass,methodNameAndDesc);
    Class<?> resolvedReturnType=getClassType(genericReturnType);
    if (resolvedReturnType.isAssignableFrom(cascadingClass)) {
      if (cascadedInstance != null) {
        return cascadedInstance;
      }
      returnType=mockedType;
      returnClass=cascadingClass;
    }
 else {
      Object defaultReturnValue=DefaultValues.computeForType(resolvedReturnType);
      if (defaultReturnValue != null) {
        return defaultReturnValue;
      }
      cascadedTypesAndMocks.put(returnTypeInternalName,genericReturnType);
      CASCADING_TYPES.add(returnTypeInternalName,false,genericReturnType,null);
      returnType=genericReturnType;
      returnClass=resolvedReturnType;
    }
  }
 else {
    returnClass=getClassType(returnType);
  }
  if (getReturnTypeIfCascadingSupportedForIt(returnClass) == null) {
    return null;
  }
  return createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}",0.9511472982975574
164856,"private void registerCascadingAsNeeded(){
  boolean shouldCascade=mocked == null || mocked.cascading();
  if (shouldCascade && !(declaredType instanceof TypeVariable)) {
    TestRun.getExecutingTest().getCascadingTypes().add(fieldFromTestClass,declaredType,null);
  }
}","private void registerCascadingAsNeeded(){
  if (isMockableType()) {
    boolean shouldCascade=mocked == null || mocked.cascading();
    if (shouldCascade && !(declaredType instanceof TypeVariable)) {
      TestRun.getExecutingTest().getCascadingTypes().add(fieldFromTestClass,declaredType,null);
    }
  }
}",0.9340277777777778
164857,"@Override public void visitMethodInsn(int opcode,@NotNull String owner,@NotNull String name,@NotNull String desc,boolean itf){
  if (pendingCallToConstructorOfSameClass) {
    if (opcode == INVOKESPECIAL && ""String_Node_Str"".equals(name) && owner.equals(classDesc)) {
      mw.visitMethodInsn(opcode,owner,name,desc,itf);
      pendingCallToConstructorOfSameClass=false;
    }
  }
 else   if (callToAnotherConstructorAlreadyDisregarded || opcode != INVOKESPECIAL || !""String_Node_Str"".equals(name) || !owner.equals(superClassName) && !owner.equals(classDesc)) {
    mw.visitMethodInsn(opcode,owner,name,desc,itf);
  }
 else {
    mw.visitInsn(POP);
    callToAnotherConstructorAlreadyDisregarded=true;
  }
}","@Override public void visitMethodInsn(int opcode,@NotNull String owner,@NotNull String name,@NotNull String desc,boolean itf){
  if (pendingCallToConstructorOfSameClass) {
    if (opcode == INVOKESPECIAL && ""String_Node_Str"".equals(name) && owner.equals(classDesc)) {
      mw.visitMethodInsn(opcode,owner,name,desc,itf);
      pendingCallToConstructorOfSameClass=false;
    }
  }
 else   if (callToAnotherConstructorAlreadyDisregarded || opcode != INVOKESPECIAL || !""String_Node_Str"".equals(name) || !owner.equals(superClassName) && !owner.equals(classDesc)) {
    mw.visitMethodInsn(opcode,owner,name,desc,itf);
  }
 else {
    callToAnotherConstructorAlreadyDisregarded=true;
  }
}",0.9834651329978432
164858,"@Mock void $init(int i){
}","@Mock void $init(){
}",0.8936170212765957
164859,"@NotNull public InstanceFactory redefineType(){
  return redefineType(mockedType);
}","@Nullable public InstanceFactory redefineType(){
  return redefineType(mockedType);
}",0.9585798816568049
164860,"@NotNull private static Object createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(@NotNull String methodNameAndDesc,@NotNull Type mockedReturnType){
  InstanceFactory instanceFactory=TestRun.mockFixture().findInstanceFactory(mockedReturnType);
  if (instanceFactory == null) {
    String methodName=methodNameAndDesc.substring(0,methodNameAndDesc.indexOf('('));
    CascadingTypeRedefinition typeRedefinition=new CascadingTypeRedefinition(methodName,mockedReturnType);
    instanceFactory=typeRedefinition.redefineType();
  }
 else {
    Object lastInstance=instanceFactory.getLastInstance();
    if (lastInstance != null) {
      return lastInstance;
    }
  }
  Object cascadedInstance=instanceFactory.create();
  instanceFactory.clearLastInstance();
  TestRun.getExecutingTest().addInjectableMock(cascadedInstance);
  return cascadedInstance;
}","@Nullable private static Object createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(@NotNull String methodNameAndDesc,@NotNull Type mockedReturnType){
  InstanceFactory instanceFactory=TestRun.mockFixture().findInstanceFactory(mockedReturnType);
  if (instanceFactory == null) {
    String methodName=methodNameAndDesc.substring(0,methodNameAndDesc.indexOf('('));
    CascadingTypeRedefinition typeRedefinition=new CascadingTypeRedefinition(methodName,mockedReturnType);
    instanceFactory=typeRedefinition.redefineType();
    if (instanceFactory == null) {
      return null;
    }
  }
 else {
    Object lastInstance=instanceFactory.getLastInstance();
    if (lastInstance != null) {
      return lastInstance;
    }
  }
  Object cascadedInstance=instanceFactory.create();
  instanceFactory.clearLastInstance();
  TestRun.getExecutingTest().addInjectableMock(cascadedInstance);
  return cascadedInstance;
}",0.9586402266288953
164861,"@NotNull private Object getCascadedInstance(@NotNull String methodNameAndDesc,@NotNull String returnTypeInternalName){
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  if (returnType == null) {
    returnType=registerIntermediateCascadingType(methodNameAndDesc,returnTypeInternalName);
    if (returnType == null) {
      if (cascadedInstance != null) {
        return cascadedInstance;
      }
      returnType=mockedType;
    }
  }
  return createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}","@Nullable private Object getCascadedInstance(@NotNull String methodNameAndDesc,@NotNull String returnTypeInternalName){
  Type returnType=cascadedTypesAndMocks.get(returnTypeInternalName);
  if (returnType == null) {
    returnType=registerIntermediateCascadingType(methodNameAndDesc,returnTypeInternalName);
    if (returnType == null) {
      if (cascadedInstance != null) {
        return cascadedInstance;
      }
      returnType=mockedType;
    }
  }
  return createNewCascadedInstanceOrUseNonCascadedOneIfAvailable(methodNameAndDesc,returnType);
}",0.988256549232159
164862,"@Test public void cascadeOneLevelDuringReplay(@Mocked Foo foo){
  cascadedBar1=foo.getBar();
  assertEquals(0,cascadedBar1.doSomething());
  cascadedBar2=Foo.globalBar();
  assertEquals(0,cascadedBar2.doSomething());
  Bar bar=foo.getBar();
  assertSame(cascadedBar1,bar);
  Bar globalBar=Foo.globalBar();
  assertSame(cascadedBar2,globalBar);
  assertNotSame(bar,globalBar);
  foo.doSomething(""String_Node_Str"");
  assertEquals(0,foo.getIntValue());
  assertFalse(foo.getBooleanValue());
  assertTrue(foo.getList().isEmpty());
  assertNotNull(foo.returnTypeWithWildcard());
  assertNotNull(foo.returnTypeWithBoundedTypeVariable());
  Entry<Baz,List<Integer>> x=foo.returnTypeWithMultipleTypeVariables();
  assertNotNull(x);
}","@Test public void cascadeOneLevelDuringReplay(@Mocked Foo foo){
  cascadedBar1=foo.getBar();
  assertEquals(0,cascadedBar1.doSomething());
  cascadedBar2=Foo.globalBar();
  assertEquals(0,cascadedBar2.doSomething());
  Bar bar=foo.getBar();
  assertSame(cascadedBar1,bar);
  Bar globalBar=Foo.globalBar();
  assertSame(cascadedBar2,globalBar);
  assertNotSame(bar,globalBar);
  foo.doSomething(""String_Node_Str"");
  assertEquals(0,foo.getIntValue());
  assertFalse(foo.getBooleanValue());
  assertTrue(foo.getList().isEmpty());
  assertNotNull(foo.returnTypeWithWildcard());
  assertNotNull(foo.returnTypeWithBoundedTypeVariable());
  Entry<Baz,List<Integer>> x=foo.returnTypeWithMultipleTypeVariables();
  assertNotNull(x);
  HashMap<?,?> map=foo.getMap();
  assertNull(map);
}",0.9654255319148936
164863,"public static void fieldRead(@NotNull Object instance,@NotNull String file,@NotNull String classAndFieldNames){
  if (terminated)   return;
  CoverageData coverageData=CoverageData.instance();
  FileCoverageData fileData=coverageData.getFileData(file);
  fileData.dataCoverageInfo.registerReadOfInstanceField(instance,classAndFieldNames);
}","public static void fieldRead(@NotNull Object instance,@NotNull String file,@NotNull String classAndFieldNames){
  if (terminated)   return;
synchronized (TestRun.class) {
    CoverageData coverageData=CoverageData.instance();
    FileCoverageData fileData=coverageData.getFileData(file);
    fileData.dataCoverageInfo.registerReadOfInstanceField(instance,classAndFieldNames);
  }
}",0.9431345353675452
164864,"public static void branchExecuted(int fileIndex,int line,int branchIndex){
  if (terminated)   return;
  CoverageData coverageData=CoverageData.instance();
  PerFileLineCoverage fileData=coverageData.getFileData(fileIndex).lineCoverageInfo;
  CallPoint callPoint=null;
  if (coverageData.isWithCallPoints() && fileData.acceptsAdditionalCallPoints(line,branchIndex)) {
    callPoint=CallPoint.create(new Throwable());
  }
  fileData.registerExecution(line,branchIndex,callPoint);
}","public static void branchExecuted(int fileIndex,int line,int branchIndex){
  if (terminated)   return;
synchronized (TestRun.class) {
    CoverageData coverageData=CoverageData.instance();
    PerFileLineCoverage fileData=coverageData.getFileData(fileIndex).lineCoverageInfo;
    CallPoint callPoint=null;
    if (coverageData.isWithCallPoints() && fileData.acceptsAdditionalCallPoints(line,branchIndex)) {
      callPoint=CallPoint.create(new Throwable());
    }
    fileData.registerExecution(line,branchIndex,callPoint);
  }
}",0.9514370664023786
164865,"public static void fieldAssigned(@NotNull Object instance,@NotNull String file,@NotNull String classAndFieldNames){
  if (terminated)   return;
  CoverageData coverageData=CoverageData.instance();
  FileCoverageData fileData=coverageData.getFileData(file);
  fileData.dataCoverageInfo.registerAssignmentToInstanceField(instance,classAndFieldNames);
}","public static void fieldAssigned(@NotNull Object instance,@NotNull String file,@NotNull String classAndFieldNames){
  if (terminated)   return;
synchronized (TestRun.class) {
    CoverageData coverageData=CoverageData.instance();
    FileCoverageData fileData=coverageData.getFileData(file);
    fileData.dataCoverageInfo.registerAssignmentToInstanceField(instance,classAndFieldNames);
  }
}",0.9446693657219972
164866,"public static void nodeReached(@NotNull String file,int firstLineInMethodBody,int node){
  if (terminated)   return;
  CoverageData coverageData=CoverageData.instance();
  FileCoverageData fileData=coverageData.getFileData(file);
  fileData.pathCoverageInfo.registerExecution(firstLineInMethodBody,node);
}","public static void nodeReached(@NotNull String file,int firstLineInMethodBody,int node){
  if (terminated)   return;
synchronized (TestRun.class) {
    CoverageData coverageData=CoverageData.instance();
    FileCoverageData fileData=coverageData.getFileData(file);
    fileData.pathCoverageInfo.registerExecution(firstLineInMethodBody,node);
  }
}",0.9372128637059725
164867,"public static void lineExecuted(int fileIndex,int line){
  if (terminated)   return;
  CoverageData coverageData=CoverageData.instance();
  PerFileLineCoverage fileData=coverageData.getFileData(fileIndex).lineCoverageInfo;
  CallPoint callPoint=null;
  if (coverageData.isWithCallPoints() && fileData.acceptsAdditionalCallPoints(line)) {
    callPoint=CallPoint.create(new Throwable());
  }
  fileData.registerExecution(line,callPoint);
}","public static void lineExecuted(int fileIndex,int line){
  if (terminated)   return;
synchronized (TestRun.class) {
    CoverageData coverageData=CoverageData.instance();
    PerFileLineCoverage fileData=coverageData.getFileData(fileIndex).lineCoverageInfo;
    CallPoint callPoint=null;
    if (coverageData.isWithCallPoints() && fileData.acceptsAdditionalCallPoints(line)) {
      callPoint=CallPoint.create(new Throwable());
    }
    fileData.registerExecution(line,callPoint);
  }
}",0.947027027027027
164868,"public synchronized void registerReadOfInstanceField(@NotNull Object instance,@NotNull String classAndFieldNames){
  InstanceFieldData instanceData=getInstanceFieldData(classAndFieldNames);
  if (instanceData != null) {
    instanceData.registerRead(instance);
  }
}","public void registerReadOfInstanceField(@NotNull Object instance,@NotNull String classAndFieldNames){
  InstanceFieldData instanceData=getInstanceFieldData(classAndFieldNames);
  if (instanceData != null) {
    instanceData.registerRead(instance);
  }
}",0.97495183044316
164869,"public synchronized void registerAssignmentToStaticField(@NotNull String classAndFieldNames){
  StaticFieldData staticData=getStaticFieldData(classAndFieldNames);
  if (staticData != null) {
    staticData.registerAssignment();
  }
}","public void registerAssignmentToStaticField(@NotNull String classAndFieldNames){
  StaticFieldData staticData=getStaticFieldData(classAndFieldNames);
  if (staticData != null) {
    staticData.registerAssignment();
  }
}",0.9713024282560706
164870,"private <FI extends FieldData>void addFieldsFromPreviousTestRunIfAbsent(@NotNull Map<String,FI> currentInfo,@NotNull Map<String,FI> previousInfo){
  for (  Entry<String,FI> nameAndInfo : previousInfo.entrySet()) {
    String fieldName=nameAndInfo.getKey();
    if (!currentInfo.containsKey(fieldName)) {
      currentInfo.put(fieldName,previousInfo.get(fieldName));
    }
  }
}","private static <FI extends FieldData>void addFieldsFromPreviousTestRunIfAbsent(@NotNull Map<String,FI> currentInfo,@NotNull Map<String,FI> previousInfo){
  for (  Entry<String,FI> nameAndInfo : previousInfo.entrySet()) {
    String fieldName=nameAndInfo.getKey();
    if (!currentInfo.containsKey(fieldName)) {
      currentInfo.put(fieldName,previousInfo.get(fieldName));
    }
  }
}",0.990801576872536
164871,"private <FI extends FieldData>void addInfoFromPreviousTestRun(@NotNull Map<String,FI> currentInfo,@NotNull Map<String,FI> previousInfo){
  for (  Entry<String,FI> nameAndInfo : currentInfo.entrySet()) {
    String fieldName=nameAndInfo.getKey();
    FieldData previousFieldInfo=previousInfo.get(fieldName);
    if (previousFieldInfo != null) {
      FieldData fieldInfo=nameAndInfo.getValue();
      fieldInfo.addCountsFromPreviousTestRun(previousFieldInfo);
    }
  }
}","private static <FI extends FieldData>void addInfoFromPreviousTestRun(@NotNull Map<String,FI> currentInfo,@NotNull Map<String,FI> previousInfo){
  for (  Entry<String,FI> nameAndInfo : currentInfo.entrySet()) {
    String fieldName=nameAndInfo.getKey();
    FieldData previousFieldInfo=previousInfo.get(fieldName);
    if (previousFieldInfo != null) {
      FieldData fieldInfo=nameAndInfo.getValue();
      fieldInfo.addCountsFromPreviousTestRun(previousFieldInfo);
    }
  }
}",0.9926082365364308
164872,"public synchronized void registerReadOfStaticField(@NotNull String classAndFieldNames){
  StaticFieldData staticData=getStaticFieldData(classAndFieldNames);
  if (staticData != null) {
    staticData.registerRead();
  }
}","public void registerReadOfStaticField(@NotNull String classAndFieldNames){
  StaticFieldData staticData=getStaticFieldData(classAndFieldNames);
  if (staticData != null) {
    staticData.registerRead();
  }
}",0.9696969696969696
164873,"public synchronized void registerAssignmentToInstanceField(@NotNull Object instance,@NotNull String classAndFieldNames){
  InstanceFieldData instanceData=getInstanceFieldData(classAndFieldNames);
  if (instanceData != null) {
    instanceData.registerAssignment(instance);
  }
}","public void registerAssignmentToInstanceField(@NotNull Object instance,@NotNull String classAndFieldNames){
  InstanceFieldData instanceData=getInstanceFieldData(classAndFieldNames);
  if (instanceData != null) {
    instanceData.registerAssignment(instance);
  }
}",0.9760589318600368
164874,"public void addLine(int line){
  if (!lineToLineData.containsKey(line)) {
    lineToLineData.put(line,null);
  }
  if (line > lastLine) {
    if (executionCounts != NO_EXECUTIONS_YET && line >= executionCounts.length) {
synchronized (lineToLineData) {
        int[] newCounts=new int[line + 30];
        System.arraycopy(executionCounts,0,newCounts,0,executionCounts.length);
        executionCounts=newCounts;
      }
    }
    lastLine=line;
  }
}","public void addLine(int line){
  if (!lineToLineData.containsKey(line)) {
    lineToLineData.put(line,null);
  }
  if (line > lastLine) {
    int[] initialExecutionCounts=executionCounts;
    if (initialExecutionCounts != NO_EXECUTIONS_YET && line >= initialExecutionCounts.length) {
      int[] newCounts=new int[line + 30];
      System.arraycopy(initialExecutionCounts,0,newCounts,0,initialExecutionCounts.length);
      executionCounts=newCounts;
    }
    lastLine=line;
  }
}",0.821505376344086
164875,"private void computeValuesIfNeeded(){
  if (totalSegments >= 0)   return;
  totalSegments=coveredSegments=0;
  for (int line=1, n=lastLine; line <= n; line++) {
    if (lineToLineData.containsKey(line)) {
      LineCoverageData lineData=lineToLineData.get(line);
      if (lineData == null) {
        totalSegments++;
        if (executionCounts != NO_EXECUTIONS_YET && executionCounts[line] > 0) {
          coveredSegments++;
        }
      }
 else {
        totalSegments+=lineData.getNumberOfSegments();
        coveredSegments+=lineData.getNumberOfCoveredSegments();
      }
    }
  }
}","private void computeValuesIfNeeded(){
  if (totalSegments >= 0)   return;
  totalSegments=coveredSegments=0;
  for (int line=1, n=lastLine; line <= n; line++) {
    if (lineToLineData.containsKey(line)) {
      LineCoverageData lineData=lineToLineData.get(line);
      int executionCount=executionCounts == NO_EXECUTIONS_YET ? 0 : executionCounts[line];
      if (lineData == null) {
        totalSegments++;
        if (executionCount > 0) {
          coveredSegments++;
        }
      }
 else {
        lineData.setExecutionCount(executionCount);
        totalSegments+=lineData.getNumberOfSegments();
        coveredSegments+=lineData.getNumberOfCoveredSegments();
      }
    }
  }
}",0.8
164876,"public synchronized void registerExecution(int firstLineInMethodBody,int node){
  MethodCoverageData methodData=firstLineToMethodData.get(firstLineInMethodBody);
  if (methodData != null) {
    methodData.markNodeAsReached(node);
  }
}","public void registerExecution(int firstLineInMethodBody,int node){
  MethodCoverageData methodData=firstLineToMethodData.get(firstLineInMethodBody);
  if (methodData != null) {
    methodData.markNodeAsReached(node);
  }
}",0.9715536105032824
164877,"@Nullable public static Object getMock(@NotNull String mockedTypeDesc,@NotNull String mockedMethodNameAndDesc,@Nullable Object mockInstance,@NotNull String returnTypeDesc,@Nullable String genericReturnTypeDesc){
  char typeCode=returnTypeDesc.charAt(0);
  if (typeCode != 'L') {
    return null;
  }
  MockedTypeCascade cascade=CASCADING_TYPES.getCascade(mockedTypeDesc,mockInstance);
  if (cascade == null) {
    return null;
  }
  String resolvedReturnTypeDesc=null;
  if (genericReturnTypeDesc != null) {
    resolvedReturnTypeDesc=cascade.getGenericReturnType(genericReturnTypeDesc);
  }
  if (resolvedReturnTypeDesc == null) {
    resolvedReturnTypeDesc=getReturnTypeIfCascadingSupportedForIt(returnTypeDesc);
  }
  if (resolvedReturnTypeDesc == null) {
    return null;
  }
  return cascade.getCascadedInstance(mockedMethodNameAndDesc,resolvedReturnTypeDesc);
}","@Nullable public static Object getMock(@NotNull String mockedTypeDesc,@NotNull String mockedMethodNameAndDesc,@Nullable Object mockInstance,@NotNull String returnTypeDesc,@Nullable String genericReturnTypeDesc){
  char typeCode=returnTypeDesc.charAt(0);
  if (typeCode != 'L') {
    return null;
  }
  MockedTypeCascade cascade=CASCADING_TYPES.getCascade(mockedTypeDesc,mockInstance);
  if (cascade == null) {
    return null;
  }
  String resolvedReturnTypeDesc=null;
  if (genericReturnTypeDesc != null) {
    resolvedReturnTypeDesc=cascade.getGenericReturnType(genericReturnTypeDesc);
  }
  if (resolvedReturnTypeDesc == null) {
    resolvedReturnTypeDesc=getReturnTypeIfCascadingSupportedForIt(returnTypeDesc);
    if (resolvedReturnTypeDesc == null) {
      return null;
    }
  }
 else   if (resolvedReturnTypeDesc.charAt(0) == '[') {
    return DefaultValues.computeForArrayType(resolvedReturnTypeDesc);
  }
  return cascade.getCascadedInstance(mockedMethodNameAndDesc,resolvedReturnTypeDesc);
}",0.9149277688603532
164878,"public static Object defaultValueForPrimitiveType(Class<?> type){
  if (type == int.class) {
    return ZERO_INT;
  }
 else   if (type == boolean.class) {
    return Boolean.FALSE;
  }
 else   if (type == long.class) {
    return ZERO_LONG;
  }
 else   if (type == double.class) {
    return ZERO_DOUBLE;
  }
 else   if (type == float.class) {
    return ZERO_FLOAT;
  }
 else   if (type == char.class) {
    return ZERO_CHAR;
  }
 else   if (type == byte.class) {
    return ZERO_BYTE;
  }
 else {
    return ZERO_SHORT;
  }
}","@NotNull public static Object defaultValueForPrimitiveType(@NotNull Class<?> type){
  if (type == int.class) {
    return ZERO_INT;
  }
 else   if (type == boolean.class) {
    return Boolean.FALSE;
  }
 else   if (type == long.class) {
    return ZERO_LONG;
  }
 else   if (type == double.class) {
    return ZERO_DOUBLE;
  }
 else   if (type == float.class) {
    return ZERO_FLOAT;
  }
 else   if (type == char.class) {
    return ZERO_CHAR;
  }
 else   if (type == byte.class) {
    return ZERO_BYTE;
  }
 else {
    return ZERO_SHORT;
  }
}",0.9832089552238806
164879,"@Nullable public static Object computeForType(Class<?> type){
  if (type.isArray()) {
    return Array.newInstance(type.getComponentType(),0);
  }
 else   if (type != void.class && type.isPrimitive()) {
    return defaultValueForPrimitiveType(type);
  }
  return computeForWrapperType(type);
}","@Nullable public static Object computeForType(@NotNull Class<?> type){
  if (type.isArray()) {
    return Array.newInstance(type.getComponentType(),0);
  }
 else   if (type != void.class && type.isPrimitive()) {
    return defaultValueForPrimitiveType(type);
  }
  return computeForWrapperType(type);
}",0.984873949579832
164880,"@SuppressWarnings(""String_Node_Str"") @Nullable public static <T>T computeForWrapperType(java.lang.reflect.Type type){
  if (type == Integer.class) {
    return (T)ZERO_INT;
  }
 else   if (type == Boolean.class) {
    return (T)Boolean.FALSE;
  }
 else   if (type == Long.class) {
    return (T)ZERO_LONG;
  }
 else   if (type == Double.class) {
    return (T)ZERO_DOUBLE;
  }
 else   if (type == Float.class) {
    return (T)ZERO_FLOAT;
  }
 else   if (type == Character.class) {
    return (T)ZERO_CHAR;
  }
 else   if (type == Byte.class) {
    return (T)ZERO_BYTE;
  }
 else   if (type == Short.class) {
    return (T)ZERO_SHORT;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Nullable public static <T>T computeForWrapperType(@NotNull java.lang.reflect.Type type){
  if (type == Integer.class) {
    return (T)ZERO_INT;
  }
 else   if (type == Boolean.class) {
    return (T)Boolean.FALSE;
  }
 else   if (type == Long.class) {
    return (T)ZERO_LONG;
  }
 else   if (type == Double.class) {
    return (T)ZERO_DOUBLE;
  }
 else   if (type == Float.class) {
    return (T)ZERO_FLOAT;
  }
 else   if (type == Character.class) {
    return (T)ZERO_CHAR;
  }
 else   if (type == Byte.class) {
    return (T)ZERO_BYTE;
  }
 else   if (type == Short.class) {
    return (T)ZERO_SHORT;
  }
  return null;
}",0.9931662870159452
164881,"Runnable doSomething(){
  return null;
}","T doSomething(){
  return null;
}",0.8767123287671232
164882,"@Nullable Integer getLine(){
  return (Integer)label.info;
}","@Nullable Integer getLine(){
  return label.info == null ? label.line : (Integer)label.info;
}",0.7792207792207793
164883,"public int addBranchingPoint(@NotNull Label jumpSource,@NotNull Label jumpTarget){
  int initialIndex=branches.size();
  if (initialIndex == 0) {
    branches=new ArrayList<BranchCoverageData>(4);
  }
 else {
    int existingBranchIndex=findBranchIndex(jumpSource,jumpTarget);
    if (existingBranchIndex >= 0) {
      return existingBranchIndex;
    }
  }
  branches.add(new BranchCoverageData(jumpSource));
  branches.add(new BranchCoverageData(jumpTarget));
  return initialIndex;
}","public int addBranchingPoint(@NotNull Label jumpSource,@NotNull Label jumpTarget){
  int initialIndex=branches.size();
  if (initialIndex == 0) {
    branches=new ArrayList<BranchCoverageData>(4);
  }
  branches.add(new BranchCoverageData(jumpSource));
  branches.add(new BranchCoverageData(jumpTarget));
  return initialIndex;
}",0.5036855036855037
164884,"public int getNumberOfSegments(){
  int n=branches.size();
  if (n == 0) {
    return 1;
  }
  BranchCoverageData branch=branches.get(0);
  Integer sourceLine=branch.getLine();
  int count=2;
  for (int i=1; i < n; i+=2) {
    branch=branches.get(i);
    Integer targetLine=branch.getLine();
    if (targetLine != null && targetLine.equals(sourceLine)) {
      count++;
    }
  }
  return count;
}","public int getNumberOfSegments(){
  int previouslyCounted=segments;
  if (previouslyCounted > 0) {
    return previouslyCounted;
  }
  int n=branches.size();
  if (n == 0) {
    return 1;
  }
  BranchCoverageData branch=branches.get(0);
  Integer sourceLine=branch.getLine();
  int count=1;
  for (int i=1; i < n; i+=2) {
    branch=branches.get(i);
    Integer targetLine=branch.getLine();
    if (targetLine != null && targetLine.equals(sourceLine)) {
      count++;
    }
    count++;
  }
  segments=count;
  return count;
}",0.8571428571428571
164885,"@SuppressWarnings(""String_Node_Str"") void addResult(@Nullable Object value){
  if (value == null) {
    getResults().addReturnValueResult(null);
  }
 else   if (isReplacementInstance(value)) {
    invocation.replacementInstance=value;
  }
 else   if (value instanceof Throwable) {
    getResults().addThrowable((Throwable)value);
  }
 else   if (value instanceof mockit.Delegate) {
    getResults().addDelegatedResult((mockit.Delegate<?>)value);
  }
 else {
    Class<?> rt=getReturnType();
    if (rt.isInstance(value)) {
      substituteCascadedMockToBeReturnedIfNeeded(value);
      getResults().addReturnValueResult(value);
    }
 else {
      new ReturnTypeConversion(this,rt,value).addConvertedValue();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") void addResult(@Nullable Object value){
  if (value == null) {
    getResults().addReturnValueResult(null);
  }
 else   if (isReplacementInstance(value)) {
    invocation.replacementInstance=value;
  }
 else   if (value instanceof Throwable) {
    getResults().addThrowable((Throwable)value);
  }
 else   if (value instanceof mockit.Delegate) {
    getResults().addDelegatedResult((mockit.Delegate<?>)value);
  }
 else {
    Class<?> rt=getReturnType();
    if (rt.isInstance(value)) {
      clearNextInstanceToMatchIfRecording();
      getResults().addReturnValueResult(value);
    }
 else {
      new ReturnTypeConversion(this,rt,value).addConvertedValue();
    }
  }
}",0.9453781512605042
164886,"void addConvertedValueOrValues(){
  boolean valueIsArray=valueToReturn.getClass().isArray();
  boolean valueIsIterable=valueToReturn instanceof Iterable<?>;
  InvocationResults results=expectation.getResults();
  if (valueIsArray || valueIsIterable || valueToReturn instanceof Iterator<?>) {
    if (returnType == void.class || hasReturnOfDifferentType()) {
      if (valueIsArray) {
        results.addReturnValues(valueToReturn);
      }
 else       if (valueIsIterable) {
        results.addReturnValues((Iterable<?>)valueToReturn);
      }
 else {
        results.addDeferredReturnValues((Iterator<?>)valueToReturn);
      }
      return;
    }
  }
  expectation.substituteCascadedMockToBeReturnedIfNeeded(valueToReturn);
  results.addReturnValue(valueToReturn);
}","void addConvertedValueOrValues(){
  boolean valueIsArray=valueToReturn.getClass().isArray();
  boolean valueIsIterable=valueToReturn instanceof Iterable<?>;
  InvocationResults results=expectation.getResults();
  if (valueIsArray || valueIsIterable || valueToReturn instanceof Iterator<?>) {
    if (returnType == void.class || hasReturnOfDifferentType()) {
      if (valueIsArray) {
        results.addReturnValues(valueToReturn);
      }
 else       if (valueIsIterable) {
        results.addReturnValues((Iterable<?>)valueToReturn);
      }
 else {
        results.addDeferredReturnValues((Iterator<?>)valueToReturn);
      }
      return;
    }
  }
  expectation.clearNextInstanceToMatchIfRecording();
  results.addReturnValue(valueToReturn);
}",0.9406332453825856
164887,"private void produceCascadedInstanceIfApplicable(@Nullable TestOnlyPhase phase,@NotNull String returnTypeDesc,@Nullable String genericReturnTypeDesc){
  String mockedTypeDesc=getClassDesc();
  cascadedMock=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,genericReturnTypeDesc);
  if (cascadedMock != null) {
    if (phase != null) {
      phase.setNextInstanceToMatch(cascadedMock);
    }
    defaultReturnValue=cascadedMock;
  }
}","private void produceCascadedInstanceIfApplicable(@Nullable TestOnlyPhase phase,@NotNull String returnTypeDesc,@Nullable String genericReturnTypeDesc){
  String mockedTypeDesc=getClassDesc();
  Object cascadedMock=MockedTypeCascade.getMock(mockedTypeDesc,arguments.methodNameAndDesc,instance,returnTypeDesc,genericReturnTypeDesc);
  if (cascadedMock != null) {
    if (phase != null) {
      phase.setNextInstanceToMatch(cascadedMock);
    }
    defaultReturnValue=cascadedMock;
  }
}",0.9927007299270072
164888,"private void assertDefaultEqualsBehavior(Object a,Object b){
  assertFalse(a.equals(null));
  assertFalse(a.equals(""String_Node_Str""));
  assertTrue(a.equals(a));
  assertFalse(a.equals(b));
}","void assertDefaultEqualsBehavior(Object obj1,Object obj2){
  assertFalse(obj1.equals(null));
  assertFalse(obj1.equals(""String_Node_Str""));
  assertTrue(obj1.equals(obj1));
  assertFalse(obj1.equals(obj2));
}",0.8
164889,"@Override public void beforeInvocation(@NotNull IInvokedMethod invokedMethod,@NotNull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass && testClass.getClass().getName().equals(testClass.getName())) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    Method method=testNGMethod.getConstructorOrMethod().getMethod();
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForMockParameters(method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}","@Override public void beforeInvocation(@NotNull IInvokedMethod invokedMethod,@NotNull ITestResult testResult){
  ITestNGMethod testNGMethod=testResult.getMethod();
  Class<?> testClass=testResult.getTestClass().getRealClass();
  if (!invokedMethod.isTestMethod()) {
    beforeConfigurationMethod(testNGMethod,testClass);
    return;
  }
  Object testInstance=testResult.getInstance();
  if (testInstance == null || testInstance.getClass() != testClass && !testClass.getClass().getName().equals(testClass.getName())) {
    return;
  }
  TestRun.enterNoMockingZone();
  try {
    updateTestClassState(testInstance,testClass);
    TestRun.setRunningIndividualTest(testInstance);
    SavePoint testMethodSavePoint=new SavePoint();
    savePoint.set(testMethodSavePoint);
    if (shouldPrepareForNextTest) {
      TestRun.prepareForNextTest();
      shouldPrepareForNextTest=false;
    }
    Method method=testNGMethod.getConstructorOrMethod().getMethod();
    if (!isMethodWithParametersProvidedByTestNG(method)) {
      Object[] parameters=testResult.getParameters();
      Object[] mockParameters=createInstancesForMockParameters(method,parameters);
      if (mockParameters != null) {
        System.arraycopy(mockParameters,0,parameters,0,parameters.length);
      }
    }
    createInstancesForTestedFields(testInstance);
  }
  finally {
    TestRun.exitNoMockingZone();
  }
}",0.9996367598982928
164890,"@Override public void visitMethodInsn(int opcode,@NotNull String owner,@NotNull String name,@NotNull String desc,boolean itf){
  if (callToAnotherConstructorAlreadyDisregarded || opcode != INVOKESPECIAL || !""String_Node_Str"".equals(name) || !owner.equals(superClassName) && !owner.equals(classDesc)) {
    mw.visitMethodInsn(opcode,owner,name,desc,itf);
  }
 else {
    mw.visitInsn(POP);
    callToAnotherConstructorAlreadyDisregarded=true;
  }
}","@Override public void visitMethodInsn(int opcode,@NotNull String owner,@NotNull String name,@NotNull String desc,boolean itf){
  if (pendingCallToConstructorOfSameClass) {
    if (opcode == INVOKESPECIAL && ""String_Node_Str"".equals(name) && owner.equals(classDesc)) {
      mw.visitMethodInsn(opcode,owner,name,desc,itf);
      pendingCallToConstructorOfSameClass=false;
    }
  }
 else   if (callToAnotherConstructorAlreadyDisregarded || opcode != INVOKESPECIAL || !""String_Node_Str"".equals(name) || !owner.equals(superClassName) && !owner.equals(classDesc)) {
    mw.visitMethodInsn(opcode,owner,name,desc,itf);
  }
 else {
    mw.visitInsn(POP);
    callToAnotherConstructorAlreadyDisregarded=true;
  }
}",0.6897746967071057
164891,"/** 
 * Just creates a new MethodWriter which will write out the method bytecode when visited. <p/> Removes any ""abstract"" or ""native"" modifiers for the modified version.
 */
protected final void startModifiedMethodVersion(int access,@NotNull String name,@NotNull String desc,@Nullable String signature,@Nullable String[] exceptions){
  mw=cw.visitMethod(access & METHOD_ACCESS_MASK,name,desc,signature,exceptions);
  methodAccess=access;
  methodName=name;
  methodDesc=desc;
  callToAnotherConstructorAlreadyDisregarded=false;
  if (isNative(access)) {
    TestRun.mockFixture().addRedefinedClassWithNativeMethods(classDesc);
  }
}","/** 
 * Just creates a new MethodWriter which will write out the method bytecode when visited. <p/> Removes any ""abstract"" or ""native"" modifiers for the modified version.
 */
protected final void startModifiedMethodVersion(int access,@NotNull String name,@NotNull String desc,@Nullable String signature,@Nullable String[] exceptions){
  mw=cw.visitMethod(access & METHOD_ACCESS_MASK,name,desc,signature,exceptions);
  methodAccess=access;
  methodName=name;
  methodDesc=desc;
  if (isNative(access)) {
    TestRun.mockFixture().addRedefinedClassWithNativeMethods(classDesc);
  }
}",0.957166392092257
164892,"public void insertListOfCallPoints(@Nullable List<CallPoint> callPoints){
  if (content.length() == 0) {
    content.append(EOL).append(""String_Node_Str"");
  }
  if (callPoints == null) {
    content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
    return;
  }
  content.append(""String_Node_Str"").append(EOL);
  CallPoint currentCP=callPoints.get(0);
  appendTestMethod(currentCP.getStackTraceElement());
  appendRepetitionCountIfNeeded(currentCP);
  for (int i=1, n=callPoints.size(); i < n; i++) {
    CallPoint nextCP=callPoints.get(i);
    StackTraceElement ste=nextCP.getStackTraceElement();
    if (nextCP.isSameTestMethod(currentCP)) {
      content.append(""String_Node_Str"").append(ste.getLineNumber());
    }
 else {
      content.append(""String_Node_Str"").append(EOL);
      appendTestMethod(ste);
    }
    appendRepetitionCountIfNeeded(nextCP);
    currentCP=nextCP;
  }
  content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
}","public void insertListOfCallPoints(@Nullable List<CallPoint> callPoints){
  if (callPoints == null) {
    return;
  }
  if (content.length() == 0) {
    content.append(EOL).append(""String_Node_Str"");
  }
  content.append(""String_Node_Str"").append(EOL);
  CallPoint currentCP=callPoints.get(0);
  appendTestMethod(currentCP.getStackTraceElement());
  appendRepetitionCountIfNeeded(currentCP);
  for (int i=1, n=callPoints.size(); i < n; i++) {
    CallPoint nextCP=callPoints.get(i);
    StackTraceElement ste=nextCP.getStackTraceElement();
    if (nextCP.isSameTestMethod(currentCP)) {
      content.append(""String_Node_Str"").append(ste.getLineNumber());
    }
 else {
      content.append(""String_Node_Str"").append(EOL);
      appendTestMethod(ste);
    }
    appendRepetitionCountIfNeeded(nextCP);
    currentCP=nextCP;
  }
  content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
}",0.4476239141543178
164893,"void substituteCascadedMockToBeReturnedIfNeeded(){
  Object cascadedMock=invocation.getCascadedMock();
  if (cascadedMock != null) {
    TestRun.getExecutingTest().discardCascadedMockWhenInjectable(cascadedMock);
    if (recordPhase != null) {
      recordPhase.setNextInstanceToMatch(null);
    }
  }
}","void substituteCascadedMockToBeReturnedIfNeeded(@NotNull Object instanceToBeReturned){
  Object cascadedMock=invocation.getCascadedMock();
  if (cascadedMock != null && cascadedMock != instanceToBeReturned) {
    TestRun.getExecutingTest().discardCascadedMockWhenInjectable(cascadedMock);
    if (recordPhase != null) {
      recordPhase.setNextInstanceToMatch(null);
    }
  }
}",0.8768328445747801
164894,"@SuppressWarnings(""String_Node_Str"") void addResult(@Nullable Object value){
  if (value == null) {
    getResults().addReturnValueResult(null);
  }
 else   if (isReplacementInstance(value)) {
    invocation.replacementInstance=value;
  }
 else   if (value instanceof Throwable) {
    getResults().addThrowable((Throwable)value);
  }
 else   if (value instanceof mockit.Delegate) {
    getResults().addDelegatedResult((mockit.Delegate<?>)value);
  }
 else {
    Class<?> rt=getReturnType();
    if (rt.isInstance(value)) {
      substituteCascadedMockToBeReturnedIfNeeded();
      getResults().addReturnValueResult(value);
    }
 else {
      new ReturnTypeConversion(this,rt,value).addConvertedValue();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") void addResult(@Nullable Object value){
  if (value == null) {
    getResults().addReturnValueResult(null);
  }
 else   if (isReplacementInstance(value)) {
    invocation.replacementInstance=value;
  }
 else   if (value instanceof Throwable) {
    getResults().addThrowable((Throwable)value);
  }
 else   if (value instanceof mockit.Delegate) {
    getResults().addDelegatedResult((mockit.Delegate<?>)value);
  }
 else {
    Class<?> rt=getReturnType();
    if (rt.isInstance(value)) {
      substituteCascadedMockToBeReturnedIfNeeded(value);
      getResults().addReturnValueResult(value);
    }
 else {
      new ReturnTypeConversion(this,rt,value).addConvertedValue();
    }
  }
}",0.9965156794425089
164895,"private void addResultFromSingleValue(){
  if (returnType == Object.class) {
    expectation.getResults().addReturnValueResult(valueToReturn);
  }
 else   if (returnType == void.class) {
    throw newIncompatibleTypesException();
  }
 else   if (returnType.isArray()) {
    Object array=Array.newInstance(returnType.getComponentType(),1);
    Array.set(array,0,valueToReturn);
    expectation.getResults().addReturnValueResult(array);
  }
 else   if (returnType.isAssignableFrom(ArrayList.class)) {
    addCollectionWithSingleElement(new ArrayList<Object>(1));
  }
 else   if (returnType.isAssignableFrom(LinkedList.class)) {
    addCollectionWithSingleElement(new LinkedList<Object>());
  }
 else   if (returnType.isAssignableFrom(HashSet.class)) {
    addCollectionWithSingleElement(new HashSet<Object>(1));
  }
 else   if (returnType.isAssignableFrom(TreeSet.class)) {
    addCollectionWithSingleElement(new TreeSet<Object>());
  }
 else   if (returnType.isAssignableFrom(ListIterator.class)) {
    List<Object> l=new ArrayList<Object>(1);
    l.add(valueToReturn);
    expectation.getResults().addReturnValueResult(l.listIterator());
  }
 else   if (valueToReturn instanceof CharSequence) {
    addCharSequence((CharSequence)valueToReturn);
  }
 else {
    Class<?> primitiveType=AutoBoxing.getPrimitiveType(valueToReturn.getClass());
    if (primitiveType != null) {
      Class<?>[] parameterType={primitiveType};
      Object convertedValue=newInstanceUsingPublicConstructorIfAvailable(returnType,parameterType,valueToReturn);
      if (convertedValue == null) {
        convertedValue=MethodReflection.invokePublicIfAvailable(returnType,null,""String_Node_Str"",parameterType,valueToReturn);
      }
      if (convertedValue != null) {
        expectation.getResults().addReturnValueResult(convertedValue);
        return;
      }
    }
    throw newIncompatibleTypesException();
  }
}","private void addResultFromSingleValue(){
  if (returnType == Object.class) {
    addReturnValue(valueToReturn);
  }
 else   if (returnType == void.class) {
    throw newIncompatibleTypesException();
  }
 else   if (returnType.isArray()) {
    addArray();
  }
 else   if (returnType.isAssignableFrom(ArrayList.class)) {
    addCollectionWithSingleElement(new ArrayList<Object>(1));
  }
 else   if (returnType.isAssignableFrom(LinkedList.class)) {
    addCollectionWithSingleElement(new LinkedList<Object>());
  }
 else   if (returnType.isAssignableFrom(HashSet.class)) {
    addCollectionWithSingleElement(new HashSet<Object>(1));
  }
 else   if (returnType.isAssignableFrom(TreeSet.class)) {
    addCollectionWithSingleElement(new TreeSet<Object>());
  }
 else   if (returnType.isAssignableFrom(ListIterator.class)) {
    addListIterator();
  }
 else   if (valueToReturn instanceof CharSequence) {
    addCharSequence((CharSequence)valueToReturn);
  }
 else {
    addPrimitiveValue();
  }
}",0.6712946893439777
164896,"void addConvertedValue(){
  Class<?> wrapperType=AutoBoxing.isWrapperOfPrimitiveType(returnType) ? returnType : AutoBoxing.getWrapperType(returnType);
  Class<?> valueType=valueToReturn.getClass();
  if (valueType == wrapperType) {
    expectation.getResults().addReturnValueResult(valueToReturn);
  }
 else   if (wrapperType != null && AutoBoxing.isWrapperOfPrimitiveType(valueType)) {
    addPrimitiveValueConvertingAsNeeded(wrapperType);
  }
 else {
    boolean valueIsArray=valueType.isArray();
    if (valueIsArray || valueToReturn instanceof Iterable<?> || valueToReturn instanceof Iterator<?>) {
      addMultiValuedResultBasedOnTheReturnType(valueIsArray);
    }
 else     if (wrapperType != null) {
      throw newIncompatibleTypesException();
    }
 else {
      addResultFromSingleValue();
    }
  }
}","void addConvertedValue(){
  Class<?> wrapperType=AutoBoxing.isWrapperOfPrimitiveType(returnType) ? returnType : AutoBoxing.getWrapperType(returnType);
  Class<?> valueType=valueToReturn.getClass();
  if (valueType == wrapperType) {
    addReturnValue(valueToReturn);
  }
 else   if (wrapperType != null && AutoBoxing.isWrapperOfPrimitiveType(valueType)) {
    addPrimitiveValueConvertingAsNeeded(wrapperType);
  }
 else {
    boolean valueIsArray=valueType.isArray();
    if (valueIsArray || valueToReturn instanceof Iterable<?> || valueToReturn instanceof Iterator<?>) {
      addMultiValuedResultBasedOnTheReturnType(valueIsArray);
    }
 else     if (wrapperType != null) {
      throw newIncompatibleTypesException();
    }
 else {
      addResultFromSingleValue();
    }
  }
}",0.9767733835530444
164897,"private void addMultiValuedResultBasedOnTheReturnType(boolean valueIsArray){
  if (returnType == void.class) {
    addMultiValuedResult(valueIsArray);
  }
 else   if (returnType == Object.class) {
    expectation.getResults().addReturnValueResult(valueToReturn);
  }
 else   if (valueIsArray && addCollectionOrMapWithElementsFromArray()) {
    return;
  }
 else   if (hasReturnOfDifferentType()) {
    addMultiValuedResult(valueIsArray);
  }
 else {
    expectation.getResults().addReturnValueResult(valueToReturn);
  }
}","private void addMultiValuedResultBasedOnTheReturnType(boolean valueIsArray){
  if (returnType == void.class) {
    addMultiValuedResult(valueIsArray);
  }
 else   if (returnType == Object.class) {
    addReturnValue(valueToReturn);
  }
 else   if (valueIsArray && addCollectionOrMapWithElementsFromArray()) {
    return;
  }
 else   if (hasReturnOfDifferentType()) {
    addMultiValuedResult(valueIsArray);
  }
 else {
    addReturnValue(valueToReturn);
  }
}",0.936734693877551
164898,"private void addCharSequence(@NotNull CharSequence textualValue){
  Object convertedValue=textualValue;
  if (returnType.isAssignableFrom(ByteArrayInputStream.class)) {
    convertedValue=new ByteArrayInputStream(textualValue.toString().getBytes());
  }
 else   if (returnType.isAssignableFrom(StringReader.class)) {
    convertedValue=new StringReader(textualValue.toString());
  }
 else   if (!(textualValue instanceof StringBuilder) && returnType.isAssignableFrom(StringBuilder.class)) {
    convertedValue=new StringBuilder(textualValue);
  }
 else   if (!(textualValue instanceof CharBuffer) && returnType.isAssignableFrom(CharBuffer.class)) {
    convertedValue=CharBuffer.wrap(textualValue);
  }
 else {
    Object valueFromText=newInstanceUsingPublicConstructorIfAvailable(returnType,STRING,textualValue);
    if (valueFromText != null) {
      convertedValue=valueFromText;
    }
  }
  expectation.getResults().addReturnValueResult(convertedValue);
}","private void addCharSequence(@NotNull CharSequence textualValue){
  @NotNull Object convertedValue=textualValue;
  if (returnType.isAssignableFrom(ByteArrayInputStream.class)) {
    convertedValue=new ByteArrayInputStream(textualValue.toString().getBytes());
  }
 else   if (returnType.isAssignableFrom(StringReader.class)) {
    convertedValue=new StringReader(textualValue.toString());
  }
 else   if (!(textualValue instanceof StringBuilder) && returnType.isAssignableFrom(StringBuilder.class)) {
    convertedValue=new StringBuilder(textualValue);
  }
 else   if (!(textualValue instanceof CharBuffer) && returnType.isAssignableFrom(CharBuffer.class)) {
    convertedValue=CharBuffer.wrap(textualValue);
  }
 else {
    Object valueFromText=newInstanceUsingPublicConstructorIfAvailable(returnType,STRING,textualValue);
    if (valueFromText != null) {
      convertedValue=valueFromText;
    }
  }
  addReturnValue(convertedValue);
}",0.9662447257383966
164899,"@Nullable private Object convertFromNumber(@NotNull Class<?> targetType,@NotNull Number number){
  if (targetType == Integer.class) {
    return number.intValue();
  }
 else   if (targetType == Short.class) {
    return number.shortValue();
  }
 else   if (targetType == Long.class) {
    return number.longValue();
  }
 else   if (targetType == Byte.class) {
    return number.byteValue();
  }
 else   if (targetType == Double.class) {
    return number.doubleValue();
  }
 else   if (targetType == Float.class) {
    return number.floatValue();
  }
 else   if (targetType == Character.class) {
    return (char)number.intValue();
  }
  return null;
}","@Nullable private static Object convertFromNumber(@NotNull Class<?> targetType,@NotNull Number number){
  if (targetType == Integer.class) {
    return number.intValue();
  }
 else   if (targetType == Short.class) {
    return number.shortValue();
  }
 else   if (targetType == Long.class) {
    return number.longValue();
  }
 else   if (targetType == Byte.class) {
    return number.byteValue();
  }
 else   if (targetType == Double.class) {
    return number.doubleValue();
  }
 else   if (targetType == Float.class) {
    return number.floatValue();
  }
 else   if (targetType == Character.class) {
    return (char)number.intValue();
  }
  return null;
}",0.9946605644546148
164900,"private void addCollectionWithSingleElement(@NotNull Collection<Object> container){
  container.add(valueToReturn);
  expectation.getResults().addReturnValueResult(container);
}","private void addCollectionWithSingleElement(@NotNull Collection<Object> container){
  container.add(valueToReturn);
  addReturnValue(container);
}",0.9040247678018576
164901,"@Nullable private Object convertFromChar(@NotNull Class<?> targetType,char c){
  if (targetType == Integer.class) {
    return (int)c;
  }
 else   if (targetType == Short.class) {
    return (short)c;
  }
 else   if (targetType == Long.class) {
    return (long)c;
  }
 else   if (targetType == Byte.class) {
    return (byte)c;
  }
 else   if (targetType == Double.class) {
    return (double)c;
  }
 else   if (targetType == Float.class) {
    return (float)c;
  }
  return null;
}","@Nullable private static Object convertFromChar(@NotNull Class<?> targetType,char c){
  if (targetType == Integer.class) {
    return (int)c;
  }
 else   if (targetType == Short.class) {
    return (short)c;
  }
 else   if (targetType == Long.class) {
    return (long)c;
  }
 else   if (targetType == Byte.class) {
    return (byte)c;
  }
 else   if (targetType == Double.class) {
    return (double)c;
  }
 else   if (targetType == Float.class) {
    return (float)c;
  }
  return null;
}",0.9928057553956836
164902,"private void addMultiValuedResult(boolean valueIsArray){
  if (valueIsArray) {
    expectation.getResults().addResults(valueToReturn);
  }
 else   if (valueToReturn instanceof Iterable<?>) {
    expectation.getResults().addResults((Iterable<?>)valueToReturn);
  }
 else {
    expectation.getResults().addDeferredResults((Iterator<?>)valueToReturn);
  }
}","private void addMultiValuedResult(boolean valueIsArray){
  InvocationResults results=expectation.getResults();
  if (valueIsArray) {
    results.addResults(valueToReturn);
  }
 else   if (valueToReturn instanceof Iterable<?>) {
    results.addResults((Iterable<?>)valueToReturn);
  }
 else {
    results.addDeferredResults((Iterator<?>)valueToReturn);
  }
}",0.7932489451476793
164903,"void addConvertedValueOrValues(){
  boolean valueIsArray=valueToReturn.getClass().isArray();
  boolean valueIsIterable=valueToReturn instanceof Iterable<?>;
  if (valueIsArray || valueIsIterable || valueToReturn instanceof Iterator<?>) {
    if (returnType == void.class || hasReturnOfDifferentType()) {
      if (valueIsArray) {
        expectation.getResults().addReturnValues(valueToReturn);
      }
 else       if (valueIsIterable) {
        expectation.getResults().addReturnValues((Iterable<?>)valueToReturn);
      }
 else {
        expectation.getResults().addDeferredReturnValues((Iterator<?>)valueToReturn);
      }
      return;
    }
  }
  expectation.substituteCascadedMockToBeReturnedIfNeeded();
  expectation.getResults().addReturnValue(valueToReturn);
}","void addConvertedValueOrValues(){
  boolean valueIsArray=valueToReturn.getClass().isArray();
  boolean valueIsIterable=valueToReturn instanceof Iterable<?>;
  InvocationResults results=expectation.getResults();
  if (valueIsArray || valueIsIterable || valueToReturn instanceof Iterator<?>) {
    if (returnType == void.class || hasReturnOfDifferentType()) {
      if (valueIsArray) {
        results.addReturnValues(valueToReturn);
      }
 else       if (valueIsIterable) {
        results.addReturnValues((Iterable<?>)valueToReturn);
      }
 else {
        results.addDeferredReturnValues((Iterator<?>)valueToReturn);
      }
      return;
    }
  }
  expectation.substituteCascadedMockToBeReturnedIfNeeded(valueToReturn);
  results.addReturnValue(valueToReturn);
}",0.8692257644762524
164904,"@NotNull private IllegalArgumentException newIncompatibleTypesException(){
  ExpectedInvocation invocation=expectation.invocation;
  String valueTypeName=valueToReturn.getClass().getName().replace(""String_Node_Str"",""String_Node_Str"");
  String returnTypeName=returnType.getName().replace(""String_Node_Str"",""String_Node_Str"");
  StringBuilder msg=new StringBuilder(200);
  msg.append(""String_Node_Str"").append(valueTypeName);
  msg.append(""String_Node_Str"").append(returnTypeName).append(""String_Node_Str"");
  msg.append(new MethodFormatter(invocation.getClassDesc(),invocation.getMethodNameAndDescription()));
  return new IllegalArgumentException(msg.toString());
}","@NotNull private IllegalArgumentException newIncompatibleTypesException(){
  ExpectedInvocation invocation=expectation.invocation;
  String valueTypeName=valueToReturn.getClass().getName().replace(""String_Node_Str"",""String_Node_Str"");
  String returnTypeName=returnType.getName().replace(""String_Node_Str"",""String_Node_Str"");
  MethodFormatter methodDesc=new MethodFormatter(invocation.getClassDesc(),invocation.getMethodNameAndDescription());
  String msg=""String_Node_Str"" + valueTypeName + ""String_Node_Str""+ returnTypeName+ ""String_Node_Str""+ methodDesc;
  return new IllegalArgumentException(msg);
}",0.6267716535433071
164905,"private void addPrimitiveValueConvertingAsNeeded(@NotNull Class<?> targetType){
  Object convertedValue=null;
  if (valueToReturn instanceof Number) {
    convertedValue=convertFromNumber(targetType,(Number)valueToReturn);
  }
 else   if (valueToReturn instanceof Character) {
    convertedValue=convertFromChar(targetType,(Character)valueToReturn);
  }
  if (convertedValue == null) {
    throw newIncompatibleTypesException();
  }
  expectation.getResults().addReturnValueResult(convertedValue);
}","private void addPrimitiveValueConvertingAsNeeded(@NotNull Class<?> targetType){
  Object convertedValue=null;
  if (valueToReturn instanceof Number) {
    convertedValue=convertFromNumber(targetType,(Number)valueToReturn);
  }
 else   if (valueToReturn instanceof Character) {
    convertedValue=convertFromChar(targetType,(Character)valueToReturn);
  }
  if (convertedValue == null) {
    throw newIncompatibleTypesException();
  }
  addReturnValue(convertedValue);
}",0.9431230610134436
164906,"void registerMockStates(@NotNull Object mockUp,boolean forStartupMock){
  if (mockStates != null) {
    MockStates globalMockStates=TestRun.getMockStates();
    if (!forStartupMock) {
      globalMockStates.addMockStates(mockStates);
    }
    globalMockStates.addMockUpAndItsMockStates(mockUp,mockStates);
  }
}","void registerMockStates(@NotNull Object mockUp,boolean forStartupMock){
  if (mockStates != null) {
    MockStates allMockStates=TestRun.getMockStates();
    if (forStartupMock) {
      allMockStates.addStartupMockUpAndItsMockStates(mockUp,mockStates);
    }
 else {
      allMockStates.addMockStates(mockStates);
      allMockStates.addMockUpAndItsMockStates(mockUp,mockStates);
    }
  }
}",0.802275960170697
164907,"public MockStates(){
  mockUpsToMockStates=new IdentityHashMap<Object,List<MockState>>(8);
  mockStatesWithExpectations=new LinkedHashSet<MockState>(10);
}","public MockStates(){
  startupMockUpsToMockStates=new IdentityHashMap<Object,List<MockState>>(2);
  mockUpsToMockStates=new IdentityHashMap<Object,List<MockState>>(8);
  mockStatesWithExpectations=new LinkedHashSet<MockState>(10);
}",0.7958656330749354
164908,"void executePreDestroyMethodsIfAny(){
  for (  Object testedObject : objectsWithPreDestroyMethodsToExecute) {
    Class<?> testedClass=testedObject.getClass();
    Method preDestroyMethod=preDestroyMethods.get(testedClass);
    try {
      MethodReflection.invoke(testedObject,preDestroyMethod);
    }
 catch (    RuntimeException ignore) {
    }
catch (    AssertionError ignore) {
    }
  }
}","void executePreDestroyMethodsIfAny(){
  try {
    for (    Object testedObject : objectsWithPreDestroyMethodsToExecute) {
      executePreDestroyMethod(testedObject);
    }
  }
  finally {
    objectsWithPreDestroyMethodsToExecute.clear();
  }
}",0.3818466353677621
164909,"@Test public void exerciseTestedObjectWithTwoOtherDependenciesInjectedThroughConstructor(@Injectable final Observable obs){
  new Expectations(){
{
      mock.doSomething();
      result=123;
    }
  }
;
  assertTrue(tested.doSomeOperation());
  new FullVerifications(){
{
      obs.notifyObservers();
    }
  }
;
}","@Test public void exerciseTestedObjectWithTwoOtherDependenciesInjectedThroughConstructor(@Injectable final Observable obs){
  assertTestedObjectWasInitialized();
  new Expectations(){
{
      mock.doSomething();
      result=123;
    }
  }
;
  assertTrue(tested.doSomeOperation());
  new FullVerifications(){
{
      obs.notifyObservers();
    }
  }
;
}",0.94311377245509
164910,"@Test public void exerciseTestedObjectWithAllDependenciesInjectedThroughConstructor(@Injectable final Runnable mock2,@Injectable final Observable mock3){
  new Expectations(){
{
      mock.doSomething();
      result=123;
    }
  }
;
  assertTrue(tested.doSomeOperation());
  new FullVerificationsInOrder(){
{
      mock2.run();
      mock3.notifyObservers();
    }
  }
;
}","@Test public void exerciseTestedObjectWithAllDependenciesInjectedThroughConstructor(@Injectable final Runnable mock2,@Injectable final Observable mock3){
  assertTestedObjectWasInitialized();
  new Expectations(){
{
      mock.doSomething();
      result=123;
    }
  }
;
  assertTrue(tested.doSomeOperation());
  new FullVerificationsInOrder(){
{
      mock2.run();
      mock3.notifyObservers();
    }
  }
;
}",0.951530612244898
164911,"@Test public void exerciseTestedObjectWithSingleDependencyInjectedThroughConstructor(){
  new Expectations(){
{
      mock.doSomething();
      result=23;
    }
  }
;
  assertTrue(tested.doSomeOperation());
}","@Test public void exerciseTestedObjectWithSingleDependencyInjectedThroughConstructor(){
  assertTestedObjectWasInitialized();
  new Expectations(){
{
      mock.doSomething();
      result=23;
    }
  }
;
  assertTrue(tested.doSomeOperation());
}",0.9162995594713657
164912,"@Test public void exerciseTestedObjectWithTwoDependenciesInjectedThroughConstructor(@Injectable final Runnable mock2){
  new Expectations(){
{
      mock.doSomething();
      result=23;
    }
  }
;
  assertTrue(tested.doSomeOperation());
  new Verifications(){
{
      mock2.run();
    }
  }
;
}","@Test public void exerciseTestedObjectWithTwoDependenciesInjectedThroughConstructor(@Injectable final Runnable mock2){
  assertTestedObjectWasInitialized();
  new Expectations(){
{
      mock.doSomething();
      result=23;
    }
  }
;
  assertTrue(tested.doSomeOperation());
  new Verifications(){
{
      mock2.run();
    }
  }
;
}",0.9394904458598726
164913,"private void generateConditionalCallForMockedConstructor(){
  generateCallToMockMethod();
  int jumpInsnOpcode;
  if (shouldUseMockingBridge()) {
    mw.visitLdcInsn(VOID_TYPE);
    jumpInsnOpcode=IF_ACMPEQ;
  }
 else {
    jumpInsnOpcode=IFNE;
  }
  Label startOfRealImplementation=new Label();
  mw.visitJumpInsn(jumpInsnOpcode,startOfRealImplementation);
  mw.visitInsn(RETURN);
  mw.visitLabel(startOfRealImplementation);
}","private void generateConditionalCallForMockedConstructor(){
  generateCallToMockMethod();
  int jumpInsnOpcode;
  if (shouldUseMockingBridge()) {
    mw.visitLdcInsn(VOID_TYPE);
    jumpInsnOpcode=IF_ACMPEQ;
  }
 else {
    jumpInsnOpcode=mockMethod.hasInvocationParameter ? IFNE : IFEQ;
  }
  Label startOfRealImplementation=new Label();
  mw.visitJumpInsn(jumpInsnOpcode,startOfRealImplementation);
  mw.visitInsn(RETURN);
  mw.visitLabel(startOfRealImplementation);
}",0.9520624303232998
164914,"@Test public void namedMockUpWithPublicMockMethodsUsingInvocationParameter(){
  Collaborator col=new Collaborator();
  new NamedMockUp();
  assertTrue(Collaborator.doSomethingElse());
  assertEquals(123,col.doSomething(""String_Node_Str""));
  assertEquals(5,col.doSomething(""String_Node_Str""));
  assertTrue(new Collaborator(true).b);
  assertFalse(new Collaborator(true).b);
  assertEquals(45L,col.genericMethod(45L).longValue());
  assertEquals(4.5F,col.genericMethod(4.5F).floatValue(),0);
  assertNull(col.genericMethod(null));
}","@Test public void namedMockUpWithPublicMockMethodsUsingInvocationParameter(){
  Collaborator col=new Collaborator();
  assertTrue(col.b);
  new NamedMockUp();
  assertTrue(Collaborator.doSomethingElse());
  assertEquals(123,col.doSomething(""String_Node_Str""));
  assertEquals(5,col.doSomething(""String_Node_Str""));
  assertTrue(new Collaborator(true).b);
  assertFalse(new Collaborator(true).b);
  assertEquals(45L,col.genericMethod(45L).longValue());
  assertEquals(4.5F,col.genericMethod(4.5F).floatValue(),0);
  assertNull(col.genericMethod(null));
}",0.9806451612903224
164915,"@Test public void publicNamedMockUpWithNoInvocationParameter(){
  PublicNamedMockUpWithNoInvocationParameters mockUp=new PublicNamedMockUpWithNoInvocationParameters();
  Collaborator col=new Collaborator();
  int i=col.doSomething(""String_Node_Str"");
  assertTrue(mockUp.executed);
  assertEquals(4,i);
}","@Test public void publicNamedMockUpWithNoInvocationParameter(){
  PublicNamedMockUpWithNoInvocationParameters mockUp=new PublicNamedMockUpWithNoInvocationParameters();
  Collaborator col=new Collaborator();
  assertTrue(mockUp.executed);
  assertFalse(col.b);
  int i=col.doSomething(""String_Node_Str"");
  assertEquals(45,i);
}",0.8652931854199684
164916,"public int getNumberOfCoveredSegments(){
  if (noBranchesYet()) {
    return executionCount > 0 ? 1 : 0;
  }
  return getSegmentsCovered();
}","public int getNumberOfCoveredSegments(){
  int segmentsCovered=executionCount > 0 ? 1 : 0;
  int n=branches.size();
  if (n == 0) {
    return segmentsCovered;
  }
  for (int i=0; i < n; i+=2) {
    BranchCoverageData sourceBranch=branches.get(i);
    BranchCoverageData targetBranch=branches.get(i + 1);
    if (sourceBranch.isCovered()) {
      segmentsCovered++;
    }
    if (targetBranch.isCovered()) {
      Integer targetLine=targetBranch.getLine();
      if (targetLine != null && targetLine.equals(sourceBranch.getLine())) {
        segmentsCovered++;
      }
    }
  }
  return segmentsCovered;
}",0.2329317269076305
164917,"public int getNumberOfSegments(){
  int n=branches.size();
  if (n == 0) {
    return 1;
  }
  BranchCoverageData branchData=branches.get(0);
  Integer sourceLine=branchData.getLine();
  int count=2;
  for (int i=1; i < n; i+=2) {
    branchData=branches.get(i);
    Integer targetLine=branchData.getLine();
    if (targetLine != null && targetLine.equals(sourceLine)) {
      count++;
    }
  }
  return count;
}","public int getNumberOfSegments(){
  int n=branches.size();
  if (n == 0) {
    return 1;
  }
  BranchCoverageData branch=branches.get(0);
  Integer sourceLine=branch.getLine();
  int count=2;
  for (int i=1; i < n; i+=2) {
    branch=branches.get(i);
    Integer targetLine=branch.getLine();
    if (targetLine != null && targetLine.equals(sourceLine)) {
      count++;
    }
  }
  return count;
}",0.980246913580247
164918,"private int findBranchIndex(@NotNull Label jumpSource,@NotNull Label jumpTarget){
  for (int i=branches.size() - 1; i >= 0; i-=2) {
    BranchCoverageData targetBranch=branches.get(i);
    BranchCoverageData sourceBranch=branches.get(i - 1);
    if (sourceBranch.label == jumpSource && targetBranch.label == jumpTarget) {
      return i;
    }
  }
  return -1;
}","private int findBranchIndex(@NotNull Label jumpSource,@NotNull Label jumpTarget){
  for (int i=branches.size() - 2; i >= 0; i-=2) {
    if (jumpSource == branches.get(i).label && jumpTarget == branches.get(i + 1).label) {
      return i;
    }
  }
  return -1;
}",0.6634615384615384
164919,"@Test(expected=AssertionError.class) public void nonBranchingMethodWithUnreachableLines(){
  tested.nonBranchingMethodWithUnreachableLines();
}","@Test public void nonBranchingMethodWithUnreachableLines(){
  try {
    tested.nonBranchingMethodWithUnreachableLines();
  }
 catch (  AssertionError ignore) {
  }
  assertLines(7,10,2);
  assertLine(7,1,1,1);
  assertLine(8,2,2,1);
  assertLine(9,1,0,0);
  assertLine(10,1,0,0);
}",0.5283018867924528
164920,"private void appendTestMethod(@NotNull StackTraceElement current){
  content.append(""String_Node_Str"");
  content.append(current.getClassName()).append('#');
  content.append(current.getMethodName().replaceFirst(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
  content.append(current.getLineNumber());
}","private void appendTestMethod(@NotNull StackTraceElement current){
  content.append(""String_Node_Str"");
  content.append(current.getClassName()).append('#');
  content.append(LESS_THAN_CHAR.matcher(current.getMethodName()).replaceFirst(""String_Node_Str"")).append(""String_Node_Str"");
  content.append(current.getLineNumber());
}",0.9351851851851852
164921,"public void insertListOfCallPoints(@NotNull List<CallPoint> callPoints){
  if (content.length() == 0) {
    content.append(EOL).append(""String_Node_Str"");
  }
  content.append(""String_Node_Str"").append(EOL);
  CallPoint currentCP=callPoints.get(0);
  appendTestMethod(currentCP.getStackTraceElement());
  appendRepetitionCountIfNeeded(currentCP);
  for (int i=1, n=callPoints.size(); i < n; i++) {
    CallPoint nextCP=callPoints.get(i);
    StackTraceElement ste=nextCP.getStackTraceElement();
    if (nextCP.isSameTestMethod(currentCP)) {
      content.append(""String_Node_Str"").append(ste.getLineNumber());
    }
 else {
      content.append(""String_Node_Str"").append(EOL);
      appendTestMethod(ste);
    }
    appendRepetitionCountIfNeeded(nextCP);
    currentCP=nextCP;
  }
  content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
}","public void insertListOfCallPoints(@Nullable List<CallPoint> callPoints){
  if (content.length() == 0) {
    content.append(EOL).append(""String_Node_Str"");
  }
  if (callPoints == null) {
    content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
    return;
  }
  content.append(""String_Node_Str"").append(EOL);
  CallPoint currentCP=callPoints.get(0);
  appendTestMethod(currentCP.getStackTraceElement());
  appendRepetitionCountIfNeeded(currentCP);
  for (int i=1, n=callPoints.size(); i < n; i++) {
    CallPoint nextCP=callPoints.get(i);
    StackTraceElement ste=nextCP.getStackTraceElement();
    if (nextCP.isSameTestMethod(currentCP)) {
      content.append(""String_Node_Str"").append(ste.getLineNumber());
    }
 else {
      content.append(""String_Node_Str"").append(EOL);
      appendTestMethod(ste);
    }
    appendRepetitionCountIfNeeded(nextCP);
    currentCP=nextCP;
  }
  content.append(""String_Node_Str"").append(EOL).append(""String_Node_Str"").append(EOL).append(""String_Node_Str"");
}",0.9299163179916318
164922,"private void formatLineWithSingleSegment(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  formattedLine.append(lineData.isCovered() ? ""String_Node_Str"" : ""String_Node_Str"");
  List<CallPoint> callPoints=lineData.getCallPoints();
  boolean lineWithCallPoints=listOfCallPoints != null && callPoints != null;
  if (lineWithCallPoints) {
    formattedLine.append(""String_Node_Str"");
  }
  formattedLine.append(""String_Node_Str"").append(lineParser.getNumber()).append(""String_Node_Str"");
  formattedLine.append(lineParser.getInitialElement().toString()).append(""String_Node_Str"");
  if (lineWithCallPoints) {
    listOfCallPoints.insertListOfCallPoints(callPoints);
    formattedLine.append(listOfCallPoints.getContents());
  }
}","private void formatLineWithSingleSegment(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  formattedLine.append(lineData.isCovered() ? ""String_Node_Str"" : ""String_Node_Str"");
  List<CallPoint> callPoints=lineData.getCallPoints();
  if (listOfCallPoints != null && callPoints != null) {
    formattedLine.append(""String_Node_Str"");
  }
  formattedLine.append(""String_Node_Str"").append(lineParser.getNumber()).append(""String_Node_Str"");
  String content=lineParser.getInitialElement().toString();
  formattedLine.append(content).append(""String_Node_Str"");
  if (listOfCallPoints != null) {
    listOfCallPoints.insertListOfCallPoints(callPoints);
    formattedLine.append(listOfCallPoints.getContents());
  }
}",0.4317718940936864
164923,"private void appendStartTag(@NotNull LineSegmentData segmentData){
  line.append(""String_Node_Str"").append(lineNumber).append('s').append(segmentIndex).append(""String_Node_Str"");
  appendTooltipWithExecutionCounts(segmentData);
  if (segmentData.isCovered()) {
    line.append(""String_Node_Str"");
    if (segmentData.containsCallPoints()) {
      line.append(""String_Node_Str"").append(segmentIndex).append(')');
    }
    line.append(""String_Node_Str"");
  }
 else {
    line.append(""String_Node_Str"");
  }
}","private void appendStartTag(@NotNull LineSegmentData segmentData){
  line.append(""String_Node_Str"").append(lineNumber).append('s').append(segmentIndex).append(""String_Node_Str"");
  appendTooltipWithExecutionCounts(segmentData);
  if (segmentData.isCovered()) {
    if (segmentData.containsCallPoints()) {
      line.append(""String_Node_Str"").append(segmentIndex).append(""String_Node_Str"");
    }
 else {
      line.append(""String_Node_Str"");
    }
  }
 else {
    line.append(""String_Node_Str"");
  }
}",0.7638888888888888
164924,"private void appendEndTag(@NotNull LineSegmentData segmentData){
  int i=line.length() - 1;
  while (Character.isWhitespace(line.charAt(i))) {
    i--;
  }
  line.insert(i + 1,""String_Node_Str"");
  if (listOfCallPoints != null) {
    List<CallPoint> callPoints=segmentData.getCallPoints();
    if (callPoints != null) {
      listOfCallPoints.insertListOfCallPoints(callPoints);
    }
  }
}","private void appendEndTag(@NotNull LineSegmentData segmentData){
  int i=line.length() - 1;
  while (isWhitespace(line.charAt(i))) {
    i--;
  }
  line.insert(i + 1,""String_Node_Str"");
  if (listOfCallPoints != null) {
    List<CallPoint> callPoints=segmentData.getCallPoints();
    listOfCallPoints.insertListOfCallPoints(callPoints);
  }
}",0.9344262295081968
164925,"@Nullable private MockedTypeCascade getCascade(@NotNull String mockedTypeDesc){
  MockedTypeCascade cascade=cascadingTypes.get(mockedTypeDesc);
  if (cascade != null)   return cascade;
  for (  Entry<String,MockedTypeCascade> cascadeEntry : cascadingTypes.entrySet()) {
    if (cascadeEntry.getKey().startsWith(mockedTypeDesc)) {
      return cascadeEntry.getValue();
    }
  }
  return null;
}","@Nullable private MockedTypeCascade getCascade(@NotNull String mockedTypeDesc){
  MockedTypeCascade cascade=cascadingTypes.get(mockedTypeDesc);
  if (cascade != null)   return cascade;
  for (  Entry<String,MockedTypeCascade> cascadeEntry : cascadingTypes.entrySet()) {
    String cascadingTypeDesc=cascadeEntry.getKey();
    int p=cascadingTypeDesc.indexOf('<');
    if (p > 0 && cascadingTypeDesc.regionMatches(0,mockedTypeDesc,0,p)) {
      return cascadeEntry.getValue();
    }
  }
  return null;
}",0.7276785714285714
164926,"void doSomething(Callable<String> pc,int[] i,boolean[] currencies,int[] ii);","Runnable doSomething(){
  return null;
}",0.2758620689655172
164927,"public LineElement next(){
  if (current == null) {
    throw new NoSuchElementException();
  }
  LineElement next=current;
  current=current.next;
  return next;
}","@NotNull @Override public LineElement next(){
  if (current == null) {
    throw LAST_ELEMENT_REACHED;
  }
  LineElement nextElement=current;
  current=current.next;
  return nextElement;
}",0.7875354107648725
164928,"private int getParenthesisBalance(){
  if (text.indexOf('(') >= 0) {
    return 1;
  }
 else   if (text.indexOf(')') >= 0) {
    return -1;
  }
  return 0;
}","private int getParenthesisBalance(){
  int balance=0;
  int p=text.indexOf('(');
  while (p >= 0) {
    balance++;
    p=text.indexOf('(',p + 1);
  }
  int q=text.indexOf(')');
  while (q >= 0) {
    balance--;
    q=text.indexOf(')',q + 1);
  }
  return balance;
}",0.2890995260663507
164929,"public void remove(){
}","@Override public void remove(){
}",0.8214285714285714
164930,"@NotNull public Iterator<LineElement> iterator(){
  return new Iterator<LineElement>(){
    @Nullable private LineElement current=LineElement.this;
    public boolean hasNext(){
      return current != null;
    }
    public LineElement next(){
      if (current == null) {
        throw new NoSuchElementException();
      }
      LineElement next=current;
      current=current.next;
      return next;
    }
    public void remove(){
    }
  }
;
}","@NotNull @Override public Iterator<LineElement> iterator(){
  return new Iterator<LineElement>(){
    @Nullable private LineElement current=LineElement.this;
    @Override public boolean hasNext(){
      return current != null;
    }
    @NotNull @Override public LineElement next(){
      if (current == null) {
        throw LAST_ELEMENT_REACHED;
      }
      LineElement nextElement=current;
      current=current.next;
      return nextElement;
    }
    @Override public void remove(){
    }
  }
;
}",0.7036649214659686
164931,"LineElement(@NotNull ElementType type,@NotNull String text){
  this.type=type;
  this.text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
}","LineElement(@NotNull ElementType type,@NotNull String text){
  this.type=type;
  this.text=OPEN_TAG.matcher(text).replaceAll(""String_Node_Str"");
}",0.8767123287671232
164932,"public void wrapText(@NotNull String openingTag,@NotNull String closingTag){
  this.openingTag=openingTag;
  this.closingTag=closingTag;
}","public void wrapText(@NotNull String desiredOpeningTag,@NotNull String desiredClosingTag){
  openingTag=desiredOpeningTag;
  closingTag=desiredClosingTag;
}",0.8435374149659864
164933,"public boolean hasNext(){
  return current != null;
}","@Override public boolean hasNext(){
  return current != null;
}",0.913793103448276
164934,"int getNumberOfSegments(){
  int n=branches.size();
  if (n == 0) {
    return 1;
  }
  BranchCoverageData branchData=branches.get(0);
  Integer sourceLine=branchData.getLine();
  int count=2;
  for (int i=1; i < n; i+=2) {
    branchData=branches.get(i);
    Integer targetLine=branchData.getLine();
    if (targetLine != null && targetLine.equals(sourceLine)) {
      count++;
    }
  }
  return count;
}","public int getNumberOfSegments(){
  int n=branches.size();
  if (n == 0) {
    return 1;
  }
  BranchCoverageData branchData=branches.get(0);
  Integer sourceLine=branchData.getLine();
  int count=2;
  for (int i=1; i < n; i+=2) {
    branchData=branches.get(i);
    Integer targetLine=branchData.getLine();
    if (targetLine != null && targetLine.equals(sourceLine)) {
      count++;
    }
  }
  return count;
}",0.9914529914529916
164935,"private void appendToFormattedLine(@NotNull LineElement firstElement,@NotNull LineSegmentData segmentData){
  if (firstElement == element) {
    return;
  }
  appendStartTag(segmentData);
  firstElement.appendAllBefore(line,element);
  appendEndTag(segmentData);
}","private void appendToFormattedLine(@NotNull LineElement firstElement,@NotNull LineSegmentData segmentData){
  if (firstElement == element) {
    return;
  }
  appendStartTag(segmentData);
  firstElement.appendAllBefore(line,element);
  appendEndTag(segmentData);
  segmentIndex++;
}",0.967032967032967
164936,"void formatSegments(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  lineNumber=lineParser.getNumber();
  List<BranchCoverageData> branchData=lineData.getBranches();
  int numSegments=1 + branchData.size();
  element=lineParser.getInitialElement().appendUntilNextCodeElement(line);
  segmentIndex=0;
  appendUntilFirstElementAfterNextBranchingPoint(lineData);
  for (segmentIndex=1; element != null && segmentIndex < numSegments; segmentIndex++) {
    LineSegmentData segmentData=branchData.get(segmentIndex - 1);
    element=element.appendUntilNextCodeElement(line);
    appendUntilFirstElementAfterNextBranchingPoint(segmentData);
  }
  line.append(""String_Node_Str"");
  if (listOfCallPoints != null && lineData.containsCallPoints()) {
    line.append(listOfCallPoints.getContents());
  }
}","void formatSegments(@NotNull LineParser lineParser,@NotNull LineCoverageData lineData){
  lineNumber=lineParser.getNumber();
  List<BranchCoverageData> branchData=lineData.getBranches();
  int numSegments=lineData.getNumberOfSegments();
  element=lineParser.getInitialElement().appendUntilNextCodeElement(line);
  segmentIndex=0;
  appendUntilFirstElementAfterNextBranchingPoint(lineData);
  while (element != null && segmentIndex < numSegments) {
    LineSegmentData segmentData=segmentIndex == 0 ? lineData : branchData.get(segmentIndex - 1);
    element=element.appendUntilNextCodeElement(line);
    appendUntilFirstElementAfterNextBranchingPoint(segmentData);
  }
  line.append(""String_Node_Str"");
  if (listOfCallPoints != null && lineData.containsCallPoints()) {
    line.append(listOfCallPoints.getContents());
  }
}",0.7127139364303179
164937,"private int getSegmentsCovered(){
  int segmentsCovered=1;
  for (  BranchCoverageData branch : branches) {
    if (branch.isCovered()) {
      segmentsCovered++;
    }
  }
  return segmentsCovered;
}","private int getSegmentsCovered(){
  int segmentsCovered=0;
  for (int i=0, n=branches.size(); i < n; i++) {
    BranchCoverageData branch=branches.get(i);
    if (branch.isCovered()) {
      if (i == 0)       segmentsCovered++;
      segmentsCovered++;
    }
  }
  return segmentsCovered;
}",0.6816326530612244
164938,"@Nullable private Set<Class<?>> redefineMethods(@NotNull Class<T> realClass,@Nullable Type genericMockedType){
  if (TestRun.mockFixture().isMockedClass(realClass)) {
    throw new IllegalArgumentException(""String_Node_Str"" + realClass.getName());
  }
  return new MockClassSetup(realClass,genericMockedType,this,null).redefineMethods();
}","@Nullable private Set<Class<?>> redefineMethods(@NotNull Class<T> realClass,@NotNull Class<T> classToMock,@Nullable Type genericMockedType){
  if (TestRun.mockFixture().isMockedClass(realClass)) {
    throw new IllegalArgumentException(""String_Node_Str"" + realClass.getName());
  }
  return new MockClassSetup(realClass,classToMock,genericMockedType,this).redefineMethods();
}",0.9342657342657342
164939,"@NotNull private Class<T> redefineClassOrImplementInterface(@NotNull Class<T> classToMock){
  if (classToMock.isInterface()) {
    return createInstanceOfMockedImplementationClass(classToMock,mockedType);
  }
  if (isAbstract(classToMock.getModifiers()) && classToMock.getClassLoader() != null) {
    classToMock=generateConcreteSubclass(classToMock);
  }
  classesToRestore=redefineMethods(classToMock,mockedType);
  return classToMock;
}","@NotNull private Class<T> redefineClassOrImplementInterface(@NotNull Class<T> classToMock){
  if (classToMock.isInterface()) {
    return createInstanceOfMockedImplementationClass(classToMock,mockedType);
  }
  Class<T> realClass=classToMock;
  if (isAbstract(classToMock.getModifiers()) && classToMock.getClassLoader() != null) {
    classToMock=generateConcreteSubclass(classToMock);
  }
  classesToRestore=redefineMethods(realClass,classToMock,mockedType);
  return classToMock;
}",0.9522776572668112
164940,"/** 
 * Applies the   {@linkplain Mock mock methods} defined in the mock-up subclass to the type specified through the typeparameter, but only affecting the given instance. <p/> In most cases, the constructor with no parameters should be adequate. This variation can be used when mock data or behavior is desired only for a particular instance, with other instances remaining unaffected; or when multiple mock-up objects carrying different states are desired, with one mock-up instance per real instance to be mocked. <p/> If  {@link #getMockInstance()} later gets called on this mock-up instance, it will return the instance that wasgiven here.
 * @param instanceToMock a real instance of the type to be mocked, meant to be the only one of that type that shouldbe affected by this mock-up instance; must not be  {@code null}
 * @see #MockUp()
 * @see #MockUp(Class)
 */
protected MockUp(T instanceToMock){
  if (instanceToMock == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  validateMockingAllowed();
  MockUp<?> previousMockUp=findPreviouslyMockedClassIfMockUpAlreadyApplied();
  if (previousMockUp != null) {
    mockedType=previousMockUp.mockedType;
    mockedClass=previousMockUp.mockedClass;
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Class<T> classToMock=(Class<T>)instanceToMock.getClass();
  mockedType=classToMock;
  mockedClass=classToMock;
  classesToRestore=redefineMethods(classToMock,classToMock);
  setMockInstance(instanceToMock);
}","/** 
 * Applies the   {@linkplain Mock mock methods} defined in the mock-up subclass to the type specified through the typeparameter, but only affecting the given instance. <p/> In most cases, the constructor with no parameters should be adequate. This variation can be used when mock data or behavior is desired only for a particular instance, with other instances remaining unaffected; or when multiple mock-up objects carrying different states are desired, with one mock-up instance per real instance to be mocked. <p/> If  {@link #getMockInstance()} later gets called on this mock-up instance, it will return the instance that wasgiven here.
 * @param instanceToMock a real instance of the type to be mocked, meant to be the only one of that type that shouldbe affected by this mock-up instance; must not be  {@code null}
 * @see #MockUp()
 * @see #MockUp(Class)
 */
protected MockUp(T instanceToMock){
  if (instanceToMock == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  validateMockingAllowed();
  MockUp<?> previousMockUp=findPreviouslyMockedClassIfMockUpAlreadyApplied();
  if (previousMockUp != null) {
    mockedType=previousMockUp.mockedType;
    mockedClass=previousMockUp.mockedClass;
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Class<T> classToMock=(Class<T>)instanceToMock.getClass();
  mockedType=classToMock;
  mockedClass=classToMock;
  classesToRestore=redefineMethods(classToMock,classToMock,classToMock);
  setMockInstance(instanceToMock);
}",0.9959866220735786
164941,"public MockClassSetup(@NotNull Class<?> realClass,@Nullable Type mockedType,@NotNull MockUp<?> mockUp,@Nullable byte[] realClassCode){
  this.realClass=realClass;
  mockMethods=new MockMethods(realClass,mockedType);
  this.mockUp=mockUp;
  forStartupMock=Startup.initializing;
  rcReader=realClassCode == null ? null : new ClassReader(realClassCode);
  Class<?> mockUpClass=mockUp.getClass();
  new MockMethodCollector(mockMethods).collectMockMethods(mockUpClass);
  mockMethods.registerMockStates(mockUp,forStartupMock);
  if (forStartupMock) {
    TestRun.getMockClasses().addMock(mockMethods.getMockClassInternalName(),mockUp);
  }
 else {
    TestRun.getMockClasses().addMock(mockUp);
  }
}","private MockClassSetup(@NotNull Class<?> realClass,@NotNull Class<?> classToMock,@Nullable Type mockedType,@NotNull MockUp<?> mockUp,@Nullable byte[] realClassCode){
  this.realClass=classToMock;
  mockMethods=new MockMethods(realClass,mockedType);
  this.mockUp=mockUp;
  forStartupMock=Startup.initializing;
  rcReader=realClassCode == null ? null : new ClassReader(realClassCode);
  Class<?> mockUpClass=mockUp.getClass();
  new MockMethodCollector(mockMethods).collectMockMethods(mockUpClass);
  mockMethods.registerMockStates(mockUp,forStartupMock);
  if (forStartupMock) {
    TestRun.getMockClasses().addMock(mockMethods.getMockClassInternalName(),mockUp);
  }
 else {
    TestRun.getMockClasses().addMock(mockUp);
  }
}",0.565798733286418
164942,"@Test public void getMockInstanceFromMockUpForAbstractClass(){
  MockUp<AbstractBase> mockUp=new MockUp<AbstractBase>(){
    @Mock String getValue(){
      AbstractBase mockInstance=getMockInstance();
      assertNotNull(mockInstance);
      return ""String_Node_Str"";
    }
  }
;
  AbstractBase mock=mockUp.getMockInstance();
  assertEquals(""String_Node_Str"",mock.getValue());
  mock.doSomething(123);
  mock.run();
  assertSame(mock,mockUp.getMockInstance());
}","@Test public void getMockInstanceFromMockUpForAbstractClass(){
  MockUp<AbstractBase> mockUp=new MockUp<AbstractBase>(){
    @Mock String getValue(){
      AbstractBase mockInstance=getMockInstance();
      assertNotNull(mockInstance);
      return ""String_Node_Str"";
    }
    @Mock boolean doSomethingElse(){
      return false;
    }
  }
;
  AbstractBase mock=mockUp.getMockInstance();
  assertEquals(""String_Node_Str"",mock.getValue());
  mock.doSomething(123);
  mock.run();
  assertFalse(mock.doSomethingElse());
  assertSame(mock,mockUp.getMockInstance());
}",0.9005847953216374
164943,"public int getNumberOfCoveredSegments(){
  return noBranchesYet() ? 1 : getSegmentsCovered();
}","public int getNumberOfCoveredSegments(){
  if (noBranchesYet()) {
    return executionCount > 0 ? 1 : 0;
  }
  return getSegmentsCovered();
}",0.7542372881355932
164944,"@Override public void visitLocalVariable(@NotNull String name,@NotNull String desc,String signature,@NotNull Label start,@NotNull Label end,int index){
  registerParameterName(name,index);
}","@Override public final void visitLocalVariable(@NotNull String name,@NotNull String desc,@Nullable String signature,@NotNull Label start,@NotNull Label end,int index){
  if (end.position > 0 && start.position > end.position) {
    start.position=end.position;
  }
  if (start.position > 0 && end.position > 0) {
    mw.visitLocalVariable(name,desc,signature,start,end,index);
  }
}",0.5884413309982487
164945,"@Override public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){
  return mw.visitParameterAnnotation(parameter,desc,visible);
}","@Override public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){
  return null;
}",0.8222996515679443
164946,"public static boolean generateCodeToPassThisOrNullIfStaticMethod(@NotNull MethodWriter mw,int access){
  boolean isStatic=isStatic(access);
  if (isStatic) {
    mw.visitInsn(ACONST_NULL);
  }
 else {
    mw.visitVarInsn(ALOAD,0);
  }
  return isStatic;
}","public static boolean generateCodeToPassThisOrNullIfStaticMethod(@NotNull MethodWriter mw,int access,@SuppressWarnings(""String_Node_Str"") @NotNull String name){
  boolean isStatic=isStatic(access);
  if (isStatic) {
    mw.visitInsn(ACONST_NULL);
  }
 else {
    mw.visitVarInsn(ALOAD,0);
  }
  return isStatic;
}",0.897887323943662
164947,"@Override @Nullable public MethodVisitor visitMethod(int access,@NotNull String name,@NotNull String desc,@Nullable String signature,@Nullable String[] exceptions){
  boolean syntheticOrAbstractMethod=(access & METHOD_ACCESS_MASK) != 0;
  if (syntheticOrAbstractMethod || isProxy && isConstructorOrSystemMethodNotToBeMocked(name,desc)) {
    return unmodifiedBytecode(access,name,desc,signature,exceptions);
  }
  boolean noFiltersToMatch=mockingCfg == null;
  boolean matchesFilters=noFiltersToMatch || mockingCfg.matchesFilters(name,desc);
  if (""String_Node_Str"".equals(name)) {
    return stubOutClassInitializationIfApplicable(access,noFiltersToMatch,matchesFilters);
  }
  if (stubOutFinalizeMethod(access,name,desc)) {
    return null;
  }
  boolean visitingConstructor=""String_Node_Str"".equals(name);
  if (!matchesFilters || isMethodFromCapturedClassNotToBeMocked(access) || noFiltersToMatch && isMethodOrConstructorNotToBeMocked(access,visitingConstructor,name)) {
    return unmodifiedBytecode(access,name,desc,signature,exceptions);
  }
  startModifiedMethodVersion(access,name,desc,signature,exceptions);
  if (visitingConstructor && superClassName != null) {
    generateCallToSuperConstructor();
  }
  String internalClassName=className;
  if (!visitingConstructor && baseClassNameForCapturedInstanceMethods != null) {
    internalClassName=baseClassNameForCapturedInstanceMethods;
  }
  ExecutionMode actualExecutionMode=determineAppropriateExecutionMode(visitingConstructor);
  if (useMockingBridge) {
    return generateCallToHandlerThroughMockingBridge(signature,internalClassName,actualExecutionMode);
  }
  generateDirectCallToHandler(mw,internalClassName,access,name,desc,signature,actualExecutionMode);
  generateDecisionBetweenReturningOrContinuingToRealImplementation();
  return visitingConstructor ? new DynamicConstructorModifier() : copyOriginalImplementationCode();
}","@Override @Nullable public MethodVisitor visitMethod(int access,@NotNull String name,@NotNull String desc,@Nullable String signature,@Nullable String[] exceptions){
  boolean syntheticOrAbstractMethod=(access & METHOD_ACCESS_MASK) != 0;
  if (syntheticOrAbstractMethod || isProxy && isConstructorOrSystemMethodNotToBeMocked(name,desc)) {
    return unmodifiedBytecode(access,name,desc,signature,exceptions);
  }
  boolean noFiltersToMatch=mockingCfg == null;
  boolean matchesFilters=noFiltersToMatch || mockingCfg.matchesFilters(name,desc);
  if (""String_Node_Str"".equals(name)) {
    return stubOutClassInitializationIfApplicable(access,noFiltersToMatch,matchesFilters);
  }
  if (stubOutFinalizeMethod(access,name,desc)) {
    return null;
  }
  boolean visitingConstructor=""String_Node_Str"".equals(name);
  if (!matchesFilters || isMethodFromCapturedClassNotToBeMocked(access) || noFiltersToMatch && isMethodOrConstructorNotToBeMocked(access,visitingConstructor,name)) {
    return unmodifiedBytecode(access,name,desc,signature,exceptions);
  }
  startModifiedMethodVersion(access,name,desc,signature,exceptions);
  if (visitingConstructor && superClassName != null) {
    generateCallToSuperConstructor();
  }
  String internalClassName=className;
  if (!visitingConstructor && baseClassNameForCapturedInstanceMethods != null) {
    internalClassName=baseClassNameForCapturedInstanceMethods;
  }
  ExecutionMode actualExecutionMode=determineAppropriateExecutionMode(visitingConstructor);
  if (useMockingBridge) {
    return generateCallToHandlerThroughMockingBridge(signature,internalClassName,actualExecutionMode);
  }
  generateDirectCallToHandler(mw,internalClassName,access,name,desc,signature,actualExecutionMode);
  generateDecisionBetweenReturningOrContinuingToRealImplementation();
  return copyOriginalImplementationCode(visitingConstructor);
}",0.979765708200213
164948,"@NotNull private MethodVisitor generateCallToHandlerThroughMockingBridge(@Nullable String genericSignature,@NotNull String internalClassName,@NotNull ExecutionMode actualExecutionMode){
  generateCodeToObtainInstanceOfMockingBridge(MockedBridge.MB);
  boolean isStatic=generateCodeToPassThisOrNullIfStaticMethod(mw,methodAccess);
  mw.visitInsn(ACONST_NULL);
  Type[] argTypes=Type.getArgumentTypes(methodDesc);
  generateCodeToCreateArrayOfObject(mw,6 + argTypes.length);
  int i=0;
  generateCodeToFillArrayElement(i++,methodAccess);
  generateCodeToFillArrayElement(i++,internalClassName);
  generateCodeToFillArrayElement(i++,methodName);
  generateCodeToFillArrayElement(i++,methodDesc);
  generateCodeToFillArrayElement(i++,genericSignature);
  generateCodeToFillArrayElement(i++,actualExecutionMode.ordinal());
  generateCodeToFillArrayWithParameterValues(mw,argTypes,i,isStatic ? 0 : 1);
  generateCallToInvocationHandler();
  generateDecisionBetweenReturningOrContinuingToRealImplementation();
  return copyOriginalImplementationCode();
}","@NotNull private MethodVisitor generateCallToHandlerThroughMockingBridge(@Nullable String genericSignature,@NotNull String internalClassName,@NotNull ExecutionMode actualExecutionMode){
  generateCodeToObtainInstanceOfMockingBridge(MockedBridge.MB);
  boolean isStatic=generateCodeToPassThisOrNullIfStaticMethod();
  mw.visitInsn(ACONST_NULL);
  Type[] argTypes=Type.getArgumentTypes(methodDesc);
  generateCodeToCreateArrayOfObject(mw,6 + argTypes.length);
  int i=0;
  generateCodeToFillArrayElement(i++,methodAccess);
  generateCodeToFillArrayElement(i++,internalClassName);
  generateCodeToFillArrayElement(i++,methodName);
  generateCodeToFillArrayElement(i++,methodDesc);
  generateCodeToFillArrayElement(i++,genericSignature);
  generateCodeToFillArrayElement(i++,actualExecutionMode.ordinal());
  generateCodeToFillArrayWithParameterValues(mw,argTypes,i,isStatic ? 0 : 1);
  generateCallToInvocationHandler();
  generateDecisionBetweenReturningOrContinuingToRealImplementation();
  return copyOriginalImplementationCode(false);
}",0.9904030710172744
164949,"static void generateDirectCallToHandler(@NotNull MethodWriter mw,@NotNull String className,int access,@NotNull String name,@NotNull String desc,@Nullable String genericSignature,@NotNull ExecutionMode executionMode){
  boolean isStatic=generateCodeToPassThisOrNullIfStaticMethod(mw,access);
  mw.visitLdcInsn(access);
  mw.visitLdcInsn(className);
  mw.visitLdcInsn(name + desc);
  generateInstructionToLoadNullableString(mw,genericSignature);
  mw.visitLdcInsn(executionMode.ordinal());
  Type[] argTypes=Type.getArgumentTypes(desc);
  int argCount=argTypes.length;
  if (argCount == 0) {
    mw.visitInsn(ACONST_NULL);
  }
 else {
    generateCodeToCreateArrayOfObject(mw,argCount);
    generateCodeToFillArrayWithParameterValues(mw,argTypes,0,isStatic ? 0 : 1);
  }
  mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",false);
}","static void generateDirectCallToHandler(@NotNull MethodWriter mw,@NotNull String className,int access,@NotNull String name,@NotNull String desc,@Nullable String genericSignature,@NotNull ExecutionMode executionMode){
  boolean isStatic=generateCodeToPassThisOrNullIfStaticMethod(mw,access,name);
  mw.visitLdcInsn(access);
  mw.visitLdcInsn(className);
  mw.visitLdcInsn(name + desc);
  generateInstructionToLoadNullableString(mw,genericSignature);
  mw.visitLdcInsn(executionMode.ordinal());
  Type[] argTypes=Type.getArgumentTypes(desc);
  int argCount=argTypes.length;
  if (argCount == 0) {
    mw.visitInsn(ACONST_NULL);
  }
 else {
    generateCodeToCreateArrayOfObject(mw,argCount);
    generateCodeToFillArrayWithParameterValues(mw,argTypes,0,isStatic ? 0 : 1);
  }
  mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",false);
}",0.9971862689926844
164950,"private void generateCodeToObtainMockUpInstance(@NotNull String mockClassDesc){
  mw.visitLdcInsn(mockClassDesc);
  generateCodeToPassThisOrNullIfStaticMethod(mw,methodAccess);
  mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  mw.visitTypeInsn(CHECKCAST,mockClassDesc);
}","private void generateCodeToObtainMockUpInstance(@NotNull String mockClassDesc){
  mw.visitLdcInsn(mockClassDesc);
  generateCodeToPassThisOrNullIfStaticMethod();
  mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  mw.visitTypeInsn(CHECKCAST,mockClassDesc);
}",0.9759229534510432
164951,"/** 
 * If the specified method has a mock definition, then generates bytecode to redirect calls made to it to the mock method. If it has no mock, does nothing.
 * @param access not relevant
 * @param name together with desc, used to identity the method in given set of mock methods
 * @param signature not relevant
 * @param exceptions not relevant
 * @return {@code null} if the method was redefined, otherwise a {@code MethodWriter} that writes out the visitedmethod code without changes
 */
@Override public MethodVisitor visitMethod(int access,@NotNull String name,@NotNull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ABSTRACT_OR_SYNTHETIC) != 0) {
    if (isAbstract(access)) {
      mockMethods.findMethod(access,name,desc,signature);
    }
    return cw.visitMethod(access,name,desc,signature,exceptions);
  }
  isConstructor=""String_Node_Str"".equals(name);
  if (isConstructor && isMockedSuperclass() || !hasMock(access,name,desc,signature)) {
    return cw.visitMethod(access,name,desc,signature,exceptions);
  }
  startModifiedMethodVersion(access,name,desc,signature,exceptions);
  if (isConstructor) {
    generateCallToSuperConstructor();
  }
 else   if (isNative(methodAccess)) {
    generateCallToUpdateMockState();
    generateCallToMockMethod();
    generateMethodReturn();
    mw.visitMaxs(1,0);
    return methodAnnotationsVisitor;
  }
  generateDynamicCallToMock();
  return new CopyingMethodWriter();
}","/** 
 * If the specified method has a mock definition, then generates bytecode to redirect calls made to it to the mock method. If it has no mock, does nothing.
 * @param access not relevant
 * @param name together with desc, used to identity the method in given set of mock methods
 * @param signature not relevant
 * @param exceptions not relevant
 * @return {@code null} if the method was redefined, otherwise a {@code MethodWriter} that writes out the visitedmethod code without changes
 */
@Override public MethodVisitor visitMethod(int access,@NotNull String name,@NotNull String desc,@Nullable String signature,@Nullable String[] exceptions){
  if ((access & ABSTRACT_OR_SYNTHETIC) != 0) {
    if (isAbstract(access)) {
      mockMethods.findMethod(access,name,desc,signature);
    }
    return cw.visitMethod(access,name,desc,signature,exceptions);
  }
  isConstructor=""String_Node_Str"".equals(name);
  if (isConstructor && isMockedSuperclass() || !hasMock(access,name,desc,signature)) {
    return cw.visitMethod(access,name,desc,signature,exceptions);
  }
  startModifiedMethodVersion(access,name,desc,signature,exceptions);
  if (isConstructor) {
    generateCallToSuperConstructor();
  }
 else   if (isNative(methodAccess)) {
    generateCallToUpdateMockState();
    generateCallToMockMethod();
    generateMethodReturn();
    mw.visitMaxs(1,0);
    return methodAnnotationsVisitor;
  }
  generateDynamicCallToMock();
  return copyOriginalImplementationCode(isConstructor);
}",0.978334461746784
164952,"private void generateCallToMockMethodThroughMockingBridge(){
  generateCodeToObtainInstanceOfMockingBridge(MockMethodBridge.MB);
  boolean isStatic=generateCodeToPassThisOrNullIfStaticMethod(mw,methodAccess);
  mw.visitInsn(ACONST_NULL);
  Type[] argTypes=Type.getArgumentTypes(methodDesc);
  generateCodeToCreateArrayOfObject(mw,6 + argTypes.length);
  int i=0;
  generateCodeToFillArrayElement(i++,mockMethods.getMockClassInternalName());
  generateCodeToFillArrayElement(i++,classDesc);
  generateCodeToFillArrayElement(i++,methodAccess);
  if (mockMethod.isAdvice) {
    generateCodeToFillArrayElement(i++,methodName);
    generateCodeToFillArrayElement(i++,methodDesc);
  }
 else {
    generateCodeToFillArrayElement(i++,mockMethod.name);
    generateCodeToFillArrayElement(i++,mockMethod.desc);
  }
  generateCodeToFillArrayElement(i++,mockMethod.getIndexForMockState());
  generateCodeToFillArrayWithParameterValues(mw,argTypes,i,isStatic ? 0 : 1);
  generateCallToInvocationHandler();
}","private void generateCallToMockMethodThroughMockingBridge(){
  generateCodeToObtainInstanceOfMockingBridge(MockMethodBridge.MB);
  boolean isStatic=generateCodeToPassThisOrNullIfStaticMethod();
  mw.visitInsn(ACONST_NULL);
  Type[] argTypes=Type.getArgumentTypes(methodDesc);
  generateCodeToCreateArrayOfObject(mw,6 + argTypes.length);
  int i=0;
  generateCodeToFillArrayElement(i++,mockMethods.getMockClassInternalName());
  generateCodeToFillArrayElement(i++,classDesc);
  generateCodeToFillArrayElement(i++,methodAccess);
  if (mockMethod.isAdvice) {
    generateCodeToFillArrayElement(i++,methodName);
    generateCodeToFillArrayElement(i++,methodDesc);
  }
 else {
    generateCodeToFillArrayElement(i++,mockMethod.name);
    generateCodeToFillArrayElement(i++,mockMethod.desc);
  }
  generateCodeToFillArrayElement(i++,mockMethod.getIndexForMockState());
  generateCodeToFillArrayWithParameterValues(mw,argTypes,i,isStatic ? 0 : 1);
  generateCallToInvocationHandler();
}",0.9923973644196656
164953,"private void generateCallToControlMethodThroughMockingBridge(){
  generateCodeToObtainInstanceOfMockingBridge(MockupBridge.MB);
  generateCodeToPassThisOrNullIfStaticMethod(mw,methodAccess);
  mw.visitInsn(ACONST_NULL);
  generateCodeToCreateArrayOfObject(mw,2);
  int i=0;
  generateCodeToFillArrayElement(i++,mockMethods.getMockClassInternalName());
  generateCodeToFillArrayElement(i,mockMethod.getIndexForMockState());
  generateCallToInvocationHandler();
}","private void generateCallToControlMethodThroughMockingBridge(){
  generateCodeToObtainInstanceOfMockingBridge(MockupBridge.MB);
  generateCodeToPassThisOrNullIfStaticMethod();
  mw.visitInsn(ACONST_NULL);
  generateCodeToCreateArrayOfObject(mw,2);
  int i=0;
  generateCodeToFillArrayElement(i++,mockMethods.getMockClassInternalName());
  generateCodeToFillArrayElement(i,mockMethod.getIndexForMockState());
  generateCallToInvocationHandler();
}",0.9834619625137816
164954,"private void generateCallToCreateNewMockInvocation(@NotNull Type[] argTypes,int initialParameterIndex){
  generateCodeToPassThisOrNullIfStaticMethod(mw,methodAccess);
  int argCount=argTypes.length;
  if (argCount == 0) {
    mw.visitInsn(ACONST_NULL);
  }
 else {
    generateCodeToCreateArrayOfObject(mw,argCount);
    generateCodeToFillArrayWithParameterValues(mw,argTypes,0,initialParameterIndex);
  }
  mw.visitLdcInsn(mockMethods.getMockClassInternalName());
  mw.visitIntInsn(SIPUSH,mockMethod.getIndexForMockState());
  mw.visitLdcInsn(classDesc);
  mw.visitLdcInsn(methodName);
  mw.visitLdcInsn(methodDesc);
  mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",false);
}","private void generateCallToCreateNewMockInvocation(@NotNull Type[] argTypes,int initialParameterIndex){
  generateCodeToPassThisOrNullIfStaticMethod();
  int argCount=argTypes.length;
  if (argCount == 0) {
    mw.visitInsn(ACONST_NULL);
  }
 else {
    generateCodeToCreateArrayOfObject(mw,argCount);
    generateCodeToFillArrayWithParameterValues(mw,argTypes,0,initialParameterIndex);
  }
  mw.visitLdcInsn(mockMethods.getMockClassInternalName());
  mw.visitIntInsn(SIPUSH,mockMethod.getIndexForMockState());
  mw.visitLdcInsn(classDesc);
  mw.visitLdcInsn(methodName);
  mw.visitLdcInsn(methodDesc);
  mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",false);
}",0.9896907216494846
164955,"private void generateCallToUpdateMockState(){
  if (useMockingBridgeForUpdatingMockState) {
    generateCallToControlMethodThroughMockingBridge();
    mw.visitTypeInsn(CHECKCAST,""String_Node_Str"");
    mw.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mw.visitLdcInsn(mockMethods.getMockClassInternalName());
    generateCodeToPassThisOrNullIfStaticMethod(mw,methodAccess);
    mw.visitIntInsn(SIPUSH,mockMethod.getIndexForMockState());
    mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
}","private void generateCallToUpdateMockState(){
  if (useMockingBridgeForUpdatingMockState) {
    generateCallToControlMethodThroughMockingBridge();
    mw.visitTypeInsn(CHECKCAST,""String_Node_Str"");
    mw.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mw.visitLdcInsn(mockMethods.getMockClassInternalName());
    generateCodeToPassThisOrNullIfStaticMethod();
    mw.visitIntInsn(SIPUSH,mockMethod.getIndexForMockState());
    mw.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
}",0.987363100252738
164956,"@Mock int doSomething(){
  return 2;
}","private void doSomething(){
}",0.5671641791044776
164957,"public int getNumberOfCoveredSegments(){
  if (executionCount == 0) {
    return 0;
  }
  if (noBranchesYet()) {
    return 1;
  }
  return getSegmentsCovered();
}","public int getNumberOfCoveredSegments(){
  return noBranchesYet() ? 1 : getSegmentsCovered();
}",0.7209302325581395
164958,"private void addMappingsFromTypeParametersToTypeArguments(@NotNull Class<?> mockedClass,@NotNull ParameterizedType mockedType){
  TypeVariable<?>[] typeParameters=mockedClass.getTypeParameters();
  Type[] typeArguments=mockedType.getActualTypeArguments();
  int n=typeParameters.length;
  for (int i=0; i < n; i++) {
    TypeVariable<?> typeParam=typeParameters[i];
    String typeVarName=typeParam.getName();
    Type typeArg=typeArguments[i];
    Type mappedTypeArg;
    String mappedTypeArgName=null;
    if (typeArg instanceof Class<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        mappedTypeArgName='L' + ((Class<?>)typeArg).getName().replace('.','/');
      }
    }
 else     if (typeArg instanceof TypeVariable<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        String intermediateTypeArg='T' + ((TypeVariable<?>)typeArg).getName();
        mappedTypeArgName=typeParametersToTypeArgumentNames.get(intermediateTypeArg);
      }
    }
 else {
      mappedTypeArg=typeParam.getBounds()[0];
      if (withSignatures) {
        mappedTypeArgName='L' + getClassType(mappedTypeArg).getName().replace('.','/');
      }
    }
    addTypeMapping(typeVarName,mappedTypeArg,mappedTypeArgName);
  }
}","private void addMappingsFromTypeParametersToTypeArguments(@NotNull Class<?> mockedClass,@NotNull ParameterizedType mockedType){
  TypeVariable<?>[] typeParameters=mockedClass.getTypeParameters();
  Type[] typeArguments=mockedType.getActualTypeArguments();
  int n=typeParameters.length;
  for (int i=0; i < n; i++) {
    TypeVariable<?> typeParam=typeParameters[i];
    String typeVarName=typeParam.getName();
    if (typeParametersToTypeArguments.containsKey(typeVarName)) {
      continue;
    }
    Type typeArg=typeArguments[i];
    Type mappedTypeArg;
    String mappedTypeArgName=null;
    if (typeArg instanceof Class<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        mappedTypeArgName='L' + ((Class<?>)typeArg).getName().replace('.','/');
      }
    }
 else     if (typeArg instanceof TypeVariable<?>) {
      mappedTypeArg=typeArg;
      if (withSignatures) {
        String intermediateTypeArg='T' + ((TypeVariable<?>)typeArg).getName();
        mappedTypeArgName=typeParametersToTypeArgumentNames.get(intermediateTypeArg);
      }
    }
 else {
      mappedTypeArg=typeParam.getBounds()[0];
      if (withSignatures) {
        mappedTypeArgName='L' + getClassType(mappedTypeArg).getName().replace('.','/');
      }
    }
    addTypeMapping(typeVarName,mappedTypeArg,mappedTypeArgName);
  }
}",0.965625
164959,"private void createCaptureTransformer(@NotNull CapturedType captureMetadata,boolean registerCapturedClasses){
  CaptureTransformer transformer=new CaptureTransformer(captureMetadata,this,registerCapturedClasses);
  Startup.instrumentation().addTransformer(transformer,true);
  TestRun.mockFixture().addCaptureTransformer(transformer);
}","private void createCaptureTransformer(@NotNull CapturedType captureMetadata,boolean registerCapturedClasses,@Nullable M typeMetadata){
  CaptureTransformer<M> transformer=new CaptureTransformer<M>(captureMetadata,this,registerCapturedClasses,typeMetadata);
  Startup.instrumentation().addTransformer(transformer,true);
  TestRun.mockFixture().addCaptureTransformer(transformer);
}",0.9385474860335196
164960,"public final void makeSureAllSubtypesAreModified(@NotNull Class<?> baseType,boolean registerCapturedClasses){
  if (baseType == TypeVariable.class) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String baseTypeDesc=Type.getInternalName(baseType);
  CapturedType captureMetadata=new CapturedType(baseType);
  redefineClassesAlreadyLoaded(captureMetadata,baseTypeDesc);
  createCaptureTransformer(captureMetadata,registerCapturedClasses);
}","public final void makeSureAllSubtypesAreModified(@NotNull Class<?> baseType,boolean registerCapturedClasses,@Nullable M typeMetadata){
  if (baseType == TypeVariable.class) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CapturedType captureMetadata=new CapturedType(baseType);
  redefineClassesAlreadyLoaded(captureMetadata,baseType,typeMetadata);
  createCaptureTransformer(captureMetadata,registerCapturedClasses,typeMetadata);
}",0.484048404840484
164961,"private void redefineClassesAlreadyLoaded(@NotNull CapturedType captureMetadata,@NotNull String baseTypeDesc){
  Class<?>[] classesLoaded=Startup.instrumentation().getAllLoadedClasses();
  for (  Class<?> aClass : classesLoaded) {
    if (captureMetadata.isToBeCaptured(aClass)) {
      redefineClass(aClass,baseTypeDesc);
    }
  }
}","private void redefineClassesAlreadyLoaded(@NotNull CapturedType captureMetadata,@NotNull Class<?> baseType,@Nullable M typeMetadata){
  Class<?>[] classesLoaded=Startup.instrumentation().getAllLoadedClasses();
  for (  Class<?> aClass : classesLoaded) {
    if (captureMetadata.isToBeCaptured(aClass)) {
      redefineClass(aClass,baseType,typeMetadata);
    }
  }
}",0.9142857142857144
164962,"@NotNull protected abstract BaseClassModifier createModifier(@Nullable ClassLoader cl,@NotNull ClassReader cr,@NotNull String baseTypeDesc);","@NotNull protected abstract BaseClassModifier createModifier(@Nullable ClassLoader cl,@NotNull ClassReader cr,@NotNull Class<?> baseType,M typeMetadata);",0.89419795221843
164963,"@Override @Nullable public byte[] transform(@Nullable ClassLoader loader,@NotNull String classDesc,@Nullable Class<?> classBeingRedefined,@Nullable ProtectionDomain protectionDomain,@NotNull byte[] classfileBuffer){
  if (classBeingRedefined != null || inactive || CapturedType.isNotToBeCaptured(loader,protectionDomain,classDesc)) {
    return null;
  }
  ClassReader cr=new ClassReader(classfileBuffer);
  SuperTypeCollector superTypeCollector=new SuperTypeCollector(loader);
  try {
    cr.accept(superTypeCollector,SKIP_DEBUG);
  }
 catch (  VisitInterruptedException ignore) {
    if (superTypeCollector.classExtendsCapturedType && !isGeneratedClass(classDesc)) {
      String className=classDesc.replace('/','.');
      return modifyAndRegisterClass(loader,className,cr);
    }
  }
  return null;
}","@Override @Nullable public byte[] transform(@Nullable ClassLoader loader,@NotNull String classDesc,@Nullable Class<?> classBeingRedefined,@Nullable ProtectionDomain protectionDomain,@NotNull byte[] classfileBuffer){
  if (classBeingRedefined != null || inactive || CapturedType.isNotToBeCaptured(loader,protectionDomain,classDesc)) {
    return null;
  }
  ClassReader cr=new ClassReader(classfileBuffer);
  SuperTypeCollector superTypeCollector=new SuperTypeCollector(loader);
  try {
    cr.accept(superTypeCollector,SKIP_DEBUG);
  }
 catch (  VisitInterruptedException ignore) {
    if (superTypeCollector.classExtendsCapturedType) {
      String className=classDesc.replace('/','.');
      return modifyAndRegisterClass(loader,className,cr);
    }
  }
  return null;
}",0.9796954314720812
164964,"@NotNull private byte[] modifyAndRegisterClass(@Nullable ClassLoader loader,@NotNull String className,@NotNull ClassReader cr){
  ClassVisitor modifier=captureOfImplementations.createModifier(loader,cr,capturedTypeDesc);
  cr.accept(modifier,SKIP_FRAMES);
  ClassIdentification classId=new ClassIdentification(loader,className);
  byte[] originalBytecode=cr.b;
  if (transformedClasses == Collections.<ClassIdentification,byte[]>emptyMap()) {
    TestRun.mockFixture().addTransformedClass(classId,originalBytecode);
  }
 else {
    transformedClasses.put(classId,originalBytecode);
  }
  TestRun.mockFixture().registerMockedClass(capturedType.baseType);
  return modifier.toByteArray();
}","@NotNull private byte[] modifyAndRegisterClass(@Nullable ClassLoader loader,@NotNull String className,@NotNull ClassReader cr){
  ClassVisitor modifier=captureOfImplementations.createModifier(loader,cr,capturedType.baseType,typeMetadata);
  cr.accept(modifier,SKIP_FRAMES);
  ClassIdentification classId=new ClassIdentification(loader,className);
  byte[] originalBytecode=cr.b;
  if (transformedClasses == Collections.<ClassIdentification,byte[]>emptyMap()) {
    TestRun.mockFixture().addTransformedClass(classId,originalBytecode);
  }
 else {
    transformedClasses.put(classId,originalBytecode);
  }
  TestRun.mockFixture().registerMockedClass(capturedType.baseType);
  return modifier.toByteArray();
}",0.981348637015782
164965,"CaptureTransformer(@NotNull CapturedType capturedType,@NotNull CaptureOfImplementations captureOfImplementations,boolean registerTransformedClasses){
  this.capturedType=capturedType;
  capturedTypeDesc=Type.getInternalName(capturedType.baseType);
  this.captureOfImplementations=captureOfImplementations;
  transformedClasses=registerTransformedClasses ? new HashMap<ClassIdentification,byte[]>(2) : Collections.<ClassIdentification,byte[]>emptyMap();
}","CaptureTransformer(@NotNull CapturedType capturedType,@NotNull CaptureOfImplementations<M> captureOfImplementations,boolean registerTransformedClasses,@Nullable M typeMetadata){
  this.capturedType=capturedType;
  capturedTypeDesc=Type.getInternalName(capturedType.baseType);
  this.captureOfImplementations=captureOfImplementations;
  transformedClasses=registerTransformedClasses ? new HashMap<ClassIdentification,byte[]>(2) : Collections.<ClassIdentification,byte[]>emptyMap();
  this.typeMetadata=typeMetadata;
}",0.936082474226804
164966,"final void registerCaptureOfNewInstances(@NotNull MockedType typeMetadata,@Nullable Object mockInstance){
  capturingTypeMetadata=typeMetadata;
  Class<?> baseType=typeMetadata.getClassType();
  if (!typeMetadata.isFinalFieldOrParameter()) {
    makeSureAllSubtypesAreModified(baseType,typeMetadata.fieldFromTestClass);
  }
  List<Capture> captures=baseTypeToCaptures.get(baseType);
  if (captures == null) {
    captures=new ArrayList<Capture>();
    baseTypeToCaptures.put(baseType,captures);
  }
  captures.add(new Capture(typeMetadata,mockInstance));
}","final void registerCaptureOfNewInstances(@NotNull MockedType typeMetadata,@Nullable Object mockInstance){
  Class<?> baseType=typeMetadata.getClassType();
  if (!typeMetadata.isFinalFieldOrParameter()) {
    makeSureAllSubtypesAreModified(typeMetadata);
  }
  List<Capture> captures=baseTypeToCaptures.get(baseType);
  if (captures == null) {
    captures=new ArrayList<Capture>();
    baseTypeToCaptures.put(baseType,captures);
  }
  captures.add(new Capture(typeMetadata,mockInstance));
}",0.9139579349904398
164967,"public final boolean captureNewInstance(@Nullable Object fieldOwner,@NotNull Object mock){
  Class<?> mockedClass=mock.getClass();
  List<Capture> captures=baseTypeToCaptures.get(mockedClass);
  boolean constructorModifiedForCaptureOnly=captures == null;
  if (constructorModifiedForCaptureOnly) {
    captures=findCaptures(mockedClass);
    if (captures == null) {
      return false;
    }
  }
  Capture captureFound=findCapture(fieldOwner,mock,captures);
  if (capturingTypeMetadata.injectable) {
    if (captureFound != null) {
      TestRun.getExecutingTest().addCapturedInstanceForInjectableMock(captureFound.originalMockInstance,mock);
    }
    constructorModifiedForCaptureOnly=true;
  }
 else   if (captureFound != null) {
    TestRun.getExecutingTest().addCapturedInstance(captureFound.originalMockInstance,mock);
  }
  return constructorModifiedForCaptureOnly;
}","public final boolean captureNewInstance(@Nullable Object fieldOwner,@NotNull Object mock){
  Class<?> mockedClass=mock.getClass();
  List<Capture> captures=baseTypeToCaptures.get(mockedClass);
  boolean constructorModifiedForCaptureOnly=captures == null;
  if (constructorModifiedForCaptureOnly) {
    captures=findCaptures(mockedClass);
    if (captures == null) {
      return false;
    }
  }
  Capture captureFound=findCapture(fieldOwner,mock,captures);
  if (captureFound != null) {
    if (captureFound.typeMetadata.injectable) {
      TestRun.getExecutingTest().addCapturedInstanceForInjectableMock(captureFound.originalMockInstance,mock);
      constructorModifiedForCaptureOnly=true;
    }
 else {
      TestRun.getExecutingTest().addCapturedInstance(captureFound.originalMockInstance,mock);
    }
  }
  return constructorModifiedForCaptureOnly;
}",0.7109826589595376
164968,"@Override @NotNull protected final BaseClassModifier createModifier(@Nullable ClassLoader cl,@NotNull ClassReader cr,@NotNull String baseTypeDesc){
  ExpectationsModifier modifier=new ExpectationsModifier(cl,cr,capturingTypeMetadata);
  modifier.setClassNameForCapturedInstanceMethods(baseTypeDesc);
  return modifier;
}","@NotNull @Override protected final BaseClassModifier createModifier(@Nullable ClassLoader cl,@NotNull ClassReader cr,@NotNull Class<?> baseType,@NotNull MockedType typeMetadata){
  ExpectationsModifier modifier=new ExpectationsModifier(cl,cr,typeMetadata);
  modifier.setClassNameForCapturedInstanceMethods(Type.getInternalName(baseType));
  return modifier;
}",0.8441176470588235
164969,"private void resetCaptureCount(@NotNull Field mockField,@NotNull List<Capture> fieldsWithCapture){
  for (  Capture fieldWithCapture : fieldsWithCapture) {
    if (fieldWithCapture.typeMetadata.field == mockField) {
      fieldWithCapture.reset();
    }
  }
}","private static void resetCaptureCount(@NotNull Field mockField,@NotNull List<Capture> fieldsWithCapture){
  for (  Capture fieldWithCapture : fieldsWithCapture) {
    if (fieldWithCapture.typeMetadata.field == mockField) {
      fieldWithCapture.reset();
    }
  }
}",0.9866666666666668
164970,"private void registerCaptureOfNewInstances(@NotNull MockedType mockedType,@NotNull Object originalInstance){
  if (captureOfNewInstances == null) {
    captureOfNewInstances=new CaptureOfNewInstances();
  }
  captureOfNewInstances.registerCaptureOfNewInstances(mockedType,originalInstance);
  captureOfNewInstances.makeSureAllSubtypesAreModified(mockedType.getClassType());
}","private void registerCaptureOfNewInstances(@NotNull MockedType mockedType,@NotNull Object originalInstance){
  if (captureOfNewInstances == null) {
    captureOfNewInstances=new CaptureOfNewInstances();
  }
  captureOfNewInstances.registerCaptureOfNewInstances(mockedType,originalInstance);
  captureOfNewInstances.makeSureAllSubtypesAreModified(mockedType);
}",0.979591836734694
164971,"@Nullable public <T>Class<T> apply(){
  @SuppressWarnings(""String_Node_Str"") Class<T> baseType=(Class<T>)mockClassSetup.realClass;
  Class<T> baseClassType=baseType;
  Class<T> mockedClass=null;
  if (baseType.isInterface()) {
    mockedClass=new MockedImplementationClass<T>(mockClassSetup.mockUp).createImplementation(baseType);
    baseClassType=mockedClass;
  }
  if (baseClassType != Object.class) {
    redefineClass(baseClassType,mockit.external.asm4.Type.getInternalName(baseType));
    mockClassSetup.validateThatAllMockMethodsWereApplied();
  }
  makeSureAllSubtypesAreModified(baseType,false);
  return mockedClass;
}","@Nullable public <T>Class<T> apply(){
  @SuppressWarnings(""String_Node_Str"") Class<T> baseType=(Class<T>)mockClassSetup.realClass;
  Class<T> baseClassType=baseType;
  Class<T> mockedClass=null;
  if (baseType.isInterface()) {
    mockedClass=new MockedImplementationClass<T>(mockClassSetup.mockUp).createImplementation(baseType);
    baseClassType=mockedClass;
  }
  if (baseClassType != Object.class) {
    redefineClass(baseClassType,baseType,null);
    mockClassSetup.validateThatAllMockMethodsWereApplied();
  }
  makeSureAllSubtypesAreModified(baseType,false,null);
  return mockedClass;
}",0.9435813573180704
164972,"@NotNull @Override protected BaseClassModifier createModifier(@Nullable ClassLoader cl,@NotNull ClassReader cr,@NotNull String baseTypeDesc){
  return mockClassSetup.createClassModifier(cr);
}","@NotNull @Override protected BaseClassModifier createModifier(@Nullable ClassLoader cl,@NotNull ClassReader cr,@NotNull Class<?> baseType,Void typeMetadata){
  return mockClassSetup.createClassModifier(cr);
}",0.91
164973,"public void doSomethingElse(int i){
}","@Override public void doSomethingElse(int i){
}",0.8809523809523809
164974,"@SuppressWarnings({""String_Node_Str""}) Object[] valueForSuper(String s){
  return new Object[]{""String_Node_Str""};
}","@SuppressWarnings(""String_Node_Str"") Object[] valueForSuper(String s){
  return new Object[]{""String_Node_Str""};
}",0.991304347826087
164975,"public int doSomething(){
  return 2;
}","@Override public int doSomething(){
  return 2;
}",0.8863636363636364
164976,"protected static void clearTestedFieldsIfAny(){
  SharedFieldTypeRedefinitions sharedRedefinitions=TestRun.getSharedFieldTypeRedefinitions();
  if (sharedRedefinitions != null) {
    TestedClassInstantiations testedClasses=sharedRedefinitions.getTestedClassInstantiations();
    if (testedClasses != null) {
      testedClasses.clearTestedFields();
    }
  }
}","protected static void clearTestedFieldsIfAny(boolean testSucceeded){
  SharedFieldTypeRedefinitions sharedRedefinitions=TestRun.getSharedFieldTypeRedefinitions();
  if (sharedRedefinitions != null) {
    TestedClassInstantiations testedClasses=sharedRedefinitions.getTestedClassInstantiations();
    if (testedClasses != null) {
      testedClasses.clearTestedFields(testSucceeded);
    }
  }
}",0.9549071618037136
164977,"protected static void concludeTestMethodExecution(@NotNull SavePoint savePoint,@Nullable Throwable thrownByTest,boolean thrownAsExpected) throws Throwable {
  TestRun.enterNoMockingZone();
  Error expectationsFailure=RecordAndReplayExecution.endCurrentReplayIfAny();
  MockStates mockStates=TestRun.getMockStates();
  try {
    if (expectationsFailure == null && (thrownByTest == null || thrownAsExpected)) {
      mockStates.verifyMissingInvocations();
    }
  }
  finally {
    mockStates.resetExpectations();
    savePoint.rollback();
    TestRun.exitNoMockingZone();
  }
  if (thrownByTest != null) {
    if (expectationsFailure == null || !thrownAsExpected || isUnexpectedOrMissingInvocation(thrownByTest)) {
      throw thrownByTest;
    }
    Throwable expectationsFailureCause=expectationsFailure.getCause();
    if (expectationsFailureCause != null) {
      expectationsFailureCause.initCause(thrownByTest);
    }
  }
  if (expectationsFailure != null) {
    throw expectationsFailure;
  }
}","protected static void concludeTestMethodExecution(@NotNull SavePoint savePoint,@Nullable Throwable thrownByTest,boolean thrownAsExpected) throws Throwable {
  TestRun.enterNoMockingZone();
  Error expectationsFailure=RecordAndReplayExecution.endCurrentReplayIfAny();
  boolean testSucceeded=expectationsFailure == null && (thrownByTest == null || thrownAsExpected);
  MockStates mockStates=TestRun.getMockStates();
  try {
    clearTestedFieldsIfAny(testSucceeded);
    if (expectationsFailure == null && (thrownByTest == null || thrownAsExpected)) {
      mockStates.verifyMissingInvocations();
    }
  }
  finally {
    mockStates.resetExpectations();
    savePoint.rollback();
    TestRun.exitNoMockingZone();
  }
  if (thrownByTest != null) {
    if (expectationsFailure == null || !thrownAsExpected || isUnexpectedOrMissingInvocation(thrownByTest)) {
      throw thrownByTest;
    }
    Throwable expectationsFailureCause=expectationsFailure.getCause();
    if (expectationsFailureCause != null) {
      expectationsFailureCause.initCause(thrownByTest);
    }
  }
  if (expectationsFailure != null) {
    throw expectationsFailure;
  }
}",0.9337068160597572
164978,"private static void executeTestMethod(@NotNull MockInvocation invocation,@NotNull Object target,@Nullable Object... parameters) throws Throwable {
  SavePoint savePoint=new SavePoint();
  TestRun.setRunningIndividualTest(target);
  FrameworkMethod it=invocation.getInvokedInstance();
  Method testMethod=it.getMethod();
  Throwable testFailure=null;
  boolean testFailureExpected=false;
  try {
    Object[] mockParameters=createInstancesForMockParameters(target,testMethod,parameters);
    createInstancesForTestedFields(target);
    invocation.prepareToProceed();
    Object[] params=mockParameters == null ? parameters : mockParameters;
    it.invokeExplosively(target,params);
  }
 catch (  Throwable thrownByTest) {
    testFailure=thrownByTest;
    Class<? extends Throwable> expectedType=testMethod.getAnnotation(Test.class).expected();
    testFailureExpected=expectedType.isAssignableFrom(thrownByTest.getClass());
  }
 finally {
    clearTestedFieldsIfAny();
    concludeTestMethodExecution(savePoint,testFailure,testFailureExpected);
  }
}","private static void executeTestMethod(@NotNull MockInvocation invocation,@NotNull Object target,@Nullable Object... parameters) throws Throwable {
  SavePoint savePoint=new SavePoint();
  TestRun.setRunningIndividualTest(target);
  FrameworkMethod it=invocation.getInvokedInstance();
  Method testMethod=it.getMethod();
  Throwable testFailure=null;
  boolean testFailureExpected=false;
  try {
    Object[] mockParameters=createInstancesForMockParameters(target,testMethod,parameters);
    createInstancesForTestedFields(target);
    invocation.prepareToProceed();
    Object[] params=mockParameters == null ? parameters : mockParameters;
    it.invokeExplosively(target,params);
  }
 catch (  Throwable thrownByTest) {
    testFailure=thrownByTest;
    Class<?> expectedType=testMethod.getAnnotation(Test.class).expected();
    testFailureExpected=expectedType.isAssignableFrom(thrownByTest.getClass());
  }
 finally {
    concludeTestMethodExecution(savePoint,testFailure,testFailureExpected);
  }
}",0.9766081871345028
164979,"@Override public void afterInvocation(@NotNull IInvokedMethod invokedMethod,@NotNull ITestResult testResult){
  if (!invokedMethod.isTestMethod()) {
    afterConfigurationMethod(testResult);
    return;
  }
  TestRun.enterNoMockingZone();
  clearTestedFieldsIfAny();
  shouldPrepareForNextTest=true;
  SavePoint testMethodSavePoint=savePoint.get();
  savePoint.set(null);
  Throwable thrownByTest=testResult.getThrowable();
  try {
    if (thrownByTest == null) {
      concludeTestExecutionWithNothingThrown(testMethodSavePoint,testResult);
    }
 else     if (thrownByTest instanceof TestException) {
      concludeTestExecutionWithExpectedExceptionNotThrown(invokedMethod,testMethodSavePoint,testResult);
    }
 else     if (testResult.isSuccess()) {
      concludeTestExecutionWithExpectedExceptionThrown(testMethodSavePoint,testResult,thrownByTest);
    }
 else {
      concludeTestExecutionWithUnexpectedExceptionThrown(testMethodSavePoint,thrownByTest);
    }
  }
  finally {
    TestRun.finishCurrentTestExecution(false);
    TestRun.exitNoMockingZone();
  }
}","@Override public void afterInvocation(@NotNull IInvokedMethod invokedMethod,@NotNull ITestResult testResult){
  if (!invokedMethod.isTestMethod()) {
    afterConfigurationMethod(testResult);
    return;
  }
  TestRun.enterNoMockingZone();
  shouldPrepareForNextTest=true;
  SavePoint testMethodSavePoint=savePoint.get();
  savePoint.set(null);
  Throwable thrownByTest=testResult.getThrowable();
  try {
    if (thrownByTest == null) {
      concludeTestExecutionWithNothingThrown(testMethodSavePoint,testResult);
    }
 else     if (thrownByTest instanceof TestException) {
      concludeTestExecutionWithExpectedExceptionNotThrown(invokedMethod,testMethodSavePoint,testResult);
    }
 else     if (testResult.isSuccess()) {
      concludeTestExecutionWithExpectedExceptionThrown(testMethodSavePoint,testResult,thrownByTest);
    }
 else {
      concludeTestExecutionWithUnexpectedExceptionThrown(testMethodSavePoint,thrownByTest);
    }
  }
  finally {
    TestRun.finishCurrentTestExecution(false);
    TestRun.exitNoMockingZone();
  }
}",0.986717267552182
164980,"public void clearTestedFields(){
  for (  TestedField testedField : testedFields) {
    testedField.clearIfAutomaticCreation();
  }
}","public void clearTestedFields(boolean testSucceeded){
  for (  TestedField testedField : testedFields) {
    testedField.clearIfAutomaticCreation(testSucceeded);
  }
}",0.8866666666666667
164981,"void clearIfAutomaticCreation(){
  if (createAutomatically) {
    Object testClassInstance=injectionState.getCurrentTestClassInstance();
    Object testedObject=FieldReflection.getFieldValue(testedField,testClassInstance);
    if (testedObject != null) {
      Class<?> testedClass=testedField.getType();
      executePreDestroyMethodIfAny(testedClass,testedObject);
    }
    FieldReflection.setFieldValue(testedField,testClassInstance,null);
  }
}","void clearIfAutomaticCreation(boolean testSucceeded){
  if (createAutomatically) {
    Object testClassInstance=injectionState.getCurrentTestClassInstance();
    if (testSucceeded) {
      Object testedObject=FieldReflection.getFieldValue(testedField,testClassInstance);
      if (testedObject != null) {
        Class<?> testedClass=testedField.getType();
        executePreDestroyMethodIfAny(testedClass,testedObject);
      }
    }
    FieldReflection.setFieldValue(testedField,testClassInstance,null);
  }
}",0.9354166666666668
164982,"private static boolean isJMockitMethod(@NotNull String where){
  if (!where.startsWith(""String_Node_Str"")) {
    return false;
  }
  int p=where.lastIndexOf(""String_Node_Str"") + 4;
  if (p < 4) {
    return true;
  }
  return p < where.length() && where.charAt(p) != '$';
}","private static boolean isJMockitMethod(@NotNull String where){
  if (!where.startsWith(""String_Node_Str"")) {
    return false;
  }
  int p=where.indexOf('$');
  if (p < 0) {
    int q=where.lastIndexOf(""String_Node_Str"");
    return q < 0 || q + 4 < where.length();
  }
  int q=where.lastIndexOf(""String_Node_Str"",p - 4);
  if (q < 0) {
    return true;
  }
  q+=4;
  return q < where.length() && where.charAt(q) != '$';
}",0.4489208633093525
164983,"@Nullable private Object findOrCreateEntityManager(@NotNull Object dependencyKey){
  String persistenceUnitName;
  Object emFactoryKey;
  if (dependencyKey instanceof String) {
    persistenceUnitName=extractIdFromDependencyKey((String)dependencyKey);
    emFactoryKey=EntityManagerFactory.class.getName() + ':' + persistenceUnitName;
  }
 else {
    persistenceUnitName=""String_Node_Str"";
    emFactoryKey=EntityManagerFactory.class;
  }
  EntityManagerFactory emFactory=(EntityManagerFactory)instantiatedDependencies.get(emFactoryKey);
  if (emFactory == null) {
    emFactory=Persistence.createEntityManagerFactory(persistenceUnitName);
  }
  return emFactory == null ? null : emFactory.createEntityManager();
}","@Nullable private Object findOrCreateEntityManager(@NotNull Object dependencyKey){
  String persistenceUnitName;
  Object emFactoryKey;
  if (dependencyKey instanceof String) {
    persistenceUnitName=extractIdFromDependencyKey((String)dependencyKey);
    emFactoryKey=EntityManagerFactory.class.getName() + ':' + persistenceUnitName;
  }
 else {
    persistenceUnitName=null;
    emFactoryKey=EntityManagerFactory.class;
  }
  EntityManagerFactory emFactory=(EntityManagerFactory)instantiatedDependencies.get(emFactoryKey);
  if (emFactory == null) {
    if (persistenceUnitName == null) {
      persistenceUnitName=discoverNameOfDefaultPersistenceUnit();
    }
    emFactory=Persistence.createEntityManagerFactory(persistenceUnitName);
  }
  return emFactory == null ? null : emFactory.createEntityManager();
}",0.9003931847968545
164984,"@Test public void useFullyInitializedTestedObject(){
  assertSame(mockedDependency,tested.dependencyToBeMocked);
  assertNotNull(tested.dependency2);
  assertSame(tested.dependency2,tested.dependency3);
  assertNotNull(tested.commonDependency);
  assertNotNull(tested.dependency2.dependency);
  assertSame(FirstLevelDependency.staticDependency,tested.dependency2.dependency);
  assertSame(tested.dependency3.dependency,tested.dependency2.dependency);
  assertSame(tested.commonDependency,tested.dependency2.commonDependency);
  assertSame(tested.commonDependency,tested.dependency3.commonDependency);
  assertSame(mockedDependency,FirstLevelDependency.dependencyToBeMocked);
  assertSame(mockedDependency,FirstLevelDependency.dependencyToBeMocked);
  assertSame(defaultEM,tested.dependency2.em);
  assertSame(tested.dependency2.em,tested.dependency3.em);
  assertSame(namedEMFactory,tested.commonDependency.emFactory);
  assertSame(namedEM,tested.commonDependency.em);
  assertNotSame(tested.dependency2.em,tested.commonDependency.em);
  assertSame(tested.commonDependency,tested.dependency2.dependency.commonDependency);
  assertSame(defaultEMFactory,tested.dependency2.dependency.emFactory);
  assertSame(tested.dependency2.em,tested.dependency2.dependency.em);
  assertTrue(tested.initialized);
  assertTrue(tested.dependency2.dependency.initialized);
}","@Test public void useFullyInitializedTestedObject(){
  assertSame(mockedDependency,tested.dependencyToBeMocked);
  assertNotNull(tested.dependency2);
  assertSame(tested.dependency2,tested.dependency3);
  assertNotNull(tested.commonDependency);
  assertNotNull(tested.dependency2.dependency);
  assertSame(FirstLevelDependency.staticDependency,tested.dependency2.dependency);
  assertSame(tested.dependency3.dependency,tested.dependency2.dependency);
  assertSame(tested.commonDependency,tested.dependency2.commonDependency);
  assertSame(tested.commonDependency,tested.dependency3.commonDependency);
  assertSame(mockedDependency,FirstLevelDependency.dependencyToBeMocked);
  assertSame(mockedDependency,FirstLevelDependency.dependencyToBeMocked);
  assertSame(defaultEM,tested.dependency2.em);
  assertSame(tested.dependency2.em,tested.dependency3.em);
  assertSame(namedEMFactory,tested.commonDependency.emFactory);
  assertSame(namedEM,tested.commonDependency.em);
  assertNotSame(tested.dependency2.em,tested.commonDependency.em);
  assertSame(tested.commonDependency,tested.dependency2.dependency.commonDependency);
  assertSame(tested.dependency2.em,tested.dependency2.dependency.em);
  assertTrue(tested.initialized);
  assertTrue(tested.dependency2.dependency.initialized);
}",0.8946969696969697
164985,"/** 
 * Paint the passed color (non-resource value) on the object
 * @param cloneDrawable - whether we want to reuse a drawable globally, or clone it for the specific object
 * @param object - View, MenuItem's ActionView, ActionBar, or Drawable
 * @param paint
 */
public void paint(boolean cloneDrawable,Object object,int paint){
  if (object != null) {
    Drawable drawable=null;
    if (object instanceof Drawable) {
      drawable=(Drawable)object;
    }
 else     if (object instanceof View || object instanceof MenuItem) {
      View view=null;
      if (object instanceof MenuItem && Utils.isHoneyComb()) {
        view=((MenuItem)object).getActionView();
      }
 else       if (object instanceof View) {
        view=((View)object);
      }
      if (view != null) {
        drawable=view.getBackground();
        if (drawable == null || drawable instanceof ColorDrawable) {
          drawable=new ColorDrawable(paint);
          view.setBackgroundDrawable(drawable);
        }
 else         if (cloneDrawable) {
          drawable=drawable.getConstantState().newDrawable();
          view.setBackgroundDrawable(drawable);
        }
      }
    }
 else     if (object instanceof ActionBar) {
      drawable=new ColorDrawable(paint);
      ((ActionBar)object).setBackgroundDrawable(drawable);
    }
 else     if (Utils.isHoneyComb() && object instanceof android.app.ActionBar) {
      drawable=new ColorDrawable(paint);
      ((android.app.ActionBar)object).setBackgroundDrawable(drawable);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + object.getClass().getName());
    }
    if (drawable != null) {
      drawable.setColorFilter(paint,mMode);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + object.getClass().getName());
    }
  }
 else {
    throw new InvalidParameterException(getClass());
  }
}","/** 
 * Paint the passed color (non-resource value) on the object
 * @param cloneDrawable - whether we want to reuse a drawable globally, or clone it for the specific object
 * @param object - View, MenuItem's ActionView, ActionBar, or Drawable
 * @param paint
 */
public void paint(boolean cloneDrawable,Object object,int paint){
  if (object != null) {
    Drawable drawable=null;
    if (object instanceof Drawable) {
      drawable=PainterUtils.getDrawable(cloneDrawable,paint,((Drawable)object));
    }
 else     if (object instanceof View || object instanceof MenuItem) {
      View view=null;
      if (object instanceof MenuItem && Utils.isHoneyComb()) {
        view=((MenuItem)object).getActionView();
      }
 else       if (object instanceof View) {
        view=((View)object);
      }
      if (view != null) {
        drawable=PainterUtils.getDrawable(cloneDrawable,paint,view.getBackground());
        view.setBackgroundDrawable(drawable);
      }
    }
 else     if (object instanceof ActionBar) {
      drawable=new ColorDrawable(paint);
      ((ActionBar)object).setBackgroundDrawable(drawable);
    }
 else     if (Utils.isHoneyComb() && object instanceof android.app.ActionBar) {
      drawable=new ColorDrawable(paint);
      ((android.app.ActionBar)object).setBackgroundDrawable(drawable);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + object.getClass().getName());
    }
    if (drawable != null) {
      drawable.setColorFilter(paint,mMode);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + object.getClass().getName());
    }
  }
 else {
    throw new InvalidParameterException(getClass());
  }
}",0.8885722428042178
164986,"/** 
 * Paint the passed color (non-resource value) on the object
 * @param cloneDrawable - whether we want to reuse a drawable globally, or clone it for the specific object
 * @param viewObject - ImageView, MenuItem's Icon, TextView's first available CompoundDrawables
 * @param paint
 */
private void paint(boolean cloneDrawable,Object viewObject,int paint){
  if (viewObject != null) {
    Drawable drawable=null;
    if (viewObject instanceof ImageView) {
      drawable=((ImageView)viewObject).getDrawable();
      if (cloneDrawable) {
        drawable=drawable.getConstantState().newDrawable();
        ((ImageView)viewObject).setImageDrawable(drawable);
      }
    }
 else     if (viewObject instanceof TextView) {
      Drawable[] drawables=((TextView)viewObject).getCompoundDrawables();
      for (int i=0; i < drawables.length; i++) {
        Drawable d=drawables[i];
        if (d != null) {
          drawable=d;
          if (cloneDrawable) {
            drawable=d.getConstantState().newDrawable();
            drawables[i]=drawable;
          }
          break;
        }
      }
      if (cloneDrawable) {
        ((TextView)viewObject).setCompoundDrawables(drawables[0],drawables[1],drawables[2],drawables[3]);
      }
    }
 else     if (viewObject instanceof MenuItem) {
      drawable=((MenuItem)viewObject).getIcon();
      if (cloneDrawable) {
        drawable=drawable.getConstantState().newDrawable();
        ((MenuItem)viewObject).setIcon(drawable);
      }
    }
    if (drawable != null) {
      drawable.setColorFilter(paint,mMode);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + viewObject.getClass().getName());
    }
  }
 else {
    throw new InvalidParameterException(getClass());
  }
}","/** 
 * Paint the passed color (non-resource value) on the object
 * @param cloneDrawable - whether we want to reuse a drawable globally, or clone it for the specific object
 * @param viewObject - ImageView, MenuItem's Icon, TextView's first available CompoundDrawables
 * @param paint
 */
private void paint(boolean cloneDrawable,Object viewObject,int paint){
  if (viewObject != null) {
    Drawable drawable=null;
    if (viewObject instanceof ImageView) {
      drawable=PainterUtils.getDrawable(cloneDrawable,paint,((ImageView)viewObject).getDrawable());
      ((ImageView)viewObject).setImageDrawable(drawable);
    }
 else     if (viewObject instanceof TextView) {
      Drawable[] drawables=((TextView)viewObject).getCompoundDrawables();
      for (int i=0; i < drawables.length; i++) {
        Drawable d=drawables[i];
        if (d != null) {
          drawable=d;
          drawables[i]=PainterUtils.getDrawable(cloneDrawable,paint,d);
          break;
        }
      }
      ((TextView)viewObject).setCompoundDrawables(drawables[0],drawables[1],drawables[2],drawables[3]);
    }
 else     if (viewObject instanceof MenuItem) {
      drawable=PainterUtils.getDrawable(cloneDrawable,paint,((MenuItem)viewObject).getIcon());
      ((MenuItem)viewObject).setIcon(drawable);
    }
    if (drawable != null) {
      drawable.setColorFilter(paint,mMode);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + viewObject.getClass().getName());
    }
  }
 else {
    throw new InvalidParameterException(getClass());
  }
}",0.8291641244661379
164987,"@Override public void onSlide(float slideOffset,Object... drawables){
  int color=SliderUtils.calculateColor(slideOffset,mStartColor,mEndColor);
  for (  Object drawable : drawables) {
    mPainter.paint(drawable,color);
  }
}","@Override public void onSlide(float slideOffset,Object... drawables){
  if (mPainter == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  int color=SliderUtils.calculateColor(slideOffset,mStartColor,mEndColor);
  for (  Object drawable : drawables) {
    mPainter.paintColor(color,drawable);
  }
}",0.7808471454880295
164988,"/** 
 * This method will check to see if the drawable is null or instance of   {@link android.graphics.drawable.ColorDrawable}(see   {@link android.graphics.drawable.ColorDrawable#setColorFilter(int,android.graphics.PorterDuff.Mode)}, if so it will create one. Otherwise this will see if cloneDrawable is true and clone the drawable.
 * @param cloneDrawable - whether to clone the drawable found
 * @param paint - the paint to initialize the new color drawable with
 * @param drawable - the drawable from an object
 * @return - fully created drawable
 */
public static Drawable getDrawable(boolean cloneDrawable,int paint,Drawable drawable){
  Drawable retDrawable;
  if (drawable == null || drawable instanceof ColorDrawable) {
    retDrawable=new ColorDrawable(paint);
  }
 else   if (cloneDrawable) {
    retDrawable=drawable.getCurrent().getCurrent();
  }
 else {
    retDrawable=drawable;
  }
  return retDrawable;
}","/** 
 * This method will check to see if the drawable is null or instance of   {@link android.graphics.drawable.ColorDrawable}(see   {@link android.graphics.drawable.ColorDrawable#setColorFilter(int,android.graphics.PorterDuff.Mode)}, if so it will create one. Otherwise this will see if cloneDrawable is true and clone the drawable.
 * @param cloneDrawable - whether to clone the drawable found
 * @param paint - the paint to initialize the new color drawable with
 * @param drawable - the drawable from an object
 * @return - fully created drawable
 */
public static Drawable getDrawable(boolean cloneDrawable,int paint,Drawable drawable){
  Drawable retDrawable;
  if (drawable == null || drawable instanceof ColorDrawable) {
    retDrawable=new ColorDrawable(paint);
  }
 else   if (cloneDrawable) {
    retDrawable=drawable.getConstantState().newDrawable();
  }
 else {
    retDrawable=drawable;
  }
  return retDrawable;
}",0.9789075175770688
164989,"/** 
 * Paint the passed color (non-resource value) on the object
 * @param cloneDrawable - whether we want to reuse a drawable globally, or clone it for the specific object
 * @param viewObject - ImageView, MenuItem's Icon, TextView's first available CompoundDrawables
 * @param paint
 */
private void paint(boolean cloneDrawable,Object viewObject,int paint){
  if (viewObject != null) {
    Drawable drawable=null;
    if (viewObject instanceof ImageView) {
      drawable=PainterUtils.getDrawable(cloneDrawable,paint,((ImageView)viewObject).getDrawable());
      ((ImageView)viewObject).setImageDrawable(drawable);
    }
 else     if (viewObject instanceof TextView) {
      Drawable[] drawables=((TextView)viewObject).getCompoundDrawables();
      for (int i=0; i < drawables.length; i++) {
        Drawable d=drawables[i];
        if (d != null) {
          drawable=d;
          drawables[i]=PainterUtils.getDrawable(cloneDrawable,paint,d);
          break;
        }
      }
      ((TextView)viewObject).setCompoundDrawables(drawables[0],drawables[1],drawables[2],drawables[3]);
    }
 else     if (viewObject instanceof MenuItem) {
      drawable=PainterUtils.getDrawable(cloneDrawable,paint,((MenuItem)viewObject).getIcon());
      ((MenuItem)viewObject).setIcon(drawable);
    }
    if (drawable != null) {
      drawable.setColorFilter(paint,mMode);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + viewObject.getClass().getName());
    }
  }
 else {
    throw new InvalidParameterException(getClass());
  }
}","/** 
 * Paint the passed color (non-resource value) on the object
 * @param cloneDrawable - whether we want to reuse a drawable globally, or clone it for the specific object
 * @param viewObject - ImageView, MenuItem's Icon, TextView's first available CompoundDrawables
 * @param paint
 */
private void paint(boolean cloneDrawable,Object viewObject,int paint){
  if (viewObject != null) {
    Drawable drawable=null;
    if (viewObject instanceof Drawable) {
      drawable=(Drawable)viewObject;
    }
 else     if (viewObject instanceof ImageView) {
      drawable=PainterUtils.getDrawable(cloneDrawable,paint,((ImageView)viewObject).getDrawable());
      ((ImageView)viewObject).setImageDrawable(drawable);
    }
 else     if (viewObject instanceof TextView) {
      Drawable[] drawables=((TextView)viewObject).getCompoundDrawables();
      for (int i=0; i < drawables.length; i++) {
        Drawable d=drawables[i];
        if (d != null) {
          drawable=d;
          drawables[i]=PainterUtils.getDrawable(cloneDrawable,paint,d);
          break;
        }
      }
      ((TextView)viewObject).setCompoundDrawables(drawables[0],drawables[1],drawables[2],drawables[3]);
    }
 else     if (viewObject instanceof MenuItem) {
      drawable=PainterUtils.getDrawable(cloneDrawable,paint,((MenuItem)viewObject).getIcon());
      ((MenuItem)viewObject).setIcon(drawable);
    }
    if (drawable != null) {
      drawable.setColorFilter(paint,mMode);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + viewObject.getClass().getName());
    }
  }
 else {
    throw new InvalidParameterException(getClass());
  }
}",0.9712661825071044
164990,"/** 
 * This method will check to see if the drawable is null or instance of   {@link android.graphics.drawable.ColorDrawable}(see   {@link android.graphics.drawable.ColorDrawable#setColorFilter(int,android.graphics.PorterDuff.Mode)}, if so it will create one. Otherwise this will see if cloneDrawable is true and clone the drawable.
 * @param cloneDrawable - whether to clone the drawable found
 * @param paint - the paint to initialize the new color drawable with
 * @param drawable - the drawable from an object
 * @return - fully created drawable
 */
public static Drawable getDrawable(boolean cloneDrawable,int paint,Drawable drawable){
  Drawable retDrawable;
  if (drawable == null || drawable instanceof ColorDrawable) {
    retDrawable=new ColorDrawable(paint);
  }
 else   if (cloneDrawable) {
    retDrawable=drawable.getConstantState().newDrawable();
  }
 else {
    retDrawable=drawable;
  }
  return retDrawable;
}","/** 
 * This method will check to see if the drawable is null or instance of   {@link android.graphics.drawable.ColorDrawable}(see   {@link android.graphics.drawable.ColorDrawable#setColorFilter(int,android.graphics.PorterDuff.Mode)}, if so it will create one. Otherwise this will see if cloneDrawable is true and clone the drawable.
 * @param cloneDrawable - whether to clone the drawable found
 * @param paint - the paint to initialize the new color drawable with
 * @param drawable - the drawable from an object
 * @return - fully created drawable
 */
public static Drawable getDrawable(boolean cloneDrawable,int paint,Drawable drawable){
  Drawable retDrawable;
  if (drawable == null || drawable instanceof ColorDrawable) {
    retDrawable=new ColorDrawable(paint);
  }
 else   if (cloneDrawable) {
    retDrawable=drawable.mutate();
  }
 else {
    retDrawable=drawable;
  }
  return retDrawable;
}",0.9814410480349344
164991,"public ColorfulGridAdapter(){
  mRandom=new Random(System.currentTimeMillis());
  mPainter=new IconPainter();
}","public ColorfulGridAdapter(){
  mRandom=new Random();
  mPainter=new IconPainter();
}",0.8673469387755102
164992,"@Test(timeout=5000) public void changePaymentMethod_startsActivity(){
  BraintreeFragment fragment=getSetupFragment();
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  AndroidPayCardNonce androidPayCardNonce=mock(AndroidPayCardNonce.class);
  when(androidPayCardNonce.getGoogleTransactionId()).thenReturn(""String_Node_Str"");
  AndroidPay.changePaymentMethod(fragment,androidPayCardNonce);
  ArgumentCaptor<Intent> captor=ArgumentCaptor.forClass(Intent.class);
  verify(fragment).startActivityForResult(captor.capture(),eq(AndroidPay.ANDROID_PAY_REQUEST_CODE));
  Intent intent=captor.getValue();
  assertEquals(AndroidPayActivity.class.getName(),intent.getComponent().getClassName());
  assertEquals(CHANGE_PAYMENT_METHOD,intent.getIntExtra(EXTRA_REQUEST_TYPE,-1));
  assertEquals(WalletConstants.ENVIRONMENT_TEST,intent.getIntExtra(EXTRA_ENVIRONMENT,-1));
  assertEquals(""String_Node_Str"",intent.getStringExtra(EXTRA_GOOGLE_TRANSACTION_ID));
}","@Test(timeout=5000) public void changePaymentMethod_startsActivity(){
  BraintreeFragment fragment=getSetupFragment();
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  AndroidPayCardNonce androidPayCardNonce=mock(AndroidPayCardNonce.class);
  when(androidPayCardNonce.getGoogleTransactionId()).thenReturn(""String_Node_Str"");
  Cart cart=Cart.newBuilder().build();
  when(androidPayCardNonce.getCart()).thenReturn(cart);
  AndroidPay.changePaymentMethod(fragment,androidPayCardNonce);
  ArgumentCaptor<Intent> captor=ArgumentCaptor.forClass(Intent.class);
  verify(fragment).startActivityForResult(captor.capture(),eq(AndroidPay.ANDROID_PAY_REQUEST_CODE));
  Intent intent=captor.getValue();
  assertEquals(AndroidPayActivity.class.getName(),intent.getComponent().getClassName());
  assertEquals(CHANGE_PAYMENT_METHOD,intent.getIntExtra(EXTRA_REQUEST_TYPE,-1));
  assertEquals(WalletConstants.ENVIRONMENT_TEST,intent.getIntExtra(EXTRA_ENVIRONMENT,-1));
  assertEquals(""String_Node_Str"",intent.getStringExtra(EXTRA_GOOGLE_TRANSACTION_ID));
  assertEquals(cart,intent.getParcelableExtra(EXTRA_CART));
}",0.9265750828991
164993,"static void onActivityResult(BraintreeFragment fragment,int resultCode,Intent data){
  if (resultCode == Activity.RESULT_OK) {
    if (data.hasExtra(WalletConstants.EXTRA_FULL_WALLET)) {
      fragment.sendAnalyticsEvent(""String_Node_Str"");
      tokenize(fragment,(FullWallet)data.getParcelableExtra(WalletConstants.EXTRA_FULL_WALLET));
    }
  }
 else   if (resultCode == Activity.RESULT_CANCELED) {
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
 else {
    if (data != null) {
      if (data.hasExtra(EXTRA_ERROR)) {
        fragment.postCallback(new AndroidPayException(data.getStringExtra(EXTRA_ERROR)));
      }
 else {
        fragment.postCallback(new AndroidPayException(""String_Node_Str"" + data.getIntExtra(WalletConstants.EXTRA_ERROR_CODE,-1) + ""String_Node_Str""+ ""String_Node_Str""));
      }
    }
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
}","static void onActivityResult(BraintreeFragment fragment,int resultCode,Intent data){
  if (resultCode == Activity.RESULT_OK) {
    if (data.hasExtra(WalletConstants.EXTRA_FULL_WALLET)) {
      fragment.sendAnalyticsEvent(""String_Node_Str"");
      tokenize(fragment,(FullWallet)data.getParcelableExtra(WalletConstants.EXTRA_FULL_WALLET),(Cart)data.getParcelableExtra(EXTRA_CART));
    }
  }
 else   if (resultCode == Activity.RESULT_CANCELED) {
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
 else {
    if (data != null) {
      if (data.hasExtra(EXTRA_ERROR)) {
        fragment.postCallback(new AndroidPayException(data.getStringExtra(EXTRA_ERROR)));
      }
 else {
        fragment.postCallback(new AndroidPayException(""String_Node_Str"" + data.getIntExtra(WalletConstants.EXTRA_ERROR_CODE,-1) + ""String_Node_Str""+ ""String_Node_Str""));
      }
    }
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
}",0.9766146993318484
164994,"@Override public void onConfigurationFetched(Configuration configuration){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  Intent intent=new Intent(fragment.getApplicationContext(),AndroidPayActivity.class).putExtra(EXTRA_ENVIRONMENT,getEnvironment(configuration.getAndroidPay())).putExtra(EXTRA_GOOGLE_TRANSACTION_ID,androidPayCardNonce.getGoogleTransactionId()).putExtra(EXTRA_REQUEST_TYPE,CHANGE_PAYMENT_METHOD);
  fragment.startActivityForResult(intent,ANDROID_PAY_REQUEST_CODE);
}","@Override public void onConfigurationFetched(Configuration configuration){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  Intent intent=new Intent(fragment.getApplicationContext(),AndroidPayActivity.class).putExtra(EXTRA_ENVIRONMENT,getEnvironment(configuration.getAndroidPay())).putExtra(EXTRA_GOOGLE_TRANSACTION_ID,androidPayCardNonce.getGoogleTransactionId()).putExtra(EXTRA_CART,androidPayCardNonce.getCart()).putExtra(EXTRA_REQUEST_TYPE,CHANGE_PAYMENT_METHOD);
  fragment.startActivityForResult(intent,ANDROID_PAY_REQUEST_CODE);
}",0.9504373177842566
164995,"/** 
 * Call this method when you've received a successful FullWallet request in your activity's  {@link Activity#onActivityResult(int,int,Intent)} to get an {@link AndroidPayCardNonce} from a{@link FullWallet}.
 * @param fragment An instance of {@link BraintreeFragment}.
 * @param wallet a {@link FullWallet} from the Intent in{@link Activity#onActivityResult(int,int,Intent)}
 */
public static void tokenize(BraintreeFragment fragment,FullWallet wallet){
  try {
    fragment.postCallback(AndroidPayCardNonce.fromFullWallet(wallet));
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
 catch (  JSONException e) {
    fragment.sendAnalyticsEvent(""String_Node_Str"");
    try {
      fragment.postCallback(ErrorWithResponse.fromJson(wallet.getPaymentMethodToken().getToken()));
    }
 catch (    JSONException e1) {
      fragment.postCallback(e1);
    }
  }
}","/** 
 * Call this method when you've received a successful FullWallet request in your activity's  {@link Activity#onActivityResult(int,int,Intent)} to get an {@link AndroidPayCardNonce} from a{@link FullWallet}.
 * @param fragment An instance of {@link BraintreeFragment}.
 * @param wallet a {@link FullWallet} from the Intent in {@link Activity#onActivityResult(int,int,Intent)}.
 * @param cart the {@link Cart} used when creating the {@link FullWallet}.
 */
public static void tokenize(BraintreeFragment fragment,FullWallet wallet,Cart cart){
  try {
    fragment.postCallback(AndroidPayCardNonce.fromFullWallet(wallet,cart));
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
 catch (  JSONException e) {
    fragment.sendAnalyticsEvent(""String_Node_Str"");
    try {
      fragment.postCallback(ErrorWithResponse.fromJson(wallet.getPaymentMethodToken().getToken()));
    }
 catch (    JSONException e1) {
      fragment.postCallback(e1);
    }
  }
}",0.949561403508772
164996,"/** 
 * Performs a change masked wallet request. This will allow the user to change the backing card and other information associated with the payment method.
 * @param fragment The current {@link BraintreeFragment}.
 * @param androidPayCardNonce the {@link AndroidPayCardNonce} to update.
 */
public static void changePaymentMethod(final BraintreeFragment fragment,final AndroidPayCardNonce androidPayCardNonce){
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      fragment.sendAnalyticsEvent(""String_Node_Str"");
      Intent intent=new Intent(fragment.getApplicationContext(),AndroidPayActivity.class).putExtra(EXTRA_ENVIRONMENT,getEnvironment(configuration.getAndroidPay())).putExtra(EXTRA_GOOGLE_TRANSACTION_ID,androidPayCardNonce.getGoogleTransactionId()).putExtra(EXTRA_REQUEST_TYPE,CHANGE_PAYMENT_METHOD);
      fragment.startActivityForResult(intent,ANDROID_PAY_REQUEST_CODE);
    }
  }
);
}","/** 
 * Performs a change masked wallet request. This will allow the user to change the backing card and other information associated with the payment method.
 * @param fragment The current {@link BraintreeFragment}.
 * @param androidPayCardNonce the {@link AndroidPayCardNonce} to update.
 */
public static void changePaymentMethod(final BraintreeFragment fragment,final AndroidPayCardNonce androidPayCardNonce){
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      fragment.sendAnalyticsEvent(""String_Node_Str"");
      Intent intent=new Intent(fragment.getApplicationContext(),AndroidPayActivity.class).putExtra(EXTRA_ENVIRONMENT,getEnvironment(configuration.getAndroidPay())).putExtra(EXTRA_GOOGLE_TRANSACTION_ID,androidPayCardNonce.getGoogleTransactionId()).putExtra(EXTRA_CART,androidPayCardNonce.getCart()).putExtra(EXTRA_REQUEST_TYPE,CHANGE_PAYMENT_METHOD);
      fragment.startActivityForResult(intent,ANDROID_PAY_REQUEST_CODE);
    }
  }
);
}",0.9750611246943766
164997,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == Activity.RESULT_OK && (requestCode == AUTHORIZE || requestCode == CHANGE_PAYMENT_METHOD)) {
    String googleTransactionId=((MaskedWallet)data.getParcelableExtra(WalletConstants.EXTRA_MASKED_WALLET)).getGoogleTransactionId();
    loadFullWallet(googleTransactionId);
  }
 else {
    setResult(resultCode,data);
    finish();
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == Activity.RESULT_OK && (requestCode == AUTHORIZE || requestCode == CHANGE_PAYMENT_METHOD)) {
    String googleTransactionId=((MaskedWallet)data.getParcelableExtra(WalletConstants.EXTRA_MASKED_WALLET)).getGoogleTransactionId();
    loadFullWallet(googleTransactionId);
  }
 else {
    data.putExtra(EXTRA_CART,getCart());
    setResult(resultCode,data);
    finish();
  }
}",0.9131707317073172
164998,"/** 
 * Convert a   {@link FullWallet} to an {@link AndroidPayCardNonce}.
 * @param wallet the {@link FullWallet} from an Android Pay response
 * @return {@link AndroidPayCardNonce}.
 * @throws JSONException when parsing the response fails.
 */
public static AndroidPayCardNonce fromFullWallet(FullWallet wallet) throws JSONException {
  AndroidPayCardNonce androidPayCardNonce=AndroidPayCardNonce.fromJson(wallet.getPaymentMethodToken().getToken());
  androidPayCardNonce.mDescription=wallet.getPaymentDescriptions()[0];
  androidPayCardNonce.mEmail=wallet.getEmail();
  androidPayCardNonce.mBillingAddress=wallet.getBuyerBillingAddress();
  androidPayCardNonce.mShippingAddress=wallet.getBuyerShippingAddress();
  androidPayCardNonce.mGoogleTransactionId=wallet.getGoogleTransactionId();
  return androidPayCardNonce;
}","/** 
 * Convert a   {@link FullWallet} to an {@link AndroidPayCardNonce}.
 * @param wallet the {@link FullWallet} from an Android Pay response.
 * @param cart the {@link Cart} used to create the {@link FullWallet}.
 * @return {@link AndroidPayCardNonce}.
 * @throws JSONException when parsing the response fails.
 */
public static AndroidPayCardNonce fromFullWallet(FullWallet wallet,Cart cart) throws JSONException {
  AndroidPayCardNonce androidPayCardNonce=AndroidPayCardNonce.fromJson(wallet.getPaymentMethodToken().getToken());
  androidPayCardNonce.mDescription=wallet.getPaymentDescriptions()[0];
  androidPayCardNonce.mEmail=wallet.getEmail();
  androidPayCardNonce.mBillingAddress=wallet.getBuyerBillingAddress();
  androidPayCardNonce.mShippingAddress=wallet.getBuyerShippingAddress();
  androidPayCardNonce.mGoogleTransactionId=wallet.getGoogleTransactionId();
  androidPayCardNonce.mCart=cart;
  return androidPayCardNonce;
}",0.9044368600682594
164999,"private AndroidPayCardNonce(Parcel in){
  super(in);
  mCardType=in.readString();
  mLastTwo=in.readString();
  mEmail=in.readString();
  mBillingAddress=in.readParcelable(UserAddress.class.getClassLoader());
  mShippingAddress=in.readParcelable(UserAddress.class.getClassLoader());
  mGoogleTransactionId=in.readString();
}","private AndroidPayCardNonce(Parcel in){
  super(in);
  mCardType=in.readString();
  mLastTwo=in.readString();
  mEmail=in.readString();
  mBillingAddress=in.readParcelable(UserAddress.class.getClassLoader());
  mShippingAddress=in.readParcelable(UserAddress.class.getClassLoader());
  mGoogleTransactionId=in.readString();
  mCart=in.readParcelable(Cart.class.getClassLoader());
}",0.9204545454545454
165000,"@Override public void writeToParcel(Parcel dest,int flags){
  super.writeToParcel(dest,flags);
  dest.writeString(mCardType);
  dest.writeString(mLastTwo);
  dest.writeString(mEmail);
  dest.writeParcelable(mBillingAddress,flags);
  dest.writeParcelable(mShippingAddress,flags);
  dest.writeString(mGoogleTransactionId);
}","@Override public void writeToParcel(Parcel dest,int flags){
  super.writeToParcel(dest,flags);
  dest.writeString(mCardType);
  dest.writeString(mLastTwo);
  dest.writeString(mEmail);
  dest.writeParcelable(mBillingAddress,flags);
  dest.writeParcelable(mShippingAddress,flags);
  dest.writeString(mGoogleTransactionId);
  dest.writeParcelable(mCart,flags);
}",0.945668135095448
