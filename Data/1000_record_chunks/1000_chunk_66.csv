record_number,buggy_code,fixed_code,code_similarity
65001,"/** 
 * This test writes the design file and compare it with golden file.
 * @throws Exception
 */
public void testWriter() throws Exception {
  openDesign(fileName);
  TableHandle tableHandle=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(tableHandle);
  tableHandle.setEventHandlerClass(""String_Node_Str"");
  tableHandle.setOnCreate(""String_Node_Str"");
  tableHandle.setOnPrepare(""String_Node_Str"");
  tableHandle.setOnRender(""String_Node_Str"");
  tableHandle.setRepeatHeader(false);
  tableHandle.setCaption(""String_Node_Str"");
  tableHandle.setCaptionKey(""String_Node_Str"");
  tableHandle.setSummary(""String_Node_Str"");
  tableHandle.setSortByGroups(true);
  tableHandle.setNewHandlerOnEachEvent(false);
  tableHandle.setRole(""String_Node_Str"");
  tableHandle.setLanguage(""String_Node_Str"");
  tableHandle.setOrder(1);
  ColumnHandle column=(ColumnHandle)tableHandle.getColumns().get(2);
  PropertyHandle propHandle=column.getPropertyHandle(TableColumn.VISIBILITY_PROP);
  propHandle.setValue(null);
  HideRule hideRule=StructureFactory.createHideRule();
  propHandle.addItem(hideRule);
  hideRule.setFormat(DesignChoiceConstants.FORMAT_TYPE_REPORTLET);
  hideRule.setExpression(""String_Node_Str"" + DesignChoiceConstants.FORMAT_TYPE_REPORTLET);
  SlotHandle groupSlot=tableHandle.getGroups();
  assertNotNull(groupSlot);
  assertEquals(1,groupSlot.getCount());
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  testWriteVisibilityRules(rowHandle);
  rowHandle=(RowHandle)tableHandle.getFooter().get(0);
  rowHandle.setRepeatable(false);
  TableGroupHandle group=(TableGroupHandle)groupSlot.get(0);
  group.setName(""String_Node_Str"");
  group.setInterval(DesignChoiceConstants.INTERVAL_DAY);
  group.setIntervalRange(99);
  group.setKeyExpr(""String_Node_Str"");
  group.setBookmark(""String_Node_Str"");
  group.setBookmarkDisplayName(""String_Node_Str"");
  group.getTOC().setExpression(""String_Node_Str"");
  group.setEventHandlerClass(""String_Node_Str"");
  group.setOnPrepare(""String_Node_Str"");
  group.setOnCreate(""String_Node_Str"");
  group.setOnRender(""String_Node_Str"");
  group.setACLExpression(""String_Node_Str"");
  group.setCascadeACL(true);
  SlotHandle detailSlot=tableHandle.getDetail();
  assertNotNull(detailSlot);
  assertEquals(1,detailSlot.getCount());
  RowHandle row=(RowHandle)detailSlot.get(0);
  row.setSuppressDuplicates(false);
  row.setEventHandlerClass(""String_Node_Str"");
  row.setOnCreate(""String_Node_Str"");
  row.setOnPrepare(""String_Node_Str"");
  row.setOnRender(null);
  row.setBookmark(""String_Node_Str"");
  row.setBookmarkDisplayName(""String_Node_Str"");
  row.setRole(""String_Node_Str"");
  row.setLanguage(""String_Node_Str"");
  SlotHandle cells=row.getCells();
  assertNotNull(cells);
  assertEquals(1,cells.getCount());
  CellHandle cell=(CellHandle)cells.get(0);
  cell.setEventHandlerClass(""String_Node_Str"");
  cell.setOnCreate(null);
  cell.setOnPrepare(""String_Node_Str"");
  cell.setOnRender(""String_Node_Str"");
  cell.setBookmark(""String_Node_Str"");
  cell.setBookmarkDisplayName(""String_Node_Str"");
  UserPropertyDefn prop=new UserPropertyDefn();
  prop.setName(""String_Node_Str"");
  PropertyType typeDefn=MetaDataDictionary.getInstance().getPropertyType(PropertyType.STRING_TYPE_NAME);
  prop.setType(typeDefn);
  cell.addUserPropertyDefn(prop);
  save();
  assertTrue(compareFile(goldenFileName));
}","/** 
 * This test writes the design file and compare it with golden file.
 * @throws Exception
 */
public void testWriter() throws Exception {
  openDesign(fileName);
  TableHandle tableHandle=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(tableHandle);
  tableHandle.setEventHandlerClass(""String_Node_Str"");
  tableHandle.setOnCreate(""String_Node_Str"");
  tableHandle.setOnPrepare(""String_Node_Str"");
  tableHandle.setOnRender(""String_Node_Str"");
  tableHandle.setRepeatHeader(false);
  tableHandle.setCaption(""String_Node_Str"");
  tableHandle.setCaptionKey(""String_Node_Str"");
  tableHandle.setSummary(""String_Node_Str"");
  tableHandle.setSortByGroups(true);
  tableHandle.setNewHandlerOnEachEvent(false);
  tableHandle.setTagType(""String_Node_Str"");
  tableHandle.setLanguage(""String_Node_Str"");
  tableHandle.setOrder(1);
  ColumnHandle column=(ColumnHandle)tableHandle.getColumns().get(2);
  PropertyHandle propHandle=column.getPropertyHandle(TableColumn.VISIBILITY_PROP);
  propHandle.setValue(null);
  HideRule hideRule=StructureFactory.createHideRule();
  propHandle.addItem(hideRule);
  hideRule.setFormat(DesignChoiceConstants.FORMAT_TYPE_REPORTLET);
  hideRule.setExpression(""String_Node_Str"" + DesignChoiceConstants.FORMAT_TYPE_REPORTLET);
  SlotHandle groupSlot=tableHandle.getGroups();
  assertNotNull(groupSlot);
  assertEquals(1,groupSlot.getCount());
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  testWriteVisibilityRules(rowHandle);
  rowHandle=(RowHandle)tableHandle.getFooter().get(0);
  rowHandle.setRepeatable(false);
  TableGroupHandle group=(TableGroupHandle)groupSlot.get(0);
  group.setName(""String_Node_Str"");
  group.setInterval(DesignChoiceConstants.INTERVAL_DAY);
  group.setIntervalRange(99);
  group.setKeyExpr(""String_Node_Str"");
  group.setBookmark(""String_Node_Str"");
  group.setBookmarkDisplayName(""String_Node_Str"");
  group.getTOC().setExpression(""String_Node_Str"");
  group.setEventHandlerClass(""String_Node_Str"");
  group.setOnPrepare(""String_Node_Str"");
  group.setOnCreate(""String_Node_Str"");
  group.setOnRender(""String_Node_Str"");
  group.setACLExpression(""String_Node_Str"");
  group.setCascadeACL(true);
  SlotHandle detailSlot=tableHandle.getDetail();
  assertNotNull(detailSlot);
  assertEquals(1,detailSlot.getCount());
  RowHandle row=(RowHandle)detailSlot.get(0);
  row.setSuppressDuplicates(false);
  row.setEventHandlerClass(""String_Node_Str"");
  row.setOnCreate(""String_Node_Str"");
  row.setOnPrepare(""String_Node_Str"");
  row.setOnRender(null);
  row.setBookmark(""String_Node_Str"");
  row.setBookmarkDisplayName(""String_Node_Str"");
  row.setTagType(""String_Node_Str"");
  row.setLanguage(""String_Node_Str"");
  SlotHandle cells=row.getCells();
  assertNotNull(cells);
  assertEquals(1,cells.getCount());
  CellHandle cell=(CellHandle)cells.get(0);
  cell.setEventHandlerClass(""String_Node_Str"");
  cell.setOnCreate(null);
  cell.setOnPrepare(""String_Node_Str"");
  cell.setOnRender(""String_Node_Str"");
  cell.setBookmark(""String_Node_Str"");
  cell.setBookmarkDisplayName(""String_Node_Str"");
  UserPropertyDefn prop=new UserPropertyDefn();
  prop.setName(""String_Node_Str"");
  PropertyType typeDefn=MetaDataDictionary.getInstance().getPropertyType(PropertyType.STRING_TYPE_NAME);
  prop.setType(typeDefn);
  cell.addUserPropertyDefn(prop);
  save();
  assertTrue(compareFile(goldenFileName));
}",0.9973443493655946
65002,"/** 
 * Test all properties.
 * @throws Exception if opening design file failed.
 */
public void testParser() throws Exception {
  openDesign(fileName);
  TextDataHandle dataHandle=(TextDataHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(dataHandle.getElement());
  assertEquals(""String_Node_Str"",dataHandle.getValueExpr());
  assertEquals(DesignChoiceConstants.TEXT_DATA_CONTENT_TYPE_AUTO,dataHandle.getContentType());
  assertTrue(dataHandle.hasExpression());
  assertEquals(""String_Node_Str"",dataHandle.getRole());
  assertEquals(""String_Node_Str"",dataHandle.getLanguage());
  assertEquals(""String_Node_Str"",dataHandle.getAltText());
  assertEquals(1,dataHandle.getOrder());
  TextDataHandle data2Handle=(TextDataHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",data2Handle.getRole());
}","/** 
 * Test all properties.
 * @throws Exception if opening design file failed.
 */
public void testParser() throws Exception {
  openDesign(fileName);
  TextDataHandle dataHandle=(TextDataHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(dataHandle.getElement());
  assertEquals(""String_Node_Str"",dataHandle.getValueExpr());
  assertEquals(DesignChoiceConstants.TEXT_DATA_CONTENT_TYPE_AUTO,dataHandle.getContentType());
  assertTrue(dataHandle.hasExpression());
  assertEquals(""String_Node_Str"",dataHandle.getTagType());
  assertEquals(""String_Node_Str"",dataHandle.getLanguage());
  assertEquals(""String_Node_Str"",dataHandle.getAltText());
  assertEquals(1,dataHandle.getOrder());
  TextDataHandle data2Handle=(TextDataHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",data2Handle.getTagType());
}",0.9893992932862192
65003,"/** 
 * This test sets properties, writes the design file and compares it with golden file.
 * @throws Exception if opening or saving design file failed.
 */
public void testWriter() throws Exception {
  openDesign(fileName);
  TextDataHandle dataHandle=(TextDataHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(dataHandle.getElement());
  dataHandle.setValueExpr(""String_Node_Str"");
  dataHandle.setContentType(DesignChoiceConstants.TEXT_DATA_CONTENT_TYPE_RTF);
  dataHandle.setHasExpression(false);
  dataHandle.setRole(""String_Node_Str"");
  dataHandle.setLanguage(""String_Node_Str"");
  dataHandle.setAltText(""String_Node_Str"");
  dataHandle.setOrder(1);
  save();
  assertTrue(compareFile(goldenFileName));
}","/** 
 * This test sets properties, writes the design file and compares it with golden file.
 * @throws Exception if opening or saving design file failed.
 */
public void testWriter() throws Exception {
  openDesign(fileName);
  TextDataHandle dataHandle=(TextDataHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(dataHandle.getElement());
  dataHandle.setValueExpr(""String_Node_Str"");
  dataHandle.setContentType(DesignChoiceConstants.TEXT_DATA_CONTENT_TYPE_RTF);
  dataHandle.setHasExpression(false);
  dataHandle.setTagType(""String_Node_Str"");
  dataHandle.setLanguage(""String_Node_Str"");
  dataHandle.setAltText(""String_Node_Str"");
  dataHandle.setOrder(1);
  save();
  assertTrue(compareFile(goldenFileName));
}",0.9938482570061518
65004,"/** 
 * Test the write for user-defined properties.
 * @throws Exception
 */
public void testWrite() throws Exception {
  openDesign(""String_Node_Str"");
  TextItemHandle text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  String contentType=text.getContentType();
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_HTML,contentType);
  text.setContentType(DesignChoiceConstants.TEXT_CONTENT_TYPE_HTML);
  text.setContent(""String_Node_Str"");
  text.setHasExpression(false);
  text.setRole(""String_Node_Str"");
  text.setLanguage(""String_Node_Str"");
  text.setAltText(""String_Node_Str"");
  text.setOrder(1);
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  text.setContent(""String_Node_Str"");
  assertEquals(""String_Node_Str"",text.getProperty(TextItem.CONTENT_PROP));
  assertEquals(""String_Node_Str"",text.getStringProperty(TextItem.CONTENT_PROP));
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  text.setContentKey(""String_Node_Str"");
  save();
  assertTrue(compareFile(""String_Node_Str""));
}","/** 
 * Test the write for user-defined properties.
 * @throws Exception
 */
public void testWrite() throws Exception {
  openDesign(""String_Node_Str"");
  TextItemHandle text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  String contentType=text.getContentType();
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_HTML,contentType);
  text.setContentType(DesignChoiceConstants.TEXT_CONTENT_TYPE_HTML);
  text.setContent(""String_Node_Str"");
  text.setHasExpression(false);
  text.setTagType(""String_Node_Str"");
  text.setLanguage(""String_Node_Str"");
  text.setAltText(""String_Node_Str"");
  text.setOrder(1);
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  text.setContent(""String_Node_Str"");
  assertEquals(""String_Node_Str"",text.getProperty(TextItem.CONTENT_PROP));
  assertEquals(""String_Node_Str"",text.getStringProperty(TextItem.CONTENT_PROP));
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  text.setContentKey(""String_Node_Str"");
  save();
  assertTrue(compareFile(""String_Node_Str""));
}",0.9957325746799432
65005,"/** 
 * Test the properties for user-defined properties.
 * @throws Exception
 */
public void testProperties() throws Exception {
  openDesign(""String_Node_Str"");
  TextItemHandle text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  String contentType=text.getContentType();
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_HTML,contentType);
  assertTrue(text.hasExpression());
  assertEquals(""String_Node_Str"",text.getContent());
  assertEquals(""String_Node_Str"",text.getRole());
  assertEquals(""String_Node_Str"",text.getLanguage());
  assertEquals(""String_Node_Str"",text.getAltText());
  assertEquals(1,text.getOrder());
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  assertNull(text.getContentKey());
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_AUTO,text.getContentType());
  assertEquals(""String_Node_Str"",text.getContent());
  assertEquals(""String_Node_Str"",text.getRole());
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",text.getContentKey());
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_AUTO,text.getContentType());
  assertEquals(""String_Node_Str"",text.getContent());
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",text.getContent());
}","/** 
 * Test the properties for user-defined properties.
 * @throws Exception
 */
public void testProperties() throws Exception {
  openDesign(""String_Node_Str"");
  TextItemHandle text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  String contentType=text.getContentType();
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_HTML,contentType);
  assertTrue(text.hasExpression());
  assertEquals(""String_Node_Str"",text.getContent());
  assertEquals(""String_Node_Str"",text.getTagType());
  assertEquals(""String_Node_Str"",text.getLanguage());
  assertEquals(""String_Node_Str"",text.getAltText());
  assertEquals(1,text.getOrder());
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  assertNull(text.getContentKey());
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_AUTO,text.getContentType());
  assertEquals(""String_Node_Str"",text.getContent());
  assertEquals(""String_Node_Str"",text.getTagType());
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",text.getContentKey());
  assertEquals(DesignChoiceConstants.TEXT_CONTENT_TYPE_AUTO,text.getContentType());
  assertEquals(""String_Node_Str"",text.getContent());
  text=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",text.getContent());
}",0.9931921331316188
65006,"protected void bindBinding(IBinding colBinding,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (colBinding == null) {
    return;
  }
  String bindingName=colBinding.getBindingName();
  String expr=registeredQueries.get(bindingName).encode();
  if (!cubeQuery.getBindings().contains(colBinding)) {
    cubeQuery.addBinding(colBinding);
  }
  String measure=exprCodec.getMeasureName(expr);
  if (measure != null) {
    if (registeredMeasures.containsKey(bindingName)) {
      return;
    }
    IMeasureDefinition mDef=null;
    MeasureHandle measureHandle=cube.getMeasure(measure);
    if (measureHandle != null && measureHandle.isCalculated()) {
      mDef=cubeQuery.createDerivedMeasure(measure,DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()),modelAdapter.adaptExpression((Expression)measureHandle.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
    }
 else {
      mDef=cubeQuery.createMeasure(measure);
    }
    registeredMeasures.put(bindingName,mDef);
    String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
    mDef.setAggrFunction(aggFun);
  }
 else   if (exprCodec.isDimensionExpresion()) {
    registerDimensionLevel(cubeQuery,cube,bindingName);
  }
 else   if (exprCodec.isCubeBinding(true)) {
    bindExpression(expr,cubeQuery,cube);
    return;
  }
}","protected void bindBinding(IBinding colBinding,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (colBinding == null) {
    return;
  }
  String bindingName=colBinding.getBindingName();
  String expr=registeredQueries.get(bindingName).encode();
  if (!cubeQuery.getBindings().contains(colBinding)) {
    cubeQuery.addBinding(colBinding);
  }
  String measure=exprCodec.getMeasureName(expr);
  if (measure != null) {
    if (registeredMeasures.containsKey(bindingName)) {
      return;
    }
    IMeasureDefinition mDef=null;
    MeasureHandle measureHandle=cube.getMeasure(measure);
    if (measureHandle != null && measureHandle.isCalculated()) {
      mDef=cubeQuery.createDerivedMeasure(measure,DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()),modelAdapter.adaptExpression((Expression)measureHandle.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
    }
 else {
      mDef=cubeQuery.createMeasure(measure);
    }
    registeredMeasures.put(bindingName,mDef);
    if (cube.getMeasure(measure) != null) {
      String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
      mDef.setAggrFunction(aggFun);
    }
  }
 else   if (exprCodec.isDimensionExpresion()) {
    registerDimensionLevel(cubeQuery,cube,bindingName);
  }
 else   if (exprCodec.isCubeBinding(true)) {
    bindExpression(expr,cubeQuery,cube);
    return;
  }
}",0.9811188811188812
65007,"@SuppressWarnings(""String_Node_Str"") private List<FilterConditionElementHandle> getFiltersFromXtab(CrosstabReportItemHandle crossTab){
  List<FilterConditionElementHandle> list=new ArrayList<FilterConditionElementHandle>();
  if (crossTab == null) {
    return list;
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  int measureCount=crossTab.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    MeasureViewHandle measureView=crossTab.getMeasure(i);
    Iterator<FilterConditionElementHandle> iter=measureView.filtersIterator();
    while (iter.hasNext()) {
      list.add(iter.next());
    }
  }
  return list;
}","@SuppressWarnings(""String_Node_Str"") private List<FilterConditionElementHandle> getFiltersFromXtab(CrosstabReportItemHandle crossTab){
  List<FilterConditionElementHandle> list=new ArrayList<FilterConditionElementHandle>();
  if (crossTab == null) {
    return list;
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  int measureCount=crossTab.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    MeasureViewHandle measureView=crossTab.getMeasure(i);
    if (measureView != null) {
      Iterator<FilterConditionElementHandle> iter=measureView.filtersIterator();
      while (iter.hasNext()) {
        list.add(iter.next());
      }
    }
  }
  return list;
}",0.9689277899343544
65008,"public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  updateBackgroundImage();
  checkPageBreak();
  parent.update(this);
  finished=true;
  checkDisplayNone();
}","public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  checkPageBreak();
  parent.update(this);
  finished=true;
  checkDisplayNone();
}",0.9361702127659576
65009,"public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  parent.update(this);
  finished=true;
  checkDisplayNone();
}","public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  updateCellBackgroundImage();
  parent.update(this);
  finished=true;
  checkDisplayNone();
}",0.9242053789731052
65010,"/** 
 * Transforms dimension value to points.
 * @param handle
 * @param dpi to convert px unit
 * @return the dimension value with measure of points
 * @since 2.3
 */
public static double convertToPoints(org.eclipse.birt.report.model.api.DimensionHandle handle,int dpi){
  double retValue=0.0;
  if (handle.getMeasure() > 0 && handle.getUnits().trim().length() > 0) {
    if (handle.getUnits() == DesignChoiceConstants.UNITS_PT) {
      retValue=handle.getMeasure();
    }
 else     if (handle.getUnits() == DesignChoiceConstants.UNITS_PX) {
      retValue=(handle.getMeasure() * 72d) / dpi;
    }
 else {
      retValue=DimensionUtil.convertTo(handle.getMeasure(),handle.getUnits(),DesignChoiceConstants.UNITS_PT).getMeasure();
    }
  }
  return retValue;
}","/** 
 * Transforms dimension value to points.
 * @param handle
 * @param dpi to convert px unit
 * @return the dimension value with measure of points
 * @since 2.3
 */
public static double convertToPoints(org.eclipse.birt.report.model.api.DimensionHandle handle,int dpi){
  double retValue=0.0;
  if (handle.getMeasure() > 0 && handle.getUnits().trim().length() > 0) {
    if (DesignChoiceConstants.UNITS_PT.equalsIgnoreCase(handle.getUnits())) {
      retValue=handle.getMeasure();
    }
 else     if (DesignChoiceConstants.UNITS_PX.equalsIgnoreCase(handle.getUnits())) {
      retValue=(handle.getMeasure() * 72d) / dpi;
    }
 else {
      retValue=DimensionUtil.convertTo(handle.getMeasure(),handle.getUnits(),DesignChoiceConstants.UNITS_PT).getMeasure();
    }
  }
  return retValue;
}",0.9264516129032258
65011,"private EngineConfig getEngineConfig(ModuleHandle handle){
  EngineConfig ec=new EngineConfig();
  ClassLoader parent=Thread.currentThread().getContextClassLoader();
  if (parent == null) {
    parent=this.getClass().getClassLoader();
  }
  ClassLoader customClassLoader=DataSetProvider.getCustomScriptClassLoader(parent,handle);
  ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,customClassLoader);
  return ec;
}","private EngineConfig getEngineConfig(ModuleHandle handle){
  EngineConfig ec=new EngineConfig();
  ClassLoader parent=Thread.currentThread().getContextClassLoader();
  if (parent == null) {
    parent=this.getClass().getClassLoader();
  }
  ClassLoader customClassLoader=DataSetProvider.getCustomScriptClassLoader(parent,handle);
  return ec;
}",0.8865979381443299
65012,"/** 
 * @param parent A widget which will be the parent of the new instance (cannot be null)
 * @param style The style of widget to construct
 */
public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(2,15));
  IDescriptorProvider provider=new TextPropertyDescriptorProvider(ImageHandle.ALT_TEXT_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection section=new TextSection(provider.getDisplayName(),container,true);
  section.setProvider(provider);
  section.setStyle(SWT.SINGLE);
  section.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT,section);
  IDescriptorProvider keyProvider=new TextPropertyDescriptorProvider(ImageHandle.ALT_TEXT_KEY_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection keySection=new TextSection(keyProvider.getDisplayName(),container,true);
  keySection.setProvider(keyProvider);
  keySection.setStyle(SWT.SINGLE);
  keySection.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT_KEY,keySection);
  createSections();
  layoutSections();
}","/** 
 * @param parent A widget which will be the parent of the new instance (cannot be null)
 * @param style The style of widget to construct
 */
public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(2,15));
  IDescriptorProvider provider=new TextPropertyDescriptorProvider(IImageItemModel.ALT_TEXT_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection section=new TextSection(provider.getDisplayName(),container,true);
  section.setProvider(provider);
  section.setStyle(SWT.SINGLE);
  section.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT,section);
  IDescriptorProvider keyProvider=new TextPropertyDescriptorProvider(IImageItemModel.ALT_TEXT_KEY_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection keySection=new TextSection(keyProvider.getDisplayName(),container,true);
  keySection.setProvider(keyProvider);
  keySection.setStyle(SWT.SINGLE);
  keySection.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT_KEY,keySection);
  createSections();
  layoutSections();
}",0.9846889952153112
65013,"public String getWorkSpace(){
  return ""String_Node_Str"";
}","@Override public String getWorkSpace(){
  return ""String_Node_Str"";
}",0.921875
65014,"/** 
 * Run all test cases here
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(MultiPass_FilterTest.class);
  suite.addTestSuite(MultiPass_NestedQueryTest.class);
  suite.addTestSuite(MultiPass_SortTest.class);
  suite.addTestSuite(MultiPassTest.class);
  return suite;
}","/** 
 * Run all test cases here
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(MultiPass_FilterTest.class);
  suite.addTestSuite(MultiPass_SortTest.class);
  suite.addTestSuite(MultiPassTest.class);
  return suite;
}",0.8955223880597015
65015,"/** 
 * filter on group with nested query expression
 * @throws Exception
 */
public void test_NestedAggregation() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.addFilter(filterDefn);
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResult=preparedQuery.execute(null);
  IResultIterator resultIt=queryResult.getResultIterator();
  outputQueryResult(resultIt,names);
  checkOutputFile();
}","/** 
 * filter on group with nested query expression
 * @throws Exception
 */
public void test_NestedAggregation() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.addFilter(filterDefn);
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  queryDefn.addFilter(filterDefn);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResult=preparedQuery.execute(null);
  IResultIterator resultIt=queryResult.getResultIterator();
  outputQueryResult(resultIt,names);
  checkOutputFile();
}",0.9861932938856016
65016,"/** 
 * Disposes instance handles.
 */
public void dispose(){
  if (engineTask != null) {
    engineTask.close();
  }
 else   if (session != null) {
    session.shutdown();
  }
}","/** 
 * Disposes instance handles.
 */
public void dispose(){
  if (session != null) {
    try {
      DataService.getInstance().unRegisterSession(session);
    }
 catch (    BirtException e) {
      logger.log(e);
    }
  }
  if (engineTask != null) {
    engineTask.close();
  }
 else   if (session != null) {
    session.shutdown();
  }
}",0.5202312138728323
65017,"private ChartWithAxes createDefaultChart(SwitchCellInfo info){
  AggregationCellHandle cell=info.getAggregationCell();
  boolean bDateTypeMeasure=false;
  if (info.getMeasureInfo() != null) {
    String dataType=info.getCrosstab().getCube().getMeasure(info.getMeasureInfo().getMeasureName()).getDataType();
    bDateTypeMeasure=DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType);
  }
  ChartWithAxes cm=ChartWithAxesImpl.createDefault();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprMeasure=ChartCubeUtil.generateComputedColumnName(cell,ChartReportItemHelper.instance().getMeasureExprIndicator(cell.getCrosstab().getCube()));
  String exprCategory=null;
  if (checkTransposed(cell)) {
    cm.setTransposed(true);
    cm.setReverseCategory(true);
    Object content=ChartCubeUtil.getFirstContent(ChartCubeUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
 else {
    Object content=ChartCubeUtil.getFirstContent(ChartCubeUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
  Axis xAxis=cm.getBaseAxes()[0];
  SeriesDefinition sdBase=SeriesDefinitionImpl.createDefault();
  Series series=SeriesImpl.createDefault();
  sdBase.getSeries().add(series);
  xAxis.setCategoryAxis(true);
  xAxis.getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  Axis yAxis=cm.getOrthogonalAxes(xAxis,true)[0];
  SeriesDefinition sdOrth=SeriesDefinitionImpl.createDefault();
  series=BarSeriesImpl.createDefault();
  sdOrth.getSeries().add(series);
  yAxis.getSeriesDefinitions().add(sdOrth);
  if (bDateTypeMeasure) {
    yAxis.setType(AxisType.DATE_TIME_LITERAL);
  }
  if (exprMeasure != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprMeasure));
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(ChartUtil.getNewSampleData(xAxis.getType(),0));
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(ChartUtil.getNewSampleData(yAxis.getType(),0));
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}","private ChartWithAxes createDefaultChart(SwitchCellInfo info){
  AggregationCellHandle cell=info.getAggregationCell();
  boolean bDateTypeMeasure=false;
  if (info.getMeasureInfo() != null) {
    MeasureHandle measure=info.getCrosstab().getCube().getMeasure(info.getMeasureInfo().getMeasureName());
    String dataType=measure.getDataType();
    String function=measure.getFunction();
    bDateTypeMeasure=!(DesignChoiceConstants.AGGREGATION_FUNCTION_COUNT.equals(function) || DesignChoiceConstants.AGGREGATION_FUNCTION_COUNTDISTINCT.equals(function)) && (DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType));
  }
  ChartWithAxes cm=ChartWithAxesImpl.createDefault();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprMeasure=ChartCubeUtil.generateComputedColumnName(cell,ChartReportItemHelper.instance().getMeasureExprIndicator(cell.getCrosstab().getCube()));
  String exprCategory=null;
  if (checkTransposed(cell)) {
    cm.setTransposed(true);
    cm.setReverseCategory(true);
    Object content=ChartCubeUtil.getFirstContent(ChartCubeUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
 else {
    Object content=ChartCubeUtil.getFirstContent(ChartCubeUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
  Axis xAxis=cm.getBaseAxes()[0];
  SeriesDefinition sdBase=SeriesDefinitionImpl.createDefault();
  Series series=SeriesImpl.createDefault();
  sdBase.getSeries().add(series);
  xAxis.setCategoryAxis(true);
  xAxis.getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  Axis yAxis=cm.getOrthogonalAxes(xAxis,true)[0];
  SeriesDefinition sdOrth=SeriesDefinitionImpl.createDefault();
  series=BarSeriesImpl.createDefault();
  sdOrth.getSeries().add(series);
  yAxis.getSeriesDefinitions().add(sdOrth);
  if (bDateTypeMeasure) {
    yAxis.setType(AxisType.DATE_TIME_LITERAL);
  }
  if (exprMeasure != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprMeasure));
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(ChartUtil.getNewSampleData(xAxis.getType(),0));
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(ChartUtil.getNewSampleData(yAxis.getType(),0));
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}",0.9336130675857937
65018,"/** 
 * uses to clear the data cach.
 * @param dataSet the dataset handle
 * @throws BirtException
 */
public void clearCache(DataSetHandle dataSet) throws BirtException {
  DataSessionContext context;
  DataRequestSession requestSession=null;
  try {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle(),null);
    requestSession=DataRequestSession.newSession(context);
    IModelAdapter modelAdaptor=requestSession.getModelAdaptor();
    DataSourceHandle dataSource=dataSet.getDataSource();
    IBaseDataSourceDesign sourceDesign=modelAdaptor.adaptDataSource(dataSource);
    IBaseDataSetDesign dataSetDesign=modelAdaptor.adaptDataSet(dataSet);
    requestSession.clearCache(sourceDesign,dataSetDesign);
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
 finally {
    if (requestSession != null) {
      requestSession.shutdown();
    }
  }
}","/** 
 * uses to clear the data cach.
 * @param dataSet the dataset handle
 * @throws BirtException
 */
public void clearCache(DataSetHandle dataSet) throws BirtException {
  DataSessionContext context;
  DataRequestSession requestSession=null;
  try {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle(),null);
    requestSession=DataRequestSession.newSession(context);
    IModelAdapter modelAdaptor=requestSession.getModelAdaptor();
    DataSourceHandle dataSource=dataSet.getDataSource();
    IBaseDataSourceDesign sourceDesign=modelAdaptor.adaptDataSource(dataSource);
    IBaseDataSetDesign dataSetDesign=modelAdaptor.adaptDataSet(dataSet);
    requestSession.clearCache(sourceDesign,dataSetDesign);
  }
  finally {
    if (requestSession != null) {
      requestSession.shutdown();
    }
  }
}",0.9676320272572402
65019,"/** 
 * Returns the column number for the cell that has no ""column"" property defined.
 * @param module the report design
 * @param target the cell to find
 * @return the column position
 */
public int getCellPositionInColumn(Module module,Cell target){
  int pos=target.getColumn(module);
  if (pos > 0)   return pos;
  pos=1;
  TableRow row=(TableRow)target.getContainer();
  List<DesignElement> list=row.getContentsSlot();
  for (Iterator<DesignElement> iter=list.iterator(); iter.hasNext(); ) {
    Cell cell=(Cell)iter.next();
    int cellPos=cell.getColumn(module);
    if (cellPos > 0)     pos=cellPos;
    if (cell == target)     break;
    pos=pos + cell.getColSpan(module);
  }
  int cellRowNum=getRowNumber(row);
  ContainerSlot rows=getSlot(ROW_SLOT);
  for (int currRowNum=0; currRowNum < rows.getCount(); currRowNum++) {
    TableRow currRow=(TableRow)rows.getContent(currRowNum);
    if (row == currRow)     break;
    List<DesignElement> cells=currRow.getContentsSlot();
    for (int j=0; j < pos; j++) {
      Cell cell=(Cell)cells.get(j);
      if (cell.getRowSpan(module) + currRowNum >= cellRowNum)       pos++;
    }
  }
  return pos;
}","/** 
 * Returns the column number for the cell that has no ""column"" property defined.
 * @param module the report design
 * @param target the cell to find
 * @return the column position
 */
public int getCellPositionInColumn(Module module,Cell target){
  int pos=target.getColumn(module);
  if (pos > 0)   return pos;
  pos=1;
  TableRow row=(TableRow)target.getContainer();
  List<DesignElement> list=row.getContentsSlot();
  for (Iterator<DesignElement> iter=list.iterator(); iter.hasNext(); ) {
    Cell cell=(Cell)iter.next();
    int cellPos=cell.getColumn(module);
    if (cellPos > 0)     pos=cellPos;
    if (cell == target)     break;
    pos=pos + cell.getColSpan(module);
  }
  int cellRowNum=getRowNumber(row);
  ContainerSlot rows=getSlot(ROW_SLOT);
  for (int currRowNum=0; currRowNum < rows.getCount(); currRowNum++) {
    TableRow currRow=(TableRow)rows.getContent(currRowNum);
    if (row == currRow)     break;
    List<DesignElement> cells=currRow.getContentsSlot();
    int count=Math.min(pos,cells.size());
    for (int j=0; j < count; j++) {
      Cell cell=(Cell)cells.get(j);
      if (cell.getRowSpan(module) + currRowNum >= cellRowNum)       pos++;
    }
  }
  return pos;
}",0.9787775891341256
65020,"/** 
 * Tests 'hasLocalPropertiesForExtendedElements' method. <ul> <li>Label has 'name' properties, can't enable restore.</li> <li>Get label without any property inside grid element.</li> <li>Modify one property of label and 'restore' button should be enabled.</li> <li>Modify one property of label in grid and 'restore' button should be enabled.</li> </ul>
 * @throws Exception any exception
 */
public void testExtendsItemHasLocalProperties() throws Exception {
  openDesign(""String_Node_Str"");
  LabelHandle labelHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  List<DesignElementHandle> elements=new ArrayList<DesignElementHandle>();
  elements.add(labelHandle);
  GroupElementHandle groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  assertFalse(groupElementHandle.hasLocalPropertiesForExtendedElements());
  labelHandle.setText(""String_Node_Str"");
  assertTrue(groupElementHandle.hasLocalPropertiesForExtendedElements());
  labelHandle=(LabelHandle)designHandle.getElementByID(20);
  elements.clear();
  elements.add(labelHandle);
  assertFalse(groupElementHandle.hasLocalPropertiesForExtendedElements());
  labelHandle.setStringProperty(""String_Node_Str"",""String_Node_Str"");
  assertTrue(groupElementHandle.hasLocalPropertiesForExtendedElements());
  CubeHandle cube=designHandle.findCube(""String_Node_Str"");
  elements.clear();
  elements.add(cube);
  groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  assertFalse(groupElementHandle.hasLocalPropertiesForExtendedElements());
}","/** 
 * Tests 'hasLocalPropertiesForExtendedElements' method. <ul> <li>Label has 'name' properties, can't enable restore.</li> <li>Get label without any property inside grid element.</li> <li>Modify one property of label and 'restore' button should be enabled.</li> <li>Modify one property of label in grid and 'restore' button should be enabled.</li> </ul>
 * @throws Exception any exception
 */
public void testExtendsItemHasLocalProperties() throws Exception {
  openDesign(""String_Node_Str"");
  LabelHandle labelHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  List<DesignElementHandle> elements=new ArrayList<DesignElementHandle>();
  elements.add(labelHandle);
  GroupElementHandle groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  assertFalse(groupElementHandle.hasLocalPropertiesForExtendedElements());
  labelHandle.setText(""String_Node_Str"");
  assertTrue(groupElementHandle.hasLocalPropertiesForExtendedElements());
  labelHandle=(LabelHandle)designHandle.getElementByID(20);
  elements.clear();
  elements.add(labelHandle);
  assertFalse(groupElementHandle.hasLocalPropertiesForExtendedElements());
  labelHandle.setStringProperty(""String_Node_Str"",""String_Node_Str"");
  assertTrue(groupElementHandle.hasLocalPropertiesForExtendedElements());
  CubeHandle cube=designHandle.findCube(""String_Node_Str"");
  elements.clear();
  elements.add(cube);
  groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
}",0.9751902084022496
65021,"/** 
 * Gets the referred OLAP measure handle of this measure view.
 * @return the referred OLAP measure handle
 */
public MeasureHandle getCubeMeasure(){
  MeasureHandle cubeMeasure=(MeasureHandle)handle.getElementProperty(MEASURE_PROP);
  if (cubeMeasure == null) {
    String measureName=this.getCubeMeasureName();
    CubeHandle cube=this.getCrosstab().getCube();
    if (measureName != null && cube != null) {
      cubeMeasure=cube.getMeasure(measureName);
    }
  }
  return cubeMeasure;
}","/** 
 * Gets the referred OLAP measure handle of this measure view.
 * @return the referred OLAP measure handle
 */
public MeasureHandle getCubeMeasure(){
  MeasureHandle cubeMeasure=(MeasureHandle)handle.getElementProperty(MEASURE_PROP);
  CubeHandle cube=this.getCrosstab().getCube();
  if (cubeMeasure != null) {
    if (cubeMeasure.getContainer() != null && cubeMeasure.getContainer().getContainer() != cube) {
      cubeMeasure=null;
    }
  }
  if (cubeMeasure == null) {
    String measureName=this.getCubeMeasureName();
    if (measureName != null && cube != null) {
      cubeMeasure=cube.getMeasure(measureName);
    }
  }
  return cubeMeasure;
}",0.6267361111111112
65022,"public static ComputedColumnHandle generateAggregation(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  String name=generateComputedColumnName(measureView,colLevel,rowLevel);
  ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
  String dataType=measureView.getDataType();
  column.setDataType(dataType);
  if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
    String dataField=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
    if (dataField == null || dataField.isEmpty()) {
      return null;
    }
    column.setExpression(ExpressionUtil.createDataSetRowExpression(dataField));
  }
 else {
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
  }
  String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
  column.setAggregateFunction(function != null ? function : defaultFunction);
  if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
    try {
      IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
      if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
        column.setAggregateFunction(defaultFunction);
      }
 else {
        String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
        if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
          column.setDataType(targetType);
        }
      }
    }
 catch (    BirtException e) {
    }
  }
  if (rowLevel != null) {
    column.addAggregateOn(rowLevel);
  }
  if (colLevel != null) {
    column.addAggregateOn(colLevel);
  }
  return ((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
}","public static ComputedColumnHandle generateAggregation(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  String name=generateComputedColumnName(measureView,colLevel,rowLevel);
  ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
  String dataType=measureView.getDataType();
  column.setDataType(dataType);
  if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
    String dataField=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
    if (dataField == null || dataField.isEmpty()) {
      return null;
    }
    column.setExpression(ExpressionUtil.createDataSetRowExpression(dataField));
  }
 else {
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
  }
  String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
  column.setAggregateFunction(function != null ? function : defaultFunction);
  if (DesignChoiceConstants.MEASURE_FUNCTION_COUNT.equals(defaultFunction)) {
    dataType=DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
    column.setDataType(dataType);
  }
  if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
    try {
      IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
      if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
        column.setAggregateFunction(defaultFunction);
      }
 else {
        String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
        if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
          column.setDataType(targetType);
        }
      }
    }
 catch (    BirtException e) {
    }
  }
  if (rowLevel != null) {
    column.addAggregateOn(rowLevel);
  }
  if (colLevel != null) {
    column.addAggregateOn(colLevel);
  }
  return ((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
}",0.9549732892393792
65023,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || !needUpdateMeasure(measureView)) {
    return;
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell != null) {
    String name=generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    String measureName=null;
    if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
      measureName=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
      if (measureName == null || measureName.isEmpty()) {
        return;
      }
      column.setExpression(ExpressionUtil.createDataSetRowExpression(measureName));
    }
 else {
      measureName=measureView.getCubeMeasureName();
      column.setExpression(ExpressionUtil.createJSMeasureExpression(measureName));
    }
    String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
    column.setAggregateFunction(function != null ? function : defaultFunction);
    if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
      try {
        IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
        if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
          column.setAggregateFunction(defaultFunction);
        }
 else {
          String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
          if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
            column.setDataType(targetType);
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=generateAggregation(crosstab,cell,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    if (columnHandle == null) {
      return;
    }
    if (cell.getContents().size() == 0) {
      DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      cell.addContent(dataItem);
    }
 else     if (cell.getContents().size() == 1 && cell.getContents().get(0) instanceof DataItemHandle) {
      DataItemHandle dataItem=(DataItemHandle)cell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
 else {
      for (      Object item : cell.getContents()) {
        if (item instanceof DataItemHandle) {
          String bindingName=((DataItemHandle)item).getResultSetColumn();
          ComputedColumnHandle binding=((ReportItemHandle)crosstab.getModelHandle()).findColumnBinding(bindingName);
          if (binding != null && binding.getAggregateFunction() != null) {
            try {
              IAggrFunction aggFunc=getAggregationManager().getAggregation(binding.getAggregateFunction());
              if (aggFunc.getType() != IAggrFunction.RUNNING_AGGR && isMeasureDataItem(crosstab,measureName,(DataItemHandle)item,binding)) {
                ((DataItemHandle)item).setResultSetColumn(columnHandle.getName());
                break;
              }
            }
 catch (            BirtException e) {
            }
          }
        }
      }
    }
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || !needUpdateMeasure(measureView)) {
    return;
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell != null) {
    String name=generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    String measureName=null;
    if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
      measureName=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
      if (measureName == null || measureName.isEmpty()) {
        return;
      }
      column.setExpression(ExpressionUtil.createDataSetRowExpression(measureName));
    }
 else {
      measureName=measureView.getCubeMeasureName();
      column.setExpression(ExpressionUtil.createJSMeasureExpression(measureName));
    }
    String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
    if (DesignChoiceConstants.MEASURE_FUNCTION_COUNT.equals(defaultFunction)) {
      dataType=DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
      column.setDataType(dataType);
    }
    column.setAggregateFunction(function != null ? function : defaultFunction);
    if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
      try {
        IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
        if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
          column.setAggregateFunction(defaultFunction);
        }
 else {
          String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
          if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
            column.setDataType(targetType);
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=generateAggregation(crosstab,cell,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    if (columnHandle == null) {
      return;
    }
    if (cell.getContents().size() == 0) {
      DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      cell.addContent(dataItem);
    }
 else     if (cell.getContents().size() == 1 && cell.getContents().get(0) instanceof DataItemHandle) {
      DataItemHandle dataItem=(DataItemHandle)cell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
 else {
      for (      Object item : cell.getContents()) {
        if (item instanceof DataItemHandle) {
          String bindingName=((DataItemHandle)item).getResultSetColumn();
          ComputedColumnHandle binding=((ReportItemHandle)crosstab.getModelHandle()).findColumnBinding(bindingName);
          if (binding != null && binding.getAggregateFunction() != null) {
            try {
              IAggrFunction aggFunc=getAggregationManager().getAggregation(binding.getAggregateFunction());
              if (aggFunc.getType() != IAggrFunction.RUNNING_AGGR && isMeasureDataItem(crosstab,measureName,(DataItemHandle)item,binding)) {
                ((DataItemHandle)item).setResultSetColumn(columnHandle.getName());
                break;
              }
            }
 catch (            BirtException e) {
            }
          }
        }
      }
    }
  }
}",0.9793733972572192
65024,"/** 
 * Returns the column number for the cell that has no ""column"" property defined.
 * @param module the report design
 * @param target the cell to find
 * @return the column position
 */
public int getCellPositionInColumn(Module module,Cell target){
  int pos=target.getColumn(module);
  if (pos > 0)   return pos;
  pos=1;
  TableRow row=(TableRow)target.getContainer();
  List<DesignElement> list=row.getContentsSlot();
  for (Iterator<DesignElement> iter=list.iterator(); iter.hasNext(); ) {
    Cell cell=(Cell)iter.next();
    int cellPos=cell.getColumn(module);
    if (cellPos > 0)     pos=cellPos;
    if (cell == target)     break;
    pos=pos + cell.getColSpan(module);
  }
  int cellRowNum=getRowNumber(row);
  ContainerSlot rows=getSlot(ROW_SLOT);
  for (int currRowNum=0; currRowNum < rows.getCount(); currRowNum++) {
    TableRow currRow=(TableRow)rows.getContent(currRowNum);
    if (row == currRow)     break;
    List<DesignElement> cells=currRow.getContentsSlot();
    for (int j=0; j < pos; j++) {
      Cell cell=(Cell)cells.get(j);
      if (cell.getRowSpan(module) + currRowNum >= cellRowNum)       pos++;
    }
  }
  return pos;
}","/** 
 * Returns the column number for the cell that has no ""column"" property defined.
 * @param module the report design
 * @param target the cell to find
 * @return the column position
 */
public int getCellPositionInColumn(Module module,Cell target){
  int pos=target.getColumn(module);
  if (pos > 0)   return pos;
  pos=1;
  TableRow row=(TableRow)target.getContainer();
  List<DesignElement> list=row.getContentsSlot();
  for (Iterator<DesignElement> iter=list.iterator(); iter.hasNext(); ) {
    Cell cell=(Cell)iter.next();
    int cellPos=cell.getColumn(module);
    if (cellPos > 0)     pos=cellPos;
    if (cell == target)     break;
    pos=pos + cell.getColSpan(module);
  }
  int cellRowNum=getRowNumber(row);
  ContainerSlot rows=getSlot(ROW_SLOT);
  for (int currRowNum=0; currRowNum < rows.getCount(); currRowNum++) {
    TableRow currRow=(TableRow)rows.getContent(currRowNum);
    if (row == currRow)     break;
    List<DesignElement> cells=currRow.getContentsSlot();
    if (cells == null)     continue;
    int maxSize=Math.min(pos,cells.size());
    for (int j=0; j < maxSize; j++) {
      Cell cell=(Cell)cells.get(j);
      if (cell.getRowSpan(module) + currRowNum >= cellRowNum)       pos++;
    }
  }
  return pos;
}",0.9620358781810596
65025,"/** 
 * precond: TableGroupArea do not have outside merging in
 * @param table
 */
private void parseTableExtraSpanRows(ContainerArea table){
  int additionalrowheight=0;
  int additionalrowspan=0;
  boolean fistrowrun=true;
  for (int rowidx=table.getChildrenCount() - 1; rowidx >= 0; rowidx--) {
    ContainerArea child=(ContainerArea)table.getChild(rowidx);
    if (child instanceof TableGroupArea) {
      parseTableExtraSpanRows(child);
    }
 else {
      RowArea row=(RowArea)child;
      int numOfCells=row.getChildrenCount();
      if (numOfCells == 0) {
        additionalrowheight+=row.getHeight();
        additionalrowspan++;
      }
 else       if (!zeroColumnList.isEmpty()) {
        if (numOfColumns != numOfCells) {
          Iterator<Integer> iterzero=zeroColumnList.iterator();
          Iterator<IArea> itercell=row.getChildren();
          int zerocolumn=iterzero.next();
          while (itercell.hasNext()) {
            CellArea cell=(CellArea)itercell.next();
            int thiscolspan=cell.getColSpan();
            if (thiscolspan > 1) {
              int thiscolumn=cell.getColumnID();
              while (iterzero.hasNext() && zerocolumn < thiscolumn) {
                zerocolumn=iterzero.next();
              }
              while (zerocolumn <= (thiscolumn + thiscolspan - 1)) {
                cell.setColSpan(--thiscolspan);
                if (fistrowrun) {
                  int numOfigncol=0;
                  Integer numofIng=mapignorecolumns.get(thiscolumn);
                  if (numofIng == null) {
                    numOfigncol=1;
                  }
 else {
                    numOfigncol=numofIng + 1;
                  }
                  mapignorecolumns.put(thiscolumn,numOfigncol);
                }
                if (iterzero.hasNext()) {
                  zerocolumn=iterzero.next();
                }
 else {
                  break;
                }
              }
              if (zerocolumn < (thiscolumn + thiscolspan)) {
                break;
              }
            }
          }
        }
      }
 else       if (additionalrowspan > 0) {
        row.setHeight(additionalrowheight + row.getHeight());
        Iterator<IArea> iter=row.getChildren();
        while (iter.hasNext()) {
          CellArea cell=(CellArea)iter.next();
          cell.setRowSpan(cell.getRowSpan() - additionalrowspan);
        }
        additionalrowheight=0;
        additionalrowspan=0;
      }
    }
  }
}","/** 
 * precond: TableGroupArea do not have outside merging in
 * @param table
 */
private void parseTableExtraSpanRows(ContainerArea table){
  int additionalrowheight=0;
  int additionalrowspan=0;
  boolean fistrowrun=true;
  for (int rowidx=table.getChildrenCount() - 1; rowidx >= 0; rowidx--) {
    ContainerArea child=(ContainerArea)table.getChild(rowidx);
    if (child instanceof TableGroupArea) {
      parseTableExtraSpanRows(child);
    }
 else {
      RowArea row=(RowArea)child;
      int numOfCells=row.getChildrenCount();
      if (numOfCells == 0) {
        additionalrowheight+=row.getHeight();
        additionalrowspan++;
      }
 else       if (!zeroColumnList.isEmpty()) {
        if (numOfColumns != numOfCells) {
          Iterator<Integer> iterzero=zeroColumnList.iterator();
          Iterator<IArea> itercell=row.getChildren();
          int zerocolumn=iterzero.next();
          while (itercell.hasNext()) {
            CellArea cell=(CellArea)itercell.next();
            int thiscolspan=cell.getColSpan();
            int thiscolumn=cell.getColumnID();
            if (thiscolspan > 1) {
              while (iterzero.hasNext() && zerocolumn < thiscolumn) {
                zerocolumn=iterzero.next();
              }
              while (zerocolumn <= (thiscolumn + thiscolspan - 1)) {
                cell.setColSpan(--thiscolspan);
                if (fistrowrun) {
                  int numOfigncol=0;
                  Integer numofIng=mapignorecolumns.get(thiscolumn);
                  if (numofIng == null) {
                    numOfigncol=1;
                  }
 else {
                    numOfigncol=numofIng + 1;
                  }
                  mapignorecolumns.put(thiscolumn,numOfigncol);
                }
                if (iterzero.hasNext()) {
                  zerocolumn=iterzero.next();
                }
 else {
                  break;
                }
              }
              if (zerocolumn < (thiscolumn + thiscolspan)) {
                break;
              }
            }
 else             if (thiscolumn >= zerocolumn) {
              if (iterzero.hasNext()) {
                zerocolumn=iterzero.next();
              }
 else {
                break;
              }
            }
          }
        }
      }
 else       if (additionalrowspan > 0) {
        row.setHeight(additionalrowheight + row.getHeight());
        Iterator<IArea> iter=row.getChildren();
        while (iter.hasNext()) {
          CellArea cell=(CellArea)iter.next();
          cell.setRowSpan(cell.getRowSpan() - additionalrowspan);
        }
        additionalrowheight=0;
        additionalrowspan=0;
      }
    }
  }
}",0.944823552349386
65026,"/** 
 * Including next(), getRow(), getDATATYPE(index), wasNull(). Compare with the results got from JDBC ResultSet
 * @throws Exception
 */
public void testResultValuesByIndex() throws Exception {
  assertEquals(rs.getRow(),jdbcRs.getRow());
  String sqlState=null;
  try {
    rs.getString(1);
    fail(""String_Node_Str"");
  }
 catch (  JDBCException e) {
    sqlState=e.getSQLState();
  }
  try {
    jdbcRs.getString(1);
    fail();
  }
 catch (  SQLException e) {
    assertEquals(e.getSQLState(),sqlState);
  }
  while (rs.next()) {
    jdbcRs.next();
    assertEquals(rs.wasNull(),jdbcRs.wasNull());
    assertEquals(rs.getRow(),jdbcRs.getRow());
    assertEquals(rs.getBigDecimal(1),jdbcRs.getBigDecimal(1));
    assertEquals(rs.getDate(2),jdbcRs.getDate(2));
    assertEquals(rs.getDouble(3),jdbcRs.getDouble(3),Double.MIN_VALUE);
    assertEquals(rs.getInt(4),jdbcRs.getInt(4));
    assertEquals(rs.getString(5),jdbcRs.getString(5));
    assertEquals(rs.getTime(6),jdbcRs.getTime(6));
    assertEquals(rs.getTimestamp(7),jdbcRs.getTimestamp(7));
  }
}","/** 
 * Including next(), getRow(), getDATATYPE(index), wasNull(). Compare with the results got from JDBC ResultSet
 * @throws Exception
 */
public void testResultValuesByIndex() throws Exception {
  assertEquals(rs.getRow(),jdbcRs.getRow());
  while (rs.next()) {
    jdbcRs.next();
    assertEquals(rs.wasNull(),jdbcRs.wasNull());
    assertEquals(rs.getRow(),jdbcRs.getRow());
    assertEquals(rs.getBigDecimal(1),jdbcRs.getBigDecimal(1));
    assertEquals(rs.getDate(2),jdbcRs.getDate(2));
    assertEquals(rs.getDouble(3),jdbcRs.getDouble(3),Double.MIN_VALUE);
    assertEquals(rs.getInt(4),jdbcRs.getInt(4));
    assertEquals(rs.getString(5),jdbcRs.getString(5));
    assertEquals(rs.getTime(6),jdbcRs.getTime(6));
    assertEquals(rs.getTimestamp(7),jdbcRs.getTimestamp(7));
  }
}",0.8517316017316018
65027,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  Exception connFactoryEx=null;
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    try {
      Connection cn=factory.getConnection(driverClass,url,connectionProperties);
      return cn;
    }
 catch (    Exception ex) {
      if (ex instanceof SQLException && INVALID_AUTH_SQL_STATE.equals(((SQLException)ex).getSQLState()))       throw (SQLException)ex;
      connFactoryEx=ex;
    }
  }
  try {
    loadAndRegisterDriver(driverClass,driverClassPath);
  }
 catch (  OdaException loadDriverEx) {
    if (connFactoryEx != null) {
      if (connFactoryEx instanceof SQLException)       throw (SQLException)connFactoryEx;
      throw new OdaException(connFactoryEx);
    }
    throw loadDriverEx;
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (INVALID_AUTH_SQL_STATE.equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  Exception connFactoryEx=null;
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    try {
      Connection cn=factory.getConnection(driverClass,url,connectionProperties);
      return cn;
    }
 catch (    Exception ex) {
      if (ex instanceof SQLException && INVALID_AUTH_SQL_STATE.equals(((SQLException)ex).getSQLState()))       throw (SQLException)ex;
      connFactoryEx=ex;
    }
  }
  try {
    loadAndRegisterDriver(driverClass,driverClassPath);
  }
 catch (  OdaException loadDriverEx) {
    if (connFactoryEx != null) {
      if (connFactoryEx instanceof SQLException)       throw (SQLException)connFactoryEx;
      throw new OdaException(connFactoryEx);
    }
    throw loadDriverEx;
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (INVALID_AUTH_SQL_STATE.equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null) {
        Connection conn=((Driver)dc.newInstance()).connect(url,connectionProperties);
        if (conn != null)         return conn;
      }
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}",0.9802271771140092
65028,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  AllTestsHelper.suite(suite);
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.DocumentIRTransferTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DatasetPreviewTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DateFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.EngineLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.LogicalPageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.PageSequenceParseTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.iv.IVTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.iv.IVViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CachedImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CancelOnErrorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskStatusTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngintTaskLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterValidationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TimeZoneTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ResultSetIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLEncodeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLEncodeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLClientInitializeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListingElementExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportPageReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRIOTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.util.BackgroundImageLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.TableBorderExTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.TableBorderPDFTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.TableBorderPSTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.html.HTMLLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.CharSegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.WordRecognizerWrapperTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.EngineIRParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.regression.Test_90378.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.HugeTOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCComparatorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCReadWriteTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCVersionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  AllTestsHelper.suite(suite);
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.DocumentIRTransferTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DatasetPreviewTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DateFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.EngineLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.LogicalPageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.LoggerSettingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.PageSequenceParseTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.iv.IVTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.iv.IVViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CachedImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CancelOnErrorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskStatusTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngintTaskLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterValidationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TimeZoneTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ResultSetIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLEncodeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLEncodeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLClientInitializeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListingElementExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportPageReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRIOTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.util.BackgroundImageLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.TableBorderExTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.TableBorderPDFTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.emitter.TableBorderPSTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.html.HTMLLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.CharSegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.WordRecognizerWrapperTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.EngineIRParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.regression.Test_90378.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.HugeTOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCComparatorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCReadWriteTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCVersionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}",0.9968212210895538
65029,"/** 
 * the user setup a thread logger. Those logs output in those thread should be output to the defined logger, the thread without logger should be output to the original logger.
 * @throws Exception
 */
public void testThreadLogger() throws Exception {
  setupRootLogger(""String_Node_Str"",Level.FINEST);
  try {
    EngineLogger.startEngineLogging(null,null,null,null,0,0);
    logThread(""String_Node_Str"",Level.WARNING);
    logThread(""String_Node_Str"",Level.FINE);
    log();
    EngineLogger.stopEngineLogging();
  }
  finally {
    removeRootLogger();
  }
  waitLogThreads();
  checkLogging(""String_Node_Str"",1,1,1);
  checkLogging(""String_Node_Str"",0,0,1);
  checkLogging(""String_Node_Str"",0,1,1);
}","/** 
 * the user setup a thread logger. Those logs output in those thread should be output to the defined logger, the thread without logger should be output to the original logger.
 * @throws Exception
 */
public void testThreadLogger() throws Exception {
  setupRootLogger(""String_Node_Str"",Level.FINEST);
  try {
    LoggerSetting setting=EngineLogger.createSetting(null,null,null,null,0,0);
    logThread(""String_Node_Str"",Level.WARNING);
    logThread(""String_Node_Str"",Level.FINE);
    log();
    EngineLogger.removeSetting(setting);
  }
  finally {
    removeRootLogger();
  }
  waitLogThreads();
  checkLogging(""String_Node_Str"",1,1,1);
  checkLogging(""String_Node_Str"",0,0,1);
  checkLogging(""String_Node_Str"",0,1,1);
}",0.9400278940027894
65030,"/** 
 * the user setup a file logger. All the logger should be outputted to the file. If the log level is OFF, no log file should be created.
 * @throws Exception
 */
public void testFileLogger() throws Exception {
  EngineLogger.startEngineLogging(null,""String_Node_Str"",""String_Node_Str"",Level.OFF,0,0);
  log();
  assertFalse(new File(""String_Node_Str"").exists());
  EngineLogger.changeLogLevel(Level.WARNING);
  log();
  assertTrue(new File(""String_Node_Str"").exists());
  EngineLogger.stopEngineLogging();
  checkLogging(""String_Node_Str"",0,0,1);
}","/** 
 * the user setup a file logger. All the logger should be outputted to the file. If the log level is OFF, no log file should be created.
 * @throws Exception
 */
public void testFileLogger() throws Exception {
  LoggerSetting setting=EngineLogger.createSetting(null,""String_Node_Str"",""String_Node_Str"",Level.OFF,0,0);
  log();
  assertFalse(new File(""String_Node_Str"").exists());
  EngineLogger.changeLogLevel(setting,Level.WARNING);
  log();
  assertTrue(new File(""String_Node_Str"").exists());
  EngineLogger.removeSetting(setting);
  checkLogging(""String_Node_Str"",0,0,1);
}",0.673721340388007
65031,"/** 
 * the user uses the user defined log. All log should be outputted to the user defined logger.
 * @throws Exception
 */
public void testUserLogger() throws Exception {
  FileHandler fileHandle=new FileHandler(""String_Node_Str"");
  try {
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(fileHandle);
    logger.setLevel(Level.ALL);
    logger.setUseParentHandlers(false);
    try {
      EngineLogger.startEngineLogging(logger,null,null,Level.FINE,0,0);
      log();
      EngineLogger.setLogger(null);
      log();
      EngineLogger.stopEngineLogging();
    }
  finally {
      logger.removeHandler(fileHandle);
    }
  }
  finally {
    fileHandle.close();
  }
  checkLogging(""String_Node_Str"",0,1,1);
}","/** 
 * the user uses the user defined log. All log should be outputted to the user defined logger.
 * @throws Exception
 */
public void testUserLogger() throws Exception {
  FileHandler fileHandle=new FileHandler(""String_Node_Str"");
  try {
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(fileHandle);
    logger.setLevel(Level.ALL);
    logger.setUseParentHandlers(false);
    try {
      LoggerSetting setting=EngineLogger.createSetting(logger,null,null,Level.FINE,0,0);
      log();
      EngineLogger.setLogger(setting,null);
      log();
      EngineLogger.removeSetting(setting);
    }
  finally {
      logger.removeHandler(fileHandle);
    }
  }
  finally {
    fileHandle.close();
  }
  checkLogging(""String_Node_Str"",0,1,1);
}",0.9368279569892471
65032,"/** 
 * if the user doesn't setup any ENGINE logger, ENGINE should use the system logger as all other components
 * @throws Exception
 */
public void testDefaultLogger() throws Exception {
  setupRootLogger(""String_Node_Str"",Level.FINE);
  try {
    EngineLogger.startEngineLogging(null,null,null,null,0,0);
    log();
    EngineLogger.stopEngineLogging();
  }
  finally {
    removeRootLogger();
  }
  checkLogging(""String_Node_Str"",0,1,1);
}","/** 
 * if the user doesn't setup any ENGINE logger, ENGINE should use the system logger as all other components
 * @throws Exception
 */
public void testDefaultLogger() throws Exception {
  setupRootLogger(""String_Node_Str"",Level.FINE);
  try {
    LoggerSetting setting=EngineLogger.createSetting(null,null,null,null,0,0);
    log();
    EngineLogger.removeSetting(setting);
  }
  finally {
    removeRootLogger();
  }
  checkLogging(""String_Node_Str"",0,1,1);
}",0.9050772626931568
65033,"public void testFormat(){
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2013);
  calendar.set(Calendar.MONTH,5);
  calendar.set(Calendar.DATE,8);
  Date date=calendar.getTime();
  Hashtable<ULocale,String> locales=new Hashtable<ULocale,String>();
  locales.put(ULocale.CANADA,""String_Node_Str"");
  locales.put(ULocale.CHINA,""String_Node_Str"");
  locales.put(ULocale.ENGLISH,""String_Node_Str"");
  locales.put(ULocale.FRANCE,""String_Node_Str"");
  locales.put(ULocale.GERMAN,""String_Node_Str"");
  locales.put(ULocale.ITALY,""String_Node_Str"");
  locales.put(ULocale.JAPAN,""String_Node_Str"");
  locales.put(ULocale.KOREA,""String_Node_Str"");
  locales.put(ULocale.SIMPLIFIED_CHINESE,""String_Node_Str"");
  locales.put(ULocale.TAIWAN,""String_Node_Str"");
  locales.put(ULocale.TRADITIONAL_CHINESE,""String_Node_Str"");
  locales.put(ULocale.UK,""String_Node_Str"");
  for (Iterator<ULocale> itr=locales.keySet().iterator(); itr.hasNext(); ) {
    ULocale locale=itr.next();
    IDateFormatWrapper formatter=DateFormatWrapperFactory.getPreferredDateFormat(Calendar.MONTH,locale,true);
    assertTrue(locales.get(locale).equals(formatter.format(date)));
  }
}","public void testFormat(){
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2013);
  calendar.set(Calendar.MONTH,5);
  calendar.set(Calendar.DATE,8);
  Date date=calendar.getTime();
  Hashtable<ULocale,String> locales=new Hashtable<ULocale,String>();
  locales.put(ULocale.CANADA,""String_Node_Str"");
  locales.put(ULocale.CHINA,""String_Node_Str"");
  locales.put(ULocale.ENGLISH,""String_Node_Str"");
  locales.put(ULocale.FRANCE,""String_Node_Str"");
  locales.put(ULocale.GERMAN,""String_Node_Str"");
  locales.put(ULocale.ITALY,""String_Node_Str"");
  locales.put(ULocale.JAPAN,""String_Node_Str"");
  locales.put(ULocale.KOREA,""String_Node_Str"");
  locales.put(ULocale.SIMPLIFIED_CHINESE,""String_Node_Str"");
  locales.put(ULocale.TAIWAN,""String_Node_Str"");
  locales.put(ULocale.TRADITIONAL_CHINESE,""String_Node_Str"");
  locales.put(ULocale.UK,""String_Node_Str"");
  for (Iterator<ULocale> itr=locales.keySet().iterator(); itr.hasNext(); ) {
    ULocale locale=itr.next();
    IDateFormatWrapper formatter=DateFormatWrapperFactory.getPreferredDateFormat(Calendar.MONTH,locale,true);
    assertEquals(locales.get(locale),formatter.format(date));
  }
}",0.9794520547945206
65034,"public void testMin(){
  IScale scale=getValueAxisScale();
  assertTrue(scale instanceof ITimeScale);
  ITimeScale ls=(ITimeScale)scale;
  assertEquals(ls.getMin().getYear(),2002 - 1900);
  assertEquals(ls.getMin().getDate(),19);
  ls.setMin(null);
  assertNull(ls.getMin());
}","public void testMin(){
  IScale scale=getValueAxisScale();
  assertTrue(scale instanceof ITimeScale);
  ITimeScale ls=(ITimeScale)scale;
  assertEquals(1037635200984L,ls.getMin().getTime());
  ls.setMin(null);
  assertNull(ls.getMin());
}",0.8038834951456311
65035,"public void widgetDefaultSelected(SelectionEvent e){
  if (getSelection() instanceof StructuredSelection) {
    List list=new ArrayList();
    Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
    list.add(selectedObject);
    ReportRequest r=new ReportRequest();
    r.setType(ReportRequest.OPEN_EDITOR);
    r.setRequestConverter(new IRequestConverter(){
      public List convertSelectionToModelLisr(      List list){
        List lst=new ArrayList();
        for (Iterator itr=list.iterator(); itr.hasNext(); ) {
          Object obj=itr.next();
          lst.add(obj);
        }
        return lst;
      }
    }
);
    r.setSelectionObject(list);
    SessionHandleAdapter.getInstance().getMediator(model).notifyRequest(r);
    try {
      Tree tree=(Tree)e.getSource();
      TreeItem[] selectedItems=tree.getSelection();
      if (selectedItems.length > 0) {
        if (selectedItems[0].getExpanded()) {
          selectedItems[0].setExpanded(false);
        }
 else {
          getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
        }
      }
    }
 catch (    Exception e2) {
    }
  }
}","public void widgetDefaultSelected(SelectionEvent e){
  if (getSelection() instanceof StructuredSelection) {
    List list=new ArrayList();
    Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
    list.add(selectedObject);
    ReportRequest r=new ReportRequest();
    r.setType(ReportRequest.OPEN_EDITOR);
    r.setRequestConverter(new IRequestConverter(){
      public List convertSelectionToModelLisr(      List list){
        List lst=new ArrayList();
        for (Iterator itr=list.iterator(); itr.hasNext(); ) {
          Object obj=itr.next();
          lst.add(obj);
        }
        return lst;
      }
    }
);
    r.setSelectionObject(list);
    SessionHandleAdapter.getInstance().getMediator(model).notifyRequest(r);
    if (selectedObject instanceof LibraryHandle && selectedObject != getRoot()) {
      try {
        final File file=EditorUtil.convertToFile(new URL(((LibraryHandle)selectedObject).getFileName()));
        if (file != null && file.exists() && file.isFile()) {
          Display.getCurrent().asyncExec(new Runnable(){
            @Override public void run(){
              try {
                EditorUtil.openEditor(DesignerOutlinePage.this,file,IReportEditorContants.LIBRARY_EDITOR_ID);
              }
 catch (              PartInitException e) {
                ExceptionUtil.handle(e);
              }
            }
          }
);
        }
      }
 catch (      IOException e1) {
      }
    }
    try {
      Tree tree=(Tree)e.getSource();
      TreeItem[] selectedItems=tree.getSelection();
      if (selectedItems.length > 0) {
        if (selectedItems[0].getExpanded()) {
          selectedItems[0].setExpanded(false);
        }
 else {
          getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
        }
      }
    }
 catch (    Exception e2) {
    }
  }
}",0.7687231936654569
65036,"/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(model);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        INodeProvider provider=null;
        if (event.item != null && event.item.getData() != null) {
          provider=ProviderFactory.createProvider(event.item.getData());
        }
        if (provider != null && provider.isReadOnly(event.item.getData())) {
          Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
          if (!item.getForeground().equals(gray)) {
            item.setForeground(gray);
          }
        }
 else {
          Color black=ReportColorConstants.ReportForeground;
          if (!item.getForeground().equals(black)) {
            item.setForeground(black);
          }
        }
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConverter(new IRequestConverter(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator(model).notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator(model).addColleague(getSelectionSynchronizer());
  if (backup != null) {
    backup.restoreBackup(getTreeViewer());
    getTreeViewer().getTree().addTreeListener(new TreeListener(){
      public void treeCollapsed(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateCollapsedStatus(getTreeViewer(),item.getData());
      }
      public void treeExpanded(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateExpandedStatus(getTreeViewer(),item.getData());
      }
    }
);
  }
}","/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(model);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        INodeProvider provider=null;
        if (event.item != null && event.item.getData() != null) {
          provider=ProviderFactory.createProvider(event.item.getData());
        }
        if (provider != null && provider.isReadOnly(event.item.getData())) {
          Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
          if (!item.getForeground().equals(gray)) {
            item.setForeground(gray);
          }
        }
 else {
          Color black=ReportColorConstants.ReportForeground;
          if (!item.getForeground().equals(black)) {
            item.setForeground(black);
          }
        }
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConverter(new IRequestConverter(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator(model).notifyRequest(r);
        if (selectedObject instanceof LibraryHandle && selectedObject != getRoot()) {
          try {
            final File file=EditorUtil.convertToFile(new URL(((LibraryHandle)selectedObject).getFileName()));
            if (file != null && file.exists() && file.isFile()) {
              Display.getCurrent().asyncExec(new Runnable(){
                @Override public void run(){
                  try {
                    EditorUtil.openEditor(DesignerOutlinePage.this,file,IReportEditorContants.LIBRARY_EDITOR_ID);
                  }
 catch (                  PartInitException e) {
                    ExceptionUtil.handle(e);
                  }
                }
              }
);
            }
          }
 catch (          IOException e1) {
          }
        }
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator(model).addColleague(getSelectionSynchronizer());
  if (backup != null) {
    backup.restoreBackup(getTreeViewer());
    getTreeViewer().getTree().addTreeListener(new TreeListener(){
      public void treeCollapsed(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateCollapsedStatus(getTreeViewer(),item.getData());
      }
      public void treeExpanded(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateExpandedStatus(getTreeViewer(),item.getData());
      }
    }
);
  }
}",0.930914910642838
65037,"/** 
 * Returns the column number for the cell that has no ""column"" property defined.
 * @param module the report design
 * @param target the cell to find
 * @return the column position
 */
public int getCellPositionInColumn(Module module,Cell target){
  int pos=target.getColumn(module);
  if (pos > 0)   return pos;
  pos=1;
  TableRow row=(TableRow)target.getContainer();
  List<DesignElement> list=row.getContentsSlot();
  for (Iterator<DesignElement> iter=list.iterator(); iter.hasNext(); ) {
    Cell cell=(Cell)iter.next();
    int cellPos=cell.getColumn(module);
    if (cellPos > 0)     pos=cellPos;
    if (cell == target)     return pos;
    pos=pos + cell.getColSpan(module);
  }
  return pos;
}","/** 
 * Returns the column number for the cell that has no ""column"" property defined.
 * @param module the report design
 * @param target the cell to find
 * @return the column position
 */
public int getCellPositionInColumn(Module module,Cell target){
  int pos=target.getColumn(module);
  if (pos > 0)   return pos;
  pos=1;
  TableRow row=(TableRow)target.getContainer();
  List<DesignElement> list=row.getContentsSlot();
  for (Iterator<DesignElement> iter=list.iterator(); iter.hasNext(); ) {
    Cell cell=(Cell)iter.next();
    int cellPos=cell.getColumn(module);
    if (cellPos > 0)     pos=cellPos;
    if (cell == target)     break;
    pos=pos + cell.getColSpan(module);
  }
  int cellRowNum=getRowNumber(row);
  ContainerSlot rows=getSlot(ROW_SLOT);
  for (int currRowNum=0; currRowNum < rows.getCount(); currRowNum++) {
    TableRow currRow=(TableRow)rows.getContent(currRowNum);
    if (row == currRow)     break;
    List<DesignElement> cells=currRow.getContentsSlot();
    for (int j=0; j < pos; j++) {
      Cell cell=(Cell)cells.get(j);
      if (cell.getRowSpan(module) + currRowNum >= cellRowNum)       pos++;
    }
  }
  return pos;
}",0.735373054213634
65038,"/** 
 * Gets the children element of the given model using visitor.
 * @param object the handle
 */
public Object[] getChildren(Object object){
  DataSetHandle handle=(DataSetHandle)object;
  ArrayList params=new ArrayList(10);
  CachedMetaDataHandle cmdh=null;
  try {
    cmdh=DataSetUIUtil.getCachedMetaDataHandle(handle);
  }
 catch (  SemanticException e) {
  }
  ArrayList columns=new ArrayList(10);
  if (cmdh != null) {
    for (Iterator iterator=cmdh.getResultSet().iterator(); iterator.hasNext(); ) {
      ResultSetColumnHandle element=(ResultSetColumnHandle)iterator.next();
      columns.add(element);
    }
  }
  PropertyHandle parameters=handle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  Iterator iter=parameters.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      Object dataSetParameter=iter.next();
      if (((DataSetParameterHandle)dataSetParameter).isOutput() == true) {
        params.add(dataSetParameter);
      }
    }
  }
  Object[] parametersArray=params.toArray();
  Object[] both=new Object[columns.toArray().length + parametersArray.length];
  System.arraycopy(columns.toArray(),0,both,0,columns.toArray().length);
  System.arraycopy(parametersArray,0,both,columns.toArray().length,parametersArray.length);
  return both;
}","/** 
 * Gets the children element of the given model using visitor.
 * @param object the handle
 */
public Object[] getChildren(Object object){
  DataSetHandle handle=(DataSetHandle)object;
  ArrayList params=new ArrayList(10);
  CachedMetaDataHandle cmdh=null;
  try {
    cmdh=DataSetUIUtil.getCachedMetaDataHandle(handle);
  }
 catch (  SemanticException e) {
  }
  ArrayList columns=new ArrayList(10);
  if (cmdh != null) {
    for (Iterator iterator=cmdh.getResultSet().iterator(); iterator.hasNext(); ) {
      ResultSetColumnHandle element=(ResultSetColumnHandle)iterator.next();
      columns.add(element);
    }
  }
  Collections.sort(columns,comp);
  PropertyHandle parameters=handle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  Iterator iter=parameters.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      Object dataSetParameter=iter.next();
      if (((DataSetParameterHandle)dataSetParameter).isOutput() == true) {
        params.add(dataSetParameter);
      }
    }
  }
  Object[] parametersArray=params.toArray();
  Object[] both=new Object[columns.toArray().length + parametersArray.length];
  System.arraycopy(columns.toArray(),0,both,0,columns.toArray().length);
  System.arraycopy(parametersArray,0,both,columns.toArray().length,parametersArray.length);
  return both;
}",0.9868827160493828
65039,"/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  HashMap cssStyle=new HashMap();
  if (ele.hasAttribute(""String_Node_Str"")) {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      Matcher matcher=IN_BRACKET_PATTERN.matcher(inlineStyle);
      while (matcher.find()) {
        bracketed.add(matcher.group(0));
      }
      inlineStyle=matcher.replaceAll(BRACKETED_REPLACEMENT);
      int replacementIndex=0;
      matcher=STYLE_PAIR_PATTERN.matcher(inlineStyle);
      while (matcher.find()) {
        String name=matcher.group(1);
        String value=matcher.group(2);
        if (name != null && name.length() > 0 && value != null && value.length() > 0) {
          while (value.contains(BRACKETED_REPLACEMENT)) {
            value=value.replace(BRACKETED_REPLACEMENT,bracketed.get(replacementIndex++));
          }
          cssStyle.put(name,value.trim());
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      String src=(String)cssStyle.get(""String_Node_Str"");
      if (src != null) {
        if (src.startsWith(""String_Node_Str"") && src.length() > 5) {
          src=src.substring(4,src.length() - 1);
        }
 else         if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          cssStyle.put(""String_Node_Str"",src);
        }
 else {
          cssStyle.remove(""String_Node_Str"");
        }
      }
    }
    if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      if (ele.hasAttribute(""String_Node_Str"")) {
        try {
          int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
          addToStyle(cssStyle,""String_Node_Str"",FONT_SIZE[size + 7]);
        }
 catch (        Exception e) {
          logger.log(Level.SEVERE,""String_Node_Str"");
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String decoration=(String)cssStyle.get(""String_Node_Str"");
      if (decoration != null && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1) {
        decoration=decoration + ""String_Node_Str"";
      }
 else       if (decoration == null) {
        decoration=""String_Node_Str"";
      }
      cssStyle.put(""String_Node_Str"",decoration);
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String src=ele.getAttribute(""String_Node_Str"");
      if (src != null) {
        if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          ele.removeAttribute(""String_Node_Str"");
          ele.setAttribute(""String_Node_Str"",src);
        }
      }
    }
    styles.put(ele,cssStyle);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}","/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  HashMap cssStyle=new HashMap();
  if (ele.hasAttribute(""String_Node_Str"")) {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      ArrayList<String> bracketed=new ArrayList<String>();
      Matcher matcher=IN_BRACKET_PATTERN.matcher(inlineStyle);
      while (matcher.find()) {
        bracketed.add(matcher.group(0));
      }
      inlineStyle=matcher.replaceAll(BRACKETED_REPLACEMENT);
      int replacementIndex=0;
      matcher=STYLE_PAIR_PATTERN.matcher(inlineStyle);
      while (matcher.find()) {
        String name=matcher.group(1);
        String value=matcher.group(2);
        if (name != null && name.length() > 0 && value != null && value.length() > 0) {
          while (value.contains(BRACKETED_REPLACEMENT)) {
            value=value.replace(BRACKETED_REPLACEMENT,bracketed.get(replacementIndex++));
          }
          cssStyle.put(name,value.trim());
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      String src=(String)cssStyle.get(""String_Node_Str"");
      if (src != null) {
        if (src.startsWith(""String_Node_Str"") && src.length() > 5) {
          src=src.substring(4,src.length() - 1);
        }
 else         if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          cssStyle.put(""String_Node_Str"",src);
        }
 else {
          cssStyle.remove(""String_Node_Str"");
        }
      }
    }
    if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
      if (ele.hasAttribute(""String_Node_Str"")) {
        try {
          int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
          addToStyle(cssStyle,""String_Node_Str"",FONT_SIZE[size + 7]);
        }
 catch (        Exception e) {
          logger.log(Level.SEVERE,""String_Node_Str"");
        }
      }
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele.removeAttribute(""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String decoration=(String)cssStyle.get(""String_Node_Str"");
      if (decoration != null && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1) {
        decoration=decoration + ""String_Node_Str"";
      }
 else       if (decoration == null) {
        decoration=""String_Node_Str"";
      }
      cssStyle.put(""String_Node_Str"",decoration);
      ele=replaceElement(ele,""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(ele.getTagName())) {
      String src=ele.getAttribute(""String_Node_Str"");
      if (src != null) {
        if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
          src=src.substring(1,src.length() - 1);
        }
        if (design != null) {
          URL url=design.findResource(src,IResourceLocator.IMAGE,appContext);
          if (url != null) {
            src=url.toExternalForm();
          }
        }
        if (rootPath != null) {
          if (FileUtil.isLocalResource(src)) {
            src=FileUtil.getAbsolutePath(rootPath,src);
          }
        }
        if (src != null) {
          ele.removeAttribute(""String_Node_Str"");
          ele.setAttribute(""String_Node_Str"",src);
        }
      }
    }
    styles.put(ele,cssStyle);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}",0.994171688234713
65040,"/** 
 * Compare the list with the golden file line by line.
 * @param list The list to be compared.
 * @param goldenFile the golden file name.
 * @return true is every element in the list is identical the correspondingline of the golden file.
 * @throws Exception
 */
private boolean compareListWithGoldenFile(List list,String goldenFile) throws Exception {
  boolean isIdentical=true;
  goldenFile=GOLDEN_FOLDER + goldenFile;
  InputStream is=getResourceAStream(goldenFile);
  BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  for (int i=0; i < list.size(); i++) {
    String item=((PropertyDefn)list.get(i)).getName();
    String line=reader.readLine();
    if (!item.equals(line)) {
      System.out.print(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + item + ""String_Node_Str""+ line+ ""String_Node_Str"");
      isIdentical=false;
      break;
    }
  }
  String line=reader.readLine();
  if (line != null)   return false;
  return isIdentical;
}","/** 
 * Compare the list with the golden file line by line.
 * @param list The list to be compared.
 * @param goldenFile the golden file name.
 * @return true is every element in the list is identical the correspondingline of the golden file.
 * @throws Exception
 */
private boolean compareListWithGoldenFile(List<PropertyDefn> list,String goldenFile) throws Exception {
  boolean isIdentical=true;
  String fullGoldenFile=GOLDEN_FOLDER + goldenFile;
  InputStream is=getResourceAStream(fullGoldenFile);
  BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  for (int i=0; i < list.size(); i++) {
    String item=((PropertyDefn)list.get(i)).getName();
    String line=reader.readLine();
    if (!item.equals(line)) {
      System.out.print(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + item + ""String_Node_Str""+ line+ ""String_Node_Str"");
      isIdentical=false;
      break;
    }
  }
  if (!isIdentical) {
    StringBuilder sb=new StringBuilder();
    for (    PropertyDefn one : list)     sb.append(one.getName() + ""String_Node_Str"");
    saveOutputFile(goldenFile,sb.toString());
  }
  String line=reader.readLine();
  if (line != null)   return false;
  return isIdentical;
}",0.8979591836734694
65041,"private void writeStylesPart() throws IOException {
  String uri=""String_Node_Str"";
  String type=ContentTypes.WORD_STYLES;
  String relationshipType=RelationshipTypes.STYLES;
  IPart stylesPart=part.getPart(uri,type,relationshipType);
  OOXmlWriter stylesPartWriter=null;
  try {
    stylesPartWriter=stylesPart.getWriter();
    stylesPartWriter.startWriter();
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.nameSpace(""String_Node_Str"",NameSpaces.WORD_PROCESSINGML);
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    if (!rtl) {
      stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",1);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",99);
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",0);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",0);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",108);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",0);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",108);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.endWriter();
  }
  finally {
    if (stylesPartWriter != null)     stylesPartWriter.close();
  }
}","private void writeStylesPart() throws IOException {
  String uri=""String_Node_Str"";
  String type=ContentTypes.WORD_STYLES;
  String relationshipType=RelationshipTypes.STYLES;
  IPart stylesPart=part.getPart(uri,type,relationshipType);
  OOXmlWriter stylesPartWriter=null;
  try {
    stylesPartWriter=stylesPart.getWriter();
    stylesPartWriter.startWriter();
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.nameSpace(""String_Node_Str"",NameSpaces.WORD_PROCESSINGML);
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",1);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",99);
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",0);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",0);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",108);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",0);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.openTag(""String_Node_Str"");
    stylesPartWriter.attribute(""String_Node_Str"",108);
    stylesPartWriter.attribute(""String_Node_Str"",""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.closeTag(""String_Node_Str"");
    stylesPartWriter.endWriter();
  }
  finally {
    if (stylesPartWriter != null)     stylesPartWriter.close();
  }
}",0.8806395295414867
65042,"/** 
 * Test setProperty method. especially for compatible with set toc string value.
 * @throws SemanticException
 */
public void testBackwardTOCSetProperty() throws SemanticException {
  LabelHandle labelHandle=designHandle.getElementFactory().newLabel(""String_Node_Str"");
  labelHandle.setStringProperty(IReportItemModel.TOC_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",labelHandle.getTOC().getExpression());
  labelHandle.setStringProperty(IReportItemModel.TOC_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",labelHandle.getTOC().getExpression());
  designHandle.getModule().getActivityStack().undo();
  assertEquals(""String_Node_Str"",labelHandle.getTOC().getExpression());
}","/** 
 * Test setProperty method. especially for compatible with set toc string value.
 * @throws SemanticException
 */
public void testBackwardTOCSetProperty() throws SemanticException {
  LabelHandle labelHandle=designHandle.getElementFactory().newLabel(""String_Node_Str"");
  designHandle.getBody().add(labelHandle);
  labelHandle.setStringProperty(IReportItemModel.TOC_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",labelHandle.getTOC().getExpression());
  labelHandle.setStringProperty(IReportItemModel.TOC_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",labelHandle.getTOC().getExpression());
  designHandle.getModule().getActivityStack().undo();
  assertEquals(""String_Node_Str"",labelHandle.getTOC().getExpression());
}",0.9702833448514168
65043,"/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source,null);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,JRE_DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      try {
        return toDate(source,DEFAULT_LOCALE);
      }
 catch (      BirtException de) {
        return toDateForSpecialFormat(source);
      }
    }
  }
}","/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  source=source.trim();
  try {
    return toDateISO8601(source,null);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,JRE_DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      try {
        return toDate(source,DEFAULT_LOCALE);
      }
 catch (      BirtException de) {
        return toDateForSpecialFormat(source);
      }
    }
  }
}",0.9829787234042552
65044,"/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=T_PATTERN.matcher(s).replaceFirst(""String_Node_Str"");
  }
  int zoneIndex=s.indexOf('Z');
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex).trim();
  }
  return s;
}","/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=T_PATTERN.matcher(s).replaceFirst(""String_Node_Str"");
  }
  int zoneIndex=s.indexOf('Z');
  if (zoneIndex == -1) {
    zoneIndex=s.indexOf('z');
  }
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex).trim();
  }
  Matcher m=TIME_PART_PATTERN.matcher(s);
  if (m.find()) {
    String timePart=m.group();
    if (timePart.length() > 12) {
      s=m.replaceFirst(timePart.substring(0,12));
    }
  }
  return s;
}",0.6981566820276498
65045,"/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @param stopSign
 * @throws DataException
 */
private void populateData(IRowResultSet rowResultSet,IResultClass rsMeta,SortSpec sortSpec,long cacheSize) throws DataException {
  long startTime=System.currentTimeMillis();
  SizeOfUtil sizeOfUtil=new SizeOfUtil(rsMeta);
  long memoryCacheSize=cacheSize > 0 ? cacheSize : CacheUtil.computeMemoryBufferSize(eventHandler.getAppContext());
  int maxRows=CacheUtil.getMaxRows(eventHandler == null ? null : eventHandler.getAppContext());
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  long usedMemorySize=0;
  while (!session.getStopSign().isStopped() && (odaObject=rowResultSet.next()) != null) {
    if (memoryCacheSize == 0 || usedMemorySize < memoryCacheSize) {
      dataCount++;
      if (maxRows > 0 && dataCount > maxRows) {
        throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
      }
      int odaObjectFieldCount=odaObject.getResultClass().getFieldCount();
      int metaFieldCount=rsMeta.getFieldCount();
      if (odaObjectFieldCount < metaFieldCount) {
        Object[] obs=new Object[metaFieldCount];
        for (int i=1; i <= odaObjectFieldCount; i++) {
          obs[i - 1]=odaObject.getFieldValue(i);
        }
        ResultObject temp=new ResultObject(rsMeta,obs);
        resultObjectsList.add(temp);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(temp);
      }
 else {
        resultObjectsList.add(odaObject);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(odaObject);
      }
    }
 else {
      logger.info(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec,eventHandler),dataCount,maxRows,this.session);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.info(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec,eventHandler));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.info(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}","/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @param stopSign
 * @throws DataException
 */
private void populateData(IRowResultSet rowResultSet,IResultClass rsMeta,SortSpec sortSpec,long cacheSize) throws DataException {
  long startTime=System.currentTimeMillis();
  SizeOfUtil sizeOfUtil=new SizeOfUtil(rsMeta);
  long memoryCacheSize=cacheSize > 0 ? cacheSize : CacheUtil.computeMemoryBufferSize(eventHandler.getAppContext());
  int maxRows=CacheUtil.getMaxRows(eventHandler == null ? null : eventHandler.getAppContext());
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  long usedMemorySize=0;
  while (!session.getStopSign().isStopped() && (odaObject=rowResultSet.next()) != null) {
    if (memoryCacheSize == 0 || usedMemorySize < memoryCacheSize) {
      dataCount++;
      if (maxRows > 0 && dataCount > maxRows) {
        throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
      }
      int odaObjectFieldCount=odaObject.getResultClass().getFieldCount();
      int metaFieldCount=rsMeta.getFieldCount();
      if (odaObjectFieldCount < metaFieldCount) {
        Object[] obs=new Object[metaFieldCount];
        for (int i=1; i <= odaObjectFieldCount; i++) {
          obs[i - 1]=odaObject.getFieldValue(i);
        }
        ResultObject temp=new ResultObject(rsMeta,obs);
        resultObjectsList.add(temp);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(temp);
      }
 else {
        resultObjectsList.add(odaObject);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(odaObject);
      }
    }
 else {
      logger.fine(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec,eventHandler),dataCount,maxRows,this.session);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.fine(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec,eventHandler));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.fine(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}",0.9963811821471652
65046,"/** 
 * Returns a handle to the next structure in the list. The handle is of type <code>StructureHandle</code>
 * @return a handle to the next structure in the list
 * @see StructureHandle
 */
public Object next(){
  if (!hasNext())   return null;
  Structure struct=list.get(index);
  return struct.getHandle(valueHandle,index++);
}","/** 
 * Returns a handle to the next structure in the list. The handle is of type <code>StructureHandle</code>
 * @return a handle to the next structure in the list
 * @see StructureHandle
 */
public Object next(){
  if (!hasNext())   return null;
  Structure struct=list.get(++index);
  return struct.getHandle(valueHandle,index);
}",0.993993993993994
65047,"/** 
 * Constructs an structure iterator for the property or member that has the list of structures over which to iterate.
 * @param handle handle to the property or member that has the list of structures over which to iterate
 */
public StructureIterator(SimpleValueHandle handle){
  valueHandle=handle;
  list=valueHandle.getListValue();
  index=0;
}","/** 
 * Constructs an structure iterator for the property or member that has the list of structures over which to iterate.
 * @param handle handle to the property or member that has the list of structures over which to iterate
 */
public StructureIterator(SimpleValueHandle handle){
  valueHandle=handle;
  list=valueHandle.getListValue();
  index=-1;
}",0.9957446808510638
65048,"public boolean hasNext(){
  return list != null && index < list.size();
}","public boolean hasNext(){
  return list != null && index + 1 < list.size();
}",0.9733333333333334
65049,"/** 
 * Removes the structure at the current position.
 */
public void remove(){
  if (!hasNext())   return;
  try {
    valueHandle.removeItem(index);
  }
 catch (  PropertyValueException e) {
  }
}","/** 
 * Removes the structure at the current position.
 */
public void remove(){
  if (index < 0 || index >= list.size())   return;
  try {
    valueHandle.removeItem(index);
    list.remove(index--);
  }
 catch (  PropertyValueException e) {
  }
}",0.854586129753915
65050,"/** 
 * Gets the children element of the given model using visitor.
 * @param object the handle
 */
public Object[] getChildren(Object object){
  DataSetHandle handle=(DataSetHandle)object;
  ArrayList params=new ArrayList(10);
  CachedMetaDataHandle cmdh=null;
  try {
    cmdh=DataSetUIUtil.getCachedMetaDataHandle(handle);
  }
 catch (  SemanticException e) {
  }
  ArrayList columns=new ArrayList(10);
  if (cmdh != null) {
    for (Iterator iterator=cmdh.getResultSet().iterator(); iterator.hasNext(); ) {
      ResultSetColumnHandle element=(ResultSetColumnHandle)iterator.next();
      columns.add(element);
    }
  }
  PropertyHandle parameters=handle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  Iterator iter=parameters.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      Object dataSetParameter=iter.next();
      if (((DataSetParameterHandle)dataSetParameter).isOutput() == true) {
        params.add(dataSetParameter);
      }
    }
  }
  Object[] parametersArray=params.toArray();
  Object[] both=new Object[columns.toArray().length + parametersArray.length];
  System.arraycopy(columns.toArray(),0,both,0,columns.toArray().length);
  System.arraycopy(parametersArray,0,both,columns.toArray().length,parametersArray.length);
  return both;
}","/** 
 * Gets the children element of the given model using visitor.
 * @param object the handle
 */
public Object[] getChildren(Object object){
  DataSetHandle handle=(DataSetHandle)object;
  ArrayList params=new ArrayList(10);
  CachedMetaDataHandle cmdh=null;
  try {
    cmdh=DataSetUIUtil.getCachedMetaDataHandle(handle);
  }
 catch (  SemanticException e) {
  }
  ArrayList columns=new ArrayList(10);
  if (cmdh != null) {
    for (Iterator iterator=cmdh.getResultSet().iterator(); iterator.hasNext(); ) {
      ResultSetColumnHandle element=(ResultSetColumnHandle)iterator.next();
      columns.add(element);
    }
  }
  Collections.sort(columns,comp);
  PropertyHandle parameters=handle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  Iterator iter=parameters.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      Object dataSetParameter=iter.next();
      if (((DataSetParameterHandle)dataSetParameter).isOutput() == true) {
        params.add(dataSetParameter);
      }
    }
  }
  Object[] parametersArray=params.toArray();
  Object[] both=new Object[columns.toArray().length + parametersArray.length];
  System.arraycopy(columns.toArray(),0,both,0,columns.toArray().length);
  System.arraycopy(parametersArray,0,both,columns.toArray().length,parametersArray.length);
  return both;
}",0.9868827160493828
65051,"public PPTXCanvas(PPTXCanvas canvas,OOXmlWriter writer){
  this.presentation=canvas.presentation;
  this.part=canvas.part;
  this.imageManager=canvas.imageManager;
  this.writer=writer;
}","public PPTXCanvas(PPTXCanvas canvas,OOXmlWriter writer){
  this.presentation=canvas.presentation;
  this.part=canvas.part;
  this.imageManager=canvas.imageManager;
  this.writer=writer;
  this.clipStack=canvas.clipStack;
}",0.9144254278728606
65052,"/** 
 * precond: TableGroupArea do not have outside merging in
 * @param table
 */
private void parseTableExtraSpanRows(ContainerArea table){
  int additionalrowheight=0;
  int additionalrowspan=0;
  for (int rowidx=table.getChildrenCount() - 1; rowidx >= 0; rowidx--) {
    ContainerArea child=(ContainerArea)table.getChild(rowidx);
    if (child instanceof TableGroupArea) {
      parseTableExtraSpanRows(child);
    }
 else {
      RowArea row=(RowArea)child;
      if (row.getChildrenCount() == 0) {
        additionalrowheight+=row.getHeight();
        additionalrowspan++;
      }
 else       if (additionalrowspan > 0) {
        row.setHeight(additionalrowheight + row.getHeight());
        Iterator<IArea> iter=row.getChildren();
        while (iter.hasNext()) {
          CellArea cell=(CellArea)iter.next();
          cell.setRowSpan(cell.getRowSpan() - additionalrowspan);
        }
        additionalrowheight=0;
        additionalrowspan=0;
      }
    }
  }
}","/** 
 * precond: TableGroupArea do not have outside merging in
 * @param table
 */
private void parseTableExtraSpanRows(ContainerArea table){
  int additionalrowheight=0;
  int additionalrowspan=0;
  boolean fistrowrun=true;
  for (int rowidx=table.getChildrenCount() - 1; rowidx >= 0; rowidx--) {
    ContainerArea child=(ContainerArea)table.getChild(rowidx);
    if (child instanceof TableGroupArea) {
      parseTableExtraSpanRows(child);
    }
 else {
      RowArea row=(RowArea)child;
      int numOfCells=row.getChildrenCount();
      if (numOfCells == 0) {
        additionalrowheight+=row.getHeight();
        additionalrowspan++;
      }
 else       if (!zeroColumnList.isEmpty()) {
        if (numOfColumns != numOfCells) {
          Iterator<Integer> iterzero=zeroColumnList.iterator();
          Iterator<IArea> itercell=row.getChildren();
          int zerocolumn=iterzero.next();
          while (itercell.hasNext()) {
            CellArea cell=(CellArea)itercell.next();
            int thiscolspan=cell.getColSpan();
            if (thiscolspan > 1) {
              int thiscolumn=cell.getColumnID();
              while (iterzero.hasNext() && zerocolumn < thiscolumn) {
                zerocolumn=iterzero.next();
              }
              while (zerocolumn <= (thiscolumn + thiscolspan - 1)) {
                cell.setColSpan(--thiscolspan);
                if (fistrowrun) {
                  int numOfigncol=0;
                  Integer numofIng=mapignorecolumns.get(thiscolumn);
                  if (numofIng == null) {
                    numOfigncol=1;
                  }
 else {
                    numOfigncol=numofIng + 1;
                  }
                  mapignorecolumns.put(thiscolumn,numOfigncol);
                }
                if (iterzero.hasNext()) {
                  zerocolumn=iterzero.next();
                }
 else {
                  break;
                }
              }
              if (zerocolumn < (thiscolumn + thiscolspan)) {
                break;
              }
            }
          }
        }
      }
 else       if (additionalrowspan > 0) {
        row.setHeight(additionalrowheight + row.getHeight());
        Iterator<IArea> iter=row.getChildren();
        while (iter.hasNext()) {
          CellArea cell=(CellArea)iter.next();
          cell.setRowSpan(cell.getRowSpan() - additionalrowspan);
        }
        additionalrowheight=0;
        additionalrowspan=0;
      }
    }
  }
}",0.4981066122924555
65053,"public TableWriter(PPTXRender render){
  this.render=render;
  this.graphics=render.getGraphic();
  this.canvas=render.getCanvas();
  this.writer=canvas.getWriter();
  currentX=render.getCurrentX();
  currentY=render.getCurrentY();
}","public TableWriter(PPTXRender render){
  this.render=render;
  this.canvas=render.getCanvas();
  this.writer=canvas.getWriter();
  currentX=render.getCurrentX();
  currentY=render.getCurrentY();
}",0.9137529137529138
65054,"private void writeColumnsWidth(TableArea tablearea){
  numOfColumns=tablearea.getColumnCount();
  int columnWidth=0;
  int cellwidth=0;
  writer.openTag(""String_Node_Str"");
  for (int i=0; i < numOfColumns; i++) {
    cellwidth=tablearea.getCellWidth(i,i + 1);
    if (cellwidth > 0) {
      if (cellwidth < MINIMUM_COLUMN_WIDTH) {
        cellwidth=MINIMUM_COLUMN_WIDTH;
      }
      columnWidth=canvas.getScaledValue(PPTXUtil.convertToEnums(cellwidth));
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",columnWidth);
      writer.closeTag(""String_Node_Str"");
    }
  }
  writer.closeTag(""String_Node_Str"");
}","private void writeColumnsWidth(TableArea tablearea){
  numOfColumns=tablearea.getColumnCount();
  int columnWidth=0;
  int cellwidth=0;
  writer.openTag(""String_Node_Str"");
  for (int i=0; i < numOfColumns; i++) {
    cellwidth=tablearea.getCellWidth(i,i + 1);
    if (cellwidth > 0) {
      if (cellwidth < MINIMUM_COLUMN_WIDTH) {
        cellwidth=MINIMUM_COLUMN_WIDTH;
      }
      columnWidth=canvas.getScaledValue(PPTXUtil.convertToEnums(cellwidth));
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",columnWidth);
      writer.closeTag(""String_Node_Str"");
    }
 else {
      zeroColumnList.add(i);
    }
  }
  writer.closeTag(""String_Node_Str"");
}",0.9135987978963186
65055,"protected void drawCell(CellArea cell){
  if (cell.getWidth() == 0) {
    currentCol++;
    return;
  }
  currentX+=getX(cell);
  currentY+=getY(cell);
  updateRenderXY();
  startCell(cell);
  visitChildren(cell);
  endCell(cell);
  currentX-=getX(cell);
  currentY-=getY(cell);
  updateRenderXY();
}","protected void drawCell(CellArea cell){
  if (cell.getWidth() == 0) {
    currentCol++;
    return;
  }
  if (cell.needClip()) {
    render.startClip(cell);
  }
  currentX+=getX(cell);
  currentY+=getY(cell);
  updateRenderXY();
  startCell(cell);
  visitChildren(cell);
  endCell(cell);
  currentX-=getX(cell);
  currentY-=getY(cell);
  updateRenderXY();
  if (cell.needClip()) {
    render.endclip();
  }
}",0.847457627118644
65056,"protected void drawTable(TableArea table){
  if (table.needClip()) {
    render.startClip(table);
  }
  currentX+=getX(table);
  currentY+=getY(table);
  updateRenderXY();
  parseTableExtraSpanRows(table);
  startTable(table);
  iterateOnRows(table);
  if (table.needClip()) {
    graphics.endClip();
  }
  currentX-=getX(table);
  currentY-=getY(table);
  updateRenderXY();
  endTable();
}","protected void drawTable(TableArea table){
  if (table.needClip()) {
    render.startClip(table);
  }
  currentX+=getX(table);
  currentY+=getY(table);
  updateRenderXY();
  startTable(table);
  parseTableExtraSpanRows(table);
  iterateOnRows(table);
  if (table.needClip()) {
    render.endclip();
  }
  currentX-=getX(table);
  currentY-=getY(table);
  updateRenderXY();
  endTable();
}",0.9254498714652956
65057,"protected void drawRow(RowArea row){
  row.setRowID(currentRow);
  if (row.getChildrenCount() == 0) {
    return;
  }
  currentX+=getX(row);
  currentY+=getY(row);
  updateRenderXY();
  BoxStyle style=row.getBoxStyle();
  if (style.getBackgroundColor() == null && style.getBackgroundImage() == null) {
    style=row.getParent().getBoxStyle();
  }
  rowStyleStack.push(style);
  startRow(row);
  Iterator<IArea> iter=row.getChildren();
  currentCol=0;
  fillEmptyMergeCells(0,0,0);
  while (iter.hasNext()) {
    IArea child=iter.next();
    drawCell((CellArea)child);
  }
  endRow();
  rowStyleStack.pop();
  currentX-=getX(row);
  currentY-=getY(row);
  updateRenderXY();
}","protected void drawRow(RowArea row){
  row.setRowID(currentRow);
  if (row.getChildrenCount() == 0) {
    return;
  }
  if (row.needClip()) {
    render.startClip(row);
  }
  currentX+=getX(row);
  currentY+=getY(row);
  updateRenderXY();
  BoxStyle style=row.getBoxStyle();
  if (style.getBackgroundColor() == null && style.getBackgroundImage() == null) {
    style=row.getParent().getBoxStyle();
  }
  rowStyleStack.push(style);
  startRow(row);
  Iterator<IArea> iter=row.getChildren();
  currentCol=0;
  fillEmptyMergeCells(0,0,0);
  while (iter.hasNext()) {
    IArea child=iter.next();
    drawCell((CellArea)child);
  }
  endRow();
  rowStyleStack.pop();
  currentX-=getX(row);
  currentY-=getY(row);
  updateRenderXY();
  if (row.needClip()) {
    render.endclip();
  }
}",0.9277357192016518
65058,"/** 
 * assume leftborder is always draw
 * @param container
 */
protected void drawBorders(CellArea container){
  BoxStyle style=container.getBoxStyle();
  if (style == null)   return;
  BorderInfo currentborderinfo=style.getLeftBorder();
  writeSingleBorder(LEFTBORDERLINE,currentborderinfo);
  currentborderinfo=style.getRightBorder();
  if (currentborderinfo != null) {
    writeSingleBorder(RIGHTBORDERLINE,currentborderinfo);
  }
 else {
    CellArea nextcell=((RowArea)container.getParent()).getCell(currentCol + colspan);
    if (nextcell != null) {
      writeSingleBorder(RIGHTBORDERLINE,nextcell.getBoxStyle().getLeftBorder());
    }
  }
  writeSingleBorder(TOPBORDERLINE,style.getTopBorder());
  currentborderinfo=null;
  RowArea currentRowArea=(RowArea)container.getParent();
  ContainerArea grandparent=currentRowArea.getParent();
  IArea nextcontainer=grandparent.getChild(currentRowArea.getRowID() + 1);
  while (nextcontainer == null && grandparent instanceof TableGroupArea) {
    IArea currentTableGroup=grandparent;
    grandparent=grandparent.getParent();
    Iterator<IArea> rowiter=grandparent.getChildren();
    while (rowiter.hasNext() && !(rowiter.next().equals(currentTableGroup)))     ;
    if (rowiter.hasNext()) {
      nextcontainer=rowiter.next();
    }
  }
  RowArea ra=null;
  while (nextcontainer instanceof TableGroupArea) {
    nextcontainer=((TableGroupArea)nextcontainer).getFirstChild();
  }
  ra=(RowArea)nextcontainer;
  CellArea belowCell=null;
  if (ra != null) {
    belowCell=ra.getCell(currentCol);
    if (belowCell != null) {
      currentborderinfo=belowCell.getBoxStyle().getTopBorder();
      writeSingleBorder(BOTTOMBORDERLINE,currentborderinfo);
    }
  }
  if (currentborderinfo == null) {
    writeSingleBorder(BOTTOMBORDERLINE,style.getBottomBorder());
  }
}","/** 
 * assume leftborder is always draw
 * @param container
 */
protected void drawBorders(CellArea container){
  BoxStyle style=container.getBoxStyle();
  if (style == null)   return;
  writeSingleBorder(LEFTBORDERLINE,style.getLeftBorder());
  BorderInfo currentborderinfo=null;
  int additionalcol=0;
  int drawcurrentcolid=container.getColumnID();
  Integer additionalColSpan=mapignorecolumns.get(drawcurrentcolid);
  if (additionalColSpan != null) {
    additionalcol=additionalColSpan;
  }
  CellArea nextcell=((RowArea)container.getParent()).getCell(drawcurrentcolid + colspan + additionalcol);
  if (nextcell != null) {
    currentborderinfo=nextcell.getBoxStyle().getLeftBorder();
    writeSingleBorder(RIGHTBORDERLINE,currentborderinfo);
  }
  if (currentborderinfo == null) {
    writeSingleBorder(RIGHTBORDERLINE,style.getRightBorder());
  }
  writeSingleBorder(TOPBORDERLINE,style.getTopBorder());
  currentborderinfo=null;
  RowArea currentRowArea=(RowArea)container.getParent();
  ContainerArea grandparent=currentRowArea.getParent();
  IArea nextcontainer=grandparent.getChild(currentRowArea.getRowID() + 1);
  while (nextcontainer == null && grandparent instanceof TableGroupArea) {
    IArea currentTableGroup=grandparent;
    grandparent=grandparent.getParent();
    Iterator<IArea> rowiter=grandparent.getChildren();
    while (rowiter.hasNext() && !(rowiter.next().equals(currentTableGroup)))     ;
    if (rowiter.hasNext()) {
      nextcontainer=rowiter.next();
    }
  }
  RowArea ra=null;
  while (nextcontainer instanceof TableGroupArea) {
    nextcontainer=((TableGroupArea)nextcontainer).getFirstChild();
  }
  ra=(RowArea)nextcontainer;
  CellArea belowCell=null;
  if (ra != null) {
    belowCell=ra.getCell(currentCol);
    if (belowCell != null) {
      currentborderinfo=belowCell.getBoxStyle().getTopBorder();
      writeSingleBorder(BOTTOMBORDERLINE,currentborderinfo);
    }
  }
  if (currentborderinfo == null) {
    writeSingleBorder(BOTTOMBORDERLINE,style.getBottomBorder());
  }
}",0.2262773722627737
65059,"protected void visitChildren(CellArea container){
  Iterator<IArea> iter=container.getChildren();
  int childrencount=container.getChildrenCount();
  if (childrencount > 1 || !(container.getFirstChild() instanceof BlockTextArea)) {
    drawEmptyTextBox();
  }
  while (iter.hasNext()) {
    IArea child=iter.next();
    if (child instanceof BlockTextArea && childrencount > 1) {
      render.visitTextBuffer((BlockTextArea)child);
    }
 else {
      child.accept(render);
    }
  }
}","protected void visitChildren(CellArea container){
  Iterator<IArea> iter=container.getChildren();
  int childrencount=container.getChildrenCount();
  if (childrencount > 1 || childrencount == 0 || !(container.getFirstChild() instanceof BlockTextArea)) {
    drawEmptyTextBox();
  }
  while (iter.hasNext()) {
    IArea child=iter.next();
    if (child instanceof BlockTextArea && childrencount > 1) {
      render.visitTextBuffer((BlockTextArea)child);
    }
 else     if (needStyleORClip(child)) {
      drawEmptyTextBox();
      render.visitTextBuffer((BlockTextArea)child);
    }
 else {
      child.accept(render);
    }
  }
}",0.8384201077199281
65060,"protected void drawCell(CellArea cell){
  currentX+=getX(cell);
  currentY+=getY(cell);
  updateRenderXY();
  startCell(cell);
  if (cell.getChildrenCount() == 0) {
    drawEmptyTextBox();
  }
 else {
    visitChildren(cell);
  }
  endCell(cell);
  currentX-=getX(cell);
  currentY-=getY(cell);
  updateRenderXY();
}","protected void drawCell(CellArea cell){
  currentX+=getX(cell);
  currentY+=getY(cell);
  updateRenderXY();
  startCell(cell);
  visitChildren(cell);
  endCell(cell);
  currentX-=getX(cell);
  currentY-=getY(cell);
  updateRenderXY();
}",0.5072463768115942
65061,"public void writeTextBlock(int startX,int startY,int width,int height,ContainerArea container){
  parseBlockTextArea(container);
  startX=PPTXUtil.convertToEnums(startX);
  startY=PPTXUtil.convertToEnums(startY);
  width=PPTXUtil.convertToEnums(width);
  height=PPTXUtil.convertToEnums(height);
  if (needGroup) {
    startGroup(startX,startY,width,height);
    startX=0;
    startY=0;
  }
  drawLineBorder(container);
  startBlockText(startX,startY,width,height,container);
  drawBlockTextChildren(container);
  endBlockText(container);
  if (needGroup)   endGroup();
}","public void writeTextBlock(int startX,int startY,int width,int height,ContainerArea container){
  parseBlockTextArea(container);
  needClip=container.needClip();
  startX=PPTXUtil.convertToEnums(startX);
  startY=PPTXUtil.convertToEnums(startY);
  width=PPTXUtil.convertToEnums(width);
  height=PPTXUtil.convertToEnums(height);
  if (needGroup) {
    startGroup(startX,startY,width,height);
    startX=0;
    startY=0;
  }
  drawLineBorder(container);
  startBlockText(startX,startY,width,height,container);
  drawBlockTextChildren(container);
  endBlockText(container);
  if (needGroup)   endGroup();
}",0.9718670076726342
65062,"private void startBlockText(int startX,int startY,int width,int height,ContainerArea container){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().getNextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width + 1,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    BoxStyle style=container.getBoxStyle();
    Color color=style.getBackgroundColor();
    BackgroundImageInfo image=style.getBackgroundImage();
    if (color != null) {
      canvas.setBackgroundColor(color);
    }
    if (image != null) {
      canvas.setBackgroundImg(canvas.getImageRelationship(image),0,0);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  int leftPadding=0;
  int rightPadding=0;
  int topPadding=0;
  int bottomPadding=0;
  if (container instanceof BlockTextArea) {
    IArea firstChild=container.getFirstChild();
    if (firstChild != null) {
      leftPadding=PPTXUtil.convertToEnums(firstChild.getX());
      rightPadding=width - leftPadding - PPTXUtil.convertToEnums(firstChild.getWidth());
      if (rightPadding < 0) {
        rightPadding=0;
      }
      topPadding=PPTXUtil.convertToEnums(firstChild.getY());
    }
    IArea lastChild=container.getChild(container.getChildrenCount() - 1);
    if (lastChild != null) {
      bottomPadding=height - PPTXUtil.convertToEnums(lastChild.getY()) - PPTXUtil.convertToEnums(lastChild.getHeight());
      if (bottomPadding < 0) {
        bottomPadding=0;
      }
    }
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",leftPadding);
  writer.attribute(""String_Node_Str"",topPadding);
  writer.attribute(""String_Node_Str"",rightPadding);
  writer.attribute(""String_Node_Str"",bottomPadding);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  IContent content=container.getContent();
  String vAlign=null;
  if (content != null) {
    vAlign=content.getComputedStyle().getVerticalAlign();
    if (vAlign != null) {
      if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else       if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    hAlign=content.getComputedStyle().getTextAlign();
    if (hAlign != null) {
      if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       hAlign=""String_Node_Str"";
    }
  }
  writer.closeTag(""String_Node_Str"");
}","private void startBlockText(int startX,int startY,int width,int height,ContainerArea container){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().getNextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width + 1,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    BoxStyle style=container.getBoxStyle();
    Color color=style.getBackgroundColor();
    BackgroundImageInfo image=style.getBackgroundImage();
    if (color != null) {
      canvas.setBackgroundColor(color);
    }
    if (image != null) {
      canvas.setBackgroundImg(canvas.getImageRelationship(image),0,0);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  int leftPadding=0;
  int rightPadding=0;
  int topPadding=0;
  int bottomPadding=0;
  if (container instanceof BlockTextArea) {
    IArea firstChild=container.getFirstChild();
    if (firstChild != null) {
      leftPadding=PPTXUtil.convertToEnums(firstChild.getX());
      rightPadding=width - leftPadding - PPTXUtil.convertToEnums(firstChild.getWidth());
      if (rightPadding < 0) {
        rightPadding=0;
      }
      topPadding=PPTXUtil.convertToEnums(firstChild.getY());
    }
    IArea lastChild=container.getChild(container.getChildrenCount() - 1);
    if (lastChild != null) {
      bottomPadding=height - PPTXUtil.convertToEnums(lastChild.getY()) - PPTXUtil.convertToEnums(lastChild.getHeight());
      if (bottomPadding < 0) {
        bottomPadding=0;
      }
    }
  }
  writer.openTag(""String_Node_Str"");
  if (needClip) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.attribute(""String_Node_Str"",leftPadding);
  writer.attribute(""String_Node_Str"",topPadding);
  writer.attribute(""String_Node_Str"",rightPadding);
  writer.attribute(""String_Node_Str"",bottomPadding);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  IContent content=container.getContent();
  String vAlign=null;
  if (content != null) {
    vAlign=content.getComputedStyle().getVerticalAlign();
    if (vAlign != null) {
      if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else       if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    hAlign=content.getComputedStyle().getTextAlign();
    if (hAlign != null) {
      if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       hAlign=""String_Node_Str"";
    }
  }
  writer.closeTag(""String_Node_Str"");
}",0.9839349050698936
65063,"@Override protected void newPage(IContainerArea area){
  assert(area instanceof PageArea);
  PageArea pageArea=(PageArea)area;
  scale=pageArea.getScale();
  int pageHeight=getHeight(pageArea);
  int pageWidth=getWidth(pageArea);
  try {
    int width=PPTXUtil.convertToPointer(pageWidth);
    int height=PPTXUtil.convertToPointer(pageHeight);
    Presentation presentation=((PPTXPageDevice)pageDevice).getPresentation();
    String masterPageName=getMasterPageName(pageArea);
    SlideMaster master=presentation.getSlideMaster(masterPageName);
    if (master == null) {
      master=presentation.createSlideMaster(masterPageName,pageArea);
      new SlideWriter(this).writeSlideMaster(master,pageArea);
    }
    this.pageGraphic=new PPTXPage(presentation.createSlide(master,width,height,pageArea));
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}","@Override protected void newPage(IContainerArea area){
  assert(area instanceof PageArea);
  PageArea pageArea=(PageArea)area;
  scale=pageArea.getScale();
  int pageHeight=getHeight(pageArea);
  int pageWidth=getWidth(pageArea);
  try {
    int width=PPTXUtil.convertToPointer(pageWidth);
    int height=PPTXUtil.convertToPointer(pageHeight);
    Presentation presentation=((PPTXPageDevice)pageDevice).getPresentation();
    String masterPageName=getMasterPageName(pageArea);
    SlideMaster master=presentation.getSlideMaster(masterPageName);
    if (master == null) {
      master=presentation.createSlideMaster(masterPageName,pageArea);
      new SlideWriter(this).writeSlideMaster(master,pageArea);
    }
    this.pageGraphic=new PPTXPage(presentation.createSlide(master,width,height,pageArea));
    ((PPTXPage)pageGraphic).getCanvas().setScale(scale);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}",0.9690721649484536
65064,"public PPTXRender(PPTXRender render,PPTXCanvas canvas){
  initialize(render.services);
  this.out=render.out;
  this.tempFileDir=render.tempFileDir;
  this.currentX=render.currentX;
  this.currentY=render.currentY;
  this.scale=render.scale;
  this.pageDevice=render.pageDevice;
  this.pageGraphic=new PPTXPage(canvas);
}","public PPTXRender(PPTXRender render,PPTXCanvas canvas){
  initialize(render.services);
  this.out=render.out;
  this.tempFileDir=render.tempFileDir;
  this.scale=render.scale;
  canvas.setScale(scale);
  this.currentX=render.currentX;
  this.currentY=render.currentY;
  this.pageDevice=render.pageDevice;
  this.pageGraphic=new PPTXPage(canvas);
}",0.8802395209580839
65065,"/** 
 * draw the cells properties: only one fill is allow, background image goes over background color
 * @param cell
 */
protected void drawCellBox(CellArea cell){
  drawBorders(cell);
  drawCellDiagonal(cell);
  BoxStyle style=cell.getBoxStyle();
  Color backgroundcolor=style.getBackgroundColor();
  BackgroundImageInfo bgimginfo=style.getBackgroundImage();
  if (!rowStyleStack.isEmpty() && (backgroundcolor == null || bgimginfo == null)) {
    BoxStyle rowStyle=rowStyleStack.peek();
    if (rowStyle != null) {
      if (backgroundcolor == null) {
        backgroundcolor=rowStyle.getBackgroundColor();
      }
      if (bgimginfo == null) {
        bgimginfo=rowStyle.getBackgroundImage();
      }
    }
  }
  if (bgimginfo != null) {
    float offsetY=0;
    float offsetX=0;
    int repeatmode=bgimginfo.getRepeatedMode();
    if (repeatmode == BackgroundImageInfo.NO_REPEAT) {
      int imgheight=PPTXUtil.pixelToEmu((int)bgimginfo.getImageInstance().getHeight(),bgimginfo.getImageInstance().getDpiY());
      int imgwidth=PPTXUtil.pixelToEmu((int)bgimginfo.getImageInstance().getWidth(),bgimginfo.getImageInstance().getDpiX());
      int cellheight=PPTXUtil.convertToEnums(getScaledValue(cell.getHeight()));
      int cellwidth=PPTXUtil.convertToEnums(getScaledValue(cell.getWidth()));
      offsetY=PPTXUtil.parsePercentageOffset(cellheight,imgheight);
      offsetX=PPTXUtil.parsePercentageOffset(cellwidth,imgwidth);
    }
    canvas.setBackgroundImg(canvas.getImageRelationship(bgimginfo),(int)offsetX,(int)offsetY,repeatmode);
  }
 else   if (backgroundcolor != null) {
    canvas.setBackgroundColor(backgroundcolor);
  }
}","/** 
 * draw the cells properties: only one fill is allow, background image goes over background color
 * @param cell
 */
protected void drawCellBox(CellArea cell){
  drawBorders(cell);
  drawCellDiagonal(cell);
  BoxStyle style=cell.getBoxStyle();
  Color backgroundcolor=style.getBackgroundColor();
  BackgroundImageInfo bgimginfo=style.getBackgroundImage();
  if (!rowStyleStack.isEmpty() && (backgroundcolor == null || bgimginfo == null)) {
    BoxStyle rowStyle=rowStyleStack.peek();
    if (rowStyle != null) {
      if (backgroundcolor == null) {
        backgroundcolor=rowStyle.getBackgroundColor();
      }
      if (bgimginfo == null) {
        bgimginfo=rowStyle.getBackgroundImage();
      }
    }
  }
  if (bgimginfo != null) {
    float offsetY=0;
    float offsetX=0;
    int repeatmode=bgimginfo.getRepeatedMode();
    if (repeatmode == BackgroundImageInfo.NO_REPEAT) {
      int imgheight=PPTXUtil.pixelToEmu((int)bgimginfo.getImageInstance().getHeight(),bgimginfo.getImageInstance().getDpiY());
      int imgwidth=PPTXUtil.pixelToEmu((int)bgimginfo.getImageInstance().getWidth(),bgimginfo.getImageInstance().getDpiX());
      int cellheight=PPTXUtil.convertToEnums(canvas.getScaledValue(cell.getHeight()));
      int cellwidth=PPTXUtil.convertToEnums(canvas.getScaledValue(cell.getWidth()));
      offsetY=PPTXUtil.parsePercentageOffset(cellheight,imgheight);
      offsetX=PPTXUtil.parsePercentageOffset(cellwidth,imgwidth);
    }
    canvas.setBackgroundImg(canvas.getImageRelationship(bgimginfo),(int)offsetX,(int)offsetY,repeatmode);
  }
 else   if (backgroundcolor != null) {
    canvas.setBackgroundColor(backgroundcolor);
  }
}",0.9957472660996356
65066,"protected void visitChildren(IContainerArea container){
  Iterator<IArea> iter=container.getChildren();
  while (iter.hasNext()) {
    IArea child=iter.next();
    if (child instanceof BlockTextArea) {
      if (container.getChildrenCount() > 1) {
        render.visitTextBuffer((BlockTextArea)child);
      }
 else {
        child.accept(render);
      }
    }
 else {
      if (child instanceof TableArea) {
        drawEmptyTextBox();
      }
      child.accept(render);
    }
  }
}","protected void visitChildren(CellArea container){
  Iterator<IArea> iter=container.getChildren();
  int childrencount=container.getChildrenCount();
  if (childrencount > 1 || !(container.getFirstChild() instanceof BlockTextArea)) {
    drawEmptyTextBox();
  }
  while (iter.hasNext()) {
    IArea child=iter.next();
    if (child instanceof BlockTextArea) {
      if (childrencount > 1) {
        render.visitTextBuffer((BlockTextArea)child);
      }
 else {
        child.accept(render);
      }
    }
 else {
      if (child instanceof TableArea) {
        drawEmptyTextBox();
      }
      child.accept(render);
    }
  }
}",0.3276327632763276
65067,"private void writeColumnsWidth(TableArea tablearea){
  numOfColumns=tablearea.getColumnCount();
  int columnWidth=0;
  int cellwidth=0;
  writer.openTag(""String_Node_Str"");
  int defaultwidth=tablearea.getWidth() / numOfColumns;
  for (int i=0; i < numOfColumns; i++) {
    cellwidth=tablearea.getCellWidth(i,i + 1);
    if (cellwidth <= 0) {
      cellwidth=defaultwidth;
    }
    columnWidth=PPTXUtil.convertToEnums(getScaledValue(cellwidth));
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",columnWidth);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}","private void writeColumnsWidth(TableArea tablearea){
  numOfColumns=tablearea.getColumnCount();
  int columnWidth=0;
  int cellwidth=0;
  writer.openTag(""String_Node_Str"");
  int defaultwidth=tablearea.getWidth() / numOfColumns;
  for (int i=0; i < numOfColumns; i++) {
    cellwidth=tablearea.getCellWidth(i,i + 1);
    if (cellwidth <= 0) {
      cellwidth=defaultwidth;
    }
    columnWidth=PPTXUtil.convertToEnums(canvas.getScaledValue(cellwidth));
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",columnWidth);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}",0.9944044764188648
65068,"private void startRow(RowArea row){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",PPTXUtil.convertToEnums(row.getHeight()));
}","private void startRow(RowArea row){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",PPTXUtil.convertToEnums(canvas.getScaledValue(row.getHeight())));
}",0.9305135951661632
65069,"private int getX(IContainerArea area){
  return getScaledValue(area.getX());
}","private int getX(IContainerArea area){
  return canvas.getScaledValue(area.getX());
}",0.9570552147239264
65070,"private int getY(IContainerArea area){
  return getScaledValue(area.getY());
}","private int getY(IContainerArea area){
  return canvas.getScaledValue(area.getY());
}",0.9570552147239264
65071,"private void setTextProperty(String tag,TextStyle style){
  FontInfo info=style.getFontInfo();
  writer.openTag(tag);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  if (style.isLinethrough()) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (style.isUnderline()) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.attribute(""String_Node_Str"",(int)(info.getFontSize() * 100));
  boolean isItalic=(info.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=(info.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (isBold) {
    writer.attribute(""String_Node_Str"",1);
  }
  canvas.setBackgroundColor(style.getColor());
  setTextFont(info.getFontName());
  canvas.setHyperlink(link);
  writer.closeTag(tag);
}","private void setTextProperty(String tag,TextStyle style){
  FontInfo info=style.getFontInfo();
  writer.openTag(tag);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  if (style.isLinethrough()) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (style.isUnderline()) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.attribute(""String_Node_Str"",canvas.getScaledValue(info.getFontSize() * 100));
  boolean isItalic=(info.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=(info.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (isBold) {
    writer.attribute(""String_Node_Str"",1);
  }
  canvas.setBackgroundColor(style.getColor());
  setTextFont(info.getFontName());
  canvas.setHyperlink(link);
  writer.closeTag(tag);
}",0.9869083585095668
65072,"private void startBlockText(int startX,int startY,int width,int height,ContainerArea container){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().getNextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    BoxStyle style=container.getBoxStyle();
    Color color=style.getBackgroundColor();
    BackgroundImageInfo image=style.getBackgroundImage();
    if (color != null) {
      canvas.setBackgroundColor(color);
    }
    if (image != null) {
      canvas.setBackgroundImg(canvas.getImageRelationship(image),0,0);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  int leftPadding=0;
  int rightPadding=0;
  int topPadding=0;
  int bottomPadding=0;
  if (container instanceof BlockTextArea) {
    IArea firstChild=container.getChild(0);
    if (firstChild != null) {
      leftPadding=PPTXUtil.convertToEnums(firstChild.getX());
      rightPadding=width - leftPadding - PPTXUtil.convertToEnums(firstChild.getWidth());
      topPadding=PPTXUtil.convertToEnums(firstChild.getY());
    }
    IArea lastChild=container.getChild(container.getChildrenCount() - 1);
    if (lastChild != null) {
      bottomPadding=height - PPTXUtil.convertToEnums(lastChild.getY()) - PPTXUtil.convertToEnums(lastChild.getHeight());
    }
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",leftPadding);
  writer.attribute(""String_Node_Str"",topPadding);
  writer.attribute(""String_Node_Str"",rightPadding);
  writer.attribute(""String_Node_Str"",bottomPadding);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  IContent content=container.getContent();
  String vAlign=null;
  if (content != null) {
    vAlign=content.getComputedStyle().getVerticalAlign();
    if (vAlign != null) {
      if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else       if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    hAlign=content.getComputedStyle().getTextAlign();
    if (hAlign != null) {
      if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       hAlign=""String_Node_Str"";
    }
  }
  writer.closeTag(""String_Node_Str"");
}","private void startBlockText(int startX,int startY,int width,int height,ContainerArea container){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().getNextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width + 1,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    BoxStyle style=container.getBoxStyle();
    Color color=style.getBackgroundColor();
    BackgroundImageInfo image=style.getBackgroundImage();
    if (color != null) {
      canvas.setBackgroundColor(color);
    }
    if (image != null) {
      canvas.setBackgroundImg(canvas.getImageRelationship(image),0,0);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  int leftPadding=0;
  int rightPadding=0;
  int topPadding=0;
  int bottomPadding=0;
  if (container instanceof BlockTextArea) {
    IArea firstChild=container.getChild(0);
    if (firstChild != null) {
      leftPadding=PPTXUtil.convertToEnums(firstChild.getX());
      rightPadding=width - leftPadding - PPTXUtil.convertToEnums(firstChild.getWidth());
      topPadding=PPTXUtil.convertToEnums(firstChild.getY());
    }
    IArea lastChild=container.getChild(container.getChildrenCount() - 1);
    if (lastChild != null) {
      bottomPadding=height - PPTXUtil.convertToEnums(lastChild.getY()) - PPTXUtil.convertToEnums(lastChild.getHeight());
    }
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",leftPadding);
  writer.attribute(""String_Node_Str"",topPadding);
  writer.attribute(""String_Node_Str"",rightPadding);
  writer.attribute(""String_Node_Str"",bottomPadding);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  IContent content=container.getContent();
  String vAlign=null;
  if (content != null) {
    vAlign=content.getComputedStyle().getVerticalAlign();
    if (vAlign != null) {
      if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else       if (vAlign.equals(""String_Node_Str""))       writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    hAlign=content.getComputedStyle().getTextAlign();
    if (hAlign != null) {
      if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       if (hAlign.equals(""String_Node_Str""))       hAlign=""String_Node_Str"";
 else       hAlign=""String_Node_Str"";
    }
  }
  writer.closeTag(""String_Node_Str"");
}",0.99956369982548
65073,"private void drawBlockTextChildren(IArea child){
  if (child instanceof TextArea) {
    writeTextRun((TextArea)child);
  }
 else   if (child instanceof TextLineArea || child instanceof LineArea) {
    Iterator<IArea> iter=((ContainerArea)child).getChildren();
    startTextLineArea();
    hasParagraph=true;
    while (iter.hasNext()) {
      IArea area=iter.next();
      drawBlockTextChildren(area);
    }
    IArea lastchild=child;
    do {
      lastchild=((ContainerArea)lastchild).getLastChild();
    }
 while (lastchild != null && !(lastchild instanceof TextArea));
    if (lastchild != null) {
      endTextLineArea((TextArea)lastchild);
    }
    hasParagraph=false;
  }
 else   if (child instanceof ContainerArea) {
    Iterator<IArea> iter=(((ContainerArea)child).getChildren());
    while (iter.hasNext()) {
      IArea area=iter.next();
      drawBlockTextChildren(area);
    }
  }
}","private void drawBlockTextChildren(IArea child){
  if (child instanceof TextArea) {
    writeTextRun((TextArea)child);
  }
 else   if (child instanceof TextLineArea || child instanceof InlineTextArea) {
    Iterator<IArea> iter=((ContainerArea)child).getChildren();
    startTextLineArea();
    hasParagraph=true;
    while (iter.hasNext()) {
      IArea area=iter.next();
      drawBlockTextChildren(area);
    }
    IArea lastchild=((ContainerArea)child).getLastChild();
    endTextLineArea((TextArea)lastchild);
    hasParagraph=false;
  }
 else   if (child instanceof ContainerArea) {
    Iterator<IArea> iter=(((ContainerArea)child).getChildren());
    while (iter.hasNext()) {
      IArea area=iter.next();
      drawBlockTextChildren(area);
    }
  }
}",0.8858006042296073
65074,"public static boolean isSingleTextControl(IContainerArea container){
  if (container instanceof BlockTextArea) {
    Iterator<IArea> iter=container.getChildren();
    while (iter.hasNext()) {
      IArea area=iter.next();
      if (!(area instanceof TextLineArea)) {
        return false;
      }
    }
    if (hasNonEmptyTextArea(container))     return true;
 else     return false;
  }
 else   if (container instanceof InlineTextArea) {
    Iterator<IArea> iter=container.getChildren();
    while (iter.hasNext()) {
      IArea area=iter.next();
      if (!(area instanceof TextArea)) {
        return false;
      }
    }
    if (hasNonEmptyTextArea(container))     return true;
 else     return false;
  }
 else   if (container instanceof LineArea) {
    Iterator<IArea> iter=container.getChildren();
    while (iter.hasNext()) {
      IArea area=iter.next();
      if (!(area instanceof InlineTextArea)) {
        return false;
      }
    }
    if (hasNonEmptyTextArea(container))     return true;
 else     return false;
  }
  return false;
}","public static boolean isSingleTextControl(IContainerArea container){
  if (container instanceof BlockTextArea) {
    Iterator<IArea> iter=container.getChildren();
    while (iter.hasNext()) {
      IArea area=iter.next();
      if (!(area instanceof TextLineArea)) {
        return false;
      }
    }
    if (hasNonEmptyTextArea(container))     return true;
 else     return false;
  }
 else   if (container instanceof InlineTextArea) {
    Iterator<IArea> iter=container.getChildren();
    while (iter.hasNext()) {
      IArea area=iter.next();
      if (!(area instanceof TextArea)) {
        return false;
      }
    }
    if (hasNonEmptyTextArea(container))     return true;
 else     return false;
  }
  return false;
}",0.8018018018018018
65075,"/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == GroupingUnitType.QUARTERS) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == GroupingUnitType.QUARTERS) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}","/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == QUARTER) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}",0.988909426987061
65076,"/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == GroupingUnitType.QUARTERS) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
  return;
}","/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
  return;
}",0.9754500818330606
65077,"/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == QUARTER) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}","/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == QUARTER) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR || iUnit == WEEK_OF_MONTH) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE || iUnit == DAY_OF_MONTH || iUnit == DAY_OF_WEEK || iUnit == DAY_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}",0.970081595648232
65078,"/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
  return;
}","/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE || iUnit == DAY_OF_MONTH || iUnit == DAY_OF_WEEK || iUnit == DAY_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR || iUnit == WEEK_OF_MONTH) {
    set(Calendar.YEAR,2000);
  }
  return;
}",0.9240214888718342
65079,"/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    DesignElementHandle containerHandle=null;
    int slotID=-1, pos=-1;
    String contentString=null;
    if (container instanceof ListBandProxy) {
      containerHandle=((ListBandProxy)container).getSlotHandle().getElementHandle();
      ElementDetailHandle slot=((ListBandProxy)container).getSlotHandle();
      if (slot instanceof SlotHandle) {
        slotID=((SlotHandle)slot).getSlotID();
      }
 else {
        slotID=-1;
      }
      pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after,slotID);
      int cur=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)child,slotID);
      if (cur < pos) {
        pos--;
      }
    }
 else     if (container instanceof DesignElementHandle) {
      containerHandle=(DesignElementHandle)container;
      slotID=DEUtil.getSlotID(containerHandle,after);
      if (slotID == -1) {
        contentString=DEUtil.getDefaultContentName(containerHandle);
        pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after,contentString);
      }
 else {
        pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after);
      }
    }
 else     if (container instanceof SlotHandle) {
      containerHandle=((SlotHandle)container).getElementHandle();
      slotID=((SlotHandle)container).getSlotID();
      pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after,slotID);
    }
    DesignElementHandle handle=(DesignElementHandle)child;
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(TRANS_LABEL_MOVE_ELEMENT);
    if (slotID == -1) {
      handle.moveTo(containerHandle,contentString);
      containerHandle.getPropertyHandle(contentString).shift(handle,pos);
    }
 else {
      handle.moveTo(containerHandle,slotID);
      containerHandle.getSlot(slotID).shift(handle,pos);
    }
    stack.commit();
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle) + ""String_Node_Str""+ slotID+ ""String_Node_Str""+ DEUtil.getDisplayLabel(containerHandle)+ ""String_Node_Str""+ pos);
    }
  }
 catch (  ContentException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
catch (  SemanticException ee) {
    logger.log(Level.SEVERE,ee.getMessage(),ee);
  }
}","/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    DesignElementHandle containerHandle=null;
    int slotID=-1, pos=-1;
    String contentString=null;
    if (container instanceof ListBandProxy) {
      containerHandle=((ListBandProxy)container).getSlotHandle().getElementHandle();
      ElementDetailHandle slot=((ListBandProxy)container).getSlotHandle();
      if (slot instanceof SlotHandle) {
        slotID=((SlotHandle)slot).getSlotID();
      }
 else {
        slotID=-1;
      }
      pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after,slotID);
      int cur=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)child,slotID);
      if (cur < pos) {
        pos--;
      }
    }
 else     if (container instanceof DesignElementHandle) {
      containerHandle=(DesignElementHandle)container;
      slotID=DEUtil.getSlotID(containerHandle,after);
      if (slotID == -1) {
        contentString=DEUtil.getDefaultContentName(containerHandle);
        pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after,contentString);
      }
 else {
        pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after);
      }
    }
 else     if (container instanceof SlotHandle) {
      containerHandle=((SlotHandle)container).getElementHandle();
      slotID=((SlotHandle)container).getSlotID();
      pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)after,slotID);
    }
 else     if (container instanceof IMixedHandle) {
      IMixedHandle mixHandleInstance=(IMixedHandle)container;
      if (child instanceof CubeHandle) {
        containerHandle=mixHandleInstance.getSlotHandle().getElementHandle();
        ElementDetailHandle slot=mixHandleInstance.getSlotHandle();
        if (slot instanceof SlotHandle) {
          slotID=((SlotHandle)slot).getSlotID();
        }
        pos=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)adjustAfterObjectForSlotHandleInIMixedHandle(),slotID);
        int cur=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)child,slotID);
        if (cur < pos) {
          pos--;
        }
      }
 else {
        containerHandle=mixHandleInstance.getPropertyHandle().getElementHandle();
        contentString=DEUtil.getDefaultContentName(containerHandle);
        pos=computePosForPropertyHandleInIMixedHandle(containerHandle,contentString);
        int cur=DEUtil.findInsertPosition(containerHandle,(DesignElementHandle)child,contentString);
        if (cur < pos) {
          pos--;
        }
      }
    }
    DesignElementHandle handle=(DesignElementHandle)child;
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(TRANS_LABEL_MOVE_ELEMENT);
    if (slotID == -1) {
      handle.moveTo(containerHandle,contentString);
      containerHandle.getPropertyHandle(contentString).shift(handle,pos);
    }
 else {
      handle.moveTo(containerHandle,slotID);
      containerHandle.getSlot(slotID).shift(handle,pos);
    }
    stack.commit();
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle) + ""String_Node_Str""+ slotID+ ""String_Node_Str""+ DEUtil.getDisplayLabel(containerHandle)+ ""String_Node_Str""+ pos);
    }
  }
 catch (  ContentException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
catch (  SemanticException ee) {
    logger.log(Level.SEVERE,ee.getMessage(),ee);
  }
}",0.8264306038570977
65080,"public IDataSetResultSet loadDataSetData(IResultClass targetResultClass,IOrderedIntSet preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID,Map appContext) throws DataException {
  boolean loadResultClass=false;
  if (targetResultClass == null) {
    targetResultClass=this.loadResultClass(includeInnerID);
    loadResultClass=true;
  }
  IDataSetReader reader=DataSetStore.createReader(streamManager,targetResultClass,appContext);
  if (reader != null)   return reader.load(preFilteredRowIds == null ? null : preFilteredRowIds);
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  int adjustedVersion=resolveVersionConflict();
  if (loadResultClass && includeInnerID) {
    List<ResultFieldMetadata> fields=new ArrayList<ResultFieldMetadata>(targetResultClass.getFieldCount() - 1);
    for (int i=1; i <= targetResultClass.getFieldCount(); i++) {
      ResultFieldMetadata f=targetResultClass.getFieldMetaData(i);
      if (f.getName().equals(ExprMetaUtil.POS_NAME))       continue;
      fields.add(f);
    }
    targetResultClass=new ResultClass(fields);
  }
 else {
    targetResultClass=this.loadResultClass();
  }
  return new DataSetResultSet(stream,lensStream,targetResultClass,preFilteredRowIds,stringTableMap,index,adjustedVersion,includeInnerID);
}","public IDataSetResultSet loadDataSetData(IResultClass targetResultClass,IOrderedIntSet preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID,Map appContext) throws DataException {
  boolean loadResultClass=false;
  if (targetResultClass == null) {
    targetResultClass=this.loadResultClass(includeInnerID);
    loadResultClass=true;
  }
  IDataSetReader reader=DataSetStore.createReader(streamManager,targetResultClass,includeInnerID,appContext);
  if (reader != null)   return reader.load(preFilteredRowIds == null ? null : preFilteredRowIds);
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  int adjustedVersion=resolveVersionConflict();
  if (loadResultClass && includeInnerID) {
    List<ResultFieldMetadata> fields=new ArrayList<ResultFieldMetadata>(targetResultClass.getFieldCount() - 1);
    for (int i=1; i <= targetResultClass.getFieldCount(); i++) {
      ResultFieldMetadata f=targetResultClass.getFieldMetaData(i);
      if (f.getName().equals(ExprMetaUtil.POS_NAME))       continue;
      fields.add(f);
    }
    targetResultClass=new ResultClass(fields);
  }
 else {
    targetResultClass=this.loadResultClass();
  }
  return new DataSetResultSet(stream,lensStream,targetResultClass,preFilteredRowIds,stringTableMap,index,adjustedVersion,includeInnerID);
}",0.9957106090935088
65081,"public static IDataSetReader createReader(StreamManager manager,IResultClass resultClass,Map<?,?> appContext) throws DataException {
  return null;
}","public static IDataSetReader createReader(StreamManager manager,IResultClass resultClass,boolean includeInnerId,Map<?,?> appContext) throws DataException {
  return null;
}",0.9283489096573208
65082,"TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
      int levelIndex1=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
      int levelIndex2=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
      if (levelIndex1 == levelIndex2) {
        this.avoidExtraSort=true;
      }
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  sortType=getSortType(aggr,cubeDimensionReader);
  Comparator comparator=new Row4AggregationComparator(sortType);
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    if (!this.avoidExtraSort) {
      sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
      if (memoryCacheSize == 0) {
        sortedFactRows.setUseMemoryOnly(true);
      }
    }
 else {
      factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
      if (memoryCacheSize == 0) {
        factRows.setUseMemoryOnly(true);
      }
      factRowPostion=0;
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}","TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
      int levelIndex1=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
      int levelIndex2=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
      if (levelIndex1 == levelIndex2) {
        this.avoidExtraSort=true;
      }
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    if (cubeDimensionReader.getlowestLevelIndex(tDimName) == 0)     endLevelIndex=0;
 else     endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  sortType=getSortType(aggr,cubeDimensionReader);
  Comparator comparator=new Row4AggregationComparator(sortType);
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    if (!this.avoidExtraSort) {
      sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
      if (memoryCacheSize == 0) {
        sortedFactRows.setUseMemoryOnly(true);
      }
    }
 else {
      factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
      if (memoryCacheSize == 0) {
        factRows.setUseMemoryOnly(true);
      }
      factRowPostion=0;
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}",0.9908990899089908
65083,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.unsetStacked();
          }
        }
      }
      ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
      try {
        ChartElementUtil.setDefaultValue(currentChart,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
      }
 catch (      ChartException e) {
      }
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        axes.get(i).setPercent(false);
        axes.get(i).setType(AxisType.DATE_TIME_LITERAL);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.unsetStacked();
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(currentChart,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      yAxis.setType(AxisType.DATE_TIME_LITERAL);
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().unsetVisible();
        series.unsetStacked();
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  try {
    ChartElementUtil.setDefaultValue(currentChart,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
  }
 catch (  ChartException e) {
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.unsetStacked();
          }
        }
      }
      ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
      try {
        ChartElementUtil.setDefaultValue(currentChart,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
      }
 catch (      ChartException e) {
      }
      ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        axes.get(i).setPercent(false);
        axes.get(i).setType(AxisType.DATE_TIME_LITERAL);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.unsetStacked();
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(currentChart,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      yAxis.setType(AxisType.DATE_TIME_LITERAL);
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().unsetVisible();
        series.unsetStacked();
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  try {
    ChartElementUtil.setDefaultValue(currentChart,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
  }
 catch (  ChartException e) {
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}",0.989270564750894
65084,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=getDataSet(model);
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      setDataSet(tableHandle,dataSet);
      setDataItemAction(model,dataHandle);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=getDataSet(model);
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List<ColumnHintHandle> columnHints=DataUtil.getColumnHints(dataset);
          ColumnHintHandle temp=null;
          for (int i=0; i < columnHints.size(); i++) {
            ColumnHintHandle columnHintHandle=(ColumnHintHandle)columnHints.get(i);
            if (str.equals(columnHintHandle.getColumnName()) || str.equals(columnHintHandle.getAlias())) {
              temp=columnHintHandle;
              break;
            }
          }
          if (temp == null) {
            return dataHandle;
          }
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (temp != null && (temp.getAlias().equals(resultSetColumn.getColumnName()) || temp.getColumnName().equals((resultSetColumn.getColumnName())))) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (          ColumnHintHandle columnHint : columnHints) {
            if (str.equals(columnHint.getColumnName()) || str.equals(columnHint.getAlias())) {
              type=columnHint.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        setDataSet(dataHandle,dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        setDataSet(container,dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet || (getAdapter() != null && root.getDataSet() != null && getAdapter().resolveExtendedData(root.getDataSet()).equals(getAdapter().resolveExtendedData(dataSet)))) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        setDataSet(listingHandle,dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    setDataSet(dataHandle,dataSet);
  }
  setDataItemAction(model,dataHandle);
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getHeadColumnDisplayName(model));
    String displayKey=UIUtil.getColumnHeaderDisplayNameKey(model);
    if (displayKey == null) {
      displayKey=UIUtil.getColumnDisplayNameKey(model);
    }
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=getDataSet(model);
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      setDataSet(tableHandle,dataSet);
      setDataItemAction(model,dataHandle);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=getDataSet(model);
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List<ColumnHintHandle> columnHints=DataUtil.getColumnHints(dataset);
          ColumnHintHandle temp=null;
          for (int i=0; i < columnHints.size(); i++) {
            ColumnHintHandle columnHintHandle=(ColumnHintHandle)columnHints.get(i);
            if (str.equals(columnHintHandle.getColumnName()) || str.equals(columnHintHandle.getAlias())) {
              temp=columnHintHandle;
              break;
            }
          }
          if (temp == null) {
            return dataHandle;
          }
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (temp != null && (temp.getAlias().equals(resultSetColumn.getColumnName()) || temp.getColumnName().equals((resultSetColumn.getColumnName())))) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (          ColumnHintHandle columnHint : columnHints) {
            if (str.equals(columnHint.getColumnName()) || str.equals(columnHint.getAlias())) {
              type=columnHint.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(temp.getColumnName()) || group.getName().equals(temp.getAlias()))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        setDataSet(dataHandle,dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        setDataSet(container,dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet || (getAdapter() != null && root.getDataSet() != null && getAdapter().resolveExtendedData(root.getDataSet()).equals(getAdapter().resolveExtendedData(dataSet)))) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        setDataSet(listingHandle,dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    setDataSet(dataHandle,dataSet);
  }
  setDataItemAction(model,dataHandle);
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getHeadColumnDisplayName(model));
    String displayKey=UIUtil.getColumnHeaderDisplayNameKey(model);
    if (displayKey == null) {
      displayKey=UIUtil.getColumnDisplayNameKey(model);
    }
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.997198403939214
65085,"public String[] getVMArguments(ILaunchConfiguration configuration) throws CoreException {
  String[] args=super.getVMArguments(configuration);
  List arguments=new ArrayList();
  for (int i=0; i < args.length; i++) {
    arguments.add(args[i]);
  }
  helper.addPortArgs(arguments);
  helper.addUserClassPath(arguments,configuration);
  helper.addFileNameArgs(arguments);
  helper.addEngineHomeArgs(arguments);
  helper.addResourceFolder(arguments);
  helper.addTempFolder(arguments);
  helper.addTypeArgs(arguments);
  helper.addParameterArgs(arguments);
  return (String[])arguments.toArray(new String[arguments.size()]);
}","public String[] getVMArguments(ILaunchConfiguration configuration) throws CoreException {
  String[] args=super.getVMArguments(configuration);
  List arguments=new ArrayList();
  for (int i=0; i < args.length; i++) {
    arguments.add(args[i]);
  }
  helper.addPortArgs(arguments);
  helper.addUserClassPath(arguments,configuration);
  helper.addFileNameArgs(arguments);
  helper.addEngineHomeArgs(arguments);
  helper.addResourceFolder(arguments);
  helper.addTempFolder(arguments);
  helper.addTypeArgs(arguments);
  helper.addDataLimitArgs(arguments);
  helper.addParameterArgs(arguments);
  return (String[])arguments.toArray(new String[arguments.size()]);
}",0.9704510108864696
65086,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=getDataSet(model);
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      setDataSet(tableHandle,dataSet);
      setDataItemAction(model,dataHandle);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=getDataSet(model);
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (str.equals(resultSetColumn.getColumnName())) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          List<ColumnHintHandle> columnHints=DataUtil.getColumnHints(dataset);
          for (          ColumnHintHandle columnHint : columnHints) {
            if (str.equals(columnHint.getColumnName()) || str.equals(columnHint.getAlias())) {
              type=columnHint.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        setDataSet(dataHandle,dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        setDataSet(container,dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet || (getAdapter() != null && root.getDataSet() != null && getAdapter().resolveExtendedData(root.getDataSet()).equals(getAdapter().resolveExtendedData(dataSet)))) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        setDataSet(listingHandle,dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    setDataSet(dataHandle,dataSet);
  }
  setDataItemAction(model,dataHandle);
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getHeadColumnDisplayName(model));
    String displayKey=UIUtil.getColumnHeaderDisplayNameKey(model);
    if (displayKey == null) {
      displayKey=UIUtil.getColumnDisplayNameKey(model);
    }
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=getDataSet(model);
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      setDataSet(tableHandle,dataSet);
      setDataItemAction(model,dataHandle);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=getDataSet(model);
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List<ColumnHintHandle> columnHints=DataUtil.getColumnHints(dataset);
          ColumnHintHandle temp=null;
          for (int i=0; i < columnHints.size(); i++) {
            ColumnHintHandle columnHintHandle=(ColumnHintHandle)columnHints.get(i);
            if (str.equals(columnHintHandle.getColumnName()) || str.equals(columnHintHandle.getAlias())) {
              temp=columnHintHandle;
              break;
            }
          }
          if (temp == null) {
            return dataHandle;
          }
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (temp != null && (temp.getAlias().equals(resultSetColumn.getColumnName()) || temp.getColumnName().equals((resultSetColumn.getColumnName())))) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (          ColumnHintHandle columnHint : columnHints) {
            if (str.equals(columnHint.getColumnName()) || str.equals(columnHint.getAlias())) {
              type=columnHint.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        setDataSet(dataHandle,dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        setDataSet(container,dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet || (getAdapter() != null && root.getDataSet() != null && getAdapter().resolveExtendedData(root.getDataSet()).equals(getAdapter().resolveExtendedData(dataSet)))) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        setDataSet(listingHandle,dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    setDataSet(dataHandle,dataSet);
  }
  setDataItemAction(model,dataHandle);
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getHeadColumnDisplayName(model));
    String displayKey=UIUtil.getColumnHeaderDisplayNameKey(model);
    if (displayKey == null) {
      displayKey=UIUtil.getColumnDisplayNameKey(model);
    }
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9676407821958974
65087,"/** 
 * @param dataExpr
 * @param scope
 * @return
 * @throws BirtException
 */
private static Object doEvaluateRawExpression(IBaseExpression dataExpr,Scriptable scope,boolean javaType,ScriptContext cx,DataSetRuntime dataSet) throws BirtException {
  if (dataSet == null) {
    return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
  }
  String dataSetColumn=extractDirectColumn(dataExpr,cx,false);
  if (dataSetColumn != null) {
    if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
      Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
      return DataTypeUtil.convert(value,dataExpr.getDataType());
    }
  }
  String rowName=extractDirectColumn(dataExpr,cx,true);
  if (rowName != null) {
    Scriptable scriptable=dataSet.getJSResultRowObject();
    if (scriptable instanceof JSResultSetRow) {
      JSResultSetRow resultSetRow=(JSResultSetRow)scriptable;
      IBinding b=resultSetRow.getBinding(rowName);
      if (resultSetRow.getOdiResult().getCurrentResult().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=resultSetRow.getOdiResult().getCurrentResult().getFieldValue(rowName);
        return DataTypeUtil.convert(value,b.getDataType());
      }
      if (b != null && b.getAggrFunction() == null) {
        IBaseExpression expr=b.getExpression();
        dataSetColumn=extractDirectColumn(expr,cx,false);
        if (dataSetColumn != null) {
          if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
            Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
            return DataTypeUtil.convert(value,b.getDataType());
          }
        }
      }
    }
 else {
      if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=dataSet.getCurrentRow().getFieldValue(rowName);
        return DataTypeUtil.convert(value,dataExpr.getDataType());
      }
    }
  }
  return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
}","/** 
 * @param dataExpr
 * @param scope
 * @return
 * @throws BirtException
 */
private static Object doEvaluateRawExpression(IBaseExpression dataExpr,Scriptable scope,boolean javaType,ScriptContext cx,DataSetRuntime dataSet) throws BirtException {
  if (dataSet == null) {
    return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
  }
  String dataSetColumn=extractDirectColumn(dataExpr,cx,false);
  if (dataSetColumn != null) {
    if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
      Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
      return DataTypeUtil.convert(value,dataExpr.getDataType());
    }
  }
  String rowName=extractDirectColumn(dataExpr,cx,true);
  if (rowName != null) {
    Scriptable scriptable=dataSet.getJSResultRowObject();
    if (scriptable instanceof JSResultSetRow) {
      JSResultSetRow resultSetRow=(JSResultSetRow)scriptable;
      IBinding b=resultSetRow.getBinding(rowName);
      if (b != null && b.getAggrFunction() == null) {
        IBaseExpression expr=b.getExpression();
        dataSetColumn=extractDirectColumn(expr,cx,false);
        if (dataSetColumn != null) {
          if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
            Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
            return DataTypeUtil.convert(value,b.getDataType());
          }
        }
      }
    }
 else {
      if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=dataSet.getCurrentRow().getFieldValue(rowName);
        return DataTypeUtil.convert(value,dataExpr.getDataType());
      }
    }
  }
  return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
}",0.6653215636822194
65088,"/** 
 * @param dataExpr
 * @param scope
 * @return
 * @throws BirtException
 */
private Object doEvaluateRawExpression(IBaseExpression dataExpr,Scriptable scope,boolean javaType,ScriptContext cx,DataSetRuntime dataSet) throws BirtException {
  if (dataSet == null) {
    return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
  }
  String dataSetColumn=extractDirectColumn(dataExpr,cx,false);
  if (dataSetColumn != null) {
    if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
      Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
      return DataTypeUtil.convert(value,dataExpr.getDataType());
    }
  }
  String rowName=extractDirectColumn(dataExpr,cx,true);
  if (rowName != null) {
    Scriptable scriptable=dataSet.getJSResultRowObject();
    if (scriptable instanceof JSResultSetRow) {
      JSResultSetRow resultSetRow=(JSResultSetRow)scriptable;
      IBinding b=resultSetRow.getBinding(rowName);
      if (resultSetRow.getOdiResult().getCurrentResult().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=resultSetRow.getOdiResult().getCurrentResult().getFieldValue(rowName);
        return DataTypeUtil.convert(value,b.getDataType());
      }
      if (b != null && b.getAggrFunction() == null) {
        IBaseExpression expr=b.getExpression();
        dataSetColumn=extractDirectColumn(expr,cx,false);
        if (dataSetColumn != null) {
          if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
            Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
            return DataTypeUtil.convert(value,b.getDataType());
          }
        }
      }
    }
 else {
      if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=dataSet.getCurrentRow().getFieldValue(rowName);
        return DataTypeUtil.convert(value,dataExpr.getDataType());
      }
    }
  }
  return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
}","/** 
 * @param dataExpr
 * @param scope
 * @return
 * @throws BirtException
 */
private Object doEvaluateRawExpression(IBaseExpression dataExpr,Scriptable scope,boolean javaType,ScriptContext cx,DataSetRuntime dataSet) throws BirtException {
  if (dataSet == null) {
    return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
  }
  String dataSetColumn=extractDirectColumn(dataExpr,cx,false);
  if (dataSetColumn != null) {
    if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
      Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
      return DataTypeUtil.convert(value,dataExpr.getDataType());
    }
  }
  String rowName=extractDirectColumn(dataExpr,cx,true);
  if (rowName != null) {
    Scriptable scriptable=dataSet.getJSResultRowObject();
    if (scriptable instanceof JSResultSetRow) {
      JSResultSetRow resultSetRow=(JSResultSetRow)scriptable;
      IBinding b=resultSetRow.getBinding(rowName);
      if (b != null && b.getAggrFunction() == null) {
        IBaseExpression expr=b.getExpression();
        dataSetColumn=extractDirectColumn(expr,cx,false);
        if (dataSetColumn != null) {
          if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
            Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
            return DataTypeUtil.convert(value,b.getDataType());
          }
        }
      }
    }
 else {
      if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=dataSet.getCurrentRow().getFieldValue(rowName);
        return DataTypeUtil.convert(value,dataExpr.getDataType());
      }
    }
  }
  return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
}",0.6641356618577575
65089,"protected void bindBinding(IBinding colBinding,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (colBinding == null) {
    return;
  }
  String bindingName=colBinding.getBindingName();
  String expr=registeredQueries.get(bindingName).encode();
  if (!cubeQuery.getBindings().contains(colBinding)) {
    cubeQuery.addBinding(colBinding);
  }
  String measure=exprCodec.getMeasureName(expr);
  if (measure != null) {
    if (registeredMeasures.containsKey(bindingName)) {
      return;
    }
    IMeasureDefinition mDef=null;
    MeasureHandle measureHandle=cube.getMeasure(measure);
    if (measureHandle != null && measureHandle.isCalculated()) {
      mDef=cubeQuery.createDerivedMeasure(measure,DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()),modelAdapter.adaptExpression((Expression)measureHandle.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
    }
 else {
      mDef=cubeQuery.createMeasure(measure);
    }
    registeredMeasures.put(bindingName,mDef);
    String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
    mDef.setAggrFunction(aggFun);
  }
 else   if (exprCodec.isDimensionExpresion()) {
    registerDimensionLevel(cubeQuery,cube,bindingName);
  }
 else   if (exprCodec.isCubeBinding(true)) {
    bindExpression(expr,cubeQuery,cube);
    return;
  }
}","protected void bindBinding(IBinding colBinding,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (colBinding == null) {
    return;
  }
  String bindingName=colBinding.getBindingName();
  String expr=registeredQueries.get(bindingName).encode();
  if (!cubeQuery.getBindings().contains(colBinding)) {
    cubeQuery.addBinding(colBinding);
  }
  String measure=exprCodec.getMeasureName(expr);
  if (measure != null) {
    if (registeredMeasures.containsKey(bindingName)) {
      return;
    }
    IMeasureDefinition mDef=null;
    MeasureHandle measureHandle=cube.getMeasure(measure);
    if (measureHandle != null && measureHandle.isCalculated()) {
      mDef=cubeQuery.createDerivedMeasure(measure,DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()),modelAdapter.adaptExpression((Expression)measureHandle.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
    }
 else {
      mDef=cubeQuery.createMeasure(measure);
    }
    registeredMeasures.put(bindingName,mDef);
    if (cube.getMeasure(measure) != null) {
      String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
      mDef.setAggrFunction(aggFun);
    }
  }
 else   if (exprCodec.isDimensionExpresion()) {
    registerDimensionLevel(cubeQuery,cube,bindingName);
  }
 else   if (exprCodec.isCubeBinding(true)) {
    bindExpression(expr,cubeQuery,cube);
    return;
  }
}",0.9811188811188812
65090,"@SuppressWarnings(""String_Node_Str"") private List<FilterConditionElementHandle> getFiltersFromXtab(CrosstabReportItemHandle crossTab){
  List<FilterConditionElementHandle> list=new ArrayList<FilterConditionElementHandle>();
  if (crossTab == null) {
    return list;
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  int measureCount=crossTab.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    MeasureViewHandle measureView=crossTab.getMeasure(i);
    Iterator<FilterConditionElementHandle> iter=measureView.filtersIterator();
    while (iter.hasNext()) {
      list.add(iter.next());
    }
  }
  return list;
}","@SuppressWarnings(""String_Node_Str"") private List<FilterConditionElementHandle> getFiltersFromXtab(CrosstabReportItemHandle crossTab){
  List<FilterConditionElementHandle> list=new ArrayList<FilterConditionElementHandle>();
  if (crossTab == null) {
    return list;
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  if (crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE) != null) {
    DesignElementHandle elementHandle=crossTab.getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE).getModelHandle();
    list.addAll(getLevelOnCrosstab((ExtendedItemHandle)elementHandle));
  }
  int measureCount=crossTab.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    MeasureViewHandle measureView=crossTab.getMeasure(i);
    if (measureView != null) {
      Iterator<FilterConditionElementHandle> iter=measureView.filtersIterator();
      while (iter.hasNext()) {
        list.add(iter.next());
      }
    }
  }
  return list;
}",0.9689277899343544
65091,"public ContentProvider(String[] extensionFilter){
  if (extensionFilter != null) {
    ArrayList<String> filters=new ArrayList<String>();
    for (int i=0; i < extensionFilter.length; i++) {
      String ext=extensionFilter[i].toLowerCase(Locale.US);
      if (ALL_EXT.equals(ext))       continue;
      filters.add(ext.substring(1));
    }
    exts=filters.toArray(new String[]{});
  }
}","public ContentProvider(String[] extensionFilter){
  if (extensionFilter != null) {
    ArrayList<String> filters=new ArrayList<String>();
    for (int i=0; i < extensionFilter.length; i++) {
      String[] regxs=extensionFilter[i].split(""String_Node_Str"");
      for (      String regx : regxs) {
        String ext=regx.toLowerCase(Locale.US);
        if (ALL_EXT.equals(regx))         continue;
        filters.add(ext.substring(1));
      }
    }
    exts=filters.toArray(new String[]{});
  }
}",0.8564971751412429
65092,"private void prepareJDBCMetaDataProvider(DataSetDesign dataSetDesign){
  JdbcMetaDataProvider.createInstance(dataSetDesign);
class TempThread extends Thread {
    public void run(){
      try {
        JdbcMetaDataProvider.getInstance().reconnect();
      }
 catch (      Exception e) {
        prepareException=e;
      }
    }
  }
  TempThread tt=new TempThread();
  tt.start();
  try {
    tt.join(this.timeOutLimit * 1000);
    Thread.State state=tt.getState();
    if (state == Thread.State.TERMINATED) {
      if (prepareException != null) {
        ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),prepareException.getLocalizedMessage(),prepareException);
        prepareException=null;
      }
    }
 else {
      continueConnect=false;
      ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),new Exception());
    }
  }
 catch (  InterruptedException e) {
    ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}","private void prepareJDBCMetaDataProvider(DataSetDesign dataSetDesign){
  JdbcMetaDataProvider.createInstance(dataSetDesign,this.getHostResourceIdentifiers());
class TempThread extends Thread {
    public void run(){
      try {
        JdbcMetaDataProvider.getInstance().reconnect();
      }
 catch (      Exception e) {
        prepareException=e;
      }
    }
  }
  TempThread tt=new TempThread();
  tt.start();
  try {
    tt.join(this.timeOutLimit * 1000);
    Thread.State state=tt.getState();
    if (state == Thread.State.TERMINATED) {
      if (prepareException != null) {
        ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),prepareException.getLocalizedMessage(),prepareException);
        prepareException=null;
      }
    }
 else {
      continueConnect=false;
      ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),new Exception());
    }
  }
 catch (  InterruptedException e) {
    ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}",0.9866457187745484
65093,"protected void createAndInitCustomControl(Composite parent,Properties profileProps){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  Composite content=m_pageHelper.createCustomControl(parent);
  m_pageHelper.addBidiSettingsButton(content,profileProps);
  this.setPingButtonVisible(false);
  m_pageHelper.initCustomControl(profileProps);
}","protected void createAndInitCustomControl(Composite parent,Properties profileProps){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  Composite content=m_pageHelper.createCustomControl(parent);
  m_pageHelper.addBidiSettingsButton(content,profileProps);
  this.setPingButtonVisible(false);
  m_pageHelper.initCustomControl(profileProps);
  m_pageHelper.setResourceIdentifier(this.getHostResourceIdentifiers());
}",0.9102091020910208
65094,"Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=3;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getDrivers();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      boolean isEncryptionMethod=Constants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       if (isEncryptionMethod) {
        propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
      }
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      propertyText.setLayoutData(gd);
      if (isEncryptionMethod) {
        Label blankLabel=new Label(propertyGroup,SWT.NONE);
        GridData blankLabelGd=new GridData();
        blankLabelGd.horizontalSpan=2;
        blankLabel.setLayoutData(blankLabelGd);
        Label prompLabel=new Label(propertyGroup,SWT.NONE);
        prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
        GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
        labelGd.horizontalSpan=3;
        prompLabel.setLayoutData(labelGd);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setMinWidth(size.x + 20);
  scrollContent.setExpandVertical(true);
  scrollContent.setMinHeight(size.y + 20);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}","Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=3;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getInstance().getDriversInfo();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      boolean isEncryptionMethod=DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       if (isEncryptionMethod) {
        propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
      }
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      propertyText.setLayoutData(gd);
      if (isEncryptionMethod) {
        Label blankLabel=new Label(propertyGroup,SWT.NONE);
        GridData blankLabelGd=new GridData();
        blankLabelGd.horizontalSpan=2;
        blankLabel.setLayoutData(blankLabelGd);
        Label prompLabel=new Label(propertyGroup,SWT.NONE);
        prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
        GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
        labelGd.horizontalSpan=3;
        prompLabel.setLayoutData(labelGd);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setMinWidth(size.x + 20);
  scrollContent.setExpandVertical(true);
  scrollContent.setMinHeight(size.y + 20);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}",0.9961618981158408
65095,"/** 
 * Attempts to connect to the Jdbc Data Source using the properties ( username, password, driver class ) specified.
 * @param : showErrorMessage is set to true , and error dialog box will be displayed if the connection fails.
 * @return Returns true if the connection is OK,and false otherwise
 * @throws OdaException
 */
private boolean testConnection() throws OdaException {
  if (!isValidDataSource()) {
    return false;
  }
  String url=jdbcUrl.getText().trim();
  String userid=userName.getText().trim();
  String passwd=password.getText();
  String driverName=getSelectedDriverClassName();
  String jndiNameValue=getODAJndiName();
  if (jndiNameValue.length() == 0)   jndiNameValue=null;
  if (bidiSupportObj == null) {
    if (m_wizardPage instanceof JDBCSelectionWizardPage) {
      bidiSupportObj=((JDBCSelectionWizardPage)m_wizardPage).getBidiSupport();
    }
 else     if (m_propertyPage instanceof JDBCPropertyPage) {
      bidiSupportObj=((JDBCPropertyPage)m_propertyPage).getBidiSupport();
    }
  }
  if (bidiSupportObj != null) {
    return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,bidiSupportObj.getMetadataBidiFormat().toString(),collectSpecifiedProperties());
  }
  return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,collectSpecifiedProperties());
}","/** 
 * Attempts to connect to the Jdbc Data Source using the properties ( username, password, driver class ) specified.
 * @param : showErrorMessage is set to true , and error dialog box will be displayed if the connection fails.
 * @return Returns true if the connection is OK,and false otherwise
 * @throws OdaException
 */
private boolean testConnection() throws OdaException {
  if (!isValidDataSource()) {
    return false;
  }
  String url=jdbcUrl.getText().trim();
  String userid=userName.getText().trim();
  String passwd=password.getText();
  String driverName=getSelectedDriverClassName();
  String jndiNameValue=getODAJndiName();
  if (jndiNameValue.length() == 0)   jndiNameValue=null;
  if (bidiSupportObj == null) {
    if (m_wizardPage instanceof JDBCSelectionWizardPage) {
      bidiSupportObj=((JDBCSelectionWizardPage)m_wizardPage).getBidiSupport();
    }
 else     if (m_propertyPage instanceof JDBCPropertyPage) {
      bidiSupportObj=((JDBCPropertyPage)m_propertyPage).getBidiSupport();
    }
  }
  Properties privateProperties=collectSpecifiedProperties();
  Map appContext=new HashMap();
  appContext.put(org.eclipse.datatools.connectivity.oda.util.ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,this.resourceIdentifier);
  ResourceLocator.resolveConnectionProperties(privateProperties,driverName,appContext);
  if (bidiSupportObj != null) {
    return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,bidiSupportObj.getMetadataBidiFormat().toString(),privateProperties);
  }
  return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,privateProperties);
}",0.8585858585858586
65096,"private void drawPropertyText(Group propertyGroup,final String propertyName,String propertyContent,boolean encrypt){
  GridData gd;
  final Text propertyText;
  if (encrypt) {
    propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
  }
 else {
    propertyText=new Text(propertyGroup,SWT.BORDER);
  }
  boolean isEncryptionMethod=Constants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
  if (propertyContent != null) {
    propertyText.setText(propertyContent);
    databaseProperties.put(propertyName,propertyContent);
  }
 else   if (isEncryptionMethod) {
    propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
  }
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  propertyText.setLayoutData(gd);
  if (isEncryptionMethod) {
    Label blankLabel=new Label(propertyGroup,SWT.NONE);
    GridData blankLabelGd=new GridData();
    blankLabelGd.horizontalSpan=2;
    blankLabel.setLayoutData(blankLabelGd);
    Label prompLabel=new Label(propertyGroup,SWT.NONE);
    prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
    GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
    labelGd.horizontalSpan=3;
    prompLabel.setLayoutData(labelGd);
  }
  propertyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      databaseProperties.put(propertyName,propertyText.getText());
    }
  }
);
  propertyText.getParent().layout();
}","private void drawPropertyText(Group propertyGroup,final String propertyName,String propertyContent,boolean encrypt){
  GridData gd;
  final Text propertyText;
  if (encrypt) {
    propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
  }
 else {
    propertyText=new Text(propertyGroup,SWT.BORDER);
  }
  boolean isEncryptionMethod=DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
  if (propertyContent != null) {
    propertyText.setText(propertyContent);
    databaseProperties.put(propertyName,propertyContent);
  }
 else   if (isEncryptionMethod) {
    propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
  }
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  propertyText.setLayoutData(gd);
  if (isEncryptionMethod) {
    Label blankLabel=new Label(propertyGroup,SWT.NONE);
    GridData blankLabelGd=new GridData();
    blankLabelGd.horizontalSpan=2;
    blankLabel.setLayoutData(blankLabelGd);
    Label prompLabel=new Label(propertyGroup,SWT.NONE);
    prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
    GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
    labelGd.horizontalSpan=3;
    prompLabel.setLayoutData(labelGd);
  }
  propertyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      databaseProperties.put(propertyName,propertyText.getText());
    }
  }
);
  propertyText.getParent().layout();
}",0.9965349965349966
65097,"private void drawPropertyGroups(final JDBCDriverInformation info){
  ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
  porpertyGroupComposite.setVisible(true);
  ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
  databaseProperties.clear();
  List<PropertyGroup> propertyGroups=info.getPropertyGroup();
  for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
    PropertyGroup group=(PropertyGroup)(it.next());
    String propertyGroupName=group.getName();
    List<PropertyElement> propertyList=group.getProperties();
    Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
    for (int i=0; i < propertyList.size(); i++) {
      final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
      Label propertyParam=new Label(propertyGroup,SWT.NONE);
      String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
      if (propertyParamDisplayName == null) {
        propertyParamDisplayName=propertyName;
      }
      propertyParam.setText(propertyParamDisplayName);
      propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      propertyParam.setLayoutData(gd);
      String propertyContent=null;
      if (profileProperties != null && !profileProperties.isEmpty()) {
        propertyContent=getProfileproperty(propertyName);
      }
      if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
        drawPropertyCombo(propertyGroup,propertyName,propertyContent);
      }
 else {
        if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
          drawPropertyText(propertyGroup,propertyName,propertyContent,true);
        }
 else         drawPropertyText(propertyGroup,propertyName,propertyContent,false);
      }
    }
    propertyGroup.getParent().layout();
  }
}","private void drawPropertyGroups(final JDBCDriverInformation info){
  ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
  porpertyGroupComposite.setVisible(true);
  ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
  databaseProperties.clear();
  List<PropertyGroup> propertyGroups=info.getPropertyGroup();
  for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
    PropertyGroup group=(PropertyGroup)(it.next());
    String propertyGroupName=group.getName();
    List<PropertyElement> propertyList=group.getProperties();
    Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
    for (int i=0; i < propertyList.size(); i++) {
      final String propertyName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_NAME);
      Label propertyParam=new Label(propertyGroup,SWT.NONE);
      String propertyParamDisplayName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
      if (propertyParamDisplayName == null) {
        propertyParamDisplayName=propertyName;
      }
      propertyParam.setText(propertyParamDisplayName);
      propertyParam.setToolTipText(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DEC));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      propertyParam.setLayoutData(gd);
      String propertyContent=null;
      if (profileProperties != null && !profileProperties.isEmpty()) {
        propertyContent=getProfileproperty(propertyName);
      }
      if (DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE))) {
        drawPropertyCombo(propertyGroup,propertyName,propertyContent);
      }
 else {
        if (Boolean.valueOf(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
          drawPropertyText(propertyGroup,propertyName,propertyContent,true);
        }
 else         drawPropertyText(propertyGroup,propertyName,propertyContent,false);
      }
    }
    propertyGroup.getParent().layout();
  }
}",0.985941893158388
65098,"public void createPageCustomControl(Composite parent){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  Composite content=m_pageHelper.createCustomControl(parent);
  m_pageHelper.initCustomControl(m_folderProperties);
  m_pageHelper.addBidiSettingsButton(content,m_folderProperties);
  this.setPingButtonVisible(false);
}","public void createPageCustomControl(Composite parent){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  Composite content=m_pageHelper.createCustomControl(parent);
  m_pageHelper.initCustomControl(m_folderProperties);
  m_pageHelper.addBidiSettingsButton(content,m_folderProperties);
  m_pageHelper.setResourceIdentifier(this.getHostResourceIdentifiers());
  this.setPingButtonVisible(false);
}",0.906048906048906
65099,"public static void createInstance(DataSetDesign dataSetDesign){
  release();
  DataSourceDesign dataSourceDesign=dataSetDesign.getDataSourceDesign();
  Properties props=new Properties();
  try {
    props=DesignSessionUtil.getEffectiveDataSourceProperties(dataSourceDesign);
  }
 catch (  OdaException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  String userName=props.getProperty(Constants.ODAUser);
  String password=props.getProperty(Constants.ODAPassword);
  String url=props.getProperty(Constants.ODAURL);
  String driverClass=props.getProperty(Constants.ODADriverClass);
  String metadataBidiFormatStr=props.getProperty(BidiConstants.METADATA_FORMAT_PROP_NAME);
  if (metadataBidiFormatStr != null) {
    userName=BidiTransform.transform(userName,BidiConstants.DEFAULT_BIDI_FORMAT_STR,metadataBidiFormatStr);
    password=BidiTransform.transform(password,BidiConstants.DEFAULT_BIDI_FORMAT_STR,metadataBidiFormatStr);
    url=BidiTransform.transformURL(url,BidiConstants.DEFAULT_BIDI_FORMAT_STR,metadataBidiFormatStr);
  }
  instance=new JdbcMetaDataProvider(driverClass,url,userName,password,props);
}","public static void createInstance(DataSetDesign dataSetDesign,ResourceIdentifiers resourceIdentifiers){
  release();
  DataSourceDesign dataSourceDesign=dataSetDesign.getDataSourceDesign();
  Properties props=new Properties();
  try {
    props=DesignSessionUtil.getEffectiveDataSourceProperties(dataSourceDesign);
  }
 catch (  OdaException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  String userName=props.getProperty(Constants.ODAUser);
  String password=props.getProperty(Constants.ODAPassword);
  String url=props.getProperty(Constants.ODAURL);
  String driverClass=props.getProperty(Constants.ODADriverClass);
  Map appContext=new HashMap();
  if (resourceIdentifiers != null) {
    appContext.put(org.eclipse.datatools.connectivity.oda.util.ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DesignSessionUtil.createRuntimeResourceIdentifiers(resourceIdentifiers));
  }
  try {
    ResourceLocator.resolveConnectionProperties(props,driverClass,appContext);
  }
 catch (  OdaException e) {
  }
  String metadataBidiFormatStr=props.getProperty(BidiConstants.METADATA_FORMAT_PROP_NAME);
  if (metadataBidiFormatStr != null) {
    userName=BidiTransform.transform(userName,BidiConstants.DEFAULT_BIDI_FORMAT_STR,metadataBidiFormatStr);
    password=BidiTransform.transform(password,BidiConstants.DEFAULT_BIDI_FORMAT_STR,metadataBidiFormatStr);
    url=BidiTransform.transformURL(url,BidiConstants.DEFAULT_BIDI_FORMAT_STR,metadataBidiFormatStr);
  }
  instance=new JdbcMetaDataProvider(driverClass,url,userName,password,props);
}",0.7934254762794173
65100,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public synchronized static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    tempAddedInDriverInfos.clear();
    return getDriverList();
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  tempAddedInDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return getDriverList();
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public synchronized static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    tempAddedInDriverInfos.clear();
    return getDriverList();
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  tempAddedInDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getInstance().getDriversInfo();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return getDriverList();
}",0.9913279132791328
65101,"/** 
 * @return
 * @throws DataException 
 */
public void loadFinished() throws DataException {
  switchCacheMap(dataSetDesign);
  cacheMapManager.loadFinishOnCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID));
}","/** 
 * @return
 * @throws DataException 
 */
public void loadFinished() throws DataException {
  switchCacheMap(dataSetDesign);
  cacheMapManager.loadFinishOnCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID,this.enableSamplePreview));
}",0.9566724436741768
65102,"/** 
 * Remember before requesting any service, this function must be called in advance to make sure using current data source and data set.
 * @param dataSourceDesign
 * @param datasetDesign
 */
public void setDataSourceAndDataSet(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterHints,Map appContext){
  this.dataSourceDesign=dataSourceDesign;
  this.dataSetDesign=dataSetDesign;
  this.parameterHints=parameterHints;
  this.appContext=appContext;
  this.cacheID=CacheIDFetcher.getInstance().getCacheID(appContext);
}","/** 
 * Remember before requesting any service, this function must be called in advance to make sure using current data source and data set.
 * @param dataSourceDesign
 * @param datasetDesign
 */
public void setDataSourceAndDataSet(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterHints,Map appContext){
  this.dataSourceDesign=dataSourceDesign;
  this.dataSetDesign=dataSetDesign;
  this.parameterHints=parameterHints;
  this.appContext=appContext;
  this.cacheID=CacheIDFetcher.getInstance().getCacheID(appContext);
  this.enableSamplePreview=CacheIDFetcher.getInstance().enableSampleDataPreivew(appContext);
}",0.923582580115037
65103,"/** 
 * only for test
 * @return
 * @throws DataException 
 */
public boolean doesLoadFromCache() throws DataException {
  DataSetCacheConfig dscc=getDataSetCacheConfig(dataSetDesign,appContext);
  if (dscc == null) {
    return false;
  }
  switchCacheMap(dataSetDesign);
  return cacheMapManager.doesLoadFromCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID),dscc.getCacheCapability());
}","/** 
 * only for test
 * @return
 * @throws DataException 
 */
public boolean doesLoadFromCache() throws DataException {
  DataSetCacheConfig dscc=getDataSetCacheConfig(dataSetDesign,appContext);
  if (dscc == null) {
    return false;
  }
  switchCacheMap(dataSetDesign);
  return cacheMapManager.doesLoadFromCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID,this.enableSamplePreview),dscc.getCacheCapability());
}",0.9344790547798066
65104,"/** 
 * @return
 * @throws DataException 
 */
public void saveFinished(IDataSetCacheObject dsco) throws DataException {
  switchCacheMap(dataSetDesign);
  cacheMapManager.saveFinishOnCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID),dsco);
}","/** 
 * @return
 * @throws DataException 
 */
public void saveFinished(IDataSetCacheObject dsco) throws DataException {
  switchCacheMap(dataSetDesign);
  cacheMapManager.saveFinishOnCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID,this.enableSamplePreview),dsco);
}",0.9606299212598424
65105,"/** 
 * Return the cached result metadata. Please note that parameter hint will not change the returned metadata.
 * @return
 * @throws DataException
 */
public IResultMetaData getCachedResultMetadata(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws DataException {
  IResultClass resultClass=this.jvmLevelCacheMapManager.getCachedResultClass(DataSourceAndDataSet.newInstance(dataSource,dataSet,null,this.cacheID));
  if (resultClass != null)   return new ResultMetaData(resultClass);
 else   return null;
}","/** 
 * Return the cached result metadata. Please note that parameter hint will not change the returned metadata.
 * @return
 * @throws DataException
 */
public IResultMetaData getCachedResultMetadata(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws DataException {
  IResultClass resultClass=this.jvmLevelCacheMapManager.getCachedResultClass(DataSourceAndDataSet.newInstance(dataSource,dataSet,null,this.cacheID,this.enableSamplePreview));
  if (resultClass != null)   return new ResultMetaData(resultClass);
 else   return null;
}",0.9767873723305478
65106,"/** 
 * @return
 * @throws DataException 
 */
public IDataSetCacheObject getLoadedCacheObject() throws DataException {
  switchCacheMap(dataSetDesign);
  IDataSetCacheObject cached=cacheMapManager.getloadedCacheObject(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID));
  if (this.cacheID != null && cached instanceof MemoryDataSetCacheObject && ((MemoryDataSetCacheObject)cached).getSize() > 0) {
    cached=new DataSetCacheObjectWithDummyData(dataSetDesign,cached);
  }
  return cached;
}","/** 
 * @return
 * @throws DataException 
 */
public IDataSetCacheObject getLoadedCacheObject() throws DataException {
  switchCacheMap(dataSetDesign);
  IDataSetCacheObject cached=cacheMapManager.getloadedCacheObject(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID,this.enableSamplePreview));
  if (this.cacheID != null && cached instanceof MemoryDataSetCacheObject && ((MemoryDataSetCacheObject)cached).getSize() > 0) {
    cached=new DataSetCacheObjectWithDummyData(dataSetDesign,cached);
  }
  return cached;
}",0.9776984834968778
65107,"/** 
 * @param dsco
 * @throws DataException
 */
public void loadStart() throws DataException {
  switchCacheMap(dataSetDesign);
  cacheMapManager.loadStart(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID));
}","/** 
 * @param dsco
 * @throws DataException
 */
public void loadStart() throws DataException {
  switchCacheMap(dataSetDesign);
  cacheMapManager.loadStart(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID,this.enableSamplePreview));
}",0.9554367201426024
65108,"/** 
 * @return
 * @throws DataException 
 */
public boolean doesSaveToCache() throws DataException {
  DataSetCacheConfig dscc=getDataSetCacheConfig(dataSetDesign,appContext);
  if (dscc == null) {
    return false;
  }
  switchCacheMap(dataSetDesign);
  return cacheMapManager.doesSaveToCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID),dscc);
}","/** 
 * @return
 * @throws DataException 
 */
public boolean doesSaveToCache() throws DataException {
  DataSetCacheConfig dscc=getDataSetCacheConfig(dataSetDesign,appContext);
  if (dscc == null) {
    return false;
  }
  switchCacheMap(dataSetDesign);
  return cacheMapManager.doesSaveToCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID,this.enableSamplePreview),dscc);
}",0.9704840613931524
65109,"/** 
 * @return
 * @throws DataException 
 */
public IDataSetCacheObject getSavedCacheObject() throws DataException {
  switchCacheMap(dataSetDesign);
  IDataSetCacheObject cached=cacheMapManager.getSavedCacheObject(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID));
  if (this.cacheID != null && cached instanceof MemoryDataSetCacheObject && ((MemoryDataSetCacheObject)cached).getSize() > 0) {
    cached=new DataSetCacheObjectWithDummyData(dataSetDesign,cached);
  }
  return cached;
}","/** 
 * @return
 * @throws DataException 
 */
public IDataSetCacheObject getSavedCacheObject() throws DataException {
  switchCacheMap(dataSetDesign);
  IDataSetCacheObject cached=cacheMapManager.getSavedCacheObject(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.cacheID,this.enableSamplePreview));
  if (this.cacheID != null && cached instanceof MemoryDataSetCacheObject && ((MemoryDataSetCacheObject)cached).getSize() > 0) {
    cached=new DataSetCacheObjectWithDummyData(dataSetDesign,cached);
  }
  return cached;
}",0.9776186213070726
65110,"public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  DataSourceAndDataSet candidate=(DataSourceAndDataSet)obj;
  if (this.cacheScopeID == null || candidate.cacheScopeID == null)   return this.isDataSourceDataSetEqual((DataSourceAndDataSet)obj,true);
  return this.cacheScopeID.equals(candidate.cacheScopeID);
}","public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  DataSourceAndDataSet candidate=(DataSourceAndDataSet)obj;
  if (this.cacheScopeID == null || candidate.cacheScopeID == null)   return this.isDataSourceDataSetEqual((DataSourceAndDataSet)obj,true);
  if (!this.enableSamplePreview) {
    if (!this.cacheScopeID.equals(candidate.cacheScopeID))     return false;
 else     return this.isDataSourceDataSetEqual((DataSourceAndDataSet)obj,true);
  }
  return this.cacheScopeID.equals(candidate.cacheScopeID);
}",0.793713163064833
65111,"/** 
 * @param dataSourceDesign
 * @param dataSetDesign
 * @return
 */
public static DataSourceAndDataSet newInstance(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection paramterHints,String cacheScopeID){
  DataSourceAndDataSet dataSourceAndSet=new DataSourceAndDataSet();
  dataSourceAndSet.dataSourceDesign=dataSourceDesign;
  dataSourceAndSet.dataSetDesign=dataSetDesign;
  dataSourceAndSet.paramterHints=paramterHints;
  dataSourceAndSet.cacheScopeID=cacheScopeID;
  return dataSourceAndSet;
}","/** 
 * @param dataSourceDesign
 * @param dataSetDesign
 * @return
 */
public static DataSourceAndDataSet newInstance(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection paramterHints,String cacheScopeID,boolean enableSamplePreview){
  DataSourceAndDataSet dataSourceAndSet=new DataSourceAndDataSet();
  dataSourceAndSet.dataSourceDesign=dataSourceDesign;
  dataSourceAndSet.dataSetDesign=dataSetDesign;
  dataSourceAndSet.paramterHints=paramterHints;
  dataSourceAndSet.cacheScopeID=cacheScopeID;
  dataSourceAndSet.enableSamplePreview=enableSamplePreview;
  return dataSourceAndSet;
}",0.8830715532286213
65112,"protected boolean fromCache() throws DataException {
  if (queryDefn.getQueryExecutionHints().enablePushDown()) {
    if (querySpec != null && querySpec.getResultSetSpecification() != null && !querySpec.getResultSetSpecification().isEmpty()) {
      if (appContext.get(DataEngine.QUERY_EXECUTION_SESSION_ID) == null) {
        dataEngine.getSession().getDataSetCacheManager().clearCache(dataEngine.getDataSourceDesign(this.dataSet.getDesign().getDataSourceName()),this.dataSet.getDesign());
      }
    }
  }
  return super.fromCache();
}","protected boolean fromCache() throws DataException {
  if (queryDefn.getQueryExecutionHints().enablePushDown()) {
    if (querySpec != null && querySpec.getResultSetSpecification() != null && !querySpec.getResultSetSpecification().isEmpty()) {
      if (!CacheIDFetcher.getInstance().enableSampleDataPreivew(appContext)) {
        dataEngine.getSession().getDataSetCacheManager().clearCache(dataEngine.getDataSourceDesign(this.dataSet.getDesign().getDataSourceName()),this.dataSet.getDesign());
      }
    }
  }
  return super.fromCache();
}",0.8962962962962963
65113,"private List<IBinding> getRequestColumnMap(){
  IQueryOptimizeHints hints=null;
  if (resultSetPopulator.getEventHandler().getAppContext() != null) {
    hints=(IQueryOptimizeHints)resultSetPopulator.getEventHandler().getAppContext().get(IQueryOptimizeHints.QUERY_OPTIMIZE_HINT);
  }
  if (hints != null) {
    return null;
  }
 else {
    return (this.resultSetPopulator.getQuery().getQueryDefinition() != null && ((IQueryDefinition)this.resultSetPopulator.getQuery().getQueryDefinition()).needAutoBinding()) ? null : resultSetPopulator.getEventHandler().getAllColumnBindings();
  }
}","private List<IBinding> getRequestColumnMap(){
  try {
    if (DataSetStore.isDataMartStore(this.resultSetPopulator.getEventHandler().getAppContext(),this.resultSetPopulator.getSession())) {
      return null;
    }
  }
 catch (  DataException e) {
  }
  return (this.resultSetPopulator.getQuery().getQueryDefinition() != null && ((IQueryDefinition)this.resultSetPopulator.getQuery().getQueryDefinition()).needAutoBinding()) ? null : resultSetPopulator.getEventHandler().getAllColumnBindings();
}",0.1944444444444444
65114,"private List<IBinding> getRequestColumnMap(){
  IQueryOptimizeHints hints=null;
  if (handler.getAppContext() != null) {
    hints=(IQueryOptimizeHints)handler.getAppContext().get(IQueryOptimizeHints.QUERY_OPTIMIZE_HINT);
  }
  if (hints != null) {
    return null;
  }
 else {
    return (this.query instanceof IQueryDefinition) && ((IQueryDefinition)this.query).needAutoBinding() ? null : this.handler.getAllColumnBindings();
  }
}","private List<IBinding> getRequestColumnMap(){
  try {
    if (DataSetStore.isDataMartStore(handler.getAppContext(),this.session)) {
      return null;
    }
  }
 catch (  DataException e) {
  }
  return (this.query instanceof IQueryDefinition) && ((IQueryDefinition)this.query).needAutoBinding() ? null : this.handler.getAllColumnBindings();
}",0.172680412371134
65115,"public boolean canLeave(){
  if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
    this.modelChanged=false;
    ((DataSetEditor)getContainer()).updateDataSetDesign(this);
  }
  return true;
}","public boolean canLeave(){
  if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
    this.modelChanged=false;
    ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    try {
      DataSetUIUtil.updateColumnCache((DataSetHandle)getContainer().getModel());
    }
 catch (    SemanticException e) {
      e.printStackTrace();
    }
  }
  return true;
}",0.7114503816793893
65116,"protected QueryDefinition constructQuery(DataSetHandle dataset,DataRequestSession session) throws BirtException {
  QueryDefinition query=super.constructQuery(dataset,session);
  PropertyHandle propertyHandle=dataset.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  int paramsSize=propertyHandle.getListValue().size();
  Iterator paramIter=propertyHandle.iterator();
  for (int n=1; n <= paramsSize; n++) {
    DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
    if (!paramDefn.isOutput())     continue;
    String bindingName=paramDefn.getName();
    IBinding binding=new Binding(bindingName);
    binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
    binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
    query.addBinding(binding);
  }
  return query;
}","protected QueryDefinition constructQuery(DataSetHandle dataset,DataRequestSession session) throws BirtException {
  QueryDefinition query=super.constructQuery(dataset,session);
  query.getBindings().clear();
  PropertyHandle propertyHandle=dataset.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  int paramsSize=propertyHandle.getListValue().size();
  Iterator paramIter=propertyHandle.iterator();
  for (int n=1; n <= paramsSize; n++) {
    DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
    if (!paramDefn.isOutput())     continue;
    String bindingName=paramDefn.getName();
    IBinding binding=new Binding(bindingName);
    binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
    binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
    query.addBinding(binding);
  }
  return query;
}",0.983013698630137
65117,"/** 
 * @param appContext
 * @param dsource
 * @param dset
 * @param moduleHandle
 * @throws BirtException
 */
void preDefineDataSet(DataSessionContext appContext,IBaseDataSourceDesign dsource,IBaseDataSetDesign dset,IDataQueryDefinition query,IDataQueryDefinition[] registedQueries) throws BirtException ;","/** 
 * @param dsource
 * @param dset
 * @param query
 * @param registedQueries
 * @param dContext
 * @param session
 * @throws BirtException
 */
void preDefineDataSet(IBaseDataSourceDesign dsource,IBaseDataSetDesign dset,IDataQueryDefinition query,IDataQueryDefinition[] registedQueries,DataSessionContext dContext,String tempDir) throws BirtException ;",0.6909090909090909
65118,"public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor,QueryExecutionHelper.DataSetHandleProcessContext context) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getQualifiedName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor,context);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor,context);
    }
  }
  IBaseDataSetDesign design=((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName());
  if (design == null) {
    design=modelAdaptor.adaptDataSet(dataSet);
    dataEngine.defineDataSet(design);
  }
  if (context != null)   context.process(design,dataSet);
}","public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor,QueryExecutionHelper.DataSetHandleProcessContext context) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getQualifiedName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor,context);
      }
    }
  }
 else   if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor,context);
    }
  }
  IBaseDataSetDesign design=((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName());
  if (design == null) {
    design=modelAdaptor.adaptDataSet(dataSet);
    dataEngine.defineDataSet(design);
  }
  if (context != null)   context.process(design,dataSet);
}",0.9981718464351006
65119,"/** 
 * prepare for transient query
 * @param sessionContext
 * @param dataEngine
 * @param handle
 * @param queryDefn
 * @throws BirtException
 */
public static void prepareForTransientQuery(DataSessionContext dContext,DataEngineImpl dataEngine,DataSetHandle handle,IQueryDefinition queryDefn,IDataQueryDefinition[] registedQueries) throws BirtException {
  IBaseDataSetDesign design=null;
  if (handle == null) {
    if (queryDefn.getDataSetName() == null) {
      if (queryDefn.getSourceQuery() != null && queryDefn.getSourceQuery() instanceof IQueryDefinition)       design=dataEngine.getDataSetDesign(((IQueryDefinition)queryDefn.getSourceQuery()).getDataSetName());
    }
 else     design=dataEngine.getDataSetDesign(queryDefn.getDataSetName());
  }
 else {
    design=dataEngine.getDataSetDesign(handle.getQualifiedName());
  }
  final IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(dContext,dataEngine.getDataSourceDesign(design.getDataSourceName()),design,queryDefn,registedQueries);
    dataEngine.addShutdownListener(new IShutdownListener(){
      public void dataEngineShutdown(){
        try {
          dataSetInterceptor.close();
        }
 catch (        BirtException e) {
        }
      }
    }
);
    return;
  }
  if (handle instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)handle;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        prepareForTransientQuery(dContext,dataEngine,childDataSet,queryDefn,registedQueries);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List<DataSetHandle> inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      prepareForTransientQuery(dContext,dataEngine,inputDataSet.get(i),queryDefn,registedQueries);
    }
  }
}","/** 
 * prepare for transient query
 * @param sessionContext
 * @param dataEngine
 * @param handle
 * @param queryDefn
 * @throws BirtException
 */
public static void prepareForTransientQuery(DataSessionContext dContext,DataEngineImpl dataEngine,DataSetHandle handle,IQueryDefinition queryDefn,IDataQueryDefinition[] registedQueries) throws BirtException {
  IBaseDataSetDesign design=null;
  if (handle == null) {
    if (queryDefn.getDataSetName() == null) {
      if (queryDefn.getSourceQuery() != null && queryDefn.getSourceQuery() instanceof IQueryDefinition)       design=dataEngine.getDataSetDesign(((IQueryDefinition)queryDefn.getSourceQuery()).getDataSetName());
    }
 else     design=dataEngine.getDataSetDesign(queryDefn.getDataSetName());
  }
 else {
    design=dataEngine.getDataSetDesign(handle.getQualifiedName());
  }
  final IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(dataEngine.getDataSourceDesign(design.getDataSourceName()),design,queryDefn,registedQueries,dContext,dataEngine.getSession().getTempDir());
    dataEngine.addShutdownListener(new IShutdownListener(){
      public void dataEngineShutdown(){
        try {
          dataSetInterceptor.close();
        }
 catch (        BirtException e) {
        }
      }
    }
);
    return;
  }
  if (handle instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)handle;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        prepareForTransientQuery(dContext,dataEngine,childDataSet,queryDefn,registedQueries);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List<DataSetHandle> inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      prepareForTransientQuery(dContext,dataEngine,inputDataSet.get(i),queryDefn,registedQueries);
    }
  }
}",0.9865951742627346
65120,"/** 
 * Makes one pass over the odiResult and calculates values for all aggregate expressions. odiResult must be open, and cursor placed at first row. Upon return, odiResult is rewinded to first row. Before calling this method, a Javascript ""row"" object must be set up in the passed-in JS context and bound to the passed in odiResult.
 */
private void calculate() throws DataException {
  List validAggregations=new ArrayList();
  boolean[] populateAggrValue=new boolean[this.currentAggrCount];
  int count=1;
  for (int i=0; i < this.currentAggrCount; i++) {
    validAggregations.add(Integer.valueOf(i));
    if (this.getAggrInfo(i).getAggregation().getNumberOfPasses() > 1)     populateAggrValue[i]=false;
 else     populateAggrValue[i]=true;
    accumulatorManagers[i]=new AccumulatorManager(this.getAggrInfo(i).getAggregation());
  }
  while (validAggregations.size() > 0) {
    int[] validAggregationArray=new int[validAggregations.size()];
    for (int i=0; i < validAggregations.size(); i++) {
      validAggregationArray[i]=((Integer)validAggregations.get(i)).intValue();
    }
    assert(this.getCurrentResult() == null || this.getCurrentResultIndex() == 0);
    if (this.getCurrentResult() == null) {
      return;
    }
    pass(populateAggrValue,validAggregationArray);
    this.first(0);
    count++;
    prepareNextIteration(validAggregations,populateAggrValue,count);
  }
}","/** 
 * Makes one pass over the odiResult and calculates values for all aggregate expressions. odiResult must be open, and cursor placed at first row. Upon return, odiResult is rewinded to first row. Before calling this method, a Javascript ""row"" object must be set up in the passed-in JS context and bound to the passed in odiResult.
 */
private void calculate() throws DataException {
  List validAggregations=new ArrayList();
  boolean[] populateAggrValue=new boolean[this.currentAggrCount];
  int count=1;
  for (int i=0; i < this.currentAggrCount; i++) {
    validAggregations.add(Integer.valueOf(i));
    if (this.getAggrInfo(i).getAggregation().getNumberOfPasses() > 1)     populateAggrValue[i]=false;
 else     populateAggrValue[i]=true;
    accumulatorManagers[i]=new AccumulatorManager(this.getAggrInfo(i).getAggregation());
  }
  while (validAggregations.size() > 0) {
    int[] validAggregationArray=new int[validAggregations.size()];
    for (int i=0; i < validAggregations.size(); i++) {
      validAggregationArray[i]=((Integer)validAggregations.get(i)).intValue();
    }
    assert(this.getCurrentResult() == null || this.getCurrentResultIndex() == 0);
    if (this.getCurrentResult() == null) {
      for (int i=0; i < accumulatorManagers.length; i++) {
        Accumulator a=accumulatorManagers[i].getCurrentAccumulator();
        a.finish();
        currentRoundAggrValue[i].add(a.getValue());
      }
      return;
    }
    pass(populateAggrValue,validAggregationArray);
    this.first(0);
    count++;
    prepareNextIteration(validAggregations,populateAggrValue,count);
  }
}",0.9300301305657852
65121,"public boolean canLeave(){
  if (isValid()) {
    saveOutputColumns();
    if (this.modelChanged) {
      ((DataSetEditor)this.getContainer()).updateDataSetDesign(this);
      this.modelChanged=false;
    }
    this.pageActivated=false;
    return super.canLeave();
  }
 else   return false;
}","public boolean canLeave(){
  if (isValid()) {
    saveOutputColumns();
    if (this.modelChanged) {
      ((DataSetEditor)this.getContainer()).updateDataSetDesign(this);
      updateColumnCache();
      this.modelChanged=false;
    }
    this.pageActivated=false;
    return super.canLeave();
  }
 else   return false;
}",0.9396411092985318
65122,"/** 
 * Updates using state of groups, if category expression and Y optional expression have related group on specified GroupDefinition, set <code>true</code> value to that item of group indexes array.
 * @param cm current chart model.
 * @param groupDefinitions grouping definition.
 * @throws ChartException
 */
protected void updateEnabledGroupIndexes(Chart cm,List<IGroupDefinition> groupDefinitions) throws ChartException {
  faEnabledGroups=new boolean[fGroupCount];
  boolean isSharing=isSharing();
  EList<SeriesDefinition> baseSDs=ChartUtil.getBaseSeriesDefinitions(cm);
  for (  SeriesDefinition sd : baseSDs) {
    if (sd.getDesignTimeSeries().getDataDefinition().isEmpty() || sd.getGrouping() == null || !sd.getGrouping().isEnabled()) {
      continue;
    }
    Query q=sd.getDesignTimeSeries().getDataDefinition().get(0);
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getGrouping() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getGrouping(),gd);
      }
    }
  }
  List<SeriesDefinition> orthoSDs=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  for (  SeriesDefinition sd : orthoSDs) {
    Query q=sd.getQuery();
    if (q == null || q.getDefinition() == null || ""String_Node_Str"".equals(q.getDefinition().trim())) {
      continue;
    }
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getQuery() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getQuery().getGrouping(),gd);
      }
    }
  }
}","/** 
 * Updates using state of groups, if category expression and Y optional expression have related group on specified GroupDefinition, set <code>true</code> value to that item of group indexes array.
 * @param cm current chart model.
 * @param groupDefinitions grouping definition.
 * @throws ChartException
 */
protected void updateEnabledGroupIndexes(Chart cm,List<IGroupDefinition> groupDefinitions) throws ChartException {
  faEnabledGroups=new boolean[fGroupCount];
  boolean isSharing=isSharing();
  EList<SeriesDefinition> baseSDs=ChartUtil.getBaseSeriesDefinitions(cm);
  for (  SeriesDefinition sd : baseSDs) {
    if (sd.getDesignTimeSeries().getDataDefinition().isEmpty() || sd.getGrouping() == null || !sd.getGrouping().isEnabled()) {
      continue;
    }
    Query q=sd.getDesignTimeSeries().getDataDefinition().get(0);
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions,true);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getGrouping() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getGrouping(),gd);
      }
    }
  }
  List<SeriesDefinition> orthoSDs=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  for (  SeriesDefinition sd : orthoSDs) {
    Query q=sd.getQuery();
    if (q == null || q.getDefinition() == null || ""String_Node_Str"".equals(q.getDefinition().trim())) {
      continue;
    }
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions,false);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getQuery() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getQuery().getGrouping(),gd);
      }
    }
  }
}",0.9968917773382312
65123,"/** 
 * Returns the index of specified expression on GroupDefinition.
 * @param expr specified expression.
 * @param groupDefinitions list of <code>GroupDefinition</code>
 * @return
 * @throws ChartException
 */
private int getGroupIndex(String expr,List<IGroupDefinition> groupDefinitions) throws ChartException {
  if (expr == null) {
    return -1;
  }
  exprCodec.decode(expr);
  Set<String> bindingNameSet=exprCodec.getRowBindingNameSet();
  boolean isJavaScript=ExpressionCodec.JAVASCRIPT.equals(exprCodec.getType());
  for (int i=0; i < groupDefinitions.size(); i++) {
    IGroupDefinition gd=groupDefinitions.get(i);
    String exprGroupKey=gd.getKeyExpression();
    if (isJavaScript) {
      if (expr.indexOf(exprGroupKey) >= 0) {
        return i;
      }
    }
    if (!bindingNameSet.isEmpty()) {
      Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
      for (      String grpBinding : grpBindings) {
        if (bindingNameSet.contains(grpBinding)) {
          return i;
        }
      }
    }
  }
  return -1;
}","/** 
 * Returns the index of specified expression on GroupDefinition.
 * @param expr specified expression.
 * @param groupDefinitions list of <code>GroupDefinition</code>
 * @param isCategory
 * @return
 * @throws ChartException
 */
private int getGroupIndex(String expr,List<IGroupDefinition> groupDefinitions,boolean isCategory) throws ChartException {
  if (expr == null) {
    return -1;
  }
  exprCodec.decode(expr);
  Set<String> bindingNameSet=exprCodec.getRowBindingNameSet();
  boolean isJavaScript=ExpressionCodec.JAVASCRIPT.equals(exprCodec.getType());
  if (isCategory) {
    for (int i=groupDefinitions.size() - 1; i >= 0; i--) {
      IGroupDefinition gd=groupDefinitions.get(i);
      String exprGroupKey=gd.getKeyExpression();
      if (isJavaScript) {
        if (expr.indexOf(exprGroupKey) >= 0) {
          return i;
        }
      }
      if (!bindingNameSet.isEmpty()) {
        Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
        for (        String grpBinding : grpBindings) {
          if (bindingNameSet.contains(grpBinding)) {
            return i;
          }
        }
      }
    }
  }
 else {
    for (int i=0; i < groupDefinitions.size(); i++) {
      IGroupDefinition gd=groupDefinitions.get(i);
      String exprGroupKey=gd.getKeyExpression();
      if (isJavaScript) {
        if (expr.indexOf(exprGroupKey) >= 0) {
          return i;
        }
      }
      if (!bindingNameSet.isEmpty()) {
        Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
        for (        String grpBinding : grpBindings) {
          if (bindingNameSet.contains(grpBinding)) {
            return i;
          }
        }
      }
    }
  }
  return -1;
}",0.7420520231213873
65124,"Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.verticalSpacing=10;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=3;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getDrivers();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      boolean isEncryptionMethod=Constants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       if (isEncryptionMethod) {
        propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
      }
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      propertyText.setLayoutData(gd);
      if (isEncryptionMethod) {
        Label blankLabel=new Label(propertyGroup,SWT.NONE);
        GridData blankLabelGd=new GridData();
        blankLabelGd.horizontalSpan=2;
        blankLabel.setLayoutData(blankLabelGd);
        Label prompLabel=new Label(propertyGroup,SWT.NONE);
        prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
        GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
        labelGd.horizontalSpan=3;
        prompLabel.setLayoutData(labelGd);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setMinWidth(size.x + 10);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}","Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=3;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getDrivers();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      boolean isEncryptionMethod=Constants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       if (isEncryptionMethod) {
        propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
      }
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      propertyText.setLayoutData(gd);
      if (isEncryptionMethod) {
        Label blankLabel=new Label(propertyGroup,SWT.NONE);
        GridData blankLabelGd=new GridData();
        blankLabelGd.horizontalSpan=2;
        blankLabel.setLayoutData(blankLabelGd);
        Label prompLabel=new Label(propertyGroup,SWT.NONE);
        prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
        GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
        labelGd.horizontalSpan=3;
        prompLabel.setLayoutData(labelGd);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setMinWidth(size.x + 10);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}",0.998186562873192
65125,"protected QueryDefinition constructQuery(DataSetHandle dataset) throws DataException {
  QueryDefinition query=super.constructQuery(dataset);
  PropertyHandle propertyHandle=dataset.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  int paramsSize=propertyHandle.getListValue().size();
  Iterator paramIter=propertyHandle.iterator();
  for (int n=1; n <= paramsSize; n++) {
    DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
    if (!paramDefn.isOutput())     continue;
    String bindingName=paramDefn.getName();
    IBinding binding=new Binding(bindingName);
    binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
    binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
    query.addBinding(binding);
  }
  return query;
}","protected QueryDefinition constructQuery(DataSetHandle dataset,DataRequestSession session) throws BirtException {
  QueryDefinition query=super.constructQuery(dataset,session);
  PropertyHandle propertyHandle=dataset.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  int paramsSize=propertyHandle.getListValue().size();
  Iterator paramIter=propertyHandle.iterator();
  for (int n=1; n <= paramsSize; n++) {
    DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
    if (!paramDefn.isOutput())     continue;
    String bindingName=paramDefn.getName();
    IBinding binding=new Binding(bindingName);
    binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
    binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
    query.addBinding(binding);
  }
  return query;
}",0.9755542922114838
65126,"/** 
 * Transforms dimension value to points.
 * @param handle
 * @param dpi to convert px unit
 * @return the dimension value with measure of points
 * @since 2.3
 */
public static double convertToPoints(org.eclipse.birt.report.model.api.DimensionHandle handle,int dpi){
  double retValue=0.0;
  if (handle.getMeasure() > 0 && handle.getUnits().trim().length() > 0) {
    if (handle.getUnits() == DesignChoiceConstants.UNITS_PT) {
      retValue=handle.getMeasure();
    }
 else     if (handle.getUnits() == DesignChoiceConstants.UNITS_PX) {
      retValue=(handle.getMeasure() * 72d) / dpi;
    }
 else {
      retValue=DimensionUtil.convertTo(handle.getMeasure(),handle.getUnits(),DesignChoiceConstants.UNITS_PT).getMeasure();
    }
  }
  return retValue;
}","/** 
 * Transforms dimension value to points.
 * @param handle
 * @param dpi to convert px unit
 * @return the dimension value with measure of points
 * @since 2.3
 */
public static double convertToPoints(org.eclipse.birt.report.model.api.DimensionHandle handle,int dpi){
  double retValue=0.0;
  if (handle.getMeasure() > 0 && handle.getUnits().trim().length() > 0) {
    if (DesignChoiceConstants.UNITS_PT.equalsIgnoreCase(handle.getUnits())) {
      retValue=handle.getMeasure();
    }
 else     if (DesignChoiceConstants.UNITS_PX.equalsIgnoreCase(handle.getUnits())) {
      retValue=(handle.getMeasure() * 72d) / dpi;
    }
 else {
      retValue=DimensionUtil.convertTo(handle.getMeasure(),handle.getUnits(),DesignChoiceConstants.UNITS_PT).getMeasure();
    }
  }
  return retValue;
}",0.9264516129032258
65127,"public boolean canLeave(){
  return validateAllComputedColumns();
}","public boolean canLeave(){
  if (validateAllComputedColumns()) {
    updateColumnCache();
    return true;
  }
  return false;
}",0.6256410256410256
65128,"protected void updateComputedColumn(Object structureOrHandle){
  if (structureOrHandle instanceof ComputedColumn) {
    try {
      computedColumns.addItem((ComputedColumn)structureOrHandle);
      viewer.getViewer().refresh();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    viewer.getViewer().update(structureOrHandle,null);
  }
  if (validateAllComputedColumns())   getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  updateColumnCache();
}","protected void updateComputedColumn(Object structureOrHandle){
  if (structureOrHandle instanceof ComputedColumn) {
    try {
      computedColumns.addItem((ComputedColumn)structureOrHandle);
      viewer.getViewer().refresh();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    viewer.getViewer().update(structureOrHandle,null);
  }
  if (validateAllComputedColumns())   getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
}",0.9778206364513018
65129,"public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnCategory(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnCategory(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  SeriesDefinition sd=ChartUtil.getBaseSeriesDefinitions(model).get(0);
  Query query=ChartUtil.getDataQuery(sd,0);
  return !isCubeTopLevel(query,itemHandle);
}","public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnCategory(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  if (model == null) {
    return false;
  }
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnCategory(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  SeriesDefinition sd=ChartUtil.getBaseSeriesDefinitions(model).get(0);
  Query query=ChartUtil.getDataQuery(sd,0);
  return !isCubeTopLevel(query,itemHandle);
}",0.953846153846154
65130,"public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnSeries(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnSeries(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  Query query=ChartUtil.getAllOrthogonalSeriesDefinitions(model).get(0).getQuery();
  return !isCubeTopLevel(query,itemHandle);
}","public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnSeries(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  if (model == null) {
    return false;
  }
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnSeries(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  Query query=ChartUtil.getAllOrthogonalSeriesDefinitions(model).get(0).getQuery();
  return !isCubeTopLevel(query,itemHandle);
}",0.9501661129568106
65131,"private static Date getDate(int year,int month,int day,int hours,int minutes,int seconds){
  Date newDate=new Date();
  Calendar calendar=getCalendar(newDate);
  calendar.set(year,month,day,hours,minutes,seconds);
  return calendar.getTime();
}","private static Date getDate(int year,int month,int day,int hours,int minutes,int seconds){
  Date newDate=new Date();
  Calendar calendar=getCalendar(newDate);
  calendar.set(year,month,day,hours,minutes,seconds);
  calendar.set(Calendar.MILLISECOND,0);
  return calendar.getTime();
}",0.9242424242424242
65132,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,new ArrayList());
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null)       dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
 else       dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    }
    throw e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        String columnName=getColumnName(rsMeta,i);
        if (columnName == null || columnName.trim().length() == 0) {
          List list=dataSetHandle.getListProperty(IDataSetModel.RESULT_SET_PROP);
          ResultSetColumn column=(ResultSetColumn)list.get(i - 1);
          rsc.setColumnName(column.getColumnName());
        }
 else {
          rsc.setColumnName(columnName);
        }
        if (rsMeta.getColumnType(i) != DataType.ANY_TYPE)         rsc.setDataType(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(Integer.valueOf(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null) {
        List resultSetColumnHandles=getResultSetColumnHandles(dataSetHandle.getCachedMetaDataHandle());
        int i=0;
        for (; i < columnList.size(); i++) {
          ResultSetColumn rsc=(ResultSetColumn)columnList.get(i);
          if (i < resultSetColumnHandles.size()) {
            ResultSetColumnHandle rsh=(ResultSetColumnHandle)resultSetColumnHandles.get(i);
            if (!rsh.getColumnName().equals(rsc.getColumnName())) {
              rsh.setColumnName(rsc.getColumnName());
            }
            if (!rsh.getDataType().equals(rsc.getDataType())) {
              rsh.setDataType(rsc.getDataType());
            }
          }
 else {
            dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
          }
        }
        if (i < resultSetColumnHandles.size()) {
          List toRemoved=resultSetColumnHandles.subList(i,resultSetColumnHandles.size());
          dataSetHandle.getCachedMetaDataHandle().getResultSet().removeItems(toRemoved);
        }
      }
 else {
        dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
        for (int i=0; i < columnList.size(); i++) {
          dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
        }
      }
    }
  }
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,new ArrayList());
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null)       dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
 else       dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    }
    throw e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      PropertyHandle columnHintList=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        String columnName=null;
        ColumnHintHandle matchedColumnHint=findColumnHint(rsMeta.getColumnName(i),columnHintList);
        if (matchedColumnHint != null) {
          String rsAlias=rsMeta.getColumnAlias(i);
          if (rsAlias != null) {
            updateColumnHintValues(rsAlias,matchedColumnHint);
          }
          columnName=matchedColumnHint.getAlias();
        }
        if (columnName == null || columnName.trim().length() == 0) {
          columnName=getColumnName(rsMeta,i);
        }
        if (columnName == null || columnName.trim().length() == 0) {
          List list=dataSetHandle.getListProperty(IDataSetModel.RESULT_SET_PROP);
          ResultSetColumn column=(ResultSetColumn)list.get(i - 1);
          rsc.setColumnName(column.getColumnName());
        }
 else {
          rsc.setColumnName(columnName);
        }
        if (rsMeta.getColumnType(i) != DataType.ANY_TYPE)         rsc.setDataType(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(Integer.valueOf(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null) {
        List resultSetColumnHandles=getResultSetColumnHandles(dataSetHandle.getCachedMetaDataHandle());
        int i=0;
        for (; i < columnList.size(); i++) {
          ResultSetColumn rsc=(ResultSetColumn)columnList.get(i);
          if (i < resultSetColumnHandles.size()) {
            ResultSetColumnHandle rsh=(ResultSetColumnHandle)resultSetColumnHandles.get(i);
            if (!rsh.getColumnName().equals(rsc.getColumnName())) {
              rsh.setColumnName(rsc.getColumnName());
            }
            if (!rsh.getDataType().equals(rsc.getDataType())) {
              rsh.setDataType(rsc.getDataType());
            }
          }
 else {
            dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
          }
        }
        if (i < resultSetColumnHandles.size()) {
          List toRemoved=resultSetColumnHandles.subList(i,resultSetColumnHandles.size());
          dataSetHandle.getCachedMetaDataHandle().getResultSet().removeItems(toRemoved);
        }
      }
 else {
        dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
        for (int i=0; i < columnList.size(); i++) {
          dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
        }
      }
    }
  }
  return rsMeta;
}",0.9154888103651354
65133,"public BaseTopBottomAccumulator(){
  if (DataEngineThreadLocal.getInstance().getPathManager() != null) {
    tempDir=DataEngineThreadLocal.getInstance().getPathManager().getTempFileName(""String_Node_Str"",this.hashCode(),null) + File.separator;
  }
 else {
    tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + this.hashCode()+ File.separator;
  }
  targetValue=new BasicCachedArray(tempDir,0);
}","public BaseTopBottomAccumulator(){
  if (DataEngineThreadLocal.getInstance().getPathManager() != null) {
    tempDir=DataEngineThreadLocal.getInstance().getPathManager().getTempFileName(""String_Node_Str"",this.hashCode(),null) + File.separator;
  }
 else {
    tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + this.hashCode()+ File.separator;
  }
  targetValue=new BasicCachedArray(tempDir,0);
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}",0.9239373601789708
65134,"private String getDataText(Object element){
  if (element != null) {
    if (expectedColumnDataType == DataType.SQL_DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.SQL_TIME_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else {
      try {
        return DataTypeUtil.toString(element);
      }
 catch (      BirtException e) {
        return String.valueOf(element);
      }
    }
  }
  return null;
}","private String getDataText(Object element){
  if (element != null) {
    if (expectedColumnDataType == DataType.SQL_DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.SQL_TIME_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (element instanceof Number) {
      try {
        return DataTypeUtil.toLocaleNeutralString(element);
      }
 catch (      BirtException e) {
        return String.valueOf(element);
      }
    }
 else {
      try {
        return DataTypeUtil.toString(element);
      }
 catch (      BirtException e) {
        return String.valueOf(element);
      }
    }
  }
  return null;
}",0.8739224137931034
65135,"protected void updateComputedColumn(Object structureOrHandle){
  if (structureOrHandle instanceof ComputedColumn) {
    try {
      computedColumns.addItem((ComputedColumn)structureOrHandle);
      viewer.getViewer().refresh();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    viewer.getViewer().update(structureOrHandle,null);
  }
  if (validateAllComputedColumns())   getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
}","protected void updateComputedColumn(Object structureOrHandle){
  if (structureOrHandle instanceof ComputedColumn) {
    try {
      computedColumns.addItem((ComputedColumn)structureOrHandle);
      viewer.getViewer().refresh();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    viewer.getViewer().update(structureOrHandle,null);
  }
  if (validateAllComputedColumns())   getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  updateColumnCache();
}",0.9778206364513018
65136,"/** 
 * Set the resultset metadata in dataset design
 * @param dataSetDesign
 * @param md
 * @throws OdaException
 */
private static void setResultSetMetaData(DataSetDesign dataSetDesign,IResultSetMetaData md) throws OdaException {
  ResultSetColumns columns=DesignSessionUtil.toResultSetColumnsDesign(md);
  if (columns != null) {
    ResultSetDefinition resultSetDefn=DesignFactory.eINSTANCE.createResultSetDefinition();
    resultSetDefn.setResultSetColumns(columns);
    dataSetDesign.setPrimaryResultSet(resultSetDefn);
    dataSetDesign.getResultSets().setDerivedMetaData(true);
  }
 else {
    dataSetDesign.setResultSets(null);
  }
}","/** 
 * Set the resultset metadata in dataset design
 * @param dataSetDesign
 * @param md
 * @throws OdaException
 */
private static void setResultSetMetaData(DataSetDesign dataSetDesign,IResultSetMetaData md) throws OdaException {
  if (md == null || dataSetDesign == null)   return;
  ResultSetColumns columns=DesignSessionUtil.toResultSetColumnsDesign(md);
  if (columns != null) {
    ResultSetDefinition resultSetDefn=DesignFactory.eINSTANCE.createResultSetDefinition();
    resultSetDefn.setResultSetColumns(columns);
    dataSetDesign.setPrimaryResultSet(resultSetDefn);
    dataSetDesign.getResultSets().setDerivedMetaData(true);
  }
 else {
    dataSetDesign.setResultSets(null);
  }
}",0.9602996254681648
65137,"/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    IOUtil.writeInt(this.rowExprsDos,rowCount);
    Map map=new HashMap();
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object value=it.next();
      map.put(value,value);
    }
    int rowBytes=this.version >= VersionManager.VERSION_2_2_1_3 ? this.initSave(map) : this.saveExprValue(map);
    IOUtil.writeInt(this.rowExprsDos,rowBytes);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    IOUtil.writeInt(this.rowExprsDos,rowCount);
    Map map=new HashMap();
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object value=it.next();
      map.put(value,value);
    }
    int rowBytes=this.version >= VersionManager.VERSION_2_2_1_3 ? this.initSave(map) : this.saveExprValue(map);
    IOUtil.writeInt(this.rowExprsDos,rowBytes);
    this.rowExprsDos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9762282091917592
65138,"private void initCalculationTypeCombo(String dimensionName){
  CubeHandle cube=getCrosstabReportItemHandle().getCube();
  if (cube == null) {
    return;
  }
  DimensionHandle handle=cube.getDimension(dimensionName);
  String cal=calculationType.getText();
  isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),isStatic);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
  }
 else {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
      if (function == null) {
        return;
      }
      String name=function.getName();
      int itemIndex=getItemIndex(names,name);
      if (itemIndex >= 0) {
        calculationType.select(itemIndex);
      }
 else {
        calculationType.select(0);
      }
    }
    handleCalculationSelectEvent();
    ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      String argValue=calculationParamsValueMap.get(argName);
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
          if (control instanceof Text && argValue != null) {
            ((Text)control).setText(argValue);
          }
        }
      }
    }
  }
}","private void initCalculationTypeCombo(String dimensionName){
  CubeHandle cube=getCrosstabReportItemHandle().getCube();
  if (cube == null) {
    return;
  }
  DimensionHandle handle=cube.getDimension(dimensionName);
  String cal=calculationType.getText();
  isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),isStatic);
  Collections.sort(times,new Comparator<ITimeFunction>(){
    public int compare(    ITimeFunction o1,    ITimeFunction o2){
      return o1.getDisplayName().compareTo(o2.getDisplayName());
    }
  }
);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
  }
 else {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
      if (function == null) {
        return;
      }
      String name=function.getName();
      int itemIndex=getItemIndex(names,name);
      if (itemIndex >= 0) {
        calculationType.select(itemIndex);
      }
 else {
        calculationType.select(0);
      }
    }
    handleCalculationSelectEvent();
    ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      String argValue=calculationParamsValueMap.get(argName);
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
          if (control instanceof Text && argValue != null) {
            ((Text)control).setText(argValue);
          }
        }
      }
    }
  }
}",0.9646156527801988
65139,"public BaseTopBottomAccumulator(){
  this.tempDir=TempDir.getInstance().getPath();
  targetValue=new BasicCachedArray(tempDir,0);
}","public BaseTopBottomAccumulator(){
  if (DataEngineThreadLocal.getInstance().getPathManager() != null) {
    tempDir=DataEngineThreadLocal.getInstance().getPathManager().getTempFileName(""String_Node_Str"",this.hashCode(),null) + File.separator;
  }
 else {
    tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + this.hashCode()+ File.separator;
  }
  targetValue=new BasicCachedArray(tempDir,0);
}",0.3713235294117647
65140,"@Override public void stop(BundleContext context) throws Exception {
  TempDir.release();
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  super.stop(context);
}",0.8985507246376812
65141,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  String tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + this.getBundle().hashCode()+ File.separator;
  TempDir.createInstance(tempDir);
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
}",0.547550432276657
65142,"/** 
 * @param subqueryLocator
 * @param sourceResultIterator
 * @return
 * @throws BirtException 
 */
private org.eclipse.birt.data.engine.api.IResultIterator getSubQueryIterator(SubqueryLocator subqueryLocator,org.eclipse.birt.data.engine.api.IResultIterator sourceResultIterator) throws BirtException {
  org.eclipse.birt.data.engine.api.IResultIterator resultIterator=sourceResultIterator;
  if (subqueryLocator.getParentQuery() != null && subqueryLocator.getParentQuery() instanceof SubqueryLocator) {
    resultIterator=getSubQueryIterator((SubqueryLocator)subqueryLocator.getParentQuery(),sourceResultIterator);
  }
  resultIterator.moveTo(subqueryLocator.getRowId());
  return resultIterator.getSecondaryIterator(subqueryLocator.getName(),queryScope);
}","/** 
 * @param subqueryLocator
 * @param sourceResultIterator
 * @return
 * @throws BirtException 
 */
private org.eclipse.birt.data.engine.api.IResultIterator getSubQueryIterator(SubqueryLocator subqueryLocator,org.eclipse.birt.data.engine.api.IResultIterator sourceResultIterator) throws BirtException {
  org.eclipse.birt.data.engine.api.IResultIterator resultIterator=sourceResultIterator;
  if (subqueryLocator.getParentQuery() != null && subqueryLocator.getParentQuery() instanceof SubqueryLocator) {
    resultIterator=getSubQueryIterator((SubqueryLocator)subqueryLocator.getParentQuery(),sourceResultIterator);
  }
  if (subqueryLocator.getRowId() <= -1 && resultIterator.isEmpty()) {
    return resultIterator.getSecondaryIterator(subqueryLocator.getName(),queryScope);
  }
 else   resultIterator.moveTo(subqueryLocator.getRowId());
  return resultIterator.getSecondaryIterator(subqueryLocator.getName(),queryScope);
}",0.8838862559241706
65143,"/** 
 * @return
 * @throws IOException
 */
private long getOffset() throws IOException {
  return randomAccessFile.getFilePointer();
}","/** 
 * @return
 * @throws IOException
 */
private long getOffset() throws IOException {
  return getRandomAccessFile().getFilePointer();
}",0.9743589743589745
65144,"/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=0;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList<Long>();
  this.segmentOffsets.add(Long.valueOf(0L));
  createRandomAccessFile();
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}","/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=0;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList<Long>();
  this.segmentOffsets.add(Long.valueOf(0L));
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}",0.9582089552238806
65145,"/** 
 * Reads up to <code>readSize</code> objects from disk.
 * @param dis
 * @param list
 * @return
 * @throws IOException
 */
private void readObjects(long offset,int readSize) throws IOException {
  this.randomAccessFile.seek(offset);
  for (int i=0; i < readSize; i++) {
    this.buffer[i]=readObject();
  }
}","/** 
 * Reads up to <code>readSize</code> objects from disk.
 * @param dis
 * @param list
 * @return
 * @throws IOException
 */
private void readObjects(long offset,int readSize) throws IOException {
  getRandomAccessFile().seek(offset);
  for (int i=0; i < readSize; i++) {
    this.buffer[i]=readObject();
  }
}",0.9808306709265175
65146,"protected void writeObject(Object object) throws IOException {
  if (object == null) {
    randomAccessFile.writeShort(NULL_VALUE);
    return;
  }
  randomAccessFile.writeShort(NORMAL_VALUE);
  if (fieldWriter == null) {
    fieldWriter=IOUtil.getRandomWriter(DataType.getDataType(object.getClass()));
    fieldReader=IOUtil.getRandomReader(DataType.getDataType(object.getClass()));
  }
  fieldWriter.write(randomAccessFile,object);
}","protected void writeObject(Object object) throws IOException {
  if (object == null) {
    getRandomAccessFile().writeShort(NULL_VALUE);
    return;
  }
  getRandomAccessFile().writeShort(NORMAL_VALUE);
  if (fieldWriter == null) {
    fieldWriter=IOUtil.getRandomWriter(DataType.getDataType(object.getClass()));
    fieldReader=IOUtil.getRandomReader(DataType.getDataType(object.getClass()));
  }
  fieldWriter.write(getRandomAccessFile(),object);
}",0.976271186440678
65147,"protected Object readObject() throws IOException {
  short fieldCount=randomAccessFile.readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  return fieldReader.read(randomAccessFile);
}","protected Object readObject() throws IOException {
  short fieldCount=getRandomAccessFile().readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  return fieldReader.read(getRandomAccessFile());
}",0.9660194174757282
65148,"protected void writeObject(Object object) throws IOException {
  if (object == null) {
    randomAccessFile.writeShort(NULL_VALUE);
    return;
  }
  IStructure cachedObject=(IStructure)object;
  Object[] objects=cachedObject.getFieldValues();
  randomAccessFile.writeShort((short)objects.length);
  if (fieldWriters == null || fieldWriters.length < objects.length) {
    createReadersAndWriters(objects.length);
  }
  for (int i=0; i < objects.length; i++) {
    if (i >= fieldWriters.length) {
      fieldWriters[fieldWriters.length - 1].write(randomAccessFile,objects[i]);
    }
 else {
      fieldWriters[i].write(randomAccessFile,objects[i]);
    }
  }
}","protected void writeObject(Object object) throws IOException {
  if (object == null) {
    getRandomAccessFile().writeShort(NULL_VALUE);
    return;
  }
  IStructure cachedObject=(IStructure)object;
  Object[] objects=cachedObject.getFieldValues();
  getRandomAccessFile().writeShort((short)objects.length);
  if (fieldWriters == null || fieldWriters.length < objects.length) {
    createReadersAndWriters(objects.length);
  }
  for (int i=0; i < objects.length; i++) {
    if (i >= fieldWriters.length) {
      fieldWriters[fieldWriters.length - 1].write(getRandomAccessFile(),objects[i]);
    }
 else {
      fieldWriters[i].write(getRandomAccessFile(),objects[i]);
    }
  }
}",0.9790732436472348
65149,"protected Object readObject() throws IOException {
  short fieldCount=randomAccessFile.readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    if (i < fieldReaders.length && fieldReaders[i].getDataType() != fieldWriters[i].getDataType())     fieldReaders[i].setDataType(fieldWriters[i].getDataType());
    if (i >= fieldReaders.length) {
      objects[i]=fieldReaders[fieldReaders.length - 1].read(randomAccessFile);
    }
 else {
      objects[i]=fieldReaders[i].read(randomAccessFile);
    }
  }
  return creator.createInstance(objects);
}","protected Object readObject() throws IOException {
  short fieldCount=getRandomAccessFile().readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    if (i < fieldReaders.length && fieldReaders[i].getDataType() != fieldWriters[i].getDataType())     fieldReaders[i].setDataType(fieldWriters[i].getDataType());
    if (i >= fieldReaders.length) {
      objects[i]=fieldReaders[fieldReaders.length - 1].read(getRandomAccessFile());
    }
 else {
      objects[i]=fieldReaders[i].read(getRandomAccessFile());
    }
  }
  return creator.createInstance(objects);
}",0.9838585703305148
65150,"/** 
 * @param parent A widget which will be the parent of the new instance (cannot be null)
 * @param style The style of widget to construct
 */
public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(2,15));
  IDescriptorProvider provider=new TextPropertyDescriptorProvider(ImageHandle.ALT_TEXT_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection section=new TextSection(provider.getDisplayName(),container,true);
  section.setProvider(provider);
  section.setStyle(SWT.SINGLE);
  section.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT,section);
  IDescriptorProvider keyProvider=new TextPropertyDescriptorProvider(ImageHandle.ALT_TEXT_KEY_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection keySection=new TextSection(keyProvider.getDisplayName(),container,true);
  keySection.setProvider(keyProvider);
  keySection.setStyle(SWT.SINGLE);
  keySection.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT_KEY,keySection);
  createSections();
  layoutSections();
}","/** 
 * @param parent A widget which will be the parent of the new instance (cannot be null)
 * @param style The style of widget to construct
 */
public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(2,15));
  IDescriptorProvider provider=new TextPropertyDescriptorProvider(IImageItemModel.ALT_TEXT_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection section=new TextSection(provider.getDisplayName(),container,true);
  section.setProvider(provider);
  section.setStyle(SWT.SINGLE);
  section.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT,section);
  IDescriptorProvider keyProvider=new TextPropertyDescriptorProvider(IImageItemModel.ALT_TEXT_KEY_PROP,ReportDesignConstants.IMAGE_ITEM);
  TextSection keySection=new TextSection(keyProvider.getDisplayName(),container,true);
  keySection.setProvider(keyProvider);
  keySection.setStyle(SWT.SINGLE);
  keySection.setWidth(500);
  addSection(PageSectionId.ALTER_ALT_TEXT_KEY,keySection);
  createSections();
  layoutSections();
}",0.9846889952153112
65151,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_4_2_2;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_4_2_3;
}",0.9879518072289156
65152,"/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  if (writer == null || name == null)   return;
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + PREFIX_RESULTSET + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
    dataOutputStream.close();
  }
}","/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  if (writer == null || name == null)   return;
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  resultSets=sortRsBeforeSaving(resultSets);
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + PREFIX_RESULTSET + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
    dataOutputStream.close();
  }
}",0.9732302201070792
65153,"public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}","public void stop(BundleContext context) throws Exception {
  plugin=null;
  ClassLoaderProvider.releaseInstance();
  super.stop(context);
}",0.8270042194092827
65154,"private URLClassLoader getPojoDataSetClassLoader() throws OdaException {
  URLParser up=new URLParser(appContext);
  URL[] urls=up.parse(pojoDataSetClassPath);
  logger.log(Level.INFO,""String_Node_Str"" + Arrays.toString(urls) + ""String_Node_Str"");
  return new URLClassLoader(urls,Activator.class.getClassLoader());
}","private URLClassLoader getPojoDataSetClassLoader() throws OdaException {
  URLParser up=new URLParser(appContext);
  URL[] urls=up.parse(pojoDataSetClassPath);
  logger.log(Level.INFO,""String_Node_Str"" + Arrays.toString(urls) + ""String_Node_Str"");
  URLClassLoader loader=ClassLoaderProvider.getInstance().getClassLoader(urls);
  return loader;
}",0.7662141779788839
65155,"public void close() throws OdaException {
  currentRowId=0;
  if (pojoDataSet != null) {
    pojoDataSet.close();
  }
  if (pojoClassLoader != null) {
    pojoClassLoader.close();
  }
}","public void close() throws OdaException {
  currentRowId=0;
  if (pojoDataSet != null) {
    pojoDataSet.close();
  }
}",0.7828947368421053
65156,"public static ClassMethodFieldBuffer getInstance(){
  return instance;
}","public static ClassMethodFieldBuffer getInstance(){
synchronized (ClassMethodFieldBuffer.class) {
    if (instance == null)     instance=new ClassMethodFieldBuffer();
  }
  return instance;
}",0.5475285171102662
65157,"private String enableURI(String location){
  String result=location.replace(""String_Node_Str"",""String_Node_Str"");
  if (File.separatorChar != '/') {
    result=result.replace(File.separatorChar,'/');
  }
  if (!result.endsWith(""String_Node_Str"") && !result.endsWith(""String_Node_Str"")) {
    if (result.charAt(result.length() - 1) != '/') {
      result+=""String_Node_Str"";
    }
  }
  return result;
}","/** 
 * @param location
 * @return
 */
private String enableURI(String location){
  String result=location;
  try {
    if (File.separatorChar != '/')     location=location.replace(File.separatorChar,'/');
    if (location.startsWith(""String_Node_Str"")) {
      result=new File(location).toURI().toASCIIString().replace(new File(""String_Node_Str"").toURI().toASCIIString(),""String_Node_Str"");
    }
 else     result=new File(location).toURI().toASCIIString().replace(new File(""String_Node_Str"").toURI().toASCIIString(),""String_Node_Str"");
  }
 catch (  Exception e) {
    return location;
  }
  return result;
}",0.3181818181818182
65158,"/** 
 * parse <code>classPath</code> into an array containing <code>java.net.URL<code>
 * @param classPath : each path is separated with <code>Constants.CLASS_PATH_SEPERATOR</code>
 * @return
 * @throws OdaException if error/exception occur during parsing
 */
public URL[] parse(String classPath) throws OdaException {
  if (classPath == null) {
    return new URL[0];
  }
  String[] paths=classPath.split(String.valueOf(Constants.CLASS_PATH_SEPERATOR));
  List<URL> urls=new ArrayList<URL>();
  for (  String path : paths) {
    path=path.trim();
    if (path.equals(""String_Node_Str"")) {
      continue;
    }
    URI uri=null;
    if ((new File(path)).isAbsolute()) {
      uri=new File(path).toURI();
      try {
        urls.add(uri.toURL());
      }
 catch (      MalformedURLException e) {
        throw new OdaException(e);
      }
    }
 else {
      try {
        uri=new URI(enableURI(path));
      }
 catch (      URISyntaxException e) {
        throw new OdaException(e);
      }
      URI resovledUri=null;
      if (resourceIdentifiers != null) {
        resovledUri=ResourceIdentifiers.resolveApplResource(resourceIdentifiers,uri);
        if (resovledUri == null) {
          logger.log(Level.WARNING,""String_Node_Str"" + uri + ""String_Node_Str""+ ResourceIdentifiers.getApplResourceBaseURI(resourceIdentifiers)+ ')');
          resovledUri=ResourceIdentifiers.resolveDesignResource(resourceIdentifiers,uri);
        }
      }
      if (resovledUri == null) {
        logger.log(Level.WARNING,""String_Node_Str"" + uri);
      }
 else {
        try {
          urls.add(resovledUri.toURL());
        }
 catch (        MalformedURLException e) {
          throw new OdaException(e);
        }
      }
    }
  }
  return urls.toArray(new URL[0]);
}","/** 
 * parse <code>classPath</code> into an array containing <code>java.net.URL<code>
 * @param classPath : each path is separated with <code>Constants.CLASS_PATH_SEPERATOR</code>
 * @return
 * @throws OdaException if error/exception occur during parsing
 */
public URL[] parse(String classPath) throws OdaException {
  if (classPath == null) {
    return new URL[0];
  }
  String[] paths=classPath.split(String.valueOf(Constants.CLASS_PATH_SEPERATOR));
  List<URL> urls=new ArrayList<URL>();
  for (  String path : paths) {
    path=path.trim();
    if (path.equals(""String_Node_Str"")) {
      continue;
    }
    URI uri=null;
    if ((new File(path)).isAbsolute()) {
      uri=new File(path).toURI();
      try {
        urls.add(uri.toURL());
      }
 catch (      MalformedURLException e) {
        throw new OdaException(e);
      }
    }
 else {
      try {
        uri=new URI(resolveURI(path));
      }
 catch (      URISyntaxException e) {
        throw new OdaException(e);
      }
      if (resourceIdentifiers != null) {
        URI resovledUri=ResourceIdentifiers.resolveApplResource(resourceIdentifiers,uri);
        if (resovledUri == null) {
          logger.log(Level.WARNING,""String_Node_Str"" + uri + ""String_Node_Str""+ ResourceIdentifiers.getApplResourceBaseURI(resourceIdentifiers)+ ')');
          resovledUri=ResourceIdentifiers.resolveDesignResource(resourceIdentifiers,uri);
        }
        if (resovledUri == null) {
          logger.log(Level.WARNING,""String_Node_Str"" + uri);
        }
 else {
          try {
            try {
              String urlpath=enableURI(URLDecoder.decode(resovledUri.toString(),""String_Node_Str""));
              urls.add(new URL(urlpath));
            }
 catch (            UnsupportedEncodingException e) {
              urls.add(resovledUri.toURL());
            }
          }
 catch (          MalformedURLException e) {
            throw new OdaException(e);
          }
        }
      }
 else {
        try {
          urls.add(uri.toURL());
        }
 catch (        MalformedURLException e) {
          throw new OdaException(e);
        }
      }
    }
  }
  return urls.toArray(new URL[0]);
}",0.8728014274789702
65159,"public IBinding adaptBinding(ComputedColumnHandle handle,ExpressionLocation el) throws AdapterException {
  if (el.equals(ExpressionLocation.TABLE)) {
    return this.adaptBinding(handle);
  }
 else {
    Binding binding=null;
    try {
      binding=new Binding(handle.getName());
      binding.setAggrFunction(handle.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
      binding.setDisplayName(handle.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,this.context.getDataEngineContext().getLocale()));
      binding.setExportable(handle.allowExport());
      if (handle.getElementHandle() instanceof ReportItemHandle && LinkedDataSetUtil.bindToLinkedDataSet(((ReportItemHandle)handle.getElementHandle()))) {
        binding.setExpression(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.TABLE));
      }
 else {
        binding.setExpression(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
      binding.setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
      if (handle.getFilterExpression() != null) {
        binding.setFilter(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
      for (Iterator argItr=handle.argumentsIterator(); argItr.hasNext(); ) {
        AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
        binding.addArgument(aah.getName(),adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      binding.setTimeFunction(adaptTimeFunction(handle));
    }
 catch (    BirtException ex) {
      throw new AdapterException(ex.getLocalizedMessage());
    }
    return binding;
  }
}","public IBinding adaptBinding(ComputedColumnHandle handle,ExpressionLocation el) throws AdapterException {
  if (el.equals(ExpressionLocation.TABLE)) {
    return this.adaptBinding(handle);
  }
 else {
    Binding binding=null;
    try {
      binding=new Binding(handle.getName());
      binding.setAggrFunction(handle.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
      binding.setDisplayName(handle.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,this.context.getDataEngineContext().getLocale()));
      binding.setExportable(handle.allowExport());
      ExpressionLocation location=el;
      if (handle.getElementHandle() instanceof ReportItemHandle && LinkedDataSetUtil.bindToLinkedDataSet(((ReportItemHandle)handle.getElementHandle()))) {
        location=ExpressionLocation.TABLE;
      }
      binding.setExpression(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),location));
      if (handle.getFilterExpression() != null) {
        binding.setFilter(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),location));
      }
      binding.setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
      for (Iterator argItr=handle.argumentsIterator(); argItr.hasNext(); ) {
        AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
        binding.addArgument(aah.getName(),adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),location));
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      binding.setTimeFunction(adaptTimeFunction(handle));
    }
 catch (    BirtException ex) {
      throw new AdapterException(ex.getLocalizedMessage());
    }
    return binding;
  }
}",0.8672839506172839
65160,"public void run(){
  if (measureViewHandle != null) {
    reportHandle=measureViewHandle.getCrosstab();
  }
  reportHandle.getModuleHandle().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
  DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
  dialog.setInput((ReportItemHandle)reportHandle.getModelHandle());
  dialog.setAggreate(true);
  dialog.setTimePeriod(true);
  if (dialog.open() == Dialog.OK) {
    int index=caleIndex();
    try {
      ComputedColumnHandle bindingHandle=dialog.getBindingColumn();
      ComputedMeasureViewHandle computedMeasure=reportHandle.insertComputedMeasure(bindingHandle.getName(),index);
      computedMeasure.addHeader();
      ExtendedItemHandle crosstabModelHandle=(ExtendedItemHandle)reportHandle.getModelHandle();
      if (bindingHandle == null) {
        reportHandle.getModuleHandle().getCommandStack().rollbackAll();
        return;
      }
      DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(bindingHandle.getName());
      CrosstabAdaptUtil.formatDataItem(computedMeasure.getCubeMeasure(),dataHandle);
      dataHandle.setResultSetColumn(bindingHandle.getName());
      AggregationCellHandle cell=computedMeasure.getCell();
      if (ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL.equals(reportHandle.getMeasureDirection())) {
        CrosstabCellHandle cellHandle=computedMeasure.getHeader();
        if (cellHandle == null) {
          cellHandle=cell;
        }
        String defaultUnit=reportHandle.getModelHandle().getModuleHandle().getDefaultUnits();
      }
      cell.addContent(dataHandle);
    }
 catch (    SemanticException e) {
      reportHandle.getModuleHandle().getCommandStack().rollbackAll();
    }
  }
  reportHandle.getModuleHandle().getCommandStack().commit();
}","public void run(){
  if (measureViewHandle != null) {
    reportHandle=measureViewHandle.getCrosstab();
  }
  reportHandle.getModuleHandle().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
  DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
  dialog.setInput((ReportItemHandle)reportHandle.getModelHandle());
  dialog.setAggreate(true);
  dialog.setTimePeriod(true);
  if (dialog.open() == Dialog.OK) {
    int index=caleIndex();
    try {
      ComputedColumnHandle bindingHandle=dialog.getBindingColumn();
      ComputedMeasureViewHandle computedMeasure=reportHandle.insertComputedMeasure(bindingHandle.getName(),index);
      computedMeasure.addHeader();
      ExtendedItemHandle crosstabModelHandle=(ExtendedItemHandle)reportHandle.getModelHandle();
      if (bindingHandle == null) {
        reportHandle.getModuleHandle().getCommandStack().rollbackAll();
        return;
      }
      DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(bindingHandle.getName());
      CrosstabAdaptUtil.formatDataItem(computedMeasure.getCubeMeasure(),dataHandle);
      dataHandle.setResultSetColumn(bindingHandle.getName());
      AggregationCellHandle cell=computedMeasure.getCell();
      if (ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL.equals(reportHandle.getMeasureDirection())) {
        CrosstabCellHandle cellHandle=computedMeasure.getHeader();
        if (cellHandle == null) {
          cellHandle=cell;
        }
        String defaultUnit=reportHandle.getModelHandle().getModuleHandle().getDefaultUnits();
      }
      cell.addContent(dataHandle);
      reportHandle.getModuleHandle().getCommandStack().commit();
    }
 catch (    SemanticException e) {
      reportHandle.getModuleHandle().getCommandStack().rollbackAll();
      return;
    }
  }
 else {
    reportHandle.getModuleHandle().getCommandStack().rollbackAll();
  }
}",0.968021680216802
65161,"public Object load(){
  ReportItemHandle element=getReportItemHandle();
  int type=element.getDataBindingType();
  List referenceList=getAvailableDataBindingReferenceList(element);
  String[] references=new String[referenceList.size() + 1];
  references[0]=NONE;
  for (int i=0; i < referenceList.size(); i++) {
    references[i + 1]=((ReportItemHandle)referenceList.get(i)).getQualifiedName();
  }
  setReferences(references);
  Object value;
switch (type) {
case ReportItemHandle.DATABINDING_TYPE_DATA:
    DataSetHandle dataset=ChartReportItemHelper.instance().getBindingDataSetHandle(element);
  CubeHandle cube=ChartReportItemHelper.instance().getBindingCubeHandle(element);
if (dataset == null && cube == null) value=NONE;
 else if (dataset != null) value=dataset.getQualifiedName();
 else value=cube.getName();
break;
case ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF:
ReportItemHandle reference=element.getDataBindingReference();
if (reference == null) value=NONE;
 else value=reference.getQualifiedName();
break;
default :
value=NONE;
}
BindingInfo info=new BindingInfo(type,value);
if (ChartReportItemUtil.isChildOfMultiViewsHandle(getReportItemHandle())) {
Object name=element.getContainer().getContainer().getQualifiedName();
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
name=(name == null) ? NONE : name;
info.setBindingValue(name);
info.setReadOnly(true);
}
if (ChartCubeUtil.isPlotChart(element) || ChartCubeUtil.isAxisChart(element)) {
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
info.setReadOnly(true);
}
return info;
}","public Object load(){
  ReportItemHandle element=getReportItemHandle();
  boolean isNotDataModel=false;
  ;
  int type=element.getDataBindingType();
  List referenceList=getAvailableDataBindingReferenceList(element);
  String[] references=new String[referenceList.size() + 1];
  references[0]=NONE;
  for (int i=0; i < referenceList.size(); i++) {
    references[i + 1]=((ReportItemHandle)referenceList.get(i)).getQualifiedName();
  }
  setReferences(references);
  String value;
switch (type) {
case ReportItemHandle.DATABINDING_TYPE_DATA:
    DataSetHandle dataset=ChartReportItemHelper.instance().getBindingDataSetHandle(element);
  CubeHandle cube=ChartReportItemHelper.instance().getBindingCubeHandle(element);
if (dataset == null && cube == null) {
  value=NullDatasetChoice.getBindingValue();
  isNotDataModel=true;
}
 else if (dataset != null) {
  List datasets=element.getModuleHandle().getAllDataSets();
  if (datasets != null) {
    for (int i=0; i < datasets.size(); i++) {
      if (datasets.get(i) == dataset) {
        isNotDataModel=true;
        break;
      }
    }
  }
  value=dataset.getQualifiedName();
}
 else {
  List cubes=element.getModuleHandle().getAllCubes();
  if (cubes != null) {
    for (int i=0; i < cubes.size(); i++) {
      if (cubes.get(i) == cube) {
        isNotDataModel=true;
        break;
      }
    }
  }
  value=cube.getName();
}
break;
case ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF:
ReportItemHandle reference=element.getDataBindingReference();
if (reference == null) value=NONE;
 else value=reference.getQualifiedName();
break;
default :
{
value=NullDatasetChoice.getBindingValue();
isNotDataModel=true;
}
}
BindingInfo info=new BindingInfo(type,value,isNotDataModel);
if (ChartReportItemUtil.isChildOfMultiViewsHandle(getReportItemHandle())) {
String name=element.getContainer().getContainer().getQualifiedName();
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
name=(name == null) ? NONE : name;
info.setBindingValue(name);
info.setReadOnly(true);
}
if (ChartCubeUtil.isPlotChart(element) || ChartCubeUtil.isAxisChart(element)) {
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
info.setReadOnly(true);
}
return info;
}",0.8222978277937713
65162,"private void resetDataSetReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    getReportItemHandle().setDataBindingReference(null);
    DataSetHandle dataSet=null;
    if (value != null) {
      dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setCube(null);
    getReportItemHandle().setDataSet(dataSet);
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    getDependedProvider().generateAllBindingColumns();
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}","private void resetDataSetReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    getReportItemHandle().setDataBindingReference(null);
    DataSetHandle dataSet=null;
    if (value != null) {
      dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setCube(null);
    if (dataSet == null && value != null) {
      getReportItemHandle().setDataSet(null);
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),value);
    }
 else {
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),null);
      getReportItemHandle().setDataSet(dataSet);
    }
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    getDependedProvider().generateAllBindingColumns();
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}",0.83718820861678
65163,"private void resetCubeReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    CubeHandle cubeHandle=null;
    if (value != null) {
      cubeHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().findCube(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setDataSet(null);
    getReportItemHandle().setCube(cubeHandle);
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}","private void resetCubeReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    CubeHandle cubeHandle=null;
    if (value != null) {
      cubeHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().findCube(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setDataSet(null);
    if (cubeHandle == null && value != null) {
      getReportItemHandle().setDataSet(null);
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),value);
    }
 else {
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),null);
      getReportItemHandle().setCube(cubeHandle);
    }
    getReportItemHandle().setCube(cubeHandle);
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}",0.8399803052683407
65164,"public String[] getAvailableDatasetItems(){
  String[] dataSets=ChoiceSetFactory.getDataSets();
  String[] cubes=getCubes();
  int length=1;
  if (dataSets.length > 0)   length+=(dataSets.length + 1);
  if (cubes.length > 0)   length+=(cubes.length + 1);
  String[] newList=new String[length];
  newList[0]=NONE;
  if (dataSets.length > 0) {
    newList[1]=DATA_SETS_DEFAULT;
    System.arraycopy(dataSets,0,newList,2,dataSets.length);
  }
  if (cubes.length > 0) {
    newList[newList.length - cubes.length - 1]=DATA_CUBES_DEFAULT;
    System.arraycopy(cubes,0,newList,newList.length - cubes.length,cubes.length);
  }
  return newList;
}","public BindingInfo[] getAvailableDatasetItems(){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  List<DataSetHandle> dataSets=UIUtil.getVisibleDataSetHandles(handle);
  List<CubeHandle> cubes=handle.getVisibleCubes();
  int length=1;
  if (dataSets.size() > 0)   length+=(dataSets.size() + 1);
  if (cubes.size() > 0)   length+=(cubes.size() + 1);
  BindingInfo[] newList=new BindingInfo[length];
  newList[0]=NullDatasetChoice;
  if (dataSets.size() > 0) {
    newList[1]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,DATA_SETS_DEFAULT,true);
    for (int i=0; i < dataSets.size(); i++) {
      DataSetHandle dataSet=dataSets.get(i);
      if (handle.findDataSet(dataSet.getQualifiedName()) == dataSet) {
        newList[i + 2]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,dataSet.getQualifiedName(),true);
      }
 else {
        newList[i + 2]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,dataSet.getQualifiedName(),false);
      }
    }
  }
  if (cubes.size() > 0) {
    newList[newList.length - cubes.size() - 1]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,DATA_CUBES_DEFAULT,true);
    ;
    for (int i=0; i < cubes.size(); i++) {
      CubeHandle cube=cubes.get(i);
      newList[i + newList.length - cubes.size()]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,cube.getQualifiedName(),true);
    }
  }
  return newList;
}",0.1960019502681618
65165,"public int getSubQueryStartingIndex() throws DataException {
  if (!subQueryOnGroup)   return this.parentIterator.getCurrentResultIndex();
  int groupIndex=this.parentIterator.getCurrentGroupIndex(groupLevel);
  int[] groupStartingEndingIndex=this.parentIterator.getGroupStartAndEndIndex(groupLevel);
  return (this.parentExecutor instanceof ISubQueryExecutor) ? ((ISubQueryExecutor)this.parentExecutor).getSubQueryStartingIndex() + groupStartingEndingIndex[groupIndex * 2] : groupStartingEndingIndex[groupIndex * 2];
}","public int getSubQueryStartingIndex() throws DataException {
  if (!subQueryOnGroup)   return this.parentIterator.getCurrentResultIndex();
  if (parentIterator instanceof EmptyResultIterator)   return 0;
  int groupIndex=this.parentIterator.getCurrentGroupIndex(groupLevel);
  int[] groupStartingEndingIndex=this.parentIterator.getGroupStartAndEndIndex(groupLevel);
  return (this.parentExecutor instanceof ISubQueryExecutor) ? ((ISubQueryExecutor)this.parentExecutor).getSubQueryStartingIndex() + groupStartingEndingIndex[groupIndex * 2] : groupStartingEndingIndex[groupIndex * 2];
}",0.941069809610154
65166,"protected void okPressed(){
  try {
    if (bindingColumn != null) {
      if (dialogHelper.differs(bindingColumn)) {
        if (isNeedPrompt() && isBindingMultipleReferenced()) {
          MessageDialog dialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
          int dialogClick=dialog.open();
          if (dialogClick == 0) {
            InputDialog inputDialog=new InputDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",new IInputValidator(){
              public String isValid(              String newText){
                for (Iterator iterator=DEUtil.getBindingHolder(bindingObject).getColumnBindings().iterator(); iterator.hasNext(); ) {
                  ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
                  if (computedColumn.getName().equals(newText)) {
                    return Messages.getFormattedString(""String_Node_Str"",new Object[]{newText});
                  }
                }
                return null;
              }
            }
);
            if (inputDialog.open() == Window.OK) {
              bindingColumn=dialogHelper.newBinding(DEUtil.getBindingHolder(bindingObject),inputDialog.getValue());
              super.okPressed();
              return;
            }
 else {
              return;
            }
          }
 else           if (dialogClick == 2) {
            return;
          }
        }
        if (!dialogHelper.canProcessWithWarning())         return;
        bindingColumn=dialogHelper.editBinding(bindingColumn);
      }
    }
 else {
      if (!dialogHelper.canProcessWithWarning())       return;
      if (bindSelf)       bindingColumn=dialogHelper.newBinding(bindingObject,null);
 else       bindingColumn=dialogHelper.newBinding(DEUtil.getBindingHolder(bindingObject),null);
    }
    if (ExtendedDataModelUIAdapterHelper.isBoundToExtendedData(DEUtil.getBindingHolder(bindingObject))) {
      IStatus status=DataModelAdapterUtil.validateRelativeTimePeriod(DEUtil.getBindingHolder(bindingObject),bindingColumn);
      if (status.getSeverity() == IStatus.ERROR) {
        MessageDialog.openError(UIUtil.getDefaultShell(),null,status.getMessage());
        return;
      }
    }
    super.okPressed();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","protected void okPressed(){
  try {
    if (bindingColumn != null) {
      if (dialogHelper.differs(bindingColumn)) {
        if (isNeedPrompt() && isBindingMultipleReferenced()) {
          MessageDialog dialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.QUESTION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
          int dialogClick=dialog.open();
          if (dialogClick == 0) {
            InputDialog inputDialog=new InputDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",new IInputValidator(){
              public String isValid(              String newText){
                for (Iterator iterator=DEUtil.getBindingHolder(bindingObject).getColumnBindings().iterator(); iterator.hasNext(); ) {
                  ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
                  if (computedColumn.getName().equals(newText)) {
                    return Messages.getFormattedString(""String_Node_Str"",new Object[]{newText});
                  }
                }
                return null;
              }
            }
);
            if (inputDialog.open() == Window.OK) {
              bindingColumn=dialogHelper.newBinding(DEUtil.getBindingHolder(bindingObject),inputDialog.getValue());
              super.okPressed();
              return;
            }
 else {
              return;
            }
          }
 else           if (dialogClick == 2) {
            return;
          }
        }
        if (!dialogHelper.canProcessWithWarning())         return;
        bindingColumn=dialogHelper.editBinding(bindingColumn);
      }
    }
 else {
      if (!dialogHelper.canProcessWithWarning())       return;
      if (bindSelf)       bindingColumn=dialogHelper.newBinding(bindingObject,null);
 else       bindingColumn=dialogHelper.newBinding(DEUtil.getBindingHolder(bindingObject),null);
    }
    if (ExtendedDataModelUIAdapterHelper.isBoundToExtendedData(DEUtil.getBindingHolder(bindingObject))) {
      DataModelAdapterStatus status=DataModelAdapterUtil.validateRelativeTimePeriod(DEUtil.getBindingHolder(bindingObject),bindingColumn);
      if (status.getStatus() == DataModelAdapterStatus.Status.FAIL) {
        MessageDialog.openError(UIUtil.getDefaultShell(),null,status.getMessage());
        return;
      }
    }
    super.okPressed();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9857363145720894
65167,"protected void okPressed(){
  if (canSelect) {
    setResult(selectedColumnName);
    if (inputElement instanceof DataItemHandle) {
      try {
        ((DataItemHandle)inputElement).setResultSetColumn(selectedColumnName);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
  if (ExtendedDataModelUIAdapterHelper.isBoundToExtendedData(inputElement)) {
    IStatus status=DataModelAdapterUtil.validateRelativeTimePeriod(inputElement,getSelectColumnHandle());
    if (status.getSeverity() == IStatus.ERROR) {
      MessageDialog.openError(UIUtil.getDefaultShell(),null,status.getMessage());
      return;
    }
  }
  super.okPressed();
}","protected void okPressed(){
  if (canSelect) {
    setResult(selectedColumnName);
    if (inputElement instanceof DataItemHandle) {
      try {
        ((DataItemHandle)inputElement).setResultSetColumn(selectedColumnName);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
  if (ExtendedDataModelUIAdapterHelper.isBoundToExtendedData(inputElement)) {
    DataModelAdapterStatus status=DataModelAdapterUtil.validateRelativeTimePeriod(inputElement,getSelectColumnHandle());
    if (status.getStatus() == DataModelAdapterStatus.Status.FAIL) {
      MessageDialog.openError(UIUtil.getDefaultShell(),null,status.getMessage());
      return;
    }
  }
  super.okPressed();
}",0.9471428571428572
65168,"public static IStatus validateRelativeTimePeriod(ReportItemHandle reportItemHandle,ComputedColumnHandle computedColumnHandle){
  return new Status(IStatus.OK,Activator.PLUGIN_ID,""String_Node_Str"");
}","public static DataModelAdapterStatus validateRelativeTimePeriod(ReportItemHandle reportItemHandle,ComputedColumnHandle computedColumnHandle){
  return new DataModelAdapterStatus(DataModelAdapterStatus.Status.SUCCESS,""String_Node_Str"");
}",0.8119266055045872
65169,"/** 
 * uses to clear the data cach.
 * @param dataSet the dataset handle
 * @throws BirtException
 */
public void clearCache(DataSetHandle dataSet) throws BirtException {
  DataSessionContext context;
  DataRequestSession requestSession=null;
  try {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle(),null);
    requestSession=DataRequestSession.newSession(context);
    IModelAdapter modelAdaptor=requestSession.getModelAdaptor();
    DataSourceHandle dataSource=dataSet.getDataSource();
    IBaseDataSourceDesign sourceDesign=modelAdaptor.adaptDataSource(dataSource);
    IBaseDataSetDesign dataSetDesign=modelAdaptor.adaptDataSet(dataSet);
    requestSession.clearCache(sourceDesign,dataSetDesign);
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
 finally {
    if (requestSession != null) {
      requestSession.shutdown();
    }
  }
}","/** 
 * uses to clear the data cach.
 * @param dataSet the dataset handle
 * @throws BirtException
 */
public void clearCache(DataSetHandle dataSet) throws BirtException {
  DataSessionContext context;
  DataRequestSession requestSession=null;
  try {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle(),null);
    requestSession=DataRequestSession.newSession(context);
    IModelAdapter modelAdaptor=requestSession.getModelAdaptor();
    DataSourceHandle dataSource=dataSet.getDataSource();
    IBaseDataSourceDesign sourceDesign=modelAdaptor.adaptDataSource(dataSource);
    IBaseDataSetDesign dataSetDesign=modelAdaptor.adaptDataSet(dataSet);
    requestSession.clearCache(sourceDesign,dataSetDesign);
  }
  finally {
    if (requestSession != null) {
      requestSession.shutdown();
    }
  }
}",0.9676320272572402
65170,"/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  try {
    if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))     throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,Integer.valueOf(mode));
    this.mode=mode;
    this.moduleHandle=moduleHandle;
    this.appClassLoader=classLoader;
    ScriptContext internalScriptContext=null;
    if (scriptContext == null) {
      internalScriptContext=new ScriptContext();
      scriptContext=internalScriptContext.newContext(this.getTopScope());
      DataEngineThreadLocal.getInstance().getCloseListener().add(new ScriptContextCloser(internalScriptContext));
    }
    this.sContext=scriptContext;
    this.topScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
    this.hasExternalScope=topScope != null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}","/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  try {
    if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))     throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,Integer.valueOf(mode));
    this.mode=mode;
    this.moduleHandle=moduleHandle;
    this.appClassLoader=classLoader;
    this.hasExternalScope=scriptContext != null;
    ScriptContext internalScriptContext=null;
    if (scriptContext == null) {
      internalScriptContext=new ScriptContext();
      scriptContext=internalScriptContext.newContext(this.getTopScope());
      DataEngineThreadLocal.getInstance().getCloseListener().add(new ScriptContextCloser(internalScriptContext));
    }
    this.sContext=scriptContext;
    this.topScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}",0.9175557710960232
65171,"public Map getAllExtensionProperties(){
  return new HashMap();
}","public Map getAllExtensionProperties(){
  return properties;
}",0.8503937007874016
65172,"public String getExtensionProperty(String name){
  return null;
}","public String getExtensionProperty(String name){
  return properties.get(name);
}",0.8493150684931506
65173,"public void setExtensionProperty(String name,String value){
}","public void setExtensionProperty(String name,String value){
  properties.put(name,value);
}",0.8026315789473685
65174,"private void iterateOnRows(IContainerArea table){
  int internalRowCount=currentRow;
  currentRow=0;
  Iterator<IArea> iter=table.getChildren();
  while (iter.hasNext()) {
    IArea child=iter.next();
    if (child instanceof RowArea) {
      drawRow((RowArea)child);
      currentRow++;
    }
 else {
      currentX+=getX(table);
      currentY+=getY(table);
      updateRenderXY();
      iterateOnRows((TableGroupArea)child);
      currentX-=getX(table);
      currentY-=getY(table);
      updateRenderXY();
      currentRow=internalRowCount + 1;
    }
  }
}","private void iterateOnRows(IContainerArea table){
  int internalRowCount=currentRow;
  currentRow=0;
  Iterator<IArea> iter=table.getChildren();
  while (iter.hasNext()) {
    IArea child=iter.next();
    if (child instanceof RowArea) {
      drawRow((RowArea)child);
      currentRow++;
    }
 else {
      currentX+=getX(table);
      currentY+=getY(table);
      internalRowCount=currentRow;
      updateRenderXY();
      iterateOnRows((TableGroupArea)child);
      currentX-=getX(table);
      currentY-=getY(table);
      updateRenderXY();
      currentRow=internalRowCount + 1;
    }
  }
}",0.9696969696969696
65175,"private void writeColumnsWidth(TableArea tablearea){
  numOfColumns=tablearea.getColumnCount();
  int columnWidth=0;
  int cellwidth=0;
  writer.openTag(""String_Node_Str"");
  for (int i=0; i < numOfColumns; i++) {
    cellwidth=tablearea.getCellWidth(i,i + 1);
    if (cellwidth <= 0) {
      CellArea ca=((RowArea)tablearea.getChild(0)).getCell(i);
      if (ca != null) {
        cellwidth=ca.getWidth();
      }
    }
    if (cellwidth > 0) {
      columnWidth=PPTXUtil.convertToEnums(cellwidth);
    }
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",columnWidth);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}","private void writeColumnsWidth(TableArea tablearea){
  numOfColumns=tablearea.getColumnCount();
  int columnWidth=0;
  int cellwidth=0;
  writer.openTag(""String_Node_Str"");
  int defaultwidth=tablearea.getWidth() / numOfColumns;
  for (int i=0; i < numOfColumns; i++) {
    cellwidth=tablearea.getCellWidth(i,i + 1);
    if (cellwidth <= 0) {
      cellwidth=defaultwidth;
    }
    columnWidth=PPTXUtil.convertToEnums(getScaledValue(cellwidth));
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",columnWidth);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}",0.5448963929393706
65176,"protected void drawRow(RowArea row){
  if (row.getChildrenCount() == 0) {
    return;
  }
  currentX+=getX(row);
  currentY+=getY(row);
  BoxStyle style=row.getBoxStyle();
  if (style.getBackgroundColor() == null && style.getBackgroundImage() == null) {
    style=row.getParent().getBoxStyle();
  }
  rowStyleStack.push(style);
  startRow(row);
  Iterator<IArea> iter=row.getChildren();
  currentCol=0;
  fillEmptyMergeCells(0,0,0);
  while (iter.hasNext()) {
    IArea child=iter.next();
    drawCell((CellArea)child);
  }
  endRow();
  rowStyleStack.pop();
  currentX-=getX(row);
  currentY-=getY(row);
}","protected void drawRow(RowArea row){
  row.setRowID(currentRow);
  if (row.getChildrenCount() == 0) {
    return;
  }
  currentX+=getX(row);
  currentY+=getY(row);
  BoxStyle style=row.getBoxStyle();
  if (style.getBackgroundColor() == null && style.getBackgroundImage() == null) {
    style=row.getParent().getBoxStyle();
  }
  rowStyleStack.push(style);
  startRow(row);
  Iterator<IArea> iter=row.getChildren();
  currentCol=0;
  fillEmptyMergeCells(0,0,0);
  while (iter.hasNext()) {
    IArea child=iter.next();
    drawCell((CellArea)child);
  }
  endRow();
  rowStyleStack.pop();
  currentX-=getX(row);
  currentY-=getY(row);
}",0.9774193548387096
65177,"/** 
 * assume leftborder is always draw
 * @param container
 */
protected void drawBorders(CellArea container){
  BoxStyle style=container.getBoxStyle();
  if (style == null)   return;
  BorderInfo baseborderinfo=style.getLeftBorder();
  writeSingleBorder(LEFTBORDERLINE,baseborderinfo);
  BorderInfo currentborderinfo=style.getRightBorder();
  if (currentborderinfo != null) {
    writeSingleBorder(RIGHTBORDERLINE,currentborderinfo);
    baseborderinfo=currentborderinfo;
  }
 else {
    CellArea nextcell=((RowArea)container.getParent()).getCell(currentCol + colspan);
    if (nextcell != null) {
      writeSingleBorder(RIGHTBORDERLINE,nextcell.getBoxStyle().getLeftBorder());
    }
  }
  writeSingleBorder(TOPBORDERLINE,style.getTopBorder());
  baseborderinfo=currentborderinfo;
  currentborderinfo=style.getBottomBorder();
  if (currentborderinfo != null) {
    writeSingleBorder(BOTTOMBORDERLINE,style.getBottomBorder());
  }
 else {
    IArea nextcontainer=container.getParent().getParent().getChild(currentRow + 1);
    RowArea ra=null;
    while (nextcontainer instanceof TableGroupArea) {
      nextcontainer=((TableGroupArea)nextcontainer).getFirstChild();
    }
    ra=(RowArea)nextcontainer;
    CellArea belowCell=null;
    if (ra != null) {
      belowCell=ra.getCell(currentCol);
      if (belowCell != null) {
        writeSingleBorder(BOTTOMBORDERLINE,belowCell.getBoxStyle().getTopBorder());
      }
    }
  }
}","/** 
 * assume leftborder is always draw
 * @param container
 */
protected void drawBorders(CellArea container){
  BoxStyle style=container.getBoxStyle();
  if (style == null)   return;
  BorderInfo currentborderinfo=style.getLeftBorder();
  writeSingleBorder(LEFTBORDERLINE,currentborderinfo);
  currentborderinfo=style.getRightBorder();
  if (currentborderinfo != null) {
    writeSingleBorder(RIGHTBORDERLINE,currentborderinfo);
  }
 else {
    CellArea nextcell=((RowArea)container.getParent()).getCell(currentCol + colspan);
    if (nextcell != null) {
      writeSingleBorder(RIGHTBORDERLINE,nextcell.getBoxStyle().getLeftBorder());
    }
  }
  writeSingleBorder(TOPBORDERLINE,style.getTopBorder());
  currentborderinfo=null;
  RowArea currentRowArea=(RowArea)container.getParent();
  ContainerArea grandparent=currentRowArea.getParent();
  IArea nextcontainer=grandparent.getChild(currentRowArea.getRowID() + 1);
  while (nextcontainer == null && grandparent instanceof TableGroupArea) {
    IArea currentTableGroup=grandparent;
    grandparent=grandparent.getParent();
    Iterator<IArea> rowiter=grandparent.getChildren();
    while (rowiter.hasNext() && !(rowiter.next().equals(currentTableGroup)))     ;
    if (rowiter.hasNext()) {
      nextcontainer=rowiter.next();
    }
  }
  RowArea ra=null;
  while (nextcontainer instanceof TableGroupArea) {
    nextcontainer=((TableGroupArea)nextcontainer).getFirstChild();
  }
  ra=(RowArea)nextcontainer;
  CellArea belowCell=null;
  if (ra != null) {
    belowCell=ra.getCell(currentCol);
    if (belowCell != null) {
      currentborderinfo=belowCell.getBoxStyle().getTopBorder();
      writeSingleBorder(BOTTOMBORDERLINE,currentborderinfo);
    }
  }
  if (currentborderinfo == null) {
    writeSingleBorder(BOTTOMBORDERLINE,style.getBottomBorder());
  }
}",0.4853711117955035
65178,"public static int pixelToEmu(int pixels,int dpi){
  if (dpi == 0) {
    dpi=96;
  }
  return pixels * (int)((float)914400 / dpi);
}","public static int pixelToEmu(int pixels,int dpi){
  if (dpi <= 0) {
    dpi=96;
  }
  return pixels * (int)((float)914400 / dpi);
}",0.9923664122137404
65179,"/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drew
 */
public void drawContainer(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if ((null == style || style == BoxStyle.DEFAULT) && container.getHelpText() == null) {
    return;
  }
  Color bc=style.getBackgroundColor();
  BackgroundImageInfo bi=style.getBackgroundImage();
  int startX=currentX + getX(container);
  int startY=currentY + getY(container);
  int width=getWidth(container);
  int height=getHeight(container);
  if (bc != null) {
    pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
  }
  if (bi != null) {
    drawBackgroundImage(bi,startX,startY,width,height);
  }
  if (container.getHelpText() != null) {
    pageGraphic.showHelpText(container.getHelpText(),startX,startY,width,height);
  }
}","/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drew
 */
protected void drawContainer(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if ((null == style || style == BoxStyle.DEFAULT) && container.getHelpText() == null) {
    return;
  }
  Color bc=style.getBackgroundColor();
  BackgroundImageInfo bi=style.getBackgroundImage();
  int startX=currentX + getX(container);
  int startY=currentY + getY(container);
  int width=getWidth(container);
  int height=getHeight(container);
  if (bc != null) {
    pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
  }
  if (bi != null) {
    drawBackgroundImage(bi,startX,startY,width,height);
  }
  if (container.getHelpText() != null) {
    pageGraphic.showHelpText(container.getHelpText(),startX,startY,width,height);
  }
}",0.9928845101258894
65180,"public BorderInfo[] cacheBorderInfo(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if (null == style || BoxStyle.DEFAULT == style) {
    return null;
  }
  int borderTopWidth=getScaledValue(style.getTopBorderWidth());
  int borderLeftWidth=getScaledValue(style.getLeftBorderWidth());
  int borderBottomWidth=getScaledValue(style.getBottomBorderWidth());
  int borderRightWidth=getScaledValue(style.getRightBorderWidth());
  if (borderTopWidth > 0 || borderLeftWidth > 0 || borderBottomWidth > 0 || borderRightWidth > 0) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    BorderInfo[] borders=new BorderInfo[4];
    borders[BorderInfo.TOP_BORDER]=new BorderInfo(startX,startY + borderTopWidth / 2,startX + getWidth(container),startY + borderTopWidth / 2,borderTopWidth,style.getTopBorderColor(),style.getTopBorderStyle(),BorderInfo.TOP_BORDER);
    borders[BorderInfo.RIGHT_BORDER]=new BorderInfo(startX + getWidth(container) - borderRightWidth / 2,startY,startX + getWidth(container) - borderRightWidth / 2,startY + getHeight(container),borderRightWidth,style.getRightBorderColor(),style.getRightBorderStyle(),BorderInfo.RIGHT_BORDER);
    borders[BorderInfo.BOTTOM_BORDER]=new BorderInfo(startX,startY + getHeight(container) - borderBottomWidth / 2,startX + getWidth(container),startY + getHeight(container) - borderBottomWidth / 2,borderBottomWidth,style.getBottomBorderColor(),style.getBottomBorderStyle(),BorderInfo.BOTTOM_BORDER);
    borders[BorderInfo.LEFT_BORDER]=new BorderInfo(startX + borderLeftWidth / 2,startY,startX + borderLeftWidth / 2,startY + getHeight(container),borderLeftWidth,style.getLeftBorderColor(),style.getLeftBorderStyle(),BorderInfo.LEFT_BORDER);
    return borders;
  }
  return null;
}","private BorderInfo[] cacheBorderInfo(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if (null == style || BoxStyle.DEFAULT == style) {
    return null;
  }
  int borderTopWidth=getScaledValue(style.getTopBorderWidth());
  int borderLeftWidth=getScaledValue(style.getLeftBorderWidth());
  int borderBottomWidth=getScaledValue(style.getBottomBorderWidth());
  int borderRightWidth=getScaledValue(style.getRightBorderWidth());
  if (borderTopWidth > 0 || borderLeftWidth > 0 || borderBottomWidth > 0 || borderRightWidth > 0) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    BorderInfo[] borders=new BorderInfo[4];
    borders[BorderInfo.TOP_BORDER]=new BorderInfo(startX,startY + borderTopWidth / 2,startX + getWidth(container),startY + borderTopWidth / 2,borderTopWidth,style.getTopBorderColor(),style.getTopBorderStyle(),BorderInfo.TOP_BORDER);
    borders[BorderInfo.RIGHT_BORDER]=new BorderInfo(startX + getWidth(container) - borderRightWidth / 2,startY,startX + getWidth(container) - borderRightWidth / 2,startY + getHeight(container),borderRightWidth,style.getRightBorderColor(),style.getRightBorderStyle(),BorderInfo.RIGHT_BORDER);
    borders[BorderInfo.BOTTOM_BORDER]=new BorderInfo(startX,startY + getHeight(container) - borderBottomWidth / 2,startX + getWidth(container),startY + getHeight(container) - borderBottomWidth / 2,borderBottomWidth,style.getBottomBorderColor(),style.getBottomBorderStyle(),BorderInfo.BOTTOM_BORDER);
    borders[BorderInfo.LEFT_BORDER]=new BorderInfo(startX + borderLeftWidth / 2,startY,startX + borderLeftWidth / 2,startY + getHeight(container),borderLeftWidth,style.getLeftBorderColor(),style.getLeftBorderStyle(),BorderInfo.LEFT_BORDER);
    return borders;
  }
  return null;
}",0.9969144460028052
65181,"/** 
 * draw background image for the container
 * @param containerStyle the style of the container we draw background image for
 * @param imageUrl the url of background image 
 * @param startX the absolute horizontal position of the container
 * @param startY the absolute vertical position of the container
 * @param width container width
 * @param height container height
 */
public void drawBackgroundImage(BackgroundImageInfo bi,int startX,int startY,int width,int height){
  try {
    pageGraphic.drawBackgroundImage(startX,startY,width,height,bi.getWidth(),bi.getHeight(),bi.getRepeatedMode(),bi.getUrl(),bi.getImageData(),getScaledValue(bi.getXOffset()),getScaledValue(bi.getYOffset()));
  }
 catch (  Exception e) {
    log(e,Level.WARNING);
  }
}","/** 
 * draw background image for the container
 * @param containerStyle the style of the container we draw background image for
 * @param imageUrl the url of background image 
 * @param startX the absolute horizontal position of the container
 * @param startY the absolute vertical position of the container
 * @param width container width
 * @param height container height
 */
private void drawBackgroundImage(BackgroundImageInfo bi,int startX,int startY,int width,int height){
  try {
    pageGraphic.drawBackgroundImage(startX,startY,width,height,bi.getWidth(),bi.getHeight(),bi.getRepeatedMode(),bi.getUrl(),bi.getImageData(),getScaledValue(bi.getXOffset()),getScaledValue(bi.getYOffset()));
  }
 catch (  Exception e) {
    log(e,Level.WARNING);
  }
}",0.992729676140119
65182,"public void drawTableBorder(TableArea table){
  TableBorder tb=new TableBorder(table.getX(),table.getY());
  traverseRows(tb,table,tb.tableX,tb.tableY);
  drawBorder(tb);
}","protected void drawTableBorder(TableArea table){
  TableBorder tb=new TableBorder(table.getX(),table.getY());
  traverseRows(tb,table,tb.tableX,tb.tableY);
  drawBorder(tb);
}",0.968299711815562
65183,"private boolean containMember(Object[] levelkey,Object[] key){
  Object[] memberKeys=levelkey;
  for (  Object obj : key) {
    if (obj.toString().equals(memberKeys[0].toString())) {
      return true;
    }
  }
  return false;
}","private boolean containMember(Object[] levelkey,Object[] key){
  Object[] memberKeys=levelkey;
  for (  Object obj : key) {
    try {
      if (ScriptEvalUtil.compare(obj,memberKeys[0]) == 0) {
        return true;
      }
    }
 catch (    DataException e) {
    }
  }
  return false;
}",0.5426356589147286
65184,"private void iterateOnRows(IContainerArea table){
  int internalRowCount=currentRow;
  currentRow=0;
  Iterator<IArea> iter=table.getChildren();
  while (iter.hasNext()) {
    IArea child=iter.next();
    if (child instanceof RowArea) {
      drawRow((RowArea)child);
      currentRow++;
    }
 else {
      currentX+=getX(table);
      currentY+=getY(table);
      internalRowCount=currentRow;
      updateRenderXY();
      iterateOnRows((TableGroupArea)child);
      currentX-=getX(table);
      currentY-=getY(table);
      updateRenderXY();
      currentRow=internalRowCount + 1;
    }
  }
}","private void iterateOnRows(IContainerArea table){
  int internalRowCount=currentRow;
  currentRow=0;
  Iterator<IArea> iter=table.getChildren();
  while (iter.hasNext()) {
    IContainerArea child=(IContainerArea)iter.next();
    if (child instanceof RowArea) {
      drawRow((RowArea)child);
      currentRow++;
    }
 else {
      currentX+=getX(child);
      currentY+=getY(child);
      internalRowCount=currentRow;
      updateRenderXY();
      iterateOnRows(child);
      currentX-=getX(child);
      currentY-=getY(child);
      updateRenderXY();
      currentRow=internalRowCount + 1;
    }
  }
}",0.932443703085905
65185,"protected void drawRow(RowArea row){
  row.setRowID(currentRow);
  if (row.getChildrenCount() == 0) {
    return;
  }
  currentX+=getX(row);
  currentY+=getY(row);
  BoxStyle style=row.getBoxStyle();
  if (style.getBackgroundColor() == null && style.getBackgroundImage() == null) {
    style=row.getParent().getBoxStyle();
  }
  rowStyleStack.push(style);
  startRow(row);
  Iterator<IArea> iter=row.getChildren();
  currentCol=0;
  fillEmptyMergeCells(0,0,0);
  while (iter.hasNext()) {
    IArea child=iter.next();
    drawCell((CellArea)child);
  }
  endRow();
  rowStyleStack.pop();
  currentX-=getX(row);
  currentY-=getY(row);
}","protected void drawRow(RowArea row){
  row.setRowID(currentRow);
  if (row.getChildrenCount() == 0) {
    return;
  }
  currentX+=getX(row);
  currentY+=getY(row);
  updateRenderXY();
  BoxStyle style=row.getBoxStyle();
  if (style.getBackgroundColor() == null && style.getBackgroundImage() == null) {
    style=row.getParent().getBoxStyle();
  }
  rowStyleStack.push(style);
  startRow(row);
  Iterator<IArea> iter=row.getChildren();
  currentCol=0;
  fillEmptyMergeCells(0,0,0);
  while (iter.hasNext()) {
    IArea child=iter.next();
    drawCell((CellArea)child);
  }
  endRow();
  rowStyleStack.pop();
  currentX-=getX(row);
  currentY-=getY(row);
  updateRenderXY();
}",0.9694189602446484
65186,"void setHyperlink(HyperlinkDef link){
  if (link != null) {
    String hyperlink=link.getLink();
    if (hyperlink != null) {
      if (hyperlink.startsWith(""String_Node_Str"") && hyperlink.endsWith(""String_Node_Str"")) {
        hyperlink=hyperlink.substring(1,hyperlink.length() - 1);
      }
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",part.getHyperlinkId(hyperlink));
      if (link.getTooltip() != null) {
        writer.attribute(""String_Node_Str"",link.getTooltip());
      }
      writer.closeTag(""String_Node_Str"");
    }
  }
}","void setHyperlink(HyperlinkDef link){
  if (link != null) {
    String hyperlink=null;
    try {
      hyperlink=URLEncoder.encode(link.getLink(),""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ue) {
      logger.log(Level.SEVERE,ue.getLocalizedMessage(),ue);
    }
    if (hyperlink != null) {
      if (hyperlink.startsWith(""String_Node_Str"") && hyperlink.endsWith(""String_Node_Str"")) {
        hyperlink=hyperlink.substring(1,hyperlink.length() - 1);
      }
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",part.getHyperlinkId(hyperlink));
      if (link.getTooltip() != null) {
        writer.attribute(""String_Node_Str"",link.getTooltip());
      }
      writer.closeTag(""String_Node_Str"");
    }
  }
}",0.8406015037593985
65187,"private BorderInfo[] cacheBorderInfo(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if (null == style || BoxStyle.DEFAULT == style) {
    return null;
  }
  int borderTopWidth=getScaledValue(style.getTopBorderWidth());
  int borderLeftWidth=getScaledValue(style.getLeftBorderWidth());
  int borderBottomWidth=getScaledValue(style.getBottomBorderWidth());
  int borderRightWidth=getScaledValue(style.getRightBorderWidth());
  if (borderTopWidth > 0 || borderLeftWidth > 0 || borderBottomWidth > 0 || borderRightWidth > 0) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    BorderInfo[] borders=new BorderInfo[4];
    borders[BorderInfo.TOP_BORDER]=new BorderInfo(startX,startY + borderTopWidth / 2,startX + getWidth(container),startY + borderTopWidth / 2,borderTopWidth,style.getTopBorderColor(),style.getTopBorderStyle(),BorderInfo.TOP_BORDER);
    borders[BorderInfo.RIGHT_BORDER]=new BorderInfo(startX + getWidth(container) - borderRightWidth / 2,startY,startX + getWidth(container) - borderRightWidth / 2,startY + getHeight(container),borderRightWidth,style.getRightBorderColor(),style.getRightBorderStyle(),BorderInfo.RIGHT_BORDER);
    borders[BorderInfo.BOTTOM_BORDER]=new BorderInfo(startX,startY + getHeight(container) - borderBottomWidth / 2,startX + getWidth(container),startY + getHeight(container) - borderBottomWidth / 2,borderBottomWidth,style.getBottomBorderColor(),style.getBottomBorderStyle(),BorderInfo.BOTTOM_BORDER);
    borders[BorderInfo.LEFT_BORDER]=new BorderInfo(startX + borderLeftWidth / 2,startY,startX + borderLeftWidth / 2,startY + getHeight(container),borderLeftWidth,style.getLeftBorderColor(),style.getLeftBorderStyle(),BorderInfo.LEFT_BORDER);
    return borders;
  }
  return null;
}","public BorderInfo[] cacheBorderInfo(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if (null == style || BoxStyle.DEFAULT == style) {
    return null;
  }
  int borderTopWidth=getScaledValue(style.getTopBorderWidth());
  int borderLeftWidth=getScaledValue(style.getLeftBorderWidth());
  int borderBottomWidth=getScaledValue(style.getBottomBorderWidth());
  int borderRightWidth=getScaledValue(style.getRightBorderWidth());
  if (borderTopWidth > 0 || borderLeftWidth > 0 || borderBottomWidth > 0 || borderRightWidth > 0) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    BorderInfo[] borders=new BorderInfo[4];
    borders[BorderInfo.TOP_BORDER]=new BorderInfo(startX,startY + borderTopWidth / 2,startX + getWidth(container),startY + borderTopWidth / 2,borderTopWidth,style.getTopBorderColor(),style.getTopBorderStyle(),BorderInfo.TOP_BORDER);
    borders[BorderInfo.RIGHT_BORDER]=new BorderInfo(startX + getWidth(container) - borderRightWidth / 2,startY,startX + getWidth(container) - borderRightWidth / 2,startY + getHeight(container),borderRightWidth,style.getRightBorderColor(),style.getRightBorderStyle(),BorderInfo.RIGHT_BORDER);
    borders[BorderInfo.BOTTOM_BORDER]=new BorderInfo(startX,startY + getHeight(container) - borderBottomWidth / 2,startX + getWidth(container),startY + getHeight(container) - borderBottomWidth / 2,borderBottomWidth,style.getBottomBorderColor(),style.getBottomBorderStyle(),BorderInfo.BOTTOM_BORDER);
    borders[BorderInfo.LEFT_BORDER]=new BorderInfo(startX + borderLeftWidth / 2,startY,startX + borderLeftWidth / 2,startY + getHeight(container),borderLeftWidth,style.getLeftBorderColor(),style.getLeftBorderStyle(),BorderInfo.LEFT_BORDER);
    return borders;
  }
  return null;
}",0.9969144460028052
65188,"/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList<SeriesDefinition> seriesDefinitions,GroupDefinition innerMostGroupDef,Map<String,String[]> valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (  SeriesDefinition orthSD : seriesDefinitions) {
    Series series=orthSD.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (    Query qry : series.getDataDefinition()) {
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,qry);
      if (aggName == null || ""String_Node_Str"".equals(aggName)) {
        continue;
      }
      String name=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        query.getBindings().remove(name);
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          setBindingExpressionDueToAggregation(colBinding,expr,aggName);
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
        if (innerMostGroupDef != null) {
          try {
            colBinding.addAggregateOn(innerMostGroupDef.getName());
          }
 catch (          DataException e) {
            throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
          }
        }
        colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
        IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
        if (aFunc.getParametersCount() > 0) {
          String[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD,qry);
          for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
            String param=parameters[i];
            colBinding.addArgument(new ScriptExpression(param));
          }
        }
      }
 else {
        exprCodec.decode(expr);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        query.addBinding(colBinding);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{expr,newExpr});
    }
  }
}","/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList<SeriesDefinition> seriesDefinitions,GroupDefinition innerMostGroupDef,Map<String,String[]> valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (  SeriesDefinition orthSD : seriesDefinitions) {
    Series series=orthSD.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (    Query qry : series.getDataDefinition()) {
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr) || isDataBinding(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,qry);
      if (aggName == null || ""String_Node_Str"".equals(aggName)) {
        continue;
      }
      String name=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        query.getBindings().remove(name);
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          setBindingExpressionDueToAggregation(colBinding,expr,aggName);
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
        if (innerMostGroupDef != null) {
          try {
            colBinding.addAggregateOn(innerMostGroupDef.getName());
          }
 catch (          DataException e) {
            throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
          }
        }
        colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
        IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
        if (aFunc.getParametersCount() > 0) {
          String[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD,qry);
          for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
            String param=parameters[i];
            colBinding.addArgument(new ScriptExpression(param));
          }
        }
      }
 else {
        exprCodec.decode(expr);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        query.addBinding(colBinding);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{expr,newExpr});
    }
  }
}",0.9960596196676376
65189,"/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws ChartException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList<SeriesDefinition> seriesDefinitions,GroupDefinition innerMostGroupDef,Map<String,String[]> valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (  SeriesDefinition orthSD : seriesDefinitions) {
    Series series=orthSD.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (    Query qry : series.getDataDefinition()) {
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,qry);
      if (aggName == null) {
        if (!bCreateBindingForExpression || exprCodec.isRowBinding(expr,false)) {
          continue;
        }
      }
      String name=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        continue;
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          colBinding.setExportable(false);
          if (aggName != null) {
            setBindingExpressionDueToAggregation(colBinding,expr,aggName);
            if (innerMostGroupDef != null) {
              colBinding.addAggregateOn(innerGroupName);
            }
            colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
            IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
            if (aFunc.getParametersCount() > 0) {
              String[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD,qry);
              for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
                String param=parameters[i];
                colBinding.addArgument(new ScriptExpression(param));
              }
            }
          }
 else {
            exprCodec.decode(expr);
            colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
          }
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
      }
 else {
        exprCodec.decode(expr);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        if (!query.getBindings().containsKey(colBinding.getBindingName())) {
          query.addBinding(colBinding);
          if (ChartUtil.compareVersion(fChartModel.getVersion(),""String_Node_Str"") < 0) {
            String bindingName=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD,true);
            if (!query.getBindings().containsKey(bindingName) && !fNameSet.contains(bindingName)) {
              IBinding newBinding=new Binding(bindingName,colBinding.getExpression());
              newBinding.setAggrFunction(colBinding.getAggrFunction());
              newBinding.setDataType(colBinding.getDataType());
              newBinding.setDisplayName(colBinding.getDisplayName());
              newBinding.setExportable(colBinding.exportable());
              newBinding.setFilter(colBinding.getFilter());
              newBinding.setTimeFunction(colBinding.getTimeFunction());
              for (              Object o : colBinding.getAggregatOns()) {
                newBinding.getAggregatOns().add(o);
              }
              for (              Object o : colBinding.getArguments()) {
                newBinding.addArgument((IBaseExpression)o);
              }
              query.addBinding(newBinding);
            }
          }
        }
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{name,newExpr});
    }
  }
}","/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws ChartException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList<SeriesDefinition> seriesDefinitions,GroupDefinition innerMostGroupDef,Map<String,String[]> valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (  SeriesDefinition orthSD : seriesDefinitions) {
    Series series=orthSD.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (    Query qry : series.getDataDefinition()) {
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr) || isDataBinding(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,qry);
      if (aggName == null) {
        if (!bCreateBindingForExpression || exprCodec.isRowBinding(expr,false)) {
          continue;
        }
      }
      String name=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        continue;
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          colBinding.setExportable(false);
          if (aggName != null) {
            setBindingExpressionDueToAggregation(colBinding,expr,aggName);
            if (innerMostGroupDef != null) {
              colBinding.addAggregateOn(innerGroupName);
            }
            colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
            IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
            if (aFunc.getParametersCount() > 0) {
              String[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD,qry);
              for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
                String param=parameters[i];
                colBinding.addArgument(new ScriptExpression(param));
              }
            }
          }
 else {
            exprCodec.decode(expr);
            colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
          }
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
      }
 else {
        exprCodec.decode(expr);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,false));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        if (!query.getBindings().containsKey(colBinding.getBindingName())) {
          query.addBinding(colBinding);
          if (ChartUtil.compareVersion(fChartModel.getVersion(),""String_Node_Str"") < 0) {
            String bindingName=ChartUtil.generateBindingNameOfValueSeries(qry,orthSD,baseSD,true);
            if (!query.getBindings().containsKey(bindingName) && !fNameSet.contains(bindingName)) {
              IBinding newBinding=new Binding(bindingName,colBinding.getExpression());
              newBinding.setAggrFunction(colBinding.getAggrFunction());
              newBinding.setDataType(colBinding.getDataType());
              newBinding.setDisplayName(colBinding.getDisplayName());
              newBinding.setExportable(colBinding.exportable());
              newBinding.setFilter(colBinding.getFilter());
              newBinding.setTimeFunction(colBinding.getTimeFunction());
              for (              Object o : colBinding.getAggregatOns()) {
                newBinding.getAggregatOns().add(o);
              }
              for (              Object o : colBinding.getArguments()) {
                newBinding.addArgument((IBaseExpression)o);
              }
              query.addBinding(newBinding);
            }
          }
        }
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{name,newExpr});
    }
  }
}",0.9973425765453496
65190,"/** 
 * Disposes instance handles.
 */
public void dispose(){
  if (engineTask != null) {
    engineTask.close();
  }
 else   if (session != null) {
    session.shutdown();
  }
}","/** 
 * Disposes instance handles.
 */
public void dispose(){
  if (session != null) {
    try {
      DataService.getInstance().unRegisterSession(session);
    }
 catch (    BirtException e) {
      logger.log(e);
    }
  }
  if (engineTask != null) {
    engineTask.close();
  }
 else   if (session != null) {
    session.shutdown();
  }
}",0.5202312138728323
65191,"protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      if (((IQueryDefinition)queryDefn.getSourceQuery()).getQueryResultsID() == null) {
        newPreDataEnige();
        this.queryResults=PreparedQueryUtil.newInstance(preDataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
 else {
        this.queryResults=PreparedQueryUtil.newInstance(engine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    if (!hasBinding) {
      for (int i=0; i < bindings.length; i++) {
        IBinding binding=bindings[i];
        if (!this.queryDefn.getBindings().containsKey(binding.getBindingName()))         this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      IQueryDefinition baseQueryDefn=getBaseQueryDefinition((SubqueryLocator)(queryDefn.getSourceQuery()));
      if (engine.getContext().getDocReader().exists(baseQueryDefn.getQueryResultsID() + ""String_Node_Str"" + DATA_STREAM_POST_FIX)) {
        this.queryResults=PreparedQueryUtil.newInstance(engine,baseQueryDefn,this.appContext).execute(null);
      }
 else       this.queryResults=engine.getQueryResults(baseQueryDefn.getQueryResultsID());
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      if (((IQueryDefinition)queryDefn.getSourceQuery()).getQueryResultsID() == null) {
        newPreDataEnige();
        this.queryResults=PreparedQueryUtil.newInstance(preDataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
 else {
        this.queryResults=PreparedQueryUtil.newInstance(engine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    if (!hasBinding) {
      for (int i=0; i < bindings.length; i++) {
        IBinding binding=bindings[i];
        if (!this.queryDefn.getBindings().containsKey(binding.getBindingName()))         this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.8990055248618785
65192,"public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof EditPart) {
    EditPart targetPart=(EditPart)target;
    CrosstabReportItemHandle crosstab=getCrosstab(targetPart);
    if (crosstab == null) {
      return false;
    }
    CommandStack cmdStack=crosstab.getModuleHandle().getCommandStack();
    cmdStack.startTrans(Messages.getFormattedString(""String_Node_Str"",new String[]{((ReportElementHandle)transfer).getName()}));
    ReportElementHandle extendedData=adapter.getBoundExtendedData((ReportItemHandle)crosstab.getModelHandle());
    if (extendedData == null || !extendedData.equals(adapter.resolveExtendedData((ReportElementHandle)transfer))) {
      if (!adapter.setExtendedData((ReportItemHandle)crosstab.getModelHandle(),adapter.resolveExtendedData((ReportElementHandle)transfer))) {
        cmdStack.rollback();
        return false;
      }
    }
    List validElements=handleValidate(targetPart,transfer);
    MeasureHandle measure=null;
    TabularDimensionHandle tabularDimension=null;
    TimeDimensionHandle timeDimension=null;
    for (    Object obj : validElements) {
      if (obj instanceof MeasureHandle) {
        measure=(MeasureHandle)obj;
      }
 else       if (obj instanceof TabularDimensionHandle) {
        tabularDimension=(TabularDimensionHandle)obj;
      }
 else       if (obj instanceof TimeDimensionHandle) {
        timeDimension=(TimeDimensionHandle)obj;
      }
    }
    if (measure != null) {
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,measure);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        if (crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) != 0) {
          DimensionViewHandle viewHnadle=crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) - 1);
          CrosstabUtil.addLabelToHeader(viewHnadle.getLevel(viewHnadle.getLevelCount() - 1));
        }
        cmdStack.commit();
        return true;
      }
    }
 else     if (tabularDimension != null || timeDimension != null) {
      Object element=null;
      if (timeDimension != null) {
        LevelViewDialog dialog=new LevelViewDialog(false);
        dialog.setInput(timeDimension,adapter.getLevelHints(timeDimension));
        if (dialog.open() != Window.OK) {
          cmdStack.rollback();
          return false;
        }
        if (((List)dialog.getResult()).size() > 0) {
          element=((List)dialog.getResult()).toArray();
        }
 else {
          element=tabularDimension;
        }
      }
 else       if (tabularDimension != null) {
        element=tabularDimension;
      }
      if (element == null) {
        return false;
      }
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,element);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        cmdStack.commit();
        return true;
      }
    }
  }
  return false;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof EditPart) {
    EditPart targetPart=(EditPart)target;
    CrosstabReportItemHandle crosstab=getCrosstab(targetPart);
    if (crosstab == null) {
      return false;
    }
    CommandStack cmdStack=crosstab.getModuleHandle().getCommandStack();
    cmdStack.startTrans(Messages.getFormattedString(""String_Node_Str"",new String[]{((ReportElementHandle)transfer).getName()}));
    ReportElementHandle extendedData=adapter.getBoundExtendedData((ReportItemHandle)crosstab.getModelHandle());
    if (extendedData == null || !extendedData.equals(adapter.resolveExtendedData((ReportElementHandle)transfer))) {
      if (!adapter.setExtendedData((ReportItemHandle)crosstab.getModelHandle(),adapter.resolveExtendedData((ReportElementHandle)transfer))) {
        cmdStack.rollback();
        return false;
      }
    }
    List validElements=handleValidate(targetPart,transfer);
    MeasureHandle measure=null;
    DimensionHandle tabularDimension=null;
    DimensionHandle timeDimension=null;
    for (    Object obj : validElements) {
      if (obj instanceof MeasureHandle) {
        measure=(MeasureHandle)obj;
      }
 else       if (obj instanceof DimensionHandle) {
        DimensionHandle dim=(DimensionHandle)obj;
        if (dim.isTimeType()) {
          timeDimension=dim;
        }
 else {
          tabularDimension=dim;
        }
      }
    }
    if (measure != null) {
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,measure);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        if (crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) != 0) {
          DimensionViewHandle viewHnadle=crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) - 1);
          CrosstabUtil.addLabelToHeader(viewHnadle.getLevel(viewHnadle.getLevelCount() - 1));
        }
        cmdStack.commit();
        return true;
      }
    }
 else     if (tabularDimension != null || timeDimension != null) {
      Object element=null;
      if (timeDimension != null) {
        LevelViewDialog dialog=new LevelViewDialog(false);
        dialog.setInput(timeDimension,adapter.getLevelHints(timeDimension));
        if (dialog.open() != Window.OK) {
          cmdStack.rollback();
          return false;
        }
        if (((List)dialog.getResult()).size() > 0) {
          element=((List)dialog.getResult()).toArray();
        }
 else {
          element=tabularDimension;
        }
      }
 else       if (tabularDimension != null) {
        element=tabularDimension;
      }
      if (element == null) {
        return false;
      }
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,element);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        cmdStack.commit();
        return true;
      }
    }
  }
  return false;
}",0.9666274047899488
65193,"public Presentation(OutputStream out,String tempFileDir,int compressionMode){
  pkg=Package.createInstance(out,tempFileDir,compressionMode);
  String uri=""String_Node_Str"";
  String type=ContentTypes.PRESENTATIONML;
  String relationshipType=RelationshipTypes.DOCUMENT;
  this.part=pkg.getPart(uri,type,relationshipType);
  pkg.setExtensionData(new ImageManager());
  try {
    writer=part.getCacheWriter();
    initialize();
    theme=new Theme(part);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public Presentation(OutputStream out,String tempFileDir,int compressionMode){
  pkg=Package.createInstance(out,tempFileDir,compressionMode);
  String uri=""String_Node_Str"";
  String type=ContentTypes.PRESENTATIONML;
  String relationshipType=RelationshipTypes.DOCUMENT;
  this.part=pkg.getPart(uri,type,relationshipType);
  pkg.setExtensionData(new ImageManager());
  try {
    writer=part.getCacheWriter();
    initialize();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.973026973026973
65194,"public SlideMaster createSlideMaster(String name,PageArea area) throws IOException {
  SlideMaster slideMaster=new SlideMaster(this,area);
  slideMaster.referTo(theme);
  slideMasters.put(name,slideMaster);
  return slideMaster;
}","public SlideMaster createSlideMaster(String name,PageArea area) throws IOException {
  Theme theme=new Theme(part,this);
  SlideMaster slideMaster=new SlideMaster(this,area);
  slideMaster.referTo(theme);
  slideMasters.put(name,slideMaster);
  return slideMaster;
}",0.9274193548387096
65195,"private void startBlockText(int startX,int startY,int width,int height,ContainerArea container){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().getNextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    BoxStyle style=container.getBoxStyle();
    Color color=style.getBackgroundColor();
    BackgroundImageInfo image=style.getBackgroundImage();
    if (color != null) {
      setBackgroundColor(color);
    }
    if (image != null) {
      canvas.setBackgroundImg(canvas.getImageRelationship(image),0,0);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  int leftPadding=0;
  int rightPadding=0;
  int topPadding=0;
  int bottomPadding=0;
  if (container instanceof BlockTextArea) {
    IArea firstChild=container.getChild(0);
    if (firstChild != null) {
      leftPadding=PPTXUtil.convertToEnums(firstChild.getX());
      rightPadding=width - leftPadding - PPTXUtil.convertToEnums(firstChild.getWidth());
      topPadding=PPTXUtil.convertToEnums(firstChild.getY());
    }
    IArea lastChild=container.getChild(container.getChildrenCount() - 1);
    if (lastChild != null) {
      bottomPadding=height - PPTXUtil.convertToEnums(lastChild.getY()) - PPTXUtil.convertToEnums(lastChild.getHeight());
    }
  }
  IContent ic=container.getContent();
  ic.getComputedStyle().getVerticalAlign();
  container.getTextAlign();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",leftPadding);
  writer.attribute(""String_Node_Str"",topPadding);
  writer.attribute(""String_Node_Str"",rightPadding);
  writer.attribute(""String_Node_Str"",bottomPadding);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  String vAlign=container.getContent().getComputedStyle().getVerticalAlign();
  if (vAlign != null) {
    if (vAlign.equals(""String_Node_Str""))     writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else     if (vAlign.equals(""String_Node_Str""))     writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  hAlign=container.getContent().getComputedStyle().getTextAlign();
  if (hAlign != null) {
    if (hAlign.equals(""String_Node_Str""))     hAlign=""String_Node_Str"";
 else     if (hAlign.equals(""String_Node_Str""))     hAlign=""String_Node_Str"";
  }
  writer.closeTag(""String_Node_Str"");
}","private void startBlockText(int startX,int startY,int width,int height,ContainerArea container){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().getNextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    BoxStyle style=container.getBoxStyle();
    Color color=style.getBackgroundColor();
    BackgroundImageInfo image=style.getBackgroundImage();
    if (color != null) {
      setBackgroundColor(color);
    }
    if (image != null) {
      canvas.setBackgroundImg(canvas.getImageRelationship(image),0,0);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  int leftPadding=0;
  int rightPadding=0;
  int topPadding=0;
  int bottomPadding=0;
  if (container instanceof BlockTextArea) {
    IArea firstChild=container.getChild(0);
    if (firstChild != null) {
      leftPadding=PPTXUtil.convertToEnums(firstChild.getX());
      rightPadding=width - leftPadding - PPTXUtil.convertToEnums(firstChild.getWidth());
      topPadding=PPTXUtil.convertToEnums(firstChild.getY());
    }
    IArea lastChild=container.getChild(container.getChildrenCount() - 1);
    if (lastChild != null) {
      bottomPadding=height - PPTXUtil.convertToEnums(lastChild.getY()) - PPTXUtil.convertToEnums(lastChild.getHeight());
    }
  }
  IContent ic=container.getContent();
  ic.getComputedStyle().getVerticalAlign();
  container.getTextAlign();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",leftPadding);
  writer.attribute(""String_Node_Str"",topPadding);
  writer.attribute(""String_Node_Str"",rightPadding);
  writer.attribute(""String_Node_Str"",bottomPadding);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  String vAlign=container.getContent().getComputedStyle().getVerticalAlign();
  if (vAlign != null) {
    if (vAlign.equals(""String_Node_Str""))     writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else     if (vAlign.equals(""String_Node_Str""))     writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  hAlign=container.getContent().getComputedStyle().getTextAlign();
  if (hAlign != null) {
    if (hAlign.equals(""String_Node_Str""))     hAlign=""String_Node_Str"";
 else     if (hAlign.equals(""String_Node_Str""))     hAlign=""String_Node_Str"";
 else     if (hAlign.equals(""String_Node_Str""))     hAlign=""String_Node_Str"";
  }
  writer.closeTag(""String_Node_Str"");
}",0.991210277214334
65196,"public Presentation(OutputStream out,String tempFileDir,int compressionMode){
  pkg=Package.createInstance(out,tempFileDir,compressionMode);
  String uri=""String_Node_Str"";
  String type=ContentTypes.PRESENTATIONML;
  String relationshipType=RelationshipTypes.DOCUMENT;
  this.part=pkg.getPart(uri,type,relationshipType);
  pkg.setExtensionData(new ImageManager());
  try {
    writer=part.getCacheWriter();
    initialize();
    theme=new Theme(part);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public Presentation(OutputStream out,String tempFileDir,int compressionMode){
  pkg=Package.createInstance(out,tempFileDir,compressionMode);
  String uri=""String_Node_Str"";
  String type=ContentTypes.PRESENTATIONML;
  String relationshipType=RelationshipTypes.DOCUMENT;
  this.part=pkg.getPart(uri,type,relationshipType);
  pkg.setExtensionData(new ImageManager());
  try {
    writer=part.getCacheWriter();
    initialize();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.973026973026973
65197,"public SlideMaster createSlideMaster(String name,PageArea area) throws IOException {
  SlideMaster slideMaster=new SlideMaster(this,area);
  slideMaster.referTo(theme);
  slideMasters.put(name,slideMaster);
  return slideMaster;
}","public SlideMaster createSlideMaster(String name,PageArea area) throws IOException {
  Theme theme=new Theme(part,this);
  SlideMaster slideMaster=new SlideMaster(this,area);
  slideMaster.referTo(theme);
  slideMasters.put(name,slideMaster);
  return slideMaster;
}",0.9274193548387096
65198,"public Presentation(OutputStream out,String tempFileDir,int compressionMode){
  pkg=Package.createInstance(out,tempFileDir,compressionMode);
  String uri=""String_Node_Str"";
  String type=ContentTypes.PRESENTATIONML;
  String relationshipType=RelationshipTypes.DOCUMENT;
  this.part=pkg.getPart(uri,type,relationshipType);
  pkg.setExtensionData(new ImageManager());
  try {
    writer=part.getCacheWriter();
    initialize();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public Presentation(OutputStream out,String tempFileDir,int compressionMode){
  pkg=Package.createInstance(out,tempFileDir,compressionMode);
  String uri=""String_Node_Str"";
  String type=ContentTypes.PRESENTATIONML;
  String relationshipType=RelationshipTypes.DOCUMENT;
  this.part=pkg.getPart(uri,type,relationshipType);
  pkg.setExtensionData(new ImageManager());
  try {
    writer=part.getCacheWriter();
    initialize();
    theme=new Theme(part);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.973026973026973
65199,"public SlideMaster createSlideMaster(String name,PageArea area) throws IOException {
  Theme theme=new Theme(part,this);
  SlideMaster slideMaster=new SlideMaster(this,area);
  slideMaster.referTo(theme);
  slideMasters.put(name,slideMaster);
  return slideMaster;
}","public SlideMaster createSlideMaster(String name,PageArea area) throws IOException {
  SlideMaster slideMaster=new SlideMaster(this,area);
  slideMaster.referTo(theme);
  slideMasters.put(name,slideMaster);
  return slideMaster;
}",0.9274193548387096
65200,"@Override public void visitContainer(IContainerArea container){
  if (container instanceof PageArea) {
    newPage(container);
    new SlideWriter(this).writeSlide((PageArea)container);
    this.pageGraphic.dispose();
  }
 else   if (container instanceof TableArea) {
    outputTable((TableArea)container);
  }
 else   if (TextWriter.isSingleTextControl(container)) {
    int x=currentX + getX(container);
    int y=currentY + getY(container);
    int width=getWidth(container);
    int height=getHeight(container);
    new TextWriter(this).writeTextBlock(x,y,width,height,(ContainerArea)container);
  }
 else {
    startContainer(container);
    visitChildren(container);
    endContainer(container);
  }
}","@Override public void visitContainer(IContainerArea container){
  if (container instanceof PageArea) {
    newPage(container);
    new SlideWriter(this).writeSlide((PageArea)container);
    this.pageGraphic.dispose();
  }
 else   if (container instanceof TableArea) {
    outputTable((TableArea)container);
  }
 else   if (TextWriter.isSingleTextControl(container)) {
    outputText((ContainerArea)container);
  }
 else {
    startContainer(container);
    visitChildren(container);
    endContainer(container);
  }
}",0.6388888888888888
65201,"private void outputText(BlockTextArea text){
  if (!editMode) {
    visitText(text);
    return;
  }
  int x=currentX + getX(text);
  int y=currentY + getY(text);
  int width=getWidth(text);
  int height=getHeight(text);
  new TextWriter(this).writeBlockText(x,y,width,height,text);
}","private void outputText(ContainerArea text){
  if (editMode) {
    int x=currentX + getX(text);
    int y=currentY + getY(text);
    int width=getWidth(text);
    int height=getHeight(text);
    new TextWriter(this).writeTextBlock(x,y,width,height,text);
  }
 else {
    startContainer(text);
    visitChildren(text);
    endContainer(text);
  }
}",0.7448494453248812
65202,"void writeTextBlock(int startX,int startY,int width,int height,ContainerArea container){
  parseBlockTextArea(container);
  startX=PPTXUtil.convertToEnums(startX);
  startY=PPTXUtil.convertToEnums(startY);
  width=PPTXUtil.convertToEnums(width);
  height=PPTXUtil.convertToEnums(height);
  if (needGroup) {
    startGroup(startX,startY,width + 1,height);
    startX=0;
    startY=0;
  }
  drawLineBorder(container);
  startBlockText(startX,startY,width + 1,height,container);
  drawBlockTextChildren(container);
  endBlockText(container);
  if (needGroup)   endGroup();
}","public void writeTextBlock(int startX,int startY,int width,int height,ContainerArea container){
  parseBlockTextArea(container);
  startX=PPTXUtil.convertToEnums(startX);
  startY=PPTXUtil.convertToEnums(startY);
  width=PPTXUtil.convertToEnums(width);
  height=PPTXUtil.convertToEnums(height);
  if (needGroup) {
    startGroup(startX,startY,width + 1,height);
    startX=0;
    startY=0;
  }
  drawLineBorder(container);
  startBlockText(startX,startY,width + 1,height,container);
  drawBlockTextChildren(container);
  endBlockText(container);
  if (needGroup)   endGroup();
}",0.9939077458659704
65203,"private void startTable(TableArea tablearea){
  int X=PPTXUtil.convertToEnums(currentX);
  int Y=PPTXUtil.convertToEnums(currentY);
  int width=PPTXUtil.convertToEnums(tablearea.getWidth());
  int height=PPTXUtil.convertToEnums(tablearea.getHeight());
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",canvas.getPresentation().nextShapeId());
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + TableIndex++);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  canvas.setPosition('p',X,Y,width,height);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeColumnsWidth(tablearea);
}","private void startTable(TableArea tablearea){
  int X=PPTXUtil.convertToEnums(currentX);
  int Y=PPTXUtil.convertToEnums(currentY);
  int width=PPTXUtil.convertToEnums(tablearea.getWidth());
  int height=PPTXUtil.convertToEnums(tablearea.getHeight());
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",canvas.getPresentation().getNextShapeId());
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + TableIndex++);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  canvas.setPosition('p',X,Y,width,height);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeColumnsWidth(tablearea);
}",0.9977628635346756
65204,"private void startGroup(int startX,int startY,int width,int height){
  int shapeId=canvas.getPresentation().nextShapeId();
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",shapeId);
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  canvas.setPosition(startX,startY,width + 1,height);
  writer.closeTag(""String_Node_Str"");
}","private void startGroup(int startX,int startY,int width,int height){
  int shapeId=canvas.getPresentation().getNextShapeId();
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",shapeId);
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  canvas.setPosition(startX,startY,width + 1,height);
  writer.closeTag(""String_Node_Str"");
}",0.9964564138908576
65205,"private void startBlockText(int startX,int startY,int width,int height,BlockTextArea text){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().nextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width + 1,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    Color color=text.getBoxStyle().getBackgroundColor();
    if (color != null) {
      setBackgroundColor(color);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}","private void startBlockText(int startX,int startY,int width,int height,BlockTextArea text){
  if (needShape) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    int shapeId=canvas.getPresentation().getNextShapeId();
    writer.attribute(""String_Node_Str"",shapeId);
    writer.attribute(""String_Node_Str"",""String_Node_Str"" + shapeId);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    canvas.setPosition(startX,startY,width + 1,height);
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    Color color=text.getBoxStyle().getBackgroundColor();
    if (color != null) {
      setBackgroundColor(color);
    }
    writeLineStyle();
    writer.closeTag(""String_Node_Str"");
    if (needDrawSquareBorder) {
      writer.openTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
      writer.closeTag(""String_Node_Str"");
    }
    writer.openTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}",0.9990776609481644
65206,"public int compare(Object o1,Object o2){
  CrosstabCellAdapter part1=(CrosstabCellAdapter)o1;
  CrosstabCellAdapter part2=(CrosstabCellAdapter)o2;
  if (part1.getRowNumber() > part2.getRowNumber()) {
    return 1;
  }
 else   if (part1.getRowNumber() < part2.getRowNumber()) {
    return -1;
  }
 else   if (part1.getColumnNumber() > part2.getColumnNumber()) {
    return 1;
  }
 else   if (part1.getColumnNumber() > part2.getColumnNumber()) {
    return -1;
  }
  return 0;
}","public int compare(Object o1,Object o2){
  CrosstabCellAdapter part1=(CrosstabCellAdapter)o1;
  CrosstabCellAdapter part2=(CrosstabCellAdapter)o2;
  if (part1.getRowNumber() > part2.getRowNumber()) {
    return 1;
  }
 else   if (part1.getRowNumber() < part2.getRowNumber()) {
    return -1;
  }
 else   if (part1.getColumnNumber() > part2.getColumnNumber()) {
    return 1;
  }
 else   if (part1.getColumnNumber() < part2.getColumnNumber()) {
    return -1;
  }
  return 0;
}",0.9978991596638656
65207,"/** 
 * Return whether or not given id matches the id of the coolitems that the workbench creates.
 */
public boolean isWorkbenchCoolItemId(String id){
  if (IWorkbenchActionConstants.TOOLBAR_FILE.equalsIgnoreCase(id))   return true;
  if (IWorkbenchActionConstants.TOOLBAR_NAVIGATE.equalsIgnoreCase(id))   return true;
  return false;
}","/** 
 * Return whether or not given id matches the id of the cool items that the workbench creates.
 */
public boolean isWorkbenchCoolItemId(String id){
  if (IWorkbenchActionConstants.TOOLBAR_FILE.equalsIgnoreCase(id))   return true;
  if (IWorkbenchActionConstants.TOOLBAR_NAVIGATE.equalsIgnoreCase(id))   return true;
  return false;
}",0.9985185185185184
65208,"/** 
 * Creates actions (and contribution items) for the menu bar, toolbar and status line.
 */
public void makeActions(final IWorkbenchWindow window){
  openFileAction=new OpenFileAction(window);
  register(openFileAction);
  newReportAction=new NewReportAction(window);
  register(newReportAction);
  newLibraryAction=new NewLibraryAction(window);
  register(newLibraryAction);
  newReportTemplateAction=new NewReportTemplateAction(window);
  register(newReportTemplateAction);
  saveAction=ActionFactory.SAVE.create(window);
  register(saveAction);
  saveAsAction=ActionFactory.SAVE_AS.create(window);
  register(saveAsAction);
  saveAllAction=ActionFactory.SAVE_ALL.create(window);
  register(saveAllAction);
  undoAction=ActionFactory.UNDO.create(window);
  register(undoAction);
  redoAction=ActionFactory.REDO.create(window);
  register(redoAction);
  cutAction=ActionFactory.CUT.create(window);
  register(cutAction);
  copyAction=ActionFactory.COPY.create(window);
  register(copyAction);
  pasteAction=ActionFactory.PASTE.create(window);
  register(pasteAction);
  selectAllAction=ActionFactory.SELECT_ALL.create(window);
  register(selectAllAction);
  findAction=ActionFactory.FIND.create(window);
  register(findAction);
  closeAction=ActionFactory.CLOSE.create(window);
  register(closeAction);
  closeAllAction=ActionFactory.CLOSE_ALL.create(window);
  register(closeAllAction);
  helpContentsAction=ActionFactory.HELP_CONTENTS.create(window);
  register(helpContentsAction);
  aboutAction=ActionFactory.ABOUT.create(window);
  aboutAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(""String_Node_Str""));
  register(aboutAction);
  openPreferencesAction=ActionFactory.PREFERENCES.create(window);
  register(openPreferencesAction);
  deleteAction=ActionFactory.DELETE.create(window);
  register(deleteAction);
  makeFeatureDependentActions(window);
  lockToolBarAction=ActionFactory.LOCK_TOOL_BAR.create(window);
  register(lockToolBarAction);
  forwardHistoryAction=ActionFactory.FORWARD_HISTORY.create(window);
  register(forwardHistoryAction);
  backwardHistoryAction=ActionFactory.BACKWARD_HISTORY.create(window);
  register(backwardHistoryAction);
  quitAction=ActionFactory.QUIT.create(window);
  register(quitAction);
  Object[] adapters=ElementAdapterManager.getAdapters(this,IExtensionFile.class);
  List<IWorkbenchAction> tempList=new ArrayList<IWorkbenchAction>();
  if (adapters != null) {
    for (int i=0; i < adapters.length; i++) {
      IExtensionFile newFile=(IExtensionFile)adapters[i];
      INewExtensionFileWorkbenchAction action=newFile.getNewAction();
      if (action == null) {
        continue;
      }
      action.init(window);
      register(action);
      tempList.add(action);
    }
    newActios=tempList.toArray(new IWorkbenchAction[tempList.size()]);
  }
 else {
    newActios=new IWorkbenchAction[0];
  }
  if (window.getWorkbench().getIntroManager().hasIntro()) {
    introAction=ActionFactory.INTRO.create(window);
    register(introAction);
  }
  pinEditorContributionItem=ContributionItemFactory.PIN_EDITOR.create(window);
}","/** 
 * Creates actions (and contribution items) for the menu bar, toolbar and status line.
 */
public void makeActions(final IWorkbenchWindow window){
  openFileAction=new OpenFileAction(window);
  register(openFileAction);
  newReportAction=new NewReportAction(window);
  register(newReportAction);
  newLibraryAction=new NewLibraryAction(window);
  register(newLibraryAction);
  newReportTemplateAction=new NewReportTemplateAction(window);
  register(newReportTemplateAction);
  saveAction=ActionFactory.SAVE.create(window);
  register(saveAction);
  saveAsAction=ActionFactory.SAVE_AS.create(window);
  register(saveAsAction);
  saveAllAction=ActionFactory.SAVE_ALL.create(window);
  register(saveAllAction);
  undoAction=ActionFactory.UNDO.create(window);
  register(undoAction);
  redoAction=ActionFactory.REDO.create(window);
  register(redoAction);
  cutAction=ActionFactory.CUT.create(window);
  register(cutAction);
  copyAction=ActionFactory.COPY.create(window);
  register(copyAction);
  pasteAction=ActionFactory.PASTE.create(window);
  register(pasteAction);
  selectAllAction=ActionFactory.SELECT_ALL.create(window);
  register(selectAllAction);
  findAction=ActionFactory.FIND.create(window);
  register(findAction);
  closeAction=ActionFactory.CLOSE.create(window);
  register(closeAction);
  closeAllAction=ActionFactory.CLOSE_ALL.create(window);
  register(closeAllAction);
  helpContentsAction=ActionFactory.HELP_CONTENTS.create(window);
  register(helpContentsAction);
  aboutAction=ActionFactory.ABOUT.create(window);
  aboutAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(""String_Node_Str""));
  register(aboutAction);
  openPreferencesAction=ActionFactory.PREFERENCES.create(window);
  register(openPreferencesAction);
  deleteAction=ActionFactory.DELETE.create(window);
  register(deleteAction);
  makeFeatureDependentActions(window);
  lockToolBarAction=ActionFactory.LOCK_TOOL_BAR.create(window);
  register(lockToolBarAction);
  forwardHistoryAction=ActionFactory.FORWARD_HISTORY.create(window);
  register(forwardHistoryAction);
  backwardHistoryAction=ActionFactory.BACKWARD_HISTORY.create(window);
  register(backwardHistoryAction);
  quitAction=ActionFactory.QUIT.create(window);
  register(quitAction);
  Object[] adapters=ElementAdapterManager.getAdapters(this,IExtensionFile.class);
  List<IWorkbenchAction> tempList=new ArrayList<IWorkbenchAction>();
  if (adapters != null) {
    for (int i=0; i < adapters.length; i++) {
      IExtensionFile newFile=(IExtensionFile)adapters[i];
      INewExtensionFileWorkbenchAction action=newFile.getNewAction();
      if (action == null) {
        continue;
      }
      action.init(window);
      register(action);
      tempList.add(action);
    }
    newActions=tempList.toArray(new IWorkbenchAction[tempList.size()]);
  }
 else {
    newActions=new IWorkbenchAction[0];
  }
  if (window.getWorkbench().getIntroManager().hasIntro()) {
    introAction=ActionFactory.INTRO.create(window);
    register(introAction);
  }
  pinEditorContributionItem=ContributionItemFactory.PIN_EDITOR.create(window);
}",0.9996790757381258
65209,"/** 
 * Creates and returns the File menu.
 */
private MenuManager createFileMenu(){
  MenuManager menu=new MenuManager(DesignerWorkbenchMessages.Workbench_file,IWorkbenchActionConstants.M_FILE);
  MenuManager newMenu=new MenuManager(DesignerWorkbenchMessages.Workbench_new,ActionFactory.NEW.getId());
  newMenu.add(newReportAction);
  newMenu.add(newLibraryAction);
  newMenu.add(newReportTemplateAction);
  for (int i=0; i < newActios.length; i++) {
    newMenu.add(newActios[i]);
  }
  menu.add(newMenu);
  menu.add(openFileAction);
  menu.add(new Separator());
  menu.add(closeAction);
  menu.add(closeAllAction);
  menu.add(new GroupMarker(IWorkbenchActionConstants.CLOSE_EXT));
  menu.add(new Separator());
  menu.add(saveAction);
  menu.add(saveAsAction);
  menu.add(saveAllAction);
  menu.add(new GroupMarker(IWorkbenchActionConstants.SAVE_EXT));
  menu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(ContributionItemFactory.REOPEN_EDITORS.create(getWindow()));
  menu.add(new GroupMarker(IWorkbenchActionConstants.MRU));
  menu.add(new Separator());
  menu.add(quitAction);
  menu.add(new GroupMarker(IWorkbenchActionConstants.FILE_END));
  return menu;
}","/** 
 * Creates and returns the File menu.
 */
private MenuManager createFileMenu(){
  MenuManager menu=new MenuManager(DesignerWorkbenchMessages.Workbench_file,IWorkbenchActionConstants.M_FILE);
  MenuManager newMenu=new MenuManager(DesignerWorkbenchMessages.Workbench_new,ActionFactory.NEW.getId());
  newMenu.add(newReportAction);
  newMenu.add(newLibraryAction);
  newMenu.add(newReportTemplateAction);
  for (int i=0; i < newActions.length; i++) {
    newMenu.add(newActions[i]);
  }
  menu.add(newMenu);
  menu.add(openFileAction);
  menu.add(new Separator());
  menu.add(closeAction);
  menu.add(closeAllAction);
  menu.add(new GroupMarker(IWorkbenchActionConstants.CLOSE_EXT));
  menu.add(new Separator());
  menu.add(saveAction);
  menu.add(saveAsAction);
  menu.add(saveAllAction);
  menu.add(new GroupMarker(IWorkbenchActionConstants.SAVE_EXT));
  menu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(ContributionItemFactory.REOPEN_EDITORS.create(getWindow()));
  menu.add(new GroupMarker(IWorkbenchActionConstants.MRU));
  menu.add(new Separator());
  menu.add(quitAction);
  menu.add(new GroupMarker(IWorkbenchActionConstants.FILE_END));
  return menu;
}",0.9991603694374476
65210,"/** 
 * Disposes any resources and unhooks any listeners that are no longer needed. Called when the window is closed.
 */
public void dispose(){
  if (isDisposed)   return;
  isDisposed=true;
  pinEditorContributionItem.dispose();
  openFileAction=null;
  newReportAction=null;
  newLibraryAction=null;
  newReportTemplateAction=null;
  for (int i=0; i < newActios.length; i++) {
    newActios[i]=null;
  }
  closeAction=null;
  closeAllAction=null;
  saveAction=null;
  saveAllAction=null;
  helpContentsAction=null;
  aboutAction=null;
  openPreferencesAction=null;
  saveAsAction=null;
  lockToolBarAction=null;
  backwardHistoryAction=null;
  forwardHistoryAction=null;
  undoAction=null;
  redoAction=null;
  cutAction=null;
  copyAction=null;
  pasteAction=null;
  deleteAction=null;
  selectAllAction=null;
  findAction=null;
  quitAction=null;
  pinEditorContributionItem=null;
  introAction=null;
  super.dispose();
}","/** 
 * Disposes any resources and unhooks any listeners that are no longer needed. Called when the window is closed.
 */
public void dispose(){
  if (isDisposed)   return;
  isDisposed=true;
  pinEditorContributionItem.dispose();
  openFileAction=null;
  newReportAction=null;
  newLibraryAction=null;
  newReportTemplateAction=null;
  for (int i=0; i < newActions.length; i++) {
    newActions[i]=null;
  }
  closeAction=null;
  closeAllAction=null;
  saveAction=null;
  saveAllAction=null;
  helpContentsAction=null;
  aboutAction=null;
  openPreferencesAction=null;
  saveAsAction=null;
  lockToolBarAction=null;
  backwardHistoryAction=null;
  forwardHistoryAction=null;
  undoAction=null;
  redoAction=null;
  cutAction=null;
  copyAction=null;
  pasteAction=null;
  deleteAction=null;
  selectAllAction=null;
  findAction=null;
  quitAction=null;
  pinEditorContributionItem=null;
  introAction=null;
  super.dispose();
}",0.9989212513484358
65211,"/** 
 * Init the window
 * @param window
 */
void init(IWorkbenchWindow window);","/** 
 * Initialize the window
 * @param window
 */
void init(IWorkbenchWindow window);",0.963855421686747
65212,"/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == QUARTER) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}","/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == QUARTER) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR || iUnit == WEEK_OF_MONTH) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE || iUnit == DAY_OF_MONTH || iUnit == DAY_OF_WEEK || iUnit == DAY_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}",0.970081595648232
65213,"/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
  return;
}","/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE || iUnit == DAY_OF_MONTH || iUnit == DAY_OF_WEEK || iUnit == DAY_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR || iUnit == WEEK_OF_MONTH) {
    set(Calendar.YEAR,2000);
  }
  return;
}",0.9240214888718342
65214,"/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == GroupingUnitType.QUARTERS) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == GroupingUnitType.QUARTERS) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}","/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearBelow(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == QUARTER) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}",0.988909426987061
65215,"/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == GroupingUnitType.QUARTERS) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
  return;
}","/** 
 * Reset year units for this datetime instance above a specified unit.
 * @param iUnit The unit above which year values are to be reset
 * @param always indicates if it's always trimmed no matter if it's full date time
 */
public final void clearAbove(int iUnit,boolean always){
  if (!always && isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    return;
  }
 else   if (iUnit == MONTH || iUnit == QUARTER) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == DATE) {
    set(Calendar.YEAR,2000);
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.YEAR,2000);
  }
  return;
}",0.9754500818330606
65216,"TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
      int levelIndex1=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
      int levelIndex2=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
      if (levelIndex1 == levelIndex2) {
        this.avoidExtraSort=true;
      }
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  sortType=getSortType(aggr,cubeDimensionReader);
  Comparator comparator=new Row4AggregationComparator(sortType);
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    if (!this.avoidExtraSort) {
      sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
      if (memoryCacheSize == 0) {
        sortedFactRows.setUseMemoryOnly(true);
      }
    }
 else {
      factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
      if (memoryCacheSize == 0) {
        factRows.setUseMemoryOnly(true);
      }
      factRowPostion=0;
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}","TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
      int levelIndex1=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
      int levelIndex2=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
      if (levelIndex1 == levelIndex2) {
        this.avoidExtraSort=true;
      }
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    if (cubeDimensionReader.getlowestLevelIndex(tDimName) == 0)     endLevelIndex=0;
 else     endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  sortType=getSortType(aggr,cubeDimensionReader);
  Comparator comparator=new Row4AggregationComparator(sortType);
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    if (!this.avoidExtraSort) {
      sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
      if (memoryCacheSize == 0) {
        sortedFactRows.setUseMemoryOnly(true);
      }
    }
 else {
      factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
      if (memoryCacheSize == 0) {
        factRows.setUseMemoryOnly(true);
      }
      factRowPostion=0;
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}",0.9908990899089908
65217,"Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=3;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getDrivers();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      boolean isEncryptionMethod=Constants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       if (isEncryptionMethod) {
        propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
      }
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      propertyText.setLayoutData(gd);
      if (isEncryptionMethod) {
        Label blankLabel=new Label(propertyGroup,SWT.NONE);
        GridData blankLabelGd=new GridData();
        blankLabelGd.horizontalSpan=2;
        blankLabel.setLayoutData(blankLabelGd);
        Label prompLabel=new Label(propertyGroup,SWT.NONE);
        prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
        GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
        labelGd.horizontalSpan=3;
        prompLabel.setLayoutData(labelGd);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setMinWidth(size.x + 20);
  scrollContent.setExpandVertical(true);
  scrollContent.setMinHeight(size.y + 20);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}","Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=3;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getInstance().getDriversInfo();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      boolean isEncryptionMethod=DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       if (isEncryptionMethod) {
        propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
      }
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      propertyText.setLayoutData(gd);
      if (isEncryptionMethod) {
        Label blankLabel=new Label(propertyGroup,SWT.NONE);
        GridData blankLabelGd=new GridData();
        blankLabelGd.horizontalSpan=2;
        blankLabel.setLayoutData(blankLabelGd);
        Label prompLabel=new Label(propertyGroup,SWT.NONE);
        prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
        GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
        labelGd.horizontalSpan=3;
        prompLabel.setLayoutData(labelGd);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setMinWidth(size.x + 20);
  scrollContent.setExpandVertical(true);
  scrollContent.setMinHeight(size.y + 20);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}",0.9961618981158408
65218,"/** 
 * Attempts to connect to the Jdbc Data Source using the properties ( username, password, driver class ) specified.
 * @param : showErrorMessage is set to true , and error dialog box will be displayed if the connection fails.
 * @return Returns true if the connection is OK,and false otherwise
 * @throws OdaException
 */
private boolean testConnection() throws OdaException {
  if (!isValidDataSource()) {
    return false;
  }
  String url=jdbcUrl.getText().trim();
  String userid=userName.getText().trim();
  String passwd=password.getText();
  String driverName=getSelectedDriverClassName();
  String jndiNameValue=getODAJndiName();
  if (jndiNameValue.length() == 0)   jndiNameValue=null;
  if (bidiSupportObj == null) {
    if (m_wizardPage instanceof JDBCSelectionWizardPage) {
      bidiSupportObj=((JDBCSelectionWizardPage)m_wizardPage).getBidiSupport();
    }
 else     if (m_propertyPage instanceof JDBCPropertyPage) {
      bidiSupportObj=((JDBCPropertyPage)m_propertyPage).getBidiSupport();
    }
  }
  if (bidiSupportObj != null) {
    return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,bidiSupportObj.getMetadataBidiFormat().toString(),collectSpecifiedProperties());
  }
  return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,collectSpecifiedProperties());
}","/** 
 * Attempts to connect to the Jdbc Data Source using the properties ( username, password, driver class ) specified.
 * @param : showErrorMessage is set to true , and error dialog box will be displayed if the connection fails.
 * @return Returns true if the connection is OK,and false otherwise
 * @throws OdaException
 */
private boolean testConnection() throws OdaException {
  if (!isValidDataSource()) {
    return false;
  }
  String url=jdbcUrl.getText().trim();
  String userid=userName.getText().trim();
  String passwd=password.getText();
  String driverName=getSelectedDriverClassName();
  String jndiNameValue=getODAJndiName();
  if (jndiNameValue.length() == 0)   jndiNameValue=null;
  if (bidiSupportObj == null) {
    if (m_wizardPage instanceof JDBCSelectionWizardPage) {
      bidiSupportObj=((JDBCSelectionWizardPage)m_wizardPage).getBidiSupport();
    }
 else     if (m_propertyPage instanceof JDBCPropertyPage) {
      bidiSupportObj=((JDBCPropertyPage)m_propertyPage).getBidiSupport();
    }
  }
  Properties privateProperties=collectSpecifiedProperties();
  Map appContext=new HashMap();
  appContext.put(org.eclipse.datatools.connectivity.oda.util.ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,this.resourceIdentifier);
  ResourceLocator.resolveConnectionProperties(privateProperties,driverName,appContext);
  if (bidiSupportObj != null) {
    return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,bidiSupportObj.getMetadataBidiFormat().toString(),privateProperties);
  }
  return DriverLoader.testConnection(driverName,url,jndiNameValue,userid,passwd,privateProperties);
}",0.8585858585858586
65219,"private void drawPropertyText(Group propertyGroup,final String propertyName,String propertyContent,boolean encrypt){
  GridData gd;
  final Text propertyText;
  if (encrypt) {
    propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
  }
 else {
    propertyText=new Text(propertyGroup,SWT.BORDER);
  }
  boolean isEncryptionMethod=Constants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
  if (propertyContent != null) {
    propertyText.setText(propertyContent);
    databaseProperties.put(propertyName,propertyContent);
  }
 else   if (isEncryptionMethod) {
    propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
  }
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  propertyText.setLayoutData(gd);
  if (isEncryptionMethod) {
    Label blankLabel=new Label(propertyGroup,SWT.NONE);
    GridData blankLabelGd=new GridData();
    blankLabelGd.horizontalSpan=2;
    blankLabel.setLayoutData(blankLabelGd);
    Label prompLabel=new Label(propertyGroup,SWT.NONE);
    prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
    GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
    labelGd.horizontalSpan=3;
    prompLabel.setLayoutData(labelGd);
  }
  propertyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      databaseProperties.put(propertyName,propertyText.getText());
    }
  }
);
  propertyText.getParent().layout();
}","private void drawPropertyText(Group propertyGroup,final String propertyName,String propertyContent,boolean encrypt){
  GridData gd;
  final Text propertyText;
  if (encrypt) {
    propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
  }
 else {
    propertyText=new Text(propertyGroup,SWT.BORDER);
  }
  boolean isEncryptionMethod=DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPTION_METHOD.equals(propertyName);
  if (propertyContent != null) {
    propertyText.setText(propertyContent);
    databaseProperties.put(propertyName,propertyContent);
  }
 else   if (isEncryptionMethod) {
    propertyText.setText(ENCRYTPION_METHOD_DEFAULT_VALUE);
  }
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  propertyText.setLayoutData(gd);
  if (isEncryptionMethod) {
    Label blankLabel=new Label(propertyGroup,SWT.NONE);
    GridData blankLabelGd=new GridData();
    blankLabelGd.horizontalSpan=2;
    blankLabel.setLayoutData(blankLabelGd);
    Label prompLabel=new Label(propertyGroup,SWT.NONE);
    prompLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
    GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
    labelGd.horizontalSpan=3;
    prompLabel.setLayoutData(labelGd);
  }
  propertyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      databaseProperties.put(propertyName,propertyText.getText());
    }
  }
);
  propertyText.getParent().layout();
}",0.9965349965349966
65220,"private void drawPropertyGroups(final JDBCDriverInformation info){
  ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
  porpertyGroupComposite.setVisible(true);
  ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
  databaseProperties.clear();
  List<PropertyGroup> propertyGroups=info.getPropertyGroup();
  for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
    PropertyGroup group=(PropertyGroup)(it.next());
    String propertyGroupName=group.getName();
    List<PropertyElement> propertyList=group.getProperties();
    Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
    for (int i=0; i < propertyList.size(); i++) {
      final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
      Label propertyParam=new Label(propertyGroup,SWT.NONE);
      String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
      if (propertyParamDisplayName == null) {
        propertyParamDisplayName=propertyName;
      }
      propertyParam.setText(propertyParamDisplayName);
      propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      propertyParam.setLayoutData(gd);
      String propertyContent=null;
      if (profileProperties != null && !profileProperties.isEmpty()) {
        propertyContent=getProfileproperty(propertyName);
      }
      if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
        drawPropertyCombo(propertyGroup,propertyName,propertyContent);
      }
 else {
        if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
          drawPropertyText(propertyGroup,propertyName,propertyContent,true);
        }
 else         drawPropertyText(propertyGroup,propertyName,propertyContent,false);
      }
    }
    propertyGroup.getParent().layout();
  }
}","private void drawPropertyGroups(final JDBCDriverInformation info){
  ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
  porpertyGroupComposite.setVisible(true);
  ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
  databaseProperties.clear();
  List<PropertyGroup> propertyGroups=info.getPropertyGroup();
  for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
    PropertyGroup group=(PropertyGroup)(it.next());
    String propertyGroupName=group.getName();
    List<PropertyElement> propertyList=group.getProperties();
    Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
    for (int i=0; i < propertyList.size(); i++) {
      final String propertyName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_NAME);
      Label propertyParam=new Label(propertyGroup,SWT.NONE);
      String propertyParamDisplayName=propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
      if (propertyParamDisplayName == null) {
        propertyParamDisplayName=propertyName;
      }
      propertyParam.setText(propertyParamDisplayName);
      propertyParam.setToolTipText(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_DEC));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      propertyParam.setLayoutData(gd);
      String propertyContent=null;
      if (profileProperties != null && !profileProperties.isEmpty()) {
        propertyContent=getProfileproperty(propertyName);
      }
      if (DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_TYPE))) {
        drawPropertyCombo(propertyGroup,propertyName,propertyContent);
      }
 else {
        if (Boolean.valueOf(propertyList.get(i).getAttribute(DriverInfoConstants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
          drawPropertyText(propertyGroup,propertyName,propertyContent,true);
        }
 else         drawPropertyText(propertyGroup,propertyName,propertyContent,false);
      }
    }
    propertyGroup.getParent().layout();
  }
}",0.985941893158388
65221,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public synchronized static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    tempAddedInDriverInfos.clear();
    return getDriverList();
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  tempAddedInDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return getDriverList();
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public synchronized static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    tempAddedInDriverInfos.clear();
    return getDriverList();
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  tempAddedInDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getInstance().getDriversInfo();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return getDriverList();
}",0.9913279132791328
65222,"/** 
 * @param dataExpr
 * @param scope
 * @return
 * @throws BirtException
 */
private Object doEvaluateRawExpression(IBaseExpression dataExpr,Scriptable scope,boolean javaType,ScriptContext cx,DataSetRuntime dataSet) throws BirtException {
  if (dataSet == null) {
    return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
  }
  String dataSetColumn=extractDirectColumn(dataExpr,cx,false);
  if (dataSetColumn != null) {
    if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
      Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
      return DataTypeUtil.convert(value,dataExpr.getDataType());
    }
  }
  String rowName=extractDirectColumn(dataExpr,cx,true);
  if (rowName != null) {
    Scriptable scriptable=dataSet.getJSResultRowObject();
    if (scriptable instanceof JSResultSetRow) {
      JSResultSetRow resultSetRow=(JSResultSetRow)scriptable;
      IBinding b=resultSetRow.getBinding(rowName);
      if (resultSetRow.getOdiResult().getCurrentResult().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=resultSetRow.getOdiResult().getCurrentResult().getFieldValue(rowName);
        return DataTypeUtil.convert(value,b.getDataType());
      }
      if (b != null && b.getAggrFunction() == null) {
        IBaseExpression expr=b.getExpression();
        dataSetColumn=extractDirectColumn(expr,cx,false);
        if (dataSetColumn != null) {
          if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
            Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
            return DataTypeUtil.convert(value,b.getDataType());
          }
        }
      }
    }
 else {
      if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=dataSet.getCurrentRow().getFieldValue(rowName);
        return DataTypeUtil.convert(value,dataExpr.getDataType());
      }
    }
  }
  return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
}","/** 
 * @param dataExpr
 * @param scope
 * @return
 * @throws BirtException
 */
private Object doEvaluateRawExpression(IBaseExpression dataExpr,Scriptable scope,boolean javaType,ScriptContext cx,DataSetRuntime dataSet) throws BirtException {
  if (dataSet == null) {
    return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
  }
  String dataSetColumn=extractDirectColumn(dataExpr,cx,false);
  if (dataSetColumn != null) {
    if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
      Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
      return DataTypeUtil.convert(value,dataExpr.getDataType());
    }
  }
  String rowName=extractDirectColumn(dataExpr,cx,true);
  if (rowName != null) {
    Scriptable scriptable=dataSet.getJSResultRowObject();
    if (scriptable instanceof JSResultSetRow) {
      JSResultSetRow resultSetRow=(JSResultSetRow)scriptable;
      IBinding b=resultSetRow.getBinding(rowName);
      if (b != null && b.getAggrFunction() == null) {
        IBaseExpression expr=b.getExpression();
        dataSetColumn=extractDirectColumn(expr,cx,false);
        if (dataSetColumn != null) {
          if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(dataSetColumn) >= 0) {
            Object value=dataSet.getCurrentRow().getFieldValue(dataSetColumn);
            return DataTypeUtil.convert(value,b.getDataType());
          }
        }
      }
    }
 else {
      if (dataSet.getCurrentRow() != null && dataSet.getCurrentRow().getResultClass().getFieldIndex(rowName) >= 0) {
        Object value=dataSet.getCurrentRow().getFieldValue(rowName);
        return DataTypeUtil.convert(value,dataExpr.getDataType());
      }
    }
  }
  return doEvaluateRawExpression(dataExpr,scope,javaType,cx);
}",0.6641356618577575
65223,"public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnCategory(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnCategory(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  SeriesDefinition sd=ChartUtil.getBaseSeriesDefinitions(model).get(0);
  Query query=ChartUtil.getDataQuery(sd,0);
  return !isCubeTopLevel(query,itemHandle);
}","public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnCategory(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  if (model == null) {
    return false;
  }
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnCategory(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  SeriesDefinition sd=ChartUtil.getBaseSeriesDefinitions(model).get(0);
  Query query=ChartUtil.getDataQuery(sd,0);
  return !isCubeTopLevel(query,itemHandle);
}",0.953846153846154
65224,"public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnSeries(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnSeries(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  Query query=ChartUtil.getAllOrthogonalSeriesDefinitions(model).get(0).getQuery();
  return !isCubeTopLevel(query,itemHandle);
}","public static boolean isKeepCubeHierarchyAndNotCubeTopLevelOnSeries(Chart model,CubeHandle cubeHandle,ReportItemHandle itemHandle){
  if (model == null) {
    return false;
  }
  boolean isKeepCubeHierarchy=isKeepCubeHierarchyOnSeries(model);
  if (!isKeepCubeHierarchy) {
    return false;
  }
  if (cubeHandle == null) {
    return false;
  }
  Query query=ChartUtil.getAllOrthogonalSeriesDefinitions(model).get(0).getQuery();
  return !isCubeTopLevel(query,itemHandle);
}",0.9501661129568106
65225,"/** 
 * Updates using state of groups, if category expression and Y optional expression have related group on specified GroupDefinition, set <code>true</code> value to that item of group indexes array.
 * @param cm current chart model.
 * @param groupDefinitions grouping definition.
 * @throws ChartException
 */
protected void updateEnabledGroupIndexes(Chart cm,List<IGroupDefinition> groupDefinitions) throws ChartException {
  faEnabledGroups=new boolean[fGroupCount];
  boolean isSharing=isSharing();
  EList<SeriesDefinition> baseSDs=ChartUtil.getBaseSeriesDefinitions(cm);
  for (  SeriesDefinition sd : baseSDs) {
    if (sd.getDesignTimeSeries().getDataDefinition().isEmpty() || sd.getGrouping() == null || !sd.getGrouping().isEnabled()) {
      continue;
    }
    Query q=sd.getDesignTimeSeries().getDataDefinition().get(0);
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getGrouping() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getGrouping(),gd);
      }
    }
  }
  List<SeriesDefinition> orthoSDs=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  for (  SeriesDefinition sd : orthoSDs) {
    Query q=sd.getQuery();
    if (q == null || q.getDefinition() == null || ""String_Node_Str"".equals(q.getDefinition().trim())) {
      continue;
    }
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getQuery() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getQuery().getGrouping(),gd);
      }
    }
  }
}","/** 
 * Updates using state of groups, if category expression and Y optional expression have related group on specified GroupDefinition, set <code>true</code> value to that item of group indexes array.
 * @param cm current chart model.
 * @param groupDefinitions grouping definition.
 * @throws ChartException
 */
protected void updateEnabledGroupIndexes(Chart cm,List<IGroupDefinition> groupDefinitions) throws ChartException {
  faEnabledGroups=new boolean[fGroupCount];
  boolean isSharing=isSharing();
  EList<SeriesDefinition> baseSDs=ChartUtil.getBaseSeriesDefinitions(cm);
  for (  SeriesDefinition sd : baseSDs) {
    if (sd.getDesignTimeSeries().getDataDefinition().isEmpty() || sd.getGrouping() == null || !sd.getGrouping().isEnabled()) {
      continue;
    }
    Query q=sd.getDesignTimeSeries().getDataDefinition().get(0);
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions,true);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getGrouping() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getGrouping(),gd);
      }
    }
  }
  List<SeriesDefinition> orthoSDs=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  for (  SeriesDefinition sd : orthoSDs) {
    Query q=sd.getQuery();
    if (q == null || q.getDefinition() == null || ""String_Node_Str"".equals(q.getDefinition().trim())) {
      continue;
    }
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions,false);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getQuery() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getQuery().getGrouping(),gd);
      }
    }
  }
}",0.9968917773382312
65226,"/** 
 * Returns the index of specified expression on GroupDefinition.
 * @param expr specified expression.
 * @param groupDefinitions list of <code>GroupDefinition</code>
 * @return
 * @throws ChartException
 */
private int getGroupIndex(String expr,List<IGroupDefinition> groupDefinitions) throws ChartException {
  if (expr == null) {
    return -1;
  }
  exprCodec.decode(expr);
  Set<String> bindingNameSet=exprCodec.getRowBindingNameSet();
  boolean isJavaScript=ExpressionCodec.JAVASCRIPT.equals(exprCodec.getType());
  for (int i=0; i < groupDefinitions.size(); i++) {
    IGroupDefinition gd=groupDefinitions.get(i);
    String exprGroupKey=gd.getKeyExpression();
    if (isJavaScript) {
      if (expr.indexOf(exprGroupKey) >= 0) {
        return i;
      }
    }
    if (!bindingNameSet.isEmpty()) {
      Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
      for (      String grpBinding : grpBindings) {
        if (bindingNameSet.contains(grpBinding)) {
          return i;
        }
      }
    }
  }
  return -1;
}","/** 
 * Returns the index of specified expression on GroupDefinition.
 * @param expr specified expression.
 * @param groupDefinitions list of <code>GroupDefinition</code>
 * @param isCategory
 * @return
 * @throws ChartException
 */
private int getGroupIndex(String expr,List<IGroupDefinition> groupDefinitions,boolean isCategory) throws ChartException {
  if (expr == null) {
    return -1;
  }
  exprCodec.decode(expr);
  Set<String> bindingNameSet=exprCodec.getRowBindingNameSet();
  boolean isJavaScript=ExpressionCodec.JAVASCRIPT.equals(exprCodec.getType());
  if (isCategory) {
    for (int i=groupDefinitions.size() - 1; i >= 0; i--) {
      IGroupDefinition gd=groupDefinitions.get(i);
      String exprGroupKey=gd.getKeyExpression();
      if (isJavaScript) {
        if (expr.indexOf(exprGroupKey) >= 0) {
          return i;
        }
      }
      if (!bindingNameSet.isEmpty()) {
        Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
        for (        String grpBinding : grpBindings) {
          if (bindingNameSet.contains(grpBinding)) {
            return i;
          }
        }
      }
    }
  }
 else {
    for (int i=0; i < groupDefinitions.size(); i++) {
      IGroupDefinition gd=groupDefinitions.get(i);
      String exprGroupKey=gd.getKeyExpression();
      if (isJavaScript) {
        if (expr.indexOf(exprGroupKey) >= 0) {
          return i;
        }
      }
      if (!bindingNameSet.isEmpty()) {
        Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
        for (        String grpBinding : grpBindings) {
          if (bindingNameSet.contains(grpBinding)) {
            return i;
          }
        }
      }
    }
  }
  return -1;
}",0.7420520231213873
65227,"public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor,QueryExecutionHelper.DataSetHandleProcessContext context) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getQualifiedName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor,context);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor,context);
    }
  }
  IBaseDataSetDesign design=((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName());
  if (design == null) {
    design=modelAdaptor.adaptDataSet(dataSet);
    dataEngine.defineDataSet(design);
  }
  if (context != null)   context.process(design,dataSet);
}","public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor,QueryExecutionHelper.DataSetHandleProcessContext context) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getQualifiedName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor,context);
      }
    }
  }
 else   if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor,context);
    }
  }
  IBaseDataSetDesign design=((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName());
  if (design == null) {
    design=modelAdaptor.adaptDataSet(dataSet);
    dataEngine.defineDataSet(design);
  }
  if (context != null)   context.process(design,dataSet);
}",0.9981718464351006
65228,"/** 
 * prepare for transient query
 * @param sessionContext
 * @param dataEngine
 * @param handle
 * @param queryDefn
 * @throws BirtException
 */
public static void prepareForTransientQuery(DataSessionContext dContext,DataEngineImpl dataEngine,DataSetHandle handle,IQueryDefinition queryDefn,IDataQueryDefinition[] registedQueries) throws BirtException {
  IBaseDataSetDesign design=null;
  if (handle == null) {
    if (queryDefn.getDataSetName() == null) {
      if (queryDefn.getSourceQuery() != null && queryDefn.getSourceQuery() instanceof IQueryDefinition)       design=dataEngine.getDataSetDesign(((IQueryDefinition)queryDefn.getSourceQuery()).getDataSetName());
    }
 else     design=dataEngine.getDataSetDesign(queryDefn.getDataSetName());
  }
 else {
    design=dataEngine.getDataSetDesign(handle.getQualifiedName());
  }
  final IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(dContext,dataEngine.getDataSourceDesign(design.getDataSourceName()),design,queryDefn,registedQueries);
    dataEngine.addShutdownListener(new IShutdownListener(){
      public void dataEngineShutdown(){
        try {
          dataSetInterceptor.close();
        }
 catch (        BirtException e) {
        }
      }
    }
);
    return;
  }
  if (handle instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)handle;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        prepareForTransientQuery(dContext,dataEngine,childDataSet,queryDefn,registedQueries);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List<DataSetHandle> inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      prepareForTransientQuery(dContext,dataEngine,inputDataSet.get(i),queryDefn,registedQueries);
    }
  }
}","/** 
 * prepare for transient query
 * @param sessionContext
 * @param dataEngine
 * @param handle
 * @param queryDefn
 * @throws BirtException
 */
public static void prepareForTransientQuery(DataSessionContext dContext,DataEngineImpl dataEngine,DataSetHandle handle,IQueryDefinition queryDefn,IDataQueryDefinition[] registedQueries) throws BirtException {
  IBaseDataSetDesign design=null;
  if (handle == null) {
    if (queryDefn.getDataSetName() == null) {
      if (queryDefn.getSourceQuery() != null && queryDefn.getSourceQuery() instanceof IQueryDefinition)       design=dataEngine.getDataSetDesign(((IQueryDefinition)queryDefn.getSourceQuery()).getDataSetName());
    }
 else     design=dataEngine.getDataSetDesign(queryDefn.getDataSetName());
  }
 else {
    design=dataEngine.getDataSetDesign(handle.getQualifiedName());
  }
  final IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(dataEngine.getDataSourceDesign(design.getDataSourceName()),design,queryDefn,registedQueries,dContext,dataEngine.getSession().getTempDir());
    dataEngine.addShutdownListener(new IShutdownListener(){
      public void dataEngineShutdown(){
        try {
          dataSetInterceptor.close();
        }
 catch (        BirtException e) {
        }
      }
    }
);
    return;
  }
  if (handle instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)handle;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        prepareForTransientQuery(dContext,dataEngine,childDataSet,queryDefn,registedQueries);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List<DataSetHandle> inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      prepareForTransientQuery(dContext,dataEngine,inputDataSet.get(i),queryDefn,registedQueries);
    }
  }
}",0.9865951742627346
65229,"private String getDataText(Object element){
  if (element != null) {
    if (expectedColumnDataType == DataType.SQL_DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.SQL_TIME_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else {
      try {
        return DataTypeUtil.toString(element);
      }
 catch (      BirtException e) {
        return String.valueOf(element);
      }
    }
  }
  return null;
}","private String getDataText(Object element){
  if (element != null) {
    if (expectedColumnDataType == DataType.SQL_DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.SQL_TIME_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (expectedColumnDataType == DataType.DATE_TYPE && element instanceof Date) {
      formatter.applyPattern(""String_Node_Str"");
      return formatter.format((Date)element);
    }
 else     if (element instanceof Number) {
      try {
        return DataTypeUtil.toLocaleNeutralString(element);
      }
 catch (      BirtException e) {
        return String.valueOf(element);
      }
    }
 else {
      try {
        return DataTypeUtil.toString(element);
      }
 catch (      BirtException e) {
        return String.valueOf(element);
      }
    }
  }
  return null;
}",0.8739224137931034
65230,"public BaseTopBottomAccumulator(){
  this.tempDir=TempDir.getInstance().getPath();
  targetValue=new BasicCachedArray(tempDir,0);
}","public BaseTopBottomAccumulator(){
  if (DataEngineThreadLocal.getInstance().getPathManager() != null) {
    tempDir=DataEngineThreadLocal.getInstance().getPathManager().getTempFileName(""String_Node_Str"",this.hashCode(),null) + File.separator;
  }
 else {
    tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + this.hashCode()+ File.separator;
  }
  targetValue=new BasicCachedArray(tempDir,0);
}",0.3713235294117647
65231,"public BaseTopBottomAccumulator(){
  if (DataEngineThreadLocal.getInstance().getPathManager() != null) {
    tempDir=DataEngineThreadLocal.getInstance().getPathManager().getTempFileName(""String_Node_Str"",this.hashCode(),null) + File.separator;
  }
 else {
    tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + this.hashCode()+ File.separator;
  }
  targetValue=new BasicCachedArray(tempDir,0);
}","public BaseTopBottomAccumulator(){
  if (DataEngineThreadLocal.getInstance().getPathManager() != null) {
    tempDir=DataEngineThreadLocal.getInstance().getPathManager().getTempFileName(""String_Node_Str"",this.hashCode(),null) + File.separator;
  }
 else {
    tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + this.hashCode()+ File.separator;
  }
  targetValue=new BasicCachedArray(tempDir,0);
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}",0.9239373601789708
65232,"/** 
 * @return
 * @throws IOException
 */
private long getOffset() throws IOException {
  return randomAccessFile.getFilePointer();
}","/** 
 * @return
 * @throws IOException
 */
private long getOffset() throws IOException {
  return getRandomAccessFile().getFilePointer();
}",0.9743589743589745
65233,"/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=0;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList<Long>();
  this.segmentOffsets.add(Long.valueOf(0L));
  createRandomAccessFile();
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}","/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=0;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList<Long>();
  this.segmentOffsets.add(Long.valueOf(0L));
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}",0.9582089552238806
65234,"/** 
 * Reads up to <code>readSize</code> objects from disk.
 * @param dis
 * @param list
 * @return
 * @throws IOException
 */
private void readObjects(long offset,int readSize) throws IOException {
  this.randomAccessFile.seek(offset);
  for (int i=0; i < readSize; i++) {
    this.buffer[i]=readObject();
  }
}","/** 
 * Reads up to <code>readSize</code> objects from disk.
 * @param dis
 * @param list
 * @return
 * @throws IOException
 */
private void readObjects(long offset,int readSize) throws IOException {
  getRandomAccessFile().seek(offset);
  for (int i=0; i < readSize; i++) {
    this.buffer[i]=readObject();
  }
}",0.9808306709265175
65235,"protected void writeObject(Object object) throws IOException {
  if (object == null) {
    randomAccessFile.writeShort(NULL_VALUE);
    return;
  }
  randomAccessFile.writeShort(NORMAL_VALUE);
  if (fieldWriter == null) {
    fieldWriter=IOUtil.getRandomWriter(DataType.getDataType(object.getClass()));
    fieldReader=IOUtil.getRandomReader(DataType.getDataType(object.getClass()));
  }
  fieldWriter.write(randomAccessFile,object);
}","protected void writeObject(Object object) throws IOException {
  if (object == null) {
    getRandomAccessFile().writeShort(NULL_VALUE);
    return;
  }
  getRandomAccessFile().writeShort(NORMAL_VALUE);
  if (fieldWriter == null) {
    fieldWriter=IOUtil.getRandomWriter(DataType.getDataType(object.getClass()));
    fieldReader=IOUtil.getRandomReader(DataType.getDataType(object.getClass()));
  }
  fieldWriter.write(getRandomAccessFile(),object);
}",0.976271186440678
65236,"protected Object readObject() throws IOException {
  short fieldCount=randomAccessFile.readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  return fieldReader.read(randomAccessFile);
}","protected Object readObject() throws IOException {
  short fieldCount=getRandomAccessFile().readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  return fieldReader.read(getRandomAccessFile());
}",0.9660194174757282
65237,"public Object load(){
  ReportItemHandle element=getReportItemHandle();
  int type=element.getDataBindingType();
  List referenceList=getAvailableDataBindingReferenceList(element);
  String[] references=new String[referenceList.size() + 1];
  references[0]=NONE;
  for (int i=0; i < referenceList.size(); i++) {
    references[i + 1]=((ReportItemHandle)referenceList.get(i)).getQualifiedName();
  }
  setReferences(references);
  Object value;
switch (type) {
case ReportItemHandle.DATABINDING_TYPE_DATA:
    DataSetHandle dataset=ChartReportItemHelper.instance().getBindingDataSetHandle(element);
  CubeHandle cube=ChartReportItemHelper.instance().getBindingCubeHandle(element);
if (dataset == null && cube == null) value=NONE;
 else if (dataset != null) value=dataset.getQualifiedName();
 else value=cube.getName();
break;
case ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF:
ReportItemHandle reference=element.getDataBindingReference();
if (reference == null) value=NONE;
 else value=reference.getQualifiedName();
break;
default :
value=NONE;
}
BindingInfo info=new BindingInfo(type,value);
if (ChartReportItemUtil.isChildOfMultiViewsHandle(getReportItemHandle())) {
Object name=element.getContainer().getContainer().getQualifiedName();
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
name=(name == null) ? NONE : name;
info.setBindingValue(name);
info.setReadOnly(true);
}
if (ChartCubeUtil.isPlotChart(element) || ChartCubeUtil.isAxisChart(element)) {
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
info.setReadOnly(true);
}
return info;
}","public Object load(){
  ReportItemHandle element=getReportItemHandle();
  boolean isNotDataModel=false;
  ;
  int type=element.getDataBindingType();
  List referenceList=getAvailableDataBindingReferenceList(element);
  String[] references=new String[referenceList.size() + 1];
  references[0]=NONE;
  for (int i=0; i < referenceList.size(); i++) {
    references[i + 1]=((ReportItemHandle)referenceList.get(i)).getQualifiedName();
  }
  setReferences(references);
  String value;
switch (type) {
case ReportItemHandle.DATABINDING_TYPE_DATA:
    DataSetHandle dataset=ChartReportItemHelper.instance().getBindingDataSetHandle(element);
  CubeHandle cube=ChartReportItemHelper.instance().getBindingCubeHandle(element);
if (dataset == null && cube == null) {
  value=NullDatasetChoice.getBindingValue();
  isNotDataModel=true;
}
 else if (dataset != null) {
  List datasets=element.getModuleHandle().getAllDataSets();
  if (datasets != null) {
    for (int i=0; i < datasets.size(); i++) {
      if (datasets.get(i) == dataset) {
        isNotDataModel=true;
        break;
      }
    }
  }
  value=dataset.getQualifiedName();
}
 else {
  List cubes=element.getModuleHandle().getAllCubes();
  if (cubes != null) {
    for (int i=0; i < cubes.size(); i++) {
      if (cubes.get(i) == cube) {
        isNotDataModel=true;
        break;
      }
    }
  }
  value=cube.getName();
}
break;
case ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF:
ReportItemHandle reference=element.getDataBindingReference();
if (reference == null) value=NONE;
 else value=reference.getQualifiedName();
break;
default :
{
value=NullDatasetChoice.getBindingValue();
isNotDataModel=true;
}
}
BindingInfo info=new BindingInfo(type,value,isNotDataModel);
if (ChartReportItemUtil.isChildOfMultiViewsHandle(getReportItemHandle())) {
String name=element.getContainer().getContainer().getQualifiedName();
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
name=(name == null) ? NONE : name;
info.setBindingValue(name);
info.setReadOnly(true);
}
if (ChartCubeUtil.isPlotChart(element) || ChartCubeUtil.isAxisChart(element)) {
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
info.setReadOnly(true);
}
return info;
}",0.8222978277937713
65238,"private void resetDataSetReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    getReportItemHandle().setDataBindingReference(null);
    DataSetHandle dataSet=null;
    if (value != null) {
      dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setCube(null);
    getReportItemHandle().setDataSet(dataSet);
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    getDependedProvider().generateAllBindingColumns();
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}","private void resetDataSetReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    getReportItemHandle().setDataBindingReference(null);
    DataSetHandle dataSet=null;
    if (value != null) {
      dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setCube(null);
    if (dataSet == null && value != null) {
      getReportItemHandle().setDataSet(null);
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),value);
    }
 else {
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),null);
      getReportItemHandle().setDataSet(dataSet);
    }
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    getDependedProvider().generateAllBindingColumns();
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}",0.83718820861678
65239,"private void resetCubeReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    CubeHandle cubeHandle=null;
    if (value != null) {
      cubeHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().findCube(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setDataSet(null);
    getReportItemHandle().setCube(cubeHandle);
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}","private void resetCubeReference(Object value,boolean clearHistory){
  try {
    startTrans(""String_Node_Str"");
    CubeHandle cubeHandle=null;
    if (value != null) {
      cubeHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().findCube(value.toString());
    }
    if (getReportItemHandle().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      getReportItemHandle().setDataBindingReference(null);
    }
    getReportItemHandle().setDataSet(null);
    if (cubeHandle == null && value != null) {
      getReportItemHandle().setDataSet(null);
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),value);
    }
 else {
      new LinkedDataSetAdapter().setLinkedDataModel(getReportItemHandle(),null);
      getReportItemHandle().setCube(cubeHandle);
    }
    getReportItemHandle().setCube(cubeHandle);
    if (clearHistory) {
      getReportItemHandle().getColumnBindings().clearValue();
      getReportItemHandle().getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
    }
    commit();
  }
 catch (  SemanticException e) {
    rollback();
    ExceptionHandler.handle(e);
  }
  section.load();
}",0.8399803052683407
65240,"public String[] getAvailableDatasetItems(){
  String[] dataSets=ChoiceSetFactory.getDataSets();
  String[] cubes=getCubes();
  int length=1;
  if (dataSets.length > 0)   length+=(dataSets.length + 1);
  if (cubes.length > 0)   length+=(cubes.length + 1);
  String[] newList=new String[length];
  newList[0]=NONE;
  if (dataSets.length > 0) {
    newList[1]=DATA_SETS_DEFAULT;
    System.arraycopy(dataSets,0,newList,2,dataSets.length);
  }
  if (cubes.length > 0) {
    newList[newList.length - cubes.length - 1]=DATA_CUBES_DEFAULT;
    System.arraycopy(cubes,0,newList,newList.length - cubes.length,cubes.length);
  }
  return newList;
}","public BindingInfo[] getAvailableDatasetItems(){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  List<DataSetHandle> dataSets=UIUtil.getVisibleDataSetHandles(handle);
  List<CubeHandle> cubes=handle.getVisibleCubes();
  int length=1;
  if (dataSets.size() > 0)   length+=(dataSets.size() + 1);
  if (cubes.size() > 0)   length+=(cubes.size() + 1);
  BindingInfo[] newList=new BindingInfo[length];
  newList[0]=NullDatasetChoice;
  if (dataSets.size() > 0) {
    newList[1]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,DATA_SETS_DEFAULT,true);
    for (int i=0; i < dataSets.size(); i++) {
      DataSetHandle dataSet=dataSets.get(i);
      if (handle.findDataSet(dataSet.getQualifiedName()) == dataSet) {
        newList[i + 2]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,dataSet.getQualifiedName(),true);
      }
 else {
        newList[i + 2]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,dataSet.getQualifiedName(),false);
      }
    }
  }
  if (cubes.size() > 0) {
    newList[newList.length - cubes.size() - 1]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,DATA_CUBES_DEFAULT,true);
    ;
    for (int i=0; i < cubes.size(); i++) {
      CubeHandle cube=cubes.get(i);
      newList[i + newList.length - cubes.size()]=new BindingInfo(ReportItemHandle.DATABINDING_TYPE_DATA,cube.getQualifiedName(),true);
    }
  }
  return newList;
}",0.1960019502681618
65241,"/** 
 * Uses BIRT data engine to do query and wraps data with <code>IDataRowExpressionEvaluator</code> for chart doing data binding.
 * @return
 * @throws BirtException
 */
private IDataRowExpressionEvaluator prepareRowExpressionEvaluator(ChartWithAxes chart,String[] expressions) throws BirtException {
  OdaDataSourceDesign odaDataSource=newDataSource();
  OdaDataSetDesign odaDataSet=newDataSet(odaDataSource);
  QueryDefinition query=createQueryDefinition(odaDataSet,expressions);
  DataEngine dataEngine=newDataEngine();
  dataEngine.defineDataSource(odaDataSource);
  dataEngine.defineDataSet(odaDataSet);
  IPreparedQuery preparedQuery=dataEngine.prepare(query);
  IQueryResults queryResults=preparedQuery.execute(null);
  return new GroupedRowExpressionsEvaluator(queryResults.getResultIterator(),true){
    public Object evaluate(    String expression){
      String bindingName=expressionMap.get(expression);
      if (bindingName != null)       return super.evaluate(bindingName);
      return super.evaluate(expression);
    }
  }
;
}","/** 
 * Uses BIRT data engine to do query and wraps data with <code>IDataRowExpressionEvaluator</code> for chart doing data binding.
 * @return
 * @throws BirtException
 */
private IDataRowExpressionEvaluator prepareRowExpressionEvaluator(ChartWithAxes chart,String[] expressions) throws BirtException {
  OdaDataSourceDesign odaDataSource=newDataSource();
  OdaDataSetDesign odaDataSet=newDataSet(odaDataSource);
  QueryDefinition query=createQueryDefinition(chart,odaDataSet);
  DataEngine dataEngine=newDataEngine();
  dataEngine.defineDataSource(odaDataSource);
  dataEngine.defineDataSet(odaDataSet);
  IPreparedQuery preparedQuery=dataEngine.prepare(query);
  IQueryResults queryResults=preparedQuery.execute(null);
  return new GroupedRowExpressionsEvaluator(queryResults.getResultIterator(),true){
    public Object evaluate(    String expression){
      String bindingName=expressionMap.get(expression);
      if (bindingName != null)       return super.evaluate(bindingName);
      return super.evaluate(expression);
    }
  }
;
}",0.9837008628954936
65242,"/** 
 * Create query definition.
 * @param odaDataSet
 * @param expressions
 * @return
 * @throws ChartException
 */
private QueryDefinition createQueryDefinition(OdaDataSetDesign odaDataSet,String[] expressions) throws ChartException {
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(odaDataSet.getName());
  try {
    initDefaultBindings(queryDefn);
    String groupName=""String_Node_Str"";
    GroupDefinition gd=new GroupDefinition(groupName);
    gd.setKeyExpression(expressions[0]);
    gd.setInterval(IGroupDefinition.NO_INTERVAL);
    gd.setIntervalRange(0);
    for (int i=0; i < expressions.length; i++) {
      String expr=expressions[i];
      Binding colBinding=null;
      if (i == 1) {
        String newStr=ChartUtil.escapeSpecialCharacters(expr + ""String_Node_Str"" + ""String_Node_Str"");
        colBinding=new Binding(newStr);
        colBinding.setExpression(null);
        colBinding.setAggrFunction(IBuildInAggregation.TOTAL_COUNT_FUNC);
        colBinding.addAggregateOn(groupName);
        colBinding.addArgument(new ScriptExpression(expressions[i]));
        expressionMap.put(ExpressionUtil.createRowExpression(newStr),newStr);
      }
 else {
        colBinding=new Binding(expr);
        colBinding.setExpression(new ScriptExpression(expr));
      }
      queryDefn.addBinding(colBinding);
    }
    queryDefn.addGroup(gd);
  }
 catch (  DataException e) {
    throw new ChartException(ChartExamplesPlugin.ID,ChartException.DATA_BINDING,e);
  }
  return queryDefn;
}","/** 
 * Create query definition.
 * @param chart
 * @param odaDataSet
 * @return
 * @throws ChartException
 */
private QueryDefinition createQueryDefinition(Chart chart,OdaDataSetDesign odaDataSet) throws ChartException {
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(odaDataSet.getName());
  try {
    initDefaultBindings(queryDefn);
    SeriesDefinition baseSD=ChartUtil.getBaseSeriesDefinitions(chart).get(0);
    SeriesDefinition orthSD=ChartUtil.getAllOrthogonalSeriesDefinitions(chart).get(0);
    String categoryExpr=baseSD.getDesignTimeSeries().getDataDefinition().get(0).getDefinition();
    String groupName=""String_Node_Str"";
    GroupDefinition gd=new GroupDefinition(groupName);
    gd.setKeyExpression(categoryExpr);
    gd.setInterval(IGroupDefinition.NO_INTERVAL);
    gd.setIntervalRange(0);
    queryDefn.addGroup(gd);
    Binding colBinding=new Binding(categoryExpr);
    colBinding.setExpression(new ScriptExpression(categoryExpr));
    queryDefn.addBinding(colBinding);
    String valueBinding=ChartUtil.generateBindingNameOfValueSeries(orthSD.getDesignTimeSeries().getDataDefinition().get(0),orthSD,baseSD,true);
    colBinding=new Binding(valueBinding);
    colBinding.setExpression(null);
    colBinding.setAggrFunction(IBuildInAggregation.TOTAL_COUNT_FUNC);
    colBinding.addAggregateOn(groupName);
    colBinding.addArgument(new ScriptExpression(orthSD.getDesignTimeSeries().getDataDefinition().get(0).getDefinition()));
    expressionMap.put(ExpressionUtil.createRowExpression(valueBinding),valueBinding);
    queryDefn.addBinding(colBinding);
  }
 catch (  DataException e) {
    throw new ChartException(ChartExamplesPlugin.ID,ChartException.DATA_BINDING,e);
  }
  return queryDefn;
}",0.5736149372513009
65243,"public boolean isSaveAsAllowed(){
  return getActivePageInstance().isSaveAsAllowed();
}","public boolean isSaveAsAllowed(){
  if (getActivePageInstance() != null) {
    return getActivePageInstance().isSaveAsAllowed();
  }
  return false;
}",0.7341772151898734
65244,"protected void okPressed(){
  result=new Object[3];
  if (dataSetName != null || dataSetCombo.getSelectionIndex() > 0) {
    if (dataSetName == null) {
      result[0]=dataSetCombo.getItem(dataSetCombo.getSelectionIndex());
    }
 else {
      result[0]=dataSetName;
    }
    if (columnViewers.getCheckedElements() != null) {
      result[1]=columnViewers.getCheckedElements();
      List<String> list=new ArrayList<String>();
      for (int i=0; i < columnViewers.getTable().getItemCount(); i++) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)columnViewers.getElementAt(i);
        if (!columnViewers.getChecked(column)) {
          list.add(column.getColumnName());
        }
      }
      result[2]=list.toArray();
    }
 else {
      result[1]=null;
      List<String> list=new ArrayList<String>();
      for (int i=0; i < columnViewers.getTable().getItemCount(); i++) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)columnViewers.getElementAt(i);
        if (!columnViewers.getChecked(column)) {
          list.add(column.getColumnName());
        }
      }
      if (list.isEmpty())       result[2]=null;
 else       result[2]=list.toArray();
    }
  }
 else {
    result[0]=null;
    result[1]=null;
    result[2]=null;
  }
  super.okPressed();
}","protected void okPressed(){
  result=new Object[3];
  if (dataSetName != null || dataSetCombo.getSelectionIndex() > -1) {
    if (dataSetName == null) {
      result[0]=dataSetCombo.getItem(dataSetCombo.getSelectionIndex());
    }
 else {
      result[0]=dataSetName;
    }
    if (columnViewers.getCheckedElements() != null) {
      result[1]=columnViewers.getCheckedElements();
      List<String> list=new ArrayList<String>();
      for (int i=0; i < columnViewers.getTable().getItemCount(); i++) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)columnViewers.getElementAt(i);
        if (!columnViewers.getChecked(column)) {
          list.add(column.getColumnName());
        }
      }
      result[2]=list.toArray();
    }
 else {
      result[1]=null;
      List<String> list=new ArrayList<String>();
      for (int i=0; i < columnViewers.getTable().getItemCount(); i++) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)columnViewers.getElementAt(i);
        if (!columnViewers.getChecked(column)) {
          list.add(column.getColumnName());
        }
      }
      if (list.isEmpty())       result[2]=null;
 else       result[2]=list.toArray();
    }
  }
 else {
    result[0]=null;
    result[1]=null;
    result[2]=null;
  }
  super.okPressed();
}",0.9988313206077132
65245,"protected void handleDatasetComboSelectedEvent(){
  if (dataSetName != null) {
    DataSetHandle datasetHandle=DataUtil.findDataSet(dataSetName);
    Iterator iter=null;
    if (datasetHandle != null) {
      try {
        CachedMetaDataHandle cmdh=DataSetUIUtil.getCachedMetaDataHandle(datasetHandle);
        iter=cmdh.getResultSet().iterator();
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
 else {
      iter=new LinkedDataSetAdapter().getDataSetResLinkedDataModel(dataSetName);
    }
    if (iter != null) {
      columnViewers.setInput(iter);
    }
 else {
      columnViewers.setInput(Collections.EMPTY_LIST.iterator());
    }
  }
 else {
    if (dataSetCombo.getSelectionIndex() > 0) {
      String dataset=dataSetCombo.getItem(dataSetCombo.getSelectionIndex());
      DataSetHandle datasetHandle=SessionHandleAdapter.getInstance().getModule().findDataSet(dataset);
      Iterator iter=null;
      if (datasetHandle != null) {
        try {
          CachedMetaDataHandle cmdh=DataSetUIUtil.getCachedMetaDataHandle(datasetHandle);
          iter=cmdh.getResultSet().iterator();
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
 else {
        iter=new LinkedDataSetAdapter().getDataSetResLinkedDataModel(dataset);
      }
      if (iter != null) {
        columnViewers.setInput(iter);
      }
 else {
        columnViewers.setInput(Collections.EMPTY_LIST.iterator());
      }
    }
 else {
      columnViewers.setInput(Collections.EMPTY_LIST.iterator());
    }
  }
}","protected void handleDatasetComboSelectedEvent(){
  Iterator iter=null;
  DataSetHandle handle=null;
  if (datasetHandle != null) {
    handle=datasetHandle;
  }
 else   if (dataSetName != null) {
    handle=DataUtil.findDataSet(dataSetName);
  }
 else {
    handle=getSelectedDataSet();
  }
  if (handle != null) {
    try {
      CachedMetaDataHandle cmdh=DataSetUIUtil.getCachedMetaDataHandle(handle);
      iter=cmdh.getResultSet().iterator();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    iter=new LinkedDataSetAdapter().getDataSetResLinkedDataModel(dataSetName);
  }
  if (iter != null) {
    columnViewers.setInput(iter);
  }
 else {
    columnViewers.setInput(Collections.EMPTY_LIST.iterator());
  }
}",0.4658119658119658
65246,"protected void createDataSetContents(Composite parent){
  if (dataSetName != null) {
    Label lb=new Label(parent,SWT.NONE);
    lb.setText(Messages.getString(""String_Node_Str""));
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    lb.setLayoutData(data);
  }
 else {
    Label dateSetLabel=new Label(parent,SWT.NONE);
    dateSetLabel.setText(Messages.getString(""String_Node_Str""));
    dataSetCombo=new Combo(parent,SWT.BORDER | SWT.READ_ONLY);
    dataSetCombo.setItems(getAvailableDatasetItems());
    dataSetCombo.select(0);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    dataSetCombo.setLayoutData(data);
    dataSetCombo.setVisibleItemCount(30);
    dataSetCombo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        handleDatasetComboSelectedEvent();
      }
    }
);
  }
}","protected void createDataSetContents(Composite parent){
  if (dataSetName != null) {
    Label lb=new Label(parent,SWT.NONE);
    lb.setText(Messages.getString(""String_Node_Str""));
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    lb.setLayoutData(data);
  }
 else {
    Label dateSetLabel=new Label(parent,SWT.NONE);
    dateSetLabel.setText(Messages.getString(""String_Node_Str""));
    dataSetCombo=new Combo(parent,SWT.BORDER | SWT.READ_ONLY);
    ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    datasets=org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getVisibleDataSetHandles(handle);
    for (int i=0; i < datasets.size(); i++) {
      dataSetCombo.add(datasets.get(i).getQualifiedName());
    }
    dataSetCombo.select(0);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    dataSetCombo.setLayoutData(data);
    dataSetCombo.setVisibleItemCount(30);
    dataSetCombo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        handleDatasetComboSelectedEvent();
      }
    }
);
  }
}",0.8436112481499753
65247,"private void preBasicIV() throws BirtException {
  IQueryResults qr=null;
  QueryDefinition qd=newSummaryQuery();
  qd.setQueryResultsID(this.GEN_queryResultID);
  qr=myPreDataEngine.prepare(qd).execute(null);
  this.UPDATE_queryResultID=qr.getID();
  qr=myPreDataEngine.getQueryResults(this.UPDATE_queryResultID);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < bindingName.length; i++)     abc+=ri.getValue(this.bindingName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
  }
  this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myPreDataEngine.shutdown();
  myPreDataEngine.clearCache(dataSource,dataSet);
  myPreDataEngine=null;
}","private void preBasicIV() throws BirtException {
  IQueryResults qr=null;
  QueryDefinition qd;
  if (useDateGroup) {
    qd=newSummaryQuery1();
  }
 else {
    qd=newSummaryQuery();
  }
  qd.setQueryResultsID(this.GEN_queryResultID);
  qr=myPreDataEngine.prepare(qd).execute(null);
  this.UPDATE_queryResultID=qr.getID();
  qr=myPreDataEngine.getQueryResults(this.UPDATE_queryResultID);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < bindingName.length; i++)     abc+=ri.getValue(this.bindingName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
  }
  this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myPreDataEngine.shutdown();
  myPreDataEngine.clearCache(dataSource,dataSet);
  myPreDataEngine=null;
}",0.9483997387328544
65248,"/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd=newSummaryQuery();
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < bindingName.length; i++)     abc+=ri.getValue(this.bindingName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
  }
  this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
  myGenDataEngine.clearCache(dataSource,dataSet);
}","/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd;
  if (useDateGroup) {
    qd=newSummaryQuery1();
  }
 else {
    qd=newSummaryQuery();
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < bindingName.length; i++)     abc+=ri.getValue(this.bindingName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
  }
  this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
  myGenDataEngine.clearCache(dataSource,dataSet);
}",0.938712179984484
65249,"public void displayURL(String url) throws Exception {
  try {
    IWebBrowser browser=getExternalBrowser();
    if (browser != null) {
      browser.openURL(new URL(url));
    }
  }
 catch (  PartInitException pie) {
    ViewerPlugin.logError(pie.getLocalizedMessage(),pie);
  }
}","public void displayURL(String url) throws Exception {
  try {
    browser=getExternalBrowser();
    if (browser != null) {
      browser.openURL(new URL(url));
    }
  }
 catch (  PartInitException pie) {
    ViewerPlugin.logError(pie.getLocalizedMessage(),pie);
  }
}",0.978102189781022
65250,"public boolean isCloseSupported(){
  return false;
}","public boolean isCloseSupported(){
  return true;
}",0.9320388349514565
65251,"public void close(){
}","public void close(){
  if (browser != null) {
    browser.close();
  }
}",0.4680851063829787
65252,"/** 
 * Get the inherited handle
 * @param itemHandle
 * @return ListHandle or TabHandle or GridHandle
 */
public static ReportItemHandle getInheritedHandle(ReportItemHandle itemHandle){
  if (isContainerInheritable(itemHandle)) {
    DesignElementHandle handle=itemHandle.getContainer();
    while (handle != null && !(handle instanceof ListingHandle || handle instanceof GridHandle)) {
      handle=handle.getContainer();
    }
    if (handle instanceof TableHandle) {
      return (TableHandle)handle;
    }
 else     if (handle instanceof ListHandle) {
      return (ListHandle)handle;
    }
 else     if (handle instanceof GridHandle) {
      return (GridHandle)handle;
    }
  }
  return null;
}","/** 
 * Get the inherited handle
 * @param itemHandle
 * @return ListHandle or TabHandle or GridHandle
 */
public static ReportItemHandle getInheritedHandle(ReportItemHandle itemHandle){
  if (itemHandle.getDataSet() == null && isContainerInheritable(itemHandle)) {
    DesignElementHandle handle=itemHandle.getContainer();
    while (handle != null && !(handle instanceof ListingHandle || handle instanceof GridHandle)) {
      handle=handle.getContainer();
    }
    if (handle instanceof TableHandle) {
      return (TableHandle)handle;
    }
 else     if (handle instanceof ListHandle) {
      return (ListHandle)handle;
    }
 else     if (handle instanceof GridHandle) {
      return (GridHandle)handle;
    }
  }
  return null;
}",0.8796102992345164
65253,"/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] qds) throws DataException {
  if (qds != null) {
    queryDefns.addAll(Arrays.asList(qds));
    List temp=new ArrayList();
    List temp2=new ArrayList();
    this.cachedDataSetNames.clear();
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)query;
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof ICacheable)           this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp2);
          if (qd.getParentQuery() != null && qd.getInputParamBindings().size() == 0) {
            for (int i=0; i < temp2.size(); i++) {
              if (((BaseDataSetDesign)dataEngine.getDataSetDesign(temp2.get(i).toString())).needCache())               this.cachedDataSetNames.add(temp2.get(i));
            }
          }
          for (int i=0; i < temp2.size(); i++) {
            if (((BaseDataSetDesign)dataEngine.getDataSetDesign(temp2.get(i).toString())).needCache()) {
              temp.add(temp2.get(i));
            }
          }
        }
      }
      temp2.clear();
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition q=(IQueryDefinition)query;
        String dataSetName=q.getDataSetName();
        if (dataSetName != null && this.cachedDataSetNames.contains(dataSetName)) {
          IBaseDataSetDesign dataSet=dataEngine.getDataSetDesign(dataSetName);
          if (dataSet instanceof IOdaDataSetDesign) {
            IBaseDataSourceDesign source=dataEngine.getDataSourceDesign(dataSet.getDataSourceName());
            boolean supportInExtensionOnly=FilterPrepareUtil.containsExternalFilter(((IQueryDefinition)query).getFilters(),((IOdaDataSetDesign)dataSet).getExtensionID(),((IOdaDataSourceDesign)source).getExtensionID());
            if (supportInExtensionOnly) {
              this.cachedDataSetNames.remove(dataSet.getName());
            }
          }
        }
      }
    }
  }
}","/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] qds) throws DataException {
  if (qds != null) {
    queryDefns.addAll(Arrays.asList(qds));
    List temp=new ArrayList();
    List temp2=new ArrayList();
    this.cachedDataSetNames.clear();
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)query;
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof ICacheable)           DataSetDesignHelper.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp2);
          if (qd.getParentQuery() != null && qd.getInputParamBindings().size() == 0) {
            for (int i=0; i < temp2.size(); i++) {
              if (((BaseDataSetDesign)dataEngine.getDataSetDesign(temp2.get(i).toString())).needCache())               this.cachedDataSetNames.add(temp2.get(i));
            }
          }
          for (int i=0; i < temp2.size(); i++) {
            if (((BaseDataSetDesign)dataEngine.getDataSetDesign(temp2.get(i).toString())).needCache()) {
              temp.add(temp2.get(i));
            }
          }
        }
      }
      temp2.clear();
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition q=(IQueryDefinition)query;
        String dataSetName=q.getDataSetName();
        if (dataSetName != null && this.cachedDataSetNames.contains(dataSetName)) {
          IBaseDataSetDesign dataSet=dataEngine.getDataSetDesign(dataSetName);
          if (dataSet instanceof IOdaDataSetDesign) {
            IBaseDataSourceDesign source=dataEngine.getDataSourceDesign(dataSet.getDataSourceName());
            boolean supportInExtensionOnly=FilterPrepareUtil.containsExternalFilter(((IQueryDefinition)query).getFilters(),((IOdaDataSetDesign)dataSet).getExtensionID(),((IOdaDataSourceDesign)source).getExtensionID());
            if (supportInExtensionOnly) {
              this.cachedDataSetNames.remove(dataSet.getName());
            }
          }
        }
      }
    }
  }
}",0.99541192898464
65254,"protected ICubeCursor getSubCubeCursor(String startingColumnLevel,String startingRowLevel) throws DataException {
  ICubeCursor cubeCursorImpl;
  if (this.cubeView != null) {
    BirtCubeView subCV=cubeView.createSubView();
    CubeCursor subCubeCursor=null;
    if (subScope == null) {
      Scriptable scope=cubeView.getCubeQueryExecutor().getSession().getSharedScope();
      subScope=Context.getCurrentContext().newObject(scope);
      subScope.setParentScope(scope);
      subScope.setPrototype(scope);
    }
    try {
      subCubeCursor=subCV.getCubeCursor(null,startingColumnLevel,startingRowLevel,this.cubeView);
      subScope.put(ScriptConstants.MEASURE_SCRIPTABLE,subScope,new JSMeasureAccessor(subCubeCursor,subCV.getMeasureMapping()));
      subScope.put(ScriptConstants.DIMENSION_SCRIPTABLE,subScope,new JSLevelAccessor(this.cubeView.getCubeQueryExecutor().getCubeQueryDefinition(),subCV));
    }
 catch (    OLAPException e) {
      throw new DataException(e.getLocalizedMessage());
    }
    cubeCursorImpl=new CubeCursorImpl(null,subCubeCursor,subScope,cx,this.cubeView.getCubeQueryExecutor().getCubeQueryDefinition(),subCV);
  }
 else {
    throw new DataException(ResourceConstants.NO_PARENT_RESULT_CURSOR);
  }
  return cubeCursorImpl;
}","protected ICubeCursor getSubCubeCursor(String startingColumnLevel,String startingRowLevel) throws DataException {
  ICubeCursor cubeCursorImpl;
  if (this.cubeView != null) {
    BirtCubeView subCV=cubeView.createSubView();
    CubeCursor subCubeCursor=null;
    if (subScope == null) {
      Scriptable scope=cubeView.getCubeQueryExecutor().getSession().getSharedScope();
      subScope=Context.getCurrentContext().newObject(scope);
      subScope.setParentScope(scope);
      subScope.setPrototype(scope);
    }
    try {
      subCubeCursor=subCV.getCubeCursor(null,startingColumnLevel,startingRowLevel,this.cubeView);
      subScope.put(ScriptConstants.MEASURE_SCRIPTABLE,subScope,new JSMeasureAccessor(subCubeCursor,subCV.getMeasureMapping()));
      subScope.put(ScriptConstants.DIMENSION_SCRIPTABLE,subScope,new JSLevelAccessor(this.cubeView.getCubeQueryExecutor().getCubeQueryDefinition(),subCV));
    }
 catch (    OLAPException e) {
      throw new DataException(e.getLocalizedMessage());
    }
    cubeCursorImpl=new SubCubeCursorImpl(null,subCubeCursor,subScope,cx,this.cubeView.getCubeQueryExecutor().getCubeQueryDefinition(),subCV);
  }
 else {
    throw new DataException(ResourceConstants.NO_PARENT_RESULT_CURSOR);
  }
  return cubeCursorImpl;
}",0.998809051210798
65255,"public void close() throws IOException {
  if (randomAccessFile != null) {
    randomAccessFile.close();
    randomAccessFile=null;
  }
  clearDiskFile();
  this.size=0;
}","public void close() throws IOException {
  if (randomAccessFile != null) {
    randomAccessFile.close();
    randomAccessFile=null;
  }
  clearDiskFile();
  this.size=0;
  this.buffer=null;
}",0.9447513812154696
65256,"public void close() throws IOException {
  if (delegate != null)   delegate.close();
  clearDiskFile();
}","public void close() throws IOException {
  if (delegate != null)   delegate.close();
  clearDiskFile();
  this.buffer=null;
}",0.9130434782608696
65257,"private void clearTempDir() throws IOException {
  if (diskList != null) {
    diskList.close();
  }
}","private void clearTempDir() throws IOException {
  if (diskList != null) {
    diskList.close();
    diskList=null;
  }
}",0.9147982062780268
65258,"public void close() throws IOException {
  clearTempDir();
}","public void close() throws IOException {
  this.buffer=null;
  clearTempDir();
}",0.8571428571428571
65259,"private List getSelectValueList() throws BirtException {
  List selectValueList=new ArrayList();
  ReportItemHandle reportItem=DEUtil.getBindingHolder(currentItem);
  if (bindingName != null && reportItem != null) {
    if (reportItem instanceof ExtendedItemHandle) {
      Object obj=ElementAdapterManager.getAdapters(reportItem,IUseCubeQueryList.class);
      if (obj instanceof Object[]) {
        Object arrays[]=(Object[])obj;
        if (arrays.length == 1 && arrays[0] != null) {
          List valueList=((IUseCubeQueryList)arrays[0]).getQueryList(ExpressionUtility.getDataExpression(bindingName,ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),(ExtendedItemHandle)reportItem);
          selectValueList.addAll(valueList);
        }
      }
    }
    if (selectValueList.size() == 0) {
      selectValueList=SelectValueFetcher.getSelectValueFromBinding(ExpressionButtonUtil.getExpression(getExpressionControl()),reportItem.getDataSet(),DEUtil.getVisiableColumnBindingsList(designHandle).iterator(),DEUtil.getGroups(designHandle).iterator(),false);
    }
  }
 else {
    ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return selectValueList;
}","private List getSelectValueList() throws BirtException {
  List selectValueList=new ArrayList();
  ReportItemHandle reportItem=DEUtil.getBindingHolder(currentItem);
  boolean hasFetched=false;
  if (bindingName != null && reportItem != null) {
    if (reportItem instanceof ExtendedItemHandle) {
      Object obj=ElementAdapterManager.getAdapters(reportItem,IUseCubeQueryList.class);
      if (obj instanceof Object[]) {
        Object arrays[]=(Object[])obj;
        if (arrays.length == 1 && arrays[0] != null) {
          List valueList=((IUseCubeQueryList)arrays[0]).getQueryList(ExpressionUtility.getDataExpression(bindingName,ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),(ExtendedItemHandle)reportItem);
          selectValueList.addAll(valueList);
          hasFetched=true;
        }
      }
    }
    if (!hasFetched && selectValueList.size() == 0) {
      selectValueList=SelectValueFetcher.getSelectValueFromBinding(ExpressionButtonUtil.getExpression(getExpressionControl()),reportItem.getDataSet(),DEUtil.getVisiableColumnBindingsList(designHandle).iterator(),DEUtil.getGroups(designHandle).iterator(),false);
    }
  }
 else {
    ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return selectValueList;
}",0.9726348709929632
65260,"private String getExpressionBindingName(){
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    String columnName=getColumnName(iter.next());
    if (designHandle instanceof DataItemHandle) {
      if (designHandle.getContainer() instanceof ExtendedItemHandle) {
        if (ExpressionUtility.getDataExpression(columnName,ExpressionUtility.getExpressionConverter(ExpressionButtonUtil.getExpression(getExpressionControl()).getType())).equals(getExpression())) {
          return columnName;
        }
      }
 else {
        if (ExpressionUtility.getColumnExpression(columnName,ExpressionUtility.getExpressionConverter(ExpressionButtonUtil.getExpression(getExpressionControl()).getType())).equals(getExpression())) {
          return columnName;
        }
      }
    }
 else {
      Expression expr=ExpressionButtonUtil.getExpression(getExpressionControl());
      if (expr != null) {
        String exprType=expr.getType();
        IExpressionConverter converter=ExpressionUtility.getExpressionConverter(exprType);
        if (getExpression().equals(ExpressionUtility.getColumnExpression(columnName,converter))) {
          return columnName;
        }
      }
    }
  }
  return null;
}","private String getExpressionBindingName(){
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    String columnName=getColumnName(iter.next());
    if (designHandle instanceof DataItemHandle) {
      if (designHandle.getContainer() instanceof ExtendedItemHandle) {
        if (ExpressionUtility.getDataExpression(columnName,ExpressionUtility.getExpressionConverter(ExpressionButtonUtil.getExpression(getExpressionControl()).getType())).equals(getExpression())) {
          return columnName;
        }
      }
 else {
        if (ExpressionUtility.getColumnExpression(columnName,ExpressionUtility.getExpressionConverter(ExpressionButtonUtil.getExpression(getExpressionControl()).getType())).equals(getExpression())) {
          return columnName;
        }
      }
    }
 else {
      Expression expr=ExpressionButtonUtil.getExpression(getExpressionControl());
      if (expr != null) {
        String exprType=expr.getType();
        IExpressionConverter converter=ExpressionUtility.getExpressionConverter(exprType);
        String tempExpression=ExpressionUtility.getColumnExpression(columnName,converter);
        if (DEUtil.isBindingCube(designHandle)) {
          tempExpression=ExpressionUtility.getDataExpression(columnName,converter);
        }
        if (getExpression().equals(tempExpression)) {
          return columnName;
        }
      }
    }
  }
  return null;
}",0.9006163328197226
65261,"protected String getSelectionValue(Combo combo){
  String retValue=null;
  bindingName=getExpressionBindingName();
  if (bindingName == null && getExpression().length() > 0)   bindingName=getExpression();
  if (bindingName != null) {
    try {
      List selectValueList=getSelectValueList();
      SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
      dialog.setSelectedValueList(selectValueList);
      if (bindingParams != null) {
        dialog.setBindingParams(bindingParams);
      }
      if (dialog.open() == IDialogConstants.OK_ID) {
        IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(combo);
        retValue=dialog.getSelectedExprValue(converter);
      }
    }
 catch (    Exception ex) {
      MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + ex.getMessage());
    }
  }
 else {
    MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return retValue;
}","protected String getSelectionValue(Combo combo){
  String retValue=null;
  bindingName=getExpressionBindingName();
  if (bindingName == null && getExpression().length() > 0)   bindingName=getExpression();
  if (bindingName != null) {
    try {
      List selectValueList=getSelectValueList();
      if (selectValueList == null || selectValueList.size() == 0) {
        MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      }
 else {
        SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
        dialog.setSelectedValueList(selectValueList);
        if (bindingParams != null) {
          dialog.setBindingParams(bindingParams);
        }
        if (dialog.open() == IDialogConstants.OK_ID) {
          IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(combo);
          retValue=dialog.getSelectedExprValue(converter);
        }
      }
    }
 catch (    Exception ex) {
      MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + ex.getMessage());
    }
  }
 else {
    MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return retValue;
}",0.9083696945656484
65262,"public List getQueryList(String expression,ExtendedItemHandle extendedItem){
  CrosstabReportItemHandle crosstab=null;
  CubeHandle cube=null;
  try {
    Object obj=((ExtendedItemHandle)extendedItem).getReportItem();
    DesignElementHandle tmp=extendedItem;
    while (true) {
      if (obj == null || obj instanceof ReportDesignHandle) {
        break;
      }
 else       if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
        cube=crosstab.getCube();
        break;
      }
 else       if (tmp instanceof ExtendedItemHandle) {
        tmp=tmp.getContainer();
        if (tmp instanceof ExtendedItemHandle) {
          obj=((ExtendedItemHandle)tmp).getReportItem();
        }
      }
    }
  }
 catch (  ExtendedElementException e) {
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expression,cubeQueryDefn);
  }
 catch (  Exception e) {
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}","public List getQueryList(String expression,ExtendedItemHandle extendedItem){
  CrosstabReportItemHandle crosstab=null;
  CubeHandle cube=null;
  try {
    Object obj=((ExtendedItemHandle)extendedItem).getReportItem();
    DesignElementHandle tmp=extendedItem;
    while (true) {
      if (obj == null || obj instanceof ReportDesignHandle) {
        break;
      }
 else       if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
        cube=crosstab.getCube();
        break;
      }
 else       if (tmp instanceof ExtendedItemHandle) {
        tmp=tmp.getContainer();
        if (tmp instanceof ExtendedItemHandle) {
          obj=((ExtendedItemHandle)tmp).getReportItem();
        }
      }
    }
  }
 catch (  ExtendedElementException e) {
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,extendedItem.getModuleHandle()));
    DataService.getInstance().registerSession(cube,session);
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expression,cubeQueryDefn);
  }
 catch (  Exception e) {
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}",0.9752761704366124
65263,"protected List getSelectValueList() throws BirtException {
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      throw e;
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || getExpression().length() == 0) {
    return new ArrayList();
  }
  String expr=null;
  IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(getExpressionControl());
  if (converter != null) {
    for (int i=0; i < columnList.size(); i++) {
      ComputedColumnHandle column=columnList.get(i);
      if (column != null) {
        String value=ExpressionUtility.getDataExpression(column.getName(),converter);
        if (value.equals(getExpression())) {
          expr=ExpressionUtility.getDataExpression(column.getName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT));
          break;
        }
      }
    }
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    DataService.getInstance().registerSession(((TabularCubeHandle)cube).getDataSet(),session);
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expr,cubeQueryDefn);
  }
 catch (  BirtException e) {
    throw e;
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}","protected List getSelectValueList() throws BirtException {
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      throw e;
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || getExpression().length() == 0) {
    return new ArrayList();
  }
  String expr=null;
  IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(getExpressionControl());
  if (converter != null) {
    for (int i=0; i < columnList.size(); i++) {
      ComputedColumnHandle column=columnList.get(i);
      if (column != null) {
        String value=ExpressionUtility.getDataExpression(column.getName(),converter);
        if (value.equals(getExpression())) {
          expr=ExpressionUtility.getDataExpression(column.getName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT));
          break;
        }
      }
    }
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,designHandle.getModuleHandle()));
    DataService.getInstance().registerSession(((TabularCubeHandle)cube).getDataSet(),session);
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expr,cubeQueryDefn);
  }
 catch (  BirtException e) {
    throw e;
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}",0.9942110177404296
65264,"protected List getSelectValueList() throws BirtException {
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      throw e;
    }
  }
  if (cube == null || (!(cube instanceof CubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  DataSetHandle dataSetHandle=(DataSetHandle)((CubeHandle)cube).getElementProperty(ITabularCubeModel.DATA_SET_PROP);
  if (dataSetHandle == null) {
    return new ArrayList();
  }
  String expr=null;
  IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(expression);
  if (converter != null) {
    for (int i=0; i < columnList.size(); i++) {
      ComputedColumnHandle column=columnList.get(i);
      if (column != null) {
        String value=ExpressionUtility.getDataExpression(column.getName(),converter);
        if (value.equals(expression.getText())) {
          expr=ExpressionUtility.getDataExpression(column.getName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT));
          break;
        }
      }
    }
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    DataService.getInstance().registerSession(dataSetHandle,session);
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expr,cubeQueryDefn);
  }
 catch (  BirtException e) {
    throw e;
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}","protected List getSelectValueList() throws BirtException {
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      throw e;
    }
  }
  if (cube == null || (!(cube instanceof CubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  DataSetHandle dataSetHandle=(DataSetHandle)((CubeHandle)cube).getElementProperty(ITabularCubeModel.DATA_SET_PROP);
  if (dataSetHandle == null) {
    return new ArrayList();
  }
  String expr=null;
  IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(expression);
  if (converter != null) {
    for (int i=0; i < columnList.size(); i++) {
      ComputedColumnHandle column=columnList.get(i);
      if (column != null) {
        String value=ExpressionUtility.getDataExpression(column.getName(),converter);
        if (value.equals(expression.getText())) {
          expr=ExpressionUtility.getDataExpression(column.getName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT));
          break;
        }
      }
    }
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,designHandle.getModuleHandle()));
    DataService.getInstance().registerSession(dataSetHandle,session);
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expr,cubeQueryDefn);
  }
 catch (  BirtException e) {
    throw e;
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}",0.9945103594829112
65265,"/** 
 * parse <code>classPath</code> into an array containing <code>java.net.URL<code>
 * @param classPath : each path is separated with <code>Constants.CLASS_PATH_SEPERATOR</code>
 * @return
 * @throws OdaException if error/exception occur during parsing
 */
public URL[] parse(String classPath) throws OdaException {
  if (classPath == null) {
    return new URL[0];
  }
  String[] paths=classPath.split(String.valueOf(Constants.CLASS_PATH_SEPERATOR));
  List<URL> urls=new ArrayList<URL>();
  for (  String path : paths) {
    path=path.trim();
    if (path.equals(""String_Node_Str"")) {
      continue;
    }
    URI uri=null;
    if ((new File(path)).isAbsolute()) {
      uri=new File(path).toURI();
    }
 else {
      try {
        uri=new URI(enableURI(path));
      }
 catch (      URISyntaxException e) {
        throw new OdaException(e);
      }
    }
    if (resourceIdentifiers != null) {
      URI resovledUri=ResourceIdentifiers.resolveApplResource(resourceIdentifiers,uri);
      if (resovledUri == null) {
        logger.log(Level.WARNING,""String_Node_Str"" + uri + ""String_Node_Str""+ ResourceIdentifiers.getApplResourceBaseURI(resourceIdentifiers)+ ')');
        resovledUri=ResourceIdentifiers.resolveDesignResource(resourceIdentifiers,uri);
      }
      if (resovledUri == null) {
        logger.log(Level.WARNING,""String_Node_Str"" + uri);
      }
 else {
        try {
          urls.add(resovledUri.toURL());
        }
 catch (        MalformedURLException e) {
          throw new OdaException(e);
        }
      }
    }
 else {
      try {
        urls.add(uri.toURL());
      }
 catch (      MalformedURLException e) {
        throw new OdaException(e);
      }
    }
  }
  return urls.toArray(new URL[0]);
}","/** 
 * parse <code>classPath</code> into an array containing <code>java.net.URL<code>
 * @param classPath : each path is separated with <code>Constants.CLASS_PATH_SEPERATOR</code>
 * @return
 * @throws OdaException if error/exception occur during parsing
 */
public URL[] parse(String classPath) throws OdaException {
  if (classPath == null) {
    return new URL[0];
  }
  String[] paths=classPath.split(String.valueOf(Constants.CLASS_PATH_SEPERATOR));
  List<URL> urls=new ArrayList<URL>();
  for (  String path : paths) {
    path=path.trim();
    if (path.equals(""String_Node_Str"")) {
      continue;
    }
    URI uri=null;
    if ((new File(path)).isAbsolute()) {
      uri=new File(path).toURI();
      try {
        urls.add(uri.toURL());
      }
 catch (      MalformedURLException e) {
        throw new OdaException(e);
      }
    }
 else {
      try {
        uri=new URI(enableURI(path));
      }
 catch (      URISyntaxException e) {
        throw new OdaException(e);
      }
      URI resovledUri=null;
      if (resourceIdentifiers != null) {
        resovledUri=ResourceIdentifiers.resolveApplResource(resourceIdentifiers,uri);
        if (resovledUri == null) {
          logger.log(Level.WARNING,""String_Node_Str"" + uri + ""String_Node_Str""+ ResourceIdentifiers.getApplResourceBaseURI(resourceIdentifiers)+ ')');
          resovledUri=ResourceIdentifiers.resolveDesignResource(resourceIdentifiers,uri);
        }
      }
      if (resovledUri == null) {
        logger.log(Level.WARNING,""String_Node_Str"" + uri);
      }
 else {
        try {
          urls.add(resovledUri.toURL());
        }
 catch (        MalformedURLException e) {
          throw new OdaException(e);
        }
      }
    }
  }
  return urls.toArray(new URL[0]);
}",0.8752146536920435
65266,"protected ActionHandle getDefaultAction(ExtendedItemHandle handle,String expression){
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  String bindingname=exprCodec.getBindingName(expression);
  if (bindingname == null) {
    return null;
  }
  CubeHandle cube=handle.getCube();
  DataSetHandle dataset=handle.getDataSet();
  if (cube != null && ChartReportItemHelper.instance().getBindingCubeHandle(handle) != null) {
    for (    LevelHandle lh : ChartCubeUtil.getAllLevels(cube)) {
      if (bindingname.equals(ChartCubeUtil.createLevelBindingName(lh))) {
        return lh.getActionHandle();
      }
    }
    for (    MeasureHandle mh : ChartCubeUtil.getAllMeasures(cube)) {
      if (bindingname.equals(ChartCubeUtil.createMeasureBindingName(mh))) {
        return mh.getActionHandle();
      }
    }
  }
 else   if (dataset != null && ChartReportItemHelper.instance().getBindingDataSetHandle(handle) != null) {
    for (Iterator<?> iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
      ColumnHintHandle element=(ColumnHintHandle)iter.next();
      if (element.getColumnName().equals(bindingname) || bindingname.equals(element.getAlias())) {
        return element.getActionHandle();
      }
    }
  }
  return null;
}","protected ActionHandle getDefaultAction(ExtendedItemHandle handle,String expression){
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  String bindingname=exprCodec.getBindingName(expression);
  if (bindingname == null) {
    return null;
  }
  CubeHandle cube=handle.getCube();
  DataSetHandle dataset=handle.getDataSet();
  if (cube != null && ChartReportItemHelper.instance().getBindingCubeHandle(handle) != null) {
    for (    LevelHandle lh : ChartCubeUtil.getAllLevels(cube)) {
      if (bindingname.equals(ChartCubeUtil.createLevelBindingName(lh))) {
        return lh.getActionHandle();
      }
      Iterator<?> iter=lh.attributesIterator();
      while (iter.hasNext()) {
        LevelAttributeHandle laHandle=(LevelAttributeHandle)iter.next();
        if (bindingname.equals(ChartCubeUtil.createLevelAttrBindingName(lh,laHandle))) {
          return lh.getActionHandle();
        }
      }
    }
    for (    MeasureHandle mh : ChartCubeUtil.getAllMeasures(cube)) {
      if (bindingname.equals(ChartCubeUtil.createMeasureBindingName(mh))) {
        return mh.getActionHandle();
      }
    }
  }
 else   if (dataset != null && ChartReportItemHelper.instance().getBindingDataSetHandle(handle) != null) {
    for (Iterator<?> iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
      ColumnHintHandle element=(ColumnHintHandle)iter.next();
      if (element.getColumnName().equals(bindingname) || bindingname.equals(element.getAlias())) {
        return element.getActionHandle();
      }
    }
  }
  return null;
}",0.8975240715268226
65267,"public static ComputedColumnHandle generateAggregation(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  String name=generateComputedColumnName(measureView,colLevel,rowLevel);
  ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
  String dataType=measureView.getDataType();
  column.setDataType(dataType);
  if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
    String dataField=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
    if (dataField == null || dataField.isEmpty()) {
      return null;
    }
    column.setExpression(ExpressionUtil.createDataSetRowExpression(dataField));
  }
 else {
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
  }
  String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
  column.setAggregateFunction(function != null ? function : defaultFunction);
  if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
    try {
      IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
      if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
        column.setAggregateFunction(defaultFunction);
      }
 else {
        String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
        if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
          column.setDataType(targetType);
        }
      }
    }
 catch (    BirtException e) {
    }
  }
  if (rowLevel != null) {
    column.addAggregateOn(rowLevel);
  }
  if (colLevel != null) {
    column.addAggregateOn(colLevel);
  }
  return ((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
}","public static ComputedColumnHandle generateAggregation(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  String name=generateComputedColumnName(measureView,colLevel,rowLevel);
  ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
  String dataType=measureView.getDataType();
  column.setDataType(dataType);
  if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
    String dataField=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
    if (dataField == null || dataField.trim().length() <= 0) {
      return null;
    }
    column.setExpression(ExpressionUtil.createDataSetRowExpression(dataField));
  }
 else {
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
  }
  String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
  column.setAggregateFunction(function != null ? function : defaultFunction);
  if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
    try {
      IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
      if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
        column.setAggregateFunction(defaultFunction);
      }
 else {
        String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
        if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
          column.setDataType(targetType);
        }
      }
    }
 catch (    BirtException e) {
    }
  }
  if (rowLevel != null) {
    column.addAggregateOn(rowLevel);
  }
  if (colLevel != null) {
    column.addAggregateOn(colLevel);
  }
  return ((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
}",0.9922974767596282
65268,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || !needUpdateMeasure(measureView)) {
    return;
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell != null) {
    String name=generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
      String dataField=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
      if (dataField == null || dataField.isEmpty()) {
        return;
      }
      column.setExpression(ExpressionUtil.createDataSetRowExpression(dataField));
    }
 else {
      column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    }
    String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
    column.setAggregateFunction(function != null ? function : defaultFunction);
    if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
      try {
        IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
        if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
          column.setAggregateFunction(defaultFunction);
        }
 else {
          String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
          if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
            column.setDataType(targetType);
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=generateAggregation(crosstab,cell,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    if (columnHandle == null) {
      return;
    }
    if (cell.getContents().size() == 0) {
      DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      cell.addContent(dataItem);
    }
 else     if (cell.getContents().size() == 1 && cell.getContents().get(0) instanceof DataItemHandle) {
      DataItemHandle dataItem=(DataItemHandle)cell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
 else {
      for (      Object item : cell.getContents()) {
        if (item instanceof DataItemHandle) {
          String bindingName=((DataItemHandle)item).getResultSetColumn();
          ComputedColumnHandle binding=((ReportItemHandle)crosstab.getModelHandle()).findColumnBinding(bindingName);
          if (binding != null && binding.getAggregateFunction() != null) {
            try {
              IAggrFunction aggFunc=getAggregationManager().getAggregation(binding.getAggregateFunction());
              if (aggFunc.getType() != IAggrFunction.RUNNING_AGGR) {
                ((DataItemHandle)item).setResultSetColumn(columnHandle.getName());
                break;
              }
            }
 catch (            BirtException e) {
            }
          }
        }
      }
    }
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || !needUpdateMeasure(measureView)) {
    return;
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (measureView instanceof ComputedMeasureViewHandle && !CrosstabUtil.isLinkedDataModelMeasureView(measureView)) {
    List<DataItemHandle> items=getDataItems(cell);
    for (int i=0; i < items.size(); i++) {
      updateRPTAggregateOn(crosstab,items.get(i));
    }
    return;
  }
  if (cell != null) {
    String name=generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    if (CrosstabUtil.isBoundToLinkedDataSet(crosstab)) {
      String dataField=CrosstabUtil.getRefLinkedDataModelColumnName(measureView);
      if (dataField == null || dataField.trim().length() <= 0) {
        return;
      }
      column.setExpression(ExpressionUtil.createDataSetRowExpression(dataField));
    }
 else {
      column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    }
    String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
    column.setAggregateFunction(function != null ? function : defaultFunction);
    if (function != null && !function.equalsIgnoreCase(defaultFunction)) {
      try {
        IAggrFunction aggFunc=getAggregationManager().getAggregation(column.getAggregateFunction());
        if (aggFunc.getType() == IAggrFunction.RUNNING_AGGR) {
          column.setAggregateFunction(defaultFunction);
        }
 else {
          String targetType=DataAdapterUtil.adapterToModelDataType(aggFunc.getDataType());
          if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
            column.setDataType(targetType);
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=generateAggregation(crosstab,cell,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    if (columnHandle == null) {
      return;
    }
    if (cell.getContents().size() == 0) {
      DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      cell.addContent(dataItem);
    }
 else     if (cell.getContents().size() == 1 && cell.getContents().get(0) instanceof DataItemHandle) {
      DataItemHandle dataItem=(DataItemHandle)cell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
 else {
      for (      Object item : cell.getContents()) {
        if (item instanceof DataItemHandle) {
          String bindingName=((DataItemHandle)item).getResultSetColumn();
          ComputedColumnHandle binding=((ReportItemHandle)crosstab.getModelHandle()).findColumnBinding(bindingName);
          if (binding != null && binding.getAggregateFunction() != null) {
            try {
              IAggrFunction aggFunc=getAggregationManager().getAggregation(binding.getAggregateFunction());
              if (aggFunc.getType() != IAggrFunction.RUNNING_AGGR) {
                ((DataItemHandle)item).setResultSetColumn(columnHandle.getName());
                break;
              }
            }
 catch (            BirtException e) {
            }
          }
        }
      }
    }
  }
}",0.9965998358541448
65269,"public static boolean isLinkedDataModelMeasureView(MeasureViewHandle mv){
  String refColumn=getRefLinkedDataModelColumnName(mv);
  return refColumn != null && !refColumn.isEmpty();
}","public static boolean isLinkedDataModelMeasureView(MeasureViewHandle mv){
  String refColumn=getRefLinkedDataModelColumnName(mv);
  return refColumn != null && refColumn.trim().length() > 0;
}",0.944
65270,"public static String getRefLinkedDataModelColumnName(MeasureViewHandle mv){
  if (mv == null) {
    return null;
  }
  if (!isBoundToLinkedDataSet(mv.getCrosstab())) {
    return null;
  }
  String refColumnName=null;
  if (mv instanceof ComputedMeasureViewHandle) {
    ComputedColumnHandle ch=getMeasureBindingColumnHandle(mv);
    if (ch != null && ch.getAggregateFunction() != null && !ch.getAggregateFunction().isEmpty() && ch.getCalculationType() == null) {
      ExpressionHandle expr=ch.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER);
      String expression=expr.getStringExpression();
      if (expression != null) {
        Pattern p=null;
        if (ExpressionType.JAVASCRIPT.equalsIgnoreCase(expr.getType())) {
          p=Pattern.compile(ExpressionUtil.DATASET_ROW_INDICATOR + ""String_Node_Str"");
        }
 else {
          p=Pattern.compile(""String_Node_Str"" + BRS_DATASET_ROW_INDICATOR + ""String_Node_Str"");
        }
        Matcher m=p.matcher(expression);
        if (m.find()) {
          return m.group(1);
        }
      }
    }
  }
 else {
    refColumnName=mv.getCubeMeasureName();
  }
  return refColumnName;
}","public static String getRefLinkedDataModelColumnName(MeasureViewHandle mv){
  if (mv == null) {
    return null;
  }
  if (!isBoundToLinkedDataSet(mv.getCrosstab())) {
    return null;
  }
  String refColumnName=null;
  if (mv instanceof ComputedMeasureViewHandle) {
    ComputedColumnHandle ch=getMeasureBindingColumnHandle(mv);
    if (ch != null && ch.getAggregateFunction() != null && ch.getAggregateFunction().trim().length() > 0 && ch.getCalculationType() == null) {
      ExpressionHandle expr=ch.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER);
      String expression=expr.getStringExpression();
      if (expression != null) {
        Pattern p=null;
        if (ExpressionType.JAVASCRIPT.equalsIgnoreCase(expr.getType())) {
          p=Pattern.compile(ExpressionUtil.DATASET_ROW_INDICATOR + ""String_Node_Str"");
        }
 else {
          p=Pattern.compile(""String_Node_Str"" + BRS_DATASET_ROW_INDICATOR + ""String_Node_Str"");
        }
        Matcher m=p.matcher(expression);
        if (m.find()) {
          return m.group(1);
        }
      }
    }
  }
 else {
    refColumnName=mv.getCubeMeasureName();
  }
  return refColumnName;
}",0.9874077290490664
65271,"public static boolean validateBinding(ComputedColumnHandle column,String columnName){
  if (column == null) {
    return false;
  }
  if (columnName == null || columnName.isEmpty()) {
    columnName=""String_Node_Str"";
  }
  ExpressionHandle expr=column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER);
  String expression=expr.getStringExpression();
  if (expression != null) {
    if (ExpressionType.JAVASCRIPT.equalsIgnoreCase(expr.getType())) {
      Pattern p=Pattern.compile(""String_Node_Str"" + columnName + ""String_Node_Str"");
      return p.matcher(expression).find();
    }
 else {
      Pattern p=Pattern.compile(""String_Node_Str"" + columnName + ""String_Node_Str"");
      return p.matcher(expression).find();
    }
  }
  return false;
}","public static boolean validateBinding(ComputedColumnHandle column,String columnName){
  if (column == null) {
    return false;
  }
  if (columnName == null || columnName.trim().length() <= 0) {
    columnName=""String_Node_Str"";
  }
  ExpressionHandle expr=column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER);
  String expression=expr.getStringExpression();
  if (expression != null) {
    if (ExpressionType.JAVASCRIPT.equalsIgnoreCase(expr.getType())) {
      Pattern p=Pattern.compile(""String_Node_Str"" + columnName + ""String_Node_Str"");
      return p.matcher(expression).find();
    }
 else {
      Pattern p=Pattern.compile(""String_Node_Str"" + columnName + ""String_Node_Str"");
      return p.matcher(expression).find();
    }
  }
  return false;
}",0.980883322346737
65272,"private SheetHandler(StylesTable st,SharedStringsTable sst,XlsxRowCallBack callback,int xlsxRowsToRead){
  this.sst=sst;
  this.st=st;
  this.callback=callback;
  values=new ArrayList<Object>();
  this.cellDataType=cDataType.NUMBER;
  this.xlsxRowsToRead=xlsxRowsToRead;
  sdf=new SimpleDateFormat();
}","private SheetHandler(StylesTable st,SharedStringsTable sst,XlsxRowCallBack callback,int xlsxRowsToRead){
  this.sst=sst;
  this.st=st;
  this.callback=callback;
  values=new ArrayList<Object>();
  this.cellDataType=cDataType.NUMBER;
  this.xlsxRowsToRead=xlsxRowsToRead;
  sdf=new SimpleDateFormat(""String_Node_Str"");
}",0.9726247987117552
65273,"/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      try {
        reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      }
 catch (      Exception e) {
      }
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    try {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    }
 catch (    Exception e) {
    }
    if (ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      try {
        reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      }
 catch (      Exception e) {
      }
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    try {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    }
 catch (    Exception e) {
    }
    if (ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{new File(this.reportDesignName).getName()});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9965385946694358
65274,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  String format=attrBean.getFormat();
  String emitterId=attrBean.getEmitterId();
  String openType=ParameterAccessor.getOpenType(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
  }
 else {
    String mimeType=ParameterAccessor.getEmitterMimeType(emitterId);
    if (mimeType == null) {
      mimeType=ReportEngineService.getInstance().getMIMEType(format);
    }
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
  }
  String filename=ParameterAccessor.getExportFilename(new BirtContext(request,response),format,emitterId);
  response.setHeader(""String_Node_Str"",openType + ""String_Node_Str"" + filename+ ""String_Node_Str"");
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  String format=attrBean.getFormat();
  String emitterId=attrBean.getEmitterId();
  String openType=ParameterAccessor.getOpenType(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
  }
 else {
    String mimeType=ParameterAccessor.getEmitterMimeType(emitterId);
    if (mimeType == null) {
      mimeType=ReportEngineService.getInstance().getMIMEType(format);
    }
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
  }
  String filename=ParameterAccessor.getExportFilename(new BirtContext(request,response),format,emitterId);
  response.setHeader(""String_Node_Str"",ParameterAccessor.htmlHeaderValueEncode(openType) + ""String_Node_Str"" + ParameterAccessor.htmlHeaderValueEncode(filename)+ ""String_Node_Str"");
}",0.960291734197731
65275,"/** 
 * Returns report design handle
 * @param request
 * @param viewer
 * @return
 * @throws Exception
 */
public static IViewerReportDesignHandle getDesignHandle(HttpServletRequest request,ViewerField viewer) throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  String designFile=ParameterAccessor.getReport(request,viewer.getReportDesign());
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  boolean isValidDocument=ParameterAccessor.isValidFilePath(request,viewer.getReportDocument());
  if (documentFile != null && isValidDocument) {
    try {
      IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions(viewer));
      if (reportDocumentInstance != null) {
        viewer.setDocumentInUrl(true);
        reportRunnable=reportDocumentInstance.getReportRunnable();
        reportDocumentInstance.close();
      }
    }
 catch (    Exception e) {
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(request,viewer.getReportDesign())) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      reportRunnable=BirtUtility.getRunnableFromDesignFile(request,designFile,getModuleOptions(viewer));
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{designFile});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns report design handle
 * @param request
 * @param viewer
 * @return
 * @throws Exception
 */
public static IViewerReportDesignHandle getDesignHandle(HttpServletRequest request,ViewerField viewer) throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  String designFile=ParameterAccessor.getReport(request,viewer.getReportDesign());
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  boolean isValidDocument=ParameterAccessor.isValidFilePath(request,viewer.getReportDocument());
  if (documentFile != null && isValidDocument) {
    try {
      IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions(viewer));
      if (reportDocumentInstance != null) {
        viewer.setDocumentInUrl(true);
        reportRunnable=reportDocumentInstance.getReportRunnable();
        reportDocumentInstance.close();
      }
    }
 catch (    Exception e) {
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(request,viewer.getReportDesign())) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      reportRunnable=BirtUtility.getRunnableFromDesignFile(request,designFile,getModuleOptions(viewer));
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{new File(designFile).getName()});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9923518164435946
65276,"/** 
 * Get report locale from a given string.
 * @param locale locale string
 * @return report locale
 */
public static Locale getLocaleFromString(String locale){
  if (locale == null || locale.length() <= 0) {
    return null;
  }
  String[] sp=locale.split(""String_Node_Str"");
  if (sp.length == 1) {
    return new Locale(locale);
  }
 else   if (sp.length == 2) {
    return new Locale(sp[0],sp[1]);
  }
 else {
    return new Locale(sp[0],sp[1],sp[2]);
  }
}","/** 
 * Get report locale from a given string.
 * @param locale locale string
 * @return report locale
 */
public static Locale getLocaleFromString(String locale){
  if (locale == null || locale.length() <= 0) {
    return null;
  }
  int len=locale.length();
  if (len != 2 && len != 5 && len < 7) {
    return null;
  }
  char ch0=locale.charAt(0);
  char ch1=locale.charAt(1);
  if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
    return null;
  }
  if (len == 2) {
    return new Locale(locale,""String_Node_Str"");
  }
 else {
    if (locale.charAt(2) != '_') {
      return null;
    }
    char ch3=locale.charAt(3);
    if (ch3 == '_') {
      return new Locale(locale.substring(0,2),""String_Node_Str"",locale.substring(4));
    }
    char ch4=locale.charAt(4);
    if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
      return null;
    }
    if (len == 5) {
      return new Locale(locale.substring(0,2),locale.substring(3,5));
    }
 else {
      if (locale.charAt(5) != '_') {
        return null;
      }
      return new Locale(locale.substring(0,2),locale.substring(3,5),locale.substring(6));
    }
  }
}",0.4303638644918444
65277,"private static boolean isCubeTopLevel(Query query,ReportItemHandle itemHandle){
  ExpressionCodec exprc=ChartModelHelper.instance().createExpressionCodec();
  String bindName=exprc.getBindingName(query.getDefinition());
  Iterator<ComputedColumnHandle> iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  while (iterator.hasNext()) {
    ComputedColumnHandle binding=iterator.next();
    if (binding.getName().equals(bindName)) {
      ChartItemUtil.loadExpression(exprc,binding);
      break;
    }
  }
  if (!exprc.isDimensionExpresion()) {
    return false;
  }
  CubeHandle cube=ChartReportItemHelper.instance().getBindingCubeHandle(itemHandle);
  String[] levels=exprc.getLevelNames();
  String dimensionName=levels[0];
  HierarchyHandle hieHandle=cube.getDimension(dimensionName).getDefaultHierarchy();
  if (hieHandle.getLevelCount() > 1) {
    LevelHandle lh=hieHandle.getLevel(0);
    if (lh.getName().equals(levels[1])) {
      return true;
    }
  }
  return false;
}","private static boolean isCubeTopLevel(Query query,ReportItemHandle itemHandle){
  ExpressionCodec exprc=ChartModelHelper.instance().createExpressionCodec();
  String bindName=exprc.getBindingName(query.getDefinition());
  Iterator<ComputedColumnHandle> iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  while (iterator.hasNext()) {
    ComputedColumnHandle binding=iterator.next();
    if (binding.getName().equals(bindName)) {
      ChartItemUtil.loadExpression(exprc,binding);
      break;
    }
  }
  if (!exprc.isDimensionExpresion()) {
    return false;
  }
  CubeHandle cube=ChartReportItemHelper.instance().getBindingCubeHandle(itemHandle);
  String[] levels=exprc.getLevelNames();
  String dimensionName=levels[0];
  HierarchyHandle hieHandle=cube.getDimension(dimensionName).getDefaultHierarchy();
  if (hieHandle.getLevelCount() != 0 && (hieHandle.getLevelCount() == 1 || hieHandle.getLevel(0).getName().equals(levels[1]))) {
    return true;
  }
 else {
    return false;
  }
}",0.9118236472945892
65278,"private String getColumnName(String expression){
  List columnList=DEUtil.getVisiableColumnBindingsList(inputElement);
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    ComputedColumnHandle cachedColumn=(ComputedColumnHandle)iter.next();
    String columnName=cachedColumn.getName();
    if (DEUtil.getColumnExpression(columnName).equals(expression)) {
      return columnName;
    }
  }
  return null;
}","private String getColumnName(String expression){
  List columnList=DEUtil.getVisiableColumnBindingsList(inputElement);
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    ComputedColumnHandle cachedColumn=(ComputedColumnHandle)iter.next();
    String columnName=cachedColumn.getName();
    if (LinkedDataSetUtil.bindToLinkedDataSet(inputElement) ? DEUtil.getDataExpression(columnName).equals(expression) : DEUtil.getColumnExpression(columnName).equals(expression)) {
      return columnName;
    }
  }
  return null;
}",0.8619246861924686
65279,"protected void updateQueryProperties(QueryProperties queryProps){
  if (hasMaxDocumentToSkip()) {
    queryProps.setNumDocsToSkip(getMaxDocumentToSkip());
  }
 else {
    queryProps.setNumDocsToSkip(null);
  }
  if (hasBatchSize()) {
    queryProps.setBatchSize(getMaxBatchSize());
  }
 else {
    queryProps.setBatchSize(null);
  }
  if (hasDocumentSearchLimit()) {
    queryProps.setRuntimeMetaDataSearchLimit(getDocumentSearchLimit());
  }
  if (indexExpr != null) {
    queryProps.setIndexHints(indexExpr);
  }
  if (queryPreferenceMode != null) {
    queryProps.setQueryReadPreference(queryPreferenceMode);
  }
  if (tagSetValue != null) {
    queryProps.setQueryReadPreferenceTags(tagSetValue);
  }
  queryProps.setNoTimeOut(noTimeOut);
  queryProps.setPartialResultsOk(allowsPartialResults);
  queryProps.setAutoFlattening(flattenNestedDocument);
}","protected void updateQueryProperties(QueryProperties queryProps){
  if (hasMaxDocumentToSkip()) {
    queryProps.setNumDocsToSkip(getMaxDocumentToSkip());
  }
 else {
    queryProps.setNumDocsToSkip(null);
  }
  if (hasBatchSize()) {
    queryProps.setBatchSize(getMaxBatchSize());
  }
 else {
    queryProps.setBatchSize(null);
  }
  if (hasDocumentSearchLimit()) {
    queryProps.setRuntimeMetaDataSearchLimit(getDocumentSearchLimit());
  }
 else {
    queryProps.setRuntimeMetaDataSearchLimit(null);
  }
  if (indexExpr != null) {
    queryProps.setIndexHints(indexExpr);
  }
  if (queryPreferenceMode != null) {
    queryProps.setQueryReadPreference(queryPreferenceMode);
  }
  if (tagSetValue != null) {
    queryProps.setQueryReadPreferenceTags(tagSetValue);
  }
  queryProps.setNoTimeOut(noTimeOut);
  queryProps.setPartialResultsOk(allowsPartialResults);
  queryProps.setAutoFlattening(flattenNestedDocument);
}",0.963923337091319
65280,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,final String templateFileName,final InputStream templateStream,final String cheatSheetId,final boolean showCheatSheet,boolean isUseDefaultLibrary,LibraryHandle library,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionUtil.openError(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    if (isUseDefaultLibrary) {
      UIUtil.includeLibrary(handle,DEUtil.DEFAULT_LIBRARY,true);
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,final String templateFileName,final InputStream templateStream,final String cheatSheetId,final boolean showCheatSheet,boolean isUseDefaultLibrary,LibraryHandle library,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionUtil.openError(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    if (isUseDefaultLibrary) {
      UIUtil.includeLibrary(handle,DEUtil.DEFAULT_LIBRARY,true);
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
        IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
        if (synchronizer != null) {
          synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(this,Path.fromOSString(file.getAbsolutePath()),IReportResourceChangeEvent.NewResource));
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9514976433024176
65281,"public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    if (page == null) {
      throw new IllegalArgumentException();
    }
    page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
    if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
      Display.getCurrent().getActiveShell().setData(page);
      new OpenCheatSheetAction(cheatSheetId).run();
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
}","public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    if (page == null) {
      throw new IllegalArgumentException();
    }
    page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
    if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
      Display.getCurrent().getActiveShell().setData(page);
      new OpenCheatSheetAction(cheatSheetId).run();
    }
    IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
    if (synchronizer != null) {
      synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(this,Path.fromOSString(file.getAbsolutePath()),IReportResourceChangeEvent.NewResource));
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
}",0.799470549305096
65282,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  boolean hasAddedComparsionPolygon=false;
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    Bounds compareBounds=null;
    if (getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL || getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
      compareBounds=BoundsImpl.create(dX,dY,dWidth,dHeight);
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          boolean isConeOrTriangle=(rt.getValue() == RiserType.TRIANGLE || rt.getValue() == RiserType.CONE);
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (isConeOrTriangle) {
                if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                  hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
                  hotspotLoa[2].setY(hotspotLoa[3].getY() - MIN_HEIGHT);
                }
              }
 else {
                if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                  hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                  hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
                }
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (isTransposed() ? dWidth != 0 : dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (!hasAddedComparsionPolygon) {
          hasAddedComparsionPolygon=true;
          Location3D[] l3d=new Location3D[4];
          for (int k=0; k < 4; k++) {
            l3d[k]=goFactory.createLocation3D(0,0,0);
          }
          double x0=dpha[0].getLocation3D().getX();
          double x1=dpha[dpha.length - 1].getLocation3D().getX() + dSpacing * 2;
          double z=dZ + dWidthZ;
          l3d[0].set(x0,dY,z);
          l3d[1].set(x0,dY + boClientArea.getHeight(),z);
          l3d[2].set(x1,dY + boClientArea.getHeight(),z);
          l3d[3].set(x1,dY,z);
          Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(dpha[i],Polygon3DRenderEvent.class);
          pre3d.setEnable(false);
          pre3d.setDoubleSided(false);
          pre3d.setOutline(null);
          pre3d.setPoints3D(l3d);
          pre3d.setBackground(fixedFill);
          Object event=dc.getParentDeferredCache().addPlane(pre3d,PrimitiveRenderEvent.FILL);
          if (event instanceof WrappedInstruction) {
            ((WrappedInstruction)event).setSubDeferredCache(subDeferredCache);
          }
          pre3d.setDoubleSided(false);
          pre3d.setEnable(true);
        }
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),0,compareBounds);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,0,compareBounds);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,0,compareBounds);
        }
 else {
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,0,compareBounds);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    Position pDataPoint=null;
    Location loDataPoint=null;
    Location3D loDataPoint3d=null;
    Bounds boDataPoint=null;
    try {
      if (laDataPoint.isVisible()) {
        pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
        loDataPoint=goFactory.createLocation(0,0);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
        boDataPoint=goFactory.createBounds(0,0,0,0);
      }
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
    }
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside)) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  boolean hasAddedComparsionPolygon=false;
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final Bounds boClientAreaWithoutInsets=isrh.getClientAreaBounds(false);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientAreaWithoutInsets);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    Bounds compareBounds=null;
    if (getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL || getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
      compareBounds=BoundsImpl.create(dX,dY,dWidth,dHeight);
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          boolean isConeOrTriangle=(rt.getValue() == RiserType.TRIANGLE || rt.getValue() == RiserType.CONE);
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (isConeOrTriangle) {
                if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                  hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
                  hotspotLoa[2].setY(hotspotLoa[3].getY() - MIN_HEIGHT);
                }
              }
 else {
                if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                  hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                  hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
                }
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (isTransposed() ? dWidth != 0 : dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (!hasAddedComparsionPolygon) {
          hasAddedComparsionPolygon=true;
          Location3D[] l3d=new Location3D[4];
          for (int k=0; k < 4; k++) {
            l3d[k]=goFactory.createLocation3D(0,0,0);
          }
          double x0=dpha[0].getLocation3D().getX();
          double x1=dpha[dpha.length - 1].getLocation3D().getX() + dSpacing * 2;
          double z=dZ + dWidthZ;
          l3d[0].set(x0,dY,z);
          l3d[1].set(x0,dY + boClientArea.getHeight(),z);
          l3d[2].set(x1,dY + boClientArea.getHeight(),z);
          l3d[3].set(x1,dY,z);
          Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(dpha[i],Polygon3DRenderEvent.class);
          pre3d.setEnable(false);
          pre3d.setDoubleSided(false);
          pre3d.setOutline(null);
          pre3d.setPoints3D(l3d);
          pre3d.setBackground(fixedFill);
          Object event=dc.getParentDeferredCache().addPlane(pre3d,PrimitiveRenderEvent.FILL);
          if (event instanceof WrappedInstruction) {
            ((WrappedInstruction)event).setSubDeferredCache(subDeferredCache);
          }
          pre3d.setDoubleSided(false);
          pre3d.setEnable(true);
        }
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),0,compareBounds);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,0,compareBounds);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,0,compareBounds);
        }
 else {
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,0,compareBounds);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    Position pDataPoint=null;
    Location loDataPoint=null;
    Location3D loDataPoint3d=null;
    Bounds boDataPoint=null;
    try {
      if (laDataPoint.isVisible()) {
        pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
        loDataPoint=goFactory.createLocation(0,0);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
        boDataPoint=goFactory.createBounds(0,0,0,0);
      }
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
    }
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside)) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.9875400937577103
65283,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,final String templateFileName,final InputStream templateStream,final String cheatSheetId,final boolean showCheatSheet,boolean isUseDefaultLibrary,LibraryHandle library,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionUtil.openError(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    if (isUseDefaultLibrary) {
      UIUtil.includeLibrary(handle,DEUtil.DEFAULT_LIBRARY,true);
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,final String templateFileName,final InputStream templateStream,final String cheatSheetId,final boolean showCheatSheet,boolean isUseDefaultLibrary,LibraryHandle library,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionUtil.openError(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    UIUtil.addCreateBy(handle);
    UIUtil.setDPI(handle);
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    if (isUseDefaultLibrary) {
      UIUtil.includeLibrary(handle,DEUtil.DEFAULT_LIBRARY,true);
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
        IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
        if (synchronizer != null) {
          synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(this,Path.fromOSString(file.getAbsolutePath()),IReportResourceChangeEvent.NewResource));
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9514976433024176
65284,"public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    if (page == null) {
      throw new IllegalArgumentException();
    }
    page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
    if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
      Display.getCurrent().getActiveShell().setData(page);
      new OpenCheatSheetAction(cheatSheetId).run();
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
}","public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    if (page == null) {
      throw new IllegalArgumentException();
    }
    page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
    if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
      Display.getCurrent().getActiveShell().setData(page);
      new OpenCheatSheetAction(cheatSheetId).run();
    }
    IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
    if (synchronizer != null) {
      synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(this,Path.fromOSString(file.getAbsolutePath()),IReportResourceChangeEvent.NewResource));
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
}",0.799470549305096
65285,"public void startForeign(IForeignContent foreign) throws BirtException {
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    if (embedHtml) {
      int width=WordUtil.convertTo(foreign.getWidth(),context.getCurrentWidth(),reportDpi);
      width=Math.min(width,context.getCurrentWidth());
      wordWriter.startTable(foreign.getComputedStyle(),width,true);
      wordWriter.startTableRow(-1);
      wordWriter.startTableCell(width,foreign.getComputedStyle(),null);
      wordWriter.writeForeign(foreign);
      if (isInSpannedCell(foreign)) {
        wordWriter.endTableCell(true,true);
      }
 else {
        wordWriter.endTableCell(true,false);
      }
      wordWriter.endTableRow();
      wordWriter.endTable();
      context.setIsAfterTable(true);
      context.addContainer(true);
    }
 else {
      writeBookmark(foreign);
      writeToc(foreign);
      HTML2Content.html2Content(foreign);
      contentVisitor.visitChildren(foreign,null);
      adjustInline();
    }
  }
 else {
    Object rawValue=foreign.getRawValue();
    String foreignText=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(AbstractEmitterImpl.NORMAL,foreignText,foreign);
  }
}",0.1150855365474339
65286,"public static Object readObject(DataInputStream dis,Class fieldType,ClassLoader classLoader,int version) throws IOException, DataException {
  Object obj=null;
  char leadingChar=(char)dis.read();
  if (leadingChar == 0) {
    obj=null;
    return obj;
  }
  if (fieldType.equals(Integer.class))   obj=Integer.valueOf(dis.readInt());
 else   if (fieldType.equals(Double.class))   obj=new Double(dis.readDouble());
 else   if (fieldType.equals(BigDecimal.class))   obj=new BigDecimal(dis.readUTF());
 else   if (fieldType.equals(Time.class))   obj=new Time(dis.readLong());
 else   if (fieldType.equals(Timestamp.class))   obj=new Timestamp(dis.readLong());
 else   if (fieldType.equals(java.sql.Date.class))   obj=new java.sql.Date(dis.readLong());
 else   if (Date.class.isAssignableFrom(fieldType))   obj=new Date(dis.readLong());
 else   if (fieldType.equals(Boolean.class))   obj=Boolean.valueOf(dis.readBoolean());
 else   if (fieldType.equals(String.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    if (version < VersionManager.VERSION_4_2_2) {
      int len=IOUtil.readInt(dis);
      if (len == 0) {
        obj=null;
      }
 else {
        byte[] bytes=new byte[len];
        dis.read(bytes);
        obj=bytes;
      }
    }
 else {
      int byteLength=leadingChar >> 1;
      if (byteLength >= 127) {
        byteLength=IOUtil.readInt(dis);
      }
      byte[] bytes=new byte[byteLength];
      dis.read(bytes);
      obj=bytes;
    }
  }
 else   if (fieldType.equals(int[].class)) {
    int[] result=new int[IOUtil.readInt(dis)];
    for (int i=0; i < result.length; i++) {
      result[i]=dis.readInt();
    }
    obj=result;
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    obj=IOUtil.readObject(dis,classLoader);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
  return obj;
}","public static Object readObject(DataInputStream dis,Class fieldType,ClassLoader classLoader,int version) throws IOException, DataException {
  Object obj=null;
  char leadingChar=(char)dis.read();
  if (leadingChar == 0) {
    obj=null;
    return obj;
  }
  if (fieldType.equals(Integer.class))   obj=Integer.valueOf(dis.readInt());
 else   if (fieldType.equals(Double.class))   obj=new Double(dis.readDouble());
 else   if (fieldType.equals(BigDecimal.class))   obj=new BigDecimal(dis.readUTF());
 else   if (fieldType.equals(Time.class))   obj=new Time(dis.readLong());
 else   if (fieldType.equals(Timestamp.class))   obj=new Timestamp(dis.readLong());
 else   if (fieldType.equals(java.sql.Date.class))   obj=new java.sql.Date(dis.readLong());
 else   if (Date.class.isAssignableFrom(fieldType))   obj=new Date(dis.readLong());
 else   if (fieldType.equals(Boolean.class))   obj=Boolean.valueOf(dis.readBoolean());
 else   if (fieldType.equals(String.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    if (version < VersionManager.VERSION_4_2_2) {
      int len=IOUtil.readInt(dis);
      if (len == 0) {
        obj=null;
      }
 else {
        byte[] bytes=new byte[len];
        dis.read(bytes);
        obj=bytes;
      }
    }
 else {
      int byteLength=leadingChar >> 1;
      if (byteLength >= 127) {
        byteLength=IOUtil.readInt(dis);
      }
      byte[] bytes=new byte[byteLength];
      dis.readFully(bytes);
      obj=bytes;
    }
  }
 else   if (fieldType.equals(int[].class)) {
    int[] result=new int[IOUtil.readInt(dis)];
    for (int i=0; i < result.length; i++) {
      result[i]=dis.readInt();
    }
    obj=result;
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    obj=IOUtil.readObject(dis,classLoader);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
  return obj;
}",0.9988012467034284
65287,"boolean isInheritColumnsGroups(){
  return itemHandle.getDataSet() == null && ChartReportItemUtil.isContainerInheritable(itemHandle) && !context.isInheritColumnsOnly();
}","boolean isInheritColumnsGroups(){
  return itemHandle.getDataSet() == null && ChartReportItemUtil.isContainerInheritable(itemHandle) && !ChartReportItemUtil.isContainerGridHandle(itemHandle) && !context.isInheritColumnsOnly();
}",0.8542713567839196
65288,"/** 
 * Checks if the item's container is inheritable. Usually only Table and List can support inheritance.
 * @param itemHandle item
 * @return true means inheritable
 * @since 2.5
 */
public static boolean isContainerInheritable(ReportItemHandle itemHandle){
  DesignElementHandle container=itemHandle.getContainer();
  if (container instanceof CellHandle || container instanceof ListHandle || container instanceof ListGroupHandle) {
    while (container != null) {
      if (container instanceof ListingHandle) {
        return true;
      }
      container=container.getContainer();
    }
  }
  return false;
}","/** 
 * Checks if the item's container is inheritable. Usually only Table and List can support inheritance.
 * @param itemHandle item
 * @return true means inheritable
 * @since 2.5
 */
public static boolean isContainerInheritable(ReportItemHandle itemHandle){
  DesignElementHandle container=itemHandle.getContainer();
  if (container instanceof CellHandle || container instanceof ListHandle || container instanceof ListGroupHandle) {
    while (container != null) {
      if (container instanceof ListingHandle) {
        return true;
      }
 else       if (container instanceof GridHandle) {
        return true;
      }
      container=container.getContainer();
    }
  }
  return false;
}",0.9388379204892966
65289,"private ISelection getNewSelection(ISelection selection){
  if (!(getModel() instanceof DesignElementHandle)) {
    return selection;
  }
  if (!(selection instanceof IStructuredSelection)) {
    return selection;
  }
  List temp=new ArrayList();
  List list=((IStructuredSelection)selection).toList();
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof IElementPropertyDefn) {
      String name=((IElementPropertyDefn)list.get(i)).getName();
      Object obj=findData(name);
      if (obj != null) {
        temp.add(obj);
      }
 else {
        temp.add(list.get(i));
      }
    }
 else {
      temp.add(list.get(i));
    }
  }
  return new StructuredSelection(temp);
}","private ISelection getNewSelection(ISelection selection){
  if (!(getModel() instanceof DesignElementHandle)) {
    return selection;
  }
  if (!(selection instanceof IStructuredSelection)) {
    return selection;
  }
  List<Object> temp=new ArrayList<Object>();
  List list=((IStructuredSelection)selection).toList();
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof IElementPropertyDefn) {
      String name=((IElementPropertyDefn)list.get(i)).getName();
      Object obj=findData(name);
      if (obj != null) {
        temp.add(obj);
      }
 else {
        temp.add(list.get(i));
      }
    }
 else {
      temp.add(list.get(i));
    }
  }
  return new StructuredSelection(temp);
}",0.6405135520684736
65290,"private String createSignature(IMethodInfo info){
  StringBuffer signature=new StringBuffer();
  String javaDoc=info.getJavaDoc();
  if (javaDoc != null && javaDoc.length() > 0) {
    signature.append(""String_Node_Str"");
    signature.append(info.getJavaDoc());
  }
  if (info instanceof ITemplateMethodInfo) {
    String code=((ITemplateMethodInfo)info).getCodeTemplate();
    if (code != null) {
      signature.append(""String_Node_Str"").append(code).append(""String_Node_Str"");
      return signature.toString();
    }
  }
  signature.append(""String_Node_Str"");
  signature.append(info.getName());
  signature.append(""String_Node_Str"");
  Iterator iter=info.argumentListIterator();
  if (iter.hasNext()) {
    IArgumentInfoList argumentList=(IArgumentInfoList)iter.next();
    for (Iterator argumentIter=argumentList.argumentsIterator(); argumentIter.hasNext(); ) {
      IArgumentInfo argument=(IArgumentInfo)argumentIter.next();
      String argName=argument.getName();
      if (argName == null || argName.length() == 0) {
        String type=argument.getType();
        argName=JSEditor.convertToParameterName(type);
      }
      signature.append(argName);
      if (argumentIter.hasNext()) {
        signature.append(""String_Node_Str"");
      }
    }
  }
  signature.append(""String_Node_Str"");
  return signature.toString();
}","private String createSignature(IMethodInfo info){
  StringBuffer signature=new StringBuffer();
  String javaDoc=info.getJavaDoc();
  if (javaDoc != null && javaDoc.length() > 0) {
    signature.append(""String_Node_Str"");
    signature.append(info.getJavaDoc());
  }
  if (info instanceof ITemplateMethodInfo) {
    String code=((ITemplateMethodInfo)info).getCodeTemplate();
    if (code != null) {
      signature.append(""String_Node_Str"").append(code).append(""String_Node_Str"");
      return signature.toString();
    }
  }
  signature.append(""String_Node_Str"");
  signature.append(info.getName());
  signature.append(""String_Node_Str"");
  Iterator<IArgumentInfoList> iter=info.argumentListIterator();
  if (iter.hasNext()) {
    IArgumentInfoList argumentList=iter.next();
    for (Iterator<IArgumentInfo> argumentIter=argumentList.argumentsIterator(); argumentIter.hasNext(); ) {
      IArgumentInfo argument=argumentIter.next();
      String argName=argument.getName();
      if (argName == null || argName.length() == 0) {
        String type=argument.getType();
        argName=JSEditor.convertToParameterName(type);
      }
      signature.append(argName);
      if (argumentIter.hasNext()) {
        signature.append(""String_Node_Str"");
      }
    }
  }
  signature.append(""String_Node_Str"");
  return signature.toString();
}",0.9017991004497752
65291,"public Object[] getElements(Object inputElement){
  List elements=new ArrayList();
  if (inputElement instanceof ExtendedItemHandle) {
    int selectedIndex=editor.cmbExpList.getSelectionIndex();
    if (selectedIndex >= 0) {
      String scriptName=editor.cmbExpList.getItem(editor.cmbExpList.getSelectionIndex());
      ExtendedItemHandle extHandle=(ExtendedItemHandle)inputElement;
      List methods=extHandle.getMethods(scriptName);
      if (methods != null && methods.size() > 0) {
        elements.add(0,Messages.getString(""String_Node_Str""));
        elements.addAll(methods);
      }
    }
  }
 else   if (inputElement instanceof ReportDesignHandle) {
    int selectedIndex=editor.cmbExpList.getSelectionIndex();
    if (selectedIndex >= 0) {
      String scriptName=editor.cmbExpList.getItem(editor.cmbExpList.getSelectionIndex());
      if (JSEditor.CLIENT_SCRIPTS.equals(scriptName)) {
        List items=(List)((StructuredSelection)editor.cmbExprListViewer.getSelection()).getFirstElement();
        elements.addAll(items);
      }
    }
  }
  return elements.toArray();
}","public Object[] getElements(Object inputElement){
  List<Object> elements=new ArrayList<Object>();
  if (inputElement instanceof ExtendedItemHandle) {
    int selectedIndex=editor.cmbExpList.getSelectionIndex();
    if (selectedIndex >= 0) {
      String scriptName=editor.cmbExpList.getItem(editor.cmbExpList.getSelectionIndex());
      ExtendedItemHandle extHandle=(ExtendedItemHandle)inputElement;
      List methods=extHandle.getMethods(scriptName);
      if (methods != null && methods.size() > 0) {
        elements.add(0,Messages.getString(""String_Node_Str""));
        elements.addAll(methods);
      }
    }
  }
 else   if (inputElement instanceof ReportDesignHandle) {
    int selectedIndex=editor.cmbExpList.getSelectionIndex();
    if (selectedIndex >= 0) {
      Object mainSelection=((StructuredSelection)editor.cmbExprListViewer.getSelection()).getFirstElement();
      if (mainSelection instanceof List) {
        elements.addAll((List)mainSelection);
      }
    }
  }
  return elements.toArray();
}",0.757734412184674
65292,"public void createPartControl(Composite parent){
  Composite child=this.initEditorLayout(parent);
  cmbExprListViewer=new ComboViewer(cmbExpList);
  JSExpListProvider provider=new JSExpListProvider();
  cmbExprListViewer.setContentProvider(provider);
  cmbExprListViewer.setLabelProvider(provider);
  cmbExprListViewer.setData(VIEWER_CATEGORY_KEY,VIEWER_CATEGORY_CONTEXT);
  JSSubFunctionListProvider subProvider=new JSSubFunctionListProvider(this);
  cmbExprListViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctions.addListener(CustomChooserComposite.DROPDOWN_EVENT,new Listener(){
    public void handleEvent(    Event event){
      cmbSubFunctions.deselectAll();
      ScriptParser parser=new ScriptParser(getEditorText());
      Collection coll=parser.getAllMethodInfo();
      for (Iterator itr=coll.iterator(); itr.hasNext(); ) {
        IScriptMethodInfo mtd=(IScriptMethodInfo)itr.next();
        cmbSubFunctions.markSelection(METHOD_DISPLAY_INDENT + mtd.getName());
      }
    }
  }
);
  cmbSubFunctionsViewer=new TextComboViewer(cmbSubFunctions);
  cmbSubFunctionsViewer.setContentProvider(subProvider);
  cmbSubFunctionsViewer.setLabelProvider(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(propertyDefnChangeListener);
  Object model=getModel();
  if (model != null) {
    cmbExpList.setVisible(true);
    cmbSubFunctions.setVisible(true);
    setComboViewerInput(model);
  }
 else {
    setComboViewerInput(Messages.getString(""String_Node_Str""));
  }
  cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
  cmbExprListViewer.addSelectionChangedListener(propertyDefnChangeListener);
  scriptEditor.createPartControl(child);
  scriptValidator=new ScriptValidator(getViewer());
  disableEditor();
  SourceViewer viewer=getViewer();
  IDocument document=viewer == null ? null : viewer.getDocument();
  if (document != null) {
    IDocumentUndoManager undoManager=DocumentUndoManagerRegistry.getDocumentUndoManager(document);
    if (undoManager != null) {
      undoManager.addDocumentUndoListener(undoListener);
    }
    document.addDocumentListener(documentListener);
  }
}","public void createPartControl(Composite parent){
  Composite child=this.initEditorLayout(parent);
  cmbExprListViewer=new ComboViewer(cmbExpList);
  JSExpListProvider provider=new JSExpListProvider();
  cmbExprListViewer.setContentProvider(provider);
  cmbExprListViewer.setLabelProvider(provider);
  cmbExprListViewer.setData(VIEWER_CATEGORY_KEY,VIEWER_CATEGORY_CONTEXT);
  JSSubFunctionListProvider subProvider=new JSSubFunctionListProvider(this);
  cmbExprListViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctions.addListener(CustomChooserComposite.DROPDOWN_EVENT,new Listener(){
    public void handleEvent(    Event event){
      cmbSubFunctions.deselectAll();
      ScriptParser parser=new ScriptParser(getEditorText());
      Collection<IScriptMethodInfo> coll=parser.getAllMethodInfo();
      for (Iterator<IScriptMethodInfo> itr=coll.iterator(); itr.hasNext(); ) {
        IScriptMethodInfo mtd=itr.next();
        cmbSubFunctions.markSelection(METHOD_DISPLAY_INDENT + mtd.getName());
      }
    }
  }
);
  cmbSubFunctionsViewer=new TextComboViewer(cmbSubFunctions);
  cmbSubFunctionsViewer.setContentProvider(subProvider);
  cmbSubFunctionsViewer.setLabelProvider(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(propertyDefnChangeListener);
  Object model=getModel();
  if (model != null) {
    cmbExpList.setVisible(true);
    cmbSubFunctions.setVisible(true);
    setComboViewerInput(model);
  }
 else {
    setComboViewerInput(Messages.getString(""String_Node_Str""));
  }
  cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
  cmbExprListViewer.addSelectionChangedListener(propertyDefnChangeListener);
  scriptEditor.createPartControl(child);
  scriptValidator=new ScriptValidator(getViewer());
  disableEditor();
  SourceViewer viewer=getViewer();
  IDocument document=viewer == null ? null : viewer.getDocument();
  if (document != null) {
    IDocumentUndoManager undoManager=DocumentUndoManagerRegistry.getDocumentUndoManager(document);
    if (undoManager != null) {
      undoManager.addDocumentUndoListener(undoListener);
    }
    document.addDocumentListener(documentListener);
  }
}",0.9871302777150598
65293,"public void handleEvent(Event event){
  cmbSubFunctions.deselectAll();
  ScriptParser parser=new ScriptParser(getEditorText());
  Collection coll=parser.getAllMethodInfo();
  for (Iterator itr=coll.iterator(); itr.hasNext(); ) {
    IScriptMethodInfo mtd=(IScriptMethodInfo)itr.next();
    cmbSubFunctions.markSelection(METHOD_DISPLAY_INDENT + mtd.getName());
  }
}","public void handleEvent(Event event){
  cmbSubFunctions.deselectAll();
  ScriptParser parser=new ScriptParser(getEditorText());
  Collection<IScriptMethodInfo> coll=parser.getAllMethodInfo();
  for (Iterator<IScriptMethodInfo> itr=coll.iterator(); itr.hasNext(); ) {
    IScriptMethodInfo mtd=itr.next();
    cmbSubFunctions.markSelection(METHOD_DISPLAY_INDENT + mtd.getName());
  }
}",0.9238985313751668
65294,"private void updateScriptContext(DesignElementHandle handle,String method){
  List args=DEUtil.getDesignElementMethodArgumentsInfo(handle,method);
  JSSyntaxContext context=scriptEditor.getContext();
  context.clear();
  for (Iterator iter=args.iterator(); iter.hasNext(); ) {
    IArgumentInfo element=(IArgumentInfo)iter.next();
    String name=element.getName();
    String type=element.getType();
    if (!context.setVariable(name,type)) {
      context.setVariable(name,element.getClassType());
    }
  }
  Object[] adapters=ElementAdapterManager.getAdapters(handle,IScriptContextProvider.class);
  updateExtensionScriptContext(adapters,context,method,null);
  if (handle instanceof ExtendedItemHandle) {
    ExtendedItemHandle exHandle=(ExtendedItemHandle)handle;
    List mtds=exHandle.getMethods(method);
    if (mtds != null && mtds.size() > 0) {
      for (int i=0; i < mtds.size(); i++) {
        IMethodInfo mi=(IMethodInfo)mtds.get(i);
        for (Iterator itr=mi.argumentListIterator(); itr.hasNext(); ) {
          IArgumentInfoList ailist=(IArgumentInfoList)itr.next();
          for (Iterator argItr=ailist.argumentsIterator(); argItr.hasNext(); ) {
            IArgumentInfo aiinfo=(IArgumentInfo)argItr.next();
            String argName=aiinfo.getName();
            IClassInfo ci=aiinfo.getClassType();
            if (argName == null || argName.length() == 0) {
              argName=convertToParameterName(ci.getName());
            }
            context.setVariable(argName,ci);
          }
        }
        if (mi.getName() != null) {
          updateExtensionScriptContext(adapters,context,method,mi.getName());
        }
      }
    }
  }
}","private void updateScriptContext(DesignElementHandle handle,String method){
  List args=DEUtil.getDesignElementMethodArgumentsInfo(handle,method);
  JSSyntaxContext context=scriptEditor.getContext();
  context.clear();
  for (Iterator iter=args.iterator(); iter.hasNext(); ) {
    IArgumentInfo element=(IArgumentInfo)iter.next();
    String name=element.getName();
    String type=element.getType();
    if (!context.setVariable(name,type)) {
      context.setVariable(name,element.getClassType());
    }
  }
  Object[] adapters=ElementAdapterManager.getAdapters(handle,IScriptContextProvider.class);
  updateExtensionScriptContext(adapters,context,method,null);
  if (handle instanceof ExtendedItemHandle) {
    ExtendedItemHandle exHandle=(ExtendedItemHandle)handle;
    List mtds=exHandle.getMethods(method);
    if (mtds != null && mtds.size() > 0) {
      for (int i=0; i < mtds.size(); i++) {
        IMethodInfo mi=(IMethodInfo)mtds.get(i);
        for (Iterator<IArgumentInfoList> itr=mi.argumentListIterator(); itr.hasNext(); ) {
          IArgumentInfoList ailist=itr.next();
          for (Iterator<IArgumentInfo> argItr=ailist.argumentsIterator(); argItr.hasNext(); ) {
            IArgumentInfo aiinfo=argItr.next();
            String argName=aiinfo.getName();
            IClassInfo ci=aiinfo.getClassType();
            if (argName == null || argName.length() == 0) {
              argName=convertToParameterName(ci.getName());
            }
            context.setVariable(argName,ci);
          }
        }
        if (mi.getName() != null) {
          updateExtensionScriptContext(adapters,context,method,mi.getName());
        }
      }
    }
  }
}",0.9610545236668664
65295,"private Position findMethod(IMethodInfo methodInfo){
  ScriptParser parser=new ScriptParser(editor.getEditorText());
  Collection coll=parser.getAllMethodInfo();
  for (Iterator itr=coll.iterator(); itr.hasNext(); ) {
    IScriptMethodInfo mtd=(IScriptMethodInfo)itr.next();
    if (methodInfo.getName().equals(mtd.getName())) {
      return mtd.getPosition();
    }
  }
  return null;
}","private Position findMethod(IMethodInfo methodInfo){
  ScriptParser parser=new ScriptParser(editor.getEditorText());
  Collection<IScriptMethodInfo> coll=parser.getAllMethodInfo();
  for (Iterator<IScriptMethodInfo> itr=coll.iterator(); itr.hasNext(); ) {
    IScriptMethodInfo mtd=itr.next();
    if (methodInfo.getName().equals(mtd.getName())) {
      return mtd.getPosition();
    }
  }
  return null;
}",0.9281210592686002
65296,"public void handleSelectionChanged(ISelection selection){
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    IElementPropertyDefn targetMethod=null;
    if (sel.length == 1) {
      editObject=sel[0];
      if (sel[0] instanceof ScriptElementNode) {
        editObject=((ScriptElementNode)editObject).getParent();
      }
 else       if (sel[0] instanceof ScriptObjectNode) {
        editObject=((ScriptObjectNode)editObject).getParent();
      }
      if (editObject instanceof PropertyHandle) {
        targetMethod=((PropertyHandle)editObject).getPropertyDefn();
        if (targetMethod.getMethodInfo() != null) {
          editObject=((PropertyHandle)editObject).getElementHandle();
        }
      }
    }
    if (editObject instanceof DesignElementHandle) {
      palettePage.getSupport().setCurrentEditObject(editObject);
      setComboViewerInput(editObject);
      cmbItemLastSelected=null;
      setEditorText(""String_Node_Str"");
      if (cmbExpList.getItemCount() > 0) {
        enableEditor();
        if (targetMethod != null) {
          selectItemInComboExpList(new StructuredSelection(targetMethod));
        }
 else {
          ISelection oldSelection=(ISelection)selectionMap.get(getModel());
          if (oldSelection instanceof StructuredSelection && ((StructuredSelection)oldSelection).size() > 1) {
            selectItemInComboExpList(new StructuredSelection(((StructuredSelection)oldSelection).toArray()[0]));
            cmbSubFunctionsViewer.setSelection(new StructuredSelection(((StructuredSelection)oldSelection).toArray()[1]));
          }
 else {
            selectItemInComboExpList(oldSelection);
          }
        }
      }
 else {
        disableEditor();
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbSubFunctions.setItems(null);
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
  }
}","public void handleSelectionChanged(ISelection selection){
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    IElementPropertyDefn targetMethod=null;
    if (sel.length == 1) {
      editObject=sel[0];
      if (sel[0] instanceof ScriptElementNode) {
        editObject=((ScriptElementNode)editObject).getParent();
      }
 else       if (sel[0] instanceof ScriptObjectNode) {
        editObject=((ScriptObjectNode)editObject).getParent();
      }
      if (editObject instanceof PropertyHandle) {
        targetMethod=((PropertyHandle)editObject).getPropertyDefn();
        if (targetMethod.getMethodInfo() != null) {
          editObject=((PropertyHandle)editObject).getElementHandle();
        }
      }
    }
    if (editObject instanceof DesignElementHandle) {
      palettePage.getSupport().setCurrentEditObject(editObject);
      setComboViewerInput(editObject);
      cmbItemLastSelected=null;
      setEditorText(""String_Node_Str"");
      if (cmbExpList.getItemCount() > 0) {
        enableEditor();
        if (targetMethod != null) {
          selectItemInComboExpList(new StructuredSelection(targetMethod));
        }
 else {
          ISelection oldSelection=(ISelection)selectionMap.get(getModel());
          if (oldSelection instanceof StructuredSelection && ((StructuredSelection)oldSelection).size() > 1) {
            Object[] sels=((StructuredSelection)oldSelection).toArray();
            selectItemInComboExpList(new StructuredSelection(sels[0]));
            cmbSubFunctionsViewer.setSelection(new StructuredSelection(sels[1]));
          }
 else {
            selectItemInComboExpList(oldSelection);
          }
        }
      }
 else {
        disableEditor();
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbSubFunctions.setItems(null);
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
  }
}",0.9601491493824283
65297,"protected static String convertToParameterName(String fullName){
  fullName=fullName.substring(fullName.lastIndexOf('.') + 1);
  int upCase=0;
  SortedMap caps=new TreeMap();
  for (int i=0; i < fullName.length(); i++) {
    char character=fullName.charAt(i);
    if (Character.isUpperCase(character)) {
      upCase++;
      caps.put(Integer.valueOf(i),Integer.valueOf(character));
    }
  }
  if (upCase > 2) {
    StringBuffer result=new StringBuffer();
    for (Iterator iter=caps.values().iterator(); iter.hasNext(); ) {
      result.append((char)((Integer)iter.next()).intValue());
    }
    return result.toString().toLowerCase();
  }
 else   return fullName.substring(0,1).toLowerCase() + fullName.substring(1);
}","protected static String convertToParameterName(String fullName){
  fullName=fullName.substring(fullName.lastIndexOf('.') + 1);
  int upCase=0;
  SortedMap<Object,Object> caps=new TreeMap<Object,Object>();
  for (int i=0; i < fullName.length(); i++) {
    char character=fullName.charAt(i);
    if (Character.isUpperCase(character)) {
      upCase++;
      caps.put(Integer.valueOf(i),Integer.valueOf(character));
    }
  }
  if (upCase > 2) {
    StringBuffer result=new StringBuffer();
    for (Iterator<Object> iter=caps.values().iterator(); iter.hasNext(); ) {
      result.append((char)((Integer)iter.next()).intValue());
    }
    return result.toString().toLowerCase();
  }
 else   return fullName.substring(0,1).toLowerCase() + fullName.substring(1);
}",0.9743243243243244
65298,"public void partBroughtToTop(IWorkbenchPart part){
}","public void partBroughtToTop(IWorkbenchPart part){
  if (part instanceof MultiPageReportEditor) {
    MultiPageReportEditor topEditor=(MultiPageReportEditor)part;
    if (topEditor.getModel() != null && topEditor.getModel() != SessionHandleAdapter.getInstance().getModule()) {
      SessionHandleAdapter.getInstance().setModule(topEditor.getModel());
      updateRelatedViews();
    }
  }
}",0.2352941176470588
65299,"public void partActivated(IWorkbenchPart part){
  if (lastActivtedPart == part) {
    return;
  }
  lastActivtedPart=part;
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSave();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (resolveList != null && resetList(resolveList)) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (!waitReload) {
        waitReload=true;
        if (resolveList != null && reloadList(resolveList)) {
        }
 else {
          needReload=false;
        }
        waitReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      ModuleHandle currentModel=getModel();
      SessionHandleAdapter.getInstance().setReportDesignHandle(currentModel);
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),currentModel);
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        ((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            if (curPage instanceof IAdvanceReportEditorPage) {
              if (((IAdvanceReportEditorPage)curPage).isSensitivePartChange()) {
                curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
              }
            }
 else {
              curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
            }
          }
          if (!tempDispatch) {
            return;
          }
          if (needReload || needReset) {
            updateRelatedViews();
            UIUtil.refreshCurrentEditorMarkers();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
          resolveList.clear();
        }
      }
);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSave();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (resolveList != null && resetList(resolveList)) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (resolveList != null && reloadList(resolveList)) {
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      ModuleHandle currentModel=getModel();
      SessionHandleAdapter.getInstance().setReportDesignHandle(currentModel);
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),currentModel);
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        ((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            if (curPage instanceof IAdvanceReportEditorPage) {
              if (((IAdvanceReportEditorPage)curPage).isSensitivePartChange()) {
                curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
              }
            }
 else {
              curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
            }
          }
          if (!tempDispatch) {
            return;
          }
          if (needReload || needReset) {
            updateRelatedViews();
            UIUtil.refreshCurrentEditorMarkers();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
          resolveList.clear();
        }
      }
);
    }
  }
}",0.97874407870764
65300,"public void partBroughtToTop(IWorkbenchPart part){
  if (instance == null)   return;
  if (part instanceof ReportEditorProxy) {
    instance.partBroughtToTop(((ReportEditorProxy)part).getEditorPart());
  }
 else {
    instance.partBroughtToTop(part);
  }
  partActivated(part);
}","public void partBroughtToTop(IWorkbenchPart part){
  if (instance == null)   return;
  if (part instanceof ReportEditorProxy) {
    instance.partBroughtToTop(((ReportEditorProxy)part).getEditorPart());
  }
 else {
    instance.partBroughtToTop(part);
  }
}",0.9570093457943926
65301,"protected void processGroup(ListingDesign listing,int groupLevel,boolean breakBefore){
  GroupDesign group=listing.getGroup(groupLevel);
  PolicyNode parent=parentNode;
  visitReportItem(group,Boolean.TRUE);
  parentNode=currentNode;
  if (group.getPageBreakAfter() != null) {
    currentNode.breakAfter=true;
  }
  if (breakBefore || group.getPageBreakBefore() != null) {
    currentNode.breakBefore=true;
  }
  BandDesign header=group.getHeader();
  if (header != null) {
    header.accept(this,null);
  }
  if (++groupLevel < listing.getGroupCount()) {
    processGroup(listing,groupLevel,header != null);
    processGroup(listing,groupLevel,false);
  }
 else {
    processDetail(listing,true);
    processDetail(listing,false);
  }
  BandDesign footer=group.getFooter();
  if (footer != null) {
    footer.accept(this,Boolean.TRUE);
  }
  parentNode=parent;
}","protected void processGroup(ListingDesign listing,int groupLevel,boolean breakBefore){
  GroupDesign group=listing.getGroup(groupLevel);
  PolicyNode parent=parentNode;
  visitReportItem(group,Boolean.TRUE);
  parentNode=currentNode;
  if (group.getPageBreakAfter() != null) {
    currentNode.breakAfter=true;
  }
  if (breakBefore || group.getPageBreakBefore() != null) {
    currentNode.breakBefore=true;
  }
  BandDesign header=group.getHeader();
  if (header != null) {
    header.accept(this,null);
  }
  if (++groupLevel < listing.getGroupCount()) {
    processGroup(listing,groupLevel,header != null);
  }
 else {
    processDetail(listing,true);
    processDetail(listing,false);
  }
  BandDesign footer=group.getFooter();
  if (footer != null) {
    footer.accept(this,Boolean.TRUE);
  }
  parentNode=parent;
}",0.9738406658739596
65302,"protected PolicyNode findNextNode(PolicyNode node){
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  int count=node.parent.children.size();
  if (index < count - 1) {
    return (PolicyNode)node.parent.children.get(index + 1);
  }
 else {
    return findPreviousNode(node.parent);
  }
}","protected PolicyNode findNextNode(PolicyNode node){
  if (node.design instanceof GroupDesign)   return node;
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  int count=node.parent.children.size();
  if (index < count - 1) {
    return (PolicyNode)node.parent.children.get(index + 1);
  }
 else {
    return findNextNode(node.parent);
  }
}",0.9090909090909092
65303,"protected PolicyNode findPreviousNode(PolicyNode node){
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  if (index < 1) {
    return findPreviousNode(node.parent);
  }
 else {
    return (PolicyNode)node.parent.children.get(index - 1);
  }
}","protected PolicyNode findPreviousNode(PolicyNode node){
  if (node.design instanceof GroupDesign)   return node;
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  if (index < 1) {
    return findPreviousNode(node.parent);
  }
 else {
    return (PolicyNode)node.parent.children.get(index - 1);
  }
}",0.9153046062407132
65304,"private String getOrthogonalSeriesTitle(Chart chart){
  if (chart instanceof ChartWithAxes) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (chart instanceof DialChart) {
    return Messages.getString(""String_Node_Str"");
  }
  return Messages.getString(""String_Node_Str"");
}","protected String getOrthogonalSeriesTitle(Chart chart){
  if (chart instanceof ChartWithAxes) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (chart instanceof DialChart) {
    return Messages.getString(""String_Node_Str"");
  }
  return Messages.getString(""String_Node_Str"");
}",0.979591836734694
65305,"private String getBaseSeriesTitle(Chart chart){
  if (chart instanceof ChartWithAxes) {
    return Messages.getString(""String_Node_Str"");
  }
  return Messages.getString(""String_Node_Str"");
}","protected String getBaseSeriesTitle(Chart chart){
  if (chart instanceof ChartWithAxes) {
    return Messages.getString(""String_Node_Str"");
  }
  return Messages.getString(""String_Node_Str"");
}",0.9791666666666666
65306,"public boolean performOk(){
  if (isValid()) {
    saveOutputColumns();
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    if (this.modelChanged) {
      ((DataSetEditor)this.getContainer()).updateDataSetDesign(this);
      this.modelChanged=false;
    }
    if (!pageActivated)     this.setAnalysisTypeForColumn();
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return super.performOk();
  }
 else {
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return false;
  }
}","public boolean performOk(){
  if (isValid()) {
    saveOutputColumns();
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    if (this.modelChanged) {
      ((DataSetEditor)this.getContainer()).updateDataSetDesign(this);
      this.modelChanged=false;
    }
    try {
      if (!pageActivated) {
        setAnalysisTypeForColumn();
      }
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e,true);
    }
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return super.performOk();
  }
 else {
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return false;
  }
}",0.8978902953586498
65307,"/** 
 * validates that the new name/alias from a column hint or a new custom column doesn't conflict with existing column names or aliases
 */
private boolean isValid(){
  boolean validate=true;
  String newColumnNameOrAlias;
  DataSetViewData[] items=null;
  if (viewer == null || viewer.getViewer() == null) {
    try {
      items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true);
    }
 catch (    Exception e) {
      DataSetExceptionHandler.handle(e);
    }
  }
 else {
    items=(DataSetViewData[])viewer.getViewer().getInput();
  }
  for (int i=0; items != null && i < items.length && validate; i++) {
    newColumnNameOrAlias=items[i].getAlias();
    if (newColumnNameOrAlias != null && newColumnNameOrAlias.length() > 0) {
      for (int n=0; n < items.length; n++) {
        if (i == n)         continue;
        if ((items[n].getName() != null && items[n].getName().equals(newColumnNameOrAlias)) || (items[n].getAlias() != null && items[n].getAlias().equals(newColumnNameOrAlias))) {
          validate=false;
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{newColumnNameOrAlias,Integer.valueOf(n + 1)}),IMessageProvider.ERROR);
          break;
        }
      }
    }
  }
  return validate;
}","/** 
 * validates that the new name/alias from a column hint or a new custom column doesn't conflict with existing column names or aliases
 */
private boolean isValid(){
  boolean validate=true;
  String newColumnNameOrAlias;
  DataSetViewData[] items=null;
  if (viewer == null || viewer.getViewer() == null) {
    try {
      items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e,true);
    }
  }
 else {
    items=(DataSetViewData[])viewer.getViewer().getInput();
  }
  for (int i=0; items != null && i < items.length && validate; i++) {
    newColumnNameOrAlias=items[i].getAlias();
    if (newColumnNameOrAlias != null && newColumnNameOrAlias.length() > 0) {
      for (int n=0; n < items.length; n++) {
        if (i == n)         continue;
        if ((items[n].getName() != null && items[n].getName().equals(newColumnNameOrAlias)) || (items[n].getAlias() != null && items[n].getAlias().equals(newColumnNameOrAlias))) {
          validate=false;
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{newColumnNameOrAlias,Integer.valueOf(n + 1)}),IMessageProvider.ERROR);
          break;
        }
      }
    }
  }
  return validate;
}",0.9954093343534812
65308,"protected void setAnalysisTypeForColumn(){
  try {
    if (!isNewlyCreated) {
      DataSetHandle ds=((DataSetEditor)getContainer()).getHandle();
      DataSetViewData[] viewData=DataSetProvider.getCurrentInstance().getColumns(ds,true);
      PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
      Iterator iter=handle.iterator();
      if (iter != null) {
        while (iter.hasNext()) {
          ColumnHintHandle hint=(ColumnHintHandle)iter.next();
          for (int i=0; i < viewData.length; i++) {
            if (viewData[i].getName().equals(hint.getColumnName())) {
              if (hint.getAnalysis() == null) {
                try {
                  hint.setAnalysis(DataSetUIUtility.getDefaultAnalysisType(viewData[i].getDataTypeName()));
                }
 catch (                SemanticException e) {
                  ExceptionHandler.handle(e);
                }
              }
              continue;
            }
          }
        }
      }
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}","protected void setAnalysisTypeForColumn() throws BirtException {
  if (!isNewlyCreated) {
    DataSetHandle ds=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] viewData=DataSetProvider.getCurrentInstance().getColumns(ds,true);
    PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
    Iterator iter=handle.iterator();
    if (iter != null) {
      while (iter.hasNext()) {
        ColumnHintHandle hint=(ColumnHintHandle)iter.next();
        for (int i=0; i < viewData.length; i++) {
          if (viewData[i].getName().equals(hint.getColumnName())) {
            if (hint.getAnalysis() == null) {
              try {
                hint.setAnalysis(DataSetUIUtility.getDefaultAnalysisType(viewData[i].getDataTypeName()));
              }
 catch (              SemanticException e) {
                ExceptionHandler.handle(e,true);
              }
            }
            continue;
          }
        }
      }
    }
  }
}",0.8677403611517813
65309,"public boolean performOk(){
  try {
    if (combo != null && !combo.isDisposed() && combo.getSelectionIndex() > -1) {
      if (lastSelectedDataSourceIndex != combo.getSelectionIndex()) {
        DataSetHandle datasetHandle=(DataSetHandle)getContainer().getModel();
        datasetHandle.setDataSource(combo.getItem(combo.getSelectionIndex()));
        ((DataSetEditor)(getContainer())).updateDataSetDesign(this);
        if (datasetHandle instanceof OdaDataSetHandle && datasetHandle.getProperty(DataSetHandle.RESULT_SET_PROP) != null)         datasetHandle.clearProperty(DataSetHandle.RESULT_SET_PROP);
      }
      ((DataSetHandle)(getContainer().getModel())).removeListener(this);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return super.performOk();
}","public boolean performOk(){
  try {
    if (combo != null && !combo.isDisposed() && combo.getSelectionIndex() > -1) {
      if (lastSelectedDataSourceIndex != combo.getSelectionIndex()) {
        DataSetHandle datasetHandle=(DataSetHandle)getContainer().getModel();
        datasetHandle.setDataSource(combo.getItem(combo.getSelectionIndex()));
        ((DataSetEditor)(getContainer())).updateDataSetDesign(this);
        if (datasetHandle instanceof OdaDataSetHandle && datasetHandle.getProperty(DataSetHandle.RESULT_SET_PROP) != null)         datasetHandle.clearProperty(DataSetHandle.RESULT_SET_PROP);
      }
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  ((DataSetHandle)(getContainer().getModel())).removeListener(this);
  return super.performOk();
}",0.9123456790123456
65310,"public boolean performOk(){
  return canLeave();
}","public boolean performOk(){
  ((DataSetHandle)getContainer().getModel()).removeListener(this);
  return canLeave();
}",0.5988023952095808
65311,"public boolean performOk(){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (doSaveEmptyParameter(parameters)) {
    if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
      this.modelChanged=false;
      ((DataSetHandle)getContainer().getModel()).removeListener(this);
      ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    }
    return super.performOk();
  }
 else {
    String name=getNoneValuedParameterName();
    boolean confirm=MessageDialog.openConfirm(null,Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{name}));
    if (confirm)     ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    return confirm;
  }
}","public boolean performOk(){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (doSaveEmptyParameter(parameters)) {
    if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
      this.modelChanged=false;
      ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    }
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return super.performOk();
  }
 else {
    String name=getNoneValuedParameterName();
    boolean confirm=MessageDialog.openConfirm(null,Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{name}));
    if (confirm)     ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return confirm;
  }
}",0.8929851510496671
65312,"private void createComboCellParameter(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  reportParamComposite=ControlProvider.getDefaultComposite(parent);
  linkToSalarParameter=new Combo(reportParamComposite,SWT.READ_ONLY);
  linkToSalarParameter.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
  linkToSalarParameter.setVisibleItemCount(30);
  linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),((OdaDataSetParameterHandle)structureHandle).getParamName()));
  originalLinkToParamName=linkToSalarParameter.getText();
  linkToSalarParameter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String originalLink=originalLinkToParamName;
      linkToSalarParameterChanged();
      originalLinkToParamName=linkToSalarParameter.getText();
      updateLinkedReportParameter(originalLink);
      if (linkToSalarParameter.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      updateStructureHandle();
      OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
      String originalParamName=dataSetParameterHandle.getParamName();
      ParameterDialog dialog=null;
      ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
      boolean isCreateMode=true;
      if (handle == null) {
        handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        if (dataSetParameterHandle != null) {
          executeLinkedReportParameterUpdate(handle,dataSetParameterHandle);
        }
        isCreateMode=true;
      }
 else {
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        isCreateMode=false;
      }
      handle.addListener(new ScalarParameterListener());
      dialog.setInput(handle);
      if (dialog.open() == OK) {
        if (dialog.getResult() instanceof ParameterHandle) {
          ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
          if (isCreateMode) {
            SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
            try {
              parameterSlotHandle.add(paramerHandle);
              linkToSalarParameter.add(paramerHandle.getQualifiedName());
            }
 catch (            ContentException e) {
              ExceptionHandler.handle(e);
            }
catch (            NameException e) {
              ExceptionHandler.handle(e);
            }
          }
          linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
          originalLinkToParamName=paramerHandle.getQualifiedName();
          linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
        }
      }
 else {
        dataSetParameterHandle.setParamName(originalParamName);
      }
    }
  }
;
  parameterButton=new Button(reportParamComposite,SWT.PUSH);
  parameterButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER));
  parameterButton.addSelectionListener(listener);
  checkParameterButtonTooltip();
}","private void createComboCellParameter(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  reportParamComposite=ControlProvider.getDefaultComposite(parent);
  linkToSalarParameter=new Combo(reportParamComposite,SWT.READ_ONLY);
  linkToSalarParameter.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
  linkToSalarParameter.setVisibleItemCount(30);
  linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),((OdaDataSetParameterHandle)structureHandle).getParamName()));
  originalLinkToParamName=linkToSalarParameter.getText();
  linkToSalarParameter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String originalLink=originalLinkToParamName;
      linkToSalarParameterChanged();
      originalLinkToParamName=linkToSalarParameter.getText();
      updateLinkedReportParameter(originalLink);
      if (linkToSalarParameter.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      updateStructureHandle();
      OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
      String originalParamName=dataSetParameterHandle.getParamName();
      ParameterDialog dialog=null;
      ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
      boolean isCreateMode=true;
      if (handle == null) {
        handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        if (dataSetParameterHandle != null) {
          executeLinkedReportParameterUpdate(handle,dataSetParameterHandle);
        }
        isCreateMode=true;
      }
 else {
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        isCreateMode=false;
      }
      ScalarParameterListener scalarParameterListener=new ScalarParameterListener();
      handle.addListener(scalarParameterListener);
      dialog.setInput(handle);
      if (dialog.open() == OK) {
        if (dialog.getResult() instanceof ParameterHandle) {
          ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
          if (isCreateMode) {
            SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
            try {
              parameterSlotHandle.add(paramerHandle);
              linkToSalarParameter.add(paramerHandle.getQualifiedName());
            }
 catch (            ContentException e) {
              ExceptionHandler.handle(e);
            }
catch (            NameException e) {
              ExceptionHandler.handle(e);
            }
          }
          linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
          originalLinkToParamName=paramerHandle.getQualifiedName();
          linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
        }
      }
 else {
        dataSetParameterHandle.setParamName(originalParamName);
      }
      handle.removeListener(scalarParameterListener);
    }
  }
;
  parameterButton=new Button(reportParamComposite,SWT.PUSH);
  parameterButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER));
  parameterButton.addSelectionListener(listener);
  checkParameterButtonTooltip();
}",0.9801324503311258
65313,"public void widgetSelected(SelectionEvent event){
  updateStructureHandle();
  OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
  String originalParamName=dataSetParameterHandle.getParamName();
  ParameterDialog dialog=null;
  ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
  boolean isCreateMode=true;
  if (handle == null) {
    handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
    dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
    if (dataSetParameterHandle != null) {
      executeLinkedReportParameterUpdate(handle,dataSetParameterHandle);
    }
    isCreateMode=true;
  }
 else {
    dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
    isCreateMode=false;
  }
  handle.addListener(new ScalarParameterListener());
  dialog.setInput(handle);
  if (dialog.open() == OK) {
    if (dialog.getResult() instanceof ParameterHandle) {
      ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
      if (isCreateMode) {
        SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
        try {
          parameterSlotHandle.add(paramerHandle);
          linkToSalarParameter.add(paramerHandle.getQualifiedName());
        }
 catch (        ContentException e) {
          ExceptionHandler.handle(e);
        }
catch (        NameException e) {
          ExceptionHandler.handle(e);
        }
      }
      linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
      originalLinkToParamName=paramerHandle.getQualifiedName();
      linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
    }
  }
 else {
    dataSetParameterHandle.setParamName(originalParamName);
  }
}","public void widgetSelected(SelectionEvent event){
  updateStructureHandle();
  OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
  String originalParamName=dataSetParameterHandle.getParamName();
  ParameterDialog dialog=null;
  ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
  boolean isCreateMode=true;
  if (handle == null) {
    handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
    dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
    if (dataSetParameterHandle != null) {
      executeLinkedReportParameterUpdate(handle,dataSetParameterHandle);
    }
    isCreateMode=true;
  }
 else {
    dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
    isCreateMode=false;
  }
  ScalarParameterListener scalarParameterListener=new ScalarParameterListener();
  handle.addListener(scalarParameterListener);
  dialog.setInput(handle);
  if (dialog.open() == OK) {
    if (dialog.getResult() instanceof ParameterHandle) {
      ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
      if (isCreateMode) {
        SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
        try {
          parameterSlotHandle.add(paramerHandle);
          linkToSalarParameter.add(paramerHandle.getQualifiedName());
        }
 catch (        ContentException e) {
          ExceptionHandler.handle(e);
        }
catch (        NameException e) {
          ExceptionHandler.handle(e);
        }
      }
      linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
      originalLinkToParamName=paramerHandle.getQualifiedName();
      linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
    }
  }
 else {
    dataSetParameterHandle.setParamName(originalParamName);
  }
  handle.removeListener(scalarParameterListener);
}",0.9668020062096968
65314,"public boolean performOk(){
  if (!modelChanged) {
    disposeAll();
    return super.performOk();
  }
  if (isValid()) {
    refreshPositions();
    disposeAll();
    return super.performOk();
  }
 else   return false;
}","public boolean performOk(){
  if (!modelChanged) {
    disposeAll();
    return super.performOk();
  }
  if (isValid()) {
    refreshPositions();
    disposeAll();
    return super.performOk();
  }
 else {
    disposeAll();
    return false;
  }
}",0.8717948717948718
65315,"public boolean performOk(){
  if (isValid()) {
    saveOutputColumns();
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    if (this.modelChanged) {
      ((DataSetEditor)this.getContainer()).updateDataSetDesign(this);
      this.modelChanged=false;
    }
    if (!pageActivated)     this.setAnalysisTypeForColumn();
    return super.performOk();
  }
 else   return false;
}","public boolean performOk(){
  if (isValid()) {
    saveOutputColumns();
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    if (this.modelChanged) {
      ((DataSetEditor)this.getContainer()).updateDataSetDesign(this);
      this.modelChanged=false;
    }
    if (!pageActivated)     this.setAnalysisTypeForColumn();
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return super.performOk();
  }
 else {
    ((DataSetHandle)getContainer().getModel()).removeListener(this);
    return false;
  }
}",0.8098290598290598
65316,"protected Object openDialogBox(Control cellEditorWindow){
  ParameterDialog dialog=null;
  ParameterHandle handle=Utility.getScalarParameter(this.comboBox.getText());
  int mode=CREATE_MODE;
  if (handle == null) {
    handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
    dialog=new ParameterDialog(cellEditorWindow.getShell(),Messages.getString(""String_Node_Str""));
    if (obj != null && obj instanceof OdaDataSetParameterHandle) {
      ReportParameterAdapter adapter=new ReportParameterAdapter();
      try {
        adapter.updateLinkedReportParameter((ScalarParameterHandle)handle,(OdaDataSetParameterHandle)obj);
      }
 catch (      SemanticException e) {
      }
    }
    mode=this.CREATE_MODE;
  }
 else {
    dialog=new ParameterDialog(cellEditorWindow.getShell(),Messages.getString(""String_Node_Str""));
    mode=this.EDIT_MODE;
  }
  handle.addListener(this.listener);
  dialog.setInput(handle);
  if (dialog.open() == Dialog.OK) {
    if (dialog.getResult() instanceof ParameterHandle) {
      ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
      if (mode == this.CREATE_MODE) {
        SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
        try {
          parameterSlotHandle.add(paramerHandle);
          comboBox.add(paramerHandle.getQualifiedName());
        }
 catch (        ContentException e) {
          logger.log(Level.FINE,e.getMessage(),e);
        }
catch (        NameException e) {
          logger.log(Level.FINE,e.getMessage(),e);
        }
      }
      return paramerHandle.getQualifiedName();
    }
  }
  setFocus();
  return null;
}","protected Object openDialogBox(Control cellEditorWindow){
  ParameterDialog dialog=null;
  ParameterHandle handle=Utility.getScalarParameter(this.comboBox.getText());
  int mode=CREATE_MODE;
  if (handle == null) {
    handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
    dialog=new ParameterDialog(cellEditorWindow.getShell(),Messages.getString(""String_Node_Str""));
    if (obj != null && obj instanceof OdaDataSetParameterHandle) {
      ReportParameterAdapter adapter=new ReportParameterAdapter();
      try {
        adapter.updateLinkedReportParameter((ScalarParameterHandle)handle,(OdaDataSetParameterHandle)obj);
      }
 catch (      SemanticException e) {
      }
    }
    mode=this.CREATE_MODE;
  }
 else {
    dialog=new ParameterDialog(cellEditorWindow.getShell(),Messages.getString(""String_Node_Str""));
    mode=this.EDIT_MODE;
  }
  handle.addListener(this.listener);
  dialog.setInput(handle);
  if (dialog.open() == Dialog.OK) {
    if (dialog.getResult() instanceof ParameterHandle) {
      ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
      if (mode == this.CREATE_MODE) {
        SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
        try {
          parameterSlotHandle.add(paramerHandle);
          comboBox.add(paramerHandle.getQualifiedName());
        }
 catch (        ContentException e) {
          logger.log(Level.FINE,e.getMessage(),e);
        }
catch (        NameException e) {
          logger.log(Level.FINE,e.getMessage(),e);
        }
      }
      return paramerHandle.getQualifiedName();
    }
  }
  setFocus();
  handle.removeListener(this.listener);
  return null;
}",0.988262910798122
65317,"public static ExpressionButton createExpressionButton(Composite parent,int style,boolean allowConstant){
  ExpressionButton button=new ExpressionButton(parent,style,allowConstant);
  IExpressionButtonProvider provider=(IExpressionButtonProvider)ElementAdapterManager.getAdapter(button,IExpressionButtonProvider.class);
  if (provider != null)   button.setExpressionButtonProvider(provider);
  GridData gd=new GridData();
  if (!Platform.getOS().equals(Platform.OS_MACOSX)) {
    gd.heightHint=20;
  }
  button.getControl().setLayoutData(gd);
  return button;
}","public static ExpressionButton createExpressionButton(Composite parent,int style,boolean allowConstant){
  ExpressionButton button=new ExpressionButton(parent,style,allowConstant);
  IExpressionButtonProvider provider=(IExpressionButtonProvider)ElementAdapterManager.getAdapter(button,IExpressionButtonProvider.class);
  if (provider != null)   button.setExpressionButtonProvider(provider);
  GridData gd=new GridData();
  if (Platform.getOS().equals(Platform.OS_WIN32)) {
    gd.heightHint=20;
  }
  button.getControl().setLayoutData(gd);
  return button;
}",0.9892665474060824
65318,"/** 
 * Convenient method to setup button to invoke expression builder
 */
public static void setExpressionButtonImage(Button button){
  String imageName;
  if (button.isEnabled()) {
    imageName=IReportGraphicConstants.ICON_ENABLE_EXPRESSION_BUILDERS;
  }
 else {
    imageName=IReportGraphicConstants.ICON_DISABLE_EXPRESSION_BUILDERS;
  }
  Image image=ReportPlatformUIImages.getImage(imageName);
  GridData gd=new GridData();
  if (!Platform.getOS().equals(Platform.OS_MACOSX)) {
    gd.widthHint=20;
    gd.heightHint=20;
  }
  button.setLayoutData(gd);
  button.setImage(image);
  if (button.getImage() != null) {
    button.getImage().setBackground(button.getBackground());
  }
  button.setToolTipText(Messages.getString(""String_Node_Str""));
}","/** 
 * Convenient method to setup button to invoke expression builder
 */
public static void setExpressionButtonImage(Button button){
  String imageName;
  if (button.isEnabled()) {
    imageName=IReportGraphicConstants.ICON_ENABLE_EXPRESSION_BUILDERS;
  }
 else {
    imageName=IReportGraphicConstants.ICON_DISABLE_EXPRESSION_BUILDERS;
  }
  Image image=ReportPlatformUIImages.getImage(imageName);
  GridData gd=new GridData();
  if (Platform.getOS().equals(Platform.OS_WIN32)) {
    gd.widthHint=20;
    gd.heightHint=20;
  }
 else {
    gd.widthHint=button.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  }
  button.setLayoutData(gd);
  button.setImage(image);
  if (button.getImage() != null) {
    button.getImage().setBackground(button.getBackground());
  }
  button.setToolTipText(Messages.getString(""String_Node_Str""));
}",0.9440914866581956
65319,"protected ActionHandle getDefaultAction(ExtendedItemHandle handle,String expression){
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  String bindingname=exprCodec.getBindingName(expression);
  if (bindingname == null) {
    return null;
  }
  CubeHandle cube=handle.getCube();
  DataSetHandle dataset=handle.getDataSet();
  if (cube != null) {
    for (    LevelHandle lh : ChartCubeUtil.getAllLevels(cube)) {
      if (bindingname.equals(ChartCubeUtil.createLevelBindingName(lh))) {
        return lh.getActionHandle();
      }
    }
    for (    MeasureHandle mh : ChartCubeUtil.getAllMeasures(cube)) {
      if (bindingname.equals(ChartCubeUtil.createMeasureBindingName(mh))) {
        return mh.getActionHandle();
      }
    }
  }
 else   if (dataset != null) {
    for (Iterator<?> iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
      ColumnHintHandle element=(ColumnHintHandle)iter.next();
      if (element.getColumnName().equals(bindingname) || bindingname.equals(element.getAlias())) {
        return element.getActionHandle();
      }
    }
  }
  return null;
}","protected ActionHandle getDefaultAction(ExtendedItemHandle handle,String expression){
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  String bindingname=exprCodec.getBindingName(expression);
  if (bindingname == null) {
    return null;
  }
  if (ChartReportItemHelper.instance().getBindingCubeHandle(handle) != null) {
    CubeHandle cube=handle.getCube();
    for (    LevelHandle lh : ChartCubeUtil.getAllLevels(cube)) {
      if (bindingname.equals(ChartCubeUtil.createLevelBindingName(lh))) {
        return lh.getActionHandle();
      }
    }
    for (    MeasureHandle mh : ChartCubeUtil.getAllMeasures(cube)) {
      if (bindingname.equals(ChartCubeUtil.createMeasureBindingName(mh))) {
        return mh.getActionHandle();
      }
    }
  }
 else   if (ChartReportItemHelper.instance().getBindingDataSetHandle(handle) != null) {
    DataSetHandle dataset=handle.getDataSet();
    for (Iterator<?> iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
      ColumnHintHandle element=(ColumnHintHandle)iter.next();
      if (element.getColumnName().equals(bindingname) || bindingname.equals(element.getAlias())) {
        return element.getActionHandle();
      }
    }
  }
  return null;
}",0.8757201646090536
65320,"public void handleSelection(String[] paths,String rootPath,boolean isRelative){
  ClassPathElement[] elements=createClassPathElements(paths,rootPath,isRelative);
  helper.addClassPathElements(elements,true);
  if (folderPage != null) {
    folderPage.updateWizardPageStatus();
    if (folderPage.isDefaultPathInitialized()) {
      TableViewer friendTableViewer=folderPage.getTabFriendClassTabFolderPage().getClassPathsTableViewer();
      IMenuButtonHelper friendHelper=new MenuButtonHelper(friendTableViewer);
      friendHelper.addClassPathElements(elements,false);
      folderPage.getTabFriendClassTabFolderPage().updateWizardPageStatus();
      folderPage.setDefaultPathInitialized();
      folderPage.getTabFriendClassTabFolderPage().setDefaultPathInitialized();
    }
  }
}","public void handleSelection(String[] paths,String rootPath,boolean isRelative){
  ClassPathElement[] elements=createClassPathElements(paths,rootPath,isRelative);
  ((MenuButtonHelper)helper).updateTableElementsList();
  helper.addClassPathElements(elements,true);
  if (folderPage != null) {
    folderPage.updateWizardPageStatus();
    if (folderPage.isDefaultPathInitialized()) {
      TableViewer friendTableViewer=folderPage.getTabFriendClassTabFolderPage().getClassPathsTableViewer();
      IMenuButtonHelper friendHelper=new MenuButtonHelper(friendTableViewer);
      friendHelper.addClassPathElements(elements,false);
      folderPage.getTabFriendClassTabFolderPage().updateWizardPageStatus();
      folderPage.setDefaultPathInitialized();
      folderPage.getTabFriendClassTabFolderPage().setDefaultPathInitialized();
    }
  }
}",0.965389369592089
65321,"public void addClassPathElements(ClassPathElement[] items,boolean current){
  updateTableElementsList(viewer);
  boolean containsDuplicated=false;
  for (int i=0; i < items.length; i++) {
    boolean exists=false;
    for (int j=0; j < elements.size(); j++) {
      if (elements.get(j).isRelativePath() == items[i].isRelativePath() && elements.get(j).getFullPath() != null && elements.get(j).getFullPath().equals(items[i].getFullPath())) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      this.elements.add(items[i]);
    }
 else {
      containsDuplicated=true;
    }
  }
  viewer.setInput(elements);
  viewer.refresh();
  if (containsDuplicated && current) {
    ExceptionHandler.openMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.ICON_ERROR);
  }
}","public void addClassPathElements(ClassPathElement[] items,boolean current){
  boolean containsDuplicated=false;
  for (int i=0; i < items.length; i++) {
    boolean exists=false;
    for (int j=0; j < elements.size(); j++) {
      if (elements.get(j).isRelativePath() == items[i].isRelativePath() && elements.get(j).getFullPath() != null && elements.get(j).getFullPath().equals(items[i].getFullPath())) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      this.elements.add(items[i]);
    }
 else {
      containsDuplicated=true;
    }
  }
  viewer.setInput(elements);
  viewer.refresh();
  if (containsDuplicated && current) {
    ExceptionHandler.openMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.ICON_ERROR);
  }
}",0.9782202862476664
65322,"public MenuButtonHelper(TableViewer viewer){
  this.viewer=viewer;
  updateTableElementsList(viewer);
}","public MenuButtonHelper(TableViewer viewer){
  this.viewer=viewer;
  updateTableElementsList();
}",0.97
65323,"private void updateTableElementsList(TableViewer viewer){
  elements=(List<ClassPathElement>)viewer.getInput();
  if (elements == null) {
    elements=new ArrayList<ClassPathElement>();
  }
}","public void updateTableElementsList(){
  elements=(List<ClassPathElement>)viewer.getInput();
  if (elements == null) {
    elements=new ArrayList<ClassPathElement>();
  }
}",0.9256198347107438
65324,"public void setClassPath(String dataSetClassPath){
  initClassPathElements(dataSetClassPath);
}","public void setClassPath(String dataSetClassPath){
  this.dataSetClassPath=dataSetClassPath;
}",0.7936507936507936
65325,"public void initClassPathElements(String dataSetClassPath){
  if (elements == null)   elements=new ArrayList<ClassPathElement>();
  if (dataSetClassPath != null && dataSetClassPath.trim().length() > 0) {
    String paths[]=dataSetClassPath.split(PATH_SEPARATOR);
    ClassPathElement[] classPathElements=new ClassPathElement[paths.length];
    for (int i=0; i < paths.length; i++) {
      File file=new File(paths[i]);
      ClassPathElement element=new ClassPathElement(file.getName(),paths[i],!file.isAbsolute());
      this.elements.add(element);
      classPathElements[i]=element;
    }
    this.jarButton.getMenuButtonHelper().addClassPathElements(classPathElements,true);
  }
  classPathsTableViewer.setInput(elements);
  classPathsTableViewer.refresh();
  updateWizardPageStatus();
}","public void initClassPathElements(){
  if (elements == null)   elements=new ArrayList<ClassPathElement>();
 else   elements.clear();
  ((MenuButtonHelper)this.jarButton.getMenuButtonHelper()).clearTableElementsList();
  if (dataSetClassPath != null && dataSetClassPath.trim().length() > 0) {
    String paths[]=dataSetClassPath.split(PATH_SEPARATOR);
    ClassPathElement[] classPathElements=new ClassPathElement[paths.length];
    for (int i=0; i < paths.length; i++) {
      File file=new File(paths[i]);
      ClassPathElement element=new ClassPathElement(file.getName(),paths[i],!file.isAbsolute());
      classPathElements[i]=element;
      elements.add(element);
    }
    this.jarButton.getMenuButtonHelper().addClassPathElements(classPathElements,true);
  }
  classPathsTableViewer.setInput(elements);
  classPathsTableViewer.refresh();
  updateWizardPageStatus();
}",0.8816816816816817
65326,"private void initControlValues(){
  String dataSetClassPath=props.getProperty(Constants.POJO_DATA_SET_CLASS_PATH);
  String pojoClassPath=props.getProperty(Constants.POJO_CLASS_PATH);
  if (runtimePage != null) {
    runtimePage.setClassPath(dataSetClassPath);
    designtimePage.setClassPath(pojoClassPath);
  }
}","private void initControlValues(){
  if (runtimePage != null) {
    String dataSetClassPath=props.getProperty(Constants.POJO_DATA_SET_CLASS_PATH);
    String pojoClassPath=props.getProperty(Constants.POJO_CLASS_PATH);
    runtimePage.setClassPath(dataSetClassPath);
    designtimePage.setClassPath(pojoClassPath);
    runtimePage.initClassPathElements();
    designtimePage.initClassPathElements();
  }
}",0.5774058577405857
65327,"public void setInitialProperties(Properties dataSourceProps){
  if (dataSourceProps != null) {
    props=dataSourceProps;
  }
  initControlValues();
}","public void setInitialProperties(Properties dataSourceProps){
  if (dataSourceProps != null) {
    props=dataSourceProps;
    needsRefresh=true;
  }
}",0.86
65328,"@Override public Properties collectCustomProperties(){
  return helper.collectCustomProperties();
}","public Properties collectCustomProperties(){
  return helper.collectCustomProperties();
}",0.946808510638298
65329,"@Override public void createPageCustomControl(Composite parent){
  helper.setResourceIdentifiers(this.getHostResourceIdentifiers());
  helper.createPageCustomControl(parent);
}","public void createPageCustomControl(Composite parent){
  helper.setResourceIdentifiers(this.getHostResourceIdentifiers());
  helper.createPageCustomControl(parent);
}",0.9707602339181286
65330,"@Override public void setInitialProperties(Properties dataSourceProps){
  helper.setInitialProperties(dataSourceProps);
}","public void setInitialProperties(Properties dataSourceProps){
  helper.setInitialProperties(dataSourceProps);
}",0.956896551724138
65331,"/** 
 * Get the chart instance from the design file and group X series of the chart. return An instance of the simulated runtime chart model (containing filled datasets)
 */
void groupSeries(){
  SessionHandle sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle((ULocale)null);
  ReportDesignHandle designHandle=null;
  String path=""String_Node_Str"";
  try {
    designHandle=sessionHandle.openDesign(path + ""String_Node_Str"");
    ExtendedItemHandle eih=(ExtendedItemHandle)designHandle.getBody().getContents().get(0);
    Chart cm=(Chart)eih.getReportItem().getProperty(""String_Node_Str"");
    cm.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
    SeriesDefinition sdX=(((ChartWithAxes)cm).getAxes().get(0)).getSeriesDefinitions().get(0);
    sdX.setSorting(SortOption.ASCENDING_LITERAL);
    sdX.getGrouping().setEnabled(true);
    sdX.getGrouping().setAggregateExpression(""String_Node_Str"");
    sdX.getGrouping().setGroupType(DataType.NUMERIC_LITERAL);
    sdX.getGrouping().setGroupingInterval(1);
    designHandle.saveAs(path + ""String_Node_Str"");
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
catch (  ExtendedElementException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Get the chart instance from the design file and group X series of the chart. return An instance of the simulated runtime chart model (containing filled datasets)
 */
void groupSeries(){
  SessionHandle sessionHandle=getDesignEngine().newSessionHandle((ULocale)null);
  ReportDesignHandle designHandle=null;
  String path=""String_Node_Str"";
  try {
    designHandle=sessionHandle.openDesign(path + ""String_Node_Str"");
    ExtendedItemHandle eih=(ExtendedItemHandle)designHandle.getBody().getContents().get(0);
    Chart cm=(Chart)eih.getReportItem().getProperty(""String_Node_Str"");
    cm.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
    SeriesDefinition sdX=(((ChartWithAxes)cm).getAxes().get(0)).getSeriesDefinitions().get(0);
    sdX.setSorting(SortOption.ASCENDING_LITERAL);
    sdX.getGrouping().setEnabled(true);
    sdX.getGrouping().setAggregateExpression(""String_Node_Str"");
    sdX.getGrouping().setGroupType(DataType.NUMERIC_LITERAL);
    sdX.getGrouping().setGroupingInterval(1);
    designHandle.saveAs(path + ""String_Node_Str"");
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
catch (  ExtendedElementException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    Platform.shutdown();
  }
}",0.9748159628051144
65332,"/** 
 * Get the chart instance from the design file and add series grouping key.
 * @return An instance of the simulated runtime chart model (containingfilled datasets)
 */
void groupKey(){
  SessionHandle sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle((ULocale)null);
  ReportDesignHandle designHandle=null;
  String path=""String_Node_Str"";
  try {
    designHandle=sessionHandle.openDesign(path + ""String_Node_Str"");
    ExtendedItemHandle eih=(ExtendedItemHandle)designHandle.getBody().getContents().get(0);
    Chart cm=(Chart)eih.getReportItem().getProperty(""String_Node_Str"");
    cm.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
    Axis axisBase=((ChartWithAxes)cm).getAxes().get(0);
    Axis axisOrth=axisBase.getAssociatedAxes().get(0);
    SeriesDefinition sdY=axisOrth.getSeriesDefinitions().get(0);
    SeriesDefinition sdGroup=SeriesDefinitionImpl.create();
    Query query=QueryImpl.create(""String_Node_Str"");
    sdGroup.setQuery(query);
    axisOrth.getSeriesDefinitions().clear();
    axisOrth.getSeriesDefinitions().add(0,sdGroup);
    sdGroup.getSeries().add(sdY.getSeries().get(0));
    designHandle.saveAs(path + ""String_Node_Str"");
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
catch (  ExtendedElementException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Get the chart instance from the design file and add series grouping key.
 * @return An instance of the simulated runtime chart model (containingfilled datasets)
 */
void groupKey(){
  SessionHandle sessionHandle=getDesignEngine().newSessionHandle((ULocale)null);
  ReportDesignHandle designHandle=null;
  String path=""String_Node_Str"";
  try {
    designHandle=sessionHandle.openDesign(path + ""String_Node_Str"");
    ExtendedItemHandle eih=(ExtendedItemHandle)designHandle.getBody().getContents().get(0);
    Chart cm=(Chart)eih.getReportItem().getProperty(""String_Node_Str"");
    cm.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
    Axis axisBase=((ChartWithAxes)cm).getAxes().get(0);
    Axis axisOrth=axisBase.getAssociatedAxes().get(0);
    SeriesDefinition sdY=axisOrth.getSeriesDefinitions().get(0);
    SeriesDefinition sdGroup=SeriesDefinitionImpl.create();
    Query query=QueryImpl.create(""String_Node_Str"");
    sdGroup.setQuery(query);
    axisOrth.getSeriesDefinitions().clear();
    axisOrth.getSeriesDefinitions().add(0,sdGroup);
    sdGroup.getSeries().add(sdY.getSeries().get(0));
    designHandle.saveAs(path + ""String_Node_Str"");
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
catch (  ExtendedElementException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    Platform.shutdown();
  }
}",0.9767275331185106
65333,"void createReport() throws SemanticException, IOException {
  SessionHandle session=new DesignEngine(new DesignConfig()).newSessionHandle((ULocale)null);
  reportDesignHandle=session.createDesign();
  elementFactory=reportDesignHandle.getElementFactory();
  createMasterPages();
  createDataSources();
  createDataSets();
  createBody();
  String outputPath=""String_Node_Str"";
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  reportDesignHandle.saveAs(outputPath + ""String_Node_Str"" + ""String_Node_Str"");
}","void createReport() throws SemanticException, IOException {
  SessionHandle session=getDesignEngine().newSessionHandle((ULocale)null);
  reportDesignHandle=session.createDesign();
  elementFactory=reportDesignHandle.getElementFactory();
  createMasterPages();
  createDataSources();
  createDataSets();
  createBody();
  String outputPath=""String_Node_Str"";
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  reportDesignHandle.saveAs(outputPath + ""String_Node_Str"" + ""String_Node_Str"");
  Platform.shutdown();
}",0.960655737704918
65334,"void createReport() throws SemanticException, IOException {
  SessionHandle session=new DesignEngine(new DesignConfig()).newSessionHandle((ULocale)null);
  reportDesignHandle=session.createDesign();
  elementFactory=reportDesignHandle.getElementFactory();
  createMasterPages();
  createDataSources();
  createDataSets();
  createStyles();
  createBody();
  String outputPath=""String_Node_Str"";
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  reportDesignHandle.saveAs(outputPath + ""String_Node_Str"" + ""String_Node_Str"");
}","void createReport() throws SemanticException, IOException {
  SessionHandle session=getDesignEngine().newSessionHandle((ULocale)null);
  reportDesignHandle=session.createDesign();
  elementFactory=reportDesignHandle.getElementFactory();
  createMasterPages();
  createDataSources();
  createDataSets();
  createStyles();
  createBody();
  String outputPath=""String_Node_Str"";
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  reportDesignHandle.saveAs(outputPath + ""String_Node_Str"" + ""String_Node_Str"");
  Platform.shutdown();
}",0.961783439490446
65335,"void createReport() throws SemanticException, IOException {
  SessionHandle session=new DesignEngine(new DesignConfig()).newSessionHandle((ULocale)null);
  reportDesignHandle=session.createDesign();
  elementFactory=reportDesignHandle.getElementFactory();
  createMasterPages();
  createDataSources();
  createDataSets();
  createBody();
  String outputPath=""String_Node_Str"";
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  reportDesignHandle.saveAs(outputPath + ""String_Node_Str"" + ""String_Node_Str"");
}","void createReport() throws SemanticException, IOException {
  SessionHandle session=getDesignEngine().newSessionHandle((ULocale)null);
  reportDesignHandle=session.createDesign();
  elementFactory=reportDesignHandle.getElementFactory();
  createMasterPages();
  createDataSources();
  createDataSets();
  createBody();
  String outputPath=""String_Node_Str"";
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  reportDesignHandle.saveAs(outputPath + ""String_Node_Str"" + ""String_Node_Str"");
  Platform.shutdown();
}",0.960655737704918
65336,"protected void processGroup(ListingDesign listing,int groupLevel,boolean breakBefore){
  GroupDesign group=listing.getGroup(groupLevel);
  PolicyNode parent=parentNode;
  visitReportItem(group,Boolean.TRUE);
  parentNode=currentNode;
  if (group.getPageBreakAfter() != null) {
    currentNode.breakAfter=true;
  }
  if (breakBefore || group.getPageBreakBefore() != null) {
    currentNode.breakBefore=true;
  }
  BandDesign header=group.getHeader();
  if (header != null) {
    header.accept(this,null);
  }
  if (++groupLevel < listing.getGroupCount()) {
    processGroup(listing,groupLevel,header != null);
    processGroup(listing,groupLevel,false);
  }
 else {
    processDetail(listing,true);
    processDetail(listing,false);
  }
  BandDesign footer=group.getFooter();
  if (footer != null) {
    footer.accept(this,Boolean.TRUE);
  }
  parentNode=parent;
}","protected void processGroup(ListingDesign listing,int groupLevel,boolean breakBefore){
  GroupDesign group=listing.getGroup(groupLevel);
  PolicyNode parent=parentNode;
  visitReportItem(group,Boolean.TRUE);
  parentNode=currentNode;
  if (group.getPageBreakAfter() != null) {
    currentNode.breakAfter=true;
  }
  if (breakBefore || group.getPageBreakBefore() != null) {
    currentNode.breakBefore=true;
  }
  BandDesign header=group.getHeader();
  if (header != null) {
    header.accept(this,null);
  }
  if (++groupLevel < listing.getGroupCount()) {
    processGroup(listing,groupLevel,header != null);
  }
 else {
    processDetail(listing,true);
    processDetail(listing,false);
  }
  BandDesign footer=group.getFooter();
  if (footer != null) {
    footer.accept(this,Boolean.TRUE);
  }
  parentNode=parent;
}",0.9738406658739596
65337,"protected PolicyNode findNextNode(PolicyNode node){
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  int count=node.parent.children.size();
  if (index < count - 1) {
    return (PolicyNode)node.parent.children.get(index + 1);
  }
 else {
    return findPreviousNode(node.parent);
  }
}","protected PolicyNode findNextNode(PolicyNode node){
  if (node.design instanceof GroupDesign)   return node;
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  int count=node.parent.children.size();
  if (index < count - 1) {
    return (PolicyNode)node.parent.children.get(index + 1);
  }
 else {
    return findNextNode(node.parent);
  }
}",0.9090909090909092
65338,"protected PolicyNode findPreviousNode(PolicyNode node){
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  if (index < 1) {
    return findPreviousNode(node.parent);
  }
 else {
    return (PolicyNode)node.parent.children.get(index - 1);
  }
}","protected PolicyNode findPreviousNode(PolicyNode node){
  if (node.design instanceof GroupDesign)   return node;
  if (node == null || node.parent == null) {
    return null;
  }
  int index=node.parent.children.indexOf(node);
  if (index < 1) {
    return findPreviousNode(node.parent);
  }
 else {
    return (PolicyNode)node.parent.children.get(index - 1);
  }
}",0.9153046062407132
65339,"@Override protected final Object getMinMax(Axis ax,int iType) throws ChartException, IllegalArgumentException {
  if (ax.getType().getValue() == AxisType.LINEAR && ax.isAligned() && azHelper != null) {
    double[] minmax=azHelper.getCachedMinMax(ax);
    if (minmax != null) {
      return minmax;
    }
  }
  ChartWithAxes cwa=getModel();
  final Series[] sea=ax.getRuntimeSeries();
  final int iSeriesCount=sea.length;
  Series se;
  DataSet ds=null;
  Object oV1, oV2, oMin=null, oMax=null;
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  boolean bAnyStacked=false;
  for (int i=0; i < iSeriesCount; i++) {
    if (sea[i].isStacked()) {
      if (sea[i].canBeStacked()) {
        bAnyStacked=true;
        continue;
      }
 else {
        throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sea[i]}));
      }
    }
    iDSP=ps.getDataSetProcessor(sea[i].getClass());
    ds=sea[i].getDataSet();
    if (ds instanceof NullDataSet && rtc.getSharedScale() != null) {
      oMin=rtc.getSharedScale().getScaleContext().getMin();
      oMax=rtc.getSharedScale().getScaleContext().getMax();
    }
 else {
      oV1=iDSP.getMinimum(ds);
      oV2=iDSP.getMaximum(ds);
      if ((iType & NUMERICAL) == NUMERICAL) {
        try {
          if (oV1 != null) {
            if (oMin == null) {
              oMin=oV1;
            }
 else {
              if (NumberUtil.isBigNumber(oV1)) {
                oMin=((BigNumber)oMin).min((BigNumber)oV1);
              }
 else {
                final double dV1=asDouble(oV1).doubleValue();
                if (Math.min(asDouble(oMin).doubleValue(),dV1) == dV1) {
                  oMin=oV1;
                }
              }
            }
          }
          if (oV2 != null) {
            if (oMax == null) {
              oMax=oV2;
            }
 else {
              if (NumberUtil.isBigNumber(oV2)) {
                oMax=((BigNumber)oMax).max((BigNumber)oV2);
              }
 else {
                final double dV2=asDouble(oV2).doubleValue();
                if (Math.max(asDouble(oMax).doubleValue(),dV2) == dV2) {
                  oMax=oV2;
                }
              }
            }
          }
        }
 catch (        ClassCastException ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
        }
      }
 else       if ((iType & DATE_TIME) == DATE_TIME) {
        try {
          if (oV1 != null) {
            if (oMin == null) {
              oMin=oV1;
            }
 else {
              final CDateTime cdtV1=asDateTime(oV1);
              final CDateTime cdtMin=asDateTime(oMin);
              if (cdtV1.before(cdtMin)) {
                oMin=cdtV1;
              }
            }
          }
          if (oV2 != null) {
            if (oMax == null) {
              oMax=oV2;
            }
 else {
              final CDateTime cdtV2=asDateTime(oV2);
              final CDateTime cdtMax=asDateTime(oMax);
              if (cdtV2.after(cdtMax)) {
                oMax=cdtV2;
              }
            }
          }
        }
 catch (        ClassCastException ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
        }
      }
    }
  }
  boolean isbignumber=false;
  BigDecimal bigDivisor=null;
  if (bAnyStacked || ax.isPercent()) {
    if (ax.getType().getValue() == AxisType.DATE_TIME) {
      throw new IllegalArgumentException(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""));
    }
    Object oValue;
    int iSeriesPerGroup;
    double dPercentMax=0, dPercentMin=0;
    double dAxisMin=Double.MAX_VALUE, dAxisMax=-Double.MAX_VALUE;
    List<StackGroup> alSeriesGroupsPerAxis=ssl.getStackGroups(ax);
    ArrayList<Series> alSeriesPerGroup;
    StackGroup sg;
    DataSetIterator[] dsi=new DataSetIterator[ssl.getSeriesCount(ax)];
    if (alSeriesGroupsPerAxis == null) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{ax},rtc.getULocale()));
    int iSeriesIndex, iDataSetCount=ssl.getUnitCount();
    for (int k=0; k < iDataSetCount; k++) {
      iSeriesIndex=0;
      for (int i=0; i < alSeriesGroupsPerAxis.size(); i++) {
        sg=alSeriesGroupsPerAxis.get(i);
        alSeriesPerGroup=sg.getSeries();
        iSeriesPerGroup=alSeriesPerGroup.size();
        if (iSeriesPerGroup > 0) {
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            ds=se.getDataSet();
            if (ds instanceof NullDataSet) {
              continue;
            }
 else {
              break;
            }
          }
          if (ds == null) {
            continue;
          }
          if (dsi[iSeriesIndex] == null) {
            dsi[iSeriesIndex]=new DataSetIterator(ds);
            dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
            if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
            }
          }
          iDataSetCount=dsi[iSeriesIndex].size();
          final AxisSubUnit au=ssl.getSubUnit(sg,k);
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            if (j > 0) {
              if (dsi[iSeriesIndex] == null) {
                ds=se.getDataSet();
                dsi[iSeriesIndex]=new DataSetIterator(ds);
                dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
                if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
                  throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
                }
              }
            }
            oValue=dsi[iSeriesIndex].next();
            if (oValue != null) {
              double dValue=((Number)oValue).doubleValue();
              au.computeTotal(dValue);
              if (NumberUtil.isBigNumber(oValue) && !isbignumber) {
                isbignumber=true;
                bigDivisor=((BigNumber)oValue).getDivisor();
              }
            }
            iSeriesIndex++;
          }
          if (ax.isPercent()) {
            double dAbsTotal=au.getPositiveTotal() - au.getNegativeTotal();
            if (dAbsTotal != 0d) {
              dPercentMax=Math.max((au.getTotalMax() / dAbsTotal) * 100d,dPercentMax);
              dPercentMin=Math.min((au.getTotalMin() / dAbsTotal) * 100d,dPercentMin);
            }
          }
 else {
            dAxisMax=Math.max(au.getTotalMax(),dAxisMax);
            dAxisMin=Math.min(au.getTotalMin(),dAxisMin);
          }
        }
      }
    }
    if (ax.isPercent()) {
      if (dPercentMax > 100)       dPercentMax=100;
      if (dPercentMin < -100)       dPercentMin=-100;
      if (dPercentMax == 0 && dPercentMin == 0) {
        dPercentMax=100;
      }
      dAxisMin=dPercentMin;
      dAxisMax=dPercentMax;
    }
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      dAxisMin=1;
    }
    if (dAxisMin != Double.MAX_VALUE && (oMin == null || Double.compare(dAxisMin,((Number)oMin).doubleValue()) < 0)) {
      if (isbignumber && !ax.isPercent()) {
        oMin=new BigNumber(BigDecimal.valueOf(dAxisMin).multiply(bigDivisor,NumberUtil.DEFAULT_MATHCONTEXT),bigDivisor);
      }
 else {
        oMin=new Double(dAxisMin);
      }
    }
    if (dAxisMax != -Double.MAX_VALUE && (oMax == null || Double.compare(dAxisMax,((Number)oMax).doubleValue()) > 0)) {
      if (isbignumber && !ax.isPercent()) {
        oMax=new BigNumber(BigDecimal.valueOf(dAxisMax).multiply(bigDivisor,NumberUtil.DEFAULT_MATHCONTEXT),bigDivisor);
      }
 else {
        oMax=new Double(dAxisMax);
      }
    }
  }
  if (oMin == null && oMax == null) {
    if (iType == DATE_TIME) {
      int year=Calendar.getInstance().get(Calendar.YEAR);
      oMin=new CDateTime(year,1,1);
      oMax=new CDateTime(year,12,31);
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      if ((iType & PERCENT) == PERCENT) {
        oMin=new Double(0);
        oMax=new Double(100);
      }
 else       if ((iType & LOGARITHMIC) == LOGARITHMIC) {
        oMin=new Double(1);
        oMax=new Double(1000);
      }
 else {
        oMin=new Double(-1);
        oMax=new Double(1);
      }
    }
  }
  if (iType == DATE_TIME) {
    try {
      CDateTime dtMin=asDateTime(oMin);
      CDateTime dtMax=asDateTime(oMax);
      return new Calendar[]{dtMin,dtMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    try {
      return adjustMinMax(oMin,oMax);
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  return null;
}","@Override protected final Object getMinMax(Axis ax,int iType) throws ChartException, IllegalArgumentException {
  if (ax.getType().getValue() == AxisType.LINEAR && ax.isAligned() && azHelper != null) {
    double[] minmax=azHelper.getCachedMinMax(ax);
    if (minmax != null) {
      return minmax;
    }
  }
  ChartWithAxes cwa=getModel();
  final Series[] sea=ax.getRuntimeSeries();
  final int iSeriesCount=sea.length;
  Series se;
  DataSet ds=null;
  Object oV1, oV2, oMin=null, oMax=null;
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  boolean bAnyStacked=false;
  for (int i=0; i < iSeriesCount; i++) {
    if (sea[i].isStacked()) {
      if (sea[i].canBeStacked()) {
        bAnyStacked=true;
        continue;
      }
 else {
        throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sea[i]}));
      }
    }
    iDSP=ps.getDataSetProcessor(sea[i].getClass());
    ds=sea[i].getDataSet();
    if (ds instanceof NullDataSet && rtc.getSharedScale() != null) {
      oMin=rtc.getSharedScale().getScaleContext().getMin();
      oMax=rtc.getSharedScale().getScaleContext().getMax();
    }
 else {
      oV1=iDSP.getMinimum(ds);
      oV2=iDSP.getMaximum(ds);
      if ((iType & NUMERICAL) == NUMERICAL) {
        try {
          if (oV1 != null) {
            if (oMin == null) {
              oMin=oV1;
            }
 else {
              if (NumberUtil.isBigNumber(oV1)) {
                oMin=((BigNumber)oMin).min((BigNumber)oV1);
              }
 else {
                final double dV1=asDouble(oV1).doubleValue();
                if (Math.min(asDouble(oMin).doubleValue(),dV1) == dV1) {
                  oMin=oV1;
                }
              }
            }
          }
          if (oV2 != null) {
            if (oMax == null) {
              oMax=oV2;
            }
 else {
              if (NumberUtil.isBigNumber(oV2)) {
                oMax=((BigNumber)oMax).max((BigNumber)oV2);
              }
 else {
                final double dV2=asDouble(oV2).doubleValue();
                if (Math.max(asDouble(oMax).doubleValue(),dV2) == dV2) {
                  oMax=oV2;
                }
              }
            }
          }
        }
 catch (        ClassCastException ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
        }
      }
 else       if ((iType & DATE_TIME) == DATE_TIME) {
        try {
          if (oV1 != null) {
            if (oMin == null) {
              oMin=oV1;
            }
 else {
              final CDateTime cdtV1=asDateTime(oV1);
              final CDateTime cdtMin=asDateTime(oMin);
              if (cdtV1.before(cdtMin)) {
                oMin=cdtV1;
              }
            }
          }
          if (oV2 != null) {
            if (oMax == null) {
              oMax=oV2;
            }
 else {
              final CDateTime cdtV2=asDateTime(oV2);
              final CDateTime cdtMax=asDateTime(oMax);
              if (cdtV2.after(cdtMax)) {
                oMax=cdtV2;
              }
            }
          }
        }
 catch (        ClassCastException ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
        }
      }
    }
  }
  boolean isbignumber=false;
  BigDecimal bigDivisor=null;
  if (bAnyStacked || ax.isPercent()) {
    if (ax.getType().getValue() == AxisType.DATE_TIME) {
      throw new IllegalArgumentException(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""));
    }
    Object oValue;
    int iSeriesPerGroup;
    double dPercentMax=0, dPercentMin=0;
    double dAxisMin=Double.MAX_VALUE, dAxisMax=-Double.MAX_VALUE;
    List<StackGroup> alSeriesGroupsPerAxis=ssl.getStackGroups(ax);
    ArrayList<Series> alSeriesPerGroup;
    StackGroup sg;
    DataSetIterator[] dsi=new DataSetIterator[ssl.getSeriesCount(ax)];
    if (alSeriesGroupsPerAxis == null) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{ax},rtc.getULocale()));
    int iSeriesIndex, iDataSetCount=ssl.getUnitCount();
    for (int k=0; k < iDataSetCount; k++) {
      iSeriesIndex=0;
      for (int i=0; i < alSeriesGroupsPerAxis.size(); i++) {
        sg=alSeriesGroupsPerAxis.get(i);
        alSeriesPerGroup=sg.getSeries();
        iSeriesPerGroup=alSeriesPerGroup.size();
        if (iSeriesPerGroup > 0) {
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            ds=se.getDataSet();
            if (ds instanceof NullDataSet) {
              ds=null;
              continue;
            }
 else {
              break;
            }
          }
          if (ds == null) {
            continue;
          }
          if (dsi[iSeriesIndex] == null) {
            dsi[iSeriesIndex]=new DataSetIterator(ds);
            dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
            if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
            }
          }
          iDataSetCount=dsi[iSeriesIndex].size();
          final AxisSubUnit au=ssl.getSubUnit(sg,k);
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            if (j > 0) {
              if (dsi[iSeriesIndex] == null) {
                ds=se.getDataSet();
                dsi[iSeriesIndex]=new DataSetIterator(ds);
                dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
                if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
                  throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
                }
              }
            }
            oValue=dsi[iSeriesIndex].next();
            if (oValue != null) {
              double dValue=((Number)oValue).doubleValue();
              au.computeTotal(dValue);
              if (NumberUtil.isBigNumber(oValue) && !isbignumber) {
                isbignumber=true;
                bigDivisor=((BigNumber)oValue).getDivisor();
              }
            }
            iSeriesIndex++;
          }
          if (ax.isPercent()) {
            double dAbsTotal=au.getPositiveTotal() - au.getNegativeTotal();
            if (dAbsTotal != 0d) {
              dPercentMax=Math.max((au.getTotalMax() / dAbsTotal) * 100d,dPercentMax);
              dPercentMin=Math.min((au.getTotalMin() / dAbsTotal) * 100d,dPercentMin);
            }
          }
 else {
            dAxisMax=Math.max(au.getTotalMax(),dAxisMax);
            dAxisMin=Math.min(au.getTotalMin(),dAxisMin);
          }
        }
      }
    }
    if (ax.isPercent()) {
      if (dPercentMax > 100)       dPercentMax=100;
      if (dPercentMin < -100)       dPercentMin=-100;
      if (dPercentMax == 0 && dPercentMin == 0) {
        dPercentMax=100;
      }
      dAxisMin=dPercentMin;
      dAxisMax=dPercentMax;
    }
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      dAxisMin=1;
    }
    if (dAxisMin != Double.MAX_VALUE && (oMin == null || Double.compare(dAxisMin,((Number)oMin).doubleValue()) < 0)) {
      if (isbignumber && !ax.isPercent()) {
        oMin=new BigNumber(BigDecimal.valueOf(dAxisMin).multiply(bigDivisor,NumberUtil.DEFAULT_MATHCONTEXT),bigDivisor);
      }
 else {
        oMin=new Double(dAxisMin);
      }
    }
    if (dAxisMax != -Double.MAX_VALUE && (oMax == null || Double.compare(dAxisMax,((Number)oMax).doubleValue()) > 0)) {
      if (isbignumber && !ax.isPercent()) {
        oMax=new BigNumber(BigDecimal.valueOf(dAxisMax).multiply(bigDivisor,NumberUtil.DEFAULT_MATHCONTEXT),bigDivisor);
      }
 else {
        oMax=new Double(dAxisMax);
      }
    }
  }
  if (oMin == null && oMax == null) {
    if (iType == DATE_TIME) {
      int year=Calendar.getInstance().get(Calendar.YEAR);
      oMin=new CDateTime(year,1,1);
      oMax=new CDateTime(year,12,31);
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      if ((iType & PERCENT) == PERCENT) {
        oMin=new Double(0);
        oMax=new Double(100);
      }
 else       if ((iType & LOGARITHMIC) == LOGARITHMIC) {
        oMin=new Double(1);
        oMax=new Double(1000);
      }
 else {
        oMin=new Double(-1);
        oMax=new Double(1);
      }
    }
  }
  if (iType == DATE_TIME) {
    try {
      CDateTime dtMin=asDateTime(oMin);
      CDateTime dtMax=asDateTime(oMax);
      return new Calendar[]{dtMin,dtMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    try {
      return adjustMinMax(oMin,oMax);
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  return null;
}",0.9987797761154438
65340,"protected ActionHandle getDefaultAction(ExtendedItemHandle handle,String expression){
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  String bindingname=exprCodec.getBindingName(expression);
  if (bindingname == null) {
    return null;
  }
  if (ChartReportItemHelper.instance().getBindingCubeHandle(handle) != null) {
    CubeHandle cube=handle.getCube();
    for (    LevelHandle lh : ChartCubeUtil.getAllLevels(cube)) {
      if (bindingname.equals(ChartCubeUtil.createLevelBindingName(lh))) {
        return lh.getActionHandle();
      }
    }
    for (    MeasureHandle mh : ChartCubeUtil.getAllMeasures(cube)) {
      if (bindingname.equals(ChartCubeUtil.createMeasureBindingName(mh))) {
        return mh.getActionHandle();
      }
    }
  }
 else   if (ChartReportItemHelper.instance().getBindingDataSetHandle(handle) != null) {
    DataSetHandle dataset=handle.getDataSet();
    for (Iterator<?> iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
      ColumnHintHandle element=(ColumnHintHandle)iter.next();
      if (element.getColumnName().equals(bindingname) || bindingname.equals(element.getAlias())) {
        return element.getActionHandle();
      }
    }
  }
  return null;
}","protected ActionHandle getDefaultAction(ExtendedItemHandle handle,String expression){
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  String bindingname=exprCodec.getBindingName(expression);
  if (bindingname == null) {
    return null;
  }
  CubeHandle cube=handle.getCube();
  DataSetHandle dataset=handle.getDataSet();
  if (cube != null && ChartReportItemHelper.instance().getBindingCubeHandle(handle) != null) {
    for (    LevelHandle lh : ChartCubeUtil.getAllLevels(cube)) {
      if (bindingname.equals(ChartCubeUtil.createLevelBindingName(lh))) {
        return lh.getActionHandle();
      }
    }
    for (    MeasureHandle mh : ChartCubeUtil.getAllMeasures(cube)) {
      if (bindingname.equals(ChartCubeUtil.createMeasureBindingName(mh))) {
        return mh.getActionHandle();
      }
    }
  }
 else   if (dataset != null && ChartReportItemHelper.instance().getBindingDataSetHandle(handle) != null) {
    for (Iterator<?> iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
      ColumnHintHandle element=(ColumnHintHandle)iter.next();
      if (element.getColumnName().equals(bindingname) || bindingname.equals(element.getAlias())) {
        return element.getActionHandle();
      }
    }
  }
  return null;
}",0.5397440868553703
65341,"public void handleSelection(String[] paths,String rootPath,boolean isRelative){
  ClassPathElement[] elements=createClassPathElements(paths,rootPath,isRelative);
  helper.addClassPathElements(elements);
  if (folderPage != null) {
    folderPage.updateWizardPageStatus();
    if (folderPage.isDefaultPathInitialized()) {
      TableViewer friendTableViewer=folderPage.getTabFriendClassTabFolderPage().getClassPathsTableViewer();
      IMenuButtonHelper friendHelper=new MenuButtonHelper(friendTableViewer);
      friendHelper.addClassPathElements(elements);
      folderPage.getTabFriendClassTabFolderPage().updateWizardPageStatus();
      folderPage.setDefaultPathInitialized();
      folderPage.getTabFriendClassTabFolderPage().setDefaultPathInitialized();
    }
  }
}","public void handleSelection(String[] paths,String rootPath,boolean isRelative){
  ClassPathElement[] elements=createClassPathElements(paths,rootPath,isRelative);
  helper.addClassPathElements(elements,true);
  if (folderPage != null) {
    folderPage.updateWizardPageStatus();
    if (folderPage.isDefaultPathInitialized()) {
      TableViewer friendTableViewer=folderPage.getTabFriendClassTabFolderPage().getClassPathsTableViewer();
      IMenuButtonHelper friendHelper=new MenuButtonHelper(friendTableViewer);
      friendHelper.addClassPathElements(elements,false);
      folderPage.getTabFriendClassTabFolderPage().updateWizardPageStatus();
      folderPage.setDefaultPathInitialized();
      folderPage.getTabFriendClassTabFolderPage().setDefaultPathInitialized();
    }
  }
}",0.9929078014184396
65342,public void addClassPathElements(ClassPathElement[] elements);,"public void addClassPathElements(ClassPathElement[] elements,boolean current);",0.8857142857142857
65343,"public void addClassPathElements(ClassPathElement[] items){
  updateTableElementsList(viewer);
  boolean containsDuplicated=false;
  for (int i=0; i < items.length; i++) {
    boolean exists=false;
    for (int j=0; j < elements.size(); j++) {
      if (elements.get(j).isRelativePath() == items[i].isRelativePath() && elements.get(j).getFullPath() != null && elements.get(j).getFullPath().equals(items[i].getFullPath())) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      this.elements.add(items[i]);
    }
 else {
      containsDuplicated=true;
    }
  }
  viewer.setInput(elements);
  viewer.refresh();
  if (containsDuplicated) {
    ExceptionHandler.openMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.ICON_ERROR);
  }
}","public void addClassPathElements(ClassPathElement[] items,boolean current){
  updateTableElementsList(viewer);
  boolean containsDuplicated=false;
  for (int i=0; i < items.length; i++) {
    boolean exists=false;
    for (int j=0; j < elements.size(); j++) {
      if (elements.get(j).isRelativePath() == items[i].isRelativePath() && elements.get(j).getFullPath() != null && elements.get(j).getFullPath().equals(items[i].getFullPath())) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      this.elements.add(items[i]);
    }
 else {
      containsDuplicated=true;
    }
  }
  viewer.setInput(elements);
  viewer.refresh();
  if (containsDuplicated && current) {
    ExceptionHandler.openMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.ICON_ERROR);
  }
}",0.98328173374613
65344,"public void initClassPathElements(String dataSetClassPath){
  if (elements == null)   elements=new ArrayList<ClassPathElement>();
  if (dataSetClassPath != null && dataSetClassPath.trim().length() > 0) {
    String paths[]=dataSetClassPath.split(PATH_SEPARATOR);
    ClassPathElement[] classPathElements=new ClassPathElement[paths.length];
    for (int i=0; i < paths.length; i++) {
      File file=new File(paths[i]);
      ClassPathElement element=new ClassPathElement(file.getName(),paths[i],!file.isAbsolute());
      this.elements.add(element);
      classPathElements[i]=element;
    }
    this.jarButton.getMenuButtonHelper().addClassPathElements(classPathElements);
  }
  classPathsTableViewer.setInput(elements);
  classPathsTableViewer.refresh();
  updateWizardPageStatus();
}","public void initClassPathElements(String dataSetClassPath){
  if (elements == null)   elements=new ArrayList<ClassPathElement>();
  if (dataSetClassPath != null && dataSetClassPath.trim().length() > 0) {
    String paths[]=dataSetClassPath.split(PATH_SEPARATOR);
    ClassPathElement[] classPathElements=new ClassPathElement[paths.length];
    for (int i=0; i < paths.length; i++) {
      File file=new File(paths[i]);
      ClassPathElement element=new ClassPathElement(file.getName(),paths[i],!file.isAbsolute());
      this.elements.add(element);
      classPathElements[i]=element;
    }
    this.jarButton.getMenuButtonHelper().addClassPathElements(classPathElements,true);
  }
  classPathsTableViewer.setInput(elements);
  classPathsTableViewer.refresh();
  updateWizardPageStatus();
}",0.9968294229549778
65345,"private boolean containsUnselectedItem(TreeItem[] items,boolean includeCurrent){
  for (int i=0; i < items.length; i++) {
    if (items[i].getData() instanceof FieldEntryWrapper) {
      return selectedFields.size() < allAvailableFields.size();
    }
    if (items[i].getData() instanceof FieldMetaData) {
      FieldMetaData field=(FieldMetaData)items[i].getData();
      if (!field.hasChildDocuments()) {
        return false;
      }
 else       if (!allChildrenSelected(field,includeCurrent)) {
        return true;
      }
    }
  }
  return false;
}","private boolean containsUnselectedItem(TreeItem[] items,boolean includeCurrent){
  for (int i=0; i < items.length; i++) {
    if (items[i].getData() instanceof FieldMetaData) {
      FieldMetaData field=(FieldMetaData)items[i].getData();
      if (includeCurrent) {
        if (field.hasChildDocuments()) {
          if (!allChildrenSelected(field,false)) {
            return true;
          }
        }
 else         if (!isSelectedField(field.getFullDisplayName())) {
          return true;
        }
      }
 else       if (field.hasChildDocuments() && !allChildrenSelected(field,includeCurrent)) {
        return true;
      }
    }
  }
  return false;
}",0.5551894563426688
65346,"private void updateOperationButtons(){
  if (availableFieldsViewer.getTree().isFocusControl()) {
    if (availableFieldsViewer.getTree().getSelectionCount() > 0 && (availableFieldsViewer.getTree().getSelection()[0].getData() instanceof FieldEntryWrapper)) {
      addBtn.setEnabled(false);
    }
 else {
      addBtn.setEnabled(availableFieldsViewer.getTree().getSelectionCount() > 0 && !containsSelectedField(availableFieldsViewer.getTree().getSelection()));
    }
    addAllBtn.setEnabled(selectedFields.size() < allAvailableFields.size() && containsUnselectedItem(availableFieldsViewer.getTree().getSelection(),false));
    removeBtn.setEnabled(false);
    upBtn.setEnabled(false);
    downBtn.setEnabled(false);
  }
 else   if (selectedFieldsTable.getTable().isFocusControl()) {
    addBtn.setEnabled(false);
    addAllBtn.setEnabled(false);
    removeBtn.setEnabled(selectedFieldsTable.getTable().getSelectionCount() > 0);
    if (selectedFieldsTable.getTable().getSelectionCount() == 1) {
      int index=selectedFieldsTable.getTable().getSelectionIndex();
      int count=selectedFieldsTable.getTable().getItemCount();
      upBtn.setEnabled(index > 0 && index < count);
      downBtn.setEnabled(index >= 0 && index < (count - 1));
    }
 else {
      upBtn.setEnabled(false);
      downBtn.setEnabled(false);
    }
  }
 else {
    addBtn.setEnabled(false);
    addAllBtn.setEnabled(false);
    removeBtn.setEnabled(false);
    upBtn.setEnabled(false);
    downBtn.setEnabled(false);
  }
  removeAllBtn.setEnabled(selectedFields.size() > 0);
}","private void updateOperationButtons(){
  if (availableFieldsViewer.getTree().isFocusControl()) {
    if (availableFieldsViewer.getTree().getSelectionCount() > 0 && (availableFieldsViewer.getTree().getSelection()[0].getData() instanceof FieldEntryWrapper)) {
      addBtn.setEnabled(false);
    }
 else {
      addBtn.setEnabled(availableFieldsViewer.getTree().getSelectionCount() > 0 && !containsSelectedField(availableFieldsViewer.getTree().getSelection()));
    }
    addAllBtn.setEnabled(selectedFields.size() < allAvailableFields.size() && containsUnselectedItem(availableFieldsViewer.getTree().getSelection()));
    removeBtn.setEnabled(false);
    upBtn.setEnabled(false);
    downBtn.setEnabled(false);
  }
 else   if (selectedFieldsTable.getTable().isFocusControl()) {
    addBtn.setEnabled(false);
    addAllBtn.setEnabled(false);
    removeBtn.setEnabled(selectedFieldsTable.getTable().getSelectionCount() > 0);
    if (selectedFieldsTable.getTable().getSelectionCount() == 1) {
      int index=selectedFieldsTable.getTable().getSelectionIndex();
      int count=selectedFieldsTable.getTable().getItemCount();
      upBtn.setEnabled(index > 0 && index < count);
      downBtn.setEnabled(index >= 0 && index < (count - 1));
    }
 else {
      upBtn.setEnabled(false);
      downBtn.setEnabled(false);
    }
  }
 else {
    addBtn.setEnabled(false);
    addAllBtn.setEnabled(false);
    removeBtn.setEnabled(false);
    upBtn.setEnabled(false);
    downBtn.setEnabled(false);
  }
  removeAllBtn.setEnabled(selectedFields.size() > 0);
}",0.9980607627666452
65347,"private void createTabFolderArea(Composite composite){
  Composite tabArea=new Composite(composite,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.marginWidth=10;
  tabArea.setLayout(layout);
  tabArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  tabFolder=new TabFolder(tabArea,SWT.TOP);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  runtimePage=new POJOClassTabFolderPage(this,getApplResourceDir());
  runtimePage.setPrompMessage(Messages.getString(""String_Node_Str""));
  TabItem runtimeTab=runtimePage.createContents(tabFolder);
  runtimeTab.setText(Messages.getString(""String_Node_Str""));
  runtimeTab.setImage(Utils.getRunTimeIcon());
  designtimePage=new POJOClassTabFolderPage(this,getApplResourceDir());
  designtimePage.setPrompMessage(Messages.getString(""String_Node_Str""));
  TabItem designTimeTab=designtimePage.createContents(tabFolder);
  designTimeTab.setText(Messages.getString(""String_Node_Str""));
  designTimeTab.setImage(Utils.getDesignTimeIcon());
  runtimePage.setFriendPage(designtimePage);
  designtimePage.setFriendPage(runtimePage);
  initControlValues();
}","private void createTabFolderArea(Composite composite){
  Composite tabArea=new Composite(composite,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.marginWidth=10;
  tabArea.setLayout(layout);
  tabArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  tabFolder=new TabFolder(tabArea,SWT.TOP);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  runtimePage=new POJOClassTabFolderPage(this,getApplResourceDir());
  runtimePage.setPrompMessage(Messages.getString(""String_Node_Str""));
  TabItem runtimeTab=runtimePage.createContents(tabFolder);
  runtimeTab.setText(Messages.getString(""String_Node_Str""));
  designtimePage=new POJOClassTabFolderPage(this,getApplResourceDir());
  designtimePage.setPrompMessage(Messages.getString(""String_Node_Str""));
  TabItem designTimeTab=designtimePage.createContents(tabFolder);
  designTimeTab.setText(Messages.getString(""String_Node_Str""));
  runtimePage.setFriendPage(designtimePage);
  designtimePage.setFriendPage(runtimePage);
  initControlValues();
}",0.9533582089552238
65348,"private void createExpressionButton(Composite composite,final Text property,String propName,boolean isEncryptable){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),handle,true,SWT.PUSH);
  if (isEncryptable) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}","private void createExpressionButton(Composite composite,final Text property,String propName,boolean isEncryptable){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),handle,SWT.PUSH);
  if (isEncryptable) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}",0.9965823650034176
65349,"/** 
 * Creates instance of default value chart according to specified chart type.
 * @param cm
 * @return chart instance with default values.
 */
public static Chart createDefaultValueChartInstance(Chart cm){
  Chart instance=getDefaultValueChart(cm).copyInstance();
  SeriesDefinition sd=ChartUtil.getOrthogonalSeriesDefinitions(instance,0).get(0);
  List<Series> seriesList=sd.getSeries();
  seriesList.clear();
  if (instance instanceof ChartWithAxes) {
    seriesList.add(DefaultValueProvider.defBarSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defBubbleSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defScatterSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defDifferenceSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defAreaSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defLineSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defGanttSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defStockSeries().copyInstance());
  }
 else {
    seriesList.add(DefaultValueProvider.defDialSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defPieSeries().copyInstance());
  }
  Set<String> seriesNameSet=new HashSet<String>();
  for (  Series s : seriesList) {
    seriesNameSet.add(s.getClass().getName());
  }
  Set<Series> dtSeries=new HashSet<Series>();
  for (  SeriesDefinition sdef : ChartUtil.getAllOrthogonalSeriesDefinitions(cm)) {
    dtSeries.add(sdef.getDesignTimeSeries());
  }
  for (Iterator<Series> iter=dtSeries.iterator(); iter.hasNext(); ) {
    Series s=iter.next();
    if (!seriesNameSet.contains(s.getClass().getName())) {
      seriesList.add(getDefaultSeries(s));
    }
  }
  instance.getTitle().getLabel().getCaption().setValue(ChartUtil.getDefaultChartTitle(cm));
  return instance;
}","/** 
 * Creates instance of default value chart according to specified chart type.
 * @param cm
 * @return chart instance with default values.
 */
public static Chart createDefaultValueChartInstance(Chart cm){
  Chart instance=getDefaultValueChart(cm).copyInstance();
  SeriesDefinition sd=ChartUtil.getOrthogonalSeriesDefinitions(instance,0).get(0);
  List<Series> seriesList=sd.getSeries();
  seriesList.clear();
  if (instance instanceof ChartWithAxes) {
    seriesList.add(DefaultValueProvider.defBarSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defBubbleSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defScatterSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defDifferenceSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defAreaSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defLineSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defGanttSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defStockSeries().copyInstance());
  }
 else {
    seriesList.add(DefaultValueProvider.defDialSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defPieSeries().copyInstance());
  }
  Set<String> seriesNameSet=new HashSet<String>();
  for (  Series s : seriesList) {
    seriesNameSet.add(s.getClass().getName());
  }
  Set<Series> dtSeries=new HashSet<Series>();
  for (  SeriesDefinition sdef : ChartUtil.getAllOrthogonalSeriesDefinitions(cm)) {
    for (    Series s : sdef.getSeries()) {
      dtSeries.add(s);
    }
  }
  for (Iterator<Series> iter=dtSeries.iterator(); iter.hasNext(); ) {
    Series s=iter.next();
    if (!seriesNameSet.contains(s.getClass().getName())) {
      seriesList.add(getDefaultSeries(s));
    }
  }
  instance.getTitle().getLabel().getCaption().setValue(ChartUtil.getDefaultChartTitle(cm));
  return instance;
}",0.798605524269241
65350,"/** 
 * @see GraphicalEditor#createPartControl(Composite)
 */
public void createPartControl(Composite parent){
}","/** 
 * @see GraphicalEditor#createPartControl(Composite)
 */
public void createPartControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.horizontalSpacing=0;
  layout.verticalSpacing=0;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fBreadcrumbComposite=new Composite(composite,SWT.NONE);
  GridData layoutData=new GridData(SWT.FILL,SWT.TOP,true,false);
  fBreadcrumbComposite.setLayoutData(layoutData);
  layout=new GridLayout(1,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.horizontalSpacing=0;
  layout.verticalSpacing=0;
  layoutData.exclude=true;
  fBreadcrumbComposite.setLayout(layout);
  splitter=new FlyoutPaletteComposite(composite,SWT.NONE,getSite().getPage(),getPaletteViewerProvider(),getPalettePreferences());
  super.createPartControl(splitter);
  splitter.setLayoutData(new GridData(GridData.FILL_BOTH));
  Control ctrl=getGraphicalControl();
  splitter.setGraphicalControl(ctrl);
  if (page != null) {
    splitter.setExternalViewer(page.getPaletteViewer());
    page=null;
  }
  fBreadcrumb=createBreadcrumb();
  fBreadcrumb.setMenuManager(new SchematicContextMenuProvider(getGraphicalViewer(),getActionRegistry()));
  fIsBreadcrumbVisible=isBreadcrumbShown();
  if (fIsBreadcrumbVisible)   showBreadcrumb();
  getPreferenceStore().addPropertyChangeListener(this);
  registerExtensionPreference(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_DESIGNER_BY_PREFERENCE);
  getSite().getShell().addShellListener(shellActiveListener);
  lastActiveShell=getSite().getShell();
  activateDesignerEditPart();
}",0.1226725082146768
65351,"public void createControl(Composite parent){
  helper=new DataSourceSelectionHelper();
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  setupDSChoiceListRadio(composite);
  setupConnectionProfileRadio(composite);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.horizontalSpan=2;
  dataSourceList=new ListViewer(composite,SWT.SINGLE | SWT.BORDER);
  dataSourceList.getControl().setLayoutData(layoutData);
  dataSourceList.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      return (Object[])inputElement;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  dataSourceList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      String displayName=null;
      if (element instanceof ExtensionManifest) {
        ExtensionManifest config=(ExtensionManifest)element;
        DataSetProvider.findDataSourceElement(config.getExtensionID());
        displayName=config.getDataSourceDisplayName();
      }
 else {
        displayName=element.toString();
      }
      return displayName;
    }
  }
);
  dataSourceList.setInput(helper.getFilteredDataSourceArray());
  dataSourceList.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      validateDataSourceName();
      prevSelectedDataSourceType=getSelectedDataSource();
      validateDataSourceHandle(prevSelectedDataSourceType);
      setPageComplete(!helper.hasNextPage(prevSelectedDataSourceType) && getMessageType() != ERROR);
    }
  }
);
  dataSourceList.setSorter(new ViewerSorter());
  dataSourceNameLabel=new Label(composite,SWT.NONE);
  dataSourceNameLabel.setText(Messages.getString(""String_Node_Str""));
  dataSourceName=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SOURCE_ELEMENT);
  if (name != null) {
    dataSourceName.setText(Utility.getUniqueDataSourceName(name));
  }
 else {
    dataSourceName.setText(Utility.getUniqueDataSourceName(Messages.getString(""String_Node_Str"")));
  }
  dsName=dataSourceName.getText().trim();
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  dataSourceName.setLayoutData(layoutData);
  dataSourceName.setToolTipText(EMPTY_NAME);
  dataSourceName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateDataSourceName();
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_NEW);
}","public void createControl(Composite parent){
  helper=new DataSourceSelectionHelper();
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setMinWidth(500);
  scrollContent.setMinHeight(300);
  scrollContent.setLayout(new FillLayout());
  scrollContent.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite composite=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(gd);
  setupDSChoiceListRadio(composite);
  setupConnectionProfileRadio(composite);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.horizontalSpan=2;
  dataSourceList=new ListViewer(composite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL);
  dataSourceList.getList().setLayoutData(layoutData);
  dataSourceList.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      return (Object[])inputElement;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  dataSourceList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      String displayName=null;
      if (element instanceof ExtensionManifest) {
        ExtensionManifest config=(ExtensionManifest)element;
        DataSetProvider.findDataSourceElement(config.getExtensionID());
        displayName=config.getDataSourceDisplayName();
      }
 else {
        displayName=element.toString();
      }
      return displayName;
    }
  }
);
  dataSourceList.setInput(helper.getFilteredDataSourceArray());
  dataSourceList.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      validateDataSourceName();
      prevSelectedDataSourceType=getSelectedDataSource();
      validateDataSourceHandle(prevSelectedDataSourceType);
      setPageComplete(!helper.hasNextPage(prevSelectedDataSourceType) && getMessageType() != ERROR);
    }
  }
);
  dataSourceList.setSorter(new ViewerSorter());
  dataSourceNameLabel=new Label(composite,SWT.NONE);
  dataSourceNameLabel.setText(Messages.getString(""String_Node_Str""));
  dataSourceName=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SOURCE_ELEMENT);
  if (name != null) {
    dataSourceName.setText(Utility.getUniqueDataSourceName(name));
  }
 else {
    dataSourceName.setText(Utility.getUniqueDataSourceName(Messages.getString(""String_Node_Str"")));
  }
  dsName=dataSourceName.getText().trim();
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  dataSourceName.setLayoutData(layoutData);
  dataSourceName.setToolTipText(EMPTY_NAME);
  dataSourceName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateDataSourceName();
    }
  }
);
  setControl(scrollContent);
  dataSourceName.setFocus();
  Point size=composite.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  composite.setSize(size);
  scrollContent.setContent(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_NEW);
}",0.799869515576578
65352,"private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=null;
  if (upperCell != null) {
    emptyCell=upperCell.cloneArea();
  }
 else {
    emptyCell=new CellArea();
    emptyCell.content=cellContent;
  }
  BoxStyle bs=emptyCell.getBoxStyle();
  if (bs == BoxStyle.DEFAULT)   bs=new BoxStyle(BoxStyle.DEFAULT);
  bs.setRightBorder(null);
  bs.setBottomBorder(null);
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea originalCell=upperCell;
  if (upperCell instanceof DummyCell) {
    originalCell=((DummyCell)upperCell).getCell();
  }
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}","private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=null;
  if (upperCell != null) {
    emptyCell=upperCell.cloneArea();
  }
 else {
    emptyCell=new CellArea();
    emptyCell.content=cellContent;
  }
  BoxStyle bs=emptyCell.getBoxStyle();
  if (bs != BoxStyle.DEFAULT) {
    bs.setRightBorder(null);
    bs.setBottomBorder(null);
  }
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea originalCell=upperCell;
  if (upperCell instanceof DummyCell) {
    originalCell=((DummyCell)upperCell).getCell();
  }
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}",0.9872229465449804
65353,"private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=null;
  if (upperCell != null) {
    emptyCell=upperCell.cloneArea();
  }
 else {
    emptyCell=new CellArea();
    emptyCell.content=cellContent;
  }
  BoxStyle bs=emptyCell.getBoxStyle();
  if (bs == BoxStyle.DEFAULT)   bs=new BoxStyle(BoxStyle.DEFAULT);
  bs.setRightBorder(null);
  bs.setBottomBorder(null);
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea originalCell=upperCell;
  if (upperCell instanceof DummyCell) {
    originalCell=((DummyCell)upperCell).getCell();
  }
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}","private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=null;
  if (upperCell != null) {
    emptyCell=upperCell.cloneArea();
  }
 else {
    emptyCell=new CellArea();
    emptyCell.content=cellContent;
  }
  BoxStyle bs=emptyCell.getBoxStyle();
  if (bs != BoxStyle.DEFAULT) {
    bs.setRightBorder(null);
    bs.setBottomBorder(null);
  }
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea originalCell=upperCell;
  if (upperCell instanceof DummyCell) {
    originalCell=((DummyCell)upperCell).getCell();
  }
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}",0.9872229465449804
65354,"protected void initAccessible(){
  getAccessible().removeAccessibleListener(accessibleListener);
  getAccessible().addAccessibleListener(accessibleListener);
  getAccessible().removeAccessibleControlListener(accessibleControlListener);
  getAccessible().addAccessibleControlListener(accessibleControlListener);
}","protected void initAccessible(){
  getAccessible().removeAccessibleListener(accessibleListener);
  getAccessible().addAccessibleListener(accessibleListener);
  try {
    getAccessible().removeAccessibleControlListener(accessibleControlListener);
  }
 catch (  NullPointerException e) {
  }
  getAccessible().addAccessibleControlListener(accessibleControlListener);
}",0.9203539823008848
65355,"public String paintBullet(int ordinal){
  StringBuffer buffer=new StringBuffer();
switch (type) {
case LIST_DISC_VALUE:
    buffer.append(DISC_CHAR);
  break;
case LIST_STYLE_CIRCLE:
buffer.append(CIRCLE_CHAR);
break;
case LIST_STYLE_SQUARE:
buffer.append(SQUARE_CHAR);
break;
case LIST_STYLE_DECIMALLEADINGZERO:
decimalLeadingZeroToText(ordinal,buffer);
break;
case LIST_STYLE_LOWERROMAN:
romanToText(ordinal,buffer,LOWER_ROMAN_CHARSA,LOWER_ROMAN_CHARSB);
break;
case LIST_STYLE_UPPERROMAN:
romanToText(ordinal,buffer,UPPER_ROMAN_CHARSA,UPPER_ROMAN_CHARSB);
break;
case LIST_STYLE_LOWERGREEK:
charListToText(ordinal,buffer,LOWER_GREEK_CHARS,LOWER_GREEK_CHARS_SIZE);
break;
case LIST_STYLE_UPPERLATIN:
case LIST_STYLE_UPPERALPHA:
charListToText(ordinal,buffer,UPPER_ALPHA_CHARS,ALPHA_SIZE);
break;
case LIST_STYLE_LOWERLATIN:
case LIST_STYLE_LOWERALPHA:
charListToText(ordinal,buffer,LOWER_ALPHA_CHARS,ALPHA_SIZE);
break;
case LIST_STYLE_ARMENIAN:
armenianToText(ordinal,buffer);
break;
case LIST_STYLE_GEORGIAN:
georgianToText(ordinal,buffer);
break;
case LIST_STYLE_NONE:
case LIST_STYLE_INHERIT:
default :
buffer.append(EMPTYSTRING);
break;
}
return buffer.toString();
}","public String paintBullet(int ordinal){
  StringBuffer buffer=new StringBuffer();
switch (type) {
case LIST_DISC_VALUE:
    buffer.append(DISC_CHAR);
  break;
case LIST_STYLE_CIRCLE:
buffer.append(CIRCLE_CHAR);
break;
case LIST_STYLE_SQUARE:
buffer.append(SQUARE_CHAR);
break;
case LIST_STYLE_DECIMALLEADINGZERO:
decimalLeadingZeroToText(ordinal,buffer);
break;
case LIST_STYLE_LOWERROMAN:
romanToText(ordinal,buffer,LOWER_ROMAN_CHARSA,LOWER_ROMAN_CHARSB);
break;
case LIST_STYLE_UPPERROMAN:
romanToText(ordinal,buffer,UPPER_ROMAN_CHARSA,UPPER_ROMAN_CHARSB);
break;
case LIST_STYLE_LOWERGREEK:
charListToText(ordinal,buffer,LOWER_GREEK_CHARS,LOWER_GREEK_CHARS_SIZE);
break;
case LIST_STYLE_UPPERLATIN:
case LIST_STYLE_UPPERALPHA:
charListToText(ordinal,buffer,UPPER_ALPHA_CHARS,ALPHA_SIZE);
break;
case LIST_STYLE_LOWERLATIN:
case LIST_STYLE_LOWERALPHA:
charListToText(ordinal,buffer,LOWER_ALPHA_CHARS,ALPHA_SIZE);
break;
case LIST_STYLE_ARMENIAN:
armenianToText(ordinal,buffer);
break;
case LIST_STYLE_GEORGIAN:
georgianToText(ordinal,buffer);
break;
case LIST_STYLE_DECIMAL:
decimalToText(ordinal,buffer);
break;
case LIST_STYLE_NONE:
case LIST_STYLE_INHERIT:
default :
buffer.append(EMPTYSTRING);
break;
}
return buffer.toString();
}",0.9738480697384808
65356,"static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    Object value=cssStyles.get(ele.getParentNode()).getProperty(LIST_STYLE_TYPE);
    String styleType=""String_Node_Str"";
    if (value != null)     styleType=value.toString();
    BulletFrame frame=new BulletFrame(styleType);
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(frame.paintBullet(index) + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(frame.paintBullet(index));
      if (""String_Node_Str"".equals(text.getText())) {
        text.setText(""String_Node_Str"");
      }
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}","static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    Object value=cssStyles.get(ele.getParentNode()).getProperty(LIST_STYLE_TYPE);
    String styleType=""String_Node_Str"";
    if (value != null)     styleType=value.toString();
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      if (""String_Node_Str"".equals(styleType))       styleType=BulletFrame.CSS_LISTSTYLETYPE_DECIMAL;
      BulletFrame frame=new BulletFrame(styleType);
      text.setText(frame.paintBullet(index) + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      BulletFrame frame=new BulletFrame(styleType);
      text.setText(frame.paintBullet(index));
      if (""String_Node_Str"".equals(text.getText())) {
        text.setText(""String_Node_Str"");
      }
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}",0.9770114942528736
65357,"public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  UnsupportedOperationException e1) {
    try {
      InputStream inputStream=rs.getBinaryStream(index);
      return new Blob(SqlBlobUtil.newBlob(inputStream));
    }
 catch (    SQLException e2) {
      logger.log(Level.WARNING,e2.getLocalizedMessage());
      return null;
    }
  }
catch (  SQLException e) {
    try {
      byte[] bytes=rs.getBytes(index);
      if (bytes == null)       return null;
      return new Blob(SqlBlobUtil.newBlob(new ByteArrayInputStream(bytes)));
    }
 catch (    SQLException e2) {
      try {
        Object value=rs.getObject(index);
        if (value instanceof IBlob)         return (IBlob)value;
      }
 catch (      SQLException ex) {
      }
      logger.log(Level.WARNING,e.getLocalizedMessage());
      return null;
    }
  }
}","public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  Exception e) {
    Exception e1=null;
    if (e.getClass().getName().equals(""String_Node_Str"")) {
      Class cls=e.getClass();
      Method meth=null;
      try {
        meth=cls.getMethod(""String_Node_Str"",null);
        e1=(Exception)meth.invoke(e,null);
      }
 catch (      Exception e2) {
      }
      logger.log(Level.WARNING,e.getLocalizedMessage());
      return null;
    }
 else {
      e1=e;
    }
    if (e1 instanceof UnsupportedOperationException) {
      try {
        InputStream inputStream=rs.getBinaryStream(index);
        return new Blob(SqlBlobUtil.newBlob(inputStream));
      }
 catch (      SQLException e2) {
        logger.log(Level.WARNING,e2.getLocalizedMessage());
        return null;
      }
    }
 else     if (e1 instanceof SQLException) {
      try {
        byte[] bytes=rs.getBytes(index);
        if (bytes == null)         return null;
        return new Blob(SqlBlobUtil.newBlob(new ByteArrayInputStream(bytes)));
      }
 catch (      SQLException e2) {
        try {
          Object value=rs.getObject(index);
          if (value instanceof IBlob)           return (IBlob)value;
        }
 catch (        SQLException ex) {
        }
        logger.log(Level.WARNING,e.getLocalizedMessage());
        return null;
      }
    }
  }
  return null;
}",0.3141666666666666
65358,"/** 
 * Finds the DataSetViewData instance according to the given column name
 * @param columnName
 * @param handle
 * @return
 */
private DataSetViewData findDataSetViewData(String columnName,DataSetHandle handle){
  if (columnName == null || columnName.trim().length() == 0) {
    return null;
  }
  try {
    DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(handle,false,true,true);
    for (int i=0; i < items.length; i++) {
      if (columnName.equals(items[i].getName())) {
        return items[i];
      }
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
  return null;
}","/** 
 * Finds the DataSetViewData instance according to the given column name
 * @param columnName
 * @param handle
 * @return
 */
private DataSetViewData findDataSetViewData(String columnName,DataSetHandle handle){
  if (columnName == null || columnName.trim().length() == 0) {
    return null;
  }
  try {
    DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(handle,false,true);
    for (int i=0; i < items.length; i++) {
      if (columnName.equals(items[i].getName())) {
        return items[i];
      }
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
  return null;
}",0.9960411718131432
65359,"protected IStatus validateSyntax(Object structureOrHandle){
  try {
    if (!isUniqueColumnName())     return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    if (isBlankProperty(txtColumnName.getText()))     return getBlankPropertyStatus(dialogLabels[COLUMN_NAME_INDEX]);
    if (isBlankProperty(cmbDataType.getText()))     return getBlankPropertyStatus(dialogLabels[DATA_TYPE_INDEX]);
    if (isNumeric(txtColumnName.getText())) {
      return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
    IAggrFunction aggrFunc=getSelectedFunction();
    if (aggrFunc != null) {
      IParameterDefn[] paramDefns=aggrFunc.getParameterDefn();
      for (int i=0; i < paramDefns.length; i++) {
        if (!paramDefns[i].isOptional() && isBlankProperty(txtParams[i].getText())) {
          return getBlankPropertyStatus(paramDefns[i].getDisplayName());
        }
      }
    }
 else     if (txtParams != null && isBlankProperty(txtParams[0].getText())) {
      return getBlankPropertyStatus(dialogLabels[EXPRESSION_INDEX]);
    }
    if (cmbAggregation != null && cmbAggregation.getText().trim().length() > 0 && !checkExpressionBindingFields()) {
      return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
  return getOKStatus();
}","protected IStatus validateSyntax(Object structureOrHandle){
  try {
    if (!isUniqueColumnName())     return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    if (isBlankProperty(txtColumnName.getText()))     return getBlankPropertyStatus(dialogLabels[COLUMN_NAME_INDEX]);
    if (isBlankProperty(cmbDataType.getText()))     return getBlankPropertyStatus(dialogLabels[DATA_TYPE_INDEX]);
    if (isNumeric(txtColumnName.getText())) {
      return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
    IAggrFunction aggrFunc=getSelectedFunction();
    if (aggrFunc != null) {
      IParameterDefn[] paramDefns=aggrFunc.getParameterDefn();
      for (int i=0; i < paramDefns.length; i++) {
        if (!paramDefns[i].isOptional() && isBlankProperty(txtParams[i].getText())) {
          return getBlankPropertyStatus(paramDefns[i].getDisplayName());
        }
      }
    }
 else     if (txtParams != null && isBlankProperty(txtParams[0].getText())) {
      return getBlankPropertyStatus(dialogLabels[EXPRESSION_INDEX]);
    }
    if (cmbAggregation != null && cmbAggregation.getText().trim().length() > 0 && !checkExpressionBindingFields()) {
      return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
  return getOKStatus();
}",0.9817251461988304
65360,"/** 
 * @return
 * @throws BirtException 
 */
private final boolean isUniqueColumnName() throws BirtException {
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),true,true,true);
  for (int i=0; i < items.length; i++) {
    if (!items[i].getName().equals(columnName)) {
      if (!items[i].isComputedColumn()) {
        if ((items[i].getAlias() != null && items[i].getAlias().equals(txtColumnName.getText())) || (items[i].getName() != null && items[i].getName().equals(txtColumnName.getText()))) {
          return false;
        }
      }
    }
  }
  Iterator iter=computedColumns.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ComputedColumnHandle handle=(ComputedColumnHandle)iter.next();
      if (getStructure(getStructureOrHandle()) != handle.getStructure() && handle.getName().equals(txtColumnName.getText())) {
        return false;
      }
    }
  }
  Iterator iter2=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter2.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter2.next();
    if (!hint.getColumnName().equals(columnName)) {
      if (txtColumnName.getText().equals(hint.getAlias()) || txtColumnName.getText().equals(hint.getColumnName())) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * @return
 * @throws BirtException 
 */
private final boolean isUniqueColumnName() throws BirtException {
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),true);
  for (int i=0; i < items.length; i++) {
    if (!items[i].getName().equals(columnName)) {
      if (!items[i].isComputedColumn()) {
        if ((items[i].getAlias() != null && items[i].getAlias().equals(txtColumnName.getText())) || (items[i].getName() != null && items[i].getName().equals(txtColumnName.getText()))) {
          return false;
        }
      }
    }
  }
  Iterator iter=computedColumns.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ComputedColumnHandle handle=(ComputedColumnHandle)iter.next();
      if (getStructure(getStructureOrHandle()) != handle.getStructure() && handle.getName().equals(txtColumnName.getText())) {
        return false;
      }
    }
  }
  Iterator iter2=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter2.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter2.next();
    if (!hint.getColumnName().equals(columnName)) {
      if (txtColumnName.getText().equals(hint.getAlias()) || txtColumnName.getText().equals(hint.getColumnName())) {
        return false;
      }
    }
  }
  return true;
}",0.9963715529753264
65361,"/** 
 * Refresh columns meta data
 * @throws BirtException 
 */
private void refreshColumnNames() throws BirtException {
  ((DataSetEditor)this.getContainer()).getCurrentItemModel(true,true);
}","/** 
 * Refresh columns meta data
 * @throws BirtException 
 */
private void refreshColumnNames() throws BirtException {
  ((DataSetEditor)this.getContainer()).getCurrentItemModel(true);
}",0.9868766404199476
65362,"/** 
 * Update the computed columns after adding a new column and cache the updated DataSetViewData[]
 */
private void updateComputedColumns(ComputedColumn handle){
  try {
    DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
    int count=items.length;
    DataSetViewData[] newItems=new DataSetViewData[count + 1];
    System.arraycopy(items,0,newItems,0,count);
    newItems[count]=new DataSetViewData();
    newItems[count].setName(handle.getName());
    newItems[count].setDataTypeName(handle.getDataType());
    newItems[count].setAlias(handle.getDisplayName());
    newItems[count].setComputedColumn(true);
    newItems[count].setPosition(count + 1);
    newItems[count].setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
    DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,newItems);
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}","/** 
 * Update the computed columns after adding a new column and cache the updated DataSetViewData[]
 */
private void updateComputedColumns(ComputedColumn handle){
  try {
    DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true);
    int count=items.length;
    DataSetViewData[] newItems=new DataSetViewData[count + 1];
    System.arraycopy(items,0,newItems,0,count);
    newItems[count]=new DataSetViewData();
    newItems[count].setName(handle.getName());
    newItems[count].setDataTypeName(handle.getDataType());
    newItems[count].setAlias(handle.getDisplayName());
    newItems[count].setComputedColumn(true);
    newItems[count].setPosition(count + 1);
    newItems[count].setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
    DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,newItems);
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}",0.9975786924939468
65363,"/** 
 * Update the computed columns after removing an established one and cache the updated DataSetViewData[]
 */
private void updateColumnsOfDataSetHandle(){
  DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
  DataSetViewData[] items;
  try {
    items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
    int inexistence=0;
    for (int i=0; i < items.length; i++) {
      boolean exist=false;
      if (items[i].isComputedColumn()) {
        Iterator iter=computedColumns.iterator();
        while (iter.hasNext()) {
          ComputedColumn computedColumn=null;
          Object obj=iter.next();
          if (obj instanceof ComputedColumnHandle) {
            computedColumn=(ComputedColumn)((ComputedColumnHandle)obj).getStructure();
          }
          if (computedColumn != null && items[i].getName().equals(computedColumn.getName())) {
            exist=true;
          }
        }
        if (!exist) {
          items[i]=null;
          inexistence++;
        }
      }
    }
    if (inexistence == 0)     return;
    DataSetViewData[] existItems=new DataSetViewData[items.length - inexistence];
    int index=0;
    for (int i=0; i < items.length; i++) {
      if (items[i] != null) {
        existItems[index]=items[i];
        index++;
      }
    }
    DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,existItems);
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}","/** 
 * Update the computed columns after removing an established one and cache the updated DataSetViewData[]
 */
private void updateColumnsOfDataSetHandle(){
  DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
  DataSetViewData[] items;
  try {
    items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true);
    int inexistence=0;
    for (int i=0; i < items.length; i++) {
      boolean exist=false;
      if (items[i].isComputedColumn()) {
        Iterator iter=computedColumns.iterator();
        while (iter.hasNext()) {
          ComputedColumn computedColumn=null;
          Object obj=iter.next();
          if (obj instanceof ComputedColumnHandle) {
            computedColumn=(ComputedColumn)((ComputedColumnHandle)obj).getStructure();
          }
          if (computedColumn != null && items[i].getName().equals(computedColumn.getName())) {
            exist=true;
          }
        }
        if (!exist) {
          items[i]=null;
          inexistence++;
        }
      }
    }
    if (inexistence == 0)     return;
    DataSetViewData[] existItems=new DataSetViewData[items.length - inexistence];
    int index=0;
    for (int i=0; i < items.length; i++) {
      if (items[i] != null) {
        existItems[index]=items[i];
        index++;
      }
    }
    DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,existItems);
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}",0.9983056590986108
65364,"/** 
 * Gets all columns items from dataset list
 * @param useColumnHint
 * @param suppressErrorMessage
 * @return DataSetItemModel[]
 * @throws BirtException 
 */
public DataSetViewData[] getCurrentItemModel(boolean useColumnHint,boolean suppressErrorMessage) throws BirtException {
  DataSetViewData[] dataSetItem=DataSetProvider.getCurrentInstance().getColumns(ds,itemModelChanged,useColumnHint,suppressErrorMessage);
  itemModelChanged=false;
  linkedParameterChanged=false;
  return dataSetItem;
}","/** 
 * Gets all columns items from dataset list
 * @param useColumnHint
 * @param suppressErrorMessage
 * @return DataSetItemModel[]
 * @throws BirtException 
 */
public DataSetViewData[] getCurrentItemModel(boolean useColumnHint) throws BirtException {
  DataSetViewData[] dataSetItem=DataSetProvider.getCurrentInstance().getColumns(ds,itemModelChanged,useColumnHint);
  itemModelChanged=false;
  linkedParameterChanged=false;
  return dataSetItem;
}",0.9475890985324948
65365,"private void initColumnNames(){
  try {
    columns=((DataSetEditor)this.getContainer()).getCurrentItemModel(true,true);
    if (columns != null) {
      columnExpressions=new String[columns.length];
      for (int n=0; n < columns.length; n++) {
        columnExpressions[n]=columns[n].getName();
      }
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}","private void initColumnNames(){
  try {
    columns=((DataSetEditor)this.getContainer()).getCurrentItemModel(true);
    if (columns != null) {
      columnExpressions=new String[columns.length];
      for (int n=0; n < columns.length; n++) {
        columnExpressions[n]=columns[n].getName();
      }
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}",0.9090909090909092
65366,"/** 
 * The alias name is unique or not
 * @param newValue
 * @return
 */
protected boolean isUnique(String newValue,DataSetViewData currentItem){
  DataSetViewData[] items=null;
  try {
    if (viewer == null || viewer.getViewer() == null) {
      items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true,true);
    }
 else {
      items=(DataSetViewData[])viewer.getViewer().getInput();
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
  for (int i=0; i < items.length; i++) {
    if (items[i].getName() != null && items[i].getName().equals(currentItem.getName())) {
      continue;
    }
    if ((items[i].getAlias() != null && items[i].getAlias().equals(newValue)) || (items[i].getName() != null && items[i].getName().equals(newValue))) {
      return false;
    }
  }
  return true;
}","/** 
 * The alias name is unique or not
 * @param newValue
 * @return
 */
protected boolean isUnique(String newValue,DataSetViewData currentItem){
  DataSetViewData[] items=null;
  try {
    if (viewer == null || viewer.getViewer() == null) {
      items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true);
    }
 else {
      items=(DataSetViewData[])viewer.getViewer().getInput();
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
  for (int i=0; i < items.length; i++) {
    if (items[i].getName() != null && items[i].getName().equals(currentItem.getName())) {
      continue;
    }
    if ((items[i].getAlias() != null && items[i].getAlias().equals(newValue)) || (items[i].getName() != null && items[i].getName().equals(newValue))) {
      return false;
    }
  }
  return true;
}",0.9971313826735514
65367,"/** 
 * populate output columns
 * @throws BirtException
 */
protected void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateDefaultPropertyValues(viewDatas);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateDefaultPropertyValues(viewDatas);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}","/** 
 * populate output columns
 * @throws BirtException
 */
protected void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateDefaultPropertyValues(viewDatas);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateDefaultPropertyValues(viewDatas);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}",0.9983268265476856
65368,"/** 
 * validates that the new name/alias from a column hint or a new custom column doesn't conflict with existing column names or aliases
 */
private boolean isValid(){
  boolean validate=true;
  String newColumnNameOrAlias;
  DataSetViewData[] items=null;
  if (viewer == null || viewer.getViewer() == null) {
    try {
      items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true,true);
    }
 catch (    Exception e) {
      DataSetExceptionHandler.handle(e);
    }
  }
 else {
    items=(DataSetViewData[])viewer.getViewer().getInput();
  }
  for (int i=0; items != null && i < items.length && validate; i++) {
    newColumnNameOrAlias=items[i].getAlias();
    if (newColumnNameOrAlias != null && newColumnNameOrAlias.length() > 0) {
      for (int n=0; n < items.length; n++) {
        if (i == n)         continue;
        if ((items[n].getName() != null && items[n].getName().equals(newColumnNameOrAlias)) || (items[n].getAlias() != null && items[n].getAlias().equals(newColumnNameOrAlias))) {
          validate=false;
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{newColumnNameOrAlias,Integer.valueOf(n + 1)}),IMessageProvider.ERROR);
          break;
        }
      }
    }
  }
  return validate;
}","/** 
 * validates that the new name/alias from a column hint or a new custom column doesn't conflict with existing column names or aliases
 */
private boolean isValid(){
  boolean validate=true;
  String newColumnNameOrAlias;
  DataSetViewData[] items=null;
  if (viewer == null || viewer.getViewer() == null) {
    try {
      items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true);
    }
 catch (    Exception e) {
      DataSetExceptionHandler.handle(e);
    }
  }
 else {
    items=(DataSetViewData[])viewer.getViewer().getInput();
  }
  for (int i=0; items != null && i < items.length && validate; i++) {
    newColumnNameOrAlias=items[i].getAlias();
    if (newColumnNameOrAlias != null && newColumnNameOrAlias.length() > 0) {
      for (int n=0; n < items.length; n++) {
        if (i == n)         continue;
        if ((items[n].getName() != null && items[n].getName().equals(newColumnNameOrAlias)) || (items[n].getAlias() != null && items[n].getAlias().equals(newColumnNameOrAlias))) {
          validate=false;
          getContainer().setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{newColumnNameOrAlias,Integer.valueOf(n + 1)}),IMessageProvider.ERROR);
          break;
        }
      }
    }
  }
  return validate;
}",0.9980923311713088
65369,"/** 
 * @param dataSet
 * @param refresh
 * @param useColumnHints Only applicable if the list is refreshed.
 * @return
 * @throws BirtException 
 */
public DataSetViewData[] getColumns(DataSetHandle dataSet,boolean refresh,boolean useColumnHints,boolean suppressErrorMessage) throws BirtException {
  if (dataSet == null) {
    return new DataSetViewData[0];
  }
  DataSetViewData[] columns=null;
  DataRequestSession session=null;
  try {
    columns=htColumns.get(dataSet);
    if (columns == null || refresh) {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
      session=DataRequestSession.newSession(context);
      columns=this.populateAllOutputColumns(dataSet,session);
      htColumns.put(dataSet,columns);
    }
  }
 catch (  BirtException e) {
    if (!suppressErrorMessage) {
      throw e;
    }
    columns=null;
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
  if (columns == null) {
    columns=new DataSetViewData[]{};
    htColumns.put(dataSet,columns);
  }
  return columns;
}","/** 
 * @param dataSet
 * @param refresh
 * @param useColumnHints Only applicable if the list is refreshed.
 * @return
 * @throws BirtException 
 */
public DataSetViewData[] getColumns(DataSetHandle dataSet,boolean refresh,boolean useColumnHints) throws BirtException {
  if (dataSet == null) {
    return new DataSetViewData[0];
  }
  DataSetViewData[] columns=null;
  DataRequestSession session=null;
  try {
    columns=htColumns.get(dataSet);
    if (columns == null || refresh) {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
      session=DataRequestSession.newSession(context);
      columns=this.populateAllOutputColumns(dataSet,session);
      htColumns.put(dataSet,columns);
    }
  }
 catch (  BirtException e) {
    columns=new DataSetViewData[]{};
    htColumns.put(dataSet,columns);
    throw e;
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
  if (columns == null) {
    columns=new DataSetViewData[]{};
    htColumns.put(dataSet,columns);
  }
  return columns;
}",0.8056440600819299
65370,"public IDataSetResultSet loadDataSetData(IResultClass targetResultClass,IOrderedIntSet preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID,Map appContext) throws DataException {
  if (targetResultClass == null)   targetResultClass=this.loadResultClass(includeInnerID);
  IDataSetReader reader=DataSetStore.createReader(streamManager,targetResultClass,appContext);
  if (reader != null)   return reader.load(preFilteredRowIds == null ? null : preFilteredRowIds);
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  int adjustedVersion=resolveVersionConflict();
  if (includeInnerID) {
    List<ResultFieldMetadata> fields=new ArrayList<ResultFieldMetadata>(targetResultClass.getFieldCount() - 1);
    for (int i=1; i <= targetResultClass.getFieldCount(); i++) {
      ResultFieldMetadata f=targetResultClass.getFieldMetaData(i);
      if (f.getName().equals(ExprMetaUtil.POS_NAME))       continue;
      fields.add(f);
    }
    targetResultClass=new ResultClass(fields);
  }
  return new DataSetResultSet(stream,lensStream,targetResultClass,preFilteredRowIds,stringTableMap,index,adjustedVersion,includeInnerID);
}","public IDataSetResultSet loadDataSetData(IResultClass targetResultClass,IOrderedIntSet preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID,Map appContext) throws DataException {
  boolean loadResultClass=false;
  if (targetResultClass == null) {
    targetResultClass=this.loadResultClass(includeInnerID);
    loadResultClass=true;
  }
  IDataSetReader reader=DataSetStore.createReader(streamManager,targetResultClass,appContext);
  if (reader != null)   return reader.load(preFilteredRowIds == null ? null : preFilteredRowIds);
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  int adjustedVersion=resolveVersionConflict();
  if (loadResultClass && includeInnerID) {
    List<ResultFieldMetadata> fields=new ArrayList<ResultFieldMetadata>(targetResultClass.getFieldCount() - 1);
    for (int i=1; i <= targetResultClass.getFieldCount(); i++) {
      ResultFieldMetadata f=targetResultClass.getFieldMetaData(i);
      if (f.getName().equals(ExprMetaUtil.POS_NAME))       continue;
      fields.add(f);
    }
    targetResultClass=new ResultClass(fields);
  }
 else {
    targetResultClass=this.loadResultClass();
  }
  return new DataSetResultSet(stream,lensStream,targetResultClass,preFilteredRowIds,stringTableMap,index,adjustedVersion,includeInnerID);
}",0.939484721390054
65371,"/** 
 * Finds the DataSetViewData instance according to the given column name
 * @param columnName
 * @param handle
 * @return
 */
private DataSetViewData findDataSetViewData(String columnName,DataSetHandle handle){
  if (columnName == null || columnName.trim().length() == 0) {
    return null;
  }
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(handle,false,true,true);
  for (int i=0; i < items.length; i++) {
    if (columnName.equals(items[i].getName())) {
      return items[i];
    }
  }
  return null;
}","/** 
 * Finds the DataSetViewData instance according to the given column name
 * @param columnName
 * @param handle
 * @return
 */
private DataSetViewData findDataSetViewData(String columnName,DataSetHandle handle){
  if (columnName == null || columnName.trim().length() == 0) {
    return null;
  }
  try {
    DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(handle,false,true,true);
    for (int i=0; i < items.length; i++) {
      if (columnName.equals(items[i].getName())) {
        return items[i];
      }
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
  return null;
}",0.8993174061433447
65372,"protected IStatus validateSyntax(Object structureOrHandle){
  if (!isUniqueColumnName())   return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  if (isBlankProperty(txtColumnName.getText()))   return getBlankPropertyStatus(dialogLabels[COLUMN_NAME_INDEX]);
  if (isBlankProperty(cmbDataType.getText()))   return getBlankPropertyStatus(dialogLabels[DATA_TYPE_INDEX]);
  if (isNumeric(txtColumnName.getText())) {
    return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
  IAggrFunction aggrFunc=getSelectedFunction();
  if (aggrFunc != null) {
    IParameterDefn[] paramDefns=aggrFunc.getParameterDefn();
    for (int i=0; i < paramDefns.length; i++) {
      if (!paramDefns[i].isOptional() && isBlankProperty(txtParams[i].getText())) {
        return getBlankPropertyStatus(paramDefns[i].getDisplayName());
      }
    }
  }
 else   if (txtParams != null && isBlankProperty(txtParams[0].getText())) {
    return getBlankPropertyStatus(dialogLabels[EXPRESSION_INDEX]);
  }
  try {
    if (cmbAggregation != null && cmbAggregation.getText().trim().length() > 0 && !checkExpressionBindingFields()) {
      return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
  }
 catch (  BirtException e) {
  }
  return getOKStatus();
}","protected IStatus validateSyntax(Object structureOrHandle){
  try {
    if (!isUniqueColumnName())     return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    if (isBlankProperty(txtColumnName.getText()))     return getBlankPropertyStatus(dialogLabels[COLUMN_NAME_INDEX]);
    if (isBlankProperty(cmbDataType.getText()))     return getBlankPropertyStatus(dialogLabels[DATA_TYPE_INDEX]);
    if (isNumeric(txtColumnName.getText())) {
      return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
    IAggrFunction aggrFunc=getSelectedFunction();
    if (aggrFunc != null) {
      IParameterDefn[] paramDefns=aggrFunc.getParameterDefn();
      for (int i=0; i < paramDefns.length; i++) {
        if (!paramDefns[i].isOptional() && isBlankProperty(txtParams[i].getText())) {
          return getBlankPropertyStatus(paramDefns[i].getDisplayName());
        }
      }
    }
 else     if (txtParams != null && isBlankProperty(txtParams[0].getText())) {
      return getBlankPropertyStatus(dialogLabels[EXPRESSION_INDEX]);
    }
    if (cmbAggregation != null && cmbAggregation.getText().trim().length() > 0 && !checkExpressionBindingFields()) {
      return getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
  return getOKStatus();
}",0.9636568002997378
65373,"/** 
 * @return
 */
private final boolean isUniqueColumnName(){
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),true,true,true);
  for (int i=0; i < items.length; i++) {
    if (!items[i].getName().equals(columnName)) {
      if (!items[i].isComputedColumn()) {
        if ((items[i].getAlias() != null && items[i].getAlias().equals(txtColumnName.getText())) || (items[i].getName() != null && items[i].getName().equals(txtColumnName.getText()))) {
          return false;
        }
      }
    }
  }
  Iterator iter=computedColumns.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ComputedColumnHandle handle=(ComputedColumnHandle)iter.next();
      if (getStructure(getStructureOrHandle()) != handle.getStructure() && handle.getName().equals(txtColumnName.getText())) {
        return false;
      }
    }
  }
  Iterator iter2=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter2.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter2.next();
    if (!hint.getColumnName().equals(columnName)) {
      if (txtColumnName.getText().equals(hint.getAlias()) || txtColumnName.getText().equals(hint.getColumnName())) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * @return
 * @throws BirtException 
 */
private final boolean isUniqueColumnName() throws BirtException {
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),true,true,true);
  for (int i=0; i < items.length; i++) {
    if (!items[i].getName().equals(columnName)) {
      if (!items[i].isComputedColumn()) {
        if ((items[i].getAlias() != null && items[i].getAlias().equals(txtColumnName.getText())) || (items[i].getName() != null && items[i].getName().equals(txtColumnName.getText()))) {
          return false;
        }
      }
    }
  }
  Iterator iter=computedColumns.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ComputedColumnHandle handle=(ComputedColumnHandle)iter.next();
      if (getStructure(getStructureOrHandle()) != handle.getStructure() && handle.getName().equals(txtColumnName.getText())) {
        return false;
      }
    }
  }
  Iterator iter2=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter2.hasNext()) {
    ColumnHintHandle hint=(ColumnHintHandle)iter2.next();
    if (!hint.getColumnName().equals(columnName)) {
      if (txtColumnName.getText().equals(hint.getAlias()) || txtColumnName.getText().equals(hint.getColumnName())) {
        return false;
      }
    }
  }
  return true;
}",0.9823399558498896
65374,"/** 
 * Refresh columns meta data
 */
private void refreshColumnNames(){
  ((DataSetEditor)this.getContainer()).getCurrentItemModel(true,true);
}","/** 
 * Refresh columns meta data
 * @throws BirtException 
 */
private void refreshColumnNames() throws BirtException {
  ((DataSetEditor)this.getContainer()).getCurrentItemModel(true,true);
}",0.8579881656804734
65375,"/** 
 * Update the computed columns after adding a new column and cache the updated DataSetViewData[]
 */
private void updateComputedColumns(ComputedColumn handle){
  DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
  int count=items.length;
  DataSetViewData[] newItems=new DataSetViewData[count + 1];
  System.arraycopy(items,0,newItems,0,count);
  newItems[count]=new DataSetViewData();
  newItems[count].setName(handle.getName());
  newItems[count].setDataTypeName(handle.getDataType());
  newItems[count].setAlias(handle.getDisplayName());
  newItems[count].setComputedColumn(true);
  newItems[count].setPosition(count + 1);
  newItems[count].setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
  DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,newItems);
}","/** 
 * Update the computed columns after adding a new column and cache the updated DataSetViewData[]
 */
private void updateComputedColumns(ComputedColumn handle){
  try {
    DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
    int count=items.length;
    DataSetViewData[] newItems=new DataSetViewData[count + 1];
    System.arraycopy(items,0,newItems,0,count);
    newItems[count]=new DataSetViewData();
    newItems[count].setName(handle.getName());
    newItems[count].setDataTypeName(handle.getDataType());
    newItems[count].setAlias(handle.getDisplayName());
    newItems[count].setComputedColumn(true);
    newItems[count].setPosition(count + 1);
    newItems[count].setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
    DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,newItems);
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}",0.9438775510204082
65376,"public void pageActivated(){
  refreshColumnNames();
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  setPageProperties();
  computedColumns=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COMPUTED_COLUMNS_PROP);
  ;
  viewer.getViewer().setInput(computedColumns);
  viewer.getViewer().getTable().select(0);
}","public void pageActivated(){
  try {
    refreshColumnNames();
    getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
    setPageProperties();
    computedColumns=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.COMPUTED_COLUMNS_PROP);
    ;
    viewer.getViewer().setInput(computedColumns);
    viewer.getViewer().getTable().select(0);
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}",0.8317757009345794
65377,"/** 
 * Update the computed columns after removing an established one and cache the updated DataSetViewData[]
 */
private void updateColumnsOfDataSetHandle(){
  DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
  int inexistence=0;
  for (int i=0; i < items.length; i++) {
    boolean exist=false;
    if (items[i].isComputedColumn()) {
      Iterator iter=computedColumns.iterator();
      while (iter.hasNext()) {
        ComputedColumn computedColumn=null;
        Object obj=iter.next();
        if (obj instanceof ComputedColumnHandle) {
          computedColumn=(ComputedColumn)((ComputedColumnHandle)obj).getStructure();
        }
        if (computedColumn != null && items[i].getName().equals(computedColumn.getName())) {
          exist=true;
        }
      }
      if (!exist) {
        items[i]=null;
        inexistence++;
      }
    }
  }
  if (inexistence == 0)   return;
  DataSetViewData[] existItems=new DataSetViewData[items.length - inexistence];
  int index=0;
  for (int i=0; i < items.length; i++) {
    if (items[i] != null) {
      existItems[index]=items[i];
      index++;
    }
  }
  DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,existItems);
}","/** 
 * Update the computed columns after removing an established one and cache the updated DataSetViewData[]
 */
private void updateColumnsOfDataSetHandle(){
  DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
  DataSetViewData[] items;
  try {
    items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
    int inexistence=0;
    for (int i=0; i < items.length; i++) {
      boolean exist=false;
      if (items[i].isComputedColumn()) {
        Iterator iter=computedColumns.iterator();
        while (iter.hasNext()) {
          ComputedColumn computedColumn=null;
          Object obj=iter.next();
          if (obj instanceof ComputedColumnHandle) {
            computedColumn=(ComputedColumn)((ComputedColumnHandle)obj).getStructure();
          }
          if (computedColumn != null && items[i].getName().equals(computedColumn.getName())) {
            exist=true;
          }
        }
        if (!exist) {
          items[i]=null;
          inexistence++;
        }
      }
    }
    if (inexistence == 0)     return;
    DataSetViewData[] existItems=new DataSetViewData[items.length - inexistence];
    int index=0;
    for (int i=0; i < items.length; i++) {
      if (items[i] != null) {
        existItems[index]=items[i];
        index++;
      }
    }
    DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,existItems);
  }
 catch (  BirtException e) {
    DataSetExceptionHandler.handle(e);
  }
}",0.9031104755094744
65378,"protected void okPressed(){
  super.okPressed();
  try {
    DataSetUIUtil.updateColumnCache(this.getHandle(),false);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (super.rootNode.hasSubNodes()) {
    PropertyNode[] nodes=rootNode.getSubNodes();
    for (int n=0; n < nodes.length; n++) {
      if (nodes[n].getPage() instanceof DataSetParametersPage) {
        if (viewer == null || viewer.getTree() == null)         return;
        DataSetParametersPage page=(DataSetParametersPage)nodes[n].getPage();
        if (!page.canFinish() && !viewer.getTree().isDisposed()) {
          TreeItem firstNode=viewer.getTree().getItems()[n];
          StructuredSelection select=new StructuredSelection(firstNode.getData());
          viewer.setSelection(select);
          String name=((DataSetParametersPage)nodes[n].getPage()).getNoneValuedParameterName();
          this.setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{name}),IMessageProvider.ERROR);
          return;
        }
      }
    }
  }
}","protected void okPressed(){
  super.okPressed();
  try {
    DataSetUIUtil.updateColumnCache(this.getHandle(),false);
  }
 catch (  Exception e) {
    DataSetExceptionHandler.handle(e);
    return;
  }
  if (super.rootNode.hasSubNodes()) {
    PropertyNode[] nodes=rootNode.getSubNodes();
    for (int n=0; n < nodes.length; n++) {
      if (nodes[n].getPage() instanceof DataSetParametersPage) {
        if (viewer == null || viewer.getTree() == null)         return;
        DataSetParametersPage page=(DataSetParametersPage)nodes[n].getPage();
        if (!page.canFinish() && !viewer.getTree().isDisposed()) {
          TreeItem firstNode=viewer.getTree().getItems()[n];
          StructuredSelection select=new StructuredSelection(firstNode.getData());
          viewer.setSelection(select);
          String name=((DataSetParametersPage)nodes[n].getPage()).getNoneValuedParameterName();
          this.setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{name}),IMessageProvider.ERROR);
          return;
        }
      }
    }
  }
}",0.9966777408637874
65379,"/** 
 * Gets all columns items from dataset list
 * @param useColumnHint
 * @param suppressErrorMessage
 * @return DataSetItemModel[]
 */
public DataSetViewData[] getCurrentItemModel(boolean useColumnHint,boolean suppressErrorMessage){
  DataSetViewData[] dataSetItem=DataSetProvider.getCurrentInstance().getColumns(ds,itemModelChanged,useColumnHint,suppressErrorMessage);
  itemModelChanged=false;
  linkedParameterChanged=false;
  return dataSetItem;
}","/** 
 * Gets all columns items from dataset list
 * @param useColumnHint
 * @param suppressErrorMessage
 * @return DataSetItemModel[]
 * @throws BirtException 
 */
public DataSetViewData[] getCurrentItemModel(boolean useColumnHint,boolean suppressErrorMessage) throws BirtException {
  DataSetViewData[] dataSetItem=DataSetProvider.getCurrentInstance().getColumns(ds,itemModelChanged,useColumnHint,suppressErrorMessage);
  itemModelChanged=false;
  linkedParameterChanged=false;
  return dataSetItem;
}",0.9497907949790796
65380,"public IResultClass loadResultClass(boolean includeInnerID) throws DataException {
  InputStream stream=streamManager.getInStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(stream);
  IResultClass resultClass=new ResultClass(buffStream,version,includeInnerID);
  try {
    buffStream.close();
    stream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  return resultClass;
}","public IResultClass loadResultClass(boolean includeInnerID) throws DataException {
  if (!streamManager.hasInStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  InputStream stream=streamManager.getInStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(stream);
  IResultClass resultClass=new ResultClass(buffStream,version,includeInnerID);
  try {
    buffStream.close();
    stream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  return resultClass;
}",0.8892430278884462
65381,"public IDataSetResultSet loadDataSetData(IResultClass targetResultClass,IOrderedIntSet preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID,Map appContext) throws DataException {
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  if (targetResultClass == null)   targetResultClass=this.loadResultClass(includeInnerID);
  IDataSetReader reader=DataSetStore.createReader(streamManager,targetResultClass,appContext);
  if (reader != null)   return reader.load(preFilteredRowIds == null ? null : preFilteredRowIds);
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  int adjustedVersion=resolveVersionConflict();
  return new DataSetResultSet(stream,lensStream,this.loadResultClass(),preFilteredRowIds,stringTableMap,index,adjustedVersion,includeInnerID);
}","public IDataSetResultSet loadDataSetData(IResultClass targetResultClass,IOrderedIntSet preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID,Map appContext) throws DataException {
  if (targetResultClass == null)   targetResultClass=this.loadResultClass(includeInnerID);
  IDataSetReader reader=DataSetStore.createReader(streamManager,targetResultClass,appContext);
  if (reader != null)   return reader.load(preFilteredRowIds == null ? null : preFilteredRowIds);
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  int adjustedVersion=resolveVersionConflict();
  return new DataSetResultSet(stream,lensStream,this.loadResultClass(),preFilteredRowIds,stringTableMap,index,adjustedVersion,includeInnerID);
}",0.9446876243533624
65382,"public DesignElementHandle createElement(Object extendedData){
  boolean isTable=ReportDesignConstants.TABLE_ITEM.equals(getElementType());
  TableOptionDialog dialog=new TableOptionDialog(UIUtil.getDefaultShell(),isTable);
  if (dialog.open() == Window.OK && dialog.getResult() instanceof Object[]) {
    Object[] data=(Object[])dialog.getResult();
    DesignElementHandle handle=null;
    if (isTable) {
      boolean isSummaryTable=data.length > 3 && data[3] != null && ((Boolean)data[3]).booleanValue();
      handle=DesignElementFactory.getInstance().newTableItem(getNewName(extendedData),((Integer)data[1]).intValue(),1,isSummaryTable ? 0 : ((Integer)data[0]).intValue(),1);
      if (data[2] != null) {
        try {
          DataSetHandle dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(data[2].toString());
          ((ReportItemHandle)handle).setDataSet(dataSet);
          DataSetColumnBindingsFormHandleProvider provider=new DataSetColumnBindingsFormHandleProvider();
          provider.setBindingObject((ReportItemHandle)handle);
          provider.generateAllBindingColumns();
        }
 catch (        Exception e) {
          ExceptionHandler.handle(e);
        }
      }
      if (isSummaryTable) {
        try {
          ((TableHandle)handle).setIsSummaryTable(((Boolean)data[3]).booleanValue());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
    }
 else {
      handle=DesignElementFactory.getInstance().newGridItem(getNewName(extendedData),((Integer)data[1]).intValue(),((Integer)data[0]).intValue());
    }
    InsertInLayoutUtil.setInitWidth(handle);
    return handle;
  }
  return null;
}","public DesignElementHandle createElement(Object extendedData){
  boolean isTable=ReportDesignConstants.TABLE_ITEM.equals(getElementType());
  TableOptionDialog dialog=new TableOptionDialog(UIUtil.getDefaultShell(),isTable);
  if (dialog.open() == Window.OK && dialog.getResult() instanceof Object[]) {
    Object[] data=(Object[])dialog.getResult();
    DesignElementHandle handle=null;
    if (isTable) {
      boolean isSummaryTable=data.length > 3 && data[3] != null && ((Boolean)data[3]).booleanValue();
      handle=DesignElementFactory.getInstance().newTableItem(getNewName(extendedData),((Integer)data[1]).intValue(),1,isSummaryTable ? 0 : ((Integer)data[0]).intValue(),1);
      if (data[2] != null) {
        try {
          DataSetHandle dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(data[2].toString());
          boolean isExtendedDataModel=false;
          if (dataSet == null) {
            ((ReportItemHandle)handle).setDataSet(null);
            isExtendedDataModel=new LinkedDataSetAdapter().setLinkedDataModel((ReportItemHandle)handle,data[2].toString());
          }
          ((ReportItemHandle)handle).setDataSet(dataSet);
          DataSetColumnBindingsFormHandleProvider provider=new DataSetColumnBindingsFormHandleProvider();
          provider.setBindingObject((ReportItemHandle)handle);
          if (!isExtendedDataModel) {
            provider.generateAllBindingColumns();
          }
        }
 catch (        Exception e) {
          ExceptionHandler.handle(e);
        }
      }
      if (isSummaryTable) {
        try {
          ((TableHandle)handle).setIsSummaryTable(((Boolean)data[3]).booleanValue());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
    }
 else {
      handle=DesignElementFactory.getInstance().newGridItem(getNewName(extendedData),((Integer)data[1]).intValue(),((Integer)data[0]).intValue());
    }
    InsertInLayoutUtil.setInitWidth(handle);
    return handle;
  }
  return null;
}",0.9128919860627178
65383,"ControlPanel(DataChartsViewer dcv){
  this.dcv=dcv;
  setLayout(new GridLayout(0,1,0,0));
  JPanel jp=new JPanel();
  jp.setLayout(new FlowLayout(FlowLayout.LEFT,3,3));
  JLabel choose=new JLabel(""String_Node_Str"");
  choose.setDisplayedMnemonic('c');
  jp.add(choose);
  jcbModels=new JComboBox<String>();
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.setSelectedIndex(0);
  choose.setLabelFor(jcbModels);
  jp.add(jcbModels);
  jbUpdate=new JButton(""String_Node_Str"");
  jbUpdate.setMnemonic('u');
  jbUpdate.setToolTipText(""String_Node_Str"");
  jbUpdate.addActionListener(this);
  jp.add(jbUpdate);
  add(jp);
}","ControlPanel(DataChartsViewer dcv){
  this.dcv=dcv;
  setLayout(new GridLayout(0,1,0,0));
  JPanel jp=new JPanel();
  jp.setLayout(new FlowLayout(FlowLayout.LEFT,3,3));
  JLabel choose=new JLabel(""String_Node_Str"");
  choose.setDisplayedMnemonic('c');
  jp.add(choose);
  jcbModels=new JComboBox();
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.setSelectedIndex(0);
  choose.setLabelFor(jcbModels);
  jp.add(jcbModels);
  jbUpdate=new JButton(""String_Node_Str"");
  jbUpdate.setMnemonic('u');
  jbUpdate.setToolTipText(""String_Node_Str"");
  jbUpdate.addActionListener(this);
  jp.add(jbUpdate);
  add(jp);
}",0.9945652173913044
65384,"ControlPanel(SwingInteractivityViewer siv){
  this.siv=siv;
  setLayout(new GridLayout(0,1,0,0));
  JPanel jp=new JPanel();
  jp.setLayout(new FlowLayout(FlowLayout.LEFT,3,3));
  JLabel choose=new JLabel(""String_Node_Str"");
  choose.setDisplayedMnemonic('c');
  jp.add(choose);
  jcbModels=new JComboBox<String>();
  choose.setLabelFor(jcbModels);
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.setSelectedIndex(0);
  jp.add(jcbModels);
  jbUpdate=new JButton(""String_Node_Str"");
  jbUpdate.setMnemonic('u');
  jbUpdate.addActionListener(this);
  jbUpdate.setToolTipText(""String_Node_Str"");
  jp.add(jbUpdate);
  add(jp);
}","ControlPanel(SwingInteractivityViewer siv){
  this.siv=siv;
  setLayout(new GridLayout(0,1,0,0));
  JPanel jp=new JPanel();
  jp.setLayout(new FlowLayout(FlowLayout.LEFT,3,3));
  JLabel choose=new JLabel(""String_Node_Str"");
  choose.setDisplayedMnemonic('c');
  jp.add(choose);
  jcbModels=new JComboBox();
  choose.setLabelFor(jcbModels);
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.addItem(""String_Node_Str"");
  jcbModels.setSelectedIndex(0);
  jp.add(jcbModels);
  jbUpdate=new JButton(""String_Node_Str"");
  jbUpdate.setMnemonic('u');
  jbUpdate.addActionListener(this);
  jbUpdate.setToolTipText(""String_Node_Str"");
  jp.add(jbUpdate);
  add(jp);
}",0.995575221238938
65385,"protected void setUp() throws Exception {
  super.setUp();
  ThreadResources.setLocale(ULocale.ENGLISH);
  MetaDataDictionary.reset();
  try {
    MetaDataReader.read(ReportDesign.class.getResourceAsStream(ROM_DEF_NAME));
  }
 catch (  MetaDataParserException e) {
    super.fail();
  }
}","protected void setUp() throws Exception {
  super.setUp();
  ThreadResources.setLocale(ULocale.ENGLISH);
}",0.5380710659898477
65386,"public void test_regression_76874() throws DesignFileException, SemanticException {
  openDesign(filename);
  LabelHandle label=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  label.setProperty(Style.FONT_SIZE_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",label.getProperty(Style.FONT_SIZE_PROP));
}","public void test_regression_76874() throws DesignFileException, SemanticException {
  openDesign(filename);
  LabelHandle label=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  label.setProperty(Style.FONT_SIZE_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",label.getProperty(Style.FONT_SIZE_PROP).toString());
}",0.9832572298325722
65387,"public void makeUniqueName(int namespaceId,DesignElement element){
  if (element == null)   return;
  String name=getUniqueName(namespaceId,element);
  if (name == null)   return;
  NameSpace nameSpace=getCachedNameSpace(namespaceId);
  String validName=name;
  if (element instanceof StyleElement)   validName=validName.toLowerCase();
  DesignElement cachedElement=nameSpace.getElement(validName);
  if (cachedElement == null) {
    element.setName(name.trim());
    nameSpace.insert(element);
  }
}","public void makeUniqueName(int namespaceId,DesignElement element,String prefix){
  if (element == null)   return;
  String name=getUniqueName(namespaceId,element,prefix);
  if (name == null)   return;
  NameSpace nameSpace=getCachedNameSpace(namespaceId);
  String validName=name;
  if (element instanceof StyleElement)   validName=validName.toLowerCase();
  DesignElement cachedElement=nameSpace.getElement(validName);
  if (cachedElement == null) {
    element.setName(name.trim());
    nameSpace.insert(element);
  }
}",0.9794319294809012
65388,"public void makeUniqueName(int namespaceId,DesignElement element);","/** 
 * make the unique name of element with the given name prefix
 * @param namespaceId the name space id
 * @param element the design element.
 * @param prefix the name prefix
 */
public void makeUniqueName(int namespaceId,DesignElement element,String prefix);",0.4024390243902439
65389,"public void makeUniqueName(String prefix){
  if (focus instanceof GroupElement) {
    makeUniqueGroupName((GroupElement)focus,prefix);
    return;
  }
  if (nameHelper != null) {
    nameHelper.makeUniqueName(namespaceId,focus);
  }
}","public void makeUniqueName(String prefix){
  if (focus instanceof GroupElement) {
    makeUniqueGroupName((GroupElement)focus,prefix);
    return;
  }
  if (nameHelper != null) {
    nameHelper.makeUniqueName(namespaceId,focus,prefix);
  }
}",0.9852631578947368
65390,"public void makeUniqueName(int namespaceId,DesignElement element){
  if (element == null)   return;
  String name=getUniqueName(namespaceId,element);
  if (name == null)   return;
  NameSpace nameSpace=getCachedNameSpace(namespaceId);
  String validName=name;
  if (element instanceof StyleElement)   validName=validName.toLowerCase();
  DesignElement cachedElement=nameSpace.getElement(validName);
  if (cachedElement == null) {
    element.setName(name.trim());
    nameSpace.insert(element);
  }
}","public void makeUniqueName(int namespaceId,DesignElement element,String prefix){
  if (element == null)   return;
  String name=getUniqueName(namespaceId,element,prefix);
  if (name == null)   return;
  NameSpace nameSpace=getCachedNameSpace(namespaceId);
  String validName=name;
  if (element instanceof StyleElement)   validName=validName.toLowerCase();
  DesignElement cachedElement=nameSpace.getElement(validName);
  if (cachedElement == null) {
    element.setName(name.trim());
    nameSpace.insert(element);
  }
}",0.9794319294809012
65391,"public void makeUniqueName(String prefix){
  if (focus instanceof GroupElement) {
    makeUniqueGroupName((GroupElement)focus,prefix);
    return;
  }
  if (nameHelper != null) {
    nameHelper.makeUniqueName(namespaceId,focus);
  }
}","public void makeUniqueName(String prefix){
  if (focus instanceof GroupElement) {
    makeUniqueGroupName((GroupElement)focus,prefix);
    return;
  }
  if (nameHelper != null) {
    nameHelper.makeUniqueName(namespaceId,focus,prefix);
  }
}",0.9852631578947368
65392,"private void renderAxes(IDeviceRenderer idr,PolarCoordinate pc,double magnitude) throws ChartException {
  Location center=pc.getCenter();
  int iCount=pc.getCount();
  pc=new PolarCoordinate(center,iCount,1,0);
  Location lo=center.copyInstance();
  LineAttributes lia=null;
  LineAttributes wlia=null;
  RadarSeries rsd=getFirstSeries();
  wlia=rsd.getWebLineAttributes();
  if (wlia == null) {
    lia=goFactory.createLineAttributes(goFactory.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  StructureSource ss=StructureSource.createPlot(getModel().getPlot());
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(ss,LineRenderEvent.class);
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(ss,OvalRenderEvent.class);
  lre.setLineAttributes(lia);
  lre.setStart(center);
  for (int i=0; i < iCount; i++) {
    pc.computeLocation(lo,i,magnitude);
    lre.setEnd(lo);
    idr.drawLine(lre);
    DataPointHints dph=dpha[i];
    if ((rsd.isSetShowCatLabels() && rsd.isShowCatLabels()) || (!rsd.isSetShowCatLabels())) {
      drawAxisRadialLabel(idr,pc,lo,i,dph.getBaseValue());
    }
  }
  String subType=getModel().getSubType();
  if (STANDARD_SUBTYPE_LITERAL.equals(subType) || BULLSEYE_SUBTYPE_LITERAL.equals(subType)) {
    ore.setBackground(lia.getColor());
    ore.setOutline(lia);
    Bounds bo=goFactory.createBounds(0,0,0,0);
    for (int sc=1; sc <= scaleCount; sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      ore.setBounds(pc.computeBounds(bo,spiderMag));
      idr.drawOval(ore);
    }
  }
 else   if (SPIDER_SUBTYPE_LITERAL.equals(subType)) {
    Location lo1=lo.copyInstance();
    for (int sc=1; sc < scaleHelper.getScaleCount() + 1; sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      pc.computeLocation(lo1,0,spiderMag);
      for (int index=1; index < iCount + 1; index++) {
        lo.set(lo1.getX(),lo1.getY());
        pc.computeLocation(lo1,index,spiderMag);
        lre.setStart(lo);
        lre.setEnd(lo1);
        idr.drawLine(lre);
      }
    }
  }
}","private void renderAxes(IDeviceRenderer idr,PolarCoordinate pc,double magnitude) throws ChartException {
  Location center=pc.getCenter();
  int iCount=pc.getCount();
  pc=new PolarCoordinate(center,iCount,1,0);
  Location lo=center.copyInstance();
  LineAttributes lia=null;
  LineAttributes wlia=null;
  RadarSeries rsd=getFirstSeries();
  wlia=rsd.getWebLineAttributes();
  if (wlia == null) {
    lia=goFactory.createLineAttributes(goFactory.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  StructureSource ss=StructureSource.createPlot(getModel().getPlot());
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(ss,LineRenderEvent.class);
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(ss,OvalRenderEvent.class);
  lre.setLineAttributes(lia);
  lre.setStart(center);
  for (int i=0; i < iCount; i++) {
    pc.computeLocation(lo,i,magnitude);
    lre.setEnd(lo);
    idr.drawLine(lre);
    DataPointHints dph=dpha[i];
    if ((rsd.isSetShowCatLabels() && rsd.isShowCatLabels()) || (!rsd.isSetShowCatLabels())) {
      drawAxisRadialLabel(idr,pc,lo,i,dph.getBaseValue());
    }
  }
  String subType=getModel().getSubType();
  if (STANDARD_SUBTYPE_LITERAL.equals(subType) || BULLSEYE_SUBTYPE_LITERAL.equals(subType)) {
    ore.setBackground(lia.getColor());
    ore.setOutline(lia);
    Bounds bo=goFactory.createBounds(0,0,0,0);
    for (int sc=1; sc <= scaleHelper.getScaleCount(); sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      ore.setBounds(pc.computeBounds(bo,spiderMag));
      idr.drawOval(ore);
    }
  }
 else   if (SPIDER_SUBTYPE_LITERAL.equals(subType)) {
    Location lo1=lo.copyInstance();
    for (int sc=1; sc < scaleHelper.getScaleCount() + 1; sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      pc.computeLocation(lo1,0,spiderMag);
      for (int index=1; index < iCount + 1; index++) {
        lo.set(lo1.getX(),lo1.getY());
        pc.computeLocation(lo1,index,spiderMag);
        lre.setStart(lo);
        lre.setEnd(lo1);
        idr.drawLine(lre);
      }
    }
  }
}",0.9959552700452058
65393,"/** 
 * @param dataExpr
 * @param cx
 * @param isRow true:row[""xxx""]; false:dataSetRow[""xxx""]
 * @return
 * @throws BirtException
 */
private String extractDirectColumn(IBaseExpression dataExpr,ScriptContext cx,boolean isRow) throws BirtException {
  if (dataExpr instanceof IScriptExpression) {
    String exprText=((IScriptExpression)dataExpr).getText();
    if (isRow) {
      return exprHelper.getColumnBindingName(exprText);
    }
 else {
      return exprHelper.getColumnName(exprText);
    }
  }
  return null;
}","/** 
 * @param dataExpr
 * @param cx
 * @param isRow true:row[""xxx""]; false:dataSetRow[""xxx""]
 * @return
 * @throws BirtException
 */
private String extractDirectColumn(IBaseExpression dataExpr,ScriptContext cx,boolean isRow) throws BirtException {
  if (dataExpr instanceof IScriptExpression && !BaseExpression.constantId.equals(dataExpr.getScriptId())) {
    String exprText=((IScriptExpression)dataExpr).getText();
    if (isRow) {
      return exprHelper.getColumnBindingName(exprText);
    }
 else {
      return exprHelper.getColumnName(exprText);
    }
  }
  return null;
}",0.9444949954504096
65394,"/** 
 * Check whether there is columnReferenceExpression in aggregation. If so, return true. else return false;
 * @return
 */
public static boolean hasAggregationInExpr(IBaseExpression expression){
  if (expression == null)   return false;
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    return ExpressionUtil.hasAggregation(text);
  }
 else   if (expression instanceof IConditionalExpression) {
    return hasAggregationInExpr(((IConditionalExpression)expression).getExpression()) || hasAggregationInExpr(((IConditionalExpression)expression).getOperand1()) || hasAggregationInExpr(((IConditionalExpression)expression).getOperand2());
  }
 else   if (expression instanceof IExpressionCollection) {
    Object[] text=((IExpressionCollection)expression).getExpressions().toArray();
    for (int i=0; i < text.length; i++) {
      if (hasAggregationInExpr((IBaseExpression)text[i]))       return true;
    }
  }
  return false;
}","/** 
 * Check whether there is columnReferenceExpression in aggregation. If so, return true. else return false;
 * @return
 */
public static boolean hasAggregationInExpr(IBaseExpression expression){
  if (expression == null || BaseExpression.constantId.equals(expression.getScriptId()))   return false;
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    return ExpressionUtil.hasAggregation(text);
  }
 else   if (expression instanceof IConditionalExpression) {
    return hasAggregationInExpr(((IConditionalExpression)expression).getExpression()) || hasAggregationInExpr(((IConditionalExpression)expression).getOperand1()) || hasAggregationInExpr(((IConditionalExpression)expression).getOperand2());
  }
 else   if (expression instanceof IExpressionCollection) {
    Object[] text=((IExpressionCollection)expression).getExpressions().toArray();
    for (int i=0; i < text.length; i++) {
      if (hasAggregationInExpr((IBaseExpression)text[i]))       return true;
    }
  }
  return false;
}",0.9696673189823874
65395,"/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 * @throws DataException 
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression,ScriptContext context) throws DataException {
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    if (text == null || text.trim().length() == 0)     return true;
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    ExpressionCompiler expressionCompiler=new ExpressionCompiler();
    CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
    return flattenFilterExpression(expr);
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr,context) && isValidExpressionInQueryFilter(oprand1,context) && isValidExpressionInQueryFilter(oprand2,context);
  }
  return true;
}","/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 * @throws DataException 
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression,ScriptContext context) throws DataException {
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    if (text == null || text.trim().length() == 0 || BaseExpression.constantId.equals(expression.getScriptId()))     return true;
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    ExpressionCompiler expressionCompiler=new ExpressionCompiler();
    CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
    return flattenFilterExpression(expr);
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr,context) && isValidExpressionInQueryFilter(oprand1,context) && isValidExpressionInQueryFilter(oprand2,context);
  }
  return true;
}",0.9771048744460856
65396,"/** 
 * @param list
 * @param expression
 * @throws DataException
 */
private static void populateColumnList(List list,IBaseExpression expression,String indicator) throws DataException {
  if (expression != null) {
    List l=new ArrayList();
    try {
      if (expression instanceof IScriptExpression)       l=ExpressionUtil.extractColumnExpressions(((IScriptExpression)expression).getText(),indicator);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
    for (int i=0; i < l.size(); i++) {
      IColumnBinding cb=(IColumnBinding)l.get(i);
      if (!list.contains(cb.getResultSetColumnName()) && cb.getOuterLevel() == 0)       list.add(cb.getResultSetColumnName());
    }
  }
}","/** 
 * @param list
 * @param expression
 * @throws DataException
 */
private static void populateColumnList(List list,IBaseExpression expression,String indicator) throws DataException {
  if (expression != null) {
    List l=new ArrayList();
    try {
      if (expression instanceof IScriptExpression && !(BaseExpression.constantId.equals(expression.getScriptId())))       l=ExpressionUtil.extractColumnExpressions(((IScriptExpression)expression).getText(),indicator);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
    for (int i=0; i < l.size(); i++) {
      IColumnBinding cb=(IColumnBinding)l.get(i);
      if (!list.contains(cb.getResultSetColumnName()) && cb.getOuterLevel() == 0)       list.add(cb.getResultSetColumnName());
    }
  }
}",0.9562878278412912
65397,"/** 
 * To create all the rational measures for CubeQueryDefinition according to the expression
 * @param queryDefn, expression
 * @return List
 * @throws DataException 
 */
private static List createRelationalMeasures(ICubeQueryDefinition queryDefn,IBaseExpression expression,ScriptContext cx) throws DataException {
  List measures=new ArrayList();
  List exprTextList=getExprTextList(expression);
  for (int i=0; i < exprTextList.size(); i++) {
    String exprText=(String)exprTextList.get(i);
    String measureName=OlapExpressionCompiler.getReferencedScriptObject(exprText,ScriptConstants.MEASURE_SCRIPTABLE);
    if (measureName != null && measureName.trim().length() > 0) {
      List existMeasures=queryDefn.getMeasures();
      boolean exist=false;
      for (int j=0; j < existMeasures.size(); j++) {
        if (((IMeasureDefinition)existMeasures.get(j)).getName().equals(measureName)) {
          exist=true;
          break;
        }
      }
      if (!exist) {
        measures.add(queryDefn.createMeasure(measureName));
      }
    }
  }
  return measures;
}","/** 
 * To create all the rational measures for CubeQueryDefinition according to the expression
 * @param queryDefn, expression
 * @return List
 * @throws DataException 
 */
private static List createRelationalMeasures(ICubeQueryDefinition queryDefn,IBaseExpression expression,ScriptContext cx) throws DataException {
  List<IMeasureDefinition> measures=new ArrayList<IMeasureDefinition>();
  List<IScriptExpression> exprTextList=getExprTextList(expression);
  for (int i=0; i < exprTextList.size(); i++) {
    IScriptExpression exprText=(IScriptExpression)exprTextList.get(i);
    String measureName=OlapExpressionCompiler.getReferencedScriptObject(exprText,ScriptConstants.MEASURE_SCRIPTABLE);
    if (measureName != null && measureName.trim().length() > 0) {
      List existMeasures=queryDefn.getMeasures();
      boolean exist=false;
      for (int j=0; j < existMeasures.size(); j++) {
        if (((IMeasureDefinition)existMeasures.get(j)).getName().equals(measureName)) {
          exist=true;
          break;
        }
      }
      if (!exist) {
        measures.add(queryDefn.createMeasure(measureName));
      }
    }
  }
  return measures;
}",0.9546882009869896
65398,"/** 
 * To get all the sub expressions' text list of the given expression
 * @param queryDefn, expression
 * @return List
 */
private static List getExprTextList(IBaseExpression expression){
  List textList=new ArrayList();
  if (expression instanceof IScriptExpression) {
    textList.add(((IScriptExpression)expression).getText());
  }
 else   if (expression instanceof IExpressionCollection) {
    List exprList=(List)((IExpressionCollection)expression).getExpressions();
    for (int i=0; i < exprList.size(); i++) {
      IBaseExpression baseExpr=(IBaseExpression)exprList.get(i);
      textList.addAll(getExprTextList(baseExpr));
    }
  }
 else   if (expression instanceof IConditionalExpression) {
    textList.add(((IScriptExpression)((IConditionalExpression)expression).getExpression()).getText());
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand1()));
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand2()));
  }
  return textList;
}","/** 
 * To get all the sub expressions' text list of the given expression
 * @param queryDefn, expression
 * @return List
 */
private static List<IScriptExpression> getExprTextList(IBaseExpression expression){
  List<IScriptExpression> textList=new ArrayList<IScriptExpression>();
  if (expression instanceof IScriptExpression) {
    textList.add((IScriptExpression)expression);
  }
 else   if (expression instanceof IExpressionCollection) {
    List exprList=(List)((IExpressionCollection)expression).getExpressions();
    for (int i=0; i < exprList.size(); i++) {
      IBaseExpression baseExpr=(IBaseExpression)exprList.get(i);
      textList.addAll(getExprTextList(baseExpr));
    }
  }
 else   if (expression instanceof IConditionalExpression) {
    textList.add(((IScriptExpression)((IConditionalExpression)expression).getExpression()));
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand1()));
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand2()));
  }
  return textList;
}",0.8597768073750607
65399,"/** 
 * @param expr
 * @param objectName
 * @return
 */
public static String getReferencedScriptObject(String expr,String objectName){
  if (expr == null)   return null;
  try {
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    return getScriptObjectName(tree,objectName);
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param expr
 * @param objectName
 * @return
 */
public static String getReferencedScriptObject(String expr,String objectName){
  if (expr == null)   return null;
  try {
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    return getScriptObjectName(tree,objectName);
  }
 catch (  Exception ex) {
    return null;
  }
 finally {
    Context.exit();
  }
}",0.9508547008547008
65400,"/** 
 * @param expr
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @return
 * @throws DataException
 */
private static Set getReferencedDimLevel(IScriptExpression expr,List bindings,boolean onlyFromDirectReferenceExpr) throws DataException {
  if (expr == null || expr.getText() == null || expr.getText().length() == 0)   return new HashSet();
  try {
    Set result=new HashSet();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr.getText(),null,0);
    populateDimLevels(null,tree,result,bindings,onlyFromDirectReferenceExpr);
    return result;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param expr
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @return
 * @throws DataException
 */
private static Set getReferencedDimLevel(IScriptExpression expr,List bindings,boolean onlyFromDirectReferenceExpr) throws DataException {
  if (expr == null || expr.getText() == null || expr.getText().length() == 0 || BaseExpression.constantId.equals(expr.getScriptId()))   return new HashSet();
  try {
    Set result=new HashSet();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr.getText(),null,0);
    populateDimLevels(null,tree,result,bindings,onlyFromDirectReferenceExpr);
    return result;
  }
  finally {
    Context.exit();
  }
}",0.962566844919786
65401,"private void renderAxes(IDeviceRenderer idr,PolarCoordinate pc,double magnitude) throws ChartException {
  Location center=pc.getCenter();
  int iCount=pc.getCount();
  pc=new PolarCoordinate(center,iCount,1,0);
  Location lo=center.copyInstance();
  LineAttributes lia=null;
  LineAttributes wlia=null;
  RadarSeries rsd=getFirstSeries();
  wlia=rsd.getWebLineAttributes();
  if (wlia == null) {
    lia=goFactory.createLineAttributes(goFactory.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  StructureSource ss=StructureSource.createPlot(getModel().getPlot());
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(ss,LineRenderEvent.class);
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(ss,OvalRenderEvent.class);
  lre.setLineAttributes(lia);
  lre.setStart(center);
  for (int i=0; i < iCount; i++) {
    pc.computeLocation(lo,i,magnitude);
    lre.setEnd(lo);
    idr.drawLine(lre);
    DataPointHints dph=dpha[i];
    if ((rsd.isSetShowCatLabels() && rsd.isShowCatLabels()) || (!rsd.isSetShowCatLabels())) {
      drawAxisRadialLabel(idr,pc,lo,i,dph.getBaseValue());
    }
  }
  String subType=getModel().getSubType();
  if (STANDARD_SUBTYPE_LITERAL.equals(subType) || BULLSEYE_SUBTYPE_LITERAL.equals(subType)) {
    ore.setBackground(lia.getColor());
    ore.setOutline(lia);
    Bounds bo=goFactory.createBounds(0,0,0,0);
    for (int sc=1; sc <= scaleCount; sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      ore.setBounds(pc.computeBounds(bo,spiderMag));
      idr.drawOval(ore);
    }
  }
 else   if (SPIDER_SUBTYPE_LITERAL.equals(subType)) {
    Location lo1=lo.copyInstance();
    for (int sc=1; sc < scaleHelper.getScaleCount() + 1; sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      pc.computeLocation(lo1,0,spiderMag);
      for (int index=1; index < iCount + 1; index++) {
        lo.set(lo1.getX(),lo1.getY());
        pc.computeLocation(lo1,index,spiderMag);
        lre.setStart(lo);
        lre.setEnd(lo1);
        idr.drawLine(lre);
      }
    }
  }
}","private void renderAxes(IDeviceRenderer idr,PolarCoordinate pc,double magnitude) throws ChartException {
  Location center=pc.getCenter();
  int iCount=pc.getCount();
  pc=new PolarCoordinate(center,iCount,1,0);
  Location lo=center.copyInstance();
  LineAttributes lia=null;
  LineAttributes wlia=null;
  RadarSeries rsd=getFirstSeries();
  wlia=rsd.getWebLineAttributes();
  if (wlia == null) {
    lia=goFactory.createLineAttributes(goFactory.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  StructureSource ss=StructureSource.createPlot(getModel().getPlot());
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(ss,LineRenderEvent.class);
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(ss,OvalRenderEvent.class);
  lre.setLineAttributes(lia);
  lre.setStart(center);
  for (int i=0; i < iCount; i++) {
    pc.computeLocation(lo,i,magnitude);
    lre.setEnd(lo);
    idr.drawLine(lre);
    DataPointHints dph=dpha[i];
    if ((rsd.isSetShowCatLabels() && rsd.isShowCatLabels()) || (!rsd.isSetShowCatLabels())) {
      drawAxisRadialLabel(idr,pc,lo,i,dph.getBaseValue());
    }
  }
  String subType=getModel().getSubType();
  if (STANDARD_SUBTYPE_LITERAL.equals(subType) || BULLSEYE_SUBTYPE_LITERAL.equals(subType)) {
    ore.setBackground(lia.getColor());
    ore.setOutline(lia);
    Bounds bo=goFactory.createBounds(0,0,0,0);
    for (int sc=1; sc <= scaleHelper.getScaleCount(); sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      ore.setBounds(pc.computeBounds(bo,spiderMag));
      idr.drawOval(ore);
    }
  }
 else   if (SPIDER_SUBTYPE_LITERAL.equals(subType)) {
    Location lo1=lo.copyInstance();
    for (int sc=1; sc < scaleHelper.getScaleCount() + 1; sc++) {
      double spiderMag=magnitude * sc / scaleHelper.getScaleCount();
      pc.computeLocation(lo1,0,spiderMag);
      for (int index=1; index < iCount + 1; index++) {
        lo.set(lo1.getX(),lo1.getY());
        pc.computeLocation(lo1,index,spiderMag);
        lre.setStart(lo);
        lre.setEnd(lo1);
        idr.drawLine(lre);
      }
    }
  }
}",0.9959552700452058
65402,"/** 
 * @param expr
 * @param objectName
 * @return
 */
public static Set<String> getReferencedMeasure(String expr){
  if (expr == null)   return Collections.EMPTY_SET;
  try {
    Set<String> result=new LinkedHashSet<String>();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    getScriptObjectName(tree,""String_Node_Str"",result);
    return result;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param expr
 * @param objectName
 * @return
 */
public static Set<String> getReferencedMeasure(String expr){
  if (expr == null)   return Collections.EMPTY_SET;
  try {
    Set<String> result=new LinkedHashSet<String>();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    getScriptObjectName(tree,""String_Node_Str"",result);
    return result;
  }
 catch (  Exception e) {
    return Collections.EMPTY_SET;
  }
 finally {
    Context.exit();
  }
}",0.9439421338155516
65403,"/** 
 * @param expr
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @return
 * @throws DataException
 */
public static Set<IDimLevel> getReferencedDimLevel(String expr) throws CoreException {
  if (expr == null)   return new HashSet<IDimLevel>();
  try {
    Set<IDimLevel> result=new HashSet<IDimLevel>();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    populateDimLevels(null,tree,result);
    return result;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param expr
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @return
 * @throws DataException
 */
public static Set<IDimLevel> getReferencedDimLevel(String expr) throws CoreException {
  if (expr == null)   return new HashSet<IDimLevel>();
  try {
    Set<IDimLevel> result=new HashSet<IDimLevel>();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    populateDimLevels(null,tree,result);
    return result;
  }
 catch (  Exception e) {
    return Collections.EMPTY_SET;
  }
 finally {
    Context.exit();
  }
}",0.9506369426751592
65404,"/** 
 * @param expr
 * @return
 * @throws DataException
 */
private static Set<String> getBindingNamesFromScriptExpr(IScriptExpression expr) throws DataException {
  try {
    List<IColumnBinding> referedList=ExpressionUtil.extractColumnExpressions(expr.getText());
    Set<String> newList=new HashSet<String>();
    for (int j=0; j < referedList.size(); j++) {
      IColumnBinding binding=referedList.get(j);
      String name=binding.getResultSetColumnName();
      newList.add(name);
    }
    return newList;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param expr
 * @return
 * @throws DataException
 */
private static Set<String> getBindingNamesFromScriptExpr(IScriptExpression expr) throws DataException {
  if (BaseExpression.constantId.equals(expr.getScriptId()))   return Collections.EMPTY_SET;
  try {
    List<IColumnBinding> referedList=ExpressionUtil.extractColumnExpressions(expr.getText());
    Set<String> newList=new HashSet<String>();
    for (int j=0; j < referedList.size(); j++) {
      IColumnBinding binding=referedList.get(j);
      String name=binding.getResultSetColumnName();
      newList.add(name);
    }
    return newList;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9270998415213946
65405,"/** 
 * @param expr
 * @return
 * @throws BirtException
 * @throws DataException
 */
private boolean hasRowNumRefExpr(IScriptExpression expr) throws DataException {
  try {
    if (expr == null || expr.getText() == null)     return false;
    if (expr.getText().matches(""String_Node_Str""))     return true;
    return findRowNumReferenceInBindings(ExpressionUtil.extractColumnExpressions(expr.getText()));
  }
 catch (  BirtException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","/** 
 * @param expr
 * @return
 * @throws BirtException
 * @throws DataException
 */
private boolean hasRowNumRefExpr(IScriptExpression expr) throws DataException {
  try {
    if (expr == null || expr.getText() == null || BaseExpression.constantId.equals(expr.getScriptId()))     return false;
    if (expr.getText().matches(""String_Node_Str""))     return true;
    return findRowNumReferenceInBindings(ExpressionUtil.extractColumnExpressions(expr.getText()));
  }
 catch (  BirtException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.946768060836502
65406,"@Override public void close() throws IOException {
  RAFolderOutputStream outputStream=null;
  DataOutputStream data=null;
  try {
    File file=new File(folderName + ""String_Node_Str"" + METEDATA);
    outputStream=new RAFolderOutputStream(null,file);
    data=new DataOutputStream(outputStream);
    IOUtil.writeMap(data,this.properties);
  }
  finally {
    if (data != null) {
      data.close();
    }
    if (outputStream != null) {
      outputStream.close();
    }
  }
  IOException exception=null;
synchronized (outputStreams) {
    ArrayList<RAFolderOutputStream> outputs=new ArrayList<RAFolderOutputStream>(outputStreams);
    for (    RAFolderOutputStream output : outputs) {
      try {
        output.close();
      }
 catch (      IOException ex) {
        logger.log(Level.SEVERE,ex.getMessage(),ex);
        if (exception != null) {
          exception=ex;
        }
      }
    }
    outputStreams.clear();
  }
synchronized (inputStreams) {
    ArrayList<RAFolderInputStream> inputs=new ArrayList<RAFolderInputStream>(inputStreams);
    for (    RAFolderInputStream input : inputs) {
      try {
        input.close();
      }
 catch (      IOException ex) {
        logger.log(Level.SEVERE,ex.getMessage(),ex);
        if (exception != null) {
          exception=ex;
        }
      }
    }
    inputStreams.clear();
  }
  if (exception != null) {
    throw exception;
  }
}","public void close() throws IOException {
  RAFolderOutputStream outputStream=null;
  DataOutputStream data=null;
  try {
    File file=new File(folderName + ""String_Node_Str"" + METEDATA);
    outputStream=new RAFolderOutputStream(null,file);
    data=new DataOutputStream(outputStream);
    IOUtil.writeMap(data,this.properties);
  }
  finally {
    if (data != null) {
      data.close();
    }
    if (outputStream != null) {
      outputStream.close();
    }
  }
  IOException exception=null;
synchronized (outputStreams) {
    ArrayList<RAFolderOutputStream> outputs=new ArrayList<RAFolderOutputStream>(outputStreams);
    for (    RAFolderOutputStream output : outputs) {
      try {
        output.close();
      }
 catch (      IOException ex) {
        logger.log(Level.SEVERE,ex.getMessage(),ex);
        if (exception != null) {
          exception=ex;
        }
      }
    }
    outputStreams.clear();
  }
synchronized (inputStreams) {
    ArrayList<RAFolderInputStream> inputs=new ArrayList<RAFolderInputStream>(inputStreams);
    for (    RAFolderInputStream input : inputs) {
      try {
        input.close();
      }
 catch (      IOException ex) {
        logger.log(Level.SEVERE,ex.getMessage(),ex);
        if (exception != null) {
          exception=ex;
        }
      }
    }
    inputStreams.clear();
  }
  if (exception != null) {
    throw exception;
  }
}",0.9963976945244956
65407,"@Override public void createPageCustomControl(Composite parent){
  Composite topComposite=new Composite(parent,SWT.NONE);
  topComposite.setLayout(new FillLayout(SWT.VERTICAL));
  Group group=new Group(topComposite,SWT.NONE);
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout(2,false));
  Label label=new Label(group,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  label.setLayoutData(gd);
  txtPojoDataSetClass=new Text(group,SWT.BORDER);
  txtPojoDataSetClass.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setPageComplete(false);
  txtPojoDataSetClass.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      virifyClassName();
    }
    private void virifyClassName(){
      String name=txtPojoDataSetClass.getText().trim();
      setMessage(Messages.getString(""String_Node_Str""));
      if (name.isEmpty()) {
        setMessage(Messages.getString(""String_Node_Str""),ERROR);
        setPageComplete(false);
      }
      setPageComplete(true);
    }
  }
);
  Button browseButton=new Button(group,SWT.NONE);
  browseButton.setText(Messages.getString(""String_Node_Str""));
  browseButton.setToolTipText(Messages.getString(""String_Node_Str""));
  browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (classLoader == null || filteredClassNames == null)       initPageInfos();
      ClassInputDialog cid=new ClassInputDialog(getControl().getShell(),filteredClassNames,txtPojoDataSetClass.getText().trim());
      cid.open();
      if (cid.getInput() != null) {
        txtPojoDataSetClass.setText(cid.getInput().trim());
      }
    }
  }
);
  label=new Label(group,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  label.setLayoutData(gd);
  txtAppContextKey=new Text(group,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  txtAppContextKey.setLayoutData(gd);
  txtAppContextKey.setText(APP_CONTEXT_KEY_PREFIX + this.getInitializationDesign().getName().toUpperCase());
  this.setControl(topComposite);
  this.design=this.getInitializationDesign();
  HelpUtil.setSystemHelp(topComposite,HelpUtil.CONEXT_ID_DATASET_POJO_PROPS);
}","@Override public void createPageCustomControl(Composite parent){
  Composite topComposite=new Composite(parent,SWT.NONE);
  topComposite.setLayout(new FillLayout(SWT.VERTICAL));
  Group group=new Group(topComposite,SWT.NONE);
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout(2,false));
  Label label=new Label(group,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  label.setLayoutData(gd);
  txtPojoDataSetClass=new Text(group,SWT.BORDER);
  txtPojoDataSetClass.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setPageComplete(false);
  txtPojoDataSetClass.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      virifyClassName();
    }
    private void virifyClassName(){
      String name=txtPojoDataSetClass.getText().trim();
      setMessage(Messages.getString(""String_Node_Str""));
      if (name.trim().length() == 0) {
        setMessage(Messages.getString(""String_Node_Str""),ERROR);
        setPageComplete(false);
      }
      setPageComplete(true);
    }
  }
);
  Button browseButton=new Button(group,SWT.NONE);
  browseButton.setText(Messages.getString(""String_Node_Str""));
  browseButton.setToolTipText(Messages.getString(""String_Node_Str""));
  browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (classLoader == null || filteredClassNames == null)       initPageInfos();
      ClassInputDialog cid=new ClassInputDialog(getControl().getShell(),filteredClassNames,txtPojoDataSetClass.getText().trim());
      cid.open();
      if (cid.getInput() != null) {
        txtPojoDataSetClass.setText(cid.getInput().trim());
      }
    }
  }
);
  label=new Label(group,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  label.setLayoutData(gd);
  txtAppContextKey=new Text(group,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  txtAppContextKey.setLayoutData(gd);
  txtAppContextKey.setText(APP_CONTEXT_KEY_PREFIX + this.getInitializationDesign().getName().toUpperCase());
  this.setControl(topComposite);
  this.design=this.getInitializationDesign();
  HelpUtil.setSystemHelp(topComposite,HelpUtil.CONEXT_ID_DATASET_POJO_PROPS);
}",0.9943785134291068
65408,"private void virifyClassName(){
  String name=txtPojoDataSetClass.getText().trim();
  setMessage(Messages.getString(""String_Node_Str""));
  if (name.isEmpty()) {
    setMessage(Messages.getString(""String_Node_Str""),ERROR);
    setPageComplete(false);
  }
  setPageComplete(true);
}","private void virifyClassName(){
  String name=txtPojoDataSetClass.getText().trim();
  setMessage(Messages.getString(""String_Node_Str""));
  if (name.trim().length() == 0) {
    setMessage(Messages.getString(""String_Node_Str""),ERROR);
    setPageComplete(false);
  }
  setPageComplete(true);
}",0.9492119089316988
65409,"/** 
 * Copy series definition from one chart model to another.
 * @param srcCM
 * @param targetCM
 * @since 2.5
 */
public static void copyChartSeriesDefinition(Chart srcCM,Chart targetCM){
  boolean isSameType=srcCM.getType().equals(targetCM.getType());
  EList<SeriesDefinition> srcRsds=ChartUtil.getBaseSeriesDefinitions(srcCM);
  EList<SeriesDefinition> tagRsds=ChartUtil.getBaseSeriesDefinitions(targetCM);
  for (int i=0; i < srcRsds.size(); i++) {
    SeriesDefinition sd=srcRsds.get(i);
    SeriesDefinition tagSD=null;
    if (i >= tagRsds.size()) {
      tagSD=SeriesDefinitionImpl.create();
      if (targetCM instanceof ChartWithAxes) {
        ((ChartWithAxes)targetCM).getAxes().get(0).getSeriesDefinitions().add(tagSD);
      }
 else       if (targetCM instanceof ChartWithoutAxes) {
        ((ChartWithoutAxes)targetCM).getSeriesDefinitions().add(tagSD);
      }
    }
 else {
      tagSD=tagRsds.get(i);
    }
    copySDQueryAttributes(sd,tagSD);
  }
  if (targetCM instanceof ChartWithAxes) {
    EList<Axis> tagAxisList=((ChartWithAxes)targetCM).getAxes().get(0).getAssociatedAxes();
    if (srcCM instanceof ChartWithAxes) {
      EList<Axis> srcAxisList=((ChartWithAxes)srcCM).getAxes().get(0).getAssociatedAxes();
      if (tagAxisList.size() > srcAxisList.size()) {
        for (int i=(tagAxisList.size() - 1); i >= srcAxisList.size(); i--) {
          tagAxisList.remove(i);
        }
      }
      if (isSameType) {
        for (int i=0; i < srcAxisList.size(); i++) {
          if (i >= tagAxisList.size()) {
            tagAxisList.add(srcAxisList.get(i).copyInstance());
          }
          srcRsds=srcAxisList.get(i).getSeriesDefinitions();
          tagRsds=tagAxisList.get(i).getSeriesDefinitions();
          copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
        }
      }
 else {
        int minsize=srcAxisList.size() > tagAxisList.size() ? tagAxisList.size() : srcAxisList.size();
        for (int i=0; i < minsize; i++) {
          srcRsds=srcAxisList.get(i).getSeriesDefinitions();
          tagRsds=tagAxisList.get(i).getSeriesDefinitions();
          copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
        }
      }
    }
 else {
      srcRsds=((ChartWithoutAxes)srcCM).getSeriesDefinitions().get(0).getSeriesDefinitions();
      if (tagAxisList.size() > 1) {
        for (int i=1; i < tagAxisList.size(); i++) {
          tagAxisList.remove(i);
        }
      }
      tagRsds=tagAxisList.get(0).getSeriesDefinitions();
      copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
    }
  }
 else {
    tagRsds=((ChartWithoutAxes)targetCM).getSeriesDefinitions().get(0).getSeriesDefinitions();
    if (srcCM instanceof ChartWithAxes) {
      srcRsds=((ChartWithAxes)srcCM).getAxes().get(0).getAssociatedAxes().get(0).getSeriesDefinitions();
    }
 else {
      srcRsds=((ChartWithoutAxes)srcCM).getSeriesDefinitions().get(0).getSeriesDefinitions();
    }
    copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
  }
}","/** 
 * Copy series definition from one chart model to another.
 * @param srcCM
 * @param targetCM
 * @since 2.5
 */
public static void copyChartSeriesDefinition(Chart srcCM,Chart targetCM){
  boolean isSameType=srcCM.getType().equals(targetCM.getType());
  EList<SeriesDefinition> srcRsds=ChartUtil.getBaseSeriesDefinitions(srcCM);
  EList<SeriesDefinition> tagRsds=ChartUtil.getBaseSeriesDefinitions(targetCM);
  for (int i=0; i < srcRsds.size(); i++) {
    SeriesDefinition sd=srcRsds.get(i);
    SeriesDefinition tagSD=null;
    if (i >= tagRsds.size()) {
      tagSD=SeriesDefinitionImpl.create();
      if (targetCM instanceof ChartWithAxes) {
        ((ChartWithAxes)targetCM).getAxes().get(0).getSeriesDefinitions().add(tagSD);
      }
 else       if (targetCM instanceof ChartWithoutAxes) {
        ((ChartWithoutAxes)targetCM).getSeriesDefinitions().add(tagSD);
      }
    }
 else {
      tagSD=tagRsds.get(i);
    }
    copySDQueryAttributes(sd,tagSD);
    if (srcCM instanceof ChartWithAxes && targetCM instanceof ChartWithAxes) {
      if (((ChartWithAxes)srcCM).getAxes().get(0).isSetType()) {
        ((ChartWithAxes)targetCM).getAxes().get(0).setType(((ChartWithAxes)srcCM).getAxes().get(0).getType());
      }
    }
  }
  if (targetCM instanceof ChartWithAxes) {
    EList<Axis> tagAxisList=((ChartWithAxes)targetCM).getAxes().get(0).getAssociatedAxes();
    if (srcCM instanceof ChartWithAxes) {
      EList<Axis> srcAxisList=((ChartWithAxes)srcCM).getAxes().get(0).getAssociatedAxes();
      if (tagAxisList.size() > srcAxisList.size()) {
        for (int i=(tagAxisList.size() - 1); i >= srcAxisList.size(); i--) {
          tagAxisList.remove(i);
        }
      }
      if (isSameType) {
        for (int i=0; i < srcAxisList.size(); i++) {
          if (i >= tagAxisList.size()) {
            tagAxisList.add(srcAxisList.get(i).copyInstance());
          }
          srcRsds=srcAxisList.get(i).getSeriesDefinitions();
          tagRsds=tagAxisList.get(i).getSeriesDefinitions();
          copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
          if (srcAxisList.get(i).isSetType()) {
            tagAxisList.get(i).setType(srcAxisList.get(i).getType());
          }
        }
      }
 else {
        int minsize=srcAxisList.size() > tagAxisList.size() ? tagAxisList.size() : srcAxisList.size();
        for (int i=0; i < minsize; i++) {
          srcRsds=srcAxisList.get(i).getSeriesDefinitions();
          tagRsds=tagAxisList.get(i).getSeriesDefinitions();
          copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
          if (srcAxisList.get(i).isSetType()) {
            tagAxisList.get(i).setType(srcAxisList.get(i).getType());
          }
        }
      }
    }
 else {
      srcRsds=((ChartWithoutAxes)srcCM).getSeriesDefinitions().get(0).getSeriesDefinitions();
      if (tagAxisList.size() > 1) {
        for (int i=1; i < tagAxisList.size(); i++) {
          tagAxisList.remove(i);
        }
      }
      tagRsds=tagAxisList.get(0).getSeriesDefinitions();
      copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
    }
  }
 else {
    tagRsds=((ChartWithoutAxes)targetCM).getSeriesDefinitions().get(0).getSeriesDefinitions();
    if (srcCM instanceof ChartWithAxes) {
      srcRsds=((ChartWithAxes)srcCM).getAxes().get(0).getAssociatedAxes().get(0).getSeriesDefinitions();
    }
 else {
      srcRsds=((ChartWithoutAxes)srcCM).getSeriesDefinitions().get(0).getSeriesDefinitions();
    }
    copySDListQueryAttributes(srcRsds,tagRsds,isSameType);
  }
}",0.4433482349314012
65410,"private boolean updateHideRule(DesignElementHandle element,String format,boolean checked,Expression expression) throws Exception {
  if (checked) {
    HideRuleHandle hideHandle=getHideRuleHandle(element,format);
    if (hideHandle == null) {
      try {
        createHideRuleHandle(element,format,expression);
      }
 catch (      SemanticException e) {
        ExceptionUtil.handle(e);
      }
    }
 else {
      hideHandle.setExpressionProperty(HideRule.VALUE_EXPR_MEMBER,expression);
    }
  }
 else {
    Iterator visibilities=visibilityRulesIterator(element);
    if (visibilities == null) {
      return true;
    }
    while (visibilities.hasNext()) {
      HideRuleHandle handle=(HideRuleHandle)visibilities.next();
      if (format.equalsIgnoreCase(handle.getFormat())) {
        try {
          getVisibilityPropertyHandle(element).removeItem(handle.getStructure());
        }
 catch (        PropertyValueException e) {
          ExceptionUtil.handle(e);
        }
        return true;
      }
    }
  }
  return true;
}","private boolean updateHideRule(DesignElementHandle element,String format,boolean checked,Expression expression) throws Exception {
  if (checked) {
    HideRuleHandle hideHandle=getHideRuleHandle(element,format);
    if (hideHandle == null) {
      try {
        createHideRuleHandle(element,format,expression);
      }
 catch (      SemanticException e) {
        ExceptionUtil.handle(e);
      }
    }
 else {
      hideHandle.setExpressionProperty(HideRule.VALUE_EXPR_MEMBER,expression);
    }
  }
 else {
    Iterator visibilities=visibilityRulesIterator(element);
    if (visibilities == null) {
      return true;
    }
    while (visibilities.hasNext()) {
      HideRuleHandle handle=(HideRuleHandle)visibilities.next();
      if (format.equalsIgnoreCase(handle.getFormat())) {
        try {
          if (DEUtil.getMultiSelectionHandle((List)input).isExtendedElements()) {
            PropertyHandle propertyHandle=getVisibilityPropertyHandle(element);
            propertyHandle.getItems().clear();
          }
 else {
            getVisibilityPropertyHandle(element).removeItem(handle.getStructure());
          }
        }
 catch (        PropertyValueException e) {
          ExceptionUtil.handle(e);
        }
        return true;
      }
    }
  }
  return true;
}",0.8949416342412452
65411,"/** 
 * @return
 */
public static long computeMemoryBufferSize(Map appContext){
  if (true)   return 128 * 1024 * 1024;
  if (appContext == null)   return 0;
  if (appContext.get(TEST_MEM_BUFFER_SIZE) != null) {
    return populateMemBufferSize(appContext.get(TEST_MEM_BUFFER_SIZE));
  }
  return populateMemBufferSize(appContext.get(DataEngine.MEMORY_BUFFER_SIZE)) * 1024 * 1024;
}","/** 
 * @return
 */
public static long computeMemoryBufferSize(Map appContext){
  if (appContext == null)   return 0;
  if (appContext.get(TEST_MEM_BUFFER_SIZE) != null) {
    return populateMemBufferSize(appContext.get(TEST_MEM_BUFFER_SIZE));
  }
  return populateMemBufferSize(appContext.get(DataEngine.MEMORY_BUFFER_SIZE)) * 1024 * 1024;
}",0.2845303867403315
65412,"@Override public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  int result=DNDService.LOGIC_UNKNOW;
  if (transfer.equals(DesignerPaletteFactory.TIMEPERIOD_TEMPLATE) && target instanceof TableCellEditPart) {
    CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
    if (DEUtil.getBindingHolder(cellHandle) instanceof TableHandle) {
      TableHandle tableHandle=(TableHandle)(DEUtil.getBindingHolder(cellHandle));
      if (tableHandle.getLinkedDataModel() != null) {
        result=DNDService.LOGIC_TRUE;
      }
    }
  }
  return result;
}","public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  int result=DNDService.LOGIC_UNKNOW;
  if (transfer.equals(DesignerPaletteFactory.TIMEPERIOD_TEMPLATE) && target instanceof TableCellEditPart) {
    CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
    if (DEUtil.getBindingHolder(cellHandle) instanceof TableHandle) {
      result=DNDService.LOGIC_TRUE;
    }
  }
  return result;
}",0.8218390804597702
65413,"@Override public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof TableCellEditPart) {
    TableCellEditPart editPart=(TableCellEditPart)target;
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    if (DesignerPaletteFactory.TIMEPERIOD_TEMPLATE.equals(transfer)) {
      stack.startTrans(""String_Node_Str"");
    }
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
    try {
      DesignElementHandle targetElement=null;
      if (target instanceof TableCellEditPart) {
        CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
        cellHandle.addElement(dataHandle,CellHandle.CONTENT_SLOT);
        targetElement=cellHandle;
      }
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setLinkedModelTimePeriod(true);
      dialog.setInput(dataHandle,null,targetElement);
      dialog.setAggreate(true);
      dialog.setTimePeriod(true);
      if (dialog.open() == Window.OK) {
        dataHandle.setResultSetColumn(dialog.getBindingColumn().getName());
        stack.commit();
      }
 else {
        stack.rollback();
      }
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionHandler.handle(e);
    }
  }
  return true;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof TableCellEditPart) {
    TableCellEditPart editPart=(TableCellEditPart)target;
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    if (DesignerPaletteFactory.TIMEPERIOD_TEMPLATE.equals(transfer)) {
      stack.startTrans(""String_Node_Str"");
    }
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
    try {
      DesignElementHandle targetElement=null;
      if (target instanceof TableCellEditPart) {
        CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
        cellHandle.addElement(dataHandle,CellHandle.CONTENT_SLOT);
        targetElement=cellHandle;
      }
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setLinkedModelTimePeriod(true);
      dialog.setInput(dataHandle,null,targetElement);
      dialog.setAggreate(true);
      dialog.setTimePeriod(true);
      if (dialog.open() == Window.OK) {
        dataHandle.setResultSetColumn(dialog.getBindingColumn().getName());
        stack.commit();
      }
 else {
        stack.rollback();
      }
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionHandler.handle(e);
    }
  }
  return true;
}",0.9962207105064248
65414,"protected boolean fromCache() throws DataException {
  if (queryDefn.isSummaryQuery() && queryDefn.getQueryExecutionHints().enablePushDown()) {
    if (querySpec != null && querySpec.getResultSetSpecification() != null && !querySpec.getResultSetSpecification().isEmpty()) {
      if (appContext.get(DataEngine.QUERY_EXECUTION_SESSION_ID) == null) {
        dataEngine.getSession().getDataSetCacheManager().clearCache(dataEngine.getDataSourceDesign(this.dataSet.getDesign().getDataSourceName()),this.dataSet.getDesign());
      }
    }
  }
  return super.fromCache();
}","protected boolean fromCache() throws DataException {
  if (queryDefn.getQueryExecutionHints().enablePushDown()) {
    if (querySpec != null && querySpec.getResultSetSpecification() != null && !querySpec.getResultSetSpecification().isEmpty()) {
      if (appContext.get(DataEngine.QUERY_EXECUTION_SESSION_ID) == null) {
        dataEngine.getSession().getDataSetCacheManager().clearCache(dataEngine.getDataSourceDesign(this.dataSet.getDesign().getDataSourceName()),this.dataSet.getDesign());
      }
    }
  }
  return super.fromCache();
}",0.972875226039783
65415,"/** 
 * Creates the top level control for this dialog page under the given parent composite. <p> Implementors are responsible for ensuring that the created control can be accessed via <code>getControl</code> </p>
 * @param parent the parent composite
 */
public void createControl(Composite parent){
  helper=new DataSetBasePageHelper();
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  final Group group=new Group(composite,SWT.NONE);
  group.setLayout(new GridLayout());
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,8));
  wizardFilter=new WizardFilter();
  dataSourceFilteredTree=new FilteredTree(group,SWT.BORDER | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL,this.wizardFilter,true);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=300;
  treeData.widthHint=600;
  dataSourceFilteredTree.setLayoutData(treeData);
  SelectionListener listener=new SelectionListener(){
    TreeItem parent=null;
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent event){
      if (event.item.getData() instanceof DataSourceHandle) {
        dataSetTypeChooser.getCombo().setEnabled(true);
        if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
          parent=((TreeItem)event.item).getParentItem();
          doDataSourceSelectionChanged(parent.getData());
        }
        setPageComplete(!hasWizard() && (getMessageType() != ERROR));
      }
 else {
        dataSetTypeChooser.getCombo().clearSelection();
        dataSetTypeChooser.getCombo().setEnabled(false);
        setPageComplete(false);
      }
    }
  }
;
  dataSourceFilteredTree.getViewer().getTree().addSelectionListener(listener);
  createDataSetTypeViewer(composite);
  setDataSourceTreeViewer();
  setPageStatus();
  new Label(composite,SWT.RIGHT).setText(Messages.getString(""String_Node_Str""));
  nameEditor=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SET_ELEMENT);
  if (name != null) {
    nameEditor.setText(Utility.getUniqueDataSetName(name));
  }
 else {
    nameEditor.setText(Utility.getUniqueDataSetName(Messages.getString(""String_Node_Str"")));
  }
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.setToolTipText(Messages.getString(""String_Node_Str""));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (StringUtil.isBlank(nameEditor.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(nameEditor.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(CREATE_PROMPT);
      }
      setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
      nameEditor.setFocus();
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_NEW);
}","/** 
 * Creates the top level control for this dialog page under the given parent composite. <p> Implementors are responsible for ensuring that the created control can be accessed via <code>getControl</code> </p>
 * @param parent the parent composite
 */
public void createControl(Composite parent){
  helper=new DataSetBasePageHelper();
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  final Group group=new Group(composite,SWT.NONE);
  group.setLayout(new GridLayout());
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,8));
  wizardFilter=new WizardFilter();
  dataSourceFilteredTree=new FilteredTree(group,SWT.BORDER | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL,this.wizardFilter,true);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=300;
  treeData.widthHint=600;
  dataSourceFilteredTree.setLayoutData(treeData);
  SelectionListener listener=new SelectionListener(){
    TreeItem parent=null;
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent event){
      if (event.item.getData() instanceof DataSourceHandle) {
        dataSetTypeChooser.getCombo().setEnabled(true);
        if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
          parent=((TreeItem)event.item).getParentItem();
          doDataSourceSelectionChanged(parent.getData());
        }
        setPageComplete(!hasWizard() && (getMessageType() != ERROR));
      }
 else {
        dataSetTypeChooser.getCombo().clearSelection();
        dataSetTypeChooser.getCombo().setEnabled(false);
        setPageComplete(false);
      }
      dataSourceFilteredTree.getViewer().getTree().setFocus();
    }
  }
;
  dataSourceFilteredTree.getViewer().getTree().addSelectionListener(listener);
  createDataSetTypeViewer(composite);
  setDataSourceTreeViewer();
  setPageStatus();
  new Label(composite,SWT.RIGHT).setText(Messages.getString(""String_Node_Str""));
  nameEditor=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SET_ELEMENT);
  if (name != null) {
    nameEditor.setText(Utility.getUniqueDataSetName(name));
  }
 else {
    nameEditor.setText(Utility.getUniqueDataSetName(Messages.getString(""String_Node_Str"")));
  }
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.setToolTipText(Messages.getString(""String_Node_Str""));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (StringUtil.isBlank(nameEditor.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(nameEditor.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(CREATE_PROMPT);
      }
      setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
      nameEditor.setFocus();
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_NEW);
}",0.9909443725743856
65416,"public void widgetSelected(SelectionEvent event){
  if (event.item.getData() instanceof DataSourceHandle) {
    dataSetTypeChooser.getCombo().setEnabled(true);
    if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
      parent=((TreeItem)event.item).getParentItem();
      doDataSourceSelectionChanged(parent.getData());
    }
    setPageComplete(!hasWizard() && (getMessageType() != ERROR));
  }
 else {
    dataSetTypeChooser.getCombo().clearSelection();
    dataSetTypeChooser.getCombo().setEnabled(false);
    setPageComplete(false);
  }
}","public void widgetSelected(SelectionEvent event){
  if (event.item.getData() instanceof DataSourceHandle) {
    dataSetTypeChooser.getCombo().setEnabled(true);
    if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
      parent=((TreeItem)event.item).getParentItem();
      doDataSourceSelectionChanged(parent.getData());
    }
    setPageComplete(!hasWizard() && (getMessageType() != ERROR));
  }
 else {
    dataSetTypeChooser.getCombo().clearSelection();
    dataSetTypeChooser.getCombo().setEnabled(false);
    setPageComplete(false);
  }
  dataSourceFilteredTree.getViewer().getTree().setFocus();
}",0.950544844928751
65417,"/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 * @throws AdapterException 
 */
public static void registerDataObject(ScriptContext context,ILinkedResult source) throws AdapterException {
  try {
    Scriptable targetScope=((IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(context);
    int type=((ILinkedResult)source).getCurrentResultType();
    if (type == ILinkedResult.TYPE_TABLE) {
      targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResult)source,targetScope));
    }
 else     if (type == ILinkedResult.TYPE_CUBE && source.getCurrentResult() != null) {
      Scriptable scope=((ICubeCursor)source.getCurrentResult()).getScope();
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      if (scope.get(""String_Node_Str"",scope) != null && scope.get(""String_Node_Str"",scope) instanceof Scriptable)       targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    }
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}","/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 * @throws AdapterException 
 */
public static void registerDataObject(ScriptContext context,ILinkedResult source) throws AdapterException {
  try {
    Scriptable targetScope=((IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(context);
    int type=((ILinkedResult)source).getCurrentResultType();
    if (type == ILinkedResult.TYPE_TABLE) {
      targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResult)source,targetScope));
      targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResult)source,targetScope));
    }
 else     if (type == ILinkedResult.TYPE_CUBE && source.getCurrentResult() != null) {
      Scriptable scope=((ICubeCursor)source.getCurrentResult()).getScope();
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      if (scope.get(""String_Node_Str"",scope) != null && scope.get(""String_Node_Str"",scope) instanceof Scriptable)       targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    }
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}",0.968131868131868
65418,"/** 
 * Checks the current element name. Done when adding a newly created element where the element name is already set on the new element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
public void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,null,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,null,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    if ((module instanceof Library) && (element.getContainer() instanceof Library)) {
      throw new NameException(element,null,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    }
  }
 else {
    PropertyDefn propDefn=(PropertyDefn)metaData.getProperty(IDesignElementModel.NAME_PROP);
    if (propDefn == null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    try {
      name=(String)propDefn.validateValue(module,element,name);
    }
 catch (    PropertyValueException e) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_NAME);
    }
    if (element instanceof StyleElement) {
      if (!styleNamePattern.matcher(name).matches())       throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_STYLE_NAME);
    }
    if (!isNameValidInContext(name))     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     return;
    if (!element.isManagedByNameSpace()) {
      return;
    }
    NameExecutor executor=new NameExecutor(module,element);
    DesignElement existedElement=executor.getElement(name);
    if (existedElement != null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}","/** 
 * Checks the current element name. Done when adding a newly created element where the element name is already set on the new element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
public void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (!element.isManagedByNameSpace()) {
      return;
    }
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,null,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,null,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    if ((module instanceof Library) && (element.getContainer() instanceof Library)) {
      throw new NameException(element,null,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    }
  }
 else {
    PropertyDefn propDefn=(PropertyDefn)metaData.getProperty(IDesignElementModel.NAME_PROP);
    if (propDefn == null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    try {
      name=(String)propDefn.validateValue(module,element,name);
    }
 catch (    PropertyValueException e) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_NAME);
    }
    if (element instanceof StyleElement) {
      if (!styleNamePattern.matcher(name).matches())       throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_STYLE_NAME);
    }
    if (!isNameValidInContext(name))     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     return;
    if (!element.isManagedByNameSpace()) {
      return;
    }
    NameExecutor executor=new NameExecutor(module,element);
    DesignElement existedElement=executor.getElement(name);
    if (existedElement != null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}",0.9845018450184502
65419,"/** 
 * Constructs a Javascript expression
 * @param text Javascript expression text
 * @param dataType Return data type of the expression
 */
public ScriptExpression(String text,int dataType){
  super(dataType);
  this.exprText=text;
}","/** 
 * Constructs a script expression, it could be a Constant expression or javascript expression with tag of  BaseExpression.javaScriptId or BaseExpression.constantId.
 * @param text  expression text
 * @param dataType Return data type of the expression
 */
public ScriptExpression(String text,int dataType){
  super(dataType);
  this.exprText=text;
}",0.7640067911714771
65420,"/** 
 * Sets the Javascript expression text
 */
public void setText(String text){
  exprText=text;
}","/** 
 * Sets the expression text
 */
public void setText(String text){
  exprText=text;
}",0.9417989417989416
65421,"/** 
 * Utility method to create java script expression
 * @param expr
 * @return
 */
public static IScriptExpression createJavaScriptExpression(String jsExppression){
  ScriptExpression scriptExpression=new ScriptExpression(jsExppression);
  return scriptExpression;
}","/** 
 * Utility method to create java script expression
 * @param expr
 * @return
 */
public static IScriptExpression createJavaScriptExpression(String jsExppression){
  ScriptExpression scriptExpression=new ScriptExpression(jsExppression);
  scriptExpression.setScriptId(BaseExpression.javaScriptId);
  return scriptExpression;
}",0.8981636060100167
65422,"/** 
 * Utility method to create constant expression
 * @param expr
 * @return
 */
public static IScriptExpression createConstantExpression(String constantExpr){
  ScriptExpression scriptExpression=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(constantExpr));
  scriptExpression.setScriptId(BaseExpression.constantId);
  scriptExpression.setHandle(constantExpr);
  return scriptExpression;
}","/** 
 * Utility method to create constant expression
 * @param expr
 * @return
 */
public static IScriptExpression createConstantExpression(String constantExpr){
  ScriptExpression scriptExpression=new ScriptExpression(constantExpr);
  scriptExpression.setScriptId(BaseExpression.constantId);
  scriptExpression.setHandle(constantExpr);
  return scriptExpression;
}",0.9121447028423773
65423,"/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws BirtException 
 */
public static Object evalExpr(IBaseExpression expr,ScriptContext cx,String source,int lineNo) throws DataException {
  try {
    if (logger.isLoggable(Level.FINER))     logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
    Object result;
    if (expr == null) {
      result=null;
    }
 else     if (expr instanceof IConditionalExpression) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        result=Boolean.valueOf(((NEvaluator)handle).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),null));
      }
 else {
        ConditionalExpression conditionalExpr=(ConditionalExpression)expr;
        Object expression=evalExpr(conditionalExpr.getExpression(),cx,source,lineNo);
        if (conditionalExpr.getOperand1() instanceof IExpressionCollection) {
          IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
          Object[] exprs=combinedExpr.getExpressions().toArray();
          Object[] opValues=new Object[exprs.length];
          for (int i=0; i < opValues.length; i++) {
            opValues[i]=evalExpr((IBaseExpression)exprs[i],cx,source,lineNo);
          }
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),MiscUtil.flatternMultipleValues(opValues),null);
        }
 else {
          Object Op1=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand1()),cx,source,lineNo);
          Object Op2=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand2()),cx,source,lineNo);
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),new Object[]{Op1,Op2},null);
        }
      }
    }
 else     if (expr instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> testExpr=((ICollectionConditionalExpression)expr).getExpr();
      Collection<Collection<IScriptExpression>> operand=((ICollectionConditionalExpression)expr).getOperand();
      List<Object> testObj=new ArrayList<Object>();
      boolean in=false;
      for (      IScriptExpression se : testExpr) {
        testObj.add(evalExpr(se,cx,source,lineNo));
      }
      for (      Collection<IScriptExpression> op : operand) {
        List<Object> targetObj=new ArrayList<Object>();
        for (        IScriptExpression se : op) {
          if (se == null) {
            targetObj.add(null);
          }
 else {
            if (se.getHandle() == null) {
              se.setHandle(evalExpr(se,cx,source,lineNo));
            }
            targetObj.add(se.getHandle());
          }
        }
        if (compareIgnoreNull(testObj,targetObj) == 0) {
          in=Boolean.TRUE;
          break;
        }
      }
      result=(((ICollectionConditionalExpression)expr).getOperator() == ICollectionConditionalExpression.OP_IN) ? in : (!in);
    }
 else {
      IScriptExpression jsExpr=(IScriptExpression)expr;
      if (BaseExpression.constantId.equals(jsExpr.getScriptId()) && jsExpr.getHandle() != null) {
        result=jsExpr.getHandle();
      }
 else {
        if (BaseExpression.constantId.equals(jsExpr.getScriptId())) {
          result=JavascriptEvalUtil.evaluateJsConstants(jsExpr.getText());
          jsExpr.setHandle(result);
        }
 else         if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
          if (jsExpr.getHandle() instanceof ICompiledScript) {
            result=cx.evaluate((ICompiledScript)jsExpr.getHandle());
          }
 else {
            result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx));
          }
        }
 else {
          result=evaluateJSAsExpr(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),jsExpr.getText(),source,lineNo);
        }
      }
    }
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
    return result;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws BirtException 
 */
public static Object evalExpr(IBaseExpression expr,ScriptContext cx,String source,int lineNo) throws DataException {
  try {
    if (logger.isLoggable(Level.FINER))     logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
    Object result;
    if (expr == null) {
      result=null;
    }
 else     if (expr instanceof IConditionalExpression) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        result=Boolean.valueOf(((NEvaluator)handle).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),null));
      }
 else {
        ConditionalExpression conditionalExpr=(ConditionalExpression)expr;
        Object expression=evalExpr(conditionalExpr.getExpression(),cx,source,lineNo);
        if (conditionalExpr.getOperand1() instanceof IExpressionCollection) {
          IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
          Object[] exprs=combinedExpr.getExpressions().toArray();
          Object[] opValues=new Object[exprs.length];
          for (int i=0; i < opValues.length; i++) {
            opValues[i]=evalExpr((IBaseExpression)exprs[i],cx,source,lineNo);
          }
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),MiscUtil.flatternMultipleValues(opValues),null);
        }
 else {
          Object Op1=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand1()),cx,source,lineNo);
          Object Op2=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand2()),cx,source,lineNo);
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),new Object[]{Op1,Op2},null);
        }
      }
    }
 else     if (expr instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> testExpr=((ICollectionConditionalExpression)expr).getExpr();
      Collection<Collection<IScriptExpression>> operand=((ICollectionConditionalExpression)expr).getOperand();
      List<Object> testObj=new ArrayList<Object>();
      boolean in=false;
      for (      IScriptExpression se : testExpr) {
        testObj.add(evalExpr(se,cx,source,lineNo));
      }
      for (      Collection<IScriptExpression> op : operand) {
        List<Object> targetObj=new ArrayList<Object>();
        for (        IScriptExpression se : op) {
          if (se == null) {
            targetObj.add(null);
          }
 else {
            if (se.getHandle() == null) {
              se.setHandle(evalExpr(se,cx,source,lineNo));
            }
            targetObj.add(se.getHandle());
          }
        }
        if (compareIgnoreNull(testObj,targetObj) == 0) {
          in=Boolean.TRUE;
          break;
        }
      }
      result=(((ICollectionConditionalExpression)expr).getOperator() == ICollectionConditionalExpression.OP_IN) ? in : (!in);
    }
 else {
      IScriptExpression jsExpr=(IScriptExpression)expr;
      if (BaseExpression.constantId.equals(jsExpr.getScriptId()) && jsExpr.getHandle() != null) {
        result=jsExpr.getHandle();
      }
 else {
        if (BaseExpression.constantId.equals(jsExpr.getScriptId())) {
          result=jsExpr.getText();
          jsExpr.setHandle(result);
        }
 else         if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
          if (jsExpr.getHandle() instanceof ICompiledScript) {
            result=cx.evaluate((ICompiledScript)jsExpr.getHandle());
          }
 else {
            result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx));
          }
        }
 else {
          result=evaluateJSAsExpr(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),jsExpr.getText(),source,lineNo);
        }
      }
    }
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
    return result;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9954473025267472
65424,"public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getStringExpression()));
    jsExpr.setScriptId(BaseExpression.constantId);
    jsExpr.setHandle(expr.getExpression());
    return jsExpr;
  }
 else   if (""String_Node_Str"".equals(expr.getType())) {
    return null;
  }
 else {
    if (expr.getStringExpression() == null)     return null;
    jsExpr=new ExpressionAdapter(expr,el);
  }
  return jsExpr;
}","public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(expr.getStringExpression());
    jsExpr.setScriptId(BaseExpression.constantId);
    jsExpr.setHandle(expr.getExpression());
    return jsExpr;
  }
 else   if (""String_Node_Str"".equals(expr.getType())) {
    return null;
  }
 else {
    if (expr.getStringExpression() == null)     return null;
    jsExpr=new ExpressionAdapter(expr,el);
  }
  return jsExpr;
}",0.9235772357723576
65425,"private IScriptExpression adapterExpression(Expression expr){
  if (expr instanceof Expression.Script && ""String_Node_Str"".equals(((Expression.Script)expr).getLanguage())) {
    ScriptExpression scriptExpr=null;
    try {
      scriptExpr=getModelAdapter().adaptJSExpression(expr.getScriptText(),((Expression.Script)expr).getLanguage());
      return new ScriptExpression(scriptExpr.getText());
    }
 catch (    Exception ex) {
    }
  }
 else {
    if (expr.getType() == Expression.CONSTANT) {
      ScriptExpression jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getScriptText()));
      jsExpr.setScriptId(BaseExpression.constantId);
      jsExpr.setHandle(expr.getScriptText());
      return jsExpr;
    }
  }
  return new ScriptExpression(expr.getScriptText());
}","private IScriptExpression adapterExpression(Expression expr){
  if (expr instanceof Expression.Script && ""String_Node_Str"".equals(((Expression.Script)expr).getLanguage())) {
    ScriptExpression scriptExpr=null;
    try {
      scriptExpr=getModelAdapter().adaptJSExpression(expr.getScriptText(),((Expression.Script)expr).getLanguage());
      return new ScriptExpression(scriptExpr.getText());
    }
 catch (    Exception ex) {
    }
  }
 else {
    if (expr.getType() == Expression.CONSTANT) {
      ScriptExpression jsExpr=new ScriptExpression(expr.getScriptText());
      jsExpr.setScriptId(BaseExpression.constantId);
      jsExpr.setHandle(expr.getScriptText());
      return jsExpr;
    }
  }
  return new ScriptExpression(expr.getScriptText());
}",0.9484536082474226
65426,"public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getDisplayItems());
  styleProvider.setIndex(styleProvider.getDisplayItems()[0].toString());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getDisplayItems());
  widthProvider.setIndex(widthProvider.getDisplayItems()[1].toString());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 2;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        Button button=((Button)e.widget);
        if (button.getSelection()) {
          handleBorderSelection(provider);
        }
 else {
          handleBorderDeselection(provider,button);
        }
        previewCanvas.redraw();
      }
    }
);
    button.setData(provider);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      RGB selectedColor=null;
      RGB oldColor=null;
      if (((Button)e.widget).getSelection()) {
        CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
        stack.startTrans(Messages.getString(""String_Node_Str""));
        selectedColor=builder.getRGB();
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation oldInfo=(BorderInfomation)toggleProviders[i].load();
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(selectedColor);
          information.setStyle((String)styleProvider.getItems()[styleCombo.getSelectionIndex()]);
          information.setWidth((String)widthProvider.getItems()[widthCombo.getSelectionIndex()]);
          information.setInheritedColor(oldInfo.getInheritedColor());
          information.setInheritedStyle(oldInfo.getInheritedStyle());
          information.setInheritedWidth(oldInfo.getInheritedWidth());
          information.setDefaultColor(oldInfo.getDefaultColor());
          information.setDefaultStyle(oldInfo.getDefaultStyle());
          information.setDefaultWidth(oldInfo.getDefaultWidth());
          toggles[i].setSelection(true);
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionUtil.handle(e1);
          }
        }
        stack.commit();
      }
 else {
        boolean reset=true;
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
          oldColor=info.getOriginColor();
          selectedColor=builder.getRGB();
          if (!(info.getOriginStyle().equals((String)styleProvider.getItems()[styleCombo.getSelectionIndex()])) || !((oldColor == null && selectedColor == null) || (oldColor != null && oldColor.equals(selectedColor))) || !(resolveEmptyWidth(info).equals((String)widthProvider.getItems()[widthCombo.getSelectionIndex()]))) {
            reset=false;
            break;
          }
        }
        if (reset) {
          CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
          stack.startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
            toggles[i].setSelection(false);
            try {
              toggleProviders[i].reset();
            }
 catch (            Exception e1) {
              ExceptionUtil.handle(e1);
            }
          }
          stack.commit();
        }
 else {
          CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
          stack.startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            BorderInfomation oldInfo=(BorderInfomation)toggleProviders[i].load();
            BorderInfomation information=new BorderInfomation();
            information.setPosition(toggleProviders[i].getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleProvider.getItems()[styleCombo.getSelectionIndex()]);
            information.setWidth((String)widthProvider.getItems()[widthCombo.getSelectionIndex()]);
            information.setInheritedColor(oldInfo.getInheritedColor());
            information.setInheritedStyle(oldInfo.getInheritedStyle());
            information.setInheritedWidth(oldInfo.getInheritedWidth());
            information.setDefaultColor(oldInfo.getDefaultColor());
            information.setDefaultStyle(oldInfo.getDefaultStyle());
            information.setDefaultWidth(oldInfo.getDefaultWidth());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              toggleProviders[i].save(information);
            }
 catch (            Exception e1) {
              ExceptionUtil.handle(e1);
            }
          }
          ((Button)e.widget).setSelection(true);
          stack.commit();
        }
      }
      previewCanvas.redraw();
    }
  }
);
  Button noneButton=new Button(composite,SWT.PUSH);
  noneButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_NONE));
  noneButton.setToolTipText(Messages.getString(""String_Node_Str""));
  noneButton.setLayoutData(new GridData());
  noneButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
      stack.startTrans(Messages.getString(""String_Node_Str""));
      for (int i=0; i < toggleProviders.length; i++) {
        BorderInfomation oldInfo=(BorderInfomation)toggleProviders[i].load();
        BorderInfomation information=new BorderInfomation();
        information.setPosition(toggleProviders[i].getPosition());
        information.setStyle(DesignChoiceConstants.LINE_STYLE_NONE);
        information.setInheritedColor(oldInfo.getInheritedColor());
        information.setInheritedStyle(oldInfo.getInheritedStyle());
        information.setInheritedWidth(oldInfo.getInheritedWidth());
        information.setDefaultColor(oldInfo.getDefaultColor());
        information.setDefaultStyle(oldInfo.getDefaultStyle());
        information.setDefaultWidth(oldInfo.getDefaultWidth());
        toggles[i].setSelection(true);
        previewCanvas.setBorderInfomation(information);
        restoreInfo=information;
        try {
          toggleProviders[i].save(information);
        }
 catch (        Exception e1) {
          ExceptionUtil.handle(e1);
        }
      }
      stack.commit();
      previewCanvas.redraw();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  previewCanvas.setListener(this);
  return content;
}","public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getDisplayItems());
  styleProvider.setIndex(styleProvider.getDisplayItems()[0].toString());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getDisplayItems());
  widthProvider.setIndex(widthProvider.getDisplayItems()[1].toString());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 2;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        Button button=((Button)e.widget);
        if (button.getSelection()) {
          handleBorderSelection(provider);
        }
 else {
          handleBorderDeselection(provider,button);
        }
        previewCanvas.redraw();
      }
    }
);
    button.setData(provider);
    button.getAccessible().addAccessibleListener(new AccessibleAdapter(){
      public void getName(      AccessibleEvent e){
        Accessible accessible=(Accessible)e.getSource();
        Button item=(Button)accessible.getControl();
        if (item != null) {
          e.result=item.getToolTipText();
        }
      }
    }
);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.getAccessible().addAccessibleListener(new AccessibleAdapter(){
    public void getName(    AccessibleEvent e){
      Accessible accessible=(Accessible)e.getSource();
      Button item=(Button)accessible.getControl();
      if (item != null) {
        e.result=item.getToolTipText();
      }
    }
  }
);
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      RGB selectedColor=null;
      RGB oldColor=null;
      if (((Button)e.widget).getSelection()) {
        CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
        stack.startTrans(Messages.getString(""String_Node_Str""));
        selectedColor=builder.getRGB();
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation oldInfo=(BorderInfomation)toggleProviders[i].load();
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(selectedColor);
          information.setStyle((String)styleProvider.getItems()[styleCombo.getSelectionIndex()]);
          information.setWidth((String)widthProvider.getItems()[widthCombo.getSelectionIndex()]);
          information.setInheritedColor(oldInfo.getInheritedColor());
          information.setInheritedStyle(oldInfo.getInheritedStyle());
          information.setInheritedWidth(oldInfo.getInheritedWidth());
          information.setDefaultColor(oldInfo.getDefaultColor());
          information.setDefaultStyle(oldInfo.getDefaultStyle());
          information.setDefaultWidth(oldInfo.getDefaultWidth());
          toggles[i].setSelection(true);
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionUtil.handle(e1);
          }
        }
        stack.commit();
      }
 else {
        boolean reset=true;
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
          oldColor=info.getOriginColor();
          selectedColor=builder.getRGB();
          if (!(info.getOriginStyle().equals((String)styleProvider.getItems()[styleCombo.getSelectionIndex()])) || !((oldColor == null && selectedColor == null) || (oldColor != null && oldColor.equals(selectedColor))) || !(resolveEmptyWidth(info).equals((String)widthProvider.getItems()[widthCombo.getSelectionIndex()]))) {
            reset=false;
            break;
          }
        }
        if (reset) {
          CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
          stack.startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
            toggles[i].setSelection(false);
            try {
              toggleProviders[i].reset();
            }
 catch (            Exception e1) {
              ExceptionUtil.handle(e1);
            }
          }
          stack.commit();
        }
 else {
          CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
          stack.startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            BorderInfomation oldInfo=(BorderInfomation)toggleProviders[i].load();
            BorderInfomation information=new BorderInfomation();
            information.setPosition(toggleProviders[i].getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleProvider.getItems()[styleCombo.getSelectionIndex()]);
            information.setWidth((String)widthProvider.getItems()[widthCombo.getSelectionIndex()]);
            information.setInheritedColor(oldInfo.getInheritedColor());
            information.setInheritedStyle(oldInfo.getInheritedStyle());
            information.setInheritedWidth(oldInfo.getInheritedWidth());
            information.setDefaultColor(oldInfo.getDefaultColor());
            information.setDefaultStyle(oldInfo.getDefaultStyle());
            information.setDefaultWidth(oldInfo.getDefaultWidth());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              toggleProviders[i].save(information);
            }
 catch (            Exception e1) {
              ExceptionUtil.handle(e1);
            }
          }
          ((Button)e.widget).setSelection(true);
          stack.commit();
        }
      }
      previewCanvas.redraw();
    }
  }
);
  Button noneButton=new Button(composite,SWT.PUSH);
  noneButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_NONE));
  noneButton.setToolTipText(Messages.getString(""String_Node_Str""));
  noneButton.getAccessible().addAccessibleListener(new AccessibleAdapter(){
    public void getName(    AccessibleEvent e){
      Accessible accessible=(Accessible)e.getSource();
      Button item=(Button)accessible.getControl();
      if (item != null) {
        e.result=item.getToolTipText();
      }
    }
  }
);
  noneButton.setLayoutData(new GridData());
  noneButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
      stack.startTrans(Messages.getString(""String_Node_Str""));
      for (int i=0; i < toggleProviders.length; i++) {
        BorderInfomation oldInfo=(BorderInfomation)toggleProviders[i].load();
        BorderInfomation information=new BorderInfomation();
        information.setPosition(toggleProviders[i].getPosition());
        information.setStyle(DesignChoiceConstants.LINE_STYLE_NONE);
        information.setInheritedColor(oldInfo.getInheritedColor());
        information.setInheritedStyle(oldInfo.getInheritedStyle());
        information.setInheritedWidth(oldInfo.getInheritedWidth());
        information.setDefaultColor(oldInfo.getDefaultColor());
        information.setDefaultStyle(oldInfo.getDefaultStyle());
        information.setDefaultWidth(oldInfo.getDefaultWidth());
        toggles[i].setSelection(true);
        previewCanvas.setBorderInfomation(information);
        restoreInfo=information;
        try {
          toggleProviders[i].save(information);
        }
 catch (        Exception e1) {
          ExceptionUtil.handle(e1);
        }
      }
      stack.commit();
      previewCanvas.redraw();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  previewCanvas.setListener(this);
  return content;
}",0.9557570761198132
65427,"public Control createControl(Composite parent){
  container=new Composite(parent,SWT.NONE);
  RowLayout layout=new RowLayout(SWT.HORIZONTAL);
  layout.marginBottom=0;
  layout.marginHeight=0;
  layout.marginLeft=0;
  layout.marginRight=0;
  layout.marginTop=0;
  layout.marginWidth=0;
  layout.spacing=0;
  container.setLayout(layout);
  left=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  left.setToolTipText(Messages.getString(""String_Node_Str""));
  center=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  center.setToolTipText(Messages.getString(""String_Node_Str""));
  right=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  right.setToolTipText(Messages.getString(""String_Node_Str""));
  justify=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  justify.setToolTipText(Messages.getString(""String_Node_Str""));
  Button[] btns={left,center,right,justify};
  String[] values={DesignChoiceConstants.TEXT_ALIGN_LEFT,DesignChoiceConstants.TEXT_ALIGN_CENTER,DesignChoiceConstants.TEXT_ALIGN_RIGHT,DesignChoiceConstants.TEXT_ALIGN_JUSTIFY};
  for (int i=0; i < btns.length; i++) {
    btns[i].setData(values[i]);
    btns[i].addSelectionListener(listener);
  }
  return container;
}","public Control createControl(Composite parent){
  container=new Composite(parent,SWT.NONE);
  RowLayout layout=new RowLayout(SWT.HORIZONTAL);
  layout.marginBottom=0;
  layout.marginHeight=0;
  layout.marginLeft=0;
  layout.marginRight=0;
  layout.marginTop=0;
  layout.marginWidth=0;
  layout.spacing=0;
  container.setLayout(layout);
  left=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  left.setToolTipText(Messages.getString(""String_Node_Str""));
  center=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  center.setToolTipText(Messages.getString(""String_Node_Str""));
  right=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  right.setToolTipText(Messages.getString(""String_Node_Str""));
  justify=FormWidgetFactory.getInstance().createButton(container,SWT.TOGGLE,false);
  justify.setToolTipText(Messages.getString(""String_Node_Str""));
  Button[] btns={left,center,right,justify};
  String[] values={DesignChoiceConstants.TEXT_ALIGN_LEFT,DesignChoiceConstants.TEXT_ALIGN_CENTER,DesignChoiceConstants.TEXT_ALIGN_RIGHT,DesignChoiceConstants.TEXT_ALIGN_JUSTIFY};
  for (int i=0; i < btns.length; i++) {
    btns[i].setData(values[i]);
    btns[i].addSelectionListener(listener);
    btns[i].getAccessible().addAccessibleListener(new AccessibleAdapter(){
      public void getName(      AccessibleEvent e){
        Accessible accessible=(Accessible)e.getSource();
        Button item=(Button)accessible.getControl();
        if (item != null) {
          e.result=item.getToolTipText();
        }
      }
    }
);
  }
  return container;
}",0.8725895316804407
65428,"public void load(){
  String value=getDescriptorProvider().load().toString();
  boolean stateFlag=((value == null) == button.getEnabled());
  if (stateFlag)   button.setEnabled(value != null);
  if (getDescriptorProvider() instanceof FontStylePropertyDescriptorProvider) {
    String imageName=((FontStylePropertyDescriptorProvider)getDescriptorProvider()).getImageName();
    if (!button.isEnabled())     imageName+=IReportGraphicConstants.DIS;
    if (button.getImage() == null)     button.setImage(ReportPlatformUIImages.getImage(imageName));
    boolean boolValue=((FontStylePropertyDescriptorProvider)getDescriptorProvider()).getToogleValue().equals(value);
    if (button.getSelection() != boolValue) {
      button.setSelection(boolValue);
    }
    button.setToolTipText(((FontStylePropertyDescriptorProvider)getDescriptorProvider()).getTooltipText());
  }
  if (getDescriptorProvider() instanceof BorderToggleDescriptorProvider) {
    String imageName=((BorderToggleDescriptorProvider)getDescriptorProvider()).getImageName();
    if (button.getImage() == null)     button.setImage(ReportPlatformUIImages.getImage(imageName));
    boolean boolValue=((Boolean)((BorderToggleDescriptorProvider)getDescriptorProvider()).load()).booleanValue();
    if (button.getSelection() != boolValue) {
      button.setSelection(boolValue);
    }
    button.setToolTipText(((BorderToggleDescriptorProvider)getDescriptorProvider()).getTooltipText());
  }
}","public void load(){
  String value=getDescriptorProvider().load().toString();
  boolean stateFlag=((value == null) == button.getEnabled());
  if (stateFlag)   button.setEnabled(value != null);
  if (getDescriptorProvider() instanceof FontStylePropertyDescriptorProvider) {
    String imageName=((FontStylePropertyDescriptorProvider)getDescriptorProvider()).getImageName();
    if (!button.isEnabled())     imageName+=IReportGraphicConstants.DIS;
    if (button.getImage() == null)     button.setImage(ReportPlatformUIImages.getImage(imageName));
    boolean boolValue=((FontStylePropertyDescriptorProvider)getDescriptorProvider()).getToogleValue().equals(value);
    if (button.getSelection() != boolValue) {
      button.setSelection(boolValue);
    }
    button.setToolTipText(((FontStylePropertyDescriptorProvider)getDescriptorProvider()).getTooltipText());
  }
  if (getDescriptorProvider() instanceof BorderToggleDescriptorProvider) {
    String imageName=((BorderToggleDescriptorProvider)getDescriptorProvider()).getImageName();
    if (button.getImage() == null)     button.setImage(ReportPlatformUIImages.getImage(imageName));
    boolean boolValue=((Boolean)((BorderToggleDescriptorProvider)getDescriptorProvider()).load()).booleanValue();
    if (button.getSelection() != boolValue) {
      button.setSelection(boolValue);
    }
    button.setToolTipText(((BorderToggleDescriptorProvider)getDescriptorProvider()).getTooltipText());
  }
  button.getAccessible().addAccessibleListener(new AccessibleAdapter(){
    public void getName(    AccessibleEvent e){
      Accessible accessible=(Accessible)e.getSource();
      Button item=(Button)accessible.getControl();
      if (item != null) {
        e.result=item.getToolTipText();
      }
    }
  }
);
}",0.9024009978172748
65429,"/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return the evaluated results.
 * @since 2.3
 */
@SuppressWarnings(""String_Node_Str"") public List<Object[]> evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns) throws ChartException {
  List<Object[]> liResultSet=new ArrayList<Object[]>();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        Object value=idre.evaluate((String)columns[i]);
        if (value instanceof Time) {
          Time time=(Time)value;
          Time newTime=new Time(time.getHours(),time.getMinutes(),time.getSeconds());
          value=new CDateTime(newTime);
        }
 else         if (value instanceof Date) {
          value=new CDateTime((Date)value);
        }
 else         if (value instanceof Calendar) {
          value=new CDateTime((Calendar)value);
        }
 else         if (value instanceof BirtException) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,(BirtException)value);
        }
        oaTuple[i]=value;
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}","/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return the evaluated results.
 * @since 2.3
 */
public List<Object[]> evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns) throws ChartException {
  List<Object[]> liResultSet=new ArrayList<Object[]>();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        Object value=idre.evaluate((String)columns[i]);
        if (value instanceof Date) {
          CDateTime newValue=new CDateTime((Date)value);
          if (newValue.isFullDateTime() && rtc.getTimeZone() != null) {
            newValue.setTimeZone(rtc.getTimeZone());
          }
          value=newValue;
        }
 else         if (value instanceof Calendar) {
          value=new CDateTime((Calendar)value);
        }
 else         if (value instanceof BirtException) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,(BirtException)value);
        }
        oaTuple[i]=value;
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}",0.8421052631578947
65430,"public String format(Calendar c,Locale lcl){
  return format(c,ULocale.forLocale(lcl));
}","@SuppressWarnings(""String_Node_Str"") public String format(Calendar c,Locale lcl){
  return format(c,ULocale.forLocale(lcl));
}",0.827906976744186
65431,"/** 
 * The property timeOnly indicates that this instance of CDateTime only represents a Time value, the Date value will be ignored.
 * @return Returns the bTimeOnly.
 */
public boolean isTimeOnly(){
  return bTimeOnly;
}","/** 
 * The property timeOnly indicates that this instance of CDateTime only represents a Time value, the Date value will be ignored.
 * @return true if time only.
 */
public boolean isTimeOnly(){
  return bTimeOnly;
}",0.9272727272727272
65432,"/** 
 * returns a CDateTime, whose value equals to the unit start of the current instance
 * @param iUnit
 * @return
 */
public CDateTime getUnitStart(int iUnit){
  CDateTime cd=new CDateTime(this);
  cd.clearBelow(iUnit);
  return cd;
}","/** 
 * returns a CDateTime, whose value equals to the unit start of the current instance
 * @param iUnit
 * @return new instance
 */
public CDateTime getUnitStart(int iUnit){
  CDateTime cd=new CDateTime(this);
  cd.clearBelow(iUnit);
  return cd;
}",0.973305954825462
65433,"/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 */
public final void clearBelow(int iUnit){
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == GroupingUnitType.QUARTERS) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == GroupingUnitType.QUARTERS) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}","/** 
 * Zeroes out all units for this datetime instance below a specified unit.
 * @param iUnit The unit below which all values are to be zeroed out
 */
public final void clearBelow(int iUnit){
  if (isFullDateTime()) {
    return;
  }
  if (iUnit == YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.DATE,1);
    set(Calendar.AM_PM,AM);
    set(Calendar.MONTH,0);
  }
 else   if (iUnit == MONTH || iUnit == GroupingUnitType.QUARTERS) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    set(Calendar.DATE,1);
    if (iUnit == GroupingUnitType.QUARTERS) {
      set(Calendar.MONTH,(getMonth() / 3) * 3);
    }
  }
 else   if (iUnit == WEEK_OF_YEAR) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
    int weekDay=get(DAY_OF_WEEK);
    add(DATE,1 - weekDay);
  }
 else   if (iUnit == DATE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
    set(Calendar.HOUR,0);
    set(Calendar.AM_PM,AM);
  }
 else   if (iUnit == HOUR || iUnit == HOUR_OF_DAY) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
    set(Calendar.MINUTE,0);
  }
 else   if (iUnit == MINUTE) {
    set(Calendar.MILLISECOND,0);
    set(Calendar.SECOND,0);
  }
 else   if (iUnit == SECOND) {
    set(Calendar.MILLISECOND,0);
  }
}",0.986101919258769
65434,"/** 
 * A convenient method used in building the ticks for a datetime scale. Computes a new datetime object relative to the existing one moving back by 'step' units.
 * @param iUnit
 * @param iStep
 * @return
 */
public CDateTime backward(int iUnit,int iStep){
  CDateTime cd=(CDateTime)clone();
  if (iUnit == QUARTER) {
    cd.add(Calendar.MONTH,(iStep == 0 ? 1 : iStep) * -3);
  }
 else {
    cd.add(iUnit,-iStep);
  }
  return cd;
}","/** 
 * A convenient method used in building the ticks for a datetime scale. Computes a new datetime object relative to the existing one moving back by 'step' units.
 * @param iUnit
 * @param iStep
 * @return new instance
 */
public CDateTime backward(int iUnit,int iStep){
  CDateTime cd=(CDateTime)clone();
  if (iUnit == QUARTER) {
    cd.add(Calendar.MONTH,(iStep == 0 ? 1 : iStep) * -3);
  }
 else {
    cd.add(iUnit,-iStep);
  }
  return cd;
}",0.9853107344632768
65435,"/** 
 * @return
 */
public Date getDateTime(){
  if (isSqlDate) {
    return new java.sql.Date(getTime().getTime());
  }
  return getTime();
}","public Date getDateTime(){
  if (bDateOnly) {
    return new java.sql.Date(getTime().getTime());
  }
  return getTime();
}",0.8863636363636364
65436,"/** 
 * A convenient method used in building the ticks for a datetime scale. Computes a new datetime object relative to the existing one moving forward by 'step' units.
 * @param iUnit
 * @param iStep
 * @return
 */
public CDateTime forward(int iUnit,int iStep){
  CDateTime cd=(CDateTime)clone();
  if (iUnit == QUARTER) {
    cd.add(Calendar.MONTH,(iStep == 0 ? 1 : iStep) * 3);
  }
 else {
    cd.add(iUnit,iStep);
  }
  return cd;
}","/** 
 * A convenient method used in building the ticks for a datetime scale. Computes a new datetime object relative to the existing one moving forward by 'step' units.
 * @param iUnit
 * @param iStep
 * @return new instance
 */
public CDateTime forward(int iUnit,int iStep){
  CDateTime cd=(CDateTime)clone();
  if (iUnit == QUARTER) {
    cd.add(Calendar.MONTH,(iStep == 0 ? 1 : iStep) * 3);
  }
 else {
    cd.add(iUnit,iStep);
  }
  return cd;
}",0.9853107344632768
65437,"public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  if (cm == null) {
    return null;
  }
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  boolean bEmpty=false;
  boolean bEmptyWithUncompletedBindings=false;
  boolean bEmptyWithEmptyResultSet=false;
  if (resultSet == null || !ChartItemUtil.checkChartBindingComplete(cm)) {
    bEmpty=true;
    bEmptyWithUncompletedBindings=true;
  }
  if (!bEmpty && ChartReportItemUtil.isEmpty(resultSet)) {
    bEmpty=true;
    bEmptyWithEmptyResultSet=true;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0 && (bo.isSetHeight() || bo.isSetWidth())) {
    return null;
  }
  renderDpi=getRenderDpi();
  try {
    if (rtc.getSharedScale() == null && ChartReportItemUtil.canScaleShared(modelHandle,cm)) {
      rtc.setSharedScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (modelHandle.getDataBindingReference() != null || modelHandle.getContainer() instanceof MultiViewsHandle || ChartItemUtil.isChartInheritGroups(modelHandle)) {
      isSharingQuery=true;
      isSharingQuery&=!ChartItemUtil.isChartHandle(ChartItemUtil.getReportItemReference(modelHandle));
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    ChartReportStyleProcessor styleProcessor=new ChartReportStyleProcessor(modelHandle,true,this.style,this.dpi);
    styleProcessor.applyDefaultHyperlink(this.cm);
    updateChartModel();
    boolean bEmptyData=false;
    if (!bEmptyWithUncompletedBindings && !bindData(rowAdapter,evaluator)) {
      bEmptyData=true;
    }
    Object renderObject=generateRenderObject(rowAdapter,externalContext,bEmpty,styleProcessor);
    rowAdapter.close();
    if (bEmpty) {
      if (bEmptyWithUncompletedBindings && isAutoHide()) {
        return outputNullResultSet();
      }
      if (bEmptyWithEmptyResultSet && isAutoHide()) {
        return null;
      }
    }
    if (bEmptyData && isAutoHide()) {
      return null;
    }
    return renderObject;
  }
 catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}","public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  if (cm == null) {
    return null;
  }
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  boolean bEmpty=false;
  boolean bEmptyWithUncompletedBindings=false;
  boolean bEmptyWithEmptyResultSet=false;
  if (resultSet == null || !ChartItemUtil.checkChartBindingComplete(cm)) {
    bEmpty=true;
    bEmptyWithUncompletedBindings=true;
  }
  if (!bEmpty && ChartReportItemUtil.isEmpty(resultSet)) {
    bEmpty=true;
    bEmptyWithEmptyResultSet=true;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0 && (bo.isSetHeight() || bo.isSetWidth())) {
    return null;
  }
  renderDpi=getRenderDpi();
  try {
    rtc.setTimeZone(context.getTimeZone());
    if (rtc.getSharedScale() == null && ChartReportItemUtil.canScaleShared(modelHandle,cm)) {
      rtc.setSharedScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (modelHandle.getDataBindingReference() != null || modelHandle.getContainer() instanceof MultiViewsHandle || ChartItemUtil.isChartInheritGroups(modelHandle)) {
      isSharingQuery=true;
      isSharingQuery&=!ChartItemUtil.isChartHandle(ChartItemUtil.getReportItemReference(modelHandle));
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    ChartReportStyleProcessor styleProcessor=new ChartReportStyleProcessor(modelHandle,true,this.style,this.dpi);
    styleProcessor.applyDefaultHyperlink(this.cm);
    updateChartModel();
    boolean bEmptyData=false;
    if (!bEmptyWithUncompletedBindings && !bindData(rowAdapter,evaluator)) {
      bEmptyData=true;
    }
    Object renderObject=generateRenderObject(rowAdapter,externalContext,bEmpty,styleProcessor);
    rowAdapter.close();
    if (bEmpty) {
      if (bEmptyWithUncompletedBindings && isAutoHide()) {
        return outputNullResultSet();
      }
      if (bEmptyWithEmptyResultSet && isAutoHide()) {
        return null;
      }
    }
    if (bEmptyData && isAutoHide()) {
      return null;
    }
    return renderObject;
  }
 catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}",0.9918154761904762
65438,"/** 
 * Configure web server.
 */
private void configureServer(String webappName){
  host=ViewerPlugin.getDefault().getPluginPreferences().getString(HOST_KEY);
  int port=ViewerPlugin.getDefault().getPluginPreferences().getInt(PORT_KEY);
  try {
    String hostCommandLineOverride=System.getProperty(""String_Node_Str"");
    if (hostCommandLineOverride != null && hostCommandLineOverride.trim().length() > 0)     host=hostCommandLineOverride;
  }
 catch (  Exception e) {
  }
  try {
    String portCommandLineOverride=System.getProperty(""String_Node_Str"");
    if (portCommandLineOverride != null && portCommandLineOverride.trim().length() > 0)     port=Integer.parseInt(portCommandLineOverride);
  }
 catch (  Exception e) {
  }
  if (host == null || host.trim().length() <= 0) {
    host=""String_Node_Str"";
  }
  if (port <= 0) {
    port=SocketUtil.findUnusedLocalPort();
  }
  ports.put(webappName,port);
}","/** 
 * Configure web server.
 */
private void configureServer(String webappName){
  host=ViewerPlugin.getDefault().getPluginPreferences().getString(HOST_KEY);
  int port=ViewerPlugin.getDefault().getPluginPreferences().getInt(PORT_KEY);
  try {
    String hostCommandLineOverride=System.getProperty(""String_Node_Str"");
    if (hostCommandLineOverride != null && hostCommandLineOverride.trim().length() > 0)     host=hostCommandLineOverride;
  }
 catch (  Exception e) {
  }
  try {
    String portCommandLineOverride=System.getProperty(""String_Node_Str"");
    if (portCommandLineOverride != null && portCommandLineOverride.trim().length() > 0)     port=Integer.parseInt(portCommandLineOverride);
  }
 catch (  Exception e) {
  }
  if (host == null || host.trim().length() <= 0) {
    host=null;
  }
  if (port <= 0) {
    port=SocketUtil.findUnusedLocalPort();
  }
  ports.put(webappName,port);
}",0.8788046485888212
65439,"/** 
 * Start web appserver based on Jetty Http Service
 * @param webappName
 * @throws Exception
 */
public void start(String webappName,String pluginID) throws Exception {
  configureServer(webappName);
  Dictionary dict=new Hashtable();
  dict.put(""String_Node_Str"",ports.get(webappName));
  dict.put(""String_Node_Str"",host);
  dict.put(""String_Node_Str"",""String_Node_Str"" + webappName);
  dict.put(""String_Node_Str"",pluginID);
  JettyConfigurator.startServer(webappName,dict);
  ensureBundleStarted(""String_Node_Str"");
}","/** 
 * Start web appserver based on Jetty Http Service
 * @param webappName
 * @throws Exception
 */
public void start(String webappName,String pluginID) throws Exception {
  configureServer(webappName);
  Dictionary dict=new Hashtable();
  dict.put(""String_Node_Str"",ports.get(webappName));
  dict.put(""String_Node_Str"",host == null ? ""String_Node_Str"" : host);
  dict.put(""String_Node_Str"",""String_Node_Str"" + webappName);
  dict.put(""String_Node_Str"",pluginID);
  JettyConfigurator.startServer(webappName,dict);
  ensureBundleStarted(""String_Node_Str"");
}",0.9676823638042474
65440,"/** 
 * @return the host
 */
String getHost(){
  return host;
}","/** 
 * @return the host
 */
String getHost(){
  return host == null ? ""String_Node_Str"" : host;
}",0.782608695652174
65441,"private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=null;
  if (upperCell != null) {
    emptyCell=upperCell.cloneArea();
  }
 else {
    emptyCell=new CellArea();
    emptyCell.content=cellContent;
  }
  BoxStyle bs=emptyCell.getBoxStyle();
  bs.setRightBorder(null);
  bs.setBottomBorder(null);
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea originalCell=upperCell;
  if (upperCell instanceof DummyCell) {
    originalCell=((DummyCell)upperCell).getCell();
  }
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}","private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=null;
  if (upperCell != null) {
    emptyCell=upperCell.cloneArea();
  }
 else {
    emptyCell=new CellArea();
    emptyCell.content=cellContent;
  }
  BoxStyle bs=emptyCell.getBoxStyle();
  if (bs == BoxStyle.DEFAULT)   bs=new BoxStyle(BoxStyle.DEFAULT);
  bs.setRightBorder(null);
  bs.setBottomBorder(null);
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea originalCell=upperCell;
  if (upperCell instanceof DummyCell) {
    originalCell=((DummyCell)upperCell).getCell();
  }
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}",0.9823451910408432
65442,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  sComposite=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  sComposite.setExpandHorizontal(true);
  sComposite.setExpandVertical(true);
  sComposite.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      computeSize();
    }
  }
);
  boolean supportsSchema=false;
  boolean supportsProcedure=false;
  if (continueConnect) {
    supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
    supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  }
  tablescomposite=new Composite(sComposite,SWT.NONE);
  tablescomposite.setLayout(new GridLayout());
  GridData data=new GridData(GridData.FILL_BOTH);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  createDBObjectTree(tablescomposite);
  createObjectTreeMenu();
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  sComposite.setContent(tablescomposite);
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  sComposite=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  sComposite.setExpandHorizontal(true);
  sComposite.setExpandVertical(true);
  sComposite.setMinHeight(500);
  sComposite.setMinWidth(250);
  sComposite.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      computeSize();
    }
  }
);
  boolean supportsSchema=false;
  boolean supportsProcedure=false;
  if (continueConnect) {
    supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
    supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  }
  tablescomposite=new Composite(sComposite,SWT.NONE);
  tablescomposite.setLayout(new GridLayout());
  GridData data=new GridData(GridData.FILL_BOTH);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  createDBObjectTree(tablescomposite);
  createObjectTreeMenu();
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  sComposite.setContent(tablescomposite);
  return tablescomposite;
}",0.9768637532133676
65443,"private ExpressionProvider getExpressionProvider(){
  ExpressionProvider expressionProvider=new ExpressionProvider(handle);
  expressionProvider.addFilter(new ExpressionFilter(){
    public boolean select(    Object parentElement,    Object element){
      if (ExpressionFilter.CATEGORY.equals(parentElement) && ExpressionProvider.COLUMN_BINDINGS.equals(element)) {
        return false;
      }
      if (ExpressionFilter.CATEGORY.equals(parentElement) && ExpressionProvider.MEASURE.equals(element)) {
        return false;
      }
      if (ExpressionProvider.CURRENT_CUBE.equals(parentElement)) {
        if (element instanceof PropertyHandle) {
          PropertyHandle property=(PropertyHandle)element;
          if (ICubeModel.DIMENSIONS_PROP.equals(property.getPropertyDefn().getName())) {
            return true;
          }
 else {
            return false;
          }
        }
      }
      return true;
    }
  }
);
  return expressionProvider;
}","protected ExpressionProvider getExpressionProvider(){
  ExpressionProvider expressionProvider=new ExpressionProvider(handle);
  expressionProvider.addFilter(new ExpressionFilter(){
    public boolean select(    Object parentElement,    Object element){
      if (ExpressionFilter.CATEGORY.equals(parentElement) && ExpressionProvider.COLUMN_BINDINGS.equals(element)) {
        return false;
      }
      if (ExpressionFilter.CATEGORY.equals(parentElement) && ExpressionProvider.MEASURE.equals(element)) {
        return false;
      }
      if (ExpressionProvider.CURRENT_CUBE.equals(parentElement)) {
        if (element instanceof PropertyHandle) {
          PropertyHandle property=(PropertyHandle)element;
          if (ICubeModel.DIMENSIONS_PROP.equals(property.getPropertyDefn().getName())) {
            return true;
          }
 else {
            return false;
          }
        }
      }
      return true;
    }
  }
);
  return expressionProvider;
}",0.9937565036420396
65444,"public void modifyText(ModifyEvent e){
  if (StringUtil.isBlank(nameEditor.getText().trim())) {
    setMessage(EMPTY_NAME,ERROR);
  }
 else   if (isDuplicateName()) {
    setMessage(DUPLICATE_NAME,ERROR);
  }
 else   if (containInvalidCharactor(nameEditor.getText())) {
    String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
    setMessage(msg,ERROR);
  }
 else {
    setMessage(CREATE_PROMPT);
  }
  setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
}","public void modifyText(ModifyEvent e){
  if (StringUtil.isBlank(nameEditor.getText().trim())) {
    setMessage(EMPTY_NAME,ERROR);
  }
 else   if (isDuplicateName()) {
    setMessage(DUPLICATE_NAME,ERROR);
  }
 else   if (containInvalidCharactor(nameEditor.getText())) {
    String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
    setMessage(msg,ERROR);
  }
 else {
    setMessage(CREATE_PROMPT);
  }
  setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
  nameEditor.setFocus();
}",0.9774571686203788
65445,"/** 
 * Creates the top level control for this dialog page under the given parent composite. <p> Implementors are responsible for ensuring that the created control can be accessed via <code>getControl</code> </p>
 * @param parent the parent composite
 */
public void createControl(Composite parent){
  helper=new DataSetBasePageHelper();
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  final Group group=new Group(composite,SWT.NONE);
  group.setLayout(new GridLayout());
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,8));
  wizardFilter=new WizardFilter();
  dataSourceFilteredTree=new FilteredTree(group,SWT.BORDER | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL,this.wizardFilter,true);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=300;
  treeData.widthHint=600;
  dataSourceFilteredTree.setLayoutData(treeData);
  SelectionListener listener=new SelectionListener(){
    TreeItem parent=null;
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent event){
      if (event.item.getData() instanceof DataSourceHandle) {
        dataSetTypeChooser.getCombo().setEnabled(true);
        if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
          parent=((TreeItem)event.item).getParentItem();
          doDataSourceSelectionChanged(parent.getData());
        }
        setPageComplete(!hasWizard() && (getMessageType() != ERROR));
      }
 else {
        dataSetTypeChooser.getCombo().clearSelection();
        dataSetTypeChooser.getCombo().setEnabled(false);
        setPageComplete(false);
      }
    }
  }
;
  dataSourceFilteredTree.getViewer().getTree().addSelectionListener(listener);
  createDataSetTypeViewer(composite);
  setDataSourceTreeViewer();
  setPageStatus();
  new Label(composite,SWT.RIGHT).setText(Messages.getString(""String_Node_Str""));
  nameEditor=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SET_ELEMENT);
  if (name != null) {
    nameEditor.setText(Utility.getUniqueDataSetName(name));
  }
 else {
    nameEditor.setText(Utility.getUniqueDataSetName(Messages.getString(""String_Node_Str"")));
  }
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.setToolTipText(Messages.getString(""String_Node_Str""));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (StringUtil.isBlank(nameEditor.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(nameEditor.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(CREATE_PROMPT);
      }
      setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_NEW);
}","/** 
 * Creates the top level control for this dialog page under the given parent composite. <p> Implementors are responsible for ensuring that the created control can be accessed via <code>getControl</code> </p>
 * @param parent the parent composite
 */
public void createControl(Composite parent){
  helper=new DataSetBasePageHelper();
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  final Group group=new Group(composite,SWT.NONE);
  group.setLayout(new GridLayout());
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,8));
  wizardFilter=new WizardFilter();
  dataSourceFilteredTree=new FilteredTree(group,SWT.BORDER | SWT.FULL_SELECTION | SWT.H_SCROLL| SWT.V_SCROLL,this.wizardFilter,true);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=300;
  treeData.widthHint=600;
  dataSourceFilteredTree.setLayoutData(treeData);
  SelectionListener listener=new SelectionListener(){
    TreeItem parent=null;
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent event){
      if (event.item.getData() instanceof DataSourceHandle) {
        dataSetTypeChooser.getCombo().setEnabled(true);
        if (parent == null || parent != ((TreeItem)event.item).getParentItem()) {
          parent=((TreeItem)event.item).getParentItem();
          doDataSourceSelectionChanged(parent.getData());
        }
        setPageComplete(!hasWizard() && (getMessageType() != ERROR));
      }
 else {
        dataSetTypeChooser.getCombo().clearSelection();
        dataSetTypeChooser.getCombo().setEnabled(false);
        setPageComplete(false);
      }
    }
  }
;
  dataSourceFilteredTree.getViewer().getTree().addSelectionListener(listener);
  createDataSetTypeViewer(composite);
  setDataSourceTreeViewer();
  setPageStatus();
  new Label(composite,SWT.RIGHT).setText(Messages.getString(""String_Node_Str""));
  nameEditor=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SET_ELEMENT);
  if (name != null) {
    nameEditor.setText(Utility.getUniqueDataSetName(name));
  }
 else {
    nameEditor.setText(Utility.getUniqueDataSetName(Messages.getString(""String_Node_Str"")));
  }
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.setToolTipText(Messages.getString(""String_Node_Str""));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (StringUtil.isBlank(nameEditor.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(nameEditor.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{nameEditor.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(CREATE_PROMPT);
      }
      setPageComplete(!hasWizard() && (getMessageType() != ERROR) && getSelectedDataSource() != null);
      nameEditor.setFocus();
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_NEW);
}",0.9957756737072104
65446,"/** 
 * @param appContext
 * @param dsource
 * @param dset
 * @param moduleHandle
 * @throws BirtException
 */
void preDefineDataSet(DataSessionContext appContext,IBaseDataSourceDesign dsource,IBaseDataSetDesign dset,ModuleHandle moduleHandle) throws BirtException ;","/** 
 * @param appContext
 * @param dsource
 * @param dset
 * @param moduleHandle
 * @throws BirtException
 */
void preDefineDataSet(DataSessionContext appContext,IBaseDataSourceDesign dsource,IBaseDataSetDesign dset,IQueryDefinition query) throws BirtException ;",0.9111531190926276
65447,"public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(sessionContext,dataEngine.getDataSourceDesign(design.getDataSourceName()),design,getDataSessionContext().getModuleHandle());
  }
  dataEngine.defineDataSet(design);
}","public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  dataEngine.defineDataSet(design);
}",0.4422700587084148
65448,"private void defineDataSourceDataSet(IQueryDefinition queryDefn) throws BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    DefineDataSourceSetUtil.defineDataSourceAndDataSet(handle,dataEngine,this.modelAdaptor,null);
  }
}","private void defineDataSourceDataSet(IQueryDefinition queryDefn) throws BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    DefineDataSourceSetUtil.defineDataSourceAndDataSet(handle,dataEngine,this.modelAdaptor,null);
    DefineDataSourceSetUtil.prepareForTransientQuery(sessionContext,dataEngine,handle,queryDefn);
  }
}",0.9277286135693216
65449,"/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(IQueryDefinition queryDefn,boolean keepDataSetFilter,boolean allowAggregation) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    major=handle;
    defineDataSet(handle,new DataSetHandleProcessContext(major,useResultHints,keepDataSetFilter,allowAggregation));
  }
}","/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(IQueryDefinition queryDefn,boolean keepDataSetFilter,boolean allowAggregation) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    major=handle;
    defineDataSet(handle,new DataSetHandleProcessContext(major,useResultHints,keepDataSetFilter,allowAggregation));
    DefineDataSourceSetUtil.prepareForTransientQuery(sessionContext,(DataEngineImpl)dataEngine,handle,queryDefn);
  }
}",0.9347079037800688
65450,"private void preDefineDataSet(DataSetHandle handle) throws BirtException {
  if (handle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)handle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        preDefineDataSet(dsHandle);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      preDefineDataSet((DataSetHandle)inputDataSet.get(i));
    }
  }
  IBaseDataSetDesign baseDS=((DataEngineImpl)dataEngine).getDataSetDesign(handle.getQualifiedName());
  IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(baseDS);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(sessionContext,((DataEngineImpl)dataEngine).getDataSourceDesign(baseDS.getDataSourceName()),baseDS,sessionContext.getModuleHandle());
  }
}","private void preDefineDataSet(DataSetHandle handle) throws BirtException {
  if (handle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)handle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        preDefineDataSet(dsHandle);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      preDefineDataSet((DataSetHandle)inputDataSet.get(i));
    }
  }
}",0.7518796992481203
65451,"/** 
 * Test getters and setters.
 * @throws DesignFileException
 */
public void testGetterAndSetter() throws DesignFileException {
  IElementDefn elementDefn=MetaDataDictionary.getInstance().getElement(""String_Node_Str"");
  assertNotNull(elementDefn);
  slotDefn=(SlotDefn)elementDefn.getSlot(0);
  MetadataTestUtil.setMultipleCardinality(slotDefn,true);
  MetadataTestUtil.setDisplayNameKey(slotDefn,""String_Node_Str"");
  MetadataTestUtil.setName(slotDefn,""String_Node_Str"");
  MetadataTestUtil.setID(slotDefn,99);
  assertEquals(true,slotDefn.isMultipleCardinality());
  assertEquals(""String_Node_Str"",slotDefn.getDisplayName());
  assertEquals(""String_Node_Str"",slotDefn.getDisplayNameID());
  assertEquals(""String_Node_Str"",slotDefn.getName());
  assertEquals(99,slotDefn.getSlotID());
}","/** 
 * Test getters and setters.
 * @throws DesignFileException
 */
public void testGetterAndSetter() throws DesignFileException {
  slotDefn=new SlotDefn();
  MetadataTestUtil.setMultipleCardinality(slotDefn,true);
  MetadataTestUtil.setDisplayNameKey(slotDefn,""String_Node_Str"");
  MetadataTestUtil.setName(slotDefn,""String_Node_Str"");
  MetadataTestUtil.setID(slotDefn,99);
  assertEquals(true,slotDefn.isMultipleCardinality());
  assertEquals(""String_Node_Str"",slotDefn.getDisplayName());
  assertEquals(""String_Node_Str"",slotDefn.getDisplayNameID());
  assertEquals(""String_Node_Str"",slotDefn.getName());
  assertEquals(99,slotDefn.getSlotID());
}",0.8816608996539792
65452,"/** 
 * Tests design file with css file that can't be found
 * @throws Exception
 */
public void testOpenBadCssFile() throws Exception {
  openDesign(""String_Node_Str"");
  List errorList=design.getAllErrors();
  assertEquals(1,errorList.size());
  String errorCode=((ErrorDetail)errorList.get(0)).getErrorCode();
  assertEquals(errorCode,CssException.DESIGN_EXCEPTION_CSS_NOT_FOUND);
}","/** 
 * Tests design file with css file that can't be found
 * @throws Exception
 */
public void testOpenBadCssFile() throws Exception {
  openDesign(""String_Node_Str"");
  List errorList=design.getAllErrors();
  assertTrue(!errorList.isEmpty());
  String errorCode=((ErrorDetail)errorList.get(0)).getErrorCode();
  assertEquals(errorCode,CssException.DESIGN_EXCEPTION_CSS_NOT_FOUND);
}",0.9688311688311688
65453,"private void updateFormatField(){
  ULocale locale=formatLocale;
  if (locale == null)   locale=ULocale.getDefault();
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(type);
  Expression expression=getFirstDefaultValue();
  String defaultValue=expression == null ? null : expression.getStringExpression();
  String exprType=expression == null ? ExpressionType.CONSTANT : expression.getType();
  if (ExpressionType.JAVASCRIPT.equals(exprType))   defaultValue=null;
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    if (formatCategroy == null) {
      return;
    }
    if (choiceSet.findChoice(formatCategroy) == null) {
      return;
    }
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (ParameterUtil.isCustomCategory(formatCategroy)) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
    if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
      previewString=new DateFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : (formatCategroy.equals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATETIME_UNFORMATTED : formatCategroy),locale).format(new Date());
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATE)) {
      previewString=new DateFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : (formatCategroy.equals(DesignChoiceConstants.DATE_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATE_UNFORMATTED : formatCategroy),locale).format(new Date());
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_TIME)) {
      previewString=new DateFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : (formatCategroy.equals(""String_Node_Str"") ? DateFormatter.TIME_UNFORMATTED : formatCategroy),locale).format(new Date());
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
      previewString=new StringFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : formatCategroy,locale).format(defaultValue == null ? Messages.getString(""String_Node_Str"") : defaultValue);
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER)) {
      int intValue=DEFAULT_PREVIEW_INTEGER;
      if (defaultValue != null) {
        try {
          intValue=java.lang.Integer.parseInt(defaultValue);
        }
 catch (        NumberFormatException e) {
        }
      }
      previewString=new NumberFormatter((ParameterUtil.isCustomCategory(formatCategroy) || (isNumberFormat(formatCategroy))) ? formatPattern : formatCategroy,locale).format(intValue);
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT)) {
      double doulbeValue=DEFAULT_PREVIEW_NUMBER;
      if (defaultValue != null) {
        try {
          doulbeValue=Double.parseDouble(defaultValue);
        }
 catch (        NumberFormatException e) {
        }
      }
      String realformatPattern=(ParameterUtil.isCustomCategory(formatCategroy) || (isNumberFormat(formatCategroy))) ? formatPattern : formatCategroy;
      NumberFormatter tempFormater=new NumberFormatter(realformatPattern,locale);
      previewString=tempFormater.format(doulbeValue);
      if (Double.isInfinite(doulbeValue)) {
        BigDecimal tempDecimal=new BigDecimal(defaultValue);
        if (realformatPattern == null) {
          previewString=tempDecimal.toString();
        }
 else {
          previewString=tempFormater.format(tempDecimal);
        }
      }
    }
 else {
      previewString=new NumberFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : formatCategroy,locale).format(DEFAULT_PREVIEW_NUMBER);
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}","private void updateFormatField(){
  ULocale locale=formatLocale;
  if (locale == null)   locale=ULocale.getDefault();
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(type);
  Expression expression=getFirstDefaultValue();
  String defaultValue=expression == null ? null : expression.getStringExpression();
  String exprType=expression == null ? ExpressionType.CONSTANT : expression.getType();
  if (ExpressionType.JAVASCRIPT.equals(exprType))   defaultValue=null;
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    if (formatCategroy == null || choiceSet.findChoice(formatCategroy) == null) {
      return;
    }
    if (choiceSet.findChoice(formatCategroy) == null) {
      return;
    }
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (ParameterUtil.isCustomCategory(formatCategroy)) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
    if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
      previewString=new DateFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : (formatCategroy.equals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATETIME_UNFORMATTED : formatCategroy),locale).format(new Date());
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATE)) {
      previewString=new DateFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : (formatCategroy.equals(DesignChoiceConstants.DATE_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATE_UNFORMATTED : formatCategroy),locale).format(new Date());
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_TIME)) {
      previewString=new DateFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : (formatCategroy.equals(""String_Node_Str"") ? DateFormatter.TIME_UNFORMATTED : formatCategroy),locale).format(new Date());
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
      previewString=new StringFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : formatCategroy,locale).format(defaultValue == null ? Messages.getString(""String_Node_Str"") : defaultValue);
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER)) {
      int intValue=DEFAULT_PREVIEW_INTEGER;
      if (defaultValue != null) {
        try {
          intValue=java.lang.Integer.parseInt(defaultValue);
        }
 catch (        NumberFormatException e) {
        }
      }
      previewString=new NumberFormatter((ParameterUtil.isCustomCategory(formatCategroy) || (isNumberFormat(formatCategroy))) ? formatPattern : formatCategroy,locale).format(intValue);
    }
 else     if (type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT)) {
      double doulbeValue=DEFAULT_PREVIEW_NUMBER;
      if (defaultValue != null) {
        try {
          doulbeValue=Double.parseDouble(defaultValue);
        }
 catch (        NumberFormatException e) {
        }
      }
      String realformatPattern=(ParameterUtil.isCustomCategory(formatCategroy) || (isNumberFormat(formatCategroy))) ? formatPattern : formatCategroy;
      NumberFormatter tempFormater=new NumberFormatter(realformatPattern,locale);
      previewString=tempFormater.format(doulbeValue);
      if (Double.isInfinite(doulbeValue)) {
        BigDecimal tempDecimal=new BigDecimal(defaultValue);
        if (realformatPattern == null) {
          previewString=tempDecimal.toString();
        }
 else {
          previewString=tempFormater.format(tempDecimal);
        }
      }
    }
 else {
      previewString=new NumberFormatter(ParameterUtil.isCustomCategory(formatCategroy) ? formatPattern : formatCategroy,locale).format(DEFAULT_PREVIEW_NUMBER);
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}",0.9942168674698796
65454,"public void testHideRuleFormatCompatibility() throws Exception {
  openDesign(""String_Node_Str"");
  List<ErrorDetail> errors=design.getAllErrors();
  assertEquals(1,errors.size());
  assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,errors.get(0).getErrorCode());
  TableHandle tableHandle=(TableHandle)designHandle.findElement(""String_Node_Str"");
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  Iterator rules=rowHandle.visibilityRulesIterator();
  assertNotNull(rules);
  HideRuleHandle handle=(HideRuleHandle)rules.next();
  assertEquals(""String_Node_Str"",handle.getFormat());
  handle=(HideRuleHandle)rules.next();
  assertEquals(DesignChoiceConstants.FORMAT_TYPE_ALL,handle.getFormat());
  try {
    handle.setFormat(""String_Node_Str"");
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,e.getErrorCode());
  }
}","public void testHideRuleFormatCompatibility() throws Exception {
  openDesign(""String_Node_Str"");
  List<ErrorDetail> errors=design.getAllErrors();
  assertTrue(!errors.isEmpty());
  assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,errors.get(0).getErrorCode());
  TableHandle tableHandle=(TableHandle)designHandle.findElement(""String_Node_Str"");
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  Iterator rules=rowHandle.visibilityRulesIterator();
  assertNotNull(rules);
  HideRuleHandle handle=(HideRuleHandle)rules.next();
  assertEquals(""String_Node_Str"",handle.getFormat());
  handle=(HideRuleHandle)rules.next();
  assertEquals(DesignChoiceConstants.FORMAT_TYPE_ALL,handle.getFormat());
  try {
    handle.setFormat(""String_Node_Str"");
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,e.getErrorCode());
  }
}",0.9783080260303688
65455,"public void createPageCustomControl(Composite parent){
  sComposite=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sComposite.setLayout(new GridLayout());
  sComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  sComposite.setMinWidth(600);
  sComposite.setExpandHorizontal(true);
  Composite mainComposite=new Composite(sComposite,SWT.NONE);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  createTopArea(mainComposite);
  createFieldsSelectionArea(mainComposite);
  createBottomArea(mainComposite);
  Point size=mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  mainComposite.setSize(size.x,size.y);
  sComposite.setContent(mainComposite);
  setControl(sComposite);
  setPageComplete(false);
  try {
    initPageInfos();
  }
 catch (  final OdaException e) {
    initializeControl();
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        String errorMsg=UIHelper.getUserErrorMessage(""String_Node_Str"",e);
        ExceptionHandler.showException(sComposite.getShell(),Messages.getString(""String_Node_Str""),errorMsg,e);
      }
    }
);
    return;
  }
  initializeControl();
  resetLabelWidth();
  modelChanged=false;
}","public void createPageCustomControl(Composite parent){
  sComposite=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sComposite.setLayout(new GridLayout());
  sComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  sComposite.setMinWidth(600);
  sComposite.setExpandHorizontal(true);
  Composite mainComposite=new Composite(sComposite,SWT.NONE);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  createTopArea(mainComposite);
  createFieldsSelectionArea(mainComposite);
  createBottomArea(mainComposite);
  Point size=mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  mainComposite.setSize(size.x,size.y);
  sComposite.setContent(mainComposite);
  setControl(sComposite);
  setPageComplete(false);
  try {
    initPageInfos();
  }
 catch (  final OdaException e) {
    initializeControl();
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        String errorMsg=UIHelper.getUserErrorMessage(""String_Node_Str"",e);
        ExceptionHandler.showException(sComposite.getShell(),Messages.getString(""String_Node_Str""),errorMsg,e);
      }
    }
);
    return;
  }
  initializeControl();
  resetLabelWidth();
  modelChanged=false;
  UIHelper.setSystemHelp(getControl(),IHelpConstants.CONTEXT_ID_WIZARD_DATASET_MONGODB);
}",0.9662495259764884
65456,"public boolean canLeave(){
  if (propertyPage instanceof DataSetEditorPage) {
    try {
      DataSetDesign requestDesign=null;
      DesignSessionResponse response=null;
      if (dataSetSession != null) {
        requestDesign=dataSetSession.getRequest().getDataSetDesign();
        response=dataSetSession.flush().getResponse();
      }
 else       response=((DataSetEditorPage)propertyPage).collectPageResponse();
      DTPUtil.getInstance().updateDataSetHandle(response,requestDesign,(OdaDataSetHandle)((DataSetEditor)getContainer()).getModel(),false);
    }
 catch (    OdaException e) {
      ExceptionHandler.handle(e);
    }
    return true;
  }
  if (propertyPage instanceof DataSourceEditorPage) {
    if (propertyPage.okToLeave()) {
      try {
        DataSourceDesign requestDesign=null;
        if (this.dataSourceSession != null)         requestDesign=this.dataSourceSession.getRequest().getDataSourceDesign();
        DTPUtil.getInstance().updateDataSourceHandle(((DataSourceEditorPage)propertyPage).getEditSessionResponse().getResponse(),requestDesign,(OdaDataSourceHandle)(getContainer()).getModel());
        ((DataSourceEditor)this.getContainer()).updateDesignSession();
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return propertyPage.okToLeave();
  }
  return super.canLeave();
}","public boolean canLeave(){
  if (propertyPage instanceof DataSetEditorPage) {
    boolean okToLeave=((DataSetEditorPage)propertyPage).okToLeave();
    if (okToLeave) {
      try {
        DataSetDesign requestDesign=null;
        DesignSessionResponse response=null;
        if (dataSetSession != null) {
          requestDesign=dataSetSession.getRequest().getDataSetDesign();
          response=dataSetSession.flush().getResponse();
        }
 else         response=((DataSetEditorPage)propertyPage).collectPageResponse();
        DTPUtil.getInstance().updateDataSetHandle(response,requestDesign,(OdaDataSetHandle)((DataSetEditor)getContainer()).getModel(),false);
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return okToLeave;
  }
  if (propertyPage instanceof DataSourceEditorPage) {
    if (propertyPage.okToLeave()) {
      try {
        DataSourceDesign requestDesign=null;
        if (this.dataSourceSession != null)         requestDesign=this.dataSourceSession.getRequest().getDataSourceDesign();
        DTPUtil.getInstance().updateDataSourceHandle(((DataSourceEditorPage)propertyPage).getEditSessionResponse().getResponse(),requestDesign,(OdaDataSourceHandle)(getContainer()).getModel());
        ((DataSourceEditor)this.getContainer()).updateDesignSession();
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return propertyPage.okToLeave();
  }
  return super.canLeave();
}",0.946624248851184
65457,"protected void checkDisplayNone(IContent content,boolean isStart){
  if (isStart) {
    if (context.isDisplayNone()) {
      return;
    }
 else {
      if (PropertyUtil.isDisplayNone(content)) {
        contentDisplayNone=content;
        context.setDisplayNone(true);
      }
    }
  }
 else {
    if (context.isDisplayNone()) {
      if (PropertyUtil.isDisplayNone(content)) {
        if (contentDisplayNone == content) {
          context.setDisplayNone(false);
          contentDisplayNone=null;
        }
      }
    }
  }
}","protected void checkDisplayNone(IContent content,boolean isStart){
  if (isStart) {
    if (context.isDisplayNone()) {
      return;
    }
 else {
      if (PropertyUtil.isDisplayNone(content)) {
        contentDisplayNone=content;
        context.setDisplayNone(true);
      }
    }
  }
 else {
    if (context.isDisplayNone()) {
      if (PropertyUtil.isDisplayNone(content)) {
        if (contentDisplayNone.getInstanceID() == content.getInstanceID()) {
          context.setDisplayNone(false);
          contentDisplayNone=null;
        }
      }
    }
  }
}",0.9706959706959708
65458,"public void initialize() throws BirtException {
  createRoot();
  Color backgroundColor=PropertyUtil.getColor(pageContent.getComputedStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  ReportDesignHandle designHandle=pageContent.getReportContent().getDesign().getReportDesign();
  IStyle style=pageContent.getStyle();
  String imageUrl=EmitterUtil.getBackgroundImageUrl(style,designHandle,pageContent.getReportContent().getReportContext() == null ? null : pageContent.getReportContent().getReportContext().getAppContext());
  if (backgroundColor != null || imageUrl != null) {
    boxStyle=new BoxStyle();
    boxStyle.setBackgroundColor(backgroundColor);
    if (imageUrl != null) {
      boxStyle.setBackgroundImage(createBackgroundImage(imageUrl));
    }
  }
  context.setMaxHeight(root.getHeight());
  context.setMaxWidth(root.getWidth());
  context.setMaxBP(root.getHeight());
  layoutHeader();
  layoutFooter();
  updateBodySize();
  context.setMaxHeight(body.getHeight());
  context.setMaxWidth(body.getWidth());
  context.setMaxBP(body.getHeight());
  maxAvaWidth=context.getMaxWidth();
  context.resetUnresolvedRowHints();
}","public void initialize() throws BirtException {
  createRoot();
  Color backgroundColor=PropertyUtil.getColor(pageContent.getComputedStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  ReportDesignHandle designHandle=pageContent.getReportContent().getDesign().getReportDesign();
  IStyle style=pageContent.getStyle();
  String imageUrl=EmitterUtil.getBackgroundImageUrl(style,designHandle,pageContent.getReportContent().getReportContext() == null ? null : pageContent.getReportContent().getReportContext().getAppContext());
  if (backgroundColor != null || imageUrl != null) {
    boxStyle=new BoxStyle();
    boxStyle.setBackgroundColor(backgroundColor);
    if (imageUrl != null) {
      boxStyle.setBackgroundImage(createBackgroundImage(imageUrl));
    }
  }
  context.setMaxHeight(root.getHeight());
  context.setMaxWidth(root.getWidth());
  context.setMaxBP(root.getHeight());
  layoutHeader();
  layoutFooter();
  updateBodySize();
  context.setMaxHeight(body.getHeight());
  context.setMaxWidth(body.getWidth());
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.FIT_TO_PAGE_SIZE || overFlowType == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
    context.setMaxBP(Integer.MAX_VALUE);
  }
 else {
    context.setMaxBP(body.getHeight());
  }
  maxAvaWidth=context.getMaxWidth();
  context.resetUnresolvedRowHints();
}",0.9130087789305666
65459,"public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor,QueryExecutionHelper.DataSetHandleProcessContext context) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor,context);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor,context);
    }
  }
  IBaseDataSetDesign design=((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName());
  if (design == null) {
    design=modelAdaptor.adaptDataSet(dataSet);
    dataEngine.defineDataSet(design);
  }
  if (context != null)   context.process(design,dataSet);
}","public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor,QueryExecutionHelper.DataSetHandleProcessContext context) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getQualifiedName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor,context);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor,context);
    }
  }
  IBaseDataSetDesign design=((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName());
  if (design == null) {
    design=modelAdaptor.adaptDataSet(dataSet);
    dataEngine.defineDataSet(design);
  }
  if (context != null)   context.process(design,dataSet);
}",0.9972451790633609
65460,"/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  try {
    if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))     throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,Integer.valueOf(mode));
    this.mode=mode;
    this.moduleHandle=moduleHandle;
    this.appClassLoader=classLoader;
    ScriptContext internalScriptContext=null;
    if (scriptContext == null) {
      internalScriptContext=new ScriptContext();
      scriptContext=internalScriptContext.newContext(this.getTopScope());
      DataEngineThreadLocal.getInstance().getCloseListener().add(new ScriptContextCloser(internalScriptContext));
    }
    this.sContext=scriptContext;
    this.topScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
    this.hasExternalScope=topScope != null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}","/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  try {
    if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))     throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,Integer.valueOf(mode));
    this.mode=mode;
    this.moduleHandle=moduleHandle;
    this.appClassLoader=classLoader;
    this.hasExternalScope=scriptContext != null;
    ScriptContext internalScriptContext=null;
    if (scriptContext == null) {
      internalScriptContext=new ScriptContext();
      scriptContext=internalScriptContext.newContext(this.getTopScope());
      DataEngineThreadLocal.getInstance().getCloseListener().add(new ScriptContextCloser(internalScriptContext));
    }
    this.sContext=scriptContext;
    this.topScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}",0.9175557710960232
65461,"/** 
 * uses to clear the data cach.
 * @param dataSet the dataset handle
 * @throws BirtException
 */
public void clearCache(DataSetHandle dataSet) throws BirtException {
  DataSessionContext context;
  DataRequestSession requestSession=null;
  try {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle(),null);
    requestSession=DataRequestSession.newSession(context);
    IModelAdapter modelAdaptor=requestSession.getModelAdaptor();
    DataSourceHandle dataSource=dataSet.getDataSource();
    IBaseDataSourceDesign sourceDesign=modelAdaptor.adaptDataSource(dataSource);
    IBaseDataSetDesign dataSetDesign=modelAdaptor.adaptDataSet(dataSet);
    requestSession.clearCache(sourceDesign,dataSetDesign);
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
 finally {
    if (requestSession != null) {
      requestSession.shutdown();
    }
  }
}","/** 
 * uses to clear the data cach.
 * @param dataSet the dataset handle
 * @throws BirtException
 */
public void clearCache(DataSetHandle dataSet) throws BirtException {
  DataSessionContext context;
  DataRequestSession requestSession=null;
  try {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle(),null);
    requestSession=DataRequestSession.newSession(context);
    IModelAdapter modelAdaptor=requestSession.getModelAdaptor();
    DataSourceHandle dataSource=dataSet.getDataSource();
    IBaseDataSourceDesign sourceDesign=modelAdaptor.adaptDataSource(dataSource);
    IBaseDataSetDesign dataSetDesign=modelAdaptor.adaptDataSet(dataSet);
    requestSession.clearCache(sourceDesign,dataSetDesign);
  }
  finally {
    if (requestSession != null) {
      requestSession.shutdown();
    }
  }
}",0.9676320272572402
65462,"public boolean canLeave(){
  if (propertyPage instanceof DataSetEditorPage) {
    boolean okToLeave=((DataSetEditorPage)propertyPage).okToLeave();
    if (okToLeave) {
      try {
        DataSetDesign requestDesign=null;
        DesignSessionResponse response=null;
        if (dataSetSession != null) {
          requestDesign=dataSetSession.getRequest().getDataSetDesign();
          response=dataSetSession.flush().getResponse();
        }
 else         response=((DataSetEditorPage)propertyPage).collectPageResponse();
        DTPUtil.getInstance().updateDataSetHandle(response,requestDesign,(OdaDataSetHandle)((DataSetEditor)getContainer()).getModel(),false);
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return true;
  }
  if (propertyPage instanceof DataSourceEditorPage) {
    if (propertyPage.okToLeave()) {
      try {
        DataSourceDesign requestDesign=null;
        if (this.dataSourceSession != null)         requestDesign=this.dataSourceSession.getRequest().getDataSourceDesign();
        DTPUtil.getInstance().updateDataSourceHandle(((DataSourceEditorPage)propertyPage).getEditSessionResponse().getResponse(),requestDesign,(OdaDataSourceHandle)(getContainer()).getModel());
        ((DataSourceEditor)this.getContainer()).updateDesignSession();
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return propertyPage.okToLeave();
  }
  return super.canLeave();
}","public boolean canLeave(){
  if (propertyPage instanceof DataSetEditorPage) {
    try {
      DataSetDesign requestDesign=null;
      DesignSessionResponse response=null;
      if (dataSetSession != null) {
        requestDesign=dataSetSession.getRequest().getDataSetDesign();
        response=dataSetSession.flush().getResponse();
      }
 else       response=((DataSetEditorPage)propertyPage).collectPageResponse();
      DTPUtil.getInstance().updateDataSetHandle(response,requestDesign,(OdaDataSetHandle)((DataSetEditor)getContainer()).getModel(),false);
    }
 catch (    OdaException e) {
      ExceptionHandler.handle(e);
    }
    return true;
  }
  if (propertyPage instanceof DataSourceEditorPage) {
    if (propertyPage.okToLeave()) {
      try {
        DataSourceDesign requestDesign=null;
        if (this.dataSourceSession != null)         requestDesign=this.dataSourceSession.getRequest().getDataSourceDesign();
        DTPUtil.getInstance().updateDataSourceHandle(((DataSourceEditorPage)propertyPage).getEditSessionResponse().getResponse(),requestDesign,(OdaDataSourceHandle)(getContainer()).getModel());
        ((DataSourceEditor)this.getContainer()).updateDesignSession();
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return propertyPage.okToLeave();
  }
  return super.canLeave();
}",0.75
65463,"/** 
 * @param ise
 * @return
 */
private static IScriptExpression constructValidScriptExpression(IScriptExpression ise){
  return ise != null && ise.getText() != null && ise.getText().trim().length() > 0 ? ise : new ScriptExpression(""String_Node_Str"");
}","/** 
 * @param ise
 * @return
 */
private static IScriptExpression constructValidScriptExpression(IScriptExpression ise){
  if (ise != null && BaseExpression.constantId.equals(ise.getScriptId()))   return ise;
  return ise != null && ise.getText() != null && ise.getText().trim().length() > 0 ? ise : new ScriptExpression(""String_Node_Str"");
}",0.7859531772575251
65464,"/** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
public int compare(Object obj1,Object obj2){
  IResultObject row1=(IResultObject)obj1;
  IResultObject row2=(IResultObject)obj2;
  for (int i=0; i < sortKeyIndexes.length; i++) {
    int colIndex=sortKeyIndexes[i];
    String colName=sortKeyColumns[i];
    try {
      Object colObj1=null;
      Object colObj2=null;
      if (eventHandler != null) {
        colObj1=eventHandler.getValue(row1,colIndex,colName);
        colObj2=eventHandler.getValue(row2,colIndex,colName);
      }
 else {
        colObj1=row1.getFieldValue(colIndex);
        colObj2=row2.getFieldValue(colIndex);
      }
      int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
      if (result != 0) {
        return sortAscending[i] ? result : -result;
      }
    }
 catch (    DataException e) {
    }
  }
  return 0;
}","/** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
public int compare(Object obj1,Object obj2){
  IResultObject row1=(IResultObject)obj1;
  IResultObject row2=(IResultObject)obj2;
  for (int i=0; i < sortKeyIndexes.length; i++) {
    int colIndex=sortKeyIndexes[i];
    String colName=sortKeyColumns[i];
    try {
      Object colObj1=null;
      Object colObj2=null;
      if (eventHandler != null) {
        colObj1=eventHandler.getValue(row1,colIndex,colName);
        colObj2=eventHandler.getValue(row2,colIndex,colName);
      }
 else {
        colObj1=row1.getFieldValue(colIndex);
        colObj2=row2.getFieldValue(colIndex);
      }
      int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
      if (result != 0) {
        if (sortAscending[i] == SortSpec.SORT_DISABLE) {
          return 0;
        }
        return sortAscending[i] == SortSpec.SORT_ASC ? result : -result;
      }
    }
 catch (    DataException e) {
    }
  }
  return 0;
}",0.9363920750782064
65465,"/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private static Comparator getComparator(SortSpec sortSpec,final IEventHandler eventHandler){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.getSortKeyIndexes();
  final String[] sortKeyColumns=sortSpec.getSortKeyColumns();
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final boolean[] sortAscending=sortSpec.getSortAscending();
  final CompareHints[] comparators=sortSpec.getComparator();
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        String colName=sortKeyColumns[i];
        try {
          Object colObj1=null;
          Object colObj2=null;
          if (eventHandler != null) {
            colObj1=eventHandler.getValue(row1,colIndex,colName);
            colObj2=eventHandler.getValue(row2,colIndex,colName);
          }
 else {
            colObj1=row1.getFieldValue(colIndex);
            colObj2=row2.getFieldValue(colIndex);
          }
          int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
          if (result != 0) {
            return sortAscending[i] ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
  }
;
  return comparator;
}","/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private static Comparator getComparator(SortSpec sortSpec,final IEventHandler eventHandler){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.getSortKeyIndexes();
  final String[] sortKeyColumns=sortSpec.getSortKeyColumns();
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final int[] sortAscending=sortSpec.getSortAscending();
  final CompareHints[] comparators=sortSpec.getComparator();
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        String colName=sortKeyColumns[i];
        try {
          Object colObj1=null;
          Object colObj2=null;
          if (eventHandler != null) {
            colObj1=eventHandler.getValue(row1,colIndex,colName);
            colObj2=eventHandler.getValue(row2,colIndex,colName);
          }
 else {
            colObj1=row1.getFieldValue(colIndex);
            colObj2=row2.getFieldValue(colIndex);
          }
          int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
          if (result != 0) {
            if (sortAscending[i] == SortSpec.SORT_DISABLE) {
              return 0;
            }
            return sortAscending[i] == SortSpec.SORT_ASC ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
  }
;
  return comparator;
}",0.9582366589327146
65466,"/** 
 * @param rsMeta
 * @return
 */
private static SortSpec getSortSpec(IResultClass rsMeta){
  int fieldCount=rsMeta.getFieldCount();
  int[] sortKeyIndexs=new int[fieldCount];
  String[] sortKeyNames=new String[fieldCount];
  boolean[] ascending=new boolean[fieldCount];
  CompareHints[] comparator=new CompareHints[fieldCount];
  for (int i=0; i < fieldCount; i++) {
    sortKeyIndexs[i]=i + 1;
    ascending[i]=true;
  }
  return new SortSpec(sortKeyIndexs,sortKeyNames,ascending,comparator);
}","/** 
 * @param rsMeta
 * @return
 */
private static SortSpec getSortSpec(IResultClass rsMeta){
  int fieldCount=rsMeta.getFieldCount();
  int[] sortKeyIndexs=new int[fieldCount];
  String[] sortKeyNames=new String[fieldCount];
  int[] ascending=new int[fieldCount];
  CompareHints[] comparator=new CompareHints[fieldCount];
  for (int i=0; i < fieldCount; i++) {
    sortKeyIndexs[i]=i + 1;
    ascending[i]=SortSpec.SORT_ASC;
  }
  return new SortSpec(sortKeyIndexs,sortKeyNames,ascending,comparator);
}",0.959122632103689
65467,"void setSortAscending(boolean[] sortAscending){
  this.sortAscending=sortAscending;
}","void setSortAscending(int[] sortAscending){
  this.sortAscending=sortAscending;
}",0.9518072289156626
65468,"boolean[] getSortAscending(){
  return sortAscending;
}","int[] getSortAscending(){
  return sortAscending;
}",0.9245283018867924
65469,"/** 
 * @param sortKeyIndexes
 * @param sortKeyColumns
 * @param sortAscending
 */
public SortSpec(int[] sortKeyIndexes,String[] sortKeyColumns,boolean[] sortAscending,CompareHints[] comparator){
  this.setSortKeyIndexes(sortKeyIndexes);
  this.setSortKeyColumns(sortKeyColumns);
  this.setSortAscending(sortAscending);
  this.setComparator(comparator);
}","/** 
 * @param sortKeyIndexes
 * @param sortKeyColumns
 * @param sortAscending
 */
public SortSpec(int[] sortKeyIndexes,String[] sortKeyColumns,int[] sortAscending,CompareHints[] comparator){
  this.setSortKeyIndexes(sortKeyIndexes);
  this.setSortKeyColumns(sortKeyColumns);
  this.setSortAscending(sortAscending);
  this.setComparator(comparator);
}",0.9858356940509916
65470,"/** 
 * Populate grouping to the query.
 * @param cx
 * @throws DataException
 */
private void populateGrouping(ScriptContext cx,SortingOptimizer opt) throws DataException {
  List groups=this.baseQueryDefn.getGroups();
  if (groups != null && !groups.isEmpty()) {
    boolean needSortingOnGroupKeys=needSortingOnGroupKeys();
    IQuery.GroupSpec[] groupSpecs=new IQuery.GroupSpec[groups.size()];
    Iterator it=groups.iterator();
    for (int i=0; it.hasNext(); i++) {
      IGroupDefinition src=(IGroupDefinition)it.next();
      validateGroupExpression(src);
      String expr=getDataSetGroupKeyExpression(src);
      String groupName=populateGroupName(i,expr);
      int dataType=getColumnDataType(cx,getGroupKeyExpression(src));
      boolean doGroupSorting=false;
      if (this.session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE) {
        doGroupSorting=true;
      }
 else       if (src.getSortDirection() == IGroupDefinition.NO_SORT) {
        doGroupSorting=false;
      }
 else {
        doGroupSorting=needSortingOnGroupKeys;
      }
      IQuery.GroupSpec dest=QueryExecutorUtil.groupDefnToSpec(cx,src,expr,groupName,-1,dataType,doGroupSorting);
      groupSpecs[i]=dest;
      this.temporaryComputedColumns.add(getComputedColumnInstance(cx,groupSpecs[i].getInterval(),src,expr,groupName,dest,dataType));
    }
    if (opt.acceptGroupSorting()) {
      for (int i=0; i < groupSpecs.length; i++) {
        IQuery.GroupSpec spec=groupSpecs[i];
        spec.setSortDirection(IGroupDefinition.NO_SORT);
      }
    }
    odiQuery.setGrouping(Arrays.asList(groupSpecs));
  }
}","/** 
 * Populate grouping to the query.
 * @param cx
 * @throws DataException
 */
private void populateGrouping(ScriptContext cx,SortingOptimizer opt) throws DataException {
  List groups=this.baseQueryDefn.getGroups();
  if (groups != null && !groups.isEmpty()) {
    IQuery.GroupSpec[] groupSpecs=new IQuery.GroupSpec[groups.size()];
    Iterator it=groups.iterator();
    for (int i=0; it.hasNext(); i++) {
      IGroupDefinition src=(IGroupDefinition)it.next();
      validateGroupExpression(src);
      String expr=getDataSetGroupKeyExpression(src);
      String groupName=populateGroupName(i,expr);
      int dataType=getColumnDataType(cx,getGroupKeyExpression(src));
      boolean doGroupSorting=false;
      if (this.session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE) {
        doGroupSorting=true;
      }
 else       if (src.getSortDirection() == IGroupDefinition.NO_SORT) {
        doGroupSorting=false;
      }
 else {
        doGroupSorting=this.baseQueryDefn.getQueryExecutionHints().doSortBeforeGrouping();
      }
      IQuery.GroupSpec dest=QueryExecutorUtil.groupDefnToSpec(cx,src,expr,groupName,-1,dataType,doGroupSorting);
      groupSpecs[i]=dest;
      this.temporaryComputedColumns.add(getComputedColumnInstance(cx,groupSpecs[i].getInterval(),src,expr,groupName,dest,dataType));
    }
    if (opt.acceptGroupSorting()) {
      for (int i=0; i < groupSpecs.length; i++) {
        IQuery.GroupSpec spec=groupSpecs[i];
        spec.setSortDirection(IGroupDefinition.NO_SORT);
      }
    }
    odiQuery.setGrouping(Arrays.asList(groupSpecs));
  }
}",0.9533354212339492
65471,"/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope,ScriptContext cx) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof ICompiledScript) {
    return cx.newContext(scope).evaluate((ICompiledScript)handle);
  }
 else   if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope,cx);
    try {
      if (value instanceof BirtException)       throw (BirtException)value;
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope,cx);
    Object[] op1Value=new Object[0], op2Value=new Object[0];
    boolean isCombined=false;
    if (ce.getOperand1() != null) {
      if (ce.getOperand1() instanceof IScriptExpression) {
        op1Value=new Object[1];
        op1Value[0]=evaluateExpression(ce.getOperand1(),odiResult,scope,cx);
      }
 else       if (ce.getOperand1() instanceof IExpressionCollection) {
        isCombined=true;
        Object[] exprs=((IExpressionCollection)ce.getOperand1()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateExpression((IBaseExpression)exprs[i],odiResult,scope,cx);
        }
        op1Value=flatternMultipleValues(result);
      }
    }
    if (ce.getOperand2() != null) {
      if (ce.getOperand2() instanceof IScriptExpression) {
        op2Value=new Object[1];
        op2Value[0]=evaluateExpression(ce.getOperand2(),odiResult,scope,cx);
      }
    }
    if (isCombined)     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value);
 else     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value.length > 0 ? op1Value[0] : null,op2Value.length > 0 ? op2Value[0] : null);
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  return exprValue;
}","/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope,ScriptContext cx) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof ICompiledScript) {
    return cx.newContext(scope).evaluate((ICompiledScript)handle);
  }
 else   if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope,cx);
    try {
      if (value instanceof BirtException)       throw (BirtException)value;
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope,cx);
    Object[] op1Value=new Object[0], op2Value=new Object[0];
    boolean isCombined=false;
    if (ce.getOperand1() != null) {
      if (ce.getOperand1() instanceof IScriptExpression) {
        op1Value=new Object[1];
        op1Value[0]=evaluateExpression(ce.getOperand1(),odiResult,scope,cx);
      }
 else       if (ce.getOperand1() instanceof IExpressionCollection) {
        isCombined=true;
        Object[] exprs=((IExpressionCollection)ce.getOperand1()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateExpression((IBaseExpression)exprs[i],odiResult,scope,cx);
        }
        op1Value=flatternMultipleValues(result);
      }
    }
    if (ce.getOperand2() != null) {
      if (ce.getOperand2() instanceof IScriptExpression) {
        op2Value=new Object[1];
        op2Value[0]=evaluateExpression(ce.getOperand2(),odiResult,scope,cx);
      }
    }
    if (isCombined)     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value);
 else     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value.length > 0 ? op1Value[0] : null,op2Value.length > 0 ? op2Value[0] : null);
  }
 else   if (BaseExpression.constantId.equals(dataExpr.getScriptId())) {
    Object value=((IScriptExpression)dataExpr).getHandle();
    if (value == null) {
      value=((IScriptExpression)dataExpr).getText();
      ((IScriptExpression)dataExpr).setHandle(value);
    }
    exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    return exprValue;
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  return exprValue;
}",0.9332595870206488
65472,"/** 
 * Prepares one expression
 * @param expr
 * @param groupLevel
 * @param cx
 * @param reg
 * @throws DataException 
 */
private void prepareExpression(IBaseExpression expr,int groupLevel,ScriptContext cx,AggregateRegistry reg) throws DataException {
  try {
    ExpressionCompiler compiler=this.expressionCompiler;
    if (expr instanceof IScriptExpression) {
      IScriptExpression baseExpr=((IScriptExpression)expr);
      String exprText=((IScriptExpression)expr).getText();
      CompiledExpression handle=compiler.compile(exprText,reg,session.getEngineContext().getScriptContext());
      expr.setHandle(handle);
    }
 else     if (expr instanceof IConditionalExpression) {
      IConditionalExpression ce=(IConditionalExpression)expr;
      ce=transformConditionalExpression(ce);
      prepareExpression(ce.getExpression(),groupLevel,cx,reg);
      if (ce.getOperand1() != null)       prepareExpression(ce.getOperand1(),groupLevel,cx,reg);
      if (ce.getOperand2() != null)       prepareExpression(ce.getOperand2(),groupLevel,cx,reg);
      expr.setHandle(ce);
    }
 else     if (expr instanceof IExpressionCollection) {
      IExpressionCollection ce=(IExpressionCollection)expr;
      Object[] exprs=ce.getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareExpression((IBaseExpression)exprs[i],groupLevel,cx,reg);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Prepares one expression
 * @param expr
 * @param groupLevel
 * @param cx
 * @param reg
 * @throws DataException 
 */
private void prepareExpression(IBaseExpression expr,int groupLevel,ScriptContext cx,AggregateRegistry reg) throws DataException {
  try {
    ExpressionCompiler compiler=this.expressionCompiler;
    if (expr instanceof IScriptExpression) {
      IScriptExpression baseExpr=((IScriptExpression)expr);
      String exprText=((IScriptExpression)expr).getText();
      if (BaseExpression.constantId.equals(baseExpr.getScriptId())) {
        baseExpr.setHandle(exprText);
      }
 else {
        CompiledExpression handle=compiler.compile(exprText,reg,session.getEngineContext().getScriptContext());
        expr.setHandle(handle);
      }
    }
 else     if (expr instanceof IConditionalExpression) {
      IConditionalExpression ce=(IConditionalExpression)expr;
      ce=transformConditionalExpression(ce);
      prepareExpression(ce.getExpression(),groupLevel,cx,reg);
      if (ce.getOperand1() != null)       prepareExpression(ce.getOperand1(),groupLevel,cx,reg);
      if (ce.getOperand2() != null)       prepareExpression(ce.getOperand2(),groupLevel,cx,reg);
      expr.setHandle(ce);
    }
 else     if (expr instanceof IExpressionCollection) {
      IExpressionCollection ce=(IExpressionCollection)expr;
      Object[] exprs=ce.getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareExpression((IBaseExpression)exprs[i],groupLevel,cx,reg);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.95523370638578
65473,"static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    Object value=cssStyles.get(ele.getParentNode()).getProperty(LIST_STYLE_TYPE);
    String styleType=""String_Node_Str"";
    if (value != null)     styleType=value.toString();
    BulletFrame frame=new BulletFrame(styleType);
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(frame.paintBullet(index) + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(frame.paintBullet(index));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}","static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    Object value=cssStyles.get(ele.getParentNode()).getProperty(LIST_STYLE_TYPE);
    String styleType=""String_Node_Str"";
    if (value != null)     styleType=value.toString();
    BulletFrame frame=new BulletFrame(styleType);
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(frame.paintBullet(index) + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(frame.paintBullet(index));
      if (""String_Node_Str"".equals(text.getText())) {
        text.setText(""String_Node_Str"");
      }
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}",0.990530477153627
65474,"private IAggregationResultSet[] applyNoAggrUpdateFilters(List finalFilters,CubeQueryExecutor executor,IAggregationResultSet[] rs,ICube cube,IBindingValueFetcher fetcher,boolean fromCubeOperation) throws DataException, IOException {
  if (!finalFilters.isEmpty()) {
    List aggrEvalList=new ArrayList<AggrMeasureFilterEvalHelper>();
    List dimEvalList=new ArrayList<IJSFilterHelper>();
    List<IFilterDefinition> drillFilterList=new ArrayList<IFilterDefinition>();
    for (int i=0; i < finalFilters.size(); i++) {
      IFilterDefinition filter=(IFilterDefinition)finalFilters.get(i);
      boolean find=false;
      String bindingName=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
      if (executor.getCubeQueryDefinition().getCubeOperations().length > 0) {
        ICubeOperation[] operations=executor.getCubeQueryDefinition().getCubeOperations();
        for (int j=0; j < operations.length; j++) {
          if (operations[j] instanceof AddingNestAggregations) {
            AddingNestAggregations aggr=(AddingNestAggregations)operations[i];
            IBinding[] bindings=aggr.getNewBindings();
            for (int k=0; k < bindings.length; k++) {
              if (bindings[k].getBindingName().equals(bindingName)) {
                find=true;
                break;
              }
            }
          }
        }
      }
      if (find != fromCubeOperation)       continue;
      int type=executor.getFilterType(filter,executor.getDimLevelsDefinedInCubeQuery());
      if (type == executor.DIMENSION_FILTER) {
        dimEvalList.add(BaseDimensionFilterEvalHelper.createFilterHelper(executor.getOuterResults(),executor.getScope(),executor.getCubeQueryDefinition(),filter,executor.getSession().getEngineContext().getScriptContext()));
      }
 else       if (type == executor.AGGR_MEASURE_FILTER) {
        aggrEvalList.add(new AggrMeasureFilterEvalHelper(executor.getOuterResults(),executor.getScope(),executor.getCubeQueryDefinition(),filter,executor.getSession().getEngineContext().getScriptContext()));
      }
 else       if (type == executor.FACTTABLE_FILTER) {
        drillFilterList.add(filter);
      }
    }
    List<Integer> affectedAggrResultSetIndex=new ArrayList<Integer>();
    if (aggrEvalList.size() > 0) {
      AggrMeasureFilterHelper aggrFilterHelper=new AggrMeasureFilterHelper(cube,rs);
      aggrFilterHelper.setQueryExecutor(executor);
      aggrFilterHelper.setBindingValueFetcher(fetcher);
      rs=aggrFilterHelper.removeInvalidAggrRows(aggrEvalList,affectedAggrResultSetIndex);
    }
    if (dimEvalList.size() > 0) {
      AggregationFilterHelper helper=new AggregationFilterHelper((Cube)cube,dimEvalList,fetcher);
      rs=helper.generateFilteredAggregationResultSet(rs,affectedAggrResultSetIndex);
    }
    Map<DimLevel,IJSFacttableFilterEvalHelper> edgeDrillFilterMap=populateEdgeDrillFilterMap(executor,drillFilterList);
    List<IAggregationResultSet> edgeResultSet=populateAndFilterEdgeResultSet(rs,edgeDrillFilterMap);
    for (int i=0; i < edgeResultSet.size(); i++) {
      for (int j=0; j < affectedAggrResultSetIndex.size(); j++) {
        this.applyJoin(edgeResultSet.get(i),rs[affectedAggrResultSetIndex.get(j).intValue()]);
      }
    }
    if (edgeResultSet.size() > 1) {
      combineEdgeResultSetsInfo(edgeResultSet);
    }
  }
  return rs;
}","private IAggregationResultSet[] applyNoAggrUpdateFilters(List finalFilters,CubeQueryExecutor executor,IAggregationResultSet[] rs,ICube cube,IBindingValueFetcher fetcher,boolean fromCubeOperation) throws DataException, IOException {
  if (!finalFilters.isEmpty()) {
    List aggrEvalList=new ArrayList<AggrMeasureFilterEvalHelper>();
    List dimEvalList=new ArrayList<IJSFilterHelper>();
    List<IFilterDefinition> drillFilterList=new ArrayList<IFilterDefinition>();
    for (int i=0; i < finalFilters.size(); i++) {
      IFilterDefinition filter=(IFilterDefinition)finalFilters.get(i);
      boolean find=false;
      String bindingName=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
      if (executor.getCubeQueryDefinition().getCubeOperations().length > 0) {
        ICubeOperation[] operations=executor.getCubeQueryDefinition().getCubeOperations();
        for (int j=0; j < operations.length; j++) {
          if (operations[j] instanceof AddingNestAggregations) {
            AddingNestAggregations aggr=(AddingNestAggregations)operations[j];
            IBinding[] bindings=aggr.getNewBindings();
            for (int k=0; k < bindings.length; k++) {
              if (bindings[k].getBindingName().equals(bindingName)) {
                find=true;
                break;
              }
            }
          }
        }
      }
      if (find != fromCubeOperation)       continue;
      int type=executor.getFilterType(filter,executor.getDimLevelsDefinedInCubeQuery());
      if (type == executor.DIMENSION_FILTER) {
        dimEvalList.add(BaseDimensionFilterEvalHelper.createFilterHelper(executor.getOuterResults(),executor.getScope(),executor.getCubeQueryDefinition(),filter,executor.getSession().getEngineContext().getScriptContext()));
      }
 else       if (type == executor.AGGR_MEASURE_FILTER) {
        aggrEvalList.add(new AggrMeasureFilterEvalHelper(executor.getOuterResults(),executor.getScope(),executor.getCubeQueryDefinition(),filter,executor.getSession().getEngineContext().getScriptContext()));
      }
 else       if (type == executor.FACTTABLE_FILTER) {
        drillFilterList.add(filter);
      }
    }
    List<Integer> affectedAggrResultSetIndex=new ArrayList<Integer>();
    if (aggrEvalList.size() > 0) {
      AggrMeasureFilterHelper aggrFilterHelper=new AggrMeasureFilterHelper(cube,rs);
      aggrFilterHelper.setQueryExecutor(executor);
      aggrFilterHelper.setBindingValueFetcher(fetcher);
      rs=aggrFilterHelper.removeInvalidAggrRows(aggrEvalList,affectedAggrResultSetIndex);
    }
    if (dimEvalList.size() > 0) {
      AggregationFilterHelper helper=new AggregationFilterHelper((Cube)cube,dimEvalList,fetcher);
      rs=helper.generateFilteredAggregationResultSet(rs,affectedAggrResultSetIndex);
    }
    Map<DimLevel,IJSFacttableFilterEvalHelper> edgeDrillFilterMap=populateEdgeDrillFilterMap(executor,drillFilterList);
    List<IAggregationResultSet> edgeResultSet=populateAndFilterEdgeResultSet(rs,edgeDrillFilterMap);
    for (int i=0; i < edgeResultSet.size(); i++) {
      for (int j=0; j < affectedAggrResultSetIndex.size(); j++) {
        this.applyJoin(edgeResultSet.get(i),rs[affectedAggrResultSetIndex.get(j).intValue()]);
      }
    }
    if (edgeResultSet.size() > 1) {
      combineEdgeResultSetsInfo(edgeResultSet);
    }
  }
  return rs;
}",0.9997038791827064
65475,"public void close() throws BirtException {
  if (odiResult == null)   return;
  this.resultService.getSession().getEngine().removeListener(listener);
  if (!stopSign.isStopped()) {
    if (this.getRdSaveHelper().needsSaveToDoc()) {
      while (this.next())       ;
      this.getRdSaveHelper().doSaveFinish();
    }
    if (needCache() && !this.isEmpty()) {
      while (this.next())       ;
      closeCacheOutputStream();
    }
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close() throws BirtException {
  if (odiResult == null)   return;
  this.resultService.getSession().getEngine().removeListener(listener);
  if (!stopSign.isStopped()) {
    if (this.getRdSaveHelper().needsSaveToDoc()) {
      while (this.next())       ;
      this.getRdSaveHelper().doSaveFinish();
    }
    if (needCache() && !this.isEmpty()) {
      while (this.next())       ;
      closeCacheOutputStream();
    }
  }
  if (odiResult != null)   odiResult.close();
  QueryPrepareUtil.clear(resultService.getSession());
  odiResult=null;
  resultService=null;
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.9580745341614908
65476,"public void close() throws BirtException {
}","public void close() throws BirtException {
  QueryPrepareUtil.clear(session);
}",0.7154471544715447
65477,"public DataPresentationEngine(DataEngineFactory factory,ExecutionContext context,IDocArchiveReader reader,boolean needAccessFactTable) throws Exception {
  super(factory,context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setAppContext(context.getAppContext());
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  this.needAccessFactTable=needAccessFactTable;
}","public DataPresentationEngine(DataEngineFactory factory,ExecutionContext context,IDocArchiveReader reader,boolean needAccessFactTable) throws Exception {
  super(factory,context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,context.getDesign(),context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setAppContext(context.getAppContext());
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  this.needAccessFactTable=needAccessFactTable;
}",0.9871580122836404
65478,"public static boolean needOnPageBreak(ReportItemDesign design,ExecutionContext context){
  if (design == null) {
    return false;
  }
  if (design.getOnPageBreak() != null) {
    return true;
  }
  String javaClass=design.getJavaClass();
  if (javaClass == null) {
    return false;
  }
  Object extensionData=design.getExtensionData();
  if (extensionData != null) {
    return (Boolean)extensionData;
  }
  EventHandlerManager eventHandlerManager=context.getEventHandlerManager();
  Class<?> clazz=null;
  boolean result=false;
  try {
    clazz=eventHandlerManager.loadClass(javaClass,context);
    result=(Boolean)design.accept(scriptChecker,clazz);
  }
 catch (  EngineException e) {
    e.printStackTrace();
  }
  design.setExtensionData(result);
  return result;
}","public static boolean needOnPageBreak(ReportItemDesign design,ExecutionContext context){
  if (design == null) {
    return false;
  }
  if (design instanceof ExtendedItemDesign) {
    return false;
  }
  if (design.getOnPageBreak() != null) {
    return true;
  }
  String javaClass=design.getJavaClass();
  if (javaClass == null) {
    return false;
  }
  Object extensionData=design.getExtensionData();
  if (extensionData != null) {
    return (Boolean)extensionData;
  }
  EventHandlerManager eventHandlerManager=context.getEventHandlerManager();
  Class<?> clazz=null;
  boolean result=false;
  try {
    clazz=eventHandlerManager.loadClass(javaClass,context);
    result=(Boolean)design.accept(scriptChecker,clazz);
  }
 catch (  EngineException e) {
    e.printStackTrace();
  }
  design.setExtensionData(result);
  return result;
}",0.957816377171216
65479,"public IndexReader(IDocArchiveReader archive,String name) throws IOException {
  if (archive.exists(name)) {
    RAInputStream input=archive.getInputStream(name);
    try {
      int version=readVersion(input.readInt(),name);
switch (version) {
case VERSION_0:
{
          valueType=BTreeMap.LONG_VALUE;
          int type=input.readInt();
          if (type == INLINE_MAP) {
            DataInputStream di=new DataInputStream(input);
            int entries=IOUtil.readInt(di);
            map=new HashMap<String,Object>(entries);
            for (int i=0; i < entries; i++) {
              String key=IOUtil.readString(di);
              long offset=IOUtil.readLong(di);
              map.put(key,new Long(offset));
            }
          }
 else {
            btree=BTreeMap.openTreeMap(archive,name,valueType);
          }
        }
case VERSION_1:
{
        valueType=BTreeMap.BOOKMARK_VALUE;
        int type=input.readInt();
        if (type == INLINE_MAP) {
          DataInputStream di=new DataInputStream(input);
          int entries=IOUtil.readInt(di);
          map=new HashMap<String,Object>(entries);
          for (int index=0; index < entries; index++) {
            String key=IOUtil.readString(di);
            BookmarkContent bookmark=new BookmarkContent();
            bookmark.readStream(di);
            map.put(key,bookmark);
          }
        }
 else {
          btree=BTreeMap.openTreeMap(archive,name,valueType);
        }
      }
default :
{
      throw new IOException(""String_Node_Str"" + version);
    }
}
}
  finally {
input.close();
}
}
}","public IndexReader(IDocArchiveReader archive,String name) throws IOException {
  if (archive.exists(name)) {
    RAInputStream input=archive.getInputStream(name);
    try {
      int version=readVersion(input.readInt(),name);
switch (version) {
case VERSION_0:
{
          valueType=BTreeMap.LONG_VALUE;
          int type=input.readInt();
          if (type == INLINE_MAP) {
            DataInputStream di=new DataInputStream(input);
            int entries=IOUtil.readInt(di);
            map=new HashMap<String,Object>(entries);
            for (int i=0; i < entries; i++) {
              String key=IOUtil.readString(di);
              long offset=IOUtil.readLong(di);
              map.put(key,new Long(offset));
            }
          }
 else {
            btree=BTreeMap.openTreeMap(archive,name,valueType);
          }
          break;
        }
case VERSION_1:
{
        valueType=BTreeMap.BOOKMARK_VALUE;
        int type=input.readInt();
        if (type == INLINE_MAP) {
          DataInputStream di=new DataInputStream(input);
          int entries=IOUtil.readInt(di);
          map=new HashMap<String,Object>(entries);
          for (int index=0; index < entries; index++) {
            String key=IOUtil.readString(di);
            BookmarkContent bookmark=new BookmarkContent();
            bookmark.readStream(di);
            map.put(key,bookmark);
          }
        }
 else {
          btree=BTreeMap.openTreeMap(archive,name,valueType);
        }
        break;
      }
default :
{
      throw new IOException(""String_Node_Str"" + version);
    }
}
}
  finally {
input.close();
}
}
}",0.9899307740717432
65480,"/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 * @throws DataException 
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode) throws DataException {
  QueryDefinition qd=new QueryDefinition();
  qd.setDataSetName(""String_Node_Str"");
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addBinding(totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 6) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}","/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 * @throws DataException 
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode) throws DataException {
  QueryDefinition qd=new QueryDefinition();
  qd.setDataSetName(""String_Node_Str"");
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addBinding(totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 6) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 7) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    fd.setFilterTarget(FilterTarget.RESULTSET);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.9668502078885268
65481,"/** 
 * @return
 * @throws DataException 
 */
private QueryDefinition newGenIVReportQuery() throws DataException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  if (!this.notIncludeAggr) {
    for (int i=0; i < totalBeArray.length; i++)     qd.addBinding(totalBeArray[i]);
  }
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_sort) {
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd.addSort(sortDefn);
  }
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (this.GEN_add_group1 == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}","/** 
 * @return
 * @throws DataException 
 */
private QueryDefinition newGenIVReportQuery() throws DataException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  if (!this.notIncludeAggr) {
    for (int i=0; i < totalBeArray.length; i++)     qd.addBinding(totalBeArray[i]);
  }
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_topN_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    filterDefn.setFilterTarget(FilterTarget.DATASET);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_sort) {
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd.addSort(sortDefn);
  }
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (this.GEN_add_group1 == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.9138733705772812
65482,"private boolean isEmpty(String str){
  return str == null || str.isEmpty();
}","private boolean isEmpty(String str){
  return str == null || str.length() == 0;
}",0.8987341772151899
65483,"/** 
 * Get all accessible bindings from a query definition. If <code>qd</code> is a sub query definition, returns bindings defined onto itself and all not-aggregation bindings from its ancestors. If <code>qd</code> is not a sub query definition, just returns its bindings defined onto itself
 * @param qd
 * @return
 * @throws DataException
 */
public static Map<String,IBinding> getAccessibleBindings(IBaseQueryDefinition qd) throws DataException {
  if (qd == null) {
    return null;
  }
  Map<String,IBinding> result=new HashMap<String,IBinding>(qd.getBindings());
  IBaseQueryDefinition parent=qd.getParentQuery();
  while (parent != null) {
    Map parentBindings=parent.getBindings();
    Map<String,Boolean> aggrInfo=parseAggregations(parentBindings);
    Iterator it=parentBindings.keySet().iterator();
    while (it.hasNext()) {
      String name=(String)it.next();
      if (!aggrInfo.get(name)) {
        IBinding b=(IBinding)parentBindings.get(name);
        if (!result.containsKey(name)) {
          result.put(name,b);
        }
      }
    }
    parent=parent.getParentQuery();
  }
  return result;
}","/** 
 * Get all accessible bindings from a query definition. If <code>qd</code> is a sub query definition, returns bindings defined onto itself and all not-aggregation bindings from its ancestors. If <code>qd</code> is not a sub query definition, just returns its bindings defined onto itself
 * @param qd
 * @return
 * @throws DataException
 */
public static Map<String,IBinding> getAccessibleBindings(IBaseQueryDefinition qd) throws DataException {
  if (qd == null) {
    return null;
  }
  Map<String,IBinding> result=new HashMap<String,IBinding>(qd.getBindings());
  IBaseQueryDefinition parent=null;
  if (qd instanceof SubqueryDefinition) {
    parent=qd.getParentQuery();
  }
  while (parent != null) {
    Map parentBindings=parent.getBindings();
    Map<String,Boolean> aggrInfo=parseAggregations(parentBindings);
    Iterator it=parentBindings.keySet().iterator();
    while (it.hasNext()) {
      String name=(String)it.next();
      if (!aggrInfo.get(name)) {
        IBinding b=(IBinding)parentBindings.get(name);
        if (!result.containsKey(name)) {
          result.put(name,b);
        }
      }
    }
    if (parent instanceof SubqueryDefinition) {
      parent=parent.getParentQuery();
    }
 else {
      break;
    }
  }
  return result;
}",0.9269521410579346
65484,"/** 
 * @return
 */
private boolean createNoneODASelectedDataSource(){
  DataSourceHandle dsHandle=null;
  if (helper.SCRIPT_DATA_SOURCE_DISPLAY_NAME.equals(prevSelectedDataSourceType.toString())) {
    String driverName=DataUIConstants.DATA_SOURCE_SCRIPT;
    Class classType=ScriptDataSourceHandle.class;
    dsHandle=helper.createDataSource(classType,dsName,driverName);
  }
  if (CASSANDRA_DATA_SOURCE_DISPLAY_NAME.equals(prevSelectedDataSourceType.toString())) {
    Class classType=ScriptDataSourceHandle.class;
    dsHandle=helper.createDataSource(classType,dsName,DataUIConstants.CASSANDRA_DATA_SOURCE_SCRIPT);
  }
 else {
    dsHandle=helper.createNoneOdaDataSourceHandle(dsName,prevSelectedDataSourceType);
  }
  if (dsHandle == null)   return false;
  try {
    slotHandle.add(dsHandle);
  }
 catch (  ContentException e) {
    ExceptionHandler.handle(e);
  }
catch (  NameException e) {
    ExceptionHandler.handle(e);
  }
  if (dsHandle instanceof ScriptDataSourceHandle) {
    Utility.setScriptActivityEditor();
  }
  createSelectedDataSourceTearDown();
  return true;
}","/** 
 * @return
 */
private boolean createNoneODASelectedDataSource(){
  DataSourceHandle dsHandle=null;
  if (helper.SCRIPT_DATA_SOURCE_DISPLAY_NAME.equals(prevSelectedDataSourceType.toString())) {
    String driverName=DataUIConstants.DATA_SOURCE_SCRIPT;
    Class classType=ScriptDataSourceHandle.class;
    dsHandle=helper.createDataSource(classType,dsName,driverName);
  }
 else   if (CASSANDRA_DATA_SOURCE_DISPLAY_NAME.equals(prevSelectedDataSourceType.toString())) {
    Class classType=ScriptDataSourceHandle.class;
    dsHandle=helper.createDataSource(classType,dsName,DataUIConstants.CASSANDRA_DATA_SOURCE_SCRIPT);
  }
 else {
    dsHandle=helper.createNoneOdaDataSourceHandle(dsName,prevSelectedDataSourceType);
  }
  if (dsHandle == null)   return false;
  try {
    slotHandle.add(dsHandle);
  }
 catch (  ContentException e) {
    ExceptionHandler.handle(e);
  }
catch (  NameException e) {
    ExceptionHandler.handle(e);
  }
  if (dsHandle instanceof ScriptDataSourceHandle) {
    Utility.setScriptActivityEditor();
  }
  createSelectedDataSourceTearDown();
  return true;
}",0.997240110395584
65485,"private IAggregationResultSet[] processOperationOnQuery(CubeQueryExecutor executor,BirtCubeView view,StopSign stopSign,IAggregationResultSet[] resultSet,AggregationDefinition[] aggrDefns,IBindingValueFetcher fetcher) throws DataException, IOException, BirtException {
  IAggregationResultSet[] rs=new IAggregationResultSet[aggrDefns.length];
  System.arraycopy(resultSet,0,rs,0,aggrDefns.length);
  IAggregationResultSet[] drillRs=new IAggregationResultSet[resultSet.length - aggrDefns.length];
  System.arraycopy(resultSet,aggrDefns.length,drillRs,0,drillRs.length);
  CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
  int rsLenBefore=rs.length;
  rs=coe.execute(rs,stopSign);
  int rsLenAfter=rs.length;
  List noAggrUpdateFilters=getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters());
  if (noAggrUpdateFilters.size() > 0) {
    IAggregationResultSet[] result=null;
    if (rsLenBefore < rsLenAfter) {
      result=new IAggregationResultSet[rsLenAfter - rsLenBefore];
      for (int i=0; i < result.length; i++) {
        result[i]=rs[rsLenBefore + i];
      }
      result=applyNoAggrUpdateFilters(noAggrUpdateFilters,executor,result,view.getCube(),fetcher,true);
      for (int i=0; i < result.length; i++) {
        rs[i + rsLenBefore]=result[i];
      }
    }
 else     if (rsLenBefore == rsLenAfter) {
      List<IAggregationResultSet> mergedResult=new ArrayList<IAggregationResultSet>();
      for (int i=0; i < rs.length; i++) {
        if (rs[i].getAggregationDefinition().getAggregationFunctions() != null && rs[i] instanceof MergedAggregationResultSet) {
          IAggregationResultSet[] applyResults=applyNoAggrUpdateFilters(noAggrUpdateFilters,executor,new IAggregationResultSet[]{rs[i]},view.getCube(),fetcher,true);
          rs[i]=applyResults[0];
          mergedResult.add(rs[i]);
        }
      }
      result=mergedResult.toArray(new IAggregationResultSet[0]);
    }
    List<IAggregationResultSet> edgeResultSet=populateAndFilterEdgeResultSet(rs,null);
    for (int i=0; i < edgeResultSet.size(); i++) {
      for (int j=0; j < result.length; j++) {
        this.applyJoin(edgeResultSet.get(i),result[j]);
      }
    }
  }
  if (drillRs.length > 0) {
    IPreparedCubeOperation[] ops=view.getPreparedCubeOperations();
    List<PreparedAddingNestAggregations> operations=new ArrayList<PreparedAddingNestAggregations>();
    List<CubeNestAggrDefn> nestedAggr=new ArrayList<CubeNestAggrDefn>();
    List<AggregationDefinition> aggregations=new ArrayList<AggregationDefinition>();
    for (int i=0; i < ops.length; i++) {
      List<AggregationDefinition> nested_aggregation=ops[i].getAggregationDefintions();
      for (int k=0; k < nested_aggregation.size(); k++) {
        AggregationDefinition[] drilled_nested_aggregation=DrillFilterHelper.preparedDrillForNestedAggregation(executor.getCubeQueryDefinition(),new CubeAggrDefn[]{ops[i].getNewCubeAggrDefns()[k]},new AggregationDefinition[]{nested_aggregation.get(k)});
        for (        AggregationDefinition aggregation : drilled_nested_aggregation) {
          CubeNestAggrDefn defn=(CubeNestAggrDefn)(ops[i].getNewCubeAggrDefns()[k]);
          nestedAggr.add(new CubeNestAggrDefn(defn.getName(),defn.getBasedExpression(),Arrays.asList(ops[i].getNewCubeAggrDefns()[k]),defn.getAggrName(),defn.getArguments(),defn.getFilter()));
          aggregations.add(aggregation);
        }
      }
      if (!nestedAggr.isEmpty()) {
        PreparedAddingNestAggregations drill_coe=new PreparedAddingNestAggregations();
        drill_coe.prepare(executor.getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext(),view.getAggregationRegisterTable(),nestedAggr.toArray(new CubeNestAggrDefn[0]),aggregations);
        operations.add(drill_coe);
      }
    }
    if (!operations.isEmpty()) {
      coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),operations.toArray(new PreparedAddingNestAggregations[0]),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
      drillRs=coe.execute(drillRs,stopSign);
    }
    DrillOperationExecutor drillOp=new DrillOperationExecutor();
    rs=drillOp.execute(rs,drillRs,view.getCubeQueryDefinition());
  }
  return rs;
}","private IAggregationResultSet[] processOperationOnQuery(CubeQueryExecutor executor,BirtCubeView view,StopSign stopSign,IAggregationResultSet[] resultSet,AggregationDefinition[] aggrDefns,IBindingValueFetcher fetcher) throws DataException, IOException, BirtException {
  IAggregationResultSet[] rs=new IAggregationResultSet[aggrDefns.length];
  System.arraycopy(resultSet,0,rs,0,aggrDefns.length);
  IAggregationResultSet[] drillRs=new IAggregationResultSet[resultSet.length - aggrDefns.length];
  System.arraycopy(resultSet,aggrDefns.length,drillRs,0,drillRs.length);
  CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
  int rsLenBefore=rs.length;
  rs=coe.execute(rs,stopSign);
  int rsLenAfter=rs.length;
  List noAggrUpdateFilters=getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters());
  if (noAggrUpdateFilters.size() > 0) {
    IAggregationResultSet[] result=null;
    if (rsLenBefore < rsLenAfter) {
      result=new IAggregationResultSet[rsLenAfter - rsLenBefore];
      for (int i=0; i < result.length; i++) {
        result[i]=rs[rsLenBefore + i];
      }
      result=applyNoAggrUpdateFilters(noAggrUpdateFilters,executor,result,view.getCube(),fetcher,true);
      for (int i=0; i < result.length; i++) {
        rs[i + rsLenBefore]=result[i];
      }
    }
 else     if (rsLenBefore == rsLenAfter) {
      List<IAggregationResultSet> mergedResult=new ArrayList<IAggregationResultSet>();
      for (int i=0; i < rs.length; i++) {
        if (rs[i].getAggregationDefinition().getAggregationFunctions() != null && rs[i] instanceof MergedAggregationResultSet) {
          IAggregationResultSet[] applyResults=applyNoAggrUpdateFilters(noAggrUpdateFilters,executor,new IAggregationResultSet[]{rs[i]},view.getCube(),fetcher,true);
          rs[i]=applyResults[0];
          mergedResult.add(rs[i]);
        }
      }
      result=mergedResult.toArray(new IAggregationResultSet[0]);
    }
    List<IAggregationResultSet> edgeResultSet=populateAndFilterEdgeResultSet(rs,null);
    for (int i=0; i < edgeResultSet.size(); i++) {
      for (int j=0; j < result.length; j++) {
        this.applyJoin(edgeResultSet.get(i),result[j]);
      }
    }
  }
  if (DrillFilterHelper.containsDrillFilter(view.getCubeQueryDefinition())) {
    IPreparedCubeOperation[] ops=view.getPreparedCubeOperations();
    List<PreparedAddingNestAggregations> operations=new ArrayList<PreparedAddingNestAggregations>();
    List<CubeNestAggrDefn> nestedAggr=new ArrayList<CubeNestAggrDefn>();
    List<AggregationDefinition> aggregations=new ArrayList<AggregationDefinition>();
    for (int i=0; i < ops.length; i++) {
      List<AggregationDefinition> nested_aggregation=ops[i].getAggregationDefintions();
      for (int k=0; k < nested_aggregation.size(); k++) {
        AggregationDefinition[] drilled_nested_aggregation=DrillFilterHelper.preparedDrillForNestedAggregation(executor.getCubeQueryDefinition(),new CubeAggrDefn[]{ops[i].getNewCubeAggrDefns()[k]},new AggregationDefinition[]{nested_aggregation.get(k)});
        for (        AggregationDefinition aggregation : drilled_nested_aggregation) {
          CubeNestAggrDefn defn=(CubeNestAggrDefn)(ops[i].getNewCubeAggrDefns()[k]);
          nestedAggr.add(new CubeNestAggrDefn(defn.getName(),defn.getBasedExpression(),Arrays.asList(ops[i].getNewCubeAggrDefns()[k]),defn.getAggrName(),defn.getArguments(),defn.getFilter()));
          aggregations.add(aggregation);
        }
      }
      if (!nestedAggr.isEmpty()) {
        PreparedAddingNestAggregations drill_coe=new PreparedAddingNestAggregations();
        drill_coe.prepare(executor.getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext(),view.getAggregationRegisterTable(),nestedAggr.toArray(new CubeNestAggrDefn[0]),aggregations);
        operations.add(drill_coe);
      }
    }
    if (!operations.isEmpty()) {
      coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),operations.toArray(new PreparedAddingNestAggregations[0]),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
      drillRs=coe.execute(drillRs,stopSign);
    }
    DrillOperationExecutor drillOp=new DrillOperationExecutor();
    rs=drillOp.execute(rs,drillRs,view.getCubeQueryDefinition());
  }
  return rs;
}",0.9903738526975598
65486,"public int getSubQueryStartingIndex() throws DataException {
  if (!subQueryOnGroup)   return this.parentIterator.getCurrentResultIndex();
  int groupIndex=this.parentIterator.getCurrentGroupIndex(groupLevel);
  int[] groupStartingEndingIndex=this.parentIterator.getGroupStartAndEndIndex(groupLevel);
  return (this.parentExecutor instanceof ISubQueryExecutor) ? ((ISubQueryExecutor)this.parentExecutor).getSubQueryStartingIndex() + groupStartingEndingIndex[groupIndex * 2] : groupStartingEndingIndex[groupIndex * 2];
}","public int getSubQueryStartingIndex() throws DataException {
  if (!subQueryOnGroup)   return this.parentIterator.getCurrentResultIndex();
  if (parentIterator instanceof EmptyResultIterator)   return 0;
  int groupIndex=this.parentIterator.getCurrentGroupIndex(groupLevel);
  int[] groupStartingEndingIndex=this.parentIterator.getGroupStartAndEndIndex(groupLevel);
  return (this.parentExecutor instanceof ISubQueryExecutor) ? ((ISubQueryExecutor)this.parentExecutor).getSubQueryStartingIndex() + groupStartingEndingIndex[groupIndex * 2] : groupStartingEndingIndex[groupIndex * 2];
}",0.941069809610154
65487,"public void testIVWithIncrementNoAggrUpdateFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IMeasureDefinition measure=cqd.createMeasure(""String_Node_Str"");
  measure.setAggrFunction(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.setAggrFunction(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  ConditionalExpression expression=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setConstantValue(""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setConstant(true);
  FilterDefinition fd=new CubeFilterDefinition(expression);
  fd.setUpdateAggregation(false);
  ((CubeFilterDefinition)fd).setTargetLevel(cqd.getEdge(ICubeQueryDefinition.ROW_EDGE).getDimensions().get(0).getHierarchy().get(0).getLevels().get(0));
  cqd.addFilter(fd);
  IncrementExecutionHint ieh=CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,cqd);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}","public void testIVWithIncrementNoAggrUpdateFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IMeasureDefinition measure=cqd.createMeasure(""String_Node_Str"");
  measure.setAggrFunction(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.setAggrFunction(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  ConditionalExpression expression=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setHandle(""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setScriptId(BaseExpression.constantId);
  FilterDefinition fd=new CubeFilterDefinition(expression);
  fd.setUpdateAggregation(false);
  ((CubeFilterDefinition)fd).setTargetLevel(cqd.getEdge(ICubeQueryDefinition.ROW_EDGE).getDimensions().get(0).getHierarchy().get(0).getLevels().get(0));
  cqd.addFilter(fd);
  IncrementExecutionHint ieh=CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,cqd);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}",0.9929639401934915
65488,"public void testIVWithIncrementNoAggrUpdateFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IMeasureDefinition measure=cqd.createMeasure(""String_Node_Str"");
  measure.setAggrFunction(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.setAggrFunction(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  ConditionalExpression expression=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setConstantValue(""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setConstant(true);
  FilterDefinition fd=new CubeFilterDefinition(expression);
  fd.setUpdateAggregation(false);
  cqd.addFilter(fd);
  IncrementExecutionHint ieh=CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,cqd);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}","public void testIVWithIncrementNoAggrUpdateFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IMeasureDefinition measure=cqd.createMeasure(""String_Node_Str"");
  measure.setAggrFunction(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.setAggrFunction(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  ConditionalExpression expression=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setHandle(""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setScriptId(BaseExpression.constantId);
  FilterDefinition fd=new CubeFilterDefinition(expression);
  fd.setUpdateAggregation(false);
  cqd.addFilter(fd);
  IncrementExecutionHint ieh=CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,cqd);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}",0.9927189988623436
65489,"public void testIVWithIncrementNoAggrUpdateFilter4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IMeasureDefinition measure=cqd.createMeasure(""String_Node_Str"");
  measure.setAggrFunction(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.setAggrFunction(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(""String_Node_Str"");
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  List<IScriptExpression> left=new ArrayList<IScriptExpression>();
  left.add(new ScriptExpression(""String_Node_Str""));
  left.add(new ScriptExpression(""String_Node_Str""));
  left.add(new ScriptExpression(""String_Node_Str""));
  List<IScriptExpression> CNBJCP=new ArrayList<IScriptExpression>();
  CNBJCP.add(new ScriptExpression(""String_Node_Str""));
  CNBJCP.add(new ScriptExpression(""String_Node_Str""));
  CNBJCP.add(new ScriptExpression(""String_Node_Str""));
  List<IScriptExpression> JPILP1=new ArrayList<IScriptExpression>();
  JPILP1.add(new ScriptExpression(""String_Node_Str""));
  JPILP1.add(new ScriptExpression(""String_Node_Str""));
  JPILP1.add(new ScriptExpression(""String_Node_Str""));
  List<IScriptExpression> USCSB1=new ArrayList<IScriptExpression>();
  USCSB1.add(new ScriptExpression(""String_Node_Str""));
  USCSB1.add(new ScriptExpression(""String_Node_Str""));
  USCSB1.add(new ScriptExpression(""String_Node_Str""));
  List<Collection<IScriptExpression>> right=new ArrayList<Collection<IScriptExpression>>();
  right.add(CNBJCP);
  right.add(JPILP1);
  right.add(USCSB1);
  ICollectionConditionalExpression cce=new CollectionConditionalExpression(left,IConditionalExpression.OP_IN,right);
  IFilterDefinition filter=new FilterDefinition(new CollectionConditionalExpression(left,IConditionalExpression.OP_IN,right));
  cqd.addFilter(filter);
  filter.setUpdateAggregation(false);
  ConditionalExpression expression=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setConstantValue(""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setConstant(true);
  FilterDefinition fd=new CubeFilterDefinition(expression);
  ((CubeFilterDefinition)fd).setTargetLevel(cqd.getEdge(ICubeQueryDefinition.ROW_EDGE).getDimensions().get(0).getHierarchy().get(0).getLevels().get(0));
  cqd.addFilter(fd);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
  engine.shutdown();
}","public void testIVWithIncrementNoAggrUpdateFilter4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IMeasureDefinition measure=cqd.createMeasure(""String_Node_Str"");
  measure.setAggrFunction(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.setAggrFunction(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(""String_Node_Str"");
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  List<IScriptExpression> left=new ArrayList<IScriptExpression>();
  left.add(new ScriptExpression(""String_Node_Str""));
  left.add(new ScriptExpression(""String_Node_Str""));
  left.add(new ScriptExpression(""String_Node_Str""));
  List<IScriptExpression> CNBJCP=new ArrayList<IScriptExpression>();
  CNBJCP.add(new ScriptExpression(""String_Node_Str""));
  CNBJCP.add(new ScriptExpression(""String_Node_Str""));
  CNBJCP.add(new ScriptExpression(""String_Node_Str""));
  List<IScriptExpression> JPILP1=new ArrayList<IScriptExpression>();
  JPILP1.add(new ScriptExpression(""String_Node_Str""));
  JPILP1.add(new ScriptExpression(""String_Node_Str""));
  JPILP1.add(new ScriptExpression(""String_Node_Str""));
  List<IScriptExpression> USCSB1=new ArrayList<IScriptExpression>();
  USCSB1.add(new ScriptExpression(""String_Node_Str""));
  USCSB1.add(new ScriptExpression(""String_Node_Str""));
  USCSB1.add(new ScriptExpression(""String_Node_Str""));
  List<Collection<IScriptExpression>> right=new ArrayList<Collection<IScriptExpression>>();
  right.add(CNBJCP);
  right.add(JPILP1);
  right.add(USCSB1);
  ICollectionConditionalExpression cce=new CollectionConditionalExpression(left,IConditionalExpression.OP_IN,right);
  IFilterDefinition filter=new FilterDefinition(new CollectionConditionalExpression(left,IConditionalExpression.OP_IN,right));
  cqd.addFilter(filter);
  filter.setUpdateAggregation(false);
  ConditionalExpression expression=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setHandle(""String_Node_Str"");
  ((ScriptExpression)expression.getOperand1()).setScriptId(BaseExpression.constantId);
  FilterDefinition fd=new CubeFilterDefinition(expression);
  ((CubeFilterDefinition)fd).setTargetLevel(cqd.getEdge(ICubeQueryDefinition.ROW_EDGE).getDimensions().get(0).getHierarchy().get(0).getLevels().get(0));
  cqd.addFilter(fd);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
  engine.shutdown();
}",0.9947333772218564
65490,"/** 
 * Utility method to create constant expression
 * @param expr
 * @return
 */
public static IScriptExpression createConstantExpression(String constantExpr){
  ScriptExpression scriptExpression=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(constantExpr));
  scriptExpression.setConstant(true);
  scriptExpression.setConstantValue(constantExpr);
  return scriptExpression;
}","/** 
 * Utility method to create constant expression
 * @param expr
 * @return
 */
public static IScriptExpression createConstantExpression(String constantExpr){
  ScriptExpression scriptExpression=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(constantExpr));
  scriptExpression.setScriptId(BaseExpression.constantId);
  scriptExpression.setHandle(constantExpr);
  return scriptExpression;
}",0.9253731343283582
65491,"/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  try {
    if (iParamBind.getExpr() instanceof IScriptExpression) {
      ScriptContext evalContext=this.outerScope == null ? context : context.newContext(this.outerScope);
      if (iParamBind.getExpr().getHandle() == null)       iParamBind.getExpr().setHandle(evalContext.compile(""String_Node_Str"",null,0,((IScriptExpression)iParamBind.getExpr()).getText()));
      evaluateResult=ScriptEvalUtil.evalExpr(iParamBind.getExpr(),evalContext,null,0);
    }
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}","/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  try {
    if (iParamBind.getExpr() instanceof IScriptExpression) {
      ScriptContext evalContext=this.outerScope == null ? context : context.newContext(this.outerScope);
      if (iParamBind.getExpr().getHandle() == null && !(BaseExpression.constantId.equals(iParamBind.getExpr().getScriptId())))       iParamBind.getExpr().setHandle(evalContext.compile(""String_Node_Str"",null,0,((IScriptExpression)iParamBind.getExpr()).getText()));
      evaluateResult=ScriptEvalUtil.evalExpr(iParamBind.getExpr(),evalContext,null,0);
    }
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}",0.9638205499276412
65492,"private ScriptExpression cloneExpression(ScriptExpression expr){
  ScriptExpression nExpr=new ScriptExpression(expr.getText(),expr.getDataType());
  nExpr.setConstant(expr.isConstant());
  nExpr.setConstantValue(expr.getConstantValue());
  nExpr.setGroupName(expr.getGroupName());
  nExpr.setHandle(expr.getHandle());
  nExpr.setScriptId(expr.getScriptId());
  return nExpr;
}","private ScriptExpression cloneExpression(ScriptExpression expr){
  ScriptExpression nExpr=new ScriptExpression(expr.getText(),expr.getDataType());
  nExpr.setGroupName(expr.getGroupName());
  nExpr.setHandle(expr.getHandle());
  nExpr.setScriptId(expr.getScriptId());
  return nExpr;
}",0.5173978819969742
65493,"/** 
 * @param cx
 * @param expr1
 * @throws DataException 
 */
private static void prepareScriptExpression(ScriptContext cx,IBaseExpression expr1) throws DataException {
  try {
    if (expr1 == null)     return;
    if (expr1 instanceof IScriptExpression) {
      String exprText=((IScriptExpression)expr1).getText();
      if (expr1.getHandle() == null && !((IScriptExpression)expr1).isConstant())       expr1.setHandle(new OLAPExpressionHandler(cx.compile(expr1.getScriptId(),null,0,exprText)));
    }
 else     if (expr1 instanceof IExpressionCollection) {
      Object[] exprs=((IExpressionCollection)expr1).getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareScriptExpression(cx,(IBaseExpression)exprs[i]);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param cx
 * @param expr1
 * @throws DataException 
 */
private static void prepareScriptExpression(ScriptContext cx,IBaseExpression expr1) throws DataException {
  try {
    if (expr1 == null)     return;
    if (expr1 instanceof IScriptExpression) {
      String exprText=((IScriptExpression)expr1).getText();
      if (expr1.getHandle() == null && !(BaseExpression.constantId.equals(expr1.getScriptId())))       expr1.setHandle(new OLAPExpressionHandler(cx.compile(expr1.getScriptId(),null,0,exprText)));
    }
 else     if (expr1 instanceof IExpressionCollection) {
      Object[] exprs=((IExpressionCollection)expr1).getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareScriptExpression(cx,(IBaseExpression)exprs[i]);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9549228944246738
65494,"/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws BirtException 
 */
public static Object evalExpr(IBaseExpression expr,ScriptContext cx,String source,int lineNo) throws DataException {
  try {
    if (logger.isLoggable(Level.FINER))     logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
    Object result;
    if (expr == null) {
      result=null;
    }
 else     if (expr instanceof IConditionalExpression) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        result=Boolean.valueOf(((NEvaluator)handle).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),null));
      }
 else {
        ConditionalExpression conditionalExpr=(ConditionalExpression)expr;
        Object expression=evalExpr(conditionalExpr.getExpression(),cx,source,lineNo);
        if (conditionalExpr.getOperand1() instanceof IExpressionCollection) {
          IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
          Object[] exprs=combinedExpr.getExpressions().toArray();
          Object[] opValues=new Object[exprs.length];
          for (int i=0; i < opValues.length; i++) {
            opValues[i]=evalExpr((IBaseExpression)exprs[i],cx,source,lineNo);
          }
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),MiscUtil.flatternMultipleValues(opValues),null);
        }
 else {
          Object Op1=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand1()),cx,source,lineNo);
          Object Op2=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand2()),cx,source,lineNo);
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),new Object[]{Op1,Op2},null);
        }
      }
    }
 else     if (expr instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> testExpr=((ICollectionConditionalExpression)expr).getExpr();
      Collection<Collection<IScriptExpression>> operand=((ICollectionConditionalExpression)expr).getOperand();
      List<Object> testObj=new ArrayList<Object>();
      boolean in=false;
      for (      IScriptExpression se : testExpr) {
        testObj.add(evalExpr(se,cx,source,lineNo));
      }
      for (      Collection<IScriptExpression> op : operand) {
        List<Object> targetObj=new ArrayList<Object>();
        for (        IScriptExpression se : op) {
          if (se == null) {
            targetObj.add(null);
          }
 else {
            if (se.getHandle() == null) {
              se.setHandle(evalExpr(se,cx,source,lineNo));
            }
            targetObj.add(se.getHandle());
          }
        }
        if (compareIgnoreNull(testObj,targetObj) == 0) {
          in=Boolean.TRUE;
          break;
        }
      }
      result=(((ICollectionConditionalExpression)expr).getOperator() == ICollectionConditionalExpression.OP_IN) ? in : (!in);
    }
 else {
      IScriptExpression jsExpr=(IScriptExpression)expr;
      if (jsExpr.isConstant() && jsExpr.getConstantValue() != null) {
        result=jsExpr.getConstantValue();
      }
 else {
        if (jsExpr.isConstant()) {
          result=JavascriptEvalUtil.evaluateJsConstants(jsExpr.getText());
          jsExpr.setConstantValue(result);
        }
 else         if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
          if (jsExpr.getHandle() instanceof ICompiledScript) {
            result=cx.evaluate((ICompiledScript)jsExpr.getHandle());
          }
 else {
            result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx));
          }
        }
 else {
          result=evaluateJSAsExpr(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),jsExpr.getText(),source,lineNo);
        }
      }
    }
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
    return result;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws BirtException 
 */
public static Object evalExpr(IBaseExpression expr,ScriptContext cx,String source,int lineNo) throws DataException {
  try {
    if (logger.isLoggable(Level.FINER))     logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
    Object result;
    if (expr == null) {
      result=null;
    }
 else     if (expr instanceof IConditionalExpression) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        result=Boolean.valueOf(((NEvaluator)handle).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),null));
      }
 else {
        ConditionalExpression conditionalExpr=(ConditionalExpression)expr;
        Object expression=evalExpr(conditionalExpr.getExpression(),cx,source,lineNo);
        if (conditionalExpr.getOperand1() instanceof IExpressionCollection) {
          IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
          Object[] exprs=combinedExpr.getExpressions().toArray();
          Object[] opValues=new Object[exprs.length];
          for (int i=0; i < opValues.length; i++) {
            opValues[i]=evalExpr((IBaseExpression)exprs[i],cx,source,lineNo);
          }
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),MiscUtil.flatternMultipleValues(opValues),null);
        }
 else {
          Object Op1=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand1()),cx,source,lineNo);
          Object Op2=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand2()),cx,source,lineNo);
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),new Object[]{Op1,Op2},null);
        }
      }
    }
 else     if (expr instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> testExpr=((ICollectionConditionalExpression)expr).getExpr();
      Collection<Collection<IScriptExpression>> operand=((ICollectionConditionalExpression)expr).getOperand();
      List<Object> testObj=new ArrayList<Object>();
      boolean in=false;
      for (      IScriptExpression se : testExpr) {
        testObj.add(evalExpr(se,cx,source,lineNo));
      }
      for (      Collection<IScriptExpression> op : operand) {
        List<Object> targetObj=new ArrayList<Object>();
        for (        IScriptExpression se : op) {
          if (se == null) {
            targetObj.add(null);
          }
 else {
            if (se.getHandle() == null) {
              se.setHandle(evalExpr(se,cx,source,lineNo));
            }
            targetObj.add(se.getHandle());
          }
        }
        if (compareIgnoreNull(testObj,targetObj) == 0) {
          in=Boolean.TRUE;
          break;
        }
      }
      result=(((ICollectionConditionalExpression)expr).getOperator() == ICollectionConditionalExpression.OP_IN) ? in : (!in);
    }
 else {
      IScriptExpression jsExpr=(IScriptExpression)expr;
      if (BaseExpression.constantId.equals(jsExpr.getScriptId()) && jsExpr.getHandle() != null) {
        result=jsExpr.getHandle();
      }
 else {
        if (BaseExpression.constantId.equals(jsExpr.getScriptId())) {
          result=JavascriptEvalUtil.evaluateJsConstants(jsExpr.getText());
          jsExpr.setHandle(result);
        }
 else         if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
          if (jsExpr.getHandle() instanceof ICompiledScript) {
            result=cx.evaluate((ICompiledScript)jsExpr.getHandle());
          }
 else {
            result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx));
          }
        }
 else {
          result=evaluateJSAsExpr(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),jsExpr.getText(),source,lineNo);
        }
      }
    }
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
    return result;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.98120086589951
65495,"public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getStringExpression()));
    jsExpr.setConstant(true);
    jsExpr.setConstantValue(expr.getExpression());
    return jsExpr;
  }
 else   if (""String_Node_Str"".equals(expr.getType())) {
    return null;
  }
 else {
    if (expr.getStringExpression() == null)     return null;
    jsExpr=new ExpressionAdapter(expr,el);
  }
  return jsExpr;
}","public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getStringExpression()));
    jsExpr.setScriptId(BaseExpression.constantId);
    jsExpr.setHandle(expr.getExpression());
    return jsExpr;
  }
 else   if (""String_Node_Str"".equals(expr.getType())) {
    return null;
  }
 else {
    if (expr.getStringExpression() == null)     return null;
    jsExpr=new ExpressionAdapter(expr,el);
  }
  return jsExpr;
}",0.9492063492063492
65496,"private IScriptExpression adapterExpression(Expression expr){
  if (expr instanceof Expression.Script && ""String_Node_Str"".equals(((Expression.Script)expr).getLanguage())) {
    ScriptExpression scriptExpr=null;
    try {
      scriptExpr=getModelAdapter().adaptJSExpression(expr.getScriptText(),((Expression.Script)expr).getLanguage());
      return new ScriptExpression(scriptExpr.getText());
    }
 catch (    Exception ex) {
    }
  }
 else {
    if (expr.getType() == Expression.CONSTANT) {
      ScriptExpression jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getScriptText()));
      jsExpr.setConstant(true);
      return jsExpr;
    }
  }
  return new ScriptExpression(expr.getScriptText());
}","private IScriptExpression adapterExpression(Expression expr){
  if (expr instanceof Expression.Script && ""String_Node_Str"".equals(((Expression.Script)expr).getLanguage())) {
    ScriptExpression scriptExpr=null;
    try {
      scriptExpr=getModelAdapter().adaptJSExpression(expr.getScriptText(),((Expression.Script)expr).getLanguage());
      return new ScriptExpression(scriptExpr.getText());
    }
 catch (    Exception ex) {
    }
  }
 else {
    if (expr.getType() == Expression.CONSTANT) {
      ScriptExpression jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getScriptText()));
      jsExpr.setScriptId(BaseExpression.constantId);
      jsExpr.setHandle(expr.getScriptText());
      return jsExpr;
    }
  }
  return new ScriptExpression(expr.getScriptText());
}",0.8489208633093526
65497,"public Map getAllExtensionProperties(){
  return new HashMap();
}","public Map getAllExtensionProperties(){
  return properties;
}",0.8503937007874016
65498,"public String getExtensionProperty(String name){
  return null;
}","public String getExtensionProperty(String name){
  return properties.get(name);
}",0.8493150684931506
65499,"public void setExtensionProperty(String name,String value){
}","public void setExtensionProperty(String name,String value){
  properties.put(name,value);
}",0.8026315789473685
65500,"/** 
 * Disposes instance handles.
 */
public void dispose(){
  if (engineTask != null) {
    engineTask.close();
  }
 else   if (session != null) {
    session.shutdown();
  }
}","/** 
 * Disposes instance handles.
 */
public void dispose(){
  if (session != null) {
    try {
      DataService.getInstance().unRegisterSession(session);
    }
 catch (    BirtException e) {
      logger.log(e);
    }
  }
  if (engineTask != null) {
    engineTask.close();
  }
 else   if (session != null) {
    session.shutdown();
  }
}",0.5202312138728323
65501,"public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof EditPart) {
    EditPart targetPart=(EditPart)target;
    CrosstabReportItemHandle crosstab=getCrosstab(targetPart);
    if (crosstab == null) {
      return false;
    }
    CommandStack cmdStack=crosstab.getModuleHandle().getCommandStack();
    cmdStack.startTrans(Messages.getFormattedString(""String_Node_Str"",new String[]{((ReportElementHandle)transfer).getName()}));
    ReportElementHandle extendedData=adapter.getBoundExtendedData((ReportItemHandle)crosstab.getModelHandle());
    if (extendedData == null || !extendedData.equals(adapter.resolveExtendedData((ReportElementHandle)transfer))) {
      if (!adapter.setExtendedData((ReportItemHandle)crosstab.getModelHandle(),adapter.resolveExtendedData((ReportElementHandle)transfer))) {
        cmdStack.rollback();
        return false;
      }
    }
    List validElements=handleValidate(targetPart,transfer);
    MeasureHandle measure=null;
    TabularDimensionHandle tabularDimension=null;
    TimeDimensionHandle timeDimension=null;
    for (    Object obj : validElements) {
      if (obj instanceof MeasureHandle) {
        measure=(MeasureHandle)obj;
      }
 else       if (obj instanceof TabularDimensionHandle) {
        tabularDimension=(TabularDimensionHandle)obj;
      }
 else       if (obj instanceof TimeDimensionHandle) {
        timeDimension=(TimeDimensionHandle)obj;
      }
    }
    if (measure != null) {
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,measure);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        if (crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) != 0) {
          DimensionViewHandle viewHnadle=crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) - 1);
          CrosstabUtil.addLabelToHeader(viewHnadle.getLevel(viewHnadle.getLevelCount() - 1));
        }
        cmdStack.commit();
        return true;
      }
    }
 else     if (tabularDimension != null || timeDimension != null) {
      Object element=null;
      if (timeDimension != null) {
        LevelViewDialog dialog=new LevelViewDialog(false);
        dialog.setInput(timeDimension,adapter.getLevelHints(timeDimension));
        if (dialog.open() != Window.OK) {
          cmdStack.rollback();
          return false;
        }
        if (((List)dialog.getResult()).size() > 0) {
          element=((List)dialog.getResult()).toArray();
        }
 else {
          element=tabularDimension;
        }
      }
 else       if (tabularDimension != null) {
        element=tabularDimension;
      }
      if (element == null) {
        return false;
      }
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,element);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        cmdStack.commit();
        return true;
      }
    }
  }
  return false;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof EditPart) {
    EditPart targetPart=(EditPart)target;
    CrosstabReportItemHandle crosstab=getCrosstab(targetPart);
    if (crosstab == null) {
      return false;
    }
    CommandStack cmdStack=crosstab.getModuleHandle().getCommandStack();
    cmdStack.startTrans(Messages.getFormattedString(""String_Node_Str"",new String[]{((ReportElementHandle)transfer).getName()}));
    ReportElementHandle extendedData=adapter.getBoundExtendedData((ReportItemHandle)crosstab.getModelHandle());
    if (extendedData == null || !extendedData.equals(adapter.resolveExtendedData((ReportElementHandle)transfer))) {
      if (!adapter.setExtendedData((ReportItemHandle)crosstab.getModelHandle(),adapter.resolveExtendedData((ReportElementHandle)transfer))) {
        cmdStack.rollback();
        return false;
      }
    }
    List validElements=handleValidate(targetPart,transfer);
    MeasureHandle measure=null;
    DimensionHandle tabularDimension=null;
    DimensionHandle timeDimension=null;
    for (    Object obj : validElements) {
      if (obj instanceof MeasureHandle) {
        measure=(MeasureHandle)obj;
      }
 else       if (obj instanceof DimensionHandle) {
        DimensionHandle dim=(DimensionHandle)obj;
        if (dim.isTimeType()) {
          timeDimension=dim;
        }
 else {
          tabularDimension=dim;
        }
      }
    }
    if (measure != null) {
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,measure);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        if (crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) != 0) {
          DimensionViewHandle viewHnadle=crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE) - 1);
          CrosstabUtil.addLabelToHeader(viewHnadle.getLevel(viewHnadle.getLevelCount() - 1));
        }
        cmdStack.commit();
        return true;
      }
    }
 else     if (tabularDimension != null || timeDimension != null) {
      Object element=null;
      if (timeDimension != null) {
        LevelViewDialog dialog=new LevelViewDialog(false);
        dialog.setInput(timeDimension,adapter.getLevelHints(timeDimension));
        if (dialog.open() != Window.OK) {
          cmdStack.rollback();
          return false;
        }
        if (((List)dialog.getResult()).size() > 0) {
          element=((List)dialog.getResult()).toArray();
        }
 else {
          element=tabularDimension;
        }
      }
 else       if (tabularDimension != null) {
        element=tabularDimension;
      }
      if (element == null) {
        return false;
      }
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,element);
      request.setLocation(location.getPoint());
      Command command=targetPart.getCommand(request);
      if (command != null && command.canExecute()) {
        targetPart.getViewer().getEditDomain().getCommandStack().execute(command);
        AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(crosstab);
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
        cmdStack.commit();
        return true;
      }
    }
  }
  return false;
}",0.9666274047899488
65502,"/** 
 * Returns the 1-based index of the outermost group in which the current row is the first row. For example, if a query contain N groups (group with index 1 being the outermost group, and group with index N being the innermost group), and this function returns a value M, it indicates that the current row is the first row in groups with indexes (M, M+1, ..., N ).
 * @return	The 1-based index of the outermost group in whichthe current row is the first row; (N+1) if the current row is not at the start of any group;
 */
public int getStartingGroupLevel() throws DataException {
  checkHasCurrentRow();
  if (cacheProvider.getCurrentIndex() == 0)   return 0;
  if (groups.length == 0)   return 1;
  int childGroupIdx=cacheProvider.getCurrentIndex();
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level >= 0; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    if (childGroupIdx == currentGroup.firstChild) {
      childGroupIdx=currentGroupIdx;
      currentGroupIdx=currentGroup.parent;
      continue;
    }
    break;
  }
  return level + 2;
}","/** 
 * Returns the 1-based index of the outermost group in which the current row is the first row. For example, if a query contain N groups (group with index 1 being the outermost group, and group with index N being the innermost group), and this function returns a value M, it indicates that the current row is the first row in groups with indexes (M, M+1, ..., N ).
 * @return	The 1-based index of the outermost group in whichthe current row is the first row; (N+1) if the current row is not at the start of any group;
 */
public int getStartingGroupLevel() throws DataException {
  checkHasCurrentRow();
  if (cacheProvider.getCurrentIndex() == 0)   return 0;
  if (groups.length == 0)   return 1;
  int childGroupIdx=cacheProvider.getCurrentIndex();
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level >= 0; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    if (currentGroup != null && childGroupIdx == currentGroup.firstChild) {
      childGroupIdx=currentGroupIdx;
      currentGroupIdx=currentGroup.parent;
      continue;
    }
    break;
  }
  return level + 2;
}",0.9893048128342246
65503,"private boolean containMember(Object[] levelkey,Object[] key){
  Object[] memberKeys=levelkey;
  for (  Object obj : key) {
    if (obj.toString().equals(memberKeys[0].toString())) {
      return true;
    }
  }
  return false;
}","private boolean containMember(Object[] levelkey,Object[] key){
  Object[] memberKeys=levelkey;
  for (  Object obj : key) {
    try {
      if (ScriptEvalUtil.compare(obj,memberKeys[0]) == 0) {
        return true;
      }
    }
 catch (    DataException e) {
    }
  }
  return false;
}",0.5426356589147286
65504,"protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      if (((IQueryDefinition)queryDefn.getSourceQuery()).getQueryResultsID() == null) {
        newPreDataEnige();
        this.queryResults=PreparedQueryUtil.newInstance(preDataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
 else {
        this.queryResults=PreparedQueryUtil.newInstance(engine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    if (!hasBinding) {
      for (int i=0; i < bindings.length; i++) {
        IBinding binding=bindings[i];
        if (!this.queryDefn.getBindings().containsKey(binding.getBindingName()))         this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      IQueryDefinition baseQueryDefn=getBaseQueryDefinition((SubqueryLocator)(queryDefn.getSourceQuery()));
      if (engine.getContext().getDocReader().exists(baseQueryDefn.getQueryResultsID() + ""String_Node_Str"" + DATA_STREAM_POST_FIX)) {
        this.queryResults=PreparedQueryUtil.newInstance(engine,baseQueryDefn,this.appContext).execute(null);
      }
 else       this.queryResults=engine.getQueryResults(baseQueryDefn.getQueryResultsID());
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      if (((IQueryDefinition)queryDefn.getSourceQuery()).getQueryResultsID() == null) {
        newPreDataEnige();
        this.queryResults=PreparedQueryUtil.newInstance(preDataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
 else {
        this.queryResults=PreparedQueryUtil.newInstance(engine,(IQueryDefinition)queryDefn.getSourceQuery(),this.appContext).execute(null);
      }
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    if (!hasBinding) {
      for (int i=0; i < bindings.length; i++) {
        IBinding binding=bindings[i];
        if (!this.queryDefn.getBindings().containsKey(binding.getBindingName()))         this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.8990055248618785
65505,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      setDataItemAction(model,dataHandle);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=(DataSetHandle)model.getElementHandle();
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (str.equals(resultSetColumn.getColumnName())) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (Iterator iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
            ColumnHintHandle element=(ColumnHintHandle)iter.next();
            if (element.getColumnName().equals(str) || str.equals(element.getAlias())) {
              type=element.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  setDataItemAction(model,dataHandle);
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      setDataItemAction(model,dataHandle);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=(DataSetHandle)model.getElementHandle();
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (str.equals(resultSetColumn.getColumnName())) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (Iterator iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
            ColumnHintHandle element=(ColumnHintHandle)iter.next();
            if (element.getColumnName().equals(str) || str.equals(element.getAlias())) {
              type=element.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  setDataItemAction(model,dataHandle);
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnHeaderDisplayNameKey(model);
    if (displayKey == null) {
      displayKey=UIUtil.getColumnDisplayNameKey(model);
    }
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9955748216382192
65506,"protected static void insertToCell(DataSetHandle model,TableHandle tableHandle,SlotHandle slot,ResultSetColumnHandle[] columns,boolean isLabel){
  for (int i=0; i < slot.getCount(); i++) {
    SlotHandle cells=((RowHandle)slot.get(i)).getCells();
    for (int j=0; j < cells.getCount(); j++) {
      CellHandle cell=(CellHandle)cells.get(j);
      try {
        if (isLabel) {
          LabelHandle labelItemHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newLabel(null);
          String labelText=UIUtil.getColumnDisplayName(columns[j]);
          if (labelText != null) {
            labelItemHandle.setText(labelText);
          }
          String displayKey=UIUtil.getColumnDisplayNameKey(columns[j]);
          if (displayKey != null) {
            labelItemHandle.setTextKey(displayKey);
          }
          cell.addElement(labelItemHandle,cells.getSlotID());
        }
 else {
          DataItemHandle dataHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newDataItem(null);
          dataHandle.setResultSetColumn(columns[j].getColumnName());
          formatDataHandle(dataHandle,columns[j]);
          cell.addElement(dataHandle,cells.getSlotID());
          ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,columns[j].getColumnName());
          bindingColumn.setDataType(columns[j].getDataType());
          ExpressionUtility.setBindingColumnExpression(columns[j],bindingColumn);
          bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(columns[j]));
          String displayKey=UIUtil.getColumnDisplayNameKey(columns[j]);
          if (displayKey != null)           bindingColumn.setDisplayNameID(displayKey);
          tableHandle.addColumnBinding(bindingColumn,false);
          ActionHandle actionHandle=UIUtil.getColumnAction(columns[j]);
          if (actionHandle != null) {
            List source=new ArrayList();
            source.add(actionHandle.getStructure());
            List newAction=ModelUtil.cloneStructList(source);
            dataHandle.setAction((Action)newAction.get(0));
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}","protected static void insertToCell(DataSetHandle model,TableHandle tableHandle,SlotHandle slot,ResultSetColumnHandle[] columns,boolean isLabel){
  for (int i=0; i < slot.getCount(); i++) {
    SlotHandle cells=((RowHandle)slot.get(i)).getCells();
    for (int j=0; j < cells.getCount(); j++) {
      CellHandle cell=(CellHandle)cells.get(j);
      try {
        if (isLabel) {
          LabelHandle labelItemHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newLabel(null);
          String labelText=UIUtil.getColumnDisplayName(columns[j]);
          if (labelText != null) {
            labelItemHandle.setText(labelText);
          }
          String displayKey=UIUtil.getColumnHeaderDisplayNameKey(columns[j]);
          if (displayKey == null) {
            displayKey=UIUtil.getColumnDisplayNameKey(columns[j]);
          }
          if (displayKey != null) {
            labelItemHandle.setTextKey(displayKey);
          }
          cell.addElement(labelItemHandle,cells.getSlotID());
        }
 else {
          DataItemHandle dataHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newDataItem(null);
          dataHandle.setResultSetColumn(columns[j].getColumnName());
          formatDataHandle(dataHandle,columns[j]);
          cell.addElement(dataHandle,cells.getSlotID());
          ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,columns[j].getColumnName());
          bindingColumn.setDataType(columns[j].getDataType());
          ExpressionUtility.setBindingColumnExpression(columns[j],bindingColumn);
          bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(columns[j]));
          String displayKey=UIUtil.getColumnDisplayNameKey(columns[j]);
          if (displayKey != null)           bindingColumn.setDisplayNameID(displayKey);
          tableHandle.addColumnBinding(bindingColumn,false);
          ActionHandle actionHandle=UIUtil.getColumnAction(columns[j]);
          if (actionHandle != null) {
            List source=new ArrayList();
            source.add(actionHandle.getStructure());
            List newAction=ModelUtil.cloneStructList(source);
            dataHandle.setAction((Action)newAction.get(0));
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}",0.9736784859691104
65507,"@SuppressWarnings(""String_Node_Str"") private void populateDataSetColumns(IEventHandler handler,IBaseQueryDefinition query,IResultClass resultClass,GroupSpec[] groupSpecs,boolean forceLookingForward) throws DataException {
  this.query=dataSourceQuery.getQueryDefinition();
  this.groupCalculator=needLookingForwardFor1Row(groupSpecs,forceLookingForward) ? new SimpleGroupCalculator(session,groupSpecs,this.rowResultSet.getMetaData()) : new DummyGroupCalculator();
  this.currResultObj=this.rowResultSet.next();
  this.session=session;
  this.groupCalculator.registerCurrentResultObject(this.currResultObj);
  this.groupCalculator.registerNextResultObject(this.rowResultSet);
  this.initialRowCount=(this.currResultObj != null) ? -1 : 0;
  this.rowCount=(this.currResultObj != null) ? 1 : 0;
  this.handler=handler;
  this.resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(handler.getAllColumnBindings());
  if (query instanceof IQueryDefinition && ((IQueryDefinition)query).needAutoBinding()) {
    for (int i=1; i <= resultClass.getFieldCount(); i++) {
      this.resultSetNameSet.add(resultClass.getFieldName(i));
      this.resultSetNameSet.add(resultClass.getFieldAlias(i));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void populateDataSetColumns(IEventHandler handler,IBaseQueryDefinition query,IResultClass resultClass,GroupSpec[] groupSpecs,boolean forceLookingForward) throws DataException {
  this.resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(handler.getAllColumnBindings());
  if (query instanceof IQueryDefinition && ((IQueryDefinition)query).needAutoBinding()) {
    for (int i=1; i <= resultClass.getFieldCount(); i++) {
      this.resultSetNameSet.add(resultClass.getFieldName(i));
      this.resultSetNameSet.add(resultClass.getFieldAlias(i));
    }
  }
}",0.6692693809258227
65508,"public boolean canFinish(){
  if (!validStatus())   return false;
  try {
    if (m_designSession != null)     return m_designSession.getNewWizard().canFinish();
 else {
      if (this.nextPage != null) {
        return nextPage.isPageComplete();
      }
      return isPageComplete();
    }
  }
 catch (  OdaException e) {
    return false;
  }
}","public boolean canFinish(){
  this.getControl().setFocus();
  if (!validStatus())   return false;
  try {
    if (m_designSession != null)     return m_designSession.getNewWizard().canFinish();
 else {
      if (this.nextPage != null) {
        return nextPage.isPageComplete();
      }
      return isPageComplete();
    }
  }
 catch (  OdaException e) {
    return false;
  }
}",0.955922865013774
65509,"static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(Integer.valueOf(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(new String(new char[]{getListChar(nestCount)}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}","static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    Object value=cssStyles.get(ele.getParentNode()).getProperty(LIST_STYLE_TYPE);
    String styleType=""String_Node_Str"";
    if (value != null)     styleType=value.toString();
    BulletFrame frame=new BulletFrame(styleType);
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(frame.paintBullet(index) + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(frame.paintBullet(index));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}",0.9682359614293816
65510,"/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap<Element,StyleProperties> styles,Map context){
  StringBuffer strStyle=new StringBuffer();
  StyleProperties sp=getStyleProperties(ele,styles);
  try {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      StringBuffer buffer=new StringBuffer();
      Matcher matcher=pattern.matcher(inlineStyle);
      while (matcher.find()) {
        String name=matcher.group(1);
        String value=matcher.group(2);
        if (name != null && name.length() > 0 && value != null && value.length() > 0) {
          ShortHandProcessor.process(buffer,name,value,cssEngine);
        }
        if (StyleProperties.WIDTH.equals(name)) {
          if (value != null && value.length() > 0) {
            DimensionType d=DimensionType.parserUnit(value);
            if (d != null) {
              sp.addProperty(StyleProperties.WIDTH,d);
            }
          }
        }
        if (StyleProperties.HEIGHT.equals(name)) {
          if (value != null && value.length() > 0) {
            DimensionType d=DimensionType.parserUnit(value);
            if (d != null) {
              sp.addProperty(StyleProperties.HEIGHT,d);
            }
          }
        }
        if (CSSConstants.CSS_TEXT_DECORATION_PROPERTY.equals(name)) {
          if (value != null && value.length() > 0) {
            IStyle style=sp.getStyle();
            String[] vs=value.split(""String_Node_Str"");
            for (int i=0; i < vs.length; i++) {
              if (CSSConstants.CSS_UNDERLINE_VALUE.equals(vs[i])) {
                style.setTextUnderline(CSSConstants.CSS_UNDERLINE_VALUE);
              }
 else               if (CSSConstants.CSS_LINE_THROUGH_VALUE.equals(vs[i])) {
                style.setTextLineThrough(CSSConstants.CSS_LINE_THROUGH_VALUE);
              }
 else               if (CSSConstants.CSS_OVERLINE_VALUE.equals(vs[i])) {
                style.setTextOverline(CSSConstants.CSS_OVERLINE_VALUE);
              }
            }
          }
        }
      }
      strStyle.append(buffer.toString());
    }
    if (strStyle.length() > 0) {
      sp.getStyle().setProperties((StyleDeclaration)cssEngine.parseStyleDeclaration(strStyle.toString()));
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
  }
  ele.removeAttribute(""String_Node_Str"");
  processBackgroundImage(sp.getStyle(),context);
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles,context);
    }
  }
}","/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap<Element,StyleProperties> styles,Map context){
  StringBuffer strStyle=new StringBuffer();
  StyleProperties sp=getStyleProperties(ele,styles);
  try {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      StringBuffer buffer=new StringBuffer();
      Matcher matcher=pattern.matcher(inlineStyle);
      while (matcher.find()) {
        String name=matcher.group(1);
        String value=matcher.group(2);
        if (name != null && name.length() > 0 && value != null && value.length() > 0) {
          ShortHandProcessor.process(buffer,name,value,cssEngine);
        }
        if (StyleProperties.WIDTH.equals(name)) {
          if (value != null && value.length() > 0) {
            DimensionType d=DimensionType.parserUnit(value);
            if (d != null) {
              sp.addProperty(StyleProperties.WIDTH,d);
            }
          }
        }
        if (StyleProperties.HEIGHT.equals(name)) {
          if (value != null && value.length() > 0) {
            DimensionType d=DimensionType.parserUnit(value);
            if (d != null) {
              sp.addProperty(StyleProperties.HEIGHT,d);
            }
          }
        }
        if (LIST_STYLE_TYPE.equals(name)) {
          if (value != null && value.length() > 0) {
            sp.addProperty(LIST_STYLE_TYPE,value);
          }
        }
        if (CSSConstants.CSS_TEXT_DECORATION_PROPERTY.equals(name)) {
          if (value != null && value.length() > 0) {
            IStyle style=sp.getStyle();
            String[] vs=value.split(""String_Node_Str"");
            for (int i=0; i < vs.length; i++) {
              if (CSSConstants.CSS_UNDERLINE_VALUE.equals(vs[i])) {
                style.setTextUnderline(CSSConstants.CSS_UNDERLINE_VALUE);
              }
 else               if (CSSConstants.CSS_LINE_THROUGH_VALUE.equals(vs[i])) {
                style.setTextLineThrough(CSSConstants.CSS_LINE_THROUGH_VALUE);
              }
 else               if (CSSConstants.CSS_OVERLINE_VALUE.equals(vs[i])) {
                style.setTextOverline(CSSConstants.CSS_OVERLINE_VALUE);
              }
            }
          }
        }
      }
      strStyle.append(buffer.toString());
    }
    if (strStyle.length() > 0) {
      sp.getStyle().setProperties((StyleDeclaration)cssEngine.parseStyleDeclaration(strStyle.toString()));
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
  }
  ele.removeAttribute(""String_Node_Str"");
  processBackgroundImage(sp.getStyle(),context);
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles,context);
    }
  }
}",0.971900826446281
65511,"public IResultIterator preview() throws BirtException {
  int max=dataSetHandle.getIntProperty(DataSetHandle.ROW_FETCH_LIMIT_PROP);
  try {
    dataSetHandle.setIntProperty(DataSetHandle.ROW_FETCH_LIMIT_PROP,this.maxRow);
    result=task.execute();
    return result.nextResultIterator().getResultIterator();
  }
  finally {
    dataSetHandle.setIntProperty(DataSetHandle.ROW_FETCH_LIMIT_PROP,max);
  }
}","public IResultIterator preview() throws BirtException {
  result=task.execute();
  return result.nextResultIterator().getResultIterator();
}",0.5147058823529411
65512,"public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  if (modelChanged) {
    modelChanged=false;
    new UIJob(""String_Node_Str""){
      public IStatus runInUIThread(      IProgressMonitor monitor){
        updateResultsProcess();
        return Status.OK_STATUS;
      }
    }
.schedule();
  }
}","public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  if (modelChanged) {
    modelChanged=false;
    dataSetHandle=((DataSetEditor)getContainer()).getHandle();
    int maxRow=this.getMaxRowPreference();
    if (dataSetHandle.getRowFetchLimit() <= 0 || dataSetHandle.getRowFetchLimit() > maxRow) {
      ModuleHandle moduleHandle=((Module)dataSetHandle.getRoot().copy()).getModuleHandle();
      SlotHandle dataSets=moduleHandle.getDataSets();
      for (int i=0; i < dataSets.getCount(); i++) {
        if (dataSetHandle.getName().equals(dataSets.get(i).getName())) {
          dataSetHandle=(DataSetHandle)dataSets.get(i);
          try {
            dataSetHandle.setRowFetchLimit(maxRow);
          }
 catch (          SemanticException e) {
          }
          break;
        }
      }
    }
    new UIJob(""String_Node_Str""){
      public IStatus runInUIThread(      IProgressMonitor monitor){
        updateResultsProcess();
        return Status.OK_STATUS;
      }
    }
.schedule();
  }
}",0.509447165850245
65513,"private void clearProperyBindingMap(final Map dataSetBindingMap,final Map dataSourceBindingMap){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
      try {
        DataSetMetaDataHelper.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
}","private void clearProperyBindingMap(final Map dataSetBindingMap,final Map dataSourceBindingMap){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        DataSetMetaDataHelper.clearPropertyBindingMap(dataSetHandle,dataSetBindingMap,dataSourceBindingMap);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
}",0.8417350527549824
65514,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference(),PreviewType.RESULTSET);
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        Map appContext=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          ResourceIdentifiers identifiers=new ResourceIdentifiers();
          String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
          identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
          identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
          appContext.put(resouceIDs,identifiers);
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          IResultIterator itr=previewer.preview();
          metaData=itr.getResultMetaData();
          populateRecords(itr);
          monitor.done();
        }
 catch (        BirtException e) {
          metaData=null;
          throw new InvocationTargetException(e);
        }
 finally {
          try {
            AppContextResourceReleaser.release(appContext);
            previewer.close();
          }
 catch (          BirtException e) {
            e.printStackTrace();
          }
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=dataSetHandle;
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference(),PreviewType.RESULTSET);
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        Map appContext=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          ResourceIdentifiers identifiers=new ResourceIdentifiers();
          String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
          identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
          identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
          appContext.put(resouceIDs,identifiers);
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          IResultIterator itr=previewer.preview();
          metaData=itr.getResultMetaData();
          populateRecords(itr);
          monitor.done();
        }
 catch (        BirtException e) {
          metaData=null;
          throw new InvocationTargetException(e);
        }
 finally {
          try {
            AppContextResourceReleaser.release(appContext);
            previewer.close();
          }
 catch (          BirtException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}",0.9794871794871794
65515,"/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count,Map<String,StringTable> stringTableMap,Map<String,DataSetInMemoryStringIndex> index,int version) throws DataException {
  int i=0;
  try {
    Object[] obs=new Object[rsMeta.getFieldCount()];
    for (i=0; i < count; i++) {
      if (rsMeta.isIndexColumn(i + 1) && (index.containsKey(rsMeta.getFieldName(i + 1)))) {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        obs[i]=index.get(rsMeta.getFieldName(i + 1)).getKeyValue(obs[i]);
      }
 else       if (rsMeta.getFieldMetaData(i + 1).getDataType() == String.class && rsMeta.isCompressedColumn(i + 1)) {
        StringTable stringTable=null;
        if (stringTableMap != null) {
          stringTable=stringTableMap.get(rsMeta.getFieldName(i + 1));
        }
        if (stringTable != null) {
          obs[i]=stringTable.getStringValue(IOUtil.readInt(dis));
        }
 else {
          if (version >= VersionManager.VERSION_3_7_2_1) {
            obs[i]=ResultObjectUtil.readObject(dis,rsMeta.getFieldValueClass(i + 1),DataEngineSession.getCurrentClassLoader());
          }
 else           obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        }
      }
 else {
        if (version >= VersionManager.VERSION_3_7_2_1) {
          obs[i]=ResultObjectUtil.readObject(dis,rsMeta.getFieldValueClass(i + 1),DataEngineSession.getCurrentClassLoader());
        }
 else         obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
      }
    }
    return new ResultObject(rsMeta,obs);
  }
 catch (  IOException e) {
    Throwable t=e.getCause();
    if (t instanceof ClassNotFoundException) {
      throw new DataException(ResourceConstants.FAIL_LOAD_CLASS,e,new String[]{t.getMessage(),rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
 else {
      throw new DataException(ResourceConstants.FAIL_LOAD_COLUMN_VALUE,e,new String[]{rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
  }
}","/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count,Map<String,StringTable> stringTableMap,Map<String,DataSetInMemoryStringIndex> index,int version) throws DataException {
  int i=0;
  try {
    Object[] obs=new Object[rsMeta.getFieldCount()];
    for (i=0; i < count; i++) {
      if (rsMeta.isIndexColumn(i + 1) && (index.containsKey(rsMeta.getFieldName(i + 1)))) {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        obs[i]=index.get(rsMeta.getFieldName(i + 1)).getKeyValue(obs[i]);
      }
 else       if (rsMeta.getFieldMetaData(i + 1).getDataType() == String.class && rsMeta.isCompressedColumn(i + 1)) {
        StringTable stringTable=null;
        if (stringTableMap != null) {
          stringTable=stringTableMap.get(rsMeta.getFieldName(i + 1));
        }
        if (stringTable != null) {
          obs[i]=stringTable.getStringValue(IOUtil.readInt(dis));
        }
 else {
          if (version > VersionManager.VERSION_3_7_2_1) {
            obs[i]=ResultObjectUtil.readObject(dis,rsMeta.getFieldValueClass(i + 1),DataEngineSession.getCurrentClassLoader());
          }
 else           obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        }
      }
 else {
        if (version > VersionManager.VERSION_3_7_2_1) {
          obs[i]=ResultObjectUtil.readObject(dis,rsMeta.getFieldValueClass(i + 1),DataEngineSession.getCurrentClassLoader());
        }
 else         obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
      }
    }
    return new ResultObject(rsMeta,obs);
  }
 catch (  IOException e) {
    Throwable t=e.getCause();
    if (t instanceof ClassNotFoundException) {
      throw new DataException(ResourceConstants.FAIL_LOAD_CLASS,e,new String[]{t.getMessage(),rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
 else {
      throw new DataException(ResourceConstants.FAIL_LOAD_COLUMN_VALUE,e,new String[]{rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
  }
}",0.9995348837209302
65516,"/** 
 * Write the result object value if it is used in column binding map
 * @param dos
 * @param resultObject
 * @param nameSet
 * @throws DataException
 * @throws IOException
 */
public static int writeResultObject(DataOutputStream dos,IResultObject resultObject,int count,Set nameSet,Map<String,StringTable> stringTableMap,Map<String,IIndexSerializer> index,int rowIndex,int version) throws DataException, IOException {
  if (resultObject.getResultClass() == null)   return 0;
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  for (int i=1; i <= count; i++) {
    if (nameSet != null && (nameSet.contains(resultObject.getResultClass().getFieldName(i)) || nameSet.contains(resultObject.getResultClass().getFieldAlias(i)))) {
      IIndexSerializer currIndex=index.get(resultObject.getResultClass().getFieldName(i));
      Object candidate=resultObject.getFieldValue(i);
      if (currIndex != null) {
{
          currIndex.put(candidate,rowIndex);
        }
      }
      StringTable table=null;
      if (stringTableMap != null)       table=stringTableMap.get(resultObject.getResultClass().getFieldName(i));
      if (table != null) {
        int stringIndex=table.getIndex((String)resultObject.getFieldValue(i));
        IOUtil.writeInt(tempDos,stringIndex);
      }
 else {
        if (version >= VersionManager.VERSION_3_7_2_1) {
          ResultObjectUtil.writeObject(tempDos,resultObject.getFieldValue(i),resultObject.getResultClass().getFieldValueClass(i));
        }
 else {
          IOUtil.writeObject(tempDos,resultObject.getFieldValue(i));
        }
      }
    }
  }
  tempDos.flush();
  tempBos.flush();
  tempBaos.flush();
  byte[] bytes=tempBaos.toByteArray();
  int rowBytes=bytes.length;
  IOUtil.writeRawBytes(dos,bytes);
  tempBaos=null;
  tempBos=null;
  tempDos=null;
  return rowBytes;
}","/** 
 * Write the result object value if it is used in column binding map
 * @param dos
 * @param resultObject
 * @param nameSet
 * @throws DataException
 * @throws IOException
 */
public static int writeResultObject(DataOutputStream dos,IResultObject resultObject,int count,Set nameSet,Map<String,StringTable> stringTableMap,Map<String,IIndexSerializer> index,int rowIndex,int version) throws DataException, IOException {
  if (resultObject.getResultClass() == null)   return 0;
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  for (int i=1; i <= count; i++) {
    if (nameSet != null && (nameSet.contains(resultObject.getResultClass().getFieldName(i)) || nameSet.contains(resultObject.getResultClass().getFieldAlias(i)))) {
      IIndexSerializer currIndex=index.get(resultObject.getResultClass().getFieldName(i));
      Object candidate=resultObject.getFieldValue(i);
      if (currIndex != null) {
{
          currIndex.put(candidate,rowIndex);
        }
      }
      StringTable table=null;
      if (stringTableMap != null)       table=stringTableMap.get(resultObject.getResultClass().getFieldName(i));
      if (table != null) {
        int stringIndex=table.getIndex((String)resultObject.getFieldValue(i));
        IOUtil.writeInt(tempDos,stringIndex);
      }
 else {
        if (version > VersionManager.VERSION_3_7_2_1) {
          ResultObjectUtil.writeObject(tempDos,resultObject.getFieldValue(i),resultObject.getResultClass().getFieldValueClass(i));
        }
 else {
          IOUtil.writeObject(tempDos,resultObject.getFieldValue(i));
        }
      }
    }
  }
  tempDos.flush();
  tempBos.flush();
  tempBaos.flush();
  byte[] bytes=tempBaos.toByteArray();
  int rowBytes=bytes.length;
  IOUtil.writeRawBytes(dos,bytes);
  tempBaos=null;
  tempBos=null;
  tempDos=null;
  return rowBytes;
}",0.9997436554729556
65517,"/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope,int rawIdStartingValue) throws DataException {
  super(rService,odiResult,scope,rawIdStartingValue);
  Object[] params={rService,odiResult,scope};
  logger.entering(ResultIterator2.class.getName(),""String_Node_Str"",params);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
  this.cachedRowId=0;
  this.isSummary=(rService.getQueryDefn() instanceof IQueryDefinition) ? ((IQueryDefinition)rService.getQueryDefn()).isSummaryQuery() : false;
  if (this.isSummary) {
    if (lowestGroupLevel == 0)     this.groupLevelCalculator=new SummaryGroupLevelCalculator(null);
 else {
      int[][] groupIndex=new int[lowestGroupLevel + 1][];
      for (int i=0; i <= lowestGroupLevel; i++) {
        groupIndex[i]=this.odiResult.getGroupStartAndEndIndex(i);
      }
      this.groupLevelCalculator=new SummaryGroupLevelCalculator(groupIndex);
    }
    if (rService.getSession().getEngineContext().getMode() == DataEngineContext.MODE_GENERATION) {
      this.saveToDoc=true;
      streamManager=new StreamManager(rService.getSession().getEngineContext(),new QueryResultInfo(rService.getQueryResults().getID(),null,0));
      try {
        bindings=findSavedBinding(rService.getQueryDefn().getBindings());
        this.doSaveResultClass(streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),bindings);
        raDataSet=(RAOutputStream)streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        rowCountOffset=raDataSet.getOffset();
        dataSetStream=new DataOutputStream(raDataSet);
        IOUtil.writeInt(dataSetStream,-1);
        dataSetLenStream=new DataOutputStream(streamManager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
      }
 catch (      Exception e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
  }
  logger.exiting(ResultIterator2.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope,int rawIdStartingValue) throws DataException {
  super(rService,odiResult,scope,rawIdStartingValue);
  Object[] params={rService,odiResult,scope};
  logger.entering(ResultIterator2.class.getName(),""String_Node_Str"",params);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
  this.cachedRowId=0;
  this.dtContext=rService.getSession().getEngineContext();
  this.isSummary=(rService.getQueryDefn() instanceof IQueryDefinition) ? ((IQueryDefinition)rService.getQueryDefn()).isSummaryQuery() : false;
  if (this.isSummary) {
    if (lowestGroupLevel == 0)     this.groupLevelCalculator=new SummaryGroupLevelCalculator(null);
 else {
      int[][] groupIndex=new int[lowestGroupLevel + 1][];
      for (int i=0; i <= lowestGroupLevel; i++) {
        groupIndex[i]=this.odiResult.getGroupStartAndEndIndex(i);
      }
      this.groupLevelCalculator=new SummaryGroupLevelCalculator(groupIndex);
    }
    if (rService.getSession().getEngineContext().getMode() == DataEngineContext.MODE_GENERATION) {
      this.saveToDoc=true;
      streamManager=new StreamManager(rService.getSession().getEngineContext(),new QueryResultInfo(rService.getQueryResults().getID(),null,0));
      try {
        bindings=findSavedBinding(rService.getQueryDefn().getBindings());
        this.doSaveResultClass(streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),bindings);
        raDataSet=(RAOutputStream)streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        rowCountOffset=raDataSet.getOffset();
        dataSetStream=new DataOutputStream(raDataSet);
        IOUtil.writeInt(dataSetStream,-1);
        dataSetLenStream=new DataOutputStream(streamManager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
      }
 catch (      Exception e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
  }
  logger.exiting(ResultIterator2.class.getName(),""String_Node_Str"");
}",0.9873904680487284
65518,"private int writeResultObject(Map valueMap) throws DataException, IOException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  for (  IBinding binding : bindings) {
    if (this.streamManager.getVersion() >= VersionManager.VERSION_3_7_2_1) {
      ResultObjectUtil.writeObject(tempDos,valueMap.get(binding.getBindingName()),this.getDataTypeClass(binding));
    }
 else {
      IOUtil.writeObject(tempDos,valueMap.get(binding.getBindingName()));
    }
  }
  tempDos.flush();
  tempBos.flush();
  tempBaos.flush();
  byte[] bytes=tempBaos.toByteArray();
  int rowBytes=bytes.length;
  IOUtil.writeRawBytes(dataSetStream,bytes);
  tempBaos=null;
  tempBos=null;
  tempDos=null;
  return rowBytes;
}","private int writeResultObject(Map valueMap) throws DataException, IOException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  for (  IBinding binding : bindings) {
    if (this.streamManager.getVersion() > VersionManager.VERSION_3_7_2_1 || ""String_Node_Str"".equals(this.dtContext.getBundleVersion()) || ""String_Node_Str"".equals(this.dtContext.getBundleVersion())) {
      ResultObjectUtil.writeObject(tempDos,valueMap.get(binding.getBindingName()),this.getDataTypeClass(binding));
    }
 else {
      IOUtil.writeObject(tempDos,valueMap.get(binding.getBindingName()));
    }
  }
  tempDos.flush();
  tempBos.flush();
  tempBaos.flush();
  byte[] bytes=tempBaos.toByteArray();
  int rowBytes=bytes.length;
  IOUtil.writeRawBytes(dataSetStream,bytes);
  tempBaos=null;
  tempBos=null;
  tempDos=null;
  return rowBytes;
}",0.9294052251250696
65519,"/** 
 * Load data set with assignment of inner id.
 * @return
 * @throws DataException
 */
public DataSetResultSet loadDataSetData(Set<Integer> preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID) throws DataException {
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  DataSetResultSet populator=new DataSetResultSet(stream,lensStream,this.loadResultClass(),preFilteredRowIds,stringTableMap,index,version,includeInnerID);
  return populator;
}","/** 
 * Load data set with assignment of inner id.
 * @return
 * @throws DataException
 */
public DataSetResultSet loadDataSetData(Set<Integer> preFilteredRowIds,Map<String,StringTable> stringTableMap,Map index,boolean includeInnerID) throws DataException {
  if (!streamManager.hasInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE))   return null;
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  int adjustedVersion=resolveVersionConflict();
  DataSetResultSet populator=new DataSetResultSet(stream,lensStream,this.loadResultClass(),preFilteredRowIds,stringTableMap,index,adjustedVersion,includeInnerID);
  return populator;
}",0.8819226750261233
65520,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_4_2_1_1;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_4_2_1_2;
}",0.9882352941176472
65521,"/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target)|| ""String_Node_Str"".equalsIgnoreCase(target)) {
    Matcher matcherHtml=PAGE_LINK_PATTERN_HTML.matcher(hyperlink);
    if (matcherHtml.find()) {
      return new PdfAction(hyperlink);
    }
    Matcher matcherLocal=PAGE_LINK_PATTERN_LOCAL.matcher(hyperlink);
    if (matcherLocal.find()) {
      String fileName=matcherLocal.group(1);
      String pageNumber=matcherLocal.group(matcherLocal.groupCount());
      return new PdfAction(fileName,Integer.valueOf(pageNumber));
    }
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}","/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target)|| ""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}",0.7898338220918866
65522,"public void load(){
  if (getDescriptorProvider() instanceof UnitPropertyDescriptorProvider) {
    deMeasureValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getMeasureValue();
    if (deMeasureValue == null)     deMeasureValue=""String_Node_Str"";
    if (!deMeasureValue.equals(String.valueOf(complexUnit.getValue()))) {
      try {
        complexUnit.setValue(deMeasureValue);
      }
 catch (      NumberFormatException e) {
      }
    }
    String[] items=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitItems();
    complexUnit.setUnits(items);
    try {
      deUnitValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitDisplayName(((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnit());
    }
 catch (    Exception e) {
      ExceptionUtil.handle(e);
      return;
    }
    if (deUnitValue == null)     complexUnit.deselectUnit();
 else     if (!deUnitValue.equals(complexUnit.getUnit())) {
      complexUnit.selectUnit(Arrays.asList(items).indexOf(deUnitValue));
    }
  }
}","public void load(){
  if (getDescriptorProvider() instanceof UnitPropertyDescriptorProvider) {
    deMeasureValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getMeasureValue();
    if (deMeasureValue == null)     deMeasureValue=""String_Node_Str"";
    if (!deMeasureValue.equals(String.valueOf(complexUnit.getValue()))) {
      try {
        complexUnit.setValue(deMeasureValue);
      }
 catch (      NumberFormatException e) {
      }
    }
    String[] items=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitItems();
    if (!Arrays.equals(complexUnit.getUnits(),items)) {
      complexUnit.setUnits(items);
    }
    try {
      deUnitValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitDisplayName(((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnit());
    }
 catch (    Exception e) {
      ExceptionUtil.handle(e);
      return;
    }
    if (deUnitValue == null)     complexUnit.deselectUnit();
 else     if (!deUnitValue.equals(complexUnit.getUnit())) {
      complexUnit.selectUnit(Arrays.asList(items).indexOf(deUnitValue));
    }
  }
}",0.9703153988868276
65523,"public void load(){
  String value=getDescriptorProvider().load().toString();
  boolean stateFlag=((value == null) == text.getEnabled());
  if (stateFlag) {
    text.setEnabled(value != null);
    combo.setEnabled(value != null);
  }
  if (getDescriptorProvider() instanceof UnitPropertyDescriptorProvider) {
    deMeasureValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getMeasureValue();
    if (deMeasureValue == null)     deMeasureValue=""String_Node_Str"";
    if (!deMeasureValue.equals(text.getText())) {
      text.setText(deMeasureValue);
    }
    String[] items=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitItems();
    combo.setItems(items);
    String deUnitValue;
    try {
      deUnitValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitDisplayName(((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnit());
    }
 catch (    Exception e) {
      ExceptionUtil.handle(e);
      return;
    }
    if (deUnitValue == null)     combo.deselectAll();
 else     if (!deUnitValue.equals(combo.getText())) {
      combo.select(Arrays.asList(items).indexOf(deUnitValue));
    }
  }
}","public void load(){
  String value=getDescriptorProvider().load().toString();
  boolean stateFlag=((value == null) == text.getEnabled());
  if (stateFlag) {
    text.setEnabled(value != null);
    combo.setEnabled(value != null);
  }
  if (getDescriptorProvider() instanceof UnitPropertyDescriptorProvider) {
    deMeasureValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getMeasureValue();
    if (deMeasureValue == null)     deMeasureValue=""String_Node_Str"";
    if (!deMeasureValue.equals(text.getText())) {
      text.setText(deMeasureValue);
    }
    String[] items=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitItems();
    if (!Arrays.equals(combo.getItems(),items)) {
      combo.setItems(items);
    }
    String deUnitValue;
    try {
      deUnitValue=((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnitDisplayName(((UnitPropertyDescriptorProvider)getDescriptorProvider()).getUnit());
    }
 catch (    Exception e) {
      ExceptionUtil.handle(e);
      return;
    }
    if (deUnitValue == null)     combo.deselectAll();
 else     if (!deUnitValue.equals(combo.getText())) {
      combo.select(Arrays.asList(items).indexOf(deUnitValue));
    }
  }
}",0.9686706181202372
65524,"/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  SortingOptimizer opt=new SortingOptimizer(dataSet,query);
  if (session.getEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return Strategy.Complex;
  }
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getSubqueries() != null && group.getSubqueries().size() > 0)       return Strategy.Complex;
      if (!isDirectColumnRefGroupKey(group,query))       return Strategy.Complex;
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    if (FilterUtil.hasMutipassFilters(query.getFilters()))     return Strategy.Complex;
    Set<String> bindings=new HashSet<String>();
    for (    Object filter : query.getFilters()) {
      IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
      if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))       return Strategy.Complex;
      bindings.addAll(ExpressionCompilerUtil.extractColumnExpression(baseExpr,ExpressionUtil.ROW_INDICATOR));
      if (((IFilterDefinition)filter).updateAggregation() == false)       return Strategy.Complex;
    }
    if (PreparedQueryUtil.existAggregationBinding(bindings,query.getBindings())) {
      return Strategy.Complex;
    }
  }
  if (query.getSorts() != null && query.getSorts().size() > 0) {
    if (!opt.acceptQuerySorting())     return Strategy.Complex;
  }
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
      for (      Object filter : dataSet.getFilters()) {
        IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
        if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))         return Strategy.Complex;
        if (((IFilterDefinition)filter).updateAggregation() == false)         return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}","/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  SortingOptimizer opt=new SortingOptimizer(dataSet,query);
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getSubqueries() != null && group.getSubqueries().size() > 0)       return Strategy.Complex;
      if (!isDirectColumnRefGroupKey(group,query))       return Strategy.Complex;
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    if (FilterUtil.hasMutipassFilters(query.getFilters()))     return Strategy.Complex;
    Set<String> bindings=new HashSet<String>();
    for (    Object filter : query.getFilters()) {
      IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
      if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))       return Strategy.Complex;
      bindings.addAll(ExpressionCompilerUtil.extractColumnExpression(baseExpr,ExpressionUtil.ROW_INDICATOR));
      if (((IFilterDefinition)filter).updateAggregation() == false)       return Strategy.Complex;
    }
    if (PreparedQueryUtil.existAggregationBinding(bindings,query.getBindings())) {
      return Strategy.Complex;
    }
  }
  if (query.getSorts() != null && query.getSorts().size() > 0) {
    if (!opt.acceptQuerySorting())     return Strategy.Complex;
  }
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
      for (      Object filter : dataSet.getFilters()) {
        IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
        if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))         return Strategy.Complex;
        if (((IFilterDefinition)filter).updateAggregation() == false)         return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}",0.988936013276784
65525,"/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  try {
    if (iParamBind.getExpr() instanceof IScriptExpression) {
      ScriptContext evalContext=this.outerScope == null ? context : context.newContext(this.outerScope);
      if (iParamBind.getExpr().getHandle() == null)       iParamBind.getExpr().setHandle(evalContext.compile(""String_Node_Str"",null,0,((IScriptExpression)iParamBind.getExpr()).getText()));
      evaluateResult=ScriptEvalUtil.evalExpr(iParamBind.getExpr(),evalContext,null,0);
    }
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}","/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  try {
    if (iParamBind.getExpr() instanceof IScriptExpression) {
      ScriptContext evalContext=this.outerScope == null ? context : context.newContext(this.outerScope);
      if (iParamBind.getExpr().getHandle() == null)       iParamBind.getExpr().setHandle(evalContext.compile(""String_Node_Str"",null,0,((IScriptExpression)iParamBind.getExpr()).getText()));
      evaluateResult=ScriptEvalUtil.evalExpr(iParamBind.getExpr(),evalContext,ScriptExpression.defaultID,0);
    }
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}",0.9851485148514852
65526,"private void registerOutputParams(IBaseDataSetDesign dataSetDesign,Scriptable scope) throws BirtException {
  String dataSetName=dataSetDesign.getName();
  for (int i=0; i < dataSetDesign.getParameters().size(); i++) {
    if (((IParameterDefinition)dataSetDesign.getParameters().get(i)).isOutputMode()) {
      String paramName=((IParameterDefinition)dataSetDesign.getParameters().get(i)).getName();
      String joinname=JointDataSetParameterUtil.getParameterName(dataSetName,paramName);
      Object value=JavascriptEvalUtil.evaluateRawScript(Context.getCurrentContext(),scope,JointDataSetParameterUtil.buildOutputParamsExpr(paramName),""String_Node_Str"",1);
      dataSet.setOutputParameterValue(joinname,value);
    }
  }
}","private void registerOutputParams(IBaseDataSetDesign dataSetDesign,Scriptable scope) throws BirtException {
  String dataSetName=dataSetDesign.getName();
  for (int i=0; i < dataSetDesign.getParameters().size(); i++) {
    if (((IParameterDefinition)dataSetDesign.getParameters().get(i)).isOutputMode()) {
      String paramName=((IParameterDefinition)dataSetDesign.getParameters().get(i)).getName();
      String joinname=JointDataSetParameterUtil.getParameterName(dataSetName,paramName);
      Object value=JavascriptEvalUtil.evaluateRawScript(Context.getCurrentContext(),scope,JointDataSetParameterUtil.buildOutputParamsExpr(paramName),org.eclipse.birt.core.script.ScriptExpression.defaultID,1);
      dataSet.setOutputParameterValue(joinname,value);
    }
  }
}",0.9517426273458444
65527,"private int evaluatePeriodsN(String n,Object expression) throws DataException, BirtException {
  int num=0;
  if (n == null || n.trim().equals(""String_Node_Str"")) {
    n=""String_Node_Str"";
  }
  try {
    num=Integer.valueOf(n);
  }
 catch (  Exception e) {
    ScriptExpression scriptExpression=null;
    if (expression instanceof Expression) {
      scriptExpression=this.adaptExpression((Expression)expression);
      ;
    }
 else {
      scriptExpression=adaptExpression(n,DesignChoiceConstants.PARAM_TYPE_ANY);
    }
    num=(Integer)ScriptEvalUtil.evalExpr(scriptExpression,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  return num;
}","private int evaluatePeriodsN(String n,Object expression) throws DataException, BirtException {
  int num=0;
  if (n == null || n.trim().equals(""String_Node_Str"")) {
    n=""String_Node_Str"";
  }
  try {
    num=Integer.valueOf(n);
  }
 catch (  Exception e) {
    ScriptExpression scriptExpression=null;
    if (expression instanceof Expression) {
      scriptExpression=this.adaptExpression((Expression)expression);
      ;
    }
 else {
      scriptExpression=adaptExpression(n,DesignChoiceConstants.PARAM_TYPE_ANY);
    }
    num=(Integer)ScriptEvalUtil.evalExpr(scriptExpression,this.context.getDataEngineContext().getScriptContext(),org.eclipse.birt.core.script.ScriptExpression.defaultID,0);
  }
  return num;
}",0.951219512195122
65528,"public ITimeFunction adaptTimeFunction(ComputedColumnHandle handle) throws DataException, BirtException {
  if (handle.getCalculationType() == null || handle.getCalculationType().trim().length() == 0)   return null;
  TimeFunction timeFunction=new TimeFunction();
  Object referenceDate=null;
  if (DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY.equals(handle.getReferenceDateType())) {
    referenceDate=ScriptEvalUtil.evalExpr(new ScriptExpression(""String_Node_Str""),this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
 else   if (DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE.equals(handle.getReferenceDateType())) {
    IBaseExpression sciptExpr=this.adaptExpression((Expression)(handle.getReferenceDateValue().getValue()));
    referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension());
  timeFunction.setBaseTimePeriod(populateBaseTimePeriod(handle));
  timeFunction.setRelativeTimePeriod(populateRelativeTimePeriod(handle));
  return timeFunction;
}","public ITimeFunction adaptTimeFunction(ComputedColumnHandle handle) throws DataException, BirtException {
  if (handle.getCalculationType() == null || handle.getCalculationType().trim().length() == 0)   return null;
  TimeFunction timeFunction=new TimeFunction();
  Object referenceDate=null;
  if (DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY.equals(handle.getReferenceDateType())) {
    referenceDate=ScriptEvalUtil.evalExpr(new ScriptExpression(""String_Node_Str""),this.context.getDataEngineContext().getScriptContext(),org.eclipse.birt.core.script.ScriptExpression.defaultID,0);
  }
 else   if (DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE.equals(handle.getReferenceDateType())) {
    IBaseExpression sciptExpr=this.adaptExpression((Expression)(handle.getReferenceDateValue().getValue()));
    referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),org.eclipse.birt.core.script.ScriptExpression.defaultID,0);
  }
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension());
  timeFunction.setBaseTimePeriod(populateBaseTimePeriod(handle));
  timeFunction.setRelativeTimePeriod(populateRelativeTimePeriod(handle));
  return timeFunction;
}",0.9439551641313052
65529,"public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    if (!""String_Node_Str"".equalsIgnoreCase(foreign.getComputedStyle().getDisplay())) {
      adjustInline();
      inlineBrother=false;
    }
 else {
      context.endInline();
    }
    HTML2Content.html2Content(foreign);
    context.startCell();
    int width=WordUtil.convertTo(foreign.getWidth(),context.getCurrentWidth(),reportDpi);
    width=Math.min(width,context.getCurrentWidth());
    wordWriter.startTable(foreign.getComputedStyle(),width,inForeign);
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(width,foreign.getComputedStyle(),null);
    writeToc(foreign);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setIsAfterTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    if (!""String_Node_Str"".equalsIgnoreCase(foreign.getComputedStyle().getDisplay())) {
      adjustInline();
      inlineBrother=false;
    }
 else {
      context.endInline();
    }
    HTML2Content.html2Content(foreign);
    context.startCell();
    int width=WordUtil.convertTo(foreign.getWidth(),context.getCurrentWidth(),reportDpi);
    width=Math.min(width,context.getCurrentWidth());
    wordWriter.startTable(foreign.getComputedStyle(),width,inForeign);
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(width,foreign.getComputedStyle(),null);
    writeBookmark(foreign);
    writeToc(foreign);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setIsAfterTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}",0.9898697539797396
65530,"/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  SortingOptimizer opt=new SortingOptimizer(dataSet,query);
  if (session.getEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return Strategy.Complex;
  }
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getSubqueries() != null && group.getSubqueries().size() > 0)       return Strategy.Complex;
      if (!isDirectColumnRefGroupKey(group,query))       return Strategy.Complex;
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    if (FilterUtil.hasMutipassFilters(query.getFilters()))     return Strategy.Complex;
    Set<String> bindings=new HashSet<String>();
    for (    Object filter : query.getFilters()) {
      IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
      if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))       return Strategy.Complex;
      bindings.addAll(ExpressionCompilerUtil.extractColumnExpression(baseExpr,ExpressionUtil.ROW_INDICATOR));
      if (((IFilterDefinition)filter).updateAggregation() == false)       return Strategy.Complex;
    }
    if (PreparedQueryUtil.existAggregationBinding(bindings,query.getBindings())) {
      return Strategy.Complex;
    }
  }
  if (query.getSorts() != null && query.getSorts().size() > 0) {
    if (!opt.acceptQuerySorting())     return Strategy.Complex;
  }
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
      for (      Object filter : dataSet.getFilters()) {
        IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
        if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))         return Strategy.Complex;
        if (((IFilterDefinition)filter).updateAggregation() == false)         return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}","/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  SortingOptimizer opt=new SortingOptimizer(dataSet,query);
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getSubqueries() != null && group.getSubqueries().size() > 0)       return Strategy.Complex;
      if (!isDirectColumnRefGroupKey(group,query))       return Strategy.Complex;
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    if (FilterUtil.hasMutipassFilters(query.getFilters()))     return Strategy.Complex;
    Set<String> bindings=new HashSet<String>();
    for (    Object filter : query.getFilters()) {
      IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
      if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))       return Strategy.Complex;
      bindings.addAll(ExpressionCompilerUtil.extractColumnExpression(baseExpr,ExpressionUtil.ROW_INDICATOR));
      if (((IFilterDefinition)filter).updateAggregation() == false)       return Strategy.Complex;
    }
    if (PreparedQueryUtil.existAggregationBinding(bindings,query.getBindings())) {
      return Strategy.Complex;
    }
  }
  if (query.getSorts() != null && query.getSorts().size() > 0) {
    if (!opt.acceptQuerySorting())     return Strategy.Complex;
  }
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
      for (      Object filter : dataSet.getFilters()) {
        IBaseExpression baseExpr=((IFilterDefinition)filter).getExpression();
        if (ExpressionCompilerUtil.hasAggregationInExpr(baseExpr))         return Strategy.Complex;
        if (((IFilterDefinition)filter).updateAggregation() == false)         return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}",0.988936013276784
65531,"private void setGroupToc(IGroupContent group){
  if (group != null) {
    InstanceID groupId=group.getInstanceID();
    if (!groupIdList.contains(groupId)) {
      groupIdList.add(groupId);
      Object groupToc=group.getTOC();
      if (groupToc != null) {
        tableTocs.add(new TocInfo(groupToc.toString(),tocLevel));
      }
    }
    increaseTOCLevel(group);
  }
}","private void setGroupToc(IGroupContent group){
  if (group != null) {
    InstanceID groupId=group.getInstanceID();
    if (!groupIdList.contains(groupId)) {
      groupIdList.add(groupId);
      Object groupToc=group.getTOC();
      if (groupToc != null && !hasTocOutputed(group)) {
        tableTocs.add(new TocInfo(groupToc.toString(),tocLevel));
      }
    }
    increaseTOCLevel(group);
  }
}",0.9662337662337662
65532,"public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  Object tableToc=table.getTOC();
  if (tableToc != null) {
    tableTocs.add(new TocInfo(tableToc.toString(),tocLevel));
  }
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isAfterTable()) {
    wordWriter.insertHiddenParagraph();
    context.setIsAfterTable(false);
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth(),reportDpi);
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.startTable(table.getComputedStyle(),getTableWidth(cols));
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}","public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  Object tableToc=table.getTOC();
  if (tableToc != null && !hasTocOutputed(table)) {
    tableTocs.add(new TocInfo(tableToc.toString(),tocLevel));
  }
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isAfterTable()) {
    wordWriter.insertHiddenParagraph();
    context.setIsAfterTable(false);
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth(),reportDpi);
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.startTable(table.getComputedStyle(),getTableWidth(cols));
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}",0.9837702871410736
65533,"public void startList(IListContent list){
  adjustInline();
  styles.push(list.getComputedStyle());
  writeBookmark(list);
  Object listToc=list.getTOC();
  if (listToc != null) {
    tableTocs.add(new TocInfo(listToc.toString(),tocLevel));
  }
  increaseTOCLevel(list);
  if (context.isAfterTable()) {
    wordWriter.insertHiddenParagraph();
    context.setIsAfterTable(false);
  }
  int width=WordUtil.convertTo(list.getWidth(),context.getCurrentWidth(),reportDpi);
  width=Math.min(width,context.getCurrentWidth());
  wordWriter.startTable(list.getComputedStyle(),width);
}","public void startList(IListContent list){
  adjustInline();
  styles.push(list.getComputedStyle());
  writeBookmark(list);
  Object listToc=list.getTOC();
  if (listToc != null && !hasTocOutputed(list)) {
    tableTocs.add(new TocInfo(listToc.toString(),tocLevel));
  }
  increaseTOCLevel(list);
  if (context.isAfterTable()) {
    wordWriter.insertHiddenParagraph();
    context.setIsAfterTable(false);
  }
  int width=WordUtil.convertTo(list.getWidth(),context.getCurrentWidth(),reportDpi);
  width=Math.min(width,context.getCurrentWidth());
  wordWriter.startTable(list.getComputedStyle(),width);
}",0.9787595581988106
65534,"public static String createTempRootDir(String tempDir) throws DataException {
  String rootDirStr=null;
  File tempDtEDir=null;
  tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1.intValue());
  cacheCounter1.add(1);
  int x=0;
  while (FileSecurity.fileExist(tempDtEDir)) {
    x++;
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1.intValue()+ ""String_Node_Str""+ x);
  }
  FileSecurity.fileMakeDirs(tempDtEDir);
  FileSecurity.fileDeleteOnExit(tempDtEDir);
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}","public static String createTempRootDir(String tempDir) throws DataException {
  String rootDirStr=null;
  File tempDtEDir=null;
  tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1.intValue());
  cacheCounter1.add(1);
  int x=0;
  while (FileSecurity.fileExist(tempDtEDir)) {
    x++;
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1.intValue()+ ""String_Node_Str""+ x);
  }
  FileSecurity.fileMakeDirs(tempDtEDir);
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}",0.9617021276595744
65535,"/** 
 * @return session temp dir
 * @throws DataException 
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir) throws DataException {
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
  String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
  cacheCounter2.add(1);
  sessionFile=new File(sessionTempDir);
  int i=0;
  String tempDir=sessionTempDir;
  while (FileSecurity.fileExist(sessionFile)) {
    i++;
    sessionTempDir=tempDir + ""String_Node_Str"" + i;
    sessionFile=new File(sessionTempDir);
    if (i > MAX_DIR_CREATION_ATTEMPT) {
      throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,diagnosticMkdirs(sessionFile));
    }
  }
  if (!FileSecurity.fileMakeDirs(sessionFile)) {
    throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,diagnosticMkdirs(sessionFile));
  }
  FileSecurity.fileDeleteOnExit(sessionFile);
  return getCanonicalPath(sessionFile);
}","/** 
 * @return session temp dir
 * @throws DataException 
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir) throws DataException {
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
  String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
  cacheCounter2.add(1);
  sessionFile=new File(sessionTempDir);
  int i=0;
  String tempDir=sessionTempDir;
  while (FileSecurity.fileExist(sessionFile)) {
    i++;
    sessionTempDir=tempDir + ""String_Node_Str"" + i;
    sessionFile=new File(sessionTempDir);
    if (i > MAX_DIR_CREATION_ATTEMPT) {
      throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,diagnosticMkdirs(sessionFile));
    }
  }
  if (!FileSecurity.fileMakeDirs(sessionFile)) {
    throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,diagnosticMkdirs(sessionFile));
  }
  return getCanonicalPath(sessionFile);
}",0.9766970618034448
65536,"private void createCacheOutputStream() throws FileNotFoundException, DataException {
  File tmpDir=new File(session.getTempDir());
  if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
    FileSecurity.fileMakeDirs(tmpDir);
  }
  metaOutputStream=new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getMetaFile(session.getTempDir(),queryResults.getID())),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getDataFile(session.getTempDir(),queryResults.getID())),1024));
  File file=ResultSetCacheUtil.getDataFile(session.getTempDir(),queryResults.getID());
  FileSecurity.fileDeleteOnExit(file);
  file=ResultSetCacheUtil.getMetaFile(session.getTempDir(),queryResults.getID());
  FileSecurity.fileDeleteOnExit(file);
}","private void createCacheOutputStream() throws FileNotFoundException, DataException {
  File tmpDir=new File(session.getTempDir());
  if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
    FileSecurity.fileMakeDirs(tmpDir);
  }
  metaOutputStream=new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getMetaFile(session.getTempDir(),queryResults.getID())),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getDataFile(session.getTempDir(),queryResults.getID())),1024));
  File file=ResultSetCacheUtil.getDataFile(session.getTempDir(),queryResults.getID());
  file=ResultSetCacheUtil.getMetaFile(session.getTempDir(),queryResults.getID());
}",0.9518518518518518
65537,"/** 
 * @throws FileNotFoundException
 * @throws DataException 
 */
private void createCacheOutputStream() throws FileNotFoundException, DataException {
  File tmpDir=new File(resultService.getSession().getTempDir());
  if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
    FileSecurity.fileMakeDirs(tmpDir);
  }
  String id=resultService.getQueryResults().getID();
  int currentParentQueryRowId=0;
  if (this.resultService != null && this.resultService.getQueryDefn() instanceof ISubqueryDefinition) {
    if (this.resultService.getQueryResults() instanceof QueryResults) {
      QueryResults results=(QueryResults)this.resultService.getQueryResults();
      if (results.getQueryService().getQueryExecutor() instanceof ISubQueryExecutor) {
        SubQueryExecutor executor=(SubQueryExecutor)results.getQueryService().getQueryExecutor();
        if (executor.getParentIterator() != null) {
          currentParentQueryRowId=executor.getParentIterator().getCurrentResultIndex();
        }
      }
    }
    id=QuerySharingUtil.getSubQueryID(id,this.resultService.getQueryDefn().getName(),currentParentQueryRowId);
  }
  metaOutputStream=new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),id)),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),id)),1024));
  File file=ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),id);
  FileSecurity.fileDeleteOnExit(file);
  file=ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),id);
  FileSecurity.fileDeleteOnExit(file);
}","/** 
 * @throws FileNotFoundException
 * @throws DataException 
 */
private void createCacheOutputStream() throws FileNotFoundException, DataException {
  File tmpDir=new File(resultService.getSession().getTempDir());
  if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
    FileSecurity.fileMakeDirs(tmpDir);
  }
  String id=resultService.getQueryResults().getID();
  int currentParentQueryRowId=0;
  if (this.resultService != null && this.resultService.getQueryDefn() instanceof ISubqueryDefinition) {
    if (this.resultService.getQueryResults() instanceof QueryResults) {
      QueryResults results=(QueryResults)this.resultService.getQueryResults();
      if (results.getQueryService().getQueryExecutor() instanceof ISubQueryExecutor) {
        SubQueryExecutor executor=(SubQueryExecutor)results.getQueryService().getQueryExecutor();
        if (executor.getParentIterator() != null) {
          currentParentQueryRowId=executor.getParentIterator().getCurrentResultIndex();
        }
      }
    }
    id=QuerySharingUtil.getSubQueryID(id,this.resultService.getQueryDefn().getName(),currentParentQueryRowId);
  }
  metaOutputStream=new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),id)),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(FileSecurity.createFileOutputStream(ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),id)),1024));
  File file=ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),id);
  file=ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),id);
}",0.977139507620164
65538,"/** 
 */
public void clearTmpFile(){
  if (objectFile != null) {
    FileSecurity.fileDeleteOnExit(objectFile);
    objectFile=null;
  }
  if (oatFile != null) {
    FileSecurity.fileDeleteOnExit(oatFile);
    oatFile=null;
  }
  if (dataFile != null) {
    FileSecurity.fileDeleteOnExit(dataFile);
    dataFile=null;
  }
}","/** 
 */
public void clearTmpFile(){
  if (objectFile != null) {
    objectFile=null;
  }
  if (oatFile != null) {
    oatFile=null;
  }
  if (dataFile != null) {
    dataFile=null;
  }
}",0.7333333333333333
65539,"/** 
 * @throws IOException
 */
private void createRandomAccessFile() throws IOException {
  File parent=file.getParentFile();
  if (!FileSecurity.fileExist(parent)) {
    FileSecurity.fileMakeDirs(parent);
  }
  delegate=FileSecurity.createRandomAccessFile(file,mode);
  file.deleteOnExit();
  if (memoryDelegate != null || length > 0) {
    delegate.write(memoryDelegate,0,length);
    delegate.seek(pointer);
  }
}","/** 
 * @throws IOException
 */
private void createRandomAccessFile() throws IOException {
  File parent=file.getParentFile();
  if (!FileSecurity.fileExist(parent)) {
    FileSecurity.fileMakeDirs(parent);
  }
  delegate=FileSecurity.createRandomAccessFile(file,mode);
  if (memoryDelegate != null || length > 0) {
    delegate.write(memoryDelegate,0,length);
    delegate.seek(pointer);
  }
}",0.9716399506781752
65540,"private void writeHeaderFooter() throws IOException, BirtException {
  IStyle style=previousPage.getStyle();
  String backgroundHeight=style.getBackgroundHeight();
  String backgroundWidth=style.getBackgroundWidth();
  if (previousPage.getPageHeader() != null || backgroundHeight != null || backgroundWidth != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst() && previousPage.getPageNumber() == 1,headerHeight,contentWidth);
    if (backgroundHeight != null || backgroundWidth != null) {
      String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign(),reportContext.getAppContext());
      wordWriter.drawDocumentBackgroundImage(backgroundImageUrl,backgroundHeight,backgroundWidth,WordUtil.twipToPt(topMargin),WordUtil.twipToPt(leftMargin),WordUtil.twipToPt(pageHeight),WordUtil.twipToPt(pageWidth));
    }
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter(footerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}","private void writeHeaderFooter() throws IOException, BirtException {
  IStyle style=previousPage.getStyle();
  String backgroundHeight=style.getBackgroundHeight();
  String backgroundWidth=style.getBackgroundWidth();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
  if (previousPage.getPageHeader() != null || backgroundHeight != null || backgroundWidth != null) {
    wordWriter.startHeader(!master.isShowHeaderOnFirst() && previousPage.getPageNumber() == 1,headerHeight,contentWidth);
    if (backgroundHeight != null || backgroundWidth != null) {
      String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign(),reportContext.getAppContext());
      wordWriter.drawDocumentBackgroundImage(backgroundImageUrl,backgroundHeight,backgroundWidth,WordUtil.twipToPt(topMargin),WordUtil.twipToPt(leftMargin),WordUtil.twipToPt(pageHeight),WordUtil.twipToPt(pageWidth));
    }
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    if (!master.isShowFooterOnLast() && previousPage.getPageNumber() == reportContent.getTotalPage()) {
      IContent footer=previousPage.getPageFooter();
      ILabelContent emptyContent=footer.getReportContent().createLabelContent();
      emptyContent.setText(this.EMPTY_FOOTER);
      wordWriter.startFooter(footerHeight,contentWidth);
      contentVisitor.visit(emptyContent,null);
      wordWriter.endFooter();
    }
 else {
      wordWriter.startFooter(footerHeight,contentWidth);
      contentVisitor.visitChildren(previousPage.getPageFooter(),null);
      wordWriter.endFooter();
    }
  }
}",0.7740416946872899
65541,"/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  boolean recalculate=false;
  if (!aggrMeasureFilters.isEmpty()) {
    AggrMeasureFilterHelper filter=new AggrMeasureFilterHelper(cube,resultSet);
    filter.setQueryExecutor(cubeQueryExecutor);
    filter.setBindingValueFetcher(fetcher);
    cubePosFilters=filter.getCubePosFilters(aggrMeasureFilters);
    if (cubePosFilters == null) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
      }
      return;
    }
    recalculate=true;
  }
  if (!aggrFilterHelpers.isEmpty()) {
    AggregationFilterHelper filterHelper=new AggregationFilterHelper(cube,aggrFilterHelpers,fetcher);
    List newFilters=filterHelper.generateLevelFilters(aggregations,resultSet);
    if (newFilters == null) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
        recalculate=false;
      }
    }
 else {
      levelFilters.addAll(newFilters);
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].close();
        resultSet[i]=null;
      }
      recalculate=true;
    }
  }
  if (recalculate) {
    IAggregationResultSet[] temp=onePassExecute(aggregations,stopSign);
    System.arraycopy(temp,0,resultSet,0,resultSet.length);
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
public void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  boolean recalculate=false;
  if (!aggrMeasureFilters.isEmpty()) {
    AggrMeasureFilterHelper filter=new AggrMeasureFilterHelper(cube,resultSet);
    filter.setQueryExecutor(cubeQueryExecutor);
    filter.setBindingValueFetcher(fetcher);
    cubePosFilters=filter.getCubePosFilters(aggrMeasureFilters);
    if (cubePosFilters == null) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
      }
      return;
    }
    recalculate=true;
  }
  if (!aggrFilterHelpers.isEmpty()) {
    AggregationFilterHelper filterHelper=new AggregationFilterHelper(cube,aggrFilterHelpers,fetcher);
    List newFilters=filterHelper.generateLevelFilters(aggregations,resultSet);
    if (newFilters == null) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
        recalculate=false;
      }
    }
 else {
      levelFilters.addAll(newFilters);
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].close();
        resultSet[i]=null;
      }
      recalculate=true;
    }
  }
  if (recalculate) {
    IAggregationResultSet[] temp=onePassExecute(aggregations,stopSign);
    System.arraycopy(temp,0,resultSet,0,temp.length);
  }
}",0.9920265780730896
65542,"/** 
 * @param jsMeasureEvalFilterHelper
 * @return
 * @throws DataException 
 */
private String[] populateAggregationNames(List<String> allAggrNames,List jsMeasureEvalFilterHelper) throws DataException {
  String[] aggregationNames=new String[jsMeasureEvalFilterHelper.size()];
  for (int i=0; i < aggregationNames.length; i++) {
    IAggrMeasureFilterEvalHelper filterHelper=(IAggrMeasureFilterEvalHelper)jsMeasureEvalFilterHelper.get(i);
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filterHelper.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    aggregationNames[i]=(String)getIntersection(allAggrNames,bindingName);
    if (aggregationNames[i] == null) {
      aggregationNames[i]=OlapExpressionCompiler.getReferencedScriptObject(filterHelper.getExpression(),ScriptConstants.DATA_SET_BINDING_SCRIPTABLE);
      if (aggregationNames[i] == null && this.executor != null) {
        List bindingList=new ArrayList();
        ICubeQueryDefinition query=this.executor.getCubeQueryDefinition();
        bindingList.addAll(query.getBindings());
        if (query instanceof PreparedCubeQueryDefinition)         bindingList.addAll(((PreparedCubeQueryDefinition)query).getBindingsForNestAggregation());
        List referencedNames=new ArrayList();
        for (int j=0; j < bindingName.size(); j++) {
          IBinding b=getBinding(bindingName.get(j).toString(),bindingList);
          if (this.fetcher != null && this.fetcher.existBinding(bindingName.get(j).toString())) {
            referencedNames.addAll(ExpressionCompilerUtil.extractColumnExpression(b.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE));
          }
          if (b != null && b.getAggregatOns().size() == 0 && b.getAggrFunction() == null) {
            referencedNames.addAll(ExpressionCompilerUtil.extractColumnExpression(b.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE));
          }
        }
        aggregationNames[i]=(String)getIntersection(allAggrNames,referencedNames);
      }
    }
  }
  return aggregationNames;
}","/** 
 * @param jsMeasureEvalFilterHelper
 * @return
 * @throws DataException 
 */
private String[] populateAggregationNames(List<String> allAggrNames,List jsMeasureEvalFilterHelper) throws DataException {
  String[] aggregationNames=new String[jsMeasureEvalFilterHelper.size()];
  for (int i=0; i < aggregationNames.length; i++) {
    IAggrMeasureFilterEvalHelper filterHelper=(IAggrMeasureFilterEvalHelper)jsMeasureEvalFilterHelper.get(i);
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filterHelper.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    aggregationNames[i]=(String)getIntersection(allAggrNames,bindingName);
    if (aggregationNames[i] == null) {
      aggregationNames[i]=OlapExpressionCompiler.getReferencedScriptObject(filterHelper.getExpression(),ScriptConstants.DATA_SET_BINDING_SCRIPTABLE);
      if (aggregationNames[i] == null && this.executor != null) {
        List bindingList=new ArrayList();
        ICubeQueryDefinition query=this.executor.getCubeQueryDefinition();
        bindingList.addAll(query.getBindings());
        if (query instanceof PreparedCubeQueryDefinition)         bindingList.addAll(((PreparedCubeQueryDefinition)query).getBindingsForNestAggregation());
        List referencedNames=new ArrayList();
        for (int j=0; j < bindingName.size(); j++) {
          IBinding b=getBinding(bindingName.get(j).toString(),bindingList);
          if (b != null && b.getAggregatOns().size() == 0 && b.getAggrFunction() == null) {
            referencedNames.addAll(ExpressionCompilerUtil.extractColumnExpression(b.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE));
          }
        }
        aggregationNames[i]=(String)getIntersection(allAggrNames,referencedNames);
      }
    }
  }
  return aggregationNames;
}",0.8460536598072415
65543,"public void populateFilterHelpers() throws DataException {
  if (populateFilter)   return;
  List filters=defn.getFilters();
  Set<DimLevel> dimLevelInCubeQuery=this.getDimLevelsDefinedInCubeQuery();
  validateFilter(filters,defn.getBindings());
  for (int i=0; i < filters.size(); i++) {
    IFilterDefinition filter=(IFilterDefinition)filters.get(i);
    if (!filter.updateAggregation()) {
      Set dimLevelSet=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),defn.getBindings());
      if (dimLevelSet.size() <= 1) {
        continue;
      }
 else {
        if (!adjustCubeFilterUpdateAggregationFlag(filter,dimLevelSet))         continue;
      }
    }
switch (this.getFilterType(filter,dimLevelInCubeQuery)) {
case CubeQueryExecutor.DIMENSION_FILTER:
{
        SimpleLevelFilter simpleLevelfilter=createSimpleLevelFilter(filter,defn.getBindings());
        if (simpleLevelfilter == null) {
          this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
        }
 else {
          boolean existLevelFilter=false;
          for (int j=0; j < this.dimensionSimpleFilter.size(); j++) {
            if (dimensionSimpleFilter.get(j).getDimensionName().equals(simpleLevelfilter.getDimensionName()) && dimensionSimpleFilter.get(j).getLevelName().equals(simpleLevelfilter.getLevelName())) {
              this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
              existLevelFilter=true;
              break;
            }
          }
          if (!existLevelFilter)           this.dimensionSimpleFilter.add(simpleLevelfilter);
        }
        break;
      }
case CubeQueryExecutor.AGGR_MEASURE_FILTER:
{
      this.aggrMeasureFilterEvalHelpers.add(new AggrMeasureFilterEvalHelper(this.outResults,scope,defn,filter,session.getEngineContext().getScriptContext()));
      break;
    }
case CubeQueryExecutor.FACTTABLE_FILTER:
default :
{
    this.advancedFacttableBasedFilterEvalHelper.add(new JSFacttableFilterEvalHelper(scope,this.session.getEngineContext().getScriptContext(),filter,this.outResults,this.defn));
  }
}
}
populateFilter=true;
}","public void populateFilterHelpers() throws DataException {
  if (populateFilter)   return;
  List filters=defn.getFilters();
  Set<DimLevel> dimLevelInCubeQuery=this.getDimLevelsDefinedInCubeQuery();
  validateFilter(filters,defn.getBindings());
  for (int i=0; i < filters.size(); i++) {
    IFilterDefinition filter=(IFilterDefinition)filters.get(i);
    if (!filter.updateAggregation()) {
      Set dimLevelSet=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),defn.getBindings());
      if (dimLevelSet.size() <= 1) {
        continue;
      }
 else {
        if (!adjustCubeFilterUpdateAggregationFlag(filter,dimLevelSet))         continue;
      }
    }
switch (this.getFilterType(filter,dimLevelInCubeQuery)) {
case CubeQueryExecutor.DIMENSION_FILTER:
{
        SimpleLevelFilter simpleLevelfilter=createSimpleLevelFilter(filter,defn.getBindings());
        if (simpleLevelfilter == null) {
          this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
        }
 else {
          boolean existLevelFilter=false;
          for (int j=0; j < this.dimensionSimpleFilter.size(); j++) {
            if (dimensionSimpleFilter.get(j).getDimensionName().equals(simpleLevelfilter.getDimensionName()) && dimensionSimpleFilter.get(j).getLevelName().equals(simpleLevelfilter.getLevelName())) {
              this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
              existLevelFilter=true;
              break;
            }
          }
          if (!existLevelFilter)           this.dimensionSimpleFilter.add(simpleLevelfilter);
        }
        break;
      }
case CubeQueryExecutor.AGGR_MEASURE_FILTER:
{
      this.aggrMeasureFilterEvalHelpers.add(new AggrMeasureFilterEvalHelper(this.outResults,scope,defn,filter,session.getEngineContext().getScriptContext()));
      break;
    }
case CubeQueryExecutor.AGGR_OPERATION_FILTER:
{
    this.aggrFilterEvalHelpersOnCubeOperator.add(new AggrMeasureFilterEvalHelper(this.outResults,scope,defn,filter,session.getEngineContext().getScriptContext()));
    break;
  }
case CubeQueryExecutor.FACTTABLE_FILTER:
default :
{
  this.advancedFacttableBasedFilterEvalHelper.add(new JSFacttableFilterEvalHelper(scope,this.session.getEngineContext().getScriptContext(),filter,this.outResults,this.defn));
}
}
}
populateFilter=true;
}",0.9525179856115108
65544,"/** 
 * @param outResults
 * @param defn
 * @param session
 * @param scope
 * @param context
 * @throws DataException 
 */
public CubeQueryExecutor(IBaseQueryResults outResults,ICubeQueryDefinition defn,DataEngineSession session,Scriptable scope,DataEngineContext context) throws DataException {
  this.defn=defn;
  this.scope=scope;
  this.context=context;
  this.session=session;
  DataEngineThreadLocal.getInstance().getPathManager().setTempPath(session.getTempDir());
  this.outResults=outResults;
  this.dimensionFilterEvalHelpers=new ArrayList<IJSFilterHelper>();
  this.dimensionSimpleFilter=new ArrayList<SimpleLevelFilter>();
  this.aggrMeasureFilterEvalHelpers=new ArrayList<IAggrMeasureFilterEvalHelper>();
  this.advancedFacttableBasedFilterEvalHelper=new ArrayList<IJSFacttableFilterEvalHelper>();
  if (!(context.getMode() == DataEngineContext.MODE_PRESENTATION && defn.getQueryResultsID() != null)) {
    populateFilterHelpers();
  }
}","/** 
 * @param outResults
 * @param defn
 * @param session
 * @param scope
 * @param context
 * @throws DataException 
 */
public CubeQueryExecutor(IBaseQueryResults outResults,ICubeQueryDefinition defn,DataEngineSession session,Scriptable scope,DataEngineContext context) throws DataException {
  this.defn=defn;
  this.scope=scope;
  this.context=context;
  this.session=session;
  DataEngineThreadLocal.getInstance().getPathManager().setTempPath(session.getTempDir());
  this.outResults=outResults;
  this.dimensionFilterEvalHelpers=new ArrayList<IJSFilterHelper>();
  this.dimensionSimpleFilter=new ArrayList<SimpleLevelFilter>();
  this.aggrMeasureFilterEvalHelpers=new ArrayList<IAggrMeasureFilterEvalHelper>();
  this.aggrFilterEvalHelpersOnCubeOperator=new ArrayList<IAggrMeasureFilterEvalHelper>();
  this.advancedFacttableBasedFilterEvalHelper=new ArrayList<IJSFacttableFilterEvalHelper>();
  if (!(context.getMode() == DataEngineContext.MODE_PRESENTATION && defn.getQueryResultsID() != null)) {
    populateFilterHelpers();
  }
}",0.9547738693467336
65545,"public int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1 && filter.updateAggregation())       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      List bindingList=new ArrayList();
      bindingList.addAll(this.defn.getBindings());
      if (this.defn instanceof PreparedCubeQueryDefinition)       bindingList.addAll(((PreparedCubeQueryDefinition)this.defn).getBindingsForNestAggregation());
      if (existAggregationBinding(bindingName,bindingList))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      Set targetDimLevel=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
      if (!targetDimLevel.isEmpty() && targetDimLevel.size() == 1) {
        return CubeQueryExecutor.DIMENSION_FILTER;
      }
      if (!filter.updateAggregation()) {
        List derivedBindingNameList=new ArrayList();
        for (int i=0; i < bindingName.size(); i++) {
          IBinding binding=getBinding(bindingName.get(i).toString(),this.defn.getBindings());
          if (binding != null) {
            List temp=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
            if (temp != null && temp.size() > 0)             derivedBindingNameList.addAll(temp);
          }
        }
        if (derivedBindingNameList.size() > 0) {
          if (existAggregationBinding(derivedBindingNameList,this.defn.getBindings()))           return CubeQueryExecutor.AGGR_MEASURE_FILTER;
        }
      }
      List derivedBindingNameList=new ArrayList();
      for (int i=0; i < bindingName.size(); i++) {
        IBinding binding=getBinding(bindingName.get(i).toString(),this.defn.getBindings());
        if (binding != null) {
          List temp=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
          if (temp != null && temp.size() > 0)           derivedBindingNameList.addAll(temp);
        }
      }
      if (derivedBindingNameList.size() > 0) {
        if (existAggregationBinding(derivedBindingNameList,this.defn.getBindings()))         return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      }
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}","public int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1 && filter.updateAggregation())       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      List bindingList=new ArrayList();
      bindingList.addAll(this.defn.getBindings());
      List nestedCubeOperation=new ArrayList();
      if (this.defn instanceof PreparedCubeQueryDefinition) {
        nestedCubeOperation.addAll(((PreparedCubeQueryDefinition)this.defn).getBindingsForNestAggregation());
      }
      if (existAggregationBinding(bindingName,bindingList))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      if (existAggregationBinding(bindingName,nestedCubeOperation))       return CubeQueryExecutor.AGGR_OPERATION_FILTER;
      Set targetDimLevel=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
      if (!targetDimLevel.isEmpty() && targetDimLevel.size() == 1) {
        return CubeQueryExecutor.DIMENSION_FILTER;
      }
      if (!filter.updateAggregation()) {
        List derivedBindingNameList=new ArrayList();
        for (int i=0; i < bindingName.size(); i++) {
          IBinding binding=getBinding(bindingName.get(i).toString(),this.defn.getBindings());
          if (binding != null) {
            List temp=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
            if (temp != null && temp.size() > 0)             derivedBindingNameList.addAll(temp);
          }
        }
        if (derivedBindingNameList.size() > 0) {
          if (existAggregationBinding(derivedBindingNameList,this.defn.getBindings()))           return CubeQueryExecutor.AGGR_MEASURE_FILTER;
        }
      }
      List derivedBindingNameList=new ArrayList();
      for (int i=0; i < bindingName.size(); i++) {
        IBinding binding=getBinding(bindingName.get(i).toString(),this.defn.getBindings());
        if (binding != null) {
          List temp=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
          if (temp != null && temp.size() > 0)           derivedBindingNameList.addAll(temp);
        }
      }
      if (derivedBindingNameList.size() > 0) {
        if (existAggregationBinding(derivedBindingNameList,this.defn.getBindings()))         return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      }
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}",0.9717916137229988
65546,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] cube_Aggregation=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (cube_Aggregation == null || cube_Aggregation.length == 0)   return null;
  AggregationDefinition[] drilled_aggregation=DrillFilterHelper.preparedDrillAggregation(executor.getCubeQueryDefinition(),cube_Aggregation);
  int size=cube_Aggregation.length + drilled_aggregation.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drilled_aggregation.length > 0) {
    System.arraycopy(cube_Aggregation,0,finalAggregation,0,cube_Aggregation.length);
    System.arraycopy(drilled_aggregation,0,finalAggregation,cube_Aggregation.length,drilled_aggregation.length);
  }
 else {
    finalAggregation=cube_Aggregation;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setCubeQueryExecutor(executor);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setAppContext(view.getAppContext());
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(executor.getCubeQueryDefinition().getQueryResultsID()),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher,false);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] cube_Aggregation=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (cube_Aggregation == null || cube_Aggregation.length == 0)   return null;
  AggregationDefinition[] drilled_aggregation=DrillFilterHelper.preparedDrillAggregation(executor.getCubeQueryDefinition(),cube_Aggregation);
  int size=cube_Aggregation.length + drilled_aggregation.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drilled_aggregation.length > 0) {
    System.arraycopy(cube_Aggregation,0,finalAggregation,0,cube_Aggregation.length);
    System.arraycopy(drilled_aggregation,0,finalAggregation,cube_Aggregation.length,drilled_aggregation.length);
  }
 else {
    finalAggregation=cube_Aggregation;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setCubeQueryExecutor(executor);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setAppContext(view.getAppContext());
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(executor.getCubeQueryDefinition().getQueryResultsID()),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyFilterOnOperation(view,stopSign,executor,finalAggregation,rs);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyFilterOnOperation(view,stopSign,executor,finalAggregation,rs);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher,false);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9881694644284572
65547,"private IAggregationResultSet[] executeQuery(BirtCubeView view,AggregationDefinition[] aggrDefns,boolean saveToRD,String queryResutID,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,view.getCube(),fetcher,false);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  validateLimitSetting(view,rs);
  if (executor.getCubeQueryDefinition().cacheQueryResults()) {
    File tmpDir=new File(executor.getSession().getTempDir());
    if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
      FileSecurity.fileMakeDirs(tmpDir);
    }
    ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
    AggregationResultSetSaveUtil.save(queryResutID,rs,writer);
    writer.finish();
  }
  if (saveToRD) {
    CubeQueryDefinitionIOUtil.save(queryResutID,executor.getContext(),executor.getCubeQueryDefinition());
    AggregationResultSetSaveUtil.save(queryResutID,rs,executor.getContext().getDocWriter());
  }
  return rs;
}","private IAggregationResultSet[] executeQuery(BirtCubeView view,AggregationDefinition[] aggrDefns,boolean saveToRD,String queryResutID,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
  rs=applyFilterOnOperation(view,executor.getSession().getStopSign(),executor,aggrDefns,rs);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,view.getCube(),fetcher,false);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  validateLimitSetting(view,rs);
  if (executor.getCubeQueryDefinition().cacheQueryResults()) {
    File tmpDir=new File(executor.getSession().getTempDir());
    if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
      FileSecurity.fileMakeDirs(tmpDir);
    }
    ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
    AggregationResultSetSaveUtil.save(queryResutID,rs,writer);
    writer.finish();
  }
  if (saveToRD) {
    CubeQueryDefinitionIOUtil.save(queryResutID,executor.getContext(),executor.getCubeQueryDefinition());
    AggregationResultSetSaveUtil.save(queryResutID,rs,executor.getContext().getDocWriter());
  }
  return rs;
}",0.967311072056239
65548,"protected void loadReportVariable(){
  PageHintReader hintsReader=null;
  try {
    hintsReader=new PageHintReader(reportDocReader);
    Collection<PageVariable> vars=hintsReader.getPageVariables();
    if (vars != null) {
      executionContext.addPageVariables(vars);
    }
  }
 catch (  IOException ex) {
    executionContext.addException(new EngineException(MessageConstants.PAGE_HINT_LOADING_ERROR,ex));
  }
 finally {
    if (hintsReader != null) {
      hintsReader.close();
    }
  }
}","protected void loadReportVariable(){
  PageHintReader hintsReader=null;
  try {
    hintsReader=new PageHintReader(reportDocReader);
    Collection<PageVariable> vars=hintsReader.getPageVariables();
    if (vars != null && !vars.isEmpty()) {
      executionContext.addPageVariables(vars);
    }
    IPageHint pageHint=hintsReader.getPageHint(1);
    if (pageHint != null) {
      Collection<PageVariable> pageVariables=pageHint.getPageVariables();
      if (pageVariables != null && !pageVariables.isEmpty()) {
        executionContext.addPageVariables(pageVariables);
      }
    }
  }
 catch (  IOException ex) {
    executionContext.addException(new EngineException(MessageConstants.PAGE_HINT_LOADING_ERROR,ex));
  }
 finally {
    if (hintsReader != null) {
      hintsReader.close();
    }
  }
}",0.7625676720804331
65549,"protected void writeToc(IContent content,boolean middleInline){
  if (content != null) {
    Object tocObj=content.getTOC();
    if (tocObj != null) {
      String toc=tocObj.toString();
      toc=toc.trim();
      if (!""String_Node_Str"".equals(toc)) {
        wordWriter.writeTOC(toc,tocLevel,middleInline);
      }
    }
  }
}","protected void writeToc(IContent content,boolean middleInline){
  if (content != null) {
    Object tocObj=content.getTOC();
    if (tocObj != null) {
      String toc=tocObj.toString();
      String rgbcolor=content.getStyle().getBackgroundColor();
      String color=EmitterUtil.parseColor(rgbcolor);
      toc=toc.trim();
      if (!""String_Node_Str"".equals(toc)) {
        wordWriter.writeTOC(toc,color,tocLevel,middleInline);
      }
    }
  }
}",0.8431876606683805
65550,"void writeTOC(String toc,int tocLevel,boolean middleInline);","void writeTOC(String toc,String color,int tocLevel,boolean middleInline);",0.9022556390977444
65551,"public void writeTOC(String tocText,int level,boolean middleInline){
  if (!middleInline) {
    writer.openTag(""String_Node_Str"");
  }
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",bookmarkId);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + tocText);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",bookmarkId++);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writeField(true);
  writeTocText(tocText,level);
  writeField(false);
  if (!middleInline) {
    writer.closeTag(""String_Node_Str"");
  }
}","public void writeTOC(String tocText,String color,int level,boolean middleInline){
  if (!middleInline) {
    writer.openTag(""String_Node_Str"");
  }
  if (color != null || !color.isEmpty()) {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.attribute(""String_Node_Str"",color);
    writer.closeTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
 else {
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",bookmarkId);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + tocText);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",bookmarkId++);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writeField(true);
  writeTocText(tocText,level);
  writeField(false);
  if (!middleInline) {
    writer.closeTag(""String_Node_Str"");
  }
}",0.6366723259762309
65552,"private static boolean isStandAloneQuery(ICubeQueryDefinition cubeQuery,DataEngineContext context){
  if (cubeQuery.getQueryResultsID() != null && context.getMode() == DataEngineContext.MODE_PRESENTATION) {
    List filters=cubeQuery.getFilters();
    if (filters != null && filters.size() > 0) {
      for (int i=0; i < filters.size(); i++) {
        IFilterDefinition def=(IFilterDefinition)filters.get(i);
        if (!def.updateAggregation())         return false;
      }
    }
    return true;
  }
  return false;
}","private static boolean isStandAloneQuery(ICubeQueryDefinition cubeQuery,DataEngineContext context){
  if (cubeQuery.getQueryResultsID() != null && context.getMode() == DataEngineContext.MODE_PRESENTATION) {
    return true;
  }
  return false;
}",0.5639686684073107
65553,"/** 
 * Get result set column name collection from column binding map
 * @param cacheRequestMap
 * @return
 * @throws DataException
 */
public static Set getRsColumnRequestMap(List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=new HashSet();
  if (cacheRequestMap != null) {
    Iterator<IBinding> iter=cacheRequestMap.iterator();
    List<String> dataSetColumnList=null;
    while (iter.hasNext()) {
      IBinding binding=iter.next();
      dataSetColumnList=null;
      if (binding != null) {
        if (binding.getExpression() != null)         dataSetColumnList=ExpressionCompilerUtil.extractDataSetColumnExpression(binding.getExpression());
 else         dataSetColumnList=ExpressionCompilerUtil.extractDataSetColumnExpression(getArgumentExpression(binding));
      }
      if (dataSetColumnList != null) {
        resultSetNameSet.addAll(dataSetColumnList);
      }
    }
  }
  return resultSetNameSet;
}","/** 
 * Get result set column name collection from column binding map
 * @param cacheRequestMap
 * @return
 * @throws DataException
 */
public static Set getRsColumnRequestMap(List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=new HashSet();
  if (cacheRequestMap != null) {
    Iterator<IBinding> iter=cacheRequestMap.iterator();
    List<String> dataSetColumnList=null;
    while (iter.hasNext()) {
      IBinding binding=iter.next();
      dataSetColumnList=null;
      if (binding != null) {
        if (binding.getExpression() != null) {
          dataSetColumnList=ExpressionCompilerUtil.extractDataSetColumnExpression(binding.getExpression());
          if (binding.getExpression() instanceof IPushedDownExpression) {
            dataSetColumnList.addAll(ExpressionCompilerUtil.extractDataSetColumnExpression(((IPushedDownExpression)binding.getExpression()).getOriginalExpression()));
          }
        }
 else         dataSetColumnList=ExpressionCompilerUtil.extractDataSetColumnExpression(getArgumentExpression(binding));
      }
      if (dataSetColumnList != null) {
        resultSetNameSet.addAll(dataSetColumnList);
      }
    }
  }
  return resultSetNameSet;
}",0.8754083061129259
65554,"private void initParameters(){
  if (allParameters == null) {
    allParameters=new ArrayList();
    IReportRunnable runnable;
    try {
      runnable=engine.openReportDesign(reportDesignFile);
      List list=runnable.getDesignHandle().getRoot().getParametersAndParameterGroups();
      initAllParameters(allParameters,list);
    }
 catch (    EngineException e) {
    }
  }
  Properties propertys=System.getProperties();
  Iterator itor=propertys.keySet().iterator();
  while (itor.hasNext()) {
    String str=(String)itor.next();
    if (str.startsWith(ATTR_PARAMRTER)) {
      addParameter(paramValues,str,propertys.getProperty(str));
    }
 else     if (str.startsWith(ATTR_MULPARAMRTER + ""String_Node_Str"")) {
      addMulitipleParameter(paramValues,str,propertys.getProperty(str));
    }
  }
}","private void initParameters(){
  if (getFileName().endsWith(""String_Node_Str"" + RPTDOC_SUFFIX) || getFileName().endsWith(""String_Node_Str"" + RPTDOC_SUFFIXA)) {
    return;
  }
  if (allParameters == null) {
    allParameters=new ArrayList();
    IReportRunnable runnable;
    try {
      runnable=engine.openReportDesign(reportDesignFile);
      List list=runnable.getDesignHandle().getRoot().getParametersAndParameterGroups();
      initAllParameters(allParameters,list);
    }
 catch (    EngineException e) {
    }
  }
  Properties propertys=System.getProperties();
  Iterator itor=propertys.keySet().iterator();
  while (itor.hasNext()) {
    String str=(String)itor.next();
    if (str.startsWith(ATTR_PARAMRTER)) {
      addParameter(paramValues,str,propertys.getProperty(str));
    }
 else     if (str.startsWith(ATTR_MULPARAMRTER + ""String_Node_Str"")) {
      addMulitipleParameter(paramValues,str,propertys.getProperty(str));
    }
  }
}",0.9170005724098454
65555,"protected void dropSource(Object source) throws SemanticException {
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    for (int i=0; i < array.length; i++) {
      dropSource(array[i]);
    }
  }
 else   if (source instanceof StructuredSelection) {
    dropSource(((StructuredSelection)source).toArray());
  }
 else   if (source instanceof DesignElementHandle) {
    dropSourceElementHandle((DesignElementHandle)source);
  }
 else   if (source instanceof EmbeddedImageHandle) {
    dropEmbeddedImageHandle((EmbeddedImageHandle)(source));
  }
 else   if (source instanceof SlotHandle) {
    dropSourceSlotHandle((SlotHandle)source);
  }
 else   if (source instanceof CssStyleSheetHandle) {
    dropCssStyleHandle((CssStyleSheetHandle)source);
  }
}","protected void dropSource(Object source) throws SemanticException {
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    for (int i=0; i < array.length; i++) {
      dropSource(array[i]);
    }
  }
 else   if (source instanceof StructuredSelection) {
    dropSource(((StructuredSelection)source).toArray());
  }
 else   if (source instanceof DesignElementHandle) {
    dropSourceElementHandle((DesignElementHandle)source);
  }
 else   if (source instanceof EmbeddedImageHandle) {
    dropEmbeddedImageHandle((EmbeddedImageHandle)(source));
  }
 else   if (source instanceof SlotHandle) {
    dropSourceSlotHandle((SlotHandle)source);
  }
 else   if (source instanceof CssStyleSheetHandle) {
    dropCssStyleHandle((CssStyleSheetHandle)source);
  }
 else   if (source instanceof ScriptObjectNode) {
    ((ScriptObjectNode)source).reset();
  }
}",0.9453488372093024
65556,"/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return false;
  }
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (array[i] instanceof MasterPageHandle) {
        int masterPageCount=SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount();
        for (int j=0; j < array.length; j++) {
          if (array[j] instanceof MasterPageHandle)           masterPageCount--;
        }
        if (masterPageCount == 0)         return false;
      }
      if (!canDrop(array[i]))       return false;
    }
    return true;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && handle != null && handle.canDrop() && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof ExtendedItemHandle) {
    Object dropValidator=Platform.getAdapterManager().getAdapter((ExtendedItemHandle)source,DeleteCommand.class);
    if (dropValidator instanceof IDropValidator && ((IDropValidator)dropValidator).accpetValidator())     return ((IDropValidator)dropValidator).canDrop();
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ModuleHandle) {
    return false;
  }
 else   if (source instanceof DesignElementHandle) {
    return ((DesignElementHandle)source).canDrop();
  }
 else   if (source instanceof LibraryHandle) {
    if (((LibraryHandle)source).getHostHandle() != null)     return true;
 else     return false;
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof AbstractThemeHandle) {
      return ((AbstractThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   return false;
}","/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return false;
  }
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (array[i] instanceof MasterPageHandle) {
        int masterPageCount=SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount();
        for (int j=0; j < array.length; j++) {
          if (array[j] instanceof MasterPageHandle)           masterPageCount--;
        }
        if (masterPageCount == 0)         return false;
      }
      if (!canDrop(array[i]))       return false;
    }
    return true;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && handle != null && handle.canDrop() && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof ExtendedItemHandle) {
    Object dropValidator=Platform.getAdapterManager().getAdapter((ExtendedItemHandle)source,DeleteCommand.class);
    if (dropValidator instanceof IDropValidator && ((IDropValidator)dropValidator).accpetValidator())     return ((IDropValidator)dropValidator).canDrop();
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ModuleHandle) {
    return false;
  }
 else   if (source instanceof DesignElementHandle) {
    return ((DesignElementHandle)source).canDrop();
  }
 else   if (source instanceof LibraryHandle) {
    if (((LibraryHandle)source).getHostHandle() != null)     return true;
 else     return false;
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof AbstractThemeHandle) {
      return ((AbstractThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   if (source instanceof ScriptObjectNode) {
    return true;
  }
 else   return false;
}",0.9841928788120708
65557,"protected Control createInputContents(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  content.setLayout(GridLayoutFactory.swtDefaults().numColumns(3).create());
  new Label(content,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  Composite typeChoices=new Composite(content,SWT.NONE);
  typeChoices.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  reportRadio=new Button(typeChoices,SWT.RADIO);
  reportRadio.setText(Messages.getString(""String_Node_Str""));
  pageRadio=new Button(typeChoices,SWT.RADIO);
  pageRadio.setText(Messages.getString(""String_Node_Str""));
  new Label(content,SWT.NONE);
  new Label(content,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  nameTxt=new Text(content,SWT.BORDER);
  nameTxt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validate();
    }
  }
);
  new Label(content,SWT.NONE);
  new Label(content,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  expressionTxt=new Text(content,SWT.BORDER | SWT.WRAP);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=expressionTxt.computeSize(SWT.DEFAULT,SWT.DEFAULT).y - expressionTxt.getBorderWidth() * 2;
  expressionTxt.setLayoutData(gd);
  ExpressionButtonUtil.createExpressionButton(content,expressionTxt,this.getExpressionProvider(),variable);
  UIUtil.bindHelp(parent,IHelpContextIds.VARIABLE_DIALOG_ID);
  return content;
}","protected Control createInputContents(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  content.setLayout(GridLayoutFactory.swtDefaults().numColumns(3).create());
  new Label(content,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  Composite typeChoices=new Composite(content,SWT.NONE);
  typeChoices.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  reportRadio=new Button(typeChoices,SWT.RADIO);
  reportRadio.setText(Messages.getString(""String_Node_Str""));
  pageRadio=new Button(typeChoices,SWT.RADIO);
  pageRadio.setText(Messages.getString(""String_Node_Str""));
  new Label(content,SWT.NONE);
  new Label(content,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  nameTxt=new Text(content,SWT.BORDER);
  nameTxt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validate();
    }
  }
);
  new Label(content,SWT.NONE);
  new Label(content,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  expressionTxt=new Text(content,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=expressionTxt.computeSize(SWT.DEFAULT,SWT.DEFAULT).y - expressionTxt.getBorderWidth() * 2;
  expressionTxt.setLayoutData(gd);
  ExpressionButtonUtil.createExpressionButton(content,expressionTxt,this.getExpressionProvider(),variable);
  UIUtil.bindHelp(parent,IHelpContextIds.VARIABLE_DIALOG_ID);
  return content;
}",0.996488988190233
65558,"public boolean reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null || !getCurrentPageInstance().getId().equals(XMLSourcePage_ID)) {
    return false;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage || outlinePage.getCurrentPage() == null) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  if (outlinePage.getSite() != null) {
    outlinePage.getSite().getActionBars().updateActionBars();
  }
  return true;
}","public boolean reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null || !getCurrentPageInstance().getId().equals(XMLSourcePage_ID)) {
    return false;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage || outlinePage.getCurrentPage() == null || outlinePage.getCurrentPage() instanceof EmptyPage) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  if (outlinePage.getSite() != null) {
    outlinePage.getSite().getActionBars().updateActionBars();
  }
  return true;
}",0.9625441696113074
65559,"public ModuleHandle getReportModuleHandle(Object element,boolean reset){
  if (model == null || reset) {
    IEditorInput input=(IEditorInput)element;
    IPath path=getInputPath(input);
    if (path != null) {
      String fileName=path.toOSString();
      try {
        Map properties=new HashMap();
        String designerVersion=MessageFormat.format(VERSION_MESSAGE,new String[]{ReportPlugin.getVersion(),ReportPlugin.getBuildInfo()});
        properties.put(IModuleModel.CREATED_BY_PROP,designerVersion);
        properties.put(IModuleOption.CREATED_BY_KEY,designerVersion);
        String projectFolder=getProjectFolder(input);
        if (projectFolder != null) {
          properties.put(IModuleOption.RESOURCE_FOLDER_KEY,projectFolder);
        }
        model=SessionHandleAdapter.getInstance().init(fileName,new FileInputStream(path.toFile()),properties);
      }
 catch (      DesignFileException e) {
        ExceptionHandler.handle(e,true);
      }
catch (      IOException e) {
        ExceptionHandler.handle(e,true);
      }
    }
  }
  return model;
}","public ModuleHandle getReportModuleHandle(Object element,boolean reset){
  if (model == null || reset) {
    IEditorInput input=(IEditorInput)element;
    IPath path=getInputPath(input);
    if (path != null) {
      String fileName=path.toOSString();
      try {
        Map properties=new HashMap();
        String designerVersion=MessageFormat.format(VERSION_MESSAGE,new String[]{ReportPlugin.getVersion(),ReportPlugin.getBuildInfo()});
        properties.put(IModuleModel.CREATED_BY_PROP,designerVersion);
        properties.put(IModuleOption.CREATED_BY_KEY,designerVersion);
        if (fileName.endsWith(""String_Node_Str"" + IReportElementConstants.TEMPLATE_FILE_EXTENSION)) {
          properties.put(IModuleOption.PARSER_SEMANTIC_CHECK_KEY,false);
        }
        String projectFolder=getProjectFolder(input);
        if (projectFolder != null) {
          properties.put(IModuleOption.RESOURCE_FOLDER_KEY,projectFolder);
        }
        model=SessionHandleAdapter.getInstance().init(fileName,new FileInputStream(path.toFile()),properties);
      }
 catch (      DesignFileException e) {
        ExceptionHandler.handle(e,true);
      }
catch (      IOException e) {
        ExceptionHandler.handle(e,true);
      }
    }
  }
  return model;
}",0.9203616013775292
65560,"private void initMeasureDialog(){
  typeCombo.setItems(getDataTypeDisplayNames());
  functionCombo.setItems(getFunctionDisplayNames());
  if (!isEdit) {
    if (typeCombo.getItemCount() > 0) {
      typeCombo.select(0);
    }
    if (functionCombo.getItemCount() > 0) {
      functionCombo.select(0);
    }
    handleFunctionSelectEvent();
  }
 else {
    try {
      functionCombo.setText(getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(input.getFunction())) == null ? ""String_Node_Str"" : getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(input.getFunction())));
    }
 catch (    AdapterException e) {
      ExceptionUtil.handle(e);
    }
    ExpressionButtonUtil.initExpressionButtonControl(expressionText,input,MeasureHandle.MEASURE_EXPRESSION_PROP);
    nameText.setText(input.getName() == null ? ""String_Node_Str"" : input.getName());
    handleFunctionSelectEvent();
    typeCombo.setText(getDataTypeDisplayName(input.getDataType()) == null ? ""String_Node_Str"" : getDataTypeDisplayName(input.getDataType()));
    derivedMeasureBtn.setSelection(input.isCalculated());
    updateDerivedMeasureStatus();
  }
  if (formatHelper != null) {
    if (typeCombo.getSelectionIndex() > -1) {
      formatHelper.setProperty(BuilderConstants.FORMAT_VALUE_TYPE,getDataTypeNames()[typeCombo.getSelectionIndex()]);
    }
    formatHelper.update(true);
  }
  if (alignmentHelper != null) {
    if (input.getAlignment() != null) {
      alignmentHelper.setProperty(BuilderConstants.ALIGNMENT_VALUE,input.getAlignment());
    }
 else     if (!isEdit && input.getDataType() != null) {
      if (isNumber(input.getDataType())) {
        alignmentHelper.setProperty(BuilderConstants.ALIGNMENT_VALUE,DesignChoiceConstants.TEXT_ALIGN_RIGHT);
      }
 else {
        alignmentHelper.setProperty(BuilderConstants.ALIGNMENT_VALUE,DesignChoiceConstants.TEXT_ALIGN_LEFT);
      }
    }
    alignmentHelper.update(true);
  }
}","private void initMeasureDialog(){
  typeCombo.setItems(getDataTypeDisplayNames());
  functionCombo.setItems(getFunctionDisplayNames());
  if (!isEdit) {
    if (typeCombo.getItemCount() > 0) {
      typeCombo.select(0);
    }
    if (functionCombo.getItemCount() > 0) {
      functionCombo.select(0);
    }
    handleFunctionSelectEvent();
  }
 else {
    try {
      functionCombo.setText(getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(input.getFunction())) == null ? ""String_Node_Str"" : getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(input.getFunction())));
    }
 catch (    AdapterException e) {
      ExceptionUtil.handle(e);
    }
    ExpressionButtonUtil.initExpressionButtonControl(expressionText,input,MeasureHandle.MEASURE_EXPRESSION_PROP);
    nameText.setText(input.getName() == null ? ""String_Node_Str"" : input.getName());
    displayNameText.setText(input.getDisplayName() == null ? ""String_Node_Str"" : input.getDisplayName());
    handleFunctionSelectEvent();
    typeCombo.setText(getDataTypeDisplayName(input.getDataType()) == null ? ""String_Node_Str"" : getDataTypeDisplayName(input.getDataType()));
    derivedMeasureBtn.setSelection(input.isCalculated());
    updateDerivedMeasureStatus();
  }
  if (formatHelper != null) {
    if (typeCombo.getSelectionIndex() > -1) {
      formatHelper.setProperty(BuilderConstants.FORMAT_VALUE_TYPE,getDataTypeNames()[typeCombo.getSelectionIndex()]);
    }
    formatHelper.update(true);
  }
  if (alignmentHelper != null) {
    if (input.getAlignment() != null) {
      alignmentHelper.setProperty(BuilderConstants.ALIGNMENT_VALUE,input.getAlignment());
    }
 else     if (!isEdit && input.getDataType() != null) {
      if (isNumber(input.getDataType())) {
        alignmentHelper.setProperty(BuilderConstants.ALIGNMENT_VALUE,DesignChoiceConstants.TEXT_ALIGN_RIGHT);
      }
 else {
        alignmentHelper.setProperty(BuilderConstants.ALIGNMENT_VALUE,DesignChoiceConstants.TEXT_ALIGN_LEFT);
      }
    }
    alignmentHelper.update(true);
  }
}",0.973326623049824
65561,"private Composite createMeasureArea(Composite parent){
  getShell().setText(Messages.getString(""String_Node_Str""));
  Group group=new Group(parent,SWT.NONE);
  GridData gd=new GridData();
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalAlignment=SWT.FILL;
  group.setLayoutData(gd);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  group.setLayout(layout);
  Label nameLabel=new Label(group,SWT.NONE);
  nameLabel.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(group,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  nameText.setLayoutData(gd);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkOkButtonStatus();
    }
  }
);
  new Label(group,SWT.NONE);
  derivedMeasureBtn=new Button(group,SWT.CHECK);
  derivedMeasureBtn.setText(Messages.getString(""String_Node_Str""));
  derivedMeasureBtn.setSelection(input.isCalculated());
  derivedMeasureBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateDerivedMeasureStatus();
      if (!derivedMeasureBtn.getSelection()) {
        handleTypeSelectEvent();
      }
    }
  }
);
  new Label(group,SWT.NONE);
  Label functionLabel=new Label(group,SWT.NONE);
  functionLabel.setText(Messages.getString(""String_Node_Str""));
  functionCombo=new Combo(group,SWT.BORDER | SWT.READ_ONLY);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  functionCombo.setLayoutData(gd);
  functionCombo.setVisibleItemCount(30);
  functionCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      checkOkButtonStatus();
    }
  }
);
  functionCombo.setEnabled(!(derivedMeasureBtn.getSelection() || isAutoPrimaryKeyChecked));
  Label typeLabel=new Label(group,SWT.NONE);
  typeLabel.setText(Messages.getString(""String_Node_Str""));
  typeCombo=new Combo(group,SWT.BORDER | SWT.READ_ONLY);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  typeCombo.setLayoutData(gd);
  typeCombo.setVisibleItemCount(30);
  typeCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (!derivedMeasureBtn.getSelection()) {
        handleTypeSelectEvent();
      }
      checkOkButtonStatus();
      if (formatHelper != null) {
        if (typeCombo.getSelectionIndex() > -1)         formatHelper.setProperty(BuilderConstants.FORMAT_VALUE_TYPE,getDataTypeNames()[typeCombo.getSelectionIndex()]);
        formatHelper.update(true);
      }
    }
  }
);
  Label expressionLabel=new Label(group,SWT.NONE);
  expressionLabel.setText(Messages.getString(""String_Node_Str""));
  expressionText=new Text(group,SWT.WRAP | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=expressionText.computeSize(SWT.DEFAULT,SWT.DEFAULT).y - expressionText.getBorderWidth() * 2;
  expressionText.setLayoutData(gd);
  expressionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkOkButtonStatus();
    }
  }
);
  provider=new CubeMeasureExpressionProvider(input,input.isCalculated());
  exprBtn=ExpressionButtonUtil.createExpressionButton(group,expressionText,provider,input);
  new Label(group,SWT.NONE);
  exprDesc=new Label(group,SWT.NONE);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  gd.grabExcessHorizontalSpace=true;
  exprDesc.setLayoutData(gd);
  exprDesc.setText(Messages.getString(Messages.getString(derivedMeasureBtn.getSelection() ? ""String_Node_Str"" : ""String_Node_Str"")));
  exprDesc.setForeground(ColorManager.getColor(128,128,128));
  createSecurityPart(group);
  createHyperLinkPart(group);
  createFormatPart(group);
  createAlignmentPart(group);
  return group;
}","private Composite createMeasureArea(Composite parent){
  getShell().setText(Messages.getString(""String_Node_Str""));
  Group group=new Group(parent,SWT.NONE);
  GridData gd=new GridData();
  gd.grabExcessHorizontalSpace=true;
  gd.horizontalAlignment=SWT.FILL;
  group.setLayoutData(gd);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  group.setLayout(layout);
  Label nameLabel=new Label(group,SWT.NONE);
  nameLabel.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(group,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  nameText.setLayoutData(gd);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkOkButtonStatus();
    }
  }
);
  Label displayNameLabel=new Label(group,SWT.NONE);
  displayNameLabel.setText(Messages.getString(""String_Node_Str""));
  displayNameText=new Text(group,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  displayNameText.setLayoutData(gd);
  displayNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkOkButtonStatus();
    }
  }
);
  new Label(group,SWT.NONE);
  derivedMeasureBtn=new Button(group,SWT.CHECK);
  derivedMeasureBtn.setText(Messages.getString(""String_Node_Str""));
  derivedMeasureBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateDerivedMeasureStatus();
      if (!derivedMeasureBtn.getSelection()) {
        handleTypeSelectEvent();
      }
    }
  }
);
  new Label(group,SWT.NONE);
  Label functionLabel=new Label(group,SWT.NONE);
  functionLabel.setText(Messages.getString(""String_Node_Str""));
  functionCombo=new Combo(group,SWT.BORDER | SWT.READ_ONLY);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  functionCombo.setLayoutData(gd);
  functionCombo.setVisibleItemCount(30);
  functionCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      checkOkButtonStatus();
    }
  }
);
  functionCombo.setEnabled(!(derivedMeasureBtn.getSelection() || isAutoPrimaryKeyChecked));
  Label typeLabel=new Label(group,SWT.NONE);
  typeLabel.setText(Messages.getString(""String_Node_Str""));
  typeCombo=new Combo(group,SWT.BORDER | SWT.READ_ONLY);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  typeCombo.setLayoutData(gd);
  typeCombo.setVisibleItemCount(30);
  typeCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (!derivedMeasureBtn.getSelection()) {
        handleTypeSelectEvent();
      }
      checkOkButtonStatus();
      if (formatHelper != null) {
        if (typeCombo.getSelectionIndex() > -1)         formatHelper.setProperty(BuilderConstants.FORMAT_VALUE_TYPE,getDataTypeNames()[typeCombo.getSelectionIndex()]);
        formatHelper.update(true);
      }
    }
  }
);
  Label expressionLabel=new Label(group,SWT.NONE);
  expressionLabel.setText(Messages.getString(""String_Node_Str""));
  expressionText=new Text(group,SWT.WRAP | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  expressionText.setLayoutData(gd);
  expressionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkOkButtonStatus();
    }
  }
);
  provider=new CubeMeasureExpressionProvider(input,input.isCalculated());
  ExpressionButtonUtil.createExpressionButton(group,expressionText,provider,input);
  new Label(group,SWT.NONE);
  exprDesc=new Label(group,SWT.NONE);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  gd.grabExcessHorizontalSpace=true;
  exprDesc.setLayoutData(gd);
  exprDesc.setText(Messages.getString(Messages.getString(derivedMeasureBtn.getSelection() ? ""String_Node_Str"" : ""String_Node_Str"")));
  exprDesc.setForeground(ColorManager.getColor(128,128,128));
  createSecurityPart(group);
  createHyperLinkPart(group);
  createFormatPart(group);
  createAlignmentPart(group);
  return group;
}",0.5474987367357251
65562,"protected void okPressed(){
  try {
    if (!isEdit) {
      TabularMeasureHandle measure;
      if (input == null)       measure=DesignElementFactory.getInstance().newTabularMeasure(nameText.getText());
 else {
        measure=input;
        input.setName(nameText.getText());
      }
      measure.setCalculated(derivedMeasureBtn.getSelection());
      measure.setFunction(getFunctions()[functionCombo.getSelectionIndex()].getName());
      measure.setDataType(getDataTypeNames()[typeCombo.getSelectionIndex()]);
      if (expressionText.isEnabled()) {
        ExpressionButtonUtil.saveExpressionButtonControl(expressionText,measure,MeasureHandle.MEASURE_EXPRESSION_PROP);
      }
      if (securityHelper != null) {
        securityHelper.validate();
        measure.setExpressionProperty(MeasureHandle.ACL_EXPRESSION_PROP,(Expression)securityHelper.getProperty(BuilderConstants.SECURITY_EXPRESSION_PROPERTY));
      }
      if (alignmentHelper != null) {
        measure.setAlignment((String)alignmentHelper.getProperty(BuilderConstants.ALIGNMENT_VALUE));
      }
      if (formatHelper != null && formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT) instanceof Object[]) {
        Object[] formatValue=(Object[])formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT);
        Object value=measure.getProperty(Measure.FORMAT_PROP);
        if (value == null) {
          FormatValue formatValueToSet=new FormatValue();
          formatValueToSet.setCategory((String)formatValue[0]);
          formatValueToSet.setPattern((String)formatValue[1]);
          formatValueToSet.setLocale((ULocale)formatValue[2]);
          measure.setProperty(Measure.FORMAT_PROP,formatValueToSet);
        }
 else {
          PropertyHandle propHandle=measure.getPropertyHandle(Measure.FORMAT_PROP);
          FormatValue formatValueToSet=(FormatValue)value;
          FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
          formatHandle.setCategory((String)formatValue[0]);
          formatHandle.setPattern((String)formatValue[1]);
          formatHandle.setLocale((ULocale)formatValue[2]);
        }
      }
      measure.setVisible(!visibilityBtn.getSelection());
      result=measure;
    }
 else {
      input.setName(nameText.getText());
      input.setCalculated(derivedMeasureBtn.getSelection());
      input.setFunction(getFunctions()[functionCombo.getSelectionIndex()].getName());
      input.setDataType(getDataTypeNames()[typeCombo.getSelectionIndex()]);
      if (expressionText.isEnabled()) {
        ExpressionButtonUtil.saveExpressionButtonControl(expressionText,input,MeasureHandle.MEASURE_EXPRESSION_PROP);
      }
 else       input.setMeasureExpression(null);
      if (securityHelper != null) {
        securityHelper.validate();
        input.setExpressionProperty(MeasureHandle.ACL_EXPRESSION_PROP,(Expression)securityHelper.getProperty(BuilderConstants.SECURITY_EXPRESSION_PROPERTY));
      }
      if (alignmentHelper != null) {
        input.setAlignment((String)alignmentHelper.getProperty(BuilderConstants.ALIGNMENT_VALUE));
      }
      if (formatHelper != null && formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT) instanceof Object[]) {
        Object[] formatValue=(Object[])formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT);
        Object value=input.getProperty(Measure.FORMAT_PROP);
        if (value == null) {
          FormatValue formatValueToSet=new FormatValue();
          formatValueToSet.setCategory((String)formatValue[0]);
          formatValueToSet.setPattern((String)formatValue[1]);
          formatValueToSet.setLocale((ULocale)formatValue[2]);
          input.setProperty(Measure.FORMAT_PROP,formatValueToSet);
        }
 else {
          PropertyHandle propHandle=input.getPropertyHandle(Measure.FORMAT_PROP);
          FormatValue formatValueToSet=(FormatValue)value;
          FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
          formatHandle.setCategory((String)formatValue[0]);
          formatHandle.setPattern((String)formatValue[1]);
          formatHandle.setLocale((ULocale)formatValue[2]);
        }
      }
      input.setVisible(!visibilityBtn.getSelection());
      result=input;
    }
  }
 catch (  SemanticException e) {
    ExceptionUtil.handle(e);
    return;
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    if (!isEdit) {
      TabularMeasureHandle measure;
      if (input == null) {
        measure=DesignElementFactory.getInstance().newTabularMeasure(nameText.getText());
        if (displayNameText.getText().trim().length() > 0) {
          measure.setDisplayName(displayNameText.getText().trim());
        }
 else {
          measure.setDisplayName(null);
        }
      }
 else {
        measure=input;
        input.setName(nameText.getText());
        if (displayNameText.getText().trim().length() > 0) {
          input.setDisplayName(displayNameText.getText().trim());
        }
 else {
          input.setDisplayName(null);
        }
      }
      measure.setCalculated(derivedMeasureBtn.getSelection());
      if (derivedMeasureBtn.getSelection()) {
        measure.setFunction(null);
      }
 else {
        measure.setFunction(getFunctions()[functionCombo.getSelectionIndex()].getName());
      }
      measure.setDataType(getDataTypeNames()[typeCombo.getSelectionIndex()]);
      if (expressionText.isEnabled()) {
        ExpressionButtonUtil.saveExpressionButtonControl(expressionText,measure,MeasureHandle.MEASURE_EXPRESSION_PROP);
      }
      if (!derivedMeasureBtn.getSelection()) {
        if (securityHelper != null) {
          securityHelper.validate();
          measure.setExpressionProperty(MeasureHandle.ACL_EXPRESSION_PROP,(Expression)securityHelper.getProperty(BuilderConstants.SECURITY_EXPRESSION_PROPERTY));
        }
      }
 else {
        measure.setExpressionProperty(MeasureHandle.ACL_EXPRESSION_PROP,null);
      }
      if (securityHelper != null) {
      }
      if (alignmentHelper != null) {
        measure.setAlignment((String)alignmentHelper.getProperty(BuilderConstants.ALIGNMENT_VALUE));
      }
      if (formatHelper != null && formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT) instanceof Object[]) {
        Object[] formatValue=(Object[])formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT);
        Object value=measure.getProperty(Measure.FORMAT_PROP);
        if (value == null) {
          FormatValue formatValueToSet=new FormatValue();
          formatValueToSet.setCategory((String)formatValue[0]);
          formatValueToSet.setPattern((String)formatValue[1]);
          formatValueToSet.setLocale((ULocale)formatValue[2]);
          measure.setProperty(Measure.FORMAT_PROP,formatValueToSet);
        }
 else {
          PropertyHandle propHandle=measure.getPropertyHandle(Measure.FORMAT_PROP);
          FormatValue formatValueToSet=(FormatValue)value;
          FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
          formatHandle.setCategory((String)formatValue[0]);
          formatHandle.setPattern((String)formatValue[1]);
          formatHandle.setLocale((ULocale)formatValue[2]);
        }
      }
      measure.setVisible(!visibilityBtn.getSelection());
      result=measure;
    }
 else {
      input.setName(nameText.getText());
      if (displayNameText.getText().trim().length() > 0) {
        input.setDisplayName(displayNameText.getText().trim());
      }
 else {
        input.setDisplayName(null);
      }
      input.setCalculated(derivedMeasureBtn.getSelection());
      if (derivedMeasureBtn.getSelection()) {
        input.setFunction(null);
      }
 else {
        input.setFunction(getFunctions()[functionCombo.getSelectionIndex()].getName());
      }
      input.setDataType(getDataTypeNames()[typeCombo.getSelectionIndex()]);
      if (expressionText.isEnabled()) {
        ExpressionButtonUtil.saveExpressionButtonControl(expressionText,input,MeasureHandle.MEASURE_EXPRESSION_PROP);
      }
 else       input.setMeasureExpression(null);
      if (!derivedMeasureBtn.getSelection()) {
        if (securityHelper != null) {
          securityHelper.validate();
          input.setExpressionProperty(MeasureHandle.ACL_EXPRESSION_PROP,(Expression)securityHelper.getProperty(BuilderConstants.SECURITY_EXPRESSION_PROPERTY));
        }
      }
 else {
        input.setExpressionProperty(MeasureHandle.ACL_EXPRESSION_PROP,null);
      }
      if (alignmentHelper != null) {
        input.setAlignment((String)alignmentHelper.getProperty(BuilderConstants.ALIGNMENT_VALUE));
      }
      if (formatHelper != null && formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT) instanceof Object[]) {
        Object[] formatValue=(Object[])formatHelper.getProperty(BuilderConstants.FORMAT_VALUE_RESULT);
        Object value=input.getProperty(Measure.FORMAT_PROP);
        if (value == null) {
          FormatValue formatValueToSet=new FormatValue();
          formatValueToSet.setCategory((String)formatValue[0]);
          formatValueToSet.setPattern((String)formatValue[1]);
          formatValueToSet.setLocale((ULocale)formatValue[2]);
          input.setProperty(Measure.FORMAT_PROP,formatValueToSet);
        }
 else {
          PropertyHandle propHandle=input.getPropertyHandle(Measure.FORMAT_PROP);
          FormatValue formatValueToSet=(FormatValue)value;
          FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
          formatHandle.setCategory((String)formatValue[0]);
          formatHandle.setPattern((String)formatValue[1]);
          formatHandle.setLocale((ULocale)formatValue[2]);
        }
      }
      input.setVisible(!visibilityBtn.getSelection());
      result=input;
    }
  }
 catch (  SemanticException e) {
    ExceptionUtil.handle(e);
    return;
  }
  super.okPressed();
}",0.8821807168096921
65563,"protected void checkOkButtonStatus(){
  if (nameText.getText() == null || nameText.getText().trim().equals(""String_Node_Str"") || functionCombo.getSelectionIndex() == -1 || typeCombo.getSelectionIndex() == -1) {
    if (getButton(IDialogConstants.OK_ID) != null) {
      getButton(IDialogConstants.OK_ID).setEnabled(false);
      setMessage(null);
      setErrorMessage(Messages.getString(""String_Node_Str""));
      return;
    }
  }
 else   if (!UIUtil.validateDimensionName(nameText.getText())) {
    if (getButton(IDialogConstants.OK_ID) != null) {
      getButton(IDialogConstants.OK_ID).setEnabled(false);
      setMessage(null);
      setErrorMessage(Messages.getString(""String_Node_Str""));
      return;
    }
  }
  IAggrFunction function=getFunctionByDisplayName(functionCombo.getText());
  if (function != null && function.getParameterDefn().length > 0) {
    IParameterDefn param=function.getParameterDefn()[0];
    if (!param.isOptional()) {
      if (expressionText.getText() == null || expressionText.getText().trim().length() == 0) {
        if (getButton(IDialogConstants.OK_ID) != null) {
          getButton(IDialogConstants.OK_ID).setEnabled(false);
          setErrorMessage(null);
          setMessage(null);
          return;
        }
      }
    }
  }
  if (getButton(IDialogConstants.OK_ID) != null) {
    getButton(IDialogConstants.OK_ID).setEnabled(true);
    setErrorMessage(null);
    setMessage(null);
  }
}","protected void checkOkButtonStatus(){
  if (nameText.getText() == null || nameText.getText().trim().equals(""String_Node_Str"") || functionCombo.getSelectionIndex() == -1 || typeCombo.getSelectionIndex() == -1) {
    if (getButton(IDialogConstants.OK_ID) != null) {
      getButton(IDialogConstants.OK_ID).setEnabled(false);
      setMessage(null);
      setErrorMessage(Messages.getString(""String_Node_Str""));
      return;
    }
  }
 else   if (!UIUtil.validateDimensionName(nameText.getText())) {
    if (getButton(IDialogConstants.OK_ID) != null) {
      getButton(IDialogConstants.OK_ID).setEnabled(false);
      setMessage(null);
      setErrorMessage(Messages.getString(""String_Node_Str""));
      return;
    }
  }
  IAggrFunction function=getFunctionByDisplayName(functionCombo.getText());
  if (function != null && function.getParameterDefn().length > 0) {
    IParameterDefn param=function.getParameterDefn()[0];
    if (!param.isOptional()) {
      if (expressionText.getText() == null || expressionText.getText().trim().length() == 0) {
        if (getButton(IDialogConstants.OK_ID) != null) {
          getButton(IDialogConstants.OK_ID).setEnabled(false);
          setMessage(null);
          setErrorMessage(Messages.getString(""String_Node_Str""));
          return;
        }
      }
    }
  }
  if (getButton(IDialogConstants.OK_ID) != null) {
    getButton(IDialogConstants.OK_ID).setEnabled(true);
    setErrorMessage(null);
    setMessage(Messages.getString(""String_Node_Str""));
  }
}",0.957765667574932
65564,"protected List getModelTargetConnections(){
  List targetjoins=new ArrayList();
  DatasetNodeEditPart datasetEditpart=(DatasetNodeEditPart)getParent();
  TabularCubeHandle cube=datasetEditpart.getCube();
  Iterator iter=cube.joinConditionsIterator();
  while (iter.hasNext()) {
    DimensionConditionHandle condition=(DimensionConditionHandle)iter.next();
    Iterator conditionIter=condition.getJoinConditions().iterator();
    while (conditionIter.hasNext()) {
      DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIter.next();
      if (joinCondition.getCubeKey().equals(getColumn().getColumnName())) {
        TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)condition.getHierarchy();
        if (hierarchy == null || hierarchy.getDataSet() == null)         break;
        if (OlapUtil.getDataField(hierarchy.getDataSet(),joinCondition.getHierarchyKey()) != null) {
          List columnList=null;
          try {
            columnList=DataUtil.getColumnList(hierarchy.getDataSet());
          }
 catch (          SemanticException e) {
            ExceptionHandler.handle(e);
          }
          if (columnList != null) {
            for (int i=0; i < columnList.size(); i++) {
              ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
              if (resultSetColumn != null && resultSetColumn.getColumnName() != null && resultSetColumn.getColumnName().equals(joinCondition.getHierarchyKey())) {
                targetjoins.add(joinCondition);
                break;
              }
            }
          }
        }
      }
    }
  }
  return targetjoins;
}","protected List getModelTargetConnections(){
  List targetjoins=new ArrayList();
  DatasetNodeEditPart datasetEditpart=(DatasetNodeEditPart)getParent();
  TabularCubeHandle cube=datasetEditpart.getCube();
  Iterator iter=cube.joinConditionsIterator();
  while (iter.hasNext()) {
    DimensionConditionHandle condition=(DimensionConditionHandle)iter.next();
    Iterator conditionIter=condition.getJoinConditions().iterator();
    while (conditionIter.hasNext()) {
      DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIter.next();
      if (joinCondition.getCubeKey().equals(getColumn().getColumnName())) {
        TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)condition.getHierarchy();
        if (hierarchy == null || hierarchy.getDataSet() == null)         break;
        if (OlapUtil.getDataField(hierarchy.getDataSet(),joinCondition.getHierarchyKey()) != null) {
          List columnList=new ArrayList();
          TabularLevelHandle[] levels=(TabularLevelHandle[])hierarchy.getContents(IHierarchyModel.LEVELS_PROP).toArray(new TabularLevelHandle[0]);
          if (levels != null) {
            for (int i=0; i < levels.length; i++) {
              ResultSetColumnHandle resultSetColumn=OlapUtil.getDataField(hierarchy.getDataSet(),levels[i].getColumnName());
              if (resultSetColumn != null && !columnList.contains(resultSetColumn))               columnList.add(resultSetColumn);
            }
          }
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (resultSetColumn != null && resultSetColumn.getColumnName() != null && resultSetColumn.getColumnName().equals(joinCondition.getHierarchyKey())) {
              targetjoins.add(joinCondition);
              break;
            }
          }
        }
      }
    }
  }
  return targetjoins;
}",0.7348654708520179
65565,"@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  int maxRows=this.getRowFetchLimit();
  if (maxRows <= 0) {
    if (this.getQueryDefinition() instanceof IQueryDefinition) {
      IQueryDefinition qd=(IQueryDefinition)this.getQueryDefinition();
      maxRows=qd.getMaxRows();
    }
  }
  odaStatement.setMaxRows(maxRows);
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  ICancellable queryCanceller=new OdaQueryCanceller(odaStatement,session.getStopSign());
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      this.session.getCancelManager().register(queryCanceller);
      if (!session.getStopSign().isStopped()) {
        prepareColumns();
      }
      this.session.getCancelManager().deregister(queryCanceller);
    }
  }
 else {
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped()) {
      prepareColumns();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
  try {
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped())     resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
    if (design != null) {
      List modelResultHints=design.getResultSetHints();
      resultMetadata=mergeResultHint(modelResultHints,resultMetadata);
    }
    if (queryCanceller.collectException() != null) {
      if (!(queryCanceller.collectException().getCause() instanceof UnsupportedOperationException))       throw queryCanceller.collectException();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  odaStatement.setMaxRows(this.getRowFetchLimit());
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  ICancellable queryCanceller=new OdaQueryCanceller(odaStatement,session.getStopSign());
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      this.session.getCancelManager().register(queryCanceller);
      if (!session.getStopSign().isStopped()) {
        prepareColumns();
      }
      this.session.getCancelManager().deregister(queryCanceller);
    }
  }
 else {
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped()) {
      prepareColumns();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
  try {
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped())     resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
    if (design != null) {
      List modelResultHints=design.getResultSetHints();
      resultMetadata=mergeResultHint(modelResultHints,resultMetadata);
    }
    if (queryCanceller.collectException() != null) {
      if (!(queryCanceller.collectException().getCause() instanceof UnsupportedOperationException))       throw queryCanceller.collectException();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.9524511610762992
65566,"public void setCustomFieldValue(int fieldIndex,Object value) throws DataException {
  if (resultClass.isCustomField(fieldIndex))   fields[fieldIndex - 1]=value;
 else   throw new DataException(ResourceConstants.INVALID_CUSTOM_FIELD_INDEX,Integer.valueOf(fieldIndex));
}","public void setCustomFieldValue(int fieldIndex,Object value) throws DataException {
  if (resultClass.isCustomField(fieldIndex))   fields[fieldIndex - 1]=value;
 else   throw new DataException(ResourceConstants.INVALID_CUSTOM_FIELD_INDEX,Integer.valueOf(fieldIndex));
  if (resultClass.getFieldValueClass(fieldIndex).getName().equals(AnyType.class.getName())) {
    if (value != null) {
      ((ResultClass)resultClass).getFieldMetaData(fieldIndex).setDataType(value.getClass());
    }
  }
}",0.7078947368421052
65567,"public static void writeObject(DataOutputStream dos,Object fieldValue,Class fieldType) throws IOException, DataException {
  if (fieldValue == null) {
    dos.writeByte(0);
    return;
  }
 else {
    dos.writeByte(1);
  }
  if (fieldType.equals(Integer.class))   dos.writeInt(((Integer)convert(fieldValue,DataType.INTEGER_TYPE)).intValue());
 else   if (fieldType.equals(Double.class))   dos.writeDouble(((Double)convert(fieldValue,DataType.DOUBLE_TYPE)).doubleValue());
 else   if (fieldType.equals(BigDecimal.class))   dos.writeUTF(((BigDecimal)convert(fieldValue,DataType.DECIMAL_TYPE)).toString());
 else   if (Date.class.isAssignableFrom(fieldType))   dos.writeLong(((Date)convert(fieldValue,DataType.DATE_TYPE)).getTime());
 else   if (fieldType.equals(Boolean.class))   dos.writeBoolean(((Boolean)convert(fieldValue,DataType.BOOLEAN_TYPE)).booleanValue());
 else   if (fieldType.equals(String.class))   IOUtil.writeString(dos,((String)convert(fieldValue,DataType.STRING_TYPE)));
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   IOUtil.writeString(dos,((String)convert(fieldValue,DataType.STRING_TYPE)));
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    byte[] bytes=(byte[])fieldValue;
    if (bytes == null || bytes.length == 0) {
      IOUtil.writeInt(dos,0);
    }
 else {
      IOUtil.writeInt(dos,bytes.length);
      dos.write((byte[])fieldValue);
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    if (!(fieldValue instanceof Serializable))     throw new DataException(ResourceConstants.NOT_SERIALIZABLE_CLASS,fieldValue.getClass().getName());
    IOUtil.writeObject(dos,fieldValue);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
}","public static void writeObject(DataOutputStream dos,Object fieldValue,Class fieldType) throws IOException, DataException {
  if (fieldValue == null) {
    dos.writeByte(0);
    return;
  }
 else {
    dos.writeByte(1);
  }
  if (fieldType.equals(Integer.class))   dos.writeInt(((Integer)convert(fieldValue,DataType.INTEGER_TYPE)).intValue());
 else   if (fieldType.equals(Double.class))   dos.writeDouble(((Double)convert(fieldValue,DataType.DOUBLE_TYPE)).doubleValue());
 else   if (fieldType.equals(BigDecimal.class))   dos.writeUTF(((BigDecimal)convert(fieldValue,DataType.DECIMAL_TYPE)).toString());
 else   if (Date.class.isAssignableFrom(fieldType))   dos.writeLong(((Date)convert(fieldValue,DataType.DATE_TYPE)).getTime());
 else   if (fieldType.equals(Boolean.class))   dos.writeBoolean(((Boolean)convert(fieldValue,DataType.BOOLEAN_TYPE)).booleanValue());
 else   if (fieldType.equals(String.class))   IOUtil.writeString(dos,fieldValue.toString());
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   IOUtil.writeString(dos,fieldValue.toString());
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    byte[] bytes=(byte[])fieldValue;
    if (bytes == null || bytes.length == 0) {
      IOUtil.writeInt(dos,0);
    }
 else {
      IOUtil.writeInt(dos,bytes.length);
      dos.write((byte[])fieldValue);
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    if (!(fieldValue instanceof Serializable))     throw new DataException(ResourceConstants.NOT_SERIALIZABLE_CLASS,fieldValue.getClass().getName());
    IOUtil.writeObject(dos,fieldValue);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
}",0.9682804674457428
65568,"/** 
 * @return
 * @throws SemanticException
 */
private DataSetHandle createDataSetODAV2() throws SemanticException {
  String dataSetTypeName=null;
  if (getSelectedDataSet() instanceof Object[]) {
    DataSetType dataSetElement=(DataSetType)((Object[])getSelectedDataSet())[0];
    dataSetTypeName=dataSetElement.getID();
  }
 else   if (getSelectedDataSet() instanceof DataSetTypeElement) {
    dataSetTypeName=((DataSetTypeElement)getSelectedDataSet()).getDataSetTypeName();
  }
  return createDataSet(dataSetTypeName);
}","/** 
 * @return
 * @throws SemanticException
 */
private DataSetHandle createDataSetODAV2() throws SemanticException {
  String dataSetTypeName=null;
  if (getSelectedDataSet() instanceof Object[]) {
    DataSetType dataSetElement=(DataSetType)((Object[])getSelectedDataSet())[0];
    dataSetTypeName=dataSetElement.getID();
  }
 else   if (getSelectedDataSet() instanceof OdaDataSetTypeElement) {
    dataSetTypeName=((OdaDataSetTypeElement)getSelectedDataSet()).getDataSetType().getID();
  }
 else   if (getSelectedDataSet() instanceof DataSetTypeElement) {
    dataSetTypeName=((DataSetTypeElement)getSelectedDataSet()).getDataSetTypeName();
  }
  return createDataSet(dataSetTypeName);
}",0.8644207066557108
65569,"/** 
 * @return
 */
private IWizardPage getNextPageODAV2(){
  DataSetTypeElement dataSetElement=(DataSetTypeElement)((IStructuredSelection)dataSetTypeChooser.getSelection()).getFirstElement();
  if (m_designSession != null)   m_designSession=null;
  if (dataSetElement instanceof OdaDataSetTypeElement) {
    OdaDataSetTypeElement dElement=(OdaDataSetTypeElement)dataSetElement;
    IConfigurationElement element=dElement.getIConfigurationElement();
    AbstractDataSetWizard newWizard=(AbstractDataSetWizard)htDataSetWizards.get(element.getAttribute(""String_Node_Str""));
    if (newWizard == null) {
      IConfigurationElement[] elements=element.getChildren(""String_Node_Str"");
      if (elements.length > 0) {
        try {
          Object wizard=elements[0].createExecutableExtension(""String_Node_Str"");
          if (wizard instanceof AbstractDataSetWizard) {
            newWizard=(AbstractDataSetWizard)wizard;
            newWizard.setConfigurationElement(element);
            newWizard.addPages();
            newWizard.setUseTransaction(useTransaction);
            htDataSetWizards.put(element.getAttribute(""String_Node_Str""),newWizard);
          }
        }
 catch (        CoreException e) {
          ExceptionHandler.handle(e);
        }
      }
    }
    if (newWizard != null) {
      newWizard.setDataSource(getSelectedDataSource());
      newWizard.setDataSetName(nameEditor.getText().trim());
      if (newWizard.getDataSet() != null) {
        try {
          newWizard.getDataSet().setDataSource(newWizard.getDataSource().getName());
          newWizard.getDataSet().setName(newWizard.getDataSetName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
      return newWizard.getStartingPage();
    }
  }
 else {
    IWizardPage page=helper.getNextPage(getSelectedDataSource(),dataSetElement);
    if (page == null)     return super.getNextPage();
 else     return page;
  }
  return super.getNextPage();
}","/** 
 * @return
 */
private IWizardPage getNextPageODAV2(){
  DataSetTypeElement dataSetElement=(DataSetTypeElement)((IStructuredSelection)dataSetTypeChooser.getSelection()).getFirstElement();
  if (m_designSession != null)   m_designSession=null;
  if (dataSetElement instanceof OdaDataSetTypeElement) {
    OdaDataSetTypeElement dElement=(OdaDataSetTypeElement)dataSetElement;
    IConfigurationElement element=dElement.getIConfigurationElement();
    AbstractDataSetWizard newWizard=null;
    if (element != null) {
      newWizard=(AbstractDataSetWizard)htDataSetWizards.get(element.getAttribute(""String_Node_Str""));
    }
    if (newWizard == null && element != null) {
      IConfigurationElement[] elements=element.getChildren(""String_Node_Str"");
      if (elements.length > 0) {
        try {
          Object wizard=elements[0].createExecutableExtension(""String_Node_Str"");
          if (wizard instanceof AbstractDataSetWizard) {
            newWizard=(AbstractDataSetWizard)wizard;
            newWizard.setConfigurationElement(element);
            newWizard.addPages();
            newWizard.setUseTransaction(useTransaction);
            htDataSetWizards.put(element.getAttribute(""String_Node_Str""),newWizard);
          }
        }
 catch (        CoreException e) {
          ExceptionHandler.handle(e);
        }
      }
    }
    if (newWizard != null) {
      newWizard.setDataSource(getSelectedDataSource());
      newWizard.setDataSetName(nameEditor.getText().trim());
      if (newWizard.getDataSet() != null) {
        try {
          newWizard.getDataSet().setDataSource(newWizard.getDataSource().getName());
          newWizard.getDataSet().setName(newWizard.getDataSetName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
      return newWizard.getStartingPage();
    }
  }
 else {
    IWizardPage page=helper.getNextPage(getSelectedDataSource(),dataSetElement);
    if (page == null)     return super.getNextPage();
 else     return page;
  }
  return super.getNextPage();
}",0.9817193675889327
65570,"/** 
 * whether to save empty parameter
 * @param parameters
 * @return
 */
private boolean doSaveEmptyParameter(PropertyHandle parameters){
  if (isJointOrDerivedDataSetHandle) {
    return true;
  }
  if (parameters == null) {
    parameters=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  }
  if (parameters != null) {
    Iterator iter=parameters.iterator();
    String paramName=null;
    if (iter != null) {
      while (iter.hasNext()) {
        DataSetParameterHandle parameter=(DataSetParameterHandle)iter.next();
        if (isOdaDataSetHandle)         paramName=((OdaDataSetParameterHandle)parameter).getParamName();
        if (parameter.isInput() && paramName == null && (parameter.getDefaultValue() == null || parameter.getDefaultValue().trim().length() == 0)) {
          setNoneValuedParameterName(parameter.getName());
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * whether to save empty parameter
 * @param parameters
 * @return
 */
private boolean doSaveEmptyParameter(PropertyHandle parameters){
  if (isJointOrDerivedDataSetHandle) {
    return true;
  }
  if (parameters == null) {
    parameters=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  }
  if (parameters != null) {
    Iterator iter=parameters.iterator();
    String paramName=null;
    if (iter != null) {
      while (iter.hasNext()) {
        DataSetParameterHandle parameter=(DataSetParameterHandle)iter.next();
        if (isOdaDataSetHandle)         paramName=((OdaDataSetParameterHandle)parameter).getParamName();
        if (parameter.isInput() && paramName == null && (!parameter.isOutput()) && (parameter.getDefaultValue() == null || parameter.getDefaultValue().trim().length() == 0)) {
          setNoneValuedParameterName(parameter.getName());
          return false;
        }
      }
    }
  }
  return true;
}",0.9860031104199068
65571,"/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    boolean selectionChanged=true;
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    Iterator iter=handle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP).iterator();
    JoinConditionHandle conditionHandle;
    while (iter.hasNext()) {
      conditionHandle=(JoinConditionHandle)iter.next();
      if ((conditionHandle.getLeftDataSet() != null && conditionHandle.getLeftDataSet().equals(this.leftDataSetName)) && (conditionHandle.getLeftDataSet() != null && conditionHandle.getRightDataSet().equals(this.rightDataSetName))) {
        selectionChanged=false;
        conditionHandle.setJoinType(joinType);
      }
    }
    if (selectionChanged) {
      List datasetName=handle.getDataSetNames();
      for (int i=0; i < datasetName.size(); i++) {
        try {
          handle.removeDataSet((String)datasetName.get(i));
        }
 catch (        SemanticException e) {
        }
      }
      if (leftDataSetName.equals(rightDataSetName))       handle.addDataSet(leftDataSetName);
 else {
        handle.addDataSet(leftDataSetName);
        handle.addDataSet(rightDataSetName);
      }
      setParameters(handle);
      addColumnHints(handle);
      if (propertyHandle != null) {
        JoinCondition condition=createJoinCondition();
        propertyHandle.removeItem(0);
        propertyHandle.addItem(condition);
        return true;
      }
 else       return false;
    }
  }
  return true;
}","/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    if (selectionChanged) {
      selectionChanged=false;
      List datasetName=handle.getDataSetNames();
      for (int i=0; i < datasetName.size(); i++) {
        try {
          handle.removeDataSet((String)datasetName.get(i));
        }
 catch (        SemanticException e) {
        }
      }
      if (leftDataSetName.equals(rightDataSetName))       handle.addDataSet(leftDataSetName);
 else {
        handle.addDataSet(leftDataSetName);
        handle.addDataSet(rightDataSetName);
      }
      setParameters(handle);
      addColumnHints(handle);
      if (propertyHandle != null) {
        JoinCondition condition=createJoinCondition();
        propertyHandle.removeItem(0);
        propertyHandle.addItem(condition);
        return true;
      }
 else       return false;
    }
  }
  return true;
}",0.37357315807679
65572,"public void pageActivated(){
  if (this.propertyPageContainer != null) {
    setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
    JointDataSetHandle handle=(JointDataSetHandle)this.propertyPageContainer.getModel();
    if (!nameEditor.isDisposed())     this.nameEditor.dispose();
    if (!nameLabel.isDisposed())     this.nameLabel.dispose();
    if (this.dataSetList != null) {
      for (int i=0; i < dataSetList.size(); i++) {
        if (dataSetList.get(i) instanceof JointDataSetHandle && ((JointDataSetHandle)dataSetList.get(i)).getDataSetNames().equals(handle.getDataSetNames())) {
          this.dataSetList.remove(i);
        }
      }
    }
    this.leftDataSetChooser.setInput(this.dataSetList);
    this.rightDataSetChooser.setInput(this.dataSetList);
    propertyHandle=handle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP);
    Iterator conditionIter=handle.joinConditionsIterator();
    JoinConditionHandle condition;
    while (conditionIter.hasNext()) {
      condition=(JoinConditionHandle)conditionIter.next();
      populateDataSet(condition.getLeftDataSet(),condition.getLeftExpression(),LEFT_DATASET);
      populateDataSet(condition.getRightDataSet(),condition.getRightExpression(),RIGHT_DATASET);
      populateJoinType(condition.getJoinType());
    }
  }
}","public void pageActivated(){
  if (this.propertyPageContainer != null) {
    setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
    JointDataSetHandle handle=(JointDataSetHandle)this.propertyPageContainer.getModel();
    if (!nameEditor.isDisposed())     this.nameEditor.dispose();
    if (!nameLabel.isDisposed())     this.nameLabel.dispose();
    if (this.dataSetList != null) {
      for (int i=0; i < dataSetList.size(); i++) {
        if (dataSetList.get(i) instanceof JointDataSetHandle && ((JointDataSetHandle)dataSetList.get(i)).getDataSetNames().equals(handle.getDataSetNames())) {
          this.dataSetList.remove(i);
        }
      }
    }
    this.leftDataSetChooser.setInput(this.dataSetList);
    this.rightDataSetChooser.setInput(this.dataSetList);
    propertyHandle=handle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP);
    Iterator conditionIter=handle.joinConditionsIterator();
    JoinConditionHandle condition;
    while (conditionIter.hasNext()) {
      condition=(JoinConditionHandle)conditionIter.next();
      populateDataSet(condition.getLeftDataSet(),condition.getLeftExpression(),LEFT_DATASET);
      populateDataSet(condition.getRightDataSet(),condition.getRightExpression(),RIGHT_DATASET);
      populateJoinType(condition.getJoinType());
    }
  }
  selectionChanged=false;
}",0.990203466465712
65573,"public Control createPageControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  dataSetList=getDataSets();
  if (getPageDescription() != null) {
    Label pageDescription=new Label(composite,SWT.NONE);
    pageDescription.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pageDescription.setText(getPageDescription());
    pageDescription.setToolTipText(getPageDescription());
  }
  topComposite=new Composite(composite,SWT.NONE);
  createTopComposite(topComposite);
  bottomComposite=new Composite(composite,SWT.NONE);
  createBottomComposite(bottomComposite);
  joinType=DesignChoiceConstants.JOIN_TYPE_INNER;
  Utility.setSystemHelp(composite,IHelpConstants.CONEXT_ID_JOINTDATASET);
  return composite;
}","public Control createPageControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  dataSetList=getDataSets();
  if (getPageDescription() != null) {
    Label pageDescription=new Label(composite,SWT.NONE);
    pageDescription.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pageDescription.setText(getPageDescription());
    pageDescription.setToolTipText(getPageDescription());
  }
  topComposite=new Composite(composite,SWT.NONE);
  createTopComposite(topComposite);
  bottomComposite=new Composite(composite,SWT.NONE);
  createBottomComposite(bottomComposite);
  joinType=DesignChoiceConstants.JOIN_TYPE_INNER;
  selectionChanged=false;
  Utility.setSystemHelp(composite,IHelpConstants.CONEXT_ID_JOINTDATASET);
  return composite;
}",0.9846878680800942
65574,"public void widgetSelected(SelectionEvent e){
  if (e.getSource() instanceof Button) {
    if (((Button)e.getSource()).equals(innerJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_INNER;
 else     if (((Button)e.getSource()).equals(leftOuterJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_LEFT_OUT;
 else     if (((Button)e.getSource()).equals(rightOuterJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_RIGHT_OUT;
 else     if (((Button)e.getSource()).equals(fullOuterJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_FULL_OUT;
  }
}","public void widgetSelected(SelectionEvent e){
  selectionChanged=true;
  if (e.getSource() instanceof Button) {
    if (((Button)e.getSource()).equals(innerJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_INNER;
 else     if (((Button)e.getSource()).equals(leftOuterJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_LEFT_OUT;
 else     if (((Button)e.getSource()).equals(rightOuterJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_RIGHT_OUT;
 else     if (((Button)e.getSource()).equals(fullOuterJoinButton))     joinType=DesignChoiceConstants.JOIN_TYPE_FULL_OUT;
  }
}",0.9785038693035254
65575,"public void selectionChanged(SelectionChangedEvent event){
  if (event.getSource() instanceof ComboViewer) {
    this.setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
    if (((ComboViewer)event.getSource()).equals(rightDataSetChooser))     leftSelected=false;
 else     leftSelected=true;
    DataSetHandle handle=(DataSetHandle)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (leftSelected) {
      leftDataSetName=handle.getQualifiedName();
      leftHandle=handle;
    }
 else {
      rightDataSetName=handle.getQualifiedName();
      rightHandle=handle;
    }
    DataSetViewData[] columsItems=null;
    try {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,handle.getModuleHandle());
      DataRequestSession session=DataRequestSession.newSession(context);
      columsItems=DataSetProvider.getCurrentInstance().populateAllCachedMetaData(handle,session);
      populateColumns(columsItems);
      session.shutdown();
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
 else   if (event.getSource() instanceof ListViewer) {
    if (((ListViewer)event.getSource()).equals(rightColumnList))     leftSelected=false;
 else     leftSelected=true;
    DataSetViewData itemModel=(DataSetViewData)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (leftSelected)     leftColumnSelection=itemModel.getName();
 else     rightColumnSelection=itemModel.getName();
  }
  if (!this.nameEditor.isDisposed())   setPageComplete(canPageComplete());
}","public void selectionChanged(SelectionChangedEvent event){
  selectionChanged=true;
  if (event.getSource() instanceof ComboViewer) {
    this.setPageMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
    if (((ComboViewer)event.getSource()).equals(rightDataSetChooser))     leftSelected=false;
 else     leftSelected=true;
    DataSetHandle handle=(DataSetHandle)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (leftSelected) {
      leftDataSetName=handle.getQualifiedName();
      leftHandle=handle;
    }
 else {
      rightDataSetName=handle.getQualifiedName();
      rightHandle=handle;
    }
    DataSetViewData[] columsItems=null;
    try {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,handle.getModuleHandle());
      DataRequestSession session=DataRequestSession.newSession(context);
      columsItems=DataSetProvider.getCurrentInstance().populateAllCachedMetaData(handle,session);
      populateColumns(columsItems);
      session.shutdown();
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
 else   if (event.getSource() instanceof ListViewer) {
    if (((ListViewer)event.getSource()).equals(rightColumnList))     leftSelected=false;
 else     leftSelected=true;
    DataSetViewData itemModel=(DataSetViewData)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (leftSelected)     leftColumnSelection=itemModel.getName();
 else     rightColumnSelection=itemModel.getName();
  }
  if (!this.nameEditor.isDisposed())   setPageComplete(canPageComplete());
}",0.9921996879875196
65576,"public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  if (modelChanged || ((DataSetEditor)this.getContainer()).modelChanged()) {
    modelChanged=false;
    new UIJob(""String_Node_Str""){
      public IStatus runInUIThread(      IProgressMonitor monitor){
        updateResultsProcess();
        return Status.OK_STATUS;
      }
    }
.schedule();
  }
}","public void pageActivated(){
  getContainer().setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.NONE);
  if (modelChanged) {
    modelChanged=false;
    new UIJob(""String_Node_Str""){
      public IStatus runInUIThread(      IProgressMonitor monitor){
        updateResultsProcess();
        return Status.OK_STATUS;
      }
    }
.schedule();
  }
}",0.929757343550447
65577,"public boolean performFinish(){
  return page.createSelectedDataSource();
}","public boolean performFinish(){
  return page.performFinish();
}",0.7769784172661871
65578,"public final void testGetMaxQueries() throws DataException {
  assertEquals(m_connection.getMaxQueries(),0);
}","public final void testGetMaxQueries() throws DataException {
  assertEquals(1,m_connection.getMaxQueries());
}",0.9818181818181818
65579,"@SuppressWarnings(""String_Node_Str"") public boolean process(IResultObject row,int rowIndex) throws DataException {
  if (currentFilters.size() == 0)   return true;
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"");
  boolean isAccepted=true;
  Iterator filterIt=currentFilters.iterator();
  IResultIterator cachedIterator=dataSet.getResultSet();
  dataSet.setRowObject(row,false);
  dataSet.setCurrentRowIndex(rowIndex);
  Mode temp=dataSet.getMode();
  dataSet.setMode(this.mode);
  try {
    while (filterIt.hasNext()) {
      IFilterDefinition filter=(IFilterDefinition)filterIt.next();
      IBaseExpression expr=filter.getExpression();
      Object result=null;
      try {
        if (expr instanceof IConditionalExpression)         result=ExprEvaluateUtil.evaluateConditionExpression((IConditionalExpression)expr,dataSet.getScriptScope(),true,dataSet.getSession().getEngineContext().getScriptContext(),compareHints,dataSet);
 else         result=ExprEvaluateUtil.evaluateRawExpression2(expr,dataSet.getScriptScope(),dataSet.getSession().getEngineContext().getScriptContext(),dataSet);
      }
 catch (      BirtException e2) {
        DataException dataEx=DataException.wrap(e2);
        throw dataEx;
      }
      if (result == null) {
        Object info=null;
        if (expr instanceof IScriptExpression)         info=((IScriptExpression)expr).getText();
 else         info=expr;
        throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
      }
      try {
        if (DataTypeUtil.toBoolean(result).booleanValue() == false) {
          isAccepted=false;
          break;
        }
      }
 catch (      BirtException e) {
        DataException e1=new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
        logger.logp(Level.FINE,FilterByRow.class.getName(),""String_Node_Str"",""String_Node_Str"",e1);
        throw e1;
      }
    }
    if (cachedIterator != null)     this.dataSet.setResultSet(cachedIterator,false);
    return isAccepted;
  }
  finally {
    dataSet.setMode(temp);
  }
}","@SuppressWarnings(""String_Node_Str"") public boolean process(IResultObject row,int rowIndex) throws DataException {
  if (currentFilters.size() == 0)   return true;
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"");
  boolean isAccepted=true;
  Iterator filterIt=currentFilters.iterator();
  IResultIterator cachedIterator=dataSet.getResultSet();
  dataSet.setRowObject(row,false);
  dataSet.setCurrentRowIndex(rowIndex);
  Mode temp=dataSet.getMode();
  dataSet.setMode(this.mode);
  try {
    while (filterIt.hasNext()) {
      IFilterDefinition filter=(IFilterDefinition)filterIt.next();
      IBaseExpression expr=filter.getExpression();
      Object result=null;
      try {
        if (expr instanceof IConditionalExpression)         result=exprEvaluator.evaluateConditionExpression((IConditionalExpression)expr,dataSet.getScriptScope(),true,dataSet.getSession().getEngineContext().getScriptContext(),compareHints,dataSet);
 else         result=exprEvaluator.evaluateRawExpression2(expr,dataSet.getScriptScope(),dataSet.getSession().getEngineContext().getScriptContext(),dataSet);
      }
 catch (      BirtException e2) {
        DataException dataEx=DataException.wrap(e2);
        throw dataEx;
      }
      if (result == null) {
        Object info=null;
        if (expr instanceof IScriptExpression)         info=((IScriptExpression)expr).getText();
 else         info=expr;
        throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
      }
      try {
        if (DataTypeUtil.toBoolean(result).booleanValue() == false) {
          isAccepted=false;
          break;
        }
      }
 catch (      BirtException e) {
        DataException e1=new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
        logger.logp(Level.FINE,FilterByRow.class.getName(),""String_Node_Str"",""String_Node_Str"",e1);
        throw e1;
      }
    }
    if (cachedIterator != null)     this.dataSet.setResultSet(cachedIterator,false);
    return isAccepted;
  }
  finally {
    dataSet.setMode(temp);
  }
}",0.9956076134699854
65580,"/** 
 * @param dataSetFilters
 * @param queryFilters
 * @param dataSet
 * @throws DataException
 */
FilterByRow(List<IFilterDefinition> dataSetFilters,List<IFilterDefinition> queryFilters,List<IFilterDefinition> groupFilters,List<IFilterDefinition> aggrFilters,List<IFilterDefinition> dataSetAggrFilters,List<IFilterDefinition> noUpdateRowFilters,DataSetRuntime dataSet) throws DataException {
  Object[] params={dataSetFilters,queryFilters,groupFilters,dataSet};
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"",params);
  if (dataSetFilters != null && dataSetFilters.size() > 0)   this.dataSetFilters=new FilterByRowHelper(dataSet,Mode.DataSet,FilterUtil.sortFilters(dataSetFilters));
  if (queryFilters != null && queryFilters.size() > 0)   this.queryFilters=new FilterByRowHelper(dataSet,Mode.Query,FilterUtil.sortFilters(queryFilters));
  if (groupFilters != null && groupFilters.size() > 0)   this.groupFilters=new FilterByRowHelper(dataSet,Mode.Query,groupFilters);
  if (this.dataSetFilters != null || this.queryFilters != null)   this.allRowFilters=new FilterByRowHelper(dataSet,Mode.DataSet,getAllRowFilters(dataSetFilters,queryFilters));
  if (aggrFilters != null && aggrFilters.size() > 0)   this.aggrFilters=new FilterByRowHelper(dataSet,Mode.Query,aggrFilters);
  if (dataSetAggrFilters != null && dataSetAggrFilters.size() > 0)   this.dataSetAggrFilters=new FilterByRowHelper(dataSet,Mode.DataSet,dataSetAggrFilters);
  if (noUpdateRowFilters != null && noUpdateRowFilters.size() > 0)   this.noUpdateRowFilters=new FilterByRowHelper(dataSet,Mode.Query,noUpdateRowFilters);
  this.currentFilters=this.allRowFilters;
  logger.exiting(FilterByRow.class.getName(),""String_Node_Str"");
  logger.log(Level.FINER,""String_Node_Str"");
}","/** 
 * @param dataSetFilters
 * @param queryFilters
 * @param dataSet
 * @throws DataException
 */
FilterByRow(List<IFilterDefinition> dataSetFilters,List<IFilterDefinition> queryFilters,List<IFilterDefinition> groupFilters,List<IFilterDefinition> aggrFilters,List<IFilterDefinition> dataSetAggrFilters,List<IFilterDefinition> noUpdateRowFilters,DataSetRuntime dataSet) throws DataException {
  this();
  Object[] params={dataSetFilters,queryFilters,groupFilters,dataSet};
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"",params);
  if (dataSetFilters != null && dataSetFilters.size() > 0)   this.dataSetFilters=new FilterByRowHelper(dataSet,Mode.DataSet,FilterUtil.sortFilters(dataSetFilters));
  if (queryFilters != null && queryFilters.size() > 0)   this.queryFilters=new FilterByRowHelper(dataSet,Mode.Query,FilterUtil.sortFilters(queryFilters));
  if (groupFilters != null && groupFilters.size() > 0)   this.groupFilters=new FilterByRowHelper(dataSet,Mode.Query,groupFilters);
  if (this.dataSetFilters != null || this.queryFilters != null)   this.allRowFilters=new FilterByRowHelper(dataSet,Mode.DataSet,getAllRowFilters(dataSetFilters,queryFilters));
  if (aggrFilters != null && aggrFilters.size() > 0)   this.aggrFilters=new FilterByRowHelper(dataSet,Mode.Query,aggrFilters);
  if (dataSetAggrFilters != null && dataSetAggrFilters.size() > 0)   this.dataSetAggrFilters=new FilterByRowHelper(dataSet,Mode.DataSet,dataSetAggrFilters);
  if (noUpdateRowFilters != null && noUpdateRowFilters.size() > 0)   this.noUpdateRowFilters=new FilterByRowHelper(dataSet,Mode.Query,noUpdateRowFilters);
  this.currentFilters=this.allRowFilters;
  logger.exiting(FilterByRow.class.getName(),""String_Node_Str"");
  logger.log(Level.FINER,""String_Node_Str"");
}",0.997160704145372
65581,"public void close() throws DataException {
  filterByRow.setWorkingFilterSet(FilterByRow.NO_FILTER);
  filterByRow=null;
  rowFilter.close();
  rowFilter=null;
}","public void close() throws DataException {
  filterByRow.setWorkingFilterSet(FilterByRow.NO_FILTER);
  filterByRow.close();
  filterByRow=null;
  rowFilter.close();
  rowFilter=null;
}",0.9333333333333332
65582,"public JavascriptEngine(JavascriptEngineFactory factory,ScriptableObject root) throws BirtException {
  this.factory=factory;
  try {
    this.context=Context.enter();
    this.global=new ImporterTopLevel();
    this.root=root;
    if (root != null) {
      new LazilyLoadedCtor(global,""String_Node_Str"",""String_Node_Str"",false);
      global.exportAsJSClass(3,global,false);
      global.delete(""String_Node_Str"");
      global.setPrototype(root);
    }
 else {
      global.initStandardObjects(context,true);
    }
    if (global.get(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,global) == org.mozilla.javascript.UniqueTag.NOT_FOUND) {
      IScriptFunctionContext functionContext=new IScriptFunctionContext(){
        public Object findProperty(        String name){
          return propertyMap.get(name);
        }
      }
;
      Object sObj=Context.javaToJS(functionContext,global);
      global.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,global,sObj);
    }
    initWrapFactory();
  }
 catch (  Exception ex) {
    Context.exit();
    throw new BirtException();
  }
}","public JavascriptEngine(JavascriptEngineFactory factory,ScriptableObject root) throws BirtException {
  this.factory=factory;
  try {
    this.context=Context.enter();
    this.global=new ImporterTopLevel();
    this.root=root;
    if (root != null) {
      new LazilyLoadedCtor(global,""String_Node_Str"",""String_Node_Str"",false);
      global.exportAsJSClass(3,global,false);
      global.delete(""String_Node_Str"");
      global.setPrototype(root);
    }
 else {
      global.initStandardObjects(context,true);
    }
    if (global.get(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCTION_BEAN_NAME,global) == org.mozilla.javascript.UniqueTag.NOT_FOUND) {
      IScriptFunctionContext functionContext=new IScriptFunctionContext(){
        public Object findProperty(        String name){
          return propertyMap.get(name);
        }
      }
;
      Object sObj=Context.javaToJS(functionContext,global);
      global.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCTION_BEAN_NAME,global,sObj);
    }
    initWrapFactory();
  }
 catch (  Exception ex) {
    Context.exit();
    throw new BirtException();
  }
}",0.9982832618025752
65583,"private void writeManifest() throws IOException {
  zipStream.putNextEntry(new ZipEntry(MANIFEST_URI));
  ManifestWriter writer=new ManifestWriter(zipStream);
  writer.start(rootMime);
  for (  PackageEntry entry : entries.values()) {
    writer.writeEntry(entry);
  }
  writer.end();
  zipStream.closeEntry();
}","private void writeManifest() throws IOException {
  zipStream.putNextEntry(new ZipEntry(MANIFEST_URI));
  zipStream.write(GetByteArrayFromManifestWriter());
  zipStream.closeEntry();
}",0.6411290322580645
65584,"public void testFontMappingHandler() throws IOException, FactoryConfigurationError, ParserConfigurationException, SAXException {
  fontMappingManager=getFontMappingManager(""String_Node_Str"",Locale.CHINA);
  assertEquals(""String_Node_Str"",fontMappingManager.getAliasedFont(""String_Node_Str""));
  assertEquals(16,fontMappingManager.getFontEncodings().size());
  assertEquals(2,fontMappingManager.getSearchSequences().size());
  CompositeFont cf=fontMappingManager.getCompositeFont(FontMappingManager.FONT_NAME_ALL_FONTS);
  assertTrue(cf != null);
  assertEquals(""String_Node_Str"",cf.getUsedFont('a'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('\u624b'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('b'));
  fontMappingManager=getFontMappingManager(""String_Node_Str"",Locale.JAPANESE);
  assertEquals(""String_Node_Str"",fontMappingManager.getAliasedFont(""String_Node_Str""));
  assertEquals(16,fontMappingManager.getFontEncodings().size());
  cf=fontMappingManager.getCompositeFont(FontMappingManager.FONT_NAME_ALL_FONTS);
  assertTrue(cf != null);
  assertEquals(""String_Node_Str"",cf.getUsedFont('a'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('手'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('b'));
}","public void testFontMappingHandler() throws IOException, FactoryConfigurationError, ParserConfigurationException, SAXException {
  fontMappingManager=getFontMappingManager(""String_Node_Str"",Locale.CHINA);
  assertEquals(""String_Node_Str"",fontMappingManager.getAliasedFont(""String_Node_Str""));
  assertEquals(16,fontMappingManager.getFontEncodings().size());
  assertEquals(2,fontMappingManager.getSearchSequences().size());
  CompositeFont cf=fontMappingManager.getCompositeFont(FontMappingManager.FONT_NAME_ALL_FONTS);
  assertTrue(cf != null);
  assertEquals(""String_Node_Str"",cf.getUsedFont('a'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('\u624b'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('b'));
  fontMappingManager=getFontMappingManager(""String_Node_Str"",Locale.JAPANESE);
  assertEquals(""String_Node_Str"",fontMappingManager.getAliasedFont(""String_Node_Str""));
  assertEquals(16,fontMappingManager.getFontEncodings().size());
  cf=fontMappingManager.getCompositeFont(FontMappingManager.FONT_NAME_ALL_FONTS);
  assertTrue(cf != null);
  assertEquals(""String_Node_Str"",cf.getUsedFont('a'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('\u624b'));
  assertEquals(""String_Node_Str"",cf.getUsedFont('b'));
}",0.9971416904859126
65585,"/** 
 * returns the parameter data type. See the ColumnDefn class for the valid data type constants.
 * @return the parameter data type
 */
int getDataType();","/** 
 * returns the parameter data type. The valid data type could be <code>IParameterDefn.TYPE_ANY</code>, <code>IParameterDefn.TYPE_STRING</code>, <code>IParameterDefn.TYPE_FLOAT</code>, <code>IParameterDefn.TYPE_DECIMAL</code>, <code>IParameterDefn.TYPE_DATE_TIME</code>, <code>IParameterDefn.TYPE_BOOLEAN</code>, <code>IParameterDefn.TYPE_INTEGER</code>, <code>IParameterDefn.TYPE_DATE</code>, <code>IParameterDefn.TYPE_TIME</code>.
 * @return the parameter data type
 */
int getDataType();",0.3711656441717791
65586,"/** 
 * Gets the embedded image
 * @param embeddedImage the embedded image data
 * @return Returns the image,or null if the embedded image doesn't exist.
 */
public Image getEmbeddedImage(ModuleHandle handle,String name){
  String key=generateKey(handle,name);
  EmbeddedImage embeddedImage=handle.findImage(name);
  if (embeddedImage == null) {
    removeCachedImage(key);
    return null;
  }
  Image image=getImageRegistry().get(key);
  if (image != null) {
    return image;
  }
  InputStream in=null;
  try {
    if (key.toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      TranscoderInput input=new TranscoderInput(new ByteArrayInputStream(embeddedImage.getData(handle.getModule())));
      input.setURI(generateURL(handle,handle.getFileName()).toString());
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=new ByteArrayInputStream(embeddedImage.getData(handle.getModule()));
    }
    image=new Image(null,in);
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (image != null) {
    getImageRegistry().put(key,image);
    if (DesignerConstants.TRACING_IMAGE_MANAGER_IMAGE_ADD) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  return image;
}","/** 
 * Gets the embedded image
 * @param embeddedImage the embedded image data
 * @return Returns the image,or null if the embedded image doesn't exist.
 */
public Image getEmbeddedImage(ModuleHandle handle,String name){
  String key=generateKey(handle,name);
  EmbeddedImage embeddedImage=handle.findImage(name);
  if (embeddedImage == null) {
    removeCachedImage(key);
    return null;
  }
  Image image=getImageRegistry().get(key);
  if (image != null) {
    return image;
  }
  InputStream in=null;
  try {
    if (key.toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      TranscoderInput input=new TranscoderInput(new ByteArrayInputStream(embeddedImage.getData(handle.getModule())));
      input.setURI(generateURL(handle,handle.getFileName()).toString());
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=new ByteArrayInputStream(embeddedImage.getData(handle.getModule()));
    }
    ImageData[] datas=new ImageLoader().load(in);
    if (datas != null && datas.length != 0) {
      ImageData cur=null;
      int index=0;
      for (int i=0; i < datas.length; i++) {
        ImageData temp=datas[i];
        if (temp.width * temp.height > datas[index].width * datas[index].height) {
          index=i;
        }
      }
      cur=datas[index];
      image=new Image(null,cur);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (image != null) {
    getImageRegistry().put(key,image);
    if (DesignerConstants.TRACING_IMAGE_MANAGER_IMAGE_ADD) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  return image;
}",0.8975302154492906
65587,"static boolean isDirectColumnRef(String expression,String indicator) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.isDirectColumnRef=false;
  compileColumnExpression(util,expression,indicator);
  return util.isDirectColumnRef;
}","public boolean isDirectColumnRef(){
  return this.isDirectColumnRef;
}",0.3720930232558139
65588,"/** 
 * @return
 * @throws BirtException 
 */
static boolean hasAggregation(String expression,String indicator) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.hasAggregation=false;
  compileColumnExpression(util,expression,indicator);
  return util.hasAggregation;
}","public boolean hasAggregation(){
  return this.hasAggregation;
}",0.3146666666666666
65589,"/** 
 * @param propValue
 * @return
 */
private static long populateMemBufferSize(Object propValue){
  String targetBufferSize=propValue == null ? ""String_Node_Str"" : propValue.toString();
  long memoryCacheSize=0;
  if (targetBufferSize != null)   memoryCacheSize=Long.parseLong(targetBufferSize);
  return memoryCacheSize;
}","/** 
 * @param propValue
 * @return
 */
private static long populateMemBufferSize(Object propValue){
  String targetBufferSize=propValue == null ? ""String_Node_Str"" : propValue.toString();
  long memoryCacheSize=0;
  if (targetBufferSize != null)   memoryCacheSize=Long.parseLong(targetBufferSize);
  return memoryCacheSize > MAGIC_NUMBER ? (memoryCacheSize - MAGIC_NUMBER) : memoryCacheSize;
}",0.9055555555555556
65590,"/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  FactTableRowIterator factTableRowIterator=populateFactTableIterator(stopSign,dimPosition);
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(new CubeDimensionReader(cube),dataSet4Aggregation,aggregations,memoryCacheSize);
  aggregationCalculatorExecutor.setMaxDataObjectRows(maxDataObjectRows);
  return aggregationCalculatorExecutor.execute(stopSign);
}","/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  FactTableRowIterator factTableRowIterator=populateFactTableIterator(stopSign,dimPosition);
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  long memoryCacheSize=this.memoryCacheSize;
  if (this.appContext != null) {
    boolean use11SP3CubeQuery=CacheUtil.enableSP3CubeQueryChange(this.appContext);
    if (use11SP3CubeQuery)     memoryCacheSize=-(memoryCacheSize);
  }
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(new CubeDimensionReader(cube),dataSet4Aggregation,aggregations,memoryCacheSize);
  aggregationCalculatorExecutor.setMaxDataObjectRows(maxDataObjectRows);
  return aggregationCalculatorExecutor.execute(stopSign);
}",0.903413821815154
65591,"/** 
 * @throws IOException 
 * @throws DataException 
 */
private void prepareSortedStacks() throws DataException, IOException {
  allSortedFactRows=new ArrayList();
  int levelSize=0;
  int measureSize=0;
  while (true) {
    int maxLevelCount=-1;
    int aggregationIndex=-1;
    int[] levelSortType=null;
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && ((aggregationCalculators[i].aggregation.getLevels() != null && aggregationCalculators[i].aggregation.getLevels().length > maxLevelCount) || (aggregationCalculators[i].aggregation.getLevels() == null && maxLevelCount == -1))) {
        aggregationIndex=i;
        if (aggregationCalculators[i].aggregation.getLevels() != null)         maxLevelCount=aggregationCalculators[i].aggregation.getLevels().length;
 else         maxLevelCount=0;
        levelSortType=aggregationCalculators[i].aggregation.getSortTypes();
      }
    }
    if (aggregationIndex == -1) {
      break;
    }
    if (memoryCacheSize != 0) {
      if (levelSize == 0)       levelSize=getLevelSize(aggregationCalculators[aggregationIndex].aggregation.getLevels());
 else {
        if (aggregationCalculators[aggregationIndex].aggregation.getLevels() != null)         levelSize+=SizeOfUtil.getArraySize(aggregationCalculators[aggregationIndex].aggregation.getLevels().length);
      }
      if (measureSize == 0)       measureSize=getMeasureSize();
 else {
        if (dataSet4Aggregation.getMetaInfo().getMeasureInfos() != null)         measureSize+=SizeOfUtil.getArraySize(dataSet4Aggregation.getMetaInfo().getMeasureInfos().length);
      }
    }
    Comparator comparator=new Row4AggregationComparator(levelSortType);
    DiskSortedStack diskSortedStack=new DiskSortedStack(100,false,comparator,Row4Aggregation.getCreator());
    if (memoryCacheSize == 0) {
      diskSortedStack.setBufferSize(10000);
      diskSortedStack.setUseMemoryOnly(true);
    }
    DiskSortedStackWrapper diskSortedStackReader=new DiskSortedStackWrapper(diskSortedStack,levelIndex[aggregationIndex]);
    this.allSortedFactRows.add(diskSortedStackReader);
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && cover(levelIndex[aggregationIndex],levelIndex[i])) {
        sortedFactRows[i]=diskSortedStackReader;
      }
    }
  }
  mergeRow4Aggregations=new MergeRow4Aggregation[allSortedFactRows.size()];
  int bufferSize=10000;
  if (memoryCacheSize > 0) {
    int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
    bufferSize=(int)(this.memoryCacheSize * 4 / 5 / rowSize);
    if (this.simpleFunc == null)     bufferSize/=5;
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackReader=(DiskSortedStackWrapper)allSortedFactRows.get(i);
      diskSortedStackReader.getDiskSortedStack().setBufferSize(bufferSize);
    }
  }
  for (int i=0; i < allSortedFactRows.size(); i++) {
    mergeRow4Aggregations[i]=new MergeRow4Aggregation(bufferSize,simpleFunc,measureIndexes4Merge,parameterColIndex4Merge);
  }
}","/** 
 * @throws IOException 
 * @throws DataException 
 */
private void prepareSortedStacks() throws DataException, IOException {
  allSortedFactRows=new ArrayList();
  int levelSize=0;
  int measureSize=0;
  while (true) {
    int maxLevelCount=-1;
    int aggregationIndex=-1;
    int[] levelSortType=null;
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && ((aggregationCalculators[i].aggregation.getLevels() != null && aggregationCalculators[i].aggregation.getLevels().length > maxLevelCount) || (aggregationCalculators[i].aggregation.getLevels() == null && maxLevelCount == -1))) {
        aggregationIndex=i;
        if (aggregationCalculators[i].aggregation.getLevels() != null)         maxLevelCount=aggregationCalculators[i].aggregation.getLevels().length;
 else         maxLevelCount=0;
        levelSortType=aggregationCalculators[i].aggregation.getSortTypes();
      }
    }
    if (aggregationIndex == -1) {
      break;
    }
    if (memoryCacheSize != 0) {
      if (levelSize == 0)       levelSize=getLevelSize(aggregationCalculators[aggregationIndex].aggregation.getLevels());
 else {
        if (aggregationCalculators[aggregationIndex].aggregation.getLevels() != null)         levelSize+=SizeOfUtil.getArraySize(aggregationCalculators[aggregationIndex].aggregation.getLevels().length);
      }
      if (measureSize == 0)       measureSize=getMeasureSize();
 else {
        if (dataSet4Aggregation.getMetaInfo().getMeasureInfos() != null)         measureSize+=SizeOfUtil.getArraySize(dataSet4Aggregation.getMetaInfo().getMeasureInfos().length);
      }
    }
    Comparator comparator=new Row4AggregationComparator(levelSortType);
    DiskSortedStack diskSortedStack=new DiskSortedStack(100,false,comparator,Row4Aggregation.getCreator());
    if (memoryCacheSize == 0) {
      diskSortedStack.setBufferSize(10000);
      diskSortedStack.setUseMemoryOnly(true);
    }
    DiskSortedStackWrapper diskSortedStackReader=new DiskSortedStackWrapper(diskSortedStack,levelIndex[aggregationIndex]);
    this.allSortedFactRows.add(diskSortedStackReader);
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && cover(levelIndex[aggregationIndex],levelIndex[i])) {
        sortedFactRows[i]=diskSortedStackReader;
      }
    }
  }
  mergeRow4Aggregations=new MergeRow4Aggregation[allSortedFactRows.size()];
  int bufferSize=10000;
  if (memoryCacheSize > 0) {
    int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
    bufferSize=(int)(this.memoryCacheSize * 4 / 5 / rowSize);
    if (!this.existReferenceDate) {
      if (this.simpleFunc == null)       bufferSize/=5;
    }
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackReader=(DiskSortedStackWrapper)allSortedFactRows.get(i);
      diskSortedStackReader.getDiskSortedStack().setBufferSize(bufferSize);
    }
  }
  for (int i=0; i < allSortedFactRows.size(); i++) {
    mergeRow4Aggregations[i]=new MergeRow4Aggregation(bufferSize,simpleFunc,measureIndexes4Merge,parameterColIndex4Merge);
  }
}",0.992546986390149
65592,"/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize;
  getParameterColIndex(aggregations);
  existReferenceDate=existReferenceDate(aggregations);
  simpleFunc=getSimpleFunction(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  if (simpleFunc != null) {
    measureIndexes4Merge=dataSet4Aggregation.getMetaInfo().getMeasureIndex(simpleFunc.getMeasureName());
    if (AggregationUtil.needDataField(AggregationManager.getInstance().getAggregation(simpleFunc.getFunctionName()))) {
      this.parameterColIndex4Merge=find(paraColumns,simpleFunc.getParaCol());
    }
 else {
      this.parameterColIndex4Merge=-1;
    }
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}","/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize > 0 ? memoryCacheSize : (-memoryCacheSize);
  getParameterColIndex(aggregations);
  existReferenceDate=memoryCacheSize > 0 ? true : existReferenceDate(aggregations);
  simpleFunc=getSimpleFunction(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  if (simpleFunc != null) {
    measureIndexes4Merge=dataSet4Aggregation.getMetaInfo().getMeasureIndex(simpleFunc.getMeasureName());
    if (AggregationUtil.needDataField(AggregationManager.getInstance().getAggregation(simpleFunc.getFunctionName()))) {
      this.parameterColIndex4Merge=find(paraColumns,simpleFunc.getParaCol());
    }
 else {
      this.parameterColIndex4Merge=-1;
    }
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}",0.9858823529411764
65593,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] cube_Aggregation=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (cube_Aggregation == null || cube_Aggregation.length == 0)   return null;
  AggregationDefinition[] drilled_aggregation=DrillFilterHelper.preparedDrillAggregation(executor.getCubeQueryDefinition(),cube_Aggregation);
  int size=cube_Aggregation.length + drilled_aggregation.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drilled_aggregation.length > 0) {
    System.arraycopy(cube_Aggregation,0,finalAggregation,0,cube_Aggregation.length);
    System.arraycopy(drilled_aggregation,0,finalAggregation,cube_Aggregation.length,drilled_aggregation.length);
  }
 else {
    finalAggregation=cube_Aggregation;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setCubeQueryExecutor(executor);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(executor.getCubeQueryDefinition().getQueryResultsID()),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher,false);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] cube_Aggregation=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (cube_Aggregation == null || cube_Aggregation.length == 0)   return null;
  AggregationDefinition[] drilled_aggregation=DrillFilterHelper.preparedDrillAggregation(executor.getCubeQueryDefinition(),cube_Aggregation);
  int size=cube_Aggregation.length + drilled_aggregation.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drilled_aggregation.length > 0) {
    System.arraycopy(cube_Aggregation,0,finalAggregation,0,cube_Aggregation.length);
    System.arraycopy(drilled_aggregation,0,finalAggregation,cube_Aggregation.length,drilled_aggregation.length);
  }
 else {
    finalAggregation=cube_Aggregation;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setCubeQueryExecutor(executor);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setAppContext(view.getAppContext());
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(executor.getCubeQueryDefinition().getQueryResultsID()),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher,false);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher,false);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(executor,view,stopSign,rs,cube_Aggregation,fetcher);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9948776323278316
65594,"private void populateConnectionProp() throws SQLException {
  if (jdbcConn != null) {
    if (this.autoCommit != null)     jdbcConn.setAutoCommit(this.autoCommit);
 else {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.TRY_COMMIT_THEN_CLOSE)) {
        jdbcConn.setAutoCommit(false);
      }
    }
    if (this.isolationMode != Constants.TRANSCATION_ISOLATION_DEFAULT)     jdbcConn.setTransactionIsolation(this.isolationMode);
  }
}","private void populateConnectionProp() throws SQLException {
  if (jdbcConn != null) {
    if (this.autoCommit != null)     jdbcConn.setAutoCommit(this.autoCommit);
 else {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.TRY_COMMIT_THEN_CLOSE)) {
        this.autoCommit=false;
        jdbcConn.setAutoCommit(false);
      }
    }
    if (this.isolationMode != Constants.TRANSCATION_ISOLATION_DEFAULT)     jdbcConn.setTransactionIsolation(this.isolationMode);
  }
}",0.968718466195762
65595,"/** 
 * Updates OLAP elements names in column bindings by using the name map.
 * @param module the module
 * @param cube the cube used by other elements
 * @param nameMap a map. The key is the old name and the value is corresponding new name.
 */
private void updateReferredOLAPColumnBinding(Module module,Cube cube,Map<String,String> nameMap){
  List<BackRef> clients=cube.getClientList();
  for (int i=0; i < clients.size(); i++) {
    BackRef ref=clients.get(i);
    DesignElement client=ref.getElement();
    List<Object> columnBindings=(List)client.getLocalProperty(module,IReportItemModel.BOUND_DATA_COLUMNS_PROP);
    if (columnBindings == null || columnBindings.isEmpty())     return;
    for (int j=0; j < columnBindings.size(); j++) {
      ComputedColumn binding=(ComputedColumn)columnBindings.get(j);
      updateBindingExpr(binding,nameMap);
      updateAggregateOnList(binding,nameMap);
      updateAggregationArguments(binding,nameMap);
      updateCalculationArguments(binding,nameMap);
      updateTimeDimension(binding,nameMap);
    }
  }
}","/** 
 * Updates OLAP elements names in column bindings by using the name map.
 * @param module the module
 * @param cube the cube used by other elements
 * @param nameMap a map. The key is the old name and the value is corresponding new name.
 */
private void updateReferredOLAPColumnBinding(Module module,Cube cube,Map<String,String> nameMap){
  updateDerivedMeasure(module,cube,nameMap);
  List<BackRef> clients=cube.getClientList();
  for (int i=0; i < clients.size(); i++) {
    BackRef ref=clients.get(i);
    DesignElement client=ref.getElement();
    List<Object> columnBindings=(List)client.getLocalProperty(module,IReportItemModel.BOUND_DATA_COLUMNS_PROP);
    if (columnBindings == null || columnBindings.isEmpty())     return;
    for (int j=0; j < columnBindings.size(); j++) {
      ComputedColumn binding=(ComputedColumn)columnBindings.get(j);
      updateBindingExpr(binding,nameMap);
      updateAggregateOnList(binding,nameMap);
      updateAggregationArguments(binding,nameMap);
      updateCalculationArguments(binding,nameMap);
      updateTimeDimension(binding,nameMap);
    }
  }
}",0.979176307265155
65596,"private void populateConnectionProp() throws SQLException {
  if (jdbcConn != null) {
    if (this.autoCommit != null)     jdbcConn.setAutoCommit(this.autoCommit);
    if (this.isolationMode != Constants.TRANSCATION_ISOLATION_DEFAULT)     jdbcConn.setTransactionIsolation(this.isolationMode);
  }
}","private void populateConnectionProp() throws SQLException {
  if (jdbcConn != null) {
    if (this.autoCommit != null)     jdbcConn.setAutoCommit(this.autoCommit);
 else {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.TRY_COMMIT_THEN_CLOSE)) {
        jdbcConn.setAutoCommit(false);
      }
    }
    if (this.isolationMode != Constants.TRANSCATION_ISOLATION_DEFAULT)     jdbcConn.setTransactionIsolation(this.isolationMode);
  }
}",0.7660668380462725
65597,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String templateFileName,final InputStream templateStream,String cheatSheetId,boolean showCheatSheet,boolean isUseDefaultLibrary,LibraryHandle library,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    UIUtil.addCreateBy(handle);
    if (handle.getProperty(ReportDesignHandle.IMAGE_DPI_PROP) != null) {
      UIUtil.setDPI(handle);
    }
    if (isUseDefaultLibrary) {
      UIUtil.includeLibrary(handle,DEUtil.DEFAULT_LIBRARY,true);
    }
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e,true);
  }
  file.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String templateFileName,final InputStream templateStream,String cheatSheetId,boolean showCheatSheet,boolean isUseDefaultLibrary,LibraryHandle library,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle;
    if (templateStream == null) {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName);
    }
 else {
      handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(templateFileName,templateStream);
    }
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(templateFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    UIUtil.addCreateBy(handle);
    if (handle.getProperty(ReportDesignHandle.IMAGE_DPI_PROP) == null) {
      UIUtil.setDPI(handle);
    }
    if (isUseDefaultLibrary) {
      UIUtil.includeLibrary(handle,DEUtil.DEFAULT_LIBRARY,true);
    }
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e,true);
  }
  file.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionUtil.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9997180716098112
65598,"/** 
 * Set report basic settings.
 * @param model
 * @throws IOException
 */
void setReportSettings(Object model) throws IOException {
  ReportDesignHandle handle=(ReportDesignHandle)model;
  try {
    handle.setDisplayName(settingPage.getDisplayName());
    handle.setDescription(settingPage.getDescription());
    handle.setIconFile(settingPage.getPreviewImagePath());
    UIUtil.addCreateBy(handle);
    if (handle.getProperty(ReportDesignHandle.IMAGE_DPI_PROP) != null) {
      UIUtil.setDPI(handle);
    }
  }
 catch (  SemanticException e) {
  }
}","/** 
 * Set report basic settings.
 * @param model
 * @throws IOException
 */
void setReportSettings(Object model) throws IOException {
  ReportDesignHandle handle=(ReportDesignHandle)model;
  try {
    handle.setDisplayName(settingPage.getDisplayName());
    handle.setDescription(settingPage.getDescription());
    handle.setIconFile(settingPage.getPreviewImagePath());
    UIUtil.addCreateBy(handle);
    if (handle.getProperty(ReportDesignHandle.IMAGE_DPI_PROP) == null) {
      UIUtil.setDPI(handle);
    }
  }
 catch (  SemanticException e) {
  }
}",0.9981949458483754
65599,"protected void setProvider(IExpressionProvider provider){
  this.provider=provider;
}","public void setProvider(IExpressionProvider provider){
  this.provider=provider;
}",0.934131736526946
65600,"protected void setContextObject(Object contextObject){
  this.contextObject=contextObject;
}","public void setContextObject(Object contextObject){
  this.contextObject=contextObject;
}",0.9392265193370166
65601,"protected IExpressionProvider getProvider(){
  return provider;
}","public IExpressionProvider getProvider(){
  return provider;
}",0.9133858267716536
65602,"public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.FINE,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
      if (this.autoCommit == false && DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.TRY_COMMIT_THEN_CLOSE)) {
        jdbcConn.commit();
        jdbcConn.close();
        return;
      }
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}","public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.FINE,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
      if (this.autoCommit == Boolean.FALSE && DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.TRY_COMMIT_THEN_CLOSE)) {
        jdbcConn.commit();
        jdbcConn.close();
        return;
      }
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}",0.9930340557275542
65603,"/** 
 * Prepare the meta data which will be used in execution of a query text. It sets the value of two member variables: resultSetMetaData and absoluteFileName
 */
public void prepare(String queryText) throws OdaException {
  if (queryText == null) {
    throw new OdaException(Messages.getString(""String_Node_Str""));
  }
  QueryTextUtil qtu=new QueryTextUtil(queryText);
  String query=formatQueryText(qtu.getQuery());
  validateNonEmptyQueryText(query);
  String[] queryFragments=parsePreparedQueryText(query);
  validateSingleTableQuery(queryFragments);
  this.currentTableName=getPreparedTableNames(queryFragments);
  this.preparedColumnNames=getPreparedColumnNames(queryFragments);
  this.columnLabels=getColumnLabels(queryFragments);
}","/** 
 * Prepare the meta data which will be used in execution of a query text. It sets the value of two member variables: resultSetMetaData and absoluteFileName
 */
public void prepare(String queryText) throws OdaException {
  if (queryText == null) {
    throw new OdaException(Messages.getString(""String_Node_Str""));
  }
  QueryTextUtil qtu=new QueryTextUtil(queryText);
  String query=formatQueryText(qtu.getQuery());
  validateNonEmptyQueryText(query);
  String[] queryFragments=parsePreparedQueryText(query);
  validateSingleTableQuery(queryFragments);
  this.currentTableName=getPreparedTableNames(queryFragments);
  this.preparedColumnNames=getPreparedColumnNames(queryFragments);
  this.columnLabels=getColumnLabels(queryFragments);
  colInfo=qtu.getColumnsInfo();
}",0.978891820580475
65604,"public IResultSetMetaData getMetaData() throws OdaException {
  if (resultSetMetaData == null)   prepareMetaData();
  return resultSetMetaData;
}","public IResultSetMetaData getMetaData() throws OdaException {
  if (resultSetMetaData == null)   prepareMetaData(colInfo);
  return resultSetMetaData;
}",0.9764309764309764
65605,"/** 
 * Prepare the meta data which will be used in execution of a query text. It sets the value of two member variables: resultSetMetaData and currentTableName
 * @param queryText
 * @throws OdaException
 */
private void prepareMetaData() throws OdaException {
  masterExcelFileSource=new ExcelFileSource(connProperties,currentTableName,worksheetNames,maxRowsToRead,null,null,appContext);
  String[] allColumnNames;
  String[] allColumnTypes;
  allColumnNames=this.hasColumnNames ? discoverActualColumnMetaData(NAME_LITERAL,currentTableName) : createTempColumnNames(masterExcelFileSource.getColumnCount());
  allColumnTypes=this.hasTypeLine ? discoverActualColumnMetaData(TYPE_LITERAL,currentTableName) : createTempColumnTypes(masterExcelFileSource.getColumnCount());
  resultSetMetaData=new ResultSetMetaData(allColumnNames,allColumnTypes);
  if (allColumnNames.length != allColumnTypes.length)   throw new OdaException(Messages.getString(""String_Node_Str""));
  String[] queryColumnNames=null;
  String[] queryColumnTypes=null;
  String[] queryColumnLables=null;
  if (isWildCard(preparedColumnNames)) {
    queryColumnNames=allColumnNames;
    queryColumnTypes=allColumnTypes;
    queryColumnLables=allColumnNames;
    this.resultSetMetaDataHelper=new ResultSetMetaDataHelper(queryColumnNames,queryColumnTypes,queryColumnLables);
    this.resultSetMetaData=new ResultSetMetaData(this.resultSetMetaDataHelper);
  }
 else {
    queryColumnNames=ExcelFileSource.getStringArrayFromList(stripFormatInfoFromQueryColumnNames(getQueryColumnNamesVector((preparedColumnNames))));
    validateColumnName(queryColumnNames,allColumnNames);
    queryColumnTypes=this.hasTypeLine ? getQueryColumnTypes(allColumnNames,allColumnTypes,queryColumnNames) : createTempColumnTypes(queryColumnNames.length);
    queryColumnLables=this.hasColumnNames ? columnLabels : queryColumnNames;
    if (queryColumnLables == null)     queryColumnLables=queryColumnNames;
    this.resultSetMetaDataHelper=new ResultSetMetaDataHelper(queryColumnNames,queryColumnTypes,queryColumnLables);
    this.resultSetMetaData=new ResultSetMetaData(this.resultSetMetaDataHelper);
  }
}","/** 
 * Prepare the meta data which will be used in execution of a query text. It sets the value of two member variables: resultSetMetaData and currentTableName
 * @param queryText
 * @throws OdaException
 */
private void prepareMetaData(String savedSelectedColInfo) throws OdaException {
  masterExcelFileSource=new ExcelFileSource(connProperties,currentTableName,worksheetNames,maxRowsToRead,null,null,appContext);
  String[] allColumnNames;
  String[] allColumnTypes;
  allColumnNames=this.hasColumnNames ? discoverActualColumnMetaData(NAME_LITERAL,currentTableName) : createTempColumnNames(masterExcelFileSource.getColumnCount());
  allColumnTypes=this.hasTypeLine ? discoverActualColumnMetaData(TYPE_LITERAL,currentTableName) : createTempColumnTypes(masterExcelFileSource.getColumnCount());
  resultSetMetaData=new ResultSetMetaData(allColumnNames,allColumnTypes);
  if (allColumnNames.length != allColumnTypes.length)   throw new OdaException(Messages.getString(""String_Node_Str""));
  String[] queryColumnNames=null;
  String[] queryColumnTypes=null;
  String[] queryColumnLables=null;
  if (isWildCard(preparedColumnNames)) {
    queryColumnNames=allColumnNames;
    queryColumnTypes=allColumnTypes;
    queryColumnLables=allColumnNames;
    this.resultSetMetaDataHelper=new ResultSetMetaDataHelper(queryColumnNames,queryColumnTypes,queryColumnLables);
    this.resultSetMetaData=new ResultSetMetaData(this.resultSetMetaDataHelper);
  }
 else {
    queryColumnNames=ExcelFileSource.getStringArrayFromList(stripFormatInfoFromQueryColumnNames(getQueryColumnNamesVector((preparedColumnNames))));
    validateColumnName(queryColumnNames,allColumnNames);
    if (savedSelectedColInfo == null || savedSelectedColInfo.length() == 0) {
      queryColumnTypes=this.hasTypeLine ? getQueryColumnTypes(allColumnNames,allColumnTypes,queryColumnNames) : createTempColumnTypes(queryColumnNames.length);
      queryColumnLables=this.hasColumnNames ? columnLabels : queryColumnNames;
      if (queryColumnLables == null)       queryColumnLables=queryColumnNames;
      this.resultSetMetaDataHelper=new ResultSetMetaDataHelper(queryColumnNames,queryColumnTypes,queryColumnLables);
      this.resultSetMetaData=new ResultSetMetaData(this.resultSetMetaDataHelper);
    }
 else {
      this.resultSetMetaDataHelper=new ResultSetMetaDataHelper(savedSelectedColInfo);
      this.resultSetMetaData=new ResultSetMetaData(this.resultSetMetaDataHelper);
    }
  }
}",0.9334787350054524
65606,"public Time getTime(String columnName) throws OdaException {
  try {
    return new Time(Long.parseLong(getString(columnName)));
  }
 catch (  Exception e) {
    return null;
  }
}","public Time getTime(String columnName) throws OdaException {
  try {
    return stringToTime(getString(columnName));
  }
 catch (  Exception e) {
    return null;
  }
}",0.9252873563218392
65607,"/** 
 * Transform a String value to a date value
 * @param stringValue String value
 * @return Corresponding date value
 * @throws OdaException
 */
private Date stringToDate(String stringValue) throws OdaException {
  if (stringValue != null && stringValue.length() > 0) {
    try {
      return new Date(Long.parseLong(stringValue));
    }
 catch (    Exception ex) {
      throw new OdaException(Messages.getFormattedString(""String_Node_Str"",new String[]{stringValue}));
    }
  }
  this.wasNull=true;
  return null;
}","/** 
 * Transform a String value to a date value
 * @param stringValue String value
 * @return Corresponding date value
 * @throws OdaException
 */
private Date stringToDate(String stringValue) throws OdaException {
  if (stringValue != null && stringValue.trim().length() > 0) {
    try {
      return DateUtil.toSqlDate(stringValue);
    }
 catch (    Exception ex) {
      throw new OdaException(Messages.getFormattedString(""String_Node_Str"",new String[]{stringValue}));
    }
  }
  this.wasNull=true;
  return null;
}",0.962536023054755
65608,"public Timestamp getTimestamp(String columnName) throws OdaException {
  try {
    return new Timestamp(Long.parseLong(getString(columnName)));
  }
 catch (  Exception e) {
    return null;
  }
}","public Timestamp getTimestamp(String columnName) throws OdaException {
  try {
    return stringToTimestamp(getString(columnName));
  }
 catch (  Exception e) {
    return null;
  }
}",0.9312169312169312
65609,"protected void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}","public void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}",0.9378531073446328
65610,"protected void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}","public void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}",0.9378531073446328
65611,"private static Map populateValidBinding(IQueryDefinition queryDefn){
  Map bindings=new HashMap();
  IQueryDefinition temp=queryDefn;
  while (temp != null) {
    bindings.putAll(temp.getBindings());
    if (temp instanceof IQueryDefinition)     temp=(IQueryDefinition)temp.getSourceQuery();
 else     temp=null;
  }
  return bindings;
}","private static Map populateValidBinding(IQueryDefinition queryDefn){
  Map bindings=new HashMap();
  IQueryDefinition temp=queryDefn;
  while (temp != null) {
    bindings.putAll(temp.getBindings());
    if (temp.getSourceQuery() instanceof IQueryDefinition)     temp=(IQueryDefinition)temp.getSourceQuery();
 else     temp=null;
  }
  return bindings;
}",0.9551374819102748
65612,"public void menuAboutToShow(IMenuManager manager){
  Action action=new Action(REMOVE){
    public void run(){
      ((MultipleEditPart)ChildrenDragTracker.this.getSourceEditPart()).removeView(number);
    }
    public boolean isEnabled(){
      int position=number - 1;
      List list=((ReportItemHandle)(ChildrenDragTracker.this.getSourceEditPart().getModel())).getViews();
      if (position < 0 && position > list.size() - 1) {
        return false;
      }
      return ((DesignElementHandle)list.get(position)).canDrop();
    }
  }
;
  manager.add(action);
}","public void menuAboutToShow(IMenuManager manager){
  Action action=new Action(REMOVE){
    public void run(){
      ((MultipleEditPart)ChildrenDragTracker.this.getSourceEditPart()).removeView(number);
    }
    public boolean isEnabled(){
      int position=number - 1;
      List list=((ReportItemHandle)(ChildrenDragTracker.this.getSourceEditPart().getModel())).getViews();
      if (position < 0 && position > list.size() - 1) {
        return false;
      }
      return ((DesignElementHandle)list.get(position)).canDrop();
    }
  }
;
  ISharedImages sharedImages=PlatformUI.getWorkbench().getSharedImages();
  action.setImageDescriptor(sharedImages.getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
  manager.add(action);
}",0.871042471042471
65613,"/** 
 * @param expr
 * @return
 * @throws CoreException
 */
public static String getReferencedMeasure(String expr) throws CoreException {
  return OlapExpressionCompiler.getReferencedMeasure(expr);
}","/** 
 * @param expr
 * @deprecated replaced by getAllReferencedMeasures
 * @return get the first measure name in this expression
 * @throws CoreException
 */
public static String getReferencedMeasure(String expr) throws CoreException {
  Set<String> names=OlapExpressionCompiler.getReferencedMeasure(expr);
  return names.isEmpty() ? null : names.iterator().next();
}",0.657243816254417
65614,"/** 
 * @param n
 * @param objectName
 * @return
 */
private static String getScriptObjectName(Node n,String objectName){
  if (n == null)   return null;
  String result=null;
  if (n.getType() == Token.NAME) {
    if (objectName.equals(n.getString())) {
      Node dimNameNode=n.getNext();
      if (dimNameNode == null || dimNameNode.getType() != Token.STRING)       return null;
      return dimNameNode.getString();
    }
  }
  result=getScriptObjectName(n.getFirstChild(),objectName);
  if (result == null)   result=getScriptObjectName(n.getLastChild(),objectName);
  return result;
}","/** 
 * @param n
 * @param objectName
 * @return
 */
private static void getScriptObjectName(Node n,String objectName,Set nameSet){
  if (n == null)   return;
  String result=null;
  if (n.getType() == Token.NAME) {
    if (objectName.equals(n.getString())) {
      Node dimNameNode=n.getNext();
      if (dimNameNode == null || dimNameNode.getType() != Token.STRING)       return;
      nameSet.add(dimNameNode.getString());
    }
  }
  getScriptObjectName(n.getFirstChild(),objectName,nameSet);
  getScriptObjectName(n.getNext(),objectName,nameSet);
  getScriptObjectName(n.getLastChild(),objectName,nameSet);
}",0.7936772046589018
65615,"/** 
 * @param expr
 * @param objectName
 * @return
 */
public static String getReferencedMeasure(String expr){
  if (expr == null)   return null;
  try {
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    return getScriptObjectName(tree,""String_Node_Str"");
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param expr
 * @param objectName
 * @return
 */
public static Set<String> getReferencedMeasure(String expr){
  if (expr == null)   return Collections.EMPTY_SET;
  try {
    Set<String> result=new LinkedHashSet<String>();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    getScriptObjectName(tree,""String_Node_Str"",result);
    return result;
  }
  finally {
    Context.exit();
  }
}",0.8664563617245006
65616,"/** 
 * @param n
 * @param result
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @throws DataException
 */
private static void populateDimLevels(Node grandpa,Node n,Set<IDimLevel> result) throws CoreException {
  if (n == null)   return;
  if (n.getFirstChild() != null && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
    if (n.getFirstChild().getFirstChild() != null && (n.getFirstChild().getFirstChild().getType() == Token.GETPROP || n.getFirstChild().getFirstChild().getType() == Token.GETELEM)) {
      Node dim=n.getFirstChild().getFirstChild();
      if (""String_Node_Str"".equals(dim.getFirstChild().getString())) {
        String dimName=dim.getLastChild().getString();
        String levelName=dim.getNext().getString();
        String attr=n.getLastChild().getString();
        DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
        if (!result.contains(dimLevel))         result.add(dimLevel);
      }
    }
 else     if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {
      if (""String_Node_Str"".equals(n.getFirstChild().getString())) {
        if (n.getLastChild() != null && n.getNext() != null) {
          String dimName=n.getLastChild().getString();
          String levelName=n.getNext().getString();
          String attr=null;
          if (grandpa != null && grandpa.getNext() != null && grandpa.getNext().getType() == Token.STRING) {
            attr=grandpa.getNext().getString();
          }
          DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
          if (!result.contains(dimLevel))           result.add(dimLevel);
        }
      }
    }
  }
  populateDimLevels(grandpa,n.getFirstChild(),result);
  populateDimLevels(grandpa,n.getLastChild(),result);
  populateDimLevels(grandpa,n.getNext(),result);
}","/** 
 * @param n
 * @param result
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @throws DataException
 */
private static void populateDimLevels(Node grandpa,Node n,Set<IDimLevel> result) throws CoreException {
  if (n == null)   return;
  if (n.getFirstChild() != null && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
    if (n.getFirstChild().getFirstChild() != null && (n.getFirstChild().getFirstChild().getType() == Token.GETPROP || n.getFirstChild().getFirstChild().getType() == Token.GETELEM)) {
      Node dim=n.getFirstChild().getFirstChild();
      if (""String_Node_Str"".equals(dim.getFirstChild().getString())) {
        String dimName=dim.getLastChild().getString();
        String levelName=dim.getNext().getString();
        String attr=n.getLastChild().getString();
        DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
        if (!result.contains(dimLevel))         result.add(dimLevel);
      }
    }
 else     if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {
      if (""String_Node_Str"".equals(n.getFirstChild().getString())) {
        if (n.getLastChild() != null && n.getNext() != null) {
          String dimName=n.getLastChild().getString();
          String levelName=n.getNext().getString();
          String attr=null;
          if (grandpa != null && grandpa.getNext() != null && grandpa.getNext().getType() == Token.STRING) {
            attr=grandpa.getNext().getString();
          }
          DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
          if (!result.contains(dimLevel))           result.add(dimLevel);
        }
      }
    }
  }
  populateDimLevels(grandpa,n.getFirstChild(),result);
  populateDimLevels(grandpa,n.getNext(),result);
  populateDimLevels(grandpa,n.getLastChild(),result);
}",0.9928256070640176
65617,"/** 
 * Updates the expression of column binding. The dimension and level names will be changed if necessary.
 * @param expr the expression of column binding
 * @param nameMap the name map
 * @param type the type of the expression
 * @return the updated expression, or null if it doesn't needs updating
 */
protected Map<String,String> getUpdateBindingMap(String expr,Map<String,String> nameMap,String type){
  Map<String,String> updateMap=new HashMap<String,String>();
  if (IExpressionType.JAVASCRIPT.equalsIgnoreCase(type)) {
    String measureName=null;
    try {
      measureName=ExpressionUtil.getReferencedMeasure(expr);
    }
 catch (    CoreException e) {
    }
    if (measureName != null) {
      String newName=nameMap.get(measureName);
      if (newName != null)       updateMap.put(measureName,newName);
    }
 else {
      Set<IDimLevel> tmpSet=null;
      try {
        tmpSet=ExpressionUtil.getReferencedDimLevel(expr);
      }
 catch (      CoreException e) {
        return null;
      }
      Iterator<IDimLevel> dimLevels=tmpSet.iterator();
      while (dimLevels.hasNext()) {
        IDimLevel tmpObj=dimLevels.next();
        String oldName=tmpObj.getDimensionName();
        String newName=nameMap.get(oldName);
        if (newName == null)         continue;
        if (!newName.equals(oldName))         updateMap.put(oldName,newName);
      }
    }
  }
  return updateMap;
}","/** 
 * Updates the expression of column binding. The dimension and level names will be changed if necessary.
 * @param expr the expression of column binding
 * @param nameMap the name map
 * @param type the type of the expression
 * @return the updated expression, or null if it doesn't needs updating
 */
protected Map<String,String> getUpdateBindingMap(String expr,Map<String,String> nameMap,String type){
  Map<String,String> updateMap=new HashMap<String,String>();
  if (IExpressionType.JAVASCRIPT.equalsIgnoreCase(type)) {
    Set<String> measureNameSet=null;
    try {
      measureNameSet=ExpressionUtil.getAllReferencedMeasures(expr);
    }
 catch (    CoreException e) {
    }
    if (measureNameSet != null && !measureNameSet.isEmpty()) {
      for (      String measureName : measureNameSet) {
        String newName=nameMap.get(measureName);
        if (newName != null)         updateMap.put(measureName,newName);
      }
    }
 else {
      Set<IDimLevel> tmpSet=null;
      try {
        tmpSet=ExpressionUtil.getReferencedDimLevel(expr);
      }
 catch (      CoreException e) {
        return null;
      }
      Iterator<IDimLevel> dimLevels=tmpSet.iterator();
      while (dimLevels.hasNext()) {
        IDimLevel tmpObj=dimLevels.next();
        String oldName=tmpObj.getDimensionName();
        String newName=nameMap.get(oldName);
        if (newName == null)         continue;
        if (!newName.equals(oldName))         updateMap.put(oldName,newName);
      }
    }
  }
  return updateMap;
}",0.9482699554642
65618,"/** 
 * return all emitter info through BIRT engine emitter extension. If there are several emitters for a same format, then the default emitter specified by EngineConfig is used, if no default emitter is specified in EngineConfig, then the first emitter is used.
 * @return all emitter info through BIRT engine emitter extension
 */
public EmitterInfo[] getEmitterInfo(){
  if (emitterInfos == null) {
    EngineConfig config=engine.getConfig();
    Map<String,EmitterInfo> emitters=new HashMap<String,EmitterInfo>();
    EmitterInfo[] tempEmitterInfo=extensionMgr.getEmitterInfo();
    for (    EmitterInfo emitterInfo : tempEmitterInfo) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      if (!emitters.containsKey(format) || id.equals(config.getDefaultEmitter(format))) {
        emitters.put(format,emitterInfo);
      }
    }
    emitterInfos=new EmitterInfo[emitters.size()];
    emitters.values().toArray(emitterInfos);
    for (    EmitterInfo emitterInfo : emitterInfos) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      String defaultEmitter=config.getDefaultEmitter(format);
      if (defaultEmitter != null && !defaultEmitter.equals(id)) {
        logger.log(Level.WARNING,""String_Node_Str"" + defaultEmitter + ""String_Node_Str""+ id+ ""String_Node_Str""+ format+ ""String_Node_Str"");
      }
    }
  }
  return emitterInfos;
}","/** 
 * return all emitter info through BIRT engine emitter extension. If there are several emitters for a same format, then the default emitter specified by EngineConfig is used, if no default emitter is specified in EngineConfig, then the first emitter is used.
 * @return all emitter info through BIRT engine emitter extension
 */
public synchronized EmitterInfo[] getEmitterInfo(){
  if (emitterInfos == null) {
    EngineConfig config=engine.getConfig();
    Map<String,EmitterInfo> emitters=new HashMap<String,EmitterInfo>();
    EmitterInfo[] tempEmitterInfo=extensionMgr.getEmitterInfo();
    for (    EmitterInfo emitterInfo : tempEmitterInfo) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      if (!emitters.containsKey(format) || id.equals(config.getDefaultEmitter(format))) {
        emitters.put(format,emitterInfo);
      }
    }
    emitterInfos=new EmitterInfo[emitters.size()];
    emitters.values().toArray(emitterInfos);
    for (    EmitterInfo emitterInfo : emitterInfos) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      String defaultEmitter=config.getDefaultEmitter(format);
      if (defaultEmitter != null && !defaultEmitter.equals(id)) {
        logger.log(Level.WARNING,""String_Node_Str"" + defaultEmitter + ""String_Node_Str""+ id+ ""String_Node_Str""+ format+ ""String_Node_Str"");
      }
    }
  }
  return emitterInfos;
}",0.995420922860162
65619,"static int handleValidateTargetCanContainElementHandle(DesignElementHandle targetHandle,DesignElementHandle childHandle,boolean validateContainer){
  if (targetHandle instanceof CascadingParameterGroupHandle) {
    return childHandle.getContainer() == targetHandle ? CONTAIN_THIS : CONTAIN_NO;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultSlotID(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle != childHandle && targetHandle instanceof ParameterGroupHandle && childHandle instanceof ParameterGroupHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ReportDesignHandle && childHandle instanceof ThemeHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (validateContainer) {
    if (targetHandle.getContainer() == null) {
      return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() == null) {
      if (!targetHandle.getContainerPropertyHandle().getDefn().isList()) {
        return CONTAIN_NO;
      }
    }
 else     if (!targetHandle.getContainer().getDefn().getSlot(targetHandle.getContainerSlotHandle().getSlotID()).isMultipleCardinality()) {
      return CONTAIN_NO;
    }
    if (targetHandle.getClass().equals(childHandle.getClass())) {
      if (childHandle instanceof LevelHandle)       return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerSlotHandle().getSlotID(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
 else     if (targetHandle.getContainerPropertyHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerPropertyHandle().getPropertyDefn().getName(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
  }
  return CONTAIN_NO;
}","static int handleValidateTargetCanContainElementHandle(DesignElementHandle targetHandle,DesignElementHandle childHandle,boolean validateContainer){
  if (targetHandle instanceof CascadingParameterGroupHandle) {
    return childHandle.getContainer() == targetHandle ? CONTAIN_THIS : CONTAIN_NO;
  }
 else   if (validateContainer && targetHandle instanceof ParameterHandle && targetHandle.getContainer() instanceof CascadingParameterGroupHandle) {
    return childHandle.getContainer() == targetHandle.getContainer() ? CONTAIN_THIS : CONTAIN_NO;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultSlotID(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle != childHandle && targetHandle instanceof ParameterGroupHandle && childHandle instanceof ParameterGroupHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ReportDesignHandle && childHandle instanceof ThemeHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (validateContainer) {
    if (targetHandle.getContainer() == null) {
      return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() == null) {
      if (!targetHandle.getContainerPropertyHandle().getDefn().isList()) {
        return CONTAIN_NO;
      }
    }
 else     if (!targetHandle.getContainer().getDefn().getSlot(targetHandle.getContainerSlotHandle().getSlotID()).isMultipleCardinality()) {
      return CONTAIN_NO;
    }
    if (targetHandle.getClass().equals(childHandle.getClass())) {
      if (childHandle instanceof LevelHandle)       return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerSlotHandle().getSlotID(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
 else     if (targetHandle.getContainerPropertyHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerPropertyHandle().getPropertyDefn().getName(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
  }
  return CONTAIN_NO;
}",0.9383932971907344
65620,"/** 
 * @param expr
 * @return
 * @throws CoreException
 */
public static String getReferencedMeasure(String expr) throws CoreException {
  return OlapExpressionCompiler.getReferencedMeasure(expr);
}","/** 
 * @param expr
 * @deprecated replaced by getAllReferencedMeasure
 * @return get the first measure name in this expression
 * @throws CoreException
 */
public static String getReferencedMeasure(String expr) throws CoreException {
  Set<String> names=OlapExpressionCompiler.getReferencedMeasure(expr);
  return names.isEmpty() ? null : names.iterator().next();
}",0.6584070796460177
65621,"/** 
 * @param n
 * @param objectName
 * @return
 */
private static String getScriptObjectName(Node n,String objectName){
  if (n == null)   return null;
  String result=null;
  if (n.getType() == Token.NAME) {
    if (objectName.equals(n.getString())) {
      Node dimNameNode=n.getNext();
      if (dimNameNode == null || dimNameNode.getType() != Token.STRING)       return null;
      return dimNameNode.getString();
    }
  }
  result=getScriptObjectName(n.getFirstChild(),objectName);
  if (result == null)   result=getScriptObjectName(n.getLastChild(),objectName);
  return result;
}","/** 
 * @param n
 * @param objectName
 * @return
 */
private static void getScriptObjectName(Node n,String objectName,Set nameSet){
  if (n == null)   return;
  String result=null;
  if (n.getType() == Token.NAME) {
    if (objectName.equals(n.getString())) {
      Node dimNameNode=n.getNext();
      if (dimNameNode == null || dimNameNode.getType() != Token.STRING)       return;
      nameSet.add(dimNameNode.getString());
    }
  }
  getScriptObjectName(n.getFirstChild(),objectName,nameSet);
  getScriptObjectName(n.getNext(),objectName,nameSet);
  getScriptObjectName(n.getLastChild(),objectName,nameSet);
}",0.7936772046589018
65622,"/** 
 * @param expr
 * @param objectName
 * @return
 */
public static String getReferencedMeasure(String expr){
  if (expr == null)   return null;
  try {
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    return getScriptObjectName(tree,""String_Node_Str"");
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param expr
 * @param objectName
 * @return
 */
public static Set<String> getReferencedMeasure(String expr){
  if (expr == null)   return Collections.EMPTY_SET;
  try {
    Set<String> result=new LinkedHashSet<String>();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr,null,0);
    getScriptObjectName(tree,""String_Node_Str"",result);
    return result;
  }
  finally {
    Context.exit();
  }
}",0.8664563617245006
65623,"/** 
 * @param n
 * @param result
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @throws DataException
 */
private static void populateDimLevels(Node grandpa,Node n,Set<IDimLevel> result) throws CoreException {
  if (n == null)   return;
  if (n.getFirstChild() != null && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
    if (n.getFirstChild().getFirstChild() != null && (n.getFirstChild().getFirstChild().getType() == Token.GETPROP || n.getFirstChild().getFirstChild().getType() == Token.GETELEM)) {
      Node dim=n.getFirstChild().getFirstChild();
      if (""String_Node_Str"".equals(dim.getFirstChild().getString())) {
        String dimName=dim.getLastChild().getString();
        String levelName=dim.getNext().getString();
        String attr=n.getLastChild().getString();
        DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
        if (!result.contains(dimLevel))         result.add(dimLevel);
      }
    }
 else     if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {
      if (""String_Node_Str"".equals(n.getFirstChild().getString())) {
        if (n.getLastChild() != null && n.getNext() != null) {
          String dimName=n.getLastChild().getString();
          String levelName=n.getNext().getString();
          String attr=null;
          if (grandpa != null && grandpa.getNext() != null && grandpa.getNext().getType() == Token.STRING) {
            attr=grandpa.getNext().getString();
          }
          DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
          if (!result.contains(dimLevel))           result.add(dimLevel);
        }
      }
    }
  }
  populateDimLevels(grandpa,n.getFirstChild(),result);
  populateDimLevels(grandpa,n.getLastChild(),result);
}","/** 
 * @param n
 * @param result
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @throws DataException
 */
private static void populateDimLevels(Node grandpa,Node n,Set<IDimLevel> result) throws CoreException {
  if (n == null)   return;
  if (n.getFirstChild() != null && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
    if (n.getFirstChild().getFirstChild() != null && (n.getFirstChild().getFirstChild().getType() == Token.GETPROP || n.getFirstChild().getFirstChild().getType() == Token.GETELEM)) {
      Node dim=n.getFirstChild().getFirstChild();
      if (""String_Node_Str"".equals(dim.getFirstChild().getString())) {
        String dimName=dim.getLastChild().getString();
        String levelName=dim.getNext().getString();
        String attr=n.getLastChild().getString();
        DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
        if (!result.contains(dimLevel))         result.add(dimLevel);
      }
    }
 else     if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {
      if (""String_Node_Str"".equals(n.getFirstChild().getString())) {
        if (n.getLastChild() != null && n.getNext() != null) {
          String dimName=n.getLastChild().getString();
          String levelName=n.getNext().getString();
          String attr=null;
          if (grandpa != null && grandpa.getNext() != null && grandpa.getNext().getType() == Token.STRING) {
            attr=grandpa.getNext().getString();
          }
          DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
          if (!result.contains(dimLevel))           result.add(dimLevel);
        }
      }
    }
  }
  populateDimLevels(grandpa,n.getFirstChild(),result);
  populateDimLevels(grandpa,n.getNext(),result);
  populateDimLevels(grandpa,n.getLastChild(),result);
}",0.9812587412587412
65624,"/** 
 * Updates the expression of column binding. The dimension and level names will be changed if necessary.
 * @param expr the expression of column binding
 * @param nameMap the name map
 * @param type the type of the expression
 * @return the updated expression, or null if it doesn't needs updating
 */
protected Map<String,String> getUpdateBindingMap(String expr,Map<String,String> nameMap,String type){
  Map<String,String> updateMap=new HashMap<String,String>();
  if (IExpressionType.JAVASCRIPT.equalsIgnoreCase(type)) {
    String measureName=null;
    try {
      measureName=ExpressionUtil.getReferencedMeasure(expr);
    }
 catch (    CoreException e) {
    }
    if (measureName != null) {
      String newName=nameMap.get(measureName);
      if (newName != null)       updateMap.put(measureName,newName);
    }
 else {
      Set<IDimLevel> tmpSet=null;
      try {
        tmpSet=ExpressionUtil.getReferencedDimLevel(expr);
      }
 catch (      CoreException e) {
        return null;
      }
      Iterator<IDimLevel> dimLevels=tmpSet.iterator();
      while (dimLevels.hasNext()) {
        IDimLevel tmpObj=dimLevels.next();
        String oldName=tmpObj.getDimensionName();
        String newName=nameMap.get(oldName);
        if (newName == null)         continue;
        if (!newName.equals(oldName))         updateMap.put(oldName,newName);
      }
    }
  }
  return updateMap;
}","/** 
 * Updates the expression of column binding. The dimension and level names will be changed if necessary.
 * @param expr the expression of column binding
 * @param nameMap the name map
 * @param type the type of the expression
 * @return the updated expression, or null if it doesn't needs updating
 */
protected Map<String,String> getUpdateBindingMap(String expr,Map<String,String> nameMap,String type){
  Map<String,String> updateMap=new HashMap<String,String>();
  if (IExpressionType.JAVASCRIPT.equalsIgnoreCase(type)) {
    Set<String> measureNameSet=null;
    try {
      measureNameSet=ExpressionUtil.getAllReferencedMeasures(expr);
    }
 catch (    CoreException e) {
    }
    if (measureNameSet != null && !measureNameSet.isEmpty()) {
      for (      String measureName : measureNameSet) {
        String newName=nameMap.get(measureName);
        if (newName != null)         updateMap.put(measureName,newName);
      }
    }
 else {
      Set<IDimLevel> tmpSet=null;
      try {
        tmpSet=ExpressionUtil.getReferencedDimLevel(expr);
      }
 catch (      CoreException e) {
        return null;
      }
      Iterator<IDimLevel> dimLevels=tmpSet.iterator();
      while (dimLevels.hasNext()) {
        IDimLevel tmpObj=dimLevels.next();
        String oldName=tmpObj.getDimensionName();
        String newName=nameMap.get(oldName);
        if (newName == null)         continue;
        if (!newName.equals(oldName))         updateMap.put(oldName,newName);
      }
    }
  }
  return updateMap;
}",0.9482699554642
65625,"/** 
 * Populate records to be retrieved when re-render resultSetTable
 * @param metaData
 * @param query
 * @throws BirtException
 */
private void populateRecords(IResultIterator iter){
  try {
    if (iter != null) {
      IResultMetaData meta=iter.getResultMetaData();
      if (meta.getColumnCount() > 0) {
        while (iter.next()) {
          CellValue[] record=new CellValue[meta.getColumnCount()];
          for (int n=0; n < record.length; n++) {
            CellValue cv=new CellValue();
            Object value=iter.getValue(meta.getColumnName(n + 1));
            String disp=null;
            if (value instanceof Number)             disp=value.toString();
 else             if (value instanceof byte[]) {
              disp=DataTypeUtil.toLimitedSizeString(value);
            }
 else             disp=iter.getString(meta.getColumnName(n + 1));
            cv.setDisplayValue(disp);
            cv.setRealValue(value);
            record[n]=cv;
          }
          recordList.add(record);
        }
      }
      setPromptLabelText();
      iter.close();
    }
  }
 catch (  RuntimeException e) {
    errorList.add(e);
  }
catch (  BirtException e) {
    errorList.add(e);
  }
}","/** 
 * Populate records to be retrieved when re-render resultSetTable
 * @param metaData
 * @param query
 * @throws BirtException
 */
private void populateRecords(IResultIterator iter){
  try {
    if (iter != null) {
      IResultMetaData meta=iter.getResultMetaData();
      if (meta.getColumnCount() > 0) {
        while (iter.next()) {
          CellValue[] record=new CellValue[meta.getColumnCount()];
          for (int n=0; n < record.length; n++) {
            CellValue cv=new CellValue();
            Object value=iter.getValue(meta.getColumnName(n + 1));
            String disp=null;
            if (value instanceof Number)             disp=value.toString();
 else             disp=iter.getString(meta.getColumnName(n + 1));
            cv.setDisplayValue(disp);
            cv.setRealValue(value);
            record[n]=cv;
          }
          recordList.add(record);
        }
      }
      setPromptLabelText();
      iter.close();
    }
  }
 catch (  RuntimeException e) {
    errorList.add(e);
  }
catch (  BirtException e) {
    errorList.add(e);
  }
}",0.9458388375165124
65626,"/** 
 * Convert an object to an locale neutral String value. For Date values we will convert to ISO8601 format.
 * @param source
 * @return
 * @throws BirtException
 */
public static String toLocaleNeutralString(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Time) {
    return ((Time)source).toString();
  }
 else   if (source instanceof java.sql.Date) {
    return ((java.sql.Date)source).toString();
  }
 else   if (source instanceof Timestamp) {
    return ((java.sql.Timestamp)source).toString();
  }
 else   if (source instanceof Date) {
    return DateFormatISO8601.format((Date)source);
  }
 else   if (source instanceof Number) {
    return ((Number)source).toString();
  }
 else   if (source instanceof byte[]) {
    return new String((byte[])source);
  }
 else {
    return source.toString();
  }
}","/** 
 * Convert an object to an locale neutral String value. For Date values we will convert to ISO8601 format.
 * @param source
 * @return
 * @throws BirtException
 */
public static String toLocaleNeutralString(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Time) {
    return ((Time)source).toString();
  }
 else   if (source instanceof java.sql.Date) {
    return ((java.sql.Date)source).toString();
  }
 else   if (source instanceof Timestamp) {
    return ((java.sql.Timestamp)source).toString();
  }
 else   if (source instanceof Date) {
    return DateFormatISO8601.format((Date)source);
  }
 else   if (source instanceof Number) {
    return ((Number)source).toString();
  }
 else {
    return toLimitedSizeString(source);
  }
}",0.939963614311704
65627,"/** 
 * Only for display usage
 * @param source
 * @return
 */
public static String toLimitedSizeString(Object source){
  if (source instanceof byte[]) {
    StringBuffer buf=new StringBuffer();
    final int strLength=8;
    byte[] sourceValue=(byte[])source;
    int length=Math.min(sourceValue.length,strLength);
    for (int i=0; i < length; i++) {
      buf.append(Integer.toHexString(sourceValue[i]).toUpperCase());
      buf.append(""String_Node_Str"");
    }
    if (sourceValue.length > strLength) {
      buf.append(""String_Node_Str"");
    }
    return buf.toString();
  }
 else {
    return source.toString();
  }
}","/** 
 * @param source
 * @return
 */
private static String toLimitedSizeString(Object source){
  if (source instanceof byte[]) {
    StringBuffer buf=new StringBuffer();
    final int strLength=8;
    byte[] sourceValue=(byte[])source;
    int length=Math.min(sourceValue.length,strLength);
    for (int i=0; i < length; i++) {
      buf.append(Integer.toHexString(sourceValue[i]).toUpperCase());
      buf.append(""String_Node_Str"");
    }
    if (sourceValue.length > strLength) {
      buf.append(""String_Node_Str"");
    }
    return buf.toString();
  }
 else {
    return source.toString();
  }
}",0.9697465249386754
65628,"/** 
 * @param source
 * @return byte array
 * @throws BirtException
 */
public static byte[] toBytes(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof byte[])   return (byte[])source;
 else   if (source instanceof Blob) {
    try {
      return ((Blob)source).getBytes((long)1,(int)((Blob)source).length());
    }
 catch (    SQLException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else   if (source instanceof String) {
    return ((String)source).getBytes();
  }
 else   throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}","/** 
 * @param source
 * @return byte array
 * @throws BirtException
 */
public static byte[] toBytes(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof byte[])   return (byte[])source;
 else   if (source instanceof Blob) {
    try {
      return ((Blob)source).getBytes((long)1,(int)((Blob)source).length());
    }
 catch (    SQLException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else   throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}",0.9379615952732644
65629,"public static Object readObject(DataInputStream dis,Class fieldType,ClassLoader classLoader) throws IOException, DataException {
  Object obj=null;
  if (dis.readByte() == 0) {
    obj=null;
    return obj;
  }
  if (fieldType.equals(Integer.class))   obj=Integer.valueOf(dis.readInt());
 else   if (fieldType.equals(Double.class))   obj=new Double(dis.readDouble());
 else   if (fieldType.equals(BigDecimal.class))   obj=new BigDecimal(dis.readUTF());
 else   if (fieldType.equals(Time.class))   obj=new Time(dis.readLong());
 else   if (fieldType.equals(Timestamp.class))   obj=new Timestamp(dis.readLong());
 else   if (fieldType.equals(java.sql.Date.class))   obj=new java.sql.Date(dis.readLong());
 else   if (Date.class.isAssignableFrom(fieldType))   obj=new Date(dis.readLong());
 else   if (fieldType.equals(Boolean.class))   obj=Boolean.valueOf(dis.readBoolean());
 else   if (fieldType.equals(String.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    int len=IOUtil.readInt(dis);
    if (len == 0) {
      obj=null;
    }
 else {
      byte[] bytes=new byte[len];
      dis.read(bytes);
      obj=bytes;
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    obj=IOUtil.readObject(dis,classLoader);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
  return obj;
}","public static Object readObject(DataInputStream dis,Class fieldType,ClassLoader classLoader) throws IOException, DataException {
  Object obj=null;
  if (dis.readByte() == 0) {
    obj=null;
    return obj;
  }
  if (fieldType.equals(Integer.class))   obj=Integer.valueOf(dis.readInt());
 else   if (fieldType.equals(Double.class))   obj=new Double(dis.readDouble());
 else   if (fieldType.equals(BigDecimal.class))   obj=new BigDecimal(dis.readUTF());
 else   if (fieldType.equals(Time.class))   obj=new Time(dis.readLong());
 else   if (fieldType.equals(Timestamp.class))   obj=new Timestamp(dis.readLong());
 else   if (fieldType.equals(java.sql.Date.class))   obj=new java.sql.Date(dis.readLong());
 else   if (Date.class.isAssignableFrom(fieldType))   obj=new Date(dis.readLong());
 else   if (fieldType.equals(Boolean.class))   obj=Boolean.valueOf(dis.readBoolean());
 else   if (fieldType.equals(String.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    int len=IOUtil.readInt(dis);
    if (len == 0) {
      obj=null;
    }
 else {
      byte[] bytes=new byte[len];
      dis.readFully(bytes);
      obj=bytes;
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    obj=IOUtil.readObject(dis,classLoader);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
  return obj;
}",0.9983989753442204
65630,"/** 
 * @param jsMeasureEvalFilterHelper
 * @return
 * @throws DataException 
 */
private String[] populateAggregationNames(List<String> allAggrNames,List jsMeasureEvalFilterHelper) throws DataException {
  String[] aggregationNames=new String[jsMeasureEvalFilterHelper.size()];
  for (int i=0; i < aggregationNames.length; i++) {
    IAggrMeasureFilterEvalHelper filterHelper=(IAggrMeasureFilterEvalHelper)jsMeasureEvalFilterHelper.get(i);
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filterHelper.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    aggregationNames[i]=(String)getIntersection(allAggrNames,bindingName);
    if (aggregationNames[i] == null) {
      aggregationNames[i]=OlapExpressionCompiler.getReferencedScriptObject(filterHelper.getExpression(),ScriptConstants.DATA_SET_BINDING_SCRIPTABLE);
      if (aggregationNames[i] == null && this.executor != null) {
        List bindings=this.executor.getCubeQueryDefinition().getBindings();
        List referencedNames=new ArrayList();
        for (int j=0; j < bindingName.size(); j++) {
          IBinding b=getBinding(bindingName.get(j).toString(),bindings);
          if (b != null && b.getAggregatOns().size() == 0 && b.getAggrFunction() == null) {
            referencedNames.addAll(ExpressionCompilerUtil.extractColumnExpression(b.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE));
          }
        }
        aggregationNames[i]=(String)getIntersection(allAggrNames,referencedNames);
      }
    }
  }
  return aggregationNames;
}","/** 
 * @param jsMeasureEvalFilterHelper
 * @return
 * @throws DataException 
 */
private String[] populateAggregationNames(List<String> allAggrNames,List jsMeasureEvalFilterHelper) throws DataException {
  String[] aggregationNames=new String[jsMeasureEvalFilterHelper.size()];
  for (int i=0; i < aggregationNames.length; i++) {
    IAggrMeasureFilterEvalHelper filterHelper=(IAggrMeasureFilterEvalHelper)jsMeasureEvalFilterHelper.get(i);
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filterHelper.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    aggregationNames[i]=(String)getIntersection(allAggrNames,bindingName);
    if (aggregationNames[i] == null) {
      aggregationNames[i]=OlapExpressionCompiler.getReferencedScriptObject(filterHelper.getExpression(),ScriptConstants.DATA_SET_BINDING_SCRIPTABLE);
      if (aggregationNames[i] == null && this.executor != null) {
        List bindingList=new ArrayList();
        ICubeQueryDefinition query=this.executor.getCubeQueryDefinition();
        bindingList.addAll(query.getBindings());
        if (query instanceof PreparedCubeQueryDefinition)         bindingList.addAll(((PreparedCubeQueryDefinition)query).getBindingsForNestAggregation());
        List referencedNames=new ArrayList();
        for (int j=0; j < bindingName.size(); j++) {
          IBinding b=getBinding(bindingName.get(j).toString(),bindingList);
          if (this.fetcher != null && this.fetcher.existBinding(bindingName.get(j).toString())) {
            referencedNames.addAll(ExpressionCompilerUtil.extractColumnExpression(b.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE));
          }
          if (b != null && b.getAggregatOns().size() == 0 && b.getAggrFunction() == null) {
            referencedNames.addAll(ExpressionCompilerUtil.extractColumnExpression(b.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE));
          }
        }
        aggregationNames[i]=(String)getIntersection(allAggrNames,referencedNames);
      }
    }
  }
  return aggregationNames;
}",0.8139275766016713
65631,"public int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1 && filter.updateAggregation())       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      if (existAggregationBinding(bindingName,this.defn.getBindings()))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      Set targetDimLevel=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
      if (!targetDimLevel.isEmpty() && targetDimLevel.size() == 1) {
        return CubeQueryExecutor.DIMENSION_FILTER;
      }
      List derivedBindingNameList=new ArrayList();
      for (int i=0; i < bindingName.size(); i++) {
        IBinding binding=getBinding(bindingName.get(i).toString(),this.defn.getBindings());
        if (binding != null) {
          List temp=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
          if (temp != null && temp.size() > 0)           derivedBindingNameList.addAll(temp);
        }
      }
      if (derivedBindingNameList.size() > 0) {
        if (existAggregationBinding(derivedBindingNameList,this.defn.getBindings()))         return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      }
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}","public int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1 && filter.updateAggregation())       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      List bindingList=new ArrayList();
      bindingList.addAll(this.defn.getBindings());
      if (this.defn instanceof PreparedCubeQueryDefinition)       bindingList.addAll(((PreparedCubeQueryDefinition)this.defn).getBindingsForNestAggregation());
      if (existAggregationBinding(bindingName,bindingList))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      Set targetDimLevel=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
      if (!targetDimLevel.isEmpty() && targetDimLevel.size() == 1) {
        return CubeQueryExecutor.DIMENSION_FILTER;
      }
      List derivedBindingNameList=new ArrayList();
      for (int i=0; i < bindingName.size(); i++) {
        IBinding binding=getBinding(bindingName.get(i).toString(),this.defn.getBindings());
        if (binding != null) {
          List temp=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
          if (temp != null && temp.size() > 0)           derivedBindingNameList.addAll(temp);
        }
      }
      if (derivedBindingNameList.size() > 0) {
        if (existAggregationBinding(derivedBindingNameList,this.defn.getBindings()))         return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      }
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}",0.9434848230756332
65632,"private void updateAnalysisTypes(DataSetViewData[] viewDatas,boolean updateFlag){
  for (int i=0; i < viewDatas.length; i++) {
    DataSetViewData item=viewDatas[i];
    ColumnHintHandle hint=findColumnHint(item);
    if (hint != null) {
      try {
        String analysis=hint.getAnalysis();
        if (analysis == null && getDefaultAnalysisForNullValue && updateFlag) {
          hint.setAnalysis(ExternalUIUtil.getDefaultAnalysisType(item.getDataTypeName()));
        }
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
      item.setAnalysis(hint.getAnalysis());
    }
  }
}","private void updateAnalysisTypes(DataSetViewData[] viewDatas,boolean updateFlag){
  for (int i=0; i < viewDatas.length; i++) {
    DataSetViewData item=viewDatas[i];
    ColumnHintHandle hint=findColumnHint(item);
    if (hint != null) {
      try {
        String analysis=hint.getAnalysis();
        if (analysis == null && getDefaultAnalysisForNullValue && updateFlag) {
          hint.setAnalysis(DataSetUIUtility.getDefaultAnalysisType(item.getDataTypeName()));
        }
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
      item.setAnalysis(hint.getAnalysis());
    }
  }
}",0.985483870967742
65633,"protected void setAnalysisTypeForColumn(){
  if (!isNewlyCreated) {
    DataSetHandle ds=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] viewData=DataSetProvider.getCurrentInstance().getColumns(ds,true);
    PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
    Iterator iter=handle.iterator();
    if (iter != null) {
      while (iter.hasNext()) {
        ColumnHintHandle hint=(ColumnHintHandle)iter.next();
        for (int i=0; i < viewData.length; i++) {
          if (viewData[i].getName().equals(hint.getColumnName())) {
            if (hint.getAnalysis() == null) {
              try {
                hint.setAnalysis(ExternalUIUtil.getDefaultAnalysisType(viewData[i].getDataTypeName()));
              }
 catch (              SemanticException e) {
                ExceptionHandler.handle(e);
              }
            }
            continue;
          }
        }
      }
    }
  }
}","protected void setAnalysisTypeForColumn(){
  if (!isNewlyCreated) {
    DataSetHandle ds=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] viewData=DataSetProvider.getCurrentInstance().getColumns(ds,true);
    PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
    Iterator iter=handle.iterator();
    if (iter != null) {
      while (iter.hasNext()) {
        ColumnHintHandle hint=(ColumnHintHandle)iter.next();
        for (int i=0; i < viewData.length; i++) {
          if (viewData[i].getName().equals(hint.getColumnName())) {
            if (hint.getAnalysis() == null) {
              try {
                hint.setAnalysis(DataSetUIUtility.getDefaultAnalysisType(viewData[i].getDataTypeName()));
              }
 catch (              SemanticException e) {
                ExceptionHandler.handle(e);
              }
            }
            continue;
          }
        }
      }
    }
  }
}",0.9904661016949152
65634,"protected String[] getCompatibleDataTypes(String dataType){
  String[] compatibleTypes=null;
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN,DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_TIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_JAVA_OBJECT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BLOB.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL};
  }
  if (compatibleTypes == null)   return new String[0];
  for (int i=0; i < compatibleTypes.length; i++) {
    compatibleTypes[i]=dataTypes.findChoice(compatibleTypes[i]).getDisplayName();
  }
  return compatibleTypes;
}","protected String[] getCompatibleDataTypes(String dataType){
  String[] compatibleTypes=null;
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN,DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_TIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_JAVA_OBJECT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL};
  }
  if (compatibleTypes == null)   return new String[0];
  for (int i=0; i < compatibleTypes.length; i++) {
    compatibleTypes[i]=dataTypes.findChoice(compatibleTypes[i]).getDisplayName();
  }
  return compatibleTypes;
}",0.9695017995832544
65635,"@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    ICancellable queryCanceller=new OdaQueryCanceller(odaStatement,session.getStopSign());
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped())     resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
    if (queryCanceller.collectException() != null) {
      if (!(queryCanceller.collectException().getCause() instanceof UnsupportedOperationException))       throw queryCanceller.collectException();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    ICancellable queryCanceller=new OdaQueryCanceller(odaStatement,session.getStopSign());
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped())     resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
    if (design != null) {
      List modelResultHints=design.getResultSetHints();
      resultMetadata=mergeResultHint(modelResultHints,resultMetadata);
    }
    if (queryCanceller.collectException() != null) {
      if (!(queryCanceller.collectException().getCause() instanceof UnsupportedOperationException))       throw queryCanceller.collectException();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.963134709019244
65636,"private IResultClass mergeResultHint(List modelResultHints,IResultClass meta){
  if (modelResultHints == null || modelResultHints.isEmpty())   return meta;
  IResultClass newResultClass;
  try {
    newResultClass=copyResultClass(meta);
  }
 catch (  Exception ex) {
    return meta;
  }
  int count=newResultClass.getFieldCount();
  try {
    for (int i=1; i <= count; i++) {
      String fieldName=newResultClass.getFieldName(i);
      Class odaType=newResultClass.getFieldMetaData(i).getDataType();
      for (int j=0; j < modelResultHints.size(); j++) {
        if (((IColumnDefinition)modelResultHints.get(j)).getColumnName().equals(fieldName)) {
          int apiType=((IColumnDefinition)modelResultHints.get(j)).getDataType();
          if (apiType > 0 && DataTypeUtil.toApiDataType(odaType) != apiType) {
            newResultClass.getFieldMetaData(i).setDataType(DataType.getClass(apiType));
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return newResultClass;
}","private IResultClass mergeResultHint(List modelResultHints,IResultClass meta){
  if (modelResultHints == null || modelResultHints.isEmpty())   return meta;
  IResultClass newResultClass;
  try {
    newResultClass=copyResultClass(meta);
  }
 catch (  Exception ex) {
    return meta;
  }
  boolean changed=false;
  int count=newResultClass.getFieldCount();
  try {
    for (int i=1; i <= count; i++) {
      String fieldName=newResultClass.getFieldName(i);
      Class odaType=newResultClass.getFieldMetaData(i).getDataType();
      for (int j=0; j < modelResultHints.size(); j++) {
        if (((IColumnDefinition)modelResultHints.get(j)).getColumnName().equals(fieldName)) {
          int apiType=((IColumnDefinition)modelResultHints.get(j)).getDataType();
          if (apiType > 0 && DataTypeUtil.toApiDataType(odaType) != apiType) {
            newResultClass.getFieldMetaData(i).setDataType(DataType.getClass(apiType));
            changed=true;
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  if (changed)   return newResultClass;
 else   return meta;
}",0.9588652482269504
65637,"private AggregationFunctionDefinition getSimpleFunction(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()) && !existReferenceDate)   return func;
 else   return null;
}","private AggregationFunctionDefinition getSimpleFunction(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()) && !existReferenceDate) {
    String mesureName=func.getMeasureName();
    try {
      MeasureInfo[] infos=dataSet4Aggregation.getMetaInfo().getMeasureInfos();
      for (      MeasureInfo info : infos) {
        if (info.getMeasureName().equals(mesureName) && ""String_Node_Str"".equals(func.getFunctionName()) && DataType.DOUBLE_TYPE == info.getDataType()) {
          return null;
        }
      }
    }
 catch (    Exception e) {
    }
    return func;
  }
 else   return null;
}",0.7330806713589605
65638,"private void updateAnalysisTypes(DataSetViewData[] viewDatas,boolean updateFlag){
  for (int i=0; i < viewDatas.length; i++) {
    DataSetViewData item=viewDatas[i];
    ColumnHintHandle hint=findColumnHint(item);
    if (hint != null) {
      try {
        String analysis=hint.getAnalysis();
        String defaultAnalysis=getDefaultAnalysisType(item.getName(),item.getDataTypeName());
        if (analysis == null && getDefaultAnalysisForNullValue && updateFlag) {
          hint.setAnalysis(defaultAnalysis);
        }
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
      item.setAnalysis(hint.getAnalysis());
    }
  }
}","private void updateAnalysisTypes(DataSetViewData[] viewDatas,boolean updateFlag){
  for (int i=0; i < viewDatas.length; i++) {
    DataSetViewData item=viewDatas[i];
    ColumnHintHandle hint=findColumnHint(item);
    if (hint != null) {
      try {
        String analysis=hint.getAnalysis();
        if (analysis == null && getDefaultAnalysisForNullValue && updateFlag) {
          hint.setAnalysis(ExternalUIUtil.getDefaultAnalysisType(item.getDataTypeName()));
        }
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
      item.setAnalysis(hint.getAnalysis());
    }
  }
}",0.8895800933125972
65639,"protected void setAnalysisTypeForColumn(){
  if (!isNewlyCreated) {
    DataSetHandle ds=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] viewData=DataSetProvider.getCurrentInstance().getColumns(ds,true);
    PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
    Iterator iter=handle.iterator();
    if (iter != null) {
      while (iter.hasNext()) {
        ColumnHintHandle hint=(ColumnHintHandle)iter.next();
        for (int i=0; i < viewData.length; i++) {
          if (viewData[i].getName().equals(hint.getColumnName())) {
            if (hint.getAnalysis() == null) {
              try {
                hint.setAnalysis(getDefaultAnalysisType(viewData[i].getName(),viewData[i].getDataTypeName()));
              }
 catch (              SemanticException e) {
              }
            }
            continue;
          }
        }
      }
    }
  }
}","protected void setAnalysisTypeForColumn(){
  if (!isNewlyCreated) {
    DataSetHandle ds=((DataSetEditor)getContainer()).getHandle();
    DataSetViewData[] viewData=DataSetProvider.getCurrentInstance().getColumns(ds,true);
    PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
    Iterator iter=handle.iterator();
    if (iter != null) {
      while (iter.hasNext()) {
        ColumnHintHandle hint=(ColumnHintHandle)iter.next();
        for (int i=0; i < viewData.length; i++) {
          if (viewData[i].getName().equals(hint.getColumnName())) {
            if (hint.getAnalysis() == null) {
              try {
                hint.setAnalysis(ExternalUIUtil.getDefaultAnalysisType(viewData[i].getDataTypeName()));
              }
 catch (              SemanticException e) {
                ExceptionHandler.handle(e);
              }
            }
            continue;
          }
        }
      }
    }
  }
}",0.9561925365062196
65640,"protected String[] getCompatibleDataTypes(String dataType){
  String[] compatibleTypes=null;
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN,DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_TIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_JAVA_OBJECT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL};
  }
  if (compatibleTypes == null)   return new String[0];
  for (int i=0; i < compatibleTypes.length; i++) {
    compatibleTypes[i]=dataTypes.findChoice(compatibleTypes[i]).getDisplayName();
  }
  return compatibleTypes;
}","protected String[] getCompatibleDataTypes(String dataType){
  String[] compatibleTypes=null;
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN,DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME,DesignChoiceConstants.COLUMN_DATA_TYPE_BLOB};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_TIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DATE,DesignChoiceConstants.COLUMN_DATA_TYPE_TIME};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_JAVA_OBJECT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL,DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL};
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BLOB.equals(dataType)) {
    compatibleTypes=new String[]{DesignChoiceConstants.COLUMN_DATA_TYPE_STRING};
  }
  if (compatibleTypes == null)   return new String[0];
  for (int i=0; i < compatibleTypes.length; i++) {
    compatibleTypes[i]=dataTypes.findChoice(compatibleTypes[i]).getDisplayName();
  }
  return compatibleTypes;
}",0.9614878827728724
65641,"/** 
 * Populate records to be retrieved when re-render resultSetTable
 * @param metaData
 * @param query
 * @throws BirtException
 */
private void populateRecords(IResultIterator iter){
  try {
    if (iter != null) {
      IResultMetaData meta=iter.getResultMetaData();
      if (meta.getColumnCount() > 0) {
        while (iter.next()) {
          CellValue[] record=new CellValue[meta.getColumnCount()];
          for (int n=0; n < record.length; n++) {
            CellValue cv=new CellValue();
            Object value=iter.getValue(meta.getColumnName(n + 1));
            String disp=null;
            if (value instanceof Number)             disp=value.toString();
 else             disp=iter.getString(meta.getColumnName(n + 1));
            cv.setDisplayValue(disp);
            cv.setRealValue(value);
            record[n]=cv;
          }
          recordList.add(record);
        }
      }
      setPromptLabelText();
      iter.close();
    }
  }
 catch (  RuntimeException e) {
    errorList.add(e);
  }
catch (  BirtException e) {
    errorList.add(e);
  }
}","/** 
 * Populate records to be retrieved when re-render resultSetTable
 * @param metaData
 * @param query
 * @throws BirtException
 */
private void populateRecords(IResultIterator iter){
  try {
    if (iter != null) {
      IResultMetaData meta=iter.getResultMetaData();
      if (meta.getColumnCount() > 0) {
        while (iter.next()) {
          CellValue[] record=new CellValue[meta.getColumnCount()];
          for (int n=0; n < record.length; n++) {
            CellValue cv=new CellValue();
            Object value=iter.getValue(meta.getColumnName(n + 1));
            String disp=null;
            if (value instanceof Number)             disp=value.toString();
 else             if (value instanceof byte[]) {
              disp=DataTypeUtil.toLimitedSizeString(value);
            }
 else             disp=iter.getString(meta.getColumnName(n + 1));
            cv.setDisplayValue(disp);
            cv.setRealValue(value);
            record[n]=cv;
          }
          recordList.add(record);
        }
      }
      setPromptLabelText();
      iter.close();
    }
  }
 catch (  RuntimeException e) {
    errorList.add(e);
  }
catch (  BirtException e) {
    errorList.add(e);
  }
}",0.9458388375165124
65642,"/** 
 * Convert an object to an locale neutral String value. For Date values we will convert to ISO8601 format.
 * @param source
 * @return
 * @throws BirtException
 */
public static String toLocaleNeutralString(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Time) {
    return ((Time)source).toString();
  }
 else   if (source instanceof java.sql.Date) {
    return ((java.sql.Date)source).toString();
  }
 else   if (source instanceof Timestamp) {
    return ((java.sql.Timestamp)source).toString();
  }
 else   if (source instanceof Date) {
    return DateFormatISO8601.format((Date)source);
  }
 else   if (source instanceof Number) {
    return ((Number)source).toString();
  }
 else {
    return toLimitedSizeString(source);
  }
}","/** 
 * Convert an object to an locale neutral String value. For Date values we will convert to ISO8601 format.
 * @param source
 * @return
 * @throws BirtException
 */
public static String toLocaleNeutralString(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Time) {
    return ((Time)source).toString();
  }
 else   if (source instanceof java.sql.Date) {
    return ((java.sql.Date)source).toString();
  }
 else   if (source instanceof Timestamp) {
    return ((java.sql.Timestamp)source).toString();
  }
 else   if (source instanceof Date) {
    return DateFormatISO8601.format((Date)source);
  }
 else   if (source instanceof Number) {
    return ((Number)source).toString();
  }
 else   if (source instanceof byte[]) {
    return new String((byte[])source);
  }
 else {
    return source.toString();
  }
}",0.939963614311704
65643,"/** 
 * @param source
 * @return
 */
private static String toLimitedSizeString(Object source){
  if (source instanceof byte[]) {
    StringBuffer buf=new StringBuffer();
    final int strLength=8;
    byte[] sourceValue=(byte[])source;
    int length=Math.min(sourceValue.length,strLength);
    for (int i=0; i < length; i++) {
      buf.append(Integer.toHexString(sourceValue[i]).toUpperCase());
      buf.append(""String_Node_Str"");
    }
    if (sourceValue.length > strLength) {
      buf.append(""String_Node_Str"");
    }
    return buf.toString();
  }
 else {
    return source.toString();
  }
}","/** 
 * Only for display usage
 * @param source
 * @return
 */
public static String toLimitedSizeString(Object source){
  if (source instanceof byte[]) {
    StringBuffer buf=new StringBuffer();
    final int strLength=8;
    byte[] sourceValue=(byte[])source;
    int length=Math.min(sourceValue.length,strLength);
    for (int i=0; i < length; i++) {
      buf.append(Integer.toHexString(sourceValue[i]).toUpperCase());
      buf.append(""String_Node_Str"");
    }
    if (sourceValue.length > strLength) {
      buf.append(""String_Node_Str"");
    }
    return buf.toString();
  }
 else {
    return source.toString();
  }
}",0.9697465249386754
65644,"/** 
 * @param source
 * @return byte array
 * @throws BirtException
 */
public static byte[] toBytes(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof byte[])   return (byte[])source;
 else   if (source instanceof Blob) {
    try {
      return ((Blob)source).getBytes((long)1,(int)((Blob)source).length());
    }
 catch (    SQLException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else   throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}","/** 
 * @param source
 * @return byte array
 * @throws BirtException
 */
public static byte[] toBytes(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof byte[])   return (byte[])source;
 else   if (source instanceof Blob) {
    try {
      return ((Blob)source).getBytes((long)1,(int)((Blob)source).length());
    }
 catch (    SQLException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else   if (source instanceof String) {
    return ((String)source).getBytes();
  }
 else   throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}",0.9379615952732644
65645,"public String getPattern(){
  String numStr=""String_Node_Str"";
  String decStr=""String_Node_Str"";
  String positivePatt=numStr;
  String negativePatt=null;
  String pattern;
  if (useSep) {
    positivePatt=""String_Node_Str"";
  }
  decStr=DEUtil.getDecmalStr(decPlaces);
  if (decStr != ""String_Node_Str"") {
    positivePatt=positivePatt + ""String_Node_Str"" + decStr;
  }
  if (useBracket) {
    negativePatt=""String_Node_Str"" + positivePatt + ""String_Node_Str"";
  }
  if (symbol.length() != 0 && !symbol.equalsIgnoreCase(FormatNumberPattern.TEXT_CURRENCY_SYMBOL_NONE)) {
    if (symPos.equalsIgnoreCase(FormatNumberPattern.SYMBOL_POSITION_BEFORE)) {
      positivePatt=symbol + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + positivePatt;
      if (negativePatt != null) {
        negativePatt=symbol + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + negativePatt;
      }
    }
 else     if (symPos.equalsIgnoreCase(FormatNumberPattern.SYMBOL_POSITION_AFTER)) {
      positivePatt=positivePatt + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + symbol;
      if (negativePatt != null) {
        negativePatt=negativePatt + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + symbol;
      }
    }
  }
  if (negativePatt != null) {
    pattern=positivePatt + ""String_Node_Str"" + negativePatt;
  }
 else {
    pattern=positivePatt;
  }
  pattern=applyRoundingMode(pattern);
  return pattern;
}","public String getPattern(){
  String numStr=""String_Node_Str"";
  String decStr=""String_Node_Str"";
  String positivePatt=numStr;
  String negativePatt=null;
  String pattern;
  if (useSep) {
    positivePatt=""String_Node_Str"";
  }
  decStr=DEUtil.getDecmalStr(decPlaces);
  if (!StringUtil.isEmpty(decStr)) {
    positivePatt=positivePatt + ""String_Node_Str"" + decStr;
  }
  if (useBracket) {
    negativePatt=""String_Node_Str"" + positivePatt + ""String_Node_Str"";
  }
  if (symbol.length() != 0 && !symbol.equalsIgnoreCase(FormatNumberPattern.TEXT_CURRENCY_SYMBOL_NONE)) {
    if (symPos.equalsIgnoreCase(FormatNumberPattern.SYMBOL_POSITION_BEFORE)) {
      positivePatt=symbol + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + positivePatt;
      if (negativePatt != null) {
        negativePatt=symbol + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + negativePatt;
      }
    }
 else     if (symPos.equalsIgnoreCase(FormatNumberPattern.SYMBOL_POSITION_AFTER)) {
      positivePatt=positivePatt + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + symbol;
      if (negativePatt != null) {
        negativePatt=negativePatt + (getUseSpace() ? ""String_Node_Str"" : ""String_Node_Str"") + symbol;
      }
    }
  }
  if (negativePatt != null) {
    pattern=positivePatt + ""String_Node_Str"" + negativePatt;
  }
 else {
    pattern=positivePatt;
  }
  pattern=applyRoundingMode(pattern);
  return pattern;
}",0.9853044086773968
65646,"protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendedData) throws Exception {
  Assert.isLegal(ReportDesignConstants.ROW_ELEMENT.equals(type));
  TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getRoot(model));
  if (position != InsertAction.CURRENT) {
    int rowNumber=HandleAdapterFactory.getInstance().getRowHandleAdapter(model).getRowNumber();
    if (position == InsertAction.ABOVE) {
      adapter.insertRow(-1,rowNumber);
    }
 else     if (position == InsertAction.BELOW) {
      adapter.insertRow(1,rowNumber);
    }
 else {
      return false;
    }
  }
 else {
    adapter.insertRowInSlotHandle(slotHandle.getSlotID());
  }
  return true;
}","protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendedData) throws Exception {
  Assert.isLegal(ReportDesignConstants.ROW_ELEMENT.equals(type));
  TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getRoot(model));
  if (!StringUtil.isEqual(position,InsertAction.CURRENT)) {
    int rowNumber=HandleAdapterFactory.getInstance().getRowHandleAdapter(model).getRowNumber();
    if (StringUtil.isEqual(position,InsertAction.ABOVE)) {
      adapter.insertRow(-1,rowNumber);
    }
 else     if (StringUtil.isEqual(position,InsertAction.BELOW)) {
      adapter.insertRow(1,rowNumber);
    }
 else {
      return false;
    }
  }
 else {
    adapter.insertRowInSlotHandle(slotHandle.getSlotID());
  }
  return true;
}",0.9206762028608584
65647,"/** 
 * @param composite
 */
private void createMeasureField(Composite composite){
  new Label(composite,SWT.NONE).setText(LABEL_MEASURE);
  measure=new Text(composite,SWT.SINGLE | SWT.BORDER);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  gridData.horizontalSpan=2;
  measure.setLayoutData(gridData);
  measure.setFont(composite.getFont());
  if (measureData != null && measureData != ""String_Node_Str"") {
    measure.setText(NumberUtil.double2LocaleNum(((Double)measureData).doubleValue()));
  }
  measure.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      boolean doit=false;
      char eChar=e.character;
      System.out.print(eChar + 0);
      String validChars=""String_Node_Str"";
      if (e.keyCode == SWT.DEL || validChars.indexOf(eChar) >= 0) {
        doit=true;
      }
      e.doit=doit;
    }
  }
);
}","/** 
 * @param composite
 */
private void createMeasureField(Composite composite){
  new Label(composite,SWT.NONE).setText(LABEL_MEASURE);
  measure=new Text(composite,SWT.SINGLE | SWT.BORDER);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  gridData.horizontalSpan=2;
  measure.setLayoutData(gridData);
  measure.setFont(composite.getFont());
  if (measureData != null && !measureData.equals(""String_Node_Str"")) {
    measure.setText(NumberUtil.double2LocaleNum(((Double)measureData).doubleValue()));
  }
  measure.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      boolean doit=false;
      char eChar=e.character;
      System.out.print(eChar + 0);
      String validChars=""String_Node_Str"";
      if (e.keyCode == SWT.DEL || validChars.indexOf(eChar) >= 0) {
        doit=true;
      }
      e.doit=doit;
    }
  }
);
}",0.9807256235827664
65648,"public boolean equals(Object obj){
  if (!(obj instanceof SubTotalInfo)) {
    return false;
  }
  SubTotalInfo temp=(SubTotalInfo)obj;
  return temp.getLevel() == level && temp.getAggregateOnMeasureName().equals(measureQualifiedName) && temp.getFunction() == function && temp.isAggregationOn() == aggregationOn && ((temp == null && expectedView == null) || temp.getExpectedView().equals(expectedView)) && temp.getPosition().equals(levelView.getAggregationHeaderLocation());
}","public boolean equals(Object obj){
  if (!(obj instanceof SubTotalInfo)) {
    return false;
  }
  SubTotalInfo temp=(SubTotalInfo)obj;
  return temp.getLevel() == level && StringUtil.isEqual(temp.getAggregateOnMeasureName(),measureQualifiedName) && StringUtil.isEqual(temp.getFunction(),function) && temp.isAggregationOn() == aggregationOn && StringUtil.isEqual(temp.getExpectedView(),expectedView) && temp.getPosition().equals(levelView.getAggregationHeaderLocation());
}",0.6596417281348789
65649,"public boolean equals(Object obj){
  if (!(obj instanceof MeasureInfo)) {
    return false;
  }
  MeasureInfo temp=(MeasureInfo)obj;
  return temp.getMeasureName().equals(measureName) && temp.isShow() == isShow && temp.getExpectedView() == expectedView;
}","public boolean equals(Object obj){
  if (!(obj instanceof MeasureInfo)) {
    return false;
  }
  MeasureInfo temp=(MeasureInfo)obj;
  return StringUtil.isEqual(temp.getMeasureName(),measureName) && temp.isShow() == isShow && StringUtil.isEqual(temp.getExpectedView(),expectedView);
}",0.901669758812616
65650,"@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null && !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  if (extendedHandle.getExtensionName().equals(""String_Node_Str"")) {
    try {
      reportHandle=(CrosstabReportItemHandle)extendedHandle.getReportItem();
    }
 catch (    ExtendedElementException e) {
      return false;
    }
  }
 else {
    measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
    if (measureViewHandle == null) {
      return false;
    }
    reportHandle=measureViewHandle.getCrosstab();
  }
  if (DEUtil.isReferenceElement(reportHandle.getCrosstabHandle())) {
    return false;
  }
  CubeHandle cube=reportHandle.getCube();
  if (cube == null) {
    return false;
  }
  if (cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP) == null) {
    return false;
  }
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null || !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  if (extendedHandle.getExtensionName().equals(""String_Node_Str"")) {
    try {
      reportHandle=(CrosstabReportItemHandle)extendedHandle.getReportItem();
    }
 catch (    ExtendedElementException e) {
      return false;
    }
  }
 else {
    measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
    if (measureViewHandle == null) {
      return false;
    }
    reportHandle=measureViewHandle.getCrosstab();
  }
  if (DEUtil.isReferenceElement(reportHandle.getCrosstabHandle())) {
    return false;
  }
  CubeHandle cube=reportHandle.getCube();
  if (cube == null) {
    return false;
  }
  if (cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP) == null) {
    return false;
  }
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9990480723465016
65651,"public void setAction(String actionID,IAction action){
  super.setAction(actionID,action);
  if (action.getId() == null) {
    action.setId(actionID);
  }
  getActionRegistry().registerAction(action);
}","public void setAction(String actionID,IAction action){
  super.setAction(actionID,action);
  if (action != null) {
    if (action.getId() == null) {
      action.setId(actionID);
    }
    getActionRegistry().registerAction(action);
  }
}",0.9181818181818182
65652,"public void setAction(String actionID,IAction action){
  super.setAction(actionID,action);
  if (action.getId() == null) {
    action.setId(actionID);
  }
  getActionRegistry().registerAction(action);
}","public void setAction(String actionID,IAction action){
  super.setAction(actionID,action);
  if (action != null) {
    if (action.getId() == null) {
      action.setId(actionID);
    }
    getActionRegistry().registerAction(action);
  }
}",0.9181818181818182
65653,"/** 
 * @param cacheID
 * @throws BirtException
 */
public void clearCache(String cacheID) throws BirtException {
  DataSetCacheManager dscManager=this.getSession().getDataSetCacheManager();
  if (dscManager == null)   return;
 else   dscManager.clearCache(cacheID);
}","/** 
 * @param cacheID
 * @throws BirtException
 */
public void clearCache(String cacheID) throws BirtException {
  DataSetCacheManager dscManager=this.getSession().getDataSetCacheManager();
  if (dscManager == null || cacheID == null)   return;
 else   dscManager.clearCache(cacheID);
}",0.9657657657657658
65654,"/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  String processName=java.lang.management.ManagementFactory.getRuntimeMXBean().getName();
  long pid=Long.parseLong(processName.split(""String_Node_Str"")[0]);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + pid+ ""String_Node_Str""+ engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  if (engine.getContext().getClassLoader() != null) {
    classLoaderHolder.set(engine.getContext().getClassLoader());
  }
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
      saveGeneralACL();
      if (emtpryIDStream != null)       try {
        emtpryIDStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  this.loadGeneralACL();
  int currentQueryID=0;
  if (engine.getContext().getDocReader() != null) {
    try {
      if (engine.getContext().getDocReader().exists(DataEngineContext.QUERY_STARTING_ID)) {
        RAInputStream stream=engine.getContext().getDocReader().getInputStream(DataEngineContext.QUERY_STARTING_ID);
        currentQueryID=stream.readInt();
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  this.queryResultIDUtil=new QueryResultIDUtil(currentQueryID);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  StringBuffer buffer=new StringBuffer();
  buffer.append(engine.getContext().getTmpdir());
  buffer.append(""String_Node_Str"");
  String processName=java.lang.management.ManagementFactory.getRuntimeMXBean().getName();
  buffer.append(Integer.toHexString(processName.hashCode()));
  buffer.append(""String_Node_Str"");
  buffer.append(Integer.toHexString(engine.hashCode()));
  buffer.append(""String_Node_Str"");
  buffer.append(getCount());
  buffer.append(File.separator);
  tempDir=buffer.toString();
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  if (engine.getContext().getClassLoader() != null) {
    classLoaderHolder.set(engine.getContext().getClassLoader());
  }
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
      saveGeneralACL();
      if (emtpryIDStream != null)       try {
        emtpryIDStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  this.loadGeneralACL();
  int currentQueryID=0;
  if (engine.getContext().getDocReader() != null) {
    try {
      if (engine.getContext().getDocReader().exists(DataEngineContext.QUERY_STARTING_ID)) {
        RAInputStream stream=engine.getContext().getDocReader().getInputStream(DataEngineContext.QUERY_STARTING_ID);
        currentQueryID=stream.readInt();
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  this.queryResultIDUtil=new QueryResultIDUtil(currentQueryID);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.8989690721649485
65655,"/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs,int requiredCapability){
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      boolean reusable=cacheObject.isCachedDataReusable(requiredCapability);
      if (!reusable) {
        cacheObject.release();
        cacheMap.remove(dsAndDs);
      }
      return reusable;
    }
 else {
      return false;
    }
  }
}","/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs,int requiredCapability){
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      boolean reusable=cacheObject.isCachedDataReusable(requiredCapability);
      if (!reusable) {
        cacheObject.release();
        tempDataSetCacheMap.remove(dsAndDs);
        cacheMap.remove(dsAndDs);
      }
      return reusable;
    }
 else {
      return false;
    }
  }
}",0.9546769527483124
65656,"public String getDefaultAnalysisType(String columnName,String dataType){
  String defaultAnalysisType=null;
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL)|| DesignChoiceConstants.COLUMN_DATA_TYPE_JAVA_OBJECT.equals(dataType)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_MEASURE;
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_TIME.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType)|| DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)|| DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(dataType)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
  }
  return defaultAnalysisType;
}","public String getDefaultAnalysisType(String columnName,String dataType){
  String defaultAnalysisType=null;
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL)|| DesignChoiceConstants.COLUMN_DATA_TYPE_JAVA_OBJECT.equals(dataType)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_MEASURE;
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_TIME.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType)|| DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)|| DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(dataType)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BLOB.equals(dataType)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE;
  }
  return defaultAnalysisType;
}",0.9226830517153096
65657,"/** 
 * Update UI values according to specified trigger model values.
 * @param trigger
 */
private void updateUI(Trigger trigger){
  if (trigger == null) {
    initUI();
    return;
  }
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    this.slValues.topControl=multiHyperlinksComposite;
  ActionValue value=trigger.getAction().getValue();
if (value instanceof MultiURLValues) {
  MultiURLValues urlValues=(MultiURLValues)trigger.getAction().getValue();
  multiHyperlinksComposite.populateUIValues(urlValues);
}
 else if (value instanceof URLValue) {
  ChartAdapter.beginIgnoreNotifications();
  MultiURLValues muv=MultiURLValuesImpl.create();
  URLValue uv=(URLValue)value;
  org.eclipse.birt.chart.model.component.Label l=LabelImpl.create();
  l.setCaption(TextImpl.create(Messages.getString(""String_Node_Str"")));
  uv.setLabel(l);
  muv.getURLValues().add(uv);
  muv.setTooltip(uv.getTooltip());
  muv.eAdapters().addAll(value.eAdapters());
  trigger.getAction().setValue(muv);
  multiHyperlinksComposite.populateUIValues(muv);
  ChartAdapter.endIgnoreNotifications();
}
break;
case INDEX_2_TOOLTIP:
this.slValues.topControl=cmpTooltip;
TooltipValue tooltipValue=(TooltipValue)trigger.getAction().getValue();
btnTooltipExpBuilder.setExpression(tooltipValue.getText());
break;
case INDEX_3_TOOGLE_VISABILITY:
this.slValues.topControl=cmpVisiblity;
break;
case INDEX_4_SCRIPT:
this.slValues.topControl=cmpScript;
ScriptValue scriptValue=(ScriptValue)trigger.getAction().getValue();
btnScriptExpBuilder.setExpression(scriptValue.getScript());
break;
case INDEX_5_HIGHLIGHT:
this.slValues.topControl=cmpHighlight;
break;
case INDEX_6_CALLBACK:
this.slValues.topControl=cmpCallback;
break;
case INDEX_7_TOOGLE_DATAPOINT:
this.slValues.topControl=cmpDPVisibility;
break;
default :
this.slValues.topControl=cmpDefault;
break;
}
grpValue.layout();
}","/** 
 * Update UI values according to specified trigger model values.
 * @param trigger
 */
private void updateUI(Trigger trigger){
  if (trigger == null) {
    initUI();
    return;
  }
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    this.slValues.topControl=multiHyperlinksComposite;
  ActionValue value=trigger.getAction().getValue();
if (value instanceof MultiURLValues) {
  MultiURLValues urlValues=(MultiURLValues)trigger.getAction().getValue();
  multiHyperlinksComposite.populateUIValues(urlValues);
}
 else if (value instanceof URLValue) {
  ChartAdapter.beginIgnoreNotifications();
  MultiURLValues muv=MultiURLValuesImpl.create();
  URLValue uv=(URLValue)value;
  org.eclipse.birt.chart.model.component.Label l=LabelImpl.create();
  l.setCaption(TextImpl.create(Messages.getString(""String_Node_Str"")));
  uv.setLabel(l);
  muv.getURLValues().add(uv);
  muv.setTooltip(uv.getTooltip());
  muv.eAdapters().addAll(value.eAdapters());
  trigger.getAction().setValue(muv);
  multiHyperlinksComposite.populateUIValues(muv);
  ChartAdapter.endIgnoreNotifications();
}
 else {
  ChartAdapter.beginIgnoreNotifications();
  MultiURLValues urlValues=MultiURLValuesImpl.create();
  trigger.getAction().setValue(urlValues);
  urlValues.eAdapters().addAll(trigger.eAdapters());
  multiHyperlinksComposite.populateUIValues(urlValues);
  ChartAdapter.endIgnoreNotifications();
}
break;
case INDEX_2_TOOLTIP:
this.slValues.topControl=cmpTooltip;
TooltipValue tooltipValue=(TooltipValue)trigger.getAction().getValue();
btnTooltipExpBuilder.setExpression(tooltipValue.getText());
break;
case INDEX_3_TOOGLE_VISABILITY:
this.slValues.topControl=cmpVisiblity;
break;
case INDEX_4_SCRIPT:
this.slValues.topControl=cmpScript;
ScriptValue scriptValue=(ScriptValue)trigger.getAction().getValue();
btnScriptExpBuilder.setExpression(scriptValue.getScript());
break;
case INDEX_5_HIGHLIGHT:
this.slValues.topControl=cmpHighlight;
break;
case INDEX_6_CALLBACK:
this.slValues.topControl=cmpCallback;
break;
case INDEX_7_TOOGLE_DATAPOINT:
this.slValues.topControl=cmpDPVisibility;
break;
default :
this.slValues.topControl=cmpDefault;
break;
}
grpValue.layout();
}",0.9246882793017456
65658,"/** 
 * Returns the trigger instance according to current UI values.
 * @return trigger from UI values
 */
public Trigger getTrigger(){
  if (cmbActionType.getSelectionIndex() == 0) {
    return null;
  }
  ActionValue value=null;
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    value=multiHyperlinksComposite.getURLValues();
  break;
case INDEX_2_TOOLTIP:
value=TooltipValueImpl.create(200,""String_Node_Str"");
((TooltipValue)value).setText(btnTooltipExpBuilder.getExpression());
break;
case INDEX_3_TOOGLE_VISABILITY:
value=AttributeFactory.eINSTANCE.createSeriesValue();
((SeriesValue)value).setName(""String_Node_Str"");
break;
case INDEX_4_SCRIPT:
value=AttributeFactory.eINSTANCE.createScriptValue();
((ScriptValue)value).setScript(btnScriptExpBuilder.getExpression());
break;
case INDEX_5_HIGHLIGHT:
value=AttributeFactory.eINSTANCE.createSeriesValue();
((SeriesValue)value).setName(""String_Node_Str"");
break;
case INDEX_7_TOOGLE_DATAPOINT:
value=AttributeFactory.eINSTANCE.createSeriesValue();
((SeriesValue)value).setName(""String_Node_Str"");
default :
break;
}
Action action=ActionImpl.create(ActionType.getByName(LiteralHelper.actionTypeSet.getNameByDisplayName(cmbActionType.getText())),value);
return TriggerImpl.create(TriggerCondition.getByName(LiteralHelper.triggerConditionSet.getNameByDisplayName(lastTriggerType == null ? cmbTriggerType.getText() : lastTriggerType)),action);
}","/** 
 * Returns the trigger instance according to current UI values.
 * @return trigger from UI values
 */
public Trigger getTrigger(){
  if (cmbActionType.getSelectionIndex() == 0) {
    return null;
  }
  ActionValue value=null;
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    value=multiHyperlinksComposite.getURLValues().copyInstance();
  break;
case INDEX_2_TOOLTIP:
value=TooltipValueImpl.create(200,""String_Node_Str"");
((TooltipValue)value).setText(btnTooltipExpBuilder.getExpression());
break;
case INDEX_3_TOOGLE_VISABILITY:
value=AttributeFactory.eINSTANCE.createSeriesValue();
((SeriesValue)value).setName(""String_Node_Str"");
break;
case INDEX_4_SCRIPT:
value=AttributeFactory.eINSTANCE.createScriptValue();
((ScriptValue)value).setScript(btnScriptExpBuilder.getExpression());
break;
case INDEX_5_HIGHLIGHT:
value=AttributeFactory.eINSTANCE.createSeriesValue();
((SeriesValue)value).setName(""String_Node_Str"");
break;
case INDEX_7_TOOGLE_DATAPOINT:
value=AttributeFactory.eINSTANCE.createSeriesValue();
((SeriesValue)value).setName(""String_Node_Str"");
default :
break;
}
Action action=ActionImpl.create(ActionType.getByName(LiteralHelper.actionTypeSet.getNameByDisplayName(cmbActionType.getText())),value);
return TriggerImpl.create(TriggerCondition.getByName(LiteralHelper.triggerConditionSet.getNameByDisplayName(lastTriggerType == null ? cmbTriggerType.getText() : lastTriggerType)),action);
}",0.9946865037194474
65659,"protected AxisType getAxisType(DataPointComponentType dpct){
  if (dpct == DataPointComponentType.BASE_VALUE_LITERAL) {
    if (context.getModel() instanceof ChartWithAxes) {
      ChartWithAxes chart=(ChartWithAxes)context.getModel();
      if (chart.getPrimaryBaseAxes().length > 0) {
        return chart.getPrimaryBaseAxes()[0].getType();
      }
    }
  }
 else   if (dpct == DataPointComponentType.ORTHOGONAL_VALUE_LITERAL) {
    if (context.getModel() instanceof ChartWithAxes) {
      ChartWithAxes chart=(ChartWithAxes)context.getModel();
      if (chart.getPrimaryBaseAxes().length > 0) {
        Axis ax=chart.getPrimaryOrthogonalAxis(chart.getPrimaryBaseAxes()[0]);
        if (ax != null) {
          return ax.getType();
        }
      }
    }
  }
 else   if (dpct == DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL) {
    return AxisType.LOGARITHMIC_LITERAL;
  }
  return null;
}","protected AxisType getAxisType(DataPointComponentType dpct){
  if (dpct == DataPointComponentType.BASE_VALUE_LITERAL) {
    if (context.getModel() instanceof ChartWithAxes) {
      ChartWithAxes chart=(ChartWithAxes)context.getModel();
      if (chart.getPrimaryBaseAxes().length > 0) {
        return chart.getPrimaryBaseAxes()[0].getType();
      }
    }
  }
 else   if (dpct == DataPointComponentType.ORTHOGONAL_VALUE_LITERAL) {
    if (context.getModel() instanceof ChartWithAxes) {
      Axis ax=ChartUtil.getAxisFromSeries(series);
      if (ax == null) {
        ChartWithAxes chart=(ChartWithAxes)context.getModel();
        if (chart.getPrimaryBaseAxes().length > 0) {
          ax=chart.getPrimaryOrthogonalAxis(chart.getPrimaryBaseAxes()[0]);
        }
      }
      return ax.getType();
    }
  }
 else   if (dpct == DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL) {
    return AxisType.LOGARITHMIC_LITERAL;
  }
  return null;
}",0.9181916038751344
65660,"public IEditorInput getEditorInput(){
  return instance.getEditorInput();
}","public IEditorInput getEditorInput(){
  if (instance != null) {
    return instance.getEditorInput();
  }
  return null;
}",0.7614213197969543
65661,"private static NumberFormat createDefaultNumberFormat(Number value,ULocale locale){
  NumberFormat df;
  double doubleValue=Math.abs(value.doubleValue());
  if (ChartUtil.mathGT(doubleValue,0d) && ChartUtil.mathLT(doubleValue,1d)) {
    df=new DecimalFormat(DECIMAL_FORMAT_PATTERN,new DecimalFormatSymbols(locale));
    ((DecimalFormat)df).setSignificantDigitsUsed(true);
    ((DecimalFormat)df).setMaximumSignificantDigits(3);
  }
 else {
    df=DecimalFormat.getInstance(locale);
  }
  return df;
}","private static NumberFormat createDefaultNumberFormat(Number value,ULocale locale){
  NumberFormat df;
  double doubleValue=Math.abs(value.doubleValue());
  if (ChartUtil.mathGT(doubleValue,0d) && ChartUtil.mathLT(doubleValue,1d)) {
    df=new DecimalFormat(DECIMAL_FORMAT_PATTERN,new DecimalFormatSymbols(locale));
  }
 else {
    df=DecimalFormat.getInstance(locale);
  }
  return df;
}",0.7387387387387387
65662,"public void testConstructorPrecise(){
  Fraction f=FractionApproximator.getExactFraction(0.02);
  assertEquals(f.getNumerator(),1);
  assertEquals(f.getDenominator(),50);
  f=FractionApproximator.getExactFraction(0.333333333333);
  assertEquals(f.getNumerator(),333);
  assertEquals(f.getDenominator(),1000);
  f=FractionApproximator.getExactFraction(-0.333333333333);
  assertEquals(f.getNumerator(),-333);
  assertEquals(f.getDenominator(),1000);
  f=FractionApproximator.getExactFraction(-0.33);
  assertEquals(f.getNumerator(),-33);
  assertEquals(f.getDenominator(),100);
}","public void testConstructorPrecise(){
  Fraction f=FractionApproximator.getExactFraction(0.02);
  assertEquals(f.getNumerator(),1);
  assertEquals(f.getDenominator(),50);
  f=FractionApproximator.getExactFraction(0.333333333333);
  assertEquals(f.getNumerator(),33333333);
  assertEquals(f.getDenominator(),100000000);
  f=FractionApproximator.getExactFraction(-0.333333333333);
  assertEquals(f.getNumerator(),-33333333);
  assertEquals(f.getDenominator(),100000000);
  f=FractionApproximator.getExactFraction(-0.33);
  assertEquals(f.getNumerator(),-33);
  assertEquals(f.getDenominator(),100);
}",0.9829931972789115
65663,"/** 
 * construction
 */
CacheMapManager(boolean useJVMLevelCache){
  if (useJVMLevelCache) {
    cacheMap=JVMLevelCacheMap;
  }
 else {
    cacheMap=new HashMap();
  }
  tempDataSetCacheMap=new HashMap<DataSourceAndDataSet,IDataSetCacheObject>();
}","/** 
 * construction
 */
CacheMapManager(boolean useJVMLevelCache){
  this.useJVMLevelCache=useJVMLevelCache;
  if (useJVMLevelCache) {
    cacheMap=JVMLevelCacheMap;
  }
 else {
    cacheMap=new HashMap();
  }
  tempDataSetCacheMap=new HashMap<DataSourceAndDataSet,IDataSetCacheObject>();
}",0.9222222222222224
65664,"/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs,int requiredCapability){
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      boolean reusable=cacheObject.isCachedDataReusable(requiredCapability);
      if (!reusable) {
        cacheObject.release();
        tempDataSetCacheMap.remove(dsAndDs);
        cacheMap.remove(dsAndDs);
      }
      return reusable;
    }
 else {
      return false;
    }
  }
}","/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs,int requiredCapability){
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      boolean reusable=cacheObject.isCachedDataReusable(requiredCapability);
      if (!reusable) {
        if (useJVMLevelCache) {
synchronized (lockedDataSetCacheMap) {
            if (lockedDataSetCacheMap.containsKey(dsAndDs)) {
              try {
                lockedDataSetCacheMap.wait(60000);
              }
 catch (              InterruptedException e) {
              }
              lockedDataSetCacheMap.remove(dsAndDs);
            }
          }
        }
        cacheObject.release();
        tempDataSetCacheMap.remove(dsAndDs);
        cacheMap.remove(dsAndDs);
      }
 else       if (this.useJVMLevelCache) {
        if (!lockedDataSetCacheMap.containsKey(dsAndDs)) {
          lockedDataSetCacheMap.put(dsAndDs,0);
        }
      }
      return reusable;
    }
 else {
      return false;
    }
  }
}",0.6428130783466995
65665,"/** 
 * @return
 */
IDataSetCacheObject getSavedCacheObject(DataSourceAndDataSet dsAndDs){
  return tempDataSetCacheMap.get(dsAndDs);
}","/** 
 * @return
 */
IDataSetCacheObject getSavedCacheObject(DataSourceAndDataSet dsAndDs){
synchronized (cacheMap) {
    return tempDataSetCacheMap.get(dsAndDs);
  }
}",0.8940397350993378
65666,"/** 
 * @throws DataException 
 */
public void close() throws DataException {
  if (loadUtil != null) {
    loadUtil.close();
    loadUtil=null;
  }
}","/** 
 * @throws DataException 
 */
public void close() throws DataException {
  if (loadUtil != null) {
    session.getDataSetCacheManager().loadFinished();
    loadUtil.close();
    loadUtil=null;
  }
}",0.8498583569405099
65667,"public DataSetFromCache(DataEngineSession session){
  this.session=session;
  try {
    countLimit=session.getDataSetCacheManager().getCacheCapability();
  }
 catch (  DataException e) {
  }
}","public DataSetFromCache(DataEngineSession session){
  this.session=session;
  try {
    countLimit=session.getDataSetCacheManager().getCacheCapability();
    session.getDataSetCacheManager().loadStart();
  }
 catch (  DataException e) {
  }
}",0.8847926267281107
65668,"public static void clearCache(Set<String> cacheIDs){
  List<IDataSetCacheObject> removed=new ArrayList<IDataSetCacheObject>();
  Object[] keyArray=JVMLevelCacheMap.keySet().toArray(new DataSourceAndDataSet[]{});
  for (  Object dsAndDs : keyArray) {
    if (cacheIDs.contains(((DataSourceAndDataSet)dsAndDs).getCacheScopeID())) {
      IDataSetCacheObject cacheObj=(IDataSetCacheObject)JVMLevelCacheMap.remove(dsAndDs);
      if (cacheObj != null)       removed.add(cacheObj);
    }
  }
  for (  IDataSetCacheObject dataSetCacheObject : removed) {
    dataSetCacheObject.release();
  }
}","void clearCache(){
  List cacheObjects=new ArrayList();
synchronized (cacheMap) {
    for (    DataSourceAndDataSet dataSetAndSource : cacheMap.keySet().toArray(new DataSourceAndDataSet[0])) {
      cacheObjects.add(cacheMap.remove(dataSetAndSource));
      tempDataSetCacheMap.remove(dataSetAndSource);
    }
  }
  for (int i=0; i < cacheObjects.size(); i++) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheObjects.get(i);
    cacheObject.release();
  }
}",0.109537299338999
65669,"/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 * @throws DataException 
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,DataSetCacheConfig dscc) throws DataException {
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      return cacheObject.needUpdateCache(dscc.getCacheCapability());
    }
 else {
      IDataSetCacheObject dsco=dscc.createDataSetCacheObject();
      tempDataSetCacheMap.put(dsAndDs,dsco);
      return true;
    }
  }
}","/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 * @throws DataException 
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,DataSetCacheConfig dscc) throws DataException {
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      return cacheObject.needUpdateCache(dscc.getCacheCapability());
    }
 else {
      if (!tempDataSetCacheMap.containsKey(dsAndDs)) {
        IDataSetCacheObject dsco=dscc.createDataSetCacheObject();
        tempDataSetCacheMap.put(dsAndDs,dsco);
      }
      return true;
    }
  }
}",0.948021722265322
65670,"/** 
 * Construction
 */
public DataSetCacheManager(DataEngineSession session){
  this.session=session;
  this.context=session.getEngineContext();
  this.queryExecutionHints=((DataEngineImpl)session.getEngine()).getExecutionHints();
  this.jvmLevelCacheMapManager=new CacheMapManager(true);
  this.dteLevelCacheMapManager=new CacheMapManager(false);
}","/** 
 * Construction
 */
public DataSetCacheManager(DataEngineSession session){
  this.session=session;
  this.context=session.getEngineContext();
  this.queryExecutionHints=((DataEngineImpl)session.getEngine()).getExecutionHints();
  this.jvmLevelCacheMapManager=new CacheMapManager(true);
  this.dteLevelCacheMapManager=new CacheMapManager(false);
  session.getEngine().addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      try {
        dteLevelCacheMapManager.clearCache();
      }
 catch (      Exception e) {
      }
    }
  }
);
}",0.7605633802816901
65671,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
      ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    IDatasetIterator valueIt=null;
    try {
      sl.process(dim);
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      }
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
      ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (valueIt != null) {
        try {
          valueIt.close();
        }
 catch (        BirtException e) {
        }
      }
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9779546187762124
65672,"public void close() throws BirtException {
  it.close();
}","public void close() throws BirtException {
  if (this.queryResult != null)   this.queryResult.close();
  if (it != null)   it.close();
}",0.5979381443298969
65673,"/** 
 * @param session
 * @param query
 * @param appContext
 * @throws AdapterException
 */
private void executeQuery(DataRequestSessionImpl session,IQueryDefinition query,Map appContext) throws AdapterException {
  try {
    Scriptable scope=session.getScope();
    TempDateTransformer tt=new TempDateTransformer(session.getDataSessionContext().getDataEngineContext().getLocale());
    ScriptableObject.putProperty(scope,tt.getClassName(),tt);
    this.it=session.prepare(query,appContext).execute(scope).getResultIterator();
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param session
 * @param query
 * @param appContext
 * @throws AdapterException
 */
private void executeQuery(DataRequestSessionImpl session,IQueryDefinition query,Map appContext) throws AdapterException {
  try {
    Scriptable scope=session.getScope();
    TempDateTransformer tt=new TempDateTransformer(session.getDataSessionContext().getDataEngineContext().getLocale());
    ScriptableObject.putProperty(scope,tt.getClassName(),tt);
    queryResult=session.prepare(query,appContext).execute(scope);
    this.it=queryResult.getResultIterator();
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9099451840250588
65674,"private boolean isRowEdgeNeedStart(ColumnEvent ev){
  if (rowEdgeStarted || ev.type != ColumnEvent.ROW_EDGE_CHANGE || !isSubTotalBefore) {
    return false;
  }
  if (ev.dimensionIndex > dimensionIndex || (ev.dimensionIndex == dimensionIndex && (isLayoutDownThenOver ? (ev.levelIndex >= levelIndex) : (ev.levelIndex > levelIndex)))) {
    return false;
  }
  if (ev.dimensionIndex != dimensionIndex || ev.levelIndex != levelIndex) {
    DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,ev.dimensionIndex);
    LevelViewHandle lv=dv.getLevel(ev.levelIndex);
    if (!isLayoutDownThenOver && lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
      return false;
    }
    int gdx=GroupUtil.getGroupIndex(rowGroups,ev.dimensionIndex,ev.levelIndex);
    if (gdx != -1) {
      try {
        EdgeCursor rowEdgeCursor=getRowEdgeCursor();
        if (rowEdgeCursor != null) {
          DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(gdx);
          if (rowEdgeCursor.getPosition() != dc.getEdgeStart()) {
            return false;
          }
        }
      }
 catch (      OLAPException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
  return rowIndex == 0;
}","private boolean isRowEdgeNeedStart(ColumnEvent ev){
  if (rowEdgeStarted || ev.type != ColumnEvent.ROW_EDGE_CHANGE || !isSubTotalBefore) {
    return false;
  }
  if (ev.dimensionIndex > dimensionIndex || (ev.dimensionIndex == dimensionIndex && (isLayoutDownThenOver ? (ev.levelIndex >= levelIndex) : (ev.levelIndex > levelIndex)))) {
    return false;
  }
  if (ev.dimensionIndex != dimensionIndex || ev.levelIndex != levelIndex) {
    DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,ev.dimensionIndex);
    LevelViewHandle lv=dv.getLevel(ev.levelIndex);
    if (!isLayoutDownThenOver && lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
      return false;
    }
    int gdx=GroupUtil.getGroupIndex(rowGroups,ev.dimensionIndex,ev.levelIndex);
    if (gdx != -1) {
      try {
        EdgeCursor rowEdgeCursor=getRowEdgeCursor();
        if (rowEdgeCursor != null) {
          DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(gdx);
          if (rowEdgeCursor.getPosition() != dc.getEdgeStart()) {
            return false;
          }
        }
      }
 catch (      OLAPException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
  return isFirstTotalRow;
}",0.9908675799086758
65675,"public Fraction getExactFraction(){
  int lastIndex=integerList.size() - 1;
  return getFraction(lastIndex,new Fraction(((Long)integerList.get(lastIndex)).intValue(),1));
}","public Fraction getExactFraction(){
  int lastIndex=integerList.size() - 1;
  return getFraction(lastIndex,new Fraction((integerList.get(lastIndex)).intValue(),1));
}",0.9822485207100592
65676,"public Fraction getFractionWithMaxDigits(int maxDigitsForDenominator){
  int lastIndex=integerList.size();
  Fraction previousFraction=null;
  for (int i=0; i < lastIndex; i++) {
    Fraction fraction=getFraction(i,new Fraction(((Long)integerList.get(i)).intValue(),1));
    if (fraction.getDenominatorDigits() > maxDigitsForDenominator)     return previousFraction;
    previousFraction=fraction;
  }
  return previousFraction;
}","public Fraction getFractionWithMaxDigits(int maxDigitsForDenominator){
  int lastIndex=integerList.size();
  Fraction previousFraction=null;
  for (int i=0; i < lastIndex; i++) {
    Fraction fraction=getFraction(i,new Fraction((integerList.get(i)).intValue(),1));
    if (fraction.getDenominatorDigits() > maxDigitsForDenominator)     return previousFraction;
    previousFraction=fraction;
  }
  return previousFraction;
}",0.9929742388758782
65677,"public ContinuedFraction(double decimal){
  this.decimal=decimal;
  computeList();
}","public ContinuedFraction(double decimal){
  this.decimal=ValueFormatter.normalizeDouble(decimal).doubleValue();
  computeList();
}",0.7850467289719626
65678,"private Fraction getFraction(int index,Fraction fraction){
  if (index > 0)   return getFraction(index - 1,(fraction.invert()).add((Long)integerList.get(index - 1)));
 else   return fraction;
}","private Fraction getFraction(int index,Fraction fraction){
  if (index > 0) {
    return getFraction(index - 1,(fraction.invert()).add(integerList.get(index - 1)));
  }
  return fraction;
}",0.9581151832460733
65679,"public void endListBand(IListBandContent listBand) throws BirtException {
  while (!(current instanceof ListArea)) {
    current.close();
    current=current.getParent();
  }
  int bandType=listBand.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    ContainerArea container=current;
    while (container != null && !(container instanceof ListArea) && !(container instanceof ListGroupArea)) {
      container=container.getParent();
    }
    if (container instanceof RepeatableArea) {
      ((RepeatableArea)container).setInHeaderBand(false);
    }
  }
}","public void endListBand(IListBandContent listBand) throws BirtException {
  while (!(current instanceof ListArea || current instanceof ListGroupArea)) {
    current.close();
    current=current.getParent();
  }
  int bandType=listBand.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    ContainerArea container=current;
    while (container != null && !(container instanceof ListArea) && !(container instanceof ListGroupArea)) {
      container=container.getParent();
    }
    if (container instanceof RepeatableArea) {
      ((RepeatableArea)container).setInHeaderBand(false);
    }
  }
}",0.971473851030111
65680,"private boolean isRowEdgeNeedStart(ColumnEvent ev){
  if (rowEdgeStarted || ev.type != ColumnEvent.ROW_EDGE_CHANGE || !isSubTotalBefore) {
    return false;
  }
  if (ev.dimensionIndex > dimensionIndex || (ev.dimensionIndex == dimensionIndex && (isLayoutDownThenOver ? (ev.levelIndex >= levelIndex) : (ev.levelIndex > levelIndex)))) {
    return false;
  }
  if (ev.dimensionIndex != dimensionIndex || ev.levelIndex != levelIndex) {
    DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,ev.dimensionIndex);
    LevelViewHandle lv=dv.getLevel(ev.levelIndex);
    if (!isLayoutDownThenOver && lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
      return false;
    }
    int gdx=GroupUtil.getGroupIndex(rowGroups,ev.dimensionIndex,ev.levelIndex);
    if (gdx != -1) {
      try {
        EdgeCursor rowEdgeCursor=getRowEdgeCursor();
        if (rowEdgeCursor != null) {
          DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(gdx);
          if (rowEdgeCursor.getPosition() != dc.getEdgeStart()) {
            return false;
          }
        }
      }
 catch (      OLAPException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
  return rowIndex == 0;
}","private boolean isRowEdgeNeedStart(ColumnEvent ev){
  if (rowEdgeStarted || ev.type != ColumnEvent.ROW_EDGE_CHANGE || !isSubTotalBefore) {
    return false;
  }
  if (ev.dimensionIndex > dimensionIndex || (ev.dimensionIndex == dimensionIndex && (isLayoutDownThenOver ? (ev.levelIndex >= levelIndex) : (ev.levelIndex > levelIndex)))) {
    return false;
  }
  if (ev.dimensionIndex != dimensionIndex || ev.levelIndex != levelIndex) {
    DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,ev.dimensionIndex);
    LevelViewHandle lv=dv.getLevel(ev.levelIndex);
    if (!isLayoutDownThenOver && lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
      return false;
    }
    int gdx=GroupUtil.getGroupIndex(rowGroups,ev.dimensionIndex,ev.levelIndex);
    if (gdx != -1) {
      try {
        EdgeCursor rowEdgeCursor=getRowEdgeCursor();
        if (rowEdgeCursor != null) {
          DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(gdx);
          if (rowEdgeCursor.getPosition() != dc.getEdgeStart()) {
            return false;
          }
        }
      }
 catch (      OLAPException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
  return isFirstTotalRow;
}",0.9908675799086758
65681,"private static IReportEngine createReportEngine(EngineConfig config) throws BirtException {
  return new ReportEngineFactory().createReportEngine(config);
}","private static IReportEngine createReportEngine(EngineConfig config) throws BirtException {
  return ReportEngineCreator.createReportEngine(config);
}",0.9607843137254902
65682,"/** 
 * Used in the filter select value dialog in dataset editor
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(Expression expression,DataSetHandle dataSetHandle,boolean useDataSetFilter) throws BirtException {
  ScriptExpression expr=null;
  DataSetHandle targetHandle=dataSetHandle;
  Map appContext=new HashMap();
  DataSetPreviewer previewer=null;
  try {
    if (!useDataSetFilter) {
      IDesignElement element=dataSetHandle.copy();
      ((DataSet)element).setProperty(IDataSetModel.FILTER_PROP,new ArrayList());
      targetHandle=ExternalUIUtil.newDataSetHandle(dataSetHandle,(DesignElement)element);
    }
    previewer=new DataSetPreviewer(targetHandle,0,PreviewType.RESULTSET);
    DataModelAdapter adapter=new DataModelAdapter(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,targetHandle.getModuleHandle()));
    expr=adapter.adaptExpression(expression);
    boolean startsWithRow=ExpressionUtility.isColumnExpression(expr.getText(),true);
    boolean startsWithDataSetRow=ExpressionUtility.isColumnExpression(expr.getText(),false);
    if (!startsWithRow && !startsWithDataSetRow) {
      throw new DataException(Messages.getString(""String_Node_Str""));
    }
    String dataSetColumnName=null;
    if (startsWithDataSetRow) {
      dataSetColumnName=ExpressionUtil.getColumnName(expr.getText());
    }
 else {
      dataSetColumnName=ExpressionUtil.getColumnBindingName(expr.getText());
    }
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
    identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
    identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
    appContext.put(resouceIDs,identifiers);
    AppContextPopulator.populateApplicationContext(targetHandle,appContext);
    previewer.open(appContext,getEngineConfig(targetHandle.getModuleHandle()));
    IResultIterator itr=previewer.preview();
    Set visitedValues=new HashSet();
    Object value=null;
    while (itr.next()) {
      if (visitedValues.size() > 10000) {
        break;
      }
      value=itr.getValue(dataSetColumnName);
      if (value != null && !visitedValues.contains(value)) {
        visitedValues.add(value);
      }
    }
    if (visitedValues.isEmpty())     return Collections.EMPTY_LIST;
    return new ArrayList(visitedValues);
  }
  finally {
    AppContextResourceReleaser.release(appContext);
    if (previewer != null)     previewer.close();
  }
}","/** 
 * Used in the filter select value dialog in dataset editor
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(Expression expression,DataSetHandle dataSetHandle,boolean useDataSetFilter) throws BirtException {
  ScriptExpression expr=null;
  DataSetHandle targetHandle=dataSetHandle;
  Map appContext=new HashMap();
  DataSetPreviewer previewer=null;
  try {
    if (!useDataSetFilter) {
      ModuleHandle moduleHandle=((Module)dataSetHandle.getRoot().copy()).getModuleHandle();
      SlotHandle dataSets=moduleHandle.getDataSets();
      for (int i=0; i < dataSets.getCount(); i++) {
        if (dataSetHandle.getName().equals(dataSets.get(i).getName())) {
          targetHandle=(DataSetHandle)dataSets.get(i);
          targetHandle.clearProperty(IDataSetModel.FILTER_PROP);
          break;
        }
      }
    }
    previewer=new DataSetPreviewer(targetHandle,0,PreviewType.RESULTSET);
    DataModelAdapter adapter=new DataModelAdapter(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,targetHandle.getModuleHandle()));
    expr=adapter.adaptExpression(expression);
    boolean startsWithRow=ExpressionUtility.isColumnExpression(expr.getText(),true);
    boolean startsWithDataSetRow=ExpressionUtility.isColumnExpression(expr.getText(),false);
    if (!startsWithRow && !startsWithDataSetRow) {
      throw new DataException(Messages.getString(""String_Node_Str""));
    }
    String dataSetColumnName=null;
    if (startsWithDataSetRow) {
      dataSetColumnName=ExpressionUtil.getColumnName(expr.getText());
    }
 else {
      dataSetColumnName=ExpressionUtil.getColumnBindingName(expr.getText());
    }
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
    identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
    identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
    appContext.put(resouceIDs,identifiers);
    AppContextPopulator.populateApplicationContext(targetHandle,appContext);
    previewer.open(appContext,getEngineConfig(targetHandle.getModuleHandle()));
    IResultIterator itr=previewer.preview();
    Set visitedValues=new HashSet();
    Object value=null;
    while (itr.next()) {
      if (visitedValues.size() > 10000) {
        break;
      }
      value=itr.getValue(dataSetColumnName);
      if (value != null && !visitedValues.contains(value)) {
        visitedValues.add(value);
      }
    }
    if (visitedValues.isEmpty())     return Collections.EMPTY_LIST;
    return new ArrayList(visitedValues);
  }
  finally {
    AppContextResourceReleaser.release(appContext);
    if (previewer != null)     previewer.close();
  }
}",0.9044331395348836
65683,"public void endListBand(IListBandContent listBand) throws BirtException {
  int bandType=listBand.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    ContainerArea container=current;
    while (container != null && !(container instanceof ListArea) && !(container instanceof ListGroupArea)) {
      container=container.getParent();
    }
    if (container instanceof RepeatableArea) {
      ((RepeatableArea)container).setInHeaderBand(false);
    }
  }
}","public void endListBand(IListBandContent listBand) throws BirtException {
  while (!(current instanceof ListArea)) {
    current.close();
    current=current.getParent();
  }
  int bandType=listBand.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    ContainerArea container=current;
    while (container != null && !(container instanceof ListArea) && !(container instanceof ListGroupArea)) {
      container=container.getParent();
    }
    if (container instanceof RepeatableArea) {
      ((RepeatableArea)container).setInHeaderBand(false);
    }
  }
}",0.9102222222222224
65684,"private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(((DataSetEditor)getContainer()).getShell(),this.getTitle(structureOrHandle),this.getTitle(structureOrHandle));
  dlg.setDataSetHandle((DataSetHandle)getContainer().getModel(),new DataSetExpressionProvider((DataSetHandle)getContainer().getModel()));
  dlg.setBindingParams(getParamBindingHandleArray());
  dlg.setInput(structureOrHandle);
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}","private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(((DataSetEditor)getContainer()).getShell(),this.getTitle(structureOrHandle),this.getTitle(structureOrHandle));
  dlg.setDataSetHandle((DataSetHandle)getContainer().getModel(),new DataSetExpressionProvider((DataSetHandle)getContainer().getModel()));
  dlg.showUpdateAggregationButton(false);
  dlg.setBindingParams(getParamBindingHandleArray());
  dlg.setInput(structureOrHandle);
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}",0.96045197740113
65685,"public Object read(BufferedRandomAccessFile file) throws IOException {
  return file.readBigDecimal();
}","public Object read(BufferedRandomAccessFile file) throws IOException {
  return file.readObject();
}",0.9411764705882352
65686,"public static IObjectWriter getRandomWriter(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomWriter();
case DataType.INTEGER_TYPE:
  return new IntegerRandomWriter();
case DataType.BYTES_TYPE:
return new BytesRandomWriter();
case DataType.DOUBLE_TYPE:
return new DoubleRandomWriter();
case DataType.STRING_TYPE:
return new StringRandomWriter();
case DataType.DATE_TYPE:
return new DateRandomWriter();
case DataType.BLOB_TYPE:
return new BlobRandomWriter();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomWriter();
case DataType.SQL_DATE_TYPE:
return new DateRandomWriter();
case DataType.SQL_TIME_TYPE:
return new DateRandomWriter();
default :
return null;
}
}","public static IObjectWriter getRandomWriter(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomWriter();
case DataType.INTEGER_TYPE:
  return new IntegerRandomWriter();
case DataType.BYTES_TYPE:
return new BytesRandomWriter();
case DataType.DOUBLE_TYPE:
return new DoubleRandomWriter();
case DataType.STRING_TYPE:
return new StringRandomWriter();
case DataType.DATE_TYPE:
return new DateRandomWriter();
case DataType.BLOB_TYPE:
return new BlobRandomWriter();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomWriter();
case DataType.SQL_DATE_TYPE:
return new DateRandomWriter();
case DataType.SQL_TIME_TYPE:
return new DateRandomWriter();
case DataType.JAVA_OBJECT_TYPE:
return new ObjectRandomWriter();
default :
return new ObjectRandomWriter();
}
}",0.9397749834546658
65687,"public void write(BufferedRandomAccessFile file,Object obj) throws IOException {
  try {
    file.writeBigDecimal((BigDecimal)obj);
  }
 catch (  ClassCastException ce) {
    logger.log(Level.FINE,ce.getMessage(),ce);
  }
}","public void write(BufferedRandomAccessFile file,Object obj) throws IOException {
  try {
    file.writeObject(obj);
  }
 catch (  ClassCastException ce) {
    logger.log(Level.FINE,ce.getMessage(),ce);
  }
}",0.9302325581395348
65688,"public static IObjectReader getRandomReader(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomReader();
case DataType.INTEGER_TYPE:
  return new IntegerRandomReader();
case DataType.BYTES_TYPE:
return new BytesRandomReader();
case DataType.DOUBLE_TYPE:
return new DoubleRandomReader();
case DataType.STRING_TYPE:
return new StringRandomReader();
case DataType.DATE_TYPE:
return new DateTimeRandomReader();
case DataType.BLOB_TYPE:
return new BlobRandomReader();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomReader();
case DataType.SQL_DATE_TYPE:
return new DateRandomReader();
case DataType.SQL_TIME_TYPE:
return new TimeRandomReader();
default :
return null;
}
}","public static IObjectReader getRandomReader(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomReader();
case DataType.INTEGER_TYPE:
  return new IntegerRandomReader();
case DataType.BYTES_TYPE:
return new BytesRandomReader();
case DataType.DOUBLE_TYPE:
return new DoubleRandomReader();
case DataType.STRING_TYPE:
return new StringRandomReader();
case DataType.DATE_TYPE:
return new DateTimeRandomReader();
case DataType.BLOB_TYPE:
return new BlobRandomReader();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomReader();
case DataType.SQL_DATE_TYPE:
return new DateRandomReader();
case DataType.SQL_TIME_TYPE:
return new TimeRandomReader();
case DataType.JAVA_OBJECT_TYPE:
return new ObjectRandomReader();
default :
return new ObjectRandomReader();
}
}",0.9400921658986175
65689,"public void initDialog(){
  cmbType.setItems(dataTypes);
  txtDisplayName.setFocus();
  if (isAggregate()) {
    initFunction();
    initFilter();
    initGroups();
  }
  if (isCreate) {
    if (isRef) {
      if (getBinding() == null) {
        for (Iterator iterator=getBindingHolder().getDataBindingReference().getColumnBindings().iterator(); iterator.hasNext(); ) {
          ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
          if (isAggregate()) {
            if (computedColumn.getAggregateFunction() == null || computedColumn.getAggregateFunction().equals(""String_Node_Str""))             continue;
          }
 else {
            if (computedColumn.getAggregateFunction() != null && !computedColumn.getAggregateFunction().equals(""String_Node_Str""))             continue;
          }
          cmbName.add(computedColumn.getName());
        }
      }
 else {
        setDisplayName(getBinding().getDisplayName());
        setDisplayNameID(getBinding().getDisplayNameID());
        setAllowExport(getBinding().allowExport());
        for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
          if (DATA_TYPE_CHOICES[i].getName().equals(getBinding().getDataType())) {
            setTypeSelect(DATA_TYPE_CHOICES[i].getDisplayName());
            break;
          }
        }
        setDataFieldExpression(getBinding());
      }
    }
 else {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),isAggregate() ? DEFAULT_AGGREGATION_NAME : DEFAULT_ITEM_NAME);
      setName(this.newBinding.getName());
      setAllowExport(this.newBinding.allowExport());
      if (!isAggregate()) {
        setTypeSelect(getDataTypeDisplayName(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING));
      }
    }
  }
 else {
    if (isRef) {
      int i=0;
      for (Iterator iterator=getBindingHolder().getDataBindingReference().getColumnBindings().iterator(); iterator.hasNext(); ) {
        ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
        if (isAggregate()) {
          if (computedColumn.getAggregateFunction() == null || computedColumn.getAggregateFunction().equals(""String_Node_Str""))           continue;
        }
 else {
          if (computedColumn.getAggregateFunction() != null && !computedColumn.getAggregateFunction().equals(""String_Node_Str""))           continue;
        }
        cmbName.add(computedColumn.getName());
        if (getBinding().getName().equals(computedColumn.getName()))         cmbName.select(i);
        i++;
      }
      setDisplayName(getBinding().getDisplayName());
      setDisplayNameID(getBinding().getDisplayNameID());
      setAllowExport(getBinding().allowExport());
      for (i=0; i < DATA_TYPE_CHOICES.length; i++) {
        if (DATA_TYPE_CHOICES[i].getName().equals(getBinding().getDataType())) {
          setTypeSelect(DATA_TYPE_CHOICES[i].getDisplayName());
          break;
        }
      }
      setDataFieldExpression(getBinding());
    }
 else {
      setName(getBinding().getName());
      setDisplayName(getBinding().getDisplayName());
      setDisplayNameID(getBinding().getDisplayNameID());
      setAllowExport(getBinding().allowExport());
      if (getBinding().getDataType() != null) {
        if (DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()) != null)         setTypeSelect(DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()).getDisplayName());
 else         cmbType.setText(""String_Node_Str"");
      }
      setDataFieldExpression(getBinding());
    }
  }
  if (!isCreate) {
    if (isRef) {
      this.cmbName.setEnabled(true);
    }
 else {
      this.txtName.setEnabled(false);
    }
  }
  validate();
  hasInitDialog=true;
}","public void initDialog(){
  cmbType.setItems(dataTypes);
  txtExpression.setFocus();
  if (isAggregate()) {
    initFunction();
    initFilter();
    initGroups();
  }
  if (isCreate) {
    if (isRef) {
      if (getBinding() == null) {
        for (Iterator iterator=getBindingHolder().getDataBindingReference().getColumnBindings().iterator(); iterator.hasNext(); ) {
          ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
          if (isAggregate()) {
            if (computedColumn.getAggregateFunction() == null || computedColumn.getAggregateFunction().equals(""String_Node_Str""))             continue;
          }
 else {
            if (computedColumn.getAggregateFunction() != null && !computedColumn.getAggregateFunction().equals(""String_Node_Str""))             continue;
          }
          cmbName.add(computedColumn.getName());
        }
      }
 else {
        setDisplayName(getBinding().getDisplayName());
        setDisplayNameID(getBinding().getDisplayNameID());
        setAllowExport(getBinding().allowExport());
        for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
          if (DATA_TYPE_CHOICES[i].getName().equals(getBinding().getDataType())) {
            setTypeSelect(DATA_TYPE_CHOICES[i].getDisplayName());
            break;
          }
        }
        setDataFieldExpression(getBinding());
      }
    }
 else {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),isAggregate() ? DEFAULT_AGGREGATION_NAME : DEFAULT_ITEM_NAME);
      setName(this.newBinding.getName());
      setAllowExport(this.newBinding.allowExport());
      if (!isAggregate()) {
        setTypeSelect(getDataTypeDisplayName(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING));
      }
    }
  }
 else {
    if (isRef) {
      int i=0;
      for (Iterator iterator=getBindingHolder().getDataBindingReference().getColumnBindings().iterator(); iterator.hasNext(); ) {
        ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
        if (isAggregate()) {
          if (computedColumn.getAggregateFunction() == null || computedColumn.getAggregateFunction().equals(""String_Node_Str""))           continue;
        }
 else {
          if (computedColumn.getAggregateFunction() != null && !computedColumn.getAggregateFunction().equals(""String_Node_Str""))           continue;
        }
        cmbName.add(computedColumn.getName());
        if (getBinding().getName().equals(computedColumn.getName()))         cmbName.select(i);
        i++;
      }
      setDisplayName(getBinding().getDisplayName());
      setDisplayNameID(getBinding().getDisplayNameID());
      setAllowExport(getBinding().allowExport());
      for (i=0; i < DATA_TYPE_CHOICES.length; i++) {
        if (DATA_TYPE_CHOICES[i].getName().equals(getBinding().getDataType())) {
          setTypeSelect(DATA_TYPE_CHOICES[i].getDisplayName());
          break;
        }
      }
      setDataFieldExpression(getBinding());
    }
 else {
      setName(getBinding().getName());
      setDisplayName(getBinding().getDisplayName());
      setDisplayNameID(getBinding().getDisplayNameID());
      setAllowExport(getBinding().allowExport());
      if (getBinding().getDataType() != null) {
        if (DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()) != null)         setTypeSelect(DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()).getDisplayName());
 else         cmbType.setText(""String_Node_Str"");
      }
      setDataFieldExpression(getBinding());
    }
  }
  if (!isCreate) {
    if (isRef) {
      this.cmbName.setEnabled(true);
    }
 else {
      this.txtName.setEnabled(false);
    }
  }
  validate();
  hasInitDialog=true;
}",0.9971540859195012
65690,"/** 
 * construction
 */
CacheMapManager(boolean useJVMLevelCache){
  if (useJVMLevelCache) {
    cacheMap=JVMLevelCacheMap;
  }
 else {
    cacheMap=new HashMap();
  }
}","/** 
 * construction
 */
CacheMapManager(boolean useJVMLevelCache){
  if (useJVMLevelCache) {
    cacheMap=JVMLevelCacheMap;
  }
 else {
    cacheMap=new HashMap();
  }
  tempDataSetCacheMap=new HashMap<DataSourceAndDataSet,IDataSetCacheObject>();
}",0.8114558472553699
65691,"/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap.clear();
  }
}","/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap.clear();
    tempDataSetCacheMap.clear();
  }
}",0.8607594936708861
65692,"/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 * @throws DataException 
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,DataSetCacheConfig dscc) throws DataException {
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      return cacheObject.needUpdateCache(dscc.getCacheCapability());
    }
 else {
      IDataSetCacheObject dsco=dscc.createDataSetCacheObject();
      cacheMap.put(dsAndDs,dsco);
      return true;
    }
  }
}","/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 * @throws DataException 
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,DataSetCacheConfig dscc) throws DataException {
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      return cacheObject.needUpdateCache(dscc.getCacheCapability());
    }
 else {
      IDataSetCacheObject dsco=dscc.createDataSetCacheObject();
      tempDataSetCacheMap.put(dsAndDs,dsco);
      return true;
    }
  }
}",0.9892650701899256
65693,"/** 
 * @return
 * @throws DataException 
 */
private IDataSetCacheObject getCacheObject() throws DataException {
  return session.getDataSetCacheManager().getCacheObject();
}","/** 
 * @return
 * @throws DataException 
 */
private IDataSetCacheObject getCacheObject() throws DataException {
  return session.getDataSetCacheManager().getLoadedCacheObject();
}",0.9831460674157304
65694,"/** 
 * @return
 * @throws DataException 
 */
private IDataSetCacheObject getCacheObject() throws DataException {
  return getDataSetCacheManager().getCacheObject();
}","/** 
 * @return
 * @throws DataException 
 */
private IDataSetCacheObject getCacheObject() throws DataException {
  return getDataSetCacheManager().getSavedCacheObject();
}",0.9852507374631267
65695,"public void saveDataSetResult(IResultIterator itr) throws DataException {
  try {
    int saved=0;
    IResultObject resultObject=null;
    this.saveInit();
    itr.first(0);
    while (itr.getCurrentResult() != null) {
      resultObject=itr.getCurrentResult();
      saveUtil.saveObject(resultObject);
      saved++;
      if (increCacheMode == null && saved >= cacheCount) {
        break;
      }
      if (session.getStopSign().isStopped()) {
        removeCacheObject();
        break;
      }
      itr.next();
    }
    this.saveClose();
  }
 catch (  DataException de) {
    removeCacheObject();
    throw de;
  }
 finally {
    try {
      itr.first(0);
    }
 catch (    DataException e) {
    }
  }
}","public void saveDataSetResult(IResultIterator itr) throws DataException {
  try {
    int saved=0;
    IResultObject resultObject=null;
    IDataSetCacheObject dataSetCachedObject=getCacheObject();
    this.saveInit(dataSetCachedObject);
    itr.first(0);
    while (itr.getCurrentResult() != null) {
      resultObject=itr.getCurrentResult();
      saveUtil.saveObject(resultObject);
      saved++;
      if (increCacheMode == null && saved >= cacheCount) {
        break;
      }
      if (session.getStopSign().isStopped()) {
        removeCacheObject();
        break;
      }
      itr.next();
    }
    this.saveClose(dataSetCachedObject);
  }
 catch (  DataException de) {
    removeCacheObject();
    throw de;
  }
 finally {
    try {
      itr.first(0);
    }
 catch (    DataException e) {
    }
  }
}",0.9173228346456692
65696,"/** 
 * @throws DataException
 */
private void saveClose() throws DataException {
  if (saveUtil != null) {
    saveUtil.close();
    saveUtil=null;
  }
}","/** 
 * @throws DataException
 */
private void saveClose(IDataSetCacheObject dataSetCachedObject) throws DataException {
  if (saveUtil != null) {
    getDataSetCacheManager().saveFinished(dataSetCachedObject);
    saveUtil.close();
    saveUtil=null;
  }
}",0.7493917274939172
65697,"/** 
 * Init save util
 * @throws DataException 
 */
private void saveInit() throws DataException {
  saveUtil=CacheUtilFactory.createSaveUtil(getCacheObject(),this.rsMeta,this.session);
}","/** 
 * Init save util
 * @throws DataException 
 */
private void saveInit(IDataSetCacheObject dataSetCachedObject) throws DataException {
  saveUtil=CacheUtilFactory.createSaveUtil(dataSetCachedObject,this.rsMeta,this.session);
}",0.583732057416268
65698,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    tempAddedInDriverInfos.clear();
    return getDriverList();
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  tempAddedInDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return getDriverList();
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public synchronized static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    tempAddedInDriverInfos.clear();
    return getDriverList();
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  tempAddedInDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return getDriverList();
}",0.9964471166985516
65699,"protected Control createDialogArea(Composite parent){
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  contents.setLayout(new GridLayout());
  this.setTitle(ADVANCED_DIALOG_TITLE);
  this.setMessage(ADVANCED_DIALOG_MSG);
  getShell().setText(ADVANCED_DIALOG_TITLE);
  applyDialogFont(contents);
  initializeDialogUnits(area);
  if (disabledContentBidiFormat != null && disabledMetadataBidiFormat != null && !BidiConstants.EMPTY_STR.equals(disabledContentBidiFormat) && !BidiConstants.EMPTY_STR.equals(disabledMetadataBidiFormat)) {
    disableTransform=true;
  }
  Composite bidiArea=new Composite(area,SWT.NONE);
  GridLayout bidiGridLayout=new GridLayout();
  bidiGridLayout.numColumns=4;
  bidiGridLayout.marginHeight=10;
  bidiGridLayout.marginWidth=5;
  bidiGridLayout.horizontalSpacing=5;
  bidiGridLayout.verticalSpacing=10;
  bidiGridLayout.makeColumnsEqualWidth=true;
  bidiArea.setLayout(bidiGridLayout);
  bidiMetadataFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,BidiGUIUtility.EXTERNAL_SYSTEM_METADATA_SETTING,disableTransform ? disabledMetadataBidiFormat : metadataBidiFormat);
  bidiContentFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,BidiGUIUtility.EXTERNAL_SYSTEM_CONTENT_SETTING,disableTransform ? disabledContentBidiFormat : contentBidiFormat);
  disableTransformButton=new Button(bidiArea,SWT.CHECK);
  disableTransformButton.setText(DISABLE_BIDI_CHECKBOX_TEXT);
  disableTransformButton.setSelection(disableTransform);
  if (disableTransform) {
    handleDisableTransform();
  }
  disableTransformButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      disableTransform=!disableTransform;
      handleDisableTransform();
    }
  }
);
  Utility.setSystemHelp(area,IHelpConstants.CONEXT_ID_DATASOURCE_JDBC_BIDI_SETTING);
  return area;
}","protected Control createDialogArea(Composite parent){
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  contents.setLayout(new GridLayout());
  this.setTitle(ADVANCED_DIALOG_TITLE);
  this.setMessage(ADVANCED_DIALOG_MSG);
  getShell().setText(ADVANCED_DIALOG_TITLE);
  applyDialogFont(contents);
  initializeDialogUnits(area);
  if (disabledContentBidiFormat != null && disabledMetadataBidiFormat != null && !BidiConstants.EMPTY_STR.equals(disabledContentBidiFormat.toString()) && !BidiConstants.EMPTY_STR.equals(disabledMetadataBidiFormat.toString())) {
    disableTransform=true;
  }
  Composite bidiArea=new Composite(area,SWT.NONE);
  GridLayout bidiGridLayout=new GridLayout();
  bidiGridLayout.numColumns=4;
  bidiGridLayout.marginHeight=10;
  bidiGridLayout.marginWidth=5;
  bidiGridLayout.horizontalSpacing=5;
  bidiGridLayout.verticalSpacing=10;
  bidiGridLayout.makeColumnsEqualWidth=true;
  bidiArea.setLayout(bidiGridLayout);
  bidiMetadataFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,BidiGUIUtility.EXTERNAL_SYSTEM_METADATA_SETTING,disableTransform ? disabledMetadataBidiFormat : metadataBidiFormat);
  bidiContentFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,BidiGUIUtility.EXTERNAL_SYSTEM_CONTENT_SETTING,disableTransform ? disabledContentBidiFormat : contentBidiFormat);
  disableTransformButton=new Button(bidiArea,SWT.CHECK);
  disableTransformButton.setText(DISABLE_BIDI_CHECKBOX_TEXT);
  disableTransformButton.setSelection(disableTransform);
  if (disableTransform) {
    handleDisableTransform();
  }
  disableTransformButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      disableTransform=!disableTransform;
      handleDisableTransform();
    }
  }
);
  Utility.setSystemHelp(area,IHelpConstants.CONEXT_ID_DATASOURCE_JDBC_BIDI_SETTING);
  return area;
}",0.9944556451612904
65700,"/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator factTableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,cube.getDimesions(),null,stopSign);
  if (cubePosFilters != null && !cubePosFilters.isEmpty()) {
    for (Iterator itr=cubePosFilters.iterator(); itr.hasNext(); ) {
      ICubePosFilter cubePosFilter=(ICubePosFilter)itr.next();
      factTableRowIterator.addCubePosFilter(cubePosFilter);
    }
  }
  for (int i=0; i < measureFilters.size(); i++) {
    factTableRowIterator.addMeasureFilter((IJSFacttableFilterEvalHelper)measureFilters.get(i));
  }
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(new CubeDimensionReader(cube),dataSet4Aggregation,aggregations,memoryCacheSize);
  aggregationCalculatorExecutor.setMaxDataObjectRows(maxDataObjectRows);
  return aggregationCalculatorExecutor.execute(stopSign);
}","/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  FactTableRowIterator factTableRowIterator=populateFactTableIterator(stopSign,dimPosition);
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(new CubeDimensionReader(cube),dataSet4Aggregation,aggregations,memoryCacheSize);
  aggregationCalculatorExecutor.setMaxDataObjectRows(maxDataObjectRows);
  return aggregationCalculatorExecutor.execute(stopSign);
}",0.6437221159974506
65701,"/** 
 * @return
 * @throws DataException
 * @throws IOException
 */
private IDiskArray[] getFilterResult() throws DataException, IOException {
  IDimension[] dimensions=cube.getDimesions();
  IDiskArray[] dimPosition=new IDiskArray[dimensions.length];
  for (int i=0; i < dimPosition.length; i++) {
    Dimension dimension=(Dimension)dimensions[i];
    List jsFilters=getDimensionJSFilterList(dimension.getName());
    LevelFilterHelper filterHelper=new LevelFilterHelper(dimension,simpleLevelFilters,levelFilters);
    dimPosition[i]=filterHelper.getJSFilterResult(jsFilters,isBreakHierarchy);
  }
  return dimPosition;
}","/** 
 * @return
 * @throws DataException
 * @throws IOException
 */
public IDiskArray[] getFilterResult() throws DataException, IOException {
  IDimension[] dimensions=cube.getDimesions();
  IDiskArray[] dimPosition=new IDiskArray[dimensions.length];
  for (int i=0; i < dimPosition.length; i++) {
    Dimension dimension=(Dimension)dimensions[i];
    List jsFilters=getDimensionJSFilterList(dimension.getName());
    LevelFilterHelper filterHelper=new LevelFilterHelper(dimension,simpleLevelFilters,levelFilters);
    dimPosition[i]=filterHelper.getJSFilterResult(jsFilters,isBreakHierarchy);
  }
  return dimPosition;
}",0.991150442477876
65702,"private void populateFilterHelpers() throws DataException {
  List filters=defn.getFilters();
  Set<DimLevel> dimLevelInCubeQuery=this.getDimLevelsDefinedInCubeQuery();
  validateFilter(filters,defn.getBindings());
  for (int i=0; i < filters.size(); i++) {
    IFilterDefinition filter=(IFilterDefinition)filters.get(i);
    if (!filter.updateAggregation()) {
      Set dimLevelSet=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),defn.getBindings());
      if (dimLevelSet.size() <= 1) {
        continue;
      }
 else {
        if (!adjustCubeFilterUpdateAggregationFlag(filter,dimLevelSet))         continue;
      }
    }
switch (this.getFilterType(filter,dimLevelInCubeQuery)) {
case CubeQueryExecutor.DIMENSION_FILTER:
{
        SimpleLevelFilter simpleLevelfilter=createSimpleLevelFilter(filter,defn.getBindings());
        if (simpleLevelfilter == null) {
          this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
        }
 else {
          boolean existLevelFilter=false;
          for (int j=0; j < this.dimensionSimpleFilter.size(); j++) {
            if (dimensionSimpleFilter.get(j).getDimensionName().equals(simpleLevelfilter.getDimensionName()) && dimensionSimpleFilter.get(j).getLevelName().equals(simpleLevelfilter.getLevelName())) {
              this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
              existLevelFilter=true;
              break;
            }
          }
          if (!existLevelFilter)           this.dimensionSimpleFilter.add(simpleLevelfilter);
        }
        break;
      }
case CubeQueryExecutor.AGGR_MEASURE_FILTER:
{
      this.aggrMeasureFilterEvalHelpers.add(new AggrMeasureFilterEvalHelper(this.outResults,scope,defn,filter,session.getEngineContext().getScriptContext()));
      break;
    }
case CubeQueryExecutor.FACTTABLE_FILTER:
default :
{
    this.advancedFacttableBasedFilterEvalHelper.add(new JSFacttableFilterEvalHelper(scope,this.session.getEngineContext().getScriptContext(),filter,this.outResults,this.defn));
  }
}
}
}","public void populateFilterHelpers() throws DataException {
  if (populateFilter)   return;
  List filters=defn.getFilters();
  Set<DimLevel> dimLevelInCubeQuery=this.getDimLevelsDefinedInCubeQuery();
  validateFilter(filters,defn.getBindings());
  for (int i=0; i < filters.size(); i++) {
    IFilterDefinition filter=(IFilterDefinition)filters.get(i);
    if (!filter.updateAggregation()) {
      Set dimLevelSet=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),defn.getBindings());
      if (dimLevelSet.size() <= 1) {
        continue;
      }
 else {
        if (!adjustCubeFilterUpdateAggregationFlag(filter,dimLevelSet))         continue;
      }
    }
switch (this.getFilterType(filter,dimLevelInCubeQuery)) {
case CubeQueryExecutor.DIMENSION_FILTER:
{
        SimpleLevelFilter simpleLevelfilter=createSimpleLevelFilter(filter,defn.getBindings());
        if (simpleLevelfilter == null) {
          this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
        }
 else {
          boolean existLevelFilter=false;
          for (int j=0; j < this.dimensionSimpleFilter.size(); j++) {
            if (dimensionSimpleFilter.get(j).getDimensionName().equals(simpleLevelfilter.getDimensionName()) && dimensionSimpleFilter.get(j).getLevelName().equals(simpleLevelfilter.getLevelName())) {
              this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
              existLevelFilter=true;
              break;
            }
          }
          if (!existLevelFilter)           this.dimensionSimpleFilter.add(simpleLevelfilter);
        }
        break;
      }
case CubeQueryExecutor.AGGR_MEASURE_FILTER:
{
      this.aggrMeasureFilterEvalHelpers.add(new AggrMeasureFilterEvalHelper(this.outResults,scope,defn,filter,session.getEngineContext().getScriptContext()));
      break;
    }
case CubeQueryExecutor.FACTTABLE_FILTER:
default :
{
    this.advancedFacttableBasedFilterEvalHelper.add(new JSFacttableFilterEvalHelper(scope,this.session.getEngineContext().getScriptContext(),filter,this.outResults,this.defn));
  }
}
}
populateFilter=true;
}",0.9860566448801744
65703,"private ICubeCursor createCursor(IBindingValueFetcher fetcher) throws DataException, IOException, OLAPException {
  ICubeCursor cursor;
  CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
  executor.getdimensionSimpleFilter().addAll(this.preparedQuery.getInternalFilters());
  IDocumentManager documentManager=getDocumentManager(executor);
  ICube cube=null;
  try {
    if (!isStandAloneQuery(cubeQueryDefinition,session.getEngineContext()))     cube=loadCube(documentManager,executor);
  }
 catch (  Exception ex) {
    throw new DataException(ResourceConstants.FAIL_LOAD_CUBE,ex);
  }
  BirtCubeView bcv=new BirtCubeView(executor,cube,appContext,fetcher);
  CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube);
  if (cube != null)   cube.close();
  String newResultSetId=executor.getQueryResultsId();
  if (newResultSetId != null) {
    this.queryResultsId=newResultSetId;
  }
  this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
  this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.cubeQueryDefinition,bcv));
  cursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
  return cursor;
}","private ICubeCursor createCursor(IBindingValueFetcher fetcher) throws DataException, IOException, OLAPException {
  ICubeCursor cursor;
  executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
  executor.getdimensionSimpleFilter().addAll(this.preparedQuery.getInternalFilters());
  IDocumentManager documentManager=getDocumentManager(executor);
  ICube cube=null;
  try {
    if (!isStandAloneQuery(cubeQueryDefinition,session.getEngineContext()))     cube=loadCube(documentManager,executor);
  }
 catch (  Exception ex) {
    throw new DataException(ResourceConstants.FAIL_LOAD_CUBE,ex);
  }
  BirtCubeView bcv=new BirtCubeView(executor,cube,appContext,fetcher);
  CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube);
  if (cube != null)   cube.close();
  String newResultSetId=executor.getQueryResultsId();
  if (newResultSetId != null) {
    this.queryResultsId=newResultSetId;
  }
  this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
  this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.cubeQueryDefinition,bcv));
  cursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
  return cursor;
}",0.9932785660941
65704,"public ArgumentInfo(String name,String displayName,String description,boolean isOptinal){
  this.name=name;
  this.displayName=displayName;
  this.description=description;
  this.isOptional=isOptional;
}","public ArgumentInfo(String name,String displayName,String description,boolean isOptional){
  this.name=name;
  this.displayName=displayName;
  this.description=description;
  this.isOptional=isOptional;
}",0.9975429975429976
65705,"/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isVisible();
  if (!vis && info.rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),info.iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),info.iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  int iDateTimeUnit=IConstants.UNDEFINED;
  if (info.type == IConstants.DATE_TIME) {
    iDateTimeUnit=ChartUtil.computeDateTimeCategoryUnit(info.plotComp.getModel(),dsi);
  }
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * info.dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  int iSkip=indexStep - 1;
  double ellipsisWidth=0;
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (iSkip > 0) {
      if (dsi.skip(iSkip) < iSkip) {
        break;
      }
    }
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
 else {
      break;
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(info.type,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=info.cComp.computePolygon(xs,iLabelLocation,la,x,y,null);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        String str=la.getCaption().getValue();
        if (iOrientation == VERTICAL && isCategoryScale() && axisLabelInfo.dMaxSize > 0) {
          double size=info.cComp.computeWidth(xs,la);
          if (ellipsisWidth <= 0) {
            la.getCaption().setValue(EllipsisHelper.ELLIPSIS_STRING);
            ellipsisWidth=info.cComp.computeWidth(xs,la);
          }
          if (ChartUtil.mathGT(size,axisLabelInfo.dMaxSize)) {
            int count=(int)(str.length() * (axisLabelInfo.dMaxSize - ellipsisWidth) / size);
            hmComputedLabelText.put(i,str.substring(0,count) + EllipsisHelper.ELLIPSIS_STRING);
          }
 else {
            hmComputedLabelText.put(i,str);
          }
        }
 else {
          hmComputedLabelText.put(i,str);
        }
      }
    }
  }
}","/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isVisible();
  if (!vis && info.rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),info.iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),info.iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  int iDateTimeUnit=IConstants.UNDEFINED;
  if (info.type == IConstants.DATE_TIME) {
    iDateTimeUnit=ChartUtil.computeDateTimeCategoryUnit(info.plotComp.getModel(),dsi);
  }
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * info.dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  int iSkip=indexStep - 1;
  double ellipsisWidth=0;
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (iSkip > 0) {
      if (dsi.skip(iSkip) < iSkip) {
        break;
      }
    }
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
 else {
      break;
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(info.type,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=info.cComp.computePolygon(xs,iLabelLocation,la,x,y,null);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        String str=la.getCaption().getValue();
        double rotation=la.getCaption().getFont().getRotation();
        if (iOrientation == VERTICAL && isCategoryScale() && axisLabelInfo.dMaxSize > 0 && Math.abs(rotation) <= 45) {
          double size=info.cComp.computeWidth(xs,la);
          if (ellipsisWidth <= 0) {
            la.getCaption().setValue(EllipsisHelper.ELLIPSIS_STRING);
            ellipsisWidth=info.cComp.computeWidth(xs,la);
          }
          if (ChartUtil.mathGT(size,axisLabelInfo.dMaxSize)) {
            int count=(int)(str.length() * (axisLabelInfo.dMaxSize - ellipsisWidth) / size);
            if (count >= 0) {
              hmComputedLabelText.put(i,str.substring(0,count) + EllipsisHelper.ELLIPSIS_STRING);
            }
 else {
              hmComputedLabelText.put(i,str);
            }
          }
 else {
            hmComputedLabelText.put(i,str);
          }
        }
 else {
          hmComputedLabelText.put(i,str);
        }
      }
    }
  }
}",0.9712858926342072
65706,"public TextCombo(Composite parent,int style){
  super(parent,style);
  GC gc=new GC(this);
  itemHeight=gc.getFontMetrics().getHeight() + 2;
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      fontBold.dispose();
      choiceMarkerMap.clear();
    }
  }
);
}","public TextCombo(Composite parent,int style){
  super(parent,style);
  GC gc=new GC(this);
  itemHeight=gc.getFontMetrics().getHeight() + 2;
  if (gc.getFont().getFontData() == null || gc.getFont().getFontData().length == 0) {
    fontBold=new Font(Display.getCurrent(),""String_Node_Str"",9,SWT.BOLD);
  }
 else {
    FontData fd=gc.getFont().getFontData()[0];
    fontBold=new Font(gc.getDevice(),fd.getName(),fd.getHeight(),fd.getStyle() | SWT.BOLD);
  }
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      fontBold.dispose();
      choiceMarkerMap.clear();
    }
  }
);
}",0.6616541353383458
65707,"public TextCombo(Composite parent,int style){
  super(parent,style);
  GC gc=new GC(this);
  itemHeight=gc.getFontMetrics().getHeight() + 2;
  if (gc.getFont().getFontData() == null || gc.getFont().getFontData().length == 0) {
    fontBold=new Font(Display.getCurrent(),""String_Node_Str"",9,SWT.BOLD);
  }
 else {
    FontData fd=gc.getFont().getFontData()[0];
    fontBold=new Font(gc.getDevice(),fd.getName(),fd.getHeight(),fd.getStyle() | SWT.BOLD);
  }
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      fontBold.dispose();
      choiceMarkerMap.clear();
    }
  }
);
}","public TextCombo(Composite parent,int style){
  super(parent,style);
  GC gc=new GC(this);
  itemHeight=gc.getFontMetrics().getHeight() + 2;
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      fontBold.dispose();
      choiceMarkerMap.clear();
    }
  }
);
}",0.6616541353383458
65708,"public boolean add(Object o) throws IOException {
  if (size >= currentCacheStartIndex && size < (currentCacheStartIndex + bufferSize)) {
    buffer[size - currentCacheStartIndex]=o;
  }
  writeObject(o);
  size++;
  if (size % bufferSize == 0) {
    segmentOffsets.add(Integer.valueOf(getOffset()));
  }
  return true;
}","public boolean add(Object o) throws IOException {
  if (size >= currentCacheStartIndex && size < (currentCacheStartIndex + bufferSize)) {
    buffer[size - currentCacheStartIndex]=o;
  }
  writeObject(o);
  size++;
  if (size % bufferSize == 0) {
    segmentOffsets.add(getOffset());
  }
  return true;
}",0.9472
65709,"/** 
 * @return
 * @throws IOException
 */
private int getOffset() throws IOException {
  return (int)(randomAccessFile.getFilePointer());
}","/** 
 * @return
 * @throws IOException
 */
private long getOffset() throws IOException {
  return randomAccessFile.getFilePointer();
}",0.9562043795620438
65710,"public void clear() throws IOException {
  this.currentCacheStartIndex=-1;
  this.size=0;
  clearDiskFile();
  this.segmentOffsets.clear();
  this.segmentOffsets.add(Integer.valueOf(0));
  createRandomAccessFile();
}","public void clear() throws IOException {
  this.currentCacheStartIndex=-1;
  this.size=0;
  clearDiskFile();
  this.segmentOffsets.clear();
  this.segmentOffsets.add(Long.valueOf(0L));
  createRandomAccessFile();
}",0.9767441860465116
65711,"/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=0;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList();
  this.segmentOffsets.add(Integer.valueOf(0));
  createRandomAccessFile();
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}","/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=0;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList<Long>();
  this.segmentOffsets.add(Long.valueOf(0L));
  createRandomAccessFile();
  DataEngineThreadLocal.getInstance().getCloseListener().add(this);
}",0.9740634005763688
65712,"/** 
 * @param index
 * @return
 */
private int getSegmentOffset(int index){
  return ((Integer)(this.segmentOffsets.get(index / bufferSize))).intValue();
}","/** 
 * @param index
 * @return
 */
private long getSegmentOffset(int index){
  return this.segmentOffsets.get(index / bufferSize).longValue();
}",0.9235880398671096
65713,"/** 
 * Reads up to <code>readSize</code> objects from disk.
 * @param dis
 * @param list
 * @return
 * @throws IOException
 */
private void readObjects(int offset,int readSize) throws IOException {
  this.randomAccessFile.seek(offset);
  for (int i=0; i < readSize; i++) {
    this.buffer[i]=readObject();
  }
}","/** 
 * Reads up to <code>readSize</code> objects from disk.
 * @param dis
 * @param list
 * @return
 * @throws IOException
 */
private void readObjects(long offset,int readSize) throws IOException {
  this.randomAccessFile.seek(offset);
  for (int i=0; i < readSize; i++) {
    this.buffer[i]=readObject();
  }
}",0.9888
65714,"private boolean placeContentWithSize(LegendItemHints lih,Point size) throws ChartException {
  if (!hasPlaceForOneItem(size,lgData)) {
    return false;
  }
  if (dX + size.getX() > lgData.dAvailableWidth + lgData.dSafeSpacing) {
    columnList.clear();
    return false;
  }
 else {
    if (dY + size.getY() > lgData.dAvailableHeight + lgData.dSafeSpacing) {
      flushColumnList();
      return placeContentWithSize(lih,size);
    }
 else {
      dMaxW=Math.max(size.getX(),dMaxW);
      dY+=size.getY();
      lih.validItemLen(laiItem.getValidTextLen());
      lih.left(dX);
      lih.itemHeight(laiItem.getHeight());
      if (lih.getType() == LegendItemHints.Type.LG_GROUPNAME) {
        gnList.add(lih);
        lih.top(dY - size.getY() + lgData.insCa.getTop());
        lih.width(size.getX());
      }
 else {
        lih.top(dY - size.getY());
        lih.width(size.getX() - lgData.dHorizonalReservedSpace);
        if (bIsShowValue) {
          lih.valueHeight(laiValue.getHeight()).validValueLen(laiValue.getValidTextLen());
        }
      }
      columnList.add(lih);
      return true;
    }
  }
}","private boolean placeContentWithSize(LegendItemHints lih,Point size) throws ChartException {
  if (!hasPlaceForOneItem(size,lgData)) {
    return false;
  }
  if (dX + size.getX() > lgData.dAvailableWidth + lgData.dSafeSpacing) {
    columnList.clear();
    return false;
  }
 else {
    if (dY + size.getY() > lgData.dAvailableHeight + lgData.dSafeSpacing) {
      flushColumnList();
      Point newSize=computeContentSize(lih);
      return placeContentWithSize(lih,newSize);
    }
 else {
      dMaxW=Math.max(size.getX(),dMaxW);
      dY+=size.getY();
      lih.validItemLen(laiItem.getValidTextLen());
      lih.left(dX);
      lih.itemHeight(laiItem.getHeight());
      if (lih.getType() == LegendItemHints.Type.LG_GROUPNAME) {
        gnList.add(lih);
        lih.top(dY - size.getY() + lgData.insCa.getTop());
        lih.width(size.getX());
      }
 else {
        lih.top(dY - size.getY());
        lih.width(size.getX() - lgData.dHorizonalReservedSpace);
        if (bIsShowValue) {
          lih.valueHeight(laiValue.getHeight()).validValueLen(laiValue.getValidTextLen());
        }
      }
      columnList.add(lih);
      return true;
    }
  }
}",0.9691901408450704
65715,"/** 
 * Sets up the thread context class loader to make sure that Derby works with our class loader
 */
private void initClassLoaders(){
  if (derbyClassLoader == null) {
    derbyClassLoader=new DerbyClassLoader();
  }
}","/** 
 * Sets up the thread context class loader to make sure that Derby works with our class loader
 */
private synchronized void initClassLoaders(){
  if (derbyClassLoader == null) {
    derbyClassLoader=new DerbyClassLoader();
  }
}",0.9714285714285714
65716,"/** 
 * Gets a new instance of Derby JDBC Driver
 */
private Driver getDerbyDriver() throws SQLException {
  if (derbyDriver == null) {
    try {
      derbyDriver=(Driver)Class.forName(SampleDBConstants.DERBY_DRIVER_CLASS,true,derbyClassLoader).newInstance();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"" + SampleDBConstants.DERBY_DRIVER_CLASS,e);
      throw new SQLException(e.getLocalizedMessage());
    }
  }
  return derbyDriver;
}","/** 
 * Gets a new instance of Derby JDBC Driver
 */
private synchronized Driver getDerbyDriver() throws SQLException {
  if (derbyDriver == null) {
    try {
      derbyDriver=(Driver)Class.forName(SampleDBConstants.DERBY_DRIVER_CLASS,true,derbyClassLoader).newInstance();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"" + SampleDBConstants.DERBY_DRIVER_CLASS,e);
      throw new SQLException(e.getLocalizedMessage());
    }
  }
  return derbyDriver;
}",0.9864724245577524
65717,"/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Number) {
    if (source instanceof Double && (((Double)source).isInfinite() || ((Double)source).isNaN()))     return null;
 else     if (source instanceof Float && (((Float)source).isInfinite() || ((Float)source).isNaN()))     return null;
    String str=((Number)source).toString();
    try {
      return new BigDecimal(str);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{str,""String_Node_Str""});
    }
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof String) {
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(JRE_DEFAULT_LOCALE).parse((String)source);
        if (number != null)         return new BigDecimal(number.toString());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Number) {
    if (source instanceof Double && (((Double)source).isInfinite() || ((Double)source).isNaN()))     return null;
 else     if (source instanceof Float && (((Float)source).isInfinite() || ((Float)source).isNaN()))     return null;
    String str=((Number)source).toString();
    try {
      return new BigDecimal(str);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{str,""String_Node_Str""});
    }
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof String) {
    if (((String)source).length() == 0) {
      return null;
    }
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(JRE_DEFAULT_LOCALE).parse((String)source);
        if (number != null)         return new BigDecimal(number.toString());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.98278077615009
65718,"private void releaseValidationContexts(){
  for (  ValidationContext vc : validationContextMap.values()) {
    if (vc != null && vc.getConnection() != null) {
      vc.getConnection().close();
    }
  }
  validationContextMap=null;
}","private void releaseValidationContexts(){
  if (validationContextMap == null)   return;
  for (  ValidationContext vc : validationContextMap.values()) {
    if (vc != null && vc.getConnection() != null) {
      vc.getConnection().close();
    }
  }
  validationContextMap=null;
}",0.91015625
65719,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  for (  DataSourceRuntime ds : dataSources.values()) {
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerSet != null) {
    for (    IShutdownListener shutdownListener : shutdownListenerSet) {
      shutdownListener.dataEngineShutdown();
    }
    shutdownListenerSet.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  for (  DataSourceRuntime ds : dataSources.values()) {
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerSet != null) {
    for (    IShutdownListener shutdownListener : shutdownListenerSet.toArray(new IShutdownListener[0])) {
      shutdownListener.dataEngineShutdown();
    }
    shutdownListenerSet.clear();
    shutdownListenerSet=null;
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.983640081799591
65720,"public void addShutdownListener(IShutdownListener listener){
  if (shutdownListenerList == null)   shutdownListenerList=new ArrayList();
  for (int i=0; i < shutdownListenerList.size(); i++) {
    if (listener == shutdownListenerList.get(i))     return;
  }
  shutdownListenerList.add(listener);
}","public void addShutdownListener(IShutdownListener listener){
  if (shutdownListenerSet == null)   shutdownListenerSet=new LinkedHashSet<IShutdownListener>();
  if (shutdownListenerSet.contains(listener))   return;
  shutdownListenerSet.add(listener);
}",0.4772313296903461
65721,"public void removeListener(IShutdownListener listener){
  if (shutdownListenerList == null)   return;
  for (int i=0; i < shutdownListenerList.size(); i++) {
    if (listener == shutdownListenerList.get(i)) {
      shutdownListenerList.remove(i);
      return;
    }
  }
}","public void removeListener(IShutdownListener listener){
  if (shutdownListenerSet == null)   return;
  shutdownListenerSet.remove(listener);
}",0.642512077294686
65722,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  for (  DataSourceRuntime ds : dataSources.values()) {
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerSet != null) {
    for (    IShutdownListener shutdownListener : shutdownListenerSet) {
      shutdownListener.dataEngineShutdown();
    }
    shutdownListenerSet.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.9161616161616162
65723,"private StreamWriter getTempStreamManager(StreamID id){
  if (this.cachedStreamManagers.get(id) == null)   this.cachedStreamManagers.put(id,new StreamWriter(this.context,id));
  return (StreamWriter)this.cachedStreamManagers.get(id);
}","private StreamWriter getTempStreamManager(StreamID id){
  if (this.cachedStreamManagers.get(id) == null)   this.cachedStreamManagers.put(id,new StreamWriter(this.context,id));
  return this.cachedStreamManagers.get(id);
}",0.9692982456140352
65724,"/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion(this.getQueryResultUID());
    if (this.version == VersionManager.VERSION_2_0) {
      this.version=VersionManager.getLatestVersion();
    }
    vm.setVersion(version,this.getQueryResultUID());
    vm.setVersion(VersionManager.getLatestVersion(),null);
  }
 else {
    String queryResultId=this.getQueryResultUID();
    this.version=vm.getVersion(queryResultId);
    if (this.version == 0 && queryResultId != null) {
      this.version=vm.getLatestVersion();
      if (this.context.getDocWriter() != null)       vm.setVersion(this.version,queryResultId);
    }
  }
}","/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap<StreamID,StreamWriter>();
  this.metaManagers=new HashMap<StreamID,MetaStreamReader>();
  this.dataMetaManagers=new HashMap<StreamID,DataStreamReader>();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion(this.getQueryResultUID());
    if (this.version == VersionManager.VERSION_2_0) {
      this.version=VersionManager.getLatestVersion();
    }
    vm.setVersion(version,this.getQueryResultUID());
    vm.setVersion(VersionManager.getLatestVersion(),null);
  }
 else {
    String queryResultId=this.getQueryResultUID();
    this.version=vm.getVersion(queryResultId);
    if (this.version == 0 && queryResultId != null) {
      this.version=VersionManager.getLatestVersion();
      if (this.context.getDocWriter() != null)       vm.setVersion(this.version,queryResultId);
    }
  }
}",0.9597761455054216
65725,"/** 
 * @param id
 * @return
 * @throws DataException
 */
private StreamReader getMetaManager(StreamID id,int sType) throws DataException {
  if (sType == DataEngineContext.DATASET_DATA_STREAM || sType == DataEngineContext.DATASET_META_STREAM) {
    if (this.dataMetaManagers.get(id) == null)     this.dataMetaManagers.put(id,new DataStreamReader(this.context,id));
    return (StreamReader)this.dataMetaManagers.get(id);
  }
  if (this.metaManagers.get(id) == null) {
    this.metaManagers.put(id,new MetaStreamReader(this.context,id));
  }
  return (StreamReader)this.metaManagers.get(id);
}","/** 
 * @param id
 * @return
 * @throws DataException
 */
private StreamReader getMetaManager(StreamID id,int sType) throws DataException {
  if (sType == DataEngineContext.DATASET_DATA_STREAM || sType == DataEngineContext.DATASET_META_STREAM) {
    if (this.dataMetaManagers.get(id) == null)     this.dataMetaManagers.put(id,new DataStreamReader(this.context,id));
    return this.dataMetaManagers.get(id);
  }
  if (this.metaManagers.get(id) == null) {
    this.metaManagers.put(id,new MetaStreamReader(this.context,id));
  }
  return this.metaManagers.get(id);
}",0.9758203799654576
65726,"/** 
 * @param context
 * @param id
 */
public StreamWriter(DataEngineContext context,StreamID id){
  this.id=id;
  this.cachedStreams=new HashMap();
  this.context=context;
}","/** 
 * @param context
 * @param id
 */
public StreamWriter(DataEngineContext context,StreamID id){
  this.id=id;
  this.cachedStreams=new HashMap<Integer,OutputStream>();
  this.context=context;
}",0.9408602150537636
65727,"public static QuerySpecification optimizeExecution(String dataSourceId,ValidationContext validationContext,IOdaDataSetDesign dataSetDesign,IQueryDefinition query,DataEngineSession session,Map appContext,IQueryContextVisitor contextVisitor){
  return null;
}","public static QuerySpecification optimizeExecution(String dataSourceId,ValidationContext validationContext,IOdaDataSetDesign dataSetDesign,IQueryDefinition query,DataEngineSession session,Map appContext,IQueryContextVisitor contextVisitor) throws DataException {
  return null;
}",0.9589552238805972
65728,"/** 
 * Destroy action
 * @param rollback true: rollback to savedItemModel false: do nothing
 */
public void destory(boolean rollback){
  if (rollback) {
    if (ds instanceof OdaDataSetHandle) {
      try {
        ((OdaDataSetHandle)ds).setQueryText(this.savedQueryText);
        DataSetProvider.getCurrentInstance().getDataSetDesign(ds,true,true);
      }
 catch (      SemanticException e) {
      }
catch (      BirtException e) {
      }
    }
    DataSetProvider.getCurrentInstance().setModelOfDataSetHandle(this.ds,savedItemModel);
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
  if (ds != null)   ds.removeListener(this);
}","/** 
 * Destroy action
 * @param rollback true: rollback to savedItemModel false: do nothing
 */
public void destory(boolean rollback){
  if (rollback) {
    if (ds instanceof OdaDataSetHandle) {
      try {
        ((OdaDataSetHandle)ds).setQueryText(this.savedQueryText);
      }
 catch (      SemanticException e) {
      }
catch (      BirtException e) {
      }
    }
    DataSetProvider.getCurrentInstance().setModelOfDataSetHandle(this.ds,savedItemModel);
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
  DataSetProvider.getCurrentInstance().clear(ds);
  if (ds != null)   ds.removeListener(this);
}",0.9011673151750972
65729,"/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target)|| ""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}","/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target)|| ""String_Node_Str"".equalsIgnoreCase(target)) {
    Matcher matcherHtml=PAGE_LINK_PATTERN_HTML.matcher(hyperlink);
    if (matcherHtml.find()) {
      return new PdfAction(hyperlink);
    }
    Matcher matcherLocal=PAGE_LINK_PATTERN_LOCAL.matcher(hyperlink);
    if (matcherLocal.find()) {
      String fileName=matcherLocal.group(1);
      String pageNumber=matcherLocal.group(matcherLocal.groupCount());
      return new PdfAction(fileName,Integer.valueOf(pageNumber));
    }
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}",0.7898338220918866
65730,"private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs=null;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    if (saveToRD || executor.getCubeQueryDefinition().cacheQueryResults())     id=executor.getSession().getQueryResultIDUtil().nextID();
    rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
      initLoadedAggregationResultSets(rs,aggrDefns);
    }
 else {
      if (executor.getContext().getDocReader() != null) {
        rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
        initLoadedAggregationResultSets(rs,aggrDefns);
      }
 else {
        rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
      }
    }
  }
  executor.setQueryResultsId(id);
  return rs;
}","private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs=null;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    if (saveToRD || executor.getCubeQueryDefinition().cacheQueryResults())     id=executor.getSession().getQueryResultIDUtil().nextID();
    rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
      initLoadedAggregationResultSets(rs,aggrDefns);
    }
 else {
      if (executor.getContext().getDocReader() != null && executor.getContext().getMode() != DataEngineContext.MODE_GENERATION) {
        rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
        initLoadedAggregationResultSets(rs,aggrDefns);
      }
 else {
        rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
      }
    }
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.9769673704414588
65731,"/** 
 * Gets the BaseFont object to display the given character. The search sequence is: <li> try the font family defined in the families to see if one can be used to display the character. </li> <li> try to use the default font to display the character. </li> <li> if none of the above sucess, return NULL for the character.</li>
 * @param c the given character.
 * @return the BaseFont. it alwys return a font.
 */
public BaseFont getMappedFont(char c){
  for (int i=0; i < fontFamilies.length; i++) {
    String fontFamily=fontManager.getAliasedFont(fontFamilies[i]);
    CompositeFont cf=fontManager.getCompositeFont(fontFamily);
    if (cf != null) {
      String usedFont=cf.getUsedFont(c);
      if (usedFont != null) {
        BaseFont bf=createBaseFont(usedFont);
        if (bf != null) {
          return bf;
        }
      }
    }
 else {
      BaseFont bf=createBaseFont(fontFamily);
      if (bf != null && bf.charExists(c)) {
        return bf;
      }
    }
  }
  CompositeFont df=fontManager.getCompositeFont(FontMappingManager.FONT_NAME_ALL_FONTS);
  if (df != null) {
    String usedFont=df.getUsedFont(c);
    if (usedFont != null) {
      BaseFont bf=createBaseFont(usedFont);
      if (bf != null) {
        return bf;
      }
    }
  }
  BaseFont bf=createBaseFont(FontMappingManager.DEFAULT_FONT);
  if (bf == null) {
    throw new NullPointerException(""String_Node_Str"" + FontMappingManager.DEFAULT_FONT + ""String_Node_Str"");
  }
  return bf;
}","/** 
 * Gets the BaseFont object to display the given character. The search sequence is: <li> try the font family defined in the families to see if one can be used to display the character. </li> <li> try to use the default font to display the character. </li> <li> if none of the above success, return NULL for the character.</li>
 * @param c the given character.
 * @return the BaseFont. it always return a font.
 */
public BaseFont getMappedFont(char c){
  if (WEAK_FONT_CHARS.indexOf(c) != -1) {
    if (bf != null && bf.charExists(c)) {
      return bf;
    }
  }
  for (int i=0; i < fontFamilies.length; i++) {
    String fontFamily=fontManager.getAliasedFont(fontFamilies[i]);
    CompositeFont cf=fontManager.getCompositeFont(fontFamily);
    if (cf != null) {
      String usedFont=cf.getUsedFont(c);
      if (usedFont != null) {
        BaseFont bf=createBaseFont(usedFont);
        if (bf != null) {
          return bf;
        }
      }
    }
 else {
      BaseFont bf=createBaseFont(fontFamily);
      if (bf != null && bf.charExists(c)) {
        return bf;
      }
    }
  }
  CompositeFont df=fontManager.getCompositeFont(FontMappingManager.FONT_NAME_ALL_FONTS);
  if (df != null) {
    String usedFont=df.getUsedFont(c);
    if (usedFont != null) {
      BaseFont bf=createBaseFont(usedFont);
      if (bf != null) {
        return bf;
      }
    }
  }
  BaseFont bf=createBaseFont(FontMappingManager.DEFAULT_FONT);
  if (bf == null) {
    throw new NullPointerException(""String_Node_Str"" + FontMappingManager.DEFAULT_FONT + ""String_Node_Str"");
  }
  return bf;
}",0.9629872256796592
65732,"/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target)|| ""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}","/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target)|| ""String_Node_Str"".equalsIgnoreCase(target)) {
    Matcher matcherHtml=PAGE_LINK_PATTERN_HTML.matcher(hyperlink);
    if (matcherHtml.find()) {
      return new PdfAction(hyperlink);
    }
    Matcher matcherLocal=PAGE_LINK_PATTERN_LOCAL.matcher(hyperlink);
    if (matcherLocal.find()) {
      String fileName=matcherLocal.group(1);
      String pageNumber=matcherLocal.group(matcherLocal.groupCount());
      return new PdfAction(fileName,Integer.valueOf(pageNumber));
    }
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}",0.7898338220918866
65733,"public void onPage(long page,Object pageContext){
  context.firePageBreakEvent();
}","public void onPage(long page,Object pageContext){
  if (pageContext instanceof HTMLLayoutContext) {
    context.firePageBreakEvent(((HTMLLayoutContext)pageContext).isHorizontalPageBreak());
  }
 else {
    context.firePageBreakEvent(false);
  }
}",0.5045592705167173
65734,"/** 
 * Notify page break listeners that page is broken.
 */
public void firePageBreakEvent(){
  if (pageBreakListeners != null) {
    for (int i=0; i < pageBreakListeners.size(); i++) {
      ((IPageBreakListener)pageBreakListeners.get(i)).onPageBreak();
    }
  }
}","/** 
 * Notify page break listeners that page is broken.
 */
public void firePageBreakEvent(boolean isHorizontalPageBreak){
  if (pageBreakListeners != null) {
    for (int i=0; i < pageBreakListeners.size(); i++) {
      ((IPageBreakListener)pageBreakListeners.get(i)).onPageBreak(isHorizontalPageBreak);
    }
  }
}",0.9143835616438356
65735,"/** 
 * Handler to preocess page break before event.
 */
void onPageBreak();","/** 
 * Handler to preocess page break before event.
 */
void onPageBreak(boolean isHorizontalPageBreak);",0.8397790055248618
65736,"void next(){
  if (pageBreakInterval > 0) {
    pageRowCount++;
    ignorePageBreak=false;
  }
}","void next(){
  if (pageBreakInterval > 0) {
    pageRowCount++;
  }
}",0.8363636363636363
65737,"public void onPageBreak(){
  if (!ignorePageBreak) {
    pageRowCount=0;
    if (addAfterBreak) {
      next();
      addAfterBreak=false;
    }
 else {
      if (softBreakBefore) {
        softBreakBefore=false;
      }
    }
    ignorePageBreak=true;
  }
}","public void onPageBreak(boolean isHorizontalPageBreak){
  if (!isHorizontalPageBreak) {
    pageRowCount=0;
    if (addAfterBreak) {
      next();
      addAfterBreak=false;
    }
 else {
      if (softBreakBefore) {
        softBreakBefore=false;
      }
    }
  }
}",0.8533333333333334
65738,"/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
public void close() throws BirtException {
  if (pageBreakInterval != -1) {
    context.removePageBreakListener(this);
  }
  rsetCursor=-1;
  needPageBreak=false;
  pageRowCount=0;
  pageBreakInterval=-1;
  executableElements=null;
  totalElements=0;
  currentElement=0;
  endOfListing=false;
  breakOnDetailBand=false;
  pageBreakLevel=-1;
  softBreakBefore=false;
  addAfterBreak=false;
  ignorePageBreak=true;
  super.close();
}","/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
public void close() throws BirtException {
  if (pageBreakInterval != -1) {
    context.removePageBreakListener(this);
  }
  rsetCursor=-1;
  needPageBreak=false;
  pageRowCount=0;
  pageBreakInterval=-1;
  executableElements=null;
  totalElements=0;
  currentElement=0;
  endOfListing=false;
  breakOnDetailBand=false;
  pageBreakLevel=-1;
  softBreakBefore=false;
  addAfterBreak=false;
  super.close();
}",0.9864559819413092
65739,"protected void pageBreakEvent(){
  context.getPageHintManager().setPageHint(generator.getPageHint());
  long pageNumber=context.getPageNumber();
  ILayoutPageHandler pageHandler=context.getLayoutEngine().getPageHandler();
  if (pageHandler != null) {
    pageHandler.onPage(pageNumber,context);
  }
}","protected void pageBreakEvent(){
  context.getPageHintManager().setPageHint(generator.getPageHint());
  long pageNumber=context.getPageNumber();
  ILayoutPageHandler pageHandler=context.getLayoutEngine().getPageHandler();
  if (pageHandler != null) {
    context.setHorizontalPageBreak(true);
    pageHandler.onPage(pageNumber,context);
    context.setHorizontalPageBreak(false);
  }
}",0.8759124087591241
65740,"protected void drawBackgroundImage(float x,float y,float width,float height,float imageWidth,float imageHeight,int repeat,String imageUrl,byte[] imageData,float offsetX,float offsetY) throws Exception {
  contentByte.saveState();
  clip(x,y,width,height);
  PdfTemplate image=null;
  if (imageUrl != null) {
    if (pageDevice.getImageCache().containsKey(imageUrl)) {
      image=pageDevice.getImageCache().get(imageUrl);
    }
  }
  if (image == null) {
    Image img=Image.getInstance(imageData);
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.getPlainWidth() / resolutionX * 72;
      imageHeight=img.getPlainHeight() / resolutionY * 72;
    }
    image=contentByte.createTemplate(imageWidth,imageHeight);
    image.addImage(img,imageWidth,0,0,imageHeight,0,0);
    if (imageUrl != null && image != null) {
      pageDevice.getImageCache().put(imageUrl,image);
    }
  }
  float remainX=width;
  float remainY=height;
  imageWidth=image.getWidth();
  imageHeight=image.getHeight();
  do {
    remainX=width;
    do {
      drawImage(image,x + width - remainX,y + offsetY + height - remainY,imageWidth,imageHeight);
      remainX-=imageWidth;
    }
 while (remainX > 0 && ((repeat & BackgroundImageInfo.REPEAT_X) == BackgroundImageInfo.REPEAT_X));
    remainY-=imageHeight;
  }
 while (remainY > 0 && ((repeat & BackgroundImageInfo.REPEAT_Y) == BackgroundImageInfo.REPEAT_Y));
  contentByte.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,float imageWidth,float imageHeight,int repeat,String imageUrl,byte[] imageData,float offsetX,float offsetY) throws Exception {
  contentByte.saveState();
  clip(x,y,width,height);
  PdfTemplate image=null;
  if (imageUrl != null) {
    if (pageDevice.getImageCache().containsKey(imageUrl)) {
      image=pageDevice.getImageCache().get(imageUrl);
    }
  }
  if (image == null) {
    Image img=Image.getInstance(imageData);
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.getPlainWidth() / resolutionX * 72;
      imageHeight=img.getPlainHeight() / resolutionY * 72;
    }
    image=contentByte.createTemplate(imageWidth,imageHeight);
    image.addImage(img,imageWidth,0,0,imageHeight,0,0);
    if (imageUrl != null && image != null) {
      pageDevice.getImageCache().put(imageUrl,image);
    }
  }
  boolean xExtended=(repeat & BackgroundImageInfo.REPEAT_X) == BackgroundImageInfo.REPEAT_X;
  boolean yExtended=(repeat & BackgroundImageInfo.REPEAT_Y) == BackgroundImageInfo.REPEAT_Y;
  imageWidth=image.getWidth();
  imageHeight=image.getHeight();
  float originalX=offsetX;
  float originalY=offsetY;
  if (xExtended) {
    while (originalX > 0)     originalX-=imageWidth;
  }
  if (yExtended) {
    while (originalY > 0)     originalY-=imageHeight;
  }
  float startY=originalY;
  do {
    float startX=originalX;
    do {
      drawImage(image,x + startX,y + startY,imageWidth,imageHeight);
      startX+=imageWidth;
    }
 while (startX < width && xExtended);
    startY+=imageHeight;
  }
 while (startY < height && yExtended);
  contentByte.restoreState();
}",0.726745870762098
65741,"public IBinding adaptBinding(ComputedColumnHandle handle,ExpressionLocation el) throws AdapterException {
  if (el.equals(ExpressionLocation.TABLE)) {
    return this.adaptBinding(handle);
  }
 else {
    Binding binding=null;
    try {
      binding=new Binding(handle.getName());
      binding.setAggrFunction(handle.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
      binding.setExpression(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
      if (handle.getFilterExpression() != null) {
        binding.setFilter(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
      for (Iterator argItr=handle.argumentsIterator(); argItr.hasNext(); ) {
        AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
        binding.addArgument(aah.getName(),adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      binding.setTimeFunction(adaptTimeFunction(handle));
    }
 catch (    BirtException ex) {
      throw new AdapterException(ex.getLocalizedMessage());
    }
    return binding;
  }
}","public IBinding adaptBinding(ComputedColumnHandle handle,ExpressionLocation el) throws AdapterException {
  if (el.equals(ExpressionLocation.TABLE)) {
    return this.adaptBinding(handle);
  }
 else {
    Binding binding=null;
    try {
      binding=new Binding(handle.getName());
      binding.setAggrFunction(handle.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
      binding.setDisplayName(handle.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,this.context.getDataEngineContext().getLocale()));
      binding.setExpression(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(handle.getDataType()));
      if (handle.getFilterExpression() != null) {
        binding.setFilter(adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
      for (Iterator argItr=handle.argumentsIterator(); argItr.hasNext(); ) {
        AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
        binding.addArgument(aah.getName(),adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      binding.setTimeFunction(adaptTimeFunction(handle));
    }
 catch (    BirtException ex) {
      throw new AdapterException(ex.getLocalizedMessage());
    }
    return binding;
  }
}",0.918614474795832
65742,"private void createMainBrowser(){
  if (BrowserManager.getInstance().isEmbeddedBrowserPresent()) {
    if (browser != null && !browser.isDisposed()) {
      browser.dispose();
    }
    browser=new Browser(mainPane,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    browser.setLayoutData(gd);
    browser.addProgressListener(new ProgressListener(){
      public void changed(      ProgressEvent event){
      }
      public void completed(      ProgressEvent event){
        progressBar.setVisible(false);
      }
    }
);
    browser.addOpenWindowListener(new OpenWindowListener(){
      public void open(      final WindowEvent event){
        final Shell shell=UIUtil.createDefaultShell();
        shell.setLayout(new FillLayout());
        Browser browser=new Browser(shell,SWT.NONE);
        initialize(Display.getCurrent(),browser);
        event.browser=browser;
        shell.open();
      }
    }
);
    browser.addCloseWindowListener(new CloseWindowListener(){
      public void close(      WindowEvent event){
        Display.getCurrent().asyncExec(new Runnable(){
          public void run(){
            createMainBrowser();
            mainPane.layout(true);
          }
        }
);
      }
    }
);
  }
 else {
    Composite control=new Composite(mainPane,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    control.setLayoutData(gd);
    bParameter.setEnabled(false);
    progressBar.setVisible(false);
    control.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    control.setLayout(new GridLayout());
    Label message=new Label(control,SWT.NONE);
    message.setText(Messages.getString(""String_Node_Str""));
    message.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  }
}","private void createMainBrowser(){
  if (BrowserManager.getInstance().isEmbeddedBrowserPresent()) {
    if (browser != null && !browser.isDisposed()) {
      browser.dispose();
    }
    if (Constants.OS_LINUX.equalsIgnoreCase(Platform.getOS())) {
      browser=new Browser(mainPane,SWT.MOZILLA);
    }
 else {
      browser=new Browser(mainPane,SWT.NONE);
    }
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    browser.setLayoutData(gd);
    browser.addProgressListener(new ProgressListener(){
      public void changed(      ProgressEvent event){
      }
      public void completed(      ProgressEvent event){
        progressBar.setVisible(false);
      }
    }
);
    browser.addOpenWindowListener(new OpenWindowListener(){
      public void open(      final WindowEvent event){
        final Shell shell=UIUtil.createDefaultShell();
        shell.setLayout(new FillLayout());
        Browser browser;
        if (Constants.OS_LINUX.equalsIgnoreCase(Platform.getOS())) {
          browser=new Browser(shell,SWT.MOZILLA);
        }
 else {
          browser=new Browser(shell,SWT.NONE);
        }
        initialize(Display.getCurrent(),browser);
        event.browser=browser;
        shell.open();
      }
    }
);
    browser.addCloseWindowListener(new CloseWindowListener(){
      public void close(      WindowEvent event){
        Display.getCurrent().asyncExec(new Runnable(){
          public void run(){
            createMainBrowser();
            mainPane.layout(true);
          }
        }
);
      }
    }
);
  }
 else {
    Composite control=new Composite(mainPane,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    control.setLayoutData(gd);
    bParameter.setEnabled(false);
    progressBar.setVisible(false);
    control.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    control.setLayout(new GridLayout());
    Label message=new Label(control,SWT.NONE);
    message.setText(Messages.getString(""String_Node_Str""));
    message.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  }
}",0.9230769230769232
65743,"/** 
 * initialize browser.
 * @param display Display
 * @param browser Browser
 * @return
 */
private static void initialize(final Display display,Browser browser){
  browser.addOpenWindowListener(new OpenWindowListener(){
    public void open(    final WindowEvent event){
      final Shell shell=UIUtil.createDefaultShell();
      shell.setLayout(new FillLayout());
      Browser browser=new Browser(shell,SWT.NONE);
      initialize(display,browser);
      event.browser=browser;
      shell.open();
    }
  }
);
  browser.addTitleListener(new TitleListener(){
    public void changed(    TitleEvent event){
      if (event.title != null && event.title.length() > 0) {
        Browser browser=(Browser)event.widget;
        Shell shell=browser.getShell();
        shell.setText(event.title);
      }
    }
  }
);
}","/** 
 * initialize browser.
 * @param display Display
 * @param browser Browser
 * @return
 */
private static void initialize(final Display display,Browser browser){
  browser.addOpenWindowListener(new OpenWindowListener(){
    public void open(    final WindowEvent event){
      final Shell shell=UIUtil.createDefaultShell();
      shell.setLayout(new FillLayout());
      Browser browser;
      if (Constants.OS_LINUX.equalsIgnoreCase(Platform.getOS())) {
        browser=new Browser(shell,SWT.MOZILLA);
      }
 else {
        browser=new Browser(shell,SWT.NONE);
      }
      initialize(display,browser);
      event.browser=browser;
      shell.open();
    }
  }
);
  browser.addTitleListener(new TitleListener(){
    public void changed(    TitleEvent event){
      if (event.title != null && event.title.length() > 0) {
        Browser browser=(Browser)event.widget;
        Shell shell=browser.getShell();
        shell.setText(event.title);
      }
    }
  }
);
}",0.9129464285714286
65744,"public void open(final WindowEvent event){
  final Shell shell=UIUtil.createDefaultShell();
  shell.setLayout(new FillLayout());
  Browser browser=new Browser(shell,SWT.NONE);
  initialize(display,browser);
  event.browser=browser;
  shell.open();
}","public void open(final WindowEvent event){
  final Shell shell=UIUtil.createDefaultShell();
  shell.setLayout(new FillLayout());
  Browser browser;
  if (Constants.OS_LINUX.equalsIgnoreCase(Platform.getOS())) {
    browser=new Browser(shell,SWT.MOZILLA);
  }
 else {
    browser=new Browser(shell,SWT.NONE);
  }
  initialize(display,browser);
  event.browser=browser;
  shell.open();
}",0.7854889589905363
65745,"private void showAggregateParameters(String aggFuncName){
  Control[] children=fAggParameterComposite.getChildren();
  for (int i=0; i < children.length; i++) {
    children[i].dispose();
  }
  fAggParamtersTextWidgets.clear();
  fExprBuilderWidgetsMap.clear();
  IAggregateFunction aFunc=null;
  try {
    aFunc=PluginSettings.instance().getAggregateFunction(aggFuncName);
  }
 catch (  ChartException e) {
    ;
  }
  String[] args=null;
  if (aFunc != null) {
    args=aFunc.getDisplayParameters();
  }
  if (aFunc != null && args != null && args.length > 0) {
    ((GridData)fAggParameterComposite.getLayoutData()).exclude=false;
    ((GridData)fAggParameterComposite.getLayoutData()).heightHint=SWT.DEFAULT;
    for (int i=0; i < args.length; i++) {
      Label lblArg=new Label(fAggParameterComposite,SWT.NONE);
      lblArg.setText(args[i] + ""String_Node_Str"");
      GridData gd=new GridData();
      lblArg.setLayoutData(gd);
      Text txtArg=new Text(fAggParameterComposite,SWT.BORDER);
      GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
      gridData.horizontalIndent=0;
      txtArg.setLayoutData(gridData);
      fAggParamtersTextWidgets.add(txtArg);
      txtArg.addSelectionListener(this);
      txtArg.addListener(SWT.FocusOut,this);
      txtArg.addListener(SWT.Traverse,this);
      txtArg.addFocusListener(new FocusListener(){
        public void focusGained(        FocusEvent e){
        }
        public void focusLost(        FocusEvent e){
          setAggParameter((Text)e.getSource());
        }
      }
);
      txtArg.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          setAggParameter((Text)e.getSource());
        }
      }
);
      Button btnBuilder=new Button(fAggParameterComposite,SWT.PUSH);
{
        fExprBuilderWidgetsMap.put(btnBuilder,txtArg);
        GridData gdBTNBuilder=new GridData();
        ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
        btnBuilder.setLayoutData(gdBTNBuilder);
        btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
        btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
        btnBuilder.getImage().setBackground(btnBuilder.getBackground());
        btnBuilder.setEnabled(fChartContext.getUIServiceProvider().isInvokingSupported());
        btnBuilder.setVisible(fChartContext.getUIServiceProvider().isEclipseModeSupported());
        btnBuilder.addSelectionListener(this);
        btnBuilder.addListener(SWT.FocusOut,this);
        btnBuilder.addListener(SWT.Traverse,this);
      }
    }
  }
 else {
    ((GridData)fAggParameterComposite.getLayoutData()).heightHint=0;
  }
  fAggParameterComposite.layout();
  fCmpAggregate.layout();
  Composite c=fAggParameterComposite;
  while (c != getShell()) {
    c.layout();
    c=c.getParent();
  }
  getShell().pack();
  populateAggParameters();
}","private void showAggregateParameters(String aggFuncName){
  Control[] children=fAggParameterComposite.getChildren();
  for (int i=0; i < children.length; i++) {
    children[i].dispose();
  }
  fAggParamtersTextWidgets.clear();
  fExprBuilderWidgetsMap.clear();
  IAggregateFunction aFunc=null;
  try {
    if (aggFuncName != null && !AGG_FUNC_NONE.equals(aggFuncName)) {
      aFunc=PluginSettings.instance().getAggregateFunction(aggFuncName);
    }
  }
 catch (  ChartException e) {
    ;
  }
  String[] args=null;
  if (aFunc != null) {
    args=aFunc.getDisplayParameters();
  }
  if (aFunc != null && args != null && args.length > 0) {
    ((GridData)fAggParameterComposite.getLayoutData()).exclude=false;
    ((GridData)fAggParameterComposite.getLayoutData()).heightHint=SWT.DEFAULT;
    for (int i=0; i < args.length; i++) {
      Label lblArg=new Label(fAggParameterComposite,SWT.NONE);
      lblArg.setText(args[i] + ""String_Node_Str"");
      GridData gd=new GridData();
      lblArg.setLayoutData(gd);
      Text txtArg=new Text(fAggParameterComposite,SWT.BORDER);
      GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
      gridData.horizontalIndent=0;
      txtArg.setLayoutData(gridData);
      fAggParamtersTextWidgets.add(txtArg);
      txtArg.addSelectionListener(this);
      txtArg.addListener(SWT.FocusOut,this);
      txtArg.addListener(SWT.Traverse,this);
      txtArg.addFocusListener(new FocusListener(){
        public void focusGained(        FocusEvent e){
        }
        public void focusLost(        FocusEvent e){
          setAggParameter((Text)e.getSource());
        }
      }
);
      txtArg.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          setAggParameter((Text)e.getSource());
        }
      }
);
      Button btnBuilder=new Button(fAggParameterComposite,SWT.PUSH);
{
        fExprBuilderWidgetsMap.put(btnBuilder,txtArg);
        GridData gdBTNBuilder=new GridData();
        ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
        btnBuilder.setLayoutData(gdBTNBuilder);
        btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
        btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
        btnBuilder.getImage().setBackground(btnBuilder.getBackground());
        btnBuilder.setEnabled(fChartContext.getUIServiceProvider().isInvokingSupported());
        btnBuilder.setVisible(fChartContext.getUIServiceProvider().isEclipseModeSupported());
        btnBuilder.addSelectionListener(this);
        btnBuilder.addListener(SWT.FocusOut,this);
        btnBuilder.addListener(SWT.Traverse,this);
      }
    }
  }
 else {
    ((GridData)fAggParameterComposite.getLayoutData()).heightHint=0;
  }
  fAggParameterComposite.layout();
  fCmpAggregate.layout();
  Composite c=fAggParameterComposite;
  while (c != getShell()) {
    c.layout();
    c=c.getParent();
  }
  getShell().pack();
  populateAggParameters();
}",0.9867992456711812
65746,"public static void writeObject(DataOutputStream dos,Object fieldValue,Class fieldType) throws IOException, DataException {
  if (fieldValue == null) {
    dos.writeByte(0);
    return;
  }
 else {
    dos.writeByte(1);
  }
  if (fieldType.equals(Integer.class))   dos.writeInt(((Integer)convert(fieldValue,DataType.INTEGER_TYPE)).intValue());
 else   if (fieldType.equals(Double.class))   dos.writeDouble(((Double)convert(fieldValue,DataType.DOUBLE_TYPE)).doubleValue());
 else   if (fieldType.equals(BigDecimal.class))   dos.writeUTF(((BigDecimal)convert(fieldValue,DataType.DECIMAL_TYPE)).toString());
 else   if (Date.class.isAssignableFrom(fieldType))   dos.writeLong(((Date)convert(fieldValue,DataType.DATE_TYPE)).getTime());
 else   if (fieldType.equals(Boolean.class))   dos.writeBoolean(((Boolean)convert(fieldValue,DataType.BOOLEAN_TYPE)).booleanValue());
 else   if (fieldType.equals(String.class))   IOUtil.writeString(dos,fieldValue.toString());
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   IOUtil.writeString(dos,fieldValue.toString());
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    byte[] bytes=(byte[])fieldValue;
    if (bytes == null || bytes.length == 0) {
      IOUtil.writeInt(dos,0);
    }
 else {
      IOUtil.writeInt(dos,bytes.length);
      dos.write((byte[])fieldValue);
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    if (!(fieldValue instanceof Serializable))     throw new DataException(ResourceConstants.NOT_SERIALIZABLE_CLASS,fieldValue.getClass().getName());
    ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
    oo.writeObject(fieldValue);
    oo.close();
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
}","public static void writeObject(DataOutputStream dos,Object fieldValue,Class fieldType) throws IOException, DataException {
  if (fieldValue == null) {
    dos.writeByte(0);
    return;
  }
 else {
    dos.writeByte(1);
  }
  if (fieldType.equals(Integer.class))   dos.writeInt(((Integer)convert(fieldValue,DataType.INTEGER_TYPE)).intValue());
 else   if (fieldType.equals(Double.class))   dos.writeDouble(((Double)convert(fieldValue,DataType.DOUBLE_TYPE)).doubleValue());
 else   if (fieldType.equals(BigDecimal.class))   dos.writeUTF(((BigDecimal)convert(fieldValue,DataType.DECIMAL_TYPE)).toString());
 else   if (Date.class.isAssignableFrom(fieldType))   dos.writeLong(((Date)convert(fieldValue,DataType.DATE_TYPE)).getTime());
 else   if (fieldType.equals(Boolean.class))   dos.writeBoolean(((Boolean)convert(fieldValue,DataType.BOOLEAN_TYPE)).booleanValue());
 else   if (fieldType.equals(String.class))   IOUtil.writeString(dos,fieldValue.toString());
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   IOUtil.writeString(dos,fieldValue.toString());
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    byte[] bytes=(byte[])fieldValue;
    if (bytes == null || bytes.length == 0) {
      IOUtil.writeInt(dos,0);
    }
 else {
      IOUtil.writeInt(dos,bytes.length);
      dos.write((byte[])fieldValue);
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    if (!(fieldValue instanceof Serializable))     throw new DataException(ResourceConstants.NOT_SERIALIZABLE_CLASS,fieldValue.getClass().getName());
    IOUtil.writeObject(dos,fieldValue);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
}",0.9684734513274336
65747,"public static Object readObject(DataInputStream dis,Class fieldType,ClassLoader classLoader) throws IOException, DataException {
  Object obj=null;
  if (dis.readByte() == 0) {
    obj=null;
    return obj;
  }
  if (fieldType.equals(Integer.class))   obj=Integer.valueOf(dis.readInt());
 else   if (fieldType.equals(Double.class))   obj=new Double(dis.readDouble());
 else   if (fieldType.equals(BigDecimal.class))   obj=new BigDecimal(dis.readUTF());
 else   if (fieldType.equals(Time.class))   obj=new Time(dis.readLong());
 else   if (fieldType.equals(Timestamp.class))   obj=new Timestamp(dis.readLong());
 else   if (fieldType.equals(java.sql.Date.class))   obj=new java.sql.Date(dis.readLong());
 else   if (Date.class.isAssignableFrom(fieldType))   obj=new Date(dis.readLong());
 else   if (fieldType.equals(Boolean.class))   obj=Boolean.valueOf(dis.readBoolean());
 else   if (fieldType.equals(String.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    int len=IOUtil.readInt(dis);
    if (len == 0) {
      obj=null;
    }
 else {
      byte[] bytes=new byte[len];
      dis.read(bytes);
      obj=bytes;
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    ObjectInputStream ois=null;
    if (classLoader != null) {
      ois=ObjectSecurity.createObjectInputStream(dis,classLoader);
    }
 else {
      ois=ObjectSecurity.createObjectInputStream(dis);
    }
    try {
      obj=ObjectSecurity.readObject(ois);
    }
 catch (    Exception e) {
    }
    ois.close();
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
  return obj;
}","public static Object readObject(DataInputStream dis,Class fieldType,ClassLoader classLoader) throws IOException, DataException {
  Object obj=null;
  if (dis.readByte() == 0) {
    obj=null;
    return obj;
  }
  if (fieldType.equals(Integer.class))   obj=Integer.valueOf(dis.readInt());
 else   if (fieldType.equals(Double.class))   obj=new Double(dis.readDouble());
 else   if (fieldType.equals(BigDecimal.class))   obj=new BigDecimal(dis.readUTF());
 else   if (fieldType.equals(Time.class))   obj=new Time(dis.readLong());
 else   if (fieldType.equals(Timestamp.class))   obj=new Timestamp(dis.readLong());
 else   if (fieldType.equals(java.sql.Date.class))   obj=new java.sql.Date(dis.readLong());
 else   if (Date.class.isAssignableFrom(fieldType))   obj=new Date(dis.readLong());
 else   if (fieldType.equals(Boolean.class))   obj=Boolean.valueOf(dis.readBoolean());
 else   if (fieldType.equals(String.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))   obj=IOUtil.readString(dis);
 else   if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
    int len=IOUtil.readInt(dis);
    if (len == 0) {
      obj=null;
    }
 else {
      byte[] bytes=new byte[len];
      dis.read(bytes);
      obj=bytes;
    }
  }
 else   if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
    obj=IOUtil.readObject(dis,classLoader);
  }
 else {
    throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
  }
  return obj;
}",0.9058163566578092
65748,"public SplitResult split(int height,boolean force) throws BirtException {
  assert(height < this.height);
  LineArea result=null;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    ContainerArea child=(ContainerArea)iter.next();
    if (child.getMinYPosition() <= height) {
      iter.remove();
      if (result == null) {
        result=cloneArea();
      }
      result.addChild(child);
      child.setParent(result);
    }
 else {
      SplitResult splitChild=child.split(height - child.getY(),force);
      ContainerArea splitChildArea=splitChild.getResult();
      if (splitChildArea != null) {
        if (result == null) {
          result=cloneArea();
        }
        result.addChild(splitChildArea);
        splitChildArea.setParent(result);
      }
    }
  }
  if (result != null) {
    int h=0;
    iter=result.getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    result.setHeight(h);
  }
  if (children.size() > 0) {
    int h=0;
    iter=getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    setHeight(h);
  }
  if (result != null) {
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    return SplitResult.SUCCEED_WITH_NULL;
  }
}","public SplitResult split(int height,boolean force) throws BirtException {
  assert(height < this.height);
  LineArea result=null;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    ContainerArea child=(ContainerArea)iter.next();
    if (child.getMinYPosition() <= height) {
      iter.remove();
      if (result == null) {
        result=cloneArea();
      }
      result.addChild(child);
      child.setParent(result);
    }
 else {
      SplitResult splitChild=child.split(height - child.getY(),force);
      ContainerArea splitChildArea=splitChild.getResult();
      if (splitChildArea != null) {
        if (result == null) {
          result=cloneArea();
        }
        result.addChild(splitChildArea);
        splitChildArea.setParent(result);
      }
 else {
        child.setY(Math.max(0,child.getY() - height));
      }
    }
  }
  if (result != null) {
    int h=0;
    iter=result.getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    result.setHeight(h);
  }
  if (children.size() > 0) {
    int h=0;
    iter=getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    setHeight(h);
  }
  if (result != null) {
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    return SplitResult.SUCCEED_WITH_NULL;
  }
}",0.975304347826087
65749,"public List getModelList(){
  init();
  List list=new ArrayList();
  List columns=buildColumnArea();
  List rows=buildRowArea();
  List details=buildMeasures();
  adjustDirection(columns,rows);
  buildModel(list,columns,rows,details);
  adjustColumn(columns,details);
  adjustRow(rows,details);
  buildLeftConner(list);
  adjustGrandTotal(list);
  Collections.sort(list,new ModelComparator());
  oldModelList=list;
  return list;
}","public List getModelList(){
  init();
  List list=new ArrayList();
  List columns=buildColumnArea();
  List rows=buildRowArea();
  List details=buildMeasures();
  adjustDirection(columns,rows);
  buildModel(list,columns,rows,details);
  adjustColumn(columns,details);
  adjustRow(rows,details);
  List leftConner=new ArrayList();
  buildLeftConner(leftConner);
  list.addAll(leftConner);
  adjustGrandTotal(list,(CrosstabCellAdapter)leftConner.get(leftConner.size() - 1));
  Collections.sort(list,new ModelComparator());
  oldModelList=list;
  return list;
}",0.8169868554095046
65750,"private void adjustGrandTotal(List list){
  CrosstabCellAdapter first=(CrosstabCellAdapter)list.get(0);
  int rowCount=getRowCount();
  int columnCount=getColumnCount();
  for (int i=0; i < list.size(); i++) {
    CrosstabCellAdapter cellAdapter=(CrosstabCellAdapter)list.get(i);
    if (adjustGrandColumn > 0) {
      int beforeColumnNumber=columnCount - adjustGrandColumn;
      int cellColumnNumber=cellAdapter.getColumnNumber();
      if (cellColumnNumber > first.getColumnNumber() + first.getColumnSpan() - 1) {
        if (cellColumnNumber <= beforeColumnNumber) {
          cellAdapter.setColumnNumber(cellColumnNumber + adjustGrandColumn);
        }
 else {
          cellAdapter.setColumnNumber(cellColumnNumber - beforeColumnNumber + first.getColumnNumber() + first.getColumnSpan() - 1);
        }
      }
    }
    if (adjustGrandRow > 0) {
      int beforeRowNumber=rowCount - adjustGrandRow;
      int cellRowNumber=cellAdapter.getRowNumber();
      if (cellRowNumber > first.getRowNumber() + first.getRowSpan() - 1) {
        if (cellRowNumber <= beforeRowNumber) {
          cellAdapter.setRowNumber(cellRowNumber + adjustGrandRow);
        }
 else {
          cellAdapter.setRowNumber(cellRowNumber - beforeRowNumber + first.getRowNumber() + first.getRowSpan() - 1);
        }
      }
    }
  }
}","private void adjustGrandTotal(List list,CrosstabCellAdapter first){
  int rowCount=getRowCount();
  int columnCount=getColumnCount();
  for (int i=0; i < list.size(); i++) {
    CrosstabCellAdapter cellAdapter=(CrosstabCellAdapter)list.get(i);
    if (adjustGrandColumn > 0) {
      int beforeColumnNumber=columnCount - adjustGrandColumn;
      int cellColumnNumber=cellAdapter.getColumnNumber();
      if (cellColumnNumber > first.getColumnNumber() + first.getColumnSpan() - 1) {
        if (cellColumnNumber <= beforeColumnNumber) {
          cellAdapter.setColumnNumber(cellColumnNumber + adjustGrandColumn);
        }
 else {
          cellAdapter.setColumnNumber(cellColumnNumber - beforeColumnNumber + first.getColumnNumber() + first.getColumnSpan() - 1);
        }
      }
    }
    if (adjustGrandRow > 0) {
      int beforeRowNumber=rowCount - adjustGrandRow;
      int cellRowNumber=cellAdapter.getRowNumber();
      if (cellRowNumber > first.getRowNumber() + first.getRowSpan() - 1) {
        if (cellRowNumber <= beforeRowNumber) {
          cellAdapter.setRowNumber(cellRowNumber + adjustGrandRow);
        }
 else {
          cellAdapter.setRowNumber(cellRowNumber - beforeRowNumber + first.getRowNumber() + first.getRowSpan() - 1);
        }
      }
    }
  }
}",0.965996908809892
65751,"@Override public void setFocus(){
}","@Override public void setFocus(){
  if (fComposite != null && !fComposite.isDisposed()) {
    fComposite.setFocus();
  }
}",0.445859872611465
65752,"@Override public void setFocus(){
}","@Override public void setFocus(){
  if (fComposite != null && !fComposite.isDisposed()) {
    fComposite.setFocus();
  }
}",0.445859872611465
65753,"/** 
 * @param n
 * @param result
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @throws DataException
 */
private static void populateDimLevels(Node grandpa,Node n,Set<IDimLevel> result) throws CoreException {
  if (n == null)   return;
  if (n.getFirstChild() != null && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
    if (n.getFirstChild().getFirstChild() != null && (n.getFirstChild().getFirstChild().getType() == Token.GETPROP || n.getFirstChild().getFirstChild().getType() == Token.GETELEM)) {
      Node dim=n.getFirstChild().getFirstChild();
      if (""String_Node_Str"".equals(dim.getFirstChild().getString())) {
        String dimName=dim.getLastChild().getString();
        String levelName=dim.getNext().getString();
        String attr=n.getLastChild().getString();
        DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
        if (!result.contains(dimLevel))         result.add(dimLevel);
      }
    }
 else     if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {
      if (""String_Node_Str"".equals(n.getFirstChild().getString())) {
        if (n.getLastChild() != null && n.getNext() != null) {
          String dimName=n.getLastChild().getString();
          String levelName=n.getNext().getString();
          String attr=null;
          if (grandpa != null && grandpa.getNext() != null && grandpa.getNext().getType() == Token.STRING) {
            attr=grandpa.getNext().getString();
          }
          DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
          if (!result.contains(dimLevel))           result.add(dimLevel);
        }
      }
    }
  }
  populateDimLevels(grandpa,n.getFirstChild(),result);
  populateDimLevels(grandpa,n.getLastChild(),result);
}","/** 
 * @param n
 * @param result
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @throws DataException
 */
private static void populateDimLevels(Node grandpa,Node n,Set<IDimLevel> result) throws CoreException {
  if (n == null)   return;
  if (n.getFirstChild() != null && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
    if (n.getFirstChild().getFirstChild() != null && (n.getFirstChild().getFirstChild().getType() == Token.GETPROP || n.getFirstChild().getFirstChild().getType() == Token.GETELEM)) {
      Node dim=n.getFirstChild().getFirstChild();
      if (""String_Node_Str"".equals(dim.getFirstChild().getString())) {
        String dimName=dim.getLastChild().getString();
        String levelName=dim.getNext().getString();
        String attr=n.getLastChild().getString();
        DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
        if (!result.contains(dimLevel))         result.add(dimLevel);
      }
    }
 else     if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {
      if (""String_Node_Str"".equals(n.getFirstChild().getString())) {
        if (n.getLastChild() != null && n.getNext() != null) {
          String dimName=n.getLastChild().getString();
          String levelName=n.getNext().getString();
          String attr=null;
          if (grandpa != null && grandpa.getNext() != null && grandpa.getNext().getType() == Token.STRING) {
            attr=grandpa.getNext().getString();
          }
          DimLevel dimLevel=new DimLevel(dimName,levelName,attr);
          if (!result.contains(dimLevel))           result.add(dimLevel);
        }
      }
    }
  }
  populateDimLevels(grandpa,n.getFirstChild(),result);
  populateDimLevels(grandpa,n.getLastChild(),result);
  populateDimLevels(grandpa,n.getNext(),result);
}",0.9862937062937064
65754,"private String formatString(String str,ScalarParameter para){
  ScalarParameterHandle paraHandle=para.getHandle();
  String formatCategroy=paraHandle.getCategory();
  String formatPattern=paraHandle.getPattern();
  ULocale formatLocale=null;
  Object formatValue=paraHandle.getProperty(IScalarParameterModel.FORMAT_PROP);
  if (formatValue instanceof FormatValue) {
    PropertyHandle propHandle=paraHandle.getPropertyHandle(IScalarParameterModel.FORMAT_PROP);
    FormatValue formatValueToSet=(FormatValue)formatValue;
    FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
    formatLocale=formatHandle.getLocale();
  }
  if (formatLocale == null) {
    formatLocale=ULocale.getDefault();
  }
  String type=paraHandle.getDataType();
  formatPattern=isCustom(formatCategroy) ? formatPattern : formatCategroy;
  if (formatPattern == null) {
    return str;
  }
  String formatStr=""String_Node_Str"";
  try {
    if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
      formatStr=new StringFormatter(formatPattern,formatLocale).format(str);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
      formatPattern=formatPattern.equals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATETIME_UNFORMATTED : formatPattern;
      formatStr=new DateFormatter(formatPattern,formatLocale).format((Date)para.converToDataType(str));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
      formatPattern=formatPattern.equals(DesignChoiceConstants.DATE_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATE_UNFORMATTED : formatPattern;
      formatStr=new DateFormatter(formatPattern,formatLocale).format((Date)para.converToDataType(str));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
      formatPattern=formatPattern.equals(""String_Node_Str"") ? DateFormatter.TIME_UNFORMATTED : formatPattern;
      formatStr=new DateFormatter(formatPattern,formatLocale).format((Date)para.converToDataType(str));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
      double value=Double.parseDouble(str);
      formatStr=new NumberFormatter(formatPattern,formatLocale).format(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
      int value=Integer.parseInt(str);
      formatStr=new NumberFormatter(formatPattern,formatLocale).format(value);
    }
  }
 catch (  Exception e) {
    formatStr=str;
  }
  if (formatStr == null) {
    return str;
  }
  return UIUtil.convertToGUIString(formatStr);
}","private String formatString(String str,ScalarParameter para){
  ScalarParameterHandle paraHandle=para.getHandle();
  String formatCategroy=paraHandle.getCategory();
  String formatPattern=paraHandle.getPattern();
  ULocale formatLocale=null;
  Object formatValue=paraHandle.getProperty(IScalarParameterModel.FORMAT_PROP);
  if (formatValue instanceof FormatValue) {
    PropertyHandle propHandle=paraHandle.getPropertyHandle(IScalarParameterModel.FORMAT_PROP);
    FormatValue formatValueToSet=(FormatValue)formatValue;
    FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
    formatLocale=formatHandle.getLocale();
  }
  if (formatLocale == null) {
    formatLocale=ULocale.getDefault();
  }
  String type=paraHandle.getDataType();
  formatPattern=isCustom(formatCategroy) ? formatPattern : formatCategroy;
  if (formatPattern == null) {
    return str;
  }
  String formatStr=""String_Node_Str"";
  try {
    if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
      formatStr=new StringFormatter(formatPattern,formatLocale).format(str);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
      formatPattern=formatPattern.equals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATETIME_UNFORMATTED : formatPattern;
      formatStr=new DateFormatter(formatPattern,formatLocale).format((Date)para.converToDataType(str));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
      formatPattern=formatPattern.equals(DesignChoiceConstants.DATE_FORMAT_TYPE_UNFORMATTED) ? DateFormatter.DATE_UNFORMATTED : formatPattern;
      formatStr=new DateFormatter(formatPattern,formatLocale).format((Date)para.converToDataType(str));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
      formatPattern=formatPattern.equals(""String_Node_Str"") ? DateFormatter.TIME_UNFORMATTED : formatPattern;
      formatStr=new DateFormatter(formatPattern,formatLocale).format((Date)para.converToDataType(str));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
      double value=Double.parseDouble(str);
      if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_UNFORMATTED.equals(formatPattern)) {
        formatPattern=null;
      }
      formatStr=new NumberFormatter(formatPattern,formatLocale).format(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
      int value=Integer.parseInt(str);
      formatStr=new NumberFormatter(formatPattern,formatLocale).format(value);
    }
  }
 catch (  Exception e) {
    formatStr=str;
  }
  if (formatStr == null) {
    return str;
  }
  return UIUtil.convertToGUIString(formatStr);
}",0.9769858945805494
65755,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=(DataSetHandle)model.getElementHandle();
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (str.equals(resultSetColumn.getColumnName())) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (Iterator iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
            ColumnHintHandle element=(ColumnHintHandle)iter.next();
            if (element.getColumnName().equals(str) || str.equals(element.getAlias())) {
              type=element.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  ActionHandle actionHandle=UIUtil.getColumnAction(model);
  if (actionHandle != null) {
    List source=new ArrayList();
    source.add(actionHandle.getStructure());
    List newAction=ModelUtil.cloneStructList(source);
    dataHandle.setAction((Action)newAction.get(0));
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      setDataItemAction(model,dataHandle);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName())) {
            if (target instanceof CellHandle) {
              CellHandle cellTarget=(CellHandle)target;
              if (cellTarget.getContent().getCount() == 0) {
                return dataHandle;
              }
            }
            return null;
          }
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model,dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=(DataSetHandle)model.getElementHandle();
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (str.equals(resultSetColumn.getColumnName())) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (Iterator iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
            ColumnHintHandle element=(ColumnHintHandle)iter.next();
            if (element.getColumnName().equals(str) || str.equals(element.getAlias())) {
              type=element.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn,dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new LabelAddRule(target);
        if (rule.canInsert()) {
          LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
          label.setText(UIUtil.getColumnDisplayName(model));
          rule.insert(label);
        }
        rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  setDataItemAction(model,dataHandle);
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9846693341725486
65756,"/** 
 * Constructor embedded browser.
 * @param event
 * @param parent Shell or null
 */
public EmbeddedBrowser(WindowEvent event,Shell parent){
  if (parent == null) {
    shell=new Shell(SWT.SHELL_TRIM | Window.getDefaultOrientation());
  }
 else {
    shell=new Shell(parent,SWT.PRIMARY_MODAL | SWT.DIALOG_TRIM);
  }
  initializeShell(shell);
  Browser browser=new Browser(shell,SWT.NONE);
  initialize(shell.getDisplay(),browser);
  event.browser=browser;
  browser.addLocationListener(new LocationListener(){
    public void changing(    LocationEvent e){
      modalRequestTime=0;
      if (e.location != null && e.location.startsWith(""String_Node_Str"")) {
        modalRequestTime=System.currentTimeMillis();
      }
    }
    public void changed(    LocationEvent e){
    }
  }
);
}","/** 
 * Constructor embedded browser.
 * @param event
 * @param parent Shell or null
 */
public EmbeddedBrowser(WindowEvent event,Shell parent){
  if (parent == null) {
    shell=new Shell(SWT.SHELL_TRIM | Window.getDefaultOrientation());
  }
 else {
    shell=new Shell(parent,SWT.PRIMARY_MODAL | SWT.DIALOG_TRIM);
  }
  initializeShell(shell);
  Browser browser=null;
  if (Constants.OS_LINUX.equalsIgnoreCase(Platform.getOS())) {
    browser=new Browser(shell,SWT.MOZILLA);
  }
 else {
    browser=new Browser(shell,SWT.NONE);
  }
  initialize(shell.getDisplay(),browser);
  event.browser=browser;
  browser.addLocationListener(new LocationListener(){
    public void changing(    LocationEvent e){
      modalRequestTime=0;
      if (e.location != null && e.location.startsWith(""String_Node_Str"")) {
        modalRequestTime=System.currentTimeMillis();
      }
    }
    public void changed(    LocationEvent e){
    }
  }
);
}",0.9180708890180128
65757,"/** 
 * @return
 * @throws DataException 
 */
private QueryDefinition newSummaryQuery() throws DataException {
  QueryDefinition qd=newReportQuery();
  qd.setIsSummaryQuery(true);
  qd.setUsesDetails(false);
  GroupDefinition gd=new GroupDefinition(""String_Node_Str"");
  gd.setKeyColumn(""String_Node_Str"");
  qd.addGroup(gd);
  GroupDefinition gd2=new GroupDefinition(""String_Node_Str"");
  gd2.setKeyColumn(""String_Node_Str"");
  qd.addGroup(gd2);
  this.bindingName=new String[3];
  this.bindingName[0]=""String_Node_Str"";
  this.bindingName[1]=""String_Node_Str"";
  this.bindingName[2]=""String_Node_Str"";
  IBinding[] binding;
  binding=new Binding[3];
  binding[0]=new Binding(this.bindingName[0],new ScriptExpression(""String_Node_Str""));
  binding[1]=new Binding(this.bindingName[1],new ScriptExpression(""String_Node_Str""));
  binding[2]=new Binding(this.bindingName[2]);
  binding[2].setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding[2].setExpression(new ScriptExpression(""String_Node_Str""));
  binding[2].addAggregateOn(""String_Node_Str"");
  qd.addBinding(binding[0]);
  qd.addBinding(binding[1]);
  qd.addBinding(binding[2]);
  return qd;
}","/** 
 * @return
 * @throws DataException 
 */
private QueryDefinition newSummaryQuery() throws DataException {
  QueryDefinition qd=newReportQuery();
  qd.setIsSummaryQuery(true);
  qd.setUsesDetails(false);
  GroupDefinition gd=new GroupDefinition(""String_Node_Str"");
  gd.setKeyColumn(""String_Node_Str"");
  qd.addGroup(gd);
  GroupDefinition gd2=new GroupDefinition(""String_Node_Str"");
  gd2.setKeyColumn(""String_Node_Str"");
  qd.addGroup(gd2);
  this.bindingName=new String[3];
  this.bindingName[0]=""String_Node_Str"";
  this.bindingName[1]=""String_Node_Str"";
  this.bindingName[2]=""String_Node_Str"";
  IBinding[] binding;
  binding=new Binding[3];
  binding[0]=new Binding(this.bindingName[0],new ScriptExpression(""String_Node_Str""));
  binding[1]=new Binding(this.bindingName[1],new ScriptExpression(""String_Node_Str""));
  binding[2]=new Binding(this.bindingName[2]);
  binding[2].setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding[2].setExpression(new ScriptExpression(""String_Node_Str""));
  binding[2].addAggregateOn(""String_Node_Str"");
  binding[2].setDataType(DataType.DOUBLE_TYPE);
  qd.addBinding(binding[0]);
  qd.addBinding(binding[1]);
  qd.addBinding(binding[2]);
  return qd;
}",0.9796782387806944
65758,"private void addExtraAggregation(QueryDefinition genquery) throws DataException {
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setAggrFunction(""String_Node_Str"");
  binding1.addAggregateOn(""String_Node_Str"");
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setAggrFunction(""String_Node_Str"");
  binding2.addAggregateOn(""String_Node_Str"");
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  genquery.addBinding(binding1);
  genquery.addBinding(binding2);
  genquery.addBinding(binding3);
  genquery.addBinding(binding4);
  genquery.addBinding(binding5);
}","private void addExtraAggregation(QueryDefinition genquery) throws DataException {
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setAggrFunction(""String_Node_Str"");
  binding1.addAggregateOn(""String_Node_Str"");
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setAggrFunction(""String_Node_Str"");
  binding2.addAggregateOn(""String_Node_Str"");
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding1.setDataType(DataType.INTEGER_TYPE);
  binding2.setDataType(DataType.INTEGER_TYPE);
  binding3.setDataType(DataType.DOUBLE_TYPE);
  binding4.setDataType(DataType.DOUBLE_TYPE);
  binding5.setDataType(DataType.DOUBLE_TYPE);
  genquery.addBinding(binding1);
  genquery.addBinding(binding2);
  genquery.addBinding(binding3);
  genquery.addBinding(binding4);
  genquery.addBinding(binding5);
}",0.8852621167161226
65759,"public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> index,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=getColumnCount(this.rsMeta);
    IOUtil.writeInt(dos,rowCount);
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,index,i);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> index,List<IBinding> cacheRequestMap,int version) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=getColumnCount(this.rsMeta);
    IOUtil.writeInt(dos,rowCount);
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,index,i,version);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9876543209876544
65760,"public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int originalRowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=originalRowCount + this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(outputStream,rowCount);
    if (outputStream instanceof RAOutputStream)     ((RAOutputStream)outputStream).seek(((RAOutputStream)outputStream).length());
    if (rowLensStream instanceof RAOutputStream)     ((RAOutputStream)rowLensStream).seek(((RAOutputStream)rowLensStream).length());
    DataOutputStream dos=new DataOutputStream(outputStream);
    DataOutputStream rlos=new DataOutputStream(rowLensStream);
    long offset=4;
    if (outputStream instanceof RAOutputStream)     offset=((RAOutputStream)outputStream).length();
    for (int i=0; i < rowCount - originalRowCount; i++) {
      IOUtil.writeLong(rlos,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,map,originalRowCount + i);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int originalRowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap,int version) throws DataException {
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=originalRowCount + this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(outputStream,rowCount);
    if (outputStream instanceof RAOutputStream)     ((RAOutputStream)outputStream).seek(((RAOutputStream)outputStream).length());
    if (rowLensStream instanceof RAOutputStream)     ((RAOutputStream)rowLensStream).seek(((RAOutputStream)rowLensStream).length());
    DataOutputStream dos=new DataOutputStream(outputStream);
    DataOutputStream rlos=new DataOutputStream(rowLensStream);
    long offset=4;
    if (outputStream instanceof RAOutputStream)     offset=((RAOutputStream)outputStream).length();
    for (int i=0; i < rowCount - originalRowCount; i++) {
      IOUtil.writeLong(rlos,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,map,originalRowCount + i,version);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9923954372623576
65761,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,ClassLoader classLoader,int length) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (session.getStopSign().isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    int readSize=bis.read(rowDataBytes);
    int totalSize=readSize;
    while (readSize > 0 && totalSize < rowLen) {
      readSize=bis.read(rowDataBytes,totalSize,rowLen - totalSize);
      totalSize+=readSize;
    }
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=Integer.valueOf(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (Date.class.isAssignableFrom(fieldType))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=Boolean.valueOf(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=null;
        if (classLoader != null) {
          ois=ObjectSecurity.createObjectInputStream(dis,classLoader);
        }
 else {
          ois=ObjectSecurity.createObjectInputStream(dis);
        }
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
 else {
        throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,ClassLoader classLoader,int length) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (session.getStopSign().isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    int readSize=bis.read(rowDataBytes);
    int totalSize=readSize;
    while (readSize > 0 && totalSize < rowLen) {
      readSize=bis.read(rowDataBytes,totalSize,rowLen - totalSize);
      totalSize+=readSize;
    }
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      obs[j]=readObject(dis,fieldType,classLoader);
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.5361093038386467
65762,"private Object convert(Object o,int type) throws DataException {
  try {
    return DataTypeUtil.convert(o,type);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","private static Object convert(Object o,int type) throws DataException {
  try {
    return DataTypeUtil.convert(o,type);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9814323607427056
65763,"/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)convert(fieldValue,DataType.INTEGER_TYPE)).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)convert(fieldValue,DataType.DOUBLE_TYPE)).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)convert(fieldValue,DataType.DECIMAL_TYPE)).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)convert(fieldValue,DataType.DATE_TYPE)).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)convert(fieldValue,DataType.BOOLEAN_TYPE)).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       throw new DataException(ResourceConstants.NOT_SERIALIZABLE_CLASS,fieldValue.getClass().getName());
      ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
 else {
      throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}","/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    Class fieldType=typeArray[j];
    writeObject(dos,fieldValue,fieldType);
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}",0.4509624197983501
65764,"/** 
 * Serialize to an output stream
 * @param outputStream
 */
public void doSave(DataOutputStream outputStream,DataOutputStream lensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> index,List<IBinding> cacheRequestMapping) throws DataException ;","/** 
 * Serialize to an output stream
 * @param outputStream
 */
public void doSave(DataOutputStream outputStream,DataOutputStream lensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> index,List<IBinding> cacheRequestMapping,int version) throws DataException ;",0.9783393501805054
65765,"/** 
 * Add incremental rows to output stream
 * @param outputStream
 * @param rowLensStream
 * @param rowCount
 * @param stringTable
 * @param map
 * @param cacheRequestMap
 * @throws DataException
 */
public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int rowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException ;","/** 
 * Add incremental rows to output stream
 * @param outputStream
 * @param rowLensStream
 * @param rowCount
 * @param stringTable
 * @param map
 * @param cacheRequestMap
 * @throws DataException
 */
public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int rowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap,int version) throws DataException ;",0.985981308411215
65766,"/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
      saveGeneralACL();
      if (emtpryIDStream != null)       try {
        emtpryIDStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  this.loadGeneralACL();
  int currentQueryID=0;
  if (engine.getContext().getDocReader() != null) {
    try {
      if (engine.getContext().getDocReader().exists(DataEngineContext.QUERY_STARTING_ID)) {
        RAInputStream stream=engine.getContext().getDocReader().getInputStream(DataEngineContext.QUERY_STARTING_ID);
        currentQueryID=stream.readInt();
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  this.queryResultIDUtil=new QueryResultIDUtil(currentQueryID);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  if (engine.getContext().getClassLoader() != null) {
    classLoaderHolder.set(engine.getContext().getClassLoader());
  }
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
      saveGeneralACL();
      if (emtpryIDStream != null)       try {
        emtpryIDStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  this.loadGeneralACL();
  int currentQueryID=0;
  if (engine.getContext().getDocReader() != null) {
    try {
      if (engine.getContext().getDocReader().exists(DataEngineContext.QUERY_STARTING_ID)) {
        RAInputStream stream=engine.getContext().getDocReader().getInputStream(DataEngineContext.QUERY_STARTING_ID);
        currentQueryID=stream.readInt();
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  this.queryResultIDUtil=new QueryResultIDUtil(currentQueryID);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9853704577630958
65767,"public Control createPageControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label txt=new Label(content,SWT.LEFT);
  txt.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  Label nextLineLabel=new Label(content,SWT.LEFT);
  nextLineLabel.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  Label thirdLineLabel=new Label(content,SWT.LEFT);
  thirdLineLabel.setText(Messages.getMessage(""String_Node_Str""));
  return content;
}","public Control createPageControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Text txt=new Text(content,SWT.LEFT | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  txt.setEditable(false);
  txt.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  txt.append(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  txt.append(Messages.getMessage(""String_Node_Str""));
  txt.setLayoutData(new GridData(GridData.FILL_BOTH));
  return content;
}",0.7198795180722891
65768,"private void loadDriverExtensions(){
  if (driverExtensions != null)   return;
synchronized (this) {
    driverExtensions=new HashMap();
    IExtensionRegistry extReg=Platform.getExtensionRegistry();
    IExtensionPoint extPoint=extReg.getExtensionPoint(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
    if (extPoint == null)     return;
    IExtension[] exts=extPoint.getExtensions();
    if (exts == null)     return;
    for (int e=0; e < exts.length; e++) {
      IConfigurationElement[] configElems=exts[e].getConfigurationElements();
      if (configElems == null)       continue;
      for (int i=0; i < configElems.length; i++) {
        if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
          String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
          String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
          logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
          if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
            driverExtensions.put(driverClass,configElems[i]);
          }
        }
      }
    }
  }
}","private void loadDriverExtensions(){
  if (loadedDriver)   return;
synchronized (this) {
    if (loadedDriver)     return;
    driverExtensions=new HashMap();
    IExtensionRegistry extReg=Platform.getExtensionRegistry();
    IExtensionPoint extPoint=extReg.getExtensionPoint(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
    if (extPoint == null)     return;
    IExtension[] exts=extPoint.getExtensions();
    if (exts == null)     return;
    for (int e=0; e < exts.length; e++) {
      IConfigurationElement[] configElems=exts[e].getConfigurationElements();
      if (configElems == null)       continue;
      for (int i=0; i < configElems.length; i++) {
        if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
          String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
          String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
          logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
          if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
            driverExtensions.put(driverClass,configElems[i]);
          }
        }
      }
    }
    loadedDriver=true;
  }
}",0.9647326507394768
65769,"public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    if (HTML2Content.allInline(foreign)) {
      HyperlinkDef link=parseHyperLink(foreign);
      IAutoTextContent autoText=foreign.getReportContent().createAutoTextContent();
      autoText.setText(HTML2Content.getForeignPlainText(foreign));
      startAutoText(autoText);
    }
 else {
      HTML2Content.html2Content(foreign);
      HyperlinkDef link=parseHyperLink(foreign);
      engine.processForeign(foreign,link);
    }
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    HyperlinkDef link=parseHyperLink(foreign);
    engine.processForeign(foreign,link);
  }
}",0.5209302325581395
65770,"private int evaluatePeriodsN(String n) throws DataException, BirtException {
  int num=0;
  if (n == null || n.trim().equals(""String_Node_Str"")) {
    n=""String_Node_Str"";
  }
  try {
    num=Integer.valueOf(n);
  }
 catch (  Exception e) {
    num=(Integer)ScriptEvalUtil.evalExpr(new ScriptExpression(n),this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  return num;
}","private int evaluatePeriodsN(String n,Object expression) throws DataException, BirtException {
  int num=0;
  if (n == null || n.trim().equals(""String_Node_Str"")) {
    n=""String_Node_Str"";
  }
  try {
    num=Integer.valueOf(n);
  }
 catch (  Exception e) {
    ScriptExpression scriptExpression=null;
    if (expression instanceof Expression) {
      scriptExpression=this.adaptExpression((Expression)expression);
      ;
    }
 else {
      scriptExpression=adaptExpression(n,DesignChoiceConstants.PARAM_TYPE_ANY);
    }
    num=(Integer)ScriptEvalUtil.evalExpr(scriptExpression,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  return num;
}",0.7018518518518518
65771,"private int evaluatePeriodsNForTrailingFunction(String n) throws DataException, BirtException {
  int num=0;
  if (n == null || n.trim().equals(""String_Node_Str"")) {
    n=""String_Node_Str"";
  }
  try {
    num=Integer.valueOf(n);
  }
 catch (  Exception e) {
    num=(Integer)ScriptEvalUtil.evalExpr(new ScriptExpression(n),this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  return num;
}","private int evaluatePeriodsNForTrailingFunction(String n,Object expression) throws DataException, BirtException {
  if (n == null || n.trim().equals(""String_Node_Str"")) {
    return 1;
  }
  return evaluatePeriodsN(n,expression);
}",0.4938650306748466
65772,"/** 
 * @param periodHandle
 * @return
 * @throws BirtException 
 * @throws DataException 
 */
private ITimePeriod populateRelativeTimePeriod(ComputedColumnHandle periodHandle) throws DataException, BirtException {
  String calculateType=periodHandle.getCalculationType();
  TimePeriod relativeTimePeriod=null;
  if (IBuildInBaseTimeFunction.WEEK_TO_DATE_LAST_YEAR.equals(calculateType) || IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR.equals(calculateType) || IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n),TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n),TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE.equals(calculateType) || IBuildInBaseTimeFunction.PREVIOUS_MONTH.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n),TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE.equals(calculateType) || IBuildInBaseTimeFunction.PREVIOUS_QUARTER.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n),TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE.equals(calculateType) || IBuildInBaseTimeFunction.PREVIOUS_YEAR.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n),TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period2=null, n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_2.equals(argument.getName())) {
        period2=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD2.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n),DataAdapterUtil.toTimePeriodType(period2));
  }
  return relativeTimePeriod;
}","/** 
 * @param periodHandle
 * @return
 * @throws BirtException 
 * @throws DataException 
 */
private ITimePeriod populateRelativeTimePeriod(ComputedColumnHandle periodHandle) throws DataException, BirtException {
  String calculateType=periodHandle.getCalculationType();
  TimePeriod relativeTimePeriod=null;
  Object expression=null;
  if (IBuildInBaseTimeFunction.WEEK_TO_DATE_LAST_YEAR.equals(calculateType) || IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR.equals(calculateType) || IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n,expression),TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n,expression),TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE.equals(calculateType) || IBuildInBaseTimeFunction.PREVIOUS_MONTH.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n,expression),TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE.equals(calculateType) || IBuildInBaseTimeFunction.PREVIOUS_QUARTER.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n,expression),TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE.equals(calculateType) || IBuildInBaseTimeFunction.PREVIOUS_YEAR.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
        break;
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n,expression),TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period2=null, n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_2.equals(argument.getName())) {
        period2=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD2.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
      }
    }
    relativeTimePeriod=new TimePeriod(0 - evaluatePeriodsN(n,expression),DataAdapterUtil.toTimePeriodType(period2));
  }
  return relativeTimePeriod;
}",0.9535046728971964
65773,"private ITimePeriod populateBaseTimePeriod(ComputedColumnHandle periodHandle) throws DataException, BirtException {
  String calculateType=periodHandle.getCalculationType();
  TimePeriod baseTimePeriod=null;
  if (IBuildInBaseTimeFunction.CURRENT_QUARTER.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER,true);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR,true);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER,true);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH,true);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_MONTH.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH,true);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_30_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-30,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_60_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-60,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_90_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-90,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_120_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-120,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_12_MONTHS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-12,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR,true);
  }
 else   if (IBuildInBaseTimeFunction.WEEK_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.WEEK_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
        break;
      }
    }
    if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
      baseTimePeriod=new TimePeriod(0,DataAdapterUtil.toTimePeriodType(period1),true);
    }
 else {
      baseTimePeriod=new TimePeriod(0,DataAdapterUtil.toTimePeriodType(period1));
    }
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_MONTHS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    baseTimePeriod=new TimePeriod(0 - evaluatePeriodsNForTrailingFunction(n),TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_DAYS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    baseTimePeriod=new TimePeriod(0 - evaluatePeriodsNForTrailingFunction(n),TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null, n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    baseTimePeriod=new TimePeriod(0 - evaluatePeriodsNForTrailingFunction(n),DataAdapterUtil.toTimePeriodType(period1));
  }
 else   if (IBuildInBaseTimeFunction.NEXT_N_PERIODS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null, period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    baseTimePeriod=new TimePeriod(evaluatePeriodsNForTrailingFunction(n),DataAdapterUtil.toTimePeriodType(period1));
  }
  return baseTimePeriod;
}","private ITimePeriod populateBaseTimePeriod(ComputedColumnHandle periodHandle) throws DataException, BirtException {
  String calculateType=periodHandle.getCalculationType();
  TimePeriod baseTimePeriod=null;
  Object expression=null;
  if (IBuildInBaseTimeFunction.CURRENT_QUARTER.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER,true);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR,true);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER,true);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH,true);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_MONTH.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH,true);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_30_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-30,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_60_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-60,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_90_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-90,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_120_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-120,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_12_MONTHS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-12,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR,true);
  }
 else   if (IBuildInBaseTimeFunction.WEEK_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.WEEK_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
        break;
      }
    }
    if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
      baseTimePeriod=new TimePeriod(0,DataAdapterUtil.toTimePeriodType(period1),true);
    }
 else {
      baseTimePeriod=new TimePeriod(0,DataAdapterUtil.toTimePeriodType(period1));
    }
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_MONTHS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
      }
    }
    baseTimePeriod=new TimePeriod(0 - evaluatePeriodsNForTrailingFunction(n,expression),TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_DAYS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
      }
    }
    baseTimePeriod=new TimePeriod(0 - evaluatePeriodsNForTrailingFunction(n,expression),TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null, n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
      }
    }
    baseTimePeriod=new TimePeriod(0 - evaluatePeriodsNForTrailingFunction(n,expression),DataAdapterUtil.toTimePeriodType(period1));
  }
 else   if (IBuildInBaseTimeFunction.NEXT_N_PERIODS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null, period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        expression=argument.getValue().getValue();
      }
    }
    baseTimePeriod=new TimePeriod(evaluatePeriodsNForTrailingFunction(n,expression),DataAdapterUtil.toTimePeriodType(period1));
  }
  return baseTimePeriod;
}",0.979628252788104
65774,"public RGB[] getCustomColorsPreference(){
  String rgbs=PreferenceFactory.getInstance().getPreferences(this,UIUtil.getCurrentProject()).getString(CUSTOM_COLORS_PREFERENCE);
  List<RGB> rgbList=new ArrayList<RGB>();
  if (rgbs != null) {
    String[] splits=rgbs.split(""String_Node_Str"");
    for (int i=0; i < splits.length; i++) {
      try {
        RGB rgb=DEUtil.getRGBValue(Integer.parseInt(splits[i]));
        rgbList.add(rgb);
      }
 catch (      Exception e) {
      }
    }
  }
  return rgbList.toArray(new RGB[0]);
}","public RGB[] getCustomColorsPreference(){
  String rgbs=PreferenceFactory.getInstance().getPreferences(this,UIUtil.getCurrentProject()).getString(CUSTOM_COLORS_PREFERENCE);
  List<RGB> rgbList=new ArrayList<RGB>();
  if (rgbs != null && rgbs.trim().length() > 0) {
    String[] splits=rgbs.split(""String_Node_Str"");
    for (int i=0; i < splits.length; i++) {
      try {
        RGB rgb=DEUtil.getRGBValue(Integer.parseInt(splits[i]));
        rgbList.add(rgb);
      }
 catch (      Exception e) {
      }
    }
  }
  return rgbList.toArray(new RGB[0]);
}",0.9742173112338858
65775,"public void setCustomColorsPreference(RGB[] rgbs){
  StringBuffer buffer=new StringBuffer();
  if (rgbs != null) {
    for (int i=0; i < rgbs.length; i++) {
      buffer.append(DEUtil.getRGBInt(rgbs[i]));
      if (i < rgbs.length - 1)       buffer.append(""String_Node_Str"");
    }
  }
  PreferenceFactory.getInstance().getPreferences(this,UIUtil.getCurrentProject()).setValue(CUSTOM_COLORS_PREFERENCE,buffer.toString().length() > 0 ? buffer.toString() : null);
  try {
    PreferenceFactory.getInstance().getPreferences(this,UIUtil.getCurrentProject()).save();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
}","public void setCustomColorsPreference(RGB[] rgbs){
  StringBuffer buffer=new StringBuffer();
  if (rgbs != null) {
    for (int i=0; i < rgbs.length; i++) {
      buffer.append(DEUtil.getRGBInt(rgbs[i]));
      if (i < rgbs.length - 1)       buffer.append(""String_Node_Str"");
    }
  }
  String newColorStatus=buffer.toString();
  String oldColorStatus=PreferenceFactory.getInstance().getPreferences(this,UIUtil.getCurrentProject()).getString(CUSTOM_COLORS_PREFERENCE);
  if (!newColorStatus.equalsIgnoreCase(oldColorStatus)) {
    PreferenceFactory.getInstance().getPreferences(this,UIUtil.getCurrentProject()).setValue(CUSTOM_COLORS_PREFERENCE,newColorStatus);
    try {
      PreferenceFactory.getInstance().getPreferences(this,UIUtil.getCurrentProject()).save();
    }
 catch (    IOException e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.7528774542992552
65776,"/** 
 * @throws BirtException 
 * @throws IOException 
 */
private void saveCurrentRow() throws IOException, BirtException {
  if (columnList == null) {
    columnList=new ArrayList();
    Iterator keyIterator=boundColumnValueMap.keySet().iterator();
    while (keyIterator.hasNext()) {
      Object key=keyIterator.next();
      columnList.add(key);
    }
    IOUtil.writeInt(rowOutputStream,columnList.size());
    for (int i=0; i < columnList.size(); i++) {
      IOUtil.writeObject(rowOutputStream,columnList.get(i));
    }
  }
  IOUtil.writeInt(rowOutputStream,getRowIndex());
  IOUtil.writeInt(rowOutputStream,getStartingGroupLevel());
  IOUtil.writeInt(rowOutputStream,getEndingGroupLevel());
  for (int i=0; i < columnList.size(); i++) {
    IOUtil.writeObject(rowOutputStream,getValue((String)columnList.get(i)));
  }
}","/** 
 * @throws BirtException 
 * @throws IOException 
 */
private void saveCurrentRow() throws IOException, BirtException {
  if (columnList == null) {
    columnList=new ArrayList();
    Iterator keyIterator=boundColumnValueMap.keySet().iterator();
    while (keyIterator.hasNext()) {
      Object key=keyIterator.next();
      columnList.add(key);
    }
    IOUtil.writeInt(rowOutputStream,columnList.size());
    for (int i=0; i < columnList.size(); i++) {
      IOUtil.writeObject(rowOutputStream,columnList.get(i));
    }
    rowOutputStream.flush();
  }
  IOUtil.writeInt(rowOutputStream,getRowIndex());
  IOUtil.writeInt(rowOutputStream,getStartingGroupLevel());
  IOUtil.writeInt(rowOutputStream,getEndingGroupLevel());
  for (int i=0; i < columnList.size(); i++) {
    IOUtil.writeObject(rowOutputStream,getValue((String)columnList.get(i)));
  }
}",0.9827893175074184
65777,"/** 
 * Since Eclipse TextFlow figure ignore the trailing /r/n for calculating the client size, we must append the extra size ourselves.
 * @return dimension for the client area used by the editor.
 */
public Rectangle getEditorArea(){
  Rectangle rect=getClientArea().getCopy();
  String s=getText();
  int count=0;
  if (s != null && s.length() > 1) {
    for (int i=s.length() - 2; i >= 0; i-=2) {
      if (""String_Node_Str"".equals(s.substring(i,i + 2))) {
        count++;
      }
 else {
        break;
      }
    }
  }
  int hh=getMinimumFontSize(getFont());
  rect.height+=count * hh + ((count == 0) ? 0 : (hh / 2));
  return rect;
}","/** 
 * Since Eclipse TextFlow figure ignore the trailing /r/n for calculating the client size, we must append the extra size ourselves.
 * @return dimension for the client area used by the editor.
 */
public Rectangle getEditorArea(){
  Rectangle rect=getClientArea().getCopy();
  String s=getText();
  int count=0;
  if (s != null && s.length() > 1) {
    for (int i=s.length() - 2; i >= 0; i-=2) {
      if (""String_Node_Str"".equals(s.substring(i,i + 2))) {
      }
 else {
        break;
      }
    }
  }
  int hh=getMinimumFontSize(getFont());
  rect.height+=count * hh + ((count == 0) ? 0 : (hh / 2));
  return rect;
}",0.9865824782951856
65778,"@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    ICancellable queryCanceller=new OdaQueryCanceller(odaStatement,session.getStopSign());
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped())     resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
    if (queryCanceller.collectException() != null) {
      if (!(queryCanceller.collectException().getCause() instanceof UnsupportedOperationException))       throw queryCanceller.collectException();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  odaStatement.setMaxRows(this.getRowFetchLimit());
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  try {
    ICancellable queryCanceller=new OdaQueryCanceller(odaStatement,session.getStopSign());
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped())     resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
    if (queryCanceller.collectException() != null) {
      if (!(queryCanceller.collectException().getCause() instanceof UnsupportedOperationException))       throw queryCanceller.collectException();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.974963890226288
65779,"/** 
 * @param stopSign
 * @throws DataException
 */
private void doRowFiltering() throws DataException {
  if (!psController.needDoOperation(PassStatusController.RESULT_SET_FILTERING))   return;
  boolean changeMaxRows=filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() + filterByRow.getFilterList(FilterByRow.AGGR_FILTER).size() > 0;
  applyFilters(FilterByRow.QUERY_FILTER,changeMaxRows);
  filterByRow.setWorkingFilterSet(FilterByRow.NO_FILTER);
}","/** 
 * @param stopSign
 * @throws DataException
 */
private void doRowFiltering() throws DataException {
  if (!psController.needDoOperation(PassStatusController.RESULT_SET_FILTERING))   return;
  if (needRowSortOnAggregation() && this.computedColumnHelper != null)   this.computedColumnHelper.suppressException(true);
  boolean changeMaxRows=filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() + filterByRow.getFilterList(FilterByRow.AGGR_FILTER).size() > 0;
  applyFilters(FilterByRow.QUERY_FILTER,changeMaxRows);
  filterByRow.setWorkingFilterSet(FilterByRow.NO_FILTER);
  if (this.computedColumnHelper != null)   this.computedColumnHelper.suppressException(false);
}",0.8073878627968337
65780,"public static void updateHeaderCell(CrosstabReportItemHandle crosstab,int pos,int axisType,boolean isMoveDimension,int adjustCount){
  HeaderData data=calcHeaderData(crosstab);
  List<LevelViewHandle> rowLevelList=getLevelList(crosstab,ICrosstabConstants.ROW_AXIS_TYPE);
  if (isMoveDimension) {
    if (ICrosstabConstants.COLUMN_AXIS_TYPE == axisType) {
      data.rowNumber=data.rowNumber - adjustCount;
    }
 else {
      data.columnNumber=data.columnNumber - adjustCount;
    }
  }
  int total=data.rowNumber * data.columnNumber;
  PropertyHandle headerHandle=crosstab.getModelHandle().getPropertyHandle(ICrosstabReportItemConstants.HEADER_PROP);
  if (pos == -1) {
    if (ICrosstabConstants.MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection())) {
      pos=total - crosstab.getHeaderCount() > 0 ? data.columnNumber - 1 : data.columnNumber;
      axisType=ICrosstabConstants.ROW_AXIS_TYPE;
    }
 else {
      pos=total - crosstab.getHeaderCount() > 0 ? data.rowNumber - 1 : data.rowNumber;
      axisType=ICrosstabConstants.COLUMN_AXIS_TYPE;
    }
  }
 else   if (pos == -2 && !crosstab.isHideMeasureHeader() && crosstab.getMeasureCount() > 0) {
    if (ICrosstabConstants.MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection())) {
      if (total - crosstab.getHeaderCount() != data.rowNumber) {
        for (int i=0; i < data.columnNumber - 1; i++) {
          try {
            headerHandle.removeItem((data.rowNumber - 1) * (data.columnNumber - 1));
          }
 catch (          PropertyValueException e) {
          }
        }
      }
    }
 else {
      if (total - crosstab.getHeaderCount() != data.columnNumber) {
        for (int i=data.rowNumber - 2; i >= 0; i--) {
          try {
            int delPos=data.columnNumber - 1;
            if (i == data.rowNumber - 2) {
              delPos=data.columnNumber;
            }
            headerHandle.removeItem(i * (data.columnNumber + 1) + delPos);
          }
 catch (          PropertyValueException e) {
          }
        }
      }
    }
    if (ICrosstabConstants.MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection())) {
      pos=data.columnNumber - 1;
      axisType=ICrosstabConstants.ROW_AXIS_TYPE;
    }
 else {
      pos=data.rowNumber - 1;
      axisType=ICrosstabConstants.COLUMN_AXIS_TYPE;
    }
  }
  boolean isAdd=total - crosstab.getHeaderCount() > 0;
  if (!isMoveDimension && !needUpdateHeaderCell(crosstab,isAdd,axisType)) {
    return;
  }
  if (total == crosstab.getHeaderCount()) {
    return;
  }
  if (ICrosstabConstants.COLUMN_AXIS_TYPE == axisType) {
    for (int i=0; i < data.columnNumber; i++) {
      try {
        if (isAdd) {
          int insertRow=pos;
          if (insertRow == data.rowNumber - 1 && rowLevelList.size() != 0) {
            insertRow=insertRow - 1;
          }
          ExtendedItemHandle cellHandle=CrosstabExtendedItemFactory.createCrosstabCell(crosstab.getModuleHandle());
          headerHandle.add(cellHandle,insertRow * data.columnNumber + i);
        }
 else {
          headerHandle.removeItem((pos == data.rowNumber ? pos - 1 : pos) * data.columnNumber);
        }
      }
 catch (      SemanticException e) {
      }
    }
  }
 else {
    for (int i=data.rowNumber - 1; i >= 0; i--) {
      try {
        if (isAdd) {
          int insertColumn=pos;
          if (pos == data.columnNumber - 1 && i != data.rowNumber - 1) {
            insertColumn=pos - 1;
          }
          ExtendedItemHandle cellHandle=CrosstabExtendedItemFactory.createCrosstabCell(crosstab.getModuleHandle());
          headerHandle.add(cellHandle,i * (data.columnNumber - 1) + insertColumn);
        }
 else {
          int newPos=pos;
          if (pos == data.columnNumber && i != data.rowNumber - 1) {
            newPos=pos - 1;
          }
          headerHandle.removeItem(i * (data.columnNumber + 1) + newPos);
        }
      }
 catch (      SemanticException e) {
      }
    }
  }
}","public static void updateHeaderCell(CrosstabReportItemHandle crosstab,int pos,int axisType,boolean isMoveDimension,int adjustCount,boolean removeLevel){
  HeaderData data=calcHeaderData(crosstab);
  List<LevelViewHandle> rowLevelList=getLevelList(crosstab,ICrosstabConstants.ROW_AXIS_TYPE);
  if (isMoveDimension) {
    if (ICrosstabConstants.COLUMN_AXIS_TYPE == axisType) {
      data.rowNumber=data.rowNumber - adjustCount;
    }
 else {
      data.columnNumber=data.columnNumber - adjustCount;
    }
  }
  int total=data.rowNumber * data.columnNumber;
  PropertyHandle headerHandle=crosstab.getModelHandle().getPropertyHandle(ICrosstabReportItemConstants.HEADER_PROP);
  if (pos == -1) {
    if (ICrosstabConstants.MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection())) {
      pos=total - crosstab.getHeaderCount() > 0 ? data.columnNumber - 1 : data.columnNumber;
      axisType=ICrosstabConstants.ROW_AXIS_TYPE;
    }
 else {
      pos=total - crosstab.getHeaderCount() > 0 ? data.rowNumber - 1 : data.rowNumber;
      axisType=ICrosstabConstants.COLUMN_AXIS_TYPE;
    }
  }
 else   if (pos == -2 && !crosstab.isHideMeasureHeader() && crosstab.getMeasureCount() > 0) {
    if (ICrosstabConstants.MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection())) {
      if (total - crosstab.getHeaderCount() != data.rowNumber) {
        for (int i=0; i < data.columnNumber - 1; i++) {
          try {
            headerHandle.removeItem((data.rowNumber - 1) * (data.columnNumber - 1));
          }
 catch (          PropertyValueException e) {
          }
        }
      }
    }
 else {
      if (total - crosstab.getHeaderCount() != data.columnNumber) {
        for (int i=data.rowNumber - 2; i >= 0; i--) {
          try {
            int delPos=data.columnNumber - 1;
            if (i == data.rowNumber - 2) {
              delPos=data.columnNumber;
            }
            headerHandle.removeItem(i * (data.columnNumber + 1) + delPos);
          }
 catch (          PropertyValueException e) {
          }
        }
      }
    }
    if (ICrosstabConstants.MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection())) {
      pos=data.columnNumber - 1;
      axisType=ICrosstabConstants.ROW_AXIS_TYPE;
    }
 else {
      pos=data.rowNumber - 1;
      axisType=ICrosstabConstants.COLUMN_AXIS_TYPE;
    }
  }
  boolean isAdd=total - crosstab.getHeaderCount() > 0;
  if (!isMoveDimension && !needUpdateHeaderCell(crosstab,removeLevel ? false : isAdd,axisType)) {
    return;
  }
  if (total == crosstab.getHeaderCount()) {
    return;
  }
  if (ICrosstabConstants.COLUMN_AXIS_TYPE == axisType) {
    for (int i=0; i < data.columnNumber; i++) {
      try {
        if (isAdd) {
          int insertRow=pos;
          if (insertRow == data.rowNumber - 1 && rowLevelList.size() != 0) {
            insertRow=insertRow - 1;
          }
          ExtendedItemHandle cellHandle=CrosstabExtendedItemFactory.createCrosstabCell(crosstab.getModuleHandle());
          headerHandle.add(cellHandle,insertRow * data.columnNumber + i);
        }
 else {
          headerHandle.removeItem((pos == data.rowNumber ? pos - 1 : pos) * data.columnNumber);
        }
      }
 catch (      SemanticException e) {
      }
    }
  }
 else {
    for (int i=data.rowNumber - 1; i >= 0; i--) {
      try {
        if (isAdd) {
          int insertColumn=pos;
          if (pos == data.columnNumber - 1 && i != data.rowNumber - 1) {
            insertColumn=pos - 1;
          }
          ExtendedItemHandle cellHandle=CrosstabExtendedItemFactory.createCrosstabCell(crosstab.getModuleHandle());
          headerHandle.add(cellHandle,i * (data.columnNumber - 1) + insertColumn);
        }
 else {
          int newPos=pos;
          if (pos == data.columnNumber && i != data.rowNumber - 1) {
            newPos=pos - 1;
          }
          headerHandle.removeItem(i * (data.columnNumber + 1) + newPos);
        }
      }
 catch (      SemanticException e) {
      }
    }
  }
}",0.9946956302096488
65781,"public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    HyperlinkDef link=parseHyperLink(foreign);
    engine.processForeign(foreign,link);
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    if (HTML2Content.allInline(foreign)) {
      HyperlinkDef link=parseHyperLink(foreign);
      IAutoTextContent autoText=foreign.getReportContent().createAutoTextContent();
      autoText.setText(HTML2Content.getForeignPlainText(foreign));
      startAutoText(autoText);
    }
 else {
      HTML2Content.html2Content(foreign);
      HyperlinkDef link=parseHyperLink(foreign);
      engine.processForeign(foreign,link);
    }
  }
}",0.6511627906976745
65782,"private void updateAxisTitleLocationNLabelSize(final OneAxis axPV,final int iYTitleLocation,double dYAxisTitleThickness,double dWTotal,double dX,double dX1,double dX2){
  if (axPV.isShowLabels() && axPV.getScale().isCategoryScale()) {
    AutoScale.AxisLabelInfo ali=axPV.getScale().getAxisLabelInfo();
    if (axPV.getLabelPosition() == IConstants.LEFT) {
      double labelThickness=dX - dX1 - getTickSize()- ((iYTitleLocation == LEFT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX - 1 - getTickSize()- labelThickness- dYAxisTitleThickness : dX2 + 1 - dYAxisTitleThickness);
    }
 else     if (axPV.getLabelPosition() == IConstants.RIGHT) {
      double labelThickness=dX2 - dX - getTickSize()- ((iYTitleLocation == RIGHT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX + 1 + labelThickness);
    }
  }
 else {
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
}","private void updateAxisTitleLocationNLabelSize(final OneAxis axPV,final int iYTitleLocation,double dYAxisTitleThickness,double dWTotal,double dX,double dX1,double dX2){
  if (axPV.isShowLabels() && axPV.getScale().isCategoryScale()) {
    AutoScale.AxisLabelInfo ali=axPV.getScale().getAxisLabelInfo();
    if (axPV.getLabelPosition() == IConstants.LEFT) {
      double tickSize=((axPV.getCombinedTickStyle() & TICK_LEFT) == TICK_LEFT) ? getTickSize() : 0;
      double labelThickness=dX - dX1 - tickSize- ((iYTitleLocation == LEFT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX - 1 - tickSize- labelThickness- dYAxisTitleThickness : dX2 + 1 - dYAxisTitleThickness);
    }
 else     if (axPV.getLabelPosition() == IConstants.RIGHT) {
      double tickSize=((axPV.getCombinedTickStyle() & TICK_RIGHT) == TICK_RIGHT) ? getTickSize() : 0;
      double labelThickness=dX2 - dX - tickSize- ((iYTitleLocation == RIGHT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX + 1 + tickSize+ labelThickness);
    }
  }
 else {
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
}",0.8689601855431001
65783,"/** 
 * Goals: 1. Adjust the two ends of the vertical axis to fit start/end labels 2. Compute the horizontal co-ordinate for the axis
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @param orthogonalAxis
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
protected final double adjustHorizontal(double dBlockX,double dBlockWidth,AllAxes aax,OneAxis orthogonalAxis) throws ChartException, IllegalArgumentException {
  final OneAxis axPH=aax.areAxesSwapped() ? orthogonalAxis : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : orthogonalAxis;
  final AutoScale scX=axPH.getScale();
  final AutoScale scY=axPV.getScale();
  final int iXLabelLocation=axPH.getLabelPosition();
  final int iYLabelLocation=axPV.getLabelPosition();
  final int iYTitleLocation=axPV.getTitlePosition();
  final Label laXAxisLabels=axPH.getLabel();
  final Label laYAxisLabels=axPV.getLabel();
  final Label laYAxisTitle=axPV.getTitle();
  final int iYTickStyle=axPV.getCombinedTickStyle();
  final IntersectionValue iv=axPV.getIntersectionValue();
  final boolean bTicksLeft=(iYTickStyle & TICK_LEFT) == TICK_LEFT;
  final boolean bTicksRight=(iYTickStyle & TICK_RIGHT) == TICK_RIGHT;
  final double dAppliedYAxisPlotSpacing=(iv.iType == IConstants.MAX || iv.iType == IConstants.MIN) && !aax.getPrimaryOrthogonal().getModelAxis().isLabelWithinAxes() ? dYAxisPlotSpacing : 0;
  double dStart=scY.getStart(), dEnd=scY.getEnd();
  scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
  if (!scY.isStepFixed()) {
    final Object[] oaMinMax=scY.getMinMax();
    while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
      if (!scY.zoomOut()) {
        break;
      }
      scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  double dYAxisLabelsThickness=scY.computeAxisLabelThickness(ids,axPV.getLabel(),VERTICAL);
  double[] dDecorationThickness={0,0};
  Series[] sea=getModel().getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < sea.length; i++) {
    LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[i]);
    if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
      IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(axPV);
      if (iad != null) {
        double[] thickness=iad.computeDecorationThickness(ids,axPV);
        if (thickness[0] > dDecorationThickness[0]) {
          dDecorationThickness[0]=thickness[0];
        }
        if (thickness[1] > dDecorationThickness[1]) {
          dDecorationThickness[1]=thickness[1];
        }
      }
    }
  }
  double dYAxisTitleThickness=0;
  if (laYAxisTitle.isVisible()) {
    final String sPreviousValue=laYAxisTitle.getCaption().getValue();
    laYAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    double maxWidth=AXIS_TITLE_PERCENT * boPlot.getWidth();
    double maxHeight=boPlot.getHeight();
    if (ChartUtil.isStudyLayout(getModel())) {
      maxHeight=Math.abs(axPV.getScale().getEndPoints()[1] - axPV.getScale().getEndPoints()[0]);
    }
    LabelLimiter lblLimit=new LabelLimiter(maxWidth,maxHeight,0);
    lblLimit.computeWrapping(ids,laYAxisTitle);
    lblLimit=lblLimit.limitLabelSize(cComp,ids,laYAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
    putLabelLimiter(axPV.getModelAxis().getTitle(),lblLimit);
    dYAxisTitleThickness=lblLimit.getMaxWidth();
    laYAxisTitle.getCaption().setValue(sPreviousValue);
  }
  double dX=getLocation(scX,iv), dX1=dX, dX2=dX;
  double dWTotal=Math.abs(scX.getStart() - scX.getEnd());
  if (axPV.isShowLabels() && axPV.getScale().isCategoryScale()) {
    double v=(dWTotal - dYAxisTitleThickness - 2 * getTickSize()) / 2;
    if (dYAxisLabelsThickness > v) {
      axPV.getScale().getAxisLabelInfo().dActualSize=dYAxisLabelsThickness;
      dYAxisLabelsThickness=v;
    }
  }
  if (axPV.getModelAxis().isSetLabelSpan()) {
    double dFixedLabelThickness=axPV.getModelAxis().getLabelSpan() * dPointToPixel;
    if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
      if (dYAxisLabelsThickness + dYAxisTitleThickness > dFixedLabelThickness) {
        axPV.setShowLabels(false);
      }
      if (dYAxisTitleThickness > dFixedLabelThickness) {
        laYAxisTitle.setVisible(false);
        dYAxisTitleThickness=0;
      }
      dYAxisLabelsThickness=dFixedLabelThickness;
    }
  }
  if (iv.iType == IConstants.MIN) {
    dX=adjustHorizontalWithOrigin(dBlockX,aax,axPV,scX,iXLabelLocation,iYLabelLocation,iYTitleLocation,laXAxisLabels,bTicksLeft,bTicksRight,dAppliedYAxisPlotSpacing,dYAxisLabelsThickness,dDecorationThickness,dYAxisTitleThickness,dX,dWTotal);
  }
 else   if (iv.iType == IConstants.MAX) {
    dX=adjustHorizontalWithMaxOrigin(dBlockX,dBlockWidth,aax,axPV,scX,iXLabelLocation,iYLabelLocation,iYTitleLocation,laXAxisLabels,bTicksLeft,bTicksRight,dAppliedYAxisPlotSpacing,dYAxisLabelsThickness,dDecorationThickness,dYAxisTitleThickness,dX,dWTotal);
  }
 else {
    dX=adjustHorizontalWithValueOrigin(dBlockX,dBlockWidth,aax,axPV,scX,iXLabelLocation,iYLabelLocation,iYTitleLocation,laXAxisLabels,iv,bTicksLeft,bTicksRight,dYAxisLabelsThickness,dDecorationThickness,dYAxisTitleThickness,dX,dX1,dX2,dWTotal);
  }
  return dX;
}","/** 
 * Goals: 1. Adjust the two ends of the vertical axis to fit start/end labels 2. Compute the horizontal co-ordinate for the axis
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @param orthogonalAxis
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
protected final double adjustHorizontal(double dBlockX,double dBlockWidth,AllAxes aax,OneAxis orthogonalAxis) throws ChartException, IllegalArgumentException {
  final OneAxis axPH=aax.areAxesSwapped() ? orthogonalAxis : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : orthogonalAxis;
  final AutoScale scX=axPH.getScale();
  final AutoScale scY=axPV.getScale();
  final int iXLabelLocation=axPH.getLabelPosition();
  final int iYLabelLocation=axPV.getLabelPosition();
  final int iYTitleLocation=axPV.getTitlePosition();
  final Label laXAxisLabels=axPH.getLabel();
  final Label laYAxisLabels=axPV.getLabel();
  final Label laYAxisTitle=axPV.getTitle();
  final int iYTickStyle=axPV.getCombinedTickStyle();
  final IntersectionValue iv=axPV.getIntersectionValue();
  final boolean bTicksLeft=(iYTickStyle & TICK_LEFT) == TICK_LEFT;
  final boolean bTicksRight=(iYTickStyle & TICK_RIGHT) == TICK_RIGHT;
  final double dAppliedYAxisPlotSpacing=(iv.iType == IConstants.MAX || iv.iType == IConstants.MIN) && !aax.getPrimaryOrthogonal().getModelAxis().isLabelWithinAxes() ? dYAxisPlotSpacing : 0;
  double dStart=scY.getStart(), dEnd=scY.getEnd();
  scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
  if (!scY.isStepFixed()) {
    final Object[] oaMinMax=scY.getMinMax();
    while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
      if (!scY.zoomOut()) {
        break;
      }
      scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  double dYAxisLabelsThickness=scY.computeAxisLabelThickness(ids,axPV.getLabel(),VERTICAL);
  double[] dDecorationThickness={0,0};
  Series[] sea=getModel().getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < sea.length; i++) {
    LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[i]);
    if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
      IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(axPV);
      if (iad != null) {
        double[] thickness=iad.computeDecorationThickness(ids,axPV);
        if (thickness[0] > dDecorationThickness[0]) {
          dDecorationThickness[0]=thickness[0];
        }
        if (thickness[1] > dDecorationThickness[1]) {
          dDecorationThickness[1]=thickness[1];
        }
      }
    }
  }
  double dYAxisTitleThickness=0;
  if (laYAxisTitle.isVisible()) {
    final String sPreviousValue=laYAxisTitle.getCaption().getValue();
    laYAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    double maxWidth=AXIS_TITLE_PERCENT * boPlot.getWidth();
    double maxHeight=boPlot.getHeight();
    if (ChartUtil.isStudyLayout(getModel())) {
      maxHeight=Math.abs(axPV.getScale().getEndPoints()[1] - axPV.getScale().getEndPoints()[0]);
    }
    LabelLimiter lblLimit=new LabelLimiter(maxWidth,maxHeight,0);
    lblLimit.computeWrapping(ids,laYAxisTitle);
    lblLimit=lblLimit.limitLabelSize(cComp,ids,laYAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
    putLabelLimiter(axPV.getModelAxis().getTitle(),lblLimit);
    dYAxisTitleThickness=lblLimit.getMaxWidth();
    laYAxisTitle.getCaption().setValue(sPreviousValue);
  }
  double dX=getLocation(scX,iv), dX1=dX, dX2=dX;
  double dWTotal=Math.abs(scX.getStart() - scX.getEnd());
  if (axPV.isShowLabels() && axPV.getScale().isCategoryScale()) {
    double leftTickSize=bTicksLeft ? getTickSize() : 0;
    double rightTickSize=bTicksRight ? getTickSize() : 0;
    double v=(dWTotal - dYAxisTitleThickness - leftTickSize- rightTickSize) / 2;
    if (dYAxisLabelsThickness > v) {
      axPV.getScale().getAxisLabelInfo().dActualSize=dYAxisLabelsThickness;
      dYAxisLabelsThickness=v;
    }
  }
  if (axPV.getModelAxis().isSetLabelSpan()) {
    double dFixedLabelThickness=axPV.getModelAxis().getLabelSpan() * dPointToPixel;
    if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
      if (dYAxisLabelsThickness + dYAxisTitleThickness > dFixedLabelThickness) {
        axPV.setShowLabels(false);
      }
      if (dYAxisTitleThickness > dFixedLabelThickness) {
        laYAxisTitle.setVisible(false);
        dYAxisTitleThickness=0;
      }
      dYAxisLabelsThickness=dFixedLabelThickness;
    }
  }
  if (iv.iType == IConstants.MIN) {
    dX=adjustHorizontalWithOrigin(dBlockX,aax,axPV,scX,iXLabelLocation,iYLabelLocation,iYTitleLocation,laXAxisLabels,bTicksLeft,bTicksRight,dAppliedYAxisPlotSpacing,dYAxisLabelsThickness,dDecorationThickness,dYAxisTitleThickness,dX,dWTotal);
  }
 else   if (iv.iType == IConstants.MAX) {
    dX=adjustHorizontalWithMaxOrigin(dBlockX,dBlockWidth,aax,axPV,scX,iXLabelLocation,iYLabelLocation,iYTitleLocation,laXAxisLabels,bTicksLeft,bTicksRight,dAppliedYAxisPlotSpacing,dYAxisLabelsThickness,dDecorationThickness,dYAxisTitleThickness,dX,dWTotal);
  }
 else {
    dX=adjustHorizontalWithValueOrigin(dBlockX,dBlockWidth,aax,axPV,scX,iXLabelLocation,iYLabelLocation,iYTitleLocation,laXAxisLabels,iv,bTicksLeft,bTicksRight,dYAxisLabelsThickness,dDecorationThickness,dYAxisTitleThickness,dX,dX1,dX2,dWTotal);
  }
  return dX;
}",0.9875356125356124
65784,"private boolean validateFileName(){
  if (""String_Node_Str"".equals(getFileName())) {
    setErrorMessage(null);
    setMessage(Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!new File(getFileName()).exists()) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
    return false;
  }
  setErrorMessage(null);
  setMessage(null);
  return true;
}","private boolean validateFileName(){
  if (""String_Node_Str"".equals(getFileName())) {
    setErrorMessage(null);
    setMessage(Messages.getString(""String_Node_Str""));
    return false;
  }
  File file=new File(getFileName());
  if (!file.exists() || !file.isFile()) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
    return false;
  }
  setErrorMessage(null);
  setMessage(null);
  return true;
}",0.8956743002544529
65785,"public static DataItemHandle createColumnBindingAndDataItem(ReportItemHandle owner,LevelAttributeHandle levelAttrHandle) throws SemanticException {
  ComputedColumn bindingColumn=StructureFactory.newComputedColumn(owner,levelAttrHandle.getName());
  ComputedColumnHandle bindingHandle=owner.addColumnBinding(bindingColumn,false);
  LevelHandle levelHandle=(LevelHandle)levelAttrHandle.getElementHandle();
  String dimensionName=levelHandle.getContainer().getContainer().getName();
  bindingHandle.setExpression(ExpressionUtil.createJSDimensionExpression(dimensionName,levelHandle.getName(),levelAttrHandle.getName()));
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelAttrHandle.getName());
  CrosstabAdaptUtil.formatDataItem(levelHandle,dataHandle);
  dataHandle.setResultSetColumn(bindingHandle.getName());
  if (LevelAttribute.DATE_TIME_ATTRIBUTE_NAME.equals(levelAttrHandle.getName())) {
    bindingHandle.setDataType(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME);
    dataHandle.getPrivateStyle().setDateTimeFormatCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM);
    dataHandle.getPrivateStyle().setDateTimeFormat(levelHandle.getDateTimeFormat());
  }
 else {
    bindingHandle.setDataType(levelAttrHandle.getDataType());
  }
  return dataHandle;
}","public static DataItemHandle createColumnBindingAndDataItem(ReportItemHandle owner,LevelAttributeHandle levelAttrHandle) throws SemanticException {
  ComputedColumn bindingColumn=StructureFactory.newComputedColumn(owner,levelAttrHandle.getName());
  ComputedColumnHandle bindingHandle=owner.addColumnBinding(bindingColumn,false);
  LevelHandle levelHandle=(LevelHandle)levelAttrHandle.getElementHandle();
  String dimensionName=levelHandle.getContainer().getContainer().getName();
  bindingHandle.setExpression(ExpressionUtil.createJSDimensionExpression(dimensionName,levelHandle.getName(),levelAttrHandle.getName()));
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelAttrHandle.getName());
  String type=levelHandle.getDataType();
  String aliment=levelHandle.getAlignment();
  formatDataItem(type,null,aliment,dataHandle);
  dataHandle.setResultSetColumn(bindingHandle.getName());
  if (LevelAttribute.DATE_TIME_ATTRIBUTE_NAME.equals(levelAttrHandle.getName())) {
    bindingHandle.setDataType(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME);
    dataHandle.getPrivateStyle().setDateTimeFormatCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM);
    dataHandle.getPrivateStyle().setDateTimeFormat(levelHandle.getDateTimeFormat());
  }
 else {
    bindingHandle.setDataType(levelAttrHandle.getDataType());
  }
  return dataHandle;
}",0.9505988023952096
65786,"public RowState(Element element,Map<Element,StyleProperties> cssStyles,IContent parent,ActionContent action){
  super(element,cssStyles,action);
  content=(RowContent)parent.getReportContent().createRowContent();
  setParent(parent);
  content.setHeight(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
  HTML2Content.handleStyle(element,cssStyles,content);
}","public RowState(Element element,Map<Element,StyleProperties> cssStyles,IContent parent,ActionContent action,Hashtable<Integer,Integer> records,int index){
  super(element,cssStyles,action);
  content=(RowContent)parent.getReportContent().createRowContent();
  setParent(parent);
  content.setHeight(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
  HTML2Content.handleStyle(element,cssStyles,content);
  this.records=records;
  this.index=index;
}",0.8936678614097969
65787,"private boolean isUseDimension(String dimensionName){
  boolean inUseDimsion=false;
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  int count=crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    if (crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i).getCubeDimensionName().equals(dimensionName)) {
      inUseDimsion=true;
    }
  }
  count=crosstab.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    if (crosstab.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i).getCubeDimensionName().equals(dimensionName)) {
      inUseDimsion=true;
    }
  }
  return inUseDimsion;
}","private boolean isUseDimension(String dimensionName){
  boolean inUseDimsion=false;
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  int count=crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    if (crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i).getCubeDimension().getName().equals(dimensionName)) {
      inUseDimsion=true;
    }
  }
  count=crosstab.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    if (crosstab.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i).getCubeDimension().getName().equals(dimensionName)) {
      inUseDimsion=true;
    }
  }
  return inUseDimsion;
}",0.9913916786226684
65788,"/** 
 * Update value of query text
 * @param queryText
 */
private void updateValuesFromQuery(String queryText){
  if (queryText.length() == 0) {
    validateHasSelectedColumns();
    return;
  }
  if (selectedFile != null && isNewFile(queryText,getFileName(selectedFile))) {
    updateColumnsFromQuery(queryText,selectedFile);
  }
  if (selectedColumnsViewer.getTable().getItemCount() == 0) {
    setPageComplete(false);
    String errMsg=currentSheetName == null ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str"");
    setMessage(errMsg,ERROR);
  }
}","/** 
 * Update value of query text
 * @param queryText
 */
private void updateValuesFromQuery(String queryText){
  if (queryText.length() == 0) {
    validateHasSelectedColumns();
    return;
  }
  if (selectedFile != null && isNewFile(queryText,getFileName(selectedFile))) {
    updateColumnsFromQuery(queryText,selectedFile);
  }
  if (selectedColumnsViewer.getTable().getItemCount() == 0) {
    setPageComplete(false);
    setMessage(getEmptyColumnErrMsg(),ERROR);
  }
}",0.8387096774193549
65789,"private boolean validateHasSelectedColumns(){
  if (selectedColumnsViewer.getTable().getItemCount() == 0 && this.getControl().getShell().getText().startsWith(""String_Node_Str"")) {
    setPageComplete(false);
    String errMsg=currentSheetName == null ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str"");
    setMessage(errMsg,ERROR);
    return false;
  }
  return true;
}","private boolean validateHasSelectedColumns(){
  if (selectedColumnsViewer.getTable().getItemCount() == 0 && this.getControl().getShell().getText().startsWith(""String_Node_Str"")) {
    setPageComplete(false);
    setMessage(getEmptyColumnErrMsg(),ERROR);
    return false;
  }
  return true;
}",0.7543352601156069
65790,"/** 
 * Remove selected columns
 */
private void removeColumns(){
  TableItem[] tis=selectedColumnsViewer.getTable().getSelection();
  int index=selectedColumnsViewer.getTable().getSelectionIndex();
  String[] removedColumnInfo=null;
  java.util.List<String[]> removedItems=new ArrayList<String[]>();
  for (int i=0; i < tis.length; i++) {
    removedColumnInfo=new String[3];
    removedColumnInfo[0]=tis[i].getText(0);
    removedColumnInfo[1]=tis[i].getText(1);
    removedColumnInfo[2]=tis[i].getText(2);
    removedItems.add(removedColumnInfo);
  }
  removeItemsFromSelectedOnes(removedItems);
  selectedColumnsViewer.refresh();
  if (index > 0)   selectedColumnsViewer.getTable().setSelection(index - 1);
 else   selectedColumnsViewer.getTable().setSelection(index);
  if (selectedColumnsViewer.getTable().getSelectionCount() == 0)   btnRemove.setEnabled(false);
  if (savedSelectedColumnsInfoList.size() <= 1) {
    btnMoveDown.setEnabled(false);
    btnMoveUp.setEnabled(false);
  }
  if (selectedColumnsViewer.getTable().getItemCount() == 0) {
    setPageComplete(false);
    String errMsg=currentSheetName == null ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str"");
    setMessage(errMsg,ERROR);
  }
}","/** 
 * Remove selected columns
 */
private void removeColumns(){
  TableItem[] tis=selectedColumnsViewer.getTable().getSelection();
  int index=selectedColumnsViewer.getTable().getSelectionIndex();
  String[] removedColumnInfo=null;
  java.util.List<String[]> removedItems=new ArrayList<String[]>();
  for (int i=0; i < tis.length; i++) {
    removedColumnInfo=new String[3];
    removedColumnInfo[0]=tis[i].getText(0);
    removedColumnInfo[1]=tis[i].getText(1);
    removedColumnInfo[2]=tis[i].getText(2);
    removedItems.add(removedColumnInfo);
  }
  removeItemsFromSelectedOnes(removedItems);
  selectedColumnsViewer.refresh();
  if (index > 0)   selectedColumnsViewer.getTable().setSelection(index - 1);
 else   selectedColumnsViewer.getTable().setSelection(index);
  if (selectedColumnsViewer.getTable().getSelectionCount() == 0)   btnRemove.setEnabled(false);
  if (savedSelectedColumnsInfoList.size() <= 1) {
    btnMoveDown.setEnabled(false);
    btnMoveUp.setEnabled(false);
  }
  if (selectedColumnsViewer.getTable().getItemCount() == 0) {
    setPageComplete(false);
    setMessage(getEmptyColumnErrMsg(),ERROR);
  }
}",0.9283305227655988
65791,"public void selectionChanged(SelectionChangedEvent event){
  String sheetName=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
  String queryText=this.getInitializationDesign().getQueryText();
  if (sheetName.equalsIgnoreCase(currentSheetName) && isNewFile(queryText,getFileName(selectedFile))) {
    flag=false;
    return;
  }
 else   if (flag) {
    flag=false;
    return;
  }
  if (currentSheetName != null && !MessageDialog.openConfirm(worksheetsCombo.getControl().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
    flag=true;
    worksheetsCombo.setSelection(new StructuredSelection(currentSheetName));
    return;
  }
  currentSheetName=sheetName;
  setPageComplete(false);
  selectedColumnsViewer.getTable().removeAll();
  savedSelectedColumnsInfoList.clear();
  availableList.removeAll();
  if (this.getShell() != null) {
    Cursor waitCursor=new Cursor(this.getShell().getDisplay(),SWT.CURSOR_WAIT);
    this.getControl().setCursor(waitCursor);
  }
  String fileName=getFileName(selectedFile);
  String[] columnNames=getFileColumnNames(selectedFile);
  if (columnNames != null && columnNames.length != 0) {
    enableListAndViewer();
    availableList.setItems(columnNames);
    availableList.select(0);
    btnAdd.setEnabled(true);
    btnRemove.setEnabled(false);
    btnMoveUp.setEnabled(false);
    btnMoveDown.setEnabled(false);
    if (!(fileName.endsWith(ExcelODAConstants.XLS_FORMAT) || fileName.endsWith(ExcelODAConstants.XLSX_FORMAT))) {
      setMessage(Messages.getString(""String_Node_Str""),WARNING);
    }
 else {
      if (selectedColumnsViewer.getTable().getItemCount() == 0) {
        String errMsg=currentSheetName == null ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str"");
        setMessage(errMsg,ERROR);
      }
 else {
        setMessage(DEFAULT_MESSAGE);
      }
    }
  }
  if (this.getShell() != null) {
    Cursor normalCursor=new Cursor(this.getShell().getDisplay(),SWT.CURSOR_ARROW);
    this.getControl().setCursor(normalCursor);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  String sheetName=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
  String queryText=this.getInitializationDesign().getQueryText();
  if (sheetName.equalsIgnoreCase(currentSheetName) && isNewFile(queryText,getFileName(selectedFile))) {
    flag=false;
    return;
  }
 else   if (flag) {
    flag=false;
    return;
  }
  if (currentSheetName != null && !MessageDialog.openConfirm(worksheetsCombo.getControl().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
    flag=true;
    worksheetsCombo.setSelection(new StructuredSelection(currentSheetName));
    return;
  }
  currentSheetName=sheetName;
  setPageComplete(false);
  selectedColumnsViewer.getTable().removeAll();
  savedSelectedColumnsInfoList.clear();
  availableList.removeAll();
  if (this.getShell() != null) {
    Cursor waitCursor=new Cursor(this.getShell().getDisplay(),SWT.CURSOR_WAIT);
    this.getControl().setCursor(waitCursor);
  }
  String fileName=getFileName(selectedFile);
  String[] columnNames=getFileColumnNames(selectedFile);
  if (columnNames != null && columnNames.length != 0) {
    enableListAndViewer();
    availableList.setItems(columnNames);
    availableList.select(0);
    btnAdd.setEnabled(true);
    btnRemove.setEnabled(false);
    btnMoveUp.setEnabled(false);
    btnMoveDown.setEnabled(false);
    if (!(fileName.endsWith(ExcelODAConstants.XLS_FORMAT) || fileName.endsWith(ExcelODAConstants.XLSX_FORMAT))) {
      setMessage(Messages.getString(""String_Node_Str""),WARNING);
    }
 else {
      if (selectedColumnsViewer.getTable().getItemCount() == 0) {
        setMessage(getEmptyColumnErrMsg(),ERROR);
      }
 else {
        setMessage(DEFAULT_MESSAGE);
      }
    }
  }
  if (this.getShell() != null) {
    Cursor normalCursor=new Cursor(this.getShell().getDisplay(),SWT.CURSOR_ARROW);
    this.getControl().setCursor(normalCursor);
  }
}",0.9568666336142786
65792,"private void populateWorkSheetCombo() throws IOException {
  java.util.List<String> sheetNameList=ExcelFileReader.getSheetNamesInExcelFile(selectedFile);
  worksheetsCombo.setInput(sheetNameList.toArray());
  for (  String sheet : sheetNameList) {
    String queryText=getInitializationDesign().getQueryText();
    if (sheet.equals(currentSheetName) && isNewFile(queryText,getFileName(selectedFile)))     worksheetsCombo.setSelection(new StructuredSelection(currentSheetName));
  }
}","private void populateWorkSheetCombo() throws IOException {
  java.util.List<String> sheetNameList=ExcelFileReader.getSheetNamesInExcelFile(selectedFile);
  worksheetsCombo.setInput(sheetNameList.toArray());
  for (  String sheet : sheetNameList) {
    String queryText=getInitializationDesign().getQueryText();
    if (sheet.equals(currentSheetName) && isNewFile(queryText,getFileName(selectedFile)))     worksheetsCombo.setSelection(new StructuredSelection(currentSheetName));
  }
  if (worksheetsCombo.getSelection().isEmpty())   this.currentSheetName=null;
}",0.9252873563218392
65793,"/** 
 * Processes the given selection list, and adds the element to the given parameter bean's selection list.
 * @param selectionList original selection list to be processed
 * @param parameterBean scalar parameter bean
 * @param locale locale (for data conversion)
 * @param timeZone time zone (for data conversion)
 * @param processDefault update ""selected"" fields in parameterBean
 * @return processed selection list
 */
public static List<ParameterSelectionChoice> makeSelectionList(Collection<ParameterSelectionChoice> selectionList,ScalarParameterBean parameterBean,Locale locale,TimeZone timeZone,boolean processDefault){
  boolean nullValueFound=false;
  List<ParameterSelectionChoice> processedList=parameterBean.getSelectionList();
  ParameterDefinition paramDef=parameterBean.getParameter();
  List<String> defaultValues=null;
  if (parameterBean.getDefaultValues() != null) {
    defaultValues=new ArrayList<String>(parameterBean.getDefaultValues());
  }
  parameterBean.setValueInList(false);
  if (selectionList != null) {
    boolean isDisplayTextInList=false;
    for (    ParameterSelectionChoice selectionItem : selectionList) {
      if (selectionItem == null)       continue;
      Object value=selectionItem.getValue();
      try {
        value=DataUtil.convert(value,paramDef.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value,timeZone);
      String label=selectionItem.getLabel();
      if (label == null || label.length() <= 0) {
        label=DataUtil.getDisplayValue(null,paramDef.getPattern(),value,locale,timeZone);
      }
      if (paramDef.isRequired()) {
        if (value == null || (""String_Node_Str"".equals(value) && paramDef.getDataType() == IScalarParameterDefn.TYPE_STRING)) {
          continue;
        }
      }
      if (value == null) {
        nullValueFound=true;
        if (label == null) {
          label=IBirtConstants.NULL_VALUE_DISPLAY;
        }
      }
      selectionItem.setLabel(label);
      selectionItem.setValue(displayValue);
      processedList.add(selectionItem);
      if (processDefault) {
        if (!paramDef.isMultiValue() && DataUtil.equals(displayValue,parameterBean.getValue())) {
          parameterBean.setValueInList(true);
          if (!DataUtil.equals(label,parameterBean.getDisplayText())) {
            if (parameterBean.getParameter().isDistinct() && parameterBean.isDisplayTextInReq()) {
              selectionItem.setLabel(parameterBean.getDisplayText());
              isDisplayTextInList=true;
            }
          }
 else {
            isDisplayTextInList=true;
          }
        }
        if (paramDef.isMultiValue() && defaultValues != null) {
          if (DataUtil.contain((List<?>)defaultValues,displayValue,true)) {
            parameterBean.setDefaultValueInList(true);
            defaultValues.remove(displayValue);
          }
        }
 else         if (DataUtil.equals(displayValue,parameterBean.getDefaultValue())) {
          parameterBean.setDefaultValueInList(true);
          defaultValues.remove(displayValue);
        }
      }
    }
    if (processDefault) {
      if (parameterBean.isValueInList() && parameterBean.isDisplayTextInReq() && !isDisplayTextInList) {
        processedList.add(new ParameterSelectionChoice(parameterBean.getDisplayText(),parameterBean.getValue()));
        isDisplayTextInList=true;
      }
      if (defaultValues != null && defaultValues.size() > 0) {
        for (int i=0; i < defaultValues.size(); i++) {
          processedList.add(i,new ParameterSelectionChoice(defaultValues.get(i),defaultValues.get(i)));
        }
      }
      parameterBean.setDisplayTextInList(isDisplayTextInList);
    }
  }
  if (!nullValueFound && !parameterBean.isRequired()) {
    ParameterSelectionChoice selectionItem=new ParameterSelectionChoice(IBirtConstants.NULL_VALUE_DISPLAY,null);
    processedList.add(0,selectionItem);
  }
  return processedList;
}","/** 
 * Processes the given selection list, and adds the element to the given parameter bean's selection list.
 * @param selectionList original selection list to be processed
 * @param parameterBean scalar parameter bean
 * @param locale locale (for data conversion)
 * @param timeZone time zone (for data conversion)
 * @param processDefault update ""selected"" fields in parameterBean
 * @return processed selection list
 */
public static List<ParameterSelectionChoice> makeSelectionList(Collection<ParameterSelectionChoice> selectionList,ScalarParameterBean parameterBean,Locale locale,TimeZone timeZone,boolean processDefault){
  boolean nullValueFound=false;
  List<ParameterSelectionChoice> processedList=parameterBean.getSelectionList();
  ParameterDefinition paramDef=parameterBean.getParameter();
  List<String> defaultValues=null;
  if (parameterBean.getDefaultValues() != null) {
    defaultValues=new ArrayList<String>(parameterBean.getDefaultValues());
  }
  parameterBean.setValueInList(false);
  if (selectionList != null) {
    boolean isDisplayTextInList=false;
    for (    ParameterSelectionChoice selectionItem : selectionList) {
      if (selectionItem == null)       continue;
      Object value=selectionItem.getValue();
      try {
        value=DataUtil.convert(value,paramDef.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value,timeZone);
      String label=selectionItem.getLabel();
      if (label == null || label.length() <= 0) {
        label=DataUtil.getDisplayValue(null,paramDef.getPattern(),value,locale,timeZone);
      }
      if (paramDef.isRequired()) {
        if (value == null || (""String_Node_Str"".equals(value) && paramDef.getDataType() == IScalarParameterDefn.TYPE_STRING)) {
          continue;
        }
      }
      if (value == null) {
        nullValueFound=true;
        if (label == null) {
          label=IBirtConstants.NULL_VALUE_DISPLAY;
        }
      }
      selectionItem.setLabel(label);
      selectionItem.setValue(displayValue);
      processedList.add(selectionItem);
      if (processDefault) {
        if (!paramDef.isMultiValue() && DataUtil.equals(displayValue,parameterBean.getValue())) {
          parameterBean.setValueInList(true);
          if (!DataUtil.equals(label,parameterBean.getDisplayText())) {
            if (parameterBean.getParameter().isDistinct() && parameterBean.isDisplayTextInReq()) {
              selectionItem.setLabel(parameterBean.getDisplayText());
              isDisplayTextInList=true;
            }
          }
 else {
            isDisplayTextInList=true;
          }
        }
        if (paramDef.isMultiValue() && defaultValues != null) {
          if (DataUtil.contain((List<?>)defaultValues,displayValue,true)) {
            parameterBean.setDefaultValueInList(true);
            if (defaultValues != null) {
              defaultValues.remove(displayValue);
            }
          }
        }
 else         if (DataUtil.equals(displayValue,parameterBean.getDefaultValue())) {
          parameterBean.setDefaultValueInList(true);
          defaultValues.remove(displayValue);
        }
      }
    }
    if (processDefault) {
      if (parameterBean.isValueInList() && parameterBean.isDisplayTextInReq() && !isDisplayTextInList) {
        processedList.add(new ParameterSelectionChoice(parameterBean.getDisplayText(),parameterBean.getValue()));
        isDisplayTextInList=true;
      }
      if (defaultValues != null && defaultValues.size() > 0) {
        for (int i=0; i < defaultValues.size(); i++) {
          processedList.add(i,new ParameterSelectionChoice(defaultValues.get(i),defaultValues.get(i)));
        }
      }
      parameterBean.setDisplayTextInList(isDisplayTextInList);
    }
  }
  if (!nullValueFound && !parameterBean.isRequired()) {
    ParameterSelectionChoice selectionItem=new ParameterSelectionChoice(IBirtConstants.NULL_VALUE_DISPLAY,null);
    processedList.add(0,selectionItem);
  }
  return processedList;
}",0.9928794503435352
65794,"/** 
 * Processes the given selection list, and adds the element to the given parameter bean's selection list.
 * @param selectionList original selection list to be processed
 * @param parameterBean scalar parameter bean
 * @param locale locale (for data conversion)
 * @param timeZone time zone (for data conversion)
 * @param processDefault update ""selected"" fields in parameterBean
 * @return processed selection list
 */
public static List<ParameterSelectionChoice> makeSelectionList(Collection<ParameterSelectionChoice> selectionList,ScalarParameterBean parameterBean,Locale locale,TimeZone timeZone,boolean processDefault){
  boolean nullValueFound=false;
  List<ParameterSelectionChoice> processedList=parameterBean.getSelectionList();
  ParameterDefinition paramDef=parameterBean.getParameter();
  List<String> defaultValues=null;
  if (parameterBean.getDefaultValues() != null) {
    defaultValues=new ArrayList<String>(parameterBean.getDefaultValues());
  }
  parameterBean.setValueInList(false);
  if (selectionList != null) {
    boolean isDisplayTextInList=false;
    for (    ParameterSelectionChoice selectionItem : selectionList) {
      if (selectionItem == null)       continue;
      Object value=selectionItem.getValue();
      try {
        value=DataUtil.convert(value,paramDef.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value,timeZone);
      String label=selectionItem.getLabel();
      if (label == null || label.length() <= 0) {
        label=DataUtil.getDisplayValue(null,paramDef.getPattern(),value,locale,timeZone);
      }
      if (paramDef.isRequired()) {
        if (value == null || (""String_Node_Str"".equals(value) && paramDef.getDataType() == IScalarParameterDefn.TYPE_STRING)) {
          continue;
        }
      }
      if (value == null) {
        nullValueFound=true;
        if (label == null) {
          label=IBirtConstants.NULL_VALUE_DISPLAY;
        }
      }
      selectionItem.setLabel(label);
      selectionItem.setValue(displayValue);
      processedList.add(selectionItem);
      if (processDefault) {
        if (!paramDef.isMultiValue() && DataUtil.equals(displayValue,parameterBean.getValue())) {
          parameterBean.setValueInList(true);
          if (!DataUtil.equals(label,parameterBean.getDisplayText())) {
            if (parameterBean.getParameter().isDistinct() && parameterBean.isDisplayTextInReq()) {
              selectionItem.setLabel(parameterBean.getDisplayText());
              isDisplayTextInList=true;
            }
          }
 else {
            isDisplayTextInList=true;
          }
        }
        if (paramDef.isMultiValue() && defaultValues != null) {
          if (DataUtil.contain((List<?>)defaultValues,displayValue,true)) {
            parameterBean.setDefaultValueInList(true);
            if (defaultValues != null) {
              defaultValues.remove(displayValue);
            }
          }
        }
 else         if (DataUtil.equals(displayValue,parameterBean.getDefaultValue())) {
          parameterBean.setDefaultValueInList(true);
          defaultValues.remove(displayValue);
        }
      }
    }
    if (processDefault) {
      if (parameterBean.isValueInList() && parameterBean.isDisplayTextInReq() && !isDisplayTextInList) {
        processedList.add(new ParameterSelectionChoice(parameterBean.getDisplayText(),parameterBean.getValue()));
        isDisplayTextInList=true;
      }
      if (defaultValues != null && defaultValues.size() > 0) {
        for (int i=0; i < defaultValues.size(); i++) {
          processedList.add(i,new ParameterSelectionChoice(defaultValues.get(i),defaultValues.get(i)));
        }
      }
      parameterBean.setDisplayTextInList(isDisplayTextInList);
    }
  }
  if (!nullValueFound && !parameterBean.isRequired()) {
    ParameterSelectionChoice selectionItem=new ParameterSelectionChoice(IBirtConstants.NULL_VALUE_DISPLAY,null);
    processedList.add(0,selectionItem);
  }
  return processedList;
}","/** 
 * Processes the given selection list, and adds the element to the given parameter bean's selection list.
 * @param selectionList original selection list to be processed
 * @param parameterBean scalar parameter bean
 * @param locale locale (for data conversion)
 * @param timeZone time zone (for data conversion)
 * @param processDefault update ""selected"" fields in parameterBean
 * @return processed selection list
 */
public static List<ParameterSelectionChoice> makeSelectionList(Collection<ParameterSelectionChoice> selectionList,ScalarParameterBean parameterBean,Locale locale,TimeZone timeZone,boolean processDefault){
  boolean nullValueFound=false;
  List<ParameterSelectionChoice> processedList=parameterBean.getSelectionList();
  ParameterDefinition paramDef=parameterBean.getParameter();
  List<String> defaultValues=null;
  if (parameterBean.getDefaultValues() != null) {
    defaultValues=new ArrayList<String>(parameterBean.getDefaultValues());
  }
  parameterBean.setValueInList(false);
  if (selectionList != null) {
    boolean isDisplayTextInList=false;
    for (    ParameterSelectionChoice selectionItem : selectionList) {
      if (selectionItem == null)       continue;
      Object value=selectionItem.getValue();
      try {
        value=DataUtil.convert(value,paramDef.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value,timeZone);
      String label=selectionItem.getLabel();
      if (label == null || label.length() <= 0) {
        label=DataUtil.getDisplayValue(null,paramDef.getPattern(),value,locale,timeZone);
      }
      if (paramDef.isRequired()) {
        if (value == null || (""String_Node_Str"".equals(value) && paramDef.getDataType() == IScalarParameterDefn.TYPE_STRING)) {
          continue;
        }
      }
      if (value == null) {
        nullValueFound=true;
        if (label == null) {
          label=IBirtConstants.NULL_VALUE_DISPLAY;
        }
      }
      selectionItem.setLabel(label);
      selectionItem.setValue(displayValue);
      processedList.add(selectionItem);
      if (processDefault) {
        if (!paramDef.isMultiValue() && DataUtil.equals(displayValue,parameterBean.getValue())) {
          parameterBean.setValueInList(true);
          if (!DataUtil.equals(label,parameterBean.getDisplayText())) {
            if (parameterBean.getParameter().isDistinct() && parameterBean.isDisplayTextInReq()) {
              selectionItem.setLabel(parameterBean.getDisplayText());
              isDisplayTextInList=true;
            }
          }
 else {
            isDisplayTextInList=true;
          }
        }
        if (paramDef.isMultiValue() && defaultValues != null) {
          if (DataUtil.contain((List<?>)defaultValues,displayValue,true)) {
            parameterBean.setDefaultValueInList(true);
            defaultValues.remove(displayValue);
          }
        }
 else         if (DataUtil.equals(displayValue,parameterBean.getDefaultValue())) {
          parameterBean.setDefaultValueInList(true);
          if (defaultValues != null) {
            defaultValues.remove(displayValue);
          }
        }
      }
    }
    if (processDefault) {
      if (parameterBean.isValueInList() && parameterBean.isDisplayTextInReq() && !isDisplayTextInList) {
        processedList.add(new ParameterSelectionChoice(parameterBean.getDisplayText(),parameterBean.getValue()));
        isDisplayTextInList=true;
      }
      if (defaultValues != null && defaultValues.size() > 0) {
        for (int i=0; i < defaultValues.size(); i++) {
          processedList.add(i,new ParameterSelectionChoice(defaultValues.get(i),defaultValues.get(i)));
        }
      }
      parameterBean.setDisplayTextInList(isDisplayTextInList);
    }
  }
  if (!nullValueFound && !parameterBean.isRequired()) {
    ParameterSelectionChoice selectionItem=new ParameterSelectionChoice(IBirtConstants.NULL_VALUE_DISPLAY,null);
    processedList.add(0,selectionItem);
  }
  return processedList;
}",0.9488706875155124
65795,"protected void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}","public void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}",0.9378531073446328
65796,"protected void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}","public void setProvider(IExpressionProvider provider){
  super.setProvider(provider);
}",0.9378531073446328
65797,"private void writeManifest() throws IOException {
  zipStream.putNextEntry(new ZipEntry(MANIFEST_URI));
  ManifestWriter writer=new ManifestWriter(zipStream);
  writer.start(rootMime);
  for (  PackageEntry entry : entries.values()) {
    writer.writeEntry(entry);
  }
  writer.end();
  zipStream.closeEntry();
}","private void writeManifest() throws IOException {
  zipStream.putNextEntry(new ZipEntry(MANIFEST_URI));
  zipStream.write(GetByteArrayFromManifestWriter());
  zipStream.closeEntry();
}",0.6411290322580645
65798,"protected void dropSource(Object source) throws SemanticException {
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    for (int i=0; i < array.length; i++) {
      dropSource(array[i]);
    }
  }
 else   if (source instanceof StructuredSelection) {
    dropSource(((StructuredSelection)source).toArray());
  }
 else   if (source instanceof DesignElementHandle) {
    dropSourceElementHandle((DesignElementHandle)source);
  }
 else   if (source instanceof EmbeddedImageHandle) {
    dropEmbeddedImageHandle((EmbeddedImageHandle)(source));
  }
 else   if (source instanceof SlotHandle) {
    dropSourceSlotHandle((SlotHandle)source);
  }
 else   if (source instanceof CssStyleSheetHandle) {
    dropCssStyleHandle((CssStyleSheetHandle)source);
  }
}","protected void dropSource(Object source) throws SemanticException {
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    for (int i=0; i < array.length; i++) {
      dropSource(array[i]);
    }
  }
 else   if (source instanceof StructuredSelection) {
    dropSource(((StructuredSelection)source).toArray());
  }
 else   if (source instanceof DesignElementHandle) {
    dropSourceElementHandle((DesignElementHandle)source);
  }
 else   if (source instanceof EmbeddedImageHandle) {
    dropEmbeddedImageHandle((EmbeddedImageHandle)(source));
  }
 else   if (source instanceof SlotHandle) {
    dropSourceSlotHandle((SlotHandle)source);
  }
 else   if (source instanceof CssStyleSheetHandle) {
    dropCssStyleHandle((CssStyleSheetHandle)source);
  }
 else   if (source instanceof ScriptObjectNode) {
    ((ScriptObjectNode)source).reset();
  }
}",0.9453488372093024
65799,"/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return false;
  }
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (array[i] instanceof MasterPageHandle) {
        int masterPageCount=SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount();
        for (int j=0; j < array.length; j++) {
          if (array[j] instanceof MasterPageHandle)           masterPageCount--;
        }
        if (masterPageCount == 0)         return false;
      }
      if (!canDrop(array[i]))       return false;
    }
    return true;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && handle != null && handle.canDrop() && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof ExtendedItemHandle) {
    Object dropValidator=Platform.getAdapterManager().getAdapter((ExtendedItemHandle)source,DeleteCommand.class);
    if (dropValidator instanceof IDropValidator && ((IDropValidator)dropValidator).accpetValidator())     return ((IDropValidator)dropValidator).canDrop();
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ModuleHandle) {
    return false;
  }
 else   if (source instanceof DesignElementHandle) {
    return ((DesignElementHandle)source).canDrop();
  }
 else   if (source instanceof LibraryHandle) {
    if (((LibraryHandle)source).getHostHandle() != null)     return true;
 else     return false;
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof AbstractThemeHandle) {
      return ((AbstractThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   return false;
}","/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return false;
  }
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (array[i] instanceof MasterPageHandle) {
        int masterPageCount=SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount();
        for (int j=0; j < array.length; j++) {
          if (array[j] instanceof MasterPageHandle)           masterPageCount--;
        }
        if (masterPageCount == 0)         return false;
      }
      if (!canDrop(array[i]))       return false;
    }
    return true;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && handle != null && handle.canDrop() && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof ExtendedItemHandle) {
    Object dropValidator=Platform.getAdapterManager().getAdapter((ExtendedItemHandle)source,DeleteCommand.class);
    if (dropValidator instanceof IDropValidator && ((IDropValidator)dropValidator).accpetValidator())     return ((IDropValidator)dropValidator).canDrop();
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ModuleHandle) {
    return false;
  }
 else   if (source instanceof DesignElementHandle) {
    return ((DesignElementHandle)source).canDrop();
  }
 else   if (source instanceof LibraryHandle) {
    if (((LibraryHandle)source).getHostHandle() != null)     return true;
 else     return false;
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof AbstractThemeHandle) {
      return ((AbstractThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   if (source instanceof ScriptObjectNode) {
    return true;
  }
 else   return false;
}",0.9841928788120708
65800,"protected void okPressed(){
  CommandStack stack=getActionStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  if (input == null) {
    List measureList=new ArrayList();
    List functionList=new ArrayList();
    measureList.addAll(getLevel().getAggregationMeasures());
    functionList.add(getFunctionNames()[0]);
    for (int i=0; i < measureList.size(); i++) {
      functionList.add(getLevel().getAggregationFunction((MeasureViewHandle)measureList.get(i)));
    }
    measureList.add(getMeasure());
    try {
      getLevel().removeSubTotal();
      CrosstabCellHandle cellHandle=getLevel().addSubTotal(measureList,functionList);
      if (cellHandle != null)       CrosstabUIHelper.createSubTotalLabel(getLevel(),cellHandle);
      stack.commit();
    }
 catch (    SemanticException e) {
      stack.rollback();
    }
  }
  super.okPressed();
}","protected void okPressed(){
  CommandStack stack=getActionStack();
  if (input == null) {
    stack.startTrans(Messages.getString(""String_Node_Str""));
    List measureList=new ArrayList();
    List functionList=new ArrayList();
    measureList.addAll(getLevel().getAggregationMeasures());
    functionList.add(getFunctionNames()[0]);
    for (int i=0; i < measureList.size(); i++) {
      functionList.add(getLevel().getAggregationFunction((MeasureViewHandle)measureList.get(i)));
    }
    measureList.add(getMeasure());
    try {
      getLevel().removeSubTotal();
      CrosstabCellHandle cellHandle=getLevel().addSubTotal(measureList,functionList);
      if (cellHandle != null)       CrosstabUIHelper.createSubTotalLabel(getLevel(),cellHandle);
      stack.commit();
    }
 catch (    SemanticException e) {
      stack.rollback();
    }
  }
  super.okPressed();
}",0.9723502304147466
65801,"private void registerActions(RegisterAction[] actions){
  for (int i=0; i < actions.length; i++) {
    if (actions[i] != null)     addRetargetAction(new RetargetAction(actions[i].id,actions[i].displayName,actions[i].style));
  }
}","private void registerActions(RegisterAction[] actions){
  for (int i=0; i < actions.length; i++) {
    if (actions[i] != null)     addRetargetAction(new ReportRetargetAction(actions[i].id,actions[i].displayName,actions[i].style));
  }
}",0.9871244635193132
65802,"@Override public void dispose(){
  if (toggleBreadcrumbAction != null) {
    toggleBreadcrumbAction.dispose();
  }
  super.dispose();
}","@Override public void dispose(){
  if (toggleBreadcrumbAction != null) {
    toggleBreadcrumbAction.dispose();
  }
  if (getActionBars() instanceof SubActionBars) {
    ((SubActionBars)getActionBars()).removePropertyChangeListener(propertyChangeListener);
  }
  super.dispose();
}",0.5879518072289157
65803,"private void contributeActionsToMenu(MenuManager menu,RegisterAction[] actions){
  for (int i=0; i < actions.length; i++) {
    if (actions[i] != null) {
      menu.add(getAction(actions[i].id));
    }
 else {
      menu.add(new Separator());
    }
  }
}","private void contributeActionsToMenu(MenuManager menu,RegisterAction[] actions){
  for (int i=0; i < actions.length; i++) {
    if (actions[i] != null) {
      IAction action=getAction(actions[i].id);
      menu.add(action);
    }
 else {
      menu.add(new Separator());
    }
  }
}",0.8566108007448789
65804,"protected void initOptions(){
  loadDefaultValues(""String_Node_Str"");
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setChoices(new OptionValue[]{new OptionValue(IPostscriptRenderOption.DUPLEX_SIMPLEX,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE,getMessage(""String_Node_Str""))});
  duplex.setDefaultValue(IPostscriptRenderOption.DUPLEX_SIMPLEX);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  autoPaperSizeSelection.setDisplayName(getMessage(""String_Node_Str""));
  autoPaperSizeSelection.setDataType(IConfigurableOption.DataType.BOOLEAN);
  autoPaperSizeSelection.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  autoPaperSizeSelection.setDefaultValue(true);
  autoPaperSizeSelection.setToolTip(null);
  autoPaperSizeSelection.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fitToPaper=new ConfigurableOption(PostscriptRenderOption.OPTION_FIT_TO_PAPER);
  fitToPaper.setDisplayName(getMessage(""String_Node_Str""));
  fitToPaper.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fitToPaper.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fitToPaper.setDefaultValue(Boolean.FALSE);
  fitToPaper.setToolTip(null);
  fitToPaper.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection,fitToPaper};
  applyDefaultValues();
}","protected void initOptions(){
  loadDefaultValues(""String_Node_Str"");
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setChoices(new OptionValue[]{new OptionValue(IPostscriptRenderOption.DUPLEX_SIMPLEX,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE,getMessage(""String_Node_Str""))});
  duplex.setDefaultValue(IPostscriptRenderOption.DUPLEX_SIMPLEX);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  autoPaperSizeSelection.setDisplayName(getMessage(""String_Node_Str""));
  autoPaperSizeSelection.setDataType(IConfigurableOption.DataType.BOOLEAN);
  autoPaperSizeSelection.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  autoPaperSizeSelection.setDefaultValue(true);
  autoPaperSizeSelection.setToolTip(null);
  autoPaperSizeSelection.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fitToPaper=new ConfigurableOption(PostscriptRenderOption.OPTION_FIT_TO_PAPER);
  fitToPaper.setDisplayName(getMessage(""String_Node_Str""));
  fitToPaper.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fitToPaper.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fitToPaper.setDefaultValue(Boolean.FALSE);
  fitToPaper.setToolTip(null);
  fitToPaper.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection,fitToPaper};
  applyDefaultValues();
}",0.7584882365045613
65805,"private String getPaperTrayCode(int paperTray){
  if (paperTray == TRAYCODE_MANUAL) {
    return ""String_Node_Str"";
  }
  paperTray=paperTray - 257;
  if (paperTray < 0) {
    return null;
  }
  return ""String_Node_Str"" + paperTray + ""String_Node_Str"";
}","private String getPaperTrayCode(String trayCode){
  if (trayCode == null) {
    return null;
  }
  try {
    int paperTray=Integer.parseInt(trayCode);
    if (paperTray == TRAYCODE_MANUAL) {
      return ""String_Node_Str"";
    }
    paperTray=paperTray - 257;
    if (paperTray < 0) {
      return null;
    }
    return ""String_Node_Str"" + paperTray + ""String_Node_Str"";
  }
 catch (  NumberFormatException e) {
    return trayCode;
  }
}",0.6291486291486291
65806,"private void setPaperTray(int paperTray){
  String trayString=getPaperTrayCode(paperTray);
  if (trayString != null) {
    out.println(""String_Node_Str"");
    out.println(trayString);
    out.println(""String_Node_Str"");
  }
}","private void setPaperTray(String paperTray){
  String trayString=getPaperTrayCode(paperTray);
  if (trayString != null) {
    out.println(""String_Node_Str"");
    out.println(trayString);
    out.println(""String_Node_Str"");
  }
}",0.9801324503311258
65807,"public void startRenderer(String author,String description,String paperSize,int paperTray,Object duplex,int copies,boolean collate,String resolution,boolean color,int scale,boolean autoPaperSizeSelection,boolean fitToPaper) throws IOException {
  this.scale=scale;
  this.fitToPaper=fitToPaper;
  this.autoPaperSizeSelection=autoPaperSizeSelection;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  if (pageSize != null) {
    int width=pageSize[0];
    int height=pageSize[1];
    setPaperSize(paperSize,width,height);
  }
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void startRenderer(String author,String description,String paperSize,String paperTray,Object duplex,int copies,boolean collate,String resolution,boolean color,int scale,boolean autoPaperSizeSelection,boolean fitToPaper) throws IOException {
  this.scale=scale;
  this.fitToPaper=fitToPaper;
  this.autoPaperSizeSelection=autoPaperSizeSelection;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  if (pageSize != null) {
    int width=pageSize[0];
    int height=pageSize[1];
    setPaperSize(paperSize,width,height);
  }
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9952254641909816
65808,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  int paperTray=renderOption.getIntOption(PostscriptRenderOption.OPTION_PAPER_TRAY,PostscriptWriter.TRAYCODE_AUTO);
  Object duplex=renderOption.getOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  String resolution=renderOption.getStringOption(IPostscriptRenderOption.OPTION_RESOLUTION);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  boolean autoPaperSizeSelection=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION,false);
  boolean fitToPaper=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_FIT_TO_PAPER,false);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,color,scale,autoPaperSizeSelection,fitToPaper);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  Object duplex=renderOption.getOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  String resolution=renderOption.getStringOption(IPostscriptRenderOption.OPTION_RESOLUTION);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  boolean autoPaperSizeSelection=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION,false);
  boolean fitToPaper=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_FIT_TO_PAPER,false);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,color,scale,autoPaperSizeSelection,fitToPaper);
}",0.9820183486238532
65809,"public String getTooltipText(Object element){
  if (element instanceof Operator) {
    return ((Operator)element).tooltip;
  }
 else   if (element instanceof Expression) {
    return ((Expression)element).tooltip;
  }
 else   if (element instanceof ILocalizableInfo[]) {
    return ((ILocalizableInfo[])element)[1].getToolTip();
  }
 else   if (element instanceof IScriptFunction) {
    return ((IScriptFunction)element).getDescription();
  }
 else   if (element instanceof IScriptFunctionCategory) {
    return ((IScriptFunctionCategory)element).getDescription();
  }
 else   if (element instanceof ComputedColumnHandle) {
    return TOOLTIP_BINDING_PREFIX + ((ComputedColumnHandle)element).getExpression();
  }
 else   if (element instanceof InheritedComputedColumnHandle) {
    return TOOLTIP_BINDING_PREFIX + ((InheritedComputedColumnHandle)element).getHandle().getExpression();
  }
  if (adapterProvider != null) {
    String txt=adapterProvider.getTooltipText(element);
    if (txt != null) {
      return txt;
    }
  }
  return getDisplayText(element);
}","public String getTooltipText(Object element){
  if (element instanceof Operator) {
    return ((Operator)element).tooltip;
  }
 else   if (element instanceof Expression) {
    return ((Expression)element).tooltip;
  }
 else   if (element instanceof ILocalizableInfo[]) {
    return ((ILocalizableInfo[])element)[1].getToolTip();
  }
 else   if (element instanceof IScriptFunction) {
    return ((IScriptFunction)element).getDescription();
  }
 else   if (element instanceof IScriptFunctionCategory) {
    return ((IScriptFunctionCategory)element).getDescription();
  }
 else   if (element instanceof ComputedColumnHandle) {
    return TOOLTIP_BINDING_PREFIX + DataUtil.getAggregationExpression((ComputedColumnHandle)element);
  }
 else   if (element instanceof InheritedComputedColumnHandle) {
    return TOOLTIP_BINDING_PREFIX + ((InheritedComputedColumnHandle)element).getHandle().getExpression();
  }
  if (adapterProvider != null) {
    String txt=adapterProvider.getTooltipText(element);
    if (txt != null) {
      return txt;
    }
  }
  return getDisplayText(element);
}",0.9631013545072395
65810,"private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  String cal=calculationType.getText();
  isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),isStatic);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
  }
 else {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
      String name=function.getName();
      int itemIndex=getItemIndex(names,name);
      if (itemIndex >= 0) {
        calculationType.select(itemIndex);
      }
 else {
        calculationType.select(0);
      }
    }
    handleCalculationSelectEvent();
    ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      String argValue=calculationParamsValueMap.get(argName);
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
          if (control instanceof Text && argValue != null) {
            ((Text)control).setText(argValue);
          }
        }
      }
    }
  }
}","private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  String cal=calculationType.getText();
  isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),isStatic);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
  }
 else {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
      if (function == null) {
        return;
      }
      String name=function.getName();
      int itemIndex=getItemIndex(names,name);
      if (itemIndex >= 0) {
        calculationType.select(itemIndex);
      }
 else {
        calculationType.select(0);
      }
    }
    handleCalculationSelectEvent();
    ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      String argValue=calculationParamsValueMap.get(argName);
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
          if (control instanceof Text && argValue != null) {
            ((Text)control).setText(argValue);
          }
        }
      }
    }
  }
}",0.98991784914115
65811,"public void validate(){
  if (txtName != null && (txtName.getText() == null || txtName.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else   if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else {
    if (this.binding == null) {
      for (Iterator iterator=this.bindingHolder.getColumnBindings().iterator(); iterator.hasNext(); ) {
        ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
        if (computedColumn.getName().equals(txtName.getText())) {
          dialog.setCanFinish(false);
          this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{txtName.getText()}));
          this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
          return;
        }
      }
    }
    if (isAggregate()) {
      IAggrFunction function=getFunctionByDisplayName(cmbFunction.getText());
      IParameterDefn[] params=function.getParameterDefn();
      if (params.length > 0) {
        for (        final IParameterDefn param : params) {
          if (param.isDataField()) {
            Combo cmbDataField=(Combo)paramsMap.get(param.getName());
            String expression=cmbDataField.getText();
            DataRequestSession session=null;
            try {
              session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
              if (session.getCubeQueryUtil().getReferencedMeasureName(expression) != null && function.getType() == IAggrFunction.RUNNING_AGGR) {
                dialog.setCanFinish(false);
                this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{function.getName()}));
                this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
                return;
              }
              dialog.setCanFinish(true);
            }
 catch (            Exception e) {
            }
 finally {
              if (session != null) {
                session.shutdown();
              }
            }
          }
        }
      }
    }
    dialogCanFinish();
    this.messageLine.setText(""String_Node_Str"");
    this.messageLine.setImage(null);
    if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
      dialog.setCanFinish(false);
      return;
    }
    if (isAggregate()) {
      try {
        IAggrFunction aggregation=DataUtil.getAggregationManager().getAggregation(getFunctionByDisplayName(cmbFunction.getText()).getName());
        if (aggregation.getParameterDefn().length > 0) {
          IParameterDefn[] parameters=aggregation.getParameterDefn();
          for (          IParameterDefn param : parameters) {
            if (!param.isOptional()) {
              String paramValue=getControlValue(paramsMap.get(param.getName()));
              if (paramValue == null || paramValue.trim().equals(""String_Node_Str"")) {
                dialog.setCanFinish(false);
                return;
              }
            }
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (isTimePeriod()) {
      ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
      List<IArgumentInfo> infos=timeFunction.getArguments();
      for (int i=0; i < infos.size(); i++) {
        String paramValue=getControlValue(calculationParamsMap.get(infos.get(i).getName()));
        if (paramValue == null || paramValue.trim().equals(""String_Node_Str"") && !infos.get(i).isOptional()) {
          dialog.setCanFinish(false);
          return;
        }
      }
      String dimensionName=getTimeDimsionName();
      if (!isUseDimension(dimensionName) && recentButton.getSelection()) {
        this.messageLine.setText(Messages.getString(""String_Node_Str""));
        this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
        dialog.setCanFinish(false);
        return;
      }
      if (dateSelectionButton.getSelection() && (dateText.getText() == null || dateText.getText().trim().equals(""String_Node_Str""))) {
        dialog.setCanFinish(false);
        return;
      }
    }
    dialogCanFinish();
  }
  updateRemoveBtnState();
}","public void validate(){
  if (txtName != null && (txtName.getText() == null || txtName.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else   if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else {
    if (this.binding == null) {
      for (Iterator iterator=this.bindingHolder.getColumnBindings().iterator(); iterator.hasNext(); ) {
        ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
        if (computedColumn.getName().equals(txtName.getText())) {
          dialog.setCanFinish(false);
          this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{txtName.getText()}));
          this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
          return;
        }
      }
    }
    if (isAggregate()) {
      IAggrFunction function=getFunctionByDisplayName(cmbFunction.getText());
      IParameterDefn[] params=function.getParameterDefn();
      if (params.length > 0) {
        for (        final IParameterDefn param : params) {
          if (param.isDataField()) {
            Combo cmbDataField=(Combo)paramsMap.get(param.getName());
            String expression=cmbDataField.getText();
            DataRequestSession session=null;
            try {
              session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
              if (session.getCubeQueryUtil().getReferencedMeasureName(expression) != null && function.getType() == IAggrFunction.RUNNING_AGGR) {
                dialog.setCanFinish(false);
                this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{function.getName()}));
                this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
                return;
              }
              dialog.setCanFinish(true);
            }
 catch (            Exception e) {
            }
 finally {
              if (session != null) {
                session.shutdown();
              }
            }
          }
        }
      }
    }
    dialogCanFinish();
    this.messageLine.setText(""String_Node_Str"");
    this.messageLine.setImage(null);
    if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
      dialog.setCanFinish(false);
      return;
    }
    if (isAggregate()) {
      try {
        IAggrFunction aggregation=DataUtil.getAggregationManager().getAggregation(getFunctionByDisplayName(cmbFunction.getText()).getName());
        if (aggregation.getParameterDefn().length > 0) {
          IParameterDefn[] parameters=aggregation.getParameterDefn();
          for (          IParameterDefn param : parameters) {
            if (!param.isOptional()) {
              String paramValue=getControlValue(paramsMap.get(param.getName()));
              if (paramValue == null || paramValue.trim().equals(""String_Node_Str"")) {
                dialog.setCanFinish(false);
                return;
              }
            }
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (isTimePeriod()) {
      ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
      if (timeFunction != null) {
        List<IArgumentInfo> infos=timeFunction.getArguments();
        for (int i=0; i < infos.size(); i++) {
          String paramValue=getControlValue(calculationParamsMap.get(infos.get(i).getName()));
          if (paramValue == null || paramValue.trim().equals(""String_Node_Str"") && !infos.get(i).isOptional()) {
            dialog.setCanFinish(false);
            return;
          }
        }
        String dimensionName=getTimeDimsionName();
        if (!isUseDimension(dimensionName) && recentButton.getSelection()) {
          this.messageLine.setText(Messages.getString(""String_Node_Str""));
          this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
          dialog.setCanFinish(false);
          return;
        }
        if (dateSelectionButton.getSelection() && (dateText.getText() == null || dateText.getText().trim().equals(""String_Node_Str""))) {
          dialog.setCanFinish(false);
          return;
        }
      }
    }
    dialogCanFinish();
  }
  updateRemoveBtnState();
}",0.9858156028368794
65812,"/** 
 * return all emitter info through BIRT engine emitter extension. If there are several emitters for a same format, then the default emitter specified by EngineConfig is used, if no default emitter is specified in EngineConfig, then the first emitter is used.
 * @return all emitter info through BIRT engine emitter extension
 */
public EmitterInfo[] getEmitterInfo(){
  if (emitterInfos == null) {
    EngineConfig config=engine.getConfig();
    Map<String,EmitterInfo> emitters=new HashMap<String,EmitterInfo>();
    EmitterInfo[] tempEmitterInfo=extensionMgr.getEmitterInfo();
    for (    EmitterInfo emitterInfo : tempEmitterInfo) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      if (!emitters.containsKey(format) || id.equals(config.getDefaultEmitter(format))) {
        emitters.put(format,emitterInfo);
      }
    }
    emitterInfos=new EmitterInfo[emitters.size()];
    emitters.values().toArray(emitterInfos);
    for (    EmitterInfo emitterInfo : emitterInfos) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      String defaultEmitter=config.getDefaultEmitter(format);
      if (defaultEmitter != null && !defaultEmitter.equals(id)) {
        logger.log(Level.WARNING,""String_Node_Str"" + defaultEmitter + ""String_Node_Str""+ id+ ""String_Node_Str""+ format+ ""String_Node_Str"");
      }
    }
  }
  return emitterInfos;
}","/** 
 * return all emitter info through BIRT engine emitter extension. If there are several emitters for a same format, then the default emitter specified by EngineConfig is used, if no default emitter is specified in EngineConfig, then the first emitter is used.
 * @return all emitter info through BIRT engine emitter extension
 */
public synchronized EmitterInfo[] getEmitterInfo(){
  if (emitterInfos == null) {
    EngineConfig config=engine.getConfig();
    Map<String,EmitterInfo> emitters=new HashMap<String,EmitterInfo>();
    EmitterInfo[] tempEmitterInfo=extensionMgr.getEmitterInfo();
    for (    EmitterInfo emitterInfo : tempEmitterInfo) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      if (!emitters.containsKey(format) || id.equals(config.getDefaultEmitter(format))) {
        emitters.put(format,emitterInfo);
      }
    }
    emitterInfos=new EmitterInfo[emitters.size()];
    emitters.values().toArray(emitterInfos);
    for (    EmitterInfo emitterInfo : emitterInfos) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      String defaultEmitter=config.getDefaultEmitter(format);
      if (defaultEmitter != null && !defaultEmitter.equals(id)) {
        logger.log(Level.WARNING,""String_Node_Str"" + defaultEmitter + ""String_Node_Str""+ id+ ""String_Node_Str""+ format+ ""String_Node_Str"");
      }
    }
  }
  return emitterInfos;
}",0.995420922860162
65813,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  if (isTransposed()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final StockSeries ss=(StockSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final double dSeriesThickness=srh.getSeriesThickness();
  final DataPointHints[] dpha=srh.getDataPoints();
  final LineAttributes lia=ss.getLineAttributes();
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  double dX=0, dY=0, dWidth=0, dHeight=0, dSpacing=0;
  double dLow, dHigh, dOpen, dClose;
  Location lo, loStart=null, loEnd=null, loUpper=goFactory.createLocation(0,0), loLower=goFactory.createLocation(0,0);
  Location[] loaFrontFace=null;
  LineRenderEvent lre;
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  int iThisSeriesIndex=-1;
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
  renderClipping(ipr,getPlotBounds());
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  ssl=srh.getStackedSeriesLookup();
  sg=ssl.getStackGroup(ss);
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  if (iSharedUnitCount == 1) {
    iSharedUnitIndex=0;
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  final AutoScale scale=getInternalOrthogonalAxis().getScale();
  for (int i=0; i < dpha.length; i++) {
    StockEntry se=(StockEntry)dpha[i].getOrthogonalValue();
    if (!isValidEntry(se)) {
      continue;
    }
    correctEntry(se);
    if (checkEntryInRange(se,scale.getMinimum(),scale.getMaximum()) > 0) {
      dpha[i].markOutside();
    }
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    }
    updateTranslucency(fPaletteEntry,ss);
    lo=dpha[i].getLocation();
    dX=lo.getX();
    dY=lo.getY();
    try {
      dLow=srh.getLocationOnOrthogonal(new Double(se.getLow()));
      dHigh=srh.getLocationOnOrthogonal(new Double(se.getHigh()));
      dOpen=srh.getLocationOnOrthogonal(new Double(se.getOpen()));
      dClose=srh.getLocationOnOrthogonal(new Double(se.getClose()));
    }
 catch (    Exception ex) {
      logger.log(ex);
      continue;
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    dSpacing=(dpha[i].getSize() * dUnitSpacing) / 200;
    if (loStart == null) {
      loStart=goFactory.createLocation(0,0);
      loEnd=goFactory.createLocation(0,0);
      loaFrontFace=new Location[4];
      for (int j=0; j < 4; j++) {
        loaFrontFace[j]=goFactory.createLocation(0,0);
      }
    }
    dWidth=dpha[i].getSize();
    dWidth-=2 * dSpacing;
    dWidth/=iSharedUnitCount;
    if (cwa.getBaseAxes()[0].isCategoryAxis()) {
      dX+=dSpacing + dWidth / 2 + iSharedUnitIndex * dWidth;
    }
    lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),LineRenderEvent.class);
    if (ss.isShowAsBarStick()) {
      int stickLength=ss.getStickLength();
      Location loStart2=goFactory.createLocation(0,0), loEnd2=goFactory.createLocation(0,0);
      loStart.set(dX - stickLength,dOpen);
      loEnd.set(dX + stickLength,dClose);
      loStart2.set(dX,dOpen);
      loEnd2.set(dX,dClose);
      loUpper.set(dX,dHigh > dLow ? dHigh : dLow);
      loLower.set(dX,dHigh < dLow ? dHigh : dLow);
      lre.setLineAttributes(lia);
      lre.setStart(loUpper);
      lre.setEnd(loLower);
      ipr.drawLine(lre);
      lre.setStart(loStart);
      lre.setEnd(loStart2);
      ipr.drawLine(lre);
      lre.setStart(loEnd);
      lre.setEnd(loEnd2);
      ipr.drawLine(lre);
    }
 else {
{
        loStart.set(dX,dLow);
        loEnd.set(dX,dHigh);
        loaFrontFace[0].set(dX - dWidth / 2,dOpen);
        loaFrontFace[1].set(dX - dWidth / 2,dClose);
        loaFrontFace[2].set(dX + dWidth / 2,dClose);
        loaFrontFace[3].set(dX + dWidth / 2,dOpen);
        loUpper.set(dX,dOpen > dClose ? dOpen : dClose);
        loLower.set(dX,dOpen < dClose ? dOpen : dClose);
      }
      lre.setLineAttributes(lia);
      lre.setStart(loStart);
      lre.setEnd(loUpper);
      ipr.drawLine(lre);
      lre.setStart(loLower);
      lre.setEnd(loEnd);
      ipr.drawLine(lre);
      renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),loaFrontFace,convertFill(fPaletteEntry,se.getClose() > se.getOpen()),lia,cwa.getDimension(),dSeriesThickness,true);
    }
    if (cwa.isTransposed()) {
      faX[i]=((loUpper.getX() + loLower.getX()) / 2);
      faY[i]=loUpper.getY();
    }
 else {
      faX[i]=loLower.getX();
      faY[i]=((loUpper.getY() + loLower.getY()) / 2);
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=ss.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]);
        final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(ss.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),PolygonRenderEvent.class);
        pre.setPoints(loaFrontFace);
        iev.setHotSpot(pre);
        ipr.enableInteraction(iev);
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    renderDataPointLabel(srh.getLabelAttributes(getSeries()),dpha[i],srh.getLabelPosition(getSeries()),loaFrontFace,p,sh,dX,dY,dWidth,dHeight,dHigh,dLow,dOpen,dClose);
  }
  if (getSeries().getCurveFitting() != null) {
    Location[] larray=new Location[faX.length];
    for (int i=0; i < larray.length; i++) {
      larray[i]=goFactory.createLocation(faX[i],faY[i]);
    }
    larray=filterNull(larray);
    renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
  }
  restoreClipping(ipr);
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  if (isTransposed()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final StockSeries ss=(StockSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final double dSeriesThickness=srh.getSeriesThickness();
  final DataPointHints[] dpha=srh.getDataPoints();
  final LineAttributes lia=ss.getLineAttributes();
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  double dX=0, dY=0, dWidth=0, dHeight=0, dSpacing=0;
  double dLow, dHigh, dOpen, dClose;
  Location lo, loStart=null, loEnd=null, loUpper=goFactory.createLocation(0,0), loLower=goFactory.createLocation(0,0);
  Location[] loaFrontFace=null;
  LineRenderEvent lre;
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  int iThisSeriesIndex=-1;
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  }
  renderClipping(ipr,getPlotBounds());
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  ssl=srh.getStackedSeriesLookup();
  sg=ssl.getStackGroup(ss);
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  if (iSharedUnitCount == 1) {
    iSharedUnitIndex=0;
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  final AutoScale scale=getInternalOrthogonalAxis().getScale();
  for (int i=0; i < dpha.length; i++) {
    StockEntry se=(StockEntry)dpha[i].getOrthogonalValue();
    if (!isValidEntry(se)) {
      continue;
    }
    correctEntry(se);
    if (checkEntryInRange(se,scale.getMinimum(),scale.getMaximum()) > 0) {
      dpha[i].markOutside();
    }
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    }
    updateTranslucency(fPaletteEntry,ss);
    lo=dpha[i].getLocation();
    dX=lo.getX();
    dY=lo.getY();
    try {
      dLow=srh.getLocationOnOrthogonal(new Double(se.getLow()));
      dHigh=srh.getLocationOnOrthogonal(new Double(se.getHigh()));
      dOpen=srh.getLocationOnOrthogonal(new Double(se.getOpen()));
      dClose=srh.getLocationOnOrthogonal(new Double(se.getClose()));
    }
 catch (    Exception ex) {
      logger.log(ex);
      continue;
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    dSpacing=(dpha[i].getSize() * dUnitSpacing) / 200;
    if (loStart == null) {
      loStart=goFactory.createLocation(0,0);
      loEnd=goFactory.createLocation(0,0);
      loaFrontFace=new Location[4];
      for (int j=0; j < 4; j++) {
        loaFrontFace[j]=goFactory.createLocation(0,0);
      }
    }
    dWidth=dpha[i].getSize();
    dWidth-=2 * dSpacing;
    dWidth/=iSharedUnitCount;
    if (cwa.getBaseAxes()[0].isCategoryAxis()) {
      dX+=dSpacing + dWidth / 2 + iSharedUnitIndex * dWidth;
    }
    lre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),LineRenderEvent.class);
    if (ss.isShowAsBarStick()) {
      int stickLength=ss.getStickLength();
      int hotspotHalfWidth=Math.min(stickLength,MIN_HOTSPOT_WIDTH / 2);
      double hotspotHigh=Math.max(dHigh,dLow);
      double hotspotLow=Math.min(dHigh,dLow);
      loaFrontFace[0].set(dX - hotspotHalfWidth,hotspotHigh);
      loaFrontFace[1].set(dX - hotspotHalfWidth,hotspotLow);
      loaFrontFace[2].set(dX + hotspotHalfWidth,hotspotLow);
      loaFrontFace[3].set(dX + hotspotHalfWidth,hotspotHigh);
      Location loStart2=goFactory.createLocation(0,0), loEnd2=goFactory.createLocation(0,0);
      loStart.set(dX - stickLength,dOpen);
      loEnd.set(dX + stickLength,dClose);
      loStart2.set(dX,dOpen);
      loEnd2.set(dX,dClose);
      loUpper.set(dX,dHigh > dLow ? dHigh : dLow);
      loLower.set(dX,dHigh < dLow ? dHigh : dLow);
      lre.setLineAttributes(lia);
      lre.setStart(loUpper);
      lre.setEnd(loLower);
      ipr.drawLine(lre);
      lre.setStart(loStart);
      lre.setEnd(loStart2);
      ipr.drawLine(lre);
      lre.setStart(loEnd);
      lre.setEnd(loEnd2);
      ipr.drawLine(lre);
    }
 else {
{
        loStart.set(dX,dLow);
        loEnd.set(dX,dHigh);
        loaFrontFace[0].set(dX - dWidth / 2,dOpen);
        loaFrontFace[1].set(dX - dWidth / 2,dClose);
        loaFrontFace[2].set(dX + dWidth / 2,dClose);
        loaFrontFace[3].set(dX + dWidth / 2,dOpen);
        loUpper.set(dX,dOpen > dClose ? dOpen : dClose);
        loLower.set(dX,dOpen < dClose ? dOpen : dClose);
      }
      lre.setLineAttributes(lia);
      lre.setStart(loStart);
      lre.setEnd(loUpper);
      ipr.drawLine(lre);
      lre.setStart(loLower);
      lre.setEnd(loEnd);
      ipr.drawLine(lre);
      renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),loaFrontFace,convertFill(fPaletteEntry,se.getClose() > se.getOpen()),lia,cwa.getDimension(),dSeriesThickness,true);
    }
    if (cwa.isTransposed()) {
      faX[i]=((loUpper.getX() + loLower.getX()) / 2);
      faY[i]=loUpper.getY();
    }
 else {
      faX[i]=loLower.getX();
      faY[i]=((loUpper.getY() + loLower.getY()) / 2);
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=ss.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]);
        final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(ss.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),PolygonRenderEvent.class);
        pre.setPoints(loaFrontFace);
        iev.setHotSpot(pre);
        ipr.enableInteraction(iev);
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    renderDataPointLabel(srh.getLabelAttributes(getSeries()),dpha[i],srh.getLabelPosition(getSeries()),loaFrontFace,p,sh,dX,dY,dWidth,dHeight,dHigh,dLow,dOpen,dClose);
  }
  if (getSeries().getCurveFitting() != null) {
    Location[] larray=new Location[faX.length];
    for (int i=0; i < larray.length; i++) {
      larray[i]=goFactory.createLocation(faX[i],faY[i]);
    }
    larray=filterNull(larray);
    renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
  }
  restoreClipping(ipr);
}",0.9765745226560274
65814,"public ResultSet getAlltables(String schemaPattern,String namePattern,String[] types){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    SQLException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      return null;
    }
catch (    OdaException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      return null;
    }
  }
}","public ResultSet getAlltables(String schemaPattern,String namePattern,String[] types){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getTables(getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getTables(getCatalog(),schemaPattern,namePattern,types);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getTables(getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    SQLException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      return null;
    }
catch (    OdaException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      return null;
    }
  }
}",0.9838788470933072
65815,"public ResultSet getTableColumns(String schemaPattern,String tableNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    SQLException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
catch (    OdaException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
  }
}","public ResultSet getTableColumns(String schemaPattern,String tableNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getColumns(getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getColumns(getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getColumns(getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    SQLException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
catch (    OdaException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
  }
}",0.9849383842994066
65816,"public ResultSet getProcedures(String schemaPattern,String procedureNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getProcedures(connection.getCatalog(),schemaPattern,procedureNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getProcedures(connection.getCatalog(),schemaPattern,procedureNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getProcedures(connection.getCatalog(),schemaPattern,procedureNamePattern);
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
}","public ResultSet getProcedures(String schemaPattern,String procedureNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getProcedures(getCatalog(),schemaPattern,procedureNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getProcedures(getCatalog(),schemaPattern,procedureNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getProcedures(getCatalog(),schemaPattern,procedureNamePattern);
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
}",0.982210242587601
65817,"public ResultSet getProcedureColumns(String schemaPattern,String procedureNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    SQLException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
catch (    OdaException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
  }
}","public ResultSet getProcedureColumns(String schemaPattern,String procedureNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getProcedureColumns(getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
catch (    Exception ex) {
      return null;
    }
  }
  try {
    return connection.getMetaData().getProcedureColumns(getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getProcedureColumns(getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    SQLException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
catch (    OdaException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
  }
}",0.9855579868708972
65818,"public boolean reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null || !getCurrentPageInstance().getId().equals(XMLSourcePage_ID)) {
    return false;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage || outlinePage.getCurrentPage() == null) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  if (outlinePage.getSite() != null) {
    outlinePage.getSite().getActionBars().updateActionBars();
  }
  return true;
}","public boolean reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null || !getCurrentPageInstance().getId().equals(XMLSourcePage_ID)) {
    return false;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage || outlinePage.getCurrentPage() == null || outlinePage.getCurrentPage() instanceof EmptyPage) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  if (outlinePage.getSite() != null) {
    outlinePage.getSite().getActionBars().updateActionBars();
  }
  return true;
}",0.9625441696113074
65819,"@Override public Object getAdapter(Object adaptableObject,Class adapterType){
  if (adaptableObject instanceof ExtendedItemHandle && ((ExtendedItemHandle)adaptableObject).getExtensionName().equals(""String_Node_Str"") && adapterType == IMenuListener.class) {
    final ExtendedItemHandle handle=(ExtendedItemHandle)adaptableObject;
    return new ISchematicMenuListener(){
      public void menuAboutToShow(      IMenuManager manager){
        CrosstabReportItemHandle crosstab=null;
        try {
          crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)handle).getReportItem();
        }
 catch (        ExtendedElementException e) {
          return;
        }
        manager.appendToGroup(GEFActionConstants.GROUP_VIEW,new AddComputedMeasureAction(crosstab));
        manager.appendToGroup(GEFActionConstants.GROUP_VIEW,new AddRelativeTimePeriodAction(handle));
      }
      public void setActionRegistry(      ActionRegistry actionRegistry){
      }
    }
;
  }
  return null;
}","public Object getAdapter(Object adaptableObject,Class adapterType){
  if (adaptableObject instanceof ExtendedItemHandle && ((ExtendedItemHandle)adaptableObject).getExtensionName().equals(""String_Node_Str"") && adapterType == IMenuListener.class) {
    final ExtendedItemHandle handle=(ExtendedItemHandle)adaptableObject;
    return new ISchematicMenuListener(){
      public void menuAboutToShow(      IMenuManager manager){
        CrosstabReportItemHandle crosstab=null;
        try {
          crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)handle).getReportItem();
        }
 catch (        ExtendedElementException e) {
          return;
        }
        manager.appendToGroup(GEFActionConstants.GROUP_VIEW,new AddComputedMeasureAction(crosstab));
        manager.appendToGroup(GEFActionConstants.GROUP_VIEW,new AddRelativeTimePeriodAction(handle));
      }
      public void setActionRegistry(      ActionRegistry actionRegistry){
      }
    }
;
  }
  return null;
}",0.994934143870314
65820,"@Override public Class[] getAdapterList(){
  return null;
}","public Class[] getAdapterList(){
  return null;
}",0.9074074074074074
65821,"private List<String> getMesures(){
  List<String> measures=new ArrayList<String>();
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    measures.add(""String_Node_Str"");
    for (int i=0; i < xtabHandle.getMeasureCount(); i++) {
      MeasureViewHandle mv=xtabHandle.getMeasure(i);
      if (mv instanceof ComputedMeasureViewHandle) {
        continue;
      }
      measures.add(DEUtil.getExpression(mv.getCubeMeasure()));
    }
  }
 catch (  ExtendedElementException e) {
  }
  return measures;
}","private List<String> getMesures(){
  List<String> measures=new ArrayList<String>();
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    measures.add(""String_Node_Str"");
    CubeHandle cubeHandle=xtabHandle.getCube();
    List children=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < children.size(); i++) {
      MeasureGroupHandle group=(MeasureGroupHandle)children.get(i);
      List measreHandles=group.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measreHandles.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measreHandles.get(j);
        String str=DEUtil.getExpression(measure);
        if (!measures.contains(str)) {
          measures.add(str);
        }
      }
    }
  }
 catch (  ExtendedElementException e) {
  }
  return measures;
}",0.4952638700947226
65822,"/** 
 * @param size
 */
private void createReadersAndWriters(int size){
  fieldWriters=new ObjectWriter[size];
  fieldReaders=new ObjectReader[size];
  for (int i=0; i < size; i++) {
    fieldWriters[i]=new ObjectWriter();
    fieldReaders[i]=new ObjectReader();
  }
}","/** 
 * @param size
 */
private void createReadersAndWriters(int size){
  if (fieldWriters == null && fieldReaders == null) {
    fieldWriters=new ObjectWriter[size];
    fieldReaders=new ObjectReader[size];
    for (int i=0; i < size; i++) {
      fieldWriters[i]=new ObjectWriter();
      fieldReaders[i]=new ObjectReader();
    }
  }
 else {
    int i=fieldWriters.length;
    fieldReaders=copyOf(fieldReaders,size);
    fieldWriters=copyOf(fieldWriters,size);
    for (; i < fieldReaders.length; i++) {
      fieldWriters[i]=new ObjectWriter();
      fieldReaders[i]=new ObjectReader();
    }
  }
}",0.6160919540229886
65823,"/** 
 * Checks if the given editPart child is in a Table.
 * @param child
 * @return
 */
private static boolean isInTable(EditPart child){
  if (child instanceof TableCellEditPart) {
    return false;
  }
  EditPart part=child.getParent();
  while (part != null) {
    if (part instanceof TableCellEditPart) {
      return true;
    }
    part=part.getParent();
  }
  return false;
}","/** 
 * Checks if the given editPart child is in a Table.
 * @param child
 * @return
 */
private static boolean isInTable(EditPart child){
  if (child instanceof AbstractCellEditPart) {
    return false;
  }
  EditPart part=child.getParent();
  while (part != null) {
    if (part instanceof AbstractCellEditPart) {
      return true;
    }
    part=part.getParent();
  }
  return false;
}",0.966321243523316
65824,"/** 
 * @param size
 */
private void createReadersAndWriters(int size){
  fieldWriters=new ObjectWriter[size];
  fieldReaders=new ObjectReader[size];
  for (int i=0; i < size; i++) {
    fieldWriters[i]=new ObjectWriter();
    fieldReaders[i]=new ObjectReader();
  }
}","/** 
 * @param size
 */
private void createReadersAndWriters(int size){
  if (fieldWriters == null && fieldReaders == null) {
    fieldWriters=new ObjectWriter[size];
    fieldReaders=new ObjectReader[size];
    for (int i=0; i < size; i++) {
      fieldWriters[i]=new ObjectWriter();
      fieldReaders[i]=new ObjectReader();
    }
  }
 else {
    int i=fieldWriters.length;
    fieldReaders=copyOf(fieldReaders,size);
    fieldWriters=copyOf(fieldWriters,size);
    for (; i < fieldReaders.length; i++) {
      fieldWriters[i]=new ObjectWriter();
      fieldReaders[i]=new ObjectReader();
    }
  }
}",0.6160919540229886
65825,"public void refreshFigure(){
  CellBorder cborder=new CellBorder();
  if (getFigure().getBorder() instanceof CellBorder) {
    cborder.setBorderInsets(((CellBorder)getFigure().getBorder()).getBorderInsets());
  }
  refreshBorder(getCellAdapter().getHandle(),cborder);
  Insets ist=getCellAdapter().getPadding(getFigure().getInsets());
  ((CellBorder)(getFigure().getBorder())).setPaddingInsets(ist);
  StyleHandle style=((CellHandle)getModel()).getPrivateStyle();
  String hAlign=style.getTextAlign();
  String vAlign=style.getVerticalAlign();
  ReportFlowLayout rflayout=(ReportFlowLayout)getFigure().getLayoutManager();
  if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(hAlign)) {
    rflayout.setMajorAlignment(ReportFlowLayout.ALIGN_CENTER);
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(hAlign) && !this.getFigure().isMirrored()) {
    rflayout.setMajorAlignment(ReportFlowLayout.ALIGN_RIGHTBOTTOM);
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_LEFT.equals(hAlign) && this.getFigure().isMirrored()) {
    rflayout.setMajorAlignment(ReportFlowLayout.ALIGN_RIGHTBOTTOM);
  }
 else {
    rflayout.setMajorAlignment(ReportFlowLayout.ALIGN_LEFTTOP);
  }
  if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(vAlign)) {
    rflayout.setMinorAlignment(ReportFlowLayout.ALIGN_CENTER);
  }
 else   if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(vAlign)) {
    rflayout.setMinorAlignment(ReportFlowLayout.ALIGN_RIGHTBOTTOM);
  }
 else {
    rflayout.setMinorAlignment(ReportFlowLayout.ALIGN_LEFTTOP);
  }
  ((CellFigure)getFigure()).setDirectionRTL(BidiUIUtils.INSTANCE.isDirectionRTL(getModel()));
  rflayout.layout(getFigure());
  updateBlankString();
  refreshBackground((DesignElementHandle)getModel());
}","public void refreshFigure(){
  CellBorder cborder=new CellBorder();
  if (getFigure().getBorder() instanceof CellBorder) {
    cborder.setBorderInsets(((CellBorder)getFigure().getBorder()).getBorderInsets());
  }
  refreshBorder(getCellAdapter().getHandle(),cborder);
  Insets ist=getCellAdapter().getPadding(getFigure().getInsets());
  ((CellBorder)(getFigure().getBorder())).setPaddingInsets(ist);
  setTextAliment(((CellHandle)getModel()).getPrivateStyle());
  ((CellFigure)getFigure()).setDirectionRTL(BidiUIUtils.INSTANCE.isDirectionRTL(getModel()));
  updateBlankString();
  refreshBackground((DesignElementHandle)getModel());
}",0.4890387858347386
65826,"public void refreshFigure(){
  CellBorder cborder=new CellBorder();
  if (getFigure().getBorder() instanceof CellBorder) {
    cborder.setBorderInsets(((CellBorder)getFigure().getBorder()).getBorderInsets());
  }
  refreshBorder(getCrosstabCellAdapter().getDesignElementHandle(),cborder);
  refreshBackground(getCrosstabCellAdapter().getDesignElementHandle());
  ((CellFigure)getFigure()).setDirectionRTL(BidiUIUtils.INSTANCE.isDirectionRTL(getModel()));
}","public void refreshFigure(){
  CellBorder cborder=new CellBorder();
  if (getFigure().getBorder() instanceof CellBorder) {
    cborder.setBorderInsets(((CellBorder)getFigure().getBorder()).getBorderInsets());
  }
  refreshBorder(getCrosstabCellAdapter().getDesignElementHandle(),cborder);
  refreshBackground(getCrosstabCellAdapter().getDesignElementHandle());
  ((CellFigure)getFigure()).setDirectionRTL(BidiUIUtils.INSTANCE.isDirectionRTL(getModel()));
  if (getCrosstabCellAdapter().getDesignElementHandle() != null) {
    setTextAliment(getCrosstabCellAdapter().getDesignElementHandle().getPrivateStyle());
  }
}",0.8507462686567164
65827,"/** 
 * whether to save empty parameter
 * @param parameters
 * @return
 */
private boolean doSaveEmptyParameter(PropertyHandle parameters){
  if (isJointOrDerivedDataSetHandle) {
    return true;
  }
  if (parameters == null) {
    parameters=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  }
  if (parameters != null) {
    Iterator iter=parameters.iterator();
    String paramName=null;
    if (iter != null) {
      while (iter.hasNext()) {
        DataSetParameterHandle parameter=(DataSetParameterHandle)iter.next();
        if (isOdaDataSetHandle)         paramName=((OdaDataSetParameterHandle)parameter).getParamName();
        if (parameter.isInput() && paramName == null && (parameter.getDefaultValue() == null || parameter.getDefaultValue().trim().length() == 0)) {
          setNoneValuedParameterName(parameter.getName());
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * whether to save empty parameter
 * @param parameters
 * @return
 */
private boolean doSaveEmptyParameter(PropertyHandle parameters){
  if (isJointOrDerivedDataSetHandle) {
    return true;
  }
  if (parameters == null) {
    parameters=((DataSetHandle)getContainer().getModel()).getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
  }
  if (parameters != null) {
    Iterator iter=parameters.iterator();
    String paramName=null;
    if (iter != null) {
      while (iter.hasNext()) {
        DataSetParameterHandle parameter=(DataSetParameterHandle)iter.next();
        if (isOdaDataSetHandle)         paramName=((OdaDataSetParameterHandle)parameter).getParamName();
        if (parameter.isInput() && paramName == null && (!parameter.isOutput()) && (parameter.getDefaultValue() == null || parameter.getDefaultValue().trim().length() == 0)) {
          setNoneValuedParameterName(parameter.getName());
          return false;
        }
      }
    }
  }
  return true;
}",0.9860031104199068
65828,"public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.WARNING,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}","public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}",0.9953007518796992
65829,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}",0.9964334705075446
65830,"public synchronized Driver getDriverInstance(Class driver,boolean refreshDriver) throws OdaException {
  String driverName=driver.getName();
  Driver drv=cachedJdbcDrivers.get(driverName);
  if (refreshDriver || drv == null) {
    Driver instance=null;
    try {
      instance=new WrappedDriver((Driver)driver.newInstance(),driverName);
    }
 catch (    Exception e) {
      throw new OdaException(e);
    }
    cachedJdbcDrivers.put(driverName,instance);
    return instance;
  }
 else {
    return drv;
  }
}","private Driver getDriverInstance(String driverName){
  return cachedJdbcDrivers.get(driverName);
}",0.2950819672131147
65831,"/** 
 * Searches extension registry for connection factory defined for driverClass. Returns an  instance of the factory if there is a connection factory for the driver class. Returns null otherwise.
 */
public synchronized IConnectionFactory getDriverConnectionFactory(String driverClass) throws OdaException {
}","/** 
 * Searches extension registry for connection factory defined for driverClass. Returns an  instance of the factory if there is a connection factory for the driver class. Returns null otherwise.
 */
public IConnectionFactory getDriverConnectionFactory(String driverClass) throws OdaException {
}",0.9787234042553192
65832,"/** 
 * For the given odi resultset, calcaulate the value of aggregate from aggregateTable
 * @param aggrTable
 * @param odiResult
 * @throws DataException 
 */
public ProgressiveAggregationHelper(IAggrDefnManager manager,String tempDir,Scriptable currentScope,ScriptContext sc) throws DataException {
  this.manager=manager;
  this.currentRoundAggrValue=new List[0];
  this.accumulators=new ArrayList<Accumulator>();
  this.sc=sc;
  try {
    this.currentScope=((IDataScriptEngine)this.sc.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSContext(sc).initStandardObjects();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  this.currentScope.setParentScope(currentScope);
  this.jsRow=new DummyJSResultSetRow();
  this.currentScope.put(""String_Node_Str"",this.currentScope,this.jsRow);
  this.populateAggregations(tempDir);
}","/** 
 * For the given odi resultset, calcaulate the value of aggregate from aggregateTable
 * @param aggrTable
 * @param odiResult
 * @throws DataException 
 */
public ProgressiveAggregationHelper(IAggrDefnManager manager,String tempDir,Scriptable currentScope,ScriptContext sc) throws DataException {
  this.manager=manager;
  this.currentRoundAggrValue=new List[0];
  this.accumulators=new ArrayList<Accumulator>();
  this.sc=sc;
  try {
    this.currentScope=((IDataScriptEngine)this.sc.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSContext(sc).initStandardObjects();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  this.currentScope.setParentScope(currentScope);
  this.jsRow=new DummyJSResultSetRow();
  this.currentScope.put(""String_Node_Str"",this.currentScope,this.jsRow);
  this.currentScope.put(""String_Node_Str"",this.currentScope,this.jsRow);
  this.populateAggregations(tempDir);
}",0.9588268471517204
65833,"/** 
 * Sets the display property of the Label.
 * @param display the display property. this should be one of the following: DesignChoiceConstants.DISPLAY_BLOCK | DesignChoiceConstants.DISPLAY_INLINE | DesignChoiceConstants.DISPLAY_NONE
 */
public void setDisplay(String display){
  if (DesignChoiceConstants.DISPLAY_NONE.equals(display)) {
    setDisplay(DesignChoiceConstants.DISPLAY_BLOCK);
  }
  this.display=display;
}","/** 
 * Sets the display property of the Label.
 * @param display the display property. this should be one of the following: DesignChoiceConstants.DISPLAY_BLOCK | DesignChoiceConstants.DISPLAY_INLINE | DesignChoiceConstants.DISPLAY_NONE
 */
public void setDisplay(String display){
  if (DesignChoiceConstants.DISPLAY_NONE.equals(display)) {
    this.display=DesignChoiceConstants.DISPLAY_BLOCK;
  }
 else {
    this.display=display;
  }
}",0.9547038327526132
65834,"public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}","public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.WARNING,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}",0.9953007518796992
65835,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}",0.9964334705075446
65836,"private Driver getDriverInstance(String driverName){
  return cachedJdbcDrivers.get(driverName);
}","public synchronized Driver getDriverInstance(Class driver,boolean refreshDriver) throws OdaException {
  String driverName=driver.getName();
  Driver drv=cachedJdbcDrivers.get(driverName);
  if (refreshDriver || drv == null) {
    Driver instance=null;
    try {
      instance=new WrappedDriver((Driver)driver.newInstance(),driverName);
    }
 catch (    Exception e) {
      throw new OdaException(e);
    }
    cachedJdbcDrivers.put(driverName,instance);
    return instance;
  }
 else {
    return drv;
  }
}",0.1737704918032787
65837,"/** 
 * Searches extension registry for connection factory defined for driverClass. Returns an  instance of the factory if there is a connection factory for the driver class. Returns null otherwise.
 */
public IConnectionFactory getDriverConnectionFactory(String driverClass) throws OdaException {
}","/** 
 * Searches extension registry for connection factory defined for driverClass. Returns an  instance of the factory if there is a connection factory for the driver class. Returns null otherwise.
 */
public synchronized IConnectionFactory getDriverConnectionFactory(String driverClass) throws OdaException {
}",0.9787234042553192
65838,"public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}","public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINEST,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && jdbcConn != null) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false) {
      jdbcConn.close();
      logger.log(Level.FINE,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
 else {
      logger.log(Level.FINER,""String_Node_Str"" + jdbcConn + ""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    try {
      if (DBConfig.getInstance().qualifyPolicy(jdbcConn.getMetaData().getDriverName(),DBConfig.IGNORE_UNIMPORTANT_EXCEPTION))       return;
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}",0.999529411764706
65839,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}",0.9964334705075446
65840,"private void loadDriverExtensions(){
  if (driverExtensions != null)   return;
  driverExtensions=new HashMap();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null)   return;
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
        String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
        String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
        logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
        if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
          driverExtensions.put(driverClass,configElems[i]);
        }
      }
    }
  }
}","private void loadDriverExtensions(){
  if (driverExtensions != null)   return;
synchronized (this) {
    driverExtensions=new HashMap();
    IExtensionRegistry extReg=Platform.getExtensionRegistry();
    IExtensionPoint extPoint=extReg.getExtensionPoint(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
    if (extPoint == null)     return;
    IExtension[] exts=extPoint.getExtensions();
    if (exts == null)     return;
    for (int e=0; e < exts.length; e++) {
      IConfigurationElement[] configElems=exts[e].getConfigurationElements();
      if (configElems == null)       continue;
      for (int i=0; i < configElems.length; i++) {
        if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
          String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
          String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
          logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
          if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
            driverExtensions.put(driverClass,configElems[i]);
          }
        }
      }
    }
  }
}",0.9349206349206348
65841,"/** 
 * Creates multiple objects
 * @param array multiple creation source
 * @param target
 * @param targetParent
 * @return first creation in layout
 * @throws SemanticException
 */
protected static DesignElementHandle performMultiInsert(Object[] array,Object target,Object targetParent) throws SemanticException {
  DesignElementHandle result=null;
  MultiItemsExpandRule rule=new MultiItemsExpandRule(array,target);
  if (rule.canInsert()) {
    Object[] positions=(Object[])rule.getInsertPosition();
    if (positions != null) {
      for (int i=0; i < array.length; i++) {
        DesignElementHandle newObj=performInsert(array[i],positions[i],targetParent);
        if (i == rule.getFocusIndex()) {
          result=newObj;
        }
 else {
          DNDUtil.addElementHandle(positions[i],newObj);
        }
      }
    }
  }
 else   if (array.length != 0) {
    result=performInsert(array[0],target,targetParent);
  }
  return result;
}","/** 
 * Creates multiple objects
 * @param array multiple creation source
 * @param target
 * @param targetParent
 * @return first creation in layout
 * @throws SemanticException
 */
protected static DesignElementHandle performMultiInsert(Object[] array,Object target,Object targetParent) throws SemanticException {
  DesignElementHandle result=null;
  MultiItemsExpandRule rule=new MultiItemsExpandRule(array,target);
  if (rule.canInsert()) {
    Object[] positions=(Object[])rule.getInsertPosition();
    if (positions != null) {
      for (int i=0; i < array.length; i++) {
        DesignElementHandle newObj=performInsert(array[i],positions[i],targetParent);
        if (i == rule.getFocusIndex()) {
          result=newObj;
        }
 else {
          DNDUtil.addElementHandle(positions[i],newObj);
          if (newObj instanceof DesignElementHandle) {
            DEUtil.setDefaultTheme((DesignElementHandle)newObj);
          }
        }
      }
    }
  }
 else   if (array.length != 0) {
    result=performInsert(array[0],target,targetParent);
  }
  return result;
}",0.9346534653465348
65842,"public void testSaveAndLoad() throws IOException, BirtException {
  IDocArchiveWriter writer=new FileArchiveWriter(tempFile.getAbsolutePath());
  ICubeQueryDefinition toSave=createQueryDefn();
  CubeQueryDefinitionIOUtil.save(queryResultID,writer,toSave);
  writer.flush();
  writer.finish();
  IDocArchiveReader reader=new FileArchiveReader(tempFile.getAbsolutePath());
  ICubeQueryDefinition loaded=CubeQueryDefinitionIOUtil.load(queryResultID,DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  reader.close();
  assertEquals(toSave.getName(),loaded.getName());
  assertEquals(toSave.cacheQueryResults(),loaded.cacheQueryResults());
  assertEquals(toSave.getFilterOption(),loaded.getFilterOption());
  assertEqualBindings(toSave.getBindings(),loaded.getBindings());
  assertEquals(toSave.getFilters().size(),loaded.getFilters().size());
  for (int i=0; i < toSave.getFilters().size(); i++) {
    assertEqualFilter((IFilterDefinition)toSave.getFilters().get(i),(IFilterDefinition)loaded.getFilters().get(i));
  }
  assertEquals(toSave.getSorts().size(),loaded.getSorts().size());
  for (int i=0; i < toSave.getSorts().size(); i++) {
    assertEqualSortDefinition((ISortDefinition)toSave.getSorts().get(i),(ISortDefinition)loaded.getSorts().get(i));
  }
  assertEquals(toSave.getMeasures().size(),loaded.getMeasures().size());
  for (int i=0; i < toSave.getMeasures().size(); i++) {
    assertEqualMeasure((IMeasureDefinition)toSave.getMeasures().get(i),(IMeasureDefinition)loaded.getMeasures().get(i));
  }
  assertEquals(toSave.getComputedMeasures().size(),loaded.getComputedMeasures().size());
  for (int i=0; i < toSave.getComputedMeasures().size(); i++) {
    assertEqualComputedMeasure((IComputedMeasureDefinition)toSave.getComputedMeasures().get(i),(IComputedMeasureDefinition)loaded.getComputedMeasures().get(i));
  }
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.ROW_EDGE),loaded.getEdge(ICubeQueryDefinition.ROW_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.COLUMN_EDGE),loaded.getEdge(ICubeQueryDefinition.COLUMN_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.PAGE_EDGE),loaded.getEdge(ICubeQueryDefinition.PAGE_EDGE));
  assertEquals(toSave.getCubeOperations().length,loaded.getCubeOperations().length);
  for (int i=0; i < toSave.getCubeOperations().length; i++) {
    assertEqualCubeOperation(toSave.getCubeOperations()[i],loaded.getCubeOperations()[i]);
  }
}","public void testSaveAndLoad() throws IOException, BirtException {
  IDocArchiveWriter writer=new FileArchiveWriter(tempFile.getAbsolutePath());
  ICubeQueryDefinition toSave=createQueryDefn();
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writer);
  CubeQueryDefinitionIOUtil.save(queryResultID,context,toSave);
  writer.flush();
  writer.finish();
  IDocArchiveReader reader=new FileArchiveReader(tempFile.getAbsolutePath());
  ICubeQueryDefinition loaded=CubeQueryDefinitionIOUtil.load(queryResultID,DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  reader.close();
  assertEquals(toSave.getName(),loaded.getName());
  assertEquals(toSave.cacheQueryResults(),loaded.cacheQueryResults());
  assertEquals(toSave.getFilterOption(),loaded.getFilterOption());
  assertEqualBindings(toSave.getBindings(),loaded.getBindings());
  assertEquals(toSave.getFilters().size(),loaded.getFilters().size());
  for (int i=0; i < toSave.getFilters().size(); i++) {
    assertEqualFilter((IFilterDefinition)toSave.getFilters().get(i),(IFilterDefinition)loaded.getFilters().get(i));
  }
  assertEquals(toSave.getSorts().size(),loaded.getSorts().size());
  for (int i=0; i < toSave.getSorts().size(); i++) {
    assertEqualSortDefinition((ISortDefinition)toSave.getSorts().get(i),(ISortDefinition)loaded.getSorts().get(i));
  }
  assertEquals(toSave.getMeasures().size(),loaded.getMeasures().size());
  for (int i=0; i < toSave.getMeasures().size(); i++) {
    assertEqualMeasure((IMeasureDefinition)toSave.getMeasures().get(i),(IMeasureDefinition)loaded.getMeasures().get(i));
  }
  assertEquals(toSave.getComputedMeasures().size(),loaded.getComputedMeasures().size());
  for (int i=0; i < toSave.getComputedMeasures().size(); i++) {
    assertEqualComputedMeasure((IComputedMeasureDefinition)toSave.getComputedMeasures().get(i),(IComputedMeasureDefinition)loaded.getComputedMeasures().get(i));
  }
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.ROW_EDGE),loaded.getEdge(ICubeQueryDefinition.ROW_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.COLUMN_EDGE),loaded.getEdge(ICubeQueryDefinition.COLUMN_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.PAGE_EDGE),loaded.getEdge(ICubeQueryDefinition.PAGE_EDGE));
  assertEquals(toSave.getCubeOperations().length,loaded.getCubeOperations().length);
  for (int i=0; i < toSave.getCubeOperations().length; i++) {
    assertEqualCubeOperation(toSave.getCubeOperations()[i],loaded.getCubeOperations()[i]);
  }
}",0.9752198241406874
65843,"/** 
 * Saves   {@code CubeQueryDefinition} instance into report document
 * @param queryResultID
 * @param writer
 * @param qd
 * @throws DataException
 * @throws IOException
 */
public static void save(String queryResultID,IDocArchiveWriter writer,ICubeQueryDefinition qd) throws DataException, IOException {
  DataOutputStream dos=null;
  try {
    RAOutputStream outputStream=writer.createRandomAccessStream(queryResultID + STREAM_FLAG);
    dos=new DataOutputStream(outputStream);
    IOUtil.writeString(dos,qd.getName());
    IOUtil.writeBool(dos,qd.cacheQueryResults());
    IOUtil.writeInt(dos,qd.getFilterOption());
    saveBindings(dos,qd.getBindings(),VersionManager.getLatestVersion());
    saveFilters(dos,qd.getFilters());
    saveSortDefns(dos,qd.getSorts());
    saveMeasures(dos,qd.getMeasures());
    saveComputedMeasures(dos,qd.getComputedMeasures());
    saveCalculatedMeasures(dos,qd.getDerivedMeasures());
    saveEdges(dos,qd);
    saveCubeOperations(dos,qd.getCubeOperations(),VersionManager.getLatestVersion());
    dos.flush();
    saveVersion(queryResultID,writer);
  }
  finally {
    if (dos != null) {
      dos.close();
    }
  }
}","/** 
 * Saves   {@code CubeQueryDefinition} instance into report document
 * @param queryResultID
 * @param writer
 * @param qd
 * @throws DataException
 * @throws IOException
 */
public static void save(String queryResultID,DataEngineContext context,ICubeQueryDefinition qd) throws DataException, IOException {
  DataOutputStream dos=null;
  try {
    StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
    int version=manager.getVersion();
    IDocArchiveWriter writer=context.getDocWriter();
    RAOutputStream outputStream=writer.createRandomAccessStream(queryResultID + STREAM_FLAG);
    dos=new DataOutputStream(outputStream);
    IOUtil.writeString(dos,qd.getName());
    IOUtil.writeBool(dos,qd.cacheQueryResults());
    IOUtil.writeInt(dos,qd.getFilterOption());
    saveBindings(dos,qd.getBindings(),version);
    saveFilters(dos,qd.getFilters());
    saveSortDefns(dos,qd.getSorts());
    saveMeasures(dos,qd.getMeasures());
    saveComputedMeasures(dos,qd.getComputedMeasures());
    saveCalculatedMeasures(dos,qd.getDerivedMeasures(),version);
    saveEdges(dos,qd);
    saveCubeOperations(dos,qd.getCubeOperations(),version);
    dos.flush();
  }
  finally {
    if (dos != null) {
      dos.close();
    }
  }
}",0.5911897900370523
65844,"private static void loadCalculatedMeasures(DataInputStream dis,ICubeQueryDefinition qd,int version) throws DataException, IOException {
  if (version < VersionManager.getLatestVersion())   return;
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IDerivedMeasureDefinition md=loadCaculatedMeasure(dis);
    IMeasureDefinition md1=qd.createDerivedMeasure(md.getName(),md.getDataType(),md.getExpression());
    md1.setAggrFunction(md.getAggrFunction());
  }
}","private static void loadCalculatedMeasures(DataInputStream dis,ICubeQueryDefinition qd,int version) throws DataException, IOException {
  if (version < VersionManager.VERSION_2_6_3_1)   return;
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IDerivedMeasureDefinition md=loadCaculatedMeasure(dis);
    IMeasureDefinition md1=qd.createDerivedMeasure(md.getName(),md.getDataType(),md.getExpression());
    md1.setAggrFunction(md.getAggrFunction());
  }
}",0.9673340358271864
65845,"/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version=0;
  try {
    if (reader.exists(queryResultID + ""String_Node_Str"")) {
      RAInputStream inputStream=reader.getStream(queryResultID + ""String_Node_Str"");
      DataInputStream stream=new DataInputStream(inputStream);
      version=IOUtil.readInt(stream);
    }
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}","/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version;
  if (context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=0;
  }
 else {
    StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
    version=manager.getVersion();
  }
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}",0.8292867981790591
65846,"private static void saveCalculatedMeasures(DataOutputStream dos,List<IDerivedMeasureDefinition> derivedMeasures) throws IOException, DataException {
  if (writeSize(dos,derivedMeasures) > 0) {
    for (    IDerivedMeasureDefinition m : derivedMeasures) {
      saveCalculatedMeasure(dos,m);
    }
  }
}","private static void saveCalculatedMeasures(DataOutputStream dos,List<IDerivedMeasureDefinition> derivedMeasures,int version) throws IOException, DataException {
  if (version < VersionManager.VERSION_2_6_3_1)   return;
  if (writeSize(dos,derivedMeasures) > 0) {
    for (    IDerivedMeasureDefinition m : derivedMeasures) {
      saveCalculatedMeasure(dos,m);
    }
  }
}",0.8961424332344213
65847,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || ieh.isNoIncrement() || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || ieh.isNoIncrement() || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9987065620419074
65848,"private IAggregationResultSet[] executeQuery(BirtCubeView view,AggregationDefinition[] aggrDefns,boolean saveToRD,String queryResutID,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,view.getCube(),fetcher);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  validateLimitSetting(view,rs);
  if (executor.getCubeQueryDefinition().cacheQueryResults()) {
    File tmpDir=new File(executor.getSession().getTempDir());
    if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
      FileSecurity.fileMakeDirs(tmpDir);
    }
    ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
    AggregationResultSetSaveUtil.save(queryResutID,rs,writer);
    writer.finish();
  }
  if (saveToRD) {
    CubeQueryDefinitionIOUtil.save(queryResutID,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
    AggregationResultSetSaveUtil.save(queryResutID,rs,executor.getContext().getDocWriter());
  }
  return rs;
}","private IAggregationResultSet[] executeQuery(BirtCubeView view,AggregationDefinition[] aggrDefns,boolean saveToRD,String queryResutID,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,view.getCube(),fetcher);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  validateLimitSetting(view,rs);
  if (executor.getCubeQueryDefinition().cacheQueryResults()) {
    File tmpDir=new File(executor.getSession().getTempDir());
    if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
      FileSecurity.fileMakeDirs(tmpDir);
    }
    ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
    AggregationResultSetSaveUtil.save(queryResutID,rs,writer);
    writer.finish();
  }
  if (saveToRD) {
    CubeQueryDefinitionIOUtil.save(queryResutID,executor.getContext(),executor.getCubeQueryDefinition());
    AggregationResultSetSaveUtil.save(queryResutID,rs,executor.getContext().getDocWriter());
  }
  return rs;
}",0.9132486388384756
65849,"/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveGroupDefn(OutputStream outputStream,List groupList,int version) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=groupList == null ? 0 : groupList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IGroupDefinition groupDefn=(IGroupDefinition)groupList.get(i);
      IOUtil.writeString(dos,groupDefn.getName());
      IOUtil.writeString(dos,groupDefn.getKeyColumn());
      IOUtil.writeString(dos,groupDefn.getKeyExpression());
      IOUtil.writeInt(dos,groupDefn.getInterval());
      IOUtil.writeDouble(dos,groupDefn.getIntervalRange());
      IOUtil.writeInt(dos,groupDefn.getSortDirection());
      FilterDefnUtil.saveFilterDefn(dos,groupDefn.getFilters(),version);
      QueryDefnIOUtil.saveSorts(dos,groupDefn.getSorts(),version);
      QueryDefnIOUtil.saveSubQuery(dos,groupDefn.getSubqueries(),version);
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveGroupDefn(OutputStream outputStream,List groupList,int version,String bundleVersion) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=groupList == null ? 0 : groupList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IGroupDefinition groupDefn=(IGroupDefinition)groupList.get(i);
      IOUtil.writeString(dos,groupDefn.getName());
      IOUtil.writeString(dos,groupDefn.getKeyColumn());
      IOUtil.writeString(dos,groupDefn.getKeyExpression());
      IOUtil.writeInt(dos,groupDefn.getInterval());
      IOUtil.writeDouble(dos,groupDefn.getIntervalRange());
      IOUtil.writeInt(dos,groupDefn.getSortDirection());
      FilterDefnUtil.saveFilterDefn(dos,groupDefn.getFilters(),version);
      QueryDefnIOUtil.saveSorts(dos,groupDefn.getSorts(),version);
      QueryDefnIOUtil.saveSubQuery(dos,groupDefn.getSubqueries(),version,bundleVersion);
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.984478935698448
65850,"/** 
 * @throws IOException 
 * @throws DataException 
 */
static void saveSubQuery(OutputStream outputStream,Collection subQuery,int version) throws DataException, IOException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  if (subQuery == null) {
    IOUtil.writeInt(dos,0);
  }
 else {
    IOUtil.writeInt(dos,subQuery.size());
    Iterator it=subQuery.iterator();
    while (it.hasNext()) {
      ISubqueryDefinition subQueryDefn=(ISubqueryDefinition)it.next();
      IOUtil.writeString(dos,subQueryDefn.getName());
      IOUtil.writeBool(outputStream,subQueryDefn.applyOnGroup());
      saveBaseQueryDefn(outputStream,subQueryDefn,version);
    }
  }
  dos.flush();
}","/** 
 * @throws IOException 
 * @throws DataException 
 */
static void saveSubQuery(OutputStream outputStream,Collection subQuery,int version,String bundleVersion) throws DataException, IOException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  if (subQuery == null) {
    IOUtil.writeInt(dos,0);
  }
 else {
    IOUtil.writeInt(dos,subQuery.size());
    Iterator it=subQuery.iterator();
    while (it.hasNext()) {
      ISubqueryDefinition subQueryDefn=(ISubqueryDefinition)it.next();
      IOUtil.writeString(dos,subQueryDefn.getName());
      IOUtil.writeBool(outputStream,subQueryDefn.applyOnGroup());
      saveBaseQueryDefn(outputStream,subQueryDefn,version,bundleVersion);
    }
  }
  dos.flush();
}",0.9751596877217884
65851,"/** 
 * @param outputStream
 * @param queryDefn
 * @throws DataException
 * @throws IOException
 */
static void saveBaseQueryDefn(OutputStream outputStream,IBaseQueryDefinition queryDefn,int version) throws DataException {
  try {
    saveBinding(outputStream,queryDefn.getBindings(),version);
    FilterDefnUtil.saveFilterDefn(outputStream,queryDefn.getFilters(),version);
    GroupDefnUtil.saveGroupDefn(outputStream,queryDefn.getGroups(),version);
    saveSorts(outputStream,queryDefn.getSorts(),version);
    IOUtil.writeInt(outputStream,queryDefn.getMaxRows());
    IOUtil.writeBool(outputStream,queryDefn.usesDetails());
    if (version >= VersionManager.VERSION_2_5_2_1)     IOUtil.writeBool(outputStream,queryDefn.cacheQueryResults());
    saveSubQuery(outputStream,queryDefn.getSubqueries(),version);
    saveQueryExecutionHints(outputStream,queryDefn.getQueryExecutionHints(),version);
    saveSummaryTableInfo(outputStream,queryDefn,version);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @param outputStream
 * @param queryDefn
 * @throws DataException
 * @throws IOException
 */
static void saveBaseQueryDefn(OutputStream outputStream,IBaseQueryDefinition queryDefn,int version,String bundleVersion) throws DataException {
  try {
    saveBinding(outputStream,queryDefn.getBindings(),version);
    FilterDefnUtil.saveFilterDefn(outputStream,queryDefn.getFilters(),version);
    GroupDefnUtil.saveGroupDefn(outputStream,queryDefn.getGroups(),version,bundleVersion);
    saveSorts(outputStream,queryDefn.getSorts(),version);
    IOUtil.writeInt(outputStream,queryDefn.getMaxRows());
    IOUtil.writeBool(outputStream,queryDefn.usesDetails());
    if (version >= VersionManager.VERSION_2_5_2_1 && !""String_Node_Str"".equals(bundleVersion))     IOUtil.writeBool(outputStream,queryDefn.cacheQueryResults());
    saveSubQuery(outputStream,queryDefn.getSubqueries(),version,bundleVersion);
    saveQueryExecutionHints(outputStream,queryDefn.getQueryExecutionHints(),version);
    saveSummaryTableInfo(outputStream,queryDefn,version);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9577464788732394
65852,"/** 
 * @param context
 * @param queryResultID
 * @param subQueryName
 * @param subQueryIndex
 * @throws DataException
 */
RDSave(DataEngineContext context,IBaseQueryDefinition queryDefn,int rowCount,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rowCount=rowCount;
  this.queryDefn=queryDefn;
  this.streamManager=new StreamManager(context,queryResultInfo);
  this.rdSaveUtil=new RDSaveUtil(this.context.getMode(),queryDefn,this.streamManager);
}","/** 
 * @param context
 * @param queryResultID
 * @param subQueryName
 * @param subQueryIndex
 * @throws DataException
 */
RDSave(DataEngineContext context,IBaseQueryDefinition queryDefn,int rowCount,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rowCount=rowCount;
  this.queryDefn=queryDefn;
  this.streamManager=new StreamManager(context,queryResultInfo);
  this.rdSaveUtil=new RDSaveUtil(this.context,queryDefn,this.streamManager);
}",0.9896265560165975
65853,"/** 
 * @param context
 * @param queryDefn
 * @param queryResultID
 * @param rowCount
 * @param subQueryName
 * @param subQueryIndex
 * @throws DataException
 */
RDSave2(DataEngineContext context,IBaseQueryDefinition queryDefn,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.streamManager=new StreamManager(context,queryResultInfo);
  this.saveUtilHelper=new RDSaveUtil(this.context.getMode(),queryDefn,this.streamManager);
}","/** 
 * @param context
 * @param queryDefn
 * @param queryResultID
 * @param rowCount
 * @param subQueryName
 * @param subQueryIndex
 * @throws DataException
 */
RDSave2(DataEngineContext context,IBaseQueryDefinition queryDefn,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.streamManager=new StreamManager(context,queryResultInfo);
  this.saveUtilHelper=new RDSaveUtil(this.context,queryDefn,this.streamManager);
}",0.989106753812636
65854,"/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  if (queryDefn instanceof QueryDefnDelegator) {
    queryDefn=((QueryDefnDelegator)queryDefn).getBaseQuery();
  }
  OutputStream outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnIOUtil.saveBaseQueryDefn(outputStream,queryDefn,streamManager.getVersion());
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  if (queryDefn instanceof QueryDefnDelegator) {
    queryDefn=((QueryDefnDelegator)queryDefn).getBaseQuery();
  }
  OutputStream outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnIOUtil.saveBaseQueryDefn(outputStream,queryDefn,streamManager.getVersion(),this.bundleVersion);
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9832893579595426
65855,"/** 
 * @param queryDefn
 */
RDSaveUtil(int mode,IBaseQueryDefinition queryDefn,StreamManager streamManager){
  this.mode=mode;
  this.queryDefn=queryDefn;
  this.streamManager=streamManager;
}","/** 
 * @param queryDefn
 */
RDSaveUtil(DataEngineContext context,IBaseQueryDefinition queryDefn,StreamManager streamManager){
  this.mode=context.getMode();
  this.bundleVersion=context.getBundleVersion();
  this.queryDefn=queryDefn;
  this.streamManager=streamManager;
}",0.7784946236559139
65856,"/** 
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return
 */
public boolean hasInStream(String streamID,String subStreamID,int streamType){
  String relativePath=getPath(streamID,subStreamID,streamType);
  if (reader != null)   return reader.exists(relativePath);
 else   if (writer != null && writer.exists(relativePath))   return true;
  return false;
}","/** 
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return
 */
public boolean hasInStream(String streamID,String subStreamID,int streamType){
  String relativePath=getPath(streamID,subStreamID,streamType);
  if (reader != null && reader.exists(relativePath))   return true;
 else   if (writer != null && writer.exists(relativePath))   return true;
  return false;
}",0.963157894736842
65857,"/** 
 * According to the paramters of streamID, subStreamID and streamType, an input stream will be created for it. To make stream close simply, the stream needs to be closed by caller, and then caller requires to add buffer stream layer when needed.
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return input stream for specified streamID, subStreamID and streamType
 */
public RAInputStream getInputStream(String streamID,String subStreamID,int streamType) throws DataException {
  String relativePath=getPath(streamID,subStreamID,streamType);
  try {
    RAInputStream inputStream=null;
    if (reader != null) {
      inputStream=reader.getStream(relativePath);
    }
 else     if (writer != null && writer.exists(relativePath)) {
      inputStream=writer.getInputStream(relativePath);
    }
    if (inputStream == null) {
      throw new DataException(ResourceConstants.RD_LOAD_STREAM_ERROR);
    }
    return inputStream;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_STREAM_ERROR,e);
  }
}","/** 
 * According to the paramters of streamID, subStreamID and streamType, an input stream will be created for it. To make stream close simply, the stream needs to be closed by caller, and then caller requires to add buffer stream layer when needed.
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return input stream for specified streamID, subStreamID and streamType
 */
public RAInputStream getInputStream(String streamID,String subStreamID,int streamType) throws DataException {
  String relativePath=getPath(streamID,subStreamID,streamType);
  try {
    RAInputStream inputStream=null;
    if (reader != null && reader.exists(relativePath)) {
      inputStream=reader.getStream(relativePath);
    }
 else     if (writer != null && writer.exists(relativePath)) {
      inputStream=writer.getInputStream(relativePath);
    }
    if (inputStream == null) {
      throw new DataException(ResourceConstants.RD_LOAD_STREAM_ERROR);
    }
    return inputStream;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_STREAM_ERROR,e);
  }
}",0.985520784680056
65858,"/** 
 * @param _1partQueryResultID
 * @param _2partQueryResultID
 * @return
 */
public static String buildID(String _1partQueryResultID,String _2partQueryResultID){
  String newID=_1partQueryResultID;
  if (newID != null)   newID+=QURE_ID_SEPARATOR + _2partQueryResultID;
 else   newID=_2partQueryResultID;
  return newID;
}","/** 
 * @param _1partQueryResultID
 * @param _2partQueryResultID
 * @return
 */
public static String buildID(String _1partQueryResultID,String _2partQueryResultID){
  String newID=_1partQueryResultID;
  if (newID != null)   newID+=_2partQueryResultID == null ? ""String_Node_Str"" : QURE_ID_SEPARATOR + _2partQueryResultID;
 else   newID=_2partQueryResultID;
  return newID;
}",0.9283667621776504
65859,"/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion();
    if (this.version == VersionManager.VERSION_2_0)     this.version=VersionManager.getLatestVersion();
    vm.setVersion(this.version);
  }
 else   if (context.getMode() == DataEngineContext.MODE_UPDATE && this.rootQueryResultID == null) {
    if (this.context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
      this.version=VersionManager.getLatestVersion();
      vm.setVersion(this.version);
    }
 else     this.version=vm.getVersion();
  }
 else {
    this.version=vm.getVersion();
  }
}","/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion(this.getQueryResultUID());
    if (this.version == VersionManager.VERSION_2_0) {
      this.version=VersionManager.getLatestVersion();
    }
    vm.setVersion(version,this.getQueryResultUID());
    vm.setVersion(VersionManager.getLatestVersion(),null);
  }
 else {
    String queryResultId=this.getQueryResultUID();
    this.version=vm.getVersion(queryResultId);
    if (this.version == 0 && queryResultId != null) {
      this.version=vm.getLatestVersion();
      vm.setVersion(this.version,queryResultId);
    }
  }
}",0.7430063409175681
65860,"/** 
 * @return
 */
public int getVersion(){
  int version=getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
    is.close();
  }
 catch (  DataException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return version;
}","public int getVersion(String queryResultId) throws DataException {
  if (queryResultId != null && !queryResultId.trim().isEmpty()) {
    Integer version=this.getQueryIdVersionMap().get(queryResultId);
    if (version != null)     return version;
  }
  return this.getVersion();
}",0.1367323290845886
65861,"/** 
 * @param context
 * @param string
 * @throws DataException
 */
public void setVersion(int version) throws DataException {
  OutputStream versionOs=this.dataEngineContext.getOutputStream(null,null,DataEngineContext.VERSION_INFO_STREAM);
  DataOutputStream versionDos=new DataOutputStream(versionOs);
  try {
    IOUtil.writeInt(versionDos,version);
    versionDos.close();
    versionOs.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","void setVersion(int version,String queryResultId) throws DataException {
  if (queryResultId == null || queryResultId.trim().isEmpty()) {
    this.setVersion(version);
    return;
  }
  Map<String,Integer> idVersionMap=this.getQueryIdVersionMap();
  idVersionMap.put(queryResultId,version);
  this.dataEngineContext.dropStream(null,null,DataEngineContext.QUERY_ID_BASED_VERSIONING_STREAM);
  OutputStream versionOs=this.dataEngineContext.getOutputStream(null,null,DataEngineContext.QUERY_ID_BASED_VERSIONING_STREAM);
  DataOutputStream versionDos=new DataOutputStream(versionOs);
  try {
    IOUtil.writeMap(versionDos,idVersionMap);
    versionDos.close();
    versionOs.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.1326053042121684
65862,"/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version;
  if (context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=0;
  }
 else {
    StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
    version=manager.getVersion();
  }
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd,version);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd,version);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}","/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version;
  StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
  version=manager.getVersion();
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd,version);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd,version);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}",0.9519685039370078
65863,"private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs=null;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    if (saveToRD || executor.getCubeQueryDefinition().cacheQueryResults())     id=executor.getSession().getQueryResultIDUtil().nextID();
    rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
      initLoadedAggregationResultSets(rs,aggrDefns);
    }
 else {
      if (executor.getContext().getDocReader() != null) {
        rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
        initLoadedAggregationResultSets(rs,aggrDefns);
      }
 else {
        rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
      }
    }
  }
  executor.setQueryResultsId(id);
  return rs;
}","private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD,IBindingValueFetcher fetcher) throws IOException, BirtException {
  IAggregationResultSet[] rs=null;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    if (saveToRD || executor.getCubeQueryDefinition().cacheQueryResults())     id=executor.getSession().getQueryResultIDUtil().nextID();
    rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
      initLoadedAggregationResultSets(rs,aggrDefns);
    }
 else {
      if (executor.getContext().getDocReader() != null) {
        rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
        initLoadedAggregationResultSets(rs,aggrDefns);
      }
 else {
        rs=executeQuery(view,aggrDefns,saveToRD,id,fetcher);
      }
    }
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.9993446920052425
65864,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true,fetcher);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false,fetcher);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(executor.getCubeQueryDefinition().getQueryResultsID()),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  rs=applyNoAggrUpdateFilters(getNoAggrUpdateFilters(executor.getCubeQueryDefinition().getFilters()),executor,rs,cube,fetcher);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(id),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
  if (ieh.getFilters() != null && ieh.getFilters().length > 0) {
    IFilterDefinition[] filters=ieh.getFilters();
    List finalFilters=new ArrayList();
    for (int j=0; j < filters.length; j++) {
      finalFilters.add(filters[j]);
    }
    rs=applyNoAggrUpdateFilters(finalFilters,executor,rs,cube,fetcher);
  }
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9952549391769476
65865,"/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version;
  StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
  version=manager.getVersion();
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd,version);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd,version);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}","/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  VersionManager vm=new VersionManager(context);
  int version=vm.getVersion(queryResultID);
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd,version);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd,version);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}",0.9240506329113924
65866,"public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    RAInputStream aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    DataInputStream valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        if (manager.getVersion() >= VersionManager.VERSION_2_5_2_1) {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset,-1));
        }
 else {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset + 1,-1));
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      valueStream.close();
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        if (manager.getVersion() >= VersionManager.VERSION_2_5_2_1) {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset,-1));
        }
 else {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset + 1,-1));
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9794446447890373
65867,"public void close() throws DataException {
}","public void close() throws DataException {
  try {
    if (valueStream != null) {
      valueStream.close();
    }
    if (aggrIndexStream != null) {
      aggrIndexStream.close();
    }
  }
 catch (  IOException ex) {
  }
}",0.3208955223880597
65868,"/** 
 * @throws DataException
 */
protected void prepare() throws DataException {
  this.rdGroupUtil=RDLoadUtil.loadGroupUtil(tempDir,streamManager,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  if (version >= VersionManager.VERSION_2_5_1_0) {
    List<RAInputStream> aggrStreams=streamManager.getInStreams(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    if ((!aggrStreams.isEmpty()) || streamManager.hasInStream(DataEngineContext.COMBINED_AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
      List<RAInputStream> aggrIndexStreams=streamManager.getInStreams(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      RAInputStream combinedAggrIndex=null;
      RAInputStream combinedAggrValue=null;
      if (streamManager.hasInStream(DataEngineContext.COMBINED_AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
        combinedAggrIndex=streamManager.getInStream(DataEngineContext.COMBINED_AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      }
      if (streamManager.hasInStream(DataEngineContext.COMBINED_AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
        combinedAggrValue=streamManager.getInStream(DataEngineContext.COMBINED_AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      }
      this.aggrUtil=new ProgressiveViewingRDAggrUtil(combinedAggrIndex,combinedAggrValue,aggrIndexStreams,aggrStreams);
    }
 else     if (streamManager.hasInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
      this.aggrUtil=new RDAggrUtil(streamManager,qd);
    }
  }
  if (this.isBasedOnSecondRD == false) {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    if (version > VersionManager.VERSION_2_0) {
      rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    this.exprResultReader=new ExprDataReader1(this.rowExprsRAIs,this.rowLenRAIs,this.version,(this.qd instanceof IQueryDefinition && ((IQueryDefinition)qd).isSummaryQuery()) ? null : this.dataSetResultSet);
    this.rowCount=exprResultReader.getCount();
  }
 else {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowInfoRAIs=streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    this.exprResultReader=new ExprDataReader2(tempDir,rowExprsRAIs,rowLenRAIs,rowInfoRAIs,version,(this.qd instanceof IQueryDefinition && ((IQueryDefinition)qd).isSummaryQuery()) ? null : this.dataSetResultSet);
    this.rowCount=this.exprResultReader.getCount();
  }
}","/** 
 * @throws DataException
 */
protected void prepare() throws DataException {
  this.rdGroupUtil=RDLoadUtil.loadGroupUtil(tempDir,streamManager,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  if (version >= VersionManager.VERSION_2_5_1_0) {
    aggrStreams=streamManager.getInStreams(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    if ((!aggrStreams.isEmpty()) || streamManager.hasInStream(DataEngineContext.COMBINED_AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
      aggrIndexStreams=streamManager.getInStreams(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      RAInputStream combinedAggrIndex=null;
      RAInputStream combinedAggrValue=null;
      if (streamManager.hasInStream(DataEngineContext.COMBINED_AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
        combinedAggrIndex=streamManager.getInStream(DataEngineContext.COMBINED_AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      }
      if (streamManager.hasInStream(DataEngineContext.COMBINED_AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
        combinedAggrValue=streamManager.getInStream(DataEngineContext.COMBINED_AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      }
      this.aggrUtil=new ProgressiveViewingRDAggrUtil(combinedAggrIndex,combinedAggrValue,aggrIndexStreams,aggrStreams);
    }
 else     if (streamManager.hasInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE)) {
      this.aggrUtil=new RDAggrUtil(streamManager,qd);
    }
  }
  if (this.isBasedOnSecondRD == false) {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    if (version > VersionManager.VERSION_2_0) {
      rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    this.exprResultReader=new ExprDataReader1(this.rowExprsRAIs,this.rowLenRAIs,this.version,(this.qd instanceof IQueryDefinition && ((IQueryDefinition)qd).isSummaryQuery()) ? null : this.dataSetResultSet);
    this.rowCount=exprResultReader.getCount();
  }
 else {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowInfoRAIs=streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    this.exprResultReader=new ExprDataReader2(tempDir,rowExprsRAIs,rowLenRAIs,rowInfoRAIs,version,(this.qd instanceof IQueryDefinition && ((IQueryDefinition)qd).isSummaryQuery()) ? null : this.dataSetResultSet);
    this.rowCount=this.exprResultReader.getCount();
  }
}",0.9933110367892976
65869,"public void close() throws DataException {
  try {
    if (exprResultReader != null) {
      exprResultReader.close();
      exprResultReader=null;
    }
    if (rowExprsRAIs != null) {
      rowExprsRAIs.close();
      rowExprsRAIs=null;
    }
    if (rowLenRAIs != null) {
      rowLenRAIs.close();
      rowLenRAIs=null;
    }
    if (rowInfoRAIs != null) {
      rowInfoRAIs.close();
      rowInfoRAIs=null;
    }
    if (dataSetResultSet != null) {
      dataSetResultSet.close();
      dataSetResultSet=null;
    }
    if (aggrUtil != null) {
      aggrUtil.close();
      aggrUtil=null;
    }
    if (rdGroupUtil != null) {
      rdGroupUtil.close();
      rdGroupUtil=null;
    }
  }
 catch (  IOException e) {
  }
}","public void close() throws DataException {
  try {
    if (exprResultReader != null) {
      exprResultReader.close();
      exprResultReader=null;
    }
    if (rowExprsRAIs != null) {
      rowExprsRAIs.close();
      rowExprsRAIs=null;
    }
    if (rowLenRAIs != null) {
      rowLenRAIs.close();
      rowLenRAIs=null;
    }
    if (rowInfoRAIs != null) {
      rowInfoRAIs.close();
      rowInfoRAIs=null;
    }
    if (dataSetResultSet != null) {
      dataSetResultSet.close();
      dataSetResultSet=null;
    }
    if (aggrUtil != null) {
      aggrUtil.close();
      aggrUtil=null;
    }
    if (rdGroupUtil != null) {
      rdGroupUtil.close();
      rdGroupUtil=null;
    }
    if (aggrIndexStreams != null) {
      for (int i=0; i < aggrIndexStreams.size(); i++) {
        aggrIndexStreams.get(i).close();
      }
    }
    if (aggrStreams != null) {
      for (int i=0; i < aggrStreams.size(); i++) {
        aggrStreams.get(i).close();
      }
    }
  }
 catch (  IOException e) {
  }
}",0.8384481760277939
65870,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_6_3_1;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_6_3_2;
}",0.9882352941176472
65871,"private static void saveFilters(DataOutputStream dos,List<IFilterDefinition> filters) throws DataException, IOException {
  if (writeSize(dos,filters) > 0) {
    for (    IFilterDefinition fd : filters) {
      saveFilterDefn(dos,fd);
    }
  }
}","private static void saveFilters(DataOutputStream dos,List<IFilterDefinition> filters,int version) throws DataException, IOException {
  if (writeSize(dos,filters) > 0) {
    for (    IFilterDefinition fd : filters) {
      saveFilterDefn(dos,fd,version);
    }
  }
}",0.9609375
65872,"/** 
 * Saves   {@code CubeQueryDefinition} instance into report document
 * @param queryResultID
 * @param writer
 * @param qd
 * @throws DataException
 * @throws IOException
 */
public static void save(String queryResultID,DataEngineContext context,ICubeQueryDefinition qd) throws DataException, IOException {
  DataOutputStream dos=null;
  try {
    StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
    int version=manager.getVersion();
    IDocArchiveWriter writer=context.getDocWriter();
    RAOutputStream outputStream=writer.createRandomAccessStream(queryResultID + STREAM_FLAG);
    dos=new DataOutputStream(outputStream);
    IOUtil.writeString(dos,qd.getName());
    IOUtil.writeBool(dos,qd.cacheQueryResults());
    IOUtil.writeInt(dos,qd.getFilterOption());
    saveBindings(dos,qd.getBindings(),version);
    saveFilters(dos,qd.getFilters());
    saveSortDefns(dos,qd.getSorts());
    saveMeasures(dos,qd.getMeasures());
    saveComputedMeasures(dos,qd.getComputedMeasures());
    saveCalculatedMeasures(dos,qd.getDerivedMeasures(),version);
    saveEdges(dos,qd);
    saveCubeOperations(dos,qd.getCubeOperations(),version);
    dos.flush();
  }
  finally {
    if (dos != null) {
      dos.close();
    }
  }
}","/** 
 * Saves   {@code CubeQueryDefinition} instance into report document
 * @param queryResultID
 * @param writer
 * @param qd
 * @throws DataException
 * @throws IOException
 */
public static void save(String queryResultID,DataEngineContext context,ICubeQueryDefinition qd) throws DataException, IOException {
  DataOutputStream dos=null;
  try {
    StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
    int version=manager.getVersion();
    IDocArchiveWriter writer=context.getDocWriter();
    RAOutputStream outputStream=writer.createRandomAccessStream(queryResultID + STREAM_FLAG);
    dos=new DataOutputStream(outputStream);
    IOUtil.writeString(dos,qd.getName());
    IOUtil.writeBool(dos,qd.cacheQueryResults());
    IOUtil.writeInt(dos,qd.getFilterOption());
    saveBindings(dos,qd.getBindings(),version);
    saveFilters(dos,qd.getFilters(),version);
    saveSortDefns(dos,qd.getSorts());
    saveMeasures(dos,qd.getMeasures());
    saveComputedMeasures(dos,qd.getComputedMeasures());
    saveCalculatedMeasures(dos,qd.getDerivedMeasures(),version);
    saveEdges(dos,qd,version);
    saveCubeOperations(dos,qd.getCubeOperations(),version);
    dos.flush();
  }
  finally {
    if (dos != null) {
      dos.close();
    }
  }
}",0.9937254901960784
65873,"private static void loadEdges(DataInputStream dis,ICubeQueryDefinition qd) throws DataException, IOException {
  IEdgeDefinition ed=loadEdge(dis);
  if (ed != null) {
    IEdgeDefinition ed1=qd.createEdge(ICubeQueryDefinition.ROW_EDGE);
    copy(ed,ed1);
  }
  ed=loadEdge(dis);
  if (ed != null) {
    IEdgeDefinition ed1=qd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    copy(ed,ed1);
  }
  ed=loadEdge(dis);
  if (ed != null) {
    IEdgeDefinition ed1=qd.createEdge(ICubeQueryDefinition.PAGE_EDGE);
    copy(ed,ed1);
  }
}","private static void loadEdges(DataInputStream dis,ICubeQueryDefinition qd,int version) throws DataException, IOException {
  IEdgeDefinition ed=loadEdge(dis,version);
  if (ed != null) {
    IEdgeDefinition ed1=qd.createEdge(ICubeQueryDefinition.ROW_EDGE);
    copy(ed,ed1);
  }
  ed=loadEdge(dis,version);
  if (ed != null) {
    IEdgeDefinition ed1=qd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    copy(ed,ed1);
  }
  ed=loadEdge(dis,version);
  if (ed != null) {
    IEdgeDefinition ed1=qd.createEdge(ICubeQueryDefinition.PAGE_EDGE);
    copy(ed,ed1);
  }
}",0.967032967032967
65874,"private static IEdgeDrillFilter loadEdgeDrillFilter(DataInputStream dis) throws DataException, IOException {
  if (!IOUtil.readBool(dis)) {
    return null;
  }
  String name=IOUtil.readString(dis);
  EdgeDrillingFilterDefinition edf=new EdgeDrillingFilterDefinition(name);
  edf.setTargetHierarchy(loadHierarchyDefinition(dis));
  edf.setTargetLevelName(IOUtil.readString(dis));
  loadFilters(dis,edf);
  loadSortDefns(dis,edf);
  int count=IOUtil.readInt(dis);
  List<Object[]> tuples=new ArrayList<Object[]>();
  for (int i=0; i < count; i++) {
    int size=IOUtil.readInt(dis);
    Object[] tuple=new Object[size];
    for (int j=0; j < size; j++) {
      tuple[j]=IOUtil.readObject(dis,org.eclipse.birt.data.engine.impl.DataEngineSession.getCurrentClassLoader());
    }
    tuples.add(tuple);
  }
  edf.setTuple(tuples);
  return edf;
}","private static IEdgeDrillFilter loadEdgeDrillFilter(DataInputStream dis,int version) throws DataException, IOException {
  if (!IOUtil.readBool(dis)) {
    return null;
  }
  String name=IOUtil.readString(dis);
  EdgeDrillingFilterDefinition edf=new EdgeDrillingFilterDefinition(name);
  edf.setTargetHierarchy(loadHierarchyDefinition(dis));
  edf.setTargetLevelName(IOUtil.readString(dis));
  loadFilters(dis,edf,version);
  loadSortDefns(dis,edf);
  int count=IOUtil.readInt(dis);
  List<Object[]> tuples=new ArrayList<Object[]>();
  for (int i=0; i < count; i++) {
    int size=IOUtil.readInt(dis);
    Object[] tuple=new Object[size];
    for (int j=0; j < size; j++) {
      tuple[j]=IOUtil.readObject(dis,org.eclipse.birt.data.engine.impl.DataEngineSession.getCurrentClassLoader());
    }
    tuples.add(tuple);
  }
  edf.setTuple(tuples);
  return edf;
}",0.9882491186839012
65875,"/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version;
  if (context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=0;
  }
 else {
    StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
    version=manager.getVersion();
  }
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}","/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version;
  if (context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=0;
  }
 else {
    StreamManager manager=new StreamManager(context,new QueryResultInfo(queryResultID,null,0));
    version=manager.getVersion();
  }
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd,version);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadCalculatedMeasures(dis,cqd,version);
    loadEdges(dis,cqd,version);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}",0.9939531368102796
65876,"private static IFilterDefinition loadFilterDefn(DataInputStream dis) throws IOException {
}","private static IFilterDefinition loadFilterDefn(DataInputStream dis,int version) throws IOException {
}",0.9381443298969072
65877,"private static void saveEdges(DataOutputStream dos,ICubeQueryDefinition qd) throws DataException, IOException {
  saveEdge(dos,qd.getEdge(ICubeQueryDefinition.ROW_EDGE));
  saveEdge(dos,qd.getEdge(ICubeQueryDefinition.COLUMN_EDGE));
  saveEdge(dos,qd.getEdge(ICubeQueryDefinition.PAGE_EDGE));
}","private static void saveEdges(DataOutputStream dos,ICubeQueryDefinition qd,int version) throws DataException, IOException {
  saveEdge(dos,qd.getEdge(ICubeQueryDefinition.ROW_EDGE),version);
  saveEdge(dos,qd.getEdge(ICubeQueryDefinition.COLUMN_EDGE),version);
  saveEdge(dos,qd.getEdge(ICubeQueryDefinition.PAGE_EDGE),version);
}",0.9423076923076924
65878,"private static void saveFilterDefn(DataOutputStream dos,IFilterDefinition fd) throws IOException {
  if (fd == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  ExprUtil.saveBaseExpr(dos,fd.getExpression());
  if (!(fd instanceof ICubeFilterDefinition)) {
    IOUtil.writeInt(dos,FILTER_DEFN_FLAG_COMMON);
  }
 else {
    IOUtil.writeInt(dos,FILTER_DEFN_FLAG_CUBE);
    ICubeFilterDefinition cfd=(ICubeFilterDefinition)fd;
    saveLevelDefinition(dos,cfd.getTargetLevel());
    if (writeSize(dos,cfd.getAxisQualifierLevels()) > 0) {
      for (      ILevelDefinition ld : cfd.getAxisQualifierLevels()) {
        saveLevelDefinition(dos,ld);
      }
    }
    if (writeSize(dos,cfd.getAxisQualifierValues()) > 0) {
      for (      Object o : cfd.getAxisQualifierValues()) {
        IOUtil.writeObject(dos,o);
      }
    }
  }
}","private static void saveFilterDefn(DataOutputStream dos,IFilterDefinition fd,int version) throws IOException {
  if (fd == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  ExprUtil.saveBaseExpr(dos,fd.getExpression());
  if (!(fd instanceof ICubeFilterDefinition)) {
    IOUtil.writeInt(dos,FILTER_DEFN_FLAG_COMMON);
  }
 else {
    IOUtil.writeInt(dos,FILTER_DEFN_FLAG_CUBE);
    ICubeFilterDefinition cfd=(ICubeFilterDefinition)fd;
    saveLevelDefinition(dos,cfd.getTargetLevel());
    if (writeSize(dos,cfd.getAxisQualifierLevels()) > 0) {
      for (      ILevelDefinition ld : cfd.getAxisQualifierLevels()) {
        saveLevelDefinition(dos,ld);
      }
    }
    if (writeSize(dos,cfd.getAxisQualifierValues()) > 0) {
      for (      Object o : cfd.getAxisQualifierValues()) {
        IOUtil.writeObject(dos,o);
      }
    }
  }
  if (version >= VersionManager.VERSION_2_6_3_2)   IOUtil.writeBool(dos,fd.updateAggregation());
}",0.940857297883885
65879,"private static void saveEdgeDrillFilter(DataOutputStream dos,IEdgeDrillFilter edf) throws DataException, IOException {
  if (edf == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  IOUtil.writeString(dos,edf.getName());
  saveHierarchyDefinition(dos,edf.getTargetHierarchy());
  IOUtil.writeString(dos,edf.getTargetLevelName());
  saveFilters(dos,edf.getLevelFilter());
  saveSortDefns(dos,edf.getLevelSort());
  if (writeSize(dos,edf.getTuple()) > 0) {
    for (    Object[] tuple : edf.getTuple()) {
      if (writeSize(dos,tuple) > 0) {
        for (        Object o : tuple) {
          IOUtil.writeObject(dos,o);
        }
      }
    }
  }
}","private static void saveEdgeDrillFilter(DataOutputStream dos,IEdgeDrillFilter edf,int version) throws DataException, IOException {
  if (edf == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  IOUtil.writeString(dos,edf.getName());
  saveHierarchyDefinition(dos,edf.getTargetHierarchy());
  IOUtil.writeString(dos,edf.getTargetLevelName());
  saveFilters(dos,edf.getLevelFilter(),version);
  saveSortDefns(dos,edf.getLevelSort());
  if (writeSize(dos,edf.getTuple()) > 0) {
    for (    Object[] tuple : edf.getTuple()) {
      if (writeSize(dos,tuple) > 0) {
        for (        Object o : tuple) {
          IOUtil.writeObject(dos,o);
        }
      }
    }
  }
}",0.9856527977044476
65880,"private static void loadFilters(DataInputStream dis,IEdgeDrillFilter edf) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IFilterDefinition fd=loadFilterDefn(dis);
    edf.addLevelFilter(fd);
  }
}","private static void loadFilters(DataInputStream dis,IEdgeDrillFilter edf,int version) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IFilterDefinition fd=loadFilterDefn(dis,version);
    edf.addLevelFilter(fd);
  }
}",0.9621212121212122
65881,"private static void saveEdge(DataOutputStream dos,IEdgeDefinition ed) throws DataException, IOException {
  if (ed == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  IOUtil.writeString(dos,ed.getName());
  if (writeSize(dos,ed.getDimensions()) > 0) {
    for (    IDimensionDefinition dd : ed.getDimensions()) {
      saveDimensionDefinition(dos,dd);
    }
  }
  if (writeSize(dos,ed.getDrillFilter()) > 0) {
    for (    IEdgeDrillFilter edf : ed.getDrillFilter()) {
      saveEdgeDrillFilter(dos,edf);
    }
  }
  saveMirroredDefn(dos,ed.getMirroredDefinition());
}","private static void saveEdge(DataOutputStream dos,IEdgeDefinition ed,int version) throws DataException, IOException {
  if (ed == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  IOUtil.writeString(dos,ed.getName());
  if (writeSize(dos,ed.getDimensions()) > 0) {
    for (    IDimensionDefinition dd : ed.getDimensions()) {
      saveDimensionDefinition(dos,dd);
    }
  }
  if (writeSize(dos,ed.getDrillFilter()) > 0) {
    for (    IEdgeDrillFilter edf : ed.getDrillFilter()) {
      saveEdgeDrillFilter(dos,edf,version);
    }
  }
  saveMirroredDefn(dos,ed.getMirroredDefinition());
}",0.9838187702265372
65882,"private static IEdgeDefinition loadEdge(DataInputStream dis) throws DataException, IOException {
  if (!IOUtil.readBool(dis)) {
    return null;
  }
  String name=IOUtil.readString(dis);
  EdgeDefinition ed=new EdgeDefinition(name);
  int count=IOUtil.readInt(dis);
  for (int i=0; i < count; i++) {
    IDimensionDefinition dd=loadDimensionDefinition(dis);
    IDimensionDefinition dd1=ed.createDimension(dd.getName());
    copy(dd,dd1);
  }
  count=IOUtil.readInt(dis);
  for (int i=0; i < count; i++) {
    IEdgeDrillFilter edf=loadEdgeDrillFilter(dis);
    IEdgeDrillFilter edf1=ed.createDrillFilter(edf.getName());
    copy(edf,edf1);
  }
  IMirroredDefinition md=loadMirroredDefn(dis);
  if (md != null) {
    ed.creatMirrorDefinition(md.getMirrorStartingLevel(),md.isBreakHierarchy());
  }
  return ed;
}","private static IEdgeDefinition loadEdge(DataInputStream dis,int version) throws DataException, IOException {
  if (!IOUtil.readBool(dis)) {
    return null;
  }
  String name=IOUtil.readString(dis);
  EdgeDefinition ed=new EdgeDefinition(name);
  int count=IOUtil.readInt(dis);
  for (int i=0; i < count; i++) {
    IDimensionDefinition dd=loadDimensionDefinition(dis);
    IDimensionDefinition dd1=ed.createDimension(dd.getName());
    copy(dd,dd1);
  }
  count=IOUtil.readInt(dis);
  for (int i=0; i < count; i++) {
    IEdgeDrillFilter edf=loadEdgeDrillFilter(dis,version);
    IEdgeDrillFilter edf1=ed.createDrillFilter(edf.getName());
    copy(edf,edf1);
  }
  IMirroredDefinition md=loadMirroredDefn(dis);
  if (md != null) {
    ed.creatMirrorDefinition(md.getMirrorStartingLevel(),md.isBreakHierarchy());
  }
  return ed;
}",0.9878197320341048
65883,"public int getVersion(String queryResultId) throws DataException {
  if (queryResultId != null && !queryResultId.trim().isEmpty()) {
    Integer version=this.getQueryIdVersionMap().get(queryResultId);
    if (version != null)     return version;
  }
  return this.getVersion();
}","public int getVersion(String queryResultId) throws DataException {
  if (queryResultId != null && queryResultId.trim().length() > 0) {
    Integer version=this.getQueryIdVersionMap().get(queryResultId);
    if (version != null)     return version;
  }
  return this.getVersion();
}",0.9607142857142856
65884,"void setVersion(int version,String queryResultId) throws DataException {
  if (queryResultId == null || queryResultId.trim().isEmpty()) {
    this.setVersion(version);
    return;
  }
  Map<String,Integer> idVersionMap=this.getQueryIdVersionMap();
  idVersionMap.put(queryResultId,version);
  this.dataEngineContext.dropStream(null,null,DataEngineContext.QUERY_ID_BASED_VERSIONING_STREAM);
  OutputStream versionOs=this.dataEngineContext.getOutputStream(null,null,DataEngineContext.QUERY_ID_BASED_VERSIONING_STREAM);
  DataOutputStream versionDos=new DataOutputStream(versionOs);
  try {
    IOUtil.writeMap(versionDos,idVersionMap);
    versionDos.close();
    versionOs.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","void setVersion(int version,String queryResultId) throws DataException {
  if (queryResultId == null || queryResultId.trim().length() == 0) {
    this.setVersion(version);
    return;
  }
  Map<String,Integer> idVersionMap=this.getQueryIdVersionMap();
  idVersionMap.put(queryResultId,version);
  this.dataEngineContext.dropStream(null,null,DataEngineContext.QUERY_ID_BASED_VERSIONING_STREAM);
  OutputStream versionOs=this.dataEngineContext.getOutputStream(null,null,DataEngineContext.QUERY_ID_BASED_VERSIONING_STREAM);
  DataOutputStream versionDos=new DataOutputStream(versionOs);
  try {
    IOUtil.writeMap(versionDos,idVersionMap);
    versionDos.close();
    versionOs.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9859514687100894
65885,"public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      valueStream.close();
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        if (manager.getVersion() >= VersionManager.VERSION_2_5_2_1) {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset,-1));
        }
 else {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset + 1,-1));
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        if (manager.getVersion() >= VersionManager.VERSION_2_5_2_1) {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset,-1));
        }
 else {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset + 1,-1));
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.990156762668611
65886,"public void close() throws DataException {
  try {
    if (valueStream != null) {
      valueStream.close();
    }
    if (aggrIndexStream != null) {
      aggrIndexStream.close();
    }
  }
 catch (  IOException ex) {
  }
}","public void close() throws DataException {
  try {
    if (!this.holders.isEmpty()) {
      Collection<RDAggrValueHolder> values=this.holders.values();
      Iterator<RDAggrValueHolder> iter=values.iterator();
      while (iter.hasNext()) {
        iter.next().close();
      }
    }
    if (aggrIndexStream != null) {
      aggrIndexStream.close();
    }
  }
 catch (  IOException ex) {
  }
}",0.6126418152350082
65887,"public DataExtractionTaskV1(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  ReportDocumentReader reportDocReaderImpl=(ReportDocumentReader)reader;
  Report reportIR=reportDocReaderImpl.getReportIR(executionContext.getReportDesign());
  executionContext.setReport(reportIR);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  ClassLoader classLoader=executionContext.getApplicationClassLoader();
  setParameters(reportDocReaderImpl.loadParameters(classLoader));
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReaderImpl.loadVariables(classLoader));
}","public DataExtractionTaskV1(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  ReportDocumentReader reportDocReaderImpl=(ReportDocumentReader)reader;
  Report reportIR=reportDocReaderImpl.getReportIR(executionContext.getReportDesign());
  executionContext.setReport(reportIR);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  ClassLoader classLoader=executionContext.getApplicationClassLoader();
  setParameters(reportDocReaderImpl.loadParameters(classLoader));
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReaderImpl.loadVariables(classLoader));
  loadReportVariable();
}",0.9869281045751634
65888,"public Binding(String name,IBaseExpression expr){
  this.name=name;
  this.expr=expr;
  this.aggregateOn=new ArrayList();
  this.argument=new LinkedHashMap();
  this.orderedArgument=new ArrayList();
  if (expr != null)   this.dataType=expr.getDataType();
 else   this.dataType=DataType.ANY_TYPE;
  this.exportable=true;
}","public Binding(String name,IBaseExpression expr){
  this.name=name;
  this.expr=expr;
  this.aggregateOn=new ArrayList<String>();
  this.argument=new LinkedHashMap<String,IBaseExpression>();
  this.orderedArgument=new ArrayList<IBaseExpression>();
  if (expr != null)   this.dataType=expr.getDataType();
 else   this.dataType=DataType.ANY_TYPE;
  this.exportable=true;
}",0.9290882778581766
65889,"private void createBindingsForCalculatedMeasures(ICubeQueryDefinition cqd) throws DataException {
  List<String> levelNames=new ArrayList();
  List aggrOns=org.eclipse.birt.data.engine.olap.query.view.CubeQueryDefinitionUtil.populateMeasureAggrOns(cqd);
  for (int i=0; i < aggrOns.size(); i++) {
    DimLevel level=(DimLevel)aggrOns.get(i);
    levelNames.add(ExpressionUtil.createJSDimensionExpression(level.getDimensionName(),level.getLevelName()));
  }
  List measures=cqd.getMeasures();
  Map measureMap=new HashMap();
  for (int i=0; i < measures.size(); i++) {
    measureMap.put(((MeasureDefinition)measures.get(i)).getName(),measures.get(i));
  }
  List calculatedMeasures=cqd.getDerivedMeasures();
  Map derivedMeasureMap=new HashMap();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureMap.put(((DerivedMeasureDefinition)calculatedMeasures.get(i)).getName(),calculatedMeasures.get(i));
  }
  Map createdBindings=new HashMap();
  List bindingsInCubeQuery=cqd.getBindings();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    DerivedMeasureDefinition measureDefinition=(DerivedMeasureDefinition)calculatedMeasures.get(i);
    List referencedMeasures=ExpressionCompilerUtil.extractColumnExpression(measureDefinition.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < referencedMeasures.size(); j++) {
      String measureName=referencedMeasures.get(j).toString();
      if (measureMap.containsKey(measureName)) {
        if (!createdBindings.containsKey(measureName)) {
          MeasureDefinition md=(MeasureDefinition)measureMap.get(measureName);
          IBinding newBinding=new Binding(""String_Node_Str"" + measureName);
          newBinding.setDataType(md.getDataType());
          newBinding.setExpression(new ScriptExpression(ExpressionUtil.createJSMeasureExpression(measureName)));
          newBinding.setAggrFunction(getRollUpAggregationFunctionName(md.getAggrFunction()));
          for (int a=0; a < levelNames.size(); a++)           newBinding.addAggregateOn(levelNames.get(a));
          IBinding b=getSameBindingInQuery(newBinding,bindingsInCubeQuery);
          if (b != null) {
            createdBindings.put(measureName,b);
          }
 else {
            createdBindings.put(measureName,newBinding);
            realBindings.add(newBinding);
          }
        }
      }
    }
  }
  for (int i=0; i < bindingsInCubeQuery.size(); i++) {
    IBinding binding=(IBinding)bindingsInCubeQuery.get(i);
    ScriptExpression expression=(ScriptExpression)binding.getExpression();
    List measureName=ExpressionCompilerUtil.extractColumnExpression(expression,ExpressionUtil.MEASURE_INDICATOR);
    if (measureName != null && measureName.size() > 0 && derivedMeasureMap.containsKey(measureName.get(0).toString())) {
      expression.setText(""String_Node_Str"" + ((ScriptExpression)((DerivedMeasureDefinition)derivedMeasureMap.get(measureName.get(0).toString())).getExpression()).getText() + ""String_Node_Str"");
      expression.setText(getReplacedExpressionText(expression.getText(),measureMap,derivedMeasureMap,createdBindings,binding,bindingsInCubeQuery));
      expression.setText(expression.getText().substring(1,expression.getText().length() - 1));
      binding.getAggregatOns().clear();
      binding.setAggrFunction(null);
    }
  }
}","private void createBindingsForCalculatedMeasures(List bindingsInCubeQuery,List measures,List calculatedMeasures,List aggrOns) throws DataException {
  List<String> levelNames=new ArrayList();
  for (int i=0; i < aggrOns.size(); i++) {
    DimLevel level=(DimLevel)aggrOns.get(i);
    levelNames.add(ExpressionUtil.createJSDimensionExpression(level.getDimensionName(),level.getLevelName()));
  }
  Map measureMap=new HashMap();
  for (int i=0; i < measures.size(); i++) {
    measureMap.put(((MeasureDefinition)measures.get(i)).getName(),measures.get(i));
  }
  Map derivedMeasureMap=new HashMap();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureMap.put(((DerivedMeasureDefinition)calculatedMeasures.get(i)).getName(),calculatedMeasures.get(i));
  }
  Map createdBindings=new HashMap();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    DerivedMeasureDefinition measureDefinition=(DerivedMeasureDefinition)calculatedMeasures.get(i);
    List referencedMeasures=ExpressionCompilerUtil.extractColumnExpression(measureDefinition.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < referencedMeasures.size(); j++) {
      String measureName=referencedMeasures.get(j).toString();
      if (measureMap.containsKey(measureName)) {
        if (!createdBindings.containsKey(measureName)) {
          MeasureDefinition md=(MeasureDefinition)measureMap.get(measureName);
          IBinding newBinding=new Binding(""String_Node_Str"" + measureName);
          newBinding.setDataType(md.getDataType());
          newBinding.setExpression(new ScriptExpression(ExpressionUtil.createJSMeasureExpression(measureName)));
          newBinding.setAggrFunction(getRollUpAggregationFunctionName(md.getAggrFunction()));
          for (int a=0; a < levelNames.size(); a++)           newBinding.addAggregateOn(levelNames.get(a));
          IBinding b=getSameBindingInQuery(newBinding,bindingsInCubeQuery);
          if (b != null) {
            createdBindings.put(measureName,b);
          }
 else {
            createdBindings.put(measureName,newBinding);
            realBindings.add(newBinding);
          }
        }
      }
    }
  }
  for (int i=0; i < bindingsInCubeQuery.size(); i++) {
    IBinding binding=(IBinding)bindingsInCubeQuery.get(i);
    ScriptExpression expression=cloneExpression((ScriptExpression)binding.getExpression());
    List measureName=ExpressionCompilerUtil.extractColumnExpression(expression,ExpressionUtil.MEASURE_INDICATOR);
    if (measureName != null && measureName.size() > 0 && derivedMeasureMap.containsKey(measureName.get(0).toString())) {
      expression.setText(""String_Node_Str"" + ((ScriptExpression)((DerivedMeasureDefinition)derivedMeasureMap.get(measureName.get(0).toString())).getExpression()).getText() + ""String_Node_Str"");
      expression.setText(getReplacedExpressionText(expression.getText(),measureMap,derivedMeasureMap,createdBindings,binding,bindingsInCubeQuery));
      expression.setText(expression.getText().substring(1,expression.getText().length() - 1));
      binding.getAggregatOns().clear();
      binding.setAggrFunction(null);
      binding.setExpression(expression);
    }
  }
}",0.9409224124633656
65890,"/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveFilterDefn(OutputStream outputStream,List filterList) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=filterList == null ? 0 : filterList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IFilterDefinition filterDefn=(IFilterDefinition)filterList.get(i);
      ExprUtil.saveBaseExpr(dos,filterDefn.getExpression());
      IOUtil.writeBool(dos,filterDefn.updateAggregation());
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveFilterDefn(OutputStream outputStream,List filterList,int version) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=filterList == null ? 0 : filterList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IFilterDefinition filterDefn=(IFilterDefinition)filterList.get(i);
      ExprUtil.saveBaseExpr(dos,filterDefn.getExpression());
      if (version >= VersionManager.VERSION_2_6_3_1)       IOUtil.writeBool(dos,filterDefn.updateAggregation());
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9541284403669724
65891,"/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveGroupDefn(OutputStream outputStream,List groupList,int version) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=groupList == null ? 0 : groupList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IGroupDefinition groupDefn=(IGroupDefinition)groupList.get(i);
      IOUtil.writeString(dos,groupDefn.getName());
      IOUtil.writeString(dos,groupDefn.getKeyColumn());
      IOUtil.writeString(dos,groupDefn.getKeyExpression());
      IOUtil.writeInt(dos,groupDefn.getInterval());
      IOUtil.writeDouble(dos,groupDefn.getIntervalRange());
      IOUtil.writeInt(dos,groupDefn.getSortDirection());
      FilterDefnUtil.saveFilterDefn(dos,groupDefn.getFilters());
      QueryDefnIOUtil.saveSorts(dos,groupDefn.getSorts(),version);
      QueryDefnIOUtil.saveSubQuery(dos,groupDefn.getSubqueries(),version);
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveGroupDefn(OutputStream outputStream,List groupList,int version) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=groupList == null ? 0 : groupList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IGroupDefinition groupDefn=(IGroupDefinition)groupList.get(i);
      IOUtil.writeString(dos,groupDefn.getName());
      IOUtil.writeString(dos,groupDefn.getKeyColumn());
      IOUtil.writeString(dos,groupDefn.getKeyExpression());
      IOUtil.writeInt(dos,groupDefn.getInterval());
      IOUtil.writeDouble(dos,groupDefn.getIntervalRange());
      IOUtil.writeInt(dos,groupDefn.getSortDirection());
      FilterDefnUtil.saveFilterDefn(dos,groupDefn.getFilters(),version);
      QueryDefnIOUtil.saveSorts(dos,groupDefn.getSorts(),version);
      QueryDefnIOUtil.saveSubQuery(dos,groupDefn.getSubqueries(),version);
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9963833634719712
65892,"/** 
 * @param outputStream
 * @param queryDefn
 * @throws DataException
 * @throws IOException
 */
static void saveBaseQueryDefn(OutputStream outputStream,IBaseQueryDefinition queryDefn,int version) throws DataException {
  try {
    saveBinding(outputStream,queryDefn.getBindings(),version);
    FilterDefnUtil.saveFilterDefn(outputStream,queryDefn.getFilters());
    GroupDefnUtil.saveGroupDefn(outputStream,queryDefn.getGroups(),version);
    saveSorts(outputStream,queryDefn.getSorts(),version);
    IOUtil.writeInt(outputStream,queryDefn.getMaxRows());
    IOUtil.writeBool(outputStream,queryDefn.usesDetails());
    if (version >= VersionManager.VERSION_2_5_2_1)     IOUtil.writeBool(outputStream,queryDefn.cacheQueryResults());
    saveSubQuery(outputStream,queryDefn.getSubqueries(),version);
    saveQueryExecutionHints(outputStream,queryDefn.getQueryExecutionHints(),version);
    saveSummaryTableInfo(outputStream,queryDefn,version);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @param outputStream
 * @param queryDefn
 * @throws DataException
 * @throws IOException
 */
static void saveBaseQueryDefn(OutputStream outputStream,IBaseQueryDefinition queryDefn,int version) throws DataException {
  try {
    saveBinding(outputStream,queryDefn.getBindings(),version);
    FilterDefnUtil.saveFilterDefn(outputStream,queryDefn.getFilters(),version);
    GroupDefnUtil.saveGroupDefn(outputStream,queryDefn.getGroups(),version);
    saveSorts(outputStream,queryDefn.getSorts(),version);
    IOUtil.writeInt(outputStream,queryDefn.getMaxRows());
    IOUtil.writeBool(outputStream,queryDefn.usesDetails());
    if (version >= VersionManager.VERSION_2_5_2_1)     IOUtil.writeBool(outputStream,queryDefn.cacheQueryResults());
    saveSubQuery(outputStream,queryDefn.getSubqueries(),version);
    saveQueryExecutionHints(outputStream,queryDefn.getQueryExecutionHints(),version);
    saveSummaryTableInfo(outputStream,queryDefn,version);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9961904761904762
65893,"public void onValidate(int type,Object model){
  if (type == ICrosstabModelListener.MEASURE_DETAIL && model instanceof AggregationCellHandle) {
    AggregationCellHandle cellHandle=(AggregationCellHandle)model;
    if (cellHandle.getContents().size() == 1 && cellHandle.getContents().get(0) instanceof DataItemHandle) {
      MeasureViewHandle measureView=(MeasureViewHandle)cellHandle.getContainer();
      DataItemHandle dataItem=(DataItemHandle)cellHandle.getContents().get(0);
      CrosstabAdaptUtil.formatDataItem(measureView.getCubeMeasure(),dataItem);
      ActionHandle actionHandle=measureView.getCubeMeasure().getActionHandle();
      if (actionHandle != null) {
        try {
          dataItem.setAction((Action)actionHandle.getStructure().copy());
        }
 catch (        SemanticException e) {
          ExceptionUtil.handle(e);
        }
      }
    }
  }
}","public void onValidate(int type,Object model){
  if (type == ICrosstabModelListener.MEASURE_DETAIL && model instanceof AggregationCellHandle) {
    AggregationCellHandle cellHandle=(AggregationCellHandle)model;
    if (cellHandle.getContents().size() == 1 && cellHandle.getContents().get(0) instanceof DataItemHandle) {
      MeasureViewHandle measureView=(MeasureViewHandle)cellHandle.getContainer();
      DataItemHandle dataItem=(DataItemHandle)cellHandle.getContents().get(0);
      CrosstabAdaptUtil.formatDataItem(measureView.getCubeMeasure(),dataItem);
      if (measureView.getCubeMeasure() == null) {
        return;
      }
      ActionHandle actionHandle=measureView.getCubeMeasure().getActionHandle();
      if (actionHandle != null) {
        try {
          dataItem.setAction((Action)actionHandle.getStructure().copy());
        }
 catch (        SemanticException e) {
          ExceptionUtil.handle(e);
        }
      }
    }
  }
}",0.9594298245614036
65894,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_FILTER_LIMIT,FILTER_LIMIT_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_AUTO_DEL_BINDINGS,AUTO_DEL_BINDING_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(CUBE_BUILDER_WARNING_PREFERENCE,MessageDialogWithToggle.PROMPT);
  CrosstabModelUtil.setCrosstabModelListener(new ICrosstabModelListener(){
    public void onCreated(    int type,    Object model){
      if (type == ICrosstabModelListener.MEASURE_HEADER && model instanceof CrosstabCellHandle) {
        CrosstabCellHandle cellHandle=((CrosstabCellHandle)model);
        if (cellHandle.getContents().size() > 0) {
          return;
        }
        LabelHandle labelHandle=DesignElementFactory.getInstance(cellHandle.getModuleHandle()).newLabel(null);
        try {
          labelHandle.setText(((MeasureViewHandle)cellHandle.getContainer()).getCubeMeasureName());
          cellHandle.addContent(labelHandle);
        }
 catch (        SemanticException e) {
          ExceptionUtil.handle(e);
        }
      }
    }
    public void onValidate(    int type,    Object model){
      if (type == ICrosstabModelListener.MEASURE_DETAIL && model instanceof AggregationCellHandle) {
        AggregationCellHandle cellHandle=(AggregationCellHandle)model;
        if (cellHandle.getContents().size() == 1 && cellHandle.getContents().get(0) instanceof DataItemHandle) {
          MeasureViewHandle measureView=(MeasureViewHandle)cellHandle.getContainer();
          DataItemHandle dataItem=(DataItemHandle)cellHandle.getContents().get(0);
          CrosstabAdaptUtil.formatDataItem(measureView.getCubeMeasure(),dataItem);
          ActionHandle actionHandle=measureView.getCubeMeasure().getActionHandle();
          if (actionHandle != null) {
            try {
              dataItem.setAction((Action)actionHandle.getStructure().copy());
            }
 catch (            SemanticException e) {
              ExceptionUtil.handle(e);
            }
          }
        }
      }
    }
  }
);
}","/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_FILTER_LIMIT,FILTER_LIMIT_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_AUTO_DEL_BINDINGS,AUTO_DEL_BINDING_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(CUBE_BUILDER_WARNING_PREFERENCE,MessageDialogWithToggle.PROMPT);
  CrosstabModelUtil.setCrosstabModelListener(new ICrosstabModelListener(){
    public void onCreated(    int type,    Object model){
      if (type == ICrosstabModelListener.MEASURE_HEADER && model instanceof CrosstabCellHandle) {
        CrosstabCellHandle cellHandle=((CrosstabCellHandle)model);
        if (cellHandle.getContents().size() > 0) {
          return;
        }
        LabelHandle labelHandle=DesignElementFactory.getInstance(cellHandle.getModuleHandle()).newLabel(null);
        try {
          labelHandle.setText(((MeasureViewHandle)cellHandle.getContainer()).getCubeMeasureName());
          cellHandle.addContent(labelHandle);
        }
 catch (        SemanticException e) {
          ExceptionUtil.handle(e);
        }
      }
    }
    public void onValidate(    int type,    Object model){
      if (type == ICrosstabModelListener.MEASURE_DETAIL && model instanceof AggregationCellHandle) {
        AggregationCellHandle cellHandle=(AggregationCellHandle)model;
        if (cellHandle.getContents().size() == 1 && cellHandle.getContents().get(0) instanceof DataItemHandle) {
          MeasureViewHandle measureView=(MeasureViewHandle)cellHandle.getContainer();
          DataItemHandle dataItem=(DataItemHandle)cellHandle.getContents().get(0);
          CrosstabAdaptUtil.formatDataItem(measureView.getCubeMeasure(),dataItem);
          if (measureView.getCubeMeasure() == null) {
            return;
          }
          ActionHandle actionHandle=measureView.getCubeMeasure().getActionHandle();
          if (actionHandle != null) {
            try {
              dataItem.setAction((Action)actionHandle.getStructure().copy());
            }
 catch (            SemanticException e) {
              ExceptionUtil.handle(e);
            }
          }
        }
      }
    }
  }
);
}",0.981655290102389
65895,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getMode() == DataEngineContext.MODE_GENERATION) {
        VersionManager vm=new VersionManager(context);
        int version=vm.getVersion();
        if (vm.getVersion() == VersionManager.VERSION_2_0) {
          version=VersionManager.getLatestVersion();
        }
        vm.setVersion(version);
      }
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
catch (    DataException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.9167041873030166
65896,"public void end() throws SAXException {
  super.end();
  if (handler.versionNumber < VersionUtil.VERSION_3_2_13) {
    ((ModuleNameHelper)handler.module.getNameHelper()).addCachedLevel(getElement());
  }
}","public void end() throws SAXException {
  super.end();
  if (handler.versionNumber < VersionUtil.VERSION_3_2_13) {
    ((ModuleNameHelper)handler.module.getNameHelper()).addCachedLevel(getElement());
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_23 && getElement().getProperty(handler.module,ILevelModel.DATE_TIME_LEVEL_TYPE) != null) {
    boolean isFound=false;
    ElementPropertyDefn attributesPropertyDefn=getElement().getPropertyDefn(ILevelModel.ATTRIBUTES_PROP);
    List attrs=(List)getElement().getProperty(handler.module,attributesPropertyDefn);
    if (attrs != null) {
      for (int i=0; i < attrs.size(); i++) {
        LevelAttribute attr=(LevelAttribute)attrs.get(i);
        if (LevelAttribute.DATE_TIME_ATTRIBUTE_NAME.equals(attr.getName())) {
          isFound=true;
          break;
        }
      }
    }
    if (!isFound) {
      Structure struct=null;
      if (getElement() instanceof TabularLevel) {
        LevelAttribute attribute=new LevelAttribute();
        attribute.setName(LevelAttribute.DATE_TIME_ATTRIBUTE_NAME);
        attribute.setDataType(getDataType((TabularLevel)this.getElement()));
        struct=attribute;
      }
 else       if (getElement() instanceof OdaLevel) {
        OdaLevelAttribute attribute=new OdaLevelAttribute();
        attribute.setName(LevelAttribute.DATE_TIME_ATTRIBUTE_NAME);
        attribute.setDataType(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME);
        struct=attribute;
      }
      if (attributesPropertyDefn != null && struct != null) {
        ArrayList list=new ArrayList();
        list.add(struct);
        getElement().setProperty(attributesPropertyDefn,list);
      }
    }
  }
}",0.2178533475026567
65897,"/** 
 * Sets the default theme
 * @param elementHandle
 */
public static void setDefaultTheme(DesignElementHandle elementHandle){
  if (elementHandle instanceof ReportItemHandle && hasDefaultLibrary(elementHandle.getModuleHandle())) {
    ReportItemHandle reportItemHandle=(ReportItemHandle)elementHandle;
    PropertyHandle propertyHandle=reportItemHandle.getPropertyHandle(ReportItemHandle.THEME_PROP);
    List list=propertyHandle.getReferenceableElementList();
    String preFileName=getDefultLibraryFileName();
    for (int i=0; i < list.size(); i++) {
      ReportItemThemeHandle itemHandle=(ReportItemThemeHandle)list.get(i);
      if (itemHandle.getQualifiedName().startsWith(preFileName)) {
        try {
          if (propertyHandle.getValue() != null)           propertyHandle.setValue(itemHandle.getQualifiedName());
          break;
        }
 catch (        SemanticException e) {
        }
      }
    }
  }
}","/** 
 * Sets the default theme
 * @param elementHandle
 */
public static void setDefaultTheme(DesignElementHandle elementHandle){
  if (elementHandle instanceof ReportItemHandle && hasDefaultLibrary(elementHandle.getModuleHandle())) {
    ReportItemHandle reportItemHandle=(ReportItemHandle)elementHandle;
    PropertyHandle propertyHandle=reportItemHandle.getPropertyHandle(ReportItemHandle.THEME_PROP);
    List list=propertyHandle.getReferenceableElementList();
    String preFileName=getDefultLibraryFileName();
    for (int i=0; i < list.size(); i++) {
      ReportItemThemeHandle itemHandle=(ReportItemThemeHandle)list.get(i);
      if (itemHandle.getQualifiedName().startsWith(preFileName)) {
        try {
          if (propertyHandle.getValue() == null)           propertyHandle.setValue(itemHandle.getQualifiedName());
          break;
        }
 catch (        SemanticException e) {
        }
      }
    }
  }
}",0.9989177489177488
65898,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    Driver driver=DriverManager.getDriver(url);
    if (driver != null)     return driver.connect(url,connectionProperties);
  }
 catch (  SQLException e1) {
    if (""String_Node_Str"".equals(e1.getSQLState()))     throw e1;
  }
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  SQLException e) {
    try {
      DriverClassLoader dl=new DriverClassLoader(driverClassPath,Thread.currentThread().getContextClassLoader());
      Class dc=dl.loadClass(driverClass);
      if (dc != null)       return ((Driver)dc.newInstance()).connect(url,connectionProperties);
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
 catch (    Exception e1) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
    }
  }
}",0.8741151123422591
65899,"public DriverClassLoader(Collection<String> driverClassPath) throws OdaException {
  super(new URL[0],DriverClassLoader.class.getClassLoader());
  logger.entering(DriverClassLoader.class.getName(),""String_Node_Str"");
  this.driverClassPath=driverClassPath;
  refreshURLs();
}","public DriverClassLoader(Collection<String> driverClassPath,ClassLoader parent) throws OdaException {
  super(new URL[0],parent != null ? parent : DriverClassLoader.class.getClassLoader());
  logger.entering(DriverClassLoader.class.getName(),""String_Node_Str"");
  this.driverClassPath=driverClassPath;
  refreshURLs();
}",0.9243697478991596
65900,"public Object[] getChildren(Object parent){
  Object[] children=super.getChildren(parent);
  if (CURRENT_CUBE.equals(parent)) {
    ExpressionFilter ft=new ExpressionFilter(){
      public boolean select(      Object parentElement,      Object element){
        if (CURRENT_CUBE.equals(parentElement) && element instanceof PropertyHandle) {
          if (((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP)) {
            return true;
          }
          return false;
        }
        return true;
      }
    }
;
    children=ft.filter(parent,children);
  }
  return children;
}","public Object[] getChildren(Object parent){
  Object[] children=super.getChildren(parent);
  if (CURRENT_CUBE.equals(parent)) {
    ExpressionFilter ft=new ExpressionFilter(){
      public boolean select(      Object parentElement,      Object element){
        if (CURRENT_CUBE.equals(parentElement) && element instanceof PropertyHandle) {
          if (((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP)) {
            return true;
          }
          return false;
        }
        return true;
      }
    }
;
    children=ft.filter(parent,children);
  }
 else   if (parent instanceof MeasureGroupHandle) {
    ExpressionFilter ft=new ExpressionFilter(){
      public boolean select(      Object parentElement,      Object element){
        if (!isDerivedMeasure()) {
          return true;
        }
        if (!(elementHandle instanceof MeasureHandle)) {
          return true;
        }
        CubeHandle cubeHandle=(CubeHandle)((MeasureGroupHandle)parentElement).getContainer();
        List<MeasureHandle> measureHnadles=new ArrayList<MeasureHandle>();
        try {
          measureHnadles=CubeMeasureUtil.getIndependentReferences(cubeHandle,elementHandle.getName());
        }
 catch (        BirtException e) {
          return true;
        }
        if (measureHnadles.contains(element)) {
          return true;
        }
        return false;
      }
    }
;
    children=ft.filter(parent,children);
  }
  return children;
}",0.5757575757575758
65901,"public boolean select(Object parentElement,Object element){
  if (CURRENT_CUBE.equals(parentElement) && element instanceof PropertyHandle) {
    if (((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP)) {
      return true;
    }
    return false;
  }
  return true;
}","public boolean select(Object parentElement,Object element){
  if (!isDerivedMeasure()) {
    return true;
  }
  if (!(elementHandle instanceof MeasureHandle)) {
    return true;
  }
  CubeHandle cubeHandle=(CubeHandle)((MeasureGroupHandle)parentElement).getContainer();
  List<MeasureHandle> measureHnadles=new ArrayList<MeasureHandle>();
  try {
    measureHnadles=CubeMeasureUtil.getIndependentReferences(cubeHandle,elementHandle.getName());
  }
 catch (  BirtException e) {
    return true;
  }
  if (measureHnadles.contains(element)) {
    return true;
  }
  return false;
}",0.27313769751693
65902,"private void createAggregateSection(Composite composite){
  new Label(composite,SWT.NONE).setText(FUNCTION);
  cmbFunction=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  cmbFunction.setLayoutData(gd);
  cmbFunction.setVisibleItemCount(30);
  cmbFunction.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      modifyDialogContent();
      validate();
    }
  }
);
  paramsComposite=new Composite(composite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=4;
  gridData.exclude=true;
  paramsComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=4;
  Layout parentLayout=paramsComposite.getParent().getLayout();
  if (parentLayout instanceof GridLayout)   layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
  paramsComposite.setLayout(layout);
  new Label(composite,SWT.NONE).setText(FILTER_CONDITION);
  txtFilter=new Text(composite,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  txtFilter.setLayoutData(gridData);
  txtFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
    }
  }
);
  createExpressionButton(composite,txtFilter);
{
    Label lblAggOn=new Label(composite,SWT.NONE);
    lblAggOn.setText(AGGREGATE_ON);
    gridData=new GridData();
    gridData.verticalAlignment=GridData.BEGINNING;
    lblAggOn.setLayoutData(gridData);
    cmbAggOn=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=3;
    cmbAggOn.setLayoutData(gridData);
    cmbAggOn.setVisibleItemCount(30);
    cmbAggOn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        modifyDialogContent();
      }
    }
);
  }
}","private void createAggregateSection(Composite composite){
  new Label(composite,SWT.NONE).setText(FUNCTION);
  cmbFunction=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  cmbFunction.setLayoutData(gd);
  cmbFunction.setVisibleItemCount(30);
  cmbFunction.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      modifyDialogContent();
      validate();
    }
  }
);
  paramsComposite=new Composite(composite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=4;
  gridData.exclude=true;
  paramsComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=4;
  Layout parentLayout=paramsComposite.getParent().getLayout();
  if (parentLayout instanceof GridLayout)   layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
  paramsComposite.setLayout(layout);
  new Label(composite,SWT.NONE).setText(FILTER_CONDITION);
  txtFilter=new Text(composite,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  txtFilter.setLayoutData(gridData);
  txtFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
    }
  }
);
  IExpressionProvider filterExpressionProvider=new CrosstabAggregationExpressionProvider(this.bindingHolder,this.binding){
    protected List getChildrenList(    Object parent){
      List children=super.getChildrenList(parent);
      List retValue=new ArrayList();
      retValue.addAll(children);
      if (parent instanceof MeasureGroupHandle) {
        for (int i=0; i < children.size(); i++) {
          Object obj=children.get(i);
          if (obj instanceof MeasureHandle && ((MeasureHandle)obj).isCalculated()) {
            retValue.remove(obj);
          }
        }
      }
      return retValue;
    }
  }
;
  ExpressionButtonUtil.createExpressionButton(composite,txtFilter,filterExpressionProvider,this.bindingHolder);
{
    Label lblAggOn=new Label(composite,SWT.NONE);
    lblAggOn.setText(AGGREGATE_ON);
    gridData=new GridData();
    gridData.verticalAlignment=GridData.BEGINNING;
    lblAggOn.setLayoutData(gridData);
    cmbAggOn=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=3;
    cmbAggOn.setLayoutData(gridData);
    cmbAggOn.setVisibleItemCount(30);
    cmbAggOn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        modifyDialogContent();
      }
    }
);
  }
}",0.8550062318238472
65903,"public long getTotalPage() throws EngineException {
  checkRunningErrors();
  LogicalPageSequence visiblePages=loadVisiblePages();
  if (visiblePages != null) {
    return visiblePages.getTotalVisiblePageCount();
  }
  return reportDocument.getPageCount();
}","public long getTotalPage() throws EngineException {
  LogicalPageSequence visiblePages=loadVisiblePages();
  if (visiblePages != null) {
    return visiblePages.getTotalVisiblePageCount();
  }
  return reportDocument.getPageCount();
}",0.951219512195122
65904,"public RunStatusReader(IReportDocument document){
  try {
    IDocArchiveReader reader=document.getArchive();
    runStatusStream=reader.getStream(ReportDocumentConstants.RUN_STATUS_STREAM);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"");
    close();
  }
}","public RunStatusReader(IReportDocument document){
  try {
    IDocArchiveReader reader=document.getArchive();
    boolean existStream=reader.exists(ReportDocumentConstants.RUN_STATUS_STREAM);
    if (existStream) {
      runStatusStream=reader.getStream(ReportDocumentConstants.RUN_STATUS_STREAM);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"");
    close();
  }
}",0.784370477568741
65905,"public String getStuats(){
  if (runStatusStream == null) {
    return null;
  }
  try {
    DataInputStream in=new DataInputStream(runStatusStream);
    int errorSize=IOUtil.readInt(in);
    StringBuilder message=new StringBuilder();
    for (int i=0; i < errorSize; i++) {
      message.append(IOUtil.readString(in)).append(System.getProperty(""String_Node_Str""));
    }
    return message.toString();
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
  return null;
}","public String getStuats(){
  if (runStatusStream == null) {
    return null;
  }
  try {
    DataInputStream in=new DataInputStream(runStatusStream);
    int errorSize=IOUtil.readInt(in);
    if (errorSize > 0) {
      StringBuilder message=new StringBuilder();
      for (int i=0; i < errorSize; i++) {
        message.append(IOUtil.readString(in)).append(""String_Node_Str"");
      }
      return message.toString();
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
  return null;
}",0.8860759493670886
65906,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (progressMonitor != null) {
    progressMonitor.onProgress(IProgressMonitor.START_TASK,TASK_RUN);
  }
  loadDataSource();
  doValidateParameters();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(design.getLayoutPreference())) {
    executionContext.setFixedLayout(true);
    setupRenderOption();
    updateRtLFlag();
  }
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  ArrayList<String> errList=new ArrayList<String>();
  RunStatusWriter statusWriter=null;
  try {
    statusWriter=new RunStatusWriter(archiveWriter);
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=createReportExtensionExecutor(executor);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      if (executionContext.isFixedLayout()) {
        executor=new LocalizedReportExecutor(executionContext,executor);
      }
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Throwable t) {
    errList.add(t.getLocalizedMessage());
    handleFatalExceptions(t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    List<Exception> list=(List<Exception>)executionContext.getAllErrors();
    if (list != null) {
      for (      Exception ex : list) {
        errList.add(ex.getLocalizedMessage());
      }
    }
    if (statusWriter != null && !errList.isEmpty()) {
      statusWriter.writeRunTaskStatus(errList);
    }
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    writer.finish();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
    if (progressMonitor != null) {
      progressMonitor.onProgress(IProgressMonitor.END_TASK,TASK_RUN);
    }
    closeReportDocument();
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (progressMonitor != null) {
    progressMonitor.onProgress(IProgressMonitor.START_TASK,TASK_RUN);
  }
  loadDataSource();
  doValidateParameters();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(design.getLayoutPreference())) {
    executionContext.setFixedLayout(true);
    setupRenderOption();
    updateRtLFlag();
  }
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  ArrayList<String> errList=new ArrayList<String>();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=createReportExtensionExecutor(executor);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      if (executionContext.isFixedLayout()) {
        executor=new LocalizedReportExecutor(executionContext,executor);
      }
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Throwable t) {
    errList.add(t.getLocalizedMessage());
    handleFatalExceptions(t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    List<Exception> list=(List<Exception>)executionContext.getAllErrors();
    if (list != null) {
      for (      Exception ex : list) {
        errList.add(ex.getLocalizedMessage());
      }
    }
    if (!errList.isEmpty()) {
      RunStatusWriter statusWriter=new RunStatusWriter(archiveWriter);
      statusWriter.writeRunTaskStatus(errList);
      statusWriter.close();
    }
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    writer.finish();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
    if (progressMonitor != null) {
      progressMonitor.onProgress(IProgressMonitor.END_TASK,TASK_RUN);
    }
    closeReportDocument();
  }
}",0.9614931898436186
65907,"private Series getConvertedSeries(Series series,int seriesIndex){
  if (series.getClass().getName().equals(SeriesImpl.class.getName())) {
    return series;
  }
  PieSeries pieseries=(PieSeries)ChartCacheManager.getInstance().findSeries(PieSeriesImpl.class.getName(),seriesIndex);
  if (pieseries == null) {
    pieseries=(PieSeries)getSeries(false);
  }
  ChartUIUtil.copyGeneralSeriesAttributes(series,pieseries);
  return pieseries;
}","protected Series getConvertedSeries(Series series,int seriesIndex){
  if (series.getClass().getName().equals(SeriesImpl.class.getName())) {
    return series;
  }
  PieSeries pieseries=(PieSeries)ChartCacheManager.getInstance().findSeries(PieSeriesImpl.class.getName(),seriesIndex);
  if (pieseries == null) {
    pieseries=(PieSeries)getSeries(false);
  }
  ChartUIUtil.copyGeneralSeriesAttributes(series,pieseries);
  return pieseries;
}",0.9863013698630136
65908,"/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBEROWLEVEL,DEFAULT_MAX_CUBEROWLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL,DEFAULT_MAX_CUBECOLUMNLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXINMEMORYCUBESIZE,DEFAULT_MAX_IN_MEMORY_CUBE_SIZE);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
  plugin.getPluginPreferences().setDefault(WebViewer.USER_TIME_ZONE,TimeZone.getDefault().getID());
  plugin.getPluginPreferences().setDefault(WebViewer.BIDI_ORIENTATION,WebViewer.BIDI_ORIENTATION_AUTO);
  if (plugin.getStateLocation() != null)   System.setProperty(BIRT_VIEWER_WORKING_PATH,plugin.getStateLocation().toOSString());
  String rootPath=getFilePath(""String_Node_Str"");
  if (rootPath != null)   System.setProperty(BIRT_VIEWER_ROOT_PATH,rootPath);
  System.setProperty(BIRT_IS_DESIGNER,""String_Node_Str"");
  WebViewer.getCurrentWebApp();
}","/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBEROWLEVEL,DEFAULT_MAX_CUBEROWLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL,DEFAULT_MAX_CUBECOLUMNLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXINMEMORYCUBESIZE,DEFAULT_MAX_IN_MEMORY_CUBE_SIZE);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getLanguage() + ""String_Node_Str"" + ULocale.getDefault().getCountry());
  plugin.getPluginPreferences().setDefault(WebViewer.USER_TIME_ZONE,TimeZone.getDefault().getID());
  plugin.getPluginPreferences().setDefault(WebViewer.BIDI_ORIENTATION,WebViewer.BIDI_ORIENTATION_AUTO);
  if (plugin.getStateLocation() != null)   System.setProperty(BIRT_VIEWER_WORKING_PATH,plugin.getStateLocation().toOSString());
  String rootPath=getFilePath(""String_Node_Str"");
  if (rootPath != null)   System.setProperty(BIRT_VIEWER_ROOT_PATH,rootPath);
  System.setProperty(BIRT_IS_DESIGNER,""String_Node_Str"");
  WebViewer.getCurrentWebApp();
}",0.9740305940946282
65909,"public long getTotalPage() throws EngineException {
  LogicalPageSequence visiblePages=loadVisiblePages();
  if (visiblePages != null) {
    return visiblePages.getTotalVisiblePageCount();
  }
  return reportDocument.getPageCount();
}","public long getTotalPage() throws EngineException {
  checkRunningErrors();
  LogicalPageSequence visiblePages=loadVisiblePages();
  if (visiblePages != null) {
    return visiblePages.getTotalVisiblePageCount();
  }
  return reportDocument.getPageCount();
}",0.951219512195122
65910,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (progressMonitor != null) {
    progressMonitor.onProgress(IProgressMonitor.START_TASK,TASK_RUN);
  }
  loadDataSource();
  doValidateParameters();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(design.getLayoutPreference())) {
    executionContext.setFixedLayout(true);
    setupRenderOption();
    updateRtLFlag();
  }
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=createReportExtensionExecutor(executor);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      if (executionContext.isFixedLayout()) {
        executor=new LocalizedReportExecutor(executionContext,executor);
      }
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Throwable t) {
    handleFatalExceptions(t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    writer.finish();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
    if (progressMonitor != null) {
      progressMonitor.onProgress(IProgressMonitor.END_TASK,TASK_RUN);
    }
    closeReportDocument();
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (progressMonitor != null) {
    progressMonitor.onProgress(IProgressMonitor.START_TASK,TASK_RUN);
  }
  loadDataSource();
  doValidateParameters();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(design.getLayoutPreference())) {
    executionContext.setFixedLayout(true);
    setupRenderOption();
    updateRtLFlag();
  }
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  ArrayList<String> errList=new ArrayList<String>();
  RunStatusWriter statusWriter=null;
  try {
    statusWriter=new RunStatusWriter(archiveWriter);
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=createReportExtensionExecutor(executor);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      if (executionContext.isFixedLayout()) {
        executor=new LocalizedReportExecutor(executionContext,executor);
      }
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Throwable t) {
    errList.add(t.getLocalizedMessage());
    handleFatalExceptions(t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    List<Exception> list=(List<Exception>)executionContext.getAllErrors();
    if (list != null) {
      for (      Exception ex : list) {
        errList.add(ex.getLocalizedMessage());
      }
    }
    if (statusWriter != null && !errList.isEmpty()) {
      statusWriter.writeRunTaskStatus(errList);
    }
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    writer.finish();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
    if (progressMonitor != null) {
      progressMonitor.onProgress(IProgressMonitor.END_TASK,TASK_RUN);
    }
    closeReportDocument();
  }
}",0.9091241543243738
65911,"/** 
 * Create query definition by report item handle.
 * @param handle
 * @param parent
 * @return
 * @throws BirtException
 */
IDataQueryDefinition createQuery(ExtendedItemHandle handle,IDataQueryDefinition parent) throws BirtException {
  IModelAdapter modelAdapter=context.getDataRequestSession().getModelAdaptor();
  if (handle.getDataSet() != null || (handle.getCube() == null && parent instanceof IBaseQueryDefinition)) {
    ReportItemHandle itemHandle=null;
    if (ChartItemUtil.isChartInheritGroups(handle)) {
      DesignElementHandle container=handle.getContainer();
      while (container != null) {
        if (container instanceof ListingHandle) {
          itemHandle=(ListingHandle)container;
          return new ChartSharingQueryHelper(handle,cm,modelAdapter).createQuery(parent);
        }
        container=container.getContainer();
      }
    }
 else {
      itemHandle=ChartItemUtil.getReportItemReference(handle);
    }
    if (itemHandle != null) {
      return new ChartSharingQueryHelper(itemHandle,cm,modelAdapter).createQuery(parent);
    }
    return new ChartBaseQueryHelper(handle,cm,modelAdapter).createBaseQuery(parent);
  }
 else   if (handle.getCube() != null || parent instanceof ICubeQueryDefinition) {
    if (handle.getContainer() instanceof MultiViewsHandle) {
      ExtendedItemHandle bindingHandle=(ExtendedItemHandle)ChartItemUtil.getReportItemReference(handle);
      IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),parent,true,true,true,true,true,true);
      return cubeQuery;
    }
    return ChartReportItemUtil.instanceCubeQueryHelper(handle,cm,modelAdapter).createCubeQuery(parent);
  }
  return null;
}","/** 
 * Create query definition by report item handle.
 * @param handle
 * @param parent
 * @return
 * @throws BirtException
 */
IDataQueryDefinition createQuery(ExtendedItemHandle handle,IDataQueryDefinition parent) throws BirtException {
  IModelAdapter modelAdapter=context.getDataRequestSession().getModelAdaptor();
  if (handle.getDataSet() != null || (handle.getCube() == null && parent instanceof IBaseQueryDefinition)) {
    ReportItemHandle itemHandle=null;
    if (ChartItemUtil.isChartInheritGroups(handle)) {
      DesignElementHandle container=handle.getContainer();
      while (container != null) {
        if (container instanceof ListingHandle) {
          itemHandle=(ListingHandle)container;
          return new ChartSharingQueryHelper(handle,cm,modelAdapter).createQuery(parent);
        }
        container=container.getContainer();
      }
    }
 else {
      itemHandle=ChartItemUtil.getReportItemReference(handle);
    }
    if (itemHandle != null) {
      return new ChartSharingQueryHelper(itemHandle,cm,modelAdapter).createQuery(parent);
    }
    return new ChartBaseQueryHelper(handle,cm,modelAdapter).createBaseQuery(parent);
  }
 else   if (handle.getCube() != null || parent instanceof ICubeQueryDefinition) {
    if (handle.getContainer() instanceof MultiViewsHandle) {
      ExtendedItemHandle bindingHandle=(ExtendedItemHandle)ChartItemUtil.getReportItemReference(handle);
      IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),parent,modelAdapter,true,true,true,true,true,true);
      return cubeQuery;
    }
    return ChartReportItemUtil.instanceCubeQueryHelper(handle,cm,modelAdapter).createCubeQuery(parent);
  }
  return null;
}",0.9939498703543648
65912,"private boolean isTitleEnabled(){
  if (btnAutoTitle != null) {
    return !getContext().getUIFactory().isSetInvisible(getChart().getTitle()) && !isAutoTitle();
  }
 else {
    return getChart().getTitle().isSetVisible() && getChart().getTitle().isVisible() && getChart().getTitle().getLabel().getCaption().getValue() != null && !isAutoTitle();
  }
}","private boolean isTitleEnabled(){
  return !getContext().getUIFactory().isSetInvisible(getChart().getTitle()) && getChart().getTitle().getLabel().getCaption().getValue() != null && !isAutoTitle();
}",0.7226277372262774
65913,"public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    if (txtTitle.getText() == null || txtTitle.getText().trim().length() == 0) {
      getChart().getTitle().getLabel().getCaption().setValue(null);
    }
 else {
      getChart().getTitle().getLabel().getCaption().setValue(txtTitle.getText());
    }
  }
 else   if (event.widget.equals(fdcFont)) {
    if (event.type == FontDefinitionComposite.FONT_CHANTED_EVENT) {
      getChart().getTitle().getLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
      getChart().getTitle().getLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
    }
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    getChart().getTitle().getLabel().getCaption().setValue(txtTitle.getText());
  }
 else   if (event.widget.equals(fdcFont)) {
    if (event.type == FontDefinitionComposite.FONT_CHANTED_EVENT) {
      getChart().getTitle().getLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
      getChart().getTitle().getLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
    }
  }
}",0.7592752372735116
65914,"public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if ((transfer.equals(DesignerPaletteFactory.AGG_TEMPLATE) || transfer.equals(DesignerPaletteFactory.TIMEPERIOD_TEMPLATE)) && target instanceof CrosstabCellEditPart) {
    CrosstabCellAdapter adapter=(CrosstabCellAdapter)((CrosstabCellEditPart)target).getModel();
    if (adapter.getCrosstabCellHandle() != null && DEUtil.isReferenceElement(adapter.getCrosstabCellHandle().getCrosstabHandle()))     return DNDService.LOGIC_FALSE;
    String posType=adapter.getPositionType();
    if (ICrosstabCellAdapterFactory.CELL_MEASURE_AGGREGATION.equals(posType) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(posType)) {
      return DNDService.LOGIC_TRUE;
    }
  }
  return DNDService.LOGIC_UNKNOW;
}","public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if ((transfer.equals(DesignerPaletteFactory.AGG_TEMPLATE) || transfer.equals(DesignerPaletteFactory.TIMEPERIOD_TEMPLATE)) && target instanceof CrosstabCellEditPart) {
    CrosstabCellAdapter adapter=(CrosstabCellAdapter)((CrosstabCellEditPart)target).getModel();
    if (adapter.getCrosstabCellHandle() != null && DEUtil.isReferenceElement(adapter.getCrosstabCellHandle().getCrosstabHandle()))     return DNDService.LOGIC_FALSE;
    String posType=adapter.getPositionType();
    if (ICrosstabCellAdapterFactory.CELL_MEASURE_AGGREGATION.equals(posType) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(posType)) {
      if (transfer.equals(DesignerPaletteFactory.TIMEPERIOD_TEMPLATE)) {
        CrosstabReportItemHandle reportHandle=adapter.getCrosstabCellHandle().getCrosstab();
        if (DEUtil.isReferenceElement(reportHandle.getCrosstabHandle())) {
          return DNDService.LOGIC_FALSE;
        }
        CubeHandle cube=reportHandle.getCube();
        if (cube == null) {
          return DNDService.LOGIC_FALSE;
        }
        if (cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP) == null) {
          return DNDService.LOGIC_FALSE;
        }
        List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
        for (int i=0; i < list.size(); i++) {
          DimensionHandle dimension=(DimensionHandle)list.get(i);
          if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
            DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
            if (viewHandle == null) {
              int count=dimension.getDefaultHierarchy().getLevelCount();
              if (count == 0) {
                continue;
              }
              LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
              if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
                return DNDService.LOGIC_TRUE;
              }
            }
 else {
              int count=viewHandle.getLevelCount();
              if (count == 0) {
                continue;
              }
              LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
              if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
                return DNDService.LOGIC_TRUE;
              }
            }
          }
        }
        return DNDService.LOGIC_FALSE;
      }
 else {
        return DNDService.LOGIC_TRUE;
      }
    }
  }
  return DNDService.LOGIC_UNKNOW;
}",0.4591508052708638
65915,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title != null && title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList<SeriesDefinition> seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title != null && title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
  if (sNewDimension != null && sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      if (series instanceof BarSeries) {
        ((BarSeries)series).setRiser(foRiserType);
      }
      series.setStacked(false);
      if ((series instanceof BarSeries) && series.isSetLabelPosition() && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title != null && title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList<SeriesDefinition> seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title != null && title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
  if (sNewDimension != null && sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      if (series instanceof BarSeries) {
        ((BarSeries)series).setRiser(foRiserType);
      }
      series.setStacked(false);
      if ((series instanceof BarSeries) && series.isSetLabelPosition() && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.990411993724214
65916,"@Override public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(fsTypeLiteral);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sDimension),sDimension == null);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  (newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=getSeries(false);
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    valueSeries.setStacked(true);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    ((newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    valueSeries.setStacked(true);
  }
 else   if (sSubType.equalsIgnoreCase(SIDE_SUBTYPE_LITERAL)) {
  }
  sdY.getSeries().add(valueSeries);
  ((newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  ChartUIUtil.setSeriesName(newChart);
  if (sDimension != null && sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  Action a=ActionImpl.create(ActionType.SHOW_TOOLTIP_LITERAL,TooltipValueImpl.create(200,""String_Node_Str""));
  Trigger e=TriggerImpl.create(TriggerCondition.ONMOUSEOVER_LITERAL,a);
  valueSeries.getTriggers().add(e);
  return newChart;
}","@Override public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(fsTypeLiteral);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sDimension),sDimension == null);
  try {
    ChartElementUtil.setDefaultValue(newChart.getAxes().get(0),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  (newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=getSeries(false);
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    valueSeries.setStacked(true);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    ((newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    valueSeries.setStacked(true);
  }
 else   if (sSubType.equalsIgnoreCase(SIDE_SUBTYPE_LITERAL)) {
  }
  sdY.getSeries().add(valueSeries);
  ((newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  ChartUIUtil.setSeriesName(newChart);
  if (sDimension != null && sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  Action a=ActionImpl.create(ActionType.SHOW_TOOLTIP_LITERAL,TooltipValueImpl.create(200,""String_Node_Str""));
  Trigger e=TriggerImpl.create(TriggerCondition.ONMOUSEOVER_LITERAL,a);
  valueSeries.getTriggers().add(e);
  return newChart;
}",0.9729073999191266
65917,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
  if (sNewDimension != null && sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
  if (sNewDimension != null && sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.990076381788657
65918,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sDimension),sDimension == null);
  Axis xAxis=newChart.getAxes().get(0);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(OVERLAY_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    Series valueSeries=getSeries(false);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
  if (sDimension != null && sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sDimension),sDimension == null);
  try {
    ChartElementUtil.setDefaultValue(newChart.getAxes().get(0),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  Axis xAxis=newChart.getAxes().get(0);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(OVERLAY_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    Series valueSeries=getSeries(false);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
  if (sDimension != null && sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}",0.9736428009441384
65919,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
      EList<Axis> axes=xAxis.getAssociatedAxes();
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType()) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).unsetPercent();
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.unsetStacked();
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),xAxis.getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.unsetStacked();
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
      EList<Axis> axes=xAxis.getAssociatedAxes();
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType()) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).unsetPercent();
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.unsetStacked();
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),xAxis.getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.unsetStacked();
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  return currentChart;
}",0.9839852470154324
65920,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",getDimensionFor(sDimension),sDimension == null);
  Axis xAxis=newChart.getAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=DifferenceSeriesImpl.createDefault();
  sdY.getSeries().add(valueSeries);
  yAxis.getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",getDimensionFor(sDimension),sDimension == null);
  try {
    ChartElementUtil.setDefaultValue(newChart.getAxes().get(0),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  Axis xAxis=newChart.getAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=DifferenceSeriesImpl.createDefault();
  sdY.getSeries().add(valueSeries);
  yAxis.getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}",0.945748987854251
65921,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.unsetStacked();
          }
        }
      }
      ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        axes.get(i).setPercent(false);
        axes.get(i).setType(AxisType.DATE_TIME_LITERAL);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.unsetStacked();
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().unsetVisible();
        series.unsetStacked();
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          axes.get(i).setPercent(false);
          EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=seriesdefinitions.get(j).getDesignTimeSeries();
            series.unsetStacked();
          }
        }
      }
      ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        axes.get(i).setPercent(false);
        axes.get(i).setType(AxisType.DATE_TIME_LITERAL);
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.unsetStacked();
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),AxisType.DATE_TIME_LITERAL));
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().unsetVisible();
        series.unsetStacked();
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}",0.9847179772158932
65922,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",getDimensionFor(sDimension),sDimension == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  Axis xAxis=newChart.getAxes().get(0);
  xAxis.getLabel().setVisible(false);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=GanttSeriesImpl.createDefault();
  sdY.getSeries().add(valueSeries);
  yAxis.getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",getDimensionFor(sDimension),sDimension == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  try {
    ChartElementUtil.setDefaultValue(newChart.getAxes().get(0),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  Axis xAxis=newChart.getAxes().get(0);
  xAxis.getLabel().setVisible(false);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=GanttSeriesImpl.createDefault();
  sdY.getSeries().add(valueSeries);
  yAxis.getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}",0.9471608832807572
65923,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
  if (sNewDimension != null && sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          axes.get(i).setPercent(true);
        }
 else {
          axes.get(i).setPercent(false);
        }
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainter.isLivePreviewActive() && axes.get(i).isSetType() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      Series series=xAxis.getSeriesDefinitions().get(0).getDesignTimeSeries();
      xAxis.getSeriesDefinitions().get(0).getSeries().clear();
      xAxis.getSeriesDefinitions().get(0).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=yAxis.getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sNewDimension),sNewDimension == null);
  if (sNewDimension != null && sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.9893030794165316
65924,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sDimension),sDimension == null);
  Axis xAxis=newChart.getAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    valueSeries.setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    valueSeries.setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(OVERLAY_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
  if (sDimension != null && sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",ChartUIUtil.getDimensionType(sDimension),sDimension == null);
  try {
    ChartElementUtil.setDefaultValue(newChart.getAxes().get(0),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  Axis xAxis=newChart.getAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    valueSeries.setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    valueSeries.setStacked(true);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(OVERLAY_SUBTYPE_LITERAL)) {
    SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
    Series valueSeries=getSeries(false);
    sdY.getSeries().add(valueSeries);
    yAxis.getSeriesDefinitions().add(sdY);
  }
  if (sDimension != null && sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.createDefault(Axis.ANCILLARY_BASE);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.createDefault();
    sdZ.getSeries().add(SeriesImpl.createDefault());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}",0.9734232447441492
65925,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.unsetPercent();
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.unsetStacked();
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.unsetPercent();
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.unsetStacked();
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),true));
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().unsetVisible();
        series.unsetStacked();
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  SeriesGrouping sg=ChartUtil.getBaseSeriesDefinitions(currentChart).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    ChartUIUtil.updateDefaultAggregations(currentChart);
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.unsetPercent();
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.unsetStacked();
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
        title.setValue(getDefaultTitle());
      }
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.unsetPercent();
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.unsetStacked();
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.createDefault();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
    ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
    try {
      ChartElementUtil.setDefaultValue(((ChartWithAxes)currentChart).getAxes().get(0),""String_Node_Str"",true);
    }
 catch (    ChartException e) {
    }
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),true));
{
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().unsetVisible();
        series.unsetStacked();
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() != null && (title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim()))) {
      title.setValue(getDefaultTitle());
    }
  }
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",newOrientation,newOrientation == null);
  ChartElementUtil.setEObjectAttribute(currentChart,""String_Node_Str"",getDimensionFor(sNewDimension),sNewDimension == null);
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  SeriesGrouping sg=ChartUtil.getBaseSeriesDefinitions(currentChart).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    ChartUIUtil.updateDefaultAggregations(currentChart);
  }
  return currentChart;
}",0.981953406978016
65926,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",getDimensionFor(sDimension),sDimension == null);
  Axis xAxis=newChart.getAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=StockSeriesImpl.createDefault();
  if (BAR_STICK_SUBTYPE_LITERAL.equals(sSubType)) {
    ((StockSeries)valueSeries).setShowAsBarStick(true);
  }
  sdY.getSeries().add(valueSeries);
  yAxis.getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.createDefault();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",orientation,orientation == null);
  ChartElementUtil.setEObjectAttribute(newChart,""String_Node_Str"",getDimensionFor(sDimension),sDimension == null);
  try {
    ChartElementUtil.setDefaultValue(newChart.getAxes().get(0),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  Axis xAxis=newChart.getAxes().get(0);
  SeriesDefinition sdX=SeriesDefinitionImpl.createDefault();
  Series categorySeries=SeriesImpl.createDefault();
  sdX.getSeries().add(categorySeries);
  xAxis.getSeriesDefinitions().add(sdX);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  SeriesDefinition sdY=SeriesDefinitionImpl.createDefault();
  Series valueSeries=StockSeriesImpl.createDefault();
  if (BAR_STICK_SUBTYPE_LITERAL.equals(sSubType)) {
    ((StockSeries)valueSeries).setShowAsBarStick(true);
  }
  sdY.getSeries().add(valueSeries);
  yAxis.getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}",0.9500745156482862
65927,"@Override public void addListener(int eventType,Listener listener){
  super.addListener(eventType,listener);
  button.addListener(eventType,this);
}","@Override public void addListener(int eventType,Listener listener){
  super.addListener(eventType,listener);
  if (button != null) {
    button.addListener(eventType,this);
  }
}",0.9079754601226994
65928,"@Override public void addListener(int eventType,Listener listener){
  super.addListener(eventType,listener);
  spinner.addListener(eventType,this);
}","@Override public void addListener(int eventType,Listener listener){
  super.addListener(eventType,listener);
  if (spinner != null) {
    spinner.addListener(eventType,this);
  }
}",0.905775075987842
65929,"protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  ChartAdapter.beginIgnoreNotifications();
  if (!seriesDefns.isEmpty()) {
    if (ChartElementUtil.isSetSeriesPalette(getChart())) {
      Palette pa=((seriesDefns.get(0))).getSeriesPalette();
      for (int i=0; i < pa.getEntries().size(); i++) {
        int index=i + seriesDefns.size();
        int paletteSize=pa.getEntries().size();
        while (index >= pa.getEntries().size()) {
          index-=paletteSize;
        }
        sdTmp.getSeriesPalette().getEntries().add(i,pa.getEntries().get(index).copyInstance());
      }
    }
    Series newSeries=seriesDefns.get(0).getDesignTimeSeries().copyInstance();
    newSeries.getTriggers().clear();
    sdTmp.getSeries().add(newSeries);
    sdTmp.setQuery(seriesDefns.get(0).getQuery().copyInstance());
    cleanDataDefinition(sdTmp);
    sdTmp.getDesignTimeSeries().setSeriesIdentifier(""String_Node_Str"");
    sdTmp.eAdapters().addAll(seriesDefns.get(0).eAdapters());
    int firstIndex=getFirstIndexOfSameAxis();
    EList<OrthogonalSampleData> list=getChart().getSampleData().getOrthogonalSampleData();
    OrthogonalSampleData sdOrthogonal=list.get(firstIndex).copyInstance();
    if (axisIndex == -1) {
      sdOrthogonal.setSeriesDefinitionIndex(seriesDefns.size());
    }
 else {
      sdOrthogonal.setSeriesDefinitionIndex(ChartUIUtil.getLastSeriesIndexWithinAxis(getChart(),axisIndex) + 1);
    }
    sdOrthogonal.setDataSetRepresentation(convertDataSetRepresentation(sdOrthogonal.getDataSetRepresentation(),sdOrthogonal.getSeriesDefinitionIndex()));
    sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
    int sdIndex=sdOrthogonal.getSeriesDefinitionIndex();
    ArrayList<OrthogonalSampleData> al=new ArrayList<OrthogonalSampleData>();
    if (sdIndex >= list.size()) {
      list.add(sdOrthogonal);
    }
 else {
      for (int i=sdIndex; i < list.size(); i++) {
        al.add(list.get(i));
      }
      list.set(sdIndex,sdOrthogonal);
      for (int i=1; i < al.size(); i++) {
        list.set(i + sdIndex,al.get(i - 1));
        list.get(i + sdIndex).setSeriesDefinitionIndex(i + sdIndex);
      }
      list.add(al.get(al.size() - 1));
      list.get(list.size() - 1).setSeriesDefinitionIndex(list.size() - 1);
    }
  }
 else {
    sdTmp.getSeries().add(BarSeriesImpl.create());
    OrthogonalSampleData sampleData=DataFactory.eINSTANCE.createOrthogonalSampleData();
    sampleData.setDataSetRepresentation(ChartUtil.getNewSampleData(AxisType.LINEAR_LITERAL,0));
    sampleData.setSeriesDefinitionIndex(0);
    getChart().getSampleData().getOrthogonalSampleData().add(getFirstIndexOfSameAxis(),sampleData);
  }
  seriesDefns.add(sdTmp);
  ChartAdapter.endIgnoreNotifications();
  ChartUIUtil.setSeriesName(wizardContext.getModel());
}","protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  ChartAdapter.beginIgnoreNotifications();
  if (!seriesDefns.isEmpty()) {
    if (ChartElementUtil.isSetSeriesPalette(getChart())) {
      Palette pa=((seriesDefns.get(0))).getSeriesPalette();
      for (int i=0; i < pa.getEntries().size(); i++) {
        int index=i + seriesDefns.size();
        int paletteSize=pa.getEntries().size();
        while (index >= pa.getEntries().size()) {
          index-=paletteSize;
        }
        sdTmp.getSeriesPalette().getEntries().add(i,pa.getEntries().get(index).copyInstance());
      }
    }
    Series newSeries=seriesDefns.get(0).getDesignTimeSeries().copyInstance();
    newSeries.getTriggers().clear();
    Action a=ActionImpl.create(ActionType.SHOW_TOOLTIP_LITERAL,TooltipValueImpl.create(200,""String_Node_Str""));
    Trigger e=TriggerImpl.create(TriggerCondition.ONMOUSEOVER_LITERAL,a);
    newSeries.getTriggers().add(e);
    sdTmp.getSeries().add(newSeries);
    sdTmp.setQuery(seriesDefns.get(0).getQuery().copyInstance());
    cleanDataDefinition(sdTmp);
    sdTmp.getDesignTimeSeries().setSeriesIdentifier(""String_Node_Str"");
    sdTmp.eAdapters().addAll(seriesDefns.get(0).eAdapters());
    int firstIndex=getFirstIndexOfSameAxis();
    EList<OrthogonalSampleData> list=getChart().getSampleData().getOrthogonalSampleData();
    OrthogonalSampleData sdOrthogonal=list.get(firstIndex).copyInstance();
    if (axisIndex == -1) {
      sdOrthogonal.setSeriesDefinitionIndex(seriesDefns.size());
    }
 else {
      sdOrthogonal.setSeriesDefinitionIndex(ChartUIUtil.getLastSeriesIndexWithinAxis(getChart(),axisIndex) + 1);
    }
    sdOrthogonal.setDataSetRepresentation(convertDataSetRepresentation(sdOrthogonal.getDataSetRepresentation(),sdOrthogonal.getSeriesDefinitionIndex()));
    sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
    int sdIndex=sdOrthogonal.getSeriesDefinitionIndex();
    ArrayList<OrthogonalSampleData> al=new ArrayList<OrthogonalSampleData>();
    if (sdIndex >= list.size()) {
      list.add(sdOrthogonal);
    }
 else {
      for (int i=sdIndex; i < list.size(); i++) {
        al.add(list.get(i));
      }
      list.set(sdIndex,sdOrthogonal);
      for (int i=1; i < al.size(); i++) {
        list.set(i + sdIndex,al.get(i - 1));
        list.get(i + sdIndex).setSeriesDefinitionIndex(i + sdIndex);
      }
      list.add(al.get(al.size() - 1));
      list.get(list.size() - 1).setSeriesDefinitionIndex(list.size() - 1);
    }
  }
 else {
    sdTmp.getSeries().add(BarSeriesImpl.create());
    OrthogonalSampleData sampleData=DataFactory.eINSTANCE.createOrthogonalSampleData();
    sampleData.setDataSetRepresentation(ChartUtil.getNewSampleData(AxisType.LINEAR_LITERAL,0));
    sampleData.setSeriesDefinitionIndex(0);
    getChart().getSampleData().getOrthogonalSampleData().add(getFirstIndexOfSameAxis(),sampleData);
  }
  seriesDefns.add(sdTmp);
  ChartAdapter.endIgnoreNotifications();
  ChartUIUtil.setSeriesName(wizardContext.getModel());
}",0.9622448979591836
65930,"protected void populateLists(){
  NameSet nameSet=LiteralHelper.legendBehaviorTypeSet;
  if (isBehaviorSupported()) {
    cmbLegendBehavior.setItems(nameSet.getDisplayNames());
    cmbLegendBehavior.setItemData(nameSet.getNames());
    cmbLegendBehavior.setSelection(getChart().getInteractivity().getLegendBehavior().getName());
  }
 else {
    cmbLegendBehavior.setItems(new String[]{nameSet.getDisplayNames()[0]});
    cmbLegendBehavior.setItemData(new String[]{nameSet.getNames()[0]});
    cmbLegendBehavior.select(0);
  }
}","protected void populateLists(){
  NameSet nameSet=LiteralHelper.legendBehaviorTypeSet;
  if (isBehaviorSupported()) {
    cmbLegendBehavior.setItems(nameSet.getDisplayNames());
    cmbLegendBehavior.setItemData(nameSet.getNames());
    cmbLegendBehavior.setSelection(getChart().getInteractivity().getLegendBehavior().getName());
  }
 else {
    cmbLegendBehavior.setItems(new String[]{nameSet.getDisplayNames()[0]});
    cmbLegendBehavior.setItemData(new String[]{nameSet.getNames()[0]});
    cmbLegendBehavior.setSelection(getChart().getInteractivity().getLegendBehavior().getName());
  }
}",0.9320214669051878
65931,"/** 
 * @param name
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,String[] measureAggrFunctionNames,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  if (dimensions.length == 0) {
    throw new DataException(ResourceConstants.MISSING_DIMENSION_IN_CUBE,name);
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(factTableJointColumnNames,DimJointColumnNames,dimensions,factTable,measureColumns,measureAggrFunctionNames,cacheSize,stopSign);
  cube.close();
  documentManager.flush();
}","/** 
 * @param name
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,Map calculatedMeasure,String[] measureAggrFunctionNames,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  if (dimensions.length == 0) {
    throw new DataException(ResourceConstants.MISSING_DIMENSION_IN_CUBE,name);
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(factTableJointColumnNames,DimJointColumnNames,dimensions,factTable,measureColumns,calculatedMeasure,measureAggrFunctionNames,cacheSize,stopSign);
  cube.close();
  documentManager.flush();
}",0.9770114942528736
65932,"/** 
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  this.create(factTableJointColumnNames,DimJointColumnNames,dimension,iterator,measureColumnName,null,cacheSize,stopSign);
}","/** 
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  this.create(factTableJointColumnNames,DimJointColumnNames,dimension,iterator,measureColumnName,null,null,cacheSize,stopSign);
}",0.9956024626209324
65933,"/** 
 * @param name
 * @param documentManager
 * @param dimensionInfo
 * @param measureInfo
 * @param segmentCount
 * @param dimensionDivision
 */
FactTable(String name,IDocumentManager documentManager,DimensionInfo[] dimensionInfo,MeasureInfo[] measureInfo,int segmentCount,DimensionDivision[] dimensionDivision){
  Object[] params={name,documentManager,dimensionInfo,measureInfo,Integer.valueOf(segmentCount),dimensionDivision};
  logger.entering(FactTable.class.getName(),""String_Node_Str"",params);
  this.name=name;
  this.dimensionInfo=dimensionInfo;
  this.measureInfo=measureInfo;
  this.segmentCount=segmentCount;
  this.dimensionDivision=dimensionDivision;
  this.documentManager=documentManager;
  this.combinedPositionCalculator=new CombinedPositionContructor(dimensionDivision);
  logger.exiting(FactTable.class.getName(),""String_Node_Str"");
}","/** 
 * @param name
 * @param documentManager
 * @param dimensionInfo
 * @param measureInfo
 * @param segmentCount
 * @param dimensionDivision
 */
FactTable(String name,IDocumentManager documentManager,DimensionInfo[] dimensionInfo,MeasureInfo[] measureInfo,MeasureInfo[] calculatedMeasureInfo,int segmentCount,DimensionDivision[] dimensionDivision){
  Object[] params={name,documentManager,dimensionInfo,measureInfo,Integer.valueOf(segmentCount),dimensionDivision};
  logger.entering(FactTable.class.getName(),""String_Node_Str"",params);
  this.name=name;
  this.dimensionInfo=dimensionInfo;
  this.measureInfo=measureInfo;
  this.calculatedMeasureInfo=calculatedMeasureInfo;
  this.segmentCount=segmentCount;
  this.dimensionDivision=dimensionDivision;
  this.documentManager=documentManager;
  this.combinedPositionCalculator=new CombinedPositionContructor(dimensionDivision);
  logger.exiting(FactTable.class.getName(),""String_Node_Str"");
}",0.9510567296996664
65934,"/** 
 * @param factTableName
 * @param stopSign
 * @return
 * @throws IOException
 */
public FactTable load(String factTableName,StopSign stopSign) throws IOException {
  int segmentNumber=0;
  IDocumentObject documentObject=documentManager.openDocumentObject(NamingUtil.getFactTableName(factTableName));
  DimensionInfo[] dimensionInfo=new DimensionInfo[documentObject.readInt()];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionInfo[i]=new DimensionInfo();
    dimensionInfo[i].dimensionName=documentObject.readString();
    dimensionInfo[i].dimensionLength=documentObject.readInt();
  }
  MeasureInfo[] measureInfo=new MeasureInfo[documentObject.readInt()];
  for (int i=0; i < measureInfo.length; i++) {
    measureInfo[i]=new MeasureInfo(documentObject.readString(),documentObject.readInt());
  }
  segmentNumber=documentObject.readInt();
  int[] dimensionMemberCount=new int[dimensionInfo.length];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionMemberCount[i]=dimensionInfo[i].dimensionLength;
  }
  DimensionDivision[] subDimensions=calculateDimensionDivision(dimensionMemberCount,segmentNumber);
  documentObject.close();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentNumber,subDimensions);
}","/** 
 * @param factTableName
 * @param stopSign
 * @return
 * @throws IOException
 */
public FactTable load(String factTableName,StopSign stopSign) throws IOException {
  int segmentNumber=0;
  IDocumentObject documentObject=documentManager.openDocumentObject(NamingUtil.getFactTableName(factTableName));
  DimensionInfo[] dimensionInfo=new DimensionInfo[documentObject.readInt()];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionInfo[i]=new DimensionInfo();
    dimensionInfo[i].dimensionName=documentObject.readString();
    dimensionInfo[i].dimensionLength=documentObject.readInt();
  }
  int measureSize=documentObject.readInt();
  List<MeasureInfo> measureInfoList=new ArrayList<MeasureInfo>();
  List<MeasureInfo> calMeasureInfoList=new ArrayList<MeasureInfo>();
  for (int i=0; i < measureSize; i++) {
    String measureName=documentObject.readString();
    if (measureName.startsWith(NamingUtil.DERIVED_MEASURE_PREFIX)) {
      calMeasureInfoList.add(new MeasureInfo(NamingUtil.getMeasureName(measureName),documentObject.readInt()));
    }
 else {
      measureInfoList.add(new MeasureInfo(measureName,documentObject.readInt()));
    }
  }
  MeasureInfo[] measureInfo=(MeasureInfo[])measureInfoList.toArray(new MeasureInfo[0]);
  MeasureInfo[] calMeasureInfo=(MeasureInfo[])calMeasureInfoList.toArray(new MeasureInfo[0]);
  segmentNumber=documentObject.readInt();
  int[] dimensionMemberCount=new int[dimensionInfo.length];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionMemberCount[i]=dimensionInfo[i].dimensionLength;
  }
  DimensionDivision[] subDimensions=calculateDimensionDivision(dimensionMemberCount,segmentNumber);
  documentObject.close();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,calMeasureInfo,segmentNumber,subDimensions);
}",0.49269717624148
65935,"/** 
 * @param factTableName
 * @param dimensionInfo
 * @param measureInfo
 * @param segmentNumber
 * @throws IOException
 * @throws BirtException
 */
private void saveFactTableMetadata(String factTableName,DimensionInfo[] dimensionInfo,MeasureInfo[] measureInfo,int segmentNumber) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getFactTableName(factTableName));
  documentObject.writeInt(dimensionInfo.length);
  for (int i=0; i < dimensionInfo.length; i++) {
    documentObject.writeString(dimensionInfo[i].dimensionName);
    documentObject.writeInt(dimensionInfo[i].dimensionLength);
  }
  documentObject.writeInt(measureInfo.length);
  for (int i=0; i < measureInfo.length; i++) {
    documentObject.writeString(measureInfo[i].getMeasureName());
    documentObject.writeInt(measureInfo[i].getDataType());
  }
  documentObject.writeInt(segmentNumber);
  documentObject.close();
}","/** 
 * @param factTableName
 * @param dimensionInfo
 * @param measureInfo
 * @param segmentNumber
 * @throws IOException
 * @throws BirtException
 */
private void saveFactTableMetadata(String factTableName,DimensionInfo[] dimensionInfo,MeasureInfo[] measureInfo,MeasureInfo[] calculatedMeasureInfo,int segmentNumber) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getFactTableName(factTableName));
  documentObject.writeInt(dimensionInfo.length);
  for (int i=0; i < dimensionInfo.length; i++) {
    documentObject.writeString(dimensionInfo[i].dimensionName);
    documentObject.writeInt(dimensionInfo[i].dimensionLength);
  }
  documentObject.writeInt(measureInfo.length + calculatedMeasureInfo.length);
  for (int i=0; i < measureInfo.length; i++) {
    documentObject.writeString(measureInfo[i].getMeasureName());
    documentObject.writeInt(measureInfo[i].getDataType());
  }
  for (int i=0; i < calculatedMeasureInfo.length; i++) {
    documentObject.writeString(calculatedMeasureInfo[i].getMeasureName());
    documentObject.writeInt(calculatedMeasureInfo[i].getDataType());
  }
  documentObject.writeInt(segmentNumber);
  documentObject.close();
}",0.8494031221303948
65936,"public FactTable saveFactTable(String factTableName,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  return this.saveFactTable(factTableName,factTableJointColumnNames,DimJointColumnNames,iterator,dimensions,measureColumnName,null,stopSign);
}","public FactTable saveFactTable(String factTableName,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  return this.saveFactTable(factTableName,factTableJointColumnNames,DimJointColumnNames,iterator,dimensions,measureColumnName,null,null,stopSign);
}",0.9936948297604036
65937,"public String getDefaultAnalysisType(String columnName,String dataType){
  String defaultAnalysisType=null;
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_MEASURE;
  }
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE;
  }
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
  }
  if (columnName.length() >= 3) {
    String lastThreeLetters=columnName.substring(columnName.length() - 3);
    if (lastThreeLetters.equalsIgnoreCase(""String_Node_Str"")) {
      defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
    }
  }
  if (columnName.length() >= 2) {
    String lastTwoLetters=columnName.substring(columnName.length() - 2);
    if (lastTwoLetters.equalsIgnoreCase(""String_Node_Str"")) {
      defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
    }
  }
  return defaultAnalysisType;
}","public String getDefaultAnalysisType(String columnName,String dataType){
  String defaultAnalysisType=null;
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL)|| DesignChoiceConstants.COLUMN_DATA_TYPE_JAVA_OBJECT.equals(dataType)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_MEASURE;
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_TIME.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATE.equals(dataType) || DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(dataType)|| DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)|| DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(dataType)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
  }
  return defaultAnalysisType;
}",0.4898320070733863
65938,"TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
      int levelIndex1=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
      int levelIndex2=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
      if (levelIndex1 == levelIndex2) {
        this.avoidExtraSort=true;
      }
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  Comparator comparator=new Row4AggregationComparator(getSortType(aggr,cubeDimensionReader));
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    if (!this.avoidExtraSort) {
      sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
      if (memoryCacheSize == 0) {
        sortedFactRows.setUseMemoryOnly(true);
      }
    }
 else {
      factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
      if (memoryCacheSize == 0) {
        factRows.setUseMemoryOnly(true);
      }
      factRowPostion=0;
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}","TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
      int levelIndex1=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
      int levelIndex2=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
      if (levelIndex1 == levelIndex2) {
        this.avoidExtraSort=true;
      }
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  sortType=getSortType(aggr,cubeDimensionReader);
  Comparator comparator=new Row4AggregationComparator(sortType);
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    if (!this.avoidExtraSort) {
      sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
      if (memoryCacheSize == 0) {
        sortedFactRows.setUseMemoryOnly(true);
      }
    }
 else {
      factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
      if (memoryCacheSize == 0) {
        factRows.setUseMemoryOnly(true);
      }
      factRowPostion=0;
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}",0.9918074238899564
65939,"/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return stroke
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    final int thickness=lia.getThickness();
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6 * thickness,4 * thickness};
      bs=new BasicStroke(thickness,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{thickness,4 * thickness};
      bs=new BasicStroke(thickness,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DASH_DOTTED) {
      float[] faStyle=new float[]{6 * thickness,4 * thickness,thickness,4 * thickness};
      bs=new BasicStroke(thickness,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID) {
      bs=new BasicStroke(thickness,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_ROUND);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}","/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return stroke
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    int thickness=lia.getThickness();
    if (thickness == 0) {
      thickness=1;
    }
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6 * thickness,4 * thickness};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{thickness,4 * thickness};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DASH_DOTTED) {
      float[] faStyle=new float[]{6 * thickness,4 * thickness,thickness,4 * thickness};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID) {
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_SQUARE,BasicStroke.JOIN_ROUND);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}",0.936854190585534
65940,"/** 
 * Constructor for the BufferedRandomAccessFile object
 * @param file Description of Parameter
 * @param mode Description of Parameter
 * @param bufferSize Description of Parameter
 * @exception IOException Description of Exception
 */
public AbstractBufferedRandomAccessObject(int bufferSize) throws IOException {
  if (bufferSize < 1) {
    throw new Error(""String_Node_Str"");
  }
  currBuf=new FileBufferStruct();
  altBuf=new FileBufferStruct();
  currBuf.bytes=new byte[bufferSize];
  currBuf.modified=false;
  altBuf.bytes=new byte[bufferSize];
  altBuf.filePos=-1;
}","/** 
 * Constructor for the BufferedRandomAccessFile object
 * @param file Description of Parameter
 * @param mode Description of Parameter
 * @param bufferSize Description of Parameter
 * @exception IOException Description of Exception
 */
public AbstractBufferedRandomAccessObject(int bufferSize) throws IOException {
  if (bufferSize < 1) {
    throw new Error(""String_Node_Str"");
  }
  currBuf=new FileBufferStruct();
  currBuf.bytes=new byte[8192];
  currBuf.modified=false;
}",0.8762983947119924
65941,"public DocumentObjectCache(IDocumentManager documentManager,int cachedSize){
  this.documentManager=documentManager;
  this.cachedSize=cachedSize;
  linkedList=new LinkedList();
  map=new HashMap();
}","public DocumentObjectCache(IDocumentManager documentManager,long cachedSize){
  this.documentManager=documentManager;
  this.cachedSize=cachedSize;
  linkedList=new LinkedList();
  map=new HashMap();
}",0.9825436408977556
65942,"/** 
 * Close all cached document objects.
 * @throws IOException
 */
public void closeAll() throws IOException {
  Iterator allOjbects=map.values().iterator();
  while (allOjbects.hasNext()) {
    ((IDocumentObject)allOjbects.next()).close();
  }
}","/** 
 * Close all cached document objects.
 * @throws IOException
 */
public void closeAll() throws IOException {
  Iterator allOjbects=map.values().iterator();
  while (allOjbects.hasNext()) {
    ((IDocumentObject)allOjbects.next()).close();
  }
  map.clear();
}",0.9707602339181286
65943,"/** 
 * Get the instance of IDocumentObject by name.
 * @param name
 * @return
 * @throws IOException
 */
public IDocumentObject getIDocumentObject(String name) throws IOException {
  Object cachedObject=map.get(name);
  if (cachedObject != null) {
    return (IDocumentObject)cachedObject;
  }
  if (linkedList.size() >= cachedSize) {
    String lastName=(String)linkedList.getLast();
    linkedList.removeLast();
    ((IDocumentObject)map.get(lastName)).close();
    map.remove(lastName);
  }
  IDocumentObject newDocumentObject=documentManager.openDocumentObject(name);
  if (newDocumentObject == null) {
    newDocumentObject=documentManager.createDocumentObject(name);
  }
  newDocumentObject.seek(newDocumentObject.length());
  map.put(name,newDocumentObject);
  linkedList.addFirst(name);
  return newDocumentObject;
}","/** 
 * Get the instance of IDocumentObject by name.
 * @param name
 * @return
 * @throws IOException
 */
public IDocumentObject getIDocumentObject(String name) throws IOException {
  Object cachedObject=map.get(name);
  if (cachedObject != null) {
    return (IDocumentObject)cachedObject;
  }
  if (cachedSize != 0) {
    long size=calculateDocumentObjectsSize();
    if (size >= cachedSize) {
      String lastName=(String)linkedList.getLast();
      linkedList.removeLast();
      ((IDocumentObject)map.get(lastName)).close();
      map.remove(lastName);
    }
  }
  IDocumentObject newDocumentObject=documentManager.openDocumentObject(name);
  if (newDocumentObject == null) {
    newDocumentObject=documentManager.createDocumentObject(name);
  }
  newDocumentObject.seek(newDocumentObject.length());
  map.put(name,newDocumentObject);
  linkedList.addFirst(name);
  return newDocumentObject;
}",0.377030162412993
65944,"private int caculateBufferSize(IDatasetIterator iterator,String[][] keyColumnNames,String[] measureColumnNames) throws BirtException {
  int[][] levelKeyColumnDataType=new int[keyColumnNames.length][];
  int[] measureColumnType=new int[measureColumnNames.length];
  for (int i=0; i < keyColumnNames.length; i++) {
    levelKeyColumnDataType[i]=new int[keyColumnNames[i].length];
    for (int j=0; j < keyColumnNames[i].length; j++) {
      levelKeyColumnDataType[i][j]=iterator.getFieldType(keyColumnNames[i][j]);
    }
  }
  for (int i=0; i < measureColumnType.length; i++) {
    measureColumnType[i]=iterator.getFieldType(measureColumnNames[i]);
  }
  int levelSize=0;
  for (int i=0; i < levelKeyColumnDataType.length; i++) {
    levelSize+=getObjectSize(levelKeyColumnDataType[i]);
  }
  int measureSize=getObjectSize(measureColumnType);
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  return (int)(memoryCacheSize / rowSize);
}","private int caculateBufferSize(IDatasetIterator iterator,String[][] keyColumnNames,String[] measureColumnNames) throws BirtException {
  int[][] levelKeyColumnDataType=new int[keyColumnNames.length][];
  int[] measureColumnType=new int[measureColumnNames.length];
  for (int i=0; i < keyColumnNames.length; i++) {
    levelKeyColumnDataType[i]=new int[keyColumnNames[i].length];
    for (int j=0; j < keyColumnNames[i].length; j++) {
      levelKeyColumnDataType[i][j]=iterator.getFieldType(keyColumnNames[i][j]);
    }
  }
  for (int i=0; i < measureColumnType.length; i++) {
    measureColumnType[i]=iterator.getFieldType(measureColumnNames[i]);
  }
  int levelSize=0;
  for (int i=0; i < levelKeyColumnDataType.length; i++) {
    levelSize+=getObjectSize(levelKeyColumnDataType[i]);
  }
  int measureSize=getObjectSize(measureColumnType);
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  return (int)((memoryCacheSize * 0.75) / rowSize);
}",0.995285489785228
65945,"private List<String> resolveClasspathEntries(IClasspathEntry[] classpathEntries,boolean needExported,IJavaProject project){
  ArrayList<String> newClassPath=new ArrayList<String>();
  IWorkspace space=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=space.getRoot();
  for (int i=0; i < classpathEntries.length; i++) {
    IClasspathEntry curr=classpathEntries[i];
    if (!needExported && !curr.isExported()) {
      continue;
    }
    IPath path=curr.getPath();
    if (curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {
      path=JavaCore.getClasspathVariable(path.segment(0));
    }
 else {
      path=JavaCore.getResolvedClasspathEntry(curr).getPath();
    }
    if (project != null && curr.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
      try {
        IClasspathContainer contianer=JavaCore.getClasspathContainer(path,project);
        if (contianer != null && contianer.getKind() == IClasspathContainer.K_APPLICATION) {
          IClasspathEntry[] entrys=contianer.getClasspathEntries();
          List<String> list=resolveClasspathEntries(entrys,needExported,project);
          for (int j=0; j < list.size(); j++) {
            addToList(newClassPath,list.get(j));
          }
        }
      }
 catch (      JavaModelException e) {
      }
      continue;
    }
    if (curr.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
      path=curr.getOutputLocation();
    }
    if (path == null) {
      continue;
    }
    if (curr.getEntryKind() == IClasspathEntry.CPE_PROJECT) {
      if (root.findMember(path) instanceof IProject) {
        List<String> strs=getProjectClasspath((IProject)root.findMember(path),false,false);
        for (int j=0; j < strs.size(); j++) {
          addToList(newClassPath,strs.get(j));
        }
      }
    }
 else     if (curr.getEntryKind() == IClasspathEntry.CPE_LIBRARY || curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE || curr.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
      boolean inWorkSpace=true;
      if (space == null || space.getRoot() == null) {
        inWorkSpace=false;
      }
      if (root.findMember(path) == null) {
        inWorkSpace=false;
      }
      if (inWorkSpace) {
        String absPath=getFullPath(path,root.findMember(path).getProject());
        newClassPath.add(absPath);
      }
 else {
        newClassPath.add(curr.getPath().toFile().getAbsolutePath());
      }
    }
  }
  return newClassPath;
}","private List<String> resolveClasspathEntries(IClasspathEntry[] classpathEntries,boolean needExported,IJavaProject project){
  ArrayList<String> newClassPath=new ArrayList<String>();
  IWorkspace space=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=space.getRoot();
  for (int i=0; i < classpathEntries.length; i++) {
    IClasspathEntry curr=classpathEntries[i];
    if (!needExported && !curr.isExported() && curr.getEntryKind() != IClasspathEntry.CPE_VARIABLE) {
      continue;
    }
    IPath path=curr.getPath();
    if (curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {
      path=JavaCore.getClasspathVariable(path.segment(0));
    }
 else {
      path=JavaCore.getResolvedClasspathEntry(curr).getPath();
    }
    if (project != null && curr.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
      try {
        IClasspathContainer contianer=JavaCore.getClasspathContainer(path,project);
        if (contianer != null && contianer.getKind() == IClasspathContainer.K_APPLICATION) {
          IClasspathEntry[] entrys=contianer.getClasspathEntries();
          List<String> list=resolveClasspathEntries(entrys,needExported,project);
          for (int j=0; j < list.size(); j++) {
            addToList(newClassPath,list.get(j));
          }
        }
      }
 catch (      JavaModelException e) {
      }
      continue;
    }
    if (curr.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
      path=curr.getOutputLocation();
    }
    if (path == null) {
      continue;
    }
    if (curr.getEntryKind() == IClasspathEntry.CPE_PROJECT) {
      if (root.findMember(path) instanceof IProject) {
        List<String> strs=getProjectClasspath((IProject)root.findMember(path),false,false);
        for (int j=0; j < strs.size(); j++) {
          addToList(newClassPath,strs.get(j));
        }
      }
    }
 else     if (curr.getEntryKind() == IClasspathEntry.CPE_LIBRARY || curr.getEntryKind() == IClasspathEntry.CPE_VARIABLE || curr.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
      boolean inWorkSpace=true;
      if (space == null || space.getRoot() == null) {
        inWorkSpace=false;
      }
      if (root.findMember(path) == null) {
        inWorkSpace=false;
      }
      if (inWorkSpace) {
        String absPath=getFullPath(path,root.findMember(path).getProject());
        newClassPath.add(absPath);
      }
 else {
        newClassPath.add(path.toFile().getAbsolutePath());
      }
    }
  }
  return newClassPath;
}",0.98497633257872
65946,"/** 
 * Returns all cached labels.
 * @return all cached labels.
 */
public List getAllLabels(){
  return alLabels;
}","/** 
 * Returns all cached labels.
 * @return all cached labels.
 */
public List<TextRenderEvent> getAllLabels(){
  return alLabels;
}",0.9322709163346612
65947,"/** 
 * Returns all cached markers.
 * @return all cached markers.
 */
public List getAllMarkers(){
  return alMarkers;
}","/** 
 * Returns all cached markers.
 * @return all cached markers.
 */
public List<MarkerInstruction> getAllMarkers(){
  return alMarkers;
}",0.9272030651340996
65948,"/** 
 * Flush specified blocks.
 * @param options
 * @throws ChartException
 */
public void flushOptions(int options) throws ChartException {
  fFirstDC.flushOptions(options);
  for (java.util.Iterator iter=fDeferredCacheList.iterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if (obj instanceof DeferredCache) {
      ((DeferredCache)obj).flushOptions(options);
    }
  }
  fLastDC.flushOptions(options);
}","/** 
 * Flush specified blocks.
 * @param options
 * @throws ChartException
 */
public void flushOptions(int options) throws ChartException {
  fFirstDC.flushOptions(options);
  for (java.util.Iterator<DeferredCache> iter=fDeferredCacheList.iterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if (obj instanceof DeferredCache) {
      ((DeferredCache)obj).flushOptions(options);
    }
  }
  fLastDC.flushOptions(options);
}",0.9824561403508772
65949,"/** 
 * Flush markers and lables in all caches.
 * @throws ChartException
 */
void flushMarkersNLabels() throws ChartException {
  List allMarkers=new ArrayList();
  List allLabels=new ArrayList();
  getMarkersNLabels(allMarkers,allLabels);
  DeferredCache.flushMarkers(fDeviceRenderer,allMarkers);
  DeferredCache.flushLabels(fDeviceRenderer,allLabels);
}","/** 
 * Flush markers and lables in all caches.
 * @throws ChartException
 */
void flushMarkersNLabels() throws ChartException {
  List<IRenderInstruction> allMarkers=new ArrayList<IRenderInstruction>();
  List<TextRenderEvent> allLabels=new ArrayList<TextRenderEvent>();
  getMarkersNLabels(allMarkers,allLabels);
  DeferredCache.flushMarkers(fDeviceRenderer,allMarkers);
  DeferredCache.flushLabels(fDeviceRenderer,allLabels);
}",0.905852417302799
65950,"/** 
 * Pre-process all the 3D rendering events. This must be called before  {@link #flushAll()}.
 * @param deferredCache specified deferred cache instance.
 * @param engine
 * @param xOffset
 * @param yOffset
 * @since 2.3
 */
public void process3DEvent(DeferredCache deferredCache,Engine3D engine,double xOffset,double yOffset){
  if (deferredCache != null) {
    deferredCache.process3DEvent(engine,xOffset,yOffset);
  }
 else {
    fFirstDC.process3DEvent(engine,xOffset,yOffset);
    for (java.util.Iterator iter=fDeferredCacheList.iterator(); iter.hasNext(); ) {
      Object obj=iter.next();
      if (obj instanceof DeferredCache) {
        ((DeferredCache)obj).process3DEvent(engine,xOffset,yOffset);
      }
    }
    fLastDC.process3DEvent(engine,xOffset,yOffset);
  }
}","/** 
 * Pre-process all the 3D rendering events. This must be called before  {@link #flushAll()}.
 * @param deferredCache specified deferred cache instance.
 * @param engine
 * @param xOffset
 * @param yOffset
 * @since 2.3
 */
public void process3DEvent(DeferredCache deferredCache,Engine3D engine,double xOffset,double yOffset){
  if (deferredCache != null) {
    deferredCache.process3DEvent(engine,xOffset,yOffset);
  }
 else {
    fFirstDC.process3DEvent(engine,xOffset,yOffset);
    for (java.util.Iterator<DeferredCache> iter=fDeferredCacheList.iterator(); iter.hasNext(); ) {
      Object obj=iter.next();
      if (obj instanceof DeferredCache) {
        ((DeferredCache)obj).process3DEvent(engine,xOffset,yOffset);
      }
    }
    fLastDC.process3DEvent(engine,xOffset,yOffset);
  }
}",0.9904882688649336
65951,"/** 
 * Get markers and labels from all caches.
 * @param allMarkers
 * @param allLabels
 */
public void getMarkersNLabels(List allMarkers,List allLabels){
  allMarkers.addAll(fFirstDC.getAllMarkers());
  fFirstDC.getAllMarkers().clear();
  allLabels.addAll(fFirstDC.getAllLabels());
  fFirstDC.getAllLabels().clear();
  for (java.util.Iterator iter=fDeferredCacheList.iterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if (obj instanceof DeferredCache) {
      allMarkers.addAll(((DeferredCache)obj).getAllMarkers());
      ((DeferredCache)obj).getAllMarkers().clear();
      allLabels.addAll(((DeferredCache)obj).getAllLabels());
      ((DeferredCache)obj).getAllLabels().clear();
    }
 else     if (obj instanceof List) {
      Collections.sort((List)obj);
      for (java.util.Iterator iter1=((List)obj).iterator(); iter1.hasNext(); ) {
        DeferredCache dc=(DeferredCache)iter1.next();
        allMarkers.addAll(dc.getAllMarkers());
        dc.getAllMarkers().clear();
        allLabels.addAll(dc.getAllLabels());
        dc.getAllLabels().clear();
      }
    }
  }
  allMarkers.addAll(fLastDC.getAllMarkers());
  fLastDC.getAllMarkers().clear();
  allLabels.addAll(fLastDC.getAllLabels());
  fLastDC.getAllLabels().clear();
}","/** 
 * Get markers and labels from all caches.
 * @param allMarkers
 * @param allLabels
 */
public void getMarkersNLabels(List<IRenderInstruction> allMarkers,List<TextRenderEvent> allLabels){
  allMarkers.addAll(fFirstDC.getAllMarkers());
  fFirstDC.getAllMarkers().clear();
  allLabels.addAll(fFirstDC.getAllLabels());
  fFirstDC.getAllLabels().clear();
  for (java.util.Iterator<DeferredCache> iter=fDeferredCacheList.iterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if (obj instanceof DeferredCache) {
      allMarkers.addAll(((DeferredCache)obj).getAllMarkers());
      ((DeferredCache)obj).getAllMarkers().clear();
      allLabels.addAll(((DeferredCache)obj).getAllLabels());
      ((DeferredCache)obj).getAllLabels().clear();
    }
 else     if (obj instanceof List) {
      Collections.sort((List)obj);
      for (java.util.Iterator iter1=((List)obj).iterator(); iter1.hasNext(); ) {
        DeferredCache dc=(DeferredCache)iter1.next();
        allMarkers.addAll(dc.getAllMarkers());
        dc.getAllMarkers().clear();
        allLabels.addAll(dc.getAllLabels());
        dc.getAllLabels().clear();
      }
    }
  }
  allMarkers.addAll(fLastDC.getAllMarkers());
  fLastDC.getAllMarkers().clear();
  allLabels.addAll(fLastDC.getAllLabels());
  fLastDC.getAllLabels().clear();
}",0.9796238244514106
65952,"protected void createEditPolicies(){
  installEditPolicy(EditPolicy.COMPONENT_ROLE,new ReportComponentEditPolicy());
  installEditPolicy(EditPolicy.LAYOUT_ROLE,new ReportFlowLayoutEditPolicy(){
    @Override protected Command getAddCommand(    Request req){
      return UnexecutableCommand.INSTANCE;
    }
  }
);
}","protected void createEditPolicies(){
  installEditPolicy(EditPolicy.COMPONENT_ROLE,new ReportComponentEditPolicy());
  installEditPolicy(EditPolicy.LAYOUT_ROLE,new ReportFlowLayoutEditPolicy(){
    @Override protected Command getAddCommand(    Request req){
      return UnexecutableCommand.INSTANCE;
    }
    @Override public EditPart getTargetEditPart(    Request request){
      if (REQ_CREATE.equals(request.getType())) {
        if (((ReportItemHandle)getHost().getModel()).getCurrentView() != null) {
          return null;
        }
      }
      return super.getTargetEditPart(request);
    }
  }
);
}",0.6810810810810811
65953,"/** 
 * This background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
@Override protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    o3dLeftWallEvent=event_new;
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    o3dRightWallEvent=event_new;
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    o3dFloorEvent=event_new;
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=getAllOneAxes();
  renderMarkerRanges(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
rre.setOutline(ca.getOutline());
ipr.drawRectangle(rre);
}
}","/** 
 * This background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
@Override protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    o3dLeftWallEvent=event_new;
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    o3dRightWallEvent=event_new;
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    o3dFloorEvent=event_new;
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=getAllOneAxes();
  renderMarkerRanges(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
AxesRenderHelper.addLine3DEvent(lre3d,o3dRightWallEvent,getDeferredCache());
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
AxesRenderHelper.addLine3DEvent(lre3d,o3dLeftWallEvent,getDeferredCache());
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
AxesRenderHelper.addLine3DEvent(lre3d,o3dFloorEvent,getDeferredCache());
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && !needDrawingFirstMajorGridLine(oaxa[i],oaxa)) {
continue;
}
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && !needDrawingFirstMajorGridLine(oaxa[i],oaxa)) {
continue;
}
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && !needDrawingFirstMajorGridLine(oaxa[i],oaxa)) {
continue;
}
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && !needDrawingFirstMajorGridLine(oaxa[i],oaxa)) {
continue;
}
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
rre.setOutline(ca.getOutline());
ipr.drawRectangle(rre);
}
}",0.9905532409650228
65954,"protected void updateReverseStateByCategoryAxisUI(){
  int state=btnCategoryAxis.getSelectionState();
  boolean enabledUI=getContext().getUIFactory().canEnableUI(btnCategoryAxis);
  btnReverse.setEnabled(enabledUI);
  updateReverseUI(enabledUI);
  if (state == ChartCheckbox.STATE_GRAYED) {
    btnReverse.setSelectionState(ChartCheckbox.STATE_GRAYED);
    ((ChartWithAxes)getChart()).unsetReverseCategory();
  }
 else   if (state == ChartCheckbox.STATE_UNSELECTED) {
    btnReverse.setSelectionState(ChartCheckbox.STATE_UNSELECTED);
    ((ChartWithAxes)getChart()).setReverseCategory(false);
  }
}","protected void updateReverseStateByCategoryAxisUI(){
  int state=btnCategoryAxis.getSelectionState();
  boolean enabledUI=getContext().getUIFactory().canEnableUI(btnCategoryAxis);
  updateReverseUI(enabledUI);
  if (state == ChartCheckbox.STATE_GRAYED) {
    btnReverse.setSelectionState(ChartCheckbox.STATE_GRAYED);
    ((ChartWithAxes)getChart()).unsetReverseCategory();
  }
 else   if (state == ChartCheckbox.STATE_UNSELECTED) {
    btnReverse.setSelectionState(ChartCheckbox.STATE_UNSELECTED);
    ((ChartWithAxes)getChart()).setReverseCategory(false);
  }
}",0.9689655172413794
65955,"public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      if (lneLabelSpan.getValue() == 0) {
        double value=suggestLabelSpan(getAxisForProcessing());
        lneLabelSpan.setValue(value);
      }
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget.equals(cmbTypes)) {
    String selectedAxisType=cmbTypes.getSelectedItemData();
    final AxisType axisType=(selectedAxisType == null) ? getDefaultValueAxis().getType() : AxisType.getByName(selectedAxisType);
    if (getAxisForProcessing().isSetType() && getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (selectedAxisType != null) {
      getAxisForProcessing().setType(axisType);
      if (btnCategoryAxis != null) {
        boolean disableCategoryAxisUI=AxisType.TEXT_LITERAL.equals(axisType);
        getAxisForProcessing().setCategoryAxis(disableCategoryAxisUI);
        btnCategoryAxis.setSelectionState(ChartCheckbox.STATE_SELECTED);
        updateCategoryAxisUI(!disableCategoryAxisUI);
        updateReverseStateByCategoryAxisUI();
      }
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    String selectedOriginType=cmbOrigin.getSelectedItemData();
    if (selectedOriginType != null && IntersectionType.VALUE_LITERAL.getName().equals(selectedOriginType)) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
      getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
    }
 else {
      boolean enabled=false;
      if (selectedOriginType == null) {
        enabled=true;
      }
 else {
        getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
      }
      getAxisForProcessing().getOrigin().setValue(null);
      lblValue.setEnabled(enabled);
      txtValue.setEnabled(enabled);
    }
    if (selectedOriginType != null && getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    int state=btnCategoryAxis.getSelectionState();
    if (state == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetCategoryAxis();
    }
 else {
      getAxisForProcessing().setCategoryAxis(state == ChartCheckbox.STATE_SELECTED);
    }
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),state == ChartCheckbox.STATE_SELECTED);
    refreshPopupSheet();
    updateReverseStateByCategoryAxisUI();
  }
 else   if (e.widget.equals(btnReverse)) {
    if (btnReverse.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      ((ChartWithAxes)getChart()).unsetReverseCategory();
    }
 else {
      ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleVisible) {
    if (btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getTitle().unsetVisible();
    }
 else {
      getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget == btnLabelVisible) {
    if (btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getLabel().unsetVisible();
    }
 else {
      getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    handleFormatBtnSelected();
  }
 else   if (e.widget == btnStaggered) {
    if (btnStaggered.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetStaggered();
    }
 else {
      getAxisForProcessing().setStaggered(btnStaggered.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      if (lneLabelSpan.getValue() == 0) {
        double value=suggestLabelSpan(getAxisForProcessing());
        lneLabelSpan.setValue(value);
      }
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget.equals(cmbTypes)) {
    String selectedAxisType=cmbTypes.getSelectedItemData();
    final AxisType axisType=(selectedAxisType == null) ? getDefaultValueAxis().getType() : AxisType.getByName(selectedAxisType);
    if (getAxisForProcessing().isSetType() && getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (selectedAxisType != null) {
      getAxisForProcessing().setType(axisType);
    }
    if (btnCategoryAxis != null) {
      boolean disableCategoryAxisUI=(selectedAxisType != null && AxisType.TEXT_LITERAL.equals(axisType));
      updateCategoryAxisUI(!disableCategoryAxisUI);
      updateReverseStateByCategoryAxisUI();
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    String selectedOriginType=cmbOrigin.getSelectedItemData();
    if (selectedOriginType != null && IntersectionType.VALUE_LITERAL.getName().equals(selectedOriginType)) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
      getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
    }
 else {
      boolean enabled=false;
      if (selectedOriginType == null) {
        enabled=true;
      }
 else {
        getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
      }
      getAxisForProcessing().getOrigin().setValue(null);
      lblValue.setEnabled(enabled);
      txtValue.setEnabled(enabled);
    }
    if (selectedOriginType != null && getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    int state=btnCategoryAxis.getSelectionState();
    if (state == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetCategoryAxis();
    }
 else {
      getAxisForProcessing().setCategoryAxis(state == ChartCheckbox.STATE_SELECTED);
    }
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),state == ChartCheckbox.STATE_SELECTED);
    refreshPopupSheet();
    updateReverseStateByCategoryAxisUI();
  }
 else   if (e.widget.equals(btnReverse)) {
    if (btnReverse.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      ((ChartWithAxes)getChart()).unsetReverseCategory();
    }
 else {
      ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleVisible) {
    if (btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getTitle().unsetVisible();
    }
 else {
      getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget == btnLabelVisible) {
    if (btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getLabel().unsetVisible();
    }
 else {
      getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    handleFormatBtnSelected();
  }
 else   if (e.widget == btnStaggered) {
    if (btnStaggered.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetStaggered();
    }
 else {
      getAxisForProcessing().setStaggered(btnStaggered.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
}",0.9723818350324376
65956,"protected void setStateOfTitle(){
  boolean isTitleEnabled=getAxisForProcessing().getTitle().isVisible();
  txtTitle.setEnabled(isTitleEnabled);
  setToggleButtonEnabled(BUTTON_TITLE,isTitleEnabled);
}","protected void setStateOfTitle(){
  boolean isTitleEnabled=isTitleEnabled();
  txtTitle.setEnabled(isTitleEnabled);
  setToggleButtonEnabled(BUTTON_TITLE,isTitleEnabled);
}",0.900804289544236
65957,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  Chart defChart=ChartDefaultValueUtil.getDefaultValueChart(getChart());
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  initOptionUI(cmpBasic);
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getBackgroundFillStyles(),getContext(),getChart().getBlock().getBackground());
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  createStyleNPreviewUI(cmpBasic);
  createAltMsgComposite(cmpBasic);
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  if ((getChart() instanceof ChartWithAxes) && is3DEnabled()) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=getContext().getUIFactory().createChartSpinner(cmpCoverage,SWT.BORDER,cwa,""String_Node_Str"",true,null,""String_Node_Str"");
    spnCorverage.setRatio(100);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    spnCorverage.setLayoutData(gd);
    int spnValue=(int)(cwa.getCoverage() * 100);
    if (!cwa.isSetCoverage()) {
      spnValue=DEFAULT_COVERAGE;
    }
    spnCorverage.getWidget().setValues(spnValue,1,100,0,1,10);
  }
  btnEnable=getContext().getUIFactory().createChartCheckbox(cmpBasic,SWT.NONE,defChart.getInteractivity().isEnable());
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelectionState(!getChart().getInteractivity().isSetEnable() ? ChartCheckbox.STATE_GRAYED : (getChart().getInteractivity().isEnable() ? ChartCheckbox.STATE_SELECTED : ChartCheckbox.STATE_UNSELECTED));
    btnEnable.addSelectionListener(this);
  }
  if (enableStudyLayout()) {
    btnStudyLayout=getContext().getUIFactory().createChartCheckbox(cmpBasic,SWT.NONE,((ChartWithAxes)defChart).isStudyLayout());
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnStudyLayout.setLayoutData(gridData);
    btnStudyLayout.setText(Messages.getString(""String_Node_Str""));
    btnStudyLayout.setSelectionState(((ChartWithAxes)getChart()).isSetStudyLayout() ? (((ChartWithAxes)getChart()).isStudyLayout() ? ChartCheckbox.STATE_SELECTED : ChartCheckbox.STATE_UNSELECTED) : ChartCheckbox.STATE_GRAYED);
    btnStudyLayout.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  Chart defChart=ChartDefaultValueUtil.getDefaultValueChart(getChart());
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  initOptionUI(cmpBasic);
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getBackgroundFillStyles(),getContext(),getChart().getBlock().getBackground());
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  createStyleNPreviewUI(cmpBasic);
  createAltMsgComposite(cmpBasic);
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createAngleChooserComposite(cmp3D);
  createCoverageComposite(cmpBasic);
  btnEnable=getContext().getUIFactory().createChartCheckbox(cmpBasic,SWT.NONE,defChart.getInteractivity().isEnable());
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelectionState(!getChart().getInteractivity().isSetEnable() ? ChartCheckbox.STATE_GRAYED : (getChart().getInteractivity().isEnable() ? ChartCheckbox.STATE_SELECTED : ChartCheckbox.STATE_UNSELECTED));
    btnEnable.addSelectionListener(this);
  }
  if (enableStudyLayout()) {
    btnStudyLayout=getContext().getUIFactory().createChartCheckbox(cmpBasic,SWT.NONE,((ChartWithAxes)defChart).isStudyLayout());
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnStudyLayout.setLayoutData(gridData);
    btnStudyLayout.setText(Messages.getString(""String_Node_Str""));
    btnStudyLayout.setSelectionState(((ChartWithAxes)getChart()).isSetStudyLayout() ? (((ChartWithAxes)getChart()).isStudyLayout() ? ChartCheckbox.STATE_SELECTED : ChartCheckbox.STATE_UNSELECTED) : ChartCheckbox.STATE_GRAYED);
    btnStudyLayout.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}",0.7651697699890471
65958,"/** 
 * Updates chart element MarkerLine.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
public void updateMarkerLine(String name,EObject eParentObj,MarkerLine eObj,MarkerLine eRefObj,MarkerLine eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetLabelAnchor()) {
    if (eRefObj != null && eRefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eRefObj.getLabelAnchor());
    }
 else     if (eDefObj != null && eDefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eDefObj.getLabelAnchor());
    }
  }
  updateLineAttributes(""String_Node_Str"",eObj,eObj.getLineAttributes(),eRefObj == null ? null : eRefObj.getLineAttributes(),eDefObj == null ? null : eDefObj.getLineAttributes(),eDefOverride,checkVisible);
  if (eRefObj != null && eRefObj.getValue() != null) {
    eObj.setValue(eRefObj.getValue());
  }
 else   if (eDefObj != null && eDefObj.getValue() != null) {
    eObj.setValue(eDefObj.getValue());
  }
  updateLabel(""String_Node_Str"",eObj,eObj.getLabel(),eRefObj == null ? null : eRefObj.getLabel(),eDefObj == null ? null : eDefObj.getLabel(),eDefOverride,checkVisible);
  updateFormatSpecifier(""String_Node_Str"",eObj,eObj.getFormatSpecifier(),eRefObj == null ? null : eRefObj.getFormatSpecifier(),eDefObj == null ? null : eDefObj.getFormatSpecifier(),eDefOverride,checkVisible);
  updateCursor(""String_Node_Str"",eObj,eObj.getCursor(),eRefObj == null ? null : eRefObj.getCursor(),eDefObj == null ? null : eDefObj.getCursor(),eDefOverride,checkVisible);
}","/** 
 * Updates chart element MarkerLine.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
public void updateMarkerLine(String name,EObject eParentObj,MarkerLine eObj,MarkerLine eRefObj,MarkerLine eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetLabelAnchor()) {
    if (eRefObj != null && eRefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eRefObj.getLabelAnchor());
    }
 else     if (eDefObj != null && eDefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eDefObj.getLabelAnchor());
    }
  }
  updateLineAttributes(""String_Node_Str"",eObj,eObj.getLineAttributes(),eRefObj == null ? null : eRefObj.getLineAttributes(),eDefObj == null ? null : eDefObj.getLineAttributes(),eDefOverride,checkVisible);
  if (eObj.getValue() == null) {
    if (eRefObj != null && eRefObj.getValue() != null) {
      eObj.setValue(eRefObj.getValue().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getValue() != null) {
      eObj.setValue(eDefObj.getValue().copyInstance());
    }
  }
  updateLabel(""String_Node_Str"",eObj,eObj.getLabel(),eRefObj == null ? null : eRefObj.getLabel(),eDefObj == null ? null : eDefObj.getLabel(),eDefOverride,checkVisible);
  updateFormatSpecifier(""String_Node_Str"",eObj,eObj.getFormatSpecifier(),eRefObj == null ? null : eRefObj.getFormatSpecifier(),eDefObj == null ? null : eDefObj.getFormatSpecifier(),eDefOverride,checkVisible);
  updateCursor(""String_Node_Str"",eObj,eObj.getCursor(),eRefObj == null ? null : eRefObj.getCursor(),eDefObj == null ? null : eDefObj.getCursor(),eDefOverride,checkVisible);
}",0.982867057037519
65959,"/** 
 * Updates chart element MarkerRange.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
protected void updateMarkerRangeImpl(String name,EObject eParentObj,MarkerRange eObj,MarkerRange eRefObj,MarkerRange eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetLabelAnchor()) {
    if (eRefObj != null && eRefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eRefObj.getLabelAnchor());
    }
 else     if (eDefObj != null && eDefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eDefObj.getLabelAnchor());
    }
  }
  updateLineAttributes(""String_Node_Str"",eObj,eObj.getOutline(),eRefObj == null ? null : eRefObj.getOutline(),eDefObj == null ? null : eDefObj.getOutline(),eDefOverride,checkVisible);
  updateFill(""String_Node_Str"",eObj,eObj.getFill(),eRefObj == null ? null : eRefObj.getFill(),eDefObj == null ? null : eDefObj.getFill(),eDefOverride,checkVisible);
  if (eRefObj != null && eRefObj.getStartValue() != null) {
    eObj.setStartValue(eRefObj.getStartValue());
  }
 else   if (eDefObj != null && eDefObj.getStartValue() != null) {
    eObj.setStartValue(eDefObj.getStartValue());
  }
  if (eRefObj != null && eRefObj.getEndValue() != null) {
    eObj.setEndValue(eRefObj.getEndValue());
  }
 else   if (eDefObj != null && eDefObj.getEndValue() != null) {
    eObj.setEndValue(eDefObj.getEndValue());
  }
  updateLabel(""String_Node_Str"",eObj,eObj.getLabel(),eRefObj == null ? null : eRefObj.getLabel(),eDefObj == null ? null : eDefObj.getLabel(),eDefOverride,checkVisible);
  updateFormatSpecifier(""String_Node_Str"",eObj,eObj.getFormatSpecifier(),eRefObj == null ? null : eRefObj.getFormatSpecifier(),eDefObj == null ? null : eDefObj.getFormatSpecifier(),eDefOverride,checkVisible);
  updateCursor(""String_Node_Str"",eObj,eObj.getCursor(),eRefObj == null ? null : eRefObj.getCursor(),eDefObj == null ? null : eDefObj.getCursor(),eDefOverride,checkVisible);
}","/** 
 * Updates chart element MarkerRange.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
protected void updateMarkerRangeImpl(String name,EObject eParentObj,MarkerRange eObj,MarkerRange eRefObj,MarkerRange eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetLabelAnchor()) {
    if (eRefObj != null && eRefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eRefObj.getLabelAnchor());
    }
 else     if (eDefObj != null && eDefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eDefObj.getLabelAnchor());
    }
  }
  updateLineAttributes(""String_Node_Str"",eObj,eObj.getOutline(),eRefObj == null ? null : eRefObj.getOutline(),eDefObj == null ? null : eDefObj.getOutline(),eDefOverride,checkVisible);
  updateFill(""String_Node_Str"",eObj,eObj.getFill(),eRefObj == null ? null : eRefObj.getFill(),eDefObj == null ? null : eDefObj.getFill(),eDefOverride,checkVisible);
  if (eObj.getStartValue() == null) {
    if (eRefObj != null && eRefObj.getStartValue() != null) {
      eObj.setStartValue(eRefObj.getStartValue().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getStartValue() != null) {
      eObj.setStartValue(eDefObj.getStartValue().copyInstance());
    }
  }
  if (eObj.getEndValue() == null) {
    if (eRefObj != null && eRefObj.getEndValue() != null) {
      eObj.setEndValue(eRefObj.getEndValue().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getEndValue() != null) {
      eObj.setEndValue(eDefObj.getEndValue().copyInstance());
    }
  }
  updateLabel(""String_Node_Str"",eObj,eObj.getLabel(),eRefObj == null ? null : eRefObj.getLabel(),eDefObj == null ? null : eDefObj.getLabel(),eDefOverride,checkVisible);
  updateFormatSpecifier(""String_Node_Str"",eObj,eObj.getFormatSpecifier(),eRefObj == null ? null : eRefObj.getFormatSpecifier(),eDefObj == null ? null : eDefObj.getFormatSpecifier(),eDefOverride,checkVisible);
  updateCursor(""String_Node_Str"",eObj,eObj.getCursor(),eRefObj == null ? null : eRefObj.getCursor(),eDefObj == null ? null : eDefObj.getCursor(),eDefOverride,checkVisible);
}",0.9698729582577132
65960,"/** 
 * Updates chart element Scale.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
public void updateScale(String name,EObject eParentObj,Scale eObj,Scale eRefObj,Scale eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetStep()) {
    if (eRefObj != null && eRefObj.isSetStep()) {
      eObj.setStep(eRefObj.getStep());
    }
 else     if (eDefObj != null && eDefObj.isSetStep()) {
      eObj.setStep(eDefObj.getStep());
    }
  }
  if (!eObj.isSetUnit()) {
    if (eRefObj != null && eRefObj.isSetUnit()) {
      eObj.setUnit(eRefObj.getUnit());
    }
 else     if (eDefObj != null && eDefObj.isSetUnit()) {
      eObj.setUnit(eDefObj.getUnit());
    }
  }
  if (!eObj.isSetMinorGridsPerUnit()) {
    if (eRefObj != null && eRefObj.isSetMinorGridsPerUnit()) {
      eObj.setMinorGridsPerUnit(eRefObj.getMinorGridsPerUnit());
    }
 else     if (eDefObj != null && eDefObj.isSetMinorGridsPerUnit()) {
      eObj.setMinorGridsPerUnit(eDefObj.getMinorGridsPerUnit());
    }
  }
  if (!eObj.isSetStepNumber()) {
    if (eRefObj != null && eRefObj.isSetStepNumber()) {
      eObj.setStepNumber(eRefObj.getStepNumber());
    }
 else     if (eDefObj != null && eDefObj.isSetStepNumber()) {
      eObj.setStepNumber(eDefObj.getStepNumber());
    }
  }
  if (!eObj.isSetShowOutside()) {
    if (eRefObj != null && eRefObj.isSetShowOutside()) {
      eObj.setShowOutside(eRefObj.isShowOutside());
    }
 else     if (eDefObj != null && eDefObj.isSetShowOutside()) {
      eObj.setShowOutside(eDefObj.isShowOutside());
    }
  }
  if (!eObj.isSetTickBetweenCategories()) {
    if (eRefObj != null && eRefObj.isSetTickBetweenCategories()) {
      eObj.setTickBetweenCategories(eRefObj.isTickBetweenCategories());
    }
 else     if (eDefObj != null && eDefObj.isSetTickBetweenCategories()) {
      eObj.setTickBetweenCategories(eDefObj.isTickBetweenCategories());
    }
  }
  if (!eObj.isSetAutoExpand()) {
    if (eRefObj != null && eRefObj.isSetAutoExpand()) {
      eObj.setAutoExpand(eRefObj.isAutoExpand());
    }
 else     if (eDefObj != null && eDefObj.isSetAutoExpand()) {
      eObj.setAutoExpand(eDefObj.isAutoExpand());
    }
  }
  if (!eObj.isSetMajorGridsStepNumber()) {
    if (eRefObj != null && eRefObj.isSetMajorGridsStepNumber()) {
      eObj.setMajorGridsStepNumber(eRefObj.getMajorGridsStepNumber());
    }
 else     if (eDefObj != null && eDefObj.isSetMajorGridsStepNumber()) {
      eObj.setMajorGridsStepNumber(eDefObj.getMajorGridsStepNumber());
    }
  }
  if (!eObj.isSetFactor()) {
    if (eRefObj != null && eRefObj.isSetFactor()) {
      eObj.setFactor(eRefObj.getFactor());
    }
 else     if (eDefObj != null && eDefObj.isSetFactor()) {
      eObj.setFactor(eDefObj.getFactor());
    }
  }
  if (eRefObj != null && eRefObj.getMin() != null) {
    eObj.setMin(eRefObj.getMin());
  }
 else   if (eDefObj != null && eDefObj.getMin() != null) {
    eObj.setMin(eDefObj.getMin());
  }
  if (eRefObj != null && eRefObj.getMax() != null) {
    eObj.setMax(eRefObj.getMax());
  }
 else   if (eDefObj != null && eDefObj.getMax() != null) {
    eObj.setMax(eDefObj.getMax());
  }
}","/** 
 * Updates chart element Scale.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
public void updateScale(String name,EObject eParentObj,Scale eObj,Scale eRefObj,Scale eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetStep()) {
    if (eRefObj != null && eRefObj.isSetStep()) {
      eObj.setStep(eRefObj.getStep());
    }
 else     if (eDefObj != null && eDefObj.isSetStep()) {
      eObj.setStep(eDefObj.getStep());
    }
  }
  if (!eObj.isSetUnit()) {
    if (eRefObj != null && eRefObj.isSetUnit()) {
      eObj.setUnit(eRefObj.getUnit());
    }
 else     if (eDefObj != null && eDefObj.isSetUnit()) {
      eObj.setUnit(eDefObj.getUnit());
    }
  }
  if (!eObj.isSetMinorGridsPerUnit()) {
    if (eRefObj != null && eRefObj.isSetMinorGridsPerUnit()) {
      eObj.setMinorGridsPerUnit(eRefObj.getMinorGridsPerUnit());
    }
 else     if (eDefObj != null && eDefObj.isSetMinorGridsPerUnit()) {
      eObj.setMinorGridsPerUnit(eDefObj.getMinorGridsPerUnit());
    }
  }
  if (!eObj.isSetStepNumber()) {
    if (eRefObj != null && eRefObj.isSetStepNumber()) {
      eObj.setStepNumber(eRefObj.getStepNumber());
    }
 else     if (eDefObj != null && eDefObj.isSetStepNumber()) {
      eObj.setStepNumber(eDefObj.getStepNumber());
    }
  }
  if (!eObj.isSetShowOutside()) {
    if (eRefObj != null && eRefObj.isSetShowOutside()) {
      eObj.setShowOutside(eRefObj.isShowOutside());
    }
 else     if (eDefObj != null && eDefObj.isSetShowOutside()) {
      eObj.setShowOutside(eDefObj.isShowOutside());
    }
  }
  if (!eObj.isSetTickBetweenCategories()) {
    if (eRefObj != null && eRefObj.isSetTickBetweenCategories()) {
      eObj.setTickBetweenCategories(eRefObj.isTickBetweenCategories());
    }
 else     if (eDefObj != null && eDefObj.isSetTickBetweenCategories()) {
      eObj.setTickBetweenCategories(eDefObj.isTickBetweenCategories());
    }
  }
  if (!eObj.isSetAutoExpand()) {
    if (eRefObj != null && eRefObj.isSetAutoExpand()) {
      eObj.setAutoExpand(eRefObj.isAutoExpand());
    }
 else     if (eDefObj != null && eDefObj.isSetAutoExpand()) {
      eObj.setAutoExpand(eDefObj.isAutoExpand());
    }
  }
  if (!eObj.isSetMajorGridsStepNumber()) {
    if (eRefObj != null && eRefObj.isSetMajorGridsStepNumber()) {
      eObj.setMajorGridsStepNumber(eRefObj.getMajorGridsStepNumber());
    }
 else     if (eDefObj != null && eDefObj.isSetMajorGridsStepNumber()) {
      eObj.setMajorGridsStepNumber(eDefObj.getMajorGridsStepNumber());
    }
  }
  if (!eObj.isSetFactor()) {
    if (eRefObj != null && eRefObj.isSetFactor()) {
      eObj.setFactor(eRefObj.getFactor());
    }
 else     if (eDefObj != null && eDefObj.isSetFactor()) {
      eObj.setFactor(eDefObj.getFactor());
    }
  }
  if (eObj.getMin() == null) {
    if (eRefObj != null && eRefObj.getMin() != null) {
      eObj.setMin(eRefObj.getMin().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getMin() != null) {
      eObj.setMin(eDefObj.getMin().copyInstance());
    }
  }
  if (eObj.getMax() == null) {
    if (eRefObj != null && eRefObj.getMax() != null) {
      eObj.setMax(eRefObj.getMax().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getMax() != null) {
      eObj.setMax(eDefObj.getMax().copyInstance());
    }
  }
}",0.9806045340050378
65961,"/** 
 * Updates chart element AxisOrigin.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
public void updateAxisOrigin(String name,EObject eParentObj,AxisOrigin eObj,AxisOrigin eRefObj,AxisOrigin eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetType()) {
    if (eRefObj != null && eRefObj.isSetType()) {
      eObj.setType(eRefObj.getType());
    }
 else     if (eDefObj != null && eDefObj.isSetType()) {
      eObj.setType(eDefObj.getType());
    }
  }
  if (eRefObj != null && eRefObj.getValue() != null) {
    eObj.setValue(eRefObj.getValue());
  }
 else   if (eDefObj != null && eDefObj.getValue() != null) {
    eObj.setValue(eDefObj.getValue());
  }
}","/** 
 * Updates chart element AxisOrigin.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
public void updateAxisOrigin(String name,EObject eParentObj,AxisOrigin eObj,AxisOrigin eRefObj,AxisOrigin eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetType()) {
    if (eRefObj != null && eRefObj.isSetType()) {
      eObj.setType(eRefObj.getType());
    }
 else     if (eDefObj != null && eDefObj.isSetType()) {
      eObj.setType(eDefObj.getType());
    }
  }
  if (eObj.getValue() == null) {
    if (eRefObj != null && eRefObj.getValue() != null) {
      eObj.setValue(eRefObj.getValue().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getValue() != null) {
      eObj.setValue(eDefObj.getValue().copyInstance());
    }
  }
}",0.9736754415194936
65962,"/** 
 * Updates chart element DialRegion.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
protected void updateDialRegion(String name,EObject eParentObj,DialRegion eObj,DialRegion eRefObj,DialRegion eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetLabelAnchor()) {
    if (eRefObj != null && eRefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eRefObj.getLabelAnchor());
    }
 else     if (eDefObj != null && eDefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eDefObj.getLabelAnchor());
    }
  }
  if (!eObj.isSetInnerRadius()) {
    if (eRefObj != null && eRefObj.isSetInnerRadius()) {
      eObj.setInnerRadius(eRefObj.getInnerRadius());
    }
 else     if (eDefObj != null && eDefObj.isSetInnerRadius()) {
      eObj.setInnerRadius(eDefObj.getInnerRadius());
    }
  }
  if (!eObj.isSetOuterRadius()) {
    if (eRefObj != null && eRefObj.isSetOuterRadius()) {
      eObj.setOuterRadius(eRefObj.getOuterRadius());
    }
 else     if (eDefObj != null && eDefObj.isSetOuterRadius()) {
      eObj.setOuterRadius(eDefObj.getOuterRadius());
    }
  }
  updateLineAttributes(""String_Node_Str"",eObj,eObj.getOutline(),eRefObj == null ? null : eRefObj.getOutline(),eDefObj == null ? null : eDefObj.getOutline(),eDefOverride,checkVisible);
  updateFill(""String_Node_Str"",eObj,eObj.getFill(),eRefObj == null ? null : eRefObj.getFill(),eDefObj == null ? null : eDefObj.getFill(),eDefOverride,checkVisible);
  if (eRefObj != null && eRefObj.getStartValue() != null) {
    eObj.setStartValue(eRefObj.getStartValue());
  }
 else   if (eDefObj != null && eDefObj.getStartValue() != null) {
    eObj.setStartValue(eDefObj.getStartValue());
  }
  if (eRefObj != null && eRefObj.getEndValue() != null) {
    eObj.setEndValue(eRefObj.getEndValue());
  }
 else   if (eDefObj != null && eDefObj.getEndValue() != null) {
    eObj.setEndValue(eDefObj.getEndValue());
  }
  updateLabel(""String_Node_Str"",eObj,eObj.getLabel(),eRefObj == null ? null : eRefObj.getLabel(),eDefObj == null ? null : eDefObj.getLabel(),eDefOverride,checkVisible);
  updateFormatSpecifier(""String_Node_Str"",eObj,eObj.getFormatSpecifier(),eRefObj == null ? null : eRefObj.getFormatSpecifier(),eDefObj == null ? null : eDefObj.getFormatSpecifier(),eDefOverride,checkVisible);
  updateCursor(""String_Node_Str"",eObj,eObj.getCursor(),eRefObj == null ? null : eRefObj.getCursor(),eDefObj == null ? null : eDefObj.getCursor(),eDefOverride,checkVisible);
}","/** 
 * Updates chart element DialRegion.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param checkVisible indicates if still checking visible of chart element before updating properties of chart element.
 * @generated Don't change this method manually.
 */
protected void updateDialRegion(String name,EObject eParentObj,DialRegion eObj,DialRegion eRefObj,DialRegion eDefObj,boolean eDefOverride,boolean checkVisible){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetLabelAnchor()) {
    if (eRefObj != null && eRefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eRefObj.getLabelAnchor());
    }
 else     if (eDefObj != null && eDefObj.isSetLabelAnchor()) {
      eObj.setLabelAnchor(eDefObj.getLabelAnchor());
    }
  }
  if (!eObj.isSetInnerRadius()) {
    if (eRefObj != null && eRefObj.isSetInnerRadius()) {
      eObj.setInnerRadius(eRefObj.getInnerRadius());
    }
 else     if (eDefObj != null && eDefObj.isSetInnerRadius()) {
      eObj.setInnerRadius(eDefObj.getInnerRadius());
    }
  }
  if (!eObj.isSetOuterRadius()) {
    if (eRefObj != null && eRefObj.isSetOuterRadius()) {
      eObj.setOuterRadius(eRefObj.getOuterRadius());
    }
 else     if (eDefObj != null && eDefObj.isSetOuterRadius()) {
      eObj.setOuterRadius(eDefObj.getOuterRadius());
    }
  }
  updateLineAttributes(""String_Node_Str"",eObj,eObj.getOutline(),eRefObj == null ? null : eRefObj.getOutline(),eDefObj == null ? null : eDefObj.getOutline(),eDefOverride,checkVisible);
  updateFill(""String_Node_Str"",eObj,eObj.getFill(),eRefObj == null ? null : eRefObj.getFill(),eDefObj == null ? null : eDefObj.getFill(),eDefOverride,checkVisible);
  if (eObj.getStartValue() == null) {
    if (eRefObj != null && eRefObj.getStartValue() != null) {
      eObj.setStartValue(eRefObj.getStartValue().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getStartValue() != null) {
      eObj.setStartValue(eDefObj.getStartValue().copyInstance());
    }
  }
  if (eObj.getEndValue() == null) {
    if (eRefObj != null && eRefObj.getEndValue() != null) {
      eObj.setEndValue(eRefObj.getEndValue().copyInstance());
    }
 else     if (eDefObj != null && eDefObj.getEndValue() != null) {
      eObj.setEndValue(eDefObj.getEndValue().copyInstance());
    }
  }
  updateLabel(""String_Node_Str"",eObj,eObj.getLabel(),eRefObj == null ? null : eRefObj.getLabel(),eDefObj == null ? null : eDefObj.getLabel(),eDefOverride,checkVisible);
  updateFormatSpecifier(""String_Node_Str"",eObj,eObj.getFormatSpecifier(),eRefObj == null ? null : eRefObj.getFormatSpecifier(),eDefObj == null ? null : eDefObj.getFormatSpecifier(),eDefOverride,checkVisible);
  updateCursor(""String_Node_Str"",eObj,eObj.getCursor(),eRefObj == null ? null : eRefObj.getCursor(),eDefObj == null ? null : eDefObj.getCursor(),eDefOverride,checkVisible);
}",0.9748332322619768
65963,"/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
protected boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  cbDimension.removeAll();
  boolean bAreaSeriesMixed=isAreaSeriesMixed();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      if (bAreaSeriesMixed && dimensionArray[i].equals(IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE)) {
        continue;
      }
      cbDimension.add(dimensionArray[i]);
    }
  }
  cbDimension.setDefualtItem(chartType.getDefaultDimension());
  cbDimension.setItemData(cbDimension.getItems());
  String cache=ChartCacheManager.getInstance().getDimension(sSelectedType);
  String availableCache=getAvailableDimension(chartType,cache);
  String thisDimension=getAvailableDimension(chartType,sDimension);
  if (availableCache != thisDimension) {
    isOldExist=true;
  }
  sDimension=cache;
  cbDimension.setText(sDimension);
  return !isOldExist;
}","/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
protected boolean updateDimensionCombo(String sSelectedType){
  cbDimension.setEObjectParent(getContext().getModel());
  boolean isOldExist=false;
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  cbDimension.removeAll();
  boolean bAreaSeriesMixed=isAreaSeriesMixed();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      if (bAreaSeriesMixed && dimensionArray[i].equals(IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE)) {
        continue;
      }
      cbDimension.add(dimensionArray[i]);
    }
  }
  cbDimension.setDefualtItem(chartType.getDefaultDimension());
  cbDimension.setItemData(cbDimension.getItems());
  String cache=ChartCacheManager.getInstance().getDimension(sSelectedType);
  String availableCache=getAvailableDimension(chartType,cache);
  String thisDimension=getAvailableDimension(chartType,sDimension);
  if (availableCache != thisDimension) {
    isOldExist=true;
  }
  sDimension=cache;
  cbDimension.setText(sDimension);
  return !isOldExist;
}",0.9794446447890373
65964,"public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      if (lneLabelSpan.getValue() == 0) {
        double value=suggestLabelSpan(getAxisForProcessing());
        lneLabelSpan.setValue(value);
      }
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget.equals(cmbTypes)) {
    String selectedAxisType=cmbTypes.getSelectedItemData();
    final AxisType axisType=(selectedAxisType == null) ? getDefaultValueAxis().getType() : AxisType.getByName(selectedAxisType);
    if (getAxisForProcessing().isSetType() && getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (selectedAxisType != null) {
      getAxisForProcessing().setType(axisType);
      if (btnCategoryAxis != null) {
        boolean disableCategoryAxisUI=AxisType.TEXT_LITERAL.equals(axisType);
        getAxisForProcessing().setCategoryAxis(disableCategoryAxisUI);
        btnCategoryAxis.setSelectionState(ChartCheckbox.STATE_SELECTED);
        updateCategoryAxisUI(!disableCategoryAxisUI);
        updateReverseStateByCategoryAxisUI();
      }
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    String selectedOriginType=cmbOrigin.getSelectedItemData();
    if (selectedOriginType != null && IntersectionType.VALUE_LITERAL.getName().equals(selectedOriginType)) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
      getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
    }
 else {
      boolean enabled=false;
      if (selectedOriginType == null) {
        getAxisForProcessing().getOrigin().setValue(null);
        enabled=true;
      }
 else {
        getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
      }
      lblValue.setEnabled(enabled);
      txtValue.setEnabled(enabled);
    }
    if (selectedOriginType != null && getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    int state=btnCategoryAxis.getSelectionState();
    if (state == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetCategoryAxis();
    }
 else {
      getAxisForProcessing().setCategoryAxis(state == ChartCheckbox.STATE_SELECTED);
    }
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),state == ChartCheckbox.STATE_SELECTED);
    refreshPopupSheet();
    updateReverseStateByCategoryAxisUI();
  }
 else   if (e.widget.equals(btnReverse)) {
    if (btnReverse.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      ((ChartWithAxes)getChart()).unsetReverseCategory();
    }
 else {
      ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleVisible) {
    if (btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getTitle().unsetVisible();
    }
 else {
      getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget == btnLabelVisible) {
    if (btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getLabel().unsetVisible();
    }
 else {
      getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    handleFormatBtnSelected();
  }
 else   if (e.widget == btnStaggered) {
    if (btnStaggered.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetStaggered();
    }
 else {
      getAxisForProcessing().setStaggered(btnStaggered.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      if (lneLabelSpan.getValue() == 0) {
        double value=suggestLabelSpan(getAxisForProcessing());
        lneLabelSpan.setValue(value);
      }
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget.equals(cmbTypes)) {
    String selectedAxisType=cmbTypes.getSelectedItemData();
    final AxisType axisType=(selectedAxisType == null) ? getDefaultValueAxis().getType() : AxisType.getByName(selectedAxisType);
    if (getAxisForProcessing().isSetType() && getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (selectedAxisType != null) {
      getAxisForProcessing().setType(axisType);
      if (btnCategoryAxis != null) {
        boolean disableCategoryAxisUI=AxisType.TEXT_LITERAL.equals(axisType);
        getAxisForProcessing().setCategoryAxis(disableCategoryAxisUI);
        btnCategoryAxis.setSelectionState(ChartCheckbox.STATE_SELECTED);
        updateCategoryAxisUI(!disableCategoryAxisUI);
        updateReverseStateByCategoryAxisUI();
      }
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    String selectedOriginType=cmbOrigin.getSelectedItemData();
    if (selectedOriginType != null && IntersectionType.VALUE_LITERAL.getName().equals(selectedOriginType)) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
      getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
    }
 else {
      boolean enabled=false;
      if (selectedOriginType == null) {
        enabled=true;
      }
 else {
        getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(selectedOriginType));
      }
      getAxisForProcessing().getOrigin().setValue(null);
      lblValue.setEnabled(enabled);
      txtValue.setEnabled(enabled);
    }
    if (selectedOriginType != null && getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    int state=btnCategoryAxis.getSelectionState();
    if (state == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetCategoryAxis();
    }
 else {
      getAxisForProcessing().setCategoryAxis(state == ChartCheckbox.STATE_SELECTED);
    }
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),state == ChartCheckbox.STATE_SELECTED);
    refreshPopupSheet();
    updateReverseStateByCategoryAxisUI();
  }
 else   if (e.widget.equals(btnReverse)) {
    if (btnReverse.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      ((ChartWithAxes)getChart()).unsetReverseCategory();
    }
 else {
      ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleVisible) {
    if (btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getTitle().unsetVisible();
    }
 else {
      getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!(btnTitleVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget == btnLabelVisible) {
    if (btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getLabel().unsetVisible();
    }
 else {
      getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!(btnLabelVisible.getSelectionState() == ChartCheckbox.STATE_SELECTED) && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    handleFormatBtnSelected();
  }
 else   if (e.widget == btnStaggered) {
    if (btnStaggered.getSelectionState() == ChartCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetStaggered();
    }
 else {
      getAxisForProcessing().setStaggered(btnStaggered.getSelectionState() == ChartCheckbox.STATE_SELECTED);
    }
  }
}",0.9893733968486624
65965,"private void toggleDropDown(){
  if (bJustFocusLost) {
    bJustFocusLost=false;
    return;
  }
  if (cmpDropDown == null || cmpDropDown.isDisposed() || !cmpDropDown.isVisible()) {
    fireDropDownEvent();
    Point pLoc=UIHelper.getScreenLocation(this);
    createDropDownComponent(pLoc.x,pLoc.y + this.getSize().y);
  }
 else {
    cmpDropDown.getShell().close();
  }
}","private void toggleDropDown(){
  if (bJustFocusLost) {
    bJustFocusLost=false;
    return;
  }
  if (cmpDropDown == null || cmpDropDown.isDisposed() || !cmpDropDown.isVisible()) {
    fireDropDownEvent();
    Point pLoc=UIHelper.getScreenLocation(this);
    if (Platform.OS_MACOSX.equals(Platform.getOS())) {
      createDropDownComponent(pLoc.x,pLoc.y);
    }
 else {
      createDropDownComponent(pLoc.x,pLoc.y + this.getSize().y);
    }
  }
 else {
    cmpDropDown.getShell().close();
  }
}",0.8581314878892734
65966,"/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  currentPosition[aggrIndex]=rs.getPosition();
  for (; start < levelList.size(); ) {
    DimLevel level=(DimLevel)levelList.get(start);
    Object value1=valueMap.get(level);
    Object value2=null;
    int index=rs.getLevelIndex(level);
    Object[] keyValues=rs.getLevelKeyValue(index);
    if (keyValues != null)     value2=keyValues[rs.getLevelKeyColCount(index) - 1];
    int sortType=rs.getSortType(index) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int direction=sortType * compare(value1,value2) < 0 ? -1 : compare(value1,value2) == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() - 1 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}","/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  currentPosition[aggrIndex]=rs.getPosition();
  for (; start < levelList.size(); ) {
    DimLevel level=(DimLevel)levelList.get(start);
    Object value1=valueMap.get(level);
    Object value2=null;
    int index=rs.getLevelIndex(level);
    Object[] keyValues=rs.getLevelKeyValue(index);
    if (keyValues != null)     value2=keyValues[rs.getLevelKeyColCount(index) - 1];
    int sortType=rs.getSortType(index) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int compare=compare(value1,value2);
    int direction=sortType * compare < 0 ? -1 : compare == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() - 1 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}",0.9815010570824524
65967,"public static CalculatedMember[] createCalculatedMembersByAggrOnList(int startRsId,CubeAggrDefn[] cubeAggrs,Scriptable scope,ScriptContext cx) throws DataException {
}","private static CalculatedMember[] createCalculatedMembersByAggrOnList(int startRsId,CalculatedMember[] calculatedMembers1,CubeAggrDefn[] cubeAggrs,Scriptable scope,ScriptContext cx) throws DataException {
}",0.868632707774799
65968,"/** 
 * Populate all aggregation member in CubeQueryDefinition. For initial implementation: we only consider IMeasureDefintion we will take into consider to handle the aggregation definition in binding expression;
 * @param queryDefn
 * @param measureMapping 
 * @return
 * @throws DataException 
 */
static CalculatedMember[] getCalculatedMembers(ICubeQueryDefinition queryDefn,Scriptable scope,Map measureMapping,ScriptContext cx) throws DataException {
  CubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  populateMeasureFromBinding(queryDefn,cx);
  populateMeasureFromFilter(queryDefn,cx);
  populateMeasureFromSort(queryDefn,cx);
  CalculatedMember[] calculatedMembers1=extractMeasure(queryDefn,measureMapping);
  int startRsId=calculatedMembers1.length == 0 ? 0 : 1;
  CalculatedMember[] calculatedMembers2=createCalculatedMembersByAggrOnList(startRsId,cubeAggrs,scope,cx);
  return uniteCalculatedMember(calculatedMembers1,calculatedMembers2);
}","/** 
 * Populate all aggregation member in CubeQueryDefinition. For initial implementation: we only consider IMeasureDefintion we will take into consider to handle the aggregation definition in binding expression;
 * @param queryDefn
 * @param measureMapping 
 * @return
 * @throws DataException 
 */
static CalculatedMember[] getCalculatedMembers(ICubeQueryDefinition queryDefn,Scriptable scope,Map measureMapping,ScriptContext cx) throws DataException {
  CubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  populateMeasureFromBinding(queryDefn,cx);
  populateMeasureFromFilter(queryDefn,cx);
  populateMeasureFromSort(queryDefn,cx);
  CalculatedMember[] calculatedMembers1=extractMeasure(queryDefn,measureMapping);
  int startRsId=calculatedMembers1.length == 0 ? 0 : 1;
  CalculatedMember[] calculatedMembers2=createCalculatedMembersByAggrOnList(startRsId,calculatedMembers1,cubeAggrs,scope,cx);
  return uniteCalculatedMember(calculatedMembers1,calculatedMembers2);
}",0.9904570567553992
65969,"/** 
 * Returns instance of category series definition.
 * @param chart
 * @return
 * @since 3.7
 */
public static SeriesDefinition getCategorySeriesDefinition(Chart chart){
  return getBaseSeriesDefinitions(chart).get(0);
}","/** 
 * Returns instance of category series definition.
 * @param chart
 * @return instance of category series definition.
 * @since 3.7
 */
public static SeriesDefinition getCategorySeriesDefinition(Chart chart){
  return getBaseSeriesDefinitions(chart).get(0);
}",0.918032786885246
65970,"/** 
 * Returns a value series definitions of chart.
 * @param chart
 * @return
 * @since 3.7
 */
public static SeriesDefinition[] getValueSeriesDefinitions(Chart chart){
  SeriesDefinition[] sds=null;
  if (chart instanceof ChartWithAxes) {
    sds=((ChartWithAxes)chart).getSeriesForLegend();
  }
 else   if (chart instanceof ChartWithoutAxes) {
    sds=((ChartWithoutAxes)chart).getSeriesDefinitions().get(0).getSeriesDefinitions().toArray(new SeriesDefinition[]{});
  }
  return sds;
}","/** 
 * Returns a value series definitions of chart.
 * @param chart
 * @return a value series definitions of chart.
 * @since 3.7
 */
public static SeriesDefinition[] getValueSeriesDefinitions(Chart chart){
  SeriesDefinition[] sds=null;
  if (chart instanceof ChartWithAxes) {
    sds=((ChartWithAxes)chart).getSeriesForLegend();
  }
 else   if (chart instanceof ChartWithoutAxes) {
    sds=((ChartWithoutAxes)chart).getSeriesDefinitions().get(0).getSeriesDefinitions().toArray(new SeriesDefinition[]{});
  }
  return sds;
}",0.9635467980295568
65971,"/** 
 * Returns number of orthogonal axes.
 * @param chart
 * @return
 * @since 3.7
 */
public static int getOrthogonalAxisNumber(Chart chart){
  if (chart instanceof ChartWithAxes) {
    EList<Axis> axisList=((ChartWithAxes)chart).getAxes().get(0).getAssociatedAxes();
    return axisList.size();
  }
 else   if (chart instanceof ChartWithoutAxes) {
    return 1;
  }
  return 0;
}","/** 
 * Returns number of orthogonal axes.
 * @param chart
 * @return number of orthogonal axes.
 * @since 3.7
 */
public static int getOrthogonalAxisNumber(Chart chart){
  if (chart instanceof ChartWithAxes) {
    EList<Axis> axisList=((ChartWithAxes)chart).getAxes().get(0).getAssociatedAxes();
    return axisList.size();
  }
 else   if (chart instanceof ChartWithoutAxes) {
    return 1;
  }
  return 0;
}",0.965865992414665
65972,"/** 
 * Returns specified query.
 * @param seriesDefn
 * @param queryIndex
 * @return
 * @since 3.7
 */
public static Query getDataQuery(SeriesDefinition seriesDefn,int queryIndex){
  if (seriesDefn.getDesignTimeSeries().getDataDefinition().size() <= queryIndex) {
    Query query=QueryImpl.create(""String_Node_Str"");
    query.eAdapters().addAll(seriesDefn.eAdapters());
    seriesDefn.getDesignTimeSeries().getDataDefinition().add(query);
    return query;
  }
  return seriesDefn.getDesignTimeSeries().getDataDefinition().get(queryIndex);
}","/** 
 * Returns specified query.
 * @param seriesDefn
 * @param queryIndex
 * @return query object.
 * @since 3.7
 */
public static Query getDataQuery(SeriesDefinition seriesDefn,int queryIndex){
  if (seriesDefn.getDesignTimeSeries().getDataDefinition().size() <= queryIndex) {
    Query query=QueryImpl.create(""String_Node_Str"");
    query.eAdapters().addAll(seriesDefn.eAdapters());
    seriesDefn.getDesignTimeSeries().getDataDefinition().add(query);
    return query;
  }
  return seriesDefn.getDesignTimeSeries().getDataDefinition().get(queryIndex);
}",0.9872727272727272
65973,"AbstractLineStyleChooserComposite createLineStyleChooserComposite(Composite parent,int style,int iLineStyle,Integer[] lineStyleItems,EObject eParent,String sProperty);","/** 
 * Create instance of combo list for editing list style.
 * @param parent
 * @param style
 * @param iLineStyle
 * @param lineStyleItems
 * @param eParent
 * @param sProperty
 * @return instance of combo list for editing list style.
 */
AbstractLineStyleChooserComposite createLineStyleChooserComposite(Composite parent,int style,int iLineStyle,Integer[] lineStyleItems,EObject eParent,String sProperty);",0.5808695652173913
65974,"private void dataFileSeek() throws IOException {
  int blockIndex=(int)(position / FileDocumentManager.BLOCK_SIZE);
  int posInBlock=(int)(position % FileDocumentManager.BLOCK_SIZE);
  int dataFilePosition=((Integer)blockList.get(blockIndex)).intValue() * FileDocumentManager.BLOCK_SIZE + posInBlock;
  dataFile.seek(dataFilePosition);
}","private void dataFileSeek() throws IOException {
  int blockIndex=(int)(position / FileDocumentManager.BLOCK_SIZE);
  int posInBlock=(int)(position % FileDocumentManager.BLOCK_SIZE);
  long dataFilePosition=(long)(((Integer)blockList.get(blockIndex)).intValue()) * FileDocumentManager.BLOCK_SIZE + posInBlock;
  dataFile.seek(dataFilePosition);
}",0.9780380673499268
65975,"/** 
 * @param levelDefs
 * @param keyDataType
 * @param attributesDataType
 * @param sortedDimensionSet
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private int saveHierarchyRows(ILevelDefn[] levelDefs,int[][] keyDataType,int[][] attributesDataType,DiskSortedStack sortedDimensionSet,StopSign stopSign) throws IOException, BirtException {
  DiskSortedStack sortedDimMembers=new DiskSortedStack(Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE),true,false,Member.getCreator());
  IDiskArray[] indexKeyLists=new IDiskArray[keyDataType.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    indexKeyLists[i]=new BufferedStructureArray(IndexKey.getCreator(),Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE));
  }
  Object obj=sortedDimensionSet.pop();
  int currentIndex=0;
  IndexKey indexKey=null;
  while (obj != null) {
    if (stopSign.isStopped())     break;
    DimensionRow dimRows=(DimensionRow)obj;
    Member[] levelMembers=dimRows.getMembers();
    for (int i=0; i < indexKeyLists.length; i++) {
      indexKey=new IndexKey();
      indexKey.setKey(levelMembers[i].getKeyValues());
      indexKey.setOffset(new int[]{(int)documentObj.getFilePointer()});
      indexKey.setDimensionPos(new int[]{currentIndex});
      indexKeyLists[i].add(indexKey);
    }
    offsetDocObj.writeInt((int)documentObj.getFilePointer());
    sortedDimMembers.push(dimRows.getMembers()[levelDefs.length - 1]);
    writeDimensionRow(dimRows,keyDataType,attributesDataType);
    obj=sortedDimensionSet.pop();
    currentIndex++;
  }
  validateDimensionMembers(sortedDimMembers);
  DiskIndex[] diskIndex=new DiskIndex[indexKeyLists.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    diskIndex[i]=DiskIndex.createIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelDefs[i].getLevelName()),indexKeyLists[i],false);
  }
  levels=new Level[levelDefs.length];
  for (int i=0; i < levels.length; i++) {
    levels[i]=new Level(documentManager,levelDefs[i],keyDataType[i],attributesDataType[i],currentIndex,diskIndex[i]);
    levels[i].setLevelType(levelDefs[i].getTimeType());
  }
  for (int i=0; i < levels.length; i++) {
    this.levelMap.put(levels[i].getName(),levels[i]);
  }
  return currentIndex;
}","/** 
 * @param levelDefs
 * @param keyDataType
 * @param attributesDataType
 * @param sortedDimensionSet
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private int saveHierarchyRows(ILevelDefn[] levelDefs,int[][] keyDataType,int[][] attributesDataType,DiskSortedStack sortedDimensionSet,StopSign stopSign) throws IOException, BirtException {
  DiskSortedStack sortedDimMembers=new DiskSortedStack(Math.min(sortedDimensionSet.size(),Constants.MAX_DIMENSION_LENGTH),true,false,Member.getCreator());
  IDiskArray[] indexKeyLists=new IDiskArray[keyDataType.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    indexKeyLists[i]=new BufferedStructureArray(IndexKey.getCreator(),Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE));
  }
  Object obj=sortedDimensionSet.pop();
  int currentIndex=0;
  IndexKey indexKey=null;
  while (obj != null) {
    if (stopSign.isStopped())     break;
    DimensionRow dimRows=(DimensionRow)obj;
    Member[] levelMembers=dimRows.getMembers();
    for (int i=0; i < indexKeyLists.length; i++) {
      indexKey=new IndexKey();
      indexKey.setKey(levelMembers[i].getKeyValues());
      indexKey.setOffset(new int[]{(int)documentObj.getFilePointer()});
      indexKey.setDimensionPos(new int[]{currentIndex});
      indexKeyLists[i].add(indexKey);
    }
    offsetDocObj.writeInt((int)documentObj.getFilePointer());
    sortedDimMembers.push(dimRows.getMembers()[levelDefs.length - 1]);
    writeDimensionRow(dimRows,keyDataType,attributesDataType);
    obj=sortedDimensionSet.pop();
    currentIndex++;
  }
  validateDimensionMembers(sortedDimMembers);
  DiskIndex[] diskIndex=new DiskIndex[indexKeyLists.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    diskIndex[i]=DiskIndex.createIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelDefs[i].getLevelName()),indexKeyLists[i],false);
  }
  levels=new Level[levelDefs.length];
  for (int i=0; i < levels.length; i++) {
    levels[i]=new Level(documentManager,levelDefs[i],keyDataType[i],attributesDataType[i],currentIndex,diskIndex[i]);
    levels[i].setLevelType(levelDefs[i].getTimeType());
  }
  for (int i=0; i < levels.length; i++) {
    this.levelMap.put(levels[i].getName(),levels[i]);
  }
  return currentIndex;
}",0.8756022777047744
65976,"/** 
 * @param iterator
 * @param levelDefs
 * @return
 * @throws BirtException
 * @throws IOException
 */
private static DiskSortedStack getSortedDimRows(IDatasetIterator iterator,ILevelDefn[] levelDefs) throws BirtException, IOException {
  DiskSortedStack result=new DiskSortedStack(Constants.LIST_BUFFER_SIZE,true,true,DimensionRow.getCreator());
  int[][] levelKeyColumnIndex=new int[levelDefs.length][];
  int[][] levelAttributesIndex=new int[levelDefs.length][];
  for (int i=0; i < levelDefs.length; i++) {
    levelKeyColumnIndex[i]=new int[levelDefs[i].getKeyColumns().length];
    for (int j=0; j < levelDefs[i].getKeyColumns().length; j++) {
      levelKeyColumnIndex[i][j]=iterator.getFieldIndex(levelDefs[i].getKeyColumns()[j]);
    }
    String[] attributeColumns=levelDefs[i].getAttributeColumns();
    if (attributeColumns != null) {
      levelAttributesIndex[i]=new int[attributeColumns.length];
      for (int j=0; j < attributeColumns.length; j++) {
        levelAttributesIndex[i][j]=iterator.getFieldIndex(attributeColumns[j]);
      }
    }
  }
  Member[] levelMembers=null;
  while (iterator.next()) {
    levelMembers=new Member[levelDefs.length];
    for (int i=0; i < levelDefs.length; i++) {
      levelMembers[i]=getLevelMember(iterator,levelKeyColumnIndex[i],levelAttributesIndex[i],levelDefs[i]);
    }
    result.push(new DimensionRow(levelMembers));
  }
  return result;
}","/** 
 * @param iterator
 * @param levelDefs
 * @return
 * @throws BirtException
 * @throws IOException
 */
private static DiskSortedStack getSortedDimRows(IDatasetIterator iterator,ILevelDefn[] levelDefs) throws BirtException, IOException {
  DiskSortedStack result=new DiskSortedStack(Constants.MAX_DIMENSION_LENGTH / 2,true,true,DimensionRow.getCreator());
  int[][] levelKeyColumnIndex=new int[levelDefs.length][];
  int[][] levelAttributesIndex=new int[levelDefs.length][];
  for (int i=0; i < levelDefs.length; i++) {
    levelKeyColumnIndex[i]=new int[levelDefs[i].getKeyColumns().length];
    for (int j=0; j < levelDefs[i].getKeyColumns().length; j++) {
      levelKeyColumnIndex[i][j]=iterator.getFieldIndex(levelDefs[i].getKeyColumns()[j]);
    }
    String[] attributeColumns=levelDefs[i].getAttributeColumns();
    if (attributeColumns != null) {
      levelAttributesIndex[i]=new int[attributeColumns.length];
      for (int j=0; j < attributeColumns.length; j++) {
        levelAttributesIndex[i][j]=iterator.getFieldIndex(attributeColumns[j]);
      }
    }
  }
  Member[] levelMembers=null;
  while (iterator.next()) {
    levelMembers=new Member[levelDefs.length];
    for (int i=0; i < levelDefs.length; i++) {
      levelMembers[i]=getLevelMember(iterator,levelKeyColumnIndex[i],levelAttributesIndex[i],levelDefs[i]);
    }
    result.push(new DimensionRow(levelMembers));
  }
  return result;
}",0.9872340425531916
65977,"TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  Comparator comparator=new Row4AggregationComparator(getSortType(aggr,cubeDimensionReader));
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
    if (memoryCacheSize == 0) {
      sortedFactRows.setUseMemoryOnly(true);
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}","TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  existLastDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
      int levelIndex1=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
      int levelIndex2=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
      if (levelIndex1 == levelIndex2) {
        this.avoidExtraSort=true;
      }
    }
 else {
      existLastDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  Comparator comparator=new Row4AggregationComparator(getSortType(aggr,cubeDimensionReader));
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  if (this.existReferenceDate) {
    if (!this.avoidExtraSort) {
      sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
      if (memoryCacheSize == 0) {
        sortedFactRows.setUseMemoryOnly(true);
      }
    }
 else {
      factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
      if (memoryCacheSize == 0) {
        factRows.setUseMemoryOnly(true);
      }
      factRowPostion=0;
    }
  }
  if (this.existLastDate) {
    factRows=new BufferedStructureArray(Row4Aggregation.getCreator(),bufferSize);
    if (memoryCacheSize == 0) {
      factRows.setUseMemoryOnly(true);
    }
    factRowPostion=0;
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}",0.9436830835117772
65978,"private Row4Aggregation retrieveOneDetailRow() throws IOException {
  Row4Aggregation row=null;
  if (this.existReferenceDate) {
    row=(Row4Aggregation)this.sortedFactRows.pop();
  }
  return row;
}","private Row4Aggregation retrieveOneDetailRow() throws IOException {
  Row4Aggregation row=null;
  if (!avoidExtraSort && this.existReferenceDate) {
    row=(Row4Aggregation)this.sortedFactRows.pop();
  }
 else {
    row=this.retrieveOneFactRow();
  }
  return row;
}",0.8583690987124464
65979,"public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (row.getLevelMembers().length != newMemberSize || orignalLevelCount != newMemberSize) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
  }
 else {
    newRow=row;
  }
  if (this.existReferenceDate) {
    sortedFactRows.push(newRow);
  }
  if (this.existLastDate) {
    factRows.add(newRow);
  }
}","public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (row.getLevelMembers().length != newMemberSize || orignalLevelCount != newMemberSize) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
  }
 else {
    newRow=row;
  }
  if (this.existReferenceDate && !this.avoidExtraSort) {
    sortedFactRows.push(newRow);
  }
  if (this.existLastDate || this.avoidExtraSort) {
    factRows.add(newRow);
  }
}",0.98000850701829
65980,"public void widgetSelected(SelectionEvent e){
  if (e.getSource() instanceof CTabFolder) {
    String taskId=(String)e.item.getData();
    int indexLabel=this.wizardBase.vTaskIDs.indexOf(taskId);
    if (indexLabel >= 0) {
      this.wizardBase.switchTo(taskId);
      getButton(IDialogConstants.NEXT_ID).setEnabled(indexLabel < this.wizardBase.vTaskIDs.size() - 1);
      getButton(IDialogConstants.BACK_ID).setEnabled(indexLabel > 0);
    }
  }
 else   if (e.getSource() instanceof Button) {
    if (wizardBase.getTabToolButtons().contains(((Button)e.getSource()).getData())) {
      IButtonHandler btnHandle=(IButtonHandler)((Button)e.getSource()).getData();
      btnHandle.run();
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource() instanceof CTabFolder) {
    String taskId=(String)e.item.getData();
    int indexLabel=this.wizardBase.vTaskIDs.indexOf(taskId);
    if (indexLabel >= 0) {
      this.wizardBase.switchTo(taskId);
      getButton(IDialogConstants.NEXT_ID).setEnabled(indexLabel < this.wizardBase.vTaskIDs.size() - 1);
      getButton(IDialogConstants.BACK_ID).setEnabled(indexLabel > 0);
    }
  }
 else   if (e.getSource() instanceof ToolItem) {
    if (wizardBase.getTabToolButtons().contains(((ToolItem)e.getSource()).getData())) {
      IButtonHandler btnHandle=(IButtonHandler)((ToolItem)e.getSource()).getData();
      btnHandle.run();
    }
  }
}",0.9699570815450644
65981,"protected void createTabToolButtons(CTabFolder tabFolder){
  List<IButtonHandler> buttons=wizardBase.getTabToolButtons();
  if (buttons.size() == 0) {
    return;
  }
  Composite comp=new Composite(tabFolder,SWT.NONE);
  tabFolder.setTopRight(comp);
  GridLayout gl=new GridLayout(buttons.size(),false);
  gl.marginBottom=0;
  gl.marginHeight=0;
  gl.marginLeft=0;
  gl.marginRight=0;
  gl.marginTop=0;
  gl.marginWidth=0;
  comp.setLayout(gl);
  for (  IButtonHandler btnHandler : buttons) {
    Button btn=new Button(comp,SWT.NONE);
    GridData gd=new GridData();
    btn.setLayoutData(gd);
    btn.addSelectionListener(this);
    btn.setData(btnHandler);
    if (btnHandler.getLabel() != null) {
      btn.setText(btnHandler.getLabel());
    }
    if (btnHandler.getTooltip() != null) {
      btn.setToolTipText(btnHandler.getTooltip());
    }
    if (btnHandler.getIcon() != null) {
      btn.setImage(btnHandler.getIcon());
    }
    btnHandler.setButton(btn);
  }
}","protected void createTabToolButtons(CTabFolder tabFolder){
  List<IButtonHandler> buttons=wizardBase.getTabToolButtons();
  if (buttons.size() == 0) {
    return;
  }
  ToolBar toolbar=new ToolBar(tabFolder,SWT.FLAT | SWT.WRAP);
  tabFolder.setTopRight(toolbar);
  for (  IButtonHandler btnHandler : buttons) {
    ToolItem btn=new ToolItem(toolbar,SWT.NONE);
    btn.addSelectionListener(this);
    btn.setData(btnHandler);
    if (btnHandler.getLabel() != null) {
      btn.setText(btnHandler.getLabel());
    }
    if (btnHandler.getTooltip() != null) {
      btn.setToolTipText(btnHandler.getTooltip());
    }
    if (btnHandler.getIcon() != null) {
      btn.setImage(btnHandler.getIcon());
    }
  }
}",0.6325193567599762
65982,"/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion();
    if (this.version == VersionManager.VERSION_2_0)     this.version=VersionManager.getLatestVersion();
    vm.setVersion(this.version);
  }
 else   if (context.getMode() == DataEngineContext.MODE_UPDATE && this.rootQueryResultID == null) {
    if (this.context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
      this.version=VersionManager.getLatestVersion();
    }
 else     this.version=vm.getVersion();
  }
 else {
    this.version=vm.getVersion();
  }
}","/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion();
    if (this.version == VersionManager.VERSION_2_0)     this.version=VersionManager.getLatestVersion();
    vm.setVersion(this.version);
  }
 else   if (context.getMode() == DataEngineContext.MODE_UPDATE && this.rootQueryResultID == null) {
    if (this.context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
      this.version=VersionManager.getLatestVersion();
      vm.setVersion(this.version);
    }
 else     this.version=vm.getVersion();
  }
 else {
    this.version=vm.getVersion();
  }
}",0.986797434930215
65983,"public void widgetSelected(SelectionEvent e){
  if (e.getSource() instanceof CTabFolder) {
    String taskId=(String)e.item.getData();
    int indexLabel=this.wizardBase.vTaskIDs.indexOf(taskId);
    if (indexLabel >= 0) {
      this.wizardBase.switchTo(taskId);
      getButton(IDialogConstants.NEXT_ID).setEnabled(indexLabel < this.wizardBase.vTaskIDs.size() - 1);
      getButton(IDialogConstants.BACK_ID).setEnabled(indexLabel > 0);
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource() instanceof CTabFolder) {
    String taskId=(String)e.item.getData();
    int indexLabel=this.wizardBase.vTaskIDs.indexOf(taskId);
    if (indexLabel >= 0) {
      this.wizardBase.switchTo(taskId);
      getButton(IDialogConstants.NEXT_ID).setEnabled(indexLabel < this.wizardBase.vTaskIDs.size() - 1);
      getButton(IDialogConstants.BACK_ID).setEnabled(indexLabel > 0);
    }
  }
 else   if (e.getSource() instanceof Button) {
    if (wizardBase.getTabToolButtons().contains(((Button)e.getSource()).getData())) {
      IButtonHandler btnHandle=(IButtonHandler)((Button)e.getSource()).getData();
      btnHandle.run();
    }
  }
}",0.7832167832167832
65984,"protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.verticalSpacing=0;
    layout.horizontalSpacing=0;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    composite.setFont(parent.getFont());
  }
  Label lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmpTaskContainer=new CTabFolder(composite,SWT.TOP | SWT.FLAT);
{
    cmpTaskContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpTaskContainer.setTabHeight(25);
    cmpTaskContainer.addSelectionListener(this);
  }
  lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.verticalSpacing=0;
    layout.horizontalSpacing=0;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    composite.setFont(parent.getFont());
  }
  Label lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmpTaskContainer=new CTabFolder(composite,SWT.TOP | SWT.FLAT);
{
    cmpTaskContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpTaskContainer.setTabHeight(25);
    cmpTaskContainer.addSelectionListener(this);
  }
  createTabToolButtons(cmpTaskContainer);
  lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  return composite;
}",0.978102189781022
65985,"public boolean isEnabled(){
  return !DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle());
}","public boolean isEnabled(){
  CubeHandle cubeHandle=measureViewHandle.getCrosstab().getCube();
  if (cubeHandle == null) {
    return false;
  }
  return !DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle());
}",0.6422018348623854
65986,"public boolean isEnabled(){
  return !DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle());
}","public boolean isEnabled(){
  CubeHandle cubeHandle=measureViewHandle.getCrosstab().getCube();
  if (cubeHandle == null) {
    return false;
  }
  return !DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle());
}",0.6422018348623854
65987,"public Object get(String arg0,Scriptable scope){
  try {
    if (ScriptConstants.OUTER_RESULT_KEYWORD.equals(arg0))     return cursor.getObject(ScriptConstants.OUTER_RESULT_KEYWORD);
    return cursor.getObject(arg0);
  }
 catch (  OLAPException e) {
    throw Context.reportRuntimeError(e.getLocalizedMessage());
  }
}","public Object get(int arg0,Scriptable scope){
  try {
    return cursor.getObject(String.valueOf(arg0));
  }
 catch (  OLAPException e) {
    throw Context.reportRuntimeError(e.getLocalizedMessage());
  }
}",0.6323809523809524
65988,"/** 
 * Returns instance of default value chart.
 * @return
 */
public Chart getDefaultValueChart(){
  return this.defaultValueChart;
}","/** 
 * Returns instance of default value chart.
 * @return instance of default value chart.
 */
public Chart getDefaultValueChart(){
  return this.defaultValueChart;
}",0.8910891089108911
65989,"/** 
 * @param x
 * @param y
 * @param z
 * @return
 */
public static Angle3D create(double x,double y,double z){
  final Angle3DImpl angle=new Angle3DImpl();
  angle.xAngle=x;
  angle.xAngleESet=true;
  angle.yAngle=y;
  angle.yAngleESet=true;
  angle.zAngle=z;
  angle.zAngleESet=true;
  angle.type=AngleType.NONE_LITERAL;
  angle.typeESet=true;
  return angle;
}","/** 
 * @param x
 * @param y
 * @param z
 * @return instance of <code>Angle3D</code>.
 */
public static Angle3D create(double x,double y,double z){
  final Angle3DImpl angle=new Angle3DImpl();
  angle.xAngle=x;
  angle.xAngleESet=true;
  angle.yAngle=y;
  angle.yAngleESet=true;
  angle.zAngle=z;
  angle.zAngleESet=true;
  angle.type=AngleType.NONE_LITERAL;
  angle.typeESet=true;
  return angle;
}",0.9554973821989527
65990,"/** 
 * Returns a curveFitting instance.
 * @return
 */
public static CurveFitting create(){
  final CurveFitting cf=ComponentFactory.eINSTANCE.createCurveFitting();
  ((CurveFittingImpl)cf).initialize();
  return cf;
}","/** 
 * Returns a curveFitting instance.
 * @return instance of <code>CurveFitting</code>.
 */
public static CurveFitting create(){
  final CurveFitting cf=ComponentFactory.eINSTANCE.createCurveFitting();
  ((CurveFittingImpl)cf).initialize();
  return cf;
}",0.9182389937106918
65991,"/** 
 * @return
 */
public static final DialRegion create(){
  DialRegion dr=ComponentFactory.eINSTANCE.createDialRegion();
  ((DialRegionImpl)dr).initialize();
  return dr;
}","/** 
 * @return instance of <code>DialRegion</code>.
 */
public static final DialRegion create(){
  DialRegion dr=ComponentFactory.eINSTANCE.createDialRegion();
  ((DialRegionImpl)dr).initialize();
  return dr;
}",0.9043927648578812
65992,"/** 
 * @return
 */
public static final Needle create(){
  Needle nl=ComponentFactory.eINSTANCE.createNeedle();
  ((NeedleImpl)nl).initialize();
  return nl;
}","/** 
 * @return instance of <code>Needle</code>.
 */
public static final Needle create(){
  Needle nl=ComponentFactory.eINSTANCE.createNeedle();
  ((NeedleImpl)nl).initialize();
  return nl;
}",0.905982905982906
65993,"/** 
 * @return
 */
public static final Needle createDefault(){
  Needle nl=ComponentFactory.eINSTANCE.createNeedle();
  ((NeedleImpl)nl).initDefault();
  return nl;
}","/** 
 * @return instance of <code>Needle</code> without setting 'isSet' flag.
 */
public static final Needle createDefault(){
  Needle nl=ComponentFactory.eINSTANCE.createNeedle();
  ((NeedleImpl)nl).initDefault();
  return nl;
}",0.8434343434343434
65994,"/** 
 * Creates instance of default value chart according to specified chart type.
 * @param cm
 * @return chart instance with default values.
 */
public static Chart createDefaultValueChartInstance(Chart cm){
  Chart instance=null;
  if (cm instanceof DialChart) {
    instance=DefaultValueProvider.defDialChart().copyInstance();
  }
 else   if (cm instanceof ChartWithoutAxes) {
    instance=DefaultValueProvider.defChartWithoutAxes().copyInstance();
  }
 else {
    instance=DefaultValueProvider.defChartWithAxes().copyInstance();
  }
  SeriesDefinition sd=ChartUtil.getOrthogonalSeriesDefinitions(instance,0).get(0);
  List<Series> seriesList=sd.getSeries();
  seriesList.clear();
  if (instance instanceof ChartWithAxes) {
    seriesList.add(DefaultValueProvider.defBarSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defBubbleSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defScatterSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defDifferenceSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defAreaSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defLineSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defGanttSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defStockSeries().copyInstance());
  }
 else {
    seriesList.add(DefaultValueProvider.defDialSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defPieSeries().copyInstance());
  }
  return instance;
}","/** 
 * Creates instance of default value chart according to specified chart type.
 * @param cm
 * @return chart instance with default values.
 */
public static Chart createDefaultValueChartInstance(Chart cm){
  Chart instance=getDefaultValueChart(cm).copyInstance();
  SeriesDefinition sd=ChartUtil.getOrthogonalSeriesDefinitions(instance,0).get(0);
  List<Series> seriesList=sd.getSeries();
  seriesList.clear();
  if (instance instanceof ChartWithAxes) {
    seriesList.add(DefaultValueProvider.defBarSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defBubbleSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defScatterSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defDifferenceSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defAreaSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defLineSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defGanttSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defStockSeries().copyInstance());
  }
 else {
    seriesList.add(DefaultValueProvider.defDialSeries().copyInstance());
    seriesList.add(DefaultValueProvider.defPieSeries().copyInstance());
  }
  return instance;
}",0.6693430656934306
65995,"public void launch(String filePath){
  try {
    Class<?> claexten=Class.forName(""String_Node_Str"");
    Field saTypes=claexten.getDeclaredField(""String_Node_Str"");
    saTypes.setAccessible(true);
    saTypes.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeriesUI=claexten.getDeclaredField(""String_Node_Str"");
    saSeriesUI.setAccessible(true);
    saSeriesUI.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Class<?> claps=Class.forName(""String_Node_Str"");
    Field saDataSetProcessors=claps.getDeclaredField(""String_Node_Str"");
    saDataSetProcessors.setAccessible(true);
    saDataSetProcessors.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saRenderers=claps.getDeclaredField(""String_Node_Str"");
    saRenderers.setAccessible(true);
    saRenderers.set(null,new String[]{null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeries=claps.getDeclaredField(""String_Node_Str"");
    saSeries.setAccessible(true);
    saSeries.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  Display.getDefault();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  ChartEngine.instance(config);
  final SampleStandardDataSheet ssd=new SampleStandardDataSheet();
  if (!UIHelper.isEclipseMode()) {
    try {
      TasksManager.instance().registerTask(TaskSelectType.class.getName(),new TaskSelectType());
      TasksManager.instance().registerTask(TaskSelectData.class.getName(),new TaskSelectData(){
        @Override public void doPreview(){
          super.doPreview();
          ssd.refreshSampleDataPreiview();
        }
      }
);
      TasksManager.instance().registerTask(TaskFormatChart.class.getName(),new TaskFormatChart());
      String sChartTasks=TaskSelectType.class.getName() + ""String_Node_Str"" + TaskSelectData.class.getName()+ ""String_Node_Str""+ TaskFormatChart.class.getName();
      TasksManager.instance().registerWizard(ChartWizard.class.getName(),sChartTasks,""String_Node_Str"");
    }
 catch (    Exception e) {
      WizardBase.displayException(e);
    }
  }
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,ssd);
  ((SimpleUIServiceProviderImpl)context.getUIServiceProvider()).setFormatSpecifierHandler(new FormatSpecifierHandler());
  ssd.setContext(context);
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.addPredefinedQuery(QUERY_VALUE,new String[]{});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    if (contextResult != null) {
      os=new FileOutputStream(chartFile);
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      os=new FileOutputStream(chartFile);
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public void launch(String filePath){
  try {
    Class<?> claexten=Class.forName(""String_Node_Str"");
    Field saTypes=claexten.getDeclaredField(""String_Node_Str"");
    saTypes.setAccessible(true);
    saTypes.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeriesUI=claexten.getDeclaredField(""String_Node_Str"");
    saSeriesUI.setAccessible(true);
    saSeriesUI.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Class<?> claps=Class.forName(""String_Node_Str"");
    Field saDataSetProcessors=claps.getDeclaredField(""String_Node_Str"");
    saDataSetProcessors.setAccessible(true);
    saDataSetProcessors.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saRenderers=claps.getDeclaredField(""String_Node_Str"");
    saRenderers.setAccessible(true);
    saRenderers.set(null,new String[]{null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeries=claps.getDeclaredField(""String_Node_Str"");
    saSeries.setAccessible(true);
    saSeries.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  Display.getDefault();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  ChartEngine.instance(config);
  final SampleStandardDataSheet ssd=new SampleStandardDataSheet();
  if (!UIHelper.isEclipseMode()) {
    try {
      TasksManager.instance().registerTask(TaskSelectType.class.getName(),new TaskSelectType());
      TasksManager.instance().registerTask(TaskSelectData.class.getName(),new TaskSelectData(){
        @Override public void doPreview(){
          super.doPreview();
          ssd.refreshSampleDataPreiview();
        }
      }
);
      TasksManager.instance().registerTask(TaskFormatChart.class.getName(),new TaskFormatChart());
      String sChartTasks=TaskSelectType.class.getName() + ""String_Node_Str"" + TaskSelectData.class.getName()+ ""String_Node_Str""+ TaskFormatChart.class.getName();
      TasksManager.instance().registerWizard(ChartWizard.class.getName(),sChartTasks,""String_Node_Str"");
    }
 catch (    Exception e) {
      WizardBase.displayException(e);
    }
  }
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,ssd,new ChartUIFactory());
  ((SimpleUIServiceProviderImpl)context.getUIServiceProvider()).setFormatSpecifierHandler(new FormatSpecifierHandler());
  ssd.setContext(context);
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.addPredefinedQuery(QUERY_VALUE,new String[]{});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    if (contextResult != null) {
      os=new FileOutputStream(chartFile);
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      os=new FileOutputStream(chartFile);
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.9981234920918596
65996,"public void handleEvent(Event event){
  if (event.widget.equals(catLabelAttr)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
switch (event.type) {
case LabelAttributesComposite.VISIBILITY_CHANGED_EVENT:
      ChartElementUtil.setEObjectAttribute(series.getCatLabel(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    break;
case LabelAttributesComposite.FONT_CHANGED_EVENT:
  series.getCatLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
series.getCatLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
series.getCatLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.SHADOW_CHANGED_EVENT:
series.getCatLabel().setShadowColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",event.data,isUnset);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
series.getCatLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
break;
case LabelAttributesComposite.INSETS_CHANGED_EVENT:
series.getCatLabel().setInsets((Insets)event.data);
break;
}
}
 else if (event.widget.equals(btnCatLabels)) {
ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnCatLabels.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnCatLabels.getSelectionState() == TristateCheckbox.STATE_GRAYED);
updateUIState();
}
 else if (event.widget.equals(btnCLFormatSpecifier)) {
FormatSpecifier formatspecifier=null;
if (series.getCatLabelFormatSpecifier() != null) {
formatspecifier=series.getCatLabelFormatSpecifier();
}
getContext().getUIServiceProvider().getFormatSpecifierHandler().handleFormatSpecifier(cmpContent.getShell(),Messages.getString(""String_Node_Str""),new AxisType[]{AxisType.LINEAR_LITERAL,AxisType.TEXT_LITERAL,AxisType.DATE_TIME_LITERAL},formatspecifier,series,""String_Node_Str"",getContext());
}
}","public void handleEvent(Event event){
  if (event.widget.equals(catLabelAttr)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
switch (event.type) {
case LabelAttributesComposite.VISIBILITY_CHANGED_EVENT:
      ChartElementUtil.setEObjectAttribute(series.getCatLabel(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    break;
case LabelAttributesComposite.FONT_CHANGED_EVENT:
  series.getCatLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
series.getCatLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
series.getCatLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.SHADOW_CHANGED_EVENT:
series.getCatLabel().setShadowColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",event.data,isUnset);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
series.getCatLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
break;
case LabelAttributesComposite.INSETS_CHANGED_EVENT:
series.getCatLabel().setInsets((Insets)event.data);
break;
}
}
 else if (event.widget.equals(btnCatLabels)) {
ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnCatLabels.getSelectionState() == ChartCheckbox.STATE_SELECTED,btnCatLabels.getSelectionState() == ChartCheckbox.STATE_GRAYED);
updateUIState();
}
 else if (event.widget.equals(btnCLFormatSpecifier)) {
FormatSpecifier formatspecifier=null;
if (series.getCatLabelFormatSpecifier() != null) {
formatspecifier=series.getCatLabelFormatSpecifier();
}
getContext().getUIServiceProvider().getFormatSpecifierHandler().handleFormatSpecifier(cmpContent.getShell(),Messages.getString(""String_Node_Str""),new AxisType[]{AxisType.LINEAR_LITERAL,AxisType.TEXT_LITERAL,AxisType.DATE_TIME_LITERAL},formatspecifier,series,""String_Node_Str"",getContext());
}
}",0.994658997534922
65997,"public RadarCategoryLabelSheet(String title,ChartWizardContext context,boolean needRefresh,RadarSeries series){
  super(title,context,needRefresh);
  this.series=series;
}","public RadarCategoryLabelSheet(String title,ChartWizardContext context,boolean needRefresh,RadarSeries series){
  super(title,context,needRefresh);
  this.series=series;
  this.defSeries=(RadarSeries)ChartDefaultValueUtil.getDefaultSeries(series);
}",0.8142857142857143
65998,"@Override protected Composite getComponent(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Group grpLine=new Group(cmpContent,SWT.NONE);
  GridLayout glLine1b=new GridLayout(2,false);
  grpLine.setLayout(glLine1b);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  btnCatLabels=new TristateCheckbox(grpLine,SWT.NONE);
{
    btnCatLabels.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    gd.horizontalSpan=2;
    btnCatLabels.setLayoutData(gd);
    btnCatLabels.setSelectionState(series.isSetShowCatLabels() ? (series.isShowCatLabels() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnCatLabels.addListener(SWT.Selection,this);
  }
  LabelAttributesContext clattributesContext=new LabelAttributesContext();
  clattributesContext.isPositionEnabled=false;
  clattributesContext.isFontAlignmentEnabled=false;
  clattributesContext.isVisibilityEnabled=ChartUIExtensionUtil.canEnableUI(btnCatLabels);
  if (series.getCatLabel() == null) {
    org.eclipse.birt.chart.model.component.Label lab=LabelImpl.create();
    series.setCatLabel(lab);
  }
  catLabelAttr=new LabelAttributesComposite(grpLine,SWT.NONE,getContext(),clattributesContext,null,null,series.getCatLabel(),getChart().getUnits());
  GridData cla=new GridData(GridData.FILL_HORIZONTAL);
  cla.horizontalSpan=2;
  catLabelAttr.setLayoutData(cla);
  catLabelAttr.addListener(this);
  catLabelAttr.setDefaultLabelValue(LabelImpl.createDefault());
  btnCLFormatSpecifier=new Button(grpLine,SWT.PUSH);
{
    GridData gdBTNFormatSpecifier=new GridData();
    gdBTNFormatSpecifier.horizontalIndent=-3;
    gdBTNFormatSpecifier.horizontalSpan=2;
    btnCLFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
    btnCLFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnCLFormatSpecifier.addListener(SWT.Selection,this);
    btnCLFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  }
  updateUIState();
  return cmpContent;
}","@Override protected Composite getComponent(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Group grpLine=new Group(cmpContent,SWT.NONE);
  GridLayout glLine1b=new GridLayout(2,false);
  grpLine.setLayout(glLine1b);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  btnCatLabels=getContext().getUIFactory().createChartCheckbox(grpLine,SWT.NONE,defSeries.isShowCatLabels());
{
    btnCatLabels.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    gd.horizontalSpan=2;
    btnCatLabels.setLayoutData(gd);
    btnCatLabels.setSelectionState(series.isSetShowCatLabels() ? (series.isShowCatLabels() ? ChartCheckbox.STATE_SELECTED : ChartCheckbox.STATE_UNSELECTED) : ChartCheckbox.STATE_GRAYED);
    btnCatLabels.addListener(SWT.Selection,this);
  }
  LabelAttributesContext clattributesContext=new LabelAttributesContext();
  clattributesContext.isPositionEnabled=false;
  clattributesContext.isFontAlignmentEnabled=false;
  clattributesContext.isVisibilityEnabled=ChartUIExtensionUtil.canEnableUI(btnCatLabels);
  if (series.getCatLabel() == null) {
    org.eclipse.birt.chart.model.component.Label lab=LabelImpl.create();
    series.setCatLabel(lab);
  }
  catLabelAttr=new LabelAttributesComposite(grpLine,SWT.NONE,getContext(),clattributesContext,null,null,series.getCatLabel(),getChart().getUnits(),defSeries.getCatLabel());
  GridData cla=new GridData(GridData.FILL_HORIZONTAL);
  cla.horizontalSpan=2;
  catLabelAttr.setLayoutData(cla);
  catLabelAttr.addListener(this);
  catLabelAttr.setDefaultLabelValue(LabelImpl.createDefault());
  btnCLFormatSpecifier=new Button(grpLine,SWT.PUSH);
{
    GridData gdBTNFormatSpecifier=new GridData();
    gdBTNFormatSpecifier.horizontalIndent=-3;
    gdBTNFormatSpecifier.horizontalSpan=2;
    btnCLFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
    btnCLFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnCLFormatSpecifier.addListener(SWT.Selection,this);
    btnCLFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  }
  updateUIState();
  return cmpContent;
}",0.9685562444641276
65999,"@Override public int compareTo(Members other){
  for (int i=0; i < members.length; i++) {
    int result=members[i].compareTo(other.members[i]);
    if (result != 0) {
      return result;
    }
  }
  return 0;
}","public int compareTo(Members other){
  for (int i=0; i < members.length; i++) {
    int result=members[i].compareTo(other.members[i]);
    if (result != 0) {
      return result;
    }
  }
  return 0;
}",0.9758454106280192
66000,"/** 
 * Get the argument info list if the function has
 * @return the corresponding argument info in time functions.
 */
public List<IArgumentInfo> getArguments(){
  List<IArgumentInfo> arguments=new ArrayList<IArgumentInfo>();
  period1=new ArgumentInfo(IArgumentInfo.PERIOD_1,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1),false);
  period2=new ArgumentInfo(IArgumentInfo.PERIOD_2,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2),false);
  if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.WEEK_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO)) {
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.NEXT_N_PERIODS)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
  }
  return arguments;
}","/** 
 * Get the argument info list if the function has
 * @return the corresponding argument info in time functions.
 */
public List<IArgumentInfo> getArguments(){
  List<IArgumentInfo> arguments=new ArrayList<IArgumentInfo>();
  period1=new ArgumentInfo(IArgumentInfo.PERIOD_1,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1),false);
  period2=new ArgumentInfo(IArgumentInfo.PERIOD_2,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2),false);
  if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.WEEK_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO)) {
    for (int i=0; i < this.period_type1.size(); i++) {
      if (this.period_type1.get(i).name().equals(IArgumentInfo.Period_Type.Period_Type_ENUM.DAY.name())) {
        this.period_type1.remove(this.period_type1.get(i));
        break;
      }
    }
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO)) {
    for (int i=0; i < this.period_type1.size(); i++) {
      if (this.period_type1.get(i).name().equals(IArgumentInfo.Period_Type.Period_Type_ENUM.DAY.name())) {
        this.period_type1.remove(this.period_type1.get(i));
        break;
      }
    }
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO)) {
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.NEXT_N_PERIODS)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
  }
  return arguments;
}",0.955339456149829
